

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Dec 03 16:16:46 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	psect	text41,local,class=CODE,merge=1,delta=2
    54                           	psect	text42,local,class=CODE,merge=1,delta=2
    55                           	psect	text43,local,class=CODE,merge=1,delta=2
    56                           	psect	text44,local,class=CODE,merge=1,delta=2
    57                           	psect	text45,local,class=CODE,merge=1,delta=2
    58                           	psect	text46,local,class=CODE,merge=1,delta=2
    59                           	psect	text47,local,class=CODE,merge=1,delta=2
    60                           	psect	text48,local,class=CODE,merge=1,delta=2
    61                           	psect	text49,local,class=CODE,merge=1,delta=2
    62                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text51,local,class=CODE,merge=1,delta=2
    64                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text53,local,class=CODE,merge=1,delta=2
    66                           	psect	text54,local,class=CODE,merge=1,delta=2
    67                           	psect	text55,local,class=CODE,merge=1,delta=2
    68                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text58,local,class=CODE,merge=1,delta=2
    71                           	psect	intentry,global,class=CODE,delta=2
    72                           	psect	text59,local,class=CODE,merge=1,delta=2
    73                           	psect	text60,local,class=CODE,merge=1,delta=2
    74                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    75                           	dabs	1,0x7E,2
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  0007                     	;# 
    84  0009                     	;# 
    85  000A                     	;# 
    86  000B                     	;# 
    87  000C                     	;# 
    88  000D                     	;# 
    89  000E                     	;# 
    90  000E                     	;# 
    91  000F                     	;# 
    92  0010                     	;# 
    93  0011                     	;# 
    94  0012                     	;# 
    95  0013                     	;# 
    96  0014                     	;# 
    97  0015                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0017                     	;# 
   101  0018                     	;# 
   102  0019                     	;# 
   103  001A                     	;# 
   104  001B                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  001D                     	;# 
   108  001E                     	;# 
   109  001F                     	;# 
   110  0081                     	;# 
   111  0085                     	;# 
   112  0086                     	;# 
   113  0087                     	;# 
   114  0089                     	;# 
   115  008C                     	;# 
   116  008D                     	;# 
   117  008E                     	;# 
   118  008F                     	;# 
   119  0090                     	;# 
   120  0091                     	;# 
   121  0092                     	;# 
   122  0093                     	;# 
   123  0093                     	;# 
   124  0094                     	;# 
   125  0095                     	;# 
   126  0095                     	;# 
   127  0096                     	;# 
   128  0096                     	;# 
   129  0098                     	;# 
   130  0099                     	;# 
   131  009C                     	;# 
   132  009D                     	;# 
   133  009F                     	;# 
   134  0108                     	;# 
   135  0109                     	;# 
   136  010C                     	;# 
   137  010C                     	;# 
   138  010D                     	;# 
   139  010D                     	;# 
   140  010E                     	;# 
   141  010F                     	;# 
   142  0185                     	;# 
   143  0186                     	;# 
   144  018C                     	;# 
   145  0000                     	;# 
   146  0001                     	;# 
   147  0002                     	;# 
   148  0003                     	;# 
   149  0004                     	;# 
   150  0005                     	;# 
   151  0006                     	;# 
   152  0007                     	;# 
   153  0009                     	;# 
   154  000A                     	;# 
   155  000B                     	;# 
   156  000C                     	;# 
   157  000D                     	;# 
   158  000E                     	;# 
   159  000E                     	;# 
   160  000F                     	;# 
   161  0010                     	;# 
   162  0011                     	;# 
   163  0012                     	;# 
   164  0013                     	;# 
   165  0014                     	;# 
   166  0015                     	;# 
   167  0015                     	;# 
   168  0016                     	;# 
   169  0017                     	;# 
   170  0018                     	;# 
   171  0019                     	;# 
   172  001A                     	;# 
   173  001B                     	;# 
   174  001B                     	;# 
   175  001C                     	;# 
   176  001D                     	;# 
   177  001E                     	;# 
   178  001F                     	;# 
   179  0081                     	;# 
   180  0085                     	;# 
   181  0086                     	;# 
   182  0087                     	;# 
   183  0089                     	;# 
   184  008C                     	;# 
   185  008D                     	;# 
   186  008E                     	;# 
   187  008F                     	;# 
   188  0090                     	;# 
   189  0091                     	;# 
   190  0092                     	;# 
   191  0093                     	;# 
   192  0093                     	;# 
   193  0094                     	;# 
   194  0095                     	;# 
   195  0095                     	;# 
   196  0096                     	;# 
   197  0096                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009F                     	;# 
   203  0108                     	;# 
   204  0109                     	;# 
   205  010C                     	;# 
   206  010C                     	;# 
   207  010D                     	;# 
   208  010D                     	;# 
   209  010E                     	;# 
   210  010F                     	;# 
   211  0185                     	;# 
   212  0186                     	;# 
   213  018C                     	;# 
   214  0000                     	;# 
   215  0001                     	;# 
   216  0002                     	;# 
   217  0003                     	;# 
   218  0004                     	;# 
   219  0005                     	;# 
   220  0006                     	;# 
   221  0007                     	;# 
   222  0009                     	;# 
   223  000A                     	;# 
   224  000B                     	;# 
   225  000C                     	;# 
   226  000D                     	;# 
   227  000E                     	;# 
   228  000E                     	;# 
   229  000F                     	;# 
   230  0010                     	;# 
   231  0011                     	;# 
   232  0012                     	;# 
   233  0013                     	;# 
   234  0014                     	;# 
   235  0015                     	;# 
   236  0015                     	;# 
   237  0016                     	;# 
   238  0017                     	;# 
   239  0018                     	;# 
   240  0019                     	;# 
   241  001A                     	;# 
   242  001B                     	;# 
   243  001B                     	;# 
   244  001C                     	;# 
   245  001D                     	;# 
   246  001E                     	;# 
   247  001F                     	;# 
   248  0081                     	;# 
   249  0085                     	;# 
   250  0086                     	;# 
   251  0087                     	;# 
   252  0089                     	;# 
   253  008C                     	;# 
   254  008D                     	;# 
   255  008E                     	;# 
   256  008F                     	;# 
   257  0090                     	;# 
   258  0091                     	;# 
   259  0092                     	;# 
   260  0093                     	;# 
   261  0093                     	;# 
   262  0094                     	;# 
   263  0095                     	;# 
   264  0095                     	;# 
   265  0096                     	;# 
   266  0096                     	;# 
   267  0098                     	;# 
   268  0099                     	;# 
   269  009C                     	;# 
   270  009D                     	;# 
   271  009F                     	;# 
   272  0108                     	;# 
   273  0109                     	;# 
   274  010C                     	;# 
   275  010C                     	;# 
   276  010D                     	;# 
   277  010D                     	;# 
   278  010E                     	;# 
   279  010F                     	;# 
   280  0185                     	;# 
   281  0186                     	;# 
   282  018C                     	;# 
   283  0000                     	;# 
   284  0001                     	;# 
   285  0002                     	;# 
   286  0003                     	;# 
   287  0004                     	;# 
   288  0005                     	;# 
   289  0006                     	;# 
   290  0007                     	;# 
   291  0009                     	;# 
   292  000A                     	;# 
   293  000B                     	;# 
   294  000C                     	;# 
   295  000D                     	;# 
   296  000E                     	;# 
   297  000E                     	;# 
   298  000F                     	;# 
   299  0010                     	;# 
   300  0011                     	;# 
   301  0012                     	;# 
   302  0013                     	;# 
   303  0014                     	;# 
   304  0015                     	;# 
   305  0015                     	;# 
   306  0016                     	;# 
   307  0017                     	;# 
   308  0018                     	;# 
   309  0019                     	;# 
   310  001A                     	;# 
   311  001B                     	;# 
   312  001B                     	;# 
   313  001C                     	;# 
   314  001D                     	;# 
   315  001E                     	;# 
   316  001F                     	;# 
   317  0081                     	;# 
   318  0085                     	;# 
   319  0086                     	;# 
   320  0087                     	;# 
   321  0089                     	;# 
   322  008C                     	;# 
   323  008D                     	;# 
   324  008E                     	;# 
   325  008F                     	;# 
   326  0090                     	;# 
   327  0091                     	;# 
   328  0092                     	;# 
   329  0093                     	;# 
   330  0093                     	;# 
   331  0094                     	;# 
   332  0095                     	;# 
   333  0095                     	;# 
   334  0096                     	;# 
   335  0096                     	;# 
   336  0098                     	;# 
   337  0099                     	;# 
   338  009C                     	;# 
   339  009D                     	;# 
   340  009F                     	;# 
   341  0108                     	;# 
   342  0109                     	;# 
   343  010C                     	;# 
   344  010C                     	;# 
   345  010D                     	;# 
   346  010D                     	;# 
   347  010E                     	;# 
   348  010F                     	;# 
   349  0185                     	;# 
   350  0186                     	;# 
   351  018C                     	;# 
   352  0000                     	;# 
   353  0001                     	;# 
   354  0002                     	;# 
   355  0003                     	;# 
   356  0004                     	;# 
   357  0005                     	;# 
   358  0006                     	;# 
   359  0007                     	;# 
   360  0009                     	;# 
   361  000A                     	;# 
   362  000B                     	;# 
   363  000C                     	;# 
   364  000D                     	;# 
   365  000E                     	;# 
   366  000E                     	;# 
   367  000F                     	;# 
   368  0010                     	;# 
   369  0011                     	;# 
   370  0012                     	;# 
   371  0013                     	;# 
   372  0014                     	;# 
   373  0015                     	;# 
   374  0015                     	;# 
   375  0016                     	;# 
   376  0017                     	;# 
   377  0018                     	;# 
   378  0019                     	;# 
   379  001A                     	;# 
   380  001B                     	;# 
   381  001B                     	;# 
   382  001C                     	;# 
   383  001D                     	;# 
   384  001E                     	;# 
   385  001F                     	;# 
   386  0081                     	;# 
   387  0085                     	;# 
   388  0086                     	;# 
   389  0087                     	;# 
   390  0089                     	;# 
   391  008C                     	;# 
   392  008D                     	;# 
   393  008E                     	;# 
   394  008F                     	;# 
   395  0090                     	;# 
   396  0091                     	;# 
   397  0092                     	;# 
   398  0093                     	;# 
   399  0093                     	;# 
   400  0094                     	;# 
   401  0095                     	;# 
   402  0095                     	;# 
   403  0096                     	;# 
   404  0096                     	;# 
   405  0098                     	;# 
   406  0099                     	;# 
   407  009C                     	;# 
   408  009D                     	;# 
   409  009F                     	;# 
   410  0108                     	;# 
   411  0109                     	;# 
   412  010C                     	;# 
   413  010C                     	;# 
   414  010D                     	;# 
   415  010D                     	;# 
   416  010E                     	;# 
   417  010F                     	;# 
   418  0185                     	;# 
   419  0186                     	;# 
   420  018C                     	;# 
   421  0000                     	;# 
   422  0001                     	;# 
   423  0002                     	;# 
   424  0003                     	;# 
   425  0004                     	;# 
   426  0005                     	;# 
   427  0006                     	;# 
   428  0007                     	;# 
   429  0009                     	;# 
   430  000A                     	;# 
   431  000B                     	;# 
   432  000C                     	;# 
   433  000D                     	;# 
   434  000E                     	;# 
   435  000E                     	;# 
   436  000F                     	;# 
   437  0010                     	;# 
   438  0011                     	;# 
   439  0012                     	;# 
   440  0013                     	;# 
   441  0014                     	;# 
   442  0015                     	;# 
   443  0015                     	;# 
   444  0016                     	;# 
   445  0017                     	;# 
   446  0018                     	;# 
   447  0019                     	;# 
   448  001A                     	;# 
   449  001B                     	;# 
   450  001B                     	;# 
   451  001C                     	;# 
   452  001D                     	;# 
   453  001E                     	;# 
   454  001F                     	;# 
   455  0081                     	;# 
   456  0085                     	;# 
   457  0086                     	;# 
   458  0087                     	;# 
   459  0089                     	;# 
   460  008C                     	;# 
   461  008D                     	;# 
   462  008E                     	;# 
   463  008F                     	;# 
   464  0090                     	;# 
   465  0091                     	;# 
   466  0092                     	;# 
   467  0093                     	;# 
   468  0093                     	;# 
   469  0094                     	;# 
   470  0095                     	;# 
   471  0095                     	;# 
   472  0096                     	;# 
   473  0096                     	;# 
   474  0098                     	;# 
   475  0099                     	;# 
   476  009C                     	;# 
   477  009D                     	;# 
   478  009F                     	;# 
   479  0108                     	;# 
   480  0109                     	;# 
   481  010C                     	;# 
   482  010C                     	;# 
   483  010D                     	;# 
   484  010D                     	;# 
   485  010E                     	;# 
   486  010F                     	;# 
   487  0185                     	;# 
   488  0186                     	;# 
   489  018C                     	;# 
   490  0000                     	;# 
   491  0001                     	;# 
   492  0002                     	;# 
   493  0003                     	;# 
   494  0004                     	;# 
   495  0005                     	;# 
   496  0006                     	;# 
   497  0007                     	;# 
   498  0009                     	;# 
   499  000A                     	;# 
   500  000B                     	;# 
   501  000C                     	;# 
   502  000D                     	;# 
   503  000E                     	;# 
   504  000E                     	;# 
   505  000F                     	;# 
   506  0010                     	;# 
   507  0011                     	;# 
   508  0012                     	;# 
   509  0013                     	;# 
   510  0014                     	;# 
   511  0015                     	;# 
   512  0015                     	;# 
   513  0016                     	;# 
   514  0017                     	;# 
   515  0018                     	;# 
   516  0019                     	;# 
   517  001A                     	;# 
   518  001B                     	;# 
   519  001B                     	;# 
   520  001C                     	;# 
   521  001D                     	;# 
   522  001E                     	;# 
   523  001F                     	;# 
   524  0081                     	;# 
   525  0085                     	;# 
   526  0086                     	;# 
   527  0087                     	;# 
   528  0089                     	;# 
   529  008C                     	;# 
   530  008D                     	;# 
   531  008E                     	;# 
   532  008F                     	;# 
   533  0090                     	;# 
   534  0091                     	;# 
   535  0092                     	;# 
   536  0093                     	;# 
   537  0093                     	;# 
   538  0094                     	;# 
   539  0095                     	;# 
   540  0095                     	;# 
   541  0096                     	;# 
   542  0096                     	;# 
   543  0098                     	;# 
   544  0099                     	;# 
   545  009C                     	;# 
   546  009D                     	;# 
   547  009F                     	;# 
   548  0108                     	;# 
   549  0109                     	;# 
   550  010C                     	;# 
   551  010C                     	;# 
   552  010D                     	;# 
   553  010D                     	;# 
   554  010E                     	;# 
   555  010F                     	;# 
   556  0185                     	;# 
   557  0186                     	;# 
   558  018C                     	;# 
   559  0000                     	;# 
   560  0001                     	;# 
   561  0002                     	;# 
   562  0003                     	;# 
   563  0004                     	;# 
   564  0005                     	;# 
   565  0006                     	;# 
   566  0007                     	;# 
   567  0009                     	;# 
   568  000A                     	;# 
   569  000B                     	;# 
   570  000C                     	;# 
   571  000D                     	;# 
   572  000E                     	;# 
   573  000E                     	;# 
   574  000F                     	;# 
   575  0010                     	;# 
   576  0011                     	;# 
   577  0012                     	;# 
   578  0013                     	;# 
   579  0014                     	;# 
   580  0015                     	;# 
   581  0015                     	;# 
   582  0016                     	;# 
   583  0017                     	;# 
   584  0018                     	;# 
   585  0019                     	;# 
   586  001A                     	;# 
   587  001B                     	;# 
   588  001B                     	;# 
   589  001C                     	;# 
   590  001D                     	;# 
   591  001E                     	;# 
   592  001F                     	;# 
   593  0081                     	;# 
   594  0085                     	;# 
   595  0086                     	;# 
   596  0087                     	;# 
   597  0089                     	;# 
   598  008C                     	;# 
   599  008D                     	;# 
   600  008E                     	;# 
   601  008F                     	;# 
   602  0090                     	;# 
   603  0091                     	;# 
   604  0092                     	;# 
   605  0093                     	;# 
   606  0093                     	;# 
   607  0094                     	;# 
   608  0095                     	;# 
   609  0095                     	;# 
   610  0096                     	;# 
   611  0096                     	;# 
   612  0098                     	;# 
   613  0099                     	;# 
   614  009C                     	;# 
   615  009D                     	;# 
   616  009F                     	;# 
   617  0108                     	;# 
   618  0109                     	;# 
   619  010C                     	;# 
   620  010C                     	;# 
   621  010D                     	;# 
   622  010D                     	;# 
   623  010E                     	;# 
   624  010F                     	;# 
   625  0185                     	;# 
   626  0186                     	;# 
   627  018C                     	;# 
   628  0000                     	;# 
   629  0001                     	;# 
   630  0002                     	;# 
   631  0003                     	;# 
   632  0004                     	;# 
   633  0005                     	;# 
   634  0006                     	;# 
   635  0007                     	;# 
   636  0009                     	;# 
   637  000A                     	;# 
   638  000B                     	;# 
   639  000C                     	;# 
   640  000D                     	;# 
   641  000E                     	;# 
   642  000E                     	;# 
   643  000F                     	;# 
   644  0010                     	;# 
   645  0011                     	;# 
   646  0012                     	;# 
   647  0013                     	;# 
   648  0014                     	;# 
   649  0015                     	;# 
   650  0015                     	;# 
   651  0016                     	;# 
   652  0017                     	;# 
   653  0018                     	;# 
   654  0019                     	;# 
   655  001A                     	;# 
   656  001B                     	;# 
   657  001B                     	;# 
   658  001C                     	;# 
   659  001D                     	;# 
   660  001E                     	;# 
   661  001F                     	;# 
   662  0081                     	;# 
   663  0085                     	;# 
   664  0086                     	;# 
   665  0087                     	;# 
   666  0089                     	;# 
   667  008C                     	;# 
   668  008D                     	;# 
   669  008E                     	;# 
   670  008F                     	;# 
   671  0090                     	;# 
   672  0091                     	;# 
   673  0092                     	;# 
   674  0093                     	;# 
   675  0093                     	;# 
   676  0094                     	;# 
   677  0095                     	;# 
   678  0095                     	;# 
   679  0096                     	;# 
   680  0096                     	;# 
   681  0098                     	;# 
   682  0099                     	;# 
   683  009C                     	;# 
   684  009D                     	;# 
   685  009F                     	;# 
   686  0108                     	;# 
   687  0109                     	;# 
   688  010C                     	;# 
   689  010C                     	;# 
   690  010D                     	;# 
   691  010D                     	;# 
   692  010E                     	;# 
   693  010F                     	;# 
   694  0185                     	;# 
   695  0186                     	;# 
   696  018C                     	;# 
   697  0000                     	;# 
   698  0001                     	;# 
   699  0002                     	;# 
   700  0003                     	;# 
   701  0004                     	;# 
   702  0005                     	;# 
   703  0006                     	;# 
   704  0007                     	;# 
   705  0009                     	;# 
   706  000A                     	;# 
   707  000B                     	;# 
   708  000C                     	;# 
   709  000D                     	;# 
   710  000E                     	;# 
   711  000E                     	;# 
   712  000F                     	;# 
   713  0010                     	;# 
   714  0011                     	;# 
   715  0012                     	;# 
   716  0013                     	;# 
   717  0014                     	;# 
   718  0015                     	;# 
   719  0015                     	;# 
   720  0016                     	;# 
   721  0017                     	;# 
   722  0018                     	;# 
   723  0019                     	;# 
   724  001A                     	;# 
   725  001B                     	;# 
   726  001B                     	;# 
   727  001C                     	;# 
   728  001D                     	;# 
   729  001E                     	;# 
   730  001F                     	;# 
   731  0081                     	;# 
   732  0085                     	;# 
   733  0086                     	;# 
   734  0087                     	;# 
   735  0089                     	;# 
   736  008C                     	;# 
   737  008D                     	;# 
   738  008E                     	;# 
   739  008F                     	;# 
   740  0090                     	;# 
   741  0091                     	;# 
   742  0092                     	;# 
   743  0093                     	;# 
   744  0093                     	;# 
   745  0094                     	;# 
   746  0095                     	;# 
   747  0095                     	;# 
   748  0096                     	;# 
   749  0096                     	;# 
   750  0098                     	;# 
   751  0099                     	;# 
   752  009C                     	;# 
   753  009D                     	;# 
   754  009F                     	;# 
   755  0108                     	;# 
   756  0109                     	;# 
   757  010C                     	;# 
   758  010C                     	;# 
   759  010D                     	;# 
   760  010D                     	;# 
   761  010E                     	;# 
   762  010F                     	;# 
   763  0185                     	;# 
   764  0186                     	;# 
   765  018C                     	;# 
   766  0000                     	;# 
   767  0001                     	;# 
   768  0002                     	;# 
   769  0003                     	;# 
   770  0004                     	;# 
   771  0005                     	;# 
   772  0006                     	;# 
   773  0007                     	;# 
   774  0009                     	;# 
   775  000A                     	;# 
   776  000B                     	;# 
   777  000C                     	;# 
   778  000D                     	;# 
   779  000E                     	;# 
   780  000E                     	;# 
   781  000F                     	;# 
   782  0010                     	;# 
   783  0011                     	;# 
   784  0012                     	;# 
   785  0013                     	;# 
   786  0014                     	;# 
   787  0015                     	;# 
   788  0015                     	;# 
   789  0016                     	;# 
   790  0017                     	;# 
   791  0018                     	;# 
   792  0019                     	;# 
   793  001A                     	;# 
   794  001B                     	;# 
   795  001B                     	;# 
   796  001C                     	;# 
   797  001D                     	;# 
   798  001E                     	;# 
   799  001F                     	;# 
   800  0081                     	;# 
   801  0085                     	;# 
   802  0086                     	;# 
   803  0087                     	;# 
   804  0089                     	;# 
   805  008C                     	;# 
   806  008D                     	;# 
   807  008E                     	;# 
   808  008F                     	;# 
   809  0090                     	;# 
   810  0091                     	;# 
   811  0092                     	;# 
   812  0093                     	;# 
   813  0093                     	;# 
   814  0094                     	;# 
   815  0095                     	;# 
   816  0095                     	;# 
   817  0096                     	;# 
   818  0096                     	;# 
   819  0098                     	;# 
   820  0099                     	;# 
   821  009C                     	;# 
   822  009D                     	;# 
   823  009F                     	;# 
   824  0108                     	;# 
   825  0109                     	;# 
   826  010C                     	;# 
   827  010C                     	;# 
   828  010D                     	;# 
   829  010D                     	;# 
   830  010E                     	;# 
   831  010F                     	;# 
   832  0185                     	;# 
   833  0186                     	;# 
   834  018C                     	;# 
   835  0000                     	;# 
   836  0001                     	;# 
   837  0002                     	;# 
   838  0003                     	;# 
   839  0004                     	;# 
   840  0005                     	;# 
   841  0006                     	;# 
   842  0007                     	;# 
   843  0009                     	;# 
   844  000A                     	;# 
   845  000B                     	;# 
   846  000C                     	;# 
   847  000D                     	;# 
   848  000E                     	;# 
   849  000E                     	;# 
   850  000F                     	;# 
   851  0010                     	;# 
   852  0011                     	;# 
   853  0012                     	;# 
   854  0013                     	;# 
   855  0014                     	;# 
   856  0015                     	;# 
   857  0015                     	;# 
   858  0016                     	;# 
   859  0017                     	;# 
   860  0018                     	;# 
   861  0019                     	;# 
   862  001A                     	;# 
   863  001B                     	;# 
   864  001B                     	;# 
   865  001C                     	;# 
   866  001D                     	;# 
   867  001E                     	;# 
   868  001F                     	;# 
   869  0081                     	;# 
   870  0085                     	;# 
   871  0086                     	;# 
   872  0087                     	;# 
   873  0089                     	;# 
   874  008C                     	;# 
   875  008D                     	;# 
   876  008E                     	;# 
   877  008F                     	;# 
   878  0090                     	;# 
   879  0091                     	;# 
   880  0092                     	;# 
   881  0093                     	;# 
   882  0093                     	;# 
   883  0094                     	;# 
   884  0095                     	;# 
   885  0095                     	;# 
   886  0096                     	;# 
   887  0096                     	;# 
   888  0098                     	;# 
   889  0099                     	;# 
   890  009C                     	;# 
   891  009D                     	;# 
   892  009F                     	;# 
   893  0108                     	;# 
   894  0109                     	;# 
   895  010C                     	;# 
   896  010C                     	;# 
   897  010D                     	;# 
   898  010D                     	;# 
   899  010E                     	;# 
   900  010F                     	;# 
   901  0185                     	;# 
   902  0186                     	;# 
   903  018C                     	;# 
   904  0000                     	;# 
   905  0001                     	;# 
   906  0002                     	;# 
   907  0003                     	;# 
   908  0004                     	;# 
   909  0005                     	;# 
   910  0006                     	;# 
   911  0007                     	;# 
   912  0009                     	;# 
   913  000A                     	;# 
   914  000B                     	;# 
   915  000C                     	;# 
   916  000D                     	;# 
   917  000E                     	;# 
   918  000E                     	;# 
   919  000F                     	;# 
   920  0010                     	;# 
   921  0011                     	;# 
   922  0012                     	;# 
   923  0013                     	;# 
   924  0014                     	;# 
   925  0015                     	;# 
   926  0015                     	;# 
   927  0016                     	;# 
   928  0017                     	;# 
   929  0018                     	;# 
   930  0019                     	;# 
   931  001A                     	;# 
   932  001B                     	;# 
   933  001B                     	;# 
   934  001C                     	;# 
   935  001D                     	;# 
   936  001E                     	;# 
   937  001F                     	;# 
   938  0081                     	;# 
   939  0085                     	;# 
   940  0086                     	;# 
   941  0087                     	;# 
   942  0089                     	;# 
   943  008C                     	;# 
   944  008D                     	;# 
   945  008E                     	;# 
   946  008F                     	;# 
   947  0090                     	;# 
   948  0091                     	;# 
   949  0092                     	;# 
   950  0093                     	;# 
   951  0093                     	;# 
   952  0094                     	;# 
   953  0095                     	;# 
   954  0095                     	;# 
   955  0096                     	;# 
   956  0096                     	;# 
   957  0098                     	;# 
   958  0099                     	;# 
   959  009C                     	;# 
   960  009D                     	;# 
   961  009F                     	;# 
   962  0108                     	;# 
   963  0109                     	;# 
   964  010C                     	;# 
   965  010C                     	;# 
   966  010D                     	;# 
   967  010D                     	;# 
   968  010E                     	;# 
   969  010F                     	;# 
   970  0185                     	;# 
   971  0186                     	;# 
   972  018C                     	;# 
   973  0000                     	;# 
   974  0001                     	;# 
   975  0002                     	;# 
   976  0003                     	;# 
   977  0004                     	;# 
   978  0005                     	;# 
   979  0006                     	;# 
   980  0007                     	;# 
   981  0009                     	;# 
   982  000A                     	;# 
   983  000B                     	;# 
   984  000C                     	;# 
   985  000D                     	;# 
   986  000E                     	;# 
   987  000E                     	;# 
   988  000F                     	;# 
   989  0010                     	;# 
   990  0011                     	;# 
   991  0012                     	;# 
   992  0013                     	;# 
   993  0014                     	;# 
   994  0015                     	;# 
   995  0015                     	;# 
   996  0016                     	;# 
   997  0017                     	;# 
   998  0018                     	;# 
   999  0019                     	;# 
  1000  001A                     	;# 
  1001  001B                     	;# 
  1002  001B                     	;# 
  1003  001C                     	;# 
  1004  001D                     	;# 
  1005  001E                     	;# 
  1006  001F                     	;# 
  1007  0081                     	;# 
  1008  0085                     	;# 
  1009  0086                     	;# 
  1010  0087                     	;# 
  1011  0089                     	;# 
  1012  008C                     	;# 
  1013  008D                     	;# 
  1014  008E                     	;# 
  1015  008F                     	;# 
  1016  0090                     	;# 
  1017  0091                     	;# 
  1018  0092                     	;# 
  1019  0093                     	;# 
  1020  0093                     	;# 
  1021  0094                     	;# 
  1022  0095                     	;# 
  1023  0095                     	;# 
  1024  0096                     	;# 
  1025  0096                     	;# 
  1026  0098                     	;# 
  1027  0099                     	;# 
  1028  009C                     	;# 
  1029  009D                     	;# 
  1030  009F                     	;# 
  1031  0108                     	;# 
  1032  0109                     	;# 
  1033  010C                     	;# 
  1034  010C                     	;# 
  1035  010D                     	;# 
  1036  010D                     	;# 
  1037  010E                     	;# 
  1038  010F                     	;# 
  1039  0185                     	;# 
  1040  0186                     	;# 
  1041  018C                     	;# 
  1042  0000                     	;# 
  1043  0001                     	;# 
  1044  0002                     	;# 
  1045  0003                     	;# 
  1046  0004                     	;# 
  1047  0005                     	;# 
  1048  0006                     	;# 
  1049  0007                     	;# 
  1050  0009                     	;# 
  1051  000A                     	;# 
  1052  000B                     	;# 
  1053  000C                     	;# 
  1054  000D                     	;# 
  1055  000E                     	;# 
  1056  000E                     	;# 
  1057  000F                     	;# 
  1058  0010                     	;# 
  1059  0011                     	;# 
  1060  0012                     	;# 
  1061  0013                     	;# 
  1062  0014                     	;# 
  1063  0015                     	;# 
  1064  0015                     	;# 
  1065  0016                     	;# 
  1066  0017                     	;# 
  1067  0018                     	;# 
  1068  0019                     	;# 
  1069  001A                     	;# 
  1070  001B                     	;# 
  1071  001B                     	;# 
  1072  001C                     	;# 
  1073  001D                     	;# 
  1074  001E                     	;# 
  1075  001F                     	;# 
  1076  0081                     	;# 
  1077  0085                     	;# 
  1078  0086                     	;# 
  1079  0087                     	;# 
  1080  0089                     	;# 
  1081  008C                     	;# 
  1082  008D                     	;# 
  1083  008E                     	;# 
  1084  008F                     	;# 
  1085  0090                     	;# 
  1086  0091                     	;# 
  1087  0092                     	;# 
  1088  0093                     	;# 
  1089  0093                     	;# 
  1090  0094                     	;# 
  1091  0095                     	;# 
  1092  0095                     	;# 
  1093  0096                     	;# 
  1094  0096                     	;# 
  1095  0098                     	;# 
  1096  0099                     	;# 
  1097  009C                     	;# 
  1098  009D                     	;# 
  1099  009F                     	;# 
  1100  0108                     	;# 
  1101  0109                     	;# 
  1102  010C                     	;# 
  1103  010C                     	;# 
  1104  010D                     	;# 
  1105  010D                     	;# 
  1106  010E                     	;# 
  1107  010F                     	;# 
  1108  0185                     	;# 
  1109  0186                     	;# 
  1110  018C                     	;# 
  1111  0000                     	;# 
  1112  0001                     	;# 
  1113  0002                     	;# 
  1114  0003                     	;# 
  1115  0004                     	;# 
  1116  0005                     	;# 
  1117  0006                     	;# 
  1118  0007                     	;# 
  1119  0009                     	;# 
  1120  000A                     	;# 
  1121  000B                     	;# 
  1122  000C                     	;# 
  1123  000D                     	;# 
  1124  000E                     	;# 
  1125  000E                     	;# 
  1126  000F                     	;# 
  1127  0010                     	;# 
  1128  0011                     	;# 
  1129  0012                     	;# 
  1130  0013                     	;# 
  1131  0014                     	;# 
  1132  0015                     	;# 
  1133  0015                     	;# 
  1134  0016                     	;# 
  1135  0017                     	;# 
  1136  0018                     	;# 
  1137  0019                     	;# 
  1138  001A                     	;# 
  1139  001B                     	;# 
  1140  001B                     	;# 
  1141  001C                     	;# 
  1142  001D                     	;# 
  1143  001E                     	;# 
  1144  001F                     	;# 
  1145  0081                     	;# 
  1146  0085                     	;# 
  1147  0086                     	;# 
  1148  0087                     	;# 
  1149  0089                     	;# 
  1150  008C                     	;# 
  1151  008D                     	;# 
  1152  008E                     	;# 
  1153  008F                     	;# 
  1154  0090                     	;# 
  1155  0091                     	;# 
  1156  0092                     	;# 
  1157  0093                     	;# 
  1158  0093                     	;# 
  1159  0094                     	;# 
  1160  0095                     	;# 
  1161  0095                     	;# 
  1162  0096                     	;# 
  1163  0096                     	;# 
  1164  0098                     	;# 
  1165  0099                     	;# 
  1166  009C                     	;# 
  1167  009D                     	;# 
  1168  009F                     	;# 
  1169  0108                     	;# 
  1170  0109                     	;# 
  1171  010C                     	;# 
  1172  010C                     	;# 
  1173  010D                     	;# 
  1174  010D                     	;# 
  1175  010E                     	;# 
  1176  010F                     	;# 
  1177  0185                     	;# 
  1178  0186                     	;# 
  1179  018C                     	;# 
  1180  0000                     	;# 
  1181  0001                     	;# 
  1182  0002                     	;# 
  1183  0003                     	;# 
  1184  0004                     	;# 
  1185  0005                     	;# 
  1186  0006                     	;# 
  1187  0007                     	;# 
  1188  0009                     	;# 
  1189  000A                     	;# 
  1190  000B                     	;# 
  1191  000C                     	;# 
  1192  000D                     	;# 
  1193  000E                     	;# 
  1194  000E                     	;# 
  1195  000F                     	;# 
  1196  0010                     	;# 
  1197  0011                     	;# 
  1198  0012                     	;# 
  1199  0013                     	;# 
  1200  0014                     	;# 
  1201  0015                     	;# 
  1202  0015                     	;# 
  1203  0016                     	;# 
  1204  0017                     	;# 
  1205  0018                     	;# 
  1206  0019                     	;# 
  1207  001A                     	;# 
  1208  001B                     	;# 
  1209  001B                     	;# 
  1210  001C                     	;# 
  1211  001D                     	;# 
  1212  001E                     	;# 
  1213  001F                     	;# 
  1214  0081                     	;# 
  1215  0085                     	;# 
  1216  0086                     	;# 
  1217  0087                     	;# 
  1218  0089                     	;# 
  1219  008C                     	;# 
  1220  008D                     	;# 
  1221  008E                     	;# 
  1222  008F                     	;# 
  1223  0090                     	;# 
  1224  0091                     	;# 
  1225  0092                     	;# 
  1226  0093                     	;# 
  1227  0093                     	;# 
  1228  0094                     	;# 
  1229  0095                     	;# 
  1230  0095                     	;# 
  1231  0096                     	;# 
  1232  0096                     	;# 
  1233  0098                     	;# 
  1234  0099                     	;# 
  1235  009C                     	;# 
  1236  009D                     	;# 
  1237  009F                     	;# 
  1238  0108                     	;# 
  1239  0109                     	;# 
  1240  010C                     	;# 
  1241  010C                     	;# 
  1242  010D                     	;# 
  1243  010D                     	;# 
  1244  010E                     	;# 
  1245  010F                     	;# 
  1246  0185                     	;# 
  1247  0186                     	;# 
  1248  018C                     	;# 
  1249  0000                     	;# 
  1250  0001                     	;# 
  1251  0002                     	;# 
  1252  0003                     	;# 
  1253  0004                     	;# 
  1254  0005                     	;# 
  1255  0006                     	;# 
  1256  0007                     	;# 
  1257  0009                     	;# 
  1258  000A                     	;# 
  1259  000B                     	;# 
  1260  000C                     	;# 
  1261  000D                     	;# 
  1262  000E                     	;# 
  1263  000E                     	;# 
  1264  000F                     	;# 
  1265  0010                     	;# 
  1266  0011                     	;# 
  1267  0012                     	;# 
  1268  0013                     	;# 
  1269  0014                     	;# 
  1270  0015                     	;# 
  1271  0015                     	;# 
  1272  0016                     	;# 
  1273  0017                     	;# 
  1274  0018                     	;# 
  1275  0019                     	;# 
  1276  001A                     	;# 
  1277  001B                     	;# 
  1278  001B                     	;# 
  1279  001C                     	;# 
  1280  001D                     	;# 
  1281  001E                     	;# 
  1282  001F                     	;# 
  1283  0081                     	;# 
  1284  0085                     	;# 
  1285  0086                     	;# 
  1286  0087                     	;# 
  1287  0089                     	;# 
  1288  008C                     	;# 
  1289  008D                     	;# 
  1290  008E                     	;# 
  1291  008F                     	;# 
  1292  0090                     	;# 
  1293  0091                     	;# 
  1294  0092                     	;# 
  1295  0093                     	;# 
  1296  0093                     	;# 
  1297  0094                     	;# 
  1298  0095                     	;# 
  1299  0095                     	;# 
  1300  0096                     	;# 
  1301  0096                     	;# 
  1302  0098                     	;# 
  1303  0099                     	;# 
  1304  009C                     	;# 
  1305  009D                     	;# 
  1306  009F                     	;# 
  1307  0108                     	;# 
  1308  0109                     	;# 
  1309  010C                     	;# 
  1310  010C                     	;# 
  1311  010D                     	;# 
  1312  010D                     	;# 
  1313  010E                     	;# 
  1314  010F                     	;# 
  1315  0185                     	;# 
  1316  0186                     	;# 
  1317  018C                     	;# 
  1318  001F                     _ADCON0	set	31
  1319  001E                     _ADRES	set	30
  1320  0005                     _PORTA	set	5
  1321  0006                     _PORTB	set	6
  1322  0007                     _PORTC	set	7
  1323  001A                     _RCREG	set	26
  1324  0018                     _RCSTA	set	24
  1325  0010                     _T1CON	set	16
  1326  000F                     _TMR1H	set	15
  1327  000E                     _TMR1L	set	14
  1328  0019                     _TXREG	set	25
  1329  005F                     _GIE	set	95
  1330  00F9                     _GO_nDONE	set	249
  1331  005E                     _PEIE	set	94
  1332  002C                     _RA4	set	44
  1333  0032                     _RB2	set	50
  1334  0033                     _RB3	set	51
  1335  0034                     _RB4	set	52
  1336  0035                     _RB5	set	53
  1337  0065                     _RCIF	set	101
  1338  00C6                     _RX9	set	198
  1339  0060                     _TMR1IF	set	96
  1340  0064                     _TXIF	set	100
  1341  009F                     _ADCON1	set	159
  1342  009D                     _FVRCON	set	157
  1343  0090                     _OSCCON	set	144
  1344  0099                     _SPBRG	set	153
  1345  0085                     _TRISA	set	133
  1346  0086                     _TRISB	set	134
  1347  0087                     _TRISC	set	135
  1348  0098                     _TXSTA	set	152
  1349  0408                     _PS0	set	1032
  1350  0409                     _PS1	set	1033
  1351  040A                     _PS2	set	1034
  1352  040B                     _PSA	set	1035
  1353  0465                     _RCIE	set	1125
  1354  0460                     _TMR1IE	set	1120
  1355  043E                     _TRISC6	set	1086
  1356  043F                     _TRISC7	set	1087
  1357  04C6                     _TX9	set	1222
  1358  0464                     _TXIE	set	1124
  1359  0185                     _ANSELA	set	389
  1360  0186                     _ANSELB	set	390
  1361                           
  1362                           	psect	text0
  1363  0000                     __ptext0:	
  1364                           ; #config settings
  1365                           
  1366                           
  1367                           ;psect for function _TMR1_ISR
  1368  0000                     
  1369                           	psect	cinit
  1370  0013                     start_initialization:	
  1371  0013                     __initialization:	
  1372                           
  1373                           ; Clear objects allocated to COMMON
  1374  0013  01F7               	clrf	__pbssCOMMON& (0+127)
  1375  0014  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  1376  0015  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  1377                           
  1378                           ; Clear objects allocated to BANK0
  1379  0016  1383               	bcf	3,7	;select IRP bank0
  1380  0017  3020               	movlw	low __pbssBANK0
  1381  0018  0084               	movwf	4
  1382  0019  3055               	movlw	low (__pbssBANK0+53)
  1383  001A  158A  2409  118A   	fcall	clear_ram0
  1384                           
  1385                           ; Clear objects allocated to BANK1
  1386  001D  30A0               	movlw	low __pbssBANK1
  1387  001E  0084               	movwf	4
  1388  001F  30EF               	movlw	low (__pbssBANK1+79)
  1389  0020  158A  2409         	fcall	clear_ram0
  1390  0022                     end_of_initialization:	
  1391                           ;End of C runtime variable initialization code
  1392                           
  1393  0022                     __end_of__initialization:	
  1394  0022  0183               	clrf	3
  1395  0023  118A  2F9B         	ljmp	_main	;jump to C main() function
  1396                           
  1397                           	psect	bssCOMMON
  1398  0077                     __pbssCOMMON:	
  1399  0077                     _WDT:	
  1400  0077                     	ds	2
  1401  0079                     _SwDetect:	
  1402  0079                     	ds	1
  1403                           
  1404                           	psect	bssBANK0
  1405  0020                     __pbssBANK0:	
  1406  0020                     _myMain:	
  1407  0020                     	ds	7
  1408  0027                     __CDS:	
  1409  0027                     	ds	5
  1410  002C                     _PIRLED:	
  1411  002C                     	ds	4
  1412  0030                     _Timer1:	
  1413  0030                     	ds	3
  1414  0033                     _LED:	
  1415  0033                     	ds	1
  1416  0034                     _Lights:	
  1417  0034                     	ds	1
  1418  0035                     _LightsControl:	
  1419  0035                     	ds	1
  1420  0036                     _UART:	
  1421  0036                     	ds	12
  1422  0042                     _Lights1:	
  1423  0042                     	ds	7
  1424  0049                     _VarErrLED:	
  1425  0049                     	ds	4
  1426  004D                     _VarLED1:	
  1427  004D                     	ds	4
  1428  0051                     _VarLED2:	
  1429  0051                     	ds	4
  1430                           
  1431                           	psect	bssBANK1
  1432  00A0                     __pbssBANK1:	
  1433  00A0                     __PIR:	
  1434  00A0                     	ds	47
  1435  00CF                     _Load:	
  1436  00CF                     	ds	32
  1437                           
  1438                           	psect	clrtext
  1439  0C09                     clear_ram0:	
  1440                           ;	Called with FSR containing the base address, and
  1441                           ;	W with the last address+1
  1442                           
  1443  0C09  0064               	clrwdt	;clear the watchdog before getting into this loop
  1444  0C0A                     clrloop0:	
  1445  0C0A  0180               	clrf	0	;clear RAM location pointed to by FSR
  1446  0C0B  0A84               	incf	4,f	;increment pointer
  1447  0C0C  0604               	xorwf	4,w	;XOR with final address
  1448  0C0D  1903               	btfsc	3,2	;have we reached the end yet?
  1449  0C0E  3400               	retlw	0	;all done for this memory range, return
  1450  0C0F  0604               	xorwf	4,w	;XOR again to restore value
  1451  0C10  2C0A               	goto	clrloop0	;do the next byte
  1452                           
  1453                           	psect	cstackCOMMON
  1454  0070                     __pcstackCOMMON:	
  1455  0070                     ?_setLED_Initialization:	
  1456  0070                     ?_setPIRLED_Main:	
  1457                           ; 0 bytes @ 0x0
  1458                           
  1459  0070                     ?_Fosc_Set:	
  1460                           ; 0 bytes @ 0x0
  1461                           
  1462  0070                     ?_IO_Set:	
  1463                           ; 0 bytes @ 0x0
  1464                           
  1465  0070                     ?_TMR1_Set:	
  1466                           ; 0 bytes @ 0x0
  1467                           
  1468  0070                     ?_ADC_Set:	
  1469                           ; 0 bytes @ 0x0
  1470                           
  1471  0070                     ?_UART_Set:	
  1472                           ; 0 bytes @ 0x0
  1473                           
  1474  0070                     ?_WDT_Set:	
  1475                           ; 0 bytes @ 0x0
  1476                           
  1477  0070                     ?_TMR1_ISR:	
  1478                           ; 0 bytes @ 0x0
  1479                           
  1480  0070                     ??_TMR1_ISR:	
  1481                           ; 0 bytes @ 0x0
  1482                           
  1483  0070                     ?_UART_ISR:	
  1484                           ; 0 bytes @ 0x0
  1485                           
  1486  0070                     ??_UART_ISR:	
  1487                           ; 0 bytes @ 0x0
  1488                           
  1489  0070                     ?_Timeout_Counter:	
  1490                           ; 0 bytes @ 0x0
  1491                           
  1492  0070                     ?_set_TimeoutCleared:	
  1493                           ; 0 bytes @ 0x0
  1494                           
  1495  0070                     ??_getch:	
  1496                           ; 0 bytes @ 0x0
  1497                           
  1498  0070                     ?_UART_Receive:	
  1499                           ; 0 bytes @ 0x0
  1500                           
  1501  0070                     ?_UART_Transmit:	
  1502                           ; 0 bytes @ 0x0
  1503                           
  1504  0070                     ?_putch:	
  1505                           ; 0 bytes @ 0x0
  1506                           
  1507  0070                     ?_WDT_Clearing:	
  1508                           ; 0 bytes @ 0x0
  1509                           
  1510  0070                     ?_myMain_Initialization:	
  1511                           ; 0 bytes @ 0x0
  1512                           
  1513  0070                     ?_Load_Initialization:	
  1514                           ; 0 bytes @ 0x0
  1515                           
  1516  0070                     ?_Lights_Initialization:	
  1517                           ; 0 bytes @ 0x0
  1518                           
  1519  0070                     ?_PIR_Initialization:	
  1520                           ; 0 bytes @ 0x0
  1521                           
  1522  0070                     ?_getLoad_AD:	
  1523                           ; 0 bytes @ 0x0
  1524                           
  1525  0070                     ?_my_MainTimer:	
  1526                           ; 0 bytes @ 0x0
  1527                           
  1528  0070                     ?_Load_Main:	
  1529                           ; 0 bytes @ 0x0
  1530                           
  1531  0070                     ?_Lights_Main:	
  1532                           ; 0 bytes @ 0x0
  1533                           
  1534  0070                     ?_PIR_Main:	
  1535                           ; 0 bytes @ 0x0
  1536                           
  1537  0070                     ?_setLoad_AH_AL_Restore:	
  1538                           ; 0 bytes @ 0x0
  1539                           
  1540  0070                     ?_setLights_Initialization:	
  1541                           ; 0 bytes @ 0x0
  1542                           
  1543  0070                     ?_setLights_Main:	
  1544                           ; 0 bytes @ 0x0
  1545                           
  1546  0070                     ?_Lights_Control:	
  1547                           ; 0 bytes @ 0x0
  1548                           
  1549  0070                     ?_Lights_Close:	
  1550                           ; 0 bytes @ 0x0
  1551                           
  1552  0070                     ?_setLights_Line:	
  1553                           ; 0 bytes @ 0x0
  1554                           
  1555  0070                     ?_CDS_Initialization:	
  1556                           ; 0 bytes @ 0x0
  1557                           
  1558  0070                     ?_CDS_Main:	
  1559                           ; 0 bytes @ 0x0
  1560                           
  1561  0070                     ?_LedPointSelect:	
  1562                           ; 0 bytes @ 0x0
  1563                           
  1564  0070                     ?_LED_Initialization:	
  1565                           ; 0 bytes @ 0x0
  1566                           
  1567  0070                     ?_LED_Main:	
  1568                           ; 0 bytes @ 0x0
  1569                           
  1570  0070                     ?_Mcu_Initialization:	
  1571                           ; 0 bytes @ 0x0
  1572                           
  1573  0070                     ?_ISR:	
  1574                           ; 0 bytes @ 0x0
  1575                           
  1576  0070                     ?_UART_Main:	
  1577                           ; 0 bytes @ 0x0
  1578                           
  1579  0070                     ?_UART_SetData:	
  1580                           ; 0 bytes @ 0x0
  1581                           
  1582  0070                     ?_WDT_Main:	
  1583                           ; 0 bytes @ 0x0
  1584                           
  1585  0070                     ?_setMain_Exception:	
  1586                           ; 0 bytes @ 0x0
  1587                           
  1588  0070                     ?_LightsPointSelect:	
  1589                           ; 0 bytes @ 0x0
  1590                           
  1591  0070                     ?_getch:	
  1592                           ; 0 bytes @ 0x0
  1593                           
  1594  0070                     ?_getAll_Lights_Line:	
  1595                           ; 1 bytes @ 0x0
  1596                           
  1597  0070                     ?_getLights_Status:	
  1598                           ; 1 bytes @ 0x0
  1599                           
  1600  0070                     ?_getLightsControl_OK:	
  1601                           ; 1 bytes @ 0x0
  1602                           
  1603  0070                     ?_getCDS_Status:	
  1604                           ; 1 bytes @ 0x0
  1605                           
  1606  0070                     ?_getMain_LightsStatus:	
  1607                           ; 1 bytes @ 0x0
  1608                           
  1609  0070                     ?_getMain_All_Error_Status:	
  1610                           ; 1 bytes @ 0x0
  1611                           
  1612  0070                     ?_getMain_Lights_Count:	
  1613                           ; 1 bytes @ 0x0
  1614                           
  1615  0070                     ?_getMain_LoadOK:	
  1616                           ; 1 bytes @ 0x0
  1617                           
  1618  0070                     ?_getLoad_OK:	
  1619                           ; 1 bytes @ 0x0
  1620                           
  1621                           
  1622                           ; 1 bytes @ 0x0
  1623  0070                     	ds	1
  1624  0071                     UART_ISR@i:	
  1625                           
  1626                           ; 2 bytes @ 0x1
  1627  0071                     	ds	2
  1628  0073                     ??_ISR:	
  1629                           
  1630                           ; 0 bytes @ 0x3
  1631  0073                     	ds	4
  1632                           
  1633                           	psect	cstackBANK0
  1634  0055                     __pcstackBANK0:	
  1635  0055                     ??_Fosc_Set:	
  1636  0055                     ??_IO_Set:	
  1637                           ; 0 bytes @ 0x0
  1638                           
  1639  0055                     ??_TMR1_Set:	
  1640                           ; 0 bytes @ 0x0
  1641                           
  1642  0055                     ??_ADC_Set:	
  1643                           ; 0 bytes @ 0x0
  1644                           
  1645  0055                     ??_UART_Set:	
  1646                           ; 0 bytes @ 0x0
  1647                           
  1648  0055                     ??_WDT_Set:	
  1649                           ; 0 bytes @ 0x0
  1650                           
  1651  0055                     ??_Timeout_Counter:	
  1652                           ; 0 bytes @ 0x0
  1653                           
  1654  0055                     ??_set_TimeoutCleared:	
  1655                           ; 0 bytes @ 0x0
  1656                           
  1657  0055                     ??_UART_Receive:	
  1658                           ; 0 bytes @ 0x0
  1659                           
  1660  0055                     ??_putch:	
  1661                           ; 0 bytes @ 0x0
  1662                           
  1663  0055                     ??_WDT_Clearing:	
  1664                           ; 0 bytes @ 0x0
  1665                           
  1666  0055                     ??_myMain_Initialization:	
  1667                           ; 0 bytes @ 0x0
  1668                           
  1669  0055                     ??_my_MainTimer:	
  1670                           ; 0 bytes @ 0x0
  1671                           
  1672  0055                     ??_getLightsControl_OK:	
  1673                           ; 0 bytes @ 0x0
  1674                           
  1675  0055                     ??_setLoad_AH_AL_Restore:	
  1676                           ; 0 bytes @ 0x0
  1677                           
  1678  0055                     ??_CDS_Initialization:	
  1679                           ; 0 bytes @ 0x0
  1680                           
  1681  0055                     ??_CDS_Main:	
  1682                           ; 0 bytes @ 0x0
  1683                           
  1684  0055                     ??_getCDS_Status:	
  1685                           ; 0 bytes @ 0x0
  1686                           
  1687  0055                     ??_LedPointSelect:	
  1688                           ; 0 bytes @ 0x0
  1689                           
  1690  0055                     ??_UART_SetData:	
  1691                           ; 0 bytes @ 0x0
  1692                           
  1693  0055                     ??_WDT_Main:	
  1694                           ; 0 bytes @ 0x0
  1695                           
  1696  0055                     ??_getMain_Lights_Count:	
  1697                           ; 0 bytes @ 0x0
  1698                           
  1699  0055                     ??_getLoad_OK:	
  1700                           ; 0 bytes @ 0x0
  1701                           
  1702  0055                     ??_LightsPointSelect:	
  1703                           ; 0 bytes @ 0x0
  1704                           
  1705  0055                     ?_getAD:	
  1706                           ; 0 bytes @ 0x0
  1707                           
  1708  0055                     ?___awdiv:	
  1709                           ; 1 bytes @ 0x0
  1710                           
  1711  0055                     ?___lwdiv:	
  1712                           ; 2 bytes @ 0x0
  1713                           
  1714  0055                     getCDS_Status@status:	
  1715                           ; 2 bytes @ 0x0
  1716                           
  1717  0055                     getAD@adcon1:	
  1718                           ; 1 bytes @ 0x0
  1719                           
  1720  0055                     putch@byte:	
  1721                           ; 1 bytes @ 0x0
  1722                           
  1723  0055                     getLoad_OK@ok:	
  1724                           ; 1 bytes @ 0x0
  1725                           
  1726  0055                     getLightsControl_OK@loadok:	
  1727                           ; 1 bytes @ 0x0
  1728                           
  1729  0055                     ___awdiv@divisor:	
  1730                           ; 1 bytes @ 0x0
  1731                           
  1732  0055                     ___lwdiv@divisor:	
  1733                           ; 2 bytes @ 0x0
  1734                           
  1735                           
  1736                           ; 2 bytes @ 0x0
  1737  0055                     	ds	1
  1738  0056                     ??_getAD:	
  1739  0056                     ??_UART_Transmit:	
  1740                           ; 0 bytes @ 0x1
  1741                           
  1742  0056                     ??_Mcu_Initialization:	
  1743                           ; 0 bytes @ 0x1
  1744                           
  1745  0056                     ??_getMain_All_Error_Status:	
  1746                           ; 0 bytes @ 0x1
  1747                           
  1748  0056                     ??_getMain_LoadOK:	
  1749                           ; 0 bytes @ 0x1
  1750                           
  1751  0056                     LedPointSelect@led:	
  1752                           ; 0 bytes @ 0x1
  1753                           
  1754  0056                     getAD@adcon0:	
  1755                           ; 1 bytes @ 0x1
  1756                           
  1757  0056                     getMain_Lights_Count@count:	
  1758                           ; 1 bytes @ 0x1
  1759                           
  1760  0056                     setLoad_AH_AL_Restore@i:	
  1761                           ; 1 bytes @ 0x1
  1762                           
  1763  0056                     LightsPointSelect@lights:	
  1764                           ; 1 bytes @ 0x1
  1765                           
  1766  0056                     UART_Transmit@i:	
  1767                           ; 1 bytes @ 0x1
  1768                           
  1769                           
  1770                           ; 2 bytes @ 0x1
  1771  0056                     	ds	1
  1772  0057                     ?_setLED:	
  1773  0057                     ??_Load_Initialization:	
  1774                           ; 0 bytes @ 0x2
  1775                           
  1776  0057                     ??_getLoad_AD:	
  1777                           ; 0 bytes @ 0x2
  1778                           
  1779  0057                     ??_getAll_Lights_Line:	
  1780                           ; 0 bytes @ 0x2
  1781                           
  1782  0057                     ?_setLights_Trigger:	
  1783                           ; 0 bytes @ 0x2
  1784                           
  1785  0057                     ??_getLights_Status:	
  1786                           ; 0 bytes @ 0x2
  1787                           
  1788  0057                     ??_setLights_Initialization:	
  1789                           ; 0 bytes @ 0x2
  1790                           
  1791  0057                     ??_Lights_Control:	
  1792                           ; 0 bytes @ 0x2
  1793                           
  1794  0057                     ??_setLights_Line:	
  1795                           ; 0 bytes @ 0x2
  1796                           
  1797  0057                     ?_getCDS_AD:	
  1798                           ; 0 bytes @ 0x2
  1799                           
  1800  0057                     getCDS_AD@channel2:	
  1801                           ; 0 bytes @ 0x2
  1802                           
  1803  0057                     setLED@command:	
  1804                           ; 1 bytes @ 0x2
  1805                           
  1806  0057                     getMain_Lights_Count@status2:	
  1807                           ; 1 bytes @ 0x2
  1808                           
  1809  0057                     getMain_LoadOK@ok:	
  1810                           ; 1 bytes @ 0x2
  1811                           
  1812  0057                     setLights_Initialization@lights:	
  1813                           ; 1 bytes @ 0x2
  1814                           
  1815  0057                     getLights_Status@lights:	
  1816                           ; 1 bytes @ 0x2
  1817                           
  1818  0057                     setLights_Trigger@command:	
  1819                           ; 1 bytes @ 0x2
  1820                           
  1821  0057                     setLights_Line@lights:	
  1822                           ; 1 bytes @ 0x2
  1823                           
  1824  0057                     getAll_Lights_Line@line:	
  1825                           ; 1 bytes @ 0x2
  1826                           
  1827  0057                     _getMain_All_Error_Status$2328:	
  1828                           ; 1 bytes @ 0x2
  1829                           
  1830  0057                     ___awdiv@dividend:	
  1831                           ; 2 bytes @ 0x2
  1832                           
  1833  0057                     ___lwdiv@dividend:	
  1834                           ; 2 bytes @ 0x2
  1835                           
  1836                           
  1837                           ; 2 bytes @ 0x2
  1838  0057                     	ds	1
  1839  0058                     ??_setLED:	
  1840  0058                     ??_Lights_Initialization:	
  1841                           ; 0 bytes @ 0x3
  1842                           
  1843  0058                     ??_setLights_Trigger:	
  1844                           ; 0 bytes @ 0x3
  1845                           
  1846  0058                     ??_getCDS_AD:	
  1847                           ; 0 bytes @ 0x3
  1848                           
  1849  0058                     ??_UART_Main:	
  1850                           ; 0 bytes @ 0x3
  1851                           
  1852  0058                     setLED@led:	
  1853                           ; 0 bytes @ 0x3
  1854                           
  1855  0058                     getMain_Lights_Count@status3:	
  1856                           ; 1 bytes @ 0x3
  1857                           
  1858  0058                     getLights_Status@status:	
  1859                           ; 1 bytes @ 0x3
  1860                           
  1861                           
  1862                           ; 1 bytes @ 0x3
  1863  0058                     	ds	1
  1864  0059                     ??_setLED_Initialization:	
  1865  0059                     ??_setPIRLED_Main:	
  1866                           ; 0 bytes @ 0x4
  1867                           
  1868  0059                     ??_PIR_Initialization:	
  1869                           ; 0 bytes @ 0x4
  1870                           
  1871  0059                     ??_getMain_LightsStatus:	
  1872                           ; 0 bytes @ 0x4
  1873                           
  1874  0059                     ??___awdiv:	
  1875                           ; 0 bytes @ 0x4
  1876                           
  1877  0059                     ??___lwdiv:	
  1878                           ; 0 bytes @ 0x4
  1879                           
  1880  0059                     setLED_Initialization@led:	
  1881                           ; 0 bytes @ 0x4
  1882                           
  1883  0059                     getMain_Lights_Count@status1:	
  1884                           ; 1 bytes @ 0x4
  1885                           
  1886  0059                     getLoad_AD@channel:	
  1887                           ; 1 bytes @ 0x4
  1888                           
  1889  0059                     setLights_Trigger@lights:	
  1890                           ; 1 bytes @ 0x4
  1891                           
  1892  0059                     _getMain_All_Error_Status$2330:	
  1893                           ; 1 bytes @ 0x4
  1894                           
  1895  0059                     _Lights_Control$4487:	
  1896                           ; 2 bytes @ 0x4
  1897                           
  1898                           
  1899                           ; 2 bytes @ 0x4
  1900  0059                     	ds	1
  1901  005A                     ??_LED_Initialization:	
  1902  005A                     ??_setMain_Exception:	
  1903                           ; 0 bytes @ 0x5
  1904                           
  1905  005A                     getCDS_AD@i:	
  1906                           ; 0 bytes @ 0x5
  1907                           
  1908  005A                     setPIRLED_Main@count:	
  1909                           ; 1 bytes @ 0x5
  1910                           
  1911  005A                     getMain_LightsStatus@count:	
  1912                           ; 1 bytes @ 0x5
  1913                           
  1914  005A                     getLoad_AD@k:	
  1915                           ; 1 bytes @ 0x5
  1916                           
  1917  005A                     ___awdiv@counter:	
  1918                           ; 1 bytes @ 0x5
  1919                           
  1920  005A                     ___lwdiv@quotient:	
  1921                           ; 1 bytes @ 0x5
  1922                           
  1923                           
  1924                           ; 2 bytes @ 0x5
  1925  005A                     	ds	1
  1926  005B                     ??_LED_Main:	
  1927  005B                     getCDS_AD@j:	
  1928                           ; 0 bytes @ 0x6
  1929                           
  1930  005B                     getMain_All_Error_Status@command:	
  1931                           ; 1 bytes @ 0x6
  1932                           
  1933  005B                     getLoad_AD@j:	
  1934                           ; 1 bytes @ 0x6
  1935                           
  1936  005B                     Lights_Control@lights:	
  1937                           ; 1 bytes @ 0x6
  1938                           
  1939  005B                     ___awdiv@sign:	
  1940                           ; 1 bytes @ 0x6
  1941                           
  1942  005B                     getMain_LightsStatus@i:	
  1943                           ; 1 bytes @ 0x6
  1944                           
  1945                           
  1946                           ; 2 bytes @ 0x6
  1947  005B                     	ds	1
  1948  005C                     getCDS_AD@channel1:	
  1949  005C                     setMain_Exception@buz:	
  1950                           ; 1 bytes @ 0x7
  1951                           
  1952  005C                     getMain_All_Error_Status@status:	
  1953                           ; 1 bytes @ 0x7
  1954                           
  1955  005C                     getLoad_AD@i:	
  1956                           ; 1 bytes @ 0x7
  1957                           
  1958  005C                     ___lwdiv@counter:	
  1959                           ; 1 bytes @ 0x7
  1960                           
  1961  005C                     ___awdiv@quotient:	
  1962                           ; 1 bytes @ 0x7
  1963                           
  1964                           
  1965                           ; 2 bytes @ 0x7
  1966  005C                     	ds	1
  1967  005D                     ?_setLights:	
  1968  005D                     setMain_Exception@status:	
  1969                           ; 0 bytes @ 0x8
  1970                           
  1971  005D                     getMain_LightsStatus@status:	
  1972                           ; 1 bytes @ 0x8
  1973                           
  1974  005D                     setLights@status:	
  1975                           ; 1 bytes @ 0x8
  1976                           
  1977                           
  1978                           ; 1 bytes @ 0x8
  1979  005D                     	ds	1
  1980  005E                     ?_getPIR_AD:	
  1981  005E                     ??_Load_Main:	
  1982                           ; 0 bytes @ 0x9
  1983                           
  1984  005E                     ??_Lights_Close:	
  1985                           ; 0 bytes @ 0x9
  1986                           
  1987  005E                     ??_setLights:	
  1988                           ; 0 bytes @ 0x9
  1989                           
  1990  005E                     getPIR_AD@channel2:	
  1991                           ; 0 bytes @ 0x9
  1992                           
  1993  005E                     _setMain_Exception$2310:	
  1994                           ; 1 bytes @ 0x9
  1995                           
  1996                           
  1997                           ; 2 bytes @ 0x9
  1998  005E                     	ds	1
  1999  005F                     ??_getPIR_AD:	
  2000  005F                     setLights@lights:	
  2001                           ; 0 bytes @ 0xA
  2002                           
  2003                           
  2004                           ; 1 bytes @ 0xA
  2005  005F                     	ds	1
  2006  0060                     ??_setLights_Main:	
  2007  0060                     setMain_Exception@command:	
  2008                           ; 0 bytes @ 0xB
  2009                           
  2010  0060                     Load_Main@j:	
  2011                           ; 1 bytes @ 0xB
  2012                           
  2013  0060                     setLights_Main@lights:	
  2014                           ; 1 bytes @ 0xB
  2015                           
  2016                           
  2017                           ; 1 bytes @ 0xB
  2018  0060                     	ds	1
  2019  0061                     ??_Lights_Main:	
  2020  0061                     ??_PIR_Main:	
  2021                           ; 0 bytes @ 0xC
  2022                           
  2023  0061                     Load_Main@adjgo:	
  2024                           ; 0 bytes @ 0xC
  2025                           
  2026                           
  2027                           ; 1 bytes @ 0xC
  2028  0061                     	ds	1
  2029  0062                     _Load_Main$2589:	
  2030  0062                     getPIR_AD@j:	
  2031                           ; 1 bytes @ 0xD
  2032                           
  2033                           
  2034                           ; 1 bytes @ 0xD
  2035  0062                     	ds	1
  2036  0063                     Load_Main@error:	
  2037  0063                     getPIR_AD@channel1:	
  2038                           ; 1 bytes @ 0xE
  2039                           
  2040                           
  2041                           ; 1 bytes @ 0xE
  2042  0063                     	ds	1
  2043  0064                     Load_Main@i:	
  2044  0064                     getPIR_AD@i:	
  2045                           ; 1 bytes @ 0xF
  2046                           
  2047  0064                     _Lights_Main$4467:	
  2048                           ; 1 bytes @ 0xF
  2049                           
  2050                           
  2051                           ; 2 bytes @ 0xF
  2052  0064                     	ds	2
  2053  0066                     _PIR_Main$3062:	
  2054                           
  2055                           ; 2 bytes @ 0x11
  2056  0066                     	ds	2
  2057  0068                     PIR_Main@error:	
  2058                           
  2059                           ; 1 bytes @ 0x13
  2060  0068                     	ds	1
  2061  0069                     ?_main:	
  2062  0069                     main@argc:	
  2063                           ; 2 bytes @ 0x14
  2064                           
  2065                           
  2066                           ; 2 bytes @ 0x14
  2067  0069                     	ds	2
  2068  006B                     main@argv:	
  2069                           
  2070                           ; 2 bytes @ 0x16
  2071  006B                     	ds	2
  2072  006D                     ??_main:	
  2073                           
  2074                           ; 0 bytes @ 0x18
  2075  006D                     	ds	1
  2076                           
  2077                           	psect	maintext
  2078  079B                     __pmaintext:	
  2079 ;;
  2080 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2081 ;;
  2082 ;; *************** function _main *****************
  2083 ;; Defined at:
  2084 ;;		line 7 in file "../src/Main_B1.c"
  2085 ;; Parameters:    Size  Location     Type
  2086 ;;  argc            2   20[BANK0 ] int 
  2087 ;;  argv            2   22[BANK0 ] PTR PTR unsigned char 
  2088 ;; Auto vars:     Size  Location     Type
  2089 ;;		None
  2090 ;; Return value:  Size  Location     Type
  2091 ;;                  2   20[BANK0 ] int 
  2092 ;; Registers used:
  2093 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2094 ;; Tracked objects:
  2095 ;;		On entry : 17F/0
  2096 ;;		On exit  : 0/0
  2097 ;;		Unchanged: 0/0
  2098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2099 ;;      Params:         0       4       0       0
  2100 ;;      Locals:         0       0       0       0
  2101 ;;      Temps:          0       1       0       0
  2102 ;;      Totals:         0       5       0       0
  2103 ;;Total ram usage:        5 bytes
  2104 ;; Hardware stack levels required when called:    8
  2105 ;; This function calls:
  2106 ;;		_CDS_Initialization
  2107 ;;		_CDS_Main
  2108 ;;		_LED_Initialization
  2109 ;;		_LED_Main
  2110 ;;		_Lights_Initialization
  2111 ;;		_Lights_Main
  2112 ;;		_Load_Initialization
  2113 ;;		_Load_Main
  2114 ;;		_Mcu_Initialization
  2115 ;;		_PIR_Initialization
  2116 ;;		_PIR_Main
  2117 ;;		_UART_Main
  2118 ;;		_WDT_Main
  2119 ;;		_getCDS_AD
  2120 ;;		_getLoad_AD
  2121 ;;		_getPIR_AD
  2122 ;;		_myMain_Initialization
  2123 ;;		_my_MainTimer
  2124 ;; This function is called by:
  2125 ;;		Startup code after reset
  2126 ;; This function uses a non-reentrant model
  2127 ;;
  2128                           
  2129                           
  2130                           ;psect for function _main
  2131  079B                     _main:	
  2132                           
  2133                           ;Main_B1.c: 8: myMain_Initialization();
  2134                           
  2135                           ;incstack = 0
  2136                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2137  079B  158A  23B4  118A   	fcall	_myMain_Initialization
  2138                           
  2139                           ;Main_B1.c: 9: Mcu_Initialization();
  2140  079E  158A  24C0  118A   	fcall	_Mcu_Initialization
  2141                           
  2142                           ;Main_B1.c: 10: ;;
  2143                           ;Main_B1.c: 11: LED_Initialization();
  2144  07A1  158A  241B  118A   	fcall	_LED_Initialization
  2145                           
  2146                           ;Main_B1.c: 12: ;;
  2147                           ;Main_B1.c: 14: ;;
  2148                           ;Main_B1.c: 15: ;;
  2149                           ;Main_B1.c: 16: Load_Initialization();
  2150  07A4  158A  23CF  118A   	fcall	_Load_Initialization
  2151                           
  2152                           ;Main_B1.c: 17: ;;
  2153                           ;Main_B1.c: 18: ;;
  2154                           ;Main_B1.c: 20: ;;
  2155                           ;Main_B1.c: 21: Lights_Initialization();
  2156  07A7  158A  23BC  118A   	fcall	_Lights_Initialization
  2157                           
  2158                           ;Main_B1.c: 22: CDS_Initialization();
  2159  07AA  158A  23B8  118A   	fcall	_CDS_Initialization
  2160                           
  2161                           ;Main_B1.c: 23: PIR_Initialization();
  2162  07AD  158A  24E5  118A   	fcall	_PIR_Initialization
  2163                           
  2164                           ;Main_B1.c: 24: ;;
  2165                           ;Main_B1.c: 25: ;;
  2166                           ;Main_B1.c: 26: __nop();
  2167  07B0  0000               	nop
  2168  07B1                     l4952:	
  2169                           ;Main_B1.c: 27: ;;
  2170                           ;Main_B1.c: 28: ;;
  2171                           ;Main_B1.c: 30: while (1) {
  2172                           
  2173                           
  2174                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2175  07B1  1283               	bcf	3,5	;RP0=0, select bank0
  2176  07B2  1303               	bcf	3,6	;RP1=0, select bank0
  2177  07B3  1C20               	btfss	_myMain,0
  2178  07B4  2FCD               	goto	l4960
  2179                           
  2180                           ;Main_B1.c: 38: getLoad_AD(0x01);
  2181  07B5  3001               	movlw	1
  2182  07B6  118A  251D  118A   	fcall	_getLoad_AD
  2183                           
  2184                           ;Main_B1.c: 50: getCDS_AD(0x09, 0x31);
  2185  07B9  3031               	movlw	49
  2186  07BA  1283               	bcf	3,5	;RP0=0, select bank0
  2187  07BB  1303               	bcf	3,6	;RP1=0, select bank0
  2188  07BC  00ED               	movwf	??_main
  2189  07BD  086D               	movf	??_main,w
  2190  07BE  00D7               	movwf	getCDS_AD@channel2
  2191  07BF  3009               	movlw	9
  2192  07C0  158A  2647  118A   	fcall	_getCDS_AD
  2193                           
  2194                           ;Main_B1.c: 54: getPIR_AD(0x05, 0x0d);
  2195  07C3  300D               	movlw	13
  2196  07C4  1283               	bcf	3,5	;RP0=0, select bank0
  2197  07C5  1303               	bcf	3,6	;RP1=0, select bank0
  2198  07C6  00ED               	movwf	??_main
  2199  07C7  086D               	movf	??_main,w
  2200  07C8  00DE               	movwf	getPIR_AD@channel2
  2201  07C9  3005               	movlw	5
  2202  07CA  118A  23E3  118A   	fcall	_getPIR_AD
  2203  07CD                     l4960:	
  2204                           
  2205                           ;Main_B1.c: 57: }
  2206                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2207  07CD  1283               	bcf	3,5	;RP0=0, select bank0
  2208  07CE  1303               	bcf	3,6	;RP1=0, select bank0
  2209  07CF  1C30               	btfss	_Timer1,0
  2210  07D0  2FB1               	goto	l4952
  2211                           
  2212                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2213  07D1  1030               	bcf	_Timer1,0
  2214                           
  2215                           ;Main_B1.c: 95: my_MainTimer();
  2216  07D2  158A  25F9  118A   	fcall	_my_MainTimer
  2217                           
  2218                           ;Main_B1.c: 96: WDT_Main();
  2219  07D5  118A  27EF  118A   	fcall	_WDT_Main
  2220                           
  2221                           ;Main_B1.c: 97: ;;
  2222                           ;Main_B1.c: 98: UART_Main();
  2223  07D8  158A  245D  118A   	fcall	_UART_Main
  2224                           
  2225                           ;Main_B1.c: 99: if (myMain.PowerON == 1) {
  2226  07DB  1283               	bcf	3,5	;RP0=0, select bank0
  2227  07DC  1303               	bcf	3,6	;RP1=0, select bank0
  2228  07DD  1C20               	btfss	_myMain,0
  2229  07DE  2FB1               	goto	l4952
  2230                           
  2231                           ;Main_B1.c: 100: ;;
  2232                           ;Main_B1.c: 102: LED_Main();
  2233  07DF  158A  23B5  118A   	fcall	_LED_Main
  2234                           
  2235                           ;Main_B1.c: 103: ;;
  2236                           ;Main_B1.c: 105: ;;
  2237                           ;Main_B1.c: 106: ;;
  2238                           ;Main_B1.c: 107: Load_Main();
  2239  07E2  118A  220C  118A   	fcall	_Load_Main
  2240                           
  2241                           ;Main_B1.c: 108: ;;
  2242                           ;Main_B1.c: 110: Lights_Main();
  2243  07E5  158A  2746  118A   	fcall	_Lights_Main
  2244                           
  2245                           ;Main_B1.c: 111: ;;
  2246                           ;Main_B1.c: 112: ;;
  2247                           ;Main_B1.c: 113: CDS_Main();
  2248  07E8  158A  26A2  118A   	fcall	_CDS_Main
  2249                           
  2250                           ;Main_B1.c: 114: PIR_Main();
  2251  07EB  118A  2025  118A   	fcall	_PIR_Main
  2252                           
  2253                           ;Main_B1.c: 116: ;;
  2254                           ;Main_B1.c: 117: ;;
  2255                           ;Main_B1.c: 118: ;;
  2256                           ;Main_B1.c: 119: ;;
  2257  07EE  2FB1               	goto	l4952
  2258  07EF                     __end_of_main:	
  2259                           ;Main_B1.c: 126: }
  2260                           ;Main_B1.c: 127: }
  2261                           ;Main_B1.c: 161: }
  2262                           ;Main_B1.c: 162: return (0);
  2263                           ;	Return value of _main is never used
  2264                           
  2265                           
  2266                           	psect	text1
  2267  0DF9                     __ptext1:	
  2268 ;; *************** function _my_MainTimer *****************
  2269 ;; Defined at:
  2270 ;;		line 181 in file "../src/Main_B1.c"
  2271 ;; Parameters:    Size  Location     Type
  2272 ;;		None
  2273 ;; Auto vars:     Size  Location     Type
  2274 ;;		None
  2275 ;; Return value:  Size  Location     Type
  2276 ;;		None               void
  2277 ;; Registers used:
  2278 ;;		wreg, status,2, status,0, pclath, cstack
  2279 ;; Tracked objects:
  2280 ;;		On entry : 0/0
  2281 ;;		On exit  : 0/0
  2282 ;;		Unchanged: 0/0
  2283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2284 ;;      Params:         0       0       0       0
  2285 ;;      Locals:         0       0       0       0
  2286 ;;      Temps:          0       0       0       0
  2287 ;;      Totals:         0       0       0       0
  2288 ;;Total ram usage:        0 bytes
  2289 ;; Hardware stack levels used:    1
  2290 ;; Hardware stack levels required when called:    4
  2291 ;; This function calls:
  2292 ;;		_UART_SetData
  2293 ;; This function is called by:
  2294 ;;		_main
  2295 ;; This function uses a non-reentrant model
  2296 ;;
  2297                           
  2298                           
  2299                           ;psect for function _my_MainTimer
  2300  0DF9                     _my_MainTimer:	
  2301                           
  2302                           ;Main_B1.c: 183: if (myMain.PowerON == 0) {
  2303                           
  2304                           ;incstack = 0
  2305                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0+pclath+cstack]
  2306  0DF9  1283               	bcf	3,5	;RP0=0, select bank0
  2307  0DFA  1303               	bcf	3,6	;RP1=0, select bank0
  2308  0DFB  1820               	btfsc	_myMain,0
  2309  0DFC  2E0D               	goto	l4576
  2310                           
  2311                           ;Main_B1.c: 184: myMain.PowerCount++;
  2312  0DFD  3001               	movlw	1
  2313  0DFE  07A1               	addwf	_myMain+1,f
  2314  0DFF  1803               	skipnc
  2315  0E00  0AA2               	incf	_myMain+2,f
  2316  0E01  3000               	movlw	0
  2317  0E02  07A2               	addwf	_myMain+2,f
  2318                           
  2319                           ;Main_B1.c: 185: if (myMain.PowerCount == 150)
  2320  0E03  3096               	movlw	150
  2321  0E04  0621               	xorwf	_myMain+1,w
  2322  0E05  0422               	iorwf	_myMain+2,w
  2323  0E06  1D03               	skipz
  2324  0E07  0008               	return
  2325                           
  2326                           ;Main_B1.c: 186: {
  2327                           ;Main_B1.c: 187: myMain.PowerCount = 0;
  2328  0E08  01A1               	clrf	_myMain+1
  2329  0E09  01A2               	clrf	_myMain+2
  2330                           
  2331                           ;Main_B1.c: 188: myMain.PowerON = 1;
  2332  0E0A  1420               	bsf	_myMain,0
  2333                           
  2334                           ;Main_B1.c: 193: ;;
  2335                           ;Main_B1.c: 194: myMain.SelfTest = 1;
  2336  0E0B  1620               	bsf	_myMain,4
  2337                           
  2338                           ;Main_B1.c: 203: }
  2339                           ;Main_B1.c: 204: } else {
  2340  0E0C  0008               	return
  2341  0E0D                     l4576:	
  2342                           
  2343                           ;Main_B1.c: 205: myMain.PowerCount++;
  2344  0E0D  3001               	movlw	1
  2345  0E0E  07A1               	addwf	_myMain+1,f
  2346  0E0F  1803               	skipnc
  2347  0E10  0AA2               	incf	_myMain+2,f
  2348  0E11  3000               	movlw	0
  2349  0E12  07A2               	addwf	_myMain+2,f
  2350                           
  2351                           ;Main_B1.c: 206: if (myMain.PowerCount == 100) {
  2352  0E13  3064               	movlw	100
  2353  0E14  0621               	xorwf	_myMain+1,w
  2354  0E15  0422               	iorwf	_myMain+2,w
  2355  0E16  1D03               	skipz
  2356  0E17  0008               	return
  2357                           
  2358                           ;Main_B1.c: 207: myMain.PowerCount = 0;
  2359  0E18  01A1               	clrf	_myMain+1
  2360  0E19  01A2               	clrf	_myMain+2
  2361                           
  2362                           ;Main_B1.c: 210: if (UART.TxGO == 0) {
  2363  0E1A  1841               	btfsc	_UART+11,0
  2364  0E1B  0008               	return
  2365                           
  2366                           ;Main_B1.c: 211: UART_SetData();
  2367  0E1C  158A  2401         	fcall	_UART_SetData
  2368  0E1E  0008               	return
  2369  0E1F                     __end_of_my_MainTimer:	
  2370                           
  2371                           	psect	text2
  2372  0C01                     __ptext2:	
  2373 ;; *************** function _UART_SetData *****************
  2374 ;; Defined at:
  2375 ;;		line 829 in file "../src/MCU_B1.c"
  2376 ;; Parameters:    Size  Location     Type
  2377 ;;		None
  2378 ;; Auto vars:     Size  Location     Type
  2379 ;;		None
  2380 ;; Return value:  Size  Location     Type
  2381 ;;		None               void
  2382 ;; Registers used:
  2383 ;;		wreg
  2384 ;; Tracked objects:
  2385 ;;		On entry : 0/0
  2386 ;;		On exit  : 0/0
  2387 ;;		Unchanged: 0/0
  2388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2389 ;;      Params:         0       0       0       0
  2390 ;;      Locals:         0       0       0       0
  2391 ;;      Temps:          0       0       0       0
  2392 ;;      Totals:         0       0       0       0
  2393 ;;Total ram usage:        0 bytes
  2394 ;; Hardware stack levels used:    1
  2395 ;; Hardware stack levels required when called:    3
  2396 ;; This function calls:
  2397 ;;		Nothing
  2398 ;; This function is called by:
  2399 ;;		_my_MainTimer
  2400 ;; This function uses a non-reentrant model
  2401 ;;
  2402                           
  2403                           
  2404                           ;psect for function _UART_SetData
  2405  0C01                     _UART_SetData:	
  2406                           
  2407                           ;MCU_B1.c: 839: if (UART.TxGO == 0) {
  2408                           
  2409                           ;incstack = 0
  2410                           ; Regs used in _UART_SetData: [wreg]
  2411  0C01  1283               	bcf	3,5	;RP0=0, select bank0
  2412  0C02  1303               	bcf	3,6	;RP1=0, select bank0
  2413  0C03  1841               	btfsc	_UART+11,0
  2414  0C04  0008               	return
  2415                           
  2416                           ;MCU_B1.c: 848: RB3 = RB3 == 1 ? 0 : 1;
  2417  0C05  3008               	movlw	8
  2418  0C06  0686               	xorwf	6,f
  2419                           
  2420                           ;MCU_B1.c: 850: UART.TxGO = 1;
  2421  0C07  1441               	bsf	_UART+11,0
  2422  0C08  0008               	return
  2423  0C09                     __end_of_UART_SetData:	
  2424                           
  2425                           	psect	text3
  2426  0BB4                     __ptext3:	
  2427 ;; *************** function _myMain_Initialization *****************
  2428 ;; Defined at:
  2429 ;;		line 168 in file "../src/Main_B1.c"
  2430 ;; Parameters:    Size  Location     Type
  2431 ;;		None
  2432 ;; Auto vars:     Size  Location     Type
  2433 ;;		None
  2434 ;; Return value:  Size  Location     Type
  2435 ;;		None               void
  2436 ;; Registers used:
  2437 ;;		None
  2438 ;; Tracked objects:
  2439 ;;		On entry : 0/0
  2440 ;;		On exit  : 0/0
  2441 ;;		Unchanged: 0/0
  2442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2443 ;;      Params:         0       0       0       0
  2444 ;;      Locals:         0       0       0       0
  2445 ;;      Temps:          0       0       0       0
  2446 ;;      Totals:         0       0       0       0
  2447 ;;Total ram usage:        0 bytes
  2448 ;; Hardware stack levels used:    1
  2449 ;; Hardware stack levels required when called:    3
  2450 ;; This function calls:
  2451 ;;		Nothing
  2452 ;; This function is called by:
  2453 ;;		_main
  2454 ;; This function uses a non-reentrant model
  2455 ;;
  2456                           
  2457                           
  2458                           ;psect for function _myMain_Initialization
  2459  0BB4                     _myMain_Initialization:	
  2460                           
  2461                           ;incstack = 0
  2462                           ; Regs used in _myMain_Initialization: []
  2463  0BB4  0008               	return
  2464  0BB5                     __end_of_myMain_Initialization:	
  2465                           
  2466                           	psect	text4
  2467  03E3                     __ptext4:	
  2468 ;; *************** function _getPIR_AD *****************
  2469 ;; Defined at:
  2470 ;;		line 167 in file "../src/PIR_B1.c"
  2471 ;; Parameters:    Size  Location     Type
  2472 ;;  channel1        1    wreg     unsigned char 
  2473 ;;  channel2        1    9[BANK0 ] unsigned char 
  2474 ;; Auto vars:     Size  Location     Type
  2475 ;;  channel1        1   14[BANK0 ] unsigned char 
  2476 ;;  i               1   15[BANK0 ] unsigned char 
  2477 ;;  j               1   13[BANK0 ] unsigned char 
  2478 ;; Return value:  Size  Location     Type
  2479 ;;		None               void
  2480 ;; Registers used:
  2481 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2482 ;; Tracked objects:
  2483 ;;		On entry : 0/0
  2484 ;;		On exit  : 0/0
  2485 ;;		Unchanged: 0/0
  2486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2487 ;;      Params:         0       1       0       0
  2488 ;;      Locals:         0       3       0       0
  2489 ;;      Temps:          0       3       0       0
  2490 ;;      Totals:         0       7       0       0
  2491 ;;Total ram usage:        7 bytes
  2492 ;; Hardware stack levels used:    1
  2493 ;; Hardware stack levels required when called:    5
  2494 ;; This function calls:
  2495 ;;		___awdiv
  2496 ;;		___lwdiv
  2497 ;;		_getAD
  2498 ;; This function is called by:
  2499 ;;		_main
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503                           
  2504                           ;psect for function _getPIR_AD
  2505  03E3                     _getPIR_AD:	
  2506                           
  2507                           ;incstack = 0
  2508                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2509                           ;getPIR_AD@channel1 stored from wreg
  2510  03E3  1283               	bcf	3,5	;RP0=0, select bank0
  2511  03E4  1303               	bcf	3,6	;RP1=0, select bank0
  2512  03E5  00E3               	movwf	getPIR_AD@channel1
  2513                           
  2514                           ;PIR_B1.c: 168: char i = 0, j = 0;
  2515  03E6  01E4               	clrf	getPIR_AD@i
  2516  03E7  01E2               	clrf	getPIR_AD@j
  2517                           
  2518                           ;PIR_B1.c: 170: if (_PIR.ADtoGO == 1) {
  2519  03E8  1683               	bsf	3,5	;RP0=1, select bank1
  2520  03E9  1303               	bcf	3,6	;RP1=0, select bank1
  2521  03EA  1CA0               	btfss	__PIR^(0+128),1
  2522  03EB  0008               	return
  2523                           
  2524                           ;PIR_B1.c: 171: _PIR.GO = 1;
  2525  03EC  1520               	bsf	__PIR^(0+128),2
  2526                           
  2527                           ;PIR_B1.c: 172: _PIR.ADRES = getAD(channel1, 0x70);
  2528  03ED  3070               	movlw	112
  2529  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  2530  03EF  1303               	bcf	3,6	;RP1=0, select bank0
  2531  03F0  00DF               	movwf	??_getPIR_AD
  2532  03F1  085F               	movf	??_getPIR_AD,w
  2533  03F2  00D5               	movwf	getAD@adcon1
  2534  03F3  0863               	movf	getPIR_AD@channel1,w
  2535  03F4  158A  25BB  118A   	fcall	_getAD
  2536  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  2537  03F8  1303               	bcf	3,6	;RP1=0, select bank0
  2538  03F9  00E0               	movwf	??_getPIR_AD+1
  2539  03FA  0860               	movf	??_getPIR_AD+1,w
  2540  03FB  1683               	bsf	3,5	;RP0=1, select bank1
  2541  03FC  1303               	bcf	3,6	;RP1=0, select bank1
  2542  03FD  00A2               	movwf	(__PIR^(0+128)+2)
  2543                           
  2544                           ;PIR_B1.c: 173: _PIR.VRAD = _PIR.ADRES / 51;
  2545  03FE  3033               	movlw	51
  2546  03FF  1283               	bcf	3,5	;RP0=0, select bank0
  2547  0400  1303               	bcf	3,6	;RP1=0, select bank0
  2548  0401  00D5               	movwf	___awdiv@divisor
  2549  0402  3000               	movlw	0
  2550  0403  00D6               	movwf	___awdiv@divisor+1
  2551  0404  1683               	bsf	3,5	;RP0=1, select bank1
  2552  0405  1303               	bcf	3,6	;RP1=0, select bank1
  2553  0406  0822               	movf	(__PIR^(0+128)+2),w
  2554  0407  1283               	bcf	3,5	;RP0=0, select bank0
  2555  0408  1303               	bcf	3,6	;RP1=0, select bank0
  2556  0409  00DF               	movwf	??_getPIR_AD
  2557  040A  01E0               	clrf	??_getPIR_AD+1
  2558  040B  085F               	movf	??_getPIR_AD,w
  2559  040C  00D7               	movwf	___awdiv@dividend
  2560  040D  0860               	movf	??_getPIR_AD+1,w
  2561  040E  00D8               	movwf	___awdiv@dividend+1
  2562  040F  118A  273E  118A   	fcall	___awdiv
  2563  0412  1283               	bcf	3,5	;RP0=0, select bank0
  2564  0413  1303               	bcf	3,6	;RP1=0, select bank0
  2565  0414  0855               	movf	?___awdiv,w
  2566  0415  00E1               	movwf	??_getPIR_AD+2
  2567  0416  0861               	movf	??_getPIR_AD+2,w
  2568  0417  1683               	bsf	3,5	;RP0=1, select bank1
  2569  0418  1303               	bcf	3,6	;RP1=0, select bank1
  2570  0419  00A3               	movwf	(__PIR^(0+128)+3)
  2571                           
  2572                           ;PIR_B1.c: 174: _PIR.VRAD1 = _PIR.ADRES;
  2573  041A  0822               	movf	(__PIR^(0+128)+2),w
  2574  041B  1283               	bcf	3,5	;RP0=0, select bank0
  2575  041C  1303               	bcf	3,6	;RP1=0, select bank0
  2576  041D  00DF               	movwf	??_getPIR_AD
  2577  041E  085F               	movf	??_getPIR_AD,w
  2578  041F  1683               	bsf	3,5	;RP0=1, select bank1
  2579  0420  1303               	bcf	3,6	;RP1=0, select bank1
  2580  0421  00A4               	movwf	(__PIR^(0+128)+4)
  2581                           
  2582                           ;PIR_B1.c: 175: _PIR.ADRES = getAD(channel2, 0x70);
  2583  0422  3070               	movlw	112
  2584  0423  1283               	bcf	3,5	;RP0=0, select bank0
  2585  0424  1303               	bcf	3,6	;RP1=0, select bank0
  2586  0425  00DF               	movwf	??_getPIR_AD
  2587  0426  085F               	movf	??_getPIR_AD,w
  2588  0427  00D5               	movwf	getAD@adcon1
  2589  0428  085E               	movf	getPIR_AD@channel2,w
  2590  0429  158A  25BB  118A   	fcall	_getAD
  2591  042C  1283               	bcf	3,5	;RP0=0, select bank0
  2592  042D  1303               	bcf	3,6	;RP1=0, select bank0
  2593  042E  00E0               	movwf	??_getPIR_AD+1
  2594  042F  0860               	movf	??_getPIR_AD+1,w
  2595  0430  1683               	bsf	3,5	;RP0=1, select bank1
  2596  0431  1303               	bcf	3,6	;RP1=0, select bank1
  2597  0432  00A2               	movwf	(__PIR^(0+128)+2)
  2598                           
  2599                           ;PIR_B1.c: 176: _PIR.SignalAD = _PIR.ADRES;
  2600  0433  0822               	movf	(__PIR^(0+128)+2),w
  2601  0434  1283               	bcf	3,5	;RP0=0, select bank0
  2602  0435  1303               	bcf	3,6	;RP1=0, select bank0
  2603  0436  00DF               	movwf	??_getPIR_AD
  2604  0437  085F               	movf	??_getPIR_AD,w
  2605  0438  1683               	bsf	3,5	;RP0=1, select bank1
  2606  0439  1303               	bcf	3,6	;RP1=0, select bank1
  2607  043A  00A1               	movwf	(__PIR^(0+128)+1)
  2608                           
  2609                           ;PIR_B1.c: 178: switch (_PIR.VRAD) {
  2610  043B  2C57               	goto	l4518
  2611  043C                     l4502:	
  2612                           ;PIR_B1.c: 179: case 0:
  2613                           
  2614                           
  2615                           ;PIR_B1.c: 180: if (_PIR.VRAD1 < 10) {
  2616  043C  300A               	movlw	10
  2617  043D  0224               	subwf	(__PIR^(0+128)+4),w
  2618  043E  1803               	skipnc
  2619  043F  2C42               	goto	l4506
  2620                           
  2621                           ;PIR_B1.c: 181: _PIR.CloseTimeValue = 5;
  2622  0440  3005               	movlw	5
  2623  0441  2C43               	goto	L1
  2624  0442                     l4506:	
  2625                           ;PIR_B1.c: 182: } else {
  2626                           
  2627                           
  2628                           ;PIR_B1.c: 183: _PIR.CloseTimeValue = 60;
  2629  0442  303C               	movlw	60
  2630  0443                     L1:	
  2631  0443  00C7               	movwf	(__PIR^(0+128)+39)
  2632  0444  3000               	movlw	0
  2633  0445  2C55               	goto	L5
  2634  0446                     l4508:	
  2635                           ;PIR_B1.c: 186: case 1:
  2636                           
  2637                           ;PIR_B1.c: 184: }
  2638                           ;PIR_B1.c: 185: break;
  2639                           
  2640                           
  2641                           ;PIR_B1.c: 187: _PIR.CloseTimeValue = 300;
  2642  0446  302C               	movlw	44
  2643  0447  00C7               	movwf	(__PIR^(0+128)+39)
  2644  0448  3001               	movlw	1
  2645  0449  2C55               	goto	L5
  2646  044A                     l4510:	
  2647                           ;PIR_B1.c: 189: case 2:
  2648                           
  2649                           ;PIR_B1.c: 188: break;
  2650                           
  2651                           
  2652                           ;PIR_B1.c: 190: _PIR.CloseTimeValue = 600;
  2653  044A  3058               	movlw	88
  2654  044B  00C7               	movwf	(__PIR^(0+128)+39)
  2655  044C  3002               	movlw	2
  2656  044D  2C55               	goto	L5
  2657  044E                     l4512:	
  2658                           ;PIR_B1.c: 192: case 3:
  2659                           
  2660                           ;PIR_B1.c: 191: break;
  2661                           
  2662                           
  2663                           ;PIR_B1.c: 193: _PIR.CloseTimeValue = 900;
  2664  044E  3084               	movlw	132
  2665  044F  00C7               	movwf	(__PIR^(0+128)+39)
  2666  0450  3003               	movlw	3
  2667  0451  2C55               	goto	L5
  2668  0452                     l4514:	
  2669                           ;PIR_B1.c: 195: case 4:
  2670                           
  2671                           ;PIR_B1.c: 194: break;
  2672                           
  2673                           
  2674                           ;PIR_B1.c: 196: _PIR.CloseTimeValue = 1200;
  2675  0452  30B0               	movlw	176
  2676  0453  00C7               	movwf	(__PIR^(0+128)+39)
  2677  0454  3004               	movlw	4
  2678  0455                     L5:	
  2679  0455  00C8               	movwf	(__PIR^(0+128)+40)
  2680                           
  2681                           ;PIR_B1.c: 198: }
  2682                           
  2683                           ;PIR_B1.c: 197: break;
  2684  0456  2C68               	goto	l4520
  2685  0457                     l4518:	
  2686  0457  0823               	movf	(__PIR^(0+128)+3),w
  2687                           
  2688                           ; Switch size 1, requested type "space"
  2689                           ; Number of cases is 5, Range of values is 0 to 4
  2690                           ; switch strategies available:
  2691                           ; Name         Instructions Cycles
  2692                           ; simple_byte           16     9 (average)
  2693                           ; direct_byte           17     7 (fixed)
  2694                           ; jumptable            260     6 (fixed)
  2695                           ;	Chosen strategy is simple_byte
  2696  0458  3A00               	xorlw	0	; case 0
  2697  0459  1903               	skipnz
  2698  045A  2C3C               	goto	l4502
  2699  045B  3A01               	xorlw	1	; case 1
  2700  045C  1903               	skipnz
  2701  045D  2C46               	goto	l4508
  2702  045E  3A03               	xorlw	3	; case 2
  2703  045F  1903               	skipnz
  2704  0460  2C4A               	goto	l4510
  2705  0461  3A01               	xorlw	1	; case 3
  2706  0462  1903               	skipnz
  2707  0463  2C4E               	goto	l4512
  2708  0464  3A07               	xorlw	7	; case 4
  2709  0465  1903               	skipnz
  2710  0466  2C52               	goto	l4514
  2711  0467  2C68               	goto	l4520
  2712  0468                     l4520:	
  2713                           
  2714                           ;PIR_B1.c: 201: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2715  0468  0821               	movf	(__PIR^(0+128)+1),w
  2716  0469  1283               	bcf	3,5	;RP0=0, select bank0
  2717  046A  1303               	bcf	3,6	;RP1=0, select bank0
  2718  046B  00DF               	movwf	??_getPIR_AD
  2719  046C  1683               	bsf	3,5	;RP0=1, select bank1
  2720  046D  1303               	bcf	3,6	;RP1=0, select bank1
  2721  046E  0827               	movf	(__PIR^(0+128)+7),w
  2722  046F  3EA8               	addlw	(__PIR+8)& (0+255)
  2723  0470  0084               	movwf	4
  2724  0471  1283               	bcf	3,5	;RP0=0, select bank0
  2725  0472  1303               	bcf	3,6	;RP1=0, select bank0
  2726  0473  085F               	movf	??_getPIR_AD,w
  2727  0474  1383               	bcf	3,7	;select IRP bank1
  2728  0475  0080               	movwf	0
  2729                           
  2730                           ;PIR_B1.c: 202: for (i = 0; i < 10; i++) {
  2731  0476  01E4               	clrf	getPIR_AD@i
  2732  0477  300A               	movlw	10
  2733  0478  0264               	subwf	getPIR_AD@i,w
  2734  0479  1803               	btfsc	3,0
  2735  047A  2C97               	goto	l4534
  2736  047B                     l4528:	
  2737                           
  2738                           ;PIR_B1.c: 203: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2739  047B  0864               	movf	getPIR_AD@i,w
  2740  047C  3EA8               	addlw	(__PIR+8)& (0+255)
  2741  047D  0084               	movwf	4
  2742  047E  0800               	movf	0,w
  2743  047F  00DF               	movwf	??_getPIR_AD
  2744  0480  01E0               	clrf	??_getPIR_AD+1
  2745  0481  085F               	movf	??_getPIR_AD,w
  2746  0482  1683               	bsf	3,5	;RP0=1, select bank1
  2747  0483  1303               	bcf	3,6	;RP1=0, select bank1
  2748  0484  07B2               	addwf	(__PIR^(0+128)+18),f
  2749  0485  1803               	skipnc
  2750  0486  0AB3               	incf	((__PIR+1)^(0+128)+18),f
  2751  0487  1283               	bcf	3,5	;RP0=0, select bank0
  2752  0488  1303               	bcf	3,6	;RP1=0, select bank0
  2753  0489  0860               	movf	??_getPIR_AD+1,w
  2754  048A  1683               	bsf	3,5	;RP0=1, select bank1
  2755  048B  1303               	bcf	3,6	;RP1=0, select bank1
  2756  048C  07B3               	addwf	((__PIR+1)^(0+128)+18),f
  2757  048D  3001               	movlw	1
  2758  048E  1283               	bcf	3,5	;RP0=0, select bank0
  2759  048F  1303               	bcf	3,6	;RP1=0, select bank0
  2760  0490  00DF               	movwf	??_getPIR_AD
  2761  0491  085F               	movf	??_getPIR_AD,w
  2762  0492  07E4               	addwf	getPIR_AD@i,f
  2763  0493  300A               	movlw	10
  2764  0494  0264               	subwf	getPIR_AD@i,w
  2765  0495  1C03               	skipc
  2766  0496  2C7B               	goto	l4528
  2767  0497                     l4534:	
  2768                           
  2769                           ;PIR_B1.c: 204: }
  2770                           ;PIR_B1.c: 205: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2771  0497  300A               	movlw	10
  2772  0498  00D5               	movwf	___lwdiv@divisor
  2773  0499  3000               	movlw	0
  2774  049A  00D6               	movwf	___lwdiv@divisor+1
  2775  049B  1683               	bsf	3,5	;RP0=1, select bank1
  2776  049C  1303               	bcf	3,6	;RP1=0, select bank1
  2777  049D  0833               	movf	((__PIR+1)^(0+128)+18),w
  2778  049E  1283               	bcf	3,5	;RP0=0, select bank0
  2779  049F  1303               	bcf	3,6	;RP1=0, select bank0
  2780  04A0  01D8               	clrf	___lwdiv@dividend+1
  2781  04A1  07D8               	addwf	___lwdiv@dividend+1,f
  2782  04A2  1683               	bsf	3,5	;RP0=1, select bank1
  2783  04A3  1303               	bcf	3,6	;RP1=0, select bank1
  2784  04A4  0832               	movf	(__PIR^(0+128)+18),w
  2785  04A5  1283               	bcf	3,5	;RP0=0, select bank0
  2786  04A6  1303               	bcf	3,6	;RP1=0, select bank0
  2787  04A7  01D7               	clrf	___lwdiv@dividend
  2788  04A8  07D7               	addwf	___lwdiv@dividend,f
  2789  04A9  158A  27C0  118A   	fcall	___lwdiv
  2790  04AC  1283               	bcf	3,5	;RP0=0, select bank0
  2791  04AD  1303               	bcf	3,6	;RP1=0, select bank0
  2792  04AE  0855               	movf	?___lwdiv,w
  2793  04AF  00DF               	movwf	??_getPIR_AD
  2794  04B0  1683               	bsf	3,5	;RP0=1, select bank1
  2795  04B1  1303               	bcf	3,6	;RP1=0, select bank1
  2796  04B2  0834               	movf	(__PIR^(0+128)+20),w
  2797  04B3  3EB5               	addlw	(__PIR+21)& (0+255)
  2798  04B4  0084               	movwf	4
  2799  04B5  1283               	bcf	3,5	;RP0=0, select bank0
  2800  04B6  1303               	bcf	3,6	;RP1=0, select bank0
  2801  04B7  085F               	movf	??_getPIR_AD,w
  2802  04B8  1383               	bcf	3,7	;select IRP bank1
  2803  04B9  0080               	movwf	0
  2804                           
  2805                           ;PIR_B1.c: 206: _PIR.TenAverageValue = 0;
  2806  04BA  1683               	bsf	3,5	;RP0=1, select bank1
  2807  04BB  1303               	bcf	3,6	;RP1=0, select bank1
  2808  04BC  01B2               	clrf	(__PIR^(0+128)+18)
  2809  04BD  01B3               	clrf	((__PIR+1)^(0+128)+18)
  2810                           
  2811                           ;PIR_B1.c: 208: for (i = 0; i <= 9; i++) {
  2812  04BE  1283               	bcf	3,5	;RP0=0, select bank0
  2813  04BF  1303               	bcf	3,6	;RP1=0, select bank0
  2814  04C0  01E4               	clrf	getPIR_AD@i
  2815  04C1  300A               	movlw	10
  2816  04C2  0264               	subwf	getPIR_AD@i,w
  2817  04C3  1803               	btfsc	3,0
  2818  04C4  2CE1               	goto	l4550
  2819  04C5                     l4544:	
  2820                           
  2821                           ;PIR_B1.c: 209: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2822  04C5  0864               	movf	getPIR_AD@i,w
  2823  04C6  3EB5               	addlw	(__PIR+21)& (0+255)
  2824  04C7  0084               	movwf	4
  2825  04C8  0800               	movf	0,w
  2826  04C9  00DF               	movwf	??_getPIR_AD
  2827  04CA  01E0               	clrf	??_getPIR_AD+1
  2828  04CB  085F               	movf	??_getPIR_AD,w
  2829  04CC  1683               	bsf	3,5	;RP0=1, select bank1
  2830  04CD  1303               	bcf	3,6	;RP1=0, select bank1
  2831  04CE  07BF               	addwf	(__PIR^(0+128)+31),f
  2832  04CF  1803               	skipnc
  2833  04D0  0AC0               	incf	((__PIR+1)^(0+128)+31),f
  2834  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  2835  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  2836  04D3  0860               	movf	??_getPIR_AD+1,w
  2837  04D4  1683               	bsf	3,5	;RP0=1, select bank1
  2838  04D5  1303               	bcf	3,6	;RP1=0, select bank1
  2839  04D6  07C0               	addwf	((__PIR+1)^(0+128)+31),f
  2840  04D7  3001               	movlw	1
  2841  04D8  1283               	bcf	3,5	;RP0=0, select bank0
  2842  04D9  1303               	bcf	3,6	;RP1=0, select bank0
  2843  04DA  00DF               	movwf	??_getPIR_AD
  2844  04DB  085F               	movf	??_getPIR_AD,w
  2845  04DC  07E4               	addwf	getPIR_AD@i,f
  2846  04DD  300A               	movlw	10
  2847  04DE  0264               	subwf	getPIR_AD@i,w
  2848  04DF  1C03               	skipc
  2849  04E0  2CC5               	goto	l4544
  2850  04E1                     l4550:	
  2851                           
  2852                           ;PIR_B1.c: 210: }
  2853                           ;PIR_B1.c: 211: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2854  04E1  300A               	movlw	10
  2855  04E2  00D5               	movwf	___lwdiv@divisor
  2856  04E3  3000               	movlw	0
  2857  04E4  00D6               	movwf	___lwdiv@divisor+1
  2858  04E5  1683               	bsf	3,5	;RP0=1, select bank1
  2859  04E6  1303               	bcf	3,6	;RP1=0, select bank1
  2860  04E7  0840               	movf	((__PIR+1)^(0+128)+31),w
  2861  04E8  1283               	bcf	3,5	;RP0=0, select bank0
  2862  04E9  1303               	bcf	3,6	;RP1=0, select bank0
  2863  04EA  01D8               	clrf	___lwdiv@dividend+1
  2864  04EB  07D8               	addwf	___lwdiv@dividend+1,f
  2865  04EC  1683               	bsf	3,5	;RP0=1, select bank1
  2866  04ED  1303               	bcf	3,6	;RP1=0, select bank1
  2867  04EE  083F               	movf	(__PIR^(0+128)+31),w
  2868  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  2869  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  2870  04F1  01D7               	clrf	___lwdiv@dividend
  2871  04F2  07D7               	addwf	___lwdiv@dividend,f
  2872  04F3  158A  27C0  118A   	fcall	___lwdiv
  2873  04F6  1283               	bcf	3,5	;RP0=0, select bank0
  2874  04F7  1303               	bcf	3,6	;RP1=0, select bank0
  2875  04F8  0855               	movf	?___lwdiv,w
  2876  04F9  00DF               	movwf	??_getPIR_AD
  2877  04FA  085F               	movf	??_getPIR_AD,w
  2878  04FB  1683               	bsf	3,5	;RP0=1, select bank1
  2879  04FC  1303               	bcf	3,6	;RP1=0, select bank1
  2880  04FD  00A6               	movwf	(__PIR^(0+128)+6)
  2881                           
  2882                           ;PIR_B1.c: 212: _PIR.HundredAverageValue = 0;
  2883  04FE  01BF               	clrf	(__PIR^(0+128)+31)
  2884  04FF  01C0               	clrf	((__PIR+1)^(0+128)+31)
  2885                           
  2886                           ;PIR_B1.c: 214: if (_PIR.TenCount < 10) {
  2887  0500  300A               	movlw	10
  2888  0501  0227               	subwf	(__PIR^(0+128)+7),w
  2889  0502  1803               	skipnc
  2890  0503  2D0D               	goto	l4558
  2891                           
  2892                           ;PIR_B1.c: 215: _PIR.TenCount++;
  2893  0504  3001               	movlw	1
  2894  0505  1283               	bcf	3,5	;RP0=0, select bank0
  2895  0506  1303               	bcf	3,6	;RP1=0, select bank0
  2896  0507  00DF               	movwf	??_getPIR_AD
  2897  0508  085F               	movf	??_getPIR_AD,w
  2898  0509  1683               	bsf	3,5	;RP0=1, select bank1
  2899  050A  1303               	bcf	3,6	;RP1=0, select bank1
  2900  050B  07A7               	addwf	(__PIR^(0+128)+7),f
  2901                           
  2902                           ;PIR_B1.c: 216: } else {
  2903  050C  0008               	return
  2904  050D                     l4558:	
  2905                           
  2906                           ;PIR_B1.c: 217: _PIR.TenCount = 0;
  2907  050D  01A7               	clrf	(__PIR^(0+128)+7)
  2908                           
  2909                           ;PIR_B1.c: 218: if (_PIR.HundreCount < 10)
  2910  050E  300A               	movlw	10
  2911  050F  0234               	subwf	(__PIR^(0+128)+20),w
  2912  0510  1803               	skipnc
  2913  0511  2D1B               	goto	l4564
  2914                           
  2915                           ;PIR_B1.c: 219: _PIR.HundreCount++;
  2916  0512  3001               	movlw	1
  2917  0513  1283               	bcf	3,5	;RP0=0, select bank0
  2918  0514  1303               	bcf	3,6	;RP1=0, select bank0
  2919  0515  00DF               	movwf	??_getPIR_AD
  2920  0516  085F               	movf	??_getPIR_AD,w
  2921  0517  1683               	bsf	3,5	;RP0=1, select bank1
  2922  0518  1303               	bcf	3,6	;RP1=0, select bank1
  2923  0519  07B4               	addwf	(__PIR^(0+128)+20),f
  2924  051A  0008               	return
  2925  051B                     l4564:	
  2926                           
  2927                           ;PIR_B1.c: 220: else
  2928                           ;PIR_B1.c: 221: _PIR.HundreCount = 0;
  2929  051B  01B4               	clrf	(__PIR^(0+128)+20)
  2930  051C  0008               	return
  2931  051D                     __end_of_getPIR_AD:	
  2932                           
  2933                           	psect	text5
  2934  0FC0                     __ptext5:	
  2935 ;; *************** function ___lwdiv *****************
  2936 ;; Defined at:
  2937 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;  divisor         2    0[BANK0 ] unsigned int 
  2940 ;;  dividend        2    2[BANK0 ] unsigned int 
  2941 ;; Auto vars:     Size  Location     Type
  2942 ;;  quotient        2    5[BANK0 ] unsigned int 
  2943 ;;  counter         1    7[BANK0 ] unsigned char 
  2944 ;; Return value:  Size  Location     Type
  2945 ;;                  2    0[BANK0 ] unsigned int 
  2946 ;; Registers used:
  2947 ;;		wreg, status,2, status,0
  2948 ;; Tracked objects:
  2949 ;;		On entry : 0/0
  2950 ;;		On exit  : 0/0
  2951 ;;		Unchanged: 0/0
  2952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2953 ;;      Params:         0       4       0       0
  2954 ;;      Locals:         0       3       0       0
  2955 ;;      Temps:          0       1       0       0
  2956 ;;      Totals:         0       8       0       0
  2957 ;;Total ram usage:        8 bytes
  2958 ;; Hardware stack levels used:    1
  2959 ;; Hardware stack levels required when called:    3
  2960 ;; This function calls:
  2961 ;;		Nothing
  2962 ;; This function is called by:
  2963 ;;		_getPIR_AD
  2964 ;; This function uses a non-reentrant model
  2965 ;;
  2966                           
  2967                           
  2968                           ;psect for function ___lwdiv
  2969  0FC0                     ___lwdiv:	
  2970                           
  2971                           ;incstack = 0
  2972                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2973  0FC0  1283               	bcf	3,5	;RP0=0, select bank0
  2974  0FC1  1303               	bcf	3,6	;RP1=0, select bank0
  2975  0FC2  01DA               	clrf	___lwdiv@quotient
  2976  0FC3  01DB               	clrf	___lwdiv@quotient+1
  2977  0FC4  0856               	movf	___lwdiv@divisor+1,w
  2978  0FC5  0455               	iorwf	___lwdiv@divisor,w
  2979  0FC6  1903               	skipnz
  2980  0FC7  2FF9               	goto	l3348
  2981  0FC8  01DC               	clrf	___lwdiv@counter
  2982  0FC9  0ADC               	incf	___lwdiv@counter,f
  2983  0FCA                     l3336:	
  2984  0FCA  1BD6               	btfsc	___lwdiv@divisor+1,7
  2985  0FCB  2FD8               	goto	l3338
  2986  0FCC  3001               	movlw	1
  2987  0FCD                     u2925:	
  2988  0FCD  1003               	clrc
  2989  0FCE  0DD5               	rlf	___lwdiv@divisor,f
  2990  0FCF  0DD6               	rlf	___lwdiv@divisor+1,f
  2991  0FD0  3EFF               	addlw	-1
  2992  0FD1  1D03               	skipz
  2993  0FD2  2FCD               	goto	u2925
  2994  0FD3  3001               	movlw	1
  2995  0FD4  00D9               	movwf	??___lwdiv
  2996  0FD5  0859               	movf	??___lwdiv,w
  2997  0FD6  07DC               	addwf	___lwdiv@counter,f
  2998  0FD7  2FCA               	goto	l3336
  2999  0FD8                     l3338:	
  3000  0FD8  3001               	movlw	1
  3001  0FD9                     u2945:	
  3002  0FD9  1003               	clrc
  3003  0FDA  0DDA               	rlf	___lwdiv@quotient,f
  3004  0FDB  0DDB               	rlf	___lwdiv@quotient+1,f
  3005  0FDC  3EFF               	addlw	-1
  3006  0FDD  1D03               	skipz
  3007  0FDE  2FD9               	goto	u2945
  3008  0FDF  0856               	movf	___lwdiv@divisor+1,w
  3009  0FE0  0258               	subwf	___lwdiv@dividend+1,w
  3010  0FE1  1D03               	skipz
  3011  0FE2  2FE5               	goto	u2955
  3012  0FE3  0855               	movf	___lwdiv@divisor,w
  3013  0FE4  0257               	subwf	___lwdiv@dividend,w
  3014  0FE5                     u2955:	
  3015  0FE5  1C03               	skipc
  3016  0FE6  2FEE               	goto	l3344
  3017  0FE7  0855               	movf	___lwdiv@divisor,w
  3018  0FE8  02D7               	subwf	___lwdiv@dividend,f
  3019  0FE9  0856               	movf	___lwdiv@divisor+1,w
  3020  0FEA  1C03               	skipc
  3021  0FEB  03D8               	decf	___lwdiv@dividend+1,f
  3022  0FEC  02D8               	subwf	___lwdiv@dividend+1,f
  3023  0FED  145A               	bsf	___lwdiv@quotient,0
  3024  0FEE                     l3344:	
  3025  0FEE  3001               	movlw	1
  3026  0FEF                     u2965:	
  3027  0FEF  1003               	clrc
  3028  0FF0  0CD6               	rrf	___lwdiv@divisor+1,f
  3029  0FF1  0CD5               	rrf	___lwdiv@divisor,f
  3030  0FF2  3EFF               	addlw	-1
  3031  0FF3  1D03               	skipz
  3032  0FF4  2FEF               	goto	u2965
  3033  0FF5  3001               	movlw	1
  3034  0FF6  02DC               	subwf	___lwdiv@counter,f
  3035  0FF7  1D03               	btfss	3,2
  3036  0FF8  2FD8               	goto	l3338
  3037  0FF9                     l3348:	
  3038  0FF9  085B               	movf	___lwdiv@quotient+1,w
  3039  0FFA  01D6               	clrf	?___lwdiv+1
  3040  0FFB  07D6               	addwf	?___lwdiv+1,f
  3041  0FFC  085A               	movf	___lwdiv@quotient,w
  3042  0FFD  01D5               	clrf	?___lwdiv
  3043  0FFE  07D5               	addwf	?___lwdiv,f
  3044  0FFF  0008               	return
  3045  1000                     __end_of___lwdiv:	
  3046                           
  3047                           	psect	text6
  3048  073E                     __ptext6:	
  3049 ;; *************** function ___awdiv *****************
  3050 ;; Defined at:
  3051 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;  divisor         2    0[BANK0 ] int 
  3054 ;;  dividend        2    2[BANK0 ] int 
  3055 ;; Auto vars:     Size  Location     Type
  3056 ;;  quotient        2    7[BANK0 ] int 
  3057 ;;  sign            1    6[BANK0 ] unsigned char 
  3058 ;;  counter         1    5[BANK0 ] unsigned char 
  3059 ;; Return value:  Size  Location     Type
  3060 ;;                  2    0[BANK0 ] int 
  3061 ;; Registers used:
  3062 ;;		wreg, status,2, status,0
  3063 ;; Tracked objects:
  3064 ;;		On entry : 0/0
  3065 ;;		On exit  : 0/0
  3066 ;;		Unchanged: 0/0
  3067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3068 ;;      Params:         0       4       0       0
  3069 ;;      Locals:         0       4       0       0
  3070 ;;      Temps:          0       1       0       0
  3071 ;;      Totals:         0       9       0       0
  3072 ;;Total ram usage:        9 bytes
  3073 ;; Hardware stack levels used:    1
  3074 ;; Hardware stack levels required when called:    3
  3075 ;; This function calls:
  3076 ;;		Nothing
  3077 ;; This function is called by:
  3078 ;;		_getPIR_AD
  3079 ;; This function uses a non-reentrant model
  3080 ;;
  3081                           
  3082                           
  3083                           ;psect for function ___awdiv
  3084  073E                     ___awdiv:	
  3085                           
  3086                           ;incstack = 0
  3087                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3088  073E  1283               	bcf	3,5	;RP0=0, select bank0
  3089  073F  1303               	bcf	3,6	;RP1=0, select bank0
  3090  0740  01DB               	clrf	___awdiv@sign
  3091  0741  1FD6               	btfss	___awdiv@divisor+1,7
  3092  0742  2F4A               	goto	l3290
  3093  0743  09D5               	comf	___awdiv@divisor,f
  3094  0744  09D6               	comf	___awdiv@divisor+1,f
  3095  0745  0AD5               	incf	___awdiv@divisor,f
  3096  0746  1903               	skipnz
  3097  0747  0AD6               	incf	___awdiv@divisor+1,f
  3098  0748  01DB               	clrf	___awdiv@sign
  3099  0749  0ADB               	incf	___awdiv@sign,f
  3100  074A                     l3290:	
  3101  074A  1FD8               	btfss	___awdiv@dividend+1,7
  3102  074B  2F55               	goto	l3296
  3103  074C  09D7               	comf	___awdiv@dividend,f
  3104  074D  09D8               	comf	___awdiv@dividend+1,f
  3105  074E  0AD7               	incf	___awdiv@dividend,f
  3106  074F  1903               	skipnz
  3107  0750  0AD8               	incf	___awdiv@dividend+1,f
  3108  0751  3001               	movlw	1
  3109  0752  00D9               	movwf	??___awdiv
  3110  0753  0859               	movf	??___awdiv,w
  3111  0754  06DB               	xorwf	___awdiv@sign,f
  3112  0755                     l3296:	
  3113  0755  01DC               	clrf	___awdiv@quotient
  3114  0756  01DD               	clrf	___awdiv@quotient+1
  3115  0757  0856               	movf	___awdiv@divisor+1,w
  3116  0758  0455               	iorwf	___awdiv@divisor,w
  3117  0759  1903               	skipnz
  3118  075A  2F8C               	goto	l3318
  3119  075B  01DA               	clrf	___awdiv@counter
  3120  075C  0ADA               	incf	___awdiv@counter,f
  3121  075D                     l3306:	
  3122  075D  1BD6               	btfsc	___awdiv@divisor+1,7
  3123  075E  2F6B               	goto	l3308
  3124  075F  3001               	movlw	1
  3125  0760                     u2845:	
  3126  0760  1003               	clrc
  3127  0761  0DD5               	rlf	___awdiv@divisor,f
  3128  0762  0DD6               	rlf	___awdiv@divisor+1,f
  3129  0763  3EFF               	addlw	-1
  3130  0764  1D03               	skipz
  3131  0765  2F60               	goto	u2845
  3132  0766  3001               	movlw	1
  3133  0767  00D9               	movwf	??___awdiv
  3134  0768  0859               	movf	??___awdiv,w
  3135  0769  07DA               	addwf	___awdiv@counter,f
  3136  076A  2F5D               	goto	l3306
  3137  076B                     l3308:	
  3138  076B  3001               	movlw	1
  3139  076C                     u2865:	
  3140  076C  1003               	clrc
  3141  076D  0DDC               	rlf	___awdiv@quotient,f
  3142  076E  0DDD               	rlf	___awdiv@quotient+1,f
  3143  076F  3EFF               	addlw	-1
  3144  0770  1D03               	skipz
  3145  0771  2F6C               	goto	u2865
  3146  0772  0856               	movf	___awdiv@divisor+1,w
  3147  0773  0258               	subwf	___awdiv@dividend+1,w
  3148  0774  1D03               	skipz
  3149  0775  2F78               	goto	u2875
  3150  0776  0855               	movf	___awdiv@divisor,w
  3151  0777  0257               	subwf	___awdiv@dividend,w
  3152  0778                     u2875:	
  3153  0778  1C03               	skipc
  3154  0779  2F81               	goto	l3314
  3155  077A  0855               	movf	___awdiv@divisor,w
  3156  077B  02D7               	subwf	___awdiv@dividend,f
  3157  077C  0856               	movf	___awdiv@divisor+1,w
  3158  077D  1C03               	skipc
  3159  077E  03D8               	decf	___awdiv@dividend+1,f
  3160  077F  02D8               	subwf	___awdiv@dividend+1,f
  3161  0780  145C               	bsf	___awdiv@quotient,0
  3162  0781                     l3314:	
  3163  0781  3001               	movlw	1
  3164  0782                     u2885:	
  3165  0782  1003               	clrc
  3166  0783  0CD6               	rrf	___awdiv@divisor+1,f
  3167  0784  0CD5               	rrf	___awdiv@divisor,f
  3168  0785  3EFF               	addlw	-1
  3169  0786  1D03               	skipz
  3170  0787  2F82               	goto	u2885
  3171  0788  3001               	movlw	1
  3172  0789  02DA               	subwf	___awdiv@counter,f
  3173  078A  1D03               	btfss	3,2
  3174  078B  2F6B               	goto	l3308
  3175  078C                     l3318:	
  3176  078C  085B               	movf	___awdiv@sign,w
  3177  078D  1903               	btfsc	3,2
  3178  078E  2F94               	goto	l3322
  3179  078F  09DC               	comf	___awdiv@quotient,f
  3180  0790  09DD               	comf	___awdiv@quotient+1,f
  3181  0791  0ADC               	incf	___awdiv@quotient,f
  3182  0792  1903               	skipnz
  3183  0793  0ADD               	incf	___awdiv@quotient+1,f
  3184  0794                     l3322:	
  3185  0794  085D               	movf	___awdiv@quotient+1,w
  3186  0795  01D6               	clrf	?___awdiv+1
  3187  0796  07D6               	addwf	?___awdiv+1,f
  3188  0797  085C               	movf	___awdiv@quotient,w
  3189  0798  01D5               	clrf	?___awdiv
  3190  0799  07D5               	addwf	?___awdiv,f
  3191  079A  0008               	return
  3192  079B                     __end_of___awdiv:	
  3193                           
  3194                           	psect	text7
  3195  051D                     __ptext7:	
  3196 ;; *************** function _getLoad_AD *****************
  3197 ;; Defined at:
  3198 ;;		line 15 in file "../src/OverLoad_B1.c"
  3199 ;; Parameters:    Size  Location     Type
  3200 ;;  channel         1    wreg     unsigned char 
  3201 ;; Auto vars:     Size  Location     Type
  3202 ;;  channel         1    4[BANK0 ] unsigned char 
  3203 ;;  i               1    7[BANK0 ] unsigned char 
  3204 ;;  j               1    6[BANK0 ] unsigned char 
  3205 ;;  k               1    5[BANK0 ] unsigned char 
  3206 ;; Return value:  Size  Location     Type
  3207 ;;		None               void
  3208 ;; Registers used:
  3209 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3210 ;; Tracked objects:
  3211 ;;		On entry : 0/0
  3212 ;;		On exit  : 0/0
  3213 ;;		Unchanged: 0/0
  3214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3215 ;;      Params:         0       0       0       0
  3216 ;;      Locals:         0       4       0       0
  3217 ;;      Temps:          0       2       0       0
  3218 ;;      Totals:         0       6       0       0
  3219 ;;Total ram usage:        6 bytes
  3220 ;; Hardware stack levels used:    1
  3221 ;; Hardware stack levels required when called:    5
  3222 ;; This function calls:
  3223 ;;		_getAD
  3224 ;; This function is called by:
  3225 ;;		_main
  3226 ;; This function uses a non-reentrant model
  3227 ;;
  3228                           
  3229                           
  3230                           ;psect for function _getLoad_AD
  3231  051D                     _getLoad_AD:	
  3232                           
  3233                           ;incstack = 0
  3234                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3235                           ;getLoad_AD@channel stored from wreg
  3236  051D  1283               	bcf	3,5	;RP0=0, select bank0
  3237  051E  1303               	bcf	3,6	;RP1=0, select bank0
  3238  051F  00D9               	movwf	getLoad_AD@channel
  3239                           
  3240                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  3241  0520  01DC               	clrf	getLoad_AD@i
  3242  0521  01DB               	clrf	getLoad_AD@j
  3243  0522  01DA               	clrf	getLoad_AD@k
  3244                           
  3245                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  3246  0523  1683               	bsf	3,5	;RP0=1, select bank1
  3247  0524  1303               	bcf	3,6	;RP1=0, select bank1
  3248  0525  1E4F               	btfss	_Load^(0+128),4
  3249  0526  0008               	return
  3250                           
  3251                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0x73);
  3252  0527  3073               	movlw	115
  3253  0528  1283               	bcf	3,5	;RP0=0, select bank0
  3254  0529  1303               	bcf	3,6	;RP1=0, select bank0
  3255  052A  00D7               	movwf	??_getLoad_AD
  3256  052B  0857               	movf	??_getLoad_AD,w
  3257  052C  00D5               	movwf	getAD@adcon1
  3258  052D  0859               	movf	getLoad_AD@channel,w
  3259  052E  158A  25BB  118A   	fcall	_getAD
  3260  0531  1283               	bcf	3,5	;RP0=0, select bank0
  3261  0532  1303               	bcf	3,6	;RP1=0, select bank0
  3262  0533  00D8               	movwf	??_getLoad_AD+1
  3263  0534  0858               	movf	??_getLoad_AD+1,w
  3264  0535  1683               	bsf	3,5	;RP0=1, select bank1
  3265  0536  1303               	bcf	3,6	;RP1=0, select bank1
  3266  0537  00E4               	movwf	(_Load^(0+128)+21)
  3267                           
  3268                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  3269  0538  1283               	bcf	3,5	;RP0=0, select bank0
  3270  0539  1303               	bcf	3,6	;RP1=0, select bank0
  3271  053A  01DC               	clrf	getLoad_AD@i
  3272  053B  3004               	movlw	4
  3273  053C  025C               	subwf	getLoad_AD@i,w
  3274  053D  1803               	btfsc	3,0
  3275  053E  2D64               	goto	l4470
  3276  053F                     l4458:	
  3277                           
  3278                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  3279  053F  085C               	movf	getLoad_AD@i,w
  3280  0540  3ED9               	addlw	(_Load+10)& (0+255)
  3281  0541  0084               	movwf	4
  3282  0542  1683               	bsf	3,5	;RP0=1, select bank1
  3283  0543  1303               	bcf	3,6	;RP1=0, select bank1
  3284  0544  0864               	movf	(_Load^(0+128)+21),w
  3285  0545  1383               	bcf	3,7	;select IRP bank1
  3286  0546  0200               	subwf	0,w
  3287  0547  1803               	skipnc
  3288  0548  2D5B               	goto	l4466
  3289  0549  1283               	bcf	3,5	;RP0=0, select bank0
  3290  054A  1303               	bcf	3,6	;RP1=0, select bank0
  3291  054B  08DB               	movf	getLoad_AD@j,f
  3292  054C  1D03               	skipz
  3293  054D  2D5B               	goto	l4466
  3294                           
  3295                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  3296  054E  1683               	bsf	3,5	;RP0=1, select bank1
  3297  054F  1303               	bcf	3,6	;RP1=0, select bank1
  3298  0550  0864               	movf	(_Load^(0+128)+21),w
  3299  0551  1283               	bcf	3,5	;RP0=0, select bank0
  3300  0552  1303               	bcf	3,6	;RP1=0, select bank0
  3301  0553  00D7               	movwf	??_getLoad_AD
  3302  0554  085C               	movf	getLoad_AD@i,w
  3303  0555  3ED9               	addlw	(_Load+10)& (0+255)
  3304  0556  0084               	movwf	4
  3305  0557  0857               	movf	??_getLoad_AD,w
  3306  0558  0080               	movwf	0
  3307                           
  3308                           ;OverLoad_B1.c: 24: j = 1;
  3309  0559  01DB               	clrf	getLoad_AD@j
  3310  055A  0ADB               	incf	getLoad_AD@j,f
  3311  055B                     l4466:	
  3312  055B  3001               	movlw	1
  3313  055C  1283               	bcf	3,5	;RP0=0, select bank0
  3314  055D  00D7               	movwf	??_getLoad_AD
  3315  055E  0857               	movf	??_getLoad_AD,w
  3316  055F  07DC               	addwf	getLoad_AD@i,f
  3317  0560  3004               	movlw	4
  3318  0561  025C               	subwf	getLoad_AD@i,w
  3319  0562  1C03               	skipc
  3320  0563  2D3F               	goto	l4458
  3321  0564                     l4470:	
  3322                           
  3323                           ;OverLoad_B1.c: 25: }
  3324                           ;OverLoad_B1.c: 26: }
  3325                           ;OverLoad_B1.c: 27: if (j == 0) {
  3326  0564  08DB               	movf	getLoad_AD@j,f
  3327  0565  1D03               	skipz
  3328  0566  0008               	return
  3329                           
  3330                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  3331  0567  01DC               	clrf	getLoad_AD@i
  3332  0568                     L6:	
  3333  0568  3004               	movlw	4
  3334  0569  025C               	subwf	getLoad_AD@i,w
  3335  056A  1803               	btfsc	3,0
  3336  056B  0008               	return
  3337                           
  3338                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  3339  056C  085C               	movf	getLoad_AD@i,w
  3340  056D  3EDE               	addlw	(_Load+15)& (0+255)
  3341  056E  0084               	movwf	4
  3342  056F  1383               	bcf	3,7	;select IRP bank1
  3343  0570  0800               	movf	0,w
  3344  0571  1683               	bsf	3,5	;RP0=1, select bank1
  3345  0572  1303               	bcf	3,6	;RP1=0, select bank1
  3346  0573  0264               	subwf	(_Load^(0+128)+21),w
  3347  0574  1803               	skipnc
  3348  0575  2D88               	goto	l4486
  3349  0576  1283               	bcf	3,5	;RP0=0, select bank0
  3350  0577  1303               	bcf	3,6	;RP1=0, select bank0
  3351  0578  08DA               	movf	getLoad_AD@k,f
  3352  0579  1D03               	skipz
  3353  057A  2D88               	goto	l4486
  3354                           
  3355                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  3356  057B  1683               	bsf	3,5	;RP0=1, select bank1
  3357  057C  1303               	bcf	3,6	;RP1=0, select bank1
  3358  057D  0864               	movf	(_Load^(0+128)+21),w
  3359  057E  1283               	bcf	3,5	;RP0=0, select bank0
  3360  057F  1303               	bcf	3,6	;RP1=0, select bank0
  3361  0580  00D7               	movwf	??_getLoad_AD
  3362  0581  085C               	movf	getLoad_AD@i,w
  3363  0582  3EDE               	addlw	(_Load+15)& (0+255)
  3364  0583  0084               	movwf	4
  3365  0584  0857               	movf	??_getLoad_AD,w
  3366  0585  0080               	movwf	0
  3367                           
  3368                           ;OverLoad_B1.c: 31: k = 1;
  3369  0586  01DA               	clrf	getLoad_AD@k
  3370  0587  0ADA               	incf	getLoad_AD@k,f
  3371  0588                     l4486:	
  3372  0588  3001               	movlw	1
  3373  0589  1283               	bcf	3,5	;RP0=0, select bank0
  3374  058A  00D7               	movwf	??_getLoad_AD
  3375  058B  0857               	movf	??_getLoad_AD,w
  3376  058C  07DC               	addwf	getLoad_AD@i,f
  3377  058D  2D68               	goto	L6
  3378  058E                     __end_of_getLoad_AD:	
  3379                           
  3380                           	psect	text8
  3381  0E47                     __ptext8:	
  3382 ;; *************** function _getCDS_AD *****************
  3383 ;; Defined at:
  3384 ;;		line 45 in file "../src/CDS_B1.c"
  3385 ;; Parameters:    Size  Location     Type
  3386 ;;  channel1        1    wreg     unsigned char 
  3387 ;;  channel2        1    2[BANK0 ] unsigned char 
  3388 ;; Auto vars:     Size  Location     Type
  3389 ;;  channel1        1    7[BANK0 ] unsigned char 
  3390 ;;  j               1    6[BANK0 ] unsigned char 
  3391 ;;  i               1    5[BANK0 ] unsigned char 
  3392 ;; Return value:  Size  Location     Type
  3393 ;;		None               void
  3394 ;; Registers used:
  3395 ;;		wreg, status,2, status,0, pclath, cstack
  3396 ;; Tracked objects:
  3397 ;;		On entry : 0/0
  3398 ;;		On exit  : 0/0
  3399 ;;		Unchanged: 0/0
  3400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3401 ;;      Params:         0       1       0       0
  3402 ;;      Locals:         0       3       0       0
  3403 ;;      Temps:          0       2       0       0
  3404 ;;      Totals:         0       6       0       0
  3405 ;;Total ram usage:        6 bytes
  3406 ;; Hardware stack levels used:    1
  3407 ;; Hardware stack levels required when called:    5
  3408 ;; This function calls:
  3409 ;;		_getAD
  3410 ;; This function is called by:
  3411 ;;		_main
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414                           
  3415                           
  3416                           ;psect for function _getCDS_AD
  3417  0E47                     _getCDS_AD:	
  3418                           
  3419                           ;incstack = 0
  3420                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3421                           ;getCDS_AD@channel1 stored from wreg
  3422  0E47  1283               	bcf	3,5	;RP0=0, select bank0
  3423  0E48  1303               	bcf	3,6	;RP1=0, select bank0
  3424  0E49  00DC               	movwf	getCDS_AD@channel1
  3425                           
  3426                           ;CDS_B1.c: 46: char i = 0, j = 0;
  3427  0E4A  01DA               	clrf	getCDS_AD@i
  3428  0E4B  01DB               	clrf	getCDS_AD@j
  3429                           
  3430                           ;CDS_B1.c: 47: if (_CDS.ADtoGO == 1) {
  3431  0E4C  1DA7               	btfss	__CDS,3
  3432  0E4D  0008               	return
  3433                           
  3434                           ;CDS_B1.c: 48: _CDS.GO = 1;
  3435  0E4E  14A7               	bsf	__CDS,1
  3436                           
  3437                           ;CDS_B1.c: 49: _CDS.ADRES = getAD(channel1, 0x70);
  3438  0E4F  3070               	movlw	112
  3439  0E50  00D8               	movwf	??_getCDS_AD
  3440  0E51  0858               	movf	??_getCDS_AD,w
  3441  0E52  00D5               	movwf	getAD@adcon1
  3442  0E53  085C               	movf	getCDS_AD@channel1,w
  3443  0E54  158A  25BB  158A   	fcall	_getAD
  3444  0E57  1283               	bcf	3,5	;RP0=0, select bank0
  3445  0E58  1303               	bcf	3,6	;RP1=0, select bank0
  3446  0E59  00D9               	movwf	??_getCDS_AD+1
  3447  0E5A  0859               	movf	??_getCDS_AD+1,w
  3448  0E5B  00AB               	movwf	__CDS+4
  3449                           
  3450                           ;CDS_B1.c: 50: _CDS.VRAD = _CDS.ADRES;
  3451  0E5C  082B               	movf	__CDS+4,w
  3452  0E5D  00D8               	movwf	??_getCDS_AD
  3453  0E5E  0858               	movf	??_getCDS_AD,w
  3454  0E5F  00A9               	movwf	__CDS+2
  3455                           
  3456                           ;CDS_B1.c: 51: _CDS.ADRES = getAD(channel2, 0x70);
  3457  0E60  3070               	movlw	112
  3458  0E61  00D8               	movwf	??_getCDS_AD
  3459  0E62  0858               	movf	??_getCDS_AD,w
  3460  0E63  00D5               	movwf	getAD@adcon1
  3461  0E64  0857               	movf	getCDS_AD@channel2,w
  3462  0E65  158A  25BB         	fcall	_getAD
  3463  0E67  1283               	bcf	3,5	;RP0=0, select bank0
  3464  0E68  1303               	bcf	3,6	;RP1=0, select bank0
  3465  0E69  00D9               	movwf	??_getCDS_AD+1
  3466  0E6A  0859               	movf	??_getCDS_AD+1,w
  3467  0E6B  00AB               	movwf	__CDS+4
  3468                           
  3469                           ;CDS_B1.c: 52: _CDS.SignalAD = _CDS.ADRES;
  3470  0E6C  082B               	movf	__CDS+4,w
  3471  0E6D  00D8               	movwf	??_getCDS_AD
  3472  0E6E  0858               	movf	??_getCDS_AD,w
  3473  0E6F  00AA               	movwf	__CDS+3
  3474  0E70  0008               	return
  3475  0E71                     __end_of_getCDS_AD:	
  3476                           
  3477                           	psect	text9
  3478  0DBB                     __ptext9:	
  3479 ;; *************** function _getAD *****************
  3480 ;; Defined at:
  3481 ;;		line 428 in file "../src/MCU_B1.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;  adcon0          1    wreg     unsigned char 
  3484 ;;  adcon1          1    0[BANK0 ] unsigned char 
  3485 ;; Auto vars:     Size  Location     Type
  3486 ;;  adcon0          1    1[BANK0 ] unsigned char 
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  1    wreg      unsigned char 
  3489 ;; Registers used:
  3490 ;;		wreg, status,2, status,0, pclath, cstack
  3491 ;; Tracked objects:
  3492 ;;		On entry : 0/0
  3493 ;;		On exit  : 0/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3496 ;;      Params:         0       1       0       0
  3497 ;;      Locals:         0       1       0       0
  3498 ;;      Temps:          0       0       0       0
  3499 ;;      Totals:         0       2       0       0
  3500 ;;Total ram usage:        2 bytes
  3501 ;; Hardware stack levels used:    1
  3502 ;; Hardware stack levels required when called:    4
  3503 ;; This function calls:
  3504 ;;		_Timeout_Counter
  3505 ;;		_set_TimeoutCleared
  3506 ;; This function is called by:
  3507 ;;		_getCDS_AD
  3508 ;;		_getLoad_AD
  3509 ;;		_getPIR_AD
  3510 ;; This function uses a non-reentrant model
  3511 ;;
  3512                           
  3513                           
  3514                           ;psect for function _getAD
  3515  0DBB                     _getAD:	
  3516                           
  3517                           ;incstack = 0
  3518                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3519                           ;getAD@adcon0 stored from wreg
  3520  0DBB  1283               	bcf	3,5	;RP0=0, select bank0
  3521  0DBC  1303               	bcf	3,6	;RP1=0, select bank0
  3522  0DBD  00D6               	movwf	getAD@adcon0
  3523                           
  3524                           ;MCU_B1.c: 429: ADCON0 = adcon0;
  3525  0DBE  0856               	movf	getAD@adcon0,w
  3526  0DBF  009F               	movwf	31	;volatile
  3527                           
  3528                           ;MCU_B1.c: 430: ADCON1 = adcon1;
  3529  0DC0  0855               	movf	getAD@adcon1,w
  3530  0DC1  1683               	bsf	3,5	;RP0=1, select bank1
  3531  0DC2  1303               	bcf	3,6	;RP1=0, select bank1
  3532  0DC3  009F               	movwf	31	;volatile
  3533                           
  3534                           ;MCU_B1.c: 431: GO_nDONE = 1;
  3535  0DC4  1283               	bcf	3,5	;RP0=0, select bank0
  3536  0DC5  1303               	bcf	3,6	;RP1=0, select bank0
  3537  0DC6  149F               	bsf	31,1	;volatile
  3538                           
  3539                           ;MCU_B1.c: 432: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3540  0DC7  2DCB               	goto	l4216
  3541  0DC8                     l4214:	
  3542                           
  3543                           ;MCU_B1.c: 433: Timeout_Counter();
  3544  0DC8  158A  24F9  158A   	fcall	_Timeout_Counter
  3545  0DCB                     l4216:	
  3546  0DCB  1283               	bcf	3,5	;RP0=0, select bank0
  3547  0DCC  1303               	bcf	3,6	;RP1=0, select bank0
  3548  0DCD  1C9F               	btfss	31,1	;volatile
  3549  0DCE  2DD1               	goto	l4220
  3550  0DCF  1D24               	btfss	_myMain+4,2
  3551  0DD0  2DC8               	goto	l4214
  3552  0DD1                     l4220:	
  3553                           
  3554                           ;MCU_B1.c: 434: };
  3555                           ;MCU_B1.c: 435: set_TimeoutCleared();
  3556  0DD1  158A  23D5         	fcall	_set_TimeoutCleared
  3557                           
  3558                           ;MCU_B1.c: 436: return ADRES;
  3559  0DD3  1283               	bcf	3,5	;RP0=0, select bank0
  3560  0DD4  1303               	bcf	3,6	;RP1=0, select bank0
  3561  0DD5  081E               	movf	30,w	;volatile
  3562  0DD6  0008               	return
  3563  0DD7                     __end_of_getAD:	
  3564                           
  3565                           	psect	text10
  3566  0BD5                     __ptext10:	
  3567 ;; *************** function _set_TimeoutCleared *****************
  3568 ;; Defined at:
  3569 ;;		line 283 in file "../src/Main_B1.c"
  3570 ;; Parameters:    Size  Location     Type
  3571 ;;		None
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;		None
  3574 ;; Return value:  Size  Location     Type
  3575 ;;		None               void
  3576 ;; Registers used:
  3577 ;;		status,2
  3578 ;; Tracked objects:
  3579 ;;		On entry : 0/0
  3580 ;;		On exit  : 0/0
  3581 ;;		Unchanged: 0/0
  3582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3583 ;;      Params:         0       0       0       0
  3584 ;;      Locals:         0       0       0       0
  3585 ;;      Temps:          0       0       0       0
  3586 ;;      Totals:         0       0       0       0
  3587 ;;Total ram usage:        0 bytes
  3588 ;; Hardware stack levels used:    1
  3589 ;; Hardware stack levels required when called:    3
  3590 ;; This function calls:
  3591 ;;		Nothing
  3592 ;; This function is called by:
  3593 ;;		_getAD
  3594 ;; This function uses a non-reentrant model
  3595 ;;
  3596                           
  3597                           
  3598                           ;psect for function _set_TimeoutCleared
  3599  0BD5                     _set_TimeoutCleared:	
  3600                           
  3601                           ;Main_B1.c: 284: myMain.Timeout = 0;
  3602                           
  3603                           ;incstack = 0
  3604                           ; Regs used in _set_TimeoutCleared: [status,2]
  3605  0BD5  1283               	bcf	3,5	;RP0=0, select bank0
  3606  0BD6  1303               	bcf	3,6	;RP1=0, select bank0
  3607  0BD7  1124               	bcf	_myMain+4,2
  3608                           
  3609                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
  3610  0BD8  01A5               	clrf	_myMain+5
  3611  0BD9  01A6               	clrf	_myMain+6
  3612  0BDA  0008               	return
  3613  0BDB                     __end_of_set_TimeoutCleared:	
  3614                           
  3615                           	psect	text11
  3616  0CF9                     __ptext11:	
  3617 ;; *************** function _Timeout_Counter *****************
  3618 ;; Defined at:
  3619 ;;		line 274 in file "../src/Main_B1.c"
  3620 ;; Parameters:    Size  Location     Type
  3621 ;;		None
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;		None
  3624 ;; Return value:  Size  Location     Type
  3625 ;;		None               void
  3626 ;; Registers used:
  3627 ;;		wreg, status,2
  3628 ;; Tracked objects:
  3629 ;;		On entry : 0/0
  3630 ;;		On exit  : 0/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3633 ;;      Params:         0       0       0       0
  3634 ;;      Locals:         0       0       0       0
  3635 ;;      Temps:          0       0       0       0
  3636 ;;      Totals:         0       0       0       0
  3637 ;;Total ram usage:        0 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; Hardware stack levels required when called:    3
  3640 ;; This function calls:
  3641 ;;		Nothing
  3642 ;; This function is called by:
  3643 ;;		_getAD
  3644 ;; This function uses a non-reentrant model
  3645 ;;
  3646                           
  3647                           
  3648                           ;psect for function _Timeout_Counter
  3649  0CF9                     _Timeout_Counter:	
  3650                           
  3651                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
  3652                           
  3653                           ;incstack = 0
  3654                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3655  0CF9  3001               	movlw	1
  3656  0CFA  1283               	bcf	3,5	;RP0=0, select bank0
  3657  0CFB  1303               	bcf	3,6	;RP1=0, select bank0
  3658  0CFC  07A5               	addwf	_myMain+5,f
  3659  0CFD  1803               	skipnc
  3660  0CFE  0AA6               	incf	_myMain+6,f
  3661  0CFF  3000               	movlw	0
  3662  0D00  07A6               	addwf	_myMain+6,f
  3663                           
  3664                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 10000) {
  3665  0D01  3027               	movlw	39
  3666  0D02  0626               	xorwf	_myMain+6,w
  3667  0D03  1D03               	skipz
  3668  0D04  2D07               	goto	u4375
  3669  0D05  3010               	movlw	16
  3670  0D06  0625               	xorwf	_myMain+5,w
  3671  0D07                     u4375:	
  3672  0D07  1D03               	skipz
  3673  0D08  0008               	return
  3674                           
  3675                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
  3676  0D09  01A5               	clrf	_myMain+5
  3677  0D0A  01A6               	clrf	_myMain+6
  3678                           
  3679                           ;Main_B1.c: 278: myMain.Timeout = 1;
  3680  0D0B  1524               	bsf	_myMain+4,2
  3681  0D0C  0008               	return
  3682  0D0D                     __end_of_Timeout_Counter:	
  3683                           
  3684                           	psect	text12
  3685  07EF                     __ptext12:	
  3686 ;; *************** function _WDT_Main *****************
  3687 ;; Defined at:
  3688 ;;		line 1058 in file "../src/MCU_B1.c"
  3689 ;; Parameters:    Size  Location     Type
  3690 ;;		None
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;		None
  3693 ;; Return value:  Size  Location     Type
  3694 ;;		None               void
  3695 ;; Registers used:
  3696 ;;		wreg, status,2, status,0, pclath, cstack
  3697 ;; Tracked objects:
  3698 ;;		On entry : 0/0
  3699 ;;		On exit  : 0/0
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3702 ;;      Params:         0       0       0       0
  3703 ;;      Locals:         0       0       0       0
  3704 ;;      Temps:          0       1       0       0
  3705 ;;      Totals:         0       1       0       0
  3706 ;;Total ram usage:        1 bytes
  3707 ;; Hardware stack levels used:    1
  3708 ;; Hardware stack levels required when called:    4
  3709 ;; This function calls:
  3710 ;;		_WDT_Clearing
  3711 ;; This function is called by:
  3712 ;;		_main
  3713 ;; This function uses a non-reentrant model
  3714 ;;
  3715                           
  3716                           
  3717                           ;psect for function _WDT_Main
  3718  07EF                     _WDT_Main:	
  3719                           
  3720                           ;MCU_B1.c: 1059: if (WDT.Enable == 1) {
  3721                           
  3722                           ;incstack = 0
  3723                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3724  07EF  1C77               	btfss	_WDT,0
  3725  07F0  0008               	return
  3726                           
  3727                           ;MCU_B1.c: 1060: if (WDT.Timer-- > 0) {
  3728  07F1  3001               	movlw	1
  3729  07F2  02F8               	subwf	_WDT+1,f
  3730  07F3  0878               	movf	_WDT+1,w
  3731  07F4  3AFF               	xorlw	255
  3732  07F5  1903               	skipnz
  3733  07F6  0008               	return
  3734                           
  3735                           ;MCU_B1.c: 1061: WDT.Timer = 100;
  3736  07F7  3064               	movlw	100
  3737  07F8  1283               	bcf	3,5	;RP0=0, select bank0
  3738  07F9  1303               	bcf	3,6	;RP1=0, select bank0
  3739  07FA  00D5               	movwf	??_WDT_Main
  3740  07FB  0855               	movf	??_WDT_Main,w
  3741  07FC  00F8               	movwf	_WDT+1
  3742                           
  3743                           ;MCU_B1.c: 1062: WDT_Clearing();
  3744  07FD  118A  2002         	fcall	_WDT_Clearing
  3745  07FF  0008               	return
  3746  0800                     __end_of_WDT_Main:	
  3747                           
  3748                           	psect	text13
  3749  0002                     __ptext13:	
  3750 ;; *************** function _WDT_Clearing *****************
  3751 ;; Defined at:
  3752 ;;		line 1068 in file "../src/MCU_B1.c"
  3753 ;; Parameters:    Size  Location     Type
  3754 ;;		None
  3755 ;; Auto vars:     Size  Location     Type
  3756 ;;		None
  3757 ;; Return value:  Size  Location     Type
  3758 ;;		None               void
  3759 ;; Registers used:
  3760 ;;		None
  3761 ;; Tracked objects:
  3762 ;;		On entry : 0/0
  3763 ;;		On exit  : 0/0
  3764 ;;		Unchanged: 0/0
  3765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3766 ;;      Params:         0       0       0       0
  3767 ;;      Locals:         0       0       0       0
  3768 ;;      Temps:          0       0       0       0
  3769 ;;      Totals:         0       0       0       0
  3770 ;;Total ram usage:        0 bytes
  3771 ;; Hardware stack levels used:    1
  3772 ;; Hardware stack levels required when called:    3
  3773 ;; This function calls:
  3774 ;;		Nothing
  3775 ;; This function is called by:
  3776 ;;		_WDT_Main
  3777 ;; This function uses a non-reentrant model
  3778 ;;
  3779                           
  3780                           
  3781                           ;psect for function _WDT_Clearing
  3782  0002                     _WDT_Clearing:	
  3783                           
  3784                           ;incstack = 0
  3785                           ; Regs used in _WDT_Clearing: []
  3786  0002  0064               	clrwdt	;# 
  3787  0003  0008               	return
  3788  0004                     __end_of_WDT_Clearing:	
  3789                           
  3790                           	psect	text14
  3791  0C5D                     __ptext14:	
  3792 ;; *************** function _UART_Main *****************
  3793 ;; Defined at:
  3794 ;;		line 757 in file "../src/MCU_B1.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;		None
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;		None
  3799 ;; Return value:  Size  Location     Type
  3800 ;;		None               void
  3801 ;; Registers used:
  3802 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3803 ;; Tracked objects:
  3804 ;;		On entry : 0/0
  3805 ;;		On exit  : 0/0
  3806 ;;		Unchanged: 0/0
  3807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3808 ;;      Params:         0       0       0       0
  3809 ;;      Locals:         0       0       0       0
  3810 ;;      Temps:          0       0       0       0
  3811 ;;      Totals:         0       0       0       0
  3812 ;;Total ram usage:        0 bytes
  3813 ;; Hardware stack levels used:    1
  3814 ;; Hardware stack levels required when called:    5
  3815 ;; This function calls:
  3816 ;;		_UART_Receive
  3817 ;;		_UART_Transmit
  3818 ;; This function is called by:
  3819 ;;		_main
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823                           
  3824                           ;psect for function _UART_Main
  3825  0C5D                     _UART_Main:	
  3826                           
  3827                           ;MCU_B1.c: 758: if (UART.RxGO == 1) {
  3828                           
  3829                           ;incstack = 0
  3830                           ; Regs used in _UART_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3831  0C5D  1283               	bcf	3,5	;RP0=0, select bank0
  3832  0C5E  1303               	bcf	3,6	;RP1=0, select bank0
  3833  0C5F  1CC1               	btfss	_UART+11,1
  3834  0C60  2C65               	goto	l476
  3835                           
  3836                           ;MCU_B1.c: 759: UART.RxGO = 0;
  3837  0C61  10C1               	bcf	_UART+11,1
  3838                           
  3839                           ;MCU_B1.c: 760: UART_Receive();
  3840  0C62  158A  23C0         	fcall	_UART_Receive
  3841                           
  3842                           ;MCU_B1.c: 761: ;;
  3843                           ;MCU_B1.c: 764: } else {
  3844  0C64  0008               	return
  3845  0C65                     l476:	
  3846                           
  3847                           ;MCU_B1.c: 765: if (UART.TxGO == 1) {
  3848  0C65  1C41               	btfss	_UART+11,0
  3849  0C66  0008               	return
  3850                           
  3851                           ;MCU_B1.c: 766: UART.TxGO = 0;
  3852  0C67  1041               	bcf	_UART+11,0
  3853                           
  3854                           ;MCU_B1.c: 767: UART_Transmit();
  3855  0C68  158A  25D7         	fcall	_UART_Transmit
  3856  0C6A  0008               	return
  3857  0C6B                     __end_of_UART_Main:	
  3858                           
  3859                           	psect	text15
  3860  0DD7                     __ptext15:	
  3861 ;; *************** function _UART_Transmit *****************
  3862 ;; Defined at:
  3863 ;;		line 772 in file "../src/MCU_B1.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;		None
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;  i               2    1[BANK0 ] int 
  3868 ;; Return value:  Size  Location     Type
  3869 ;;		None               void
  3870 ;; Registers used:
  3871 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3872 ;; Tracked objects:
  3873 ;;		On entry : 0/0
  3874 ;;		On exit  : 0/0
  3875 ;;		Unchanged: 0/0
  3876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3877 ;;      Params:         0       0       0       0
  3878 ;;      Locals:         0       2       0       0
  3879 ;;      Temps:          0       0       0       0
  3880 ;;      Totals:         0       2       0       0
  3881 ;;Total ram usage:        2 bytes
  3882 ;; Hardware stack levels used:    1
  3883 ;; Hardware stack levels required when called:    4
  3884 ;; This function calls:
  3885 ;;		_putch
  3886 ;; This function is called by:
  3887 ;;		_UART_Main
  3888 ;; This function uses a non-reentrant model
  3889 ;;
  3890                           
  3891                           
  3892                           ;psect for function _UART_Transmit
  3893  0DD7                     _UART_Transmit:	
  3894                           
  3895                           ;MCU_B1.c: 775: for (int i = 0; i < 8; i++) {
  3896                           
  3897                           ;incstack = 0
  3898                           ; Regs used in _UART_Transmit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3899  0DD7  1283               	bcf	3,5	;RP0=0, select bank0
  3900  0DD8  1303               	bcf	3,6	;RP1=0, select bank0
  3901  0DD9  01D6               	clrf	UART_Transmit@i
  3902  0DDA  01D7               	clrf	UART_Transmit@i+1
  3903  0DDB                     L7:	
  3904  0DDB  0857               	movf	UART_Transmit@i+1,w
  3905  0DDC  3A80               	xorlw	128
  3906  0DDD  00FF               	movwf	127
  3907  0DDE  3080               	movlw	128
  3908  0DDF  027F               	subwf	127,w
  3909  0DE0  1D03               	skipz
  3910  0DE1  2DE4               	goto	u4595
  3911  0DE2  3008               	movlw	8
  3912  0DE3  0256               	subwf	UART_Transmit@i,w
  3913  0DE4                     u4595:	
  3914  0DE4  1803               	btfsc	3,0
  3915  0DE5  0008               	return
  3916                           
  3917                           ;MCU_B1.c: 777: putch(UART.Data[i]);
  3918  0DE6  1283               	bcf	3,5	;RP0=0, select bank0
  3919  0DE7  1303               	bcf	3,6	;RP1=0, select bank0
  3920  0DE8  0856               	movf	UART_Transmit@i,w
  3921  0DE9  3E36               	addlw	_UART& (0+255)
  3922  0DEA  0084               	movwf	4
  3923  0DEB  1383               	bcf	3,7	;select IRP bank0
  3924  0DEC  0800               	movf	0,w
  3925  0DED  158A  23F9  158A   	fcall	_putch
  3926  0DF0  3001               	movlw	1
  3927  0DF1  1283               	bcf	3,5	;RP0=0, select bank0
  3928  0DF2  1303               	bcf	3,6	;RP1=0, select bank0
  3929  0DF3  07D6               	addwf	UART_Transmit@i,f
  3930  0DF4  1803               	skipnc
  3931  0DF5  0AD7               	incf	UART_Transmit@i+1,f
  3932  0DF6  3000               	movlw	0
  3933  0DF7  07D7               	addwf	UART_Transmit@i+1,f
  3934  0DF8  2DDB               	goto	L7
  3935  0DF9                     __end_of_UART_Transmit:	
  3936                           
  3937                           	psect	text16
  3938  0BF9                     __ptext16:	
  3939 ;; *************** function _putch *****************
  3940 ;; Defined at:
  3941 ;;		line 856 in file "../src/MCU_B1.c"
  3942 ;; Parameters:    Size  Location     Type
  3943 ;;  byte            1    wreg     unsigned char 
  3944 ;; Auto vars:     Size  Location     Type
  3945 ;;  byte            1    0[BANK0 ] unsigned char 
  3946 ;; Return value:  Size  Location     Type
  3947 ;;		None               void
  3948 ;; Registers used:
  3949 ;;		wreg
  3950 ;; Tracked objects:
  3951 ;;		On entry : 0/0
  3952 ;;		On exit  : 0/0
  3953 ;;		Unchanged: 0/0
  3954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3955 ;;      Params:         0       0       0       0
  3956 ;;      Locals:         0       1       0       0
  3957 ;;      Temps:          0       0       0       0
  3958 ;;      Totals:         0       1       0       0
  3959 ;;Total ram usage:        1 bytes
  3960 ;; Hardware stack levels used:    1
  3961 ;; Hardware stack levels required when called:    3
  3962 ;; This function calls:
  3963 ;;		Nothing
  3964 ;; This function is called by:
  3965 ;;		_UART_Transmit
  3966 ;;		_getche
  3967 ;; This function uses a non-reentrant model
  3968 ;;
  3969                           
  3970                           
  3971                           ;psect for function _putch
  3972  0BF9                     _putch:	
  3973                           
  3974                           ;incstack = 0
  3975                           ; Regs used in _putch: [wreg]
  3976                           ;putch@byte stored from wreg
  3977  0BF9  1283               	bcf	3,5	;RP0=0, select bank0
  3978  0BFA  1303               	bcf	3,6	;RP1=0, select bank0
  3979  0BFB  00D5               	movwf	putch@byte
  3980  0BFC                     l494:	
  3981                           ;MCU_B1.c: 859: continue;
  3982                           
  3983                           ;MCU_B1.c: 858: while (!TXIF)
  3984                           
  3985  0BFC  1E0C               	btfss	12,4	;volatile
  3986  0BFD  2BFC               	goto	l494
  3987                           
  3988                           ;MCU_B1.c: 860: TXREG = byte;
  3989  0BFE  0855               	movf	putch@byte,w
  3990  0BFF  0099               	movwf	25	;volatile
  3991  0C00  0008               	return
  3992  0C01                     __end_of_putch:	
  3993                           
  3994                           	psect	text17
  3995  0BC0                     __ptext17:	
  3996 ;; *************** function _UART_Receive *****************
  3997 ;; Defined at:
  3998 ;;		line 791 in file "../src/MCU_B1.c"
  3999 ;; Parameters:    Size  Location     Type
  4000 ;;		None
  4001 ;; Auto vars:     Size  Location     Type
  4002 ;;		None
  4003 ;; Return value:  Size  Location     Type
  4004 ;;		None               void
  4005 ;; Registers used:
  4006 ;;		None
  4007 ;; Tracked objects:
  4008 ;;		On entry : 0/0
  4009 ;;		On exit  : 0/0
  4010 ;;		Unchanged: 0/0
  4011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4012 ;;      Params:         0       0       0       0
  4013 ;;      Locals:         0       0       0       0
  4014 ;;      Temps:          0       0       0       0
  4015 ;;      Totals:         0       0       0       0
  4016 ;;Total ram usage:        0 bytes
  4017 ;; Hardware stack levels used:    1
  4018 ;; Hardware stack levels required when called:    3
  4019 ;; This function calls:
  4020 ;;		Nothing
  4021 ;; This function is called by:
  4022 ;;		_UART_Main
  4023 ;; This function uses a non-reentrant model
  4024 ;;
  4025                           
  4026                           
  4027                           ;psect for function _UART_Receive
  4028  0BC0                     _UART_Receive:	
  4029                           
  4030                           ;MCU_B1.c: 813: myMain.Test = 1;
  4031                           
  4032                           ;incstack = 0
  4033                           ; Regs used in _UART_Receive: []
  4034  0BC0  1283               	bcf	3,5	;RP0=0, select bank0
  4035  0BC1  1303               	bcf	3,6	;RP1=0, select bank0
  4036  0BC2  1720               	bsf	_myMain,6
  4037  0BC3  0008               	return
  4038  0BC4                     __end_of_UART_Receive:	
  4039                           
  4040                           	psect	text18
  4041  0025                     __ptext18:	
  4042 ;; *************** function _PIR_Main *****************
  4043 ;; Defined at:
  4044 ;;		line 14 in file "../src/PIR_B1.c"
  4045 ;; Parameters:    Size  Location     Type
  4046 ;;		None
  4047 ;; Auto vars:     Size  Location     Type
  4048 ;;  error           1   19[BANK0 ] unsigned char 
  4049 ;; Return value:  Size  Location     Type
  4050 ;;		None               void
  4051 ;; Registers used:
  4052 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4053 ;; Tracked objects:
  4054 ;;		On entry : 0/0
  4055 ;;		On exit  : 0/0
  4056 ;;		Unchanged: 0/0
  4057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4058 ;;      Params:         0       0       0       0
  4059 ;;      Locals:         0       3       0       0
  4060 ;;      Temps:          0       5       0       0
  4061 ;;      Totals:         0       8       0       0
  4062 ;;Total ram usage:        8 bytes
  4063 ;; Hardware stack levels used:    1
  4064 ;; Hardware stack levels required when called:    6
  4065 ;; This function calls:
  4066 ;;		_getLights_Status
  4067 ;;		_getMain_All_Error_Status
  4068 ;;		_setLED
  4069 ;;		_setLights_Trigger
  4070 ;;		_setMain_Exception
  4071 ;; This function is called by:
  4072 ;;		_main
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           
  4077                           ;psect for function _PIR_Main
  4078  0025                     _PIR_Main:	
  4079                           
  4080                           ;PIR_B1.c: 15: char error = getMain_All_Error_Status(0);
  4081                           
  4082                           ;incstack = 0
  4083                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4084  0025  3000               	movlw	0
  4085  0026  158A  270B  118A   	fcall	_getMain_All_Error_Status
  4086  0029  1283               	bcf	3,5	;RP0=0, select bank0
  4087  002A  1303               	bcf	3,6	;RP1=0, select bank0
  4088  002B  00E1               	movwf	??_PIR_Main
  4089  002C  0861               	movf	??_PIR_Main,w
  4090  002D  00E8               	movwf	PIR_Main@error
  4091                           
  4092                           ;PIR_B1.c: 16: if (_PIR.Enable == 1) {
  4093  002E  1683               	bsf	3,5	;RP0=1, select bank1
  4094  002F  1303               	bcf	3,6	;RP1=0, select bank1
  4095  0030  1C20               	btfss	__PIR^(0+128),0
  4096  0031  2A04               	goto	l857
  4097                           
  4098                           ;PIR_B1.c: 17: if (error == 0) {
  4099  0032  1283               	bcf	3,5	;RP0=0, select bank0
  4100  0033  1303               	bcf	3,6	;RP1=0, select bank0
  4101  0034  08E8               	movf	PIR_Main@error,f
  4102  0035  1D03               	skipz
  4103  0036  2851               	goto	l858
  4104                           
  4105                           ;PIR_B1.c: 18: if (_PIR.Detect == 0) {
  4106  0037  1683               	bsf	3,5	;RP0=1, select bank1
  4107  0038  1303               	bcf	3,6	;RP1=0, select bank1
  4108  0039  1A20               	btfsc	__PIR^(0+128),4
  4109  003A  2883               	goto	l4818
  4110                           
  4111                           ;PIR_B1.c: 19: _PIR.Detect = 1;
  4112  003B  1620               	bsf	__PIR^(0+128),4
  4113                           
  4114                           ;PIR_B1.c: 20: _PIR.Available = 1;
  4115  003C  17A0               	bsf	__PIR^(0+128),7
  4116                           
  4117                           ;PIR_B1.c: 21: setLED(1, 0);
  4118  003D  1283               	bcf	3,5	;RP0=0, select bank0
  4119  003E  1303               	bcf	3,6	;RP1=0, select bank0
  4120  003F  01D7               	clrf	setLED@command
  4121  0040  3001               	movlw	1
  4122  0041  118A  25FF  118A   	fcall	_setLED
  4123                           
  4124                           ;PIR_B1.c: 22: if (_PIR.OK == 0) {
  4125  0044  1683               	bsf	3,5	;RP0=1, select bank1
  4126  0045  1303               	bcf	3,6	;RP1=0, select bank1
  4127  0046  19A0               	btfsc	__PIR^(0+128),3
  4128  0047  2883               	goto	l4818
  4129                           
  4130                           ;PIR_B1.c: 23: setLED(2, 1);
  4131  0048  1283               	bcf	3,5	;RP0=0, select bank0
  4132  0049  1303               	bcf	3,6	;RP1=0, select bank0
  4133  004A  01D7               	clrf	setLED@command
  4134  004B  0AD7               	incf	setLED@command,f
  4135  004C  3002               	movlw	2
  4136  004D  118A  25FF  118A   	fcall	_setLED
  4137                           
  4138                           ;PIR_B1.c: 31: }
  4139                           ;PIR_B1.c: 32: }
  4140                           ;PIR_B1.c: 33: } else {
  4141  0050  2883               	goto	l4818
  4142  0051                     l858:	
  4143                           
  4144                           ;PIR_B1.c: 34: if (_PIR.Detect == 1) {
  4145  0051  1683               	bsf	3,5	;RP0=1, select bank1
  4146  0052  1303               	bcf	3,6	;RP1=0, select bank1
  4147  0053  1E20               	btfss	__PIR^(0+128),4
  4148  0054  2883               	goto	l4818
  4149                           
  4150                           ;PIR_B1.c: 35: setMain_Exception(error);
  4151  0055  1283               	bcf	3,5	;RP0=0, select bank0
  4152  0056  1303               	bcf	3,6	;RP1=0, select bank0
  4153  0057  0868               	movf	PIR_Main@error,w
  4154  0058  158A  2781  118A   	fcall	_setMain_Exception
  4155                           
  4156                           ;PIR_B1.c: 37: _PIR.Detect = 0;
  4157  005B  1683               	bsf	3,5	;RP0=1, select bank1
  4158  005C  1303               	bcf	3,6	;RP1=0, select bank1
  4159  005D  1220               	bcf	__PIR^(0+128),4
  4160                           
  4161                           ;PIR_B1.c: 38: _PIR.Available = 0;
  4162  005E  13A0               	bcf	__PIR^(0+128),7
  4163                           
  4164                           ;PIR_B1.c: 39: _PIR.Status = 0;
  4165  005F  1320               	bcf	__PIR^(0+128),6
  4166                           
  4167                           ;PIR_B1.c: 42: _PIR.Time = 0;
  4168  0060  01A5               	clrf	(__PIR^(0+128)+5)
  4169                           
  4170                           ;PIR_B1.c: 43: _PIR.RangeTime1 = 0;
  4171  0061  01CA               	clrf	(__PIR^(0+128)+42)
  4172                           
  4173                           ;PIR_B1.c: 44: _PIR.RangeValue = 15;
  4174  0062  300F               	movlw	15
  4175  0063  1283               	bcf	3,5	;RP0=0, select bank0
  4176  0064  1303               	bcf	3,6	;RP1=0, select bank0
  4177  0065  00E1               	movwf	??_PIR_Main
  4178  0066  0861               	movf	??_PIR_Main,w
  4179  0067  1683               	bsf	3,5	;RP0=1, select bank1
  4180  0068  1303               	bcf	3,6	;RP1=0, select bank1
  4181  0069  00CC               	movwf	(__PIR^(0+128)+44)
  4182                           
  4183                           ;PIR_B1.c: 45: _PIR.RangeCount = 0;
  4184  006A  01CB               	clrf	(__PIR^(0+128)+43)
  4185                           
  4186                           ;PIR_B1.c: 47: setLED(1, 1);
  4187  006B  1283               	bcf	3,5	;RP0=0, select bank0
  4188  006C  1303               	bcf	3,6	;RP1=0, select bank0
  4189  006D  01D7               	clrf	setLED@command
  4190  006E  0AD7               	incf	setLED@command,f
  4191  006F  3001               	movlw	1
  4192  0070  118A  25FF  118A   	fcall	_setLED
  4193                           
  4194                           ;PIR_B1.c: 48: setLED(2, 0);
  4195  0073  1283               	bcf	3,5	;RP0=0, select bank0
  4196  0074  1303               	bcf	3,6	;RP1=0, select bank0
  4197  0075  01D7               	clrf	setLED@command
  4198  0076  3002               	movlw	2
  4199  0077  118A  25FF  118A   	fcall	_setLED
  4200                           
  4201                           ;PIR_B1.c: 50: if (_PIR.OK == 1) {
  4202  007A  1683               	bsf	3,5	;RP0=1, select bank1
  4203  007B  1303               	bcf	3,6	;RP1=0, select bank1
  4204  007C  1DA0               	btfss	__PIR^(0+128),3
  4205  007D  2880               	goto	l863
  4206                           
  4207                           ;PIR_B1.c: 51: _PIR.Count = 0;
  4208  007E  01C1               	clrf	(__PIR^(0+128)+33)
  4209  007F  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4210  0080                     l863:	
  4211                           
  4212                           ;PIR_B1.c: 52: }
  4213                           ;PIR_B1.c: 53: _PIR.CloseTimeSeconds = 0;
  4214  0080  01C6               	clrf	(__PIR^(0+128)+38)
  4215                           
  4216                           ;PIR_B1.c: 54: _PIR.CloseTimeMinutes = 0;
  4217  0081  01C4               	clrf	(__PIR^(0+128)+36)
  4218  0082  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4219  0083                     l4818:	
  4220                           
  4221                           ;PIR_B1.c: 55: }
  4222                           ;PIR_B1.c: 56: }
  4223                           ;PIR_B1.c: 58: if (_PIR.ADtoGO == 0) {
  4224  0083  1683               	bsf	3,5	;RP0=1, select bank1
  4225  0084  1303               	bcf	3,6	;RP1=0, select bank1
  4226  0085  18A0               	btfsc	__PIR^(0+128),1
  4227  0086  2896               	goto	l864
  4228                           
  4229                           ;PIR_B1.c: 59: _PIR.Time++;
  4230  0087  3001               	movlw	1
  4231  0088  1283               	bcf	3,5	;RP0=0, select bank0
  4232  0089  1303               	bcf	3,6	;RP1=0, select bank0
  4233  008A  00E1               	movwf	??_PIR_Main
  4234  008B  0861               	movf	??_PIR_Main,w
  4235  008C  1683               	bsf	3,5	;RP0=1, select bank1
  4236  008D  1303               	bcf	3,6	;RP1=0, select bank1
  4237  008E  07A5               	addwf	(__PIR^(0+128)+5),f
  4238                           
  4239                           ;PIR_B1.c: 60: if (_PIR.Time == 10) {
  4240  008F  0825               	movf	(__PIR^(0+128)+5),w
  4241  0090  3A0A               	xorlw	10
  4242  0091  1D03               	skipz
  4243  0092  29B8               	goto	l4902
  4244                           
  4245                           ;PIR_B1.c: 61: _PIR.Time = 0;
  4246  0093  01A5               	clrf	(__PIR^(0+128)+5)
  4247                           
  4248                           ;PIR_B1.c: 62: _PIR.ADtoGO = 1;
  4249  0094  14A0               	bsf	__PIR^(0+128),1
  4250                           
  4251                           ;PIR_B1.c: 63: }
  4252                           ;PIR_B1.c: 64: } else {
  4253  0095  29B8               	goto	l4902
  4254  0096                     l864:	
  4255                           
  4256                           ;PIR_B1.c: 65: if (_PIR.GO == 1) {
  4257  0096  1D20               	btfss	__PIR^(0+128),2
  4258  0097  29B8               	goto	l4902
  4259                           
  4260                           ;PIR_B1.c: 66: _PIR.GO = 0;
  4261  0098  1120               	bcf	__PIR^(0+128),2
  4262                           
  4263                           ;PIR_B1.c: 67: if (_PIR.Available == 1) {
  4264  0099  1BA0               	btfsc	__PIR^(0+128),7
  4265                           
  4266                           ;PIR_B1.c: 68: if (_PIR.OK == 1) {
  4267  009A  1DA0               	btfss	__PIR^(0+128),3
  4268  009B  29B8               	goto	l4902
  4269                           
  4270                           ;PIR_B1.c: 70: _PIR.Time++;
  4271  009C  3001               	movlw	1
  4272  009D  1283               	bcf	3,5	;RP0=0, select bank0
  4273  009E  1303               	bcf	3,6	;RP1=0, select bank0
  4274  009F  00E1               	movwf	??_PIR_Main
  4275  00A0  0861               	movf	??_PIR_Main,w
  4276  00A1  1683               	bsf	3,5	;RP0=1, select bank1
  4277  00A2  1303               	bcf	3,6	;RP1=0, select bank1
  4278  00A3  07A5               	addwf	(__PIR^(0+128)+5),f
  4279                           
  4280                           ;PIR_B1.c: 71: if (_PIR.Time == 60) {
  4281  00A4  0825               	movf	(__PIR^(0+128)+5),w
  4282  00A5  3A3C               	xorlw	60
  4283  00A6  1D03               	skipz
  4284  00A7  28DC               	goto	l4868
  4285                           
  4286                           ;PIR_B1.c: 72: _PIR.Time = 0;
  4287  00A8  01A5               	clrf	(__PIR^(0+128)+5)
  4288                           
  4289                           ;PIR_B1.c: 73: if (_PIR.RangeCount >= 90) {
  4290  00A9  305A               	movlw	90
  4291  00AA  024B               	subwf	(__PIR^(0+128)+43),w
  4292  00AB  1C03               	skipc
  4293  00AC  28B8               	goto	l4850
  4294                           
  4295                           ;PIR_B1.c: 74: _PIR.RangeTime1 = 0;
  4296  00AD  01CA               	clrf	(__PIR^(0+128)+42)
  4297                           
  4298                           ;PIR_B1.c: 76: if (_PIR.RangeValue == 15) {
  4299  00AE  084C               	movf	(__PIR^(0+128)+44),w
  4300  00AF  3A0F               	xorlw	15
  4301  00B0  1903               	btfsc	3,2
  4302  00B1  28CD               	goto	L14
  4303                           
  4304                           ;PIR_B1.c: 78: } else if (_PIR.RangeValue == 25) {
  4305                           
  4306                           ;PIR_B1.c: 77: _PIR.RangeValue = 25;
  4307  00B2  084C               	movf	(__PIR^(0+128)+44),w
  4308  00B3  3A19               	xorlw	25
  4309  00B4  1D03               	skipz
  4310  00B5  28DB               	goto	l4866
  4311                           
  4312                           ;PIR_B1.c: 79: _PIR.RangeValue = 35;
  4313  00B6  3023               	movlw	35
  4314  00B7  28D4               	goto	L10
  4315  00B8                     l4850:	
  4316                           ;PIR_B1.c: 80: }
  4317                           ;PIR_B1.c: 81: } else if (_PIR.RangeCount <= 10) {
  4318                           
  4319  00B8  300B               	movlw	11
  4320  00B9  024B               	subwf	(__PIR^(0+128)+43),w
  4321  00BA  1803               	skipnc
  4322  00BB  28DB               	goto	l4866
  4323                           
  4324                           ;PIR_B1.c: 82: _PIR.RangeTime1++;
  4325  00BC  3001               	movlw	1
  4326  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  4327  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  4328  00BF  00E1               	movwf	??_PIR_Main
  4329  00C0  0861               	movf	??_PIR_Main,w
  4330  00C1  1683               	bsf	3,5	;RP0=1, select bank1
  4331  00C2  1303               	bcf	3,6	;RP1=0, select bank1
  4332  00C3  07CA               	addwf	(__PIR^(0+128)+42),f
  4333                           
  4334                           ;PIR_B1.c: 83: if (_PIR.RangeTime1 == 2) {
  4335  00C4  084A               	movf	(__PIR^(0+128)+42),w
  4336  00C5  3A02               	xorlw	2
  4337  00C6  1D03               	skipz
  4338  00C7  28DB               	goto	l4866
  4339                           
  4340                           ;PIR_B1.c: 84: _PIR.RangeTime1 = 0;
  4341  00C8  01CA               	clrf	(__PIR^(0+128)+42)
  4342                           
  4343                           ;PIR_B1.c: 86: if (_PIR.RangeValue == 35) {
  4344  00C9  084C               	movf	(__PIR^(0+128)+44),w
  4345  00CA  3A23               	xorlw	35
  4346  00CB  1D03               	skipz
  4347  00CC  28CF               	goto	l4862
  4348  00CD                     L14:	
  4349                           
  4350                           ;PIR_B1.c: 87: _PIR.RangeValue = 25;
  4351  00CD  3019               	movlw	25
  4352  00CE  28D4               	goto	L10
  4353  00CF                     l4862:	
  4354                           ;PIR_B1.c: 88: } else if (_PIR.RangeValue == 25) {
  4355                           
  4356  00CF  084C               	movf	(__PIR^(0+128)+44),w
  4357  00D0  3A19               	xorlw	25
  4358  00D1  1D03               	skipz
  4359  00D2  28DB               	goto	l4866
  4360                           
  4361                           ;PIR_B1.c: 89: _PIR.RangeValue = 15;
  4362  00D3  300F               	movlw	15
  4363  00D4                     L10:	
  4364  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  4365  00D5  1303               	bcf	3,6	;RP1=0, select bank0
  4366  00D6  00E1               	movwf	??_PIR_Main
  4367  00D7  0861               	movf	??_PIR_Main,w
  4368  00D8  1683               	bsf	3,5	;RP0=1, select bank1
  4369  00D9  1303               	bcf	3,6	;RP1=0, select bank1
  4370  00DA  00CC               	movwf	(__PIR^(0+128)+44)
  4371  00DB                     l4866:	
  4372                           
  4373                           ;PIR_B1.c: 90: }
  4374                           ;PIR_B1.c: 91: }
  4375                           ;PIR_B1.c: 92: }
  4376                           ;PIR_B1.c: 93: _PIR.RangeCount = 0;
  4377  00DB  01CB               	clrf	(__PIR^(0+128)+43)
  4378  00DC                     l4868:	
  4379                           
  4380                           ;PIR_B1.c: 94: }
  4381                           ;PIR_B1.c: 97: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - (_PIR.RangeValue + _PIR.Of
      +                          fset)))
  4382                           ;PIR_B1.c: 98: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + (_PIR.RangeValue + _PIR.Off
      +                          set)))) {
  4383  00DC  084C               	movf	(__PIR^(0+128)+44),w
  4384  00DD  074E               	addwf	(__PIR^(0+128)+46),w
  4385  00DE  1283               	bcf	3,5	;RP0=0, select bank0
  4386  00DF  1303               	bcf	3,6	;RP1=0, select bank0
  4387  00E0  00E1               	movwf	??_PIR_Main
  4388  00E1  01E2               	clrf	??_PIR_Main+1
  4389  00E2  0DE2               	rlf	??_PIR_Main+1,f
  4390  00E3  09E1               	comf	??_PIR_Main,f
  4391  00E4  09E2               	comf	??_PIR_Main+1,f
  4392  00E5  0AE1               	incf	??_PIR_Main,f
  4393  00E6  1903               	skipnz
  4394  00E7  0AE2               	incf	??_PIR_Main+1,f
  4395  00E8  1683               	bsf	3,5	;RP0=1, select bank1
  4396  00E9  1303               	bcf	3,6	;RP1=0, select bank1
  4397  00EA  0826               	movf	(__PIR^(0+128)+6),w
  4398  00EB  1283               	bcf	3,5	;RP0=0, select bank0
  4399  00EC  1303               	bcf	3,6	;RP1=0, select bank0
  4400  00ED  0761               	addwf	??_PIR_Main,w
  4401  00EE  00E3               	movwf	??_PIR_Main+2
  4402  00EF  0862               	movf	??_PIR_Main+1,w
  4403  00F0  1803               	skipnc
  4404  00F1  0A62               	incf	??_PIR_Main+1,w
  4405  00F2  00E4               	movwf	??_PIR_Main+3
  4406  00F3  0864               	movf	??_PIR_Main+3,w
  4407  00F4  3A80               	xorlw	128
  4408  00F5  3C80               	sublw	128
  4409  00F6  1D03               	skipz
  4410  00F7  28FC               	goto	u5505
  4411  00F8  0863               	movf	??_PIR_Main+2,w
  4412  00F9  1683               	bsf	3,5	;RP0=1, select bank1
  4413  00FA  1303               	bcf	3,6	;RP1=0, select bank1
  4414  00FB  0221               	subwf	(__PIR^(0+128)+1),w
  4415  00FC                     u5505:	
  4416  00FC  1C03               	skipc
  4417  00FD  292A               	goto	l4878
  4418  00FE  1683               	bsf	3,5	;RP0=1, select bank1
  4419  00FF  1303               	bcf	3,6	;RP1=0, select bank1
  4420  0100  084C               	movf	(__PIR^(0+128)+44),w
  4421  0101  074E               	addwf	(__PIR^(0+128)+46),w
  4422  0102  1283               	bcf	3,5	;RP0=0, select bank0
  4423  0103  1303               	bcf	3,6	;RP1=0, select bank0
  4424  0104  00E1               	movwf	??_PIR_Main
  4425  0105  01E2               	clrf	??_PIR_Main+1
  4426  0106  0DE2               	rlf	??_PIR_Main+1,f
  4427  0107  1683               	bsf	3,5	;RP0=1, select bank1
  4428  0108  1303               	bcf	3,6	;RP1=0, select bank1
  4429  0109  0826               	movf	(__PIR^(0+128)+6),w
  4430  010A  1283               	bcf	3,5	;RP0=0, select bank0
  4431  010B  1303               	bcf	3,6	;RP1=0, select bank0
  4432  010C  0761               	addwf	??_PIR_Main,w
  4433  010D  00E3               	movwf	??_PIR_Main+2
  4434  010E  3000               	movlw	0
  4435  010F  1803               	skipnc
  4436  0110  3001               	movlw	1
  4437  0111  0762               	addwf	??_PIR_Main+1,w
  4438  0112  00E4               	movwf	??_PIR_Main+3
  4439  0113  0864               	movf	??_PIR_Main+3,w
  4440  0114  3A80               	xorlw	128
  4441  0115  00E5               	movwf	??_PIR_Main+4
  4442  0116  3080               	movlw	128
  4443  0117  0265               	subwf	??_PIR_Main+4,w
  4444  0118  1D03               	skipz
  4445  0119  2920               	goto	u5515
  4446  011A  1683               	bsf	3,5	;RP0=1, select bank1
  4447  011B  1303               	bcf	3,6	;RP1=0, select bank1
  4448  011C  0821               	movf	(__PIR^(0+128)+1),w
  4449  011D  1283               	bcf	3,5	;RP0=0, select bank0
  4450  011E  1303               	bcf	3,6	;RP1=0, select bank0
  4451  011F  0263               	subwf	??_PIR_Main+2,w
  4452  0120                     u5515:	
  4453  0120  1C03               	skipc
  4454  0121  292A               	goto	l4878
  4455                           
  4456                           ;PIR_B1.c: 99: _PIR.Count = 0;
  4457  0122  1683               	bsf	3,5	;RP0=1, select bank1
  4458  0123  1303               	bcf	3,6	;RP1=0, select bank1
  4459  0124  01C1               	clrf	(__PIR^(0+128)+33)
  4460  0125  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4461                           
  4462                           ;PIR_B1.c: 100: setLED(1, 0);
  4463  0126  1283               	bcf	3,5	;RP0=0, select bank0
  4464  0127  1303               	bcf	3,6	;RP1=0, select bank0
  4465  0128  01D7               	clrf	setLED@command
  4466  0129  29A1               	goto	L15
  4467  012A                     l4878:	
  4468                           ;PIR_B1.c: 102: } else {
  4469                           
  4470                           ;PIR_B1.c: 101: setLED(2, 0);
  4471                           
  4472                           
  4473                           ;PIR_B1.c: 103: _PIR.RangeCount++;
  4474  012A  3001               	movlw	1
  4475  012B  1283               	bcf	3,5	;RP0=0, select bank0
  4476  012C  1303               	bcf	3,6	;RP1=0, select bank0
  4477  012D  00E1               	movwf	??_PIR_Main
  4478  012E  0861               	movf	??_PIR_Main,w
  4479  012F  1683               	bsf	3,5	;RP0=1, select bank1
  4480  0130  1303               	bcf	3,6	;RP1=0, select bank1
  4481  0131  07CB               	addwf	(__PIR^(0+128)+43),f
  4482                           
  4483                           ;PIR_B1.c: 104: _PIR.Count++;
  4484  0132  3001               	movlw	1
  4485  0133  07C1               	addwf	(__PIR^(0+128)+33),f
  4486  0134  1803               	skipnc
  4487  0135  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4488  0136  3000               	movlw	0
  4489  0137  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4490                           
  4491                           ;PIR_B1.c: 106: _PIR.TriggerValue = _PIR.Status == 1 ? 3 : 2;
  4492  0138  1B20               	btfsc	__PIR^(0+128),6
  4493  0139  293E               	goto	l4886
  4494  013A  3002               	movlw	2
  4495  013B  1283               	bcf	3,5	;RP0=0, select bank0
  4496  013C  1303               	bcf	3,6	;RP1=0, select bank0
  4497  013D  2940               	goto	L11
  4498  013E                     l4886:	
  4499  013E  3003               	movlw	3
  4500  013F  1283               	bcf	3,5	;RP0=0, select bank0
  4501  0140                     L11:	
  4502  0140  00E6               	movwf	_PIR_Main$3062
  4503  0141  3000               	movlw	0
  4504  0142  00E7               	movwf	_PIR_Main$3062+1
  4505  0143  0866               	movf	_PIR_Main$3062,w
  4506  0144  00E1               	movwf	??_PIR_Main
  4507  0145  0861               	movf	??_PIR_Main,w
  4508  0146  1683               	bsf	3,5	;RP0=1, select bank1
  4509  0147  1303               	bcf	3,6	;RP1=0, select bank1
  4510  0148  00C3               	movwf	(__PIR^(0+128)+35)
  4511                           
  4512                           ;PIR_B1.c: 108: if (_PIR.Count == _PIR.TriggerValue) {
  4513  0149  0843               	movf	(__PIR^(0+128)+35),w
  4514  014A  1283               	bcf	3,5	;RP0=0, select bank0
  4515  014B  1303               	bcf	3,6	;RP1=0, select bank0
  4516  014C  00E1               	movwf	??_PIR_Main
  4517  014D  01E2               	clrf	??_PIR_Main+1
  4518  014E  1683               	bsf	3,5	;RP0=1, select bank1
  4519  014F  1303               	bcf	3,6	;RP1=0, select bank1
  4520  0150  0842               	movf	((__PIR+1)^(0+128)+33),w
  4521  0151  1283               	bcf	3,5	;RP0=0, select bank0
  4522  0152  1303               	bcf	3,6	;RP1=0, select bank0
  4523  0153  0662               	xorwf	??_PIR_Main+1,w
  4524  0154  1D03               	skipz
  4525  0155  295C               	goto	u5535
  4526  0156  1683               	bsf	3,5	;RP0=1, select bank1
  4527  0157  1303               	bcf	3,6	;RP1=0, select bank1
  4528  0158  0841               	movf	(__PIR^(0+128)+33),w
  4529  0159  1283               	bcf	3,5	;RP0=0, select bank0
  4530  015A  1303               	bcf	3,6	;RP1=0, select bank0
  4531  015B  0661               	xorwf	??_PIR_Main,w
  4532  015C                     u5535:	
  4533  015C  1D03               	skipz
  4534  015D  29B8               	goto	l4902
  4535                           
  4536                           ;PIR_B1.c: 109: _PIR.Count = 0;
  4537  015E  1683               	bsf	3,5	;RP0=1, select bank1
  4538  015F  1303               	bcf	3,6	;RP1=0, select bank1
  4539  0160  01C1               	clrf	(__PIR^(0+128)+33)
  4540  0161  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4541                           
  4542                           ;PIR_B1.c: 110: _PIR.CloseTimeSeconds = 0;
  4543  0162  01C6               	clrf	(__PIR^(0+128)+38)
  4544                           
  4545                           ;PIR_B1.c: 111: _PIR.CloseTimeMinutes = 0;
  4546  0163  01C4               	clrf	(__PIR^(0+128)+36)
  4547  0164  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4548                           
  4549                           ;PIR_B1.c: 112: _PIR.Status = 1;
  4550  0165  1720               	bsf	__PIR^(0+128),6
  4551                           
  4552                           ;PIR_B1.c: 115: if (getLights_Status(1) == 0) {
  4553  0166  3001               	movlw	1
  4554  0167  158A  247B  118A   	fcall	_getLights_Status
  4555  016A  3800               	iorlw	0
  4556  016B  1D03               	skipz
  4557  016C  2975               	goto	l4896
  4558                           
  4559                           ;PIR_B1.c: 116: setLights_Trigger(1, 1);
  4560  016D  1283               	bcf	3,5	;RP0=0, select bank0
  4561  016E  1303               	bcf	3,6	;RP1=0, select bank0
  4562  016F  01D7               	clrf	setLights_Trigger@command
  4563  0170  0AD7               	incf	setLights_Trigger@command,f
  4564  0171  3001               	movlw	1
  4565  0172  158A  2568  118A   	fcall	_setLights_Trigger
  4566  0175                     l4896:	
  4567                           
  4568                           ;PIR_B1.c: 117: }
  4569                           ;PIR_B1.c: 120: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - (_PIR.RangeValue + _PIR.O
      +                          ffset)))) {
  4570  0175  1683               	bsf	3,5	;RP0=1, select bank1
  4571  0176  1303               	bcf	3,6	;RP1=0, select bank1
  4572  0177  084C               	movf	(__PIR^(0+128)+44),w
  4573  0178  074E               	addwf	(__PIR^(0+128)+46),w
  4574  0179  1283               	bcf	3,5	;RP0=0, select bank0
  4575  017A  1303               	bcf	3,6	;RP1=0, select bank0
  4576  017B  00E1               	movwf	??_PIR_Main
  4577  017C  01E2               	clrf	??_PIR_Main+1
  4578  017D  0DE2               	rlf	??_PIR_Main+1,f
  4579  017E  09E1               	comf	??_PIR_Main,f
  4580  017F  09E2               	comf	??_PIR_Main+1,f
  4581  0180  0AE1               	incf	??_PIR_Main,f
  4582  0181  1903               	skipnz
  4583  0182  0AE2               	incf	??_PIR_Main+1,f
  4584  0183  1683               	bsf	3,5	;RP0=1, select bank1
  4585  0184  1303               	bcf	3,6	;RP1=0, select bank1
  4586  0185  0826               	movf	(__PIR^(0+128)+6),w
  4587  0186  1283               	bcf	3,5	;RP0=0, select bank0
  4588  0187  1303               	bcf	3,6	;RP1=0, select bank0
  4589  0188  0761               	addwf	??_PIR_Main,w
  4590  0189  00E3               	movwf	??_PIR_Main+2
  4591  018A  0862               	movf	??_PIR_Main+1,w
  4592  018B  1803               	skipnc
  4593  018C  0A62               	incf	??_PIR_Main+1,w
  4594  018D  00E4               	movwf	??_PIR_Main+3
  4595  018E  0864               	movf	??_PIR_Main+3,w
  4596  018F  3A80               	xorlw	128
  4597  0190  00E5               	movwf	??_PIR_Main+4
  4598  0191  3080               	movlw	128
  4599  0192  0265               	subwf	??_PIR_Main+4,w
  4600  0193  1D03               	skipz
  4601  0194  299B               	goto	u5555
  4602  0195  1683               	bsf	3,5	;RP0=1, select bank1
  4603  0196  1303               	bcf	3,6	;RP1=0, select bank1
  4604  0197  0821               	movf	(__PIR^(0+128)+1),w
  4605  0198  1283               	bcf	3,5	;RP0=0, select bank0
  4606  0199  1303               	bcf	3,6	;RP1=0, select bank0
  4607  019A  0263               	subwf	??_PIR_Main+2,w
  4608  019B                     u5555:	
  4609  019B  1C03               	skipc
  4610  019C  29A9               	goto	l4900
  4611                           
  4612                           ;PIR_B1.c: 121: setLED(1, 1);
  4613  019D  1283               	bcf	3,5	;RP0=0, select bank0
  4614  019E  1303               	bcf	3,6	;RP1=0, select bank0
  4615  019F  01D7               	clrf	setLED@command
  4616  01A0  0AD7               	incf	setLED@command,f
  4617  01A1                     L15:	
  4618  01A1  3001               	movlw	1
  4619  01A2  118A  25FF  118A   	fcall	_setLED
  4620                           
  4621                           ;PIR_B1.c: 122: setLED(2, 0);
  4622  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  4623  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  4624  01A7  01D7               	clrf	setLED@command
  4625  01A8  29B4               	goto	L12
  4626  01A9                     l4900:	
  4627                           ;PIR_B1.c: 123: } else {
  4628                           
  4629                           
  4630                           ;PIR_B1.c: 124: setLED(1, 0);
  4631  01A9  1283               	bcf	3,5	;RP0=0, select bank0
  4632  01AA  1303               	bcf	3,6	;RP1=0, select bank0
  4633  01AB  01D7               	clrf	setLED@command
  4634  01AC  3001               	movlw	1
  4635  01AD  118A  25FF  118A   	fcall	_setLED
  4636                           
  4637                           ;PIR_B1.c: 125: setLED(2, 1);
  4638  01B0  1283               	bcf	3,5	;RP0=0, select bank0
  4639  01B1  1303               	bcf	3,6	;RP1=0, select bank0
  4640  01B2  01D7               	clrf	setLED@command
  4641  01B3  0AD7               	incf	setLED@command,f
  4642  01B4                     L12:	
  4643  01B4  3002               	movlw	2
  4644  01B5  118A  25FF  118A   	fcall	_setLED
  4645  01B8                     l4902:	
  4646                           
  4647                           ;PIR_B1.c: 126: }
  4648                           ;PIR_B1.c: 127: }
  4649                           ;PIR_B1.c: 128: }
  4650                           ;PIR_B1.c: 129: }
  4651                           ;PIR_B1.c: 130: }
  4652                           ;PIR_B1.c: 131: }
  4653                           ;PIR_B1.c: 132: }
  4654                           ;PIR_B1.c: 133: if (_PIR.OK == 0) {
  4655  01B8  1683               	bsf	3,5	;RP0=1, select bank1
  4656  01B9  1303               	bcf	3,6	;RP1=0, select bank1
  4657  01BA  19A0               	btfsc	__PIR^(0+128),3
  4658  01BB  29D4               	goto	l4912
  4659                           
  4660                           ;PIR_B1.c: 134: _PIR.Count++;
  4661  01BC  3001               	movlw	1
  4662  01BD  07C1               	addwf	(__PIR^(0+128)+33),f
  4663  01BE  1803               	skipnc
  4664  01BF  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4665  01C0  3000               	movlw	0
  4666  01C1  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4667                           
  4668                           ;PIR_B1.c: 135: if (_PIR.Count == 3000) {
  4669  01C2  300B               	movlw	11
  4670  01C3  0642               	xorwf	((__PIR+1)^(0+128)+33),w
  4671  01C4  1D03               	skipz
  4672  01C5  29C8               	goto	u5575
  4673  01C6  30B8               	movlw	184
  4674  01C7  0641               	xorwf	(__PIR^(0+128)+33),w
  4675  01C8                     u5575:	
  4676  01C8  1D03               	skipz
  4677  01C9  29D4               	goto	l4912
  4678                           
  4679                           ;PIR_B1.c: 136: _PIR.Count = 0;
  4680  01CA  01C1               	clrf	(__PIR^(0+128)+33)
  4681  01CB  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4682                           
  4683                           ;PIR_B1.c: 137: _PIR.OK = 1;
  4684  01CC  15A0               	bsf	__PIR^(0+128),3
  4685                           
  4686                           ;PIR_B1.c: 138: setLED(2, 0);
  4687  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  4688  01CE  1303               	bcf	3,6	;RP1=0, select bank0
  4689  01CF  01D7               	clrf	setLED@command
  4690  01D0  3002               	movlw	2
  4691  01D1  118A  25FF  118A   	fcall	_setLED
  4692  01D4                     l4912:	
  4693                           
  4694                           ;PIR_B1.c: 139: }
  4695                           ;PIR_B1.c: 140: }
  4696                           ;PIR_B1.c: 141: if (_PIR.Status == 1) {
  4697  01D4  1683               	bsf	3,5	;RP0=1, select bank1
  4698  01D5  1303               	bcf	3,6	;RP1=0, select bank1
  4699  01D6  1F20               	btfss	__PIR^(0+128),6
  4700  01D7  0008               	return
  4701                           
  4702                           ;PIR_B1.c: 142: _PIR.CloseTimeSeconds++;
  4703  01D8  3001               	movlw	1
  4704  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  4705  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  4706  01DB  00E1               	movwf	??_PIR_Main
  4707  01DC  0861               	movf	??_PIR_Main,w
  4708  01DD  1683               	bsf	3,5	;RP0=1, select bank1
  4709  01DE  1303               	bcf	3,6	;RP1=0, select bank1
  4710  01DF  07C6               	addwf	(__PIR^(0+128)+38),f
  4711                           
  4712                           ;PIR_B1.c: 143: if (_PIR.CloseTimeSeconds == 100) {
  4713  01E0  0846               	movf	(__PIR^(0+128)+38),w
  4714  01E1  3A64               	xorlw	100
  4715  01E2  1D03               	skipz
  4716  01E3  0008               	return
  4717                           
  4718                           ;PIR_B1.c: 144: _PIR.CloseTimeSeconds = 0;
  4719  01E4  01C6               	clrf	(__PIR^(0+128)+38)
  4720                           
  4721                           ;PIR_B1.c: 145: _PIR.CloseTimeMinutes++;
  4722  01E5  3001               	movlw	1
  4723  01E6  07C4               	addwf	(__PIR^(0+128)+36),f
  4724  01E7  1803               	skipnc
  4725  01E8  0AC5               	incf	((__PIR+1)^(0+128)+36),f
  4726  01E9  3000               	movlw	0
  4727  01EA  07C5               	addwf	((__PIR+1)^(0+128)+36),f
  4728                           
  4729                           ;PIR_B1.c: 146: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  4730  01EB  0848               	movf	((__PIR+1)^(0+128)+39),w
  4731  01EC  0645               	xorwf	((__PIR+1)^(0+128)+36),w
  4732  01ED  1D03               	skipz
  4733  01EE  29F1               	goto	u5605
  4734  01EF  0847               	movf	(__PIR^(0+128)+39),w
  4735  01F0  0644               	xorwf	(__PIR^(0+128)+36),w
  4736  01F1                     u5605:	
  4737  01F1  1D03               	skipz
  4738  01F2  0008               	return
  4739                           
  4740                           ;PIR_B1.c: 147: _PIR.CloseTimeMinutes = 0;
  4741  01F3  01C4               	clrf	(__PIR^(0+128)+36)
  4742  01F4  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4743                           
  4744                           ;PIR_B1.c: 148: _PIR.Status = 0;
  4745  01F5  1320               	bcf	__PIR^(0+128),6
  4746                           
  4747                           ;PIR_B1.c: 151: if (getLights_Status(1) == 1) {
  4748  01F6  3001               	movlw	1
  4749  01F7  158A  247B  118A   	fcall	_getLights_Status
  4750  01FA  3A01               	xorlw	1
  4751  01FB  1D03               	skipz
  4752  01FC  0008               	return
  4753                           
  4754                           ;PIR_B1.c: 152: setLights_Trigger(1, 0);
  4755  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  4756  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  4757  01FF  01D7               	clrf	setLights_Trigger@command
  4758  0200  3001               	movlw	1
  4759  0201  158A  2568         	fcall	_setLights_Trigger
  4760                           
  4761                           ;PIR_B1.c: 153: }
  4762                           ;PIR_B1.c: 156: }
  4763                           ;PIR_B1.c: 157: }
  4764                           ;PIR_B1.c: 158: }
  4765                           ;PIR_B1.c: 159: } else {
  4766  0203  0008               	return
  4767  0204                     l857:	
  4768                           
  4769                           ;PIR_B1.c: 160: if (myMain.PowerON == 1) {
  4770  0204  1283               	bcf	3,5	;RP0=0, select bank0
  4771  0205  1303               	bcf	3,6	;RP1=0, select bank0
  4772  0206  1C20               	btfss	_myMain,0
  4773  0207  0008               	return
  4774                           
  4775                           ;PIR_B1.c: 161: _PIR.Enable = 1;
  4776  0208  1683               	bsf	3,5	;RP0=1, select bank1
  4777  0209  1303               	bcf	3,6	;RP1=0, select bank1
  4778  020A  1420               	bsf	__PIR^(0+128),0
  4779  020B  0008               	return
  4780  020C                     __end_of_PIR_Main:	
  4781                           
  4782                           	psect	text19
  4783  0F81                     __ptext19:	
  4784 ;; *************** function _setMain_Exception *****************
  4785 ;; Defined at:
  4786 ;;		line 289 in file "../src/Main_B1.c"
  4787 ;; Parameters:    Size  Location     Type
  4788 ;;  command         1    wreg     unsigned char 
  4789 ;; Auto vars:     Size  Location     Type
  4790 ;;  command         1   11[BANK0 ] unsigned char 
  4791 ;;  status          1    8[BANK0 ] unsigned char 
  4792 ;;  buz             1    7[BANK0 ] unsigned char 
  4793 ;; Return value:  Size  Location     Type
  4794 ;;		None               void
  4795 ;; Registers used:
  4796 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4797 ;; Tracked objects:
  4798 ;;		On entry : 0/0
  4799 ;;		On exit  : 0/0
  4800 ;;		Unchanged: 0/0
  4801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4802 ;;      Params:         0       0       0       0
  4803 ;;      Locals:         0       5       0       0
  4804 ;;      Temps:          0       2       0       0
  4805 ;;      Totals:         0       7       0       0
  4806 ;;Total ram usage:        7 bytes
  4807 ;; Hardware stack levels used:    1
  4808 ;; Hardware stack levels required when called:    5
  4809 ;; This function calls:
  4810 ;;		_getAll_Lights_Line
  4811 ;;		_setLED
  4812 ;;		_setLights_Trigger
  4813 ;; This function is called by:
  4814 ;;		_PIR_Main
  4815 ;; This function uses a non-reentrant model
  4816 ;;
  4817                           
  4818                           
  4819                           ;psect for function _setMain_Exception
  4820  0F81                     _setMain_Exception:	
  4821                           
  4822                           ;incstack = 0
  4823                           ; Regs used in _setMain_Exception: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4824                           ;setMain_Exception@command stored from wreg
  4825  0F81  1283               	bcf	3,5	;RP0=0, select bank0
  4826  0F82  1303               	bcf	3,6	;RP1=0, select bank0
  4827  0F83  00E0               	movwf	setMain_Exception@command
  4828                           
  4829                           ;Main_B1.c: 290: char status = 0, buz = 0;
  4830  0F84  01DD               	clrf	setMain_Exception@status
  4831  0F85  01DC               	clrf	setMain_Exception@buz
  4832                           
  4833                           ;Main_B1.c: 292: status = command == 3 ? getAll_Lights_Line() : 255;
  4834  0F86  0860               	movf	setMain_Exception@command,w
  4835  0F87  3A03               	xorlw	3
  4836  0F88  1903               	skipnz
  4837  0F89  2F8E               	goto	l4342
  4838  0F8A  30FF               	movlw	255
  4839  0F8B  00DE               	movwf	_setMain_Exception$2310
  4840  0F8C  3000               	movlw	0
  4841  0F8D  2F98               	goto	L16
  4842  0F8E                     l4342:	
  4843  0F8E  158A  249D  158A   	fcall	_getAll_Lights_Line
  4844  0F91  1283               	bcf	3,5	;RP0=0, select bank0
  4845  0F92  1303               	bcf	3,6	;RP1=0, select bank0
  4846  0F93  00DA               	movwf	??_setMain_Exception
  4847  0F94  01DB               	clrf	??_setMain_Exception+1
  4848  0F95  085A               	movf	??_setMain_Exception,w
  4849  0F96  00DE               	movwf	_setMain_Exception$2310
  4850  0F97  085B               	movf	??_setMain_Exception+1,w
  4851  0F98                     L16:	
  4852  0F98  00DF               	movwf	_setMain_Exception$2310+1
  4853  0F99  085E               	movf	_setMain_Exception$2310,w
  4854  0F9A  00DA               	movwf	??_setMain_Exception
  4855  0F9B  085A               	movf	??_setMain_Exception,w
  4856  0F9C  00DD               	movwf	setMain_Exception@status
  4857                           
  4858                           ;Main_B1.c: 294: if (command == 0) {
  4859  0F9D  08E0               	movf	setMain_Exception@command,f
  4860  0F9E  1D03               	skipz
  4861  0F9F  2FA2               	goto	l4350
  4862                           
  4863                           ;Main_B1.c: 295: setLED(command, 110);
  4864  0FA0  306E               	movlw	110
  4865  0FA1  2FAD               	goto	L17
  4866  0FA2                     l4350:	
  4867                           ;Main_B1.c: 296: } else if (command == 5) {
  4868                           
  4869  0FA2  1283               	bcf	3,5	;RP0=0, select bank0
  4870  0FA3  1303               	bcf	3,6	;RP1=0, select bank0
  4871  0FA4  0860               	movf	setMain_Exception@command,w
  4872  0FA5  3A05               	xorlw	5
  4873  0FA6  1D03               	skipz
  4874  0FA7  2FAA               	goto	l4354
  4875                           
  4876                           ;Main_B1.c: 297: __nop();
  4877  0FA8  0000               	nop
  4878                           
  4879                           ;Main_B1.c: 298: } else {
  4880  0FA9  2FB4               	goto	l4356
  4881  0FAA                     l4354:	
  4882                           
  4883                           ;Main_B1.c: 299: setLED(command, 111);
  4884  0FAA  306F               	movlw	111
  4885  0FAB  1283               	bcf	3,5	;RP0=0, select bank0
  4886  0FAC  1303               	bcf	3,6	;RP1=0, select bank0
  4887  0FAD                     L17:	
  4888  0FAD  00DA               	movwf	??_setMain_Exception
  4889  0FAE  085A               	movf	??_setMain_Exception,w
  4890  0FAF  00D7               	movwf	setLED@command
  4891  0FB0  0860               	movf	setMain_Exception@command,w
  4892  0FB1  118A  25FF  158A   	fcall	_setLED
  4893  0FB4                     l4356:	
  4894                           
  4895                           ;Main_B1.c: 300: }
  4896                           ;Main_B1.c: 302: if (command != 0) {
  4897  0FB4  1283               	bcf	3,5	;RP0=0, select bank0
  4898  0FB5  1303               	bcf	3,6	;RP1=0, select bank0
  4899  0FB6  0860               	movf	setMain_Exception@command,w
  4900  0FB7  1903               	btfsc	3,2
  4901  0FB8  0008               	return
  4902                           
  4903                           ;Main_B1.c: 303: setLights_Trigger(1, 0);
  4904  0FB9  01D7               	clrf	setLights_Trigger@command
  4905  0FBA  3001               	movlw	1
  4906  0FBB  158A  2568         	fcall	_setLights_Trigger
  4907  0FBD  1283               	bcf	3,5	;RP0=0, select bank0
  4908  0FBE  1303               	bcf	3,6	;RP1=0, select bank0
  4909  0FBF  0008               	return
  4910  0FC0                     __end_of_setMain_Exception:	
  4911                           
  4912                           	psect	text20
  4913  0D68                     __ptext20:	
  4914 ;; *************** function _setLights_Trigger *****************
  4915 ;; Defined at:
  4916 ;;		line 214 in file "../src/TriacRelay_B1.c"
  4917 ;; Parameters:    Size  Location     Type
  4918 ;;  lights          1    wreg     unsigned char 
  4919 ;;  command         1    2[BANK0 ] unsigned char 
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;  lights          1    4[BANK0 ] unsigned char 
  4922 ;; Return value:  Size  Location     Type
  4923 ;;		None               void
  4924 ;; Registers used:
  4925 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4931 ;;      Params:         0       1       0       0
  4932 ;;      Locals:         0       1       0       0
  4933 ;;      Temps:          0       1       0       0
  4934 ;;      Totals:         0       3       0       0
  4935 ;;Total ram usage:        3 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; Hardware stack levels required when called:    4
  4938 ;; This function calls:
  4939 ;;		_LightsPointSelect
  4940 ;; This function is called by:
  4941 ;;		_setMain_Exception
  4942 ;;		_PIR_Main
  4943 ;; This function uses a non-reentrant model
  4944 ;;
  4945                           
  4946                           
  4947                           ;psect for function _setLights_Trigger
  4948  0D68                     _setLights_Trigger:	
  4949                           
  4950                           ;incstack = 0
  4951                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4952                           ;setLights_Trigger@lights stored from wreg
  4953  0D68  1283               	bcf	3,5	;RP0=0, select bank0
  4954  0D69  1303               	bcf	3,6	;RP1=0, select bank0
  4955  0D6A  00D9               	movwf	setLights_Trigger@lights
  4956                           
  4957                           ;TriacRelay_B1.c: 215: LightsPointSelect(lights);
  4958  0D6B  0859               	movf	setLights_Trigger@lights,w
  4959  0D6C  158A  2427         	fcall	_LightsPointSelect
  4960                           
  4961                           ;TriacRelay_B1.c: 216: Lights->Trigger = 1;
  4962  0D6E  1283               	bcf	3,5	;RP0=0, select bank0
  4963  0D6F  1303               	bcf	3,6	;RP1=0, select bank0
  4964  0D70  0834               	movf	_Lights,w
  4965  0D71  0084               	movwf	4
  4966  0D72  1383               	bcf	3,7	;select IRP bank0
  4967  0D73  1580               	bsf	0,3
  4968                           
  4969                           ;TriacRelay_B1.c: 217: Lights->Switch = command == 1 ? 1 : 0;
  4970  0D74  0857               	movf	setLights_Trigger@command,w
  4971  0D75  3A01               	xorlw	1
  4972  0D76  3000               	movlw	0
  4973  0D77  1903               	skipnz
  4974  0D78  3001               	movlw	1
  4975  0D79  00D8               	movwf	??_setLights_Trigger
  4976  0D7A  0834               	movf	_Lights,w
  4977  0D7B  0084               	movwf	4
  4978  0D7C  0ED8               	swapf	??_setLights_Trigger,f
  4979  0D7D  0800               	movf	0,w
  4980  0D7E  0658               	xorwf	??_setLights_Trigger,w
  4981  0D7F  39EF               	andlw	-17
  4982  0D80  0658               	xorwf	??_setLights_Trigger,w
  4983  0D81  0080               	movwf	0
  4984  0D82  0008               	return
  4985  0D83                     __end_of_setLights_Trigger:	
  4986                           
  4987                           	psect	text21
  4988  0C9D                     __ptext21:	
  4989 ;; *************** function _getAll_Lights_Line *****************
  4990 ;; Defined at:
  4991 ;;		line 236 in file "../src/TriacRelay_B1.c"
  4992 ;; Parameters:    Size  Location     Type
  4993 ;;		None
  4994 ;; Auto vars:     Size  Location     Type
  4995 ;;  line            1    2[BANK0 ] unsigned char 
  4996 ;; Return value:  Size  Location     Type
  4997 ;;                  1    wreg      unsigned char 
  4998 ;; Registers used:
  4999 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5000 ;; Tracked objects:
  5001 ;;		On entry : 0/0
  5002 ;;		On exit  : 0/0
  5003 ;;		Unchanged: 0/0
  5004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5005 ;;      Params:         0       0       0       0
  5006 ;;      Locals:         0       1       0       0
  5007 ;;      Temps:          0       0       0       0
  5008 ;;      Totals:         0       1       0       0
  5009 ;;Total ram usage:        1 bytes
  5010 ;; Hardware stack levels used:    1
  5011 ;; Hardware stack levels required when called:    4
  5012 ;; This function calls:
  5013 ;;		_LightsPointSelect
  5014 ;; This function is called by:
  5015 ;;		_setMain_Exception
  5016 ;; This function uses a non-reentrant model
  5017 ;;
  5018                           
  5019                           
  5020                           ;psect for function _getAll_Lights_Line
  5021  0C9D                     _getAll_Lights_Line:	
  5022                           
  5023                           ;TriacRelay_B1.c: 237: char line = 0;
  5024                           
  5025                           ;incstack = 0
  5026                           ; Regs used in _getAll_Lights_Line: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5027  0C9D  1283               	bcf	3,5	;RP0=0, select bank0
  5028  0C9E  1303               	bcf	3,6	;RP1=0, select bank0
  5029  0C9F  01D7               	clrf	getAll_Lights_Line@line
  5030                           
  5031                           ;TriacRelay_B1.c: 239: LightsPointSelect(1);
  5032  0CA0  3001               	movlw	1
  5033  0CA1  158A  2427         	fcall	_LightsPointSelect
  5034                           
  5035                           ;TriacRelay_B1.c: 240: line = Lights->Line == 1 ? 1 : 0;
  5036  0CA3  1283               	bcf	3,5	;RP0=0, select bank0
  5037  0CA4  1303               	bcf	3,6	;RP1=0, select bank0
  5038  0CA5  0A34               	incf	_Lights,w
  5039  0CA6  0084               	movwf	4
  5040  0CA7  3000               	movlw	0
  5041  0CA8  1383               	bcf	3,7	;select IRP bank0
  5042  0CA9  1800               	btfsc	0,0
  5043  0CAA  3001               	movlw	1
  5044  0CAB  00D7               	movwf	getAll_Lights_Line@line
  5045                           
  5046                           ;TriacRelay_B1.c: 250: return line;
  5047  0CAC  0857               	movf	getAll_Lights_Line@line,w
  5048  0CAD  0008               	return
  5049  0CAE                     __end_of_getAll_Lights_Line:	
  5050                           
  5051                           	psect	text22
  5052  0CE5                     __ptext22:	
  5053 ;; *************** function _PIR_Initialization *****************
  5054 ;; Defined at:
  5055 ;;		line 7 in file "../src/PIR_B1.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;		None
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;		None
  5060 ;; Return value:  Size  Location     Type
  5061 ;;		None               void
  5062 ;; Registers used:
  5063 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5069 ;;      Params:         0       0       0       0
  5070 ;;      Locals:         0       0       0       0
  5071 ;;      Temps:          0       1       0       0
  5072 ;;      Totals:         0       1       0       0
  5073 ;;Total ram usage:        1 bytes
  5074 ;; Hardware stack levels used:    1
  5075 ;; Hardware stack levels required when called:    5
  5076 ;; This function calls:
  5077 ;;		_setLED
  5078 ;; This function is called by:
  5079 ;;		_main
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083                           
  5084                           ;psect for function _PIR_Initialization
  5085  0CE5                     _PIR_Initialization:	
  5086                           
  5087                           ;PIR_B1.c: 8: setLED(1, 1);
  5088                           
  5089                           ;incstack = 0
  5090                           ; Regs used in _PIR_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5091  0CE5  1283               	bcf	3,5	;RP0=0, select bank0
  5092  0CE6  1303               	bcf	3,6	;RP1=0, select bank0
  5093  0CE7  01D7               	clrf	setLED@command
  5094  0CE8  0AD7               	incf	setLED@command,f
  5095  0CE9  3001               	movlw	1
  5096  0CEA  118A  25FF         	fcall	_setLED
  5097                           
  5098                           ;PIR_B1.c: 9: _PIR.RangeValue = 15;
  5099  0CEC  300F               	movlw	15
  5100  0CED  1283               	bcf	3,5	;RP0=0, select bank0
  5101  0CEE  1303               	bcf	3,6	;RP1=0, select bank0
  5102  0CEF  00D9               	movwf	??_PIR_Initialization
  5103  0CF0  0859               	movf	??_PIR_Initialization,w
  5104  0CF1  1683               	bsf	3,5	;RP0=1, select bank1
  5105  0CF2  1303               	bcf	3,6	;RP1=0, select bank1
  5106  0CF3  00CC               	movwf	(__PIR^(0+128)+44)
  5107                           
  5108                           ;PIR_B1.c: 10: _PIR.CloseTimeValue = 5;
  5109  0CF4  3005               	movlw	5
  5110  0CF5  00C7               	movwf	(__PIR^(0+128)+39)
  5111  0CF6  3000               	movlw	0
  5112  0CF7  00C8               	movwf	(__PIR^(0+128)+40)
  5113  0CF8  0008               	return
  5114  0CF9                     __end_of_PIR_Initialization:	
  5115                           
  5116                           	psect	text23
  5117  0CC0                     __ptext23:	
  5118 ;; *************** function _Mcu_Initialization *****************
  5119 ;; Defined at:
  5120 ;;		line 30 in file "../src/MCU_B1.c"
  5121 ;; Parameters:    Size  Location     Type
  5122 ;;		None
  5123 ;; Auto vars:     Size  Location     Type
  5124 ;;		None
  5125 ;; Return value:  Size  Location     Type
  5126 ;;		None               void
  5127 ;; Registers used:
  5128 ;;		wreg, status,2, status,0, pclath, cstack
  5129 ;; Tracked objects:
  5130 ;;		On entry : 0/0
  5131 ;;		On exit  : 0/0
  5132 ;;		Unchanged: 0/0
  5133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5134 ;;      Params:         0       0       0       0
  5135 ;;      Locals:         0       0       0       0
  5136 ;;      Temps:          0       0       0       0
  5137 ;;      Totals:         0       0       0       0
  5138 ;;Total ram usage:        0 bytes
  5139 ;; Hardware stack levels used:    1
  5140 ;; Hardware stack levels required when called:    4
  5141 ;; This function calls:
  5142 ;;		_ADC_Set
  5143 ;;		_Fosc_Set
  5144 ;;		_IO_Set
  5145 ;;		_TMR1_Set
  5146 ;;		_UART_Set
  5147 ;;		_WDT_Set
  5148 ;; This function is called by:
  5149 ;;		_main
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           
  5154                           ;psect for function _Mcu_Initialization
  5155  0CC0                     _Mcu_Initialization:	
  5156                           
  5157                           ;MCU_B1.c: 32: Fosc_Set();
  5158                           
  5159                           ;incstack = 0
  5160                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5161  0CC0  158A  23C4  158A   	fcall	_Fosc_Set
  5162                           
  5163                           ;MCU_B1.c: 34: IO_Set();
  5164  0CC3  158A  2522  158A   	fcall	_IO_Set
  5165                           
  5166                           ;MCU_B1.c: 36: ;;
  5167                           ;MCU_B1.c: 38: TMR1_Set();
  5168  0CC6  158A  2441  158A   	fcall	_TMR1_Set
  5169                           
  5170                           ;MCU_B1.c: 40: ADC_Set();
  5171  0CC9  158A  23E2  158A   	fcall	_ADC_Set
  5172                           
  5173                           ;MCU_B1.c: 42: ;;
  5174                           ;MCU_B1.c: 44: ;;
  5175                           ;MCU_B1.c: 46: ;;
  5176                           ;MCU_B1.c: 48: ;;
  5177                           ;MCU_B1.c: 50: UART_Set();
  5178  0CCC  158A  254F  158A   	fcall	_UART_Set
  5179                           
  5180                           ;MCU_B1.c: 52: WDT_Set();
  5181  0CCF  158A  244F         	fcall	_WDT_Set
  5182  0CD1  0008               	return
  5183  0CD2                     __end_of_Mcu_Initialization:	
  5184                           
  5185                           	psect	text24
  5186  0C4F                     __ptext24:	
  5187 ;; *************** function _WDT_Set *****************
  5188 ;; Defined at:
  5189 ;;		line 1044 in file "../src/MCU_B1.c"
  5190 ;; Parameters:    Size  Location     Type
  5191 ;;		None
  5192 ;; Auto vars:     Size  Location     Type
  5193 ;;		None
  5194 ;; Return value:  Size  Location     Type
  5195 ;;		None               void
  5196 ;; Registers used:
  5197 ;;		wreg
  5198 ;; Tracked objects:
  5199 ;;		On entry : 0/0
  5200 ;;		On exit  : 0/0
  5201 ;;		Unchanged: 0/0
  5202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5203 ;;      Params:         0       0       0       0
  5204 ;;      Locals:         0       0       0       0
  5205 ;;      Temps:          0       1       0       0
  5206 ;;      Totals:         0       1       0       0
  5207 ;;Total ram usage:        1 bytes
  5208 ;; Hardware stack levels used:    1
  5209 ;; Hardware stack levels required when called:    3
  5210 ;; This function calls:
  5211 ;;		Nothing
  5212 ;; This function is called by:
  5213 ;;		_Mcu_Initialization
  5214 ;; This function uses a non-reentrant model
  5215 ;;
  5216                           
  5217                           
  5218                           ;psect for function _WDT_Set
  5219  0C4F                     _WDT_Set:	
  5220                           
  5221                           ;MCU_B1.c: 1046: PSA = 1;
  5222                           
  5223                           ;incstack = 0
  5224                           ; Regs used in _WDT_Set: [wreg]
  5225  0C4F  1683               	bsf	3,5	;RP0=1, select bank1
  5226  0C50  1303               	bcf	3,6	;RP1=0, select bank1
  5227  0C51  1581               	bsf	1,3	;volatile
  5228                           
  5229                           ;MCU_B1.c: 1047: PS0 = 1;
  5230  0C52  1401               	bsf	1,0	;volatile
  5231                           
  5232                           ;MCU_B1.c: 1048: PS1 = 1;
  5233  0C53  1481               	bsf	1,1	;volatile
  5234                           
  5235                           ;MCU_B1.c: 1049: PS2 = 1;
  5236  0C54  1501               	bsf	1,2	;volatile
  5237                           
  5238                           ;MCU_B1.c: 1053: WDT.Enable = 1;
  5239  0C55  1477               	bsf	_WDT,0
  5240                           
  5241                           ;MCU_B1.c: 1054: WDT.Timer = 10;
  5242  0C56  300A               	movlw	10
  5243  0C57  1283               	bcf	3,5	;RP0=0, select bank0
  5244  0C58  1303               	bcf	3,6	;RP1=0, select bank0
  5245  0C59  00D5               	movwf	??_WDT_Set
  5246  0C5A  0855               	movf	??_WDT_Set,w
  5247  0C5B  00F8               	movwf	_WDT+1
  5248  0C5C  0008               	return
  5249  0C5D                     __end_of_WDT_Set:	
  5250                           
  5251                           	psect	text25
  5252  0D4F                     __ptext25:	
  5253 ;; *************** function _UART_Set *****************
  5254 ;; Defined at:
  5255 ;;		line 720 in file "../src/MCU_B1.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;		None
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;		None
  5260 ;; Return value:  Size  Location     Type
  5261 ;;		None               void
  5262 ;; Registers used:
  5263 ;;		wreg
  5264 ;; Tracked objects:
  5265 ;;		On entry : 0/0
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5269 ;;      Params:         0       0       0       0
  5270 ;;      Locals:         0       0       0       0
  5271 ;;      Temps:          0       0       0       0
  5272 ;;      Totals:         0       0       0       0
  5273 ;;Total ram usage:        0 bytes
  5274 ;; Hardware stack levels used:    1
  5275 ;; Hardware stack levels required when called:    3
  5276 ;; This function calls:
  5277 ;;		Nothing
  5278 ;; This function is called by:
  5279 ;;		_Mcu_Initialization
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           
  5284                           ;psect for function _UART_Set
  5285  0D4F                     _UART_Set:	
  5286                           
  5287                           ;MCU_B1.c: 722: TRISC7 = 1;
  5288                           
  5289                           ;incstack = 0
  5290                           ; Regs used in _UART_Set: [wreg]
  5291  0D4F  1683               	bsf	3,5	;RP0=1, select bank1
  5292  0D50  1303               	bcf	3,6	;RP1=0, select bank1
  5293  0D51  1787               	bsf	7,7	;volatile
  5294                           
  5295                           ;MCU_B1.c: 723: TRISC6 = 1;
  5296  0D52  1707               	bsf	7,6	;volatile
  5297                           
  5298                           ;MCU_B1.c: 724: SPBRG = ((int)(16000000L/(16UL * 19200) -1));
  5299  0D53  3033               	movlw	51
  5300  0D54  0099               	movwf	25	;volatile
  5301                           
  5302                           ;MCU_B1.c: 729: RCSTA = (0 | 0x90);
  5303  0D55  3090               	movlw	144
  5304  0D56  1283               	bcf	3,5	;RP0=0, select bank0
  5305  0D57  1303               	bcf	3,6	;RP1=0, select bank0
  5306  0D58  0098               	movwf	24	;volatile
  5307                           
  5308                           ;MCU_B1.c: 730: TXSTA = (0x4 | 0 | 0x20);
  5309  0D59  3024               	movlw	36
  5310  0D5A  1683               	bsf	3,5	;RP0=1, select bank1
  5311  0D5B  1303               	bcf	3,6	;RP1=0, select bank1
  5312  0D5C  0098               	movwf	24	;volatile
  5313                           
  5314                           ;MCU_B1.c: 731: TX9 = 0;
  5315  0D5D  1318               	bcf	24,6	;volatile
  5316                           
  5317                           ;MCU_B1.c: 732: RX9 = 0;
  5318  0D5E  1283               	bcf	3,5	;RP0=0, select bank0
  5319  0D5F  1303               	bcf	3,6	;RP1=0, select bank0
  5320  0D60  1318               	bcf	24,6	;volatile
  5321                           
  5322                           ;MCU_B1.c: 733: TXIE = 0;
  5323  0D61  1683               	bsf	3,5	;RP0=1, select bank1
  5324  0D62  1303               	bcf	3,6	;RP1=0, select bank1
  5325  0D63  120C               	bcf	12,4	;volatile
  5326                           
  5327                           ;MCU_B1.c: 734: RCIE = 1;
  5328  0D64  168C               	bsf	12,5	;volatile
  5329                           
  5330                           ;MCU_B1.c: 735: PEIE = 1;
  5331  0D65  170B               	bsf	11,6	;volatile
  5332                           
  5333                           ;MCU_B1.c: 736: GIE = 1;
  5334  0D66  178B               	bsf	11,7	;volatile
  5335  0D67  0008               	return
  5336  0D68                     __end_of_UART_Set:	
  5337                           
  5338                           	psect	text26
  5339  0C41                     __ptext26:	
  5340 ;; *************** function _TMR1_Set *****************
  5341 ;; Defined at:
  5342 ;;		line 199 in file "../src/MCU_B1.c"
  5343 ;; Parameters:    Size  Location     Type
  5344 ;;		None
  5345 ;; Auto vars:     Size  Location     Type
  5346 ;;		None
  5347 ;; Return value:  Size  Location     Type
  5348 ;;		None               void
  5349 ;; Registers used:
  5350 ;;		wreg
  5351 ;; Tracked objects:
  5352 ;;		On entry : 0/0
  5353 ;;		On exit  : 0/0
  5354 ;;		Unchanged: 0/0
  5355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5356 ;;      Params:         0       0       0       0
  5357 ;;      Locals:         0       0       0       0
  5358 ;;      Temps:          0       0       0       0
  5359 ;;      Totals:         0       0       0       0
  5360 ;;Total ram usage:        0 bytes
  5361 ;; Hardware stack levels used:    1
  5362 ;; Hardware stack levels required when called:    3
  5363 ;; This function calls:
  5364 ;;		Nothing
  5365 ;; This function is called by:
  5366 ;;		_Mcu_Initialization
  5367 ;; This function uses a non-reentrant model
  5368 ;;
  5369                           
  5370                           
  5371                           ;psect for function _TMR1_Set
  5372  0C41                     _TMR1_Set:	
  5373                           
  5374                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  5375                           
  5376                           ;incstack = 0
  5377                           ; Regs used in _TMR1_Set: [wreg]
  5378  0C41  3041               	movlw	65
  5379  0C42  1283               	bcf	3,5	;RP0=0, select bank0
  5380  0C43  1303               	bcf	3,6	;RP1=0, select bank0
  5381  0C44  0090               	movwf	16	;volatile
  5382                           
  5383                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  5384  0C45  30FA               	movlw	250
  5385  0C46  008F               	movwf	15	;volatile
  5386                           
  5387                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  5388  0C47  3038               	movlw	56
  5389  0C48  008E               	movwf	14	;volatile
  5390                           
  5391                           ;MCU_B1.c: 203: TMR1IE = 1;
  5392  0C49  1683               	bsf	3,5	;RP0=1, select bank1
  5393  0C4A  1303               	bcf	3,6	;RP1=0, select bank1
  5394  0C4B  140C               	bsf	12,0	;volatile
  5395                           
  5396                           ;MCU_B1.c: 204: PEIE = 1;
  5397  0C4C  170B               	bsf	11,6	;volatile
  5398                           
  5399                           ;MCU_B1.c: 205: GIE = 1;
  5400  0C4D  178B               	bsf	11,7	;volatile
  5401  0C4E  0008               	return
  5402  0C4F                     __end_of_TMR1_Set:	
  5403                           
  5404                           	psect	text27
  5405  0D22                     __ptext27:	
  5406 ;; *************** function _IO_Set *****************
  5407 ;; Defined at:
  5408 ;;		line 60 in file "../src/MCU_B1.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;		None
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;		None
  5413 ;; Return value:  Size  Location     Type
  5414 ;;		None               void
  5415 ;; Registers used:
  5416 ;;		wreg, status,2
  5417 ;; Tracked objects:
  5418 ;;		On entry : 0/0
  5419 ;;		On exit  : 0/0
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5422 ;;      Params:         0       0       0       0
  5423 ;;      Locals:         0       0       0       0
  5424 ;;      Temps:          0       0       0       0
  5425 ;;      Totals:         0       0       0       0
  5426 ;;Total ram usage:        0 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; Hardware stack levels required when called:    3
  5429 ;; This function calls:
  5430 ;;		Nothing
  5431 ;; This function is called by:
  5432 ;;		_Mcu_Initialization
  5433 ;; This function uses a non-reentrant model
  5434 ;;
  5435                           
  5436                           
  5437                           ;psect for function _IO_Set
  5438  0D22                     _IO_Set:	
  5439                           
  5440                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  5441                           
  5442                           ;incstack = 0
  5443                           ; Regs used in _IO_Set: [wreg+status,2]
  5444  0D22  302F               	movlw	47
  5445  0D23  1683               	bsf	3,5	;RP0=1, select bank1
  5446  0D24  1303               	bcf	3,6	;RP1=0, select bank1
  5447  0D25  0085               	movwf	5	;volatile
  5448                           
  5449                           ;MCU_B1.c: 63: TRISB = 0b00000001;;
  5450  0D26  3001               	movlw	1
  5451  0D27  0086               	movwf	6	;volatile
  5452                           
  5453                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  5454  0D28  0187               	clrf	7	;volatile
  5455                           
  5456                           ;MCU_B1.c: 65: ANSELA = 0b00000111;;
  5457  0D29  3007               	movlw	7
  5458  0D2A  1683               	bsf	3,5	;RP0=1, select bank3
  5459  0D2B  1703               	bsf	3,6	;RP1=1, select bank3
  5460  0D2C  0085               	movwf	5	;volatile
  5461                           
  5462                           ;MCU_B1.c: 66: ANSELB = 0b00000001;;
  5463  0D2D  3001               	movlw	1
  5464  0D2E  0086               	movwf	6	;volatile
  5465                           
  5466                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  5467  0D2F  30AF               	movlw	175
  5468  0D30  1283               	bcf	3,5	;RP0=0, select bank0
  5469  0D31  1303               	bcf	3,6	;RP1=0, select bank0
  5470  0D32  0085               	movwf	5	;volatile
  5471                           
  5472                           ;MCU_B1.c: 68: PORTB = 0b00000001;;
  5473  0D33  3001               	movlw	1
  5474  0D34  0086               	movwf	6	;volatile
  5475                           
  5476                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  5477  0D35  0187               	clrf	7	;volatile
  5478  0D36  0008               	return
  5479  0D37                     __end_of_IO_Set:	
  5480                           
  5481                           	psect	text28
  5482  0BC4                     __ptext28:	
  5483 ;; *************** function _Fosc_Set *****************
  5484 ;; Defined at:
  5485 ;;		line 56 in file "../src/MCU_B1.c"
  5486 ;; Parameters:    Size  Location     Type
  5487 ;;		None
  5488 ;; Auto vars:     Size  Location     Type
  5489 ;;		None
  5490 ;; Return value:  Size  Location     Type
  5491 ;;		None               void
  5492 ;; Registers used:
  5493 ;;		wreg
  5494 ;; Tracked objects:
  5495 ;;		On entry : 0/0
  5496 ;;		On exit  : 0/0
  5497 ;;		Unchanged: 0/0
  5498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5499 ;;      Params:         0       0       0       0
  5500 ;;      Locals:         0       0       0       0
  5501 ;;      Temps:          0       0       0       0
  5502 ;;      Totals:         0       0       0       0
  5503 ;;Total ram usage:        0 bytes
  5504 ;; Hardware stack levels used:    1
  5505 ;; Hardware stack levels required when called:    3
  5506 ;; This function calls:
  5507 ;;		Nothing
  5508 ;; This function is called by:
  5509 ;;		_Mcu_Initialization
  5510 ;; This function uses a non-reentrant model
  5511 ;;
  5512                           
  5513                           
  5514                           ;psect for function _Fosc_Set
  5515  0BC4                     _Fosc_Set:	
  5516                           
  5517                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  5518                           
  5519                           ;incstack = 0
  5520                           ; Regs used in _Fosc_Set: [wreg]
  5521  0BC4  303C               	movlw	60
  5522  0BC5  1683               	bsf	3,5	;RP0=1, select bank1
  5523  0BC6  1303               	bcf	3,6	;RP1=0, select bank1
  5524  0BC7  0090               	movwf	16	;volatile
  5525  0BC8  0008               	return
  5526  0BC9                     __end_of_Fosc_Set:	
  5527                           
  5528                           	psect	text29
  5529  0BE2                     __ptext29:	
  5530 ;; *************** function _ADC_Set *****************
  5531 ;; Defined at:
  5532 ;;		line 421 in file "../src/MCU_B1.c"
  5533 ;; Parameters:    Size  Location     Type
  5534 ;;		None
  5535 ;; Auto vars:     Size  Location     Type
  5536 ;;		None
  5537 ;; Return value:  Size  Location     Type
  5538 ;;		None               void
  5539 ;; Registers used:
  5540 ;;		wreg
  5541 ;; Tracked objects:
  5542 ;;		On entry : 0/0
  5543 ;;		On exit  : 0/0
  5544 ;;		Unchanged: 0/0
  5545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5546 ;;      Params:         0       0       0       0
  5547 ;;      Locals:         0       0       0       0
  5548 ;;      Temps:          0       0       0       0
  5549 ;;      Totals:         0       0       0       0
  5550 ;;Total ram usage:        0 bytes
  5551 ;; Hardware stack levels used:    1
  5552 ;; Hardware stack levels required when called:    3
  5553 ;; This function calls:
  5554 ;;		Nothing
  5555 ;; This function is called by:
  5556 ;;		_Mcu_Initialization
  5557 ;; This function uses a non-reentrant model
  5558 ;;
  5559                           
  5560                           
  5561                           ;psect for function _ADC_Set
  5562  0BE2                     _ADC_Set:	
  5563                           
  5564                           ;MCU_B1.c: 422: ADCON1 = 0x73;
  5565                           
  5566                           ;incstack = 0
  5567                           ; Regs used in _ADC_Set: [wreg]
  5568  0BE2  3073               	movlw	115
  5569  0BE3  1683               	bsf	3,5	;RP0=1, select bank1
  5570  0BE4  1303               	bcf	3,6	;RP1=0, select bank1
  5571  0BE5  009F               	movwf	31	;volatile
  5572                           
  5573                           ;MCU_B1.c: 423: FVRCON = 0xc1;
  5574  0BE6  30C1               	movlw	193
  5575  0BE7  009D               	movwf	29	;volatile
  5576  0BE8  0008               	return
  5577  0BE9                     __end_of_ADC_Set:	
  5578                           
  5579                           	psect	text30
  5580  020C                     __ptext30:	
  5581 ;; *************** function _Load_Main *****************
  5582 ;; Defined at:
  5583 ;;		line 39 in file "../src/OverLoad_B1.c"
  5584 ;; Parameters:    Size  Location     Type
  5585 ;;		None
  5586 ;; Auto vars:     Size  Location     Type
  5587 ;;  i               1   15[BANK0 ] unsigned char 
  5588 ;;  error           1   14[BANK0 ] unsigned char 
  5589 ;;  adjgo           1   12[BANK0 ] unsigned char 
  5590 ;;  j               1   11[BANK0 ] unsigned char 
  5591 ;; Return value:  Size  Location     Type
  5592 ;;		None               void
  5593 ;; Registers used:
  5594 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5595 ;; Tracked objects:
  5596 ;;		On entry : 0/0
  5597 ;;		On exit  : 0/0
  5598 ;;		Unchanged: 0/0
  5599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5600 ;;      Params:         0       0       0       0
  5601 ;;      Locals:         0       5       0       0
  5602 ;;      Temps:          0       2       0       0
  5603 ;;      Totals:         0       7       0       0
  5604 ;;Total ram usage:        7 bytes
  5605 ;; Hardware stack levels used:    1
  5606 ;; Hardware stack levels required when called:    6
  5607 ;; This function calls:
  5608 ;;		_getMain_All_Error_Status
  5609 ;;		_getMain_LightsStatus
  5610 ;;		_getMain_Lights_Count
  5611 ;;		_getMain_LoadOK
  5612 ;;		_setLoad_AH_AL_Restore
  5613 ;; This function is called by:
  5614 ;;		_main
  5615 ;; This function uses a non-reentrant model
  5616 ;;
  5617                           
  5618                           
  5619                           ;psect for function _Load_Main
  5620  020C                     _Load_Main:	
  5621                           
  5622                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
  5623                           
  5624                           ;incstack = 0
  5625                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5626  020C  1283               	bcf	3,5	;RP0=0, select bank0
  5627  020D  1303               	bcf	3,6	;RP1=0, select bank0
  5628  020E  01E4               	clrf	Load_Main@i
  5629  020F  01E0               	clrf	Load_Main@j
  5630  0210  3000               	movlw	0
  5631  0211  158A  270B  118A   	fcall	_getMain_All_Error_Status
  5632  0214  1283               	bcf	3,5	;RP0=0, select bank0
  5633  0215  1303               	bcf	3,6	;RP1=0, select bank0
  5634  0216  00DE               	movwf	??_Load_Main
  5635  0217  085E               	movf	??_Load_Main,w
  5636  0218  00E3               	movwf	Load_Main@error
  5637  0219  01E1               	clrf	Load_Main@adjgo
  5638                           
  5639                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
  5640  021A  1683               	bsf	3,5	;RP0=1, select bank1
  5641  021B  1303               	bcf	3,6	;RP1=0, select bank1
  5642  021C  1C4F               	btfss	_Load^(0+128),0
  5643  021D  2BDB               	goto	l731
  5644                           
  5645                           ;OverLoad_B1.c: 47: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
  5646  021E  1283               	bcf	3,5	;RP0=0, select bank0
  5647  021F  1303               	bcf	3,6	;RP1=0, select bank0
  5648  0220  01E2               	clrf	_Load_Main$2589
  5649  0221  158A  2671  118A   	fcall	_getMain_LightsStatus
  5650  0224  3A01               	xorlw	1
  5651  0225  1D03               	skipz
  5652  0226  2A31               	goto	l4602
  5653  0227  1283               	bcf	3,5	;RP0=0, select bank0
  5654  0228  1303               	bcf	3,6	;RP1=0, select bank0
  5655  0229  08E3               	movf	Load_Main@error,f
  5656  022A  1D03               	skipz
  5657  022B  2A31               	goto	l4602
  5658  022C  08E1               	movf	Load_Main@adjgo,f
  5659  022D  1D03               	skipz
  5660  022E  2A31               	goto	l4602
  5661  022F  01E2               	clrf	_Load_Main$2589
  5662  0230  0AE2               	incf	_Load_Main$2589,f
  5663  0231                     l4602:	
  5664  0231  1283               	bcf	3,5	;RP0=0, select bank0
  5665  0232  1303               	bcf	3,6	;RP1=0, select bank0
  5666  0233  0862               	movf	_Load_Main$2589,w
  5667  0234  1683               	bsf	3,5	;RP0=1, select bank1
  5668  0235  1303               	bcf	3,6	;RP1=0, select bank1
  5669  0236  10CF               	bcf	_Load^(0+128),1
  5670  0237  1D03               	skipz
  5671  0238  14CF               	bsf	_Load^(0+128),1
  5672                           
  5673                           ;OverLoad_B1.c: 48: if (getMain_LoadOK() == 1 && Load.Run == 0) {
  5674  0239  158A  246B  118A   	fcall	_getMain_LoadOK
  5675  023C  3A01               	xorlw	1
  5676  023D  1D03               	skipz
  5677  023E  2A45               	goto	l734
  5678  023F  1683               	bsf	3,5	;RP0=1, select bank1
  5679  0240  1303               	bcf	3,6	;RP1=0, select bank1
  5680  0241  19CF               	btfsc	_Load^(0+128),3
  5681  0242  2A45               	goto	l734
  5682                           
  5683                           ;OverLoad_B1.c: 49: Load.Run = 1;
  5684  0243  15CF               	bsf	_Load^(0+128),3
  5685                           
  5686                           ;OverLoad_B1.c: 50: Load.OK = 0;
  5687  0244  13CF               	bcf	_Load^(0+128),7
  5688  0245                     l734:	
  5689                           
  5690                           ;OverLoad_B1.c: 51: }
  5691                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
  5692  0245  1683               	bsf	3,5	;RP0=1, select bank1
  5693  0246  1303               	bcf	3,6	;RP1=0, select bank1
  5694  0247  1CCF               	btfss	_Load^(0+128),1
  5695  0248  2B80               	goto	l735
  5696                           
  5697                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
  5698  0249  154F               	bsf	_Load^(0+128),2
  5699                           
  5700                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
  5701  024A  1E4F               	btfss	_Load^(0+128),4
  5702  024B  2B7E               	goto	l736
  5703                           
  5704                           ;OverLoad_B1.c: 58: Load.Time++;
  5705  024C  3001               	movlw	1
  5706  024D  07D0               	addwf	(_Load^(0+128)+1),f
  5707  024E  1803               	skipnc
  5708  024F  0AD1               	incf	((_Load+1)^(0+128)+1),f
  5709  0250  3000               	movlw	0
  5710  0251  07D1               	addwf	((_Load+1)^(0+128)+1),f
  5711                           
  5712                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
  5713  0252  3000               	movlw	0
  5714  0253  0251               	subwf	((_Load+1)^(0+128)+1),w
  5715  0254  3005               	movlw	5
  5716  0255  1903               	skipnz
  5717  0256  0250               	subwf	(_Load^(0+128)+1),w
  5718  0257  1C03               	skipc
  5719  0258  0008               	return
  5720                           
  5721                           ;OverLoad_B1.c: 60: Load.Time = 0;
  5722  0259  01D0               	clrf	(_Load^(0+128)+1)
  5723  025A  01D1               	clrf	((_Load+1)^(0+128)+1)
  5724                           
  5725                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
  5726  025B  124F               	bcf	_Load^(0+128),4
  5727                           
  5728                           ;OverLoad_B1.c: 63: for (i = 0; i < 4; i++) {
  5729  025C  1283               	bcf	3,5	;RP0=0, select bank0
  5730  025D  1303               	bcf	3,6	;RP1=0, select bank0
  5731  025E  01E4               	clrf	Load_Main@i
  5732  025F  3004               	movlw	4
  5733  0260  0264               	subwf	Load_Main@i,w
  5734  0261  1803               	btfsc	3,0
  5735  0262  2A94               	goto	l4628
  5736  0263                     l4622:	
  5737                           
  5738                           ;OverLoad_B1.c: 64: Load.ADH += Load.AH[i];
  5739  0263  0864               	movf	Load_Main@i,w
  5740  0264  3ED9               	addlw	(_Load+10)& (0+255)
  5741  0265  0084               	movwf	4
  5742  0266  1383               	bcf	3,7	;select IRP bank1
  5743  0267  0800               	movf	0,w
  5744  0268  00DE               	movwf	??_Load_Main
  5745  0269  01DF               	clrf	??_Load_Main+1
  5746  026A  085E               	movf	??_Load_Main,w
  5747  026B  1683               	bsf	3,5	;RP0=1, select bank1
  5748  026C  1303               	bcf	3,6	;RP1=0, select bank1
  5749  026D  07D4               	addwf	(_Load^(0+128)+5),f
  5750  026E  1803               	skipnc
  5751  026F  0AD5               	incf	((_Load+1)^(0+128)+5),f
  5752  0270  1283               	bcf	3,5	;RP0=0, select bank0
  5753  0271  1303               	bcf	3,6	;RP1=0, select bank0
  5754  0272  085F               	movf	??_Load_Main+1,w
  5755  0273  1683               	bsf	3,5	;RP0=1, select bank1
  5756  0274  1303               	bcf	3,6	;RP1=0, select bank1
  5757  0275  07D5               	addwf	((_Load+1)^(0+128)+5),f
  5758                           
  5759                           ;OverLoad_B1.c: 65: Load.ADL += Load.AL[i];
  5760  0276  1283               	bcf	3,5	;RP0=0, select bank0
  5761  0277  1303               	bcf	3,6	;RP1=0, select bank0
  5762  0278  0864               	movf	Load_Main@i,w
  5763  0279  3EDE               	addlw	(_Load+15)& (0+255)
  5764  027A  0084               	movwf	4
  5765  027B  0800               	movf	0,w
  5766  027C  00DE               	movwf	??_Load_Main
  5767  027D  01DF               	clrf	??_Load_Main+1
  5768  027E  085E               	movf	??_Load_Main,w
  5769  027F  1683               	bsf	3,5	;RP0=1, select bank1
  5770  0280  1303               	bcf	3,6	;RP1=0, select bank1
  5771  0281  07D6               	addwf	(_Load^(0+128)+7),f
  5772  0282  1803               	skipnc
  5773  0283  0AD7               	incf	((_Load+1)^(0+128)+7),f
  5774  0284  1283               	bcf	3,5	;RP0=0, select bank0
  5775  0285  1303               	bcf	3,6	;RP1=0, select bank0
  5776  0286  085F               	movf	??_Load_Main+1,w
  5777  0287  1683               	bsf	3,5	;RP0=1, select bank1
  5778  0288  1303               	bcf	3,6	;RP1=0, select bank1
  5779  0289  07D7               	addwf	((_Load+1)^(0+128)+7),f
  5780  028A  3001               	movlw	1
  5781  028B  1283               	bcf	3,5	;RP0=0, select bank0
  5782  028C  1303               	bcf	3,6	;RP1=0, select bank0
  5783  028D  00DE               	movwf	??_Load_Main
  5784  028E  085E               	movf	??_Load_Main,w
  5785  028F  07E4               	addwf	Load_Main@i,f
  5786  0290  3004               	movlw	4
  5787  0291  0264               	subwf	Load_Main@i,w
  5788  0292  1C03               	skipc
  5789  0293  2A63               	goto	l4622
  5790  0294                     l4628:	
  5791                           
  5792                           ;OverLoad_B1.c: 66: }
  5793                           ;OverLoad_B1.c: 67: Load.ADH /= 4;
  5794  0294  3002               	movlw	2
  5795  0295  1683               	bsf	3,5	;RP0=1, select bank1
  5796  0296  1303               	bcf	3,6	;RP1=0, select bank1
  5797  0297                     u5095:	
  5798  0297  1003               	clrc
  5799  0298  0CD5               	rrf	((_Load+1)^(0+128)+5),f
  5800  0299  0CD4               	rrf	(_Load^(0+128)+5),f
  5801  029A  3EFF               	addlw	-1
  5802  029B  1D03               	skipz
  5803  029C  2A97               	goto	u5095
  5804                           
  5805                           ;OverLoad_B1.c: 68: Load.ADL /= 4;
  5806  029D  3002               	movlw	2
  5807  029E                     u5105:	
  5808  029E  1003               	clrc
  5809  029F  0CD7               	rrf	((_Load+1)^(0+128)+7),f
  5810  02A0  0CD6               	rrf	(_Load^(0+128)+7),f
  5811  02A1  3EFF               	addlw	-1
  5812  02A2  1D03               	skipz
  5813  02A3  2A9E               	goto	u5105
  5814                           
  5815                           ;OverLoad_B1.c: 69: setLoad_AH_AL_Restore();
  5816  02A4  158A  2537  118A   	fcall	_setLoad_AH_AL_Restore
  5817                           
  5818                           ;OverLoad_B1.c: 71: if (Load.ADH > Load.ADL) {
  5819  02A7  1683               	bsf	3,5	;RP0=1, select bank1
  5820  02A8  1303               	bcf	3,6	;RP1=0, select bank1
  5821  02A9  0855               	movf	((_Load+1)^(0+128)+5),w
  5822  02AA  0257               	subwf	((_Load+1)^(0+128)+7),w
  5823  02AB  1D03               	skipz
  5824  02AC  2AAF               	goto	u5115
  5825  02AD  0854               	movf	(_Load^(0+128)+5),w
  5826  02AE  0256               	subwf	(_Load^(0+128)+7),w
  5827  02AF                     u5115:	
  5828  02AF  1803               	skipnc
  5829  02B0  0008               	return
  5830                           
  5831                           ;OverLoad_B1.c: 72: Load.AD = Load.ADH - Load.ADL;
  5832  02B1  0356               	decf	(_Load^(0+128)+7),w
  5833  02B2  3AFF               	xorlw	255
  5834  02B3  0754               	addwf	(_Load^(0+128)+5),w
  5835  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  5836  02B5  1303               	bcf	3,6	;RP1=0, select bank0
  5837  02B6  00DE               	movwf	??_Load_Main
  5838  02B7  085E               	movf	??_Load_Main,w
  5839  02B8  1683               	bsf	3,5	;RP0=1, select bank1
  5840  02B9  1303               	bcf	3,6	;RP1=0, select bank1
  5841  02BA  00E3               	movwf	(_Load^(0+128)+20)
  5842                           
  5843                           ;OverLoad_B1.c: 73: Load.ADH = 0;
  5844  02BB  01D4               	clrf	(_Load^(0+128)+5)
  5845  02BC  01D5               	clrf	((_Load+1)^(0+128)+5)
  5846                           
  5847                           ;OverLoad_B1.c: 74: Load.ADL = 0;
  5848  02BD  01D6               	clrf	(_Load^(0+128)+7)
  5849  02BE  01D7               	clrf	((_Load+1)^(0+128)+7)
  5850                           
  5851                           ;OverLoad_B1.c: 75: Load.LightsCount = getMain_Lights_Count();
  5852  02BF  158A  248C  118A   	fcall	_getMain_Lights_Count
  5853  02C2  1283               	bcf	3,5	;RP0=0, select bank0
  5854  02C3  1303               	bcf	3,6	;RP1=0, select bank0
  5855  02C4  00DE               	movwf	??_Load_Main
  5856  02C5  085E               	movf	??_Load_Main,w
  5857  02C6  1683               	bsf	3,5	;RP0=1, select bank1
  5858  02C7  1303               	bcf	3,6	;RP1=0, select bank1
  5859  02C8  00ED               	movwf	(_Load^(0+128)+30)
  5860                           
  5861                           ;OverLoad_B1.c: 77: if (Load.Run == 1) {
  5862  02C9  1DCF               	btfss	_Load^(0+128),3
  5863  02CA  2AF0               	goto	l741
  5864                           
  5865                           ;OverLoad_B1.c: 78: if (Load.Count < 2) {
  5866  02CB  3002               	movlw	2
  5867  02CC  026B               	subwf	(_Load^(0+128)+28),w
  5868  02CD  1803               	skipnc
  5869  02CE  2AF0               	goto	l741
  5870                           
  5871                           ;OverLoad_B1.c: 79: Load.Count++;
  5872  02CF  3001               	movlw	1
  5873  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  5874  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  5875  02D2  00DE               	movwf	??_Load_Main
  5876  02D3  085E               	movf	??_Load_Main,w
  5877  02D4  1683               	bsf	3,5	;RP0=1, select bank1
  5878  02D5  1303               	bcf	3,6	;RP1=0, select bank1
  5879  02D6  07EB               	addwf	(_Load^(0+128)+28),f
  5880                           
  5881                           ;OverLoad_B1.c: 80: if (Load.Count == 1) {
  5882  02D7  086B               	movf	(_Load^(0+128)+28),w
  5883  02D8  3A01               	xorlw	1
  5884  02D9  1D03               	skipz
  5885  02DA  2ADD               	goto	l4652
  5886                           
  5887                           ;OverLoad_B1.c: 81: Load.JudgeValue = (20*12);
  5888  02DB  30F0               	movlw	240
  5889  02DC  2AE6               	goto	L18
  5890  02DD                     l4652:	
  5891                           ;OverLoad_B1.c: 82: } else if (Load.Count == 2) {
  5892                           
  5893  02DD  086B               	movf	(_Load^(0+128)+28),w
  5894  02DE  3A02               	xorlw	2
  5895  02DF  1D03               	skipz
  5896  02E0  2AF0               	goto	l741
  5897                           
  5898                           ;OverLoad_B1.c: 83: if (Load.LightsCount == 1) {
  5899  02E1  086D               	movf	(_Load^(0+128)+30),w
  5900  02E2  3A01               	xorlw	1
  5901  02E3  1D03               	skipz
  5902  02E4  2AE9               	goto	l4658
  5903                           
  5904                           ;OverLoad_B1.c: 84: Load.JudgeValue = (int)(7*12);
  5905  02E5  3054               	movlw	84
  5906  02E6                     L18:	
  5907  02E6  00E7               	movwf	(_Load^(0+128)+24)
  5908  02E7  3000               	movlw	0
  5909  02E8  2AEF               	goto	L19
  5910  02E9                     l4658:	
  5911                           ;OverLoad_B1.c: 85: } else {
  5912                           
  5913                           
  5914                           ;OverLoad_B1.c: 86: Load.JudgeValue = (int)(7*12) + Load.TotalLoad;
  5915  02E9  0858               	movf	(_Load^(0+128)+9),w
  5916  02EA  3E54               	addlw	84
  5917  02EB  00E7               	movwf	(_Load^(0+128)+24)
  5918  02EC  3000               	movlw	0
  5919  02ED  1803               	skipnc
  5920  02EE  3001               	movlw	1
  5921  02EF                     L19:	
  5922  02EF  00E8               	movwf	(_Load^(0+128)+25)
  5923  02F0                     l741:	
  5924                           
  5925                           ;OverLoad_B1.c: 87: }
  5926                           ;OverLoad_B1.c: 88: }
  5927                           ;OverLoad_B1.c: 89: }
  5928                           ;OverLoad_B1.c: 90: }
  5929                           ;OverLoad_B1.c: 92: if (Load.AD >= Load.JudgeValue) {
  5930  02F0  0863               	movf	(_Load^(0+128)+20),w
  5931  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  5932  02F2  1303               	bcf	3,6	;RP1=0, select bank0
  5933  02F3  00DE               	movwf	??_Load_Main
  5934  02F4  01DF               	clrf	??_Load_Main+1
  5935  02F5  1683               	bsf	3,5	;RP0=1, select bank1
  5936  02F6  1303               	bcf	3,6	;RP1=0, select bank1
  5937  02F7  0868               	movf	((_Load+1)^(0+128)+24),w
  5938  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  5939  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  5940  02FA  025F               	subwf	??_Load_Main+1,w
  5941  02FB  1D03               	skipz
  5942  02FC  2B03               	goto	u5175
  5943  02FD  1683               	bsf	3,5	;RP0=1, select bank1
  5944  02FE  1303               	bcf	3,6	;RP1=0, select bank1
  5945  02FF  0867               	movf	(_Load^(0+128)+24),w
  5946  0300  1283               	bcf	3,5	;RP0=0, select bank0
  5947  0301  1303               	bcf	3,6	;RP1=0, select bank0
  5948  0302  025E               	subwf	??_Load_Main,w
  5949  0303                     u5175:	
  5950  0303  1C03               	skipc
  5951  0304  2B38               	goto	l4680
  5952                           
  5953                           ;OverLoad_B1.c: 93: Load.ErrorCount++;
  5954  0305  3001               	movlw	1
  5955  0306  00DE               	movwf	??_Load_Main
  5956  0307  085E               	movf	??_Load_Main,w
  5957  0308  1683               	bsf	3,5	;RP0=1, select bank1
  5958  0309  1303               	bcf	3,6	;RP1=0, select bank1
  5959  030A  07EC               	addwf	(_Load^(0+128)+29),f
  5960                           
  5961                           ;OverLoad_B1.c: 94: if (Load.ErrorCount > 2) {
  5962  030B  3003               	movlw	3
  5963  030C  026C               	subwf	(_Load^(0+128)+29),w
  5964  030D  1C03               	skipc
  5965  030E  0008               	return
  5966                           
  5967                           ;OverLoad_B1.c: 95: Load.ErrorCount = 0;
  5968  030F  01EC               	clrf	(_Load^(0+128)+29)
  5969                           
  5970                           ;OverLoad_B1.c: 96: Load.ERROR = 1;
  5971  0310  16CF               	bsf	_Load^(0+128),5
  5972                           
  5973                           ;OverLoad_B1.c: 105: UART.Data[0] = (Load.AD >> 8);
  5974  0311  1283               	bcf	3,5	;RP0=0, select bank0
  5975  0312  1303               	bcf	3,6	;RP1=0, select bank0
  5976  0313  01B6               	clrf	_UART
  5977                           
  5978                           ;OverLoad_B1.c: 106: UART.Data[1] = Load.AD;
  5979  0314  1683               	bsf	3,5	;RP0=1, select bank1
  5980  0315  1303               	bcf	3,6	;RP1=0, select bank1
  5981  0316  0863               	movf	(_Load^(0+128)+20),w
  5982  0317  1283               	bcf	3,5	;RP0=0, select bank0
  5983  0318  1303               	bcf	3,6	;RP1=0, select bank0
  5984  0319  00DE               	movwf	??_Load_Main
  5985  031A  085E               	movf	??_Load_Main,w
  5986  031B  00B7               	movwf	_UART+1
  5987                           
  5988                           ;OverLoad_B1.c: 107: UART.Data[2] = (Load.JudgeValue >> 8);
  5989  031C  1683               	bsf	3,5	;RP0=1, select bank1
  5990  031D  1303               	bcf	3,6	;RP1=0, select bank1
  5991  031E  0868               	movf	((_Load+1)^(0+128)+24),w
  5992  031F  1283               	bcf	3,5	;RP0=0, select bank0
  5993  0320  1303               	bcf	3,6	;RP1=0, select bank0
  5994  0321  00DE               	movwf	??_Load_Main
  5995  0322  085E               	movf	??_Load_Main,w
  5996  0323  00B8               	movwf	_UART+2
  5997                           
  5998                           ;OverLoad_B1.c: 108: UART.Data[3] = Load.JudgeValue;
  5999  0324  1683               	bsf	3,5	;RP0=1, select bank1
  6000  0325  1303               	bcf	3,6	;RP1=0, select bank1
  6001  0326  0867               	movf	(_Load^(0+128)+24),w
  6002  0327  1283               	bcf	3,5	;RP0=0, select bank0
  6003  0328  1303               	bcf	3,6	;RP1=0, select bank0
  6004  0329  00DE               	movwf	??_Load_Main
  6005  032A  085E               	movf	??_Load_Main,w
  6006  032B  00B9               	movwf	_UART+3
  6007                           
  6008                           ;OverLoad_B1.c: 109: UART.Data[4] = Load.LightsCount;
  6009  032C  1683               	bsf	3,5	;RP0=1, select bank1
  6010  032D  1303               	bcf	3,6	;RP1=0, select bank1
  6011  032E  086D               	movf	(_Load^(0+128)+30),w
  6012  032F  1283               	bcf	3,5	;RP0=0, select bank0
  6013  0330  1303               	bcf	3,6	;RP1=0, select bank0
  6014  0331  00DE               	movwf	??_Load_Main
  6015  0332  085E               	movf	??_Load_Main,w
  6016  0333  00BA               	movwf	_UART+4
  6017                           
  6018                           ;OverLoad_B1.c: 110: UART.Data[5] = 0;
  6019  0334  01BB               	clrf	_UART+5
  6020                           
  6021                           ;OverLoad_B1.c: 111: UART.Data[6] = 0;
  6022  0335  01BC               	clrf	_UART+6
  6023                           
  6024                           ;OverLoad_B1.c: 112: UART.Data[7] = 0;
  6025  0336  01BD               	clrf	_UART+7
  6026                           
  6027                           ;OverLoad_B1.c: 122: }
  6028                           ;OverLoad_B1.c: 123: } else {
  6029  0337  0008               	return
  6030  0338                     l4680:	
  6031                           
  6032                           ;OverLoad_B1.c: 124: Load.ErrorCount = 0;
  6033  0338  1683               	bsf	3,5	;RP0=1, select bank1
  6034  0339  1303               	bcf	3,6	;RP1=0, select bank1
  6035  033A  01EC               	clrf	(_Load^(0+128)+29)
  6036                           
  6037                           ;OverLoad_B1.c: 125: if (Load.Run == 1) {
  6038  033B  1DCF               	btfss	_Load^(0+128),3
  6039  033C  0008               	return
  6040                           
  6041                           ;OverLoad_B1.c: 126: if (Load.OK == 0) {
  6042  033D  1BCF               	btfsc	_Load^(0+128),7
  6043  033E  0008               	return
  6044                           
  6045                           ;OverLoad_B1.c: 127: Load.SafeCount++;
  6046  033F  3001               	movlw	1
  6047  0340  1283               	bcf	3,5	;RP0=0, select bank0
  6048  0341  1303               	bcf	3,6	;RP1=0, select bank0
  6049  0342  00DE               	movwf	??_Load_Main
  6050  0343  085E               	movf	??_Load_Main,w
  6051  0344  1683               	bsf	3,5	;RP0=1, select bank1
  6052  0345  1303               	bcf	3,6	;RP1=0, select bank1
  6053  0346  07EE               	addwf	(_Load^(0+128)+31),f
  6054                           
  6055                           ;OverLoad_B1.c: 128: if (Load.SafeCount >= 3) {
  6056  0347  3003               	movlw	3
  6057  0348  026E               	subwf	(_Load^(0+128)+31),w
  6058  0349  1C03               	skipc
  6059  034A  0008               	return
  6060                           
  6061                           ;OverLoad_B1.c: 129: Load.SafeCount = 0;
  6062  034B  01EE               	clrf	(_Load^(0+128)+31)
  6063                           
  6064                           ;OverLoad_B1.c: 130: Load.OK = 1;
  6065  034C  17CF               	bsf	_Load^(0+128),7
  6066                           
  6067                           ;OverLoad_B1.c: 131: Load.Run = 0;
  6068  034D  11CF               	bcf	_Load^(0+128),3
  6069                           
  6070                           ;OverLoad_B1.c: 132: Load.Count = 0;
  6071  034E  01EB               	clrf	(_Load^(0+128)+28)
  6072                           
  6073                           ;OverLoad_B1.c: 133: Load.TotalLoad = Load.AD;
  6074  034F  0863               	movf	(_Load^(0+128)+20),w
  6075  0350  1283               	bcf	3,5	;RP0=0, select bank0
  6076  0351  1303               	bcf	3,6	;RP1=0, select bank0
  6077  0352  00DE               	movwf	??_Load_Main
  6078  0353  085E               	movf	??_Load_Main,w
  6079  0354  1683               	bsf	3,5	;RP0=1, select bank1
  6080  0355  1303               	bcf	3,6	;RP1=0, select bank1
  6081  0356  00D8               	movwf	(_Load^(0+128)+9)
  6082                           
  6083                           ;OverLoad_B1.c: 139: UART.Data[0] = (Load.AD >> 8);
  6084  0357  1283               	bcf	3,5	;RP0=0, select bank0
  6085  0358  1303               	bcf	3,6	;RP1=0, select bank0
  6086  0359  01B6               	clrf	_UART
  6087                           
  6088                           ;OverLoad_B1.c: 140: UART.Data[1] = Load.AD;
  6089  035A  1683               	bsf	3,5	;RP0=1, select bank1
  6090  035B  1303               	bcf	3,6	;RP1=0, select bank1
  6091  035C  0863               	movf	(_Load^(0+128)+20),w
  6092  035D  1283               	bcf	3,5	;RP0=0, select bank0
  6093  035E  1303               	bcf	3,6	;RP1=0, select bank0
  6094  035F  00DE               	movwf	??_Load_Main
  6095  0360  085E               	movf	??_Load_Main,w
  6096  0361  00B7               	movwf	_UART+1
  6097                           
  6098                           ;OverLoad_B1.c: 141: UART.Data[2] = (Load.JudgeValue >> 8);
  6099  0362  1683               	bsf	3,5	;RP0=1, select bank1
  6100  0363  1303               	bcf	3,6	;RP1=0, select bank1
  6101  0364  0868               	movf	((_Load+1)^(0+128)+24),w
  6102  0365  1283               	bcf	3,5	;RP0=0, select bank0
  6103  0366  1303               	bcf	3,6	;RP1=0, select bank0
  6104  0367  00DE               	movwf	??_Load_Main
  6105  0368  085E               	movf	??_Load_Main,w
  6106  0369  00B8               	movwf	_UART+2
  6107                           
  6108                           ;OverLoad_B1.c: 142: UART.Data[3] = Load.JudgeValue;
  6109  036A  1683               	bsf	3,5	;RP0=1, select bank1
  6110  036B  1303               	bcf	3,6	;RP1=0, select bank1
  6111  036C  0867               	movf	(_Load^(0+128)+24),w
  6112  036D  1283               	bcf	3,5	;RP0=0, select bank0
  6113  036E  1303               	bcf	3,6	;RP1=0, select bank0
  6114  036F  00DE               	movwf	??_Load_Main
  6115  0370  085E               	movf	??_Load_Main,w
  6116  0371  00B9               	movwf	_UART+3
  6117                           
  6118                           ;OverLoad_B1.c: 143: UART.Data[4] = Load.LightsCount;
  6119  0372  1683               	bsf	3,5	;RP0=1, select bank1
  6120  0373  1303               	bcf	3,6	;RP1=0, select bank1
  6121  0374  086D               	movf	(_Load^(0+128)+30),w
  6122  0375  1283               	bcf	3,5	;RP0=0, select bank0
  6123  0376  1303               	bcf	3,6	;RP1=0, select bank0
  6124  0377  00DE               	movwf	??_Load_Main
  6125  0378  085E               	movf	??_Load_Main,w
  6126  0379  00BA               	movwf	_UART+4
  6127                           
  6128                           ;OverLoad_B1.c: 144: UART.Data[5] = 0;
  6129  037A  01BB               	clrf	_UART+5
  6130                           
  6131                           ;OverLoad_B1.c: 145: UART.Data[6] = 0;
  6132  037B  01BC               	clrf	_UART+6
  6133                           
  6134                           ;OverLoad_B1.c: 146: UART.Data[7] = 0;
  6135  037C  01BD               	clrf	_UART+7
  6136                           
  6137                           ;OverLoad_B1.c: 157: }
  6138                           ;OverLoad_B1.c: 158: }
  6139                           ;OverLoad_B1.c: 159: }
  6140                           ;OverLoad_B1.c: 160: }
  6141                           ;OverLoad_B1.c: 161: }
  6142                           ;OverLoad_B1.c: 162: }
  6143                           ;OverLoad_B1.c: 163: } else {
  6144  037D  0008               	return
  6145  037E                     l736:	
  6146                           
  6147                           ;OverLoad_B1.c: 164: Load.ADtoGO = 1;
  6148  037E  164F               	bsf	_Load^(0+128),4
  6149                           
  6150                           ;OverLoad_B1.c: 165: }
  6151                           ;OverLoad_B1.c: 166: } else {
  6152  037F  0008               	return
  6153  0380                     l735:	
  6154                           
  6155                           ;OverLoad_B1.c: 167: if (Load.LightsON == 1 && error != 3) {
  6156  0380  1D4F               	btfss	_Load^(0+128),2
  6157  0381  2BC6               	goto	l4752
  6158  0382  1283               	bcf	3,5	;RP0=0, select bank0
  6159  0383  1303               	bcf	3,6	;RP1=0, select bank0
  6160  0384  0863               	movf	Load_Main@error,w
  6161  0385  3A03               	xorlw	3
  6162  0386  1903               	skipnz
  6163  0387  2BC6               	goto	l4752
  6164                           
  6165                           ;OverLoad_B1.c: 168: Load.LightsON = 0;
  6166  0388  1683               	bsf	3,5	;RP0=1, select bank1
  6167  0389  1303               	bcf	3,6	;RP1=0, select bank1
  6168  038A  114F               	bcf	_Load^(0+128),2
  6169                           
  6170                           ;OverLoad_B1.c: 170: Load.Time = 0;
  6171  038B  01D0               	clrf	(_Load^(0+128)+1)
  6172  038C  01D1               	clrf	((_Load+1)^(0+128)+1)
  6173                           
  6174                           ;OverLoad_B1.c: 171: Load.ADtoGO = 0;
  6175  038D  124F               	bcf	_Load^(0+128),4
  6176                           
  6177                           ;OverLoad_B1.c: 172: setLoad_AH_AL_Restore();
  6178  038E  158A  2537  118A   	fcall	_setLoad_AH_AL_Restore
  6179                           
  6180                           ;OverLoad_B1.c: 173: Load.Count = 0;
  6181  0391  1683               	bsf	3,5	;RP0=1, select bank1
  6182  0392  1303               	bcf	3,6	;RP1=0, select bank1
  6183  0393  01EB               	clrf	(_Load^(0+128)+28)
  6184                           
  6185                           ;OverLoad_B1.c: 174: Load.ErrorCount = 0;
  6186  0394  01EC               	clrf	(_Load^(0+128)+29)
  6187                           
  6188                           ;OverLoad_B1.c: 175: Load.SafeCount = 0;
  6189  0395  01EE               	clrf	(_Load^(0+128)+31)
  6190                           
  6191                           ;OverLoad_B1.c: 177: Load.ADH = 0;
  6192  0396  01D4               	clrf	(_Load^(0+128)+5)
  6193  0397  01D5               	clrf	((_Load+1)^(0+128)+5)
  6194                           
  6195                           ;OverLoad_B1.c: 178: Load.ADL = 0;
  6196  0398  01D6               	clrf	(_Load^(0+128)+7)
  6197  0399  01D7               	clrf	((_Load+1)^(0+128)+7)
  6198                           
  6199                           ;OverLoad_B1.c: 179: Load.AD = 0;
  6200  039A  01E3               	clrf	(_Load^(0+128)+20)
  6201                           
  6202                           ;OverLoad_B1.c: 180: Load.JudgeValue = 0;
  6203  039B  01E7               	clrf	(_Load^(0+128)+24)
  6204  039C  01E8               	clrf	((_Load+1)^(0+128)+24)
  6205                           
  6206                           ;OverLoad_B1.c: 181: Load.LightsCount = 0;
  6207  039D  01ED               	clrf	(_Load^(0+128)+30)
  6208                           
  6209                           ;OverLoad_B1.c: 182: Load.Run = 0;
  6210  039E  11CF               	bcf	_Load^(0+128),3
  6211                           
  6212                           ;OverLoad_B1.c: 183: Load.OK = 1;
  6213  039F  17CF               	bsf	_Load^(0+128),7
  6214                           
  6215                           ;OverLoad_B1.c: 187: UART.Data[0] = (Load.AD >> 8);
  6216  03A0  1283               	bcf	3,5	;RP0=0, select bank0
  6217  03A1  1303               	bcf	3,6	;RP1=0, select bank0
  6218  03A2  01B6               	clrf	_UART
  6219                           
  6220                           ;OverLoad_B1.c: 188: UART.Data[1] = Load.AD;
  6221  03A3  1683               	bsf	3,5	;RP0=1, select bank1
  6222  03A4  1303               	bcf	3,6	;RP1=0, select bank1
  6223  03A5  0863               	movf	(_Load^(0+128)+20),w
  6224  03A6  1283               	bcf	3,5	;RP0=0, select bank0
  6225  03A7  1303               	bcf	3,6	;RP1=0, select bank0
  6226  03A8  00DE               	movwf	??_Load_Main
  6227  03A9  085E               	movf	??_Load_Main,w
  6228  03AA  00B7               	movwf	_UART+1
  6229                           
  6230                           ;OverLoad_B1.c: 189: UART.Data[2] = (Load.JudgeValue >> 8);
  6231  03AB  1683               	bsf	3,5	;RP0=1, select bank1
  6232  03AC  1303               	bcf	3,6	;RP1=0, select bank1
  6233  03AD  0868               	movf	((_Load+1)^(0+128)+24),w
  6234  03AE  1283               	bcf	3,5	;RP0=0, select bank0
  6235  03AF  1303               	bcf	3,6	;RP1=0, select bank0
  6236  03B0  00DE               	movwf	??_Load_Main
  6237  03B1  085E               	movf	??_Load_Main,w
  6238  03B2  00B8               	movwf	_UART+2
  6239                           
  6240                           ;OverLoad_B1.c: 190: UART.Data[3] = Load.JudgeValue;
  6241  03B3  1683               	bsf	3,5	;RP0=1, select bank1
  6242  03B4  1303               	bcf	3,6	;RP1=0, select bank1
  6243  03B5  0867               	movf	(_Load^(0+128)+24),w
  6244  03B6  1283               	bcf	3,5	;RP0=0, select bank0
  6245  03B7  1303               	bcf	3,6	;RP1=0, select bank0
  6246  03B8  00DE               	movwf	??_Load_Main
  6247  03B9  085E               	movf	??_Load_Main,w
  6248  03BA  00B9               	movwf	_UART+3
  6249                           
  6250                           ;OverLoad_B1.c: 191: UART.Data[4] = Load.LightsCount;
  6251  03BB  1683               	bsf	3,5	;RP0=1, select bank1
  6252  03BC  1303               	bcf	3,6	;RP1=0, select bank1
  6253  03BD  086D               	movf	(_Load^(0+128)+30),w
  6254  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  6255  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  6256  03C0  00DE               	movwf	??_Load_Main
  6257  03C1  085E               	movf	??_Load_Main,w
  6258  03C2  00BA               	movwf	_UART+4
  6259                           
  6260                           ;OverLoad_B1.c: 192: UART.Data[5] = 0;
  6261  03C3  01BB               	clrf	_UART+5
  6262                           
  6263                           ;OverLoad_B1.c: 193: UART.Data[6] = 0;
  6264  03C4  01BC               	clrf	_UART+6
  6265                           
  6266                           ;OverLoad_B1.c: 194: UART.Data[7] = 0;
  6267  03C5  01BD               	clrf	_UART+7
  6268  03C6                     l4752:	
  6269                           
  6270                           ;OverLoad_B1.c: 204: }
  6271                           ;OverLoad_B1.c: 205: if (Load.ERROR == 1) {
  6272  03C6  1683               	bsf	3,5	;RP0=1, select bank1
  6273  03C7  1303               	bcf	3,6	;RP1=0, select bank1
  6274  03C8  1ECF               	btfss	_Load^(0+128),5
  6275  03C9  0008               	return
  6276                           
  6277                           ;OverLoad_B1.c: 206: Load.ErrorTime++;
  6278  03CA  3001               	movlw	1
  6279  03CB  07D2               	addwf	(_Load^(0+128)+3),f
  6280  03CC  1803               	skipnc
  6281  03CD  0AD3               	incf	((_Load+1)^(0+128)+3),f
  6282  03CE  3000               	movlw	0
  6283  03CF  07D3               	addwf	((_Load+1)^(0+128)+3),f
  6284                           
  6285                           ;OverLoad_B1.c: 207: if (Load.ErrorTime >= 1000) {
  6286  03D0  3003               	movlw	3
  6287  03D1  0253               	subwf	((_Load+1)^(0+128)+3),w
  6288  03D2  30E8               	movlw	232
  6289  03D3  1903               	skipnz
  6290  03D4  0252               	subwf	(_Load^(0+128)+3),w
  6291  03D5  1C03               	skipc
  6292  03D6  0008               	return
  6293                           
  6294                           ;OverLoad_B1.c: 208: Load.ErrorTime = 0;
  6295  03D7  01D2               	clrf	(_Load^(0+128)+3)
  6296  03D8  01D3               	clrf	((_Load+1)^(0+128)+3)
  6297                           
  6298                           ;OverLoad_B1.c: 215: Load.ERROR = 0;
  6299  03D9  12CF               	bcf	_Load^(0+128),5
  6300                           
  6301                           ;OverLoad_B1.c: 216: }
  6302                           ;OverLoad_B1.c: 217: }
  6303                           ;OverLoad_B1.c: 218: }
  6304                           ;OverLoad_B1.c: 219: } else {
  6305  03DA  0008               	return
  6306  03DB                     l731:	
  6307                           
  6308                           ;OverLoad_B1.c: 220: if (myMain.PowerON == 1) {
  6309  03DB  1283               	bcf	3,5	;RP0=0, select bank0
  6310  03DC  1303               	bcf	3,6	;RP1=0, select bank0
  6311  03DD  1C20               	btfss	_myMain,0
  6312  03DE  0008               	return
  6313                           
  6314                           ;OverLoad_B1.c: 221: Load.Enable = 1;
  6315  03DF  1683               	bsf	3,5	;RP0=1, select bank1
  6316  03E0  1303               	bcf	3,6	;RP1=0, select bank1
  6317  03E1  144F               	bsf	_Load^(0+128),0
  6318  03E2  0008               	return
  6319  03E3                     __end_of_Load_Main:	
  6320                           
  6321                           	psect	text31
  6322  0C6B                     __ptext31:	
  6323 ;; *************** function _getMain_LoadOK *****************
  6324 ;; Defined at:
  6325 ;;		line 447 in file "../src/Main_B1.c"
  6326 ;; Parameters:    Size  Location     Type
  6327 ;;		None
  6328 ;; Auto vars:     Size  Location     Type
  6329 ;;  ok              1    2[BANK0 ] unsigned char 
  6330 ;; Return value:  Size  Location     Type
  6331 ;;                  1    wreg      unsigned char 
  6332 ;; Registers used:
  6333 ;;		wreg, status,2, pclath, cstack
  6334 ;; Tracked objects:
  6335 ;;		On entry : 0/0
  6336 ;;		On exit  : 0/0
  6337 ;;		Unchanged: 0/0
  6338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6339 ;;      Params:         0       0       0       0
  6340 ;;      Locals:         0       1       0       0
  6341 ;;      Temps:          0       1       0       0
  6342 ;;      Totals:         0       2       0       0
  6343 ;;Total ram usage:        2 bytes
  6344 ;; Hardware stack levels used:    1
  6345 ;; Hardware stack levels required when called:    4
  6346 ;; This function calls:
  6347 ;;		_getLightsControl_OK
  6348 ;; This function is called by:
  6349 ;;		_Load_Main
  6350 ;; This function uses a non-reentrant model
  6351 ;;
  6352                           
  6353                           
  6354                           ;psect for function _getMain_LoadOK
  6355  0C6B                     _getMain_LoadOK:	
  6356                           
  6357                           ;Main_B1.c: 448: char ok = 0;
  6358                           
  6359                           ;incstack = 0
  6360                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
  6361  0C6B  1283               	bcf	3,5	;RP0=0, select bank0
  6362  0C6C  1303               	bcf	3,6	;RP1=0, select bank0
  6363  0C6D  01D7               	clrf	getMain_LoadOK@ok
  6364                           
  6365                           ;Main_B1.c: 451: ok = getLightsControl_OK() == 1 ? 1 : 0;
  6366  0C6E  158A  23F1         	fcall	_getLightsControl_OK
  6367  0C70  3A01               	xorlw	1
  6368  0C71  3000               	movlw	0
  6369  0C72  1903               	skipnz
  6370  0C73  3001               	movlw	1
  6371  0C74  1283               	bcf	3,5	;RP0=0, select bank0
  6372  0C75  1303               	bcf	3,6	;RP1=0, select bank0
  6373  0C76  00D6               	movwf	??_getMain_LoadOK
  6374  0C77  0856               	movf	??_getMain_LoadOK,w
  6375  0C78  00D7               	movwf	getMain_LoadOK@ok
  6376                           
  6377                           ;Main_B1.c: 456: return ok;
  6378  0C79  0857               	movf	getMain_LoadOK@ok,w
  6379  0C7A  0008               	return
  6380  0C7B                     __end_of_getMain_LoadOK:	
  6381                           
  6382                           	psect	text32
  6383  0BF1                     __ptext32:	
  6384 ;; *************** function _getLightsControl_OK *****************
  6385 ;; Defined at:
  6386 ;;		line 260 in file "../src/TriacRelay_B1.c"
  6387 ;; Parameters:    Size  Location     Type
  6388 ;;		None
  6389 ;; Auto vars:     Size  Location     Type
  6390 ;;  loadok          1    0[BANK0 ] unsigned char 
  6391 ;; Return value:  Size  Location     Type
  6392 ;;                  1    wreg      unsigned char 
  6393 ;; Registers used:
  6394 ;;		wreg, status,2
  6395 ;; Tracked objects:
  6396 ;;		On entry : 0/0
  6397 ;;		On exit  : 0/0
  6398 ;;		Unchanged: 0/0
  6399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6400 ;;      Params:         0       0       0       0
  6401 ;;      Locals:         0       1       0       0
  6402 ;;      Temps:          0       0       0       0
  6403 ;;      Totals:         0       1       0       0
  6404 ;;Total ram usage:        1 bytes
  6405 ;; Hardware stack levels used:    1
  6406 ;; Hardware stack levels required when called:    3
  6407 ;; This function calls:
  6408 ;;		Nothing
  6409 ;; This function is called by:
  6410 ;;		_getMain_LoadOK
  6411 ;; This function uses a non-reentrant model
  6412 ;;
  6413                           
  6414                           
  6415                           ;psect for function _getLightsControl_OK
  6416  0BF1                     _getLightsControl_OK:	
  6417                           
  6418                           ;TriacRelay_B1.c: 261: char loadok = LightsControl.LoadOK == 1 ? 1 : 0;
  6419                           
  6420                           ;incstack = 0
  6421                           ; Regs used in _getLightsControl_OK: [wreg+status,2]
  6422  0BF1  3000               	movlw	0
  6423  0BF2  1283               	bcf	3,5	;RP0=0, select bank0
  6424  0BF3  1303               	bcf	3,6	;RP1=0, select bank0
  6425  0BF4  1935               	btfsc	_LightsControl,2
  6426  0BF5  3001               	movlw	1
  6427  0BF6  00D5               	movwf	getLightsControl_OK@loadok
  6428                           
  6429                           ;TriacRelay_B1.c: 262: return loadok;
  6430  0BF7  0855               	movf	getLightsControl_OK@loadok,w
  6431  0BF8  0008               	return
  6432  0BF9                     __end_of_getLightsControl_OK:	
  6433                           
  6434                           	psect	text33
  6435  0C8C                     __ptext33:	
  6436 ;; *************** function _getMain_Lights_Count *****************
  6437 ;; Defined at:
  6438 ;;		line 417 in file "../src/Main_B1.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;		None
  6441 ;; Auto vars:     Size  Location     Type
  6442 ;;  status1         1    4[BANK0 ] unsigned char 
  6443 ;;  status3         1    3[BANK0 ] unsigned char 
  6444 ;;  status2         1    2[BANK0 ] unsigned char 
  6445 ;;  count           1    1[BANK0 ] unsigned char 
  6446 ;; Return value:  Size  Location     Type
  6447 ;;                  1    wreg      unsigned char 
  6448 ;; Registers used:
  6449 ;;		wreg, status,2, status,0
  6450 ;; Tracked objects:
  6451 ;;		On entry : 0/0
  6452 ;;		On exit  : 0/0
  6453 ;;		Unchanged: 0/0
  6454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6455 ;;      Params:         0       0       0       0
  6456 ;;      Locals:         0       4       0       0
  6457 ;;      Temps:          0       1       0       0
  6458 ;;      Totals:         0       5       0       0
  6459 ;;Total ram usage:        5 bytes
  6460 ;; Hardware stack levels used:    1
  6461 ;; Hardware stack levels required when called:    3
  6462 ;; This function calls:
  6463 ;;		Nothing
  6464 ;; This function is called by:
  6465 ;;		_Load_Main
  6466 ;; This function uses a non-reentrant model
  6467 ;;
  6468                           
  6469                           
  6470                           ;psect for function _getMain_Lights_Count
  6471  0C8C                     _getMain_Lights_Count:	
  6472                           
  6473                           ;Main_B1.c: 418: char status1 = 0, status2 = 0, status3 = 0, count = 0;
  6474                           
  6475                           ;incstack = 0
  6476                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
  6477  0C8C  1283               	bcf	3,5	;RP0=0, select bank0
  6478  0C8D  1303               	bcf	3,6	;RP1=0, select bank0
  6479  0C8E  01D9               	clrf	getMain_Lights_Count@status1
  6480  0C8F  01D7               	clrf	getMain_Lights_Count@status2
  6481  0C90  01D8               	clrf	getMain_Lights_Count@status3
  6482  0C91  01D6               	clrf	getMain_Lights_Count@count
  6483                           
  6484                           ;Main_B1.c: 434: status1 = Lights1.Loop == 1 ? 1 : 0;
  6485  0C92  3000               	movlw	0
  6486  0C93  18C3               	btfsc	_Lights1+1,1
  6487  0C94  3001               	movlw	1
  6488  0C95  00D9               	movwf	getMain_Lights_Count@status1
  6489                           
  6490                           ;Main_B1.c: 443: return count = (status1 + status2 + status3);
  6491  0C96  0857               	movf	getMain_Lights_Count@status2,w
  6492  0C97  0759               	addwf	getMain_Lights_Count@status1,w
  6493  0C98  00D5               	movwf	??_getMain_Lights_Count
  6494  0C99  0858               	movf	getMain_Lights_Count@status3,w
  6495  0C9A  0755               	addwf	??_getMain_Lights_Count,w
  6496  0C9B  00D6               	movwf	getMain_Lights_Count@count
  6497  0C9C  0008               	return
  6498  0C9D                     __end_of_getMain_Lights_Count:	
  6499                           
  6500                           	psect	text34
  6501  0BCF                     __ptext34:	
  6502 ;; *************** function _Load_Initialization *****************
  6503 ;; Defined at:
  6504 ;;		line 9 in file "../src/OverLoad_B1.c"
  6505 ;; Parameters:    Size  Location     Type
  6506 ;;		None
  6507 ;; Auto vars:     Size  Location     Type
  6508 ;;		None
  6509 ;; Return value:  Size  Location     Type
  6510 ;;		None               void
  6511 ;; Registers used:
  6512 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6513 ;; Tracked objects:
  6514 ;;		On entry : 0/0
  6515 ;;		On exit  : 0/0
  6516 ;;		Unchanged: 0/0
  6517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6518 ;;      Params:         0       0       0       0
  6519 ;;      Locals:         0       0       0       0
  6520 ;;      Temps:          0       0       0       0
  6521 ;;      Totals:         0       0       0       0
  6522 ;;Total ram usage:        0 bytes
  6523 ;; Hardware stack levels used:    1
  6524 ;; Hardware stack levels required when called:    4
  6525 ;; This function calls:
  6526 ;;		_setLoad_AH_AL_Restore
  6527 ;; This function is called by:
  6528 ;;		_main
  6529 ;; This function uses a non-reentrant model
  6530 ;;
  6531                           
  6532                           
  6533                           ;psect for function _Load_Initialization
  6534  0BCF                     _Load_Initialization:	
  6535                           
  6536                           ;OverLoad_B1.c: 10: Load.OK = 1;
  6537                           
  6538                           ;incstack = 0
  6539                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6540  0BCF  1683               	bsf	3,5	;RP0=1, select bank1
  6541  0BD0  1303               	bcf	3,6	;RP1=0, select bank1
  6542  0BD1  17CF               	bsf	_Load^(0+128),7
  6543                           
  6544                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  6545  0BD2  158A  2537         	fcall	_setLoad_AH_AL_Restore
  6546  0BD4  0008               	return
  6547  0BD5                     __end_of_Load_Initialization:	
  6548                           
  6549                           	psect	text35
  6550  0D37                     __ptext35:	
  6551 ;; *************** function _setLoad_AH_AL_Restore *****************
  6552 ;; Defined at:
  6553 ;;		line 248 in file "../src/OverLoad_B1.c"
  6554 ;; Parameters:    Size  Location     Type
  6555 ;;		None
  6556 ;; Auto vars:     Size  Location     Type
  6557 ;;  i               1    1[BANK0 ] unsigned char 
  6558 ;; Return value:  Size  Location     Type
  6559 ;;		None               void
  6560 ;; Registers used:
  6561 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6562 ;; Tracked objects:
  6563 ;;		On entry : 0/0
  6564 ;;		On exit  : 0/0
  6565 ;;		Unchanged: 0/0
  6566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6567 ;;      Params:         0       0       0       0
  6568 ;;      Locals:         0       1       0       0
  6569 ;;      Temps:          0       1       0       0
  6570 ;;      Totals:         0       2       0       0
  6571 ;;Total ram usage:        2 bytes
  6572 ;; Hardware stack levels used:    1
  6573 ;; Hardware stack levels required when called:    3
  6574 ;; This function calls:
  6575 ;;		Nothing
  6576 ;; This function is called by:
  6577 ;;		_Load_Initialization
  6578 ;;		_Load_Main
  6579 ;; This function uses a non-reentrant model
  6580 ;;
  6581                           
  6582                           
  6583                           ;psect for function _setLoad_AH_AL_Restore
  6584  0D37                     _setLoad_AH_AL_Restore:	
  6585                           
  6586                           ;OverLoad_B1.c: 249: char i;
  6587                           ;OverLoad_B1.c: 250: for (i = 0; i < 5; i++) {
  6588                           
  6589                           ;incstack = 0
  6590                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  6591  0D37  1283               	bcf	3,5	;RP0=0, select bank0
  6592  0D38  1303               	bcf	3,6	;RP1=0, select bank0
  6593  0D39  01D6               	clrf	setLoad_AH_AL_Restore@i
  6594  0D3A                     L20:	
  6595  0D3A  3005               	movlw	5
  6596  0D3B  0256               	subwf	setLoad_AH_AL_Restore@i,w
  6597  0D3C  1803               	btfsc	3,0
  6598  0D3D  0008               	return
  6599                           
  6600                           ;OverLoad_B1.c: 251: Load.AH[i] = 0;
  6601  0D3E  0856               	movf	setLoad_AH_AL_Restore@i,w
  6602  0D3F  3ED9               	addlw	(_Load+10)& (0+255)
  6603  0D40  0084               	movwf	4
  6604  0D41  1383               	bcf	3,7	;select IRP bank1
  6605  0D42  0180               	clrf	0
  6606                           
  6607                           ;OverLoad_B1.c: 252: Load.AL[i] = 0xff;
  6608  0D43  30FF               	movlw	255
  6609  0D44  00D5               	movwf	??_setLoad_AH_AL_Restore
  6610  0D45  0856               	movf	setLoad_AH_AL_Restore@i,w
  6611  0D46  3EDE               	addlw	(_Load+15)& (0+255)
  6612  0D47  0084               	movwf	4
  6613  0D48  0855               	movf	??_setLoad_AH_AL_Restore,w
  6614  0D49  0080               	movwf	0
  6615  0D4A  3001               	movlw	1
  6616  0D4B  00D5               	movwf	??_setLoad_AH_AL_Restore
  6617  0D4C  0855               	movf	??_setLoad_AH_AL_Restore,w
  6618  0D4D  07D6               	addwf	setLoad_AH_AL_Restore@i,f
  6619  0D4E  2D3A               	goto	L20
  6620  0D4F                     __end_of_setLoad_AH_AL_Restore:	
  6621                           
  6622                           	psect	text36
  6623  0F46                     __ptext36:	
  6624 ;; *************** function _Lights_Main *****************
  6625 ;; Defined at:
  6626 ;;		line 54 in file "../src/TriacRelay_B1.c"
  6627 ;; Parameters:    Size  Location     Type
  6628 ;;		None
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;		None
  6631 ;; Return value:  Size  Location     Type
  6632 ;;		None               void
  6633 ;; Registers used:
  6634 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6635 ;; Tracked objects:
  6636 ;;		On entry : 0/0
  6637 ;;		On exit  : 0/0
  6638 ;;		Unchanged: 0/0
  6639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6640 ;;      Params:         0       0       0       0
  6641 ;;      Locals:         0       2       0       0
  6642 ;;      Temps:          0       3       0       0
  6643 ;;      Totals:         0       5       0       0
  6644 ;;Total ram usage:        5 bytes
  6645 ;; Hardware stack levels used:    1
  6646 ;; Hardware stack levels required when called:    7
  6647 ;; This function calls:
  6648 ;;		_Lights_Close
  6649 ;;		_Lights_Control
  6650 ;;		_getLoad_OK
  6651 ;;		_getMain_All_Error_Status
  6652 ;;		_getMain_LightsStatus
  6653 ;;		_setLights_Main
  6654 ;; This function is called by:
  6655 ;;		_main
  6656 ;; This function uses a non-reentrant model
  6657 ;;
  6658                           
  6659                           
  6660                           ;psect for function _Lights_Main
  6661  0F46                     _Lights_Main:	
  6662                           
  6663                           ;TriacRelay_B1.c: 57: if (getMain_All_Error_Status(0) == 0) {
  6664                           
  6665                           ;incstack = 0
  6666                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6667  0F46  3000               	movlw	0
  6668  0F47  158A  270B  158A   	fcall	_getMain_All_Error_Status
  6669  0F4A  3800               	iorlw	0
  6670  0F4B  1D03               	skipz
  6671  0F4C  2F73               	goto	l1147
  6672                           
  6673                           ;TriacRelay_B1.c: 58: if (LightsControl.LoadOK == 1) {
  6674  0F4D  1283               	bcf	3,5	;RP0=0, select bank0
  6675  0F4E  1303               	bcf	3,6	;RP1=0, select bank0
  6676  0F4F  1D35               	btfss	_LightsControl,2
  6677  0F50  2F76               	goto	l4776
  6678                           
  6679                           ;TriacRelay_B1.c: 59: LightsControl.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus()
      +                           == 0 ? 0 : LightsControl.LoadOK;
  6680  0F51  158A  2411  158A   	fcall	_getLoad_OK
  6681  0F54  3A01               	xorlw	1
  6682  0F55  1903               	skipnz
  6683  0F56  2F6A               	goto	l4772
  6684  0F57  158A  2671  158A   	fcall	_getMain_LightsStatus
  6685  0F5A  3A00               	xorlw	0
  6686  0F5B  1903               	skipnz
  6687  0F5C  2F6A               	goto	l4772
  6688  0F5D  1283               	bcf	3,5	;RP0=0, select bank0
  6689  0F5E  1303               	bcf	3,6	;RP1=0, select bank0
  6690  0F5F  0C35               	rrf	_LightsControl,w
  6691  0F60  00E1               	movwf	??_Lights_Main
  6692  0F61  0C61               	rrf	??_Lights_Main,w
  6693  0F62  3901               	andlw	1
  6694  0F63  00E2               	movwf	??_Lights_Main+1
  6695  0F64  01E3               	clrf	??_Lights_Main+2
  6696  0F65  0862               	movf	??_Lights_Main+1,w
  6697  0F66  00E4               	movwf	_Lights_Main$4467
  6698  0F67  0863               	movf	??_Lights_Main+2,w
  6699  0F68  00E5               	movwf	_Lights_Main$4467+1
  6700  0F69  2F6E               	goto	l4774
  6701  0F6A                     l4772:	
  6702  0F6A  1283               	bcf	3,5	;RP0=0, select bank0
  6703  0F6B  1303               	bcf	3,6	;RP1=0, select bank0
  6704  0F6C  01E4               	clrf	_Lights_Main$4467
  6705  0F6D  01E5               	clrf	_Lights_Main$4467+1
  6706  0F6E                     l4774:	
  6707  0F6E  0864               	movf	_Lights_Main$4467,w
  6708  0F6F  1135               	bcf	_LightsControl,2
  6709  0F70  1D03               	skipz
  6710  0F71  1535               	bsf	_LightsControl,2
  6711                           
  6712                           ;TriacRelay_B1.c: 60: }
  6713                           ;TriacRelay_B1.c: 61: } else {
  6714  0F72  2F76               	goto	l4776
  6715  0F73                     l1147:	
  6716                           
  6717                           ;TriacRelay_B1.c: 62: LightsControl.LoadOK = 0;
  6718  0F73  1283               	bcf	3,5	;RP0=0, select bank0
  6719  0F74  1303               	bcf	3,6	;RP1=0, select bank0
  6720  0F75  1135               	bcf	_LightsControl,2
  6721  0F76                     l4776:	
  6722                           
  6723                           ;TriacRelay_B1.c: 63: }
  6724                           ;TriacRelay_B1.c: 67: setLights_Main(1);
  6725  0F76  3001               	movlw	1
  6726  0F77  158A  261F  158A   	fcall	_setLights_Main
  6727                           
  6728                           ;TriacRelay_B1.c: 68: Lights_Control(1);
  6729  0F7A  3001               	movlw	1
  6730  0F7B  118A  2670  158A   	fcall	_Lights_Control
  6731                           
  6732                           ;TriacRelay_B1.c: 81: Lights_Close();
  6733  0F7E  158A  250D         	fcall	_Lights_Close
  6734  0F80  0008               	return
  6735  0F81                     __end_of_Lights_Main:	
  6736                           
  6737                           	psect	text37
  6738  0E1F                     __ptext37:	
  6739 ;; *************** function _setLights_Main *****************
  6740 ;; Defined at:
  6741 ;;		line 93 in file "../src/TriacRelay_B1.c"
  6742 ;; Parameters:    Size  Location     Type
  6743 ;;  lights          1    wreg     unsigned char 
  6744 ;; Auto vars:     Size  Location     Type
  6745 ;;  lights          1   11[BANK0 ] unsigned char 
  6746 ;; Return value:  Size  Location     Type
  6747 ;;		None               void
  6748 ;; Registers used:
  6749 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6750 ;; Tracked objects:
  6751 ;;		On entry : 0/0
  6752 ;;		On exit  : 0/0
  6753 ;;		Unchanged: 0/0
  6754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6755 ;;      Params:         0       0       0       0
  6756 ;;      Locals:         0       1       0       0
  6757 ;;      Temps:          0       0       0       0
  6758 ;;      Totals:         0       1       0       0
  6759 ;;Total ram usage:        1 bytes
  6760 ;; Hardware stack levels used:    1
  6761 ;; Hardware stack levels required when called:    6
  6762 ;; This function calls:
  6763 ;;		_LightsPointSelect
  6764 ;;		_setLights
  6765 ;; This function is called by:
  6766 ;;		_Lights_Main
  6767 ;; This function uses a non-reentrant model
  6768 ;;
  6769                           
  6770                           
  6771                           ;psect for function _setLights_Main
  6772  0E1F                     _setLights_Main:	
  6773                           
  6774                           ;incstack = 0
  6775                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6776                           ;setLights_Main@lights stored from wreg
  6777  0E1F  1283               	bcf	3,5	;RP0=0, select bank0
  6778  0E20  1303               	bcf	3,6	;RP1=0, select bank0
  6779  0E21  00E0               	movwf	setLights_Main@lights
  6780                           
  6781                           ;TriacRelay_B1.c: 94: LightsPointSelect(lights);
  6782  0E22  0860               	movf	setLights_Main@lights,w
  6783  0E23  158A  2427  158A   	fcall	_LightsPointSelect
  6784                           
  6785                           ;TriacRelay_B1.c: 95: if (Lights->GO == 0) {
  6786  0E26  1283               	bcf	3,5	;RP0=0, select bank0
  6787  0E27  1303               	bcf	3,6	;RP1=0, select bank0
  6788  0E28  0834               	movf	_Lights,w
  6789  0E29  0084               	movwf	4
  6790  0E2A  1383               	bcf	3,7	;select IRP bank0
  6791  0E2B  1880               	btfsc	0,1
  6792  0E2C  0008               	return
  6793                           
  6794                           ;TriacRelay_B1.c: 96: if (Lights->Trigger == 1) {
  6795  0E2D  0834               	movf	_Lights,w
  6796  0E2E  0084               	movwf	4
  6797  0E2F  1D80               	btfss	0,3
  6798  0E30  0008               	return
  6799                           
  6800                           ;TriacRelay_B1.c: 97: if (LightsControl.LoadOK == 0) {
  6801  0E31  1935               	btfsc	_LightsControl,2
  6802  0E32  0008               	return
  6803                           
  6804                           ;TriacRelay_B1.c: 98: Lights->Trigger = 0;
  6805  0E33  0834               	movf	_Lights,w
  6806  0E34  0084               	movwf	4
  6807  0E35  1180               	bcf	0,3
  6808                           
  6809                           ;TriacRelay_B1.c: 100: if (Lights->Switch == 1) {
  6810  0E36  0834               	movf	_Lights,w
  6811  0E37  0084               	movwf	4
  6812  0E38  1E00               	btfss	0,4
  6813  0E39  2E40               	goto	l4388
  6814                           
  6815                           ;TriacRelay_B1.c: 101: setLights(lights, 1);
  6816  0E3A  01DD               	clrf	setLights@status
  6817  0E3B  0ADD               	incf	setLights@status,f
  6818  0E3C  0860               	movf	setLights_Main@lights,w
  6819  0E3D  118A  26DD         	fcall	_setLights
  6820                           
  6821                           ;TriacRelay_B1.c: 102: } else {
  6822  0E3F  0008               	return
  6823  0E40                     l4388:	
  6824                           
  6825                           ;TriacRelay_B1.c: 103: setLights(lights, 0);
  6826  0E40  1283               	bcf	3,5	;RP0=0, select bank0
  6827  0E41  1303               	bcf	3,6	;RP1=0, select bank0
  6828  0E42  01DD               	clrf	setLights@status
  6829  0E43  0860               	movf	setLights_Main@lights,w
  6830  0E44  118A  26DD         	fcall	_setLights
  6831  0E46  0008               	return
  6832  0E47                     __end_of_setLights_Main:	
  6833                           
  6834                           	psect	text38
  6835  06DD                     __ptext38:	
  6836 ;; *************** function _setLights *****************
  6837 ;; Defined at:
  6838 ;;		line 111 in file "../src/TriacRelay_B1.c"
  6839 ;; Parameters:    Size  Location     Type
  6840 ;;  lights          1    wreg     unsigned char 
  6841 ;;  status          1    8[BANK0 ] unsigned char 
  6842 ;; Auto vars:     Size  Location     Type
  6843 ;;  lights          1   10[BANK0 ] unsigned char 
  6844 ;; Return value:  Size  Location     Type
  6845 ;;		None               void
  6846 ;; Registers used:
  6847 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6848 ;; Tracked objects:
  6849 ;;		On entry : 0/0
  6850 ;;		On exit  : 0/0
  6851 ;;		Unchanged: 0/0
  6852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6853 ;;      Params:         0       1       0       0
  6854 ;;      Locals:         0       1       0       0
  6855 ;;      Temps:          0       1       0       0
  6856 ;;      Totals:         0       3       0       0
  6857 ;;Total ram usage:        3 bytes
  6858 ;; Hardware stack levels used:    1
  6859 ;; Hardware stack levels required when called:    5
  6860 ;; This function calls:
  6861 ;;		_LightsPointSelect
  6862 ;;		_getMain_All_Error_Status
  6863 ;;		_setLights_Line
  6864 ;; This function is called by:
  6865 ;;		_setLights_Main
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           
  6870                           ;psect for function _setLights
  6871  06DD                     _setLights:	
  6872                           
  6873                           ;incstack = 0
  6874                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6875                           ;setLights@lights stored from wreg
  6876  06DD  1283               	bcf	3,5	;RP0=0, select bank0
  6877  06DE  1303               	bcf	3,6	;RP1=0, select bank0
  6878  06DF  00DF               	movwf	setLights@lights
  6879                           
  6880                           ;TriacRelay_B1.c: 113: LightsPointSelect(lights);
  6881  06E0  085F               	movf	setLights@lights,w
  6882  06E1  158A  2427  118A   	fcall	_LightsPointSelect
  6883                           
  6884                           ;TriacRelay_B1.c: 116: LightsControl.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
  6885  06E4  3000               	movlw	0
  6886  06E5  158A  270B  118A   	fcall	_getMain_All_Error_Status
  6887  06E8  3A00               	xorlw	0
  6888  06E9  3000               	movlw	0
  6889  06EA  1903               	skipnz
  6890  06EB  3001               	movlw	1
  6891  06EC  1283               	bcf	3,5	;RP0=0, select bank0
  6892  06ED  1303               	bcf	3,6	;RP1=0, select bank0
  6893  06EE  00DE               	movwf	??_setLights
  6894  06EF  0DDE               	rlf	??_setLights,f
  6895  06F0  0DDE               	rlf	??_setLights,f
  6896  06F1  0835               	movf	_LightsControl,w
  6897  06F2  065E               	xorwf	??_setLights,w
  6898  06F3  39FB               	andlw	-5
  6899  06F4  065E               	xorwf	??_setLights,w
  6900  06F5  00B5               	movwf	_LightsControl
  6901                           
  6902                           ;TriacRelay_B1.c: 120: Lights->GO = 1;
  6903  06F6  0834               	movf	_Lights,w
  6904  06F7  0084               	movwf	4
  6905  06F8  1383               	bcf	3,7	;select IRP bank0
  6906  06F9  1480               	bsf	0,1
  6907                           
  6908                           ;TriacRelay_B1.c: 121: if (status == 1) {
  6909  06FA  085D               	movf	setLights@status,w
  6910  06FB  3A01               	xorlw	1
  6911  06FC  1D03               	skipz
  6912  06FD  2F1B               	goto	l4202
  6913                           
  6914                           ;TriacRelay_B1.c: 122: if (Lights->Status == 0) {
  6915  06FE  0834               	movf	_Lights,w
  6916  06FF  0084               	movwf	4
  6917  0700  1900               	btfsc	0,2
  6918  0701  2F36               	goto	l4206
  6919                           
  6920                           ;TriacRelay_B1.c: 123: Lights->Status = 1;
  6921  0702  0834               	movf	_Lights,w
  6922  0703  0084               	movwf	4
  6923  0704  1500               	bsf	0,2
  6924                           
  6925                           ;TriacRelay_B1.c: 124: Lights->Loop = 1;
  6926  0705  0A34               	incf	_Lights,w
  6927  0706  0084               	movwf	4
  6928  0707  1480               	bsf	0,1
  6929                           
  6930                           ;TriacRelay_B1.c: 125: Lights->RelayValue = 10;
  6931  0708  300A               	movlw	10
  6932  0709  00DE               	movwf	??_setLights
  6933  070A  0834               	movf	_Lights,w
  6934  070B  3E06               	addlw	6
  6935  070C  0084               	movwf	4
  6936  070D  085E               	movf	??_setLights,w
  6937  070E  0080               	movwf	0
  6938                           
  6939                           ;TriacRelay_B1.c: 126: Lights->TriacValue = 13;
  6940  070F  300D               	movlw	13
  6941  0710  00DE               	movwf	??_setLights
  6942  0711  0834               	movf	_Lights,w
  6943  0712  3E04               	addlw	4
  6944  0713  0084               	movwf	4
  6945  0714  085E               	movf	??_setLights,w
  6946  0715  0080               	movwf	0
  6947                           
  6948                           ;TriacRelay_B1.c: 127: setLights_Line(lights);
  6949  0716  085F               	movf	setLights@lights,w
  6950  0717  158A  2433  118A   	fcall	_setLights_Line
  6951                           
  6952                           ;TriacRelay_B1.c: 128: }
  6953                           ;TriacRelay_B1.c: 129: } else {
  6954  071A  2F36               	goto	l4206
  6955  071B                     l4202:	
  6956                           
  6957                           ;TriacRelay_B1.c: 130: if (Lights->Status == 1) {
  6958  071B  1283               	bcf	3,5	;RP0=0, select bank0
  6959  071C  1303               	bcf	3,6	;RP1=0, select bank0
  6960  071D  0834               	movf	_Lights,w
  6961  071E  0084               	movwf	4
  6962  071F  1383               	bcf	3,7	;select IRP bank0
  6963  0720  1D00               	btfss	0,2
  6964  0721  2F36               	goto	l4206
  6965                           
  6966                           ;TriacRelay_B1.c: 131: Lights->Status = 0;
  6967  0722  0834               	movf	_Lights,w
  6968  0723  0084               	movwf	4
  6969  0724  1100               	bcf	0,2
  6970                           
  6971                           ;TriacRelay_B1.c: 132: Lights->Loop = 0;
  6972  0725  0A34               	incf	_Lights,w
  6973  0726  0084               	movwf	4
  6974  0727  1080               	bcf	0,1
  6975                           
  6976                           ;TriacRelay_B1.c: 133: Lights->RelayValue = 4;
  6977  0728  3004               	movlw	4
  6978  0729  00DE               	movwf	??_setLights
  6979  072A  0834               	movf	_Lights,w
  6980  072B  3E06               	addlw	6
  6981  072C  0084               	movwf	4
  6982  072D  085E               	movf	??_setLights,w
  6983  072E  0080               	movwf	0
  6984                           
  6985                           ;TriacRelay_B1.c: 134: Lights->TriacValue = 7;
  6986  072F  3007               	movlw	7
  6987  0730  00DE               	movwf	??_setLights
  6988  0731  0834               	movf	_Lights,w
  6989  0732  3E04               	addlw	4
  6990  0733  0084               	movwf	4
  6991  0734  085E               	movf	??_setLights,w
  6992  0735  0080               	movwf	0
  6993  0736                     l4206:	
  6994                           
  6995                           ;TriacRelay_B1.c: 135: }
  6996                           ;TriacRelay_B1.c: 136: }
  6997                           ;TriacRelay_B1.c: 138: if (lights == 1) {
  6998  0736  1283               	bcf	3,5	;RP0=0, select bank0
  6999  0737  1303               	bcf	3,6	;RP1=0, select bank0
  7000  0738  085F               	movf	setLights@lights,w
  7001  0739  3A01               	xorlw	1
  7002  073A  1D03               	skipz
  7003  073B  0008               	return
  7004                           
  7005                           ;TriacRelay_B1.c: 139: RB2 = 1;
  7006  073C  1506               	bsf	6,2	;volatile
  7007  073D  0008               	return
  7008  073E                     __end_of_setLights:	
  7009                           
  7010                           	psect	text39
  7011  0C33                     __ptext39:	
  7012 ;; *************** function _setLights_Line *****************
  7013 ;; Defined at:
  7014 ;;		line 221 in file "../src/TriacRelay_B1.c"
  7015 ;; Parameters:    Size  Location     Type
  7016 ;;  lights          1    wreg     unsigned char 
  7017 ;; Auto vars:     Size  Location     Type
  7018 ;;  lights          1    2[BANK0 ] unsigned char 
  7019 ;; Return value:  Size  Location     Type
  7020 ;;		None               void
  7021 ;; Registers used:
  7022 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7023 ;; Tracked objects:
  7024 ;;		On entry : 0/0
  7025 ;;		On exit  : 0/0
  7026 ;;		Unchanged: 0/0
  7027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7028 ;;      Params:         0       0       0       0
  7029 ;;      Locals:         0       1       0       0
  7030 ;;      Temps:          0       0       0       0
  7031 ;;      Totals:         0       1       0       0
  7032 ;;Total ram usage:        1 bytes
  7033 ;; Hardware stack levels used:    1
  7034 ;; Hardware stack levels required when called:    4
  7035 ;; This function calls:
  7036 ;;		_LightsPointSelect
  7037 ;; This function is called by:
  7038 ;;		_setLights
  7039 ;; This function uses a non-reentrant model
  7040 ;;
  7041                           
  7042                           
  7043                           ;psect for function _setLights_Line
  7044  0C33                     _setLights_Line:	
  7045                           
  7046                           ;incstack = 0
  7047                           ; Regs used in _setLights_Line: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7048                           ;setLights_Line@lights stored from wreg
  7049  0C33  1283               	bcf	3,5	;RP0=0, select bank0
  7050  0C34  1303               	bcf	3,6	;RP1=0, select bank0
  7051  0C35  00D7               	movwf	setLights_Line@lights
  7052                           
  7053                           ;TriacRelay_B1.c: 223: Lights1.Line = 0;
  7054  0C36  1043               	bcf	_Lights1+1,0
  7055                           
  7056                           ;TriacRelay_B1.c: 231: LightsPointSelect(lights);
  7057  0C37  0857               	movf	setLights_Line@lights,w
  7058  0C38  158A  2427         	fcall	_LightsPointSelect
  7059                           
  7060                           ;TriacRelay_B1.c: 232: Lights->Line = 1;
  7061  0C3A  1283               	bcf	3,5	;RP0=0, select bank0
  7062  0C3B  1303               	bcf	3,6	;RP1=0, select bank0
  7063  0C3C  0A34               	incf	_Lights,w
  7064  0C3D  0084               	movwf	4
  7065  0C3E  1383               	bcf	3,7	;select IRP bank0
  7066  0C3F  1400               	bsf	0,0
  7067  0C40  0008               	return
  7068  0C41                     __end_of_setLights_Line:	
  7069                           
  7070                           	psect	text40
  7071  0F0B                     __ptext40:	
  7072 ;; *************** function _getMain_All_Error_Status *****************
  7073 ;; Defined at:
  7074 ;;		line 376 in file "../src/Main_B1.c"
  7075 ;; Parameters:    Size  Location     Type
  7076 ;;  command         1    wreg     unsigned char 
  7077 ;; Auto vars:     Size  Location     Type
  7078 ;;  command         1    6[BANK0 ] unsigned char 
  7079 ;;  status          1    7[BANK0 ] unsigned char 
  7080 ;; Return value:  Size  Location     Type
  7081 ;;                  1    wreg      unsigned char 
  7082 ;; Registers used:
  7083 ;;		wreg, status,2, status,0, pclath, cstack
  7084 ;; Tracked objects:
  7085 ;;		On entry : 0/0
  7086 ;;		On exit  : 0/0
  7087 ;;		Unchanged: 0/0
  7088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7089 ;;      Params:         0       0       0       0
  7090 ;;      Locals:         0       6       0       0
  7091 ;;      Temps:          0       1       0       0
  7092 ;;      Totals:         0       7       0       0
  7093 ;;Total ram usage:        7 bytes
  7094 ;; Hardware stack levels used:    1
  7095 ;; Hardware stack levels required when called:    4
  7096 ;; This function calls:
  7097 ;;		_getCDS_Status
  7098 ;; This function is called by:
  7099 ;;		_Load_Main
  7100 ;;		_PIR_Main
  7101 ;;		_Lights_Main
  7102 ;;		_setLights
  7103 ;; This function uses a non-reentrant model
  7104 ;;
  7105                           
  7106                           
  7107                           ;psect for function _getMain_All_Error_Status
  7108  0F0B                     _getMain_All_Error_Status:	
  7109                           
  7110                           ;incstack = 0
  7111                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0+pclath+cstack]
  7112                           ;getMain_All_Error_Status@command stored from wreg
  7113  0F0B  1283               	bcf	3,5	;RP0=0, select bank0
  7114  0F0C  1303               	bcf	3,6	;RP1=0, select bank0
  7115  0F0D  00DB               	movwf	getMain_All_Error_Status@command
  7116                           
  7117                           ;Main_B1.c: 377: char status = 0;
  7118  0F0E  01DC               	clrf	getMain_All_Error_Status@status
  7119                           
  7120                           ;Main_B1.c: 395: if (status == 0 && command != 3) {
  7121  0F0F  08DC               	movf	getMain_All_Error_Status@status,f
  7122  0F10  1D03               	skipz
  7123  0F11  2F28               	goto	l4044
  7124  0F12  085B               	movf	getMain_All_Error_Status@command,w
  7125  0F13  3A03               	xorlw	3
  7126  0F14  1903               	skipnz
  7127  0F15  2F28               	goto	l4044
  7128                           
  7129                           ;Main_B1.c: 396: status = Load.ERROR == 1 ? 3 : 0;
  7130  0F16  1683               	bsf	3,5	;RP0=1, select bank1
  7131  0F17  1303               	bcf	3,6	;RP1=0, select bank1
  7132  0F18  1ACF               	btfsc	_Load^(0+128),5
  7133  0F19  2F1F               	goto	l4042
  7134  0F1A  1283               	bcf	3,5	;RP0=0, select bank0
  7135  0F1B  1303               	bcf	3,6	;RP1=0, select bank0
  7136  0F1C  01D7               	clrf	_getMain_All_Error_Status$2328
  7137  0F1D  01D8               	clrf	_getMain_All_Error_Status$2328+1
  7138  0F1E  2F24               	goto	l658
  7139  0F1F                     l4042:	
  7140  0F1F  3003               	movlw	3
  7141  0F20  1283               	bcf	3,5	;RP0=0, select bank0
  7142  0F21  00D7               	movwf	_getMain_All_Error_Status$2328
  7143  0F22  3000               	movlw	0
  7144  0F23  00D8               	movwf	_getMain_All_Error_Status$2328+1
  7145  0F24                     l658:	
  7146  0F24  0857               	movf	_getMain_All_Error_Status$2328,w
  7147  0F25  00D6               	movwf	??_getMain_All_Error_Status
  7148  0F26  0856               	movf	??_getMain_All_Error_Status,w
  7149  0F27  00DC               	movwf	getMain_All_Error_Status@status
  7150  0F28                     l4044:	
  7151                           
  7152                           ;Main_B1.c: 397: }
  7153                           ;Main_B1.c: 409: if (status == 0 && command != 5) {
  7154  0F28  08DC               	movf	getMain_All_Error_Status@status,f
  7155  0F29  1D03               	skipz
  7156  0F2A  2F44               	goto	l659
  7157  0F2B  085B               	movf	getMain_All_Error_Status@command,w
  7158  0F2C  3A05               	xorlw	5
  7159  0F2D  1903               	skipnz
  7160  0F2E  2F44               	goto	l659
  7161                           
  7162                           ;Main_B1.c: 410: status = getCDS_Status() == 0 ? 5 : 0;
  7163  0F2F  158A  23E9  158A   	fcall	_getCDS_Status
  7164  0F32  3A00               	xorlw	0
  7165  0F33  1903               	skipnz
  7166  0F34  2F3A               	goto	l4052
  7167  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  7168  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  7169  0F37  01D9               	clrf	_getMain_All_Error_Status$2330
  7170  0F38  01DA               	clrf	_getMain_All_Error_Status$2330+1
  7171  0F39  2F40               	goto	l663
  7172  0F3A                     l4052:	
  7173  0F3A  3005               	movlw	5
  7174  0F3B  1283               	bcf	3,5	;RP0=0, select bank0
  7175  0F3C  1303               	bcf	3,6	;RP1=0, select bank0
  7176  0F3D  00D9               	movwf	_getMain_All_Error_Status$2330
  7177  0F3E  3000               	movlw	0
  7178  0F3F  00DA               	movwf	_getMain_All_Error_Status$2330+1
  7179  0F40                     l663:	
  7180  0F40  0859               	movf	_getMain_All_Error_Status$2330,w
  7181  0F41  00D6               	movwf	??_getMain_All_Error_Status
  7182  0F42  0856               	movf	??_getMain_All_Error_Status,w
  7183  0F43  00DC               	movwf	getMain_All_Error_Status@status
  7184  0F44                     l659:	
  7185                           
  7186                           ;Main_B1.c: 411: }
  7187                           ;Main_B1.c: 413: return status;
  7188  0F44  085C               	movf	getMain_All_Error_Status@status,w
  7189  0F45  0008               	return
  7190  0F46                     __end_of_getMain_All_Error_Status:	
  7191                           
  7192                           	psect	text41
  7193  0BE9                     __ptext41:	
  7194 ;; *************** function _getCDS_Status *****************
  7195 ;; Defined at:
  7196 ;;		line 40 in file "../src/CDS_B1.c"
  7197 ;; Parameters:    Size  Location     Type
  7198 ;;		None
  7199 ;; Auto vars:     Size  Location     Type
  7200 ;;  status          1    0[BANK0 ] unsigned char 
  7201 ;; Return value:  Size  Location     Type
  7202 ;;                  1    wreg      unsigned char 
  7203 ;; Registers used:
  7204 ;;		wreg, status,2
  7205 ;; Tracked objects:
  7206 ;;		On entry : 0/0
  7207 ;;		On exit  : 0/0
  7208 ;;		Unchanged: 0/0
  7209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7210 ;;      Params:         0       0       0       0
  7211 ;;      Locals:         0       1       0       0
  7212 ;;      Temps:          0       0       0       0
  7213 ;;      Totals:         0       1       0       0
  7214 ;;Total ram usage:        1 bytes
  7215 ;; Hardware stack levels used:    1
  7216 ;; Hardware stack levels required when called:    3
  7217 ;; This function calls:
  7218 ;;		Nothing
  7219 ;; This function is called by:
  7220 ;;		_getMain_All_Error_Status
  7221 ;; This function uses a non-reentrant model
  7222 ;;
  7223                           
  7224                           
  7225                           ;psect for function _getCDS_Status
  7226  0BE9                     _getCDS_Status:	
  7227                           
  7228                           ;CDS_B1.c: 41: char status = _CDS.Status == 1 ? 1 : 0;
  7229                           
  7230                           ;incstack = 0
  7231                           ; Regs used in _getCDS_Status: [wreg+status,2]
  7232  0BE9  3000               	movlw	0
  7233  0BEA  1283               	bcf	3,5	;RP0=0, select bank0
  7234  0BEB  1303               	bcf	3,6	;RP1=0, select bank0
  7235  0BEC  1A27               	btfsc	__CDS,4
  7236  0BED  3001               	movlw	1
  7237  0BEE  00D5               	movwf	getCDS_Status@status
  7238                           
  7239                           ;CDS_B1.c: 42: return status;
  7240  0BEF  0855               	movf	getCDS_Status@status,w
  7241  0BF0  0008               	return
  7242  0BF1                     __end_of_getCDS_Status:	
  7243                           
  7244                           	psect	text42
  7245  0C11                     __ptext42:	
  7246 ;; *************** function _getLoad_OK *****************
  7247 ;; Defined at:
  7248 ;;		line 228 in file "../src/OverLoad_B1.c"
  7249 ;; Parameters:    Size  Location     Type
  7250 ;;		None
  7251 ;; Auto vars:     Size  Location     Type
  7252 ;;  ok              1    0[BANK0 ] unsigned char 
  7253 ;; Return value:  Size  Location     Type
  7254 ;;                  1    wreg      unsigned char 
  7255 ;; Registers used:
  7256 ;;		wreg, status,2
  7257 ;; Tracked objects:
  7258 ;;		On entry : 0/0
  7259 ;;		On exit  : 0/0
  7260 ;;		Unchanged: 0/0
  7261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7262 ;;      Params:         0       0       0       0
  7263 ;;      Locals:         0       1       0       0
  7264 ;;      Temps:          0       0       0       0
  7265 ;;      Totals:         0       1       0       0
  7266 ;;Total ram usage:        1 bytes
  7267 ;; Hardware stack levels used:    1
  7268 ;; Hardware stack levels required when called:    3
  7269 ;; This function calls:
  7270 ;;		Nothing
  7271 ;; This function is called by:
  7272 ;;		_Lights_Main
  7273 ;; This function uses a non-reentrant model
  7274 ;;
  7275                           
  7276                           
  7277                           ;psect for function _getLoad_OK
  7278  0C11                     _getLoad_OK:	
  7279                           
  7280                           ;OverLoad_B1.c: 229: char ok = Load.OK == 1 ? 1 : 0;
  7281                           
  7282                           ;incstack = 0
  7283                           ; Regs used in _getLoad_OK: [wreg+status,2]
  7284  0C11  3000               	movlw	0
  7285  0C12  1683               	bsf	3,5	;RP0=1, select bank1
  7286  0C13  1303               	bcf	3,6	;RP1=0, select bank1
  7287  0C14  1BCF               	btfsc	_Load^(0+128),7
  7288  0C15  3001               	movlw	1
  7289  0C16  1283               	bcf	3,5	;RP0=0, select bank0
  7290  0C17  1303               	bcf	3,6	;RP1=0, select bank0
  7291  0C18  00D5               	movwf	getLoad_OK@ok
  7292                           
  7293                           ;OverLoad_B1.c: 230: return ok;
  7294  0C19  0855               	movf	getLoad_OK@ok,w
  7295  0C1A  0008               	return
  7296  0C1B                     __end_of_getLoad_OK:	
  7297                           
  7298                           	psect	text43
  7299  0670                     __ptext43:	
  7300 ;; *************** function _Lights_Control *****************
  7301 ;; Defined at:
  7302 ;;		line 155 in file "../src/TriacRelay_B1.c"
  7303 ;; Parameters:    Size  Location     Type
  7304 ;;  lights          1    wreg     unsigned char 
  7305 ;; Auto vars:     Size  Location     Type
  7306 ;;  lights          1    6[BANK0 ] unsigned char 
  7307 ;; Return value:  Size  Location     Type
  7308 ;;		None               void
  7309 ;; Registers used:
  7310 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7311 ;; Tracked objects:
  7312 ;;		On entry : 0/0
  7313 ;;		On exit  : 0/0
  7314 ;;		Unchanged: 0/0
  7315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7316 ;;      Params:         0       0       0       0
  7317 ;;      Locals:         0       3       0       0
  7318 ;;      Temps:          0       2       0       0
  7319 ;;      Totals:         0       5       0       0
  7320 ;;Total ram usage:        5 bytes
  7321 ;; Hardware stack levels used:    1
  7322 ;; Hardware stack levels required when called:    4
  7323 ;; This function calls:
  7324 ;;		_LightsPointSelect
  7325 ;; This function is called by:
  7326 ;;		_Lights_Main
  7327 ;; This function uses a non-reentrant model
  7328 ;;
  7329                           
  7330                           
  7331                           ;psect for function _Lights_Control
  7332  0670                     _Lights_Control:	
  7333                           
  7334                           ;incstack = 0
  7335                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7336                           ;Lights_Control@lights stored from wreg
  7337  0670  1283               	bcf	3,5	;RP0=0, select bank0
  7338  0671  1303               	bcf	3,6	;RP1=0, select bank0
  7339  0672  00DB               	movwf	Lights_Control@lights
  7340                           
  7341                           ;TriacRelay_B1.c: 156: LightsPointSelect(lights);
  7342  0673  085B               	movf	Lights_Control@lights,w
  7343  0674  158A  2427  118A   	fcall	_LightsPointSelect
  7344                           
  7345                           ;TriacRelay_B1.c: 157: if (Lights->GO == 1) {
  7346  0677  1283               	bcf	3,5	;RP0=0, select bank0
  7347  0678  1303               	bcf	3,6	;RP1=0, select bank0
  7348  0679  0834               	movf	_Lights,w
  7349  067A  0084               	movwf	4
  7350  067B  1383               	bcf	3,7	;select IRP bank0
  7351  067C  1C80               	btfss	0,1
  7352  067D  0008               	return
  7353                           
  7354                           ;TriacRelay_B1.c: 158: Lights->Time++;
  7355  067E  3001               	movlw	1
  7356  067F  00D7               	movwf	??_Lights_Control
  7357  0680  0834               	movf	_Lights,w
  7358  0681  3E02               	addlw	2
  7359  0682  0084               	movwf	4
  7360  0683  0857               	movf	??_Lights_Control,w
  7361  0684  0780               	addwf	0,f
  7362                           
  7363                           ;TriacRelay_B1.c: 159: if (Lights->Time >= Lights->RelayValue && Lights->RelaySet == 0) 
      +                          {
  7364  0685  0834               	movf	_Lights,w
  7365  0686  3E06               	addlw	6
  7366  0687  0084               	movwf	4
  7367  0688  0800               	movf	0,w
  7368  0689  00D7               	movwf	??_Lights_Control
  7369  068A  0834               	movf	_Lights,w
  7370  068B  3E02               	addlw	2
  7371  068C  0084               	movwf	4
  7372  068D  0800               	movf	0,w
  7373  068E  00D8               	movwf	??_Lights_Control+1
  7374  068F  0857               	movf	??_Lights_Control,w
  7375  0690  0258               	subwf	??_Lights_Control+1,w
  7376  0691  1C03               	skipc
  7377  0692  2EAA               	goto	l3260
  7378  0693  0834               	movf	_Lights,w
  7379  0694  0084               	movwf	4
  7380  0695  1B80               	btfsc	0,7
  7381  0696  2EAA               	goto	l3260
  7382                           
  7383                           ;TriacRelay_B1.c: 160: Lights->RelaySet = 1;
  7384  0697  0834               	movf	_Lights,w
  7385  0698  0084               	movwf	4
  7386  0699  1780               	bsf	0,7
  7387                           
  7388                           ;TriacRelay_B1.c: 162: if (lights == 1) {
  7389  069A  085B               	movf	Lights_Control@lights,w
  7390  069B  3A01               	xorlw	1
  7391  069C  1D03               	skipz
  7392  069D  0008               	return
  7393                           
  7394                           ;TriacRelay_B1.c: 163: RA4 = Lights->Status == 1 ? 1 : 0;
  7395  069E  0834               	movf	_Lights,w
  7396  069F  0084               	movwf	4
  7397  06A0  1D00               	btfss	0,2
  7398  06A1  2EA6               	goto	u2750
  7399  06A2  1283               	bcf	3,5	;RP0=0, select bank0
  7400  06A3  1303               	bcf	3,6	;RP1=0, select bank0
  7401  06A4  1605               	bsf	5,4	;volatile
  7402  06A5  0008               	return
  7403  06A6                     u2750:	
  7404  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  7405  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  7406  06A8  1205               	bcf	5,4	;volatile
  7407                           
  7408                           ;TriacRelay_B1.c: 164: }
  7409                           ;TriacRelay_B1.c: 177: } else if (Lights->Time >= Lights->TriacValue) {
  7410  06A9  0008               	return
  7411  06AA                     l3260:	
  7412  06AA  0834               	movf	_Lights,w
  7413  06AB  3E04               	addlw	4
  7414  06AC  0084               	movwf	4
  7415  06AD  1383               	bcf	3,7	;select IRP bank0
  7416  06AE  0800               	movf	0,w
  7417  06AF  00D7               	movwf	??_Lights_Control
  7418  06B0  0834               	movf	_Lights,w
  7419  06B1  3E02               	addlw	2
  7420  06B2  0084               	movwf	4
  7421  06B3  0800               	movf	0,w
  7422  06B4  00D8               	movwf	??_Lights_Control+1
  7423  06B5  0857               	movf	??_Lights_Control,w
  7424  06B6  0258               	subwf	??_Lights_Control+1,w
  7425  06B7  1C03               	skipc
  7426  06B8  0008               	return
  7427                           
  7428                           ;TriacRelay_B1.c: 178: Lights->Time = 0;
  7429  06B9  0834               	movf	_Lights,w
  7430  06BA  3E02               	addlw	2
  7431  06BB  0084               	movwf	4
  7432  06BC  0180               	clrf	0
  7433                           
  7434                           ;TriacRelay_B1.c: 179: Lights->GO = 0;
  7435  06BD  0834               	movf	_Lights,w
  7436  06BE  0084               	movwf	4
  7437  06BF  1080               	bcf	0,1
  7438                           
  7439                           ;TriacRelay_B1.c: 180: Lights->RelaySet = 0;
  7440  06C0  0834               	movf	_Lights,w
  7441  06C1  0084               	movwf	4
  7442  06C2  1380               	bcf	0,7
  7443                           
  7444                           ;TriacRelay_B1.c: 183: LightsControl.Detect = Lights->Status == 0 ? 1 : LightsControl.De
      +                          tect;
  7445  06C3  0834               	movf	_Lights,w
  7446  06C4  0084               	movwf	4
  7447  06C5  1D00               	btfss	0,2
  7448  06C6  2ECF               	goto	l3272
  7449  06C7  0835               	movf	_LightsControl,w
  7450  06C8  3901               	andlw	1
  7451  06C9  00D7               	movwf	??_Lights_Control
  7452  06CA  01D8               	clrf	??_Lights_Control+1
  7453  06CB  0857               	movf	??_Lights_Control,w
  7454  06CC  00D9               	movwf	_Lights_Control$4487
  7455  06CD  0858               	movf	??_Lights_Control+1,w
  7456  06CE  2ED2               	goto	L21
  7457  06CF                     l3272:	
  7458  06CF  3001               	movlw	1
  7459  06D0  00D9               	movwf	_Lights_Control$4487
  7460  06D1  3000               	movlw	0
  7461  06D2                     L21:	
  7462  06D2  00DA               	movwf	_Lights_Control$4487+1
  7463  06D3  0859               	movf	_Lights_Control$4487,w
  7464  06D4  1035               	bcf	_LightsControl,0
  7465  06D5  1D03               	skipz
  7466  06D6  1435               	bsf	_LightsControl,0
  7467                           
  7468                           ;TriacRelay_B1.c: 187: if (lights == 1) {
  7469  06D7  085B               	movf	Lights_Control@lights,w
  7470  06D8  3A01               	xorlw	1
  7471  06D9  1D03               	skipz
  7472  06DA  0008               	return
  7473                           
  7474                           ;TriacRelay_B1.c: 188: RB2 = 0;
  7475  06DB  1106               	bcf	6,2	;volatile
  7476  06DC  0008               	return
  7477  06DD                     __end_of_Lights_Control:	
  7478                           
  7479                           	psect	text44
  7480  0D0D                     __ptext44:	
  7481 ;; *************** function _Lights_Close *****************
  7482 ;; Defined at:
  7483 ;;		line 85 in file "../src/TriacRelay_B1.c"
  7484 ;; Parameters:    Size  Location     Type
  7485 ;;		None
  7486 ;; Auto vars:     Size  Location     Type
  7487 ;;		None
  7488 ;; Return value:  Size  Location     Type
  7489 ;;		None               void
  7490 ;; Registers used:
  7491 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7492 ;; Tracked objects:
  7493 ;;		On entry : 0/0
  7494 ;;		On exit  : 0/0
  7495 ;;		Unchanged: 0/0
  7496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7497 ;;      Params:         0       0       0       0
  7498 ;;      Locals:         0       0       0       0
  7499 ;;      Temps:          0       1       0       0
  7500 ;;      Totals:         0       1       0       0
  7501 ;;Total ram usage:        1 bytes
  7502 ;; Hardware stack levels used:    1
  7503 ;; Hardware stack levels required when called:    6
  7504 ;; This function calls:
  7505 ;;		_getMain_LightsStatus
  7506 ;; This function is called by:
  7507 ;;		_Lights_Main
  7508 ;; This function uses a non-reentrant model
  7509 ;;
  7510                           
  7511                           
  7512                           ;psect for function _Lights_Close
  7513  0D0D                     _Lights_Close:	
  7514                           
  7515                           ;TriacRelay_B1.c: 86: if (LightsControl.Detect == 1) {
  7516                           
  7517                           ;incstack = 0
  7518                           ; Regs used in _Lights_Close: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7519  0D0D  1283               	bcf	3,5	;RP0=0, select bank0
  7520  0D0E  1303               	bcf	3,6	;RP1=0, select bank0
  7521  0D0F  1C35               	btfss	_LightsControl,0
  7522  0D10  0008               	return
  7523                           
  7524                           ;TriacRelay_B1.c: 87: LightsControl.Detect = 0;
  7525  0D11  1035               	bcf	_LightsControl,0
  7526                           
  7527                           ;TriacRelay_B1.c: 88: LightsControl.LoadGO = getMain_LightsStatus() == 0 ? 0 : 1;
  7528  0D12  158A  2671         	fcall	_getMain_LightsStatus
  7529  0D14  3800               	iorlw	0
  7530  0D15  3000               	movlw	0
  7531  0D16  1D03               	skipz
  7532  0D17  3001               	movlw	1
  7533  0D18  1283               	bcf	3,5	;RP0=0, select bank0
  7534  0D19  1303               	bcf	3,6	;RP1=0, select bank0
  7535  0D1A  00DE               	movwf	??_Lights_Close
  7536  0D1B  0DDE               	rlf	??_Lights_Close,f
  7537  0D1C  0835               	movf	_LightsControl,w
  7538  0D1D  065E               	xorwf	??_Lights_Close,w
  7539  0D1E  39FD               	andlw	-3
  7540  0D1F  065E               	xorwf	??_Lights_Close,w
  7541  0D20  00B5               	movwf	_LightsControl
  7542  0D21  0008               	return
  7543  0D22                     __end_of_Lights_Close:	
  7544                           
  7545                           	psect	text45
  7546  0E71                     __ptext45:	
  7547 ;; *************** function _getMain_LightsStatus *****************
  7548 ;; Defined at:
  7549 ;;		line 349 in file "../src/Main_B1.c"
  7550 ;; Parameters:    Size  Location     Type
  7551 ;;		None
  7552 ;; Auto vars:     Size  Location     Type
  7553 ;;  i               2    6[BANK0 ] int 
  7554 ;;  status          1    8[BANK0 ] unsigned char 
  7555 ;;  count           1    5[BANK0 ] unsigned char 
  7556 ;; Return value:  Size  Location     Type
  7557 ;;                  1    wreg      unsigned char 
  7558 ;; Registers used:
  7559 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7560 ;; Tracked objects:
  7561 ;;		On entry : 0/0
  7562 ;;		On exit  : 0/0
  7563 ;;		Unchanged: 0/0
  7564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7565 ;;      Params:         0       0       0       0
  7566 ;;      Locals:         0       4       0       0
  7567 ;;      Temps:          0       1       0       0
  7568 ;;      Totals:         0       5       0       0
  7569 ;;Total ram usage:        5 bytes
  7570 ;; Hardware stack levels used:    1
  7571 ;; Hardware stack levels required when called:    5
  7572 ;; This function calls:
  7573 ;;		_getLights_Status
  7574 ;; This function is called by:
  7575 ;;		_Load_Main
  7576 ;;		_Lights_Main
  7577 ;;		_Lights_Close
  7578 ;; This function uses a non-reentrant model
  7579 ;;
  7580                           
  7581                           
  7582                           ;psect for function _getMain_LightsStatus
  7583  0E71                     _getMain_LightsStatus:	
  7584                           
  7585                           ;Main_B1.c: 350: char status = 0, count = 0;
  7586                           
  7587                           ;incstack = 0
  7588                           ; Regs used in _getMain_LightsStatus: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7589  0E71  1283               	bcf	3,5	;RP0=0, select bank0
  7590  0E72  1303               	bcf	3,6	;RP1=0, select bank0
  7591  0E73  01DD               	clrf	getMain_LightsStatus@status
  7592  0E74  01DA               	clrf	getMain_LightsStatus@count
  7593                           
  7594                           ;Main_B1.c: 353: count = 1;
  7595  0E75  01DA               	clrf	getMain_LightsStatus@count
  7596  0E76  0ADA               	incf	getMain_LightsStatus@count,f
  7597                           
  7598                           ;Main_B1.c: 362: for (int i = 0; i < count; i++) {
  7599  0E77  01DB               	clrf	getMain_LightsStatus@i
  7600  0E78  01DC               	clrf	getMain_LightsStatus@i+1
  7601  0E79                     l4178:	
  7602  0E79  085C               	movf	getMain_LightsStatus@i+1,w
  7603  0E7A  3A80               	xorlw	128
  7604  0E7B  00D9               	movwf	??_getMain_LightsStatus
  7605  0E7C  3080               	movlw	128
  7606  0E7D  0259               	subwf	??_getMain_LightsStatus,w
  7607  0E7E  1D03               	skipz
  7608  0E7F  2E82               	goto	u4405
  7609  0E80  085A               	movf	getMain_LightsStatus@count,w
  7610  0E81  025B               	subwf	getMain_LightsStatus@i,w
  7611  0E82                     u4405:	
  7612  0E82  1803               	btfsc	3,0
  7613  0E83  2E9E               	goto	l4180
  7614                           
  7615                           ;Main_B1.c: 363: if (status == 0) {
  7616  0E84  1283               	bcf	3,5	;RP0=0, select bank0
  7617  0E85  1303               	bcf	3,6	;RP1=0, select bank0
  7618  0E86  08DD               	movf	getMain_LightsStatus@status,f
  7619  0E87  1D03               	skipz
  7620  0E88  2E97               	goto	l4176
  7621                           
  7622                           ;Main_B1.c: 365: status = getLights_Status(i + 1) == 1 ? 1 : 0;
  7623  0E89  085B               	movf	getMain_LightsStatus@i,w
  7624  0E8A  3E01               	addlw	1
  7625  0E8B  158A  247B  158A   	fcall	_getLights_Status
  7626  0E8E  3A01               	xorlw	1
  7627  0E8F  3000               	movlw	0
  7628  0E90  1903               	skipnz
  7629  0E91  3001               	movlw	1
  7630  0E92  1283               	bcf	3,5	;RP0=0, select bank0
  7631  0E93  1303               	bcf	3,6	;RP1=0, select bank0
  7632  0E94  00D9               	movwf	??_getMain_LightsStatus
  7633  0E95  0859               	movf	??_getMain_LightsStatus,w
  7634  0E96  00DD               	movwf	getMain_LightsStatus@status
  7635  0E97                     l4176:	
  7636  0E97  3001               	movlw	1
  7637  0E98  07DB               	addwf	getMain_LightsStatus@i,f
  7638  0E99  1803               	skipnc
  7639  0E9A  0ADC               	incf	getMain_LightsStatus@i+1,f
  7640  0E9B  3000               	movlw	0
  7641  0E9C  07DC               	addwf	getMain_LightsStatus@i+1,f
  7642  0E9D  2E79               	goto	l4178
  7643  0E9E                     l4180:	
  7644                           
  7645                           ;Main_B1.c: 370: }
  7646                           ;Main_B1.c: 371: }
  7647                           ;Main_B1.c: 372: return status;
  7648  0E9E  1283               	bcf	3,5	;RP0=0, select bank0
  7649  0E9F  1303               	bcf	3,6	;RP1=0, select bank0
  7650  0EA0  085D               	movf	getMain_LightsStatus@status,w
  7651  0EA1  0008               	return
  7652  0EA2                     __end_of_getMain_LightsStatus:	
  7653                           
  7654                           	psect	text46
  7655  0C7B                     __ptext46:	
  7656 ;; *************** function _getLights_Status *****************
  7657 ;; Defined at:
  7658 ;;		line 207 in file "../src/TriacRelay_B1.c"
  7659 ;; Parameters:    Size  Location     Type
  7660 ;;  lights          1    wreg     unsigned char 
  7661 ;; Auto vars:     Size  Location     Type
  7662 ;;  lights          1    2[BANK0 ] unsigned char 
  7663 ;;  status          1    3[BANK0 ] unsigned char 
  7664 ;; Return value:  Size  Location     Type
  7665 ;;                  1    wreg      unsigned char 
  7666 ;; Registers used:
  7667 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7668 ;; Tracked objects:
  7669 ;;		On entry : 0/0
  7670 ;;		On exit  : 0/0
  7671 ;;		Unchanged: 0/0
  7672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7673 ;;      Params:         0       0       0       0
  7674 ;;      Locals:         0       2       0       0
  7675 ;;      Temps:          0       0       0       0
  7676 ;;      Totals:         0       2       0       0
  7677 ;;Total ram usage:        2 bytes
  7678 ;; Hardware stack levels used:    1
  7679 ;; Hardware stack levels required when called:    4
  7680 ;; This function calls:
  7681 ;;		_LightsPointSelect
  7682 ;; This function is called by:
  7683 ;;		_getMain_LightsStatus
  7684 ;;		_PIR_Main
  7685 ;; This function uses a non-reentrant model
  7686 ;;
  7687                           
  7688                           
  7689                           ;psect for function _getLights_Status
  7690  0C7B                     _getLights_Status:	
  7691                           
  7692                           ;incstack = 0
  7693                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7694                           ;getLights_Status@lights stored from wreg
  7695  0C7B  1283               	bcf	3,5	;RP0=0, select bank0
  7696  0C7C  1303               	bcf	3,6	;RP1=0, select bank0
  7697  0C7D  00D7               	movwf	getLights_Status@lights
  7698                           
  7699                           ;TriacRelay_B1.c: 208: LightsPointSelect(lights);
  7700  0C7E  0857               	movf	getLights_Status@lights,w
  7701  0C7F  158A  2427         	fcall	_LightsPointSelect
  7702                           
  7703                           ;TriacRelay_B1.c: 209: char status = Lights->Status == 1 ? 1 : 0;
  7704  0C81  1283               	bcf	3,5	;RP0=0, select bank0
  7705  0C82  1303               	bcf	3,6	;RP1=0, select bank0
  7706  0C83  0834               	movf	_Lights,w
  7707  0C84  0084               	movwf	4
  7708  0C85  3000               	movlw	0
  7709  0C86  1383               	bcf	3,7	;select IRP bank0
  7710  0C87  1900               	btfsc	0,2
  7711  0C88  3001               	movlw	1
  7712  0C89  00D8               	movwf	getLights_Status@status
  7713                           
  7714                           ;TriacRelay_B1.c: 210: return status;
  7715  0C8A  0858               	movf	getLights_Status@status,w
  7716  0C8B  0008               	return
  7717  0C8C                     __end_of_getLights_Status:	
  7718                           
  7719                           	psect	text47
  7720  0BBC                     __ptext47:	
  7721 ;; *************** function _Lights_Initialization *****************
  7722 ;; Defined at:
  7723 ;;		line 34 in file "../src/TriacRelay_B1.c"
  7724 ;; Parameters:    Size  Location     Type
  7725 ;;		None
  7726 ;; Auto vars:     Size  Location     Type
  7727 ;;		None
  7728 ;; Return value:  Size  Location     Type
  7729 ;;		None               void
  7730 ;; Registers used:
  7731 ;;		wreg, status,2, status,0, pclath, cstack
  7732 ;; Tracked objects:
  7733 ;;		On entry : 0/0
  7734 ;;		On exit  : 0/0
  7735 ;;		Unchanged: 0/0
  7736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7737 ;;      Params:         0       0       0       0
  7738 ;;      Locals:         0       0       0       0
  7739 ;;      Temps:          0       0       0       0
  7740 ;;      Totals:         0       0       0       0
  7741 ;;Total ram usage:        0 bytes
  7742 ;; Hardware stack levels used:    1
  7743 ;; Hardware stack levels required when called:    5
  7744 ;; This function calls:
  7745 ;;		_setLights_Initialization
  7746 ;; This function is called by:
  7747 ;;		_main
  7748 ;; This function uses a non-reentrant model
  7749 ;;
  7750                           
  7751                           
  7752                           ;psect for function _Lights_Initialization
  7753  0BBC                     _Lights_Initialization:	
  7754                           
  7755                           ;TriacRelay_B1.c: 36: setLights_Initialization(1);
  7756                           
  7757                           ;incstack = 0
  7758                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7759  0BBC  3001               	movlw	1
  7760  0BBD  158A  23DB         	fcall	_setLights_Initialization
  7761  0BBF  0008               	return
  7762  0BC0                     __end_of_Lights_Initialization:	
  7763                           
  7764                           	psect	text48
  7765  0BDB                     __ptext48:	
  7766 ;; *************** function _setLights_Initialization *****************
  7767 ;; Defined at:
  7768 ;;		line 49 in file "../src/TriacRelay_B1.c"
  7769 ;; Parameters:    Size  Location     Type
  7770 ;;  lights          1    wreg     unsigned char 
  7771 ;; Auto vars:     Size  Location     Type
  7772 ;;  lights          1    2[BANK0 ] unsigned char 
  7773 ;; Return value:  Size  Location     Type
  7774 ;;		None               void
  7775 ;; Registers used:
  7776 ;;		wreg, status,2, status,0, pclath, cstack
  7777 ;; Tracked objects:
  7778 ;;		On entry : 0/0
  7779 ;;		On exit  : 0/0
  7780 ;;		Unchanged: 0/0
  7781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7782 ;;      Params:         0       0       0       0
  7783 ;;      Locals:         0       1       0       0
  7784 ;;      Temps:          0       0       0       0
  7785 ;;      Totals:         0       1       0       0
  7786 ;;Total ram usage:        1 bytes
  7787 ;; Hardware stack levels used:    1
  7788 ;; Hardware stack levels required when called:    4
  7789 ;; This function calls:
  7790 ;;		_LightsPointSelect
  7791 ;; This function is called by:
  7792 ;;		_Lights_Initialization
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           
  7797                           ;psect for function _setLights_Initialization
  7798  0BDB                     _setLights_Initialization:	
  7799                           
  7800                           ;incstack = 0
  7801                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7802                           ;setLights_Initialization@lights stored from wreg
  7803  0BDB  1283               	bcf	3,5	;RP0=0, select bank0
  7804  0BDC  1303               	bcf	3,6	;RP1=0, select bank0
  7805  0BDD  00D7               	movwf	setLights_Initialization@lights
  7806                           
  7807                           ;TriacRelay_B1.c: 50: LightsPointSelect(lights);
  7808  0BDE  0857               	movf	setLights_Initialization@lights,w
  7809  0BDF  158A  2427         	fcall	_LightsPointSelect
  7810  0BE1  0008               	return
  7811  0BE2                     __end_of_setLights_Initialization:	
  7812                           
  7813                           	psect	text49
  7814  0C27                     __ptext49:	
  7815 ;; *************** function _LightsPointSelect *****************
  7816 ;; Defined at:
  7817 ;;		line 10 in file "../src/TriacRelay_B1.c"
  7818 ;; Parameters:    Size  Location     Type
  7819 ;;  lights          1    wreg     unsigned char 
  7820 ;; Auto vars:     Size  Location     Type
  7821 ;;  lights          1    1[BANK0 ] unsigned char 
  7822 ;; Return value:  Size  Location     Type
  7823 ;;		None               void
  7824 ;; Registers used:
  7825 ;;		wreg
  7826 ;; Tracked objects:
  7827 ;;		On entry : 0/0
  7828 ;;		On exit  : 0/0
  7829 ;;		Unchanged: 0/0
  7830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7831 ;;      Params:         0       0       0       0
  7832 ;;      Locals:         0       1       0       0
  7833 ;;      Temps:          0       1       0       0
  7834 ;;      Totals:         0       2       0       0
  7835 ;;Total ram usage:        2 bytes
  7836 ;; Hardware stack levels used:    1
  7837 ;; Hardware stack levels required when called:    3
  7838 ;; This function calls:
  7839 ;;		Nothing
  7840 ;; This function is called by:
  7841 ;;		_setLights_Initialization
  7842 ;;		_setLights_Main
  7843 ;;		_setLights
  7844 ;;		_Lights_Control
  7845 ;;		_getLights_Status
  7846 ;;		_setLights_Trigger
  7847 ;;		_setLights_Line
  7848 ;;		_getAll_Lights_Line
  7849 ;; This function uses a non-reentrant model
  7850 ;;
  7851                           
  7852                           
  7853                           ;psect for function _LightsPointSelect
  7854  0C27                     _LightsPointSelect:	
  7855                           
  7856                           ;incstack = 0
  7857                           ; Regs used in _LightsPointSelect: [wreg]
  7858                           ;LightsPointSelect@lights stored from wreg
  7859  0C27  1283               	bcf	3,5	;RP0=0, select bank0
  7860  0C28  1303               	bcf	3,6	;RP1=0, select bank0
  7861  0C29  00D6               	movwf	LightsPointSelect@lights
  7862                           
  7863                           ;TriacRelay_B1.c: 14: if (lights == 1) {
  7864  0C2A  0856               	movf	LightsPointSelect@lights,w
  7865  0C2B  3A01               	xorlw	1
  7866  0C2C  1D03               	skipz
  7867  0C2D  0008               	return
  7868                           
  7869                           ;TriacRelay_B1.c: 15: Lights = &Lights1;
  7870  0C2E  3042               	movlw	_Lights1& (0+255)
  7871  0C2F  00D5               	movwf	??_LightsPointSelect
  7872  0C30  0855               	movf	??_LightsPointSelect,w
  7873  0C31  00B4               	movwf	_Lights
  7874  0C32  0008               	return
  7875  0C33                     __end_of_LightsPointSelect:	
  7876                           
  7877                           	psect	text50
  7878  0BB5                     __ptext50:	
  7879 ;; *************** function _LED_Main *****************
  7880 ;; Defined at:
  7881 ;;		line 47 in file "../src/LED_B1.c"
  7882 ;; Parameters:    Size  Location     Type
  7883 ;;		None
  7884 ;; Auto vars:     Size  Location     Type
  7885 ;;		None
  7886 ;; Return value:  Size  Location     Type
  7887 ;;		None               void
  7888 ;; Registers used:
  7889 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7890 ;; Tracked objects:
  7891 ;;		On entry : 0/0
  7892 ;;		On exit  : 0/0
  7893 ;;		Unchanged: 0/0
  7894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7895 ;;      Params:         0       0       0       0
  7896 ;;      Locals:         0       0       0       0
  7897 ;;      Temps:          0       0       0       0
  7898 ;;      Totals:         0       0       0       0
  7899 ;;Total ram usage:        0 bytes
  7900 ;; Hardware stack levels used:    1
  7901 ;; Hardware stack levels required when called:    6
  7902 ;; This function calls:
  7903 ;;		_setPIRLED_Main
  7904 ;; This function is called by:
  7905 ;;		_main
  7906 ;; This function uses a non-reentrant model
  7907 ;;
  7908                           
  7909                           
  7910                           ;psect for function _LED_Main
  7911  0BB5                     _LED_Main:	
  7912                           
  7913                           ;LED_B1.c: 50: setPIRLED_Main();
  7914                           
  7915                           ;incstack = 0
  7916                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7917  0BB5  118A  258E         	fcall	_setPIRLED_Main
  7918  0BB7  0008               	return
  7919  0BB8                     __end_of_LED_Main:	
  7920                           
  7921                           	psect	text51
  7922  058E                     __ptext51:	
  7923 ;; *************** function _setPIRLED_Main *****************
  7924 ;; Defined at:
  7925 ;;		line 253 in file "../src/LED_B1.c"
  7926 ;; Parameters:    Size  Location     Type
  7927 ;;		None
  7928 ;; Auto vars:     Size  Location     Type
  7929 ;;  count           1    5[BANK0 ] unsigned char 
  7930 ;; Return value:  Size  Location     Type
  7931 ;;		None               void
  7932 ;; Registers used:
  7933 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7934 ;; Tracked objects:
  7935 ;;		On entry : 0/0
  7936 ;;		On exit  : 0/0
  7937 ;;		Unchanged: 0/0
  7938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7939 ;;      Params:         0       0       0       0
  7940 ;;      Locals:         0       1       0       0
  7941 ;;      Temps:          0       1       0       0
  7942 ;;      Totals:         0       2       0       0
  7943 ;;Total ram usage:        2 bytes
  7944 ;; Hardware stack levels used:    1
  7945 ;; Hardware stack levels required when called:    5
  7946 ;; This function calls:
  7947 ;;		_setLED
  7948 ;; This function is called by:
  7949 ;;		_LED_Main
  7950 ;; This function uses a non-reentrant model
  7951 ;;
  7952                           
  7953                           
  7954                           ;psect for function _setPIRLED_Main
  7955  058E                     _setPIRLED_Main:	
  7956                           
  7957                           ;LED_B1.c: 254: char count;
  7958                           ;LED_B1.c: 255: if (PIRLED.GO == 1) {
  7959                           
  7960                           ;incstack = 0
  7961                           ; Regs used in _setPIRLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7962  058E  1283               	bcf	3,5	;RP0=0, select bank0
  7963  058F  1303               	bcf	3,6	;RP1=0, select bank0
  7964  0590  1C2C               	btfss	_PIRLED,0
  7965  0591  0008               	return
  7966                           
  7967                           ;LED_B1.c: 256: PIRLED.Time++;
  7968  0592  3001               	movlw	1
  7969  0593  07AE               	addwf	_PIRLED+2,f
  7970  0594  1803               	skipnc
  7971  0595  0AAF               	incf	_PIRLED+3,f
  7972  0596  3000               	movlw	0
  7973  0597  07AF               	addwf	_PIRLED+3,f
  7974                           
  7975                           ;LED_B1.c: 257: if (PIRLED.Time >= 500 / 10) {
  7976  0598  3000               	movlw	0
  7977  0599  022F               	subwf	_PIRLED+3,w
  7978  059A  3032               	movlw	50
  7979  059B  1903               	skipnz
  7980  059C  022E               	subwf	_PIRLED+2,w
  7981  059D  1C03               	skipc
  7982  059E  0008               	return
  7983                           
  7984                           ;LED_B1.c: 258: PIRLED.Time = 0;
  7985  059F  01AE               	clrf	_PIRLED+2
  7986  05A0  01AF               	clrf	_PIRLED+3
  7987                           
  7988                           ;LED_B1.c: 259: setLED(1, 0);
  7989  05A1  01D7               	clrf	setLED@command
  7990  05A2  3001               	movlw	1
  7991  05A3  118A  25FF  118A   	fcall	_setLED
  7992                           
  7993                           ;LED_B1.c: 260: setLED(2, 0);
  7994  05A6  1283               	bcf	3,5	;RP0=0, select bank0
  7995  05A7  1303               	bcf	3,6	;RP1=0, select bank0
  7996  05A8  01D7               	clrf	setLED@command
  7997  05A9  3002               	movlw	2
  7998  05AA  118A  25FF  118A   	fcall	_setLED
  7999                           
  8000                           ;LED_B1.c: 261: if (PIRLED.GO1 == 1) {
  8001  05AD  1283               	bcf	3,5	;RP0=0, select bank0
  8002  05AE  1303               	bcf	3,6	;RP1=0, select bank0
  8003  05AF  1CAC               	btfss	_PIRLED,1
  8004  05B0  2DB5               	goto	l4246
  8005                           
  8006                           ;LED_B1.c: 262: count = 4;
  8007  05B1  3004               	movlw	4
  8008  05B2  00D9               	movwf	??_setPIRLED_Main
  8009  05B3  0859               	movf	??_setPIRLED_Main,w
  8010  05B4  00DA               	movwf	setPIRLED_Main@count
  8011  05B5                     l4246:	
  8012                           
  8013                           ;LED_B1.c: 263: }
  8014                           ;LED_B1.c: 264: if (PIRLED.GO2 == 1) {
  8015  05B5  1D2C               	btfss	_PIRLED,2
  8016  05B6  2DBB               	goto	l4250
  8017                           
  8018                           ;LED_B1.c: 265: count = 6;
  8019  05B7  3006               	movlw	6
  8020  05B8  00D9               	movwf	??_setPIRLED_Main
  8021  05B9  0859               	movf	??_setPIRLED_Main,w
  8022  05BA  00DA               	movwf	setPIRLED_Main@count
  8023  05BB                     l4250:	
  8024                           
  8025                           ;LED_B1.c: 266: }
  8026                           ;LED_B1.c: 267: if (PIRLED.GO3 == 1) {
  8027  05BB  1DAC               	btfss	_PIRLED,3
  8028  05BC  2DC1               	goto	l4254
  8029                           
  8030                           ;LED_B1.c: 268: count = 8;
  8031  05BD  3008               	movlw	8
  8032  05BE  00D9               	movwf	??_setPIRLED_Main
  8033  05BF  0859               	movf	??_setPIRLED_Main,w
  8034  05C0  00DA               	movwf	setPIRLED_Main@count
  8035  05C1                     l4254:	
  8036                           
  8037                           ;LED_B1.c: 269: }
  8038                           ;LED_B1.c: 270: PIRLED.Count++;
  8039  05C1  3001               	movlw	1
  8040  05C2  00D9               	movwf	??_setPIRLED_Main
  8041  05C3  0859               	movf	??_setPIRLED_Main,w
  8042  05C4  07AD               	addwf	_PIRLED+1,f
  8043                           
  8044                           ;LED_B1.c: 271: if (PIRLED.Count == 1 || PIRLED.Count == 2) {
  8045  05C5  082D               	movf	_PIRLED+1,w
  8046  05C6  3A01               	xorlw	1
  8047  05C7  1903               	skipnz
  8048  05C8  2DCD               	goto	l4260
  8049  05C9  082D               	movf	_PIRLED+1,w
  8050  05CA  3A02               	xorlw	2
  8051  05CB  1D03               	skipz
  8052  05CC  2DE1               	goto	l4264
  8053  05CD                     l4260:	
  8054                           
  8055                           ;LED_B1.c: 272: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  8056  05CD  1003               	clrc
  8057  05CE  1E2C               	btfss	_PIRLED,4
  8058  05CF  1403               	setc
  8059  05D0  1C03               	btfss	3,0
  8060  05D1  2DD6               	goto	u4540
  8061  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  8062  05D3  1303               	bcf	3,6	;RP1=0, select bank0
  8063  05D4  162C               	bsf	_PIRLED,4
  8064  05D5  2DD9               	goto	l4262
  8065  05D6                     u4540:	
  8066  05D6  1283               	bcf	3,5	;RP0=0, select bank0
  8067  05D7  1303               	bcf	3,6	;RP1=0, select bank0
  8068  05D8  122C               	bcf	_PIRLED,4
  8069  05D9                     l4262:	
  8070                           
  8071                           ;LED_B1.c: 273: setLED(2, PIRLED.status);
  8072  05D9  3000               	movlw	0
  8073  05DA  1A2C               	btfsc	_PIRLED,4
  8074  05DB  3001               	movlw	1
  8075  05DC  00D7               	movwf	setLED@command
  8076  05DD  3002               	movlw	2
  8077  05DE  118A  25FF         	fcall	_setLED
  8078                           
  8079                           ;LED_B1.c: 274: } else {
  8080  05E0  0008               	return
  8081  05E1                     l4264:	
  8082                           
  8083                           ;LED_B1.c: 275: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  8084  05E1  1003               	clrc
  8085  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  8086  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  8087  05E4  1E2C               	btfss	_PIRLED,4
  8088  05E5  1403               	setc
  8089  05E6  1C03               	btfss	3,0
  8090  05E7  2DEC               	goto	u4560
  8091  05E8  1283               	bcf	3,5	;RP0=0, select bank0
  8092  05E9  1303               	bcf	3,6	;RP1=0, select bank0
  8093  05EA  162C               	bsf	_PIRLED,4
  8094  05EB  2DEF               	goto	l4266
  8095  05EC                     u4560:	
  8096  05EC  1283               	bcf	3,5	;RP0=0, select bank0
  8097  05ED  1303               	bcf	3,6	;RP1=0, select bank0
  8098  05EE  122C               	bcf	_PIRLED,4
  8099  05EF                     l4266:	
  8100                           
  8101                           ;LED_B1.c: 276: setLED(1, PIRLED.status);
  8102  05EF  3000               	movlw	0
  8103  05F0  1A2C               	btfsc	_PIRLED,4
  8104  05F1  3001               	movlw	1
  8105  05F2  00D7               	movwf	setLED@command
  8106  05F3  3001               	movlw	1
  8107  05F4  118A  25FF  118A   	fcall	_setLED
  8108                           
  8109                           ;LED_B1.c: 277: if (PIRLED.Count == count) {
  8110  05F7  1283               	bcf	3,5	;RP0=0, select bank0
  8111  05F8  1303               	bcf	3,6	;RP1=0, select bank0
  8112  05F9  082D               	movf	_PIRLED+1,w
  8113  05FA  065A               	xorwf	setPIRLED_Main@count,w
  8114  05FB  1D03               	skipz
  8115  05FC  0008               	return
  8116                           
  8117                           ;LED_B1.c: 278: PIRLED.Count = 0;
  8118  05FD  01AD               	clrf	_PIRLED+1
  8119  05FE  0008               	return
  8120  05FF                     __end_of_setPIRLED_Main:	
  8121                           
  8122                           	psect	text52
  8123  0C1B                     __ptext52:	
  8124 ;; *************** function _LED_Initialization *****************
  8125 ;; Defined at:
  8126 ;;		line 31 in file "../src/LED_B1.c"
  8127 ;; Parameters:    Size  Location     Type
  8128 ;;		None
  8129 ;; Auto vars:     Size  Location     Type
  8130 ;;		None
  8131 ;; Return value:  Size  Location     Type
  8132 ;;		None               void
  8133 ;; Registers used:
  8134 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8135 ;; Tracked objects:
  8136 ;;		On entry : 0/0
  8137 ;;		On exit  : 0/0
  8138 ;;		Unchanged: 0/0
  8139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8140 ;;      Params:         0       0       0       0
  8141 ;;      Locals:         0       0       0       0
  8142 ;;      Temps:          0       0       0       0
  8143 ;;      Totals:         0       0       0       0
  8144 ;;Total ram usage:        0 bytes
  8145 ;; Hardware stack levels used:    1
  8146 ;; Hardware stack levels required when called:    6
  8147 ;; This function calls:
  8148 ;;		_setLED_Initialization
  8149 ;; This function is called by:
  8150 ;;		_main
  8151 ;; This function uses a non-reentrant model
  8152 ;;
  8153                           
  8154                           
  8155                           ;psect for function _LED_Initialization
  8156  0C1B                     _LED_Initialization:	
  8157                           
  8158                           ;LED_B1.c: 33: setLED_Initialization(1);
  8159                           
  8160                           ;incstack = 0
  8161                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8162  0C1B  3001               	movlw	1
  8163  0C1C  158A  24AE  158A   	fcall	_setLED_Initialization
  8164                           
  8165                           ;LED_B1.c: 36: setLED_Initialization(2);
  8166  0C1F  3002               	movlw	2
  8167  0C20  158A  24AE  158A   	fcall	_setLED_Initialization
  8168                           
  8169                           ;LED_B1.c: 42: setLED_Initialization(99);
  8170  0C23  3063               	movlw	99
  8171  0C24  158A  24AE         	fcall	_setLED_Initialization
  8172  0C26  0008               	return
  8173  0C27                     __end_of_LED_Initialization:	
  8174                           
  8175                           	psect	text53
  8176  0CAE                     __ptext53:	
  8177 ;; *************** function _setLED_Initialization *****************
  8178 ;; Defined at:
  8179 ;;		line 69 in file "../src/LED_B1.c"
  8180 ;; Parameters:    Size  Location     Type
  8181 ;;  led             1    wreg     unsigned char 
  8182 ;; Auto vars:     Size  Location     Type
  8183 ;;  led             1    4[BANK0 ] unsigned char 
  8184 ;; Return value:  Size  Location     Type
  8185 ;;		None               void
  8186 ;; Registers used:
  8187 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8188 ;; Tracked objects:
  8189 ;;		On entry : 0/0
  8190 ;;		On exit  : 0/0
  8191 ;;		Unchanged: 0/0
  8192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8193 ;;      Params:         0       0       0       0
  8194 ;;      Locals:         0       1       0       0
  8195 ;;      Temps:          0       0       0       0
  8196 ;;      Totals:         0       1       0       0
  8197 ;;Total ram usage:        1 bytes
  8198 ;; Hardware stack levels used:    1
  8199 ;; Hardware stack levels required when called:    5
  8200 ;; This function calls:
  8201 ;;		_LedPointSelect
  8202 ;;		_setLED
  8203 ;; This function is called by:
  8204 ;;		_LED_Initialization
  8205 ;; This function uses a non-reentrant model
  8206 ;;
  8207                           
  8208                           
  8209                           ;psect for function _setLED_Initialization
  8210  0CAE                     _setLED_Initialization:	
  8211                           
  8212                           ;incstack = 0
  8213                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8214                           ;setLED_Initialization@led stored from wreg
  8215  0CAE  1283               	bcf	3,5	;RP0=0, select bank0
  8216  0CAF  1303               	bcf	3,6	;RP1=0, select bank0
  8217  0CB0  00D9               	movwf	setLED_Initialization@led
  8218                           
  8219                           ;LED_B1.c: 70: LedPointSelect(led);
  8220  0CB1  0859               	movf	setLED_Initialization@led,w
  8221  0CB2  158A  259F  158A   	fcall	_LedPointSelect
  8222                           
  8223                           ;LED_B1.c: 71: LED->Enable = 1;
  8224  0CB5  1283               	bcf	3,5	;RP0=0, select bank0
  8225  0CB6  1303               	bcf	3,6	;RP1=0, select bank0
  8226  0CB7  0833               	movf	_LED,w
  8227  0CB8  0084               	movwf	4
  8228  0CB9  1383               	bcf	3,7	;select IRP bank0
  8229  0CBA  1400               	bsf	0,0
  8230                           
  8231                           ;LED_B1.c: 72: setLED(led, 0);
  8232  0CBB  01D7               	clrf	setLED@command
  8233  0CBC  0859               	movf	setLED_Initialization@led,w
  8234  0CBD  118A  25FF         	fcall	_setLED
  8235  0CBF  0008               	return
  8236  0CC0                     __end_of_setLED_Initialization:	
  8237                           
  8238                           	psect	text54
  8239  05FF                     __ptext54:	
  8240 ;; *************** function _setLED *****************
  8241 ;; Defined at:
  8242 ;;		line 76 in file "../src/LED_B1.c"
  8243 ;; Parameters:    Size  Location     Type
  8244 ;;  led             1    wreg     unsigned char 
  8245 ;;  command         1    2[BANK0 ] unsigned char 
  8246 ;; Auto vars:     Size  Location     Type
  8247 ;;  led             1    3[BANK0 ] unsigned char 
  8248 ;; Return value:  Size  Location     Type
  8249 ;;		None               void
  8250 ;; Registers used:
  8251 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8252 ;; Tracked objects:
  8253 ;;		On entry : 0/0
  8254 ;;		On exit  : 0/0
  8255 ;;		Unchanged: 0/0
  8256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8257 ;;      Params:         0       1       0       0
  8258 ;;      Locals:         0       1       0       0
  8259 ;;      Temps:          0       0       0       0
  8260 ;;      Totals:         0       2       0       0
  8261 ;;Total ram usage:        2 bytes
  8262 ;; Hardware stack levels used:    1
  8263 ;; Hardware stack levels required when called:    4
  8264 ;; This function calls:
  8265 ;;		_LedPointSelect
  8266 ;; This function is called by:
  8267 ;;		_setLED_Initialization
  8268 ;;		_setPIRLED_Main
  8269 ;;		_setMain_Exception
  8270 ;;		_PIR_Initialization
  8271 ;;		_PIR_Main
  8272 ;; This function uses a non-reentrant model
  8273 ;;
  8274                           
  8275                           
  8276                           ;psect for function _setLED
  8277  05FF                     _setLED:	
  8278                           
  8279                           ;incstack = 0
  8280                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8281                           ;setLED@led stored from wreg
  8282  05FF  1283               	bcf	3,5	;RP0=0, select bank0
  8283  0600  1303               	bcf	3,6	;RP1=0, select bank0
  8284  0601  00D8               	movwf	setLED@led
  8285                           
  8286                           ;LED_B1.c: 77: LedPointSelect(led);
  8287  0602  0858               	movf	setLED@led,w
  8288  0603  158A  259F  118A   	fcall	_LedPointSelect
  8289                           
  8290                           ;LED_B1.c: 78: if (command == 0) {
  8291  0606  1283               	bcf	3,5	;RP0=0, select bank0
  8292  0607  1303               	bcf	3,6	;RP1=0, select bank0
  8293  0608  08D7               	movf	setLED@command,f
  8294  0609  1D03               	skipz
  8295  060A  2E18               	goto	l4078
  8296                           
  8297                           ;LED_B1.c: 80: if (led == 1) {
  8298  060B  0858               	movf	setLED@led,w
  8299  060C  3A01               	xorlw	1
  8300  060D  1D03               	skipz
  8301  060E  2E10               	goto	l4070
  8302                           
  8303                           ;LED_B1.c: 84: RB4 = 1;
  8304  060F  1606               	bsf	6,4	;volatile
  8305  0610                     l4070:	
  8306                           
  8307                           ;LED_B1.c: 86: }
  8308                           ;LED_B1.c: 89: if (led == 2) {
  8309  0610  0858               	movf	setLED@led,w
  8310  0611  3A02               	xorlw	2
  8311  0612  1903               	btfsc	3,2
  8312                           
  8313                           ;LED_B1.c: 93: RB5 = 1;
  8314  0613  1686               	bsf	6,5	;volatile
  8315                           
  8316                           ;LED_B1.c: 95: }
  8317                           ;LED_B1.c: 107: if (led == 99) {
  8318  0614  0858               	movf	setLED@led,w
  8319  0615  3A63               	xorlw	99
  8320  0616  1903               	btfsc	3,2
  8321                           
  8322                           ;LED_B1.c: 111: RB3 = 1;
  8323  0617  1586               	bsf	6,3	;volatile
  8324  0618                     l4078:	
  8325                           
  8326                           ;LED_B1.c: 113: }
  8327                           ;LED_B1.c: 115: }
  8328                           ;LED_B1.c: 116: if (command == 1) {
  8329  0618  0857               	movf	setLED@command,w
  8330  0619  3A01               	xorlw	1
  8331  061A  1D03               	skipz
  8332  061B  2E29               	goto	l4092
  8333                           
  8334                           ;LED_B1.c: 118: if (led == 1) {
  8335  061C  0858               	movf	setLED@led,w
  8336  061D  3A01               	xorlw	1
  8337  061E  1D03               	skipz
  8338  061F  2E21               	goto	l4084
  8339                           
  8340                           ;LED_B1.c: 122: RB4 = 0;
  8341  0620  1206               	bcf	6,4	;volatile
  8342  0621                     l4084:	
  8343                           
  8344                           ;LED_B1.c: 124: }
  8345                           ;LED_B1.c: 127: if (led == 2) {
  8346  0621  0858               	movf	setLED@led,w
  8347  0622  3A02               	xorlw	2
  8348  0623  1903               	btfsc	3,2
  8349                           
  8350                           ;LED_B1.c: 131: RB5 = 0;
  8351  0624  1286               	bcf	6,5	;volatile
  8352                           
  8353                           ;LED_B1.c: 133: }
  8354                           ;LED_B1.c: 145: if (led == 99) {
  8355  0625  0858               	movf	setLED@led,w
  8356  0626  3A63               	xorlw	99
  8357  0627  1903               	btfsc	3,2
  8358                           
  8359                           ;LED_B1.c: 149: RB3 = 0;
  8360  0628  1186               	bcf	6,3	;volatile
  8361  0629                     l4092:	
  8362                           
  8363                           ;LED_B1.c: 151: }
  8364                           ;LED_B1.c: 153: }
  8365                           ;LED_B1.c: 154: if (command == 10) {
  8366  0629  0857               	movf	setLED@command,w
  8367  062A  3A0A               	xorlw	10
  8368  062B  1D03               	skipz
  8369  062C  2E44               	goto	l4110
  8370                           
  8371                           ;LED_B1.c: 155: LED->GO = 0;
  8372  062D  0833               	movf	_LED,w
  8373  062E  0084               	movwf	4
  8374  062F  1383               	bcf	3,7	;select IRP bank0
  8375  0630  1080               	bcf	0,1
  8376                           
  8377                           ;LED_B1.c: 156: LED->Time = 0;
  8378  0631  0A33               	incf	_LED,w
  8379  0632  0084               	movwf	4
  8380  0633  0180               	clrf	0
  8381  0634  0A84               	incf	4,f
  8382  0635  0180               	clrf	0
  8383                           
  8384                           ;LED_B1.c: 158: if (led == 1) {
  8385  0636  0858               	movf	setLED@led,w
  8386  0637  3A01               	xorlw	1
  8387  0638  1D03               	skipz
  8388  0639  2E3C               	goto	l4102
  8389                           
  8390                           ;LED_B1.c: 162: RB4 = 1;
  8391  063A  1606               	bsf	6,4	;volatile
  8392                           
  8393                           ;LED_B1.c: 164: }
  8394  063B  2E40               	goto	l4106
  8395  063C                     l4102:	
  8396                           
  8397                           ;LED_B1.c: 167: else if (led == 2) {
  8398  063C  0858               	movf	setLED@led,w
  8399  063D  3A02               	xorlw	2
  8400  063E  1903               	btfsc	3,2
  8401                           
  8402                           ;LED_B1.c: 171: RB5 = 1;
  8403  063F  1686               	bsf	6,5	;volatile
  8404  0640                     l4106:	
  8405                           
  8406                           ;LED_B1.c: 173: }
  8407                           ;LED_B1.c: 185: if (led == 99) {
  8408  0640  0858               	movf	setLED@led,w
  8409  0641  3A63               	xorlw	99
  8410  0642  1903               	btfsc	3,2
  8411                           
  8412                           ;LED_B1.c: 189: RB3 = 1;
  8413  0643  1586               	bsf	6,3	;volatile
  8414  0644                     l4110:	
  8415                           
  8416                           ;LED_B1.c: 191: }
  8417                           ;LED_B1.c: 193: }
  8418                           ;LED_B1.c: 194: if (command == 11) {
  8419  0644  0857               	movf	setLED@command,w
  8420  0645  3A0B               	xorlw	11
  8421  0646  1D03               	skipz
  8422  0647  2E4C               	goto	l4114
  8423                           
  8424                           ;LED_B1.c: 195: LED->GO = 1;
  8425  0648  0833               	movf	_LED,w
  8426  0649  0084               	movwf	4
  8427  064A  1383               	bcf	3,7	;select IRP bank0
  8428  064B  1480               	bsf	0,1
  8429  064C                     l4114:	
  8430                           
  8431                           ;LED_B1.c: 196: }
  8432                           ;LED_B1.c: 198: if (command == 111) {
  8433  064C  0857               	movf	setLED@command,w
  8434  064D  3A6F               	xorlw	111
  8435  064E  1D03               	skipz
  8436  064F  2E6A               	goto	l4140
  8437                           
  8438                           ;LED_B1.c: 199: PIRLED.Count = 0;
  8439  0650  01AD               	clrf	_PIRLED+1
  8440                           
  8441                           ;LED_B1.c: 200: PIRLED.Time = 0;
  8442  0651  01AE               	clrf	_PIRLED+2
  8443  0652  01AF               	clrf	_PIRLED+3
  8444                           
  8445                           ;LED_B1.c: 201: PIRLED.status = 0;
  8446  0653  122C               	bcf	_PIRLED,4
  8447                           
  8448                           ;LED_B1.c: 202: PIRLED.GO = 1;
  8449  0654  142C               	bsf	_PIRLED,0
  8450                           
  8451                           ;LED_B1.c: 203: PIRLED.GO1 = 0;
  8452  0655  10AC               	bcf	_PIRLED,1
  8453                           
  8454                           ;LED_B1.c: 204: PIRLED.GO2 = 0;
  8455  0656  112C               	bcf	_PIRLED,2
  8456                           
  8457                           ;LED_B1.c: 205: PIRLED.GO3 = 0;
  8458  0657  11AC               	bcf	_PIRLED,3
  8459                           
  8460                           ;LED_B1.c: 206: if (led == 1) {
  8461  0658  0858               	movf	setLED@led,w
  8462  0659  3A01               	xorlw	1
  8463  065A  1D03               	skipz
  8464  065B  2E5E               	goto	l4132
  8465                           
  8466                           ;LED_B1.c: 207: PIRLED.GO1 = 1;
  8467  065C  14AC               	bsf	_PIRLED,1
  8468                           
  8469                           ;LED_B1.c: 208: } else if (led == 2) {
  8470  065D  0008               	return
  8471  065E                     l4132:	
  8472  065E  0858               	movf	setLED@led,w
  8473  065F  3A02               	xorlw	2
  8474  0660  1D03               	skipz
  8475  0661  2E64               	goto	l4136
  8476                           
  8477                           ;LED_B1.c: 209: PIRLED.GO2 = 1;
  8478  0662  152C               	bsf	_PIRLED,2
  8479                           
  8480                           ;LED_B1.c: 210: } else if (led == 3) {
  8481  0663  0008               	return
  8482  0664                     l4136:	
  8483  0664  0858               	movf	setLED@led,w
  8484  0665  3A03               	xorlw	3
  8485  0666  1D03               	skipz
  8486  0667  0008               	return
  8487                           
  8488                           ;LED_B1.c: 211: PIRLED.GO3 = 1;
  8489  0668  15AC               	bsf	_PIRLED,3
  8490                           
  8491                           ;LED_B1.c: 212: }
  8492                           ;LED_B1.c: 213: } else if (command == 110) {
  8493  0669  0008               	return
  8494  066A                     l4140:	
  8495  066A  0857               	movf	setLED@command,w
  8496  066B  3A6E               	xorlw	110
  8497  066C  1D03               	skipz
  8498  066D  0008               	return
  8499                           
  8500                           ;LED_B1.c: 214: PIRLED.GO = 0;
  8501  066E  102C               	bcf	_PIRLED,0
  8502  066F  0008               	return
  8503  0670                     __end_of_setLED:	
  8504                           
  8505                           	psect	text55
  8506  0D9F                     __ptext55:	
  8507 ;; *************** function _LedPointSelect *****************
  8508 ;; Defined at:
  8509 ;;		line 7 in file "../src/LED_B1.c"
  8510 ;; Parameters:    Size  Location     Type
  8511 ;;  led             1    wreg     unsigned char 
  8512 ;; Auto vars:     Size  Location     Type
  8513 ;;  led             1    1[BANK0 ] unsigned char 
  8514 ;; Return value:  Size  Location     Type
  8515 ;;		None               void
  8516 ;; Registers used:
  8517 ;;		wreg
  8518 ;; Tracked objects:
  8519 ;;		On entry : 0/0
  8520 ;;		On exit  : 0/0
  8521 ;;		Unchanged: 0/0
  8522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8523 ;;      Params:         0       0       0       0
  8524 ;;      Locals:         0       1       0       0
  8525 ;;      Temps:          0       1       0       0
  8526 ;;      Totals:         0       2       0       0
  8527 ;;Total ram usage:        2 bytes
  8528 ;; Hardware stack levels used:    1
  8529 ;; Hardware stack levels required when called:    3
  8530 ;; This function calls:
  8531 ;;		Nothing
  8532 ;; This function is called by:
  8533 ;;		_setLED_Initialization
  8534 ;;		_setLED
  8535 ;;		_setLED_Main
  8536 ;; This function uses a non-reentrant model
  8537 ;;
  8538                           
  8539                           
  8540                           ;psect for function _LedPointSelect
  8541  0D9F                     _LedPointSelect:	
  8542                           
  8543                           ;incstack = 0
  8544                           ; Regs used in _LedPointSelect: [wreg]
  8545                           ;LedPointSelect@led stored from wreg
  8546  0D9F  1283               	bcf	3,5	;RP0=0, select bank0
  8547  0DA0  1303               	bcf	3,6	;RP1=0, select bank0
  8548  0DA1  00D6               	movwf	LedPointSelect@led
  8549                           
  8550                           ;LED_B1.c: 9: if (led == 1) {
  8551  0DA2  0856               	movf	LedPointSelect@led,w
  8552  0DA3  3A01               	xorlw	1
  8553  0DA4  1D03               	skipz
  8554  0DA5  2DAA               	goto	l232
  8555                           
  8556                           ;LED_B1.c: 10: LED = &VarLED1;
  8557  0DA6  304D               	movlw	_VarLED1& (0+255)
  8558  0DA7  00D5               	movwf	??_LedPointSelect
  8559  0DA8  0855               	movf	??_LedPointSelect,w
  8560  0DA9  00B3               	movwf	_LED
  8561  0DAA                     l232:	
  8562                           
  8563                           ;LED_B1.c: 11: }
  8564                           ;LED_B1.c: 14: if (led == 2) {
  8565  0DAA  0856               	movf	LedPointSelect@led,w
  8566  0DAB  3A02               	xorlw	2
  8567  0DAC  1D03               	skipz
  8568  0DAD  2DB2               	goto	l233
  8569                           
  8570                           ;LED_B1.c: 15: LED = &VarLED2;
  8571  0DAE  3051               	movlw	_VarLED2& (0+255)
  8572  0DAF  00D5               	movwf	??_LedPointSelect
  8573  0DB0  0855               	movf	??_LedPointSelect,w
  8574  0DB1  00B3               	movwf	_LED
  8575  0DB2                     l233:	
  8576                           
  8577                           ;LED_B1.c: 16: }
  8578                           ;LED_B1.c: 24: if (led == 99) {
  8579  0DB2  0856               	movf	LedPointSelect@led,w
  8580  0DB3  3A63               	xorlw	99
  8581  0DB4  1D03               	skipz
  8582  0DB5  0008               	return
  8583                           
  8584                           ;LED_B1.c: 25: LED = &VarErrLED;
  8585  0DB6  3049               	movlw	_VarErrLED& (0+255)
  8586  0DB7  00D5               	movwf	??_LedPointSelect
  8587  0DB8  0855               	movf	??_LedPointSelect,w
  8588  0DB9  00B3               	movwf	_LED
  8589  0DBA  0008               	return
  8590  0DBB                     __end_of_LedPointSelect:	
  8591                           
  8592                           	psect	text56
  8593  0EA2                     __ptext56:	
  8594 ;; *************** function _CDS_Main *****************
  8595 ;; Defined at:
  8596 ;;		line 11 in file "../src/CDS_B1.c"
  8597 ;; Parameters:    Size  Location     Type
  8598 ;;		None
  8599 ;; Auto vars:     Size  Location     Type
  8600 ;;		None
  8601 ;; Return value:  Size  Location     Type
  8602 ;;		None               void
  8603 ;; Registers used:
  8604 ;;		wreg, status,2, status,0
  8605 ;; Tracked objects:
  8606 ;;		On entry : 0/0
  8607 ;;		On exit  : 0/0
  8608 ;;		Unchanged: 0/0
  8609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8610 ;;      Params:         0       0       0       0
  8611 ;;      Locals:         0       0       0       0
  8612 ;;      Temps:          0       3       0       0
  8613 ;;      Totals:         0       3       0       0
  8614 ;;Total ram usage:        3 bytes
  8615 ;; Hardware stack levels used:    1
  8616 ;; Hardware stack levels required when called:    3
  8617 ;; This function calls:
  8618 ;;		Nothing
  8619 ;; This function is called by:
  8620 ;;		_main
  8621 ;; This function uses a non-reentrant model
  8622 ;;
  8623                           
  8624                           
  8625                           ;psect for function _CDS_Main
  8626  0EA2                     _CDS_Main:	
  8627                           
  8628                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  8629                           
  8630                           ;incstack = 0
  8631                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
  8632  0EA2  1283               	bcf	3,5	;RP0=0, select bank0
  8633  0EA3  1303               	bcf	3,6	;RP1=0, select bank0
  8634  0EA4  1C27               	btfss	__CDS,0
  8635  0EA5  0008               	return
  8636                           
  8637                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  8638  0EA6  18A7               	btfsc	__CDS,1
  8639  0EA7  2EB5               	goto	l105
  8640                           
  8641                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  8642  0EA8  19A7               	btfsc	__CDS,3
  8643  0EA9  0008               	return
  8644                           
  8645                           ;CDS_B1.c: 16: _CDS.Time++;
  8646  0EAA  3001               	movlw	1
  8647  0EAB  00D5               	movwf	??_CDS_Main
  8648  0EAC  0855               	movf	??_CDS_Main,w
  8649  0EAD  07A8               	addwf	__CDS+1,f
  8650                           
  8651                           ;CDS_B1.c: 17: if (_CDS.Time >= 10)
  8652  0EAE  300A               	movlw	10
  8653  0EAF  0228               	subwf	__CDS+1,w
  8654  0EB0  1C03               	skipc
  8655  0EB1  0008               	return
  8656                           
  8657                           ;CDS_B1.c: 18: {
  8658                           ;CDS_B1.c: 19: _CDS.Time = 0;
  8659  0EB2  01A8               	clrf	__CDS+1
  8660                           
  8661                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
  8662  0EB3  15A7               	bsf	__CDS,3
  8663                           
  8664                           ;CDS_B1.c: 21: }
  8665                           ;CDS_B1.c: 22: }
  8666                           ;CDS_B1.c: 23: } else {
  8667  0EB4  0008               	return
  8668  0EB5                     l105:	
  8669                           
  8670                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
  8671  0EB5  1CA7               	btfss	__CDS,1
  8672  0EB6  0008               	return
  8673                           
  8674                           ;CDS_B1.c: 25: _CDS.GO = 0;
  8675  0EB7  10A7               	bcf	__CDS,1
  8676                           
  8677                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
  8678  0EB8  1A27               	btfsc	__CDS,4
  8679  0EB9  2EC0               	goto	l3374
  8680                           
  8681                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
  8682  0EBA  0829               	movf	__CDS+2,w
  8683  0EBB  022A               	subwf	__CDS+3,w
  8684  0EBC  1C03               	skipc
  8685  0EBD  0008               	return
  8686                           
  8687                           ;CDS_B1.c: 28: _CDS.Status = 1;
  8688  0EBE  1627               	bsf	__CDS,4
  8689                           
  8690                           ;CDS_B1.c: 29: }
  8691                           ;CDS_B1.c: 30: } else {
  8692  0EBF  0008               	return
  8693  0EC0                     l3374:	
  8694                           
  8695                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  8696  0EC0  0829               	movf	__CDS+2,w
  8697  0EC1  3E9C               	addlw	156
  8698  0EC2  00D5               	movwf	??_CDS_Main
  8699  0EC3  30FF               	movlw	255
  8700  0EC4  1803               	skipnc
  8701  0EC5  3000               	movlw	0
  8702  0EC6  00D6               	movwf	??_CDS_Main+1
  8703  0EC7  0856               	movf	??_CDS_Main+1,w
  8704  0EC8  3A80               	xorlw	128
  8705  0EC9  00D7               	movwf	??_CDS_Main+2
  8706  0ECA  3080               	movlw	128
  8707  0ECB  0257               	subwf	??_CDS_Main+2,w
  8708  0ECC  1D03               	skipz
  8709  0ECD  2ED0               	goto	u3055
  8710  0ECE  082A               	movf	__CDS+3,w
  8711  0ECF  0255               	subwf	??_CDS_Main,w
  8712  0ED0                     u3055:	
  8713  0ED0  1C03               	skipc
  8714  0ED1  0008               	return
  8715                           
  8716                           ;CDS_B1.c: 32: _CDS.Status = 0;
  8717  0ED2  1283               	bcf	3,5	;RP0=0, select bank0
  8718  0ED3  1303               	bcf	3,6	;RP1=0, select bank0
  8719  0ED4  1227               	bcf	__CDS,4
  8720  0ED5  0008               	return
  8721  0ED6                     __end_of_CDS_Main:	
  8722                           
  8723                           	psect	text57
  8724  0BB8                     __ptext57:	
  8725 ;; *************** function _CDS_Initialization *****************
  8726 ;; Defined at:
  8727 ;;		line 7 in file "../src/CDS_B1.c"
  8728 ;; Parameters:    Size  Location     Type
  8729 ;;		None
  8730 ;; Auto vars:     Size  Location     Type
  8731 ;;		None
  8732 ;; Return value:  Size  Location     Type
  8733 ;;		None               void
  8734 ;; Registers used:
  8735 ;;		None
  8736 ;; Tracked objects:
  8737 ;;		On entry : 0/0
  8738 ;;		On exit  : 0/0
  8739 ;;		Unchanged: 0/0
  8740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8741 ;;      Params:         0       0       0       0
  8742 ;;      Locals:         0       0       0       0
  8743 ;;      Temps:          0       0       0       0
  8744 ;;      Totals:         0       0       0       0
  8745 ;;Total ram usage:        0 bytes
  8746 ;; Hardware stack levels used:    1
  8747 ;; Hardware stack levels required when called:    3
  8748 ;; This function calls:
  8749 ;;		Nothing
  8750 ;; This function is called by:
  8751 ;;		_main
  8752 ;; This function uses a non-reentrant model
  8753 ;;
  8754                           
  8755                           
  8756                           ;psect for function _CDS_Initialization
  8757  0BB8                     _CDS_Initialization:	
  8758                           
  8759                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  8760                           
  8761                           ;incstack = 0
  8762                           ; Regs used in _CDS_Initialization: []
  8763  0BB8  1283               	bcf	3,5	;RP0=0, select bank0
  8764  0BB9  1303               	bcf	3,6	;RP1=0, select bank0
  8765  0BBA  1427               	bsf	__CDS,0
  8766  0BBB  0008               	return
  8767  0BBC                     __end_of_CDS_Initialization:	
  8768                           
  8769                           	psect	text58
  8770  0CD2                     __ptext58:	
  8771 ;; *************** function _ISR *****************
  8772 ;; Defined at:
  8773 ;;		line 107 in file "../src/MCU_B1.c"
  8774 ;; Parameters:    Size  Location     Type
  8775 ;;		None
  8776 ;; Auto vars:     Size  Location     Type
  8777 ;;		None
  8778 ;; Return value:  Size  Location     Type
  8779 ;;		None               void
  8780 ;; Registers used:
  8781 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8782 ;; Tracked objects:
  8783 ;;		On entry : 0/0
  8784 ;;		On exit  : 0/0
  8785 ;;		Unchanged: 0/0
  8786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8787 ;;      Params:         0       0       0       0
  8788 ;;      Locals:         0       0       0       0
  8789 ;;      Temps:          4       0       0       0
  8790 ;;      Totals:         4       0       0       0
  8791 ;;Total ram usage:        4 bytes
  8792 ;; Hardware stack levels used:    1
  8793 ;; Hardware stack levels required when called:    2
  8794 ;; This function calls:
  8795 ;;		_TMR1_ISR
  8796 ;;		_UART_ISR
  8797 ;; This function is called by:
  8798 ;;		Interrupt level 1
  8799 ;; This function uses a non-reentrant model
  8800 ;;
  8801                           
  8802                           
  8803                           ;psect for function _ISR
  8804  0CD2                     _ISR:	
  8805                           
  8806                           ;MCU_B1.c: 109: ;;
  8807                           ;MCU_B1.c: 111: ;;
  8808                           ;MCU_B1.c: 113: TMR1_ISR();
  8809  0CD2  158A  2583  158A   	fcall	_TMR1_ISR
  8810                           
  8811                           ;MCU_B1.c: 115: ;;
  8812                           ;MCU_B1.c: 117: ;;
  8813                           ;MCU_B1.c: 119: UART_ISR();
  8814  0CD5  158A  26D6  158A   	fcall	_UART_ISR
  8815  0CD8  0876               	movf	??_ISR+3,w
  8816  0CD9  1283               	bcf	3,5	;RP0=0, select bank0
  8817  0CDA  1303               	bcf	3,6	;RP1=0, select bank0
  8818  0CDB  00FF               	movwf	127
  8819  0CDC  0875               	movf	??_ISR+2,w
  8820  0CDD  008A               	movwf	10
  8821  0CDE  0874               	movf	??_ISR+1,w
  8822  0CDF  0084               	movwf	4
  8823  0CE0  0E73               	swapf	??_ISR^(0+-128),w
  8824  0CE1  0083               	movwf	3
  8825  0CE2  0EFE               	swapf	126,f
  8826  0CE3  0E7E               	swapf	126,w
  8827  0CE4  0009               	retfie
  8828  0CE5                     __end_of_ISR:	
  8829                           
  8830                           	psect	intentry
  8831  0004                     __pintentry:	
  8832                           ;incstack = 0
  8833                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8834                           
  8835  0004                     interrupt_function:	
  8836  007E                     saved_w	set	btemp
  8837  0004  00FE               	movwf	btemp
  8838  0005  0E03               	swapf	3,w
  8839  0006  00F3               	movwf	??_ISR
  8840  0007  0804               	movf	4,w
  8841  0008  00F4               	movwf	??_ISR+1
  8842  0009  080A               	movf	10,w
  8843  000A  00F5               	movwf	??_ISR+2
  8844  000B  1283               	bcf	3,5	;RP0=0, select bank0
  8845  000C  1303               	bcf	3,6	;RP1=0, select bank0
  8846  000D  087F               	movf	btemp+1,w
  8847  000E  00F6               	movwf	??_ISR+3
  8848  000F  158A  2CD2         	ljmp	_ISR
  8849                           
  8850                           	psect	text59
  8851  0ED6                     __ptext59:	
  8852 ;; *************** function _UART_ISR *****************
  8853 ;; Defined at:
  8854 ;;		line 740 in file "../src/MCU_B1.c"
  8855 ;; Parameters:    Size  Location     Type
  8856 ;;		None
  8857 ;; Auto vars:     Size  Location     Type
  8858 ;;  i               2    1[COMMON] int 
  8859 ;; Return value:  Size  Location     Type
  8860 ;;		None               void
  8861 ;; Registers used:
  8862 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8863 ;; Tracked objects:
  8864 ;;		On entry : 0/0
  8865 ;;		On exit  : 0/0
  8866 ;;		Unchanged: 0/0
  8867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8868 ;;      Params:         0       0       0       0
  8869 ;;      Locals:         2       0       0       0
  8870 ;;      Temps:          1       0       0       0
  8871 ;;      Totals:         3       0       0       0
  8872 ;;Total ram usage:        3 bytes
  8873 ;; Hardware stack levels used:    1
  8874 ;; Hardware stack levels required when called:    1
  8875 ;; This function calls:
  8876 ;;		_getch
  8877 ;; This function is called by:
  8878 ;;		_ISR
  8879 ;; This function uses a non-reentrant model
  8880 ;;
  8881                           
  8882                           
  8883                           ;psect for function _UART_ISR
  8884  0ED6                     _UART_ISR:	
  8885                           
  8886                           ;MCU_B1.c: 741: if (RCIE == 1 && RCIF == 1) {
  8887                           
  8888                           ;incstack = 0
  8889                           ; Regs used in _UART_ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8890  0ED6  1683               	bsf	3,5	;RP0=1, select bank1
  8891  0ED7  1303               	bcf	3,6	;RP1=0, select bank1
  8892  0ED8  1E8C               	btfss	12,5	;volatile
  8893  0ED9  0008               	return
  8894  0EDA  1283               	bcf	3,5	;RP0=0, select bank0
  8895  0EDB  1303               	bcf	3,6	;RP1=0, select bank0
  8896  0EDC  1E8C               	btfss	12,5	;volatile
  8897  0EDD  0008               	return
  8898                           
  8899                           ;MCU_B1.c: 743: for (int i = 0; i < 8; i++) {
  8900  0EDE  01F1               	clrf	UART_ISR@i
  8901  0EDF  01F2               	clrf	UART_ISR@i+1
  8902  0EE0  0872               	movf	UART_ISR@i+1,w
  8903  0EE1  3A80               	xorlw	128
  8904  0EE2  00FF               	movwf	127
  8905  0EE3  3080               	movlw	128
  8906  0EE4  027F               	subwf	127,w
  8907  0EE5  1D03               	skipz
  8908  0EE6  2EE9               	goto	u312_25
  8909  0EE7  3008               	movlw	8
  8910  0EE8  0271               	subwf	UART_ISR@i,w
  8911  0EE9                     u312_25:	
  8912  0EE9  1803               	btfsc	3,0
  8913  0EEA  2F06               	goto	i1l472
  8914  0EEB                     i1l3418:	
  8915                           
  8916                           ;MCU_B1.c: 744: UART.Data[i] = getch();
  8917  0EEB  158A  23C9  158A   	fcall	_getch
  8918  0EEE  00F0               	movwf	??_UART_ISR
  8919  0EEF  0871               	movf	UART_ISR@i,w
  8920  0EF0  3E36               	addlw	_UART& (0+255)
  8921  0EF1  0084               	movwf	4
  8922  0EF2  0870               	movf	??_UART_ISR,w
  8923  0EF3  1383               	bcf	3,7	;select IRP bank0
  8924  0EF4  0080               	movwf	0
  8925  0EF5  3001               	movlw	1
  8926  0EF6  07F1               	addwf	UART_ISR@i,f
  8927  0EF7  1803               	skipnc
  8928  0EF8  0AF2               	incf	UART_ISR@i+1,f
  8929  0EF9  3000               	movlw	0
  8930  0EFA  07F2               	addwf	UART_ISR@i+1,f
  8931  0EFB  0872               	movf	UART_ISR@i+1,w
  8932  0EFC  3A80               	xorlw	128
  8933  0EFD  00FF               	movwf	127
  8934  0EFE  3080               	movlw	128
  8935  0EFF  027F               	subwf	127,w
  8936  0F00  1D03               	skipz
  8937  0F01  2F04               	goto	u313_25
  8938  0F02  3008               	movlw	8
  8939  0F03  0271               	subwf	UART_ISR@i,w
  8940  0F04                     u313_25:	
  8941  0F04  1C03               	skipc
  8942  0F05  2EEB               	goto	i1l3418
  8943  0F06                     i1l472:	
  8944                           
  8945                           ;MCU_B1.c: 745: }
  8946                           ;MCU_B1.c: 746: UART.RxGO = 1;
  8947  0F06  1283               	bcf	3,5	;RP0=0, select bank0
  8948  0F07  1303               	bcf	3,6	;RP1=0, select bank0
  8949  0F08  14C1               	bsf	_UART+11,1
  8950                           
  8951                           ;MCU_B1.c: 753: RCIF = 0;
  8952  0F09  128C               	bcf	12,5	;volatile
  8953  0F0A  0008               	return
  8954  0F0B                     __end_of_UART_ISR:	
  8955                           
  8956                           	psect	text60
  8957  0BC9                     __ptext60:	
  8958 ;; *************** function _getch *****************
  8959 ;; Defined at:
  8960 ;;		line 864 in file "../src/MCU_B1.c"
  8961 ;; Parameters:    Size  Location     Type
  8962 ;;		None
  8963 ;; Auto vars:     Size  Location     Type
  8964 ;;		None
  8965 ;; Return value:  Size  Location     Type
  8966 ;;                  1    wreg      unsigned char 
  8967 ;; Registers used:
  8968 ;;		wreg
  8969 ;; Tracked objects:
  8970 ;;		On entry : 0/0
  8971 ;;		On exit  : 0/0
  8972 ;;		Unchanged: 0/0
  8973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8974 ;;      Params:         0       0       0       0
  8975 ;;      Locals:         0       0       0       0
  8976 ;;      Temps:          0       0       0       0
  8977 ;;      Totals:         0       0       0       0
  8978 ;;Total ram usage:        0 bytes
  8979 ;; Hardware stack levels used:    1
  8980 ;; This function calls:
  8981 ;;		Nothing
  8982 ;; This function is called by:
  8983 ;;		_UART_ISR
  8984 ;;		_getche
  8985 ;; This function uses a non-reentrant model
  8986 ;;
  8987                           
  8988                           
  8989                           ;psect for function _getch
  8990  0BC9                     _getch:	
  8991  0BC9                     i1l500:	
  8992                           ;MCU_B1.c: 867: continue;
  8993                           
  8994                           ;MCU_B1.c: 866: while (!RCIF)
  8995                           
  8996                           ;incstack = 0
  8997                           ; Regs used in _getch: [wreg]
  8998                           
  8999  0BC9  1283               	bcf	3,5	;RP0=0, select bank0
  9000  0BCA  1303               	bcf	3,6	;RP1=0, select bank0
  9001  0BCB  1E8C               	btfss	12,5	;volatile
  9002  0BCC  2BC9               	goto	i1l500
  9003                           
  9004                           ;MCU_B1.c: 868: return RCREG;
  9005  0BCD  081A               	movf	26,w	;volatile
  9006  0BCE  0008               	return
  9007  0BCF                     __end_of_getch:	
  9008                           
  9009                           	psect	text61
  9010  0D83                     __ptext61:	
  9011 ;; *************** function _TMR1_ISR *****************
  9012 ;; Defined at:
  9013 ;;		line 209 in file "../src/MCU_B1.c"
  9014 ;; Parameters:    Size  Location     Type
  9015 ;;		None
  9016 ;; Auto vars:     Size  Location     Type
  9017 ;;		None
  9018 ;; Return value:  Size  Location     Type
  9019 ;;		None               void
  9020 ;; Registers used:
  9021 ;;		wreg, status,2
  9022 ;; Tracked objects:
  9023 ;;		On entry : 0/0
  9024 ;;		On exit  : 0/0
  9025 ;;		Unchanged: 0/0
  9026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9027 ;;      Params:         0       0       0       0
  9028 ;;      Locals:         0       0       0       0
  9029 ;;      Temps:          0       0       0       0
  9030 ;;      Totals:         0       0       0       0
  9031 ;;Total ram usage:        0 bytes
  9032 ;; Hardware stack levels used:    1
  9033 ;; This function calls:
  9034 ;;		Nothing
  9035 ;; This function is called by:
  9036 ;;		_ISR
  9037 ;; This function uses a non-reentrant model
  9038 ;;
  9039                           
  9040                           
  9041                           ;psect for function _TMR1_ISR
  9042  0D83                     _TMR1_ISR:	
  9043                           
  9044                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
  9045                           
  9046                           ;incstack = 0
  9047                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  9048  0D83  1683               	bsf	3,5	;RP0=1, select bank1
  9049  0D84  1303               	bcf	3,6	;RP1=0, select bank1
  9050  0D85  1C0C               	btfss	12,0	;volatile
  9051  0D86  0008               	return
  9052  0D87  1283               	bcf	3,5	;RP0=0, select bank0
  9053  0D88  1303               	bcf	3,6	;RP1=0, select bank0
  9054  0D89  1C0C               	btfss	12,0	;volatile
  9055  0D8A  0008               	return
  9056                           
  9057                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
  9058  0D8B  30FA               	movlw	250
  9059  0D8C  008F               	movwf	15	;volatile
  9060                           
  9061                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
  9062  0D8D  3038               	movlw	56
  9063  0D8E  008E               	movwf	14	;volatile
  9064                           
  9065                           ;MCU_B1.c: 214: TMR1IF = 0;
  9066  0D8F  100C               	bcf	12,0	;volatile
  9067                           
  9068                           ;MCU_B1.c: 234: Timer1.Count++;
  9069  0D90  3001               	movlw	1
  9070  0D91  07B1               	addwf	_Timer1+1,f
  9071  0D92  1803               	skipnc
  9072  0D93  0AB2               	incf	_Timer1+2,f
  9073  0D94  3000               	movlw	0
  9074  0D95  07B2               	addwf	_Timer1+2,f
  9075                           
  9076                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
  9077  0D96  3064               	movlw	100
  9078  0D97  0631               	xorwf	_Timer1+1,w
  9079  0D98  0432               	iorwf	_Timer1+2,w
  9080  0D99  1D03               	skipz
  9081  0D9A  0008               	return
  9082                           
  9083                           ;MCU_B1.c: 236: {
  9084                           ;MCU_B1.c: 237: Timer1.Count = 0;
  9085  0D9B  01B1               	clrf	_Timer1+1
  9086  0D9C  01B2               	clrf	_Timer1+2
  9087                           
  9088                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
  9089  0D9D  1430               	bsf	_Timer1,0
  9090  0D9E  0008               	return
  9091  0D9F                     __end_of_TMR1_ISR:	
  9092  007E                     btemp	set	126	;btemp
  9093  007E                     wtemp	set	126
  9094  007E                     wtemp0	set	126
  9095  0080                     wtemp1	set	128
  9096  0082                     wtemp2	set	130
  9097  0084                     wtemp3	set	132
  9098  0086                     wtemp4	set	134
  9099  0088                     wtemp5	set	136
  9100  007F                     wtemp6	set	127
  9101  007E                     ttemp	set	126
  9102  007E                     ttemp0	set	126
  9103  0081                     ttemp1	set	129
  9104  0084                     ttemp2	set	132
  9105  0087                     ttemp3	set	135
  9106  007F                     ttemp4	set	127
  9107  007E                     ltemp	set	126
  9108  007E                     ltemp0	set	126
  9109  0082                     ltemp1	set	130
  9110  0086                     ltemp2	set	134
  9111  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         135
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80     25      78
    BANK1            80      0      79
    BANK2            16      0       0

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 7
		 -> NULL(NULL[0]), Lights1(BANK0[7]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK0[4]), VarLED2(BANK0[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_UART_ISR

Critical Paths under _main in BANK0

    _main->_PIR_Main
    _getPIR_AD->___awdiv
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _UART_Main->_UART_Transmit
    _UART_Transmit->_putch
    _PIR_Main->_setMain_Exception
    _setMain_Exception->_setLights_Trigger
    _setLights_Trigger->_LightsPointSelect
    _getAll_Lights_Line->_LightsPointSelect
    _PIR_Initialization->_setLED
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getLightsControl_OK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _Lights_Main->_setLights_Main
    _setLights_Main->_setLights
    _setLights->_getMain_All_Error_Status
    _setLights_Line->_LightsPointSelect
    _getMain_All_Error_Status->_getCDS_Status
    _Lights_Control->_LightsPointSelect
    _Lights_Close->_getMain_LightsStatus
    _getMain_LightsStatus->_getLights_Status
    _getLights_Status->_LightsPointSelect
    _Lights_Initialization->_setLights_Initialization
    _setLights_Initialization->_LightsPointSelect
    _LED_Main->_setPIRLED_Main
    _setPIRLED_Main->_setLED
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _setLED->_LedPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   21503
                                             20 BANK0      5     1      4
                 _CDS_Initialization
                           _CDS_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                          _UART_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0       0
                       _UART_SetData
 ---------------------------------------------------------------------------------
 (2) _UART_SetData                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            7     6      1    1948
                                              9 BANK0      7     6      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     518
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     981
                                              2 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     754
                                              2 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     582
                                              0 BANK0      2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Main                                            0     0      0     130
                       _UART_Receive
                      _UART_Transmit
 ---------------------------------------------------------------------------------
 (2) _UART_Transmit                                        2     2      0     130
                                              1 BANK0      2     2      0
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _UART_Receive                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                             8     8      0    6680
                                             12 BANK0      8     8      0
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                  _setLights_Trigger
                  _setMain_Exception
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    3255
                                              5 BANK0      7     7      0
                 _getAll_Lights_Line
                             _setLED
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _setLights_Trigger                                    3     2      1     333
                                              2 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getAll_Lights_Line                                   1     1      0      59
                                              2 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0    2631
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                           _UART_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _UART_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0    1037
                                              9 BANK0      7     7      0
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      71
                                              1 BANK0      2     2      0
                _getLightsControl_OK
 ---------------------------------------------------------------------------------
 (3) _getLightsControl_OK                                  1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 5     5      0      72
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          5     5      0    1769
                                             12 BANK0      5     5      0
                       _Lights_Close
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0     794
                                             11 BANK0      1     1      0
                  _LightsPointSelect
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1     679
                                              8 BANK0      3     2      1
                  _LightsPointSelect
           _getMain_All_Error_Status
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      53
                                              2 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getMain_All_Error_Status                             7     7      0     272
                                              1 BANK0      7     7      0
                      _getCDS_Status
 ---------------------------------------------------------------------------------
 (3) _getCDS_Status                                        1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       5     5      0     112
                                              2 BANK0      5     5      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Lights_Close                                         1     1      0     260
                                              9 BANK0      1     1      0
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 5     5      0     260
                                              4 BANK0      5     5      0
                   _getLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLights_Status                                     2     2      0      87
                                              2 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      53
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      53
                                              2 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _LightsPointSelect                                    2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0    2671
                     _setPIRLED_Main
 ---------------------------------------------------------------------------------
 (2) _setPIRLED_Main                                       2     2      0    2671
                                              4 BANK0      2     2      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    2759
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    2759
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    2631
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0      68
                                              3 COMMON     4     4      0
                           _TMR1_ISR
                           _UART_ISR
 ---------------------------------------------------------------------------------
 (7) _UART_ISR                                             3     3      0      68
                                              0 COMMON     3     3      0
                              _getch
 ---------------------------------------------------------------------------------
 (8) _getch                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setPIRLED_Main
       _setLED
         _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Close
       _getMain_LightsStatus
         _getLights_Status
           _LightsPointSelect
     _Lights_Control
       _LightsPointSelect
     _getLoad_OK
     _getMain_All_Error_Status
       _getCDS_Status
     _getMain_LightsStatus
       _getLights_Status
         _LightsPointSelect
     _setLights_Main
       _LightsPointSelect
       _setLights
         _LightsPointSelect
         _getMain_All_Error_Status
           _getCDS_Status
         _setLights_Line
           _LightsPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getMain_All_Error_Status
       _getCDS_Status
     _getMain_LightsStatus
       _getLights_Status
         _LightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getLightsControl_OK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _UART_Set
     _WDT_Set
   _PIR_Initialization
     _setLED
       _LedPointSelect
   _PIR_Main
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
       _getCDS_Status
     _setLED
       _LedPointSelect
     _setLights_Trigger
       _LightsPointSelect
     _setMain_Exception
       _getAll_Lights_Line
         _LightsPointSelect
       _setLED
         _LedPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _UART_Main
     _UART_Receive
     _UART_Transmit
       _putch
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _UART_SetData

 _ISR (ROOT)
   _TMR1_ISR
   _UART_ISR
     _getch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      A7       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     19      4E       5       97.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       0       9        0.0%
DATA                 0      0      A7      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Dec 03 16:16:46 2014

                     _WDT_Clearing 0002          getMain_Lights_Count@count 0056  
                     ___awdiv@sign 005B                                 fsr 0004  
                              l105 0EB5                                l232 0DAA  
                              l233 0DB2                                l731 03DB  
                              l476 0C65                                l741 02F0  
                              l734 0245                                l494 0BFC  
                              l663 0F40                                l735 0380  
                              l736 037E                                l658 0F24  
                              l659 0F44                                l863 0080  
                              l864 0096                                l857 0204  
                              l858 0051                                _GIE 005F  
                              _RB2 0032                                _RA4 002C  
                              _LED 0033                                _RB3 0033  
                              _RB4 0034                                _RB5 0035  
                              _PS0 0408                                _PS1 0409  
                              _PS2 040A                                _ISR 0CD2  
                              _PSA 040B                                _RX9 00C6  
                              _WDT 0077                                _TX9 04C6  
           getAll_Lights_Line@line 0057                                fsr0 0004  
                              indf 0000                    __end_of_ADC_Set 0BE9  
        __end_of_LightsPointSelect 0C33             _setMain_Exception$2310 005E  
                 _getLights_Status 0C7B            __size_of_Lights_Control 006D  
                             ?_ISR 0070                         Load_Main@i 0064  
                       Load_Main@j 0060                               l1147 0F73  
                             l4102 063C                               l4110 0644  
                             l4114 064C                               l4106 0640  
                             l4042 0F1F                               l4202 071B  
                             l3322 0794                               l3314 0781  
                             l3306 075D                               l4132 065E  
                             l4140 066A                               l3260 06AA  
                             l4052 0F3A                               l4044 0F28  
                             l4220 0DD1                               l3308 076B  
                             l4070 0610                               l4206 0736  
                             l4214 0DC8                               l3318 078C  
                             l4136 0664                               l3272 06CF  
                             l4216 0DCB                               l3344 0FEE  
                             l3336 0FCA                               l4250 05BB  
                             l3290 074A                               l3338 0FD8  
                   _Load_Main$2589 0062                               l4084 0621  
                             l4092 0629                               l4260 05CD  
                             l4180 0E9E                               l3348 0FF9  
                             l3374 0EC0                               l4078 0618  
                             l4262 05D9                               l4254 05C1  
                             l4246 05B5                               l4350 0FA2  
                             l4342 0F8E                               l4510 044A  
                             l4502 043C                               l4264 05E1  
                             l4176 0E97                               l3296 0755  
                             l4512 044E                               l4520 0468  
                             l4266 05EF                               l4178 0E79  
                             l4602 0231                               l4354 0FAA  
                             l4514 0452                               l4506 0442  
                             l4356 0FB4                               l4508 0446  
                             l4622 0263                               l4470 0564  
                             l4550 04E1                               l4534 0497  
                             l4518 0457                               l4544 04C5  
                             l4528 047B                               l4466 055B  
                             l4458 053F                               l4388 0E40  
                             l4652 02DD                               l4628 0294  
                             l4900 01A9                               l4564 051B  
                             l4902 01B8                               l4486 0588  
                             l4558 050D                               l4752 03C6  
                             l4680 0338                               l4912 01D4  
                             l4576 0E0D                               l4658 02E9  
                             l4850 00B8                               l4818 0083  
                             l4772 0F6A                               l4774 0F6E  
                             l4862 00CF                               l4776 0F76  
                             l4960 07CD                               l4952 07B1  
                             l4866 00DB                               l4868 00DC  
                             l4886 013E                               l4878 012A  
                             l4896 0175              _myMain_Initialization 0BB4  
                     __CFG_WDTE$ON 0000                               u3055 0ED0  
                             u5105 029E                               u5115 02AF  
                             u4405 0E82                               u2750 06A6  
                             _PEIE 005E                               u4540 05D6  
                             u2845 0760                               u2925 0FCD  
                             u5175 0303                               u5095 0297  
                             u4375 0D07                               u4560 05EC  
                             u5505 00FC                               u2865 076C  
                             u2945 0FD9                               u5515 0120  
                             u2875 0778                               u2955 0FE5  
                             _RCIE 0465                               _RCIF 0065  
                             u5605 01F1                               u2885 0782  
                             u2965 0FEF                               u5535 015C  
                             u5555 019B                               u4595 0DE4  
                             u5575 01C8                               _UART 0036  
                             _TXIE 0464                               _TXIF 0064  
                             __CDS 0027                               __PIR 00A0  
                             _Load 00CF                               _main 079B  
                             btemp 007E                    __end_of_WDT_Set 0C5D  
                             ltemp 007E                               start 0011  
                             ttemp 007E                               wtemp 007E  
                 __end_of_CDS_Main 0ED6                              ??_ISR 0073  
                _setLights_Trigger 0D68                      ??_Lights_Main 0061  
                    __CFG_PLLEN$ON 0000                   __end_of_LED_Main 0BB8  
               ?_setLights_Trigger 0057                   ??_setPIRLED_Main 0059  
                            ?_main 0069                    __end_of___awdiv 079B  
                            _ADRES 001E                    ___awdiv@divisor 0055  
                            _T1CON 0010                    __end_of___lwdiv 1000  
                    ?_Lights_Close 0070                              i1l500 0BC9  
                            i1l472 0F06                    ___awdiv@counter 005A  
                            _RCREG 001A                              _RCSTA 0018  
                            _TMR1H 000F                              _TMR1L 000E  
                            _SPBRG 0099                              _PORTA 0005  
                            _PORTB 0006                              _PORTC 0007  
                            _TRISA 0085                              _TRISB 0086  
                            _TRISC 0087                              _TXREG 0019  
                            _TXSTA 0098               setMain_Exception@buz 005C  
          __end_of_Timeout_Counter 0D0D                   __end_of_UART_ISR 0F0B  
               __size_of_UART_Main 000E                ??_setLights_Trigger 0058  
                 __end_of_PIR_Main 020C                   __end_of_TMR1_ISR 0D9F  
                 __end_of_UART_Set 0D68                   __end_of_TMR1_Set 0C4F  
                            _getAD 0DBB                              _getch 0BC9  
                            _putch 0BF9                   __end_of_WDT_Main 0800  
                    _LightsControl 0035                     __CFG_BOREN$OFF 0000  
     __end_of_getMain_Lights_Count 0C9D                              pclath 000A  
                            ltemp0 007E                              ltemp1 0082  
                            ltemp2 0086                              ltemp3 0080  
   __size_of_setLED_Initialization 0012       __end_of_getMain_LightsStatus 0EA2  
    __end_of_setLED_Initialization 0CC0                              ttemp0 007E  
                            ttemp1 0081                              ttemp2 0084  
                            ttemp3 0087                              ttemp4 007F  
                            status 0003                              wtemp0 007E  
                            wtemp1 0080                              wtemp2 0082  
                            wtemp3 0084                              wtemp4 0086  
                            wtemp5 0088                              wtemp6 007F  
                getPIR_AD@channel1 0063                  getPIR_AD@channel2 005E  
           ?_setLoad_AH_AL_Restore 0070                     _setLights_Main 0E1F  
                   _setLights_Line 0C33                    __initialization 0013  
        __end_of_setLights_Trigger 0D83                       __end_of_main 07EF  
                 __end_of_Fosc_Set 0BC9                          ??_ADC_Set 0055  
                           ??_main 006D                     ??_Lights_Close 005E  
              __end_of_Lights_Main 0F81         __size_of_LightsPointSelect 000C  
                           ?_getAD 0055             ?_myMain_Initialization 0070  
                           ?_getch 0070                             _ADCON0 001F  
                           _ADCON1 009F                   ___awdiv@dividend 0057  
                        ??_WDT_Set 0055                             _ANSELA 0185  
                           ?_putch 0070                             _ANSELB 0186  
         _getMain_All_Error_Status 0F0B                             i1l3418 0EEB  
                           u312_25 0EE9                             u313_25 0F04  
                           _FVRCON 009D             getLights_Status@lights 0057  
                           _PIRLED 002C                             _OSCCON 0090  
               __size_of_Load_Main 01D7                             _TMR1IE 0460  
                           _TMR1IF 0060                             _IO_Set 0D22  
                           _TRISC6 043E                             _TRISC7 043F  
           getLights_Status@status 0058             __end_of_setLights_Main 0E47  
           __end_of_setLights_Line 0C41                _getLightsControl_OK 0BF1  
       __end_of_Mcu_Initialization 0CD2                             _Lights 0034  
                           _Timer1 0030                  __end_of_UART_Main 0C6B  
      __size_of_CDS_Initialization 0004            ??_Lights_Initialization 0058  
                        ??___awdiv 0059                          ??___lwdiv 0059  
                           _setLED 05FF                             _myMain 0020  
                 ___awdiv@quotient 005C        __end_of_Load_Initialization 0BD5  
             ?_getLightsControl_OK 0070                             saved_w 007E  
                 ?_Timeout_Counter 0070        getMain_Lights_Count@status1 0059  
      getMain_Lights_Count@status2 0057        getMain_Lights_Count@status3 0058  
                   _Lights_Control 0670            __size_of_LedPointSelect 001C  
                        ?_CDS_Main 0070            __size_of_getMain_LoadOK 0010  
      __size_of_PIR_Initialization 0014         getMain_LightsStatus@status 005D  
          __end_of__initialization 0022                          ?_LED_Main 0070  
                    ?_my_MainTimer 0070                    ?_setLights_Main 0070  
                  ?_setLights_Line 0070              __end_of_UART_Transmit 0DF9  
       __size_of_setLights_Trigger 001B                     __pcstackCOMMON 0070  
               __size_of_getCDS_AD 002A                          ?_UART_ISR 0070  
         __end_of_getLights_Status 0C8C                      __end_of_getAD 0DD7  
                        ?_PIR_Main 0070                          ?_TMR1_ISR 0070  
                        ?_UART_Set 0070                      __end_of_getch 0BCF  
                        ?_TMR1_Set 0070             setLoad_AH_AL_Restore@i 0056  
               _LED_Initialization 0C1B                 __size_of_getPIR_AD 013A  
                      _Lights_Main 0F46                      __end_of_putch 0C01  
         _setLights_Initialization 0BDB               _getMain_Lights_Count 0C8C  
                        ?_WDT_Main 0070                  __end_of_Load_Main 03E3  
            ??_getLightsControl_OK 0055               _getMain_LightsStatus 0E71  
       __end_of_set_TimeoutCleared 0BDB                ?_LED_Initialization 0070  
           __end_of_Lights_Control 06DD              getMain_LightsStatus@i 005B  
                          ??_getAD 0056                            ??_getch 0070  
                       ??_CDS_Main 0055                            ??_putch 0055  
                       __pbssBANK0 0020                         __pbssBANK1 00A0  
                        ?_Fosc_Set 0070        __size_of_getAll_Lights_Line 0011  
                          ?_IO_Set 0070                    __CFG_VCAPEN$DIS 0000  
                   ??_my_MainTimer 0055                         ??_LED_Main 005B  
             __end_of_Lights_Close 0D22          getMain_LightsStatus@count 005A  
             ??_LED_Initialization 005A                  LedPointSelect@led 0056  
                       __pmaintext 079B                         ??_UART_ISR 0070  
                       ??_PIR_Main 0061                         ??_TMR1_ISR 0070  
                       ??_UART_Set 0055                 __size_of_setLights 0061  
                       _getLoad_AD 051D                         ??_TMR1_Set 0055  
                       __pintentry 0004                         _getLoad_OK 0C11  
                          ?_setLED 0057            setLights_Trigger@lights 0059  
            ?_getMain_Lights_Count 0070                          UART_ISR@i 0071  
                          _ADC_Set 0BE2                         ??_WDT_Main 0055  
            ?_getMain_LightsStatus 0070             __size_of_getCDS_Status 0008  
                  ?_Lights_Control 0070                  __end_of_getCDS_AD 0E71  
                          _WDT_Set 0C4F                         ??_Fosc_Set 0055  
                __end_of_getPIR_AD 051D            ??_setLoad_AH_AL_Restore 0055  
                    ?_UART_Receive 0070                      ?_UART_SetData 0070  
                  __size_of_IO_Set 0015                         getCDS_AD@i 005A  
                       getCDS_AD@j 005B                            _Lights1 0042  
                          _VarLED1 004D                            _VarLED2 0051  
                          ___awdiv 073E          getLightsControl_OK@loadok 0055  
                          ___lwdiv 0FC0                    __size_of_setLED 0071  
                          __ptext0 0000                            __ptext1 0DF9  
                          __ptext2 0C01                            __ptext3 0BB4  
                          __ptext4 03E3                            __ptext5 0FC0  
                          __ptext6 073E                            __ptext7 051D  
                          __ptext8 0E47                            __ptext9 0DBB  
                       getPIR_AD@i 0064                         getPIR_AD@j 0062  
                     __size_of_ISR 0013         ??_getMain_All_Error_Status 0056  
          ??_myMain_Initialization 0055                     _LedPointSelect 0D9F  
                   _getMain_LoadOK 0C6B                            clrloop0 0C0A  
                __end_of_setLights 073E               end_of_initialization 0022  
                   ??_UART_Receive 0055                     ??_UART_SetData 0055  
                    _getCDS_Status 0BE9                     UART_Transmit@i 0056  
            _setLED_Initialization 0CAE                        ?_getLoad_AD 0070  
   __size_of_Lights_Initialization 0004                        ?_getLoad_OK 0070  
           ??_getMain_Lights_Count 0055      __end_of_Lights_Initialization 0BC0  
           ??_getMain_LightsStatus 0059                          _UART_Main 0C5D  
         setLED_Initialization@led 0059                 _Mcu_Initialization 0CC0  
             __end_of_my_MainTimer 0E1F             __end_of_LedPointSelect 0DBB  
           __end_of_getMain_LoadOK 0C7B                setPIRLED_Main@count 005A  
              ?_Mcu_Initialization 0070              __size_of_Lights_Close 0015  
          __size_of_setPIRLED_Main 0071                   ??_setLights_Main 0060  
                 ??_setLights_Line 0057               setLights_Main@lights 0060  
  getMain_All_Error_Status@command 005B                  __size_of_CDS_Main 0034  
                   ?_getCDS_Status 0070                     __end_of_IO_Set 0D37  
       __end_of_CDS_Initialization 0BBC         ??_setLights_Initialization 0057  
                __size_of_LED_Main 0003                  _setMain_Exception 0F81  
             ??_Mcu_Initialization 0056                      ?_WDT_Clearing 0070  
               ?_setMain_Exception 0070                  ?_getLights_Status 0070  
         setMain_Exception@command 0060                       ?_Lights_Main 0070  
                       ?_UART_Main 0070                  __size_of_UART_ISR 0035  
                __size_of_PIR_Main 01E7                  __size_of_TMR1_ISR 001C  
               ??_getLights_Status 0057                  __size_of_UART_Set 0019  
                __size_of_TMR1_Set 000E                     __end_of_setLED 0670  
              ??_setMain_Exception 005A                       _Lights_Close 0D0D  
                __size_of_WDT_Main 0011                _Lights_Control$4487 0059  
              start_initialization 0013                    ?_LedPointSelect 0070  
             setLights_Line@lights 0057                          _Load_Main 020C  
                      __end_of_ISR 0CE5                    ?_getMain_LoadOK 0070  
       __end_of_PIR_Initialization 0CF9       __size_of_Load_Initialization 0006  
              getCDS_Status@status 0055                __size_of_getLoad_AD 0071  
              __size_of_getLoad_OK 000A                 _set_TimeoutCleared 0BD5  
                         ??_IO_Set 0055           __size_of_Timeout_Counter 0014  
                        _VarErrLED 0049             ?_setLED_Initialization 0070  
                __size_of_Fosc_Set 0005          __end_of_setMain_Exception 0FC0  
                  setLights@lights 005F                ?_set_TimeoutCleared 0070  
                   ??_WDT_Clearing 0055                    setLights@status 005D  
      __end_of_getLightsControl_OK 0BF9                           ??_setLED 0058  
                         ?_ADC_Set 0070                   ??_Lights_Control 0057  
             __end_of_UART_Receive 0BC4   __end_of_getMain_All_Error_Status 0F46  
             __end_of_UART_SetData 0C09                        __pbssCOMMON 0077  
                        ___latbits 0001                         ?_Load_Main 0070  
           __size_of_UART_Transmit 0022                      __pcstackBANK0 0055  
             ??_set_TimeoutCleared 0055         __end_of_getAll_Lights_Line 0CAE  
                         ?_WDT_Set 0070                    ??_getCDS_Status 0055  
                    PIR_Main@error 0068                          _getCDS_AD 0E47  
   __size_of_setLoad_AH_AL_Restore 0018      __end_of_setLoad_AH_AL_Restore 0D4F  
                        _getPIR_AD 03E3        __size_of_LED_Initialization 000C  
                   Load_Main@adjgo 0061                   ___lwdiv@dividend 0057  
                   Load_Main@error 0063                      _PIR_Main$3062 0066  
                         ?___awdiv 0055              __size_of_my_MainTimer 0026  
                         ?___lwdiv 0055                        ??_UART_Main 0058  
                 getMain_LoadOK@ok 0057           setLights_Trigger@command 0057  
   __size_of_myMain_Initialization 0001      __end_of_myMain_Initialization 0BB5  
                   __size_of_getAD 001C                   ___lwdiv@quotient 005A  
                   __size_of_getch 0006                     _setPIRLED_Main 058E  
                         _CDS_Main 0EA2                     __size_of_putch 0008  
                interrupt_function 0004                         ?_getCDS_AD 0057  
                         _LED_Main 0BB5                          _setLights 06DD  
                        clear_ram0 0C09   __end_of_setLights_Initialization 0BE2  
       __size_of_setMain_Exception 003F                       _my_MainTimer 0DF9  
                       ?_getPIR_AD 005E                      _UART_Transmit 0DD7  
                         _GO_nDONE 00F9                  ??_Timeout_Counter 0055  
                         _UART_ISR 0ED6                           _PIR_Main 0025  
                     ??_getLoad_AD 0057                           _TMR1_ISR 0D83  
                     ??_getLoad_OK 0055                           _UART_Set 0D4F  
                         _TMR1_Set 0C41                           _WDT_Main 07EF  
                 __size_of_ADC_Set 0007               __size_of_Lights_Main 003B  
                      ??_Load_Main 005E             __end_of_setPIRLED_Main 05FF  
   getMain_All_Error_Status@status 005C                        getAD@adcon0 0056  
                      getAD@adcon1 0055               __end_of_WDT_Clearing 0004  
                         _Fosc_Set 0BC4                   __size_of_WDT_Set 000E  
          setMain_Exception@status 005D                 __end_of_getLoad_AD 058E  
               __end_of_getLoad_OK 0C1B  __size_of_getMain_All_Error_Status 003B  
        ?_getMain_All_Error_Status 0070                         ?_setLights 005D  
                getLoad_AD@channel 0059                     ?_UART_Transmit 0070  
                         _SwDetect 0079      _getMain_All_Error_Status$2330 0059  
    _getMain_All_Error_Status$2328 0057                _Load_Initialization 0BCF  
                        setLED@led 0058              __size_of_UART_Receive 0004  
            __size_of_UART_SetData 0008                   __size_of___awdiv 005D  
                 __size_of___lwdiv 0040                   ??_LedPointSelect 0055  
    __size_of_getMain_Lights_Count 0011                 _CDS_Initialization 0BB8  
                 ??_getMain_LoadOK 0056              _Lights_Initialization 0BBC  
    __size_of_getMain_LightsStatus 0031                    ?_setPIRLED_Main 0070  
                  ___lwdiv@divisor 0055               ?_Load_Initialization 0070  
              ?_CDS_Initialization 0070                    ___lwdiv@counter 005C  
                         __ptext10 0BD5                           __ptext11 0CF9  
                         __ptext20 0D68                           __ptext12 07EF  
                         __ptext21 0C9D                           __ptext13 0002  
                         __ptext30 020C                           __ptext22 0CE5  
                         __ptext14 0C5D                           __ptext31 0C6B  
                         __ptext23 0CC0                           __ptext15 0DD7  
                         __ptext40 0F0B                           __ptext32 0BF1  
                         __ptext24 0C4F                           __ptext16 0BF9  
                         __ptext41 0BE9                           __ptext33 0C8C  
                         __ptext25 0D4F                           __ptext17 0BC0  
                         __ptext50 0BB5                           __ptext42 0C11  
                         __ptext34 0BCF                           __ptext26 0C41  
                         __ptext18 0025                           __ptext51 058E  
                         __ptext43 0670                           __ptext35 0D37  
                         __ptext27 0D22                           __ptext19 0F81  
                         __ptext60 0BC9                           __ptext52 0C1B  
                         __ptext44 0D0D                           __ptext36 0F46  
                         __ptext28 0BC4                           __ptext61 0D83  
                         __ptext53 0CAE                           __ptext45 0E71  
                         __ptext37 0E1F                           __ptext29 0BE2  
                         __ptext54 05FF                           __ptext46 0C7B  
                         __ptext38 06DD                           __ptext55 0D9F  
                         __ptext47 0BBC                           __ptext39 0C33  
                         __ptext56 0EA2                           __ptext48 0BDB  
                         __ptext57 0BB8                           __ptext49 0C27  
                         __ptext58 0CD2                           __ptext59 0ED6  
        __size_of_getLights_Status 0011            ??_setLED_Initialization 0059  
                      ??_getCDS_AD 0058                      setLED@command 0057  
                    __size_of_main 0054                       _UART_Receive 0BC0  
                     _UART_SetData 0C01                        ??_getPIR_AD 005F  
               _PIR_Initialization 0CE5               ??_CDS_Initialization 0055  
      __size_of_Mcu_Initialization 0012                       getLoad_OK@ok 0055  
              ?_PIR_Initialization 0070                           main@argc 0069  
                         main@argv 006B  __size_of_setLights_Initialization 0007  
                        putch@byte 0055          ?_setLights_Initialization 0070  
            ??_Load_Initialization 0057               Lights_Control@lights 005B  
             ??_PIR_Initialization 0059                           intlevel1 0000  
                 _Lights_Main$4467 0064                    ??_UART_Transmit 0056  
                      ??_setLights 005E            LightsPointSelect@lights 0056  
               _getAll_Lights_Line 0C9D                        getLoad_AD@i 005C  
                      getLoad_AD@j 005B                        getLoad_AD@k 005A  
          __size_of_setLights_Main 0028            __size_of_setLights_Line 000E  
              ?_getAll_Lights_Line 0070             ?_Lights_Initialization 0070  
            __size_of_WDT_Clearing 0002     setLights_Initialization@lights 0057  
     __size_of_getLightsControl_OK 0008        __size_of_set_TimeoutCleared 0006  
                _LightsPointSelect 0C27               ??_getAll_Lights_Line 0057  
               __CFG_FOSC$INTOSCIO 0000                 ?_LightsPointSelect 0070  
                  _Timeout_Counter 0CF9         __end_of_LED_Initialization 0C27  
            __end_of_getCDS_Status 0BF1                  getCDS_AD@channel1 005C  
                getCDS_AD@channel2 0057                ??_LightsPointSelect 0055  
            _setLoad_AH_AL_Restore 0D37  
