

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Nov 13 14:37:12 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,delta=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2
    58                           	psect	text45,local,class=CODE,merge=1,delta=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2
    60                           	psect	text47,local,class=CODE,merge=1,delta=2
    61                           	psect	text48,local,class=CODE,merge=1,delta=2
    62                           	psect	text49,local,class=CODE,merge=1,delta=2
    63                           	psect	text50,local,class=CODE,merge=1,delta=2
    64                           	psect	text51,local,class=CODE,merge=1,delta=2
    65                           	psect	text52,local,class=CODE,merge=1,delta=2
    66                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text54,local,class=CODE,merge=1,delta=2
    68                           	psect	text55,local,class=CODE,merge=1,delta=2
    69                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text57,local,class=CODE,merge=1,delta=2
    71                           	psect	text58,local,class=CODE,merge=1,delta=2
    72                           	psect	text59,local,class=CODE,merge=1,delta=2
    73                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text63,local,class=CODE,merge=1,delta=2
    77                           	psect	intentry,global,class=CODE,delta=2
    78                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    79                           	dabs	1,0x7E,2
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0014                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001D                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  0087                     	;# 
   118  0089                     	;# 
   119  008C                     	;# 
   120  008D                     	;# 
   121  008E                     	;# 
   122  008F                     	;# 
   123  0090                     	;# 
   124  0091                     	;# 
   125  0092                     	;# 
   126  0093                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0095                     	;# 
   130  0095                     	;# 
   131  0096                     	;# 
   132  0096                     	;# 
   133  0098                     	;# 
   134  0099                     	;# 
   135  009C                     	;# 
   136  009D                     	;# 
   137  009F                     	;# 
   138  0108                     	;# 
   139  0109                     	;# 
   140  010C                     	;# 
   141  010C                     	;# 
   142  010D                     	;# 
   143  010D                     	;# 
   144  010E                     	;# 
   145  010F                     	;# 
   146  0185                     	;# 
   147  0186                     	;# 
   148  018C                     	;# 
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  0007                     	;# 
   157  0009                     	;# 
   158  000A                     	;# 
   159  000B                     	;# 
   160  000C                     	;# 
   161  000D                     	;# 
   162  000E                     	;# 
   163  000E                     	;# 
   164  000F                     	;# 
   165  0010                     	;# 
   166  0011                     	;# 
   167  0012                     	;# 
   168  0013                     	;# 
   169  0014                     	;# 
   170  0015                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0017                     	;# 
   174  0018                     	;# 
   175  0019                     	;# 
   176  001A                     	;# 
   177  001B                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  001D                     	;# 
   181  001E                     	;# 
   182  001F                     	;# 
   183  0081                     	;# 
   184  0085                     	;# 
   185  0086                     	;# 
   186  0087                     	;# 
   187  0089                     	;# 
   188  008C                     	;# 
   189  008D                     	;# 
   190  008E                     	;# 
   191  008F                     	;# 
   192  0090                     	;# 
   193  0091                     	;# 
   194  0092                     	;# 
   195  0093                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0095                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0096                     	;# 
   202  0098                     	;# 
   203  0099                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009F                     	;# 
   207  0108                     	;# 
   208  0109                     	;# 
   209  010C                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  010F                     	;# 
   215  0185                     	;# 
   216  0186                     	;# 
   217  018C                     	;# 
   218  0000                     	;# 
   219  0001                     	;# 
   220  0002                     	;# 
   221  0003                     	;# 
   222  0004                     	;# 
   223  0005                     	;# 
   224  0006                     	;# 
   225  0007                     	;# 
   226  0009                     	;# 
   227  000A                     	;# 
   228  000B                     	;# 
   229  000C                     	;# 
   230  000D                     	;# 
   231  000E                     	;# 
   232  000E                     	;# 
   233  000F                     	;# 
   234  0010                     	;# 
   235  0011                     	;# 
   236  0012                     	;# 
   237  0013                     	;# 
   238  0014                     	;# 
   239  0015                     	;# 
   240  0015                     	;# 
   241  0016                     	;# 
   242  0017                     	;# 
   243  0018                     	;# 
   244  0019                     	;# 
   245  001A                     	;# 
   246  001B                     	;# 
   247  001B                     	;# 
   248  001C                     	;# 
   249  001D                     	;# 
   250  001E                     	;# 
   251  001F                     	;# 
   252  0081                     	;# 
   253  0085                     	;# 
   254  0086                     	;# 
   255  0087                     	;# 
   256  0089                     	;# 
   257  008C                     	;# 
   258  008D                     	;# 
   259  008E                     	;# 
   260  008F                     	;# 
   261  0090                     	;# 
   262  0091                     	;# 
   263  0092                     	;# 
   264  0093                     	;# 
   265  0093                     	;# 
   266  0094                     	;# 
   267  0095                     	;# 
   268  0095                     	;# 
   269  0096                     	;# 
   270  0096                     	;# 
   271  0098                     	;# 
   272  0099                     	;# 
   273  009C                     	;# 
   274  009D                     	;# 
   275  009F                     	;# 
   276  0108                     	;# 
   277  0109                     	;# 
   278  010C                     	;# 
   279  010C                     	;# 
   280  010D                     	;# 
   281  010D                     	;# 
   282  010E                     	;# 
   283  010F                     	;# 
   284  0185                     	;# 
   285  0186                     	;# 
   286  018C                     	;# 
   287  0000                     	;# 
   288  0001                     	;# 
   289  0002                     	;# 
   290  0003                     	;# 
   291  0004                     	;# 
   292  0005                     	;# 
   293  0006                     	;# 
   294  0007                     	;# 
   295  0009                     	;# 
   296  000A                     	;# 
   297  000B                     	;# 
   298  000C                     	;# 
   299  000D                     	;# 
   300  000E                     	;# 
   301  000E                     	;# 
   302  000F                     	;# 
   303  0010                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0013                     	;# 
   307  0014                     	;# 
   308  0015                     	;# 
   309  0015                     	;# 
   310  0016                     	;# 
   311  0017                     	;# 
   312  0018                     	;# 
   313  0019                     	;# 
   314  001A                     	;# 
   315  001B                     	;# 
   316  001B                     	;# 
   317  001C                     	;# 
   318  001D                     	;# 
   319  001E                     	;# 
   320  001F                     	;# 
   321  0081                     	;# 
   322  0085                     	;# 
   323  0086                     	;# 
   324  0087                     	;# 
   325  0089                     	;# 
   326  008C                     	;# 
   327  008D                     	;# 
   328  008E                     	;# 
   329  008F                     	;# 
   330  0090                     	;# 
   331  0091                     	;# 
   332  0092                     	;# 
   333  0093                     	;# 
   334  0093                     	;# 
   335  0094                     	;# 
   336  0095                     	;# 
   337  0095                     	;# 
   338  0096                     	;# 
   339  0096                     	;# 
   340  0098                     	;# 
   341  0099                     	;# 
   342  009C                     	;# 
   343  009D                     	;# 
   344  009F                     	;# 
   345  0108                     	;# 
   346  0109                     	;# 
   347  010C                     	;# 
   348  010C                     	;# 
   349  010D                     	;# 
   350  010D                     	;# 
   351  010E                     	;# 
   352  010F                     	;# 
   353  0185                     	;# 
   354  0186                     	;# 
   355  018C                     	;# 
   356  0000                     	;# 
   357  0001                     	;# 
   358  0002                     	;# 
   359  0003                     	;# 
   360  0004                     	;# 
   361  0005                     	;# 
   362  0006                     	;# 
   363  0007                     	;# 
   364  0009                     	;# 
   365  000A                     	;# 
   366  000B                     	;# 
   367  000C                     	;# 
   368  000D                     	;# 
   369  000E                     	;# 
   370  000E                     	;# 
   371  000F                     	;# 
   372  0010                     	;# 
   373  0011                     	;# 
   374  0012                     	;# 
   375  0013                     	;# 
   376  0014                     	;# 
   377  0015                     	;# 
   378  0015                     	;# 
   379  0016                     	;# 
   380  0017                     	;# 
   381  0018                     	;# 
   382  0019                     	;# 
   383  001A                     	;# 
   384  001B                     	;# 
   385  001B                     	;# 
   386  001C                     	;# 
   387  001D                     	;# 
   388  001E                     	;# 
   389  001F                     	;# 
   390  0081                     	;# 
   391  0085                     	;# 
   392  0086                     	;# 
   393  0087                     	;# 
   394  0089                     	;# 
   395  008C                     	;# 
   396  008D                     	;# 
   397  008E                     	;# 
   398  008F                     	;# 
   399  0090                     	;# 
   400  0091                     	;# 
   401  0092                     	;# 
   402  0093                     	;# 
   403  0093                     	;# 
   404  0094                     	;# 
   405  0095                     	;# 
   406  0095                     	;# 
   407  0096                     	;# 
   408  0096                     	;# 
   409  0098                     	;# 
   410  0099                     	;# 
   411  009C                     	;# 
   412  009D                     	;# 
   413  009F                     	;# 
   414  0108                     	;# 
   415  0109                     	;# 
   416  010C                     	;# 
   417  010C                     	;# 
   418  010D                     	;# 
   419  010D                     	;# 
   420  010E                     	;# 
   421  010F                     	;# 
   422  0185                     	;# 
   423  0186                     	;# 
   424  018C                     	;# 
   425  0000                     	;# 
   426  0001                     	;# 
   427  0002                     	;# 
   428  0003                     	;# 
   429  0004                     	;# 
   430  0005                     	;# 
   431  0006                     	;# 
   432  0007                     	;# 
   433  0009                     	;# 
   434  000A                     	;# 
   435  000B                     	;# 
   436  000C                     	;# 
   437  000D                     	;# 
   438  000E                     	;# 
   439  000E                     	;# 
   440  000F                     	;# 
   441  0010                     	;# 
   442  0011                     	;# 
   443  0012                     	;# 
   444  0013                     	;# 
   445  0014                     	;# 
   446  0015                     	;# 
   447  0015                     	;# 
   448  0016                     	;# 
   449  0017                     	;# 
   450  0018                     	;# 
   451  0019                     	;# 
   452  001A                     	;# 
   453  001B                     	;# 
   454  001B                     	;# 
   455  001C                     	;# 
   456  001D                     	;# 
   457  001E                     	;# 
   458  001F                     	;# 
   459  0081                     	;# 
   460  0085                     	;# 
   461  0086                     	;# 
   462  0087                     	;# 
   463  0089                     	;# 
   464  008C                     	;# 
   465  008D                     	;# 
   466  008E                     	;# 
   467  008F                     	;# 
   468  0090                     	;# 
   469  0091                     	;# 
   470  0092                     	;# 
   471  0093                     	;# 
   472  0093                     	;# 
   473  0094                     	;# 
   474  0095                     	;# 
   475  0095                     	;# 
   476  0096                     	;# 
   477  0096                     	;# 
   478  0098                     	;# 
   479  0099                     	;# 
   480  009C                     	;# 
   481  009D                     	;# 
   482  009F                     	;# 
   483  0108                     	;# 
   484  0109                     	;# 
   485  010C                     	;# 
   486  010C                     	;# 
   487  010D                     	;# 
   488  010D                     	;# 
   489  010E                     	;# 
   490  010F                     	;# 
   491  0185                     	;# 
   492  0186                     	;# 
   493  018C                     	;# 
   494  0000                     	;# 
   495  0001                     	;# 
   496  0002                     	;# 
   497  0003                     	;# 
   498  0004                     	;# 
   499  0005                     	;# 
   500  0006                     	;# 
   501  0007                     	;# 
   502  0009                     	;# 
   503  000A                     	;# 
   504  000B                     	;# 
   505  000C                     	;# 
   506  000D                     	;# 
   507  000E                     	;# 
   508  000E                     	;# 
   509  000F                     	;# 
   510  0010                     	;# 
   511  0011                     	;# 
   512  0012                     	;# 
   513  0013                     	;# 
   514  0014                     	;# 
   515  0015                     	;# 
   516  0015                     	;# 
   517  0016                     	;# 
   518  0017                     	;# 
   519  0018                     	;# 
   520  0019                     	;# 
   521  001A                     	;# 
   522  001B                     	;# 
   523  001B                     	;# 
   524  001C                     	;# 
   525  001D                     	;# 
   526  001E                     	;# 
   527  001F                     	;# 
   528  0081                     	;# 
   529  0085                     	;# 
   530  0086                     	;# 
   531  0087                     	;# 
   532  0089                     	;# 
   533  008C                     	;# 
   534  008D                     	;# 
   535  008E                     	;# 
   536  008F                     	;# 
   537  0090                     	;# 
   538  0091                     	;# 
   539  0092                     	;# 
   540  0093                     	;# 
   541  0093                     	;# 
   542  0094                     	;# 
   543  0095                     	;# 
   544  0095                     	;# 
   545  0096                     	;# 
   546  0096                     	;# 
   547  0098                     	;# 
   548  0099                     	;# 
   549  009C                     	;# 
   550  009D                     	;# 
   551  009F                     	;# 
   552  0108                     	;# 
   553  0109                     	;# 
   554  010C                     	;# 
   555  010C                     	;# 
   556  010D                     	;# 
   557  010D                     	;# 
   558  010E                     	;# 
   559  010F                     	;# 
   560  0185                     	;# 
   561  0186                     	;# 
   562  018C                     	;# 
   563  0000                     	;# 
   564  0001                     	;# 
   565  0002                     	;# 
   566  0003                     	;# 
   567  0004                     	;# 
   568  0005                     	;# 
   569  0006                     	;# 
   570  0007                     	;# 
   571  0009                     	;# 
   572  000A                     	;# 
   573  000B                     	;# 
   574  000C                     	;# 
   575  000D                     	;# 
   576  000E                     	;# 
   577  000E                     	;# 
   578  000F                     	;# 
   579  0010                     	;# 
   580  0011                     	;# 
   581  0012                     	;# 
   582  0013                     	;# 
   583  0014                     	;# 
   584  0015                     	;# 
   585  0015                     	;# 
   586  0016                     	;# 
   587  0017                     	;# 
   588  0018                     	;# 
   589  0019                     	;# 
   590  001A                     	;# 
   591  001B                     	;# 
   592  001B                     	;# 
   593  001C                     	;# 
   594  001D                     	;# 
   595  001E                     	;# 
   596  001F                     	;# 
   597  0081                     	;# 
   598  0085                     	;# 
   599  0086                     	;# 
   600  0087                     	;# 
   601  0089                     	;# 
   602  008C                     	;# 
   603  008D                     	;# 
   604  008E                     	;# 
   605  008F                     	;# 
   606  0090                     	;# 
   607  0091                     	;# 
   608  0092                     	;# 
   609  0093                     	;# 
   610  0093                     	;# 
   611  0094                     	;# 
   612  0095                     	;# 
   613  0095                     	;# 
   614  0096                     	;# 
   615  0096                     	;# 
   616  0098                     	;# 
   617  0099                     	;# 
   618  009C                     	;# 
   619  009D                     	;# 
   620  009F                     	;# 
   621  0108                     	;# 
   622  0109                     	;# 
   623  010C                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  010D                     	;# 
   627  010E                     	;# 
   628  010F                     	;# 
   629  0185                     	;# 
   630  0186                     	;# 
   631  018C                     	;# 
   632  0000                     	;# 
   633  0001                     	;# 
   634  0002                     	;# 
   635  0003                     	;# 
   636  0004                     	;# 
   637  0005                     	;# 
   638  0006                     	;# 
   639  0007                     	;# 
   640  0009                     	;# 
   641  000A                     	;# 
   642  000B                     	;# 
   643  000C                     	;# 
   644  000D                     	;# 
   645  000E                     	;# 
   646  000E                     	;# 
   647  000F                     	;# 
   648  0010                     	;# 
   649  0011                     	;# 
   650  0012                     	;# 
   651  0013                     	;# 
   652  0014                     	;# 
   653  0015                     	;# 
   654  0015                     	;# 
   655  0016                     	;# 
   656  0017                     	;# 
   657  0018                     	;# 
   658  0019                     	;# 
   659  001A                     	;# 
   660  001B                     	;# 
   661  001B                     	;# 
   662  001C                     	;# 
   663  001D                     	;# 
   664  001E                     	;# 
   665  001F                     	;# 
   666  0081                     	;# 
   667  0085                     	;# 
   668  0086                     	;# 
   669  0087                     	;# 
   670  0089                     	;# 
   671  008C                     	;# 
   672  008D                     	;# 
   673  008E                     	;# 
   674  008F                     	;# 
   675  0090                     	;# 
   676  0091                     	;# 
   677  0092                     	;# 
   678  0093                     	;# 
   679  0093                     	;# 
   680  0094                     	;# 
   681  0095                     	;# 
   682  0095                     	;# 
   683  0096                     	;# 
   684  0096                     	;# 
   685  0098                     	;# 
   686  0099                     	;# 
   687  009C                     	;# 
   688  009D                     	;# 
   689  009F                     	;# 
   690  0108                     	;# 
   691  0109                     	;# 
   692  010C                     	;# 
   693  010C                     	;# 
   694  010D                     	;# 
   695  010D                     	;# 
   696  010E                     	;# 
   697  010F                     	;# 
   698  0185                     	;# 
   699  0186                     	;# 
   700  018C                     	;# 
   701  0000                     	;# 
   702  0001                     	;# 
   703  0002                     	;# 
   704  0003                     	;# 
   705  0004                     	;# 
   706  0005                     	;# 
   707  0006                     	;# 
   708  0007                     	;# 
   709  0009                     	;# 
   710  000A                     	;# 
   711  000B                     	;# 
   712  000C                     	;# 
   713  000D                     	;# 
   714  000E                     	;# 
   715  000E                     	;# 
   716  000F                     	;# 
   717  0010                     	;# 
   718  0011                     	;# 
   719  0012                     	;# 
   720  0013                     	;# 
   721  0014                     	;# 
   722  0015                     	;# 
   723  0015                     	;# 
   724  0016                     	;# 
   725  0017                     	;# 
   726  0018                     	;# 
   727  0019                     	;# 
   728  001A                     	;# 
   729  001B                     	;# 
   730  001B                     	;# 
   731  001C                     	;# 
   732  001D                     	;# 
   733  001E                     	;# 
   734  001F                     	;# 
   735  0081                     	;# 
   736  0085                     	;# 
   737  0086                     	;# 
   738  0087                     	;# 
   739  0089                     	;# 
   740  008C                     	;# 
   741  008D                     	;# 
   742  008E                     	;# 
   743  008F                     	;# 
   744  0090                     	;# 
   745  0091                     	;# 
   746  0092                     	;# 
   747  0093                     	;# 
   748  0093                     	;# 
   749  0094                     	;# 
   750  0095                     	;# 
   751  0095                     	;# 
   752  0096                     	;# 
   753  0096                     	;# 
   754  0098                     	;# 
   755  0099                     	;# 
   756  009C                     	;# 
   757  009D                     	;# 
   758  009F                     	;# 
   759  0108                     	;# 
   760  0109                     	;# 
   761  010C                     	;# 
   762  010C                     	;# 
   763  010D                     	;# 
   764  010D                     	;# 
   765  010E                     	;# 
   766  010F                     	;# 
   767  0185                     	;# 
   768  0186                     	;# 
   769  018C                     	;# 
   770  0000                     	;# 
   771  0001                     	;# 
   772  0002                     	;# 
   773  0003                     	;# 
   774  0004                     	;# 
   775  0005                     	;# 
   776  0006                     	;# 
   777  0007                     	;# 
   778  0009                     	;# 
   779  000A                     	;# 
   780  000B                     	;# 
   781  000C                     	;# 
   782  000D                     	;# 
   783  000E                     	;# 
   784  000E                     	;# 
   785  000F                     	;# 
   786  0010                     	;# 
   787  0011                     	;# 
   788  0012                     	;# 
   789  0013                     	;# 
   790  0014                     	;# 
   791  0015                     	;# 
   792  0015                     	;# 
   793  0016                     	;# 
   794  0017                     	;# 
   795  0018                     	;# 
   796  0019                     	;# 
   797  001A                     	;# 
   798  001B                     	;# 
   799  001B                     	;# 
   800  001C                     	;# 
   801  001D                     	;# 
   802  001E                     	;# 
   803  001F                     	;# 
   804  0081                     	;# 
   805  0085                     	;# 
   806  0086                     	;# 
   807  0087                     	;# 
   808  0089                     	;# 
   809  008C                     	;# 
   810  008D                     	;# 
   811  008E                     	;# 
   812  008F                     	;# 
   813  0090                     	;# 
   814  0091                     	;# 
   815  0092                     	;# 
   816  0093                     	;# 
   817  0093                     	;# 
   818  0094                     	;# 
   819  0095                     	;# 
   820  0095                     	;# 
   821  0096                     	;# 
   822  0096                     	;# 
   823  0098                     	;# 
   824  0099                     	;# 
   825  009C                     	;# 
   826  009D                     	;# 
   827  009F                     	;# 
   828  0108                     	;# 
   829  0109                     	;# 
   830  010C                     	;# 
   831  010C                     	;# 
   832  010D                     	;# 
   833  010D                     	;# 
   834  010E                     	;# 
   835  010F                     	;# 
   836  0185                     	;# 
   837  0186                     	;# 
   838  018C                     	;# 
   839  0000                     	;# 
   840  0001                     	;# 
   841  0002                     	;# 
   842  0003                     	;# 
   843  0004                     	;# 
   844  0005                     	;# 
   845  0006                     	;# 
   846  0007                     	;# 
   847  0009                     	;# 
   848  000A                     	;# 
   849  000B                     	;# 
   850  000C                     	;# 
   851  000D                     	;# 
   852  000E                     	;# 
   853  000E                     	;# 
   854  000F                     	;# 
   855  0010                     	;# 
   856  0011                     	;# 
   857  0012                     	;# 
   858  0013                     	;# 
   859  0014                     	;# 
   860  0015                     	;# 
   861  0015                     	;# 
   862  0016                     	;# 
   863  0017                     	;# 
   864  0018                     	;# 
   865  0019                     	;# 
   866  001A                     	;# 
   867  001B                     	;# 
   868  001B                     	;# 
   869  001C                     	;# 
   870  001D                     	;# 
   871  001E                     	;# 
   872  001F                     	;# 
   873  0081                     	;# 
   874  0085                     	;# 
   875  0086                     	;# 
   876  0087                     	;# 
   877  0089                     	;# 
   878  008C                     	;# 
   879  008D                     	;# 
   880  008E                     	;# 
   881  008F                     	;# 
   882  0090                     	;# 
   883  0091                     	;# 
   884  0092                     	;# 
   885  0093                     	;# 
   886  0093                     	;# 
   887  0094                     	;# 
   888  0095                     	;# 
   889  0095                     	;# 
   890  0096                     	;# 
   891  0096                     	;# 
   892  0098                     	;# 
   893  0099                     	;# 
   894  009C                     	;# 
   895  009D                     	;# 
   896  009F                     	;# 
   897  0108                     	;# 
   898  0109                     	;# 
   899  010C                     	;# 
   900  010C                     	;# 
   901  010D                     	;# 
   902  010D                     	;# 
   903  010E                     	;# 
   904  010F                     	;# 
   905  0185                     	;# 
   906  0186                     	;# 
   907  018C                     	;# 
   908  0000                     	;# 
   909  0001                     	;# 
   910  0002                     	;# 
   911  0003                     	;# 
   912  0004                     	;# 
   913  0005                     	;# 
   914  0006                     	;# 
   915  0007                     	;# 
   916  0009                     	;# 
   917  000A                     	;# 
   918  000B                     	;# 
   919  000C                     	;# 
   920  000D                     	;# 
   921  000E                     	;# 
   922  000E                     	;# 
   923  000F                     	;# 
   924  0010                     	;# 
   925  0011                     	;# 
   926  0012                     	;# 
   927  0013                     	;# 
   928  0014                     	;# 
   929  0015                     	;# 
   930  0015                     	;# 
   931  0016                     	;# 
   932  0017                     	;# 
   933  0018                     	;# 
   934  0019                     	;# 
   935  001A                     	;# 
   936  001B                     	;# 
   937  001B                     	;# 
   938  001C                     	;# 
   939  001D                     	;# 
   940  001E                     	;# 
   941  001F                     	;# 
   942  0081                     	;# 
   943  0085                     	;# 
   944  0086                     	;# 
   945  0087                     	;# 
   946  0089                     	;# 
   947  008C                     	;# 
   948  008D                     	;# 
   949  008E                     	;# 
   950  008F                     	;# 
   951  0090                     	;# 
   952  0091                     	;# 
   953  0092                     	;# 
   954  0093                     	;# 
   955  0093                     	;# 
   956  0094                     	;# 
   957  0095                     	;# 
   958  0095                     	;# 
   959  0096                     	;# 
   960  0096                     	;# 
   961  0098                     	;# 
   962  0099                     	;# 
   963  009C                     	;# 
   964  009D                     	;# 
   965  009F                     	;# 
   966  0108                     	;# 
   967  0109                     	;# 
   968  010C                     	;# 
   969  010C                     	;# 
   970  010D                     	;# 
   971  010D                     	;# 
   972  010E                     	;# 
   973  010F                     	;# 
   974  0185                     	;# 
   975  0186                     	;# 
   976  018C                     	;# 
   977  0000                     	;# 
   978  0001                     	;# 
   979  0002                     	;# 
   980  0003                     	;# 
   981  0004                     	;# 
   982  0005                     	;# 
   983  0006                     	;# 
   984  0007                     	;# 
   985  0009                     	;# 
   986  000A                     	;# 
   987  000B                     	;# 
   988  000C                     	;# 
   989  000D                     	;# 
   990  000E                     	;# 
   991  000E                     	;# 
   992  000F                     	;# 
   993  0010                     	;# 
   994  0011                     	;# 
   995  0012                     	;# 
   996  0013                     	;# 
   997  0014                     	;# 
   998  0015                     	;# 
   999  0015                     	;# 
  1000  0016                     	;# 
  1001  0017                     	;# 
  1002  0018                     	;# 
  1003  0019                     	;# 
  1004  001A                     	;# 
  1005  001B                     	;# 
  1006  001B                     	;# 
  1007  001C                     	;# 
  1008  001D                     	;# 
  1009  001E                     	;# 
  1010  001F                     	;# 
  1011  0081                     	;# 
  1012  0085                     	;# 
  1013  0086                     	;# 
  1014  0087                     	;# 
  1015  0089                     	;# 
  1016  008C                     	;# 
  1017  008D                     	;# 
  1018  008E                     	;# 
  1019  008F                     	;# 
  1020  0090                     	;# 
  1021  0091                     	;# 
  1022  0092                     	;# 
  1023  0093                     	;# 
  1024  0093                     	;# 
  1025  0094                     	;# 
  1026  0095                     	;# 
  1027  0095                     	;# 
  1028  0096                     	;# 
  1029  0096                     	;# 
  1030  0098                     	;# 
  1031  0099                     	;# 
  1032  009C                     	;# 
  1033  009D                     	;# 
  1034  009F                     	;# 
  1035  0108                     	;# 
  1036  0109                     	;# 
  1037  010C                     	;# 
  1038  010C                     	;# 
  1039  010D                     	;# 
  1040  010D                     	;# 
  1041  010E                     	;# 
  1042  010F                     	;# 
  1043  0185                     	;# 
  1044  0186                     	;# 
  1045  018C                     	;# 
  1046  0000                     	;# 
  1047  0001                     	;# 
  1048  0002                     	;# 
  1049  0003                     	;# 
  1050  0004                     	;# 
  1051  0005                     	;# 
  1052  0006                     	;# 
  1053  0007                     	;# 
  1054  0009                     	;# 
  1055  000A                     	;# 
  1056  000B                     	;# 
  1057  000C                     	;# 
  1058  000D                     	;# 
  1059  000E                     	;# 
  1060  000E                     	;# 
  1061  000F                     	;# 
  1062  0010                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0013                     	;# 
  1066  0014                     	;# 
  1067  0015                     	;# 
  1068  0015                     	;# 
  1069  0016                     	;# 
  1070  0017                     	;# 
  1071  0018                     	;# 
  1072  0019                     	;# 
  1073  001A                     	;# 
  1074  001B                     	;# 
  1075  001B                     	;# 
  1076  001C                     	;# 
  1077  001D                     	;# 
  1078  001E                     	;# 
  1079  001F                     	;# 
  1080  0081                     	;# 
  1081  0085                     	;# 
  1082  0086                     	;# 
  1083  0087                     	;# 
  1084  0089                     	;# 
  1085  008C                     	;# 
  1086  008D                     	;# 
  1087  008E                     	;# 
  1088  008F                     	;# 
  1089  0090                     	;# 
  1090  0091                     	;# 
  1091  0092                     	;# 
  1092  0093                     	;# 
  1093  0093                     	;# 
  1094  0094                     	;# 
  1095  0095                     	;# 
  1096  0095                     	;# 
  1097  0096                     	;# 
  1098  0096                     	;# 
  1099  0098                     	;# 
  1100  0099                     	;# 
  1101  009C                     	;# 
  1102  009D                     	;# 
  1103  009F                     	;# 
  1104  0108                     	;# 
  1105  0109                     	;# 
  1106  010C                     	;# 
  1107  010C                     	;# 
  1108  010D                     	;# 
  1109  010D                     	;# 
  1110  010E                     	;# 
  1111  010F                     	;# 
  1112  0185                     	;# 
  1113  0186                     	;# 
  1114  018C                     	;# 
  1115  0000                     	;# 
  1116  0001                     	;# 
  1117  0002                     	;# 
  1118  0003                     	;# 
  1119  0004                     	;# 
  1120  0005                     	;# 
  1121  0006                     	;# 
  1122  0007                     	;# 
  1123  0009                     	;# 
  1124  000A                     	;# 
  1125  000B                     	;# 
  1126  000C                     	;# 
  1127  000D                     	;# 
  1128  000E                     	;# 
  1129  000E                     	;# 
  1130  000F                     	;# 
  1131  0010                     	;# 
  1132  0011                     	;# 
  1133  0012                     	;# 
  1134  0013                     	;# 
  1135  0014                     	;# 
  1136  0015                     	;# 
  1137  0015                     	;# 
  1138  0016                     	;# 
  1139  0017                     	;# 
  1140  0018                     	;# 
  1141  0019                     	;# 
  1142  001A                     	;# 
  1143  001B                     	;# 
  1144  001B                     	;# 
  1145  001C                     	;# 
  1146  001D                     	;# 
  1147  001E                     	;# 
  1148  001F                     	;# 
  1149  0081                     	;# 
  1150  0085                     	;# 
  1151  0086                     	;# 
  1152  0087                     	;# 
  1153  0089                     	;# 
  1154  008C                     	;# 
  1155  008D                     	;# 
  1156  008E                     	;# 
  1157  008F                     	;# 
  1158  0090                     	;# 
  1159  0091                     	;# 
  1160  0092                     	;# 
  1161  0093                     	;# 
  1162  0093                     	;# 
  1163  0094                     	;# 
  1164  0095                     	;# 
  1165  0095                     	;# 
  1166  0096                     	;# 
  1167  0096                     	;# 
  1168  0098                     	;# 
  1169  0099                     	;# 
  1170  009C                     	;# 
  1171  009D                     	;# 
  1172  009F                     	;# 
  1173  0108                     	;# 
  1174  0109                     	;# 
  1175  010C                     	;# 
  1176  010C                     	;# 
  1177  010D                     	;# 
  1178  010D                     	;# 
  1179  010E                     	;# 
  1180  010F                     	;# 
  1181  0185                     	;# 
  1182  0186                     	;# 
  1183  018C                     	;# 
  1184  0000                     	;# 
  1185  0001                     	;# 
  1186  0002                     	;# 
  1187  0003                     	;# 
  1188  0004                     	;# 
  1189  0005                     	;# 
  1190  0006                     	;# 
  1191  0007                     	;# 
  1192  0009                     	;# 
  1193  000A                     	;# 
  1194  000B                     	;# 
  1195  000C                     	;# 
  1196  000D                     	;# 
  1197  000E                     	;# 
  1198  000E                     	;# 
  1199  000F                     	;# 
  1200  0010                     	;# 
  1201  0011                     	;# 
  1202  0012                     	;# 
  1203  0013                     	;# 
  1204  0014                     	;# 
  1205  0015                     	;# 
  1206  0015                     	;# 
  1207  0016                     	;# 
  1208  0017                     	;# 
  1209  0018                     	;# 
  1210  0019                     	;# 
  1211  001A                     	;# 
  1212  001B                     	;# 
  1213  001B                     	;# 
  1214  001C                     	;# 
  1215  001D                     	;# 
  1216  001E                     	;# 
  1217  001F                     	;# 
  1218  0081                     	;# 
  1219  0085                     	;# 
  1220  0086                     	;# 
  1221  0087                     	;# 
  1222  0089                     	;# 
  1223  008C                     	;# 
  1224  008D                     	;# 
  1225  008E                     	;# 
  1226  008F                     	;# 
  1227  0090                     	;# 
  1228  0091                     	;# 
  1229  0092                     	;# 
  1230  0093                     	;# 
  1231  0093                     	;# 
  1232  0094                     	;# 
  1233  0095                     	;# 
  1234  0095                     	;# 
  1235  0096                     	;# 
  1236  0096                     	;# 
  1237  0098                     	;# 
  1238  0099                     	;# 
  1239  009C                     	;# 
  1240  009D                     	;# 
  1241  009F                     	;# 
  1242  0108                     	;# 
  1243  0109                     	;# 
  1244  010C                     	;# 
  1245  010C                     	;# 
  1246  010D                     	;# 
  1247  010D                     	;# 
  1248  010E                     	;# 
  1249  010F                     	;# 
  1250  0185                     	;# 
  1251  0186                     	;# 
  1252  018C                     	;# 
  1253  001F                     _ADCON0	set	31
  1254  001E                     _ADRES	set	30
  1255  0005                     _PORTA	set	5
  1256  0006                     _PORTB	set	6
  1257  0007                     _PORTC	set	7
  1258  0010                     _T1CON	set	16
  1259  000F                     _TMR1H	set	15
  1260  000E                     _TMR1L	set	14
  1261  005F                     _GIE	set	95
  1262  00F9                     _GO_nDONE	set	249
  1263  005E                     _PEIE	set	94
  1264  002C                     _RA4	set	44
  1265  002D                     _RA5	set	45
  1266  0032                     _RB2	set	50
  1267  0033                     _RB3	set	51
  1268  0034                     _RB4	set	52
  1269  0035                     _RB5	set	53
  1270  0060                     _TMR1IF	set	96
  1271  009F                     _ADCON1	set	159
  1272  009D                     _FVRCON	set	157
  1273  0090                     _OSCCON	set	144
  1274  0085                     _TRISA	set	133
  1275  0086                     _TRISB	set	134
  1276  0087                     _TRISC	set	135
  1277  0408                     _PS0	set	1032
  1278  0409                     _PS1	set	1033
  1279  040A                     _PS2	set	1034
  1280  040B                     _PSA	set	1035
  1281  0460                     _TMR1IE	set	1120
  1282  0185                     _ANSELA	set	389
  1283  0186                     _ANSELB	set	390
  1284                           
  1285                           	psect	text0
  1286  0000                     __ptext0:	
  1287                           ; #config settings
  1288                           
  1289                           
  1290                           ;psect for function _TMR1_ISR
  1291  0000                     
  1292                           	psect	cinit
  1293  0013                     start_initialization:	
  1294  0013                     __initialization:	
  1295                           
  1296                           ; Clear objects allocated to COMMON
  1297  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1298  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1299  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1300  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1301                           
  1302                           ; Clear objects allocated to BANK0
  1303  0017  1383               	bcf	3,7	;select IRP bank0
  1304  0018  3020               	movlw	low __pbssBANK0
  1305  0019  0084               	movwf	4
  1306  001A  305A               	movlw	low (__pbssBANK0+58)
  1307  001B  158A  239B  118A   	fcall	clear_ram0
  1308                           
  1309                           ; Clear objects allocated to BANK1
  1310  001E  30A0               	movlw	low __pbssBANK1
  1311  001F  0084               	movwf	4
  1312  0020  30EF               	movlw	low (__pbssBANK1+79)
  1313  0021  158A  239B         	fcall	clear_ram0
  1314  0023                     end_of_initialization:	
  1315                           ;End of C runtime variable initialization code
  1316                           
  1317  0023                     __end_of__initialization:	
  1318  0023  0183               	clrf	3
  1319  0024  118A  2F5F         	ljmp	_main	;jump to C main() function
  1320                           
  1321                           	psect	bssCOMMON
  1322  0076                     __pbssCOMMON:	
  1323  0076                     _WDT:	
  1324  0076                     	ds	2
  1325  0078                     _LED:	
  1326  0078                     	ds	1
  1327  0079                     _SwDetect:	
  1328  0079                     	ds	1
  1329                           
  1330                           	psect	bssBANK0
  1331  0020                     __pbssBANK0:	
  1332  0020                     _myMain:	
  1333  0020                     	ds	8
  1334  0028                     _SYSC:	
  1335  0028                     	ds	5
  1336  002D                     __CDS:	
  1337  002D                     	ds	5
  1338  0032                     _PIRLED:	
  1339  0032                     	ds	4
  1340  0036                     _Timer1:	
  1341  0036                     	ds	3
  1342  0039                     _Lights:	
  1343  0039                     	ds	1
  1344  003A                     _LightsControl:	
  1345  003A                     	ds	1
  1346  003B                     _Temp:	
  1347  003B                     	ds	12
  1348  0047                     _Lights1:	
  1349  0047                     	ds	7
  1350  004E                     _VarErrLED:	
  1351  004E                     	ds	4
  1352  0052                     _VarLED1:	
  1353  0052                     	ds	4
  1354  0056                     _VarLED2:	
  1355  0056                     	ds	4
  1356                           
  1357                           	psect	bssBANK1
  1358  00A0                     __pbssBANK1:	
  1359  00A0                     __PIR:	
  1360  00A0                     	ds	47
  1361  00CF                     _Load:	
  1362  00CF                     	ds	32
  1363                           
  1364                           	psect	clrtext
  1365  0B9B                     clear_ram0:	
  1366                           ;	Called with FSR containing the base address, and
  1367                           ;	W with the last address+1
  1368                           
  1369  0B9B  0064               	clrwdt	;clear the watchdog before getting into this loop
  1370  0B9C                     clrloop0:	
  1371  0B9C  0180               	clrf	0	;clear RAM location pointed to by FSR
  1372  0B9D  0A84               	incf	4,f	;increment pointer
  1373  0B9E  0604               	xorwf	4,w	;XOR with final address
  1374  0B9F  1903               	btfsc	3,2	;have we reached the end yet?
  1375  0BA0  3400               	retlw	0	;all done for this memory range, return
  1376  0BA1  0604               	xorwf	4,w	;XOR again to restore value
  1377  0BA2  2B9C               	goto	clrloop0	;do the next byte
  1378                           
  1379                           	psect	cstackBANK2
  1380  0120                     __pcstackBANK2:	
  1381  0120                     ?_main:	
  1382  0120                     main@argc:	
  1383                           ; 2 bytes @ 0x0
  1384                           
  1385                           
  1386                           ; 2 bytes @ 0x0
  1387  0120                     	ds	2
  1388  0122                     main@argv:	
  1389                           
  1390                           ; 2 bytes @ 0x2
  1391  0122                     	ds	2
  1392                           
  1393                           	psect	cstackCOMMON
  1394  0070                     __pcstackCOMMON:	
  1395  0070                     ?_setLED_Initialization:	
  1396  0070                     ?_setLED_Main:	
  1397                           ; 0 bytes @ 0x0
  1398                           
  1399  0070                     ?_setPIRLED_Main:	
  1400                           ; 0 bytes @ 0x0
  1401                           
  1402  0070                     ?_Fosc_Set:	
  1403                           ; 0 bytes @ 0x0
  1404                           
  1405  0070                     ?_IO_Set:	
  1406                           ; 0 bytes @ 0x0
  1407                           
  1408  0070                     ?_TMR1_Set:	
  1409                           ; 0 bytes @ 0x0
  1410                           
  1411  0070                     ?_ADC_Set:	
  1412                           ; 0 bytes @ 0x0
  1413                           
  1414  0070                     ?_WDT_Set:	
  1415                           ; 0 bytes @ 0x0
  1416                           
  1417  0070                     ?_TMR1_ISR:	
  1418                           ; 0 bytes @ 0x0
  1419                           
  1420  0070                     ??_TMR1_ISR:	
  1421                           ; 0 bytes @ 0x0
  1422                           
  1423  0070                     ?_Timeout_Counter:	
  1424                           ; 0 bytes @ 0x0
  1425                           
  1426  0070                     ?_set_TimeoutCleared:	
  1427                           ; 0 bytes @ 0x0
  1428                           
  1429  0070                     ?_WDT_Clearing:	
  1430                           ; 0 bytes @ 0x0
  1431                           
  1432  0070                     ?_myMain_Initialization:	
  1433                           ; 0 bytes @ 0x0
  1434                           
  1435  0070                     ?_SYSC_Initialization:	
  1436                           ; 0 bytes @ 0x0
  1437                           
  1438  0070                     ?_Temp_Initialization:	
  1439                           ; 0 bytes @ 0x0
  1440                           
  1441  0070                     ?_Load_Initialization:	
  1442                           ; 0 bytes @ 0x0
  1443                           
  1444  0070                     ?_Lights_Initialization:	
  1445                           ; 0 bytes @ 0x0
  1446                           
  1447  0070                     ?_PIR_Initialization:	
  1448                           ; 0 bytes @ 0x0
  1449                           
  1450  0070                     ?_DetectSYSC_Signal:	
  1451                           ; 0 bytes @ 0x0
  1452                           
  1453  0070                     ?_getLoad_AD:	
  1454                           ; 0 bytes @ 0x0
  1455                           
  1456  0070                     ?_getTemp_AD:	
  1457                           ; 0 bytes @ 0x0
  1458                           
  1459  0070                     ?_my_MainTimer:	
  1460                           ; 0 bytes @ 0x0
  1461                           
  1462  0070                     ?_SYSC_Main:	
  1463                           ; 0 bytes @ 0x0
  1464                           
  1465  0070                     ?_Temp_Main:	
  1466                           ; 0 bytes @ 0x0
  1467                           
  1468  0070                     ?_Load_Main:	
  1469                           ; 0 bytes @ 0x0
  1470                           
  1471  0070                     ?_Lights_Main:	
  1472                           ; 0 bytes @ 0x0
  1473                           
  1474  0070                     ?_PIR_Main:	
  1475                           ; 0 bytes @ 0x0
  1476                           
  1477  0070                     ?_setLoad_AH_AL_Restore:	
  1478                           ; 0 bytes @ 0x0
  1479                           
  1480  0070                     ?_setTemp_Initialization:	
  1481                           ; 0 bytes @ 0x0
  1482                           
  1483  0070                     ?_setTemp_Main:	
  1484                           ; 0 bytes @ 0x0
  1485                           
  1486  0070                     ?_setSYSC_Initialization:	
  1487                           ; 0 bytes @ 0x0
  1488                           
  1489  0070                     ?_setSYSC_Main:	
  1490                           ; 0 bytes @ 0x0
  1491                           
  1492  0070                     ?_setLights_Initialization:	
  1493                           ; 0 bytes @ 0x0
  1494                           
  1495  0070                     ?_setLights_Main:	
  1496                           ; 0 bytes @ 0x0
  1497                           
  1498  0070                     ?_Lights_Control:	
  1499                           ; 0 bytes @ 0x0
  1500                           
  1501  0070                     ?_Lights_Close:	
  1502                           ; 0 bytes @ 0x0
  1503                           
  1504  0070                     ?_setLights_Line:	
  1505                           ; 0 bytes @ 0x0
  1506                           
  1507  0070                     ?_CDS_Initialization:	
  1508                           ; 0 bytes @ 0x0
  1509                           
  1510  0070                     ?_CDS_Main:	
  1511                           ; 0 bytes @ 0x0
  1512                           
  1513  0070                     ?_LedPointSelect:	
  1514                           ; 0 bytes @ 0x0
  1515                           
  1516  0070                     ?_LED_Initialization:	
  1517                           ; 0 bytes @ 0x0
  1518                           
  1519  0070                     ?_LED_Main:	
  1520                           ; 0 bytes @ 0x0
  1521                           
  1522  0070                     ?_Mcu_Initialization:	
  1523                           ; 0 bytes @ 0x0
  1524                           
  1525  0070                     ?_ISR:	
  1526                           ; 0 bytes @ 0x0
  1527                           
  1528  0070                     ??_ISR:	
  1529                           ; 0 bytes @ 0x0
  1530                           
  1531  0070                     ?_WDT_Main:	
  1532                           ; 0 bytes @ 0x0
  1533                           
  1534  0070                     ?_setMain_Exception:	
  1535                           ; 0 bytes @ 0x0
  1536                           
  1537  0070                     ?_LightsPointSelect:	
  1538                           ; 0 bytes @ 0x0
  1539                           
  1540  0070                     ?_getAll_Lights_Line:	
  1541                           ; 0 bytes @ 0x0
  1542                           
  1543  0070                     ?_getLights_Status:	
  1544                           ; 1 bytes @ 0x0
  1545                           
  1546  0070                     ?_getLightsControl_OK:	
  1547                           ; 1 bytes @ 0x0
  1548                           
  1549  0070                     ?_getCDS_Status:	
  1550                           ; 1 bytes @ 0x0
  1551                           
  1552  0070                     ?_getMain_LightsStatus:	
  1553                           ; 1 bytes @ 0x0
  1554                           
  1555  0070                     ?_getMain_All_Error_Status:	
  1556                           ; 1 bytes @ 0x0
  1557                           
  1558  0070                     ?_getMain_Lights_Count:	
  1559                           ; 1 bytes @ 0x0
  1560                           
  1561  0070                     ?_getMain_LoadOK:	
  1562                           ; 1 bytes @ 0x0
  1563                           
  1564  0070                     ?_getLoad_OK:	
  1565                           ; 1 bytes @ 0x0
  1566                           
  1567                           
  1568                           ; 1 bytes @ 0x0
  1569  0070                     	ds	4
  1570  0074                     ??_Fosc_Set:	
  1571  0074                     ??_IO_Set:	
  1572                           ; 0 bytes @ 0x4
  1573                           
  1574  0074                     ??_TMR1_Set:	
  1575                           ; 0 bytes @ 0x4
  1576                           
  1577  0074                     ??_ADC_Set:	
  1578                           ; 0 bytes @ 0x4
  1579                           
  1580  0074                     ??_WDT_Set:	
  1581                           ; 0 bytes @ 0x4
  1582                           
  1583  0074                     ??_Timeout_Counter:	
  1584                           ; 0 bytes @ 0x4
  1585                           
  1586  0074                     ??_set_TimeoutCleared:	
  1587                           ; 0 bytes @ 0x4
  1588                           
  1589  0074                     ??_WDT_Clearing:	
  1590                           ; 0 bytes @ 0x4
  1591                           
  1592  0074                     ??_myMain_Initialization:	
  1593                           ; 0 bytes @ 0x4
  1594                           
  1595  0074                     ??_SYSC_Initialization:	
  1596                           ; 0 bytes @ 0x4
  1597                           
  1598  0074                     ??_Temp_Initialization:	
  1599                           ; 0 bytes @ 0x4
  1600                           
  1601  0074                     ??_DetectSYSC_Signal:	
  1602                           ; 0 bytes @ 0x4
  1603                           
  1604  0074                     ??_my_MainTimer:	
  1605                           ; 0 bytes @ 0x4
  1606                           
  1607  0074                     ??_getLightsControl_OK:	
  1608                           ; 0 bytes @ 0x4
  1609                           
  1610  0074                     ??_setLoad_AH_AL_Restore:	
  1611                           ; 0 bytes @ 0x4
  1612                           
  1613  0074                     ??_setTemp_Initialization:	
  1614                           ; 0 bytes @ 0x4
  1615                           
  1616  0074                     ??_setSYSC_Initialization:	
  1617                           ; 0 bytes @ 0x4
  1618                           
  1619  0074                     ??_CDS_Initialization:	
  1620                           ; 0 bytes @ 0x4
  1621                           
  1622  0074                     ??_getCDS_Status:	
  1623                           ; 0 bytes @ 0x4
  1624                           
  1625  0074                     ??_LedPointSelect:	
  1626                           ; 0 bytes @ 0x4
  1627                           
  1628  0074                     ??_WDT_Main:	
  1629                           ; 0 bytes @ 0x4
  1630                           
  1631  0074                     ??_getMain_Lights_Count:	
  1632                           ; 0 bytes @ 0x4
  1633                           
  1634  0074                     ??_getLoad_OK:	
  1635                           ; 0 bytes @ 0x4
  1636                           
  1637  0074                     ??_LightsPointSelect:	
  1638                           ; 0 bytes @ 0x4
  1639                           
  1640  0074                     ??___awdiv:	
  1641                           ; 0 bytes @ 0x4
  1642                           
  1643  0074                     ??___lwdiv:	
  1644                           ; 0 bytes @ 0x4
  1645                           
  1646  0074                     ?_getAD:	
  1647                           ; 0 bytes @ 0x4
  1648                           
  1649  0074                     getCDS_Status@status:	
  1650                           ; 1 bytes @ 0x4
  1651                           
  1652  0074                     getAD@adcon1:	
  1653                           ; 1 bytes @ 0x4
  1654                           
  1655  0074                     getLoad_OK@ok:	
  1656                           ; 1 bytes @ 0x4
  1657                           
  1658  0074                     getLightsControl_OK@loadok:	
  1659                           ; 1 bytes @ 0x4
  1660                           
  1661                           
  1662                           ; 1 bytes @ 0x4
  1663  0074                     	ds	1
  1664  0075                     ??_getAD:	
  1665  0075                     ??_Mcu_Initialization:	
  1666                           ; 0 bytes @ 0x5
  1667                           
  1668  0075                     ??_getMain_All_Error_Status:	
  1669                           ; 0 bytes @ 0x5
  1670                           
  1671  0075                     ??_getMain_LoadOK:	
  1672                           ; 0 bytes @ 0x5
  1673                           
  1674  0075                     LedPointSelect@led:	
  1675                           ; 0 bytes @ 0x5
  1676                           
  1677  0075                     getAD@adcon0:	
  1678                           ; 1 bytes @ 0x5
  1679                           
  1680  0075                     setLoad_AH_AL_Restore@i:	
  1681                           ; 1 bytes @ 0x5
  1682                           
  1683  0075                     LightsPointSelect@lights:	
  1684                           ; 1 bytes @ 0x5
  1685                           
  1686                           
  1687                           ; 1 bytes @ 0x5
  1688  0075                     	ds	1
  1689  0076                     ??_setLED_Initialization:	
  1690  0076                     ??_setLED:	
  1691                           ; 0 bytes @ 0x6
  1692                           
  1693  0076                     ??_Load_Initialization:	
  1694                           ; 0 bytes @ 0x6
  1695                           
  1696  0076                     ??_Lights_Initialization:	
  1697                           ; 0 bytes @ 0x6
  1698                           
  1699  0076                     ??_SYSC_Main:	
  1700                           ; 0 bytes @ 0x6
  1701                           
  1702  0076                     ??_Temp_Main:	
  1703                           ; 0 bytes @ 0x6
  1704                           
  1705  0076                     ??_Lights_Main:	
  1706                           ; 0 bytes @ 0x6
  1707                           
  1708  0076                     ??_getAll_Lights_Line:	
  1709                           ; 0 bytes @ 0x6
  1710                           
  1711  0076                     ??_getLights_Status:	
  1712                           ; 0 bytes @ 0x6
  1713                           
  1714  0076                     ??_setLights_Initialization:	
  1715                           ; 0 bytes @ 0x6
  1716                           
  1717  0076                     ??_setLights_Line:	
  1718                           ; 0 bytes @ 0x6
  1719                           
  1720  0076                     ??_LED_Initialization:	
  1721                           ; 0 bytes @ 0x6
  1722                           
  1723  0076                     ??_LED_Main:	
  1724                           ; 0 bytes @ 0x6
  1725                           
  1726                           
  1727                           	psect	cstackBANK0
  1728  005A                     __pcstackBANK0:	
  1729                           ; 0 bytes @ 0x6
  1730                           
  1731  005A                     ??_setLED_Main:	
  1732  005A                     ?_setLED:	
  1733                           ; 0 bytes @ 0x0
  1734                           
  1735  005A                     ??_getLoad_AD:	
  1736                           ; 0 bytes @ 0x0
  1737                           
  1738  005A                     ??_getTemp_AD:	
  1739                           ; 0 bytes @ 0x0
  1740                           
  1741  005A                     ?_setLights_Trigger:	
  1742                           ; 0 bytes @ 0x0
  1743                           
  1744  005A                     ??_Lights_Control:	
  1745                           ; 0 bytes @ 0x0
  1746                           
  1747  005A                     ??_CDS_Main:	
  1748                           ; 0 bytes @ 0x0
  1749                           
  1750  005A                     ?_getCDS_AD:	
  1751                           ; 0 bytes @ 0x0
  1752                           
  1753  005A                     ?___awdiv:	
  1754                           ; 0 bytes @ 0x0
  1755                           
  1756  005A                     ?___lwdiv:	
  1757                           ; 2 bytes @ 0x0
  1758                           
  1759  005A                     getCDS_AD@channel2:	
  1760                           ; 2 bytes @ 0x0
  1761                           
  1762  005A                     setLED@command:	
  1763                           ; 1 bytes @ 0x0
  1764                           
  1765  005A                     getMain_Lights_Count@count:	
  1766                           ; 1 bytes @ 0x0
  1767                           
  1768  005A                     getMain_LoadOK@ok:	
  1769                           ; 1 bytes @ 0x0
  1770                           
  1771  005A                     setLights_Initialization@lights:	
  1772                           ; 1 bytes @ 0x0
  1773                           
  1774  005A                     getLights_Status@lights:	
  1775                           ; 1 bytes @ 0x0
  1776                           
  1777  005A                     setLights_Trigger@command:	
  1778                           ; 1 bytes @ 0x0
  1779                           
  1780  005A                     setLights_Line@lights:	
  1781                           ; 1 bytes @ 0x0
  1782                           
  1783  005A                     getAll_Lights_Line@line:	
  1784                           ; 1 bytes @ 0x0
  1785                           
  1786  005A                     _getMain_All_Error_Status$2474:	
  1787                           ; 1 bytes @ 0x0
  1788                           
  1789  005A                     ___awdiv@divisor:	
  1790                           ; 2 bytes @ 0x0
  1791                           
  1792  005A                     ___lwdiv@divisor:	
  1793                           ; 2 bytes @ 0x0
  1794                           
  1795                           
  1796                           ; 2 bytes @ 0x0
  1797  005A                     	ds	1
  1798  005B                     ??_setLights_Trigger:	
  1799  005B                     ??_getCDS_AD:	
  1800                           ; 0 bytes @ 0x1
  1801                           
  1802  005B                     setLED@led:	
  1803                           ; 0 bytes @ 0x1
  1804                           
  1805  005B                     getMain_Lights_Count@status2:	
  1806                           ; 1 bytes @ 0x1
  1807                           
  1808  005B                     getLights_Status@status:	
  1809                           ; 1 bytes @ 0x1
  1810                           
  1811                           
  1812                           ; 1 bytes @ 0x1
  1813  005B                     	ds	1
  1814  005C                     ??_setPIRLED_Main:	
  1815  005C                     ??_PIR_Initialization:	
  1816                           ; 0 bytes @ 0x2
  1817                           
  1818  005C                     ??_getMain_LightsStatus:	
  1819                           ; 0 bytes @ 0x2
  1820                           
  1821  005C                     setLED_Initialization@led:	
  1822                           ; 0 bytes @ 0x2
  1823                           
  1824  005C                     setLED_Main@led:	
  1825                           ; 1 bytes @ 0x2
  1826                           
  1827  005C                     getMain_Lights_Count@status3:	
  1828                           ; 1 bytes @ 0x2
  1829                           
  1830  005C                     getLoad_AD@channel:	
  1831                           ; 1 bytes @ 0x2
  1832                           
  1833  005C                     getTemp_AD@channel:	
  1834                           ; 1 bytes @ 0x2
  1835                           
  1836  005C                     setLights_Trigger@lights:	
  1837                           ; 1 bytes @ 0x2
  1838                           
  1839  005C                     _getMain_All_Error_Status$2483:	
  1840                           ; 1 bytes @ 0x2
  1841                           
  1842  005C                     _Lights_Control$4856:	
  1843                           ; 2 bytes @ 0x2
  1844                           
  1845  005C                     ___awdiv@dividend:	
  1846                           ; 2 bytes @ 0x2
  1847                           
  1848  005C                     ___lwdiv@dividend:	
  1849                           ; 2 bytes @ 0x2
  1850                           
  1851                           
  1852                           ; 2 bytes @ 0x2
  1853  005C                     	ds	1
  1854  005D                     ??_setMain_Exception:	
  1855  005D                     getCDS_AD@i:	
  1856                           ; 0 bytes @ 0x3
  1857                           
  1858  005D                     setPIRLED_Main@count:	
  1859                           ; 1 bytes @ 0x3
  1860                           
  1861  005D                     getMain_LightsStatus@count:	
  1862                           ; 1 bytes @ 0x3
  1863                           
  1864  005D                     getMain_Lights_Count@status1:	
  1865                           ; 1 bytes @ 0x3
  1866                           
  1867  005D                     getLoad_AD@k:	
  1868                           ; 1 bytes @ 0x3
  1869                           
  1870                           
  1871                           ; 1 bytes @ 0x3
  1872  005D                     	ds	1
  1873  005E                     getCDS_AD@j:	
  1874  005E                     getLoad_AD@j:	
  1875                           ; 1 bytes @ 0x4
  1876                           
  1877  005E                     Lights_Control@lights:	
  1878                           ; 1 bytes @ 0x4
  1879                           
  1880  005E                     ___awdiv@counter:	
  1881                           ; 1 bytes @ 0x4
  1882                           
  1883  005E                     ___lwdiv@counter:	
  1884                           ; 1 bytes @ 0x4
  1885                           
  1886  005E                     getMain_LightsStatus@i:	
  1887                           ; 1 bytes @ 0x4
  1888                           
  1889  005E                     _getMain_All_Error_Status$2485:	
  1890                           ; 2 bytes @ 0x4
  1891                           
  1892                           
  1893                           ; 2 bytes @ 0x4
  1894  005E                     	ds	1
  1895  005F                     getCDS_AD@channel1:	
  1896  005F                     setMain_Exception@buz:	
  1897                           ; 1 bytes @ 0x5
  1898                           
  1899  005F                     getLoad_AD@i:	
  1900                           ; 1 bytes @ 0x5
  1901                           
  1902  005F                     ___awdiv@sign:	
  1903                           ; 1 bytes @ 0x5
  1904                           
  1905  005F                     ___lwdiv@quotient:	
  1906                           ; 1 bytes @ 0x5
  1907                           
  1908                           
  1909                           ; 2 bytes @ 0x5
  1910  005F                     	ds	1
  1911  0060                     setMain_Exception@status:	
  1912  0060                     getMain_LightsStatus@status:	
  1913                           ; 1 bytes @ 0x6
  1914                           
  1915  0060                     getMain_All_Error_Status@command:	
  1916                           ; 1 bytes @ 0x6
  1917                           
  1918  0060                     ___awdiv@quotient:	
  1919                           ; 1 bytes @ 0x6
  1920                           
  1921                           
  1922                           ; 2 bytes @ 0x6
  1923  0060                     	ds	1
  1924  0061                     ??_Lights_Close:	
  1925  0061                     getMain_All_Error_Status@status:	
  1926                           ; 0 bytes @ 0x7
  1927                           
  1928  0061                     _setMain_Exception$2453:	
  1929                           ; 1 bytes @ 0x7
  1930                           
  1931                           
  1932                           ; 2 bytes @ 0x7
  1933  0061                     	ds	1
  1934  0062                     ?_getPIR_AD:	
  1935  0062                     ??_Load_Main:	
  1936                           ; 0 bytes @ 0x8
  1937                           
  1938  0062                     ??_setTemp_Main:	
  1939                           ; 0 bytes @ 0x8
  1940                           
  1941  0062                     ??_setSYSC_Main:	
  1942                           ; 0 bytes @ 0x8
  1943                           
  1944  0062                     ?_setLights:	
  1945                           ; 0 bytes @ 0x8
  1946                           
  1947  0062                     getPIR_AD@channel2:	
  1948                           ; 0 bytes @ 0x8
  1949                           
  1950  0062                     setLights@status:	
  1951                           ; 1 bytes @ 0x8
  1952                           
  1953                           
  1954                           ; 1 bytes @ 0x8
  1955  0062                     	ds	1
  1956  0063                     ??_getPIR_AD:	
  1957  0063                     ??_setLights:	
  1958                           ; 0 bytes @ 0x9
  1959                           
  1960  0063                     setMain_Exception@command:	
  1961                           ; 0 bytes @ 0x9
  1962                           
  1963                           
  1964                           ; 1 bytes @ 0x9
  1965  0063                     	ds	1
  1966  0064                     ??_PIR_Main:	
  1967  0064                     Load_Main@j:	
  1968                           ; 0 bytes @ 0xA
  1969                           
  1970                           
  1971                           ; 1 bytes @ 0xA
  1972  0064                     	ds	1
  1973  0065                     Load_Main@adjgo:	
  1974  0065                     _setLights$4853:	
  1975                           ; 1 bytes @ 0xB
  1976                           
  1977                           
  1978                           ; 2 bytes @ 0xB
  1979  0065                     	ds	1
  1980  0066                     _Load_Main$2768:	
  1981  0066                     getPIR_AD@j:	
  1982                           ; 1 bytes @ 0xC
  1983                           
  1984                           
  1985                           ; 1 bytes @ 0xC
  1986  0066                     	ds	1
  1987  0067                     Load_Main@error:	
  1988  0067                     getPIR_AD@channel1:	
  1989                           ; 1 bytes @ 0xD
  1990                           
  1991  0067                     setLights@lights:	
  1992                           ; 1 bytes @ 0xD
  1993                           
  1994                           
  1995                           ; 1 bytes @ 0xD
  1996  0067                     	ds	1
  1997  0068                     ??_setLights_Main:	
  1998  0068                     Load_Main@i:	
  1999                           ; 0 bytes @ 0xE
  2000                           
  2001  0068                     getPIR_AD@i:	
  2002                           ; 1 bytes @ 0xE
  2003                           
  2004                           
  2005                           ; 1 bytes @ 0xE
  2006  0068                     	ds	1
  2007  0069                     _PIR_Main$3301:	
  2008                           
  2009                           ; 2 bytes @ 0xF
  2010  0069                     	ds	2
  2011  006B                     PIR_Main@error:	
  2012  006B                     _setLights_Main$4849:	
  2013                           ; 1 bytes @ 0x11
  2014                           
  2015                           
  2016                           ; 2 bytes @ 0x11
  2017  006B                     	ds	2
  2018  006D                     setLights_Main@lights:	
  2019                           
  2020                           ; 1 bytes @ 0x13
  2021  006D                     	ds	1
  2022  006E                     ??_main:	
  2023                           
  2024                           ; 0 bytes @ 0x14
  2025  006E                     	ds	1
  2026                           
  2027                           	psect	maintext
  2028  075F                     __pmaintext:	
  2029 ;;
  2030 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2031 ;;
  2032 ;; *************** function _main *****************
  2033 ;; Defined at:
  2034 ;;		line 7 in file "../src/Main_B1.c"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;  argc            2    0[BANK2 ] int 
  2037 ;;  argv            2    2[BANK2 ] PTR PTR unsigned char 
  2038 ;; Auto vars:     Size  Location     Type
  2039 ;;		None
  2040 ;; Return value:  Size  Location     Type
  2041 ;;                  2    0[BANK2 ] int 
  2042 ;; Registers used:
  2043 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2044 ;; Tracked objects:
  2045 ;;		On entry : 17F/0
  2046 ;;		On exit  : 0/0
  2047 ;;		Unchanged: 0/0
  2048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2049 ;;      Params:         0       0       0       4
  2050 ;;      Locals:         0       0       0       0
  2051 ;;      Temps:          0       1       0       0
  2052 ;;      Totals:         0       1       0       4
  2053 ;;Total ram usage:        5 bytes
  2054 ;; Hardware stack levels required when called:    7
  2055 ;; This function calls:
  2056 ;;		_CDS_Initialization
  2057 ;;		_CDS_Main
  2058 ;;		_DetectSYSC_Signal
  2059 ;;		_LED_Initialization
  2060 ;;		_LED_Main
  2061 ;;		_Lights_Initialization
  2062 ;;		_Lights_Main
  2063 ;;		_Load_Initialization
  2064 ;;		_Load_Main
  2065 ;;		_Mcu_Initialization
  2066 ;;		_PIR_Initialization
  2067 ;;		_PIR_Main
  2068 ;;		_SYSC_Initialization
  2069 ;;		_SYSC_Main
  2070 ;;		_Temp_Initialization
  2071 ;;		_Temp_Main
  2072 ;;		_WDT_Main
  2073 ;;		_getCDS_AD
  2074 ;;		_getLoad_AD
  2075 ;;		_getPIR_AD
  2076 ;;		_getTemp_AD
  2077 ;;		_myMain_Initialization
  2078 ;;		_my_MainTimer
  2079 ;; This function is called by:
  2080 ;;		Startup code after reset
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           
  2085                           ;psect for function _main
  2086  075F                     _main:	
  2087                           
  2088                           ;Main_B1.c: 8: myMain_Initialization();
  2089                           
  2090                           ;incstack = 0
  2091                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2092  075F  118A  2003  118A   	fcall	_myMain_Initialization
  2093                           
  2094                           ;Main_B1.c: 9: Mcu_Initialization();
  2095  0762  158A  240B  118A   	fcall	_Mcu_Initialization
  2096                           
  2097                           ;Main_B1.c: 10: ;;
  2098                           ;Main_B1.c: 11: LED_Initialization();
  2099  0765  158A  23AE  118A   	fcall	_LED_Initialization
  2100                           
  2101                           ;Main_B1.c: 12: ;;
  2102                           ;Main_B1.c: 14: SYSC_Initialization();
  2103  0768  158A  234C  118A   	fcall	_SYSC_Initialization
  2104                           
  2105                           ;Main_B1.c: 15: Temp_Initialization();
  2106  076B  158A  2352  118A   	fcall	_Temp_Initialization
  2107                           
  2108                           ;Main_B1.c: 16: Load_Initialization();
  2109  076E  158A  2369  118A   	fcall	_Load_Initialization
  2110                           
  2111                           ;Main_B1.c: 17: ;;
  2112                           ;Main_B1.c: 18: ;;
  2113                           ;Main_B1.c: 20: ;;
  2114                           ;Main_B1.c: 21: Lights_Initialization();
  2115  0771  158A  235C  118A   	fcall	_Lights_Initialization
  2116                           
  2117                           ;Main_B1.c: 22: CDS_Initialization();
  2118  0774  158A  2358  118A   	fcall	_CDS_Initialization
  2119                           
  2120                           ;Main_B1.c: 23: PIR_Initialization();
  2121  0777  158A  248E  118A   	fcall	_PIR_Initialization
  2122                           
  2123                           ;Main_B1.c: 24: ;;
  2124                           ;Main_B1.c: 25: ;;
  2125                           ;Main_B1.c: 26: __nop();
  2126  077A  0000               	nop
  2127  077B                     l5101:	
  2128                           ;Main_B1.c: 27: ;;
  2129                           ;Main_B1.c: 29: while (1) {
  2130                           
  2131                           
  2132                           ;Main_B1.c: 31: if (myMain.PowerON == 1) {
  2133  077B  1283               	bcf	3,5	;RP0=0, select bank0
  2134  077C  1303               	bcf	3,6	;RP1=0, select bank0
  2135  077D  1C20               	btfss	_myMain,0
  2136  077E  2F9E               	goto	l5113
  2137                           
  2138                           ;Main_B1.c: 33: DetectSYSC_Signal();
  2139  077F  158A  23D2  118A   	fcall	_DetectSYSC_Signal
  2140                           
  2141                           ;Main_B1.c: 37: getLoad_AD(0x01);
  2142  0782  3001               	movlw	1
  2143  0783  118A  2530  118A   	fcall	_getLoad_AD
  2144                           
  2145                           ;Main_B1.c: 41: getTemp_AD(0x11);
  2146  0786  3011               	movlw	17
  2147  0787  158A  25A1  118A   	fcall	_getTemp_AD
  2148                           
  2149                           ;Main_B1.c: 49: getCDS_AD(0x09, 0x31);
  2150  078A  3031               	movlw	49
  2151  078B  1283               	bcf	3,5	;RP0=0, select bank0
  2152  078C  1303               	bcf	3,6	;RP1=0, select bank0
  2153  078D  00EE               	movwf	??_main
  2154  078E  086E               	movf	??_main,w
  2155  078F  00DA               	movwf	getCDS_AD@channel2
  2156  0790  3009               	movlw	9
  2157  0791  158A  2577  118A   	fcall	_getCDS_AD
  2158                           
  2159                           ;Main_B1.c: 53: getPIR_AD(0x05, 0x0d);
  2160  0794  300D               	movlw	13
  2161  0795  1283               	bcf	3,5	;RP0=0, select bank0
  2162  0796  1303               	bcf	3,6	;RP1=0, select bank0
  2163  0797  00EE               	movwf	??_main
  2164  0798  086E               	movf	??_main,w
  2165  0799  00E2               	movwf	getPIR_AD@channel2
  2166  079A  3005               	movlw	5
  2167  079B  118A  2372  118A   	fcall	_getPIR_AD
  2168  079E                     l5113:	
  2169                           
  2170                           ;Main_B1.c: 56: }
  2171                           ;Main_B1.c: 92: if (Timer1.Timeout == 1) {
  2172  079E  1283               	bcf	3,5	;RP0=0, select bank0
  2173  079F  1303               	bcf	3,6	;RP1=0, select bank0
  2174  07A0  1C36               	btfss	_Timer1,0
  2175  07A1  2F7B               	goto	l5101
  2176                           
  2177                           ;Main_B1.c: 93: Timer1.Timeout = 0;
  2178  07A2  1036               	bcf	_Timer1,0
  2179                           
  2180                           ;Main_B1.c: 94: my_MainTimer();
  2181  07A3  158A  24B6  118A   	fcall	_my_MainTimer
  2182                           
  2183                           ;Main_B1.c: 95: WDT_Main();
  2184  07A6  158A  241A  118A   	fcall	_WDT_Main
  2185                           
  2186                           ;Main_B1.c: 96: ;;
  2187                           ;Main_B1.c: 97: ;;
  2188                           ;Main_B1.c: 98: if (myMain.PowerON == 1) {
  2189  07A9  1283               	bcf	3,5	;RP0=0, select bank0
  2190  07AA  1303               	bcf	3,6	;RP1=0, select bank0
  2191  07AB  1C20               	btfss	_myMain,0
  2192  07AC  2F7B               	goto	l5101
  2193                           
  2194                           ;Main_B1.c: 99: ;;
  2195                           ;Main_B1.c: 101: LED_Main();
  2196  07AD  158A  23FC  118A   	fcall	_LED_Main
  2197                           
  2198                           ;Main_B1.c: 102: ;;
  2199                           ;Main_B1.c: 104: SYSC_Main();
  2200  07B0  158A  234F  118A   	fcall	_SYSC_Main
  2201                           
  2202                           ;Main_B1.c: 105: Temp_Main();
  2203  07B3  158A  2355  118A   	fcall	_Temp_Main
  2204                           
  2205                           ;Main_B1.c: 106: Load_Main();
  2206  07B6  118A  220D  118A   	fcall	_Load_Main
  2207                           
  2208                           ;Main_B1.c: 107: ;;
  2209                           ;Main_B1.c: 109: Lights_Main();
  2210  07B9  158A  23A3  118A   	fcall	_Lights_Main
  2211                           
  2212                           ;Main_B1.c: 110: ;;
  2213                           ;Main_B1.c: 111: ;;
  2214                           ;Main_B1.c: 112: CDS_Main();
  2215  07BC  158A  25FB  118A   	fcall	_CDS_Main
  2216                           
  2217                           ;Main_B1.c: 113: PIR_Main();
  2218  07BF  118A  2026  118A   	fcall	_PIR_Main
  2219                           
  2220                           ;Main_B1.c: 115: ;;
  2221                           ;Main_B1.c: 116: ;;
  2222                           ;Main_B1.c: 117: ;;
  2223  07C2  2F7B               	goto	l5101
  2224  07C3                     __end_of_main:	
  2225                           ;Main_B1.c: 125: }
  2226                           ;Main_B1.c: 126: }
  2227                           ;Main_B1.c: 160: }
  2228                           ;Main_B1.c: 161: return (0);
  2229                           ;	Return value of _main is never used
  2230                           
  2231                           
  2232                           	psect	text1
  2233  0CB6                     __ptext1:	
  2234 ;; *************** function _my_MainTimer *****************
  2235 ;; Defined at:
  2236 ;;		line 180 in file "../src/Main_B1.c"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;		None
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;		None
  2241 ;; Return value:  Size  Location     Type
  2242 ;;		None               void
  2243 ;; Registers used:
  2244 ;;		wreg, status,2
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2250 ;;      Params:         0       0       0       0
  2251 ;;      Locals:         0       0       0       0
  2252 ;;      Temps:          0       0       0       0
  2253 ;;      Totals:         0       0       0       0
  2254 ;;Total ram usage:        0 bytes
  2255 ;; Hardware stack levels used:    1
  2256 ;; Hardware stack levels required when called:    2
  2257 ;; This function calls:
  2258 ;;		Nothing
  2259 ;; This function is called by:
  2260 ;;		_main
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           
  2265                           ;psect for function _my_MainTimer
  2266  0CB6                     _my_MainTimer:	
  2267                           
  2268                           ;Main_B1.c: 182: if (myMain.PowerON == 0) {
  2269                           
  2270                           ;incstack = 0
  2271                           ; Regs used in _my_MainTimer: [wreg+status,2]
  2272  0CB6  1283               	bcf	3,5	;RP0=0, select bank0
  2273  0CB7  1303               	bcf	3,6	;RP1=0, select bank0
  2274  0CB8  1820               	btfsc	_myMain,0
  2275  0CB9  0008               	return
  2276                           
  2277                           ;Main_B1.c: 183: myMain.PowerCount++;
  2278  0CBA  3001               	movlw	1
  2279  0CBB  07A2               	addwf	_myMain+2,f
  2280  0CBC  1803               	skipnc
  2281  0CBD  0AA3               	incf	_myMain+3,f
  2282  0CBE  3000               	movlw	0
  2283  0CBF  07A3               	addwf	_myMain+3,f
  2284                           
  2285                           ;Main_B1.c: 184: if (myMain.PowerCount == 150)
  2286  0CC0  3096               	movlw	150
  2287  0CC1  0622               	xorwf	_myMain+2,w
  2288  0CC2  0423               	iorwf	_myMain+3,w
  2289  0CC3  1D03               	skipz
  2290  0CC4  0008               	return
  2291                           
  2292                           ;Main_B1.c: 185: {
  2293                           ;Main_B1.c: 186: myMain.PowerCount = 0;
  2294  0CC5  01A2               	clrf	_myMain+2
  2295  0CC6  01A3               	clrf	_myMain+3
  2296                           
  2297                           ;Main_B1.c: 187: myMain.PowerON = 1;
  2298  0CC7  1420               	bsf	_myMain,0
  2299                           
  2300                           ;Main_B1.c: 193: ;;
  2301                           ;Main_B1.c: 194: myMain.SelfTest = 1;
  2302  0CC8  1620               	bsf	_myMain,4
  2303                           
  2304                           ;Main_B1.c: 203: }
  2305                           ;Main_B1.c: 204: } else {
  2306  0CC9  0008               	return
  2307  0CCA                     __end_of_my_MainTimer:	
  2308                           
  2309                           	psect	text2
  2310  0003                     __ptext2:	
  2311 ;; *************** function _myMain_Initialization *****************
  2312 ;; Defined at:
  2313 ;;		line 167 in file "../src/Main_B1.c"
  2314 ;; Parameters:    Size  Location     Type
  2315 ;;		None
  2316 ;; Auto vars:     Size  Location     Type
  2317 ;;		None
  2318 ;; Return value:  Size  Location     Type
  2319 ;;		None               void
  2320 ;; Registers used:
  2321 ;;		None
  2322 ;; Tracked objects:
  2323 ;;		On entry : 0/0
  2324 ;;		On exit  : 0/0
  2325 ;;		Unchanged: 0/0
  2326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2327 ;;      Params:         0       0       0       0
  2328 ;;      Locals:         0       0       0       0
  2329 ;;      Temps:          0       0       0       0
  2330 ;;      Totals:         0       0       0       0
  2331 ;;Total ram usage:        0 bytes
  2332 ;; Hardware stack levels used:    1
  2333 ;; Hardware stack levels required when called:    2
  2334 ;; This function calls:
  2335 ;;		Nothing
  2336 ;; This function is called by:
  2337 ;;		_main
  2338 ;; This function uses a non-reentrant model
  2339 ;;
  2340                           
  2341                           
  2342                           ;psect for function _myMain_Initialization
  2343  0003                     _myMain_Initialization:	
  2344                           
  2345                           ;incstack = 0
  2346                           ; Regs used in _myMain_Initialization: []
  2347  0003  0008               	return
  2348  0004                     __end_of_myMain_Initialization:	
  2349                           
  2350                           	psect	text3
  2351  0DA1                     __ptext3:	
  2352 ;; *************** function _getTemp_AD *****************
  2353 ;; Defined at:
  2354 ;;		line 16 in file "../src/OverTemperature_B1.c"
  2355 ;; Parameters:    Size  Location     Type
  2356 ;;  channel         1    wreg     unsigned char 
  2357 ;; Auto vars:     Size  Location     Type
  2358 ;;  channel         1    2[BANK0 ] unsigned char 
  2359 ;; Return value:  Size  Location     Type
  2360 ;;		None               void
  2361 ;; Registers used:
  2362 ;;		wreg, status,2, status,0, pclath, cstack
  2363 ;; Tracked objects:
  2364 ;;		On entry : 0/0
  2365 ;;		On exit  : 0/0
  2366 ;;		Unchanged: 0/0
  2367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2368 ;;      Params:         0       0       0       0
  2369 ;;      Locals:         0       1       0       0
  2370 ;;      Temps:          0       2       0       0
  2371 ;;      Totals:         0       3       0       0
  2372 ;;Total ram usage:        3 bytes
  2373 ;; Hardware stack levels used:    1
  2374 ;; Hardware stack levels required when called:    4
  2375 ;; This function calls:
  2376 ;;		_getAD
  2377 ;; This function is called by:
  2378 ;;		_main
  2379 ;; This function uses a non-reentrant model
  2380 ;;
  2381                           
  2382                           
  2383                           ;psect for function _getTemp_AD
  2384  0DA1                     _getTemp_AD:	
  2385                           
  2386                           ;incstack = 0
  2387                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2388                           ;getTemp_AD@channel stored from wreg
  2389  0DA1  1283               	bcf	3,5	;RP0=0, select bank0
  2390  0DA2  1303               	bcf	3,6	;RP1=0, select bank0
  2391  0DA3  00DC               	movwf	getTemp_AD@channel
  2392                           
  2393                           ;OverTemperature_B1.c: 18: if (RA5 == 1) {
  2394  0DA4  1E85               	btfss	5,5	;volatile
  2395  0DA5  0008               	return
  2396                           
  2397                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  2398  0DA6  1D3B               	btfss	_Temp,2
  2399  0DA7  0008               	return
  2400                           
  2401                           ;OverTemperature_B1.c: 20: Temp.ADRES = getAD(channel, 0x70);
  2402  0DA8  3070               	movlw	112
  2403  0DA9  00DA               	movwf	??_getTemp_AD
  2404  0DAA  085A               	movf	??_getTemp_AD,w
  2405  0DAB  00F4               	movwf	getAD@adcon1
  2406  0DAC  085C               	movf	getTemp_AD@channel,w
  2407  0DAD  158A  255B  158A   	fcall	_getAD
  2408  0DB0  1283               	bcf	3,5	;RP0=0, select bank0
  2409  0DB1  1303               	bcf	3,6	;RP1=0, select bank0
  2410  0DB2  00DB               	movwf	??_getTemp_AD+1
  2411  0DB3  085B               	movf	??_getTemp_AD+1,w
  2412  0DB4  00C4               	movwf	_Temp+9
  2413                           
  2414                           ;OverTemperature_B1.c: 21: if (Temp.ADRES > 0) {
  2415  0DB5  0844               	movf	_Temp+9,w
  2416  0DB6  1903               	btfsc	3,2
  2417  0DB7  0008               	return
  2418                           
  2419                           ;OverTemperature_B1.c: 22: Temp.GO = 1;
  2420  0DB8  163B               	bsf	_Temp,4
  2421                           
  2422                           ;OverTemperature_B1.c: 23: if (Temp.ADH[0] < Temp.ADRES) {
  2423  0DB9  0844               	movf	_Temp+9,w
  2424  0DBA  0242               	subwf	_Temp+7,w
  2425  0DBB  1803               	skipnc
  2426  0DBC  2DC2               	goto	l4699
  2427                           
  2428                           ;OverTemperature_B1.c: 24: Temp.ADH[0] = Temp.ADRES;
  2429  0DBD  0844               	movf	_Temp+9,w
  2430  0DBE  00DA               	movwf	??_getTemp_AD
  2431  0DBF  085A               	movf	??_getTemp_AD,w
  2432  0DC0  00C2               	movwf	_Temp+7
  2433                           
  2434                           ;OverTemperature_B1.c: 25: } else if (Temp.ADH[1] < Temp.ADRES) {
  2435  0DC1  0008               	return
  2436  0DC2                     l4699:	
  2437  0DC2  0844               	movf	_Temp+9,w
  2438  0DC3  0243               	subwf	_Temp+8,w
  2439  0DC4  1803               	skipnc
  2440  0DC5  0008               	return
  2441                           
  2442                           ;OverTemperature_B1.c: 26: Temp.ADH[1] = Temp.ADRES;
  2443  0DC6  0844               	movf	_Temp+9,w
  2444  0DC7  00DA               	movwf	??_getTemp_AD
  2445  0DC8  085A               	movf	??_getTemp_AD,w
  2446  0DC9  00C3               	movwf	_Temp+8
  2447  0DCA  0008               	return
  2448  0DCB                     __end_of_getTemp_AD:	
  2449                           
  2450                           	psect	text4
  2451  0372                     __ptext4:	
  2452 ;; *************** function _getPIR_AD *****************
  2453 ;; Defined at:
  2454 ;;		line 162 in file "../src/PIR_B1.c"
  2455 ;; Parameters:    Size  Location     Type
  2456 ;;  channel1        1    wreg     unsigned char 
  2457 ;;  channel2        1    8[BANK0 ] unsigned char 
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;  channel1        1   13[BANK0 ] unsigned char 
  2460 ;;  i               1   14[BANK0 ] unsigned char 
  2461 ;;  j               1   12[BANK0 ] unsigned char 
  2462 ;; Return value:  Size  Location     Type
  2463 ;;		None               void
  2464 ;; Registers used:
  2465 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2466 ;; Tracked objects:
  2467 ;;		On entry : 0/0
  2468 ;;		On exit  : 0/0
  2469 ;;		Unchanged: 0/0
  2470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2471 ;;      Params:         0       1       0       0
  2472 ;;      Locals:         0       3       0       0
  2473 ;;      Temps:          0       3       0       0
  2474 ;;      Totals:         0       7       0       0
  2475 ;;Total ram usage:        7 bytes
  2476 ;; Hardware stack levels used:    1
  2477 ;; Hardware stack levels required when called:    4
  2478 ;; This function calls:
  2479 ;;		___awdiv
  2480 ;;		___lwdiv
  2481 ;;		_getAD
  2482 ;; This function is called by:
  2483 ;;		_main
  2484 ;; This function uses a non-reentrant model
  2485 ;;
  2486                           
  2487                           
  2488                           ;psect for function _getPIR_AD
  2489  0372                     _getPIR_AD:	
  2490                           
  2491                           ;incstack = 0
  2492                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2493                           ;getPIR_AD@channel1 stored from wreg
  2494  0372  1283               	bcf	3,5	;RP0=0, select bank0
  2495  0373  1303               	bcf	3,6	;RP1=0, select bank0
  2496  0374  00E7               	movwf	getPIR_AD@channel1
  2497                           
  2498                           ;PIR_B1.c: 163: char i = 0, j = 0;
  2499  0375  01E8               	clrf	getPIR_AD@i
  2500  0376  01E6               	clrf	getPIR_AD@j
  2501                           
  2502                           ;PIR_B1.c: 165: if (_PIR.ADtoGO == 1) {
  2503  0377  1683               	bsf	3,5	;RP0=1, select bank1
  2504  0378  1303               	bcf	3,6	;RP1=0, select bank1
  2505  0379  1CA0               	btfss	__PIR^(0+128),1
  2506  037A  0008               	return
  2507                           
  2508                           ;PIR_B1.c: 166: _PIR.GO = 1;
  2509  037B  1520               	bsf	__PIR^(0+128),2
  2510                           
  2511                           ;PIR_B1.c: 167: _PIR.ADRES = getAD(channel1, 0x70);
  2512  037C  3070               	movlw	112
  2513  037D  1283               	bcf	3,5	;RP0=0, select bank0
  2514  037E  1303               	bcf	3,6	;RP1=0, select bank0
  2515  037F  00E3               	movwf	??_getPIR_AD
  2516  0380  0863               	movf	??_getPIR_AD,w
  2517  0381  00F4               	movwf	getAD@adcon1
  2518  0382  0867               	movf	getPIR_AD@channel1,w
  2519  0383  158A  255B  118A   	fcall	_getAD
  2520  0386  1283               	bcf	3,5	;RP0=0, select bank0
  2521  0387  1303               	bcf	3,6	;RP1=0, select bank0
  2522  0388  00E4               	movwf	??_getPIR_AD+1
  2523  0389  0864               	movf	??_getPIR_AD+1,w
  2524  038A  1683               	bsf	3,5	;RP0=1, select bank1
  2525  038B  1303               	bcf	3,6	;RP1=0, select bank1
  2526  038C  00A2               	movwf	(__PIR^(0+128)+2)
  2527                           
  2528                           ;PIR_B1.c: 168: _PIR.VRAD = _PIR.ADRES / 51;
  2529  038D  3033               	movlw	51
  2530  038E  1283               	bcf	3,5	;RP0=0, select bank0
  2531  038F  1303               	bcf	3,6	;RP1=0, select bank0
  2532  0390  00DA               	movwf	___awdiv@divisor
  2533  0391  3000               	movlw	0
  2534  0392  00DB               	movwf	___awdiv@divisor+1
  2535  0393  1683               	bsf	3,5	;RP0=1, select bank1
  2536  0394  1303               	bcf	3,6	;RP1=0, select bank1
  2537  0395  0822               	movf	(__PIR^(0+128)+2),w
  2538  0396  1283               	bcf	3,5	;RP0=0, select bank0
  2539  0397  1303               	bcf	3,6	;RP1=0, select bank0
  2540  0398  00E3               	movwf	??_getPIR_AD
  2541  0399  01E4               	clrf	??_getPIR_AD+1
  2542  039A  0863               	movf	??_getPIR_AD,w
  2543  039B  00DC               	movwf	___awdiv@dividend
  2544  039C  0864               	movf	??_getPIR_AD+1,w
  2545  039D  00DD               	movwf	___awdiv@dividend+1
  2546  039E  158A  27A3  118A   	fcall	___awdiv
  2547  03A1  1283               	bcf	3,5	;RP0=0, select bank0
  2548  03A2  1303               	bcf	3,6	;RP1=0, select bank0
  2549  03A3  085A               	movf	?___awdiv,w
  2550  03A4  00E5               	movwf	??_getPIR_AD+2
  2551  03A5  0865               	movf	??_getPIR_AD+2,w
  2552  03A6  1683               	bsf	3,5	;RP0=1, select bank1
  2553  03A7  1303               	bcf	3,6	;RP1=0, select bank1
  2554  03A8  00A3               	movwf	(__PIR^(0+128)+3)
  2555                           
  2556                           ;PIR_B1.c: 169: _PIR.VRAD1 = _PIR.ADRES;
  2557  03A9  0822               	movf	(__PIR^(0+128)+2),w
  2558  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  2559  03AB  1303               	bcf	3,6	;RP1=0, select bank0
  2560  03AC  00E3               	movwf	??_getPIR_AD
  2561  03AD  0863               	movf	??_getPIR_AD,w
  2562  03AE  1683               	bsf	3,5	;RP0=1, select bank1
  2563  03AF  1303               	bcf	3,6	;RP1=0, select bank1
  2564  03B0  00A4               	movwf	(__PIR^(0+128)+4)
  2565                           
  2566                           ;PIR_B1.c: 170: _PIR.ADRES = getAD(channel2, 0x70);
  2567  03B1  3070               	movlw	112
  2568  03B2  1283               	bcf	3,5	;RP0=0, select bank0
  2569  03B3  1303               	bcf	3,6	;RP1=0, select bank0
  2570  03B4  00E3               	movwf	??_getPIR_AD
  2571  03B5  0863               	movf	??_getPIR_AD,w
  2572  03B6  00F4               	movwf	getAD@adcon1
  2573  03B7  0862               	movf	getPIR_AD@channel2,w
  2574  03B8  158A  255B  118A   	fcall	_getAD
  2575  03BB  1283               	bcf	3,5	;RP0=0, select bank0
  2576  03BC  1303               	bcf	3,6	;RP1=0, select bank0
  2577  03BD  00E4               	movwf	??_getPIR_AD+1
  2578  03BE  0864               	movf	??_getPIR_AD+1,w
  2579  03BF  1683               	bsf	3,5	;RP0=1, select bank1
  2580  03C0  1303               	bcf	3,6	;RP1=0, select bank1
  2581  03C1  00A2               	movwf	(__PIR^(0+128)+2)
  2582                           
  2583                           ;PIR_B1.c: 171: _PIR.SignalAD = _PIR.ADRES;
  2584  03C2  0822               	movf	(__PIR^(0+128)+2),w
  2585  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  2586  03C4  1303               	bcf	3,6	;RP1=0, select bank0
  2587  03C5  00E3               	movwf	??_getPIR_AD
  2588  03C6  0863               	movf	??_getPIR_AD,w
  2589  03C7  1683               	bsf	3,5	;RP0=1, select bank1
  2590  03C8  1303               	bcf	3,6	;RP1=0, select bank1
  2591  03C9  00A1               	movwf	(__PIR^(0+128)+1)
  2592                           
  2593                           ;PIR_B1.c: 173: switch (_PIR.VRAD) {
  2594  03CA  2BE6               	goto	l4731
  2595  03CB                     l4715:	
  2596                           ;PIR_B1.c: 174: case 0:
  2597                           
  2598                           
  2599                           ;PIR_B1.c: 175: if (_PIR.VRAD1 < 10) {
  2600  03CB  300A               	movlw	10
  2601  03CC  0224               	subwf	(__PIR^(0+128)+4),w
  2602  03CD  1803               	skipnc
  2603  03CE  2BD1               	goto	l4719
  2604                           
  2605                           ;PIR_B1.c: 176: _PIR.CloseTimeValue = 5;
  2606  03CF  3005               	movlw	5
  2607  03D0  2BD2               	goto	L1
  2608  03D1                     l4719:	
  2609                           ;PIR_B1.c: 177: } else {
  2610                           
  2611                           
  2612                           ;PIR_B1.c: 178: _PIR.CloseTimeValue = 60;
  2613  03D1  303C               	movlw	60
  2614  03D2                     L1:	
  2615  03D2  00C7               	movwf	(__PIR^(0+128)+39)
  2616  03D3  3000               	movlw	0
  2617  03D4  2BE4               	goto	L5
  2618  03D5                     l4721:	
  2619                           ;PIR_B1.c: 181: case 1:
  2620                           
  2621                           ;PIR_B1.c: 179: }
  2622                           ;PIR_B1.c: 180: break;
  2623                           
  2624                           
  2625                           ;PIR_B1.c: 182: _PIR.CloseTimeValue = 300;
  2626  03D5  302C               	movlw	44
  2627  03D6  00C7               	movwf	(__PIR^(0+128)+39)
  2628  03D7  3001               	movlw	1
  2629  03D8  2BE4               	goto	L5
  2630  03D9                     l4723:	
  2631                           ;PIR_B1.c: 184: case 2:
  2632                           
  2633                           ;PIR_B1.c: 183: break;
  2634                           
  2635                           
  2636                           ;PIR_B1.c: 185: _PIR.CloseTimeValue = 600;
  2637  03D9  3058               	movlw	88
  2638  03DA  00C7               	movwf	(__PIR^(0+128)+39)
  2639  03DB  3002               	movlw	2
  2640  03DC  2BE4               	goto	L5
  2641  03DD                     l4725:	
  2642                           ;PIR_B1.c: 187: case 3:
  2643                           
  2644                           ;PIR_B1.c: 186: break;
  2645                           
  2646                           
  2647                           ;PIR_B1.c: 188: _PIR.CloseTimeValue = 900;
  2648  03DD  3084               	movlw	132
  2649  03DE  00C7               	movwf	(__PIR^(0+128)+39)
  2650  03DF  3003               	movlw	3
  2651  03E0  2BE4               	goto	L5
  2652  03E1                     l4727:	
  2653                           ;PIR_B1.c: 190: case 4:
  2654                           
  2655                           ;PIR_B1.c: 189: break;
  2656                           
  2657                           
  2658                           ;PIR_B1.c: 191: _PIR.CloseTimeValue = 1200;
  2659  03E1  30B0               	movlw	176
  2660  03E2  00C7               	movwf	(__PIR^(0+128)+39)
  2661  03E3  3004               	movlw	4
  2662  03E4                     L5:	
  2663  03E4  00C8               	movwf	(__PIR^(0+128)+40)
  2664                           
  2665                           ;PIR_B1.c: 193: }
  2666                           
  2667                           ;PIR_B1.c: 192: break;
  2668  03E5  2BF7               	goto	l4733
  2669  03E6                     l4731:	
  2670  03E6  0823               	movf	(__PIR^(0+128)+3),w
  2671                           
  2672                           ; Switch size 1, requested type "space"
  2673                           ; Number of cases is 5, Range of values is 0 to 4
  2674                           ; switch strategies available:
  2675                           ; Name         Instructions Cycles
  2676                           ; simple_byte           16     9 (average)
  2677                           ; direct_byte           17     7 (fixed)
  2678                           ; jumptable            260     6 (fixed)
  2679                           ;	Chosen strategy is simple_byte
  2680  03E7  3A00               	xorlw	0	; case 0
  2681  03E8  1903               	skipnz
  2682  03E9  2BCB               	goto	l4715
  2683  03EA  3A01               	xorlw	1	; case 1
  2684  03EB  1903               	skipnz
  2685  03EC  2BD5               	goto	l4721
  2686  03ED  3A03               	xorlw	3	; case 2
  2687  03EE  1903               	skipnz
  2688  03EF  2BD9               	goto	l4723
  2689  03F0  3A01               	xorlw	1	; case 3
  2690  03F1  1903               	skipnz
  2691  03F2  2BDD               	goto	l4725
  2692  03F3  3A07               	xorlw	7	; case 4
  2693  03F4  1903               	skipnz
  2694  03F5  2BE1               	goto	l4727
  2695  03F6  2BF7               	goto	l4733
  2696  03F7                     l4733:	
  2697                           
  2698                           ;PIR_B1.c: 196: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2699  03F7  0821               	movf	(__PIR^(0+128)+1),w
  2700  03F8  1283               	bcf	3,5	;RP0=0, select bank0
  2701  03F9  1303               	bcf	3,6	;RP1=0, select bank0
  2702  03FA  00E3               	movwf	??_getPIR_AD
  2703  03FB  1683               	bsf	3,5	;RP0=1, select bank1
  2704  03FC  1303               	bcf	3,6	;RP1=0, select bank1
  2705  03FD  0827               	movf	(__PIR^(0+128)+7),w
  2706  03FE  3EA8               	addlw	(__PIR+8)& (0+255)
  2707  03FF  0084               	movwf	4
  2708  0400  1283               	bcf	3,5	;RP0=0, select bank0
  2709  0401  1303               	bcf	3,6	;RP1=0, select bank0
  2710  0402  0863               	movf	??_getPIR_AD,w
  2711  0403  1383               	bcf	3,7	;select IRP bank1
  2712  0404  0080               	movwf	0
  2713                           
  2714                           ;PIR_B1.c: 197: for (i = 0; i < 10; i++) {
  2715  0405  01E8               	clrf	getPIR_AD@i
  2716  0406  300A               	movlw	10
  2717  0407  0268               	subwf	getPIR_AD@i,w
  2718  0408  1803               	btfsc	3,0
  2719  0409  2C26               	goto	l4747
  2720  040A                     l4741:	
  2721                           
  2722                           ;PIR_B1.c: 198: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2723  040A  0868               	movf	getPIR_AD@i,w
  2724  040B  3EA8               	addlw	(__PIR+8)& (0+255)
  2725  040C  0084               	movwf	4
  2726  040D  0800               	movf	0,w
  2727  040E  00E3               	movwf	??_getPIR_AD
  2728  040F  01E4               	clrf	??_getPIR_AD+1
  2729  0410  0863               	movf	??_getPIR_AD,w
  2730  0411  1683               	bsf	3,5	;RP0=1, select bank1
  2731  0412  1303               	bcf	3,6	;RP1=0, select bank1
  2732  0413  07B2               	addwf	(__PIR^(0+128)+18),f
  2733  0414  1803               	skipnc
  2734  0415  0AB3               	incf	((__PIR+1)^(0+128)+18),f
  2735  0416  1283               	bcf	3,5	;RP0=0, select bank0
  2736  0417  1303               	bcf	3,6	;RP1=0, select bank0
  2737  0418  0864               	movf	??_getPIR_AD+1,w
  2738  0419  1683               	bsf	3,5	;RP0=1, select bank1
  2739  041A  1303               	bcf	3,6	;RP1=0, select bank1
  2740  041B  07B3               	addwf	((__PIR+1)^(0+128)+18),f
  2741  041C  3001               	movlw	1
  2742  041D  1283               	bcf	3,5	;RP0=0, select bank0
  2743  041E  1303               	bcf	3,6	;RP1=0, select bank0
  2744  041F  00E3               	movwf	??_getPIR_AD
  2745  0420  0863               	movf	??_getPIR_AD,w
  2746  0421  07E8               	addwf	getPIR_AD@i,f
  2747  0422  300A               	movlw	10
  2748  0423  0268               	subwf	getPIR_AD@i,w
  2749  0424  1C03               	skipc
  2750  0425  2C0A               	goto	l4741
  2751  0426                     l4747:	
  2752                           
  2753                           ;PIR_B1.c: 199: }
  2754                           ;PIR_B1.c: 200: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2755  0426  300A               	movlw	10
  2756  0427  00DA               	movwf	___lwdiv@divisor
  2757  0428  3000               	movlw	0
  2758  0429  00DB               	movwf	___lwdiv@divisor+1
  2759  042A  1683               	bsf	3,5	;RP0=1, select bank1
  2760  042B  1303               	bcf	3,6	;RP1=0, select bank1
  2761  042C  0833               	movf	((__PIR+1)^(0+128)+18),w
  2762  042D  1283               	bcf	3,5	;RP0=0, select bank0
  2763  042E  1303               	bcf	3,6	;RP1=0, select bank0
  2764  042F  01DD               	clrf	___lwdiv@dividend+1
  2765  0430  07DD               	addwf	___lwdiv@dividend+1,f
  2766  0431  1683               	bsf	3,5	;RP0=1, select bank1
  2767  0432  1303               	bcf	3,6	;RP1=0, select bank1
  2768  0433  0832               	movf	(__PIR^(0+128)+18),w
  2769  0434  1283               	bcf	3,5	;RP0=0, select bank0
  2770  0435  1303               	bcf	3,6	;RP1=0, select bank0
  2771  0436  01DC               	clrf	___lwdiv@dividend
  2772  0437  07DC               	addwf	___lwdiv@dividend,f
  2773  0438  158A  2666  118A   	fcall	___lwdiv
  2774  043B  1283               	bcf	3,5	;RP0=0, select bank0
  2775  043C  1303               	bcf	3,6	;RP1=0, select bank0
  2776  043D  085A               	movf	?___lwdiv,w
  2777  043E  00E3               	movwf	??_getPIR_AD
  2778  043F  1683               	bsf	3,5	;RP0=1, select bank1
  2779  0440  1303               	bcf	3,6	;RP1=0, select bank1
  2780  0441  0834               	movf	(__PIR^(0+128)+20),w
  2781  0442  3EB5               	addlw	(__PIR+21)& (0+255)
  2782  0443  0084               	movwf	4
  2783  0444  1283               	bcf	3,5	;RP0=0, select bank0
  2784  0445  1303               	bcf	3,6	;RP1=0, select bank0
  2785  0446  0863               	movf	??_getPIR_AD,w
  2786  0447  1383               	bcf	3,7	;select IRP bank1
  2787  0448  0080               	movwf	0
  2788                           
  2789                           ;PIR_B1.c: 201: _PIR.TenAverageValue = 0;
  2790  0449  1683               	bsf	3,5	;RP0=1, select bank1
  2791  044A  1303               	bcf	3,6	;RP1=0, select bank1
  2792  044B  01B2               	clrf	(__PIR^(0+128)+18)
  2793  044C  01B3               	clrf	((__PIR+1)^(0+128)+18)
  2794                           
  2795                           ;PIR_B1.c: 203: for (i = 0; i <= 9; i++) {
  2796  044D  1283               	bcf	3,5	;RP0=0, select bank0
  2797  044E  1303               	bcf	3,6	;RP1=0, select bank0
  2798  044F  01E8               	clrf	getPIR_AD@i
  2799  0450  300A               	movlw	10
  2800  0451  0268               	subwf	getPIR_AD@i,w
  2801  0452  1803               	btfsc	3,0
  2802  0453  2C70               	goto	l4763
  2803  0454                     l4757:	
  2804                           
  2805                           ;PIR_B1.c: 204: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2806  0454  0868               	movf	getPIR_AD@i,w
  2807  0455  3EB5               	addlw	(__PIR+21)& (0+255)
  2808  0456  0084               	movwf	4
  2809  0457  0800               	movf	0,w
  2810  0458  00E3               	movwf	??_getPIR_AD
  2811  0459  01E4               	clrf	??_getPIR_AD+1
  2812  045A  0863               	movf	??_getPIR_AD,w
  2813  045B  1683               	bsf	3,5	;RP0=1, select bank1
  2814  045C  1303               	bcf	3,6	;RP1=0, select bank1
  2815  045D  07BF               	addwf	(__PIR^(0+128)+31),f
  2816  045E  1803               	skipnc
  2817  045F  0AC0               	incf	((__PIR+1)^(0+128)+31),f
  2818  0460  1283               	bcf	3,5	;RP0=0, select bank0
  2819  0461  1303               	bcf	3,6	;RP1=0, select bank0
  2820  0462  0864               	movf	??_getPIR_AD+1,w
  2821  0463  1683               	bsf	3,5	;RP0=1, select bank1
  2822  0464  1303               	bcf	3,6	;RP1=0, select bank1
  2823  0465  07C0               	addwf	((__PIR+1)^(0+128)+31),f
  2824  0466  3001               	movlw	1
  2825  0467  1283               	bcf	3,5	;RP0=0, select bank0
  2826  0468  1303               	bcf	3,6	;RP1=0, select bank0
  2827  0469  00E3               	movwf	??_getPIR_AD
  2828  046A  0863               	movf	??_getPIR_AD,w
  2829  046B  07E8               	addwf	getPIR_AD@i,f
  2830  046C  300A               	movlw	10
  2831  046D  0268               	subwf	getPIR_AD@i,w
  2832  046E  1C03               	skipc
  2833  046F  2C54               	goto	l4757
  2834  0470                     l4763:	
  2835                           
  2836                           ;PIR_B1.c: 205: }
  2837                           ;PIR_B1.c: 206: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2838  0470  300A               	movlw	10
  2839  0471  00DA               	movwf	___lwdiv@divisor
  2840  0472  3000               	movlw	0
  2841  0473  00DB               	movwf	___lwdiv@divisor+1
  2842  0474  1683               	bsf	3,5	;RP0=1, select bank1
  2843  0475  1303               	bcf	3,6	;RP1=0, select bank1
  2844  0476  0840               	movf	((__PIR+1)^(0+128)+31),w
  2845  0477  1283               	bcf	3,5	;RP0=0, select bank0
  2846  0478  1303               	bcf	3,6	;RP1=0, select bank0
  2847  0479  01DD               	clrf	___lwdiv@dividend+1
  2848  047A  07DD               	addwf	___lwdiv@dividend+1,f
  2849  047B  1683               	bsf	3,5	;RP0=1, select bank1
  2850  047C  1303               	bcf	3,6	;RP1=0, select bank1
  2851  047D  083F               	movf	(__PIR^(0+128)+31),w
  2852  047E  1283               	bcf	3,5	;RP0=0, select bank0
  2853  047F  1303               	bcf	3,6	;RP1=0, select bank0
  2854  0480  01DC               	clrf	___lwdiv@dividend
  2855  0481  07DC               	addwf	___lwdiv@dividend,f
  2856  0482  158A  2666  118A   	fcall	___lwdiv
  2857  0485  1283               	bcf	3,5	;RP0=0, select bank0
  2858  0486  1303               	bcf	3,6	;RP1=0, select bank0
  2859  0487  085A               	movf	?___lwdiv,w
  2860  0488  00E3               	movwf	??_getPIR_AD
  2861  0489  0863               	movf	??_getPIR_AD,w
  2862  048A  1683               	bsf	3,5	;RP0=1, select bank1
  2863  048B  1303               	bcf	3,6	;RP1=0, select bank1
  2864  048C  00A6               	movwf	(__PIR^(0+128)+6)
  2865                           
  2866                           ;PIR_B1.c: 207: _PIR.HundredAverageValue = 0;
  2867  048D  01BF               	clrf	(__PIR^(0+128)+31)
  2868  048E  01C0               	clrf	((__PIR+1)^(0+128)+31)
  2869                           
  2870                           ;PIR_B1.c: 209: if (_PIR.TenCount < 10) {
  2871  048F  300A               	movlw	10
  2872  0490  0227               	subwf	(__PIR^(0+128)+7),w
  2873  0491  1803               	skipnc
  2874  0492  2C9C               	goto	l4771
  2875                           
  2876                           ;PIR_B1.c: 210: _PIR.TenCount++;
  2877  0493  3001               	movlw	1
  2878  0494  1283               	bcf	3,5	;RP0=0, select bank0
  2879  0495  1303               	bcf	3,6	;RP1=0, select bank0
  2880  0496  00E3               	movwf	??_getPIR_AD
  2881  0497  0863               	movf	??_getPIR_AD,w
  2882  0498  1683               	bsf	3,5	;RP0=1, select bank1
  2883  0499  1303               	bcf	3,6	;RP1=0, select bank1
  2884  049A  07A7               	addwf	(__PIR^(0+128)+7),f
  2885                           
  2886                           ;PIR_B1.c: 211: } else {
  2887  049B  0008               	return
  2888  049C                     l4771:	
  2889                           
  2890                           ;PIR_B1.c: 212: _PIR.TenCount = 0;
  2891  049C  01A7               	clrf	(__PIR^(0+128)+7)
  2892                           
  2893                           ;PIR_B1.c: 213: if (_PIR.HundreCount < 10)
  2894  049D  300A               	movlw	10
  2895  049E  0234               	subwf	(__PIR^(0+128)+20),w
  2896  049F  1803               	skipnc
  2897  04A0  2CAA               	goto	l4777
  2898                           
  2899                           ;PIR_B1.c: 214: _PIR.HundreCount++;
  2900  04A1  3001               	movlw	1
  2901  04A2  1283               	bcf	3,5	;RP0=0, select bank0
  2902  04A3  1303               	bcf	3,6	;RP1=0, select bank0
  2903  04A4  00E3               	movwf	??_getPIR_AD
  2904  04A5  0863               	movf	??_getPIR_AD,w
  2905  04A6  1683               	bsf	3,5	;RP0=1, select bank1
  2906  04A7  1303               	bcf	3,6	;RP1=0, select bank1
  2907  04A8  07B4               	addwf	(__PIR^(0+128)+20),f
  2908  04A9  0008               	return
  2909  04AA                     l4777:	
  2910                           
  2911                           ;PIR_B1.c: 215: else
  2912                           ;PIR_B1.c: 216: _PIR.HundreCount = 0;
  2913  04AA  01B4               	clrf	(__PIR^(0+128)+20)
  2914  04AB  0008               	return
  2915  04AC                     __end_of_getPIR_AD:	
  2916                           
  2917                           	psect	text5
  2918  0E66                     __ptext5:	
  2919 ;; *************** function ___lwdiv *****************
  2920 ;; Defined at:
  2921 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  2922 ;; Parameters:    Size  Location     Type
  2923 ;;  divisor         2    0[BANK0 ] unsigned int 
  2924 ;;  dividend        2    2[BANK0 ] unsigned int 
  2925 ;; Auto vars:     Size  Location     Type
  2926 ;;  quotient        2    5[BANK0 ] unsigned int 
  2927 ;;  counter         1    4[BANK0 ] unsigned char 
  2928 ;; Return value:  Size  Location     Type
  2929 ;;                  2    0[BANK0 ] unsigned int 
  2930 ;; Registers used:
  2931 ;;		wreg, status,2, status,0
  2932 ;; Tracked objects:
  2933 ;;		On entry : 0/0
  2934 ;;		On exit  : 0/0
  2935 ;;		Unchanged: 0/0
  2936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2937 ;;      Params:         0       4       0       0
  2938 ;;      Locals:         0       3       0       0
  2939 ;;      Temps:          1       0       0       0
  2940 ;;      Totals:         1       7       0       0
  2941 ;;Total ram usage:        8 bytes
  2942 ;; Hardware stack levels used:    1
  2943 ;; Hardware stack levels required when called:    2
  2944 ;; This function calls:
  2945 ;;		Nothing
  2946 ;; This function is called by:
  2947 ;;		_getPIR_AD
  2948 ;; This function uses a non-reentrant model
  2949 ;;
  2950                           
  2951                           
  2952                           ;psect for function ___lwdiv
  2953  0E66                     ___lwdiv:	
  2954                           
  2955                           ;incstack = 0
  2956                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2957  0E66  1283               	bcf	3,5	;RP0=0, select bank0
  2958  0E67  1303               	bcf	3,6	;RP1=0, select bank0
  2959  0E68  01DF               	clrf	___lwdiv@quotient
  2960  0E69  01E0               	clrf	___lwdiv@quotient+1
  2961  0E6A  085B               	movf	___lwdiv@divisor+1,w
  2962  0E6B  045A               	iorwf	___lwdiv@divisor,w
  2963  0E6C  1903               	skipnz
  2964  0E6D  2E9F               	goto	l4589
  2965  0E6E  01DE               	clrf	___lwdiv@counter
  2966  0E6F  0ADE               	incf	___lwdiv@counter,f
  2967  0E70                     l4577:	
  2968  0E70  1BDB               	btfsc	___lwdiv@divisor+1,7
  2969  0E71  2E7E               	goto	l4579
  2970  0E72  3001               	movlw	1
  2971  0E73                     u5485:	
  2972  0E73  1003               	clrc
  2973  0E74  0DDA               	rlf	___lwdiv@divisor,f
  2974  0E75  0DDB               	rlf	___lwdiv@divisor+1,f
  2975  0E76  3EFF               	addlw	-1
  2976  0E77  1D03               	skipz
  2977  0E78  2E73               	goto	u5485
  2978  0E79  3001               	movlw	1
  2979  0E7A  00F4               	movwf	??___lwdiv
  2980  0E7B  0874               	movf	??___lwdiv,w
  2981  0E7C  07DE               	addwf	___lwdiv@counter,f
  2982  0E7D  2E70               	goto	l4577
  2983  0E7E                     l4579:	
  2984  0E7E  3001               	movlw	1
  2985  0E7F                     u5505:	
  2986  0E7F  1003               	clrc
  2987  0E80  0DDF               	rlf	___lwdiv@quotient,f
  2988  0E81  0DE0               	rlf	___lwdiv@quotient+1,f
  2989  0E82  3EFF               	addlw	-1
  2990  0E83  1D03               	skipz
  2991  0E84  2E7F               	goto	u5505
  2992  0E85  085B               	movf	___lwdiv@divisor+1,w
  2993  0E86  025D               	subwf	___lwdiv@dividend+1,w
  2994  0E87  1D03               	skipz
  2995  0E88  2E8B               	goto	u5515
  2996  0E89  085A               	movf	___lwdiv@divisor,w
  2997  0E8A  025C               	subwf	___lwdiv@dividend,w
  2998  0E8B                     u5515:	
  2999  0E8B  1C03               	skipc
  3000  0E8C  2E94               	goto	l4585
  3001  0E8D  085A               	movf	___lwdiv@divisor,w
  3002  0E8E  02DC               	subwf	___lwdiv@dividend,f
  3003  0E8F  085B               	movf	___lwdiv@divisor+1,w
  3004  0E90  1C03               	skipc
  3005  0E91  03DD               	decf	___lwdiv@dividend+1,f
  3006  0E92  02DD               	subwf	___lwdiv@dividend+1,f
  3007  0E93  145F               	bsf	___lwdiv@quotient,0
  3008  0E94                     l4585:	
  3009  0E94  3001               	movlw	1
  3010  0E95                     u5525:	
  3011  0E95  1003               	clrc
  3012  0E96  0CDB               	rrf	___lwdiv@divisor+1,f
  3013  0E97  0CDA               	rrf	___lwdiv@divisor,f
  3014  0E98  3EFF               	addlw	-1
  3015  0E99  1D03               	skipz
  3016  0E9A  2E95               	goto	u5525
  3017  0E9B  3001               	movlw	1
  3018  0E9C  02DE               	subwf	___lwdiv@counter,f
  3019  0E9D  1D03               	btfss	3,2
  3020  0E9E  2E7E               	goto	l4579
  3021  0E9F                     l4589:	
  3022  0E9F  0860               	movf	___lwdiv@quotient+1,w
  3023  0EA0  01DB               	clrf	?___lwdiv+1
  3024  0EA1  07DB               	addwf	?___lwdiv+1,f
  3025  0EA2  085F               	movf	___lwdiv@quotient,w
  3026  0EA3  01DA               	clrf	?___lwdiv
  3027  0EA4  07DA               	addwf	?___lwdiv,f
  3028  0EA5  0008               	return
  3029  0EA6                     __end_of___lwdiv:	
  3030                           
  3031                           	psect	text6
  3032  0530                     __ptext6:	
  3033 ;; *************** function _getLoad_AD *****************
  3034 ;; Defined at:
  3035 ;;		line 15 in file "../src/OverLoad_B1.c"
  3036 ;; Parameters:    Size  Location     Type
  3037 ;;  channel         1    wreg     unsigned char 
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;  channel         1    2[BANK0 ] unsigned char 
  3040 ;;  i               1    5[BANK0 ] unsigned char 
  3041 ;;  j               1    4[BANK0 ] unsigned char 
  3042 ;;  k               1    3[BANK0 ] unsigned char 
  3043 ;; Return value:  Size  Location     Type
  3044 ;;		None               void
  3045 ;; Registers used:
  3046 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3047 ;; Tracked objects:
  3048 ;;		On entry : 0/0
  3049 ;;		On exit  : 0/0
  3050 ;;		Unchanged: 0/0
  3051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3052 ;;      Params:         0       0       0       0
  3053 ;;      Locals:         0       4       0       0
  3054 ;;      Temps:          0       2       0       0
  3055 ;;      Totals:         0       6       0       0
  3056 ;;Total ram usage:        6 bytes
  3057 ;; Hardware stack levels used:    1
  3058 ;; Hardware stack levels required when called:    4
  3059 ;; This function calls:
  3060 ;;		_getAD
  3061 ;; This function is called by:
  3062 ;;		_main
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066                           
  3067                           ;psect for function _getLoad_AD
  3068  0530                     _getLoad_AD:	
  3069                           
  3070                           ;incstack = 0
  3071                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3072                           ;getLoad_AD@channel stored from wreg
  3073  0530  1283               	bcf	3,5	;RP0=0, select bank0
  3074  0531  1303               	bcf	3,6	;RP1=0, select bank0
  3075  0532  00DC               	movwf	getLoad_AD@channel
  3076                           
  3077                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  3078  0533  01DF               	clrf	getLoad_AD@i
  3079  0534  01DE               	clrf	getLoad_AD@j
  3080  0535  01DD               	clrf	getLoad_AD@k
  3081                           
  3082                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  3083  0536  1683               	bsf	3,5	;RP0=1, select bank1
  3084  0537  1303               	bcf	3,6	;RP1=0, select bank1
  3085  0538  1E4F               	btfss	_Load^(0+128),4
  3086  0539  0008               	return
  3087                           
  3088                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0x73);
  3089  053A  3073               	movlw	115
  3090  053B  1283               	bcf	3,5	;RP0=0, select bank0
  3091  053C  1303               	bcf	3,6	;RP1=0, select bank0
  3092  053D  00DA               	movwf	??_getLoad_AD
  3093  053E  085A               	movf	??_getLoad_AD,w
  3094  053F  00F4               	movwf	getAD@adcon1
  3095  0540  085C               	movf	getLoad_AD@channel,w
  3096  0541  158A  255B  118A   	fcall	_getAD
  3097  0544  1283               	bcf	3,5	;RP0=0, select bank0
  3098  0545  1303               	bcf	3,6	;RP1=0, select bank0
  3099  0546  00DB               	movwf	??_getLoad_AD+1
  3100  0547  085B               	movf	??_getLoad_AD+1,w
  3101  0548  1683               	bsf	3,5	;RP0=1, select bank1
  3102  0549  1303               	bcf	3,6	;RP1=0, select bank1
  3103  054A  00E4               	movwf	(_Load^(0+128)+21)
  3104                           
  3105                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  3106  054B  1283               	bcf	3,5	;RP0=0, select bank0
  3107  054C  1303               	bcf	3,6	;RP1=0, select bank0
  3108  054D  01DF               	clrf	getLoad_AD@i
  3109  054E  3004               	movlw	4
  3110  054F  025F               	subwf	getLoad_AD@i,w
  3111  0550  1803               	btfsc	3,0
  3112  0551  2D77               	goto	l4665
  3113  0552                     l4653:	
  3114                           
  3115                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  3116  0552  085F               	movf	getLoad_AD@i,w
  3117  0553  3ED9               	addlw	(_Load+10)& (0+255)
  3118  0554  0084               	movwf	4
  3119  0555  1683               	bsf	3,5	;RP0=1, select bank1
  3120  0556  1303               	bcf	3,6	;RP1=0, select bank1
  3121  0557  0864               	movf	(_Load^(0+128)+21),w
  3122  0558  1383               	bcf	3,7	;select IRP bank1
  3123  0559  0200               	subwf	0,w
  3124  055A  1803               	skipnc
  3125  055B  2D6E               	goto	l4661
  3126  055C  1283               	bcf	3,5	;RP0=0, select bank0
  3127  055D  1303               	bcf	3,6	;RP1=0, select bank0
  3128  055E  08DE               	movf	getLoad_AD@j,f
  3129  055F  1D03               	skipz
  3130  0560  2D6E               	goto	l4661
  3131                           
  3132                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  3133  0561  1683               	bsf	3,5	;RP0=1, select bank1
  3134  0562  1303               	bcf	3,6	;RP1=0, select bank1
  3135  0563  0864               	movf	(_Load^(0+128)+21),w
  3136  0564  1283               	bcf	3,5	;RP0=0, select bank0
  3137  0565  1303               	bcf	3,6	;RP1=0, select bank0
  3138  0566  00DA               	movwf	??_getLoad_AD
  3139  0567  085F               	movf	getLoad_AD@i,w
  3140  0568  3ED9               	addlw	(_Load+10)& (0+255)
  3141  0569  0084               	movwf	4
  3142  056A  085A               	movf	??_getLoad_AD,w
  3143  056B  0080               	movwf	0
  3144                           
  3145                           ;OverLoad_B1.c: 24: j = 1;
  3146  056C  01DE               	clrf	getLoad_AD@j
  3147  056D  0ADE               	incf	getLoad_AD@j,f
  3148  056E                     l4661:	
  3149  056E  3001               	movlw	1
  3150  056F  1283               	bcf	3,5	;RP0=0, select bank0
  3151  0570  00DA               	movwf	??_getLoad_AD
  3152  0571  085A               	movf	??_getLoad_AD,w
  3153  0572  07DF               	addwf	getLoad_AD@i,f
  3154  0573  3004               	movlw	4
  3155  0574  025F               	subwf	getLoad_AD@i,w
  3156  0575  1C03               	skipc
  3157  0576  2D52               	goto	l4653
  3158  0577                     l4665:	
  3159                           
  3160                           ;OverLoad_B1.c: 25: }
  3161                           ;OverLoad_B1.c: 26: }
  3162                           ;OverLoad_B1.c: 27: if (j == 0) {
  3163  0577  08DE               	movf	getLoad_AD@j,f
  3164  0578  1D03               	skipz
  3165  0579  0008               	return
  3166                           
  3167                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  3168  057A  01DF               	clrf	getLoad_AD@i
  3169  057B                     L6:	
  3170  057B  3004               	movlw	4
  3171  057C  025F               	subwf	getLoad_AD@i,w
  3172  057D  1803               	btfsc	3,0
  3173  057E  0008               	return
  3174                           
  3175                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  3176  057F  085F               	movf	getLoad_AD@i,w
  3177  0580  3EDE               	addlw	(_Load+15)& (0+255)
  3178  0581  0084               	movwf	4
  3179  0582  1383               	bcf	3,7	;select IRP bank1
  3180  0583  0800               	movf	0,w
  3181  0584  1683               	bsf	3,5	;RP0=1, select bank1
  3182  0585  1303               	bcf	3,6	;RP1=0, select bank1
  3183  0586  0264               	subwf	(_Load^(0+128)+21),w
  3184  0587  1803               	skipnc
  3185  0588  2D9B               	goto	l4681
  3186  0589  1283               	bcf	3,5	;RP0=0, select bank0
  3187  058A  1303               	bcf	3,6	;RP1=0, select bank0
  3188  058B  08DD               	movf	getLoad_AD@k,f
  3189  058C  1D03               	skipz
  3190  058D  2D9B               	goto	l4681
  3191                           
  3192                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  3193  058E  1683               	bsf	3,5	;RP0=1, select bank1
  3194  058F  1303               	bcf	3,6	;RP1=0, select bank1
  3195  0590  0864               	movf	(_Load^(0+128)+21),w
  3196  0591  1283               	bcf	3,5	;RP0=0, select bank0
  3197  0592  1303               	bcf	3,6	;RP1=0, select bank0
  3198  0593  00DA               	movwf	??_getLoad_AD
  3199  0594  085F               	movf	getLoad_AD@i,w
  3200  0595  3EDE               	addlw	(_Load+15)& (0+255)
  3201  0596  0084               	movwf	4
  3202  0597  085A               	movf	??_getLoad_AD,w
  3203  0598  0080               	movwf	0
  3204                           
  3205                           ;OverLoad_B1.c: 31: k = 1;
  3206  0599  01DD               	clrf	getLoad_AD@k
  3207  059A  0ADD               	incf	getLoad_AD@k,f
  3208  059B                     l4681:	
  3209  059B  3001               	movlw	1
  3210  059C  1283               	bcf	3,5	;RP0=0, select bank0
  3211  059D  00DA               	movwf	??_getLoad_AD
  3212  059E  085A               	movf	??_getLoad_AD,w
  3213  059F  07DF               	addwf	getLoad_AD@i,f
  3214  05A0  2D7B               	goto	L6
  3215  05A1                     __end_of_getLoad_AD:	
  3216                           
  3217                           	psect	text7
  3218  0D77                     __ptext7:	
  3219 ;; *************** function _getCDS_AD *****************
  3220 ;; Defined at:
  3221 ;;		line 45 in file "../src/CDS_B1.c"
  3222 ;; Parameters:    Size  Location     Type
  3223 ;;  channel1        1    wreg     unsigned char 
  3224 ;;  channel2        1    0[BANK0 ] unsigned char 
  3225 ;; Auto vars:     Size  Location     Type
  3226 ;;  channel1        1    5[BANK0 ] unsigned char 
  3227 ;;  j               1    4[BANK0 ] unsigned char 
  3228 ;;  i               1    3[BANK0 ] unsigned char 
  3229 ;; Return value:  Size  Location     Type
  3230 ;;		None               void
  3231 ;; Registers used:
  3232 ;;		wreg, status,2, status,0, pclath, cstack
  3233 ;; Tracked objects:
  3234 ;;		On entry : 0/0
  3235 ;;		On exit  : 0/0
  3236 ;;		Unchanged: 0/0
  3237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3238 ;;      Params:         0       1       0       0
  3239 ;;      Locals:         0       3       0       0
  3240 ;;      Temps:          0       2       0       0
  3241 ;;      Totals:         0       6       0       0
  3242 ;;Total ram usage:        6 bytes
  3243 ;; Hardware stack levels used:    1
  3244 ;; Hardware stack levels required when called:    4
  3245 ;; This function calls:
  3246 ;;		_getAD
  3247 ;; This function is called by:
  3248 ;;		_main
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           
  3253                           ;psect for function _getCDS_AD
  3254  0D77                     _getCDS_AD:	
  3255                           
  3256                           ;incstack = 0
  3257                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3258                           ;getCDS_AD@channel1 stored from wreg
  3259  0D77  1283               	bcf	3,5	;RP0=0, select bank0
  3260  0D78  1303               	bcf	3,6	;RP1=0, select bank0
  3261  0D79  00DF               	movwf	getCDS_AD@channel1
  3262                           
  3263                           ;CDS_B1.c: 46: char i = 0, j = 0;
  3264  0D7A  01DD               	clrf	getCDS_AD@i
  3265  0D7B  01DE               	clrf	getCDS_AD@j
  3266                           
  3267                           ;CDS_B1.c: 47: if (_CDS.ADtoGO == 1) {
  3268  0D7C  1DAD               	btfss	__CDS,3
  3269  0D7D  0008               	return
  3270                           
  3271                           ;CDS_B1.c: 48: _CDS.GO = 1;
  3272  0D7E  14AD               	bsf	__CDS,1
  3273                           
  3274                           ;CDS_B1.c: 49: _CDS.ADRES = getAD(channel1, 0x70);
  3275  0D7F  3070               	movlw	112
  3276  0D80  00DB               	movwf	??_getCDS_AD
  3277  0D81  085B               	movf	??_getCDS_AD,w
  3278  0D82  00F4               	movwf	getAD@adcon1
  3279  0D83  085F               	movf	getCDS_AD@channel1,w
  3280  0D84  158A  255B  158A   	fcall	_getAD
  3281  0D87  1283               	bcf	3,5	;RP0=0, select bank0
  3282  0D88  1303               	bcf	3,6	;RP1=0, select bank0
  3283  0D89  00DC               	movwf	??_getCDS_AD+1
  3284  0D8A  085C               	movf	??_getCDS_AD+1,w
  3285  0D8B  00B1               	movwf	__CDS+4
  3286                           
  3287                           ;CDS_B1.c: 50: _CDS.VRAD = _CDS.ADRES;
  3288  0D8C  0831               	movf	__CDS+4,w
  3289  0D8D  00DB               	movwf	??_getCDS_AD
  3290  0D8E  085B               	movf	??_getCDS_AD,w
  3291  0D8F  00AF               	movwf	__CDS+2
  3292                           
  3293                           ;CDS_B1.c: 51: _CDS.ADRES = getAD(channel2, 0x70);
  3294  0D90  3070               	movlw	112
  3295  0D91  00DB               	movwf	??_getCDS_AD
  3296  0D92  085B               	movf	??_getCDS_AD,w
  3297  0D93  00F4               	movwf	getAD@adcon1
  3298  0D94  085A               	movf	getCDS_AD@channel2,w
  3299  0D95  158A  255B         	fcall	_getAD
  3300  0D97  1283               	bcf	3,5	;RP0=0, select bank0
  3301  0D98  1303               	bcf	3,6	;RP1=0, select bank0
  3302  0D99  00DC               	movwf	??_getCDS_AD+1
  3303  0D9A  085C               	movf	??_getCDS_AD+1,w
  3304  0D9B  00B1               	movwf	__CDS+4
  3305                           
  3306                           ;CDS_B1.c: 52: _CDS.SignalAD = _CDS.ADRES;
  3307  0D9C  0831               	movf	__CDS+4,w
  3308  0D9D  00DB               	movwf	??_getCDS_AD
  3309  0D9E  085B               	movf	??_getCDS_AD,w
  3310  0D9F  00B0               	movwf	__CDS+3
  3311  0DA0  0008               	return
  3312  0DA1                     __end_of_getCDS_AD:	
  3313                           
  3314                           	psect	text8
  3315  0D5B                     __ptext8:	
  3316 ;; *************** function _getAD *****************
  3317 ;; Defined at:
  3318 ;;		line 427 in file "../src/MCU_B1.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  adcon0          1    wreg     unsigned char 
  3321 ;;  adcon1          1    4[COMMON] unsigned char 
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;  adcon0          1    5[COMMON] unsigned char 
  3324 ;; Return value:  Size  Location     Type
  3325 ;;                  1    wreg      unsigned char 
  3326 ;; Registers used:
  3327 ;;		wreg, status,2, status,0, pclath, cstack
  3328 ;; Tracked objects:
  3329 ;;		On entry : 0/0
  3330 ;;		On exit  : 0/0
  3331 ;;		Unchanged: 0/0
  3332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3333 ;;      Params:         1       0       0       0
  3334 ;;      Locals:         1       0       0       0
  3335 ;;      Temps:          0       0       0       0
  3336 ;;      Totals:         2       0       0       0
  3337 ;;Total ram usage:        2 bytes
  3338 ;; Hardware stack levels used:    1
  3339 ;; Hardware stack levels required when called:    3
  3340 ;; This function calls:
  3341 ;;		_Timeout_Counter
  3342 ;;		_set_TimeoutCleared
  3343 ;; This function is called by:
  3344 ;;		_getCDS_AD
  3345 ;;		_getLoad_AD
  3346 ;;		_getTemp_AD
  3347 ;;		_getPIR_AD
  3348 ;; This function uses a non-reentrant model
  3349 ;;
  3350                           
  3351                           
  3352                           ;psect for function _getAD
  3353  0D5B                     _getAD:	
  3354                           
  3355                           ;incstack = 0
  3356                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3357                           ;getAD@adcon0 stored from wreg
  3358  0D5B  00F5               	movwf	getAD@adcon0
  3359                           
  3360                           ;MCU_B1.c: 428: ADCON0 = adcon0;
  3361  0D5C  0875               	movf	getAD@adcon0,w
  3362  0D5D  1283               	bcf	3,5	;RP0=0, select bank0
  3363  0D5E  1303               	bcf	3,6	;RP1=0, select bank0
  3364  0D5F  009F               	movwf	31	;volatile
  3365                           
  3366                           ;MCU_B1.c: 429: ADCON1 = adcon1;
  3367  0D60  0874               	movf	getAD@adcon1,w
  3368  0D61  1683               	bsf	3,5	;RP0=1, select bank1
  3369  0D62  1303               	bcf	3,6	;RP1=0, select bank1
  3370  0D63  009F               	movwf	31	;volatile
  3371                           
  3372                           ;MCU_B1.c: 430: GO_nDONE = 1;
  3373  0D64  1283               	bcf	3,5	;RP0=0, select bank0
  3374  0D65  1303               	bcf	3,6	;RP1=0, select bank0
  3375  0D66  149F               	bsf	31,1	;volatile
  3376                           
  3377                           ;MCU_B1.c: 431: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3378  0D67  2D6B               	goto	l4311
  3379  0D68                     l4309:	
  3380                           
  3381                           ;MCU_B1.c: 432: Timeout_Counter();
  3382  0D68  158A  24A2  158A   	fcall	_Timeout_Counter
  3383  0D6B                     l4311:	
  3384  0D6B  1283               	bcf	3,5	;RP0=0, select bank0
  3385  0D6C  1303               	bcf	3,6	;RP1=0, select bank0
  3386  0D6D  1C9F               	btfss	31,1	;volatile
  3387  0D6E  2D71               	goto	l4315
  3388  0D6F  1D25               	btfss	_myMain+5,2
  3389  0D70  2D68               	goto	l4309
  3390  0D71                     l4315:	
  3391                           
  3392                           ;MCU_B1.c: 433: };
  3393                           ;MCU_B1.c: 434: set_TimeoutCleared();
  3394  0D71  158A  236F         	fcall	_set_TimeoutCleared
  3395                           
  3396                           ;MCU_B1.c: 435: return ADRES;
  3397  0D73  1283               	bcf	3,5	;RP0=0, select bank0
  3398  0D74  1303               	bcf	3,6	;RP1=0, select bank0
  3399  0D75  081E               	movf	30,w	;volatile
  3400  0D76  0008               	return
  3401  0D77                     __end_of_getAD:	
  3402                           
  3403                           	psect	text9
  3404  0B6F                     __ptext9:	
  3405 ;; *************** function _set_TimeoutCleared *****************
  3406 ;; Defined at:
  3407 ;;		line 270 in file "../src/Main_B1.c"
  3408 ;; Parameters:    Size  Location     Type
  3409 ;;		None
  3410 ;; Auto vars:     Size  Location     Type
  3411 ;;		None
  3412 ;; Return value:  Size  Location     Type
  3413 ;;		None               void
  3414 ;; Registers used:
  3415 ;;		status,2
  3416 ;; Tracked objects:
  3417 ;;		On entry : 0/0
  3418 ;;		On exit  : 0/0
  3419 ;;		Unchanged: 0/0
  3420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3421 ;;      Params:         0       0       0       0
  3422 ;;      Locals:         0       0       0       0
  3423 ;;      Temps:          0       0       0       0
  3424 ;;      Totals:         0       0       0       0
  3425 ;;Total ram usage:        0 bytes
  3426 ;; Hardware stack levels used:    1
  3427 ;; Hardware stack levels required when called:    2
  3428 ;; This function calls:
  3429 ;;		Nothing
  3430 ;; This function is called by:
  3431 ;;		_getAD
  3432 ;; This function uses a non-reentrant model
  3433 ;;
  3434                           
  3435                           
  3436                           ;psect for function _set_TimeoutCleared
  3437  0B6F                     _set_TimeoutCleared:	
  3438                           
  3439                           ;Main_B1.c: 271: myMain.Timeout = 0;
  3440                           
  3441                           ;incstack = 0
  3442                           ; Regs used in _set_TimeoutCleared: [status,2]
  3443  0B6F  1283               	bcf	3,5	;RP0=0, select bank0
  3444  0B70  1303               	bcf	3,6	;RP1=0, select bank0
  3445  0B71  1125               	bcf	_myMain+5,2
  3446                           
  3447                           ;Main_B1.c: 272: myMain.Timeout_Counter = 0;
  3448  0B72  01A6               	clrf	_myMain+6
  3449  0B73  01A7               	clrf	_myMain+7
  3450  0B74  0008               	return
  3451  0B75                     __end_of_set_TimeoutCleared:	
  3452                           
  3453                           	psect	text10
  3454  0CA2                     __ptext10:	
  3455 ;; *************** function _Timeout_Counter *****************
  3456 ;; Defined at:
  3457 ;;		line 261 in file "../src/Main_B1.c"
  3458 ;; Parameters:    Size  Location     Type
  3459 ;;		None
  3460 ;; Auto vars:     Size  Location     Type
  3461 ;;		None
  3462 ;; Return value:  Size  Location     Type
  3463 ;;		None               void
  3464 ;; Registers used:
  3465 ;;		wreg, status,2
  3466 ;; Tracked objects:
  3467 ;;		On entry : 0/0
  3468 ;;		On exit  : 0/0
  3469 ;;		Unchanged: 0/0
  3470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3471 ;;      Params:         0       0       0       0
  3472 ;;      Locals:         0       0       0       0
  3473 ;;      Temps:          0       0       0       0
  3474 ;;      Totals:         0       0       0       0
  3475 ;;Total ram usage:        0 bytes
  3476 ;; Hardware stack levels used:    1
  3477 ;; Hardware stack levels required when called:    2
  3478 ;; This function calls:
  3479 ;;		Nothing
  3480 ;; This function is called by:
  3481 ;;		_getAD
  3482 ;; This function uses a non-reentrant model
  3483 ;;
  3484                           
  3485                           
  3486                           ;psect for function _Timeout_Counter
  3487  0CA2                     _Timeout_Counter:	
  3488                           
  3489                           ;Main_B1.c: 262: myMain.Timeout_Counter++;
  3490                           
  3491                           ;incstack = 0
  3492                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3493  0CA2  3001               	movlw	1
  3494  0CA3  1283               	bcf	3,5	;RP0=0, select bank0
  3495  0CA4  1303               	bcf	3,6	;RP1=0, select bank0
  3496  0CA5  07A6               	addwf	_myMain+6,f
  3497  0CA6  1803               	skipnc
  3498  0CA7  0AA7               	incf	_myMain+7,f
  3499  0CA8  3000               	movlw	0
  3500  0CA9  07A7               	addwf	_myMain+7,f
  3501                           
  3502                           ;Main_B1.c: 263: if (myMain.Timeout_Counter == 10000) {
  3503  0CAA  3027               	movlw	39
  3504  0CAB  0627               	xorwf	_myMain+7,w
  3505  0CAC  1D03               	skipz
  3506  0CAD  2CB0               	goto	u4715
  3507  0CAE  3010               	movlw	16
  3508  0CAF  0626               	xorwf	_myMain+6,w
  3509  0CB0                     u4715:	
  3510  0CB0  1D03               	skipz
  3511  0CB1  0008               	return
  3512                           
  3513                           ;Main_B1.c: 264: myMain.Timeout_Counter = 0;
  3514  0CB2  01A6               	clrf	_myMain+6
  3515  0CB3  01A7               	clrf	_myMain+7
  3516                           
  3517                           ;Main_B1.c: 265: myMain.Timeout = 1;
  3518  0CB4  1525               	bsf	_myMain+5,2
  3519  0CB5  0008               	return
  3520  0CB6                     __end_of_Timeout_Counter:	
  3521                           
  3522                           	psect	text11
  3523  0C1A                     __ptext11:	
  3524 ;; *************** function _WDT_Main *****************
  3525 ;; Defined at:
  3526 ;;		line 1033 in file "../src/MCU_B1.c"
  3527 ;; Parameters:    Size  Location     Type
  3528 ;;		None
  3529 ;; Auto vars:     Size  Location     Type
  3530 ;;		None
  3531 ;; Return value:  Size  Location     Type
  3532 ;;		None               void
  3533 ;; Registers used:
  3534 ;;		wreg, status,2, status,0, pclath, cstack
  3535 ;; Tracked objects:
  3536 ;;		On entry : 0/0
  3537 ;;		On exit  : 0/0
  3538 ;;		Unchanged: 0/0
  3539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3540 ;;      Params:         0       0       0       0
  3541 ;;      Locals:         0       0       0       0
  3542 ;;      Temps:          1       0       0       0
  3543 ;;      Totals:         1       0       0       0
  3544 ;;Total ram usage:        1 bytes
  3545 ;; Hardware stack levels used:    1
  3546 ;; Hardware stack levels required when called:    3
  3547 ;; This function calls:
  3548 ;;		_WDT_Clearing
  3549 ;; This function is called by:
  3550 ;;		_main
  3551 ;; This function uses a non-reentrant model
  3552 ;;
  3553                           
  3554                           
  3555                           ;psect for function _WDT_Main
  3556  0C1A                     _WDT_Main:	
  3557                           
  3558                           ;MCU_B1.c: 1034: if (WDT.Enable == 1) {
  3559                           
  3560                           ;incstack = 0
  3561                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3562  0C1A  1C76               	btfss	_WDT,0
  3563  0C1B  0008               	return
  3564                           
  3565                           ;MCU_B1.c: 1035: if (WDT.Timer-- > 0) {
  3566  0C1C  3001               	movlw	1
  3567  0C1D  02F7               	subwf	_WDT+1,f
  3568  0C1E  0877               	movf	_WDT+1,w
  3569  0C1F  3AFF               	xorlw	255
  3570  0C20  1903               	skipnz
  3571  0C21  0008               	return
  3572                           
  3573                           ;MCU_B1.c: 1036: WDT.Timer = 100;
  3574  0C22  3064               	movlw	100
  3575  0C23  00F4               	movwf	??_WDT_Main
  3576  0C24  0874               	movf	??_WDT_Main,w
  3577  0C25  00F7               	movwf	_WDT+1
  3578                           
  3579                           ;MCU_B1.c: 1037: WDT_Clearing();
  3580  0C26  118A  27FE         	fcall	_WDT_Clearing
  3581  0C28  0008               	return
  3582  0C29                     __end_of_WDT_Main:	
  3583                           
  3584                           	psect	text12
  3585  07FE                     __ptext12:	
  3586 ;; *************** function _WDT_Clearing *****************
  3587 ;; Defined at:
  3588 ;;		line 1043 in file "../src/MCU_B1.c"
  3589 ;; Parameters:    Size  Location     Type
  3590 ;;		None
  3591 ;; Auto vars:     Size  Location     Type
  3592 ;;		None
  3593 ;; Return value:  Size  Location     Type
  3594 ;;		None               void
  3595 ;; Registers used:
  3596 ;;		None
  3597 ;; Tracked objects:
  3598 ;;		On entry : 0/0
  3599 ;;		On exit  : 0/0
  3600 ;;		Unchanged: 0/0
  3601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3602 ;;      Params:         0       0       0       0
  3603 ;;      Locals:         0       0       0       0
  3604 ;;      Temps:          0       0       0       0
  3605 ;;      Totals:         0       0       0       0
  3606 ;;Total ram usage:        0 bytes
  3607 ;; Hardware stack levels used:    1
  3608 ;; Hardware stack levels required when called:    2
  3609 ;; This function calls:
  3610 ;;		Nothing
  3611 ;; This function is called by:
  3612 ;;		_WDT_Main
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           
  3617                           ;psect for function _WDT_Clearing
  3618  07FE                     _WDT_Clearing:	
  3619                           
  3620                           ;incstack = 0
  3621                           ; Regs used in _WDT_Clearing: []
  3622  07FE  0064               	clrwdt	;# 
  3623  07FF  0008               	return
  3624  0800                     __end_of_WDT_Clearing:	
  3625                           
  3626                           	psect	text13
  3627  0B55                     __ptext13:	
  3628 ;; *************** function _Temp_Main *****************
  3629 ;; Defined at:
  3630 ;;		line 51 in file "../src/OverTemperature_B1.c"
  3631 ;; Parameters:    Size  Location     Type
  3632 ;;		None
  3633 ;; Auto vars:     Size  Location     Type
  3634 ;;		None
  3635 ;; Return value:  Size  Location     Type
  3636 ;;		None               void
  3637 ;; Registers used:
  3638 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3639 ;; Tracked objects:
  3640 ;;		On entry : 0/0
  3641 ;;		On exit  : 0/0
  3642 ;;		Unchanged: 0/0
  3643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3644 ;;      Params:         0       0       0       0
  3645 ;;      Locals:         0       0       0       0
  3646 ;;      Temps:          0       0       0       0
  3647 ;;      Totals:         0       0       0       0
  3648 ;;Total ram usage:        0 bytes
  3649 ;; Hardware stack levels used:    1
  3650 ;; Hardware stack levels required when called:    6
  3651 ;; This function calls:
  3652 ;;		_setTemp_Main
  3653 ;; This function is called by:
  3654 ;;		_main
  3655 ;; This function uses a non-reentrant model
  3656 ;;
  3657                           
  3658                           
  3659                           ;psect for function _Temp_Main
  3660  0B55                     _Temp_Main:	
  3661                           
  3662                           ;OverTemperature_B1.c: 53: setTemp_Main();
  3663                           
  3664                           ;incstack = 0
  3665                           ; Regs used in _Temp_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3666  0B55  118A  24AC         	fcall	_setTemp_Main
  3667  0B57  0008               	return
  3668  0B58                     __end_of_Temp_Main:	
  3669                           
  3670                           	psect	text14
  3671  04AC                     __ptext14:	
  3672 ;; *************** function _setTemp_Main *****************
  3673 ;; Defined at:
  3674 ;;		line 58 in file "../src/OverTemperature_B1.c"
  3675 ;; Parameters:    Size  Location     Type
  3676 ;;		None
  3677 ;; Auto vars:     Size  Location     Type
  3678 ;;		None
  3679 ;; Return value:  Size  Location     Type
  3680 ;;		None               void
  3681 ;; Registers used:
  3682 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3683 ;; Tracked objects:
  3684 ;;		On entry : 0/0
  3685 ;;		On exit  : 0/0
  3686 ;;		Unchanged: 0/0
  3687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3688 ;;      Params:         0       0       0       0
  3689 ;;      Locals:         0       0       0       0
  3690 ;;      Temps:          0       1       0       0
  3691 ;;      Totals:         0       1       0       0
  3692 ;;Total ram usage:        1 bytes
  3693 ;; Hardware stack levels used:    1
  3694 ;; Hardware stack levels required when called:    5
  3695 ;; This function calls:
  3696 ;;		___awdiv
  3697 ;;		_getMain_All_Error_Status
  3698 ;;		_getMain_LightsStatus
  3699 ;; This function is called by:
  3700 ;;		_Temp_Main
  3701 ;; This function uses a non-reentrant model
  3702 ;;
  3703                           
  3704                           
  3705                           ;psect for function _setTemp_Main
  3706  04AC                     _setTemp_Main:	
  3707                           
  3708                           ;OverTemperature_B1.c: 59: if (Temp.Enable == 1) {
  3709                           
  3710                           ;incstack = 0
  3711                           ; Regs used in _setTemp_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3712  04AC  1283               	bcf	3,5	;RP0=0, select bank0
  3713  04AD  1303               	bcf	3,6	;RP1=0, select bank0
  3714  04AE  1C3B               	btfss	_Temp,0
  3715  04AF  2D2C               	goto	l790
  3716                           
  3717                           ;OverTemperature_B1.c: 60: if (Temp.ADtoGO == 0) {
  3718  04B0  193B               	btfsc	_Temp,2
  3719  04B1  2CC3               	goto	l4431
  3720                           
  3721                           ;OverTemperature_B1.c: 61: Temp.Time++;
  3722  04B2  3001               	movlw	1
  3723  04B3  07BC               	addwf	_Temp+1,f
  3724  04B4  1803               	skipnc
  3725  04B5  0ABD               	incf	_Temp+2,f
  3726  04B6  3000               	movlw	0
  3727  04B7  07BD               	addwf	_Temp+2,f
  3728                           
  3729                           ;OverTemperature_B1.c: 62: if (Temp.Time >= 500) {
  3730  04B8  3001               	movlw	1
  3731  04B9  023D               	subwf	_Temp+2,w
  3732  04BA  30F4               	movlw	244
  3733  04BB  1903               	skipnz
  3734  04BC  023C               	subwf	_Temp+1,w
  3735  04BD  1C03               	skipc
  3736  04BE  0008               	return
  3737                           
  3738                           ;OverTemperature_B1.c: 63: Temp.Time = 0;
  3739  04BF  01BC               	clrf	_Temp+1
  3740  04C0  01BD               	clrf	_Temp+2
  3741                           
  3742                           ;OverTemperature_B1.c: 64: Temp.ADtoGO = 1;
  3743  04C1  153B               	bsf	_Temp,2
  3744                           
  3745                           ;OverTemperature_B1.c: 65: }
  3746                           ;OverTemperature_B1.c: 66: } else {
  3747  04C2  0008               	return
  3748  04C3                     l4431:	
  3749                           
  3750                           ;OverTemperature_B1.c: 67: if (getMain_All_Error_Status(2) == 0) {
  3751  04C3  3002               	movlw	2
  3752  04C4  158A  2749  118A   	fcall	_getMain_All_Error_Status
  3753  04C7  3800               	iorlw	0
  3754  04C8  1D03               	skipz
  3755  04C9  0008               	return
  3756                           
  3757                           ;OverTemperature_B1.c: 68: Temp.Time++;
  3758  04CA  3001               	movlw	1
  3759  04CB  1283               	bcf	3,5	;RP0=0, select bank0
  3760  04CC  1303               	bcf	3,6	;RP1=0, select bank0
  3761  04CD  07BC               	addwf	_Temp+1,f
  3762  04CE  1803               	skipnc
  3763  04CF  0ABD               	incf	_Temp+2,f
  3764  04D0  3000               	movlw	0
  3765  04D1  07BD               	addwf	_Temp+2,f
  3766                           
  3767                           ;OverTemperature_B1.c: 69: if (Temp.Time >= 5) {
  3768  04D2  3000               	movlw	0
  3769  04D3  023D               	subwf	_Temp+2,w
  3770  04D4  3005               	movlw	5
  3771  04D5  1903               	skipnz
  3772  04D6  023C               	subwf	_Temp+1,w
  3773  04D7  1C03               	skipc
  3774  04D8  0008               	return
  3775                           
  3776                           ;OverTemperature_B1.c: 70: Temp.Time = 0;
  3777  04D9  01BC               	clrf	_Temp+1
  3778  04DA  01BD               	clrf	_Temp+2
  3779                           
  3780                           ;OverTemperature_B1.c: 71: if (Temp.GO == 1) {
  3781  04DB  1E3B               	btfss	_Temp,4
  3782  04DC  0008               	return
  3783                           
  3784                           ;OverTemperature_B1.c: 72: Temp.ADtoGO = 0;
  3785  04DD  113B               	bcf	_Temp,2
  3786                           
  3787                           ;OverTemperature_B1.c: 73: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  3788  04DE  3002               	movlw	2
  3789  04DF  00DA               	movwf	___awdiv@divisor
  3790  04E0  3000               	movlw	0
  3791  04E1  00DB               	movwf	___awdiv@divisor+1
  3792  04E2  0842               	movf	_Temp+7,w
  3793  04E3  0743               	addwf	_Temp+8,w
  3794  04E4  00DC               	movwf	___awdiv@dividend
  3795  04E5  01DD               	clrf	___awdiv@dividend+1
  3796  04E6  0DDD               	rlf	___awdiv@dividend+1,f
  3797  04E7  158A  27A3  118A   	fcall	___awdiv
  3798  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  3799  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  3800  04EC  085A               	movf	?___awdiv,w
  3801  04ED  00E2               	movwf	??_setTemp_Main
  3802  04EE  0862               	movf	??_setTemp_Main,w
  3803  04EF  00C1               	movwf	_Temp+6
  3804                           
  3805                           ;OverTemperature_B1.c: 75: if (getMain_LightsStatus() == 1) {
  3806  04F0  158A  25CB  118A   	fcall	_getMain_LightsStatus
  3807  04F3  3A01               	xorlw	1
  3808  04F4  1D03               	skipz
  3809  04F5  2CFE               	goto	l4447
  3810                           
  3811                           ;OverTemperature_B1.c: 76: Temp.SafeValue = 170;
  3812  04F6  30AA               	movlw	170
  3813  04F7  1283               	bcf	3,5	;RP0=0, select bank0
  3814  04F8  1303               	bcf	3,6	;RP1=0, select bank0
  3815  04F9  00E2               	movwf	??_setTemp_Main
  3816  04FA  0862               	movf	??_setTemp_Main,w
  3817  04FB  00C5               	movwf	_Temp+10
  3818                           
  3819                           ;OverTemperature_B1.c: 77: Temp.DangerValue = 140;
  3820  04FC  308C               	movlw	140
  3821  04FD  2D05               	goto	L7
  3822  04FE                     l4447:	
  3823                           ;OverTemperature_B1.c: 78: } else {
  3824                           
  3825                           
  3826                           ;OverTemperature_B1.c: 79: Temp.SafeValue = 100;
  3827  04FE  3064               	movlw	100
  3828  04FF  1283               	bcf	3,5	;RP0=0, select bank0
  3829  0500  1303               	bcf	3,6	;RP1=0, select bank0
  3830  0501  00E2               	movwf	??_setTemp_Main
  3831  0502  0862               	movf	??_setTemp_Main,w
  3832  0503  00C5               	movwf	_Temp+10
  3833                           
  3834                           ;OverTemperature_B1.c: 80: Temp.DangerValue = 70;
  3835  0504  3046               	movlw	70
  3836  0505                     L7:	
  3837  0505  00E2               	movwf	??_setTemp_Main
  3838  0506  0862               	movf	??_setTemp_Main,w
  3839  0507  00C6               	movwf	_Temp+11
  3840                           
  3841                           ;OverTemperature_B1.c: 81: }
  3842                           ;OverTemperature_B1.c: 90: if (Temp.ERROR == 1) {
  3843  0508  1CBB               	btfss	_Temp,1
  3844  0509  2D19               	goto	l4463
  3845                           
  3846                           ;OverTemperature_B1.c: 91: if (Temp.AD >= Temp.SafeValue) {
  3847  050A  0845               	movf	_Temp+10,w
  3848  050B  0241               	subwf	_Temp+6,w
  3849  050C  1C03               	skipc
  3850  050D  2D28               	goto	l4473
  3851                           
  3852                           ;OverTemperature_B1.c: 92: Temp.Count++;
  3853  050E  3001               	movlw	1
  3854  050F  00E2               	movwf	??_setTemp_Main
  3855  0510  0862               	movf	??_setTemp_Main,w
  3856  0511  07BE               	addwf	_Temp+3,f
  3857                           
  3858                           ;OverTemperature_B1.c: 93: if (Temp.Count >= 3) {
  3859  0512  3003               	movlw	3
  3860  0513  023E               	subwf	_Temp+3,w
  3861  0514  1C03               	skipc
  3862  0515  2D29               	goto	l803
  3863                           
  3864                           ;OverTemperature_B1.c: 94: Temp.Count = 0;
  3865  0516  01BE               	clrf	_Temp+3
  3866                           
  3867                           ;OverTemperature_B1.c: 95: Temp.ERROR = 0;
  3868  0517  10BB               	bcf	_Temp,1
  3869                           
  3870                           ;OverTemperature_B1.c: 96: }
  3871                           ;OverTemperature_B1.c: 97: } else {
  3872  0518  2D29               	goto	l803
  3873  0519                     l4463:	
  3874                           ;OverTemperature_B1.c: 99: }
  3875                           ;OverTemperature_B1.c: 100: } else {
  3876                           
  3877                           ;OverTemperature_B1.c: 98: Temp.Count = 0;
  3878                           
  3879                           
  3880                           ;OverTemperature_B1.c: 101: if (Temp.AD <= Temp.DangerValue) {
  3881  0519  0841               	movf	_Temp+6,w
  3882  051A  0246               	subwf	_Temp+11,w
  3883  051B  1C03               	skipc
  3884  051C  2D28               	goto	l4473
  3885                           
  3886                           ;OverTemperature_B1.c: 102: Temp.Count++;
  3887  051D  3001               	movlw	1
  3888  051E  00E2               	movwf	??_setTemp_Main
  3889  051F  0862               	movf	??_setTemp_Main,w
  3890  0520  07BE               	addwf	_Temp+3,f
  3891                           
  3892                           ;OverTemperature_B1.c: 103: if (Temp.Count >= 3) {
  3893  0521  3003               	movlw	3
  3894  0522  023E               	subwf	_Temp+3,w
  3895  0523  1C03               	skipc
  3896  0524  2D29               	goto	l803
  3897                           
  3898                           ;OverTemperature_B1.c: 104: Temp.Count = 0;
  3899  0525  01BE               	clrf	_Temp+3
  3900                           
  3901                           ;OverTemperature_B1.c: 105: Temp.ERROR = 1;
  3902  0526  14BB               	bsf	_Temp,1
  3903                           
  3904                           ;OverTemperature_B1.c: 106: }
  3905                           ;OverTemperature_B1.c: 107: } else {
  3906  0527  2D29               	goto	l803
  3907  0528                     l4473:	
  3908                           
  3909                           ;OverTemperature_B1.c: 108: Temp.Count = 0;
  3910  0528  01BE               	clrf	_Temp+3
  3911  0529                     l803:	
  3912                           
  3913                           ;OverTemperature_B1.c: 109: }
  3914                           ;OverTemperature_B1.c: 110: }
  3915                           ;OverTemperature_B1.c: 111: ;;
  3916                           ;OverTemperature_B1.c: 112: ;;
  3917                           ;OverTemperature_B1.c: 115: Temp.ADH[0] = 0;
  3918  0529  01C2               	clrf	_Temp+7
  3919                           
  3920                           ;OverTemperature_B1.c: 116: Temp.ADH[1] = 0;
  3921  052A  01C3               	clrf	_Temp+8
  3922                           
  3923                           ;OverTemperature_B1.c: 117: }
  3924                           ;OverTemperature_B1.c: 118: }
  3925                           ;OverTemperature_B1.c: 119: }
  3926                           ;OverTemperature_B1.c: 120: }
  3927                           ;OverTemperature_B1.c: 121: } else {
  3928  052B  0008               	return
  3929  052C                     l790:	
  3930                           
  3931                           ;OverTemperature_B1.c: 122: if (myMain.PowerON == 1) {
  3932  052C  1C20               	btfss	_myMain,0
  3933  052D  0008               	return
  3934                           
  3935                           ;OverTemperature_B1.c: 123: Temp.Enable = 1;
  3936  052E  143B               	bsf	_Temp,0
  3937  052F  0008               	return
  3938  0530                     __end_of_setTemp_Main:	
  3939                           
  3940                           	psect	text15
  3941  0FA3                     __ptext15:	
  3942 ;; *************** function ___awdiv *****************
  3943 ;; Defined at:
  3944 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  3945 ;; Parameters:    Size  Location     Type
  3946 ;;  divisor         2    0[BANK0 ] int 
  3947 ;;  dividend        2    2[BANK0 ] int 
  3948 ;; Auto vars:     Size  Location     Type
  3949 ;;  quotient        2    6[BANK0 ] int 
  3950 ;;  sign            1    5[BANK0 ] unsigned char 
  3951 ;;  counter         1    4[BANK0 ] unsigned char 
  3952 ;; Return value:  Size  Location     Type
  3953 ;;                  2    0[BANK0 ] int 
  3954 ;; Registers used:
  3955 ;;		wreg, status,2, status,0
  3956 ;; Tracked objects:
  3957 ;;		On entry : 0/0
  3958 ;;		On exit  : 0/0
  3959 ;;		Unchanged: 0/0
  3960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3961 ;;      Params:         0       4       0       0
  3962 ;;      Locals:         0       4       0       0
  3963 ;;      Temps:          1       0       0       0
  3964 ;;      Totals:         1       8       0       0
  3965 ;;Total ram usage:        9 bytes
  3966 ;; Hardware stack levels used:    1
  3967 ;; Hardware stack levels required when called:    2
  3968 ;; This function calls:
  3969 ;;		Nothing
  3970 ;; This function is called by:
  3971 ;;		_setTemp_Main
  3972 ;;		_getPIR_AD
  3973 ;; This function uses a non-reentrant model
  3974 ;;
  3975                           
  3976                           
  3977                           ;psect for function ___awdiv
  3978  0FA3                     ___awdiv:	
  3979                           
  3980                           ;incstack = 0
  3981                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3982  0FA3  1283               	bcf	3,5	;RP0=0, select bank0
  3983  0FA4  1303               	bcf	3,6	;RP1=0, select bank0
  3984  0FA5  01DF               	clrf	___awdiv@sign
  3985  0FA6  1FDB               	btfss	___awdiv@divisor+1,7
  3986  0FA7  2FAF               	goto	l4269
  3987  0FA8  09DA               	comf	___awdiv@divisor,f
  3988  0FA9  09DB               	comf	___awdiv@divisor+1,f
  3989  0FAA  0ADA               	incf	___awdiv@divisor,f
  3990  0FAB  1903               	skipnz
  3991  0FAC  0ADB               	incf	___awdiv@divisor+1,f
  3992  0FAD  01DF               	clrf	___awdiv@sign
  3993  0FAE  0ADF               	incf	___awdiv@sign,f
  3994  0FAF                     l4269:	
  3995  0FAF  1FDD               	btfss	___awdiv@dividend+1,7
  3996  0FB0  2FBA               	goto	l4275
  3997  0FB1  09DC               	comf	___awdiv@dividend,f
  3998  0FB2  09DD               	comf	___awdiv@dividend+1,f
  3999  0FB3  0ADC               	incf	___awdiv@dividend,f
  4000  0FB4  1903               	skipnz
  4001  0FB5  0ADD               	incf	___awdiv@dividend+1,f
  4002  0FB6  3001               	movlw	1
  4003  0FB7  00F4               	movwf	??___awdiv
  4004  0FB8  0874               	movf	??___awdiv,w
  4005  0FB9  06DF               	xorwf	___awdiv@sign,f
  4006  0FBA                     l4275:	
  4007  0FBA  01E0               	clrf	___awdiv@quotient
  4008  0FBB  01E1               	clrf	___awdiv@quotient+1
  4009  0FBC  085B               	movf	___awdiv@divisor+1,w
  4010  0FBD  045A               	iorwf	___awdiv@divisor,w
  4011  0FBE  1903               	skipnz
  4012  0FBF  2FF1               	goto	l4297
  4013  0FC0  01DE               	clrf	___awdiv@counter
  4014  0FC1  0ADE               	incf	___awdiv@counter,f
  4015  0FC2                     l4285:	
  4016  0FC2  1BDB               	btfsc	___awdiv@divisor+1,7
  4017  0FC3  2FD0               	goto	l4287
  4018  0FC4  3001               	movlw	1
  4019  0FC5                     u4825:	
  4020  0FC5  1003               	clrc
  4021  0FC6  0DDA               	rlf	___awdiv@divisor,f
  4022  0FC7  0DDB               	rlf	___awdiv@divisor+1,f
  4023  0FC8  3EFF               	addlw	-1
  4024  0FC9  1D03               	skipz
  4025  0FCA  2FC5               	goto	u4825
  4026  0FCB  3001               	movlw	1
  4027  0FCC  00F4               	movwf	??___awdiv
  4028  0FCD  0874               	movf	??___awdiv,w
  4029  0FCE  07DE               	addwf	___awdiv@counter,f
  4030  0FCF  2FC2               	goto	l4285
  4031  0FD0                     l4287:	
  4032  0FD0  3001               	movlw	1
  4033  0FD1                     u4845:	
  4034  0FD1  1003               	clrc
  4035  0FD2  0DE0               	rlf	___awdiv@quotient,f
  4036  0FD3  0DE1               	rlf	___awdiv@quotient+1,f
  4037  0FD4  3EFF               	addlw	-1
  4038  0FD5  1D03               	skipz
  4039  0FD6  2FD1               	goto	u4845
  4040  0FD7  085B               	movf	___awdiv@divisor+1,w
  4041  0FD8  025D               	subwf	___awdiv@dividend+1,w
  4042  0FD9  1D03               	skipz
  4043  0FDA  2FDD               	goto	u4855
  4044  0FDB  085A               	movf	___awdiv@divisor,w
  4045  0FDC  025C               	subwf	___awdiv@dividend,w
  4046  0FDD                     u4855:	
  4047  0FDD  1C03               	skipc
  4048  0FDE  2FE6               	goto	l4293
  4049  0FDF  085A               	movf	___awdiv@divisor,w
  4050  0FE0  02DC               	subwf	___awdiv@dividend,f
  4051  0FE1  085B               	movf	___awdiv@divisor+1,w
  4052  0FE2  1C03               	skipc
  4053  0FE3  03DD               	decf	___awdiv@dividend+1,f
  4054  0FE4  02DD               	subwf	___awdiv@dividend+1,f
  4055  0FE5  1460               	bsf	___awdiv@quotient,0
  4056  0FE6                     l4293:	
  4057  0FE6  3001               	movlw	1
  4058  0FE7                     u4865:	
  4059  0FE7  1003               	clrc
  4060  0FE8  0CDB               	rrf	___awdiv@divisor+1,f
  4061  0FE9  0CDA               	rrf	___awdiv@divisor,f
  4062  0FEA  3EFF               	addlw	-1
  4063  0FEB  1D03               	skipz
  4064  0FEC  2FE7               	goto	u4865
  4065  0FED  3001               	movlw	1
  4066  0FEE  02DE               	subwf	___awdiv@counter,f
  4067  0FEF  1D03               	btfss	3,2
  4068  0FF0  2FD0               	goto	l4287
  4069  0FF1                     l4297:	
  4070  0FF1  085F               	movf	___awdiv@sign,w
  4071  0FF2  1903               	btfsc	3,2
  4072  0FF3  2FF9               	goto	l4301
  4073  0FF4  09E0               	comf	___awdiv@quotient,f
  4074  0FF5  09E1               	comf	___awdiv@quotient+1,f
  4075  0FF6  0AE0               	incf	___awdiv@quotient,f
  4076  0FF7  1903               	skipnz
  4077  0FF8  0AE1               	incf	___awdiv@quotient+1,f
  4078  0FF9                     l4301:	
  4079  0FF9  0861               	movf	___awdiv@quotient+1,w
  4080  0FFA  01DB               	clrf	?___awdiv+1
  4081  0FFB  07DB               	addwf	?___awdiv+1,f
  4082  0FFC  0860               	movf	___awdiv@quotient,w
  4083  0FFD  01DA               	clrf	?___awdiv
  4084  0FFE  07DA               	addwf	?___awdiv,f
  4085  0FFF  0008               	return
  4086  1000                     __end_of___awdiv:	
  4087                           
  4088                           	psect	text16
  4089  0B52                     __ptext16:	
  4090 ;; *************** function _Temp_Initialization *****************
  4091 ;; Defined at:
  4092 ;;		line 9 in file "../src/OverTemperature_B1.c"
  4093 ;; Parameters:    Size  Location     Type
  4094 ;;		None
  4095 ;; Auto vars:     Size  Location     Type
  4096 ;;		None
  4097 ;; Return value:  Size  Location     Type
  4098 ;;		None               void
  4099 ;; Registers used:
  4100 ;;		status,2, status,0, pclath, cstack
  4101 ;; Tracked objects:
  4102 ;;		On entry : 0/0
  4103 ;;		On exit  : 0/0
  4104 ;;		Unchanged: 0/0
  4105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4106 ;;      Params:         0       0       0       0
  4107 ;;      Locals:         0       0       0       0
  4108 ;;      Temps:          0       0       0       0
  4109 ;;      Totals:         0       0       0       0
  4110 ;;Total ram usage:        0 bytes
  4111 ;; Hardware stack levels used:    1
  4112 ;; Hardware stack levels required when called:    3
  4113 ;; This function calls:
  4114 ;;		_setTemp_Initialization
  4115 ;; This function is called by:
  4116 ;;		_main
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           
  4121                           ;psect for function _Temp_Initialization
  4122  0B52                     _Temp_Initialization:	
  4123                           
  4124                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  4125                           
  4126                           ;incstack = 0
  4127                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  4128  0B52  118A  2002         	fcall	_setTemp_Initialization
  4129  0B54  0008               	return
  4130  0B55                     __end_of_Temp_Initialization:	
  4131                           
  4132                           	psect	text17
  4133  0002                     __ptext17:	
  4134 ;; *************** function _setTemp_Initialization *****************
  4135 ;; Defined at:
  4136 ;;		line 46 in file "../src/OverTemperature_B1.c"
  4137 ;; Parameters:    Size  Location     Type
  4138 ;;		None
  4139 ;; Auto vars:     Size  Location     Type
  4140 ;;		None
  4141 ;; Return value:  Size  Location     Type
  4142 ;;		None               void
  4143 ;; Registers used:
  4144 ;;		None
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4150 ;;      Params:         0       0       0       0
  4151 ;;      Locals:         0       0       0       0
  4152 ;;      Temps:          0       0       0       0
  4153 ;;      Totals:         0       0       0       0
  4154 ;;Total ram usage:        0 bytes
  4155 ;; Hardware stack levels used:    1
  4156 ;; Hardware stack levels required when called:    2
  4157 ;; This function calls:
  4158 ;;		Nothing
  4159 ;; This function is called by:
  4160 ;;		_Temp_Initialization
  4161 ;; This function uses a non-reentrant model
  4162 ;;
  4163                           
  4164                           
  4165                           ;psect for function _setTemp_Initialization
  4166  0002                     _setTemp_Initialization:	
  4167                           
  4168                           ;incstack = 0
  4169                           ; Regs used in _setTemp_Initialization: []
  4170  0002  0008               	return
  4171  0003                     __end_of_setTemp_Initialization:	
  4172                           
  4173                           	psect	text18
  4174  0B4F                     __ptext18:	
  4175 ;; *************** function _SYSC_Main *****************
  4176 ;; Defined at:
  4177 ;;		line 17 in file "../src/SYSC_B1.c"
  4178 ;; Parameters:    Size  Location     Type
  4179 ;;		None
  4180 ;; Auto vars:     Size  Location     Type
  4181 ;;		None
  4182 ;; Return value:  Size  Location     Type
  4183 ;;		None               void
  4184 ;; Registers used:
  4185 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4186 ;; Tracked objects:
  4187 ;;		On entry : 0/0
  4188 ;;		On exit  : 0/0
  4189 ;;		Unchanged: 0/0
  4190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4191 ;;      Params:         0       0       0       0
  4192 ;;      Locals:         0       0       0       0
  4193 ;;      Temps:          0       0       0       0
  4194 ;;      Totals:         0       0       0       0
  4195 ;;Total ram usage:        0 bytes
  4196 ;; Hardware stack levels used:    1
  4197 ;; Hardware stack levels required when called:    5
  4198 ;; This function calls:
  4199 ;;		_setSYSC_Main
  4200 ;; This function is called by:
  4201 ;;		_main
  4202 ;; This function uses a non-reentrant model
  4203 ;;
  4204                           
  4205                           
  4206                           ;psect for function _SYSC_Main
  4207  0B4F                     _SYSC_Main:	
  4208                           
  4209                           ;SYSC_B1.c: 19: setSYSC_Main();
  4210                           
  4211                           ;incstack = 0
  4212                           ; Regs used in _SYSC_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4213  0B4F  158A  26A6         	fcall	_setSYSC_Main
  4214  0B51  0008               	return
  4215  0B52                     __end_of_SYSC_Main:	
  4216                           
  4217                           	psect	text19
  4218  0EA6                     __ptext19:	
  4219 ;; *************** function _setSYSC_Main *****************
  4220 ;; Defined at:
  4221 ;;		line 23 in file "../src/SYSC_B1.c"
  4222 ;; Parameters:    Size  Location     Type
  4223 ;;		None
  4224 ;; Auto vars:     Size  Location     Type
  4225 ;;		None
  4226 ;; Return value:  Size  Location     Type
  4227 ;;		None               void
  4228 ;; Registers used:
  4229 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4230 ;; Tracked objects:
  4231 ;;		On entry : 0/0
  4232 ;;		On exit  : 0/0
  4233 ;;		Unchanged: 0/0
  4234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4235 ;;      Params:         0       0       0       0
  4236 ;;      Locals:         0       0       0       0
  4237 ;;      Temps:          0       1       0       0
  4238 ;;      Totals:         0       1       0       0
  4239 ;;Total ram usage:        1 bytes
  4240 ;; Hardware stack levels used:    1
  4241 ;; Hardware stack levels required when called:    4
  4242 ;; This function calls:
  4243 ;;		_getMain_All_Error_Status
  4244 ;;		_setLED
  4245 ;; This function is called by:
  4246 ;;		_SYSC_Main
  4247 ;; This function uses a non-reentrant model
  4248 ;;
  4249                           
  4250                           
  4251                           ;psect for function _setSYSC_Main
  4252  0EA6                     _setSYSC_Main:	
  4253                           
  4254                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4255                           
  4256                           ;incstack = 0
  4257                           ; Regs used in _setSYSC_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4258  0EA6  1283               	bcf	3,5	;RP0=0, select bank0
  4259  0EA7  1303               	bcf	3,6	;RP1=0, select bank0
  4260  0EA8  1C28               	btfss	_SYSC,0
  4261  0EA9  0008               	return
  4262                           
  4263                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4264  0EAA  18A8               	btfsc	_SYSC,1
  4265  0EAB  2EC4               	goto	l4489
  4266                           
  4267                           ;SYSC_B1.c: 27: SYSC.Timer++;
  4268  0EAC  3001               	movlw	1
  4269  0EAD  07A9               	addwf	_SYSC+1,f
  4270  0EAE  1803               	skipnc
  4271  0EAF  0AAA               	incf	_SYSC+2,f
  4272  0EB0  3000               	movlw	0
  4273  0EB1  07AA               	addwf	_SYSC+2,f
  4274                           
  4275                           ;SYSC_B1.c: 28: if (SYSC.Timer >= 16)
  4276  0EB2  3000               	movlw	0
  4277  0EB3  022A               	subwf	_SYSC+2,w
  4278  0EB4  3010               	movlw	16
  4279  0EB5  1903               	skipnz
  4280  0EB6  0229               	subwf	_SYSC+1,w
  4281  0EB7  1C03               	skipc
  4282  0EB8  0008               	return
  4283                           
  4284                           ;SYSC_B1.c: 29: {
  4285                           ;SYSC_B1.c: 30: SYSC.Timer = 0;
  4286  0EB9  01A9               	clrf	_SYSC+1
  4287  0EBA  01AA               	clrf	_SYSC+2
  4288                           
  4289                           ;SYSC_B1.c: 31: SYSC.ERROR = 1;
  4290  0EBB  14A8               	bsf	_SYSC,1
  4291                           
  4292                           ;SYSC_B1.c: 33: setLED(1, 111);
  4293  0EBC  306F               	movlw	111
  4294  0EBD  00E2               	movwf	??_setSYSC_Main
  4295  0EBE  0862               	movf	??_setSYSC_Main,w
  4296  0EBF  00DA               	movwf	setLED@command
  4297  0EC0  3001               	movlw	1
  4298  0EC1  118A  2612         	fcall	_setLED
  4299                           
  4300                           ;SYSC_B1.c: 35: }
  4301                           ;SYSC_B1.c: 36: } else {
  4302  0EC3  0008               	return
  4303  0EC4                     l4489:	
  4304                           
  4305                           ;SYSC_B1.c: 37: if (getMain_All_Error_Status(1) == 0) {
  4306  0EC4  3001               	movlw	1
  4307  0EC5  158A  2749  158A   	fcall	_getMain_All_Error_Status
  4308  0EC8  3800               	iorlw	0
  4309  0EC9  1D03               	skipz
  4310  0ECA  0008               	return
  4311                           
  4312                           ;SYSC_B1.c: 38: SYSC.Timer++;
  4313  0ECB  3001               	movlw	1
  4314  0ECC  1283               	bcf	3,5	;RP0=0, select bank0
  4315  0ECD  1303               	bcf	3,6	;RP1=0, select bank0
  4316  0ECE  07A9               	addwf	_SYSC+1,f
  4317  0ECF  1803               	skipnc
  4318  0ED0  0AAA               	incf	_SYSC+2,f
  4319  0ED1  3000               	movlw	0
  4320  0ED2  07AA               	addwf	_SYSC+2,f
  4321                           
  4322                           ;SYSC_B1.c: 39: if (SYSC.Timer == 50) {
  4323  0ED3  3032               	movlw	50
  4324  0ED4  0629               	xorwf	_SYSC+1,w
  4325  0ED5  042A               	iorwf	_SYSC+2,w
  4326  0ED6  1D03               	skipz
  4327  0ED7  2EDD               	goto	l4495
  4328                           
  4329                           ;SYSC_B1.c: 40: SYSC.Timer = 0;
  4330  0ED8  01A9               	clrf	_SYSC+1
  4331  0ED9  01AA               	clrf	_SYSC+2
  4332                           
  4333                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  4334  0EDA  01AB               	clrf	_SYSC+3
  4335  0EDB  01AC               	clrf	_SYSC+4
  4336                           
  4337                           ;SYSC_B1.c: 42: } else {
  4338  0EDC  0008               	return
  4339  0EDD                     l4495:	
  4340                           
  4341                           ;SYSC_B1.c: 43: SYSC.Counter++;
  4342  0EDD  3001               	movlw	1
  4343  0EDE  07AB               	addwf	_SYSC+3,f
  4344  0EDF  1803               	skipnc
  4345  0EE0  0AAC               	incf	_SYSC+4,f
  4346  0EE1  3000               	movlw	0
  4347  0EE2  07AC               	addwf	_SYSC+4,f
  4348                           
  4349                           ;SYSC_B1.c: 44: if (SYSC.Counter == 1000) {
  4350  0EE3  3003               	movlw	3
  4351  0EE4  062C               	xorwf	_SYSC+4,w
  4352  0EE5  1D03               	skipz
  4353  0EE6  2EE9               	goto	u5295
  4354  0EE7  30E8               	movlw	232
  4355  0EE8  062B               	xorwf	_SYSC+3,w
  4356  0EE9                     u5295:	
  4357  0EE9  1D03               	skipz
  4358  0EEA  0008               	return
  4359                           
  4360                           ;SYSC_B1.c: 45: SYSC.Counter = 0;
  4361  0EEB  01AB               	clrf	_SYSC+3
  4362  0EEC  01AC               	clrf	_SYSC+4
  4363                           
  4364                           ;SYSC_B1.c: 46: SYSC.ERROR = 0;
  4365  0EED  10A8               	bcf	_SYSC,1
  4366                           
  4367                           ;SYSC_B1.c: 48: setLED(1, 110);
  4368  0EEE  306E               	movlw	110
  4369  0EEF  00E2               	movwf	??_setSYSC_Main
  4370  0EF0  0862               	movf	??_setSYSC_Main,w
  4371  0EF1  00DA               	movwf	setLED@command
  4372  0EF2  3001               	movlw	1
  4373  0EF3  118A  2612         	fcall	_setLED
  4374  0EF5  0008               	return
  4375  0EF6                     __end_of_setSYSC_Main:	
  4376                           
  4377                           	psect	text20
  4378  0B4C                     __ptext20:	
  4379 ;; *************** function _SYSC_Initialization *****************
  4380 ;; Defined at:
  4381 ;;		line 7 in file "../src/SYSC_B1.c"
  4382 ;; Parameters:    Size  Location     Type
  4383 ;;		None
  4384 ;; Auto vars:     Size  Location     Type
  4385 ;;		None
  4386 ;; Return value:  Size  Location     Type
  4387 ;;		None               void
  4388 ;; Registers used:
  4389 ;;		status,2, status,0, pclath, cstack
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4395 ;;      Params:         0       0       0       0
  4396 ;;      Locals:         0       0       0       0
  4397 ;;      Temps:          0       0       0       0
  4398 ;;      Totals:         0       0       0       0
  4399 ;;Total ram usage:        0 bytes
  4400 ;; Hardware stack levels used:    1
  4401 ;; Hardware stack levels required when called:    3
  4402 ;; This function calls:
  4403 ;;		_setSYSC_Initialization
  4404 ;; This function is called by:
  4405 ;;		_main
  4406 ;; This function uses a non-reentrant model
  4407 ;;
  4408                           
  4409                           
  4410                           ;psect for function _SYSC_Initialization
  4411  0B4C                     _SYSC_Initialization:	
  4412                           
  4413                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  4414                           
  4415                           ;incstack = 0
  4416                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  4417  0B4C  158A  2360         	fcall	_setSYSC_Initialization
  4418  0B4E  0008               	return
  4419  0B4F                     __end_of_SYSC_Initialization:	
  4420                           
  4421                           	psect	text21
  4422  0B60                     __ptext21:	
  4423 ;; *************** function _setSYSC_Initialization *****************
  4424 ;; Defined at:
  4425 ;;		line 13 in file "../src/SYSC_B1.c"
  4426 ;; Parameters:    Size  Location     Type
  4427 ;;		None
  4428 ;; Auto vars:     Size  Location     Type
  4429 ;;		None
  4430 ;; Return value:  Size  Location     Type
  4431 ;;		None               void
  4432 ;; Registers used:
  4433 ;;		None
  4434 ;; Tracked objects:
  4435 ;;		On entry : 0/0
  4436 ;;		On exit  : 0/0
  4437 ;;		Unchanged: 0/0
  4438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4439 ;;      Params:         0       0       0       0
  4440 ;;      Locals:         0       0       0       0
  4441 ;;      Temps:          0       0       0       0
  4442 ;;      Totals:         0       0       0       0
  4443 ;;Total ram usage:        0 bytes
  4444 ;; Hardware stack levels used:    1
  4445 ;; Hardware stack levels required when called:    2
  4446 ;; This function calls:
  4447 ;;		Nothing
  4448 ;; This function is called by:
  4449 ;;		_SYSC_Initialization
  4450 ;; This function uses a non-reentrant model
  4451 ;;
  4452                           
  4453                           
  4454                           ;psect for function _setSYSC_Initialization
  4455  0B60                     _setSYSC_Initialization:	
  4456                           
  4457                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  4458                           
  4459                           ;incstack = 0
  4460                           ; Regs used in _setSYSC_Initialization: []
  4461  0B60  1283               	bcf	3,5	;RP0=0, select bank0
  4462  0B61  1303               	bcf	3,6	;RP1=0, select bank0
  4463  0B62  1428               	bsf	_SYSC,0
  4464  0B63  0008               	return
  4465  0B64                     __end_of_setSYSC_Initialization:	
  4466                           
  4467                           	psect	text22
  4468  0026                     __ptext22:	
  4469 ;; *************** function _PIR_Main *****************
  4470 ;; Defined at:
  4471 ;;		line 14 in file "../src/PIR_B1.c"
  4472 ;; Parameters:    Size  Location     Type
  4473 ;;		None
  4474 ;; Auto vars:     Size  Location     Type
  4475 ;;  error           1   17[BANK0 ] unsigned char 
  4476 ;; Return value:  Size  Location     Type
  4477 ;;		None               void
  4478 ;; Registers used:
  4479 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4480 ;; Tracked objects:
  4481 ;;		On entry : 0/0
  4482 ;;		On exit  : 0/0
  4483 ;;		Unchanged: 0/0
  4484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4485 ;;      Params:         0       0       0       0
  4486 ;;      Locals:         0       3       0       0
  4487 ;;      Temps:          0       5       0       0
  4488 ;;      Totals:         0       8       0       0
  4489 ;;Total ram usage:        8 bytes
  4490 ;; Hardware stack levels used:    1
  4491 ;; Hardware stack levels required when called:    5
  4492 ;; This function calls:
  4493 ;;		_getLights_Status
  4494 ;;		_getMain_All_Error_Status
  4495 ;;		_setLED
  4496 ;;		_setLights_Trigger
  4497 ;;		_setMain_Exception
  4498 ;; This function is called by:
  4499 ;;		_main
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           
  4504                           ;psect for function _PIR_Main
  4505  0026                     _PIR_Main:	
  4506                           
  4507                           ;PIR_B1.c: 15: char error = getMain_All_Error_Status(0);
  4508                           
  4509                           ;incstack = 0
  4510                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4511  0026  3000               	movlw	0
  4512  0027  158A  2749  118A   	fcall	_getMain_All_Error_Status
  4513  002A  1283               	bcf	3,5	;RP0=0, select bank0
  4514  002B  1303               	bcf	3,6	;RP1=0, select bank0
  4515  002C  00E4               	movwf	??_PIR_Main
  4516  002D  0864               	movf	??_PIR_Main,w
  4517  002E  00EB               	movwf	PIR_Main@error
  4518                           
  4519                           ;PIR_B1.c: 16: if (_PIR.Enable == 1) {
  4520  002F  1683               	bsf	3,5	;RP0=1, select bank1
  4521  0030  1303               	bcf	3,6	;RP1=0, select bank1
  4522  0031  1C20               	btfss	__PIR^(0+128),0
  4523  0032  2A05               	goto	l861
  4524                           
  4525                           ;PIR_B1.c: 18: if (error == 0) {
  4526  0033  1283               	bcf	3,5	;RP0=0, select bank0
  4527  0034  1303               	bcf	3,6	;RP1=0, select bank0
  4528  0035  08EB               	movf	PIR_Main@error,f
  4529  0036  1D03               	skipz
  4530  0037  2852               	goto	l862
  4531                           
  4532                           ;PIR_B1.c: 20: if (_PIR.Detect == 0) {
  4533  0038  1683               	bsf	3,5	;RP0=1, select bank1
  4534  0039  1303               	bcf	3,6	;RP1=0, select bank1
  4535  003A  1A20               	btfsc	__PIR^(0+128),4
  4536  003B  2884               	goto	l4967
  4537                           
  4538                           ;PIR_B1.c: 21: _PIR.Detect = 1;
  4539  003C  1620               	bsf	__PIR^(0+128),4
  4540                           
  4541                           ;PIR_B1.c: 22: _PIR.Available = 1;
  4542  003D  17A0               	bsf	__PIR^(0+128),7
  4543                           
  4544                           ;PIR_B1.c: 23: setLED(1, 0);
  4545  003E  1283               	bcf	3,5	;RP0=0, select bank0
  4546  003F  1303               	bcf	3,6	;RP1=0, select bank0
  4547  0040  01DA               	clrf	setLED@command
  4548  0041  3001               	movlw	1
  4549  0042  118A  2612  118A   	fcall	_setLED
  4550                           
  4551                           ;PIR_B1.c: 24: if (_PIR.OK == 0) {
  4552  0045  1683               	bsf	3,5	;RP0=1, select bank1
  4553  0046  1303               	bcf	3,6	;RP1=0, select bank1
  4554  0047  19A0               	btfsc	__PIR^(0+128),3
  4555  0048  2884               	goto	l4967
  4556                           
  4557                           ;PIR_B1.c: 25: setLED(2, 1);
  4558  0049  1283               	bcf	3,5	;RP0=0, select bank0
  4559  004A  1303               	bcf	3,6	;RP1=0, select bank0
  4560  004B  01DA               	clrf	setLED@command
  4561  004C  0ADA               	incf	setLED@command,f
  4562  004D  3002               	movlw	2
  4563  004E  118A  2612  118A   	fcall	_setLED
  4564                           
  4565                           ;PIR_B1.c: 26: }
  4566                           ;PIR_B1.c: 27: }
  4567                           ;PIR_B1.c: 28: } else {
  4568  0051  2884               	goto	l4967
  4569  0052                     l862:	
  4570                           
  4571                           ;PIR_B1.c: 29: if (_PIR.Detect == 1) {
  4572  0052  1683               	bsf	3,5	;RP0=1, select bank1
  4573  0053  1303               	bcf	3,6	;RP1=0, select bank1
  4574  0054  1E20               	btfss	__PIR^(0+128),4
  4575  0055  2884               	goto	l4967
  4576                           
  4577                           ;PIR_B1.c: 30: setMain_Exception(error);
  4578  0056  1283               	bcf	3,5	;RP0=0, select bank0
  4579  0057  1303               	bcf	3,6	;RP1=0, select bank0
  4580  0058  086B               	movf	PIR_Main@error,w
  4581  0059  158A  262F  118A   	fcall	_setMain_Exception
  4582                           
  4583                           ;PIR_B1.c: 32: _PIR.Detect = 0;
  4584  005C  1683               	bsf	3,5	;RP0=1, select bank1
  4585  005D  1303               	bcf	3,6	;RP1=0, select bank1
  4586  005E  1220               	bcf	__PIR^(0+128),4
  4587                           
  4588                           ;PIR_B1.c: 33: _PIR.Available = 0;
  4589  005F  13A0               	bcf	__PIR^(0+128),7
  4590                           
  4591                           ;PIR_B1.c: 34: _PIR.Status = 0;
  4592  0060  1320               	bcf	__PIR^(0+128),6
  4593                           
  4594                           ;PIR_B1.c: 37: _PIR.Time = 0;
  4595  0061  01A5               	clrf	(__PIR^(0+128)+5)
  4596                           
  4597                           ;PIR_B1.c: 38: _PIR.RangeTime1 = 0;
  4598  0062  01CA               	clrf	(__PIR^(0+128)+42)
  4599                           
  4600                           ;PIR_B1.c: 39: _PIR.RangeValue = 15;
  4601  0063  300F               	movlw	15
  4602  0064  1283               	bcf	3,5	;RP0=0, select bank0
  4603  0065  1303               	bcf	3,6	;RP1=0, select bank0
  4604  0066  00E4               	movwf	??_PIR_Main
  4605  0067  0864               	movf	??_PIR_Main,w
  4606  0068  1683               	bsf	3,5	;RP0=1, select bank1
  4607  0069  1303               	bcf	3,6	;RP1=0, select bank1
  4608  006A  00CC               	movwf	(__PIR^(0+128)+44)
  4609                           
  4610                           ;PIR_B1.c: 40: _PIR.RangeCount = 0;
  4611  006B  01CB               	clrf	(__PIR^(0+128)+43)
  4612                           
  4613                           ;PIR_B1.c: 42: setLED(1, 1);
  4614  006C  1283               	bcf	3,5	;RP0=0, select bank0
  4615  006D  1303               	bcf	3,6	;RP1=0, select bank0
  4616  006E  01DA               	clrf	setLED@command
  4617  006F  0ADA               	incf	setLED@command,f
  4618  0070  3001               	movlw	1
  4619  0071  118A  2612  118A   	fcall	_setLED
  4620                           
  4621                           ;PIR_B1.c: 43: setLED(2, 0);
  4622  0074  1283               	bcf	3,5	;RP0=0, select bank0
  4623  0075  1303               	bcf	3,6	;RP1=0, select bank0
  4624  0076  01DA               	clrf	setLED@command
  4625  0077  3002               	movlw	2
  4626  0078  118A  2612  118A   	fcall	_setLED
  4627                           
  4628                           ;PIR_B1.c: 45: if (_PIR.OK == 1) {
  4629  007B  1683               	bsf	3,5	;RP0=1, select bank1
  4630  007C  1303               	bcf	3,6	;RP1=0, select bank1
  4631  007D  1DA0               	btfss	__PIR^(0+128),3
  4632  007E  2881               	goto	l867
  4633                           
  4634                           ;PIR_B1.c: 46: _PIR.Count = 0;
  4635  007F  01C1               	clrf	(__PIR^(0+128)+33)
  4636  0080  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4637  0081                     l867:	
  4638                           
  4639                           ;PIR_B1.c: 47: }
  4640                           ;PIR_B1.c: 48: _PIR.CloseTimeSeconds = 0;
  4641  0081  01C6               	clrf	(__PIR^(0+128)+38)
  4642                           
  4643                           ;PIR_B1.c: 49: _PIR.CloseTimeMinutes = 0;
  4644  0082  01C4               	clrf	(__PIR^(0+128)+36)
  4645  0083  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4646  0084                     l4967:	
  4647                           
  4648                           ;PIR_B1.c: 50: }
  4649                           ;PIR_B1.c: 51: }
  4650                           ;PIR_B1.c: 53: if (_PIR.ADtoGO == 0) {
  4651  0084  1683               	bsf	3,5	;RP0=1, select bank1
  4652  0085  1303               	bcf	3,6	;RP1=0, select bank1
  4653  0086  18A0               	btfsc	__PIR^(0+128),1
  4654  0087  2897               	goto	l868
  4655                           
  4656                           ;PIR_B1.c: 54: _PIR.Time++;
  4657  0088  3001               	movlw	1
  4658  0089  1283               	bcf	3,5	;RP0=0, select bank0
  4659  008A  1303               	bcf	3,6	;RP1=0, select bank0
  4660  008B  00E4               	movwf	??_PIR_Main
  4661  008C  0864               	movf	??_PIR_Main,w
  4662  008D  1683               	bsf	3,5	;RP0=1, select bank1
  4663  008E  1303               	bcf	3,6	;RP1=0, select bank1
  4664  008F  07A5               	addwf	(__PIR^(0+128)+5),f
  4665                           
  4666                           ;PIR_B1.c: 55: if (_PIR.Time == 10) {
  4667  0090  0825               	movf	(__PIR^(0+128)+5),w
  4668  0091  3A0A               	xorlw	10
  4669  0092  1D03               	skipz
  4670  0093  29B9               	goto	l5051
  4671                           
  4672                           ;PIR_B1.c: 56: _PIR.Time = 0;
  4673  0094  01A5               	clrf	(__PIR^(0+128)+5)
  4674                           
  4675                           ;PIR_B1.c: 57: _PIR.ADtoGO = 1;
  4676  0095  14A0               	bsf	__PIR^(0+128),1
  4677                           
  4678                           ;PIR_B1.c: 58: }
  4679                           ;PIR_B1.c: 59: } else {
  4680  0096  29B9               	goto	l5051
  4681  0097                     l868:	
  4682                           
  4683                           ;PIR_B1.c: 60: if (_PIR.GO == 1) {
  4684  0097  1D20               	btfss	__PIR^(0+128),2
  4685  0098  29B9               	goto	l5051
  4686                           
  4687                           ;PIR_B1.c: 61: _PIR.GO = 0;
  4688  0099  1120               	bcf	__PIR^(0+128),2
  4689                           
  4690                           ;PIR_B1.c: 62: if (_PIR.Available == 1) {
  4691  009A  1BA0               	btfsc	__PIR^(0+128),7
  4692                           
  4693                           ;PIR_B1.c: 63: if (_PIR.OK == 1) {
  4694  009B  1DA0               	btfss	__PIR^(0+128),3
  4695  009C  29B9               	goto	l5051
  4696                           
  4697                           ;PIR_B1.c: 65: _PIR.Time++;
  4698  009D  3001               	movlw	1
  4699  009E  1283               	bcf	3,5	;RP0=0, select bank0
  4700  009F  1303               	bcf	3,6	;RP1=0, select bank0
  4701  00A0  00E4               	movwf	??_PIR_Main
  4702  00A1  0864               	movf	??_PIR_Main,w
  4703  00A2  1683               	bsf	3,5	;RP0=1, select bank1
  4704  00A3  1303               	bcf	3,6	;RP1=0, select bank1
  4705  00A4  07A5               	addwf	(__PIR^(0+128)+5),f
  4706                           
  4707                           ;PIR_B1.c: 66: if (_PIR.Time == 60) {
  4708  00A5  0825               	movf	(__PIR^(0+128)+5),w
  4709  00A6  3A3C               	xorlw	60
  4710  00A7  1D03               	skipz
  4711  00A8  28DD               	goto	l5017
  4712                           
  4713                           ;PIR_B1.c: 67: _PIR.Time = 0;
  4714  00A9  01A5               	clrf	(__PIR^(0+128)+5)
  4715                           
  4716                           ;PIR_B1.c: 68: if (_PIR.RangeCount >= 90) {
  4717  00AA  305A               	movlw	90
  4718  00AB  024B               	subwf	(__PIR^(0+128)+43),w
  4719  00AC  1C03               	skipc
  4720  00AD  28B9               	goto	l4999
  4721                           
  4722                           ;PIR_B1.c: 69: _PIR.RangeTime1 = 0;
  4723  00AE  01CA               	clrf	(__PIR^(0+128)+42)
  4724                           
  4725                           ;PIR_B1.c: 71: if (_PIR.RangeValue == 15) {
  4726  00AF  084C               	movf	(__PIR^(0+128)+44),w
  4727  00B0  3A0F               	xorlw	15
  4728  00B1  1903               	btfsc	3,2
  4729  00B2  28CE               	goto	L14
  4730                           
  4731                           ;PIR_B1.c: 73: } else if (_PIR.RangeValue == 25) {
  4732                           
  4733                           ;PIR_B1.c: 72: _PIR.RangeValue = 25;
  4734  00B3  084C               	movf	(__PIR^(0+128)+44),w
  4735  00B4  3A19               	xorlw	25
  4736  00B5  1D03               	skipz
  4737  00B6  28DC               	goto	l5015
  4738                           
  4739                           ;PIR_B1.c: 74: _PIR.RangeValue = 35;
  4740  00B7  3023               	movlw	35
  4741  00B8  28D5               	goto	L10
  4742  00B9                     l4999:	
  4743                           ;PIR_B1.c: 75: }
  4744                           ;PIR_B1.c: 76: } else if (_PIR.RangeCount <= 10) {
  4745                           
  4746  00B9  300B               	movlw	11
  4747  00BA  024B               	subwf	(__PIR^(0+128)+43),w
  4748  00BB  1803               	skipnc
  4749  00BC  28DC               	goto	l5015
  4750                           
  4751                           ;PIR_B1.c: 77: _PIR.RangeTime1++;
  4752  00BD  3001               	movlw	1
  4753  00BE  1283               	bcf	3,5	;RP0=0, select bank0
  4754  00BF  1303               	bcf	3,6	;RP1=0, select bank0
  4755  00C0  00E4               	movwf	??_PIR_Main
  4756  00C1  0864               	movf	??_PIR_Main,w
  4757  00C2  1683               	bsf	3,5	;RP0=1, select bank1
  4758  00C3  1303               	bcf	3,6	;RP1=0, select bank1
  4759  00C4  07CA               	addwf	(__PIR^(0+128)+42),f
  4760                           
  4761                           ;PIR_B1.c: 78: if (_PIR.RangeTime1 == 2) {
  4762  00C5  084A               	movf	(__PIR^(0+128)+42),w
  4763  00C6  3A02               	xorlw	2
  4764  00C7  1D03               	skipz
  4765  00C8  28DC               	goto	l5015
  4766                           
  4767                           ;PIR_B1.c: 79: _PIR.RangeTime1 = 0;
  4768  00C9  01CA               	clrf	(__PIR^(0+128)+42)
  4769                           
  4770                           ;PIR_B1.c: 81: if (_PIR.RangeValue == 35) {
  4771  00CA  084C               	movf	(__PIR^(0+128)+44),w
  4772  00CB  3A23               	xorlw	35
  4773  00CC  1D03               	skipz
  4774  00CD  28D0               	goto	l5011
  4775  00CE                     L14:	
  4776                           
  4777                           ;PIR_B1.c: 82: _PIR.RangeValue = 25;
  4778  00CE  3019               	movlw	25
  4779  00CF  28D5               	goto	L10
  4780  00D0                     l5011:	
  4781                           ;PIR_B1.c: 83: } else if (_PIR.RangeValue == 25) {
  4782                           
  4783  00D0  084C               	movf	(__PIR^(0+128)+44),w
  4784  00D1  3A19               	xorlw	25
  4785  00D2  1D03               	skipz
  4786  00D3  28DC               	goto	l5015
  4787                           
  4788                           ;PIR_B1.c: 84: _PIR.RangeValue = 15;
  4789  00D4  300F               	movlw	15
  4790  00D5                     L10:	
  4791  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  4792  00D6  1303               	bcf	3,6	;RP1=0, select bank0
  4793  00D7  00E4               	movwf	??_PIR_Main
  4794  00D8  0864               	movf	??_PIR_Main,w
  4795  00D9  1683               	bsf	3,5	;RP0=1, select bank1
  4796  00DA  1303               	bcf	3,6	;RP1=0, select bank1
  4797  00DB  00CC               	movwf	(__PIR^(0+128)+44)
  4798  00DC                     l5015:	
  4799                           
  4800                           ;PIR_B1.c: 85: }
  4801                           ;PIR_B1.c: 86: }
  4802                           ;PIR_B1.c: 87: }
  4803                           ;PIR_B1.c: 88: _PIR.RangeCount = 0;
  4804  00DC  01CB               	clrf	(__PIR^(0+128)+43)
  4805  00DD                     l5017:	
  4806                           
  4807                           ;PIR_B1.c: 89: }
  4808                           ;PIR_B1.c: 92: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - (_PIR.RangeValue + _PIR.Of
      +                          fset)))
  4809                           ;PIR_B1.c: 93: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + (_PIR.RangeValue + _PIR.Off
      +                          set)))) {
  4810  00DD  084C               	movf	(__PIR^(0+128)+44),w
  4811  00DE  074E               	addwf	(__PIR^(0+128)+46),w
  4812  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  4813  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  4814  00E1  00E4               	movwf	??_PIR_Main
  4815  00E2  01E5               	clrf	??_PIR_Main+1
  4816  00E3  0DE5               	rlf	??_PIR_Main+1,f
  4817  00E4  09E4               	comf	??_PIR_Main,f
  4818  00E5  09E5               	comf	??_PIR_Main+1,f
  4819  00E6  0AE4               	incf	??_PIR_Main,f
  4820  00E7  1903               	skipnz
  4821  00E8  0AE5               	incf	??_PIR_Main+1,f
  4822  00E9  1683               	bsf	3,5	;RP0=1, select bank1
  4823  00EA  1303               	bcf	3,6	;RP1=0, select bank1
  4824  00EB  0826               	movf	(__PIR^(0+128)+6),w
  4825  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  4826  00ED  1303               	bcf	3,6	;RP1=0, select bank0
  4827  00EE  0764               	addwf	??_PIR_Main,w
  4828  00EF  00E6               	movwf	??_PIR_Main+2
  4829  00F0  0865               	movf	??_PIR_Main+1,w
  4830  00F1  1803               	skipnc
  4831  00F2  0A65               	incf	??_PIR_Main+1,w
  4832  00F3  00E7               	movwf	??_PIR_Main+3
  4833  00F4  0867               	movf	??_PIR_Main+3,w
  4834  00F5  3A80               	xorlw	128
  4835  00F6  3C80               	sublw	128
  4836  00F7  1D03               	skipz
  4837  00F8  28FD               	goto	u6345
  4838  00F9  0866               	movf	??_PIR_Main+2,w
  4839  00FA  1683               	bsf	3,5	;RP0=1, select bank1
  4840  00FB  1303               	bcf	3,6	;RP1=0, select bank1
  4841  00FC  0221               	subwf	(__PIR^(0+128)+1),w
  4842  00FD                     u6345:	
  4843  00FD  1C03               	skipc
  4844  00FE  292B               	goto	l5027
  4845  00FF  1683               	bsf	3,5	;RP0=1, select bank1
  4846  0100  1303               	bcf	3,6	;RP1=0, select bank1
  4847  0101  084C               	movf	(__PIR^(0+128)+44),w
  4848  0102  074E               	addwf	(__PIR^(0+128)+46),w
  4849  0103  1283               	bcf	3,5	;RP0=0, select bank0
  4850  0104  1303               	bcf	3,6	;RP1=0, select bank0
  4851  0105  00E4               	movwf	??_PIR_Main
  4852  0106  01E5               	clrf	??_PIR_Main+1
  4853  0107  0DE5               	rlf	??_PIR_Main+1,f
  4854  0108  1683               	bsf	3,5	;RP0=1, select bank1
  4855  0109  1303               	bcf	3,6	;RP1=0, select bank1
  4856  010A  0826               	movf	(__PIR^(0+128)+6),w
  4857  010B  1283               	bcf	3,5	;RP0=0, select bank0
  4858  010C  1303               	bcf	3,6	;RP1=0, select bank0
  4859  010D  0764               	addwf	??_PIR_Main,w
  4860  010E  00E6               	movwf	??_PIR_Main+2
  4861  010F  3000               	movlw	0
  4862  0110  1803               	skipnc
  4863  0111  3001               	movlw	1
  4864  0112  0765               	addwf	??_PIR_Main+1,w
  4865  0113  00E7               	movwf	??_PIR_Main+3
  4866  0114  0867               	movf	??_PIR_Main+3,w
  4867  0115  3A80               	xorlw	128
  4868  0116  00E8               	movwf	??_PIR_Main+4
  4869  0117  3080               	movlw	128
  4870  0118  0268               	subwf	??_PIR_Main+4,w
  4871  0119  1D03               	skipz
  4872  011A  2921               	goto	u6355
  4873  011B  1683               	bsf	3,5	;RP0=1, select bank1
  4874  011C  1303               	bcf	3,6	;RP1=0, select bank1
  4875  011D  0821               	movf	(__PIR^(0+128)+1),w
  4876  011E  1283               	bcf	3,5	;RP0=0, select bank0
  4877  011F  1303               	bcf	3,6	;RP1=0, select bank0
  4878  0120  0266               	subwf	??_PIR_Main+2,w
  4879  0121                     u6355:	
  4880  0121  1C03               	skipc
  4881  0122  292B               	goto	l5027
  4882                           
  4883                           ;PIR_B1.c: 94: _PIR.Count = 0;
  4884  0123  1683               	bsf	3,5	;RP0=1, select bank1
  4885  0124  1303               	bcf	3,6	;RP1=0, select bank1
  4886  0125  01C1               	clrf	(__PIR^(0+128)+33)
  4887  0126  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4888                           
  4889                           ;PIR_B1.c: 95: setLED(1, 0);
  4890  0127  1283               	bcf	3,5	;RP0=0, select bank0
  4891  0128  1303               	bcf	3,6	;RP1=0, select bank0
  4892  0129  01DA               	clrf	setLED@command
  4893  012A  29A2               	goto	L15
  4894  012B                     l5027:	
  4895                           ;PIR_B1.c: 97: } else {
  4896                           
  4897                           ;PIR_B1.c: 96: setLED(2, 0);
  4898                           
  4899                           
  4900                           ;PIR_B1.c: 98: _PIR.RangeCount++;
  4901  012B  3001               	movlw	1
  4902  012C  1283               	bcf	3,5	;RP0=0, select bank0
  4903  012D  1303               	bcf	3,6	;RP1=0, select bank0
  4904  012E  00E4               	movwf	??_PIR_Main
  4905  012F  0864               	movf	??_PIR_Main,w
  4906  0130  1683               	bsf	3,5	;RP0=1, select bank1
  4907  0131  1303               	bcf	3,6	;RP1=0, select bank1
  4908  0132  07CB               	addwf	(__PIR^(0+128)+43),f
  4909                           
  4910                           ;PIR_B1.c: 99: _PIR.Count++;
  4911  0133  3001               	movlw	1
  4912  0134  07C1               	addwf	(__PIR^(0+128)+33),f
  4913  0135  1803               	skipnc
  4914  0136  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4915  0137  3000               	movlw	0
  4916  0138  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4917                           
  4918                           ;PIR_B1.c: 101: _PIR.TriggerValue = _PIR.Status == 1 ? 3 : 2;
  4919  0139  1B20               	btfsc	__PIR^(0+128),6
  4920  013A  293F               	goto	l5035
  4921  013B  3002               	movlw	2
  4922  013C  1283               	bcf	3,5	;RP0=0, select bank0
  4923  013D  1303               	bcf	3,6	;RP1=0, select bank0
  4924  013E  2941               	goto	L11
  4925  013F                     l5035:	
  4926  013F  3003               	movlw	3
  4927  0140  1283               	bcf	3,5	;RP0=0, select bank0
  4928  0141                     L11:	
  4929  0141  00E9               	movwf	_PIR_Main$3301
  4930  0142  3000               	movlw	0
  4931  0143  00EA               	movwf	_PIR_Main$3301+1
  4932  0144  0869               	movf	_PIR_Main$3301,w
  4933  0145  00E4               	movwf	??_PIR_Main
  4934  0146  0864               	movf	??_PIR_Main,w
  4935  0147  1683               	bsf	3,5	;RP0=1, select bank1
  4936  0148  1303               	bcf	3,6	;RP1=0, select bank1
  4937  0149  00C3               	movwf	(__PIR^(0+128)+35)
  4938                           
  4939                           ;PIR_B1.c: 103: if (_PIR.Count == _PIR.TriggerValue) {
  4940  014A  0843               	movf	(__PIR^(0+128)+35),w
  4941  014B  1283               	bcf	3,5	;RP0=0, select bank0
  4942  014C  1303               	bcf	3,6	;RP1=0, select bank0
  4943  014D  00E4               	movwf	??_PIR_Main
  4944  014E  01E5               	clrf	??_PIR_Main+1
  4945  014F  1683               	bsf	3,5	;RP0=1, select bank1
  4946  0150  1303               	bcf	3,6	;RP1=0, select bank1
  4947  0151  0842               	movf	((__PIR+1)^(0+128)+33),w
  4948  0152  1283               	bcf	3,5	;RP0=0, select bank0
  4949  0153  1303               	bcf	3,6	;RP1=0, select bank0
  4950  0154  0665               	xorwf	??_PIR_Main+1,w
  4951  0155  1D03               	skipz
  4952  0156  295D               	goto	u6375
  4953  0157  1683               	bsf	3,5	;RP0=1, select bank1
  4954  0158  1303               	bcf	3,6	;RP1=0, select bank1
  4955  0159  0841               	movf	(__PIR^(0+128)+33),w
  4956  015A  1283               	bcf	3,5	;RP0=0, select bank0
  4957  015B  1303               	bcf	3,6	;RP1=0, select bank0
  4958  015C  0664               	xorwf	??_PIR_Main,w
  4959  015D                     u6375:	
  4960  015D  1D03               	skipz
  4961  015E  29B9               	goto	l5051
  4962                           
  4963                           ;PIR_B1.c: 104: _PIR.Count = 0;
  4964  015F  1683               	bsf	3,5	;RP0=1, select bank1
  4965  0160  1303               	bcf	3,6	;RP1=0, select bank1
  4966  0161  01C1               	clrf	(__PIR^(0+128)+33)
  4967  0162  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4968                           
  4969                           ;PIR_B1.c: 105: _PIR.CloseTimeSeconds = 0;
  4970  0163  01C6               	clrf	(__PIR^(0+128)+38)
  4971                           
  4972                           ;PIR_B1.c: 106: _PIR.CloseTimeMinutes = 0;
  4973  0164  01C4               	clrf	(__PIR^(0+128)+36)
  4974  0165  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4975                           
  4976                           ;PIR_B1.c: 107: _PIR.Status = 1;
  4977  0166  1720               	bsf	__PIR^(0+128),6
  4978                           
  4979                           ;PIR_B1.c: 110: if (getLights_Status(1) == 0) {
  4980  0167  3001               	movlw	1
  4981  0168  158A  2449  118A   	fcall	_getLights_Status
  4982  016B  3800               	iorlw	0
  4983  016C  1D03               	skipz
  4984  016D  2976               	goto	l5045
  4985                           
  4986                           ;PIR_B1.c: 111: setLights_Trigger(1, 1);
  4987  016E  1283               	bcf	3,5	;RP0=0, select bank0
  4988  016F  1303               	bcf	3,6	;RP1=0, select bank0
  4989  0170  01DA               	clrf	setLights_Trigger@command
  4990  0171  0ADA               	incf	setLights_Trigger@command,f
  4991  0172  3001               	movlw	1
  4992  0173  158A  2524  118A   	fcall	_setLights_Trigger
  4993  0176                     l5045:	
  4994                           
  4995                           ;PIR_B1.c: 112: }
  4996                           ;PIR_B1.c: 115: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - (_PIR.RangeValue + _PIR.O
      +                          ffset)))) {
  4997  0176  1683               	bsf	3,5	;RP0=1, select bank1
  4998  0177  1303               	bcf	3,6	;RP1=0, select bank1
  4999  0178  084C               	movf	(__PIR^(0+128)+44),w
  5000  0179  074E               	addwf	(__PIR^(0+128)+46),w
  5001  017A  1283               	bcf	3,5	;RP0=0, select bank0
  5002  017B  1303               	bcf	3,6	;RP1=0, select bank0
  5003  017C  00E4               	movwf	??_PIR_Main
  5004  017D  01E5               	clrf	??_PIR_Main+1
  5005  017E  0DE5               	rlf	??_PIR_Main+1,f
  5006  017F  09E4               	comf	??_PIR_Main,f
  5007  0180  09E5               	comf	??_PIR_Main+1,f
  5008  0181  0AE4               	incf	??_PIR_Main,f
  5009  0182  1903               	skipnz
  5010  0183  0AE5               	incf	??_PIR_Main+1,f
  5011  0184  1683               	bsf	3,5	;RP0=1, select bank1
  5012  0185  1303               	bcf	3,6	;RP1=0, select bank1
  5013  0186  0826               	movf	(__PIR^(0+128)+6),w
  5014  0187  1283               	bcf	3,5	;RP0=0, select bank0
  5015  0188  1303               	bcf	3,6	;RP1=0, select bank0
  5016  0189  0764               	addwf	??_PIR_Main,w
  5017  018A  00E6               	movwf	??_PIR_Main+2
  5018  018B  0865               	movf	??_PIR_Main+1,w
  5019  018C  1803               	skipnc
  5020  018D  0A65               	incf	??_PIR_Main+1,w
  5021  018E  00E7               	movwf	??_PIR_Main+3
  5022  018F  0867               	movf	??_PIR_Main+3,w
  5023  0190  3A80               	xorlw	128
  5024  0191  00E8               	movwf	??_PIR_Main+4
  5025  0192  3080               	movlw	128
  5026  0193  0268               	subwf	??_PIR_Main+4,w
  5027  0194  1D03               	skipz
  5028  0195  299C               	goto	u6395
  5029  0196  1683               	bsf	3,5	;RP0=1, select bank1
  5030  0197  1303               	bcf	3,6	;RP1=0, select bank1
  5031  0198  0821               	movf	(__PIR^(0+128)+1),w
  5032  0199  1283               	bcf	3,5	;RP0=0, select bank0
  5033  019A  1303               	bcf	3,6	;RP1=0, select bank0
  5034  019B  0266               	subwf	??_PIR_Main+2,w
  5035  019C                     u6395:	
  5036  019C  1C03               	skipc
  5037  019D  29AA               	goto	l5049
  5038                           
  5039                           ;PIR_B1.c: 116: setLED(1, 1);
  5040  019E  1283               	bcf	3,5	;RP0=0, select bank0
  5041  019F  1303               	bcf	3,6	;RP1=0, select bank0
  5042  01A0  01DA               	clrf	setLED@command
  5043  01A1  0ADA               	incf	setLED@command,f
  5044  01A2                     L15:	
  5045  01A2  3001               	movlw	1
  5046  01A3  118A  2612  118A   	fcall	_setLED
  5047                           
  5048                           ;PIR_B1.c: 117: setLED(2, 0);
  5049  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  5050  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  5051  01A8  01DA               	clrf	setLED@command
  5052  01A9  29B5               	goto	L12
  5053  01AA                     l5049:	
  5054                           ;PIR_B1.c: 118: } else {
  5055                           
  5056                           
  5057                           ;PIR_B1.c: 119: setLED(1, 0);
  5058  01AA  1283               	bcf	3,5	;RP0=0, select bank0
  5059  01AB  1303               	bcf	3,6	;RP1=0, select bank0
  5060  01AC  01DA               	clrf	setLED@command
  5061  01AD  3001               	movlw	1
  5062  01AE  118A  2612  118A   	fcall	_setLED
  5063                           
  5064                           ;PIR_B1.c: 120: setLED(2, 1);
  5065  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  5066  01B2  1303               	bcf	3,6	;RP1=0, select bank0
  5067  01B3  01DA               	clrf	setLED@command
  5068  01B4  0ADA               	incf	setLED@command,f
  5069  01B5                     L12:	
  5070  01B5  3002               	movlw	2
  5071  01B6  118A  2612  118A   	fcall	_setLED
  5072  01B9                     l5051:	
  5073                           
  5074                           ;PIR_B1.c: 121: }
  5075                           ;PIR_B1.c: 122: }
  5076                           ;PIR_B1.c: 123: }
  5077                           ;PIR_B1.c: 124: }
  5078                           ;PIR_B1.c: 125: }
  5079                           ;PIR_B1.c: 126: }
  5080                           ;PIR_B1.c: 127: }
  5081                           ;PIR_B1.c: 128: if (_PIR.OK == 0) {
  5082  01B9  1683               	bsf	3,5	;RP0=1, select bank1
  5083  01BA  1303               	bcf	3,6	;RP1=0, select bank1
  5084  01BB  19A0               	btfsc	__PIR^(0+128),3
  5085  01BC  29D5               	goto	l5061
  5086                           
  5087                           ;PIR_B1.c: 129: _PIR.Count++;
  5088  01BD  3001               	movlw	1
  5089  01BE  07C1               	addwf	(__PIR^(0+128)+33),f
  5090  01BF  1803               	skipnc
  5091  01C0  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  5092  01C1  3000               	movlw	0
  5093  01C2  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  5094                           
  5095                           ;PIR_B1.c: 130: if (_PIR.Count == 3000) {
  5096  01C3  300B               	movlw	11
  5097  01C4  0642               	xorwf	((__PIR+1)^(0+128)+33),w
  5098  01C5  1D03               	skipz
  5099  01C6  29C9               	goto	u6415
  5100  01C7  30B8               	movlw	184
  5101  01C8  0641               	xorwf	(__PIR^(0+128)+33),w
  5102  01C9                     u6415:	
  5103  01C9  1D03               	skipz
  5104  01CA  29D5               	goto	l5061
  5105                           
  5106                           ;PIR_B1.c: 131: _PIR.Count = 0;
  5107  01CB  01C1               	clrf	(__PIR^(0+128)+33)
  5108  01CC  01C2               	clrf	((__PIR+1)^(0+128)+33)
  5109                           
  5110                           ;PIR_B1.c: 132: _PIR.OK = 1;
  5111  01CD  15A0               	bsf	__PIR^(0+128),3
  5112                           
  5113                           ;PIR_B1.c: 133: setLED(2, 0);
  5114  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  5115  01CF  1303               	bcf	3,6	;RP1=0, select bank0
  5116  01D0  01DA               	clrf	setLED@command
  5117  01D1  3002               	movlw	2
  5118  01D2  118A  2612  118A   	fcall	_setLED
  5119  01D5                     l5061:	
  5120                           
  5121                           ;PIR_B1.c: 134: }
  5122                           ;PIR_B1.c: 135: }
  5123                           ;PIR_B1.c: 136: if (_PIR.Status == 1) {
  5124  01D5  1683               	bsf	3,5	;RP0=1, select bank1
  5125  01D6  1303               	bcf	3,6	;RP1=0, select bank1
  5126  01D7  1F20               	btfss	__PIR^(0+128),6
  5127  01D8  0008               	return
  5128                           
  5129                           ;PIR_B1.c: 137: _PIR.CloseTimeSeconds++;
  5130  01D9  3001               	movlw	1
  5131  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  5132  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  5133  01DC  00E4               	movwf	??_PIR_Main
  5134  01DD  0864               	movf	??_PIR_Main,w
  5135  01DE  1683               	bsf	3,5	;RP0=1, select bank1
  5136  01DF  1303               	bcf	3,6	;RP1=0, select bank1
  5137  01E0  07C6               	addwf	(__PIR^(0+128)+38),f
  5138                           
  5139                           ;PIR_B1.c: 138: if (_PIR.CloseTimeSeconds == 100) {
  5140  01E1  0846               	movf	(__PIR^(0+128)+38),w
  5141  01E2  3A64               	xorlw	100
  5142  01E3  1D03               	skipz
  5143  01E4  0008               	return
  5144                           
  5145                           ;PIR_B1.c: 139: _PIR.CloseTimeSeconds = 0;
  5146  01E5  01C6               	clrf	(__PIR^(0+128)+38)
  5147                           
  5148                           ;PIR_B1.c: 140: _PIR.CloseTimeMinutes++;
  5149  01E6  3001               	movlw	1
  5150  01E7  07C4               	addwf	(__PIR^(0+128)+36),f
  5151  01E8  1803               	skipnc
  5152  01E9  0AC5               	incf	((__PIR+1)^(0+128)+36),f
  5153  01EA  3000               	movlw	0
  5154  01EB  07C5               	addwf	((__PIR+1)^(0+128)+36),f
  5155                           
  5156                           ;PIR_B1.c: 141: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  5157  01EC  0848               	movf	((__PIR+1)^(0+128)+39),w
  5158  01ED  0645               	xorwf	((__PIR+1)^(0+128)+36),w
  5159  01EE  1D03               	skipz
  5160  01EF  29F2               	goto	u6445
  5161  01F0  0847               	movf	(__PIR^(0+128)+39),w
  5162  01F1  0644               	xorwf	(__PIR^(0+128)+36),w
  5163  01F2                     u6445:	
  5164  01F2  1D03               	skipz
  5165  01F3  0008               	return
  5166                           
  5167                           ;PIR_B1.c: 142: _PIR.CloseTimeMinutes = 0;
  5168  01F4  01C4               	clrf	(__PIR^(0+128)+36)
  5169  01F5  01C5               	clrf	((__PIR+1)^(0+128)+36)
  5170                           
  5171                           ;PIR_B1.c: 143: _PIR.Status = 0;
  5172  01F6  1320               	bcf	__PIR^(0+128),6
  5173                           
  5174                           ;PIR_B1.c: 146: if (getLights_Status(1) == 1) {
  5175  01F7  3001               	movlw	1
  5176  01F8  158A  2449  118A   	fcall	_getLights_Status
  5177  01FB  3A01               	xorlw	1
  5178  01FC  1D03               	skipz
  5179  01FD  0008               	return
  5180                           
  5181                           ;PIR_B1.c: 147: setLights_Trigger(1, 0);
  5182  01FE  1283               	bcf	3,5	;RP0=0, select bank0
  5183  01FF  1303               	bcf	3,6	;RP1=0, select bank0
  5184  0200  01DA               	clrf	setLights_Trigger@command
  5185  0201  3001               	movlw	1
  5186  0202  158A  2524         	fcall	_setLights_Trigger
  5187                           
  5188                           ;PIR_B1.c: 148: }
  5189                           ;PIR_B1.c: 151: }
  5190                           ;PIR_B1.c: 152: }
  5191                           ;PIR_B1.c: 153: }
  5192                           ;PIR_B1.c: 154: } else {
  5193  0204  0008               	return
  5194  0205                     l861:	
  5195                           
  5196                           ;PIR_B1.c: 155: if (myMain.PowerON == 1) {
  5197  0205  1283               	bcf	3,5	;RP0=0, select bank0
  5198  0206  1303               	bcf	3,6	;RP1=0, select bank0
  5199  0207  1C20               	btfss	_myMain,0
  5200  0208  0008               	return
  5201                           
  5202                           ;PIR_B1.c: 156: _PIR.Enable = 1;
  5203  0209  1683               	bsf	3,5	;RP0=1, select bank1
  5204  020A  1303               	bcf	3,6	;RP1=0, select bank1
  5205  020B  1420               	bsf	__PIR^(0+128),0
  5206  020C  0008               	return
  5207  020D                     __end_of_PIR_Main:	
  5208                           
  5209                           	psect	text23
  5210  0E2F                     __ptext23:	
  5211 ;; *************** function _setMain_Exception *****************
  5212 ;; Defined at:
  5213 ;;		line 276 in file "../src/Main_B1.c"
  5214 ;; Parameters:    Size  Location     Type
  5215 ;;  command         1    wreg     unsigned char 
  5216 ;; Auto vars:     Size  Location     Type
  5217 ;;  command         1    9[BANK0 ] unsigned char 
  5218 ;;  status          1    6[BANK0 ] unsigned char 
  5219 ;;  buz             1    5[BANK0 ] unsigned char 
  5220 ;; Return value:  Size  Location     Type
  5221 ;;		None               void
  5222 ;; Registers used:
  5223 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5224 ;; Tracked objects:
  5225 ;;		On entry : 0/0
  5226 ;;		On exit  : 0/0
  5227 ;;		Unchanged: 0/0
  5228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5229 ;;      Params:         0       0       0       0
  5230 ;;      Locals:         0       5       0       0
  5231 ;;      Temps:          0       2       0       0
  5232 ;;      Totals:         0       7       0       0
  5233 ;;Total ram usage:        7 bytes
  5234 ;; Hardware stack levels used:    1
  5235 ;; Hardware stack levels required when called:    4
  5236 ;; This function calls:
  5237 ;;		_getAll_Lights_Line
  5238 ;;		_setLED
  5239 ;;		_setLights_Trigger
  5240 ;; This function is called by:
  5241 ;;		_PIR_Main
  5242 ;; This function uses a non-reentrant model
  5243 ;;
  5244                           
  5245                           
  5246                           ;psect for function _setMain_Exception
  5247  0E2F                     _setMain_Exception:	
  5248                           
  5249                           ;incstack = 0
  5250                           ; Regs used in _setMain_Exception: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5251                           ;setMain_Exception@command stored from wreg
  5252  0E2F  1283               	bcf	3,5	;RP0=0, select bank0
  5253  0E30  1303               	bcf	3,6	;RP1=0, select bank0
  5254  0E31  00E3               	movwf	setMain_Exception@command
  5255                           
  5256                           ;Main_B1.c: 277: char status = 0, buz = 0;
  5257  0E32  01E0               	clrf	setMain_Exception@status
  5258  0E33  01DF               	clrf	setMain_Exception@buz
  5259                           
  5260                           ;Main_B1.c: 279: status = command == 3 ? getAll_Lights_Line() : 255;
  5261  0E34  0863               	movf	setMain_Exception@command,w
  5262  0E35  3A03               	xorlw	3
  5263  0E36  1903               	skipnz
  5264  0E37  2E3C               	goto	l4391
  5265  0E38  30FF               	movlw	255
  5266  0E39  00E1               	movwf	_setMain_Exception$2453
  5267  0E3A  3000               	movlw	0
  5268  0E3B  2E46               	goto	L16
  5269  0E3C                     l4391:	
  5270  0E3C  158A  246B  158A   	fcall	_getAll_Lights_Line
  5271  0E3F  1283               	bcf	3,5	;RP0=0, select bank0
  5272  0E40  1303               	bcf	3,6	;RP1=0, select bank0
  5273  0E41  00DD               	movwf	??_setMain_Exception
  5274  0E42  01DE               	clrf	??_setMain_Exception+1
  5275  0E43  085D               	movf	??_setMain_Exception,w
  5276  0E44  00E1               	movwf	_setMain_Exception$2453
  5277  0E45  085E               	movf	??_setMain_Exception+1,w
  5278  0E46                     L16:	
  5279  0E46  00E2               	movwf	_setMain_Exception$2453+1
  5280  0E47  0861               	movf	_setMain_Exception$2453,w
  5281  0E48  00DD               	movwf	??_setMain_Exception
  5282  0E49  085D               	movf	??_setMain_Exception,w
  5283  0E4A  00E0               	movwf	setMain_Exception@status
  5284                           
  5285                           ;Main_B1.c: 281: if (command == 0) {
  5286  0E4B  08E3               	movf	setMain_Exception@command,f
  5287  0E4C  1D03               	skipz
  5288  0E4D  2E50               	goto	l4399
  5289                           
  5290                           ;Main_B1.c: 282: setLED(command, 110);
  5291  0E4E  306E               	movlw	110
  5292  0E4F  2E53               	goto	L17
  5293  0E50                     l4399:	
  5294                           ;Main_B1.c: 283: } else {
  5295                           
  5296                           
  5297                           ;Main_B1.c: 284: setLED(command, 111);
  5298  0E50  306F               	movlw	111
  5299  0E51  1283               	bcf	3,5	;RP0=0, select bank0
  5300  0E52  1303               	bcf	3,6	;RP1=0, select bank0
  5301  0E53                     L17:	
  5302  0E53  00DD               	movwf	??_setMain_Exception
  5303  0E54  085D               	movf	??_setMain_Exception,w
  5304  0E55  00DA               	movwf	setLED@command
  5305  0E56  0863               	movf	setMain_Exception@command,w
  5306  0E57  118A  2612  158A   	fcall	_setLED
  5307                           
  5308                           ;Main_B1.c: 285: }
  5309                           ;Main_B1.c: 287: if (command != 0) {
  5310  0E5A  1283               	bcf	3,5	;RP0=0, select bank0
  5311  0E5B  1303               	bcf	3,6	;RP1=0, select bank0
  5312  0E5C  0863               	movf	setMain_Exception@command,w
  5313  0E5D  1903               	btfsc	3,2
  5314  0E5E  0008               	return
  5315                           
  5316                           ;Main_B1.c: 288: setLights_Trigger(1, 0);
  5317  0E5F  01DA               	clrf	setLights_Trigger@command
  5318  0E60  3001               	movlw	1
  5319  0E61  158A  2524         	fcall	_setLights_Trigger
  5320  0E63  1283               	bcf	3,5	;RP0=0, select bank0
  5321  0E64  1303               	bcf	3,6	;RP1=0, select bank0
  5322  0E65  0008               	return
  5323  0E66                     __end_of_setMain_Exception:	
  5324                           
  5325                           	psect	text24
  5326  0D24                     __ptext24:	
  5327 ;; *************** function _setLights_Trigger *****************
  5328 ;; Defined at:
  5329 ;;		line 209 in file "../src/TriacRelay_B1.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;  lights          1    wreg     unsigned char 
  5332 ;;  command         1    0[BANK0 ] unsigned char 
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;  lights          1    2[BANK0 ] unsigned char 
  5335 ;; Return value:  Size  Location     Type
  5336 ;;		None               void
  5337 ;; Registers used:
  5338 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5344 ;;      Params:         0       1       0       0
  5345 ;;      Locals:         0       1       0       0
  5346 ;;      Temps:          0       1       0       0
  5347 ;;      Totals:         0       3       0       0
  5348 ;;Total ram usage:        3 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; Hardware stack levels required when called:    3
  5351 ;; This function calls:
  5352 ;;		_LightsPointSelect
  5353 ;; This function is called by:
  5354 ;;		_setMain_Exception
  5355 ;;		_PIR_Main
  5356 ;; This function uses a non-reentrant model
  5357 ;;
  5358                           
  5359                           
  5360                           ;psect for function _setLights_Trigger
  5361  0D24                     _setLights_Trigger:	
  5362                           
  5363                           ;incstack = 0
  5364                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5365                           ;setLights_Trigger@lights stored from wreg
  5366  0D24  1283               	bcf	3,5	;RP0=0, select bank0
  5367  0D25  1303               	bcf	3,6	;RP1=0, select bank0
  5368  0D26  00DC               	movwf	setLights_Trigger@lights
  5369                           
  5370                           ;TriacRelay_B1.c: 210: LightsPointSelect(lights);
  5371  0D27  085C               	movf	setLights_Trigger@lights,w
  5372  0D28  158A  23BA         	fcall	_LightsPointSelect
  5373                           
  5374                           ;TriacRelay_B1.c: 211: Lights->Trigger = 1;
  5375  0D2A  1283               	bcf	3,5	;RP0=0, select bank0
  5376  0D2B  1303               	bcf	3,6	;RP1=0, select bank0
  5377  0D2C  0839               	movf	_Lights,w
  5378  0D2D  0084               	movwf	4
  5379  0D2E  1383               	bcf	3,7	;select IRP bank0
  5380  0D2F  1580               	bsf	0,3
  5381                           
  5382                           ;TriacRelay_B1.c: 212: Lights->Switch = command == 1 ? 1 : 0;
  5383  0D30  085A               	movf	setLights_Trigger@command,w
  5384  0D31  3A01               	xorlw	1
  5385  0D32  3000               	movlw	0
  5386  0D33  1903               	skipnz
  5387  0D34  3001               	movlw	1
  5388  0D35  00DB               	movwf	??_setLights_Trigger
  5389  0D36  0839               	movf	_Lights,w
  5390  0D37  0084               	movwf	4
  5391  0D38  0EDB               	swapf	??_setLights_Trigger,f
  5392  0D39  0800               	movf	0,w
  5393  0D3A  065B               	xorwf	??_setLights_Trigger,w
  5394  0D3B  39EF               	andlw	-17
  5395  0D3C  065B               	xorwf	??_setLights_Trigger,w
  5396  0D3D  0080               	movwf	0
  5397  0D3E  0008               	return
  5398  0D3F                     __end_of_setLights_Trigger:	
  5399                           
  5400                           	psect	text25
  5401  0C6B                     __ptext25:	
  5402 ;; *************** function _getAll_Lights_Line *****************
  5403 ;; Defined at:
  5404 ;;		line 231 in file "../src/TriacRelay_B1.c"
  5405 ;; Parameters:    Size  Location     Type
  5406 ;;		None
  5407 ;; Auto vars:     Size  Location     Type
  5408 ;;  line            1    0[BANK0 ] unsigned char 
  5409 ;; Return value:  Size  Location     Type
  5410 ;;                  1    wreg      unsigned char 
  5411 ;; Registers used:
  5412 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5413 ;; Tracked objects:
  5414 ;;		On entry : 0/0
  5415 ;;		On exit  : 0/0
  5416 ;;		Unchanged: 0/0
  5417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5418 ;;      Params:         0       0       0       0
  5419 ;;      Locals:         0       1       0       0
  5420 ;;      Temps:          0       0       0       0
  5421 ;;      Totals:         0       1       0       0
  5422 ;;Total ram usage:        1 bytes
  5423 ;; Hardware stack levels used:    1
  5424 ;; Hardware stack levels required when called:    3
  5425 ;; This function calls:
  5426 ;;		_LightsPointSelect
  5427 ;; This function is called by:
  5428 ;;		_setMain_Exception
  5429 ;; This function uses a non-reentrant model
  5430 ;;
  5431                           
  5432                           
  5433                           ;psect for function _getAll_Lights_Line
  5434  0C6B                     _getAll_Lights_Line:	
  5435                           
  5436                           ;TriacRelay_B1.c: 232: char line = 0;
  5437                           
  5438                           ;incstack = 0
  5439                           ; Regs used in _getAll_Lights_Line: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5440  0C6B  1283               	bcf	3,5	;RP0=0, select bank0
  5441  0C6C  1303               	bcf	3,6	;RP1=0, select bank0
  5442  0C6D  01DA               	clrf	getAll_Lights_Line@line
  5443                           
  5444                           ;TriacRelay_B1.c: 234: LightsPointSelect(1);
  5445  0C6E  3001               	movlw	1
  5446  0C6F  158A  23BA         	fcall	_LightsPointSelect
  5447                           
  5448                           ;TriacRelay_B1.c: 235: line = Lights->Line == 1 ? 1 : 0;
  5449  0C71  1283               	bcf	3,5	;RP0=0, select bank0
  5450  0C72  1303               	bcf	3,6	;RP1=0, select bank0
  5451  0C73  0A39               	incf	_Lights,w
  5452  0C74  0084               	movwf	4
  5453  0C75  3000               	movlw	0
  5454  0C76  1383               	bcf	3,7	;select IRP bank0
  5455  0C77  1800               	btfsc	0,0
  5456  0C78  3001               	movlw	1
  5457  0C79  00DA               	movwf	getAll_Lights_Line@line
  5458                           
  5459                           ;TriacRelay_B1.c: 245: return line;
  5460  0C7A  085A               	movf	getAll_Lights_Line@line,w
  5461  0C7B  0008               	return
  5462  0C7C                     __end_of_getAll_Lights_Line:	
  5463                           
  5464                           	psect	text26
  5465  0C8E                     __ptext26:	
  5466 ;; *************** function _PIR_Initialization *****************
  5467 ;; Defined at:
  5468 ;;		line 7 in file "../src/PIR_B1.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;		None
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;		None
  5473 ;; Return value:  Size  Location     Type
  5474 ;;		None               void
  5475 ;; Registers used:
  5476 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5482 ;;      Params:         0       0       0       0
  5483 ;;      Locals:         0       0       0       0
  5484 ;;      Temps:          0       1       0       0
  5485 ;;      Totals:         0       1       0       0
  5486 ;;Total ram usage:        1 bytes
  5487 ;; Hardware stack levels used:    1
  5488 ;; Hardware stack levels required when called:    4
  5489 ;; This function calls:
  5490 ;;		_setLED
  5491 ;; This function is called by:
  5492 ;;		_main
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           
  5497                           ;psect for function _PIR_Initialization
  5498  0C8E                     _PIR_Initialization:	
  5499                           
  5500                           ;PIR_B1.c: 8: setLED(1, 1);
  5501                           
  5502                           ;incstack = 0
  5503                           ; Regs used in _PIR_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5504  0C8E  1283               	bcf	3,5	;RP0=0, select bank0
  5505  0C8F  1303               	bcf	3,6	;RP1=0, select bank0
  5506  0C90  01DA               	clrf	setLED@command
  5507  0C91  0ADA               	incf	setLED@command,f
  5508  0C92  3001               	movlw	1
  5509  0C93  118A  2612         	fcall	_setLED
  5510                           
  5511                           ;PIR_B1.c: 9: _PIR.RangeValue = 15;
  5512  0C95  300F               	movlw	15
  5513  0C96  1283               	bcf	3,5	;RP0=0, select bank0
  5514  0C97  1303               	bcf	3,6	;RP1=0, select bank0
  5515  0C98  00DC               	movwf	??_PIR_Initialization
  5516  0C99  085C               	movf	??_PIR_Initialization,w
  5517  0C9A  1683               	bsf	3,5	;RP0=1, select bank1
  5518  0C9B  1303               	bcf	3,6	;RP1=0, select bank1
  5519  0C9C  00CC               	movwf	(__PIR^(0+128)+44)
  5520                           
  5521                           ;PIR_B1.c: 10: _PIR.CloseTimeValue = 5;
  5522  0C9D  3005               	movlw	5
  5523  0C9E  00C7               	movwf	(__PIR^(0+128)+39)
  5524  0C9F  3000               	movlw	0
  5525  0CA0  00C8               	movwf	(__PIR^(0+128)+40)
  5526  0CA1  0008               	return
  5527  0CA2                     __end_of_PIR_Initialization:	
  5528                           
  5529                           	psect	text27
  5530  0C0B                     __ptext27:	
  5531 ;; *************** function _Mcu_Initialization *****************
  5532 ;; Defined at:
  5533 ;;		line 30 in file "../src/MCU_B1.c"
  5534 ;; Parameters:    Size  Location     Type
  5535 ;;		None
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;		None
  5538 ;; Return value:  Size  Location     Type
  5539 ;;		None               void
  5540 ;; Registers used:
  5541 ;;		wreg, status,2, status,0, pclath, cstack
  5542 ;; Tracked objects:
  5543 ;;		On entry : 0/0
  5544 ;;		On exit  : 0/0
  5545 ;;		Unchanged: 0/0
  5546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5547 ;;      Params:         0       0       0       0
  5548 ;;      Locals:         0       0       0       0
  5549 ;;      Temps:          0       0       0       0
  5550 ;;      Totals:         0       0       0       0
  5551 ;;Total ram usage:        0 bytes
  5552 ;; Hardware stack levels used:    1
  5553 ;; Hardware stack levels required when called:    3
  5554 ;; This function calls:
  5555 ;;		_ADC_Set
  5556 ;;		_Fosc_Set
  5557 ;;		_IO_Set
  5558 ;;		_TMR1_Set
  5559 ;;		_WDT_Set
  5560 ;; This function is called by:
  5561 ;;		_main
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           
  5566                           ;psect for function _Mcu_Initialization
  5567  0C0B                     _Mcu_Initialization:	
  5568                           
  5569                           ;MCU_B1.c: 32: Fosc_Set();
  5570                           
  5571                           ;incstack = 0
  5572                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5573  0C0B  158A  2364  158A   	fcall	_Fosc_Set
  5574                           
  5575                           ;MCU_B1.c: 34: IO_Set();
  5576  0C0E  158A  24DF  158A   	fcall	_IO_Set
  5577                           
  5578                           ;MCU_B1.c: 36: ;;
  5579                           ;MCU_B1.c: 38: TMR1_Set();
  5580  0C11  158A  23EE  158A   	fcall	_TMR1_Set
  5581                           
  5582                           ;MCU_B1.c: 40: ADC_Set();
  5583  0C14  158A  237C  158A   	fcall	_ADC_Set
  5584                           
  5585                           ;MCU_B1.c: 42: ;;
  5586                           ;MCU_B1.c: 44: ;;
  5587                           ;MCU_B1.c: 46: ;;
  5588                           ;MCU_B1.c: 48: ;;
  5589                           ;MCU_B1.c: 50: ;;
  5590                           ;MCU_B1.c: 52: WDT_Set();
  5591  0C17  158A  23C6         	fcall	_WDT_Set
  5592  0C19  0008               	return
  5593  0C1A                     __end_of_Mcu_Initialization:	
  5594                           
  5595                           	psect	text28
  5596  0BC6                     __ptext28:	
  5597 ;; *************** function _WDT_Set *****************
  5598 ;; Defined at:
  5599 ;;		line 1019 in file "../src/MCU_B1.c"
  5600 ;; Parameters:    Size  Location     Type
  5601 ;;		None
  5602 ;; Auto vars:     Size  Location     Type
  5603 ;;		None
  5604 ;; Return value:  Size  Location     Type
  5605 ;;		None               void
  5606 ;; Registers used:
  5607 ;;		wreg
  5608 ;; Tracked objects:
  5609 ;;		On entry : 0/0
  5610 ;;		On exit  : 0/0
  5611 ;;		Unchanged: 0/0
  5612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5613 ;;      Params:         0       0       0       0
  5614 ;;      Locals:         0       0       0       0
  5615 ;;      Temps:          1       0       0       0
  5616 ;;      Totals:         1       0       0       0
  5617 ;;Total ram usage:        1 bytes
  5618 ;; Hardware stack levels used:    1
  5619 ;; Hardware stack levels required when called:    2
  5620 ;; This function calls:
  5621 ;;		Nothing
  5622 ;; This function is called by:
  5623 ;;		_Mcu_Initialization
  5624 ;; This function uses a non-reentrant model
  5625 ;;
  5626                           
  5627                           
  5628                           ;psect for function _WDT_Set
  5629  0BC6                     _WDT_Set:	
  5630                           
  5631                           ;MCU_B1.c: 1021: PSA = 1;
  5632                           
  5633                           ;incstack = 0
  5634                           ; Regs used in _WDT_Set: [wreg]
  5635  0BC6  1683               	bsf	3,5	;RP0=1, select bank1
  5636  0BC7  1303               	bcf	3,6	;RP1=0, select bank1
  5637  0BC8  1581               	bsf	1,3	;volatile
  5638                           
  5639                           ;MCU_B1.c: 1022: PS0 = 1;
  5640  0BC9  1401               	bsf	1,0	;volatile
  5641                           
  5642                           ;MCU_B1.c: 1023: PS1 = 1;
  5643  0BCA  1481               	bsf	1,1	;volatile
  5644                           
  5645                           ;MCU_B1.c: 1024: PS2 = 1;
  5646  0BCB  1501               	bsf	1,2	;volatile
  5647                           
  5648                           ;MCU_B1.c: 1028: WDT.Enable = 1;
  5649  0BCC  1476               	bsf	_WDT,0
  5650                           
  5651                           ;MCU_B1.c: 1029: WDT.Timer = 10;
  5652  0BCD  300A               	movlw	10
  5653  0BCE  00F4               	movwf	??_WDT_Set
  5654  0BCF  0874               	movf	??_WDT_Set,w
  5655  0BD0  00F7               	movwf	_WDT+1
  5656  0BD1  0008               	return
  5657  0BD2                     __end_of_WDT_Set:	
  5658                           
  5659                           	psect	text29
  5660  0BEE                     __ptext29:	
  5661 ;; *************** function _TMR1_Set *****************
  5662 ;; Defined at:
  5663 ;;		line 199 in file "../src/MCU_B1.c"
  5664 ;; Parameters:    Size  Location     Type
  5665 ;;		None
  5666 ;; Auto vars:     Size  Location     Type
  5667 ;;		None
  5668 ;; Return value:  Size  Location     Type
  5669 ;;		None               void
  5670 ;; Registers used:
  5671 ;;		wreg
  5672 ;; Tracked objects:
  5673 ;;		On entry : 0/0
  5674 ;;		On exit  : 0/0
  5675 ;;		Unchanged: 0/0
  5676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5677 ;;      Params:         0       0       0       0
  5678 ;;      Locals:         0       0       0       0
  5679 ;;      Temps:          0       0       0       0
  5680 ;;      Totals:         0       0       0       0
  5681 ;;Total ram usage:        0 bytes
  5682 ;; Hardware stack levels used:    1
  5683 ;; Hardware stack levels required when called:    2
  5684 ;; This function calls:
  5685 ;;		Nothing
  5686 ;; This function is called by:
  5687 ;;		_Mcu_Initialization
  5688 ;; This function uses a non-reentrant model
  5689 ;;
  5690                           
  5691                           
  5692                           ;psect for function _TMR1_Set
  5693  0BEE                     _TMR1_Set:	
  5694                           
  5695                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  5696                           
  5697                           ;incstack = 0
  5698                           ; Regs used in _TMR1_Set: [wreg]
  5699  0BEE  3041               	movlw	65
  5700  0BEF  1283               	bcf	3,5	;RP0=0, select bank0
  5701  0BF0  1303               	bcf	3,6	;RP1=0, select bank0
  5702  0BF1  0090               	movwf	16	;volatile
  5703                           
  5704                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  5705  0BF2  30FA               	movlw	250
  5706  0BF3  008F               	movwf	15	;volatile
  5707                           
  5708                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  5709  0BF4  3038               	movlw	56
  5710  0BF5  008E               	movwf	14	;volatile
  5711                           
  5712                           ;MCU_B1.c: 203: TMR1IE = 1;
  5713  0BF6  1683               	bsf	3,5	;RP0=1, select bank1
  5714  0BF7  1303               	bcf	3,6	;RP1=0, select bank1
  5715  0BF8  140C               	bsf	12,0	;volatile
  5716                           
  5717                           ;MCU_B1.c: 204: PEIE = 1;
  5718  0BF9  170B               	bsf	11,6	;volatile
  5719                           
  5720                           ;MCU_B1.c: 205: GIE = 1;
  5721  0BFA  178B               	bsf	11,7	;volatile
  5722  0BFB  0008               	return
  5723  0BFC                     __end_of_TMR1_Set:	
  5724                           
  5725                           	psect	text30
  5726  0CDF                     __ptext30:	
  5727 ;; *************** function _IO_Set *****************
  5728 ;; Defined at:
  5729 ;;		line 60 in file "../src/MCU_B1.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;		None
  5732 ;; Auto vars:     Size  Location     Type
  5733 ;;		None
  5734 ;; Return value:  Size  Location     Type
  5735 ;;		None               void
  5736 ;; Registers used:
  5737 ;;		wreg, status,2
  5738 ;; Tracked objects:
  5739 ;;		On entry : 0/0
  5740 ;;		On exit  : 0/0
  5741 ;;		Unchanged: 0/0
  5742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5743 ;;      Params:         0       0       0       0
  5744 ;;      Locals:         0       0       0       0
  5745 ;;      Temps:          0       0       0       0
  5746 ;;      Totals:         0       0       0       0
  5747 ;;Total ram usage:        0 bytes
  5748 ;; Hardware stack levels used:    1
  5749 ;; Hardware stack levels required when called:    2
  5750 ;; This function calls:
  5751 ;;		Nothing
  5752 ;; This function is called by:
  5753 ;;		_Mcu_Initialization
  5754 ;; This function uses a non-reentrant model
  5755 ;;
  5756                           
  5757                           
  5758                           ;psect for function _IO_Set
  5759  0CDF                     _IO_Set:	
  5760                           
  5761                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  5762                           
  5763                           ;incstack = 0
  5764                           ; Regs used in _IO_Set: [wreg+status,2]
  5765  0CDF  302F               	movlw	47
  5766  0CE0  1683               	bsf	3,5	;RP0=1, select bank1
  5767  0CE1  1303               	bcf	3,6	;RP1=0, select bank1
  5768  0CE2  0085               	movwf	5	;volatile
  5769                           
  5770                           ;MCU_B1.c: 63: TRISB = 0b00000001;;
  5771  0CE3  3001               	movlw	1
  5772  0CE4  0086               	movwf	6	;volatile
  5773                           
  5774                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  5775  0CE5  0187               	clrf	7	;volatile
  5776                           
  5777                           ;MCU_B1.c: 65: ANSELA = 0b00000111;;
  5778  0CE6  3007               	movlw	7
  5779  0CE7  1683               	bsf	3,5	;RP0=1, select bank3
  5780  0CE8  1703               	bsf	3,6	;RP1=1, select bank3
  5781  0CE9  0085               	movwf	5	;volatile
  5782                           
  5783                           ;MCU_B1.c: 66: ANSELB = 0b00000001;;
  5784  0CEA  3001               	movlw	1
  5785  0CEB  0086               	movwf	6	;volatile
  5786                           
  5787                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  5788  0CEC  30AF               	movlw	175
  5789  0CED  1283               	bcf	3,5	;RP0=0, select bank0
  5790  0CEE  1303               	bcf	3,6	;RP1=0, select bank0
  5791  0CEF  0085               	movwf	5	;volatile
  5792                           
  5793                           ;MCU_B1.c: 68: PORTB = 0b00000001;;
  5794  0CF0  3001               	movlw	1
  5795  0CF1  0086               	movwf	6	;volatile
  5796                           
  5797                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  5798  0CF2  0187               	clrf	7	;volatile
  5799  0CF3  0008               	return
  5800  0CF4                     __end_of_IO_Set:	
  5801                           
  5802                           	psect	text31
  5803  0B64                     __ptext31:	
  5804 ;; *************** function _Fosc_Set *****************
  5805 ;; Defined at:
  5806 ;;		line 56 in file "../src/MCU_B1.c"
  5807 ;; Parameters:    Size  Location     Type
  5808 ;;		None
  5809 ;; Auto vars:     Size  Location     Type
  5810 ;;		None
  5811 ;; Return value:  Size  Location     Type
  5812 ;;		None               void
  5813 ;; Registers used:
  5814 ;;		wreg
  5815 ;; Tracked objects:
  5816 ;;		On entry : 0/0
  5817 ;;		On exit  : 0/0
  5818 ;;		Unchanged: 0/0
  5819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5820 ;;      Params:         0       0       0       0
  5821 ;;      Locals:         0       0       0       0
  5822 ;;      Temps:          0       0       0       0
  5823 ;;      Totals:         0       0       0       0
  5824 ;;Total ram usage:        0 bytes
  5825 ;; Hardware stack levels used:    1
  5826 ;; Hardware stack levels required when called:    2
  5827 ;; This function calls:
  5828 ;;		Nothing
  5829 ;; This function is called by:
  5830 ;;		_Mcu_Initialization
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           
  5835                           ;psect for function _Fosc_Set
  5836  0B64                     _Fosc_Set:	
  5837                           
  5838                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  5839                           
  5840                           ;incstack = 0
  5841                           ; Regs used in _Fosc_Set: [wreg]
  5842  0B64  303C               	movlw	60
  5843  0B65  1683               	bsf	3,5	;RP0=1, select bank1
  5844  0B66  1303               	bcf	3,6	;RP1=0, select bank1
  5845  0B67  0090               	movwf	16	;volatile
  5846  0B68  0008               	return
  5847  0B69                     __end_of_Fosc_Set:	
  5848                           
  5849                           	psect	text32
  5850  0B7C                     __ptext32:	
  5851 ;; *************** function _ADC_Set *****************
  5852 ;; Defined at:
  5853 ;;		line 420 in file "../src/MCU_B1.c"
  5854 ;; Parameters:    Size  Location     Type
  5855 ;;		None
  5856 ;; Auto vars:     Size  Location     Type
  5857 ;;		None
  5858 ;; Return value:  Size  Location     Type
  5859 ;;		None               void
  5860 ;; Registers used:
  5861 ;;		wreg
  5862 ;; Tracked objects:
  5863 ;;		On entry : 0/0
  5864 ;;		On exit  : 0/0
  5865 ;;		Unchanged: 0/0
  5866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5867 ;;      Params:         0       0       0       0
  5868 ;;      Locals:         0       0       0       0
  5869 ;;      Temps:          0       0       0       0
  5870 ;;      Totals:         0       0       0       0
  5871 ;;Total ram usage:        0 bytes
  5872 ;; Hardware stack levels used:    1
  5873 ;; Hardware stack levels required when called:    2
  5874 ;; This function calls:
  5875 ;;		Nothing
  5876 ;; This function is called by:
  5877 ;;		_Mcu_Initialization
  5878 ;; This function uses a non-reentrant model
  5879 ;;
  5880                           
  5881                           
  5882                           ;psect for function _ADC_Set
  5883  0B7C                     _ADC_Set:	
  5884                           
  5885                           ;MCU_B1.c: 421: ADCON1 = 0x73;
  5886                           
  5887                           ;incstack = 0
  5888                           ; Regs used in _ADC_Set: [wreg]
  5889  0B7C  3073               	movlw	115
  5890  0B7D  1683               	bsf	3,5	;RP0=1, select bank1
  5891  0B7E  1303               	bcf	3,6	;RP1=0, select bank1
  5892  0B7F  009F               	movwf	31	;volatile
  5893                           
  5894                           ;MCU_B1.c: 422: FVRCON = 0xc1;
  5895  0B80  30C1               	movlw	193
  5896  0B81  009D               	movwf	29	;volatile
  5897  0B82  0008               	return
  5898  0B83                     __end_of_ADC_Set:	
  5899                           
  5900                           	psect	text33
  5901  020D                     __ptext33:	
  5902 ;; *************** function _Load_Main *****************
  5903 ;; Defined at:
  5904 ;;		line 39 in file "../src/OverLoad_B1.c"
  5905 ;; Parameters:    Size  Location     Type
  5906 ;;		None
  5907 ;; Auto vars:     Size  Location     Type
  5908 ;;  i               1   14[BANK0 ] unsigned char 
  5909 ;;  error           1   13[BANK0 ] unsigned char 
  5910 ;;  adjgo           1   11[BANK0 ] unsigned char 
  5911 ;;  j               1   10[BANK0 ] unsigned char 
  5912 ;; Return value:  Size  Location     Type
  5913 ;;		None               void
  5914 ;; Registers used:
  5915 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5916 ;; Tracked objects:
  5917 ;;		On entry : 0/0
  5918 ;;		On exit  : 0/0
  5919 ;;		Unchanged: 0/0
  5920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5921 ;;      Params:         0       0       0       0
  5922 ;;      Locals:         0       5       0       0
  5923 ;;      Temps:          0       2       0       0
  5924 ;;      Totals:         0       7       0       0
  5925 ;;Total ram usage:        7 bytes
  5926 ;; Hardware stack levels used:    1
  5927 ;; Hardware stack levels required when called:    5
  5928 ;; This function calls:
  5929 ;;		_getMain_All_Error_Status
  5930 ;;		_getMain_LightsStatus
  5931 ;;		_getMain_Lights_Count
  5932 ;;		_getMain_LoadOK
  5933 ;;		_setLoad_AH_AL_Restore
  5934 ;; This function is called by:
  5935 ;;		_main
  5936 ;; This function uses a non-reentrant model
  5937 ;;
  5938                           
  5939                           
  5940                           ;psect for function _Load_Main
  5941  020D                     _Load_Main:	
  5942                           
  5943                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
  5944                           
  5945                           ;incstack = 0
  5946                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5947  020D  1283               	bcf	3,5	;RP0=0, select bank0
  5948  020E  1303               	bcf	3,6	;RP1=0, select bank0
  5949  020F  01E8               	clrf	Load_Main@i
  5950  0210  01E4               	clrf	Load_Main@j
  5951  0211  3000               	movlw	0
  5952  0212  158A  2749  118A   	fcall	_getMain_All_Error_Status
  5953  0215  1283               	bcf	3,5	;RP0=0, select bank0
  5954  0216  1303               	bcf	3,6	;RP1=0, select bank0
  5955  0217  00E2               	movwf	??_Load_Main
  5956  0218  0862               	movf	??_Load_Main,w
  5957  0219  00E7               	movwf	Load_Main@error
  5958  021A  01E5               	clrf	Load_Main@adjgo
  5959                           
  5960                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
  5961  021B  1683               	bsf	3,5	;RP0=1, select bank1
  5962  021C  1303               	bcf	3,6	;RP1=0, select bank1
  5963  021D  1C4F               	btfss	_Load^(0+128),0
  5964  021E  2B6A               	goto	l679
  5965                           
  5966                           ;OverLoad_B1.c: 46: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
  5967  021F  1283               	bcf	3,5	;RP0=0, select bank0
  5968  0220  1303               	bcf	3,6	;RP1=0, select bank0
  5969  0221  01E6               	clrf	_Load_Main$2768
  5970  0222  158A  25CB  118A   	fcall	_getMain_LightsStatus
  5971  0225  3A01               	xorlw	1
  5972  0226  1D03               	skipz
  5973  0227  2A32               	goto	l4801
  5974  0228  1283               	bcf	3,5	;RP0=0, select bank0
  5975  0229  1303               	bcf	3,6	;RP1=0, select bank0
  5976  022A  08E7               	movf	Load_Main@error,f
  5977  022B  1D03               	skipz
  5978  022C  2A32               	goto	l4801
  5979  022D  08E5               	movf	Load_Main@adjgo,f
  5980  022E  1D03               	skipz
  5981  022F  2A32               	goto	l4801
  5982  0230  01E6               	clrf	_Load_Main$2768
  5983  0231  0AE6               	incf	_Load_Main$2768,f
  5984  0232                     l4801:	
  5985  0232  1283               	bcf	3,5	;RP0=0, select bank0
  5986  0233  1303               	bcf	3,6	;RP1=0, select bank0
  5987  0234  0866               	movf	_Load_Main$2768,w
  5988  0235  1683               	bsf	3,5	;RP0=1, select bank1
  5989  0236  1303               	bcf	3,6	;RP1=0, select bank1
  5990  0237  10CF               	bcf	_Load^(0+128),1
  5991  0238  1D03               	skipz
  5992  0239  14CF               	bsf	_Load^(0+128),1
  5993                           
  5994                           ;OverLoad_B1.c: 47: if (getMain_LoadOK() == 1 && Load.Run == 0) {
  5995  023A  158A  2439  118A   	fcall	_getMain_LoadOK
  5996  023D  3A01               	xorlw	1
  5997  023E  1D03               	skipz
  5998  023F  2A46               	goto	l682
  5999  0240  1683               	bsf	3,5	;RP0=1, select bank1
  6000  0241  1303               	bcf	3,6	;RP1=0, select bank1
  6001  0242  19CF               	btfsc	_Load^(0+128),3
  6002  0243  2A46               	goto	l682
  6003                           
  6004                           ;OverLoad_B1.c: 48: Load.Run = 1;
  6005  0244  15CF               	bsf	_Load^(0+128),3
  6006                           
  6007                           ;OverLoad_B1.c: 49: Load.OK = 0;
  6008  0245  13CF               	bcf	_Load^(0+128),7
  6009  0246                     l682:	
  6010                           
  6011                           ;OverLoad_B1.c: 50: }
  6012                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
  6013  0246  1683               	bsf	3,5	;RP0=1, select bank1
  6014  0247  1303               	bcf	3,6	;RP1=0, select bank1
  6015  0248  1CCF               	btfss	_Load^(0+128),1
  6016  0249  2B35               	goto	l683
  6017                           
  6018                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
  6019  024A  154F               	bsf	_Load^(0+128),2
  6020                           
  6021                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
  6022  024B  1E4F               	btfss	_Load^(0+128),4
  6023  024C  2B33               	goto	l684
  6024                           
  6025                           ;OverLoad_B1.c: 58: Load.Time++;
  6026  024D  3001               	movlw	1
  6027  024E  07D0               	addwf	(_Load^(0+128)+1),f
  6028  024F  1803               	skipnc
  6029  0250  0AD1               	incf	((_Load+1)^(0+128)+1),f
  6030  0251  3000               	movlw	0
  6031  0252  07D1               	addwf	((_Load+1)^(0+128)+1),f
  6032                           
  6033                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
  6034  0253  3000               	movlw	0
  6035  0254  0251               	subwf	((_Load+1)^(0+128)+1),w
  6036  0255  3005               	movlw	5
  6037  0256  1903               	skipnz
  6038  0257  0250               	subwf	(_Load^(0+128)+1),w
  6039  0258  1C03               	skipc
  6040  0259  0008               	return
  6041                           
  6042                           ;OverLoad_B1.c: 60: Load.Time = 0;
  6043  025A  01D0               	clrf	(_Load^(0+128)+1)
  6044  025B  01D1               	clrf	((_Load+1)^(0+128)+1)
  6045                           
  6046                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
  6047  025C  124F               	bcf	_Load^(0+128),4
  6048                           
  6049                           ;OverLoad_B1.c: 63: for (i = 0; i < 4; i++) {
  6050  025D  1283               	bcf	3,5	;RP0=0, select bank0
  6051  025E  1303               	bcf	3,6	;RP1=0, select bank0
  6052  025F  01E8               	clrf	Load_Main@i
  6053  0260  3004               	movlw	4
  6054  0261  0268               	subwf	Load_Main@i,w
  6055  0262  1803               	btfsc	3,0
  6056  0263  2A95               	goto	l4827
  6057  0264                     l4821:	
  6058                           
  6059                           ;OverLoad_B1.c: 64: Load.ADH += Load.AH[i];
  6060  0264  0868               	movf	Load_Main@i,w
  6061  0265  3ED9               	addlw	(_Load+10)& (0+255)
  6062  0266  0084               	movwf	4
  6063  0267  1383               	bcf	3,7	;select IRP bank1
  6064  0268  0800               	movf	0,w
  6065  0269  00E2               	movwf	??_Load_Main
  6066  026A  01E3               	clrf	??_Load_Main+1
  6067  026B  0862               	movf	??_Load_Main,w
  6068  026C  1683               	bsf	3,5	;RP0=1, select bank1
  6069  026D  1303               	bcf	3,6	;RP1=0, select bank1
  6070  026E  07D4               	addwf	(_Load^(0+128)+5),f
  6071  026F  1803               	skipnc
  6072  0270  0AD5               	incf	((_Load+1)^(0+128)+5),f
  6073  0271  1283               	bcf	3,5	;RP0=0, select bank0
  6074  0272  1303               	bcf	3,6	;RP1=0, select bank0
  6075  0273  0863               	movf	??_Load_Main+1,w
  6076  0274  1683               	bsf	3,5	;RP0=1, select bank1
  6077  0275  1303               	bcf	3,6	;RP1=0, select bank1
  6078  0276  07D5               	addwf	((_Load+1)^(0+128)+5),f
  6079                           
  6080                           ;OverLoad_B1.c: 65: Load.ADL += Load.AL[i];
  6081  0277  1283               	bcf	3,5	;RP0=0, select bank0
  6082  0278  1303               	bcf	3,6	;RP1=0, select bank0
  6083  0279  0868               	movf	Load_Main@i,w
  6084  027A  3EDE               	addlw	(_Load+15)& (0+255)
  6085  027B  0084               	movwf	4
  6086  027C  0800               	movf	0,w
  6087  027D  00E2               	movwf	??_Load_Main
  6088  027E  01E3               	clrf	??_Load_Main+1
  6089  027F  0862               	movf	??_Load_Main,w
  6090  0280  1683               	bsf	3,5	;RP0=1, select bank1
  6091  0281  1303               	bcf	3,6	;RP1=0, select bank1
  6092  0282  07D6               	addwf	(_Load^(0+128)+7),f
  6093  0283  1803               	skipnc
  6094  0284  0AD7               	incf	((_Load+1)^(0+128)+7),f
  6095  0285  1283               	bcf	3,5	;RP0=0, select bank0
  6096  0286  1303               	bcf	3,6	;RP1=0, select bank0
  6097  0287  0863               	movf	??_Load_Main+1,w
  6098  0288  1683               	bsf	3,5	;RP0=1, select bank1
  6099  0289  1303               	bcf	3,6	;RP1=0, select bank1
  6100  028A  07D7               	addwf	((_Load+1)^(0+128)+7),f
  6101  028B  3001               	movlw	1
  6102  028C  1283               	bcf	3,5	;RP0=0, select bank0
  6103  028D  1303               	bcf	3,6	;RP1=0, select bank0
  6104  028E  00E2               	movwf	??_Load_Main
  6105  028F  0862               	movf	??_Load_Main,w
  6106  0290  07E8               	addwf	Load_Main@i,f
  6107  0291  3004               	movlw	4
  6108  0292  0268               	subwf	Load_Main@i,w
  6109  0293  1C03               	skipc
  6110  0294  2A64               	goto	l4821
  6111  0295                     l4827:	
  6112                           
  6113                           ;OverLoad_B1.c: 66: }
  6114                           ;OverLoad_B1.c: 67: Load.ADH /= 4;
  6115  0295  3002               	movlw	2
  6116  0296  1683               	bsf	3,5	;RP0=1, select bank1
  6117  0297  1303               	bcf	3,6	;RP1=0, select bank1
  6118  0298                     u5975:	
  6119  0298  1003               	clrc
  6120  0299  0CD5               	rrf	((_Load+1)^(0+128)+5),f
  6121  029A  0CD4               	rrf	(_Load^(0+128)+5),f
  6122  029B  3EFF               	addlw	-1
  6123  029C  1D03               	skipz
  6124  029D  2A98               	goto	u5975
  6125                           
  6126                           ;OverLoad_B1.c: 68: Load.ADL /= 4;
  6127  029E  3002               	movlw	2
  6128  029F                     u5985:	
  6129  029F  1003               	clrc
  6130  02A0  0CD7               	rrf	((_Load+1)^(0+128)+7),f
  6131  02A1  0CD6               	rrf	(_Load^(0+128)+7),f
  6132  02A2  3EFF               	addlw	-1
  6133  02A3  1D03               	skipz
  6134  02A4  2A9F               	goto	u5985
  6135                           
  6136                           ;OverLoad_B1.c: 69: setLoad_AH_AL_Restore();
  6137  02A5  158A  24F4  118A   	fcall	_setLoad_AH_AL_Restore
  6138                           
  6139                           ;OverLoad_B1.c: 70: if (Load.ADH > Load.ADL) {
  6140  02A8  1683               	bsf	3,5	;RP0=1, select bank1
  6141  02A9  1303               	bcf	3,6	;RP1=0, select bank1
  6142  02AA  0855               	movf	((_Load+1)^(0+128)+5),w
  6143  02AB  0257               	subwf	((_Load+1)^(0+128)+7),w
  6144  02AC  1D03               	skipz
  6145  02AD  2AB0               	goto	u5995
  6146  02AE  0854               	movf	(_Load^(0+128)+5),w
  6147  02AF  0256               	subwf	(_Load^(0+128)+7),w
  6148  02B0                     u5995:	
  6149  02B0  1803               	skipnc
  6150  02B1  0008               	return
  6151                           
  6152                           ;OverLoad_B1.c: 71: Load.AD = Load.ADH - Load.ADL;
  6153  02B2  0356               	decf	(_Load^(0+128)+7),w
  6154  02B3  3AFF               	xorlw	255
  6155  02B4  0754               	addwf	(_Load^(0+128)+5),w
  6156  02B5  1283               	bcf	3,5	;RP0=0, select bank0
  6157  02B6  1303               	bcf	3,6	;RP1=0, select bank0
  6158  02B7  00E2               	movwf	??_Load_Main
  6159  02B8  0862               	movf	??_Load_Main,w
  6160  02B9  1683               	bsf	3,5	;RP0=1, select bank1
  6161  02BA  1303               	bcf	3,6	;RP1=0, select bank1
  6162  02BB  00E3               	movwf	(_Load^(0+128)+20)
  6163                           
  6164                           ;OverLoad_B1.c: 72: Load.ADH = 0;
  6165  02BC  01D4               	clrf	(_Load^(0+128)+5)
  6166  02BD  01D5               	clrf	((_Load+1)^(0+128)+5)
  6167                           
  6168                           ;OverLoad_B1.c: 73: Load.ADL = 0;
  6169  02BE  01D6               	clrf	(_Load^(0+128)+7)
  6170  02BF  01D7               	clrf	((_Load+1)^(0+128)+7)
  6171                           
  6172                           ;OverLoad_B1.c: 74: Load.LightsCount = getMain_Lights_Count();
  6173  02C0  158A  245A  118A   	fcall	_getMain_Lights_Count
  6174  02C3  1283               	bcf	3,5	;RP0=0, select bank0
  6175  02C4  1303               	bcf	3,6	;RP1=0, select bank0
  6176  02C5  00E2               	movwf	??_Load_Main
  6177  02C6  0862               	movf	??_Load_Main,w
  6178  02C7  1683               	bsf	3,5	;RP0=1, select bank1
  6179  02C8  1303               	bcf	3,6	;RP1=0, select bank1
  6180  02C9  00ED               	movwf	(_Load^(0+128)+30)
  6181                           
  6182                           ;OverLoad_B1.c: 76: if (Load.Run == 1) {
  6183  02CA  1DCF               	btfss	_Load^(0+128),3
  6184  02CB  2AF1               	goto	l689
  6185                           
  6186                           ;OverLoad_B1.c: 77: if (Load.Count < 2) {
  6187  02CC  3002               	movlw	2
  6188  02CD  026B               	subwf	(_Load^(0+128)+28),w
  6189  02CE  1803               	skipnc
  6190  02CF  2AF1               	goto	l689
  6191                           
  6192                           ;OverLoad_B1.c: 78: Load.Count++;
  6193  02D0  3001               	movlw	1
  6194  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  6195  02D2  1303               	bcf	3,6	;RP1=0, select bank0
  6196  02D3  00E2               	movwf	??_Load_Main
  6197  02D4  0862               	movf	??_Load_Main,w
  6198  02D5  1683               	bsf	3,5	;RP0=1, select bank1
  6199  02D6  1303               	bcf	3,6	;RP1=0, select bank1
  6200  02D7  07EB               	addwf	(_Load^(0+128)+28),f
  6201                           
  6202                           ;OverLoad_B1.c: 79: if (Load.Count == 1) {
  6203  02D8  086B               	movf	(_Load^(0+128)+28),w
  6204  02D9  3A01               	xorlw	1
  6205  02DA  1D03               	skipz
  6206  02DB  2ADE               	goto	l4851
  6207                           
  6208                           ;OverLoad_B1.c: 80: Load.JudgeValue = 80;
  6209  02DC  3050               	movlw	80
  6210  02DD  2AE7               	goto	L18
  6211  02DE                     l4851:	
  6212                           ;OverLoad_B1.c: 81: } else if (Load.Count == 2) {
  6213                           
  6214  02DE  086B               	movf	(_Load^(0+128)+28),w
  6215  02DF  3A02               	xorlw	2
  6216  02E0  1D03               	skipz
  6217  02E1  2AF1               	goto	l689
  6218                           
  6219                           ;OverLoad_B1.c: 82: if (Load.LightsCount == 1) {
  6220  02E2  086D               	movf	(_Load^(0+128)+30),w
  6221  02E3  3A01               	xorlw	1
  6222  02E4  1D03               	skipz
  6223  02E5  2AEA               	goto	l4857
  6224                           
  6225                           ;OverLoad_B1.c: 83: Load.JudgeValue = 15;
  6226  02E6  300F               	movlw	15
  6227  02E7                     L18:	
  6228  02E7  00E7               	movwf	(_Load^(0+128)+24)
  6229  02E8  3000               	movlw	0
  6230  02E9  2AF0               	goto	L19
  6231  02EA                     l4857:	
  6232                           ;OverLoad_B1.c: 84: } else {
  6233                           
  6234                           
  6235                           ;OverLoad_B1.c: 85: Load.JudgeValue = 15 + Load.TotalLoad;
  6236  02EA  0858               	movf	(_Load^(0+128)+9),w
  6237  02EB  3E0F               	addlw	15
  6238  02EC  00E7               	movwf	(_Load^(0+128)+24)
  6239  02ED  3000               	movlw	0
  6240  02EE  1803               	skipnc
  6241  02EF  3001               	movlw	1
  6242  02F0                     L19:	
  6243  02F0  00E8               	movwf	(_Load^(0+128)+25)
  6244  02F1                     l689:	
  6245                           
  6246                           ;OverLoad_B1.c: 86: }
  6247                           ;OverLoad_B1.c: 87: }
  6248                           ;OverLoad_B1.c: 88: }
  6249                           ;OverLoad_B1.c: 89: }
  6250                           ;OverLoad_B1.c: 91: if (Load.AD >= Load.JudgeValue) {
  6251  02F1  0863               	movf	(_Load^(0+128)+20),w
  6252  02F2  1283               	bcf	3,5	;RP0=0, select bank0
  6253  02F3  1303               	bcf	3,6	;RP1=0, select bank0
  6254  02F4  00E2               	movwf	??_Load_Main
  6255  02F5  01E3               	clrf	??_Load_Main+1
  6256  02F6  1683               	bsf	3,5	;RP0=1, select bank1
  6257  02F7  1303               	bcf	3,6	;RP1=0, select bank1
  6258  02F8  0868               	movf	((_Load+1)^(0+128)+24),w
  6259  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  6260  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  6261  02FB  0263               	subwf	??_Load_Main+1,w
  6262  02FC  1D03               	skipz
  6263  02FD  2B04               	goto	u6055
  6264  02FE  1683               	bsf	3,5	;RP0=1, select bank1
  6265  02FF  1303               	bcf	3,6	;RP1=0, select bank1
  6266  0300  0867               	movf	(_Load^(0+128)+24),w
  6267  0301  1283               	bcf	3,5	;RP0=0, select bank0
  6268  0302  1303               	bcf	3,6	;RP1=0, select bank0
  6269  0303  0262               	subwf	??_Load_Main,w
  6270  0304                     u6055:	
  6271  0304  1C03               	skipc
  6272  0305  2B13               	goto	l4867
  6273                           
  6274                           ;OverLoad_B1.c: 92: Load.ErrorCount++;
  6275  0306  3001               	movlw	1
  6276  0307  00E2               	movwf	??_Load_Main
  6277  0308  0862               	movf	??_Load_Main,w
  6278  0309  1683               	bsf	3,5	;RP0=1, select bank1
  6279  030A  1303               	bcf	3,6	;RP1=0, select bank1
  6280  030B  07EC               	addwf	(_Load^(0+128)+29),f
  6281                           
  6282                           ;OverLoad_B1.c: 93: if (Load.ErrorCount > 2) {
  6283  030C  3003               	movlw	3
  6284  030D  026C               	subwf	(_Load^(0+128)+29),w
  6285  030E  1C03               	skipc
  6286  030F  0008               	return
  6287                           
  6288                           ;OverLoad_B1.c: 94: Load.ErrorCount = 0;
  6289  0310  01EC               	clrf	(_Load^(0+128)+29)
  6290                           
  6291                           ;OverLoad_B1.c: 95: Load.ERROR = 1;
  6292  0311  16CF               	bsf	_Load^(0+128),5
  6293                           
  6294                           ;OverLoad_B1.c: 108: }
  6295                           ;OverLoad_B1.c: 109: } else {
  6296  0312  0008               	return
  6297  0313                     l4867:	
  6298                           
  6299                           ;OverLoad_B1.c: 110: Load.ErrorCount = 0;
  6300  0313  1683               	bsf	3,5	;RP0=1, select bank1
  6301  0314  1303               	bcf	3,6	;RP1=0, select bank1
  6302  0315  01EC               	clrf	(_Load^(0+128)+29)
  6303                           
  6304                           ;OverLoad_B1.c: 111: if (Load.Run == 1) {
  6305  0316  1DCF               	btfss	_Load^(0+128),3
  6306  0317  0008               	return
  6307                           
  6308                           ;OverLoad_B1.c: 112: if (Load.OK == 0) {
  6309  0318  1BCF               	btfsc	_Load^(0+128),7
  6310  0319  0008               	return
  6311                           
  6312                           ;OverLoad_B1.c: 113: Load.SafeCount++;
  6313  031A  3001               	movlw	1
  6314  031B  1283               	bcf	3,5	;RP0=0, select bank0
  6315  031C  1303               	bcf	3,6	;RP1=0, select bank0
  6316  031D  00E2               	movwf	??_Load_Main
  6317  031E  0862               	movf	??_Load_Main,w
  6318  031F  1683               	bsf	3,5	;RP0=1, select bank1
  6319  0320  1303               	bcf	3,6	;RP1=0, select bank1
  6320  0321  07EE               	addwf	(_Load^(0+128)+31),f
  6321                           
  6322                           ;OverLoad_B1.c: 114: if (Load.SafeCount >= 3) {
  6323  0322  3003               	movlw	3
  6324  0323  026E               	subwf	(_Load^(0+128)+31),w
  6325  0324  1C03               	skipc
  6326  0325  0008               	return
  6327                           
  6328                           ;OverLoad_B1.c: 115: Load.SafeCount = 0;
  6329  0326  01EE               	clrf	(_Load^(0+128)+31)
  6330                           
  6331                           ;OverLoad_B1.c: 116: Load.OK = 1;
  6332  0327  17CF               	bsf	_Load^(0+128),7
  6333                           
  6334                           ;OverLoad_B1.c: 117: Load.Run = 0;
  6335  0328  11CF               	bcf	_Load^(0+128),3
  6336                           
  6337                           ;OverLoad_B1.c: 118: Load.Count = 0;
  6338  0329  01EB               	clrf	(_Load^(0+128)+28)
  6339                           
  6340                           ;OverLoad_B1.c: 119: Load.TotalLoad = Load.AD;
  6341  032A  0863               	movf	(_Load^(0+128)+20),w
  6342  032B  1283               	bcf	3,5	;RP0=0, select bank0
  6343  032C  1303               	bcf	3,6	;RP1=0, select bank0
  6344  032D  00E2               	movwf	??_Load_Main
  6345  032E  0862               	movf	??_Load_Main,w
  6346  032F  1683               	bsf	3,5	;RP0=1, select bank1
  6347  0330  1303               	bcf	3,6	;RP1=0, select bank1
  6348  0331  00D8               	movwf	(_Load^(0+128)+9)
  6349                           
  6350                           ;OverLoad_B1.c: 128: }
  6351                           ;OverLoad_B1.c: 129: }
  6352                           ;OverLoad_B1.c: 130: }
  6353                           ;OverLoad_B1.c: 131: }
  6354                           ;OverLoad_B1.c: 132: }
  6355                           ;OverLoad_B1.c: 133: }
  6356                           ;OverLoad_B1.c: 134: } else {
  6357  0332  0008               	return
  6358  0333                     l684:	
  6359                           
  6360                           ;OverLoad_B1.c: 135: Load.ADtoGO = 1;
  6361  0333  164F               	bsf	_Load^(0+128),4
  6362                           
  6363                           ;OverLoad_B1.c: 136: }
  6364                           ;OverLoad_B1.c: 137: } else {
  6365  0334  0008               	return
  6366  0335                     l683:	
  6367                           
  6368                           ;OverLoad_B1.c: 138: if (Load.LightsON == 1 && error != 3) {
  6369  0335  1D4F               	btfss	_Load^(0+128),2
  6370  0336  2B55               	goto	l4915
  6371  0337  1283               	bcf	3,5	;RP0=0, select bank0
  6372  0338  1303               	bcf	3,6	;RP1=0, select bank0
  6373  0339  0867               	movf	Load_Main@error,w
  6374  033A  3A03               	xorlw	3
  6375  033B  1903               	skipnz
  6376  033C  2B55               	goto	l4915
  6377                           
  6378                           ;OverLoad_B1.c: 139: Load.LightsON = 0;
  6379  033D  1683               	bsf	3,5	;RP0=1, select bank1
  6380  033E  1303               	bcf	3,6	;RP1=0, select bank1
  6381  033F  114F               	bcf	_Load^(0+128),2
  6382                           
  6383                           ;OverLoad_B1.c: 141: Load.Time = 0;
  6384  0340  01D0               	clrf	(_Load^(0+128)+1)
  6385  0341  01D1               	clrf	((_Load+1)^(0+128)+1)
  6386                           
  6387                           ;OverLoad_B1.c: 142: Load.ADtoGO = 0;
  6388  0342  124F               	bcf	_Load^(0+128),4
  6389                           
  6390                           ;OverLoad_B1.c: 143: setLoad_AH_AL_Restore();
  6391  0343  158A  24F4  118A   	fcall	_setLoad_AH_AL_Restore
  6392                           
  6393                           ;OverLoad_B1.c: 144: Load.Count = 0;
  6394  0346  1683               	bsf	3,5	;RP0=1, select bank1
  6395  0347  1303               	bcf	3,6	;RP1=0, select bank1
  6396  0348  01EB               	clrf	(_Load^(0+128)+28)
  6397                           
  6398                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
  6399  0349  01EC               	clrf	(_Load^(0+128)+29)
  6400                           
  6401                           ;OverLoad_B1.c: 146: Load.SafeCount = 0;
  6402  034A  01EE               	clrf	(_Load^(0+128)+31)
  6403                           
  6404                           ;OverLoad_B1.c: 148: Load.ADH = 0;
  6405  034B  01D4               	clrf	(_Load^(0+128)+5)
  6406  034C  01D5               	clrf	((_Load+1)^(0+128)+5)
  6407                           
  6408                           ;OverLoad_B1.c: 149: Load.ADL = 0;
  6409  034D  01D6               	clrf	(_Load^(0+128)+7)
  6410  034E  01D7               	clrf	((_Load+1)^(0+128)+7)
  6411                           
  6412                           ;OverLoad_B1.c: 150: Load.AD = 0;
  6413  034F  01E3               	clrf	(_Load^(0+128)+20)
  6414                           
  6415                           ;OverLoad_B1.c: 151: Load.JudgeValue = 0;
  6416  0350  01E7               	clrf	(_Load^(0+128)+24)
  6417  0351  01E8               	clrf	((_Load+1)^(0+128)+24)
  6418                           
  6419                           ;OverLoad_B1.c: 152: Load.LightsCount = 0;
  6420  0352  01ED               	clrf	(_Load^(0+128)+30)
  6421                           
  6422                           ;OverLoad_B1.c: 153: Load.Run = 0;
  6423  0353  11CF               	bcf	_Load^(0+128),3
  6424                           
  6425                           ;OverLoad_B1.c: 154: Load.OK = 1;
  6426  0354  17CF               	bsf	_Load^(0+128),7
  6427  0355                     l4915:	
  6428                           
  6429                           ;OverLoad_B1.c: 162: }
  6430                           ;OverLoad_B1.c: 163: if (Load.ERROR == 1) {
  6431  0355  1683               	bsf	3,5	;RP0=1, select bank1
  6432  0356  1303               	bcf	3,6	;RP1=0, select bank1
  6433  0357  1ECF               	btfss	_Load^(0+128),5
  6434  0358  0008               	return
  6435                           
  6436                           ;OverLoad_B1.c: 164: Load.ErrorTime++;
  6437  0359  3001               	movlw	1
  6438  035A  07D2               	addwf	(_Load^(0+128)+3),f
  6439  035B  1803               	skipnc
  6440  035C  0AD3               	incf	((_Load+1)^(0+128)+3),f
  6441  035D  3000               	movlw	0
  6442  035E  07D3               	addwf	((_Load+1)^(0+128)+3),f
  6443                           
  6444                           ;OverLoad_B1.c: 165: if (Load.ErrorTime >= 1000) {
  6445  035F  3003               	movlw	3
  6446  0360  0253               	subwf	((_Load+1)^(0+128)+3),w
  6447  0361  30E8               	movlw	232
  6448  0362  1903               	skipnz
  6449  0363  0252               	subwf	(_Load^(0+128)+3),w
  6450  0364  1C03               	skipc
  6451  0365  0008               	return
  6452                           
  6453                           ;OverLoad_B1.c: 166: Load.ErrorTime = 0;
  6454  0366  01D2               	clrf	(_Load^(0+128)+3)
  6455  0367  01D3               	clrf	((_Load+1)^(0+128)+3)
  6456                           
  6457                           ;OverLoad_B1.c: 173: Load.ERROR = 0;
  6458  0368  12CF               	bcf	_Load^(0+128),5
  6459                           
  6460                           ;OverLoad_B1.c: 174: }
  6461                           ;OverLoad_B1.c: 175: }
  6462                           ;OverLoad_B1.c: 176: }
  6463                           ;OverLoad_B1.c: 177: } else {
  6464  0369  0008               	return
  6465  036A                     l679:	
  6466                           
  6467                           ;OverLoad_B1.c: 178: if (myMain.PowerON == 1) {
  6468  036A  1283               	bcf	3,5	;RP0=0, select bank0
  6469  036B  1303               	bcf	3,6	;RP1=0, select bank0
  6470  036C  1C20               	btfss	_myMain,0
  6471  036D  0008               	return
  6472                           
  6473                           ;OverLoad_B1.c: 179: Load.Enable = 1;
  6474  036E  1683               	bsf	3,5	;RP0=1, select bank1
  6475  036F  1303               	bcf	3,6	;RP1=0, select bank1
  6476  0370  144F               	bsf	_Load^(0+128),0
  6477  0371  0008               	return
  6478  0372                     __end_of_Load_Main:	
  6479                           
  6480                           	psect	text34
  6481  0C39                     __ptext34:	
  6482 ;; *************** function _getMain_LoadOK *****************
  6483 ;; Defined at:
  6484 ;;		line 432 in file "../src/Main_B1.c"
  6485 ;; Parameters:    Size  Location     Type
  6486 ;;		None
  6487 ;; Auto vars:     Size  Location     Type
  6488 ;;  ok              1    0[BANK0 ] unsigned char 
  6489 ;; Return value:  Size  Location     Type
  6490 ;;                  1    wreg      unsigned char 
  6491 ;; Registers used:
  6492 ;;		wreg, status,2, pclath, cstack
  6493 ;; Tracked objects:
  6494 ;;		On entry : 0/0
  6495 ;;		On exit  : 0/0
  6496 ;;		Unchanged: 0/0
  6497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6498 ;;      Params:         0       0       0       0
  6499 ;;      Locals:         0       1       0       0
  6500 ;;      Temps:          1       0       0       0
  6501 ;;      Totals:         1       1       0       0
  6502 ;;Total ram usage:        2 bytes
  6503 ;; Hardware stack levels used:    1
  6504 ;; Hardware stack levels required when called:    3
  6505 ;; This function calls:
  6506 ;;		_getLightsControl_OK
  6507 ;; This function is called by:
  6508 ;;		_Load_Main
  6509 ;; This function uses a non-reentrant model
  6510 ;;
  6511                           
  6512                           
  6513                           ;psect for function _getMain_LoadOK
  6514  0C39                     _getMain_LoadOK:	
  6515                           
  6516                           ;Main_B1.c: 433: char ok = 0;
  6517                           
  6518                           ;incstack = 0
  6519                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
  6520  0C39  1283               	bcf	3,5	;RP0=0, select bank0
  6521  0C3A  1303               	bcf	3,6	;RP1=0, select bank0
  6522  0C3B  01DA               	clrf	getMain_LoadOK@ok
  6523                           
  6524                           ;Main_B1.c: 436: ok = getLightsControl_OK() == 1 ? 1 : 0;
  6525  0C3C  158A  2393         	fcall	_getLightsControl_OK
  6526  0C3E  3A01               	xorlw	1
  6527  0C3F  3000               	movlw	0
  6528  0C40  1903               	skipnz
  6529  0C41  3001               	movlw	1
  6530  0C42  00F5               	movwf	??_getMain_LoadOK
  6531  0C43  0875               	movf	??_getMain_LoadOK,w
  6532  0C44  1283               	bcf	3,5	;RP0=0, select bank0
  6533  0C45  1303               	bcf	3,6	;RP1=0, select bank0
  6534  0C46  00DA               	movwf	getMain_LoadOK@ok
  6535                           
  6536                           ;Main_B1.c: 441: return ok;
  6537  0C47  085A               	movf	getMain_LoadOK@ok,w
  6538  0C48  0008               	return
  6539  0C49                     __end_of_getMain_LoadOK:	
  6540                           
  6541                           	psect	text35
  6542  0B93                     __ptext35:	
  6543 ;; *************** function _getLightsControl_OK *****************
  6544 ;; Defined at:
  6545 ;;		line 255 in file "../src/TriacRelay_B1.c"
  6546 ;; Parameters:    Size  Location     Type
  6547 ;;		None
  6548 ;; Auto vars:     Size  Location     Type
  6549 ;;  loadok          1    4[COMMON] unsigned char 
  6550 ;; Return value:  Size  Location     Type
  6551 ;;                  1    wreg      unsigned char 
  6552 ;; Registers used:
  6553 ;;		wreg, status,2
  6554 ;; Tracked objects:
  6555 ;;		On entry : 0/0
  6556 ;;		On exit  : 0/0
  6557 ;;		Unchanged: 0/0
  6558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6559 ;;      Params:         0       0       0       0
  6560 ;;      Locals:         1       0       0       0
  6561 ;;      Temps:          0       0       0       0
  6562 ;;      Totals:         1       0       0       0
  6563 ;;Total ram usage:        1 bytes
  6564 ;; Hardware stack levels used:    1
  6565 ;; Hardware stack levels required when called:    2
  6566 ;; This function calls:
  6567 ;;		Nothing
  6568 ;; This function is called by:
  6569 ;;		_getMain_LoadOK
  6570 ;; This function uses a non-reentrant model
  6571 ;;
  6572                           
  6573                           
  6574                           ;psect for function _getLightsControl_OK
  6575  0B93                     _getLightsControl_OK:	
  6576                           
  6577                           ;TriacRelay_B1.c: 256: char loadok = LightsControl.LoadOK == 1 ? 1 : 0;
  6578                           
  6579                           ;incstack = 0
  6580                           ; Regs used in _getLightsControl_OK: [wreg+status,2]
  6581  0B93  3000               	movlw	0
  6582  0B94  1283               	bcf	3,5	;RP0=0, select bank0
  6583  0B95  1303               	bcf	3,6	;RP1=0, select bank0
  6584  0B96  193A               	btfsc	_LightsControl,2
  6585  0B97  3001               	movlw	1
  6586  0B98  00F4               	movwf	getLightsControl_OK@loadok
  6587                           
  6588                           ;TriacRelay_B1.c: 257: return loadok;
  6589  0B99  0874               	movf	getLightsControl_OK@loadok,w
  6590  0B9A  0008               	return
  6591  0B9B                     __end_of_getLightsControl_OK:	
  6592                           
  6593                           	psect	text36
  6594  0C5A                     __ptext36:	
  6595 ;; *************** function _getMain_Lights_Count *****************
  6596 ;; Defined at:
  6597 ;;		line 402 in file "../src/Main_B1.c"
  6598 ;; Parameters:    Size  Location     Type
  6599 ;;		None
  6600 ;; Auto vars:     Size  Location     Type
  6601 ;;  status1         1    3[BANK0 ] unsigned char 
  6602 ;;  status3         1    2[BANK0 ] unsigned char 
  6603 ;;  status2         1    1[BANK0 ] unsigned char 
  6604 ;;  count           1    0[BANK0 ] unsigned char 
  6605 ;; Return value:  Size  Location     Type
  6606 ;;                  1    wreg      unsigned char 
  6607 ;; Registers used:
  6608 ;;		wreg, status,2, status,0
  6609 ;; Tracked objects:
  6610 ;;		On entry : 0/0
  6611 ;;		On exit  : 0/0
  6612 ;;		Unchanged: 0/0
  6613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6614 ;;      Params:         0       0       0       0
  6615 ;;      Locals:         0       4       0       0
  6616 ;;      Temps:          1       0       0       0
  6617 ;;      Totals:         1       4       0       0
  6618 ;;Total ram usage:        5 bytes
  6619 ;; Hardware stack levels used:    1
  6620 ;; Hardware stack levels required when called:    2
  6621 ;; This function calls:
  6622 ;;		Nothing
  6623 ;; This function is called by:
  6624 ;;		_Load_Main
  6625 ;; This function uses a non-reentrant model
  6626 ;;
  6627                           
  6628                           
  6629                           ;psect for function _getMain_Lights_Count
  6630  0C5A                     _getMain_Lights_Count:	
  6631                           
  6632                           ;Main_B1.c: 403: char status1 = 0, status2 = 0, status3 = 0, count = 0;
  6633                           
  6634                           ;incstack = 0
  6635                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
  6636  0C5A  1283               	bcf	3,5	;RP0=0, select bank0
  6637  0C5B  1303               	bcf	3,6	;RP1=0, select bank0
  6638  0C5C  01DD               	clrf	getMain_Lights_Count@status1
  6639  0C5D  01DB               	clrf	getMain_Lights_Count@status2
  6640  0C5E  01DC               	clrf	getMain_Lights_Count@status3
  6641  0C5F  01DA               	clrf	getMain_Lights_Count@count
  6642                           
  6643                           ;Main_B1.c: 419: status1 = Lights1.Status == 1 ? 1 : 0;
  6644  0C60  3000               	movlw	0
  6645  0C61  1947               	btfsc	_Lights1,2
  6646  0C62  3001               	movlw	1
  6647  0C63  00DD               	movwf	getMain_Lights_Count@status1
  6648                           
  6649                           ;Main_B1.c: 428: return count = (status1 + status2 + status3);
  6650  0C64  085B               	movf	getMain_Lights_Count@status2,w
  6651  0C65  075D               	addwf	getMain_Lights_Count@status1,w
  6652  0C66  00F4               	movwf	??_getMain_Lights_Count
  6653  0C67  085C               	movf	getMain_Lights_Count@status3,w
  6654  0C68  0774               	addwf	??_getMain_Lights_Count,w
  6655  0C69  00DA               	movwf	getMain_Lights_Count@count
  6656  0C6A  0008               	return
  6657  0C6B                     __end_of_getMain_Lights_Count:	
  6658                           
  6659                           	psect	text37
  6660  0B69                     __ptext37:	
  6661 ;; *************** function _Load_Initialization *****************
  6662 ;; Defined at:
  6663 ;;		line 9 in file "../src/OverLoad_B1.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;		None
  6666 ;; Auto vars:     Size  Location     Type
  6667 ;;		None
  6668 ;; Return value:  Size  Location     Type
  6669 ;;		None               void
  6670 ;; Registers used:
  6671 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6672 ;; Tracked objects:
  6673 ;;		On entry : 0/0
  6674 ;;		On exit  : 0/0
  6675 ;;		Unchanged: 0/0
  6676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6677 ;;      Params:         0       0       0       0
  6678 ;;      Locals:         0       0       0       0
  6679 ;;      Temps:          0       0       0       0
  6680 ;;      Totals:         0       0       0       0
  6681 ;;Total ram usage:        0 bytes
  6682 ;; Hardware stack levels used:    1
  6683 ;; Hardware stack levels required when called:    3
  6684 ;; This function calls:
  6685 ;;		_setLoad_AH_AL_Restore
  6686 ;; This function is called by:
  6687 ;;		_main
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           
  6692                           ;psect for function _Load_Initialization
  6693  0B69                     _Load_Initialization:	
  6694                           
  6695                           ;OverLoad_B1.c: 10: Load.OK = 1;
  6696                           
  6697                           ;incstack = 0
  6698                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6699  0B69  1683               	bsf	3,5	;RP0=1, select bank1
  6700  0B6A  1303               	bcf	3,6	;RP1=0, select bank1
  6701  0B6B  17CF               	bsf	_Load^(0+128),7
  6702                           
  6703                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  6704  0B6C  158A  24F4         	fcall	_setLoad_AH_AL_Restore
  6705  0B6E  0008               	return
  6706  0B6F                     __end_of_Load_Initialization:	
  6707                           
  6708                           	psect	text38
  6709  0CF4                     __ptext38:	
  6710 ;; *************** function _setLoad_AH_AL_Restore *****************
  6711 ;; Defined at:
  6712 ;;		line 285 in file "../src/OverLoad_B1.c"
  6713 ;; Parameters:    Size  Location     Type
  6714 ;;		None
  6715 ;; Auto vars:     Size  Location     Type
  6716 ;;  i               1    5[COMMON] unsigned char 
  6717 ;; Return value:  Size  Location     Type
  6718 ;;		None               void
  6719 ;; Registers used:
  6720 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6721 ;; Tracked objects:
  6722 ;;		On entry : 0/0
  6723 ;;		On exit  : 0/0
  6724 ;;		Unchanged: 0/0
  6725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6726 ;;      Params:         0       0       0       0
  6727 ;;      Locals:         1       0       0       0
  6728 ;;      Temps:          1       0       0       0
  6729 ;;      Totals:         2       0       0       0
  6730 ;;Total ram usage:        2 bytes
  6731 ;; Hardware stack levels used:    1
  6732 ;; Hardware stack levels required when called:    2
  6733 ;; This function calls:
  6734 ;;		Nothing
  6735 ;; This function is called by:
  6736 ;;		_Load_Initialization
  6737 ;;		_Load_Main
  6738 ;; This function uses a non-reentrant model
  6739 ;;
  6740                           
  6741                           
  6742                           ;psect for function _setLoad_AH_AL_Restore
  6743  0CF4                     _setLoad_AH_AL_Restore:	
  6744                           
  6745                           ;OverLoad_B1.c: 286: char i;
  6746                           ;OverLoad_B1.c: 287: for (i = 0; i < 5; i++) {
  6747                           
  6748                           ;incstack = 0
  6749                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  6750  0CF4  01F5               	clrf	setLoad_AH_AL_Restore@i
  6751  0CF5                     L20:	
  6752  0CF5  3005               	movlw	5
  6753  0CF6  0275               	subwf	setLoad_AH_AL_Restore@i,w
  6754  0CF7  1803               	btfsc	3,0
  6755  0CF8  0008               	return
  6756                           
  6757                           ;OverLoad_B1.c: 288: Load.AH[i] = 0;
  6758  0CF9  0875               	movf	setLoad_AH_AL_Restore@i,w
  6759  0CFA  3ED9               	addlw	(_Load+10)& (0+255)
  6760  0CFB  0084               	movwf	4
  6761  0CFC  1383               	bcf	3,7	;select IRP bank1
  6762  0CFD  0180               	clrf	0
  6763                           
  6764                           ;OverLoad_B1.c: 289: Load.AL[i] = 0xff;
  6765  0CFE  30FF               	movlw	255
  6766  0CFF  00F4               	movwf	??_setLoad_AH_AL_Restore
  6767  0D00  0875               	movf	setLoad_AH_AL_Restore@i,w
  6768  0D01  3EDE               	addlw	(_Load+15)& (0+255)
  6769  0D02  0084               	movwf	4
  6770  0D03  0874               	movf	??_setLoad_AH_AL_Restore,w
  6771  0D04  0080               	movwf	0
  6772  0D05  3001               	movlw	1
  6773  0D06  00F4               	movwf	??_setLoad_AH_AL_Restore
  6774  0D07  0874               	movf	??_setLoad_AH_AL_Restore,w
  6775  0D08  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  6776  0D09  2CF5               	goto	L20
  6777  0D0A                     __end_of_setLoad_AH_AL_Restore:	
  6778                           
  6779                           	psect	text39
  6780  0BA3                     __ptext39:	
  6781 ;; *************** function _Lights_Main *****************
  6782 ;; Defined at:
  6783 ;;		line 54 in file "../src/TriacRelay_B1.c"
  6784 ;; Parameters:    Size  Location     Type
  6785 ;;		None
  6786 ;; Auto vars:     Size  Location     Type
  6787 ;;		None
  6788 ;; Return value:  Size  Location     Type
  6789 ;;		None               void
  6790 ;; Registers used:
  6791 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6792 ;; Tracked objects:
  6793 ;;		On entry : 0/0
  6794 ;;		On exit  : 0/0
  6795 ;;		Unchanged: 0/0
  6796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6797 ;;      Params:         0       0       0       0
  6798 ;;      Locals:         0       0       0       0
  6799 ;;      Temps:          0       0       0       0
  6800 ;;      Totals:         0       0       0       0
  6801 ;;Total ram usage:        0 bytes
  6802 ;; Hardware stack levels used:    1
  6803 ;; Hardware stack levels required when called:    6
  6804 ;; This function calls:
  6805 ;;		_Lights_Close
  6806 ;;		_Lights_Control
  6807 ;;		_setLights_Main
  6808 ;; This function is called by:
  6809 ;;		_main
  6810 ;; This function uses a non-reentrant model
  6811 ;;
  6812                           
  6813                           
  6814                           ;psect for function _Lights_Main
  6815  0BA3                     _Lights_Main:	
  6816                           
  6817                           ;TriacRelay_B1.c: 56: setLights_Main(1);
  6818                           
  6819                           ;incstack = 0
  6820                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6821  0BA3  3001               	movlw	1
  6822  0BA4  158A  26F6  158A   	fcall	_setLights_Main
  6823                           
  6824                           ;TriacRelay_B1.c: 57: Lights_Control(1);
  6825  0BA7  3001               	movlw	1
  6826  0BA8  118A  26F2  158A   	fcall	_Lights_Control
  6827                           
  6828                           ;TriacRelay_B1.c: 70: Lights_Close();
  6829  0BAB  158A  24CA         	fcall	_Lights_Close
  6830  0BAD  0008               	return
  6831  0BAE                     __end_of_Lights_Main:	
  6832                           
  6833                           	psect	text40
  6834  0EF6                     __ptext40:	
  6835 ;; *************** function _setLights_Main *****************
  6836 ;; Defined at:
  6837 ;;		line 82 in file "../src/TriacRelay_B1.c"
  6838 ;; Parameters:    Size  Location     Type
  6839 ;;  lights          1    wreg     unsigned char 
  6840 ;; Auto vars:     Size  Location     Type
  6841 ;;  lights          1   19[BANK0 ] unsigned char 
  6842 ;; Return value:  Size  Location     Type
  6843 ;;		None               void
  6844 ;; Registers used:
  6845 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6846 ;; Tracked objects:
  6847 ;;		On entry : 0/0
  6848 ;;		On exit  : 0/0
  6849 ;;		Unchanged: 0/0
  6850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6851 ;;      Params:         0       0       0       0
  6852 ;;      Locals:         0       3       0       0
  6853 ;;      Temps:          0       3       0       0
  6854 ;;      Totals:         0       6       0       0
  6855 ;;Total ram usage:        6 bytes
  6856 ;; Hardware stack levels used:    1
  6857 ;; Hardware stack levels required when called:    5
  6858 ;; This function calls:
  6859 ;;		_LightsPointSelect
  6860 ;;		_getLoad_OK
  6861 ;;		_getMain_All_Error_Status
  6862 ;;		_setLights
  6863 ;; This function is called by:
  6864 ;;		_Lights_Main
  6865 ;; This function uses a non-reentrant model
  6866 ;;
  6867                           
  6868                           
  6869                           ;psect for function _setLights_Main
  6870  0EF6                     _setLights_Main:	
  6871                           
  6872                           ;incstack = 0
  6873                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6874                           ;setLights_Main@lights stored from wreg
  6875  0EF6  1283               	bcf	3,5	;RP0=0, select bank0
  6876  0EF7  1303               	bcf	3,6	;RP1=0, select bank0
  6877  0EF8  00ED               	movwf	setLights_Main@lights
  6878                           
  6879                           ;TriacRelay_B1.c: 83: LightsPointSelect(lights);
  6880  0EF9  086D               	movf	setLights_Main@lights,w
  6881  0EFA  158A  23BA  158A   	fcall	_LightsPointSelect
  6882                           
  6883                           ;TriacRelay_B1.c: 84: if (Lights->GO == 0) {
  6884  0EFD  1283               	bcf	3,5	;RP0=0, select bank0
  6885  0EFE  1303               	bcf	3,6	;RP1=0, select bank0
  6886  0EFF  0839               	movf	_Lights,w
  6887  0F00  0084               	movwf	4
  6888  0F01  1383               	bcf	3,7	;select IRP bank0
  6889  0F02  1880               	btfsc	0,1
  6890  0F03  0008               	return
  6891                           
  6892                           ;TriacRelay_B1.c: 85: if (Lights->Trigger == 1) {
  6893  0F04  0839               	movf	_Lights,w
  6894  0F05  0084               	movwf	4
  6895  0F06  1D80               	btfss	0,3
  6896  0F07  0008               	return
  6897                           
  6898                           ;TriacRelay_B1.c: 86: if (getMain_All_Error_Status(0) == 0) {
  6899  0F08  3000               	movlw	0
  6900  0F09  158A  2749  158A   	fcall	_getMain_All_Error_Status
  6901  0F0C  3800               	iorlw	0
  6902  0F0D  1D03               	skipz
  6903  0F0E  2F2F               	goto	l1209
  6904                           
  6905                           ;TriacRelay_B1.c: 87: if (LightsControl.LoadOK == 1) {
  6906  0F0F  1283               	bcf	3,5	;RP0=0, select bank0
  6907  0F10  1303               	bcf	3,6	;RP1=0, select bank0
  6908  0F11  1D3A               	btfss	_LightsControl,2
  6909  0F12  2F32               	goto	l1215
  6910                           
  6911                           ;TriacRelay_B1.c: 88: LightsControl.LoadOK = getLoad_OK() == 1 ? 0 : LightsControl.LoadO
      +                          K;
  6912  0F13  158A  2383  158A   	fcall	_getLoad_OK
  6913  0F16  3A01               	xorlw	1
  6914  0F17  1903               	skipnz
  6915  0F18  2F26               	goto	l4519
  6916  0F19  1283               	bcf	3,5	;RP0=0, select bank0
  6917  0F1A  1303               	bcf	3,6	;RP1=0, select bank0
  6918  0F1B  0C3A               	rrf	_LightsControl,w
  6919  0F1C  00E8               	movwf	??_setLights_Main
  6920  0F1D  0C68               	rrf	??_setLights_Main,w
  6921  0F1E  3901               	andlw	1
  6922  0F1F  00E9               	movwf	??_setLights_Main+1
  6923  0F20  01EA               	clrf	??_setLights_Main+2
  6924  0F21  0869               	movf	??_setLights_Main+1,w
  6925  0F22  00EB               	movwf	_setLights_Main$4849
  6926  0F23  086A               	movf	??_setLights_Main+2,w
  6927  0F24  00EC               	movwf	_setLights_Main$4849+1
  6928  0F25  2F2A               	goto	l4521
  6929  0F26                     l4519:	
  6930  0F26  1283               	bcf	3,5	;RP0=0, select bank0
  6931  0F27  1303               	bcf	3,6	;RP1=0, select bank0
  6932  0F28  01EB               	clrf	_setLights_Main$4849
  6933  0F29  01EC               	clrf	_setLights_Main$4849+1
  6934  0F2A                     l4521:	
  6935  0F2A  086B               	movf	_setLights_Main$4849,w
  6936  0F2B  113A               	bcf	_LightsControl,2
  6937  0F2C  1D03               	skipz
  6938  0F2D  153A               	bsf	_LightsControl,2
  6939                           
  6940                           ;TriacRelay_B1.c: 89: }
  6941                           ;TriacRelay_B1.c: 90: } else {
  6942  0F2E  2F32               	goto	l1215
  6943  0F2F                     l1209:	
  6944                           
  6945                           ;TriacRelay_B1.c: 91: LightsControl.LoadOK = 0;
  6946  0F2F  1283               	bcf	3,5	;RP0=0, select bank0
  6947  0F30  1303               	bcf	3,6	;RP1=0, select bank0
  6948  0F31  113A               	bcf	_LightsControl,2
  6949  0F32                     l1215:	
  6950                           
  6951                           ;TriacRelay_B1.c: 92: }
  6952                           ;TriacRelay_B1.c: 94: if (LightsControl.LoadOK == 0) {
  6953  0F32  193A               	btfsc	_LightsControl,2
  6954  0F33  0008               	return
  6955                           
  6956                           ;TriacRelay_B1.c: 95: Lights->Trigger = 0;
  6957  0F34  0839               	movf	_Lights,w
  6958  0F35  0084               	movwf	4
  6959  0F36  1383               	bcf	3,7	;select IRP bank0
  6960  0F37  1180               	bcf	0,3
  6961                           
  6962                           ;TriacRelay_B1.c: 97: if (Lights->Switch == 1) {
  6963  0F38  0839               	movf	_Lights,w
  6964  0F39  0084               	movwf	4
  6965  0F3A  1E00               	btfss	0,4
  6966  0F3B  2F42               	goto	l4527
  6967                           
  6968                           ;TriacRelay_B1.c: 98: setLights(lights, 1);
  6969  0F3C  01E2               	clrf	setLights@status
  6970  0F3D  0AE2               	incf	setLights@status,f
  6971  0F3E  086D               	movf	setLights_Main@lights,w
  6972  0F3F  118A  2683         	fcall	_setLights
  6973                           
  6974                           ;TriacRelay_B1.c: 99: } else {
  6975  0F41  0008               	return
  6976  0F42                     l4527:	
  6977                           
  6978                           ;TriacRelay_B1.c: 100: setLights(lights, 0);
  6979  0F42  1283               	bcf	3,5	;RP0=0, select bank0
  6980  0F43  1303               	bcf	3,6	;RP1=0, select bank0
  6981  0F44  01E2               	clrf	setLights@status
  6982  0F45  086D               	movf	setLights_Main@lights,w
  6983  0F46  118A  2683         	fcall	_setLights
  6984  0F48  0008               	return
  6985  0F49                     __end_of_setLights_Main:	
  6986                           
  6987                           	psect	text41
  6988  0683                     __ptext41:	
  6989 ;; *************** function _setLights *****************
  6990 ;; Defined at:
  6991 ;;		line 108 in file "../src/TriacRelay_B1.c"
  6992 ;; Parameters:    Size  Location     Type
  6993 ;;  lights          1    wreg     unsigned char 
  6994 ;;  status          1    8[BANK0 ] unsigned char 
  6995 ;; Auto vars:     Size  Location     Type
  6996 ;;  lights          1   13[BANK0 ] unsigned char 
  6997 ;; Return value:  Size  Location     Type
  6998 ;;		None               void
  6999 ;; Registers used:
  7000 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7001 ;; Tracked objects:
  7002 ;;		On entry : 0/0
  7003 ;;		On exit  : 0/0
  7004 ;;		Unchanged: 0/0
  7005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7006 ;;      Params:         0       1       0       0
  7007 ;;      Locals:         0       3       0       0
  7008 ;;      Temps:          0       2       0       0
  7009 ;;      Totals:         0       6       0       0
  7010 ;;Total ram usage:        6 bytes
  7011 ;; Hardware stack levels used:    1
  7012 ;; Hardware stack levels required when called:    4
  7013 ;; This function calls:
  7014 ;;		_LightsPointSelect
  7015 ;;		_getMain_All_Error_Status
  7016 ;;		_setLights_Line
  7017 ;; This function is called by:
  7018 ;;		_setLights_Main
  7019 ;; This function uses a non-reentrant model
  7020 ;;
  7021                           
  7022                           
  7023                           ;psect for function _setLights
  7024  0683                     _setLights:	
  7025                           
  7026                           ;incstack = 0
  7027                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7028                           ;setLights@lights stored from wreg
  7029  0683  1283               	bcf	3,5	;RP0=0, select bank0
  7030  0684  1303               	bcf	3,6	;RP1=0, select bank0
  7031  0685  00E7               	movwf	setLights@lights
  7032                           
  7033                           ;TriacRelay_B1.c: 110: LightsPointSelect(lights);
  7034  0686  0867               	movf	setLights@lights,w
  7035  0687  158A  23BA  118A   	fcall	_LightsPointSelect
  7036                           
  7037                           ;TriacRelay_B1.c: 113: LightsControl.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
  7038  068A  3000               	movlw	0
  7039  068B  158A  2749  118A   	fcall	_getMain_All_Error_Status
  7040  068E  3A00               	xorlw	0
  7041  068F  3000               	movlw	0
  7042  0690  1903               	skipnz
  7043  0691  3001               	movlw	1
  7044  0692  1283               	bcf	3,5	;RP0=0, select bank0
  7045  0693  1303               	bcf	3,6	;RP1=0, select bank0
  7046  0694  00E3               	movwf	??_setLights
  7047  0695  0DE3               	rlf	??_setLights,f
  7048  0696  0DE3               	rlf	??_setLights,f
  7049  0697  083A               	movf	_LightsControl,w
  7050  0698  0663               	xorwf	??_setLights,w
  7051  0699  39FB               	andlw	-5
  7052  069A  0663               	xorwf	??_setLights,w
  7053  069B  00BA               	movwf	_LightsControl
  7054                           
  7055                           ;TriacRelay_B1.c: 114: LightsControl.LoadGO = status == 1 ? 1 : LightsControl.LoadGO;
  7056  069C  0862               	movf	setLights@status,w
  7057  069D  3A01               	xorlw	1
  7058  069E  1903               	skipnz
  7059  069F  2EA8               	goto	l4241
  7060  06A0  0C3A               	rrf	_LightsControl,w
  7061  06A1  3901               	andlw	1
  7062  06A2  00E3               	movwf	??_setLights
  7063  06A3  01E4               	clrf	??_setLights+1
  7064  06A4  0863               	movf	??_setLights,w
  7065  06A5  00E5               	movwf	_setLights$4853
  7066  06A6  0864               	movf	??_setLights+1,w
  7067  06A7  2EAB               	goto	L21
  7068  06A8                     l4241:	
  7069  06A8  3001               	movlw	1
  7070  06A9  00E5               	movwf	_setLights$4853
  7071  06AA  3000               	movlw	0
  7072  06AB                     L21:	
  7073  06AB  00E6               	movwf	_setLights$4853+1
  7074  06AC  0865               	movf	_setLights$4853,w
  7075  06AD  10BA               	bcf	_LightsControl,1
  7076  06AE  1D03               	skipz
  7077  06AF  14BA               	bsf	_LightsControl,1
  7078                           
  7079                           ;TriacRelay_B1.c: 117: Lights->GO = 1;
  7080  06B0  0839               	movf	_Lights,w
  7081  06B1  0084               	movwf	4
  7082  06B2  1383               	bcf	3,7	;select IRP bank0
  7083  06B3  1480               	bsf	0,1
  7084                           
  7085                           ;TriacRelay_B1.c: 118: if (status == 1) {
  7086  06B4  0862               	movf	setLights@status,w
  7087  06B5  3A01               	xorlw	1
  7088  06B6  1D03               	skipz
  7089  06B7  2ED2               	goto	l4253
  7090                           
  7091                           ;TriacRelay_B1.c: 119: if (Lights->Status == 0) {
  7092  06B8  0839               	movf	_Lights,w
  7093  06B9  0084               	movwf	4
  7094  06BA  1900               	btfsc	0,2
  7095  06BB  2EEA               	goto	l4257
  7096                           
  7097                           ;TriacRelay_B1.c: 120: Lights->Status = 1;
  7098  06BC  0839               	movf	_Lights,w
  7099  06BD  0084               	movwf	4
  7100  06BE  1500               	bsf	0,2
  7101                           
  7102                           ;TriacRelay_B1.c: 121: Lights->RelayValue = 10;
  7103  06BF  300A               	movlw	10
  7104  06C0  00E3               	movwf	??_setLights
  7105  06C1  0839               	movf	_Lights,w
  7106  06C2  3E06               	addlw	6
  7107  06C3  0084               	movwf	4
  7108  06C4  0863               	movf	??_setLights,w
  7109  06C5  0080               	movwf	0
  7110                           
  7111                           ;TriacRelay_B1.c: 122: Lights->TriacValue = 13;
  7112  06C6  300D               	movlw	13
  7113  06C7  00E3               	movwf	??_setLights
  7114  06C8  0839               	movf	_Lights,w
  7115  06C9  3E04               	addlw	4
  7116  06CA  0084               	movwf	4
  7117  06CB  0863               	movf	??_setLights,w
  7118  06CC  0080               	movwf	0
  7119                           
  7120                           ;TriacRelay_B1.c: 123: setLights_Line(lights);
  7121  06CD  0867               	movf	setLights@lights,w
  7122  06CE  158A  23E0  118A   	fcall	_setLights_Line
  7123                           
  7124                           ;TriacRelay_B1.c: 124: }
  7125                           ;TriacRelay_B1.c: 125: } else {
  7126  06D1  2EEA               	goto	l4257
  7127  06D2                     l4253:	
  7128                           
  7129                           ;TriacRelay_B1.c: 126: if (Lights->Status == 1) {
  7130  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  7131  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  7132  06D4  0839               	movf	_Lights,w
  7133  06D5  0084               	movwf	4
  7134  06D6  1383               	bcf	3,7	;select IRP bank0
  7135  06D7  1D00               	btfss	0,2
  7136  06D8  2EEA               	goto	l4257
  7137                           
  7138                           ;TriacRelay_B1.c: 127: Lights->Status = 0;
  7139  06D9  0839               	movf	_Lights,w
  7140  06DA  0084               	movwf	4
  7141  06DB  1100               	bcf	0,2
  7142                           
  7143                           ;TriacRelay_B1.c: 128: Lights->RelayValue = 4;
  7144  06DC  3004               	movlw	4
  7145  06DD  00E3               	movwf	??_setLights
  7146  06DE  0839               	movf	_Lights,w
  7147  06DF  3E06               	addlw	6
  7148  06E0  0084               	movwf	4
  7149  06E1  0863               	movf	??_setLights,w
  7150  06E2  0080               	movwf	0
  7151                           
  7152                           ;TriacRelay_B1.c: 129: Lights->TriacValue = 7;
  7153  06E3  3007               	movlw	7
  7154  06E4  00E3               	movwf	??_setLights
  7155  06E5  0839               	movf	_Lights,w
  7156  06E6  3E04               	addlw	4
  7157  06E7  0084               	movwf	4
  7158  06E8  0863               	movf	??_setLights,w
  7159  06E9  0080               	movwf	0
  7160  06EA                     l4257:	
  7161                           
  7162                           ;TriacRelay_B1.c: 130: }
  7163                           ;TriacRelay_B1.c: 131: }
  7164                           ;TriacRelay_B1.c: 133: if (lights == 1) {
  7165  06EA  1283               	bcf	3,5	;RP0=0, select bank0
  7166  06EB  1303               	bcf	3,6	;RP1=0, select bank0
  7167  06EC  0867               	movf	setLights@lights,w
  7168  06ED  3A01               	xorlw	1
  7169  06EE  1D03               	skipz
  7170  06EF  0008               	return
  7171                           
  7172                           ;TriacRelay_B1.c: 134: RB2 = 1;
  7173  06F0  1506               	bsf	6,2	;volatile
  7174  06F1  0008               	return
  7175  06F2                     __end_of_setLights:	
  7176                           
  7177                           	psect	text42
  7178  0BE0                     __ptext42:	
  7179 ;; *************** function _setLights_Line *****************
  7180 ;; Defined at:
  7181 ;;		line 216 in file "../src/TriacRelay_B1.c"
  7182 ;; Parameters:    Size  Location     Type
  7183 ;;  lights          1    wreg     unsigned char 
  7184 ;; Auto vars:     Size  Location     Type
  7185 ;;  lights          1    0[BANK0 ] unsigned char 
  7186 ;; Return value:  Size  Location     Type
  7187 ;;		None               void
  7188 ;; Registers used:
  7189 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7190 ;; Tracked objects:
  7191 ;;		On entry : 0/0
  7192 ;;		On exit  : 0/0
  7193 ;;		Unchanged: 0/0
  7194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7195 ;;      Params:         0       0       0       0
  7196 ;;      Locals:         0       1       0       0
  7197 ;;      Temps:          0       0       0       0
  7198 ;;      Totals:         0       1       0       0
  7199 ;;Total ram usage:        1 bytes
  7200 ;; Hardware stack levels used:    1
  7201 ;; Hardware stack levels required when called:    3
  7202 ;; This function calls:
  7203 ;;		_LightsPointSelect
  7204 ;; This function is called by:
  7205 ;;		_setLights
  7206 ;; This function uses a non-reentrant model
  7207 ;;
  7208                           
  7209                           
  7210                           ;psect for function _setLights_Line
  7211  0BE0                     _setLights_Line:	
  7212                           
  7213                           ;incstack = 0
  7214                           ; Regs used in _setLights_Line: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7215                           ;setLights_Line@lights stored from wreg
  7216  0BE0  1283               	bcf	3,5	;RP0=0, select bank0
  7217  0BE1  1303               	bcf	3,6	;RP1=0, select bank0
  7218  0BE2  00DA               	movwf	setLights_Line@lights
  7219                           
  7220                           ;TriacRelay_B1.c: 218: Lights1.Line = 0;
  7221  0BE3  1048               	bcf	_Lights1+1,0
  7222                           
  7223                           ;TriacRelay_B1.c: 226: LightsPointSelect(lights);
  7224  0BE4  085A               	movf	setLights_Line@lights,w
  7225  0BE5  158A  23BA         	fcall	_LightsPointSelect
  7226                           
  7227                           ;TriacRelay_B1.c: 227: Lights->Line = 1;
  7228  0BE7  1283               	bcf	3,5	;RP0=0, select bank0
  7229  0BE8  1303               	bcf	3,6	;RP1=0, select bank0
  7230  0BE9  0A39               	incf	_Lights,w
  7231  0BEA  0084               	movwf	4
  7232  0BEB  1383               	bcf	3,7	;select IRP bank0
  7233  0BEC  1400               	bsf	0,0
  7234  0BED  0008               	return
  7235  0BEE                     __end_of_setLights_Line:	
  7236                           
  7237                           	psect	text43
  7238  0F49                     __ptext43:	
  7239 ;; *************** function _getMain_All_Error_Status *****************
  7240 ;; Defined at:
  7241 ;;		line 361 in file "../src/Main_B1.c"
  7242 ;; Parameters:    Size  Location     Type
  7243 ;;  command         1    wreg     unsigned char 
  7244 ;; Auto vars:     Size  Location     Type
  7245 ;;  command         1    6[BANK0 ] unsigned char 
  7246 ;;  status          1    7[BANK0 ] unsigned char 
  7247 ;; Return value:  Size  Location     Type
  7248 ;;                  1    wreg      unsigned char 
  7249 ;; Registers used:
  7250 ;;		wreg, status,2, status,0, pclath, cstack
  7251 ;; Tracked objects:
  7252 ;;		On entry : 0/0
  7253 ;;		On exit  : 0/0
  7254 ;;		Unchanged: 0/0
  7255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7256 ;;      Params:         0       0       0       0
  7257 ;;      Locals:         0       8       0       0
  7258 ;;      Temps:          1       0       0       0
  7259 ;;      Totals:         1       8       0       0
  7260 ;;Total ram usage:        9 bytes
  7261 ;; Hardware stack levels used:    1
  7262 ;; Hardware stack levels required when called:    3
  7263 ;; This function calls:
  7264 ;;		_getCDS_Status
  7265 ;; This function is called by:
  7266 ;;		_Load_Main
  7267 ;;		_setTemp_Main
  7268 ;;		_PIR_Main
  7269 ;;		_setSYSC_Main
  7270 ;;		_setLights_Main
  7271 ;;		_setLights
  7272 ;; This function uses a non-reentrant model
  7273 ;;
  7274                           
  7275                           
  7276                           ;psect for function _getMain_All_Error_Status
  7277  0F49                     _getMain_All_Error_Status:	
  7278                           
  7279                           ;incstack = 0
  7280                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0+pclath+cstack]
  7281                           ;getMain_All_Error_Status@command stored from wreg
  7282  0F49  1283               	bcf	3,5	;RP0=0, select bank0
  7283  0F4A  1303               	bcf	3,6	;RP1=0, select bank0
  7284  0F4B  00E0               	movwf	getMain_All_Error_Status@command
  7285                           
  7286                           ;Main_B1.c: 362: char status = 0;
  7287  0F4C  01E1               	clrf	getMain_All_Error_Status@status
  7288                           
  7289                           ;Main_B1.c: 365: if (status == 0 && command != 1) {
  7290  0F4D  08E1               	movf	getMain_All_Error_Status@status,f
  7291  0F4E  1D03               	skipz
  7292  0F4F  2F58               	goto	l2901
  7293  0F50  0860               	movf	getMain_All_Error_Status@command,w
  7294  0F51  3A01               	xorlw	1
  7295  0F52  1903               	skipnz
  7296  0F53  2F58               	goto	l2901
  7297                           
  7298                           ;Main_B1.c: 366: status = SYSC.ERROR == 1 ? 1 : 0;
  7299  0F54  3000               	movlw	0
  7300  0F55  18A8               	btfsc	_SYSC,1
  7301  0F56  3001               	movlw	1
  7302  0F57  00E1               	movwf	getMain_All_Error_Status@status
  7303  0F58                     l2901:	
  7304                           
  7305                           ;Main_B1.c: 367: }
  7306                           ;Main_B1.c: 373: if (status == 0 && command != 2) {
  7307  0F58  08E1               	movf	getMain_All_Error_Status@status,f
  7308  0F59  1D03               	skipz
  7309  0F5A  2F6C               	goto	l2911
  7310  0F5B  0860               	movf	getMain_All_Error_Status@command,w
  7311  0F5C  3A02               	xorlw	2
  7312  0F5D  1903               	skipnz
  7313  0F5E  2F6C               	goto	l2911
  7314                           
  7315                           ;Main_B1.c: 374: status = Temp.ERROR == 1 ? 2 : 0;
  7316  0F5F  18BB               	btfsc	_Temp,1
  7317  0F60  2F64               	goto	l2909
  7318  0F61  01DA               	clrf	_getMain_All_Error_Status$2474
  7319  0F62  01DB               	clrf	_getMain_All_Error_Status$2474+1
  7320  0F63  2F68               	goto	l599
  7321  0F64                     l2909:	
  7322  0F64  3002               	movlw	2
  7323  0F65  00DA               	movwf	_getMain_All_Error_Status$2474
  7324  0F66  3000               	movlw	0
  7325  0F67  00DB               	movwf	_getMain_All_Error_Status$2474+1
  7326  0F68                     l599:	
  7327  0F68  085A               	movf	_getMain_All_Error_Status$2474,w
  7328  0F69  00F5               	movwf	??_getMain_All_Error_Status
  7329  0F6A  0875               	movf	??_getMain_All_Error_Status,w
  7330  0F6B  00E1               	movwf	getMain_All_Error_Status@status
  7331  0F6C                     l2911:	
  7332                           
  7333                           ;Main_B1.c: 375: }
  7334                           ;Main_B1.c: 380: if (status == 0 && command != 3) {
  7335  0F6C  08E1               	movf	getMain_All_Error_Status@status,f
  7336  0F6D  1D03               	skipz
  7337  0F6E  2F85               	goto	l2921
  7338  0F6F  0860               	movf	getMain_All_Error_Status@command,w
  7339  0F70  3A03               	xorlw	3
  7340  0F71  1903               	skipnz
  7341  0F72  2F85               	goto	l2921
  7342                           
  7343                           ;Main_B1.c: 381: status = Load.ERROR == 1 ? 3 : 0;
  7344  0F73  1683               	bsf	3,5	;RP0=1, select bank1
  7345  0F74  1303               	bcf	3,6	;RP1=0, select bank1
  7346  0F75  1ACF               	btfsc	_Load^(0+128),5
  7347  0F76  2F7C               	goto	l2919
  7348  0F77  1283               	bcf	3,5	;RP0=0, select bank0
  7349  0F78  1303               	bcf	3,6	;RP1=0, select bank0
  7350  0F79  01DC               	clrf	_getMain_All_Error_Status$2483
  7351  0F7A  01DD               	clrf	_getMain_All_Error_Status$2483+1
  7352  0F7B  2F81               	goto	l604
  7353  0F7C                     l2919:	
  7354  0F7C  3003               	movlw	3
  7355  0F7D  1283               	bcf	3,5	;RP0=0, select bank0
  7356  0F7E  00DC               	movwf	_getMain_All_Error_Status$2483
  7357  0F7F  3000               	movlw	0
  7358  0F80  00DD               	movwf	_getMain_All_Error_Status$2483+1
  7359  0F81                     l604:	
  7360  0F81  085C               	movf	_getMain_All_Error_Status$2483,w
  7361  0F82  00F5               	movwf	??_getMain_All_Error_Status
  7362  0F83  0875               	movf	??_getMain_All_Error_Status,w
  7363  0F84  00E1               	movwf	getMain_All_Error_Status@status
  7364  0F85                     l2921:	
  7365                           
  7366                           ;Main_B1.c: 382: }
  7367                           ;Main_B1.c: 394: if (status == 0 && command != 5) {
  7368  0F85  08E1               	movf	getMain_All_Error_Status@status,f
  7369  0F86  1D03               	skipz
  7370  0F87  2FA1               	goto	l605
  7371  0F88  0860               	movf	getMain_All_Error_Status@command,w
  7372  0F89  3A05               	xorlw	5
  7373  0F8A  1903               	skipnz
  7374  0F8B  2FA1               	goto	l605
  7375                           
  7376                           ;Main_B1.c: 395: status = getCDS_Status() == 0 ? 5 : 0;
  7377  0F8C  158A  238B  158A   	fcall	_getCDS_Status
  7378  0F8F  3A00               	xorlw	0
  7379  0F90  1903               	skipnz
  7380  0F91  2F97               	goto	l2929
  7381  0F92  1283               	bcf	3,5	;RP0=0, select bank0
  7382  0F93  1303               	bcf	3,6	;RP1=0, select bank0
  7383  0F94  01DE               	clrf	_getMain_All_Error_Status$2485
  7384  0F95  01DF               	clrf	_getMain_All_Error_Status$2485+1
  7385  0F96  2F9D               	goto	l609
  7386  0F97                     l2929:	
  7387  0F97  3005               	movlw	5
  7388  0F98  1283               	bcf	3,5	;RP0=0, select bank0
  7389  0F99  1303               	bcf	3,6	;RP1=0, select bank0
  7390  0F9A  00DE               	movwf	_getMain_All_Error_Status$2485
  7391  0F9B  3000               	movlw	0
  7392  0F9C  00DF               	movwf	_getMain_All_Error_Status$2485+1
  7393  0F9D                     l609:	
  7394  0F9D  085E               	movf	_getMain_All_Error_Status$2485,w
  7395  0F9E  00F5               	movwf	??_getMain_All_Error_Status
  7396  0F9F  0875               	movf	??_getMain_All_Error_Status,w
  7397  0FA0  00E1               	movwf	getMain_All_Error_Status@status
  7398  0FA1                     l605:	
  7399                           
  7400                           ;Main_B1.c: 396: }
  7401                           ;Main_B1.c: 398: return status;
  7402  0FA1  0861               	movf	getMain_All_Error_Status@status,w
  7403  0FA2  0008               	return
  7404  0FA3                     __end_of_getMain_All_Error_Status:	
  7405                           
  7406                           	psect	text44
  7407  0B8B                     __ptext44:	
  7408 ;; *************** function _getCDS_Status *****************
  7409 ;; Defined at:
  7410 ;;		line 40 in file "../src/CDS_B1.c"
  7411 ;; Parameters:    Size  Location     Type
  7412 ;;		None
  7413 ;; Auto vars:     Size  Location     Type
  7414 ;;  status          1    4[COMMON] unsigned char 
  7415 ;; Return value:  Size  Location     Type
  7416 ;;                  1    wreg      unsigned char 
  7417 ;; Registers used:
  7418 ;;		wreg, status,2
  7419 ;; Tracked objects:
  7420 ;;		On entry : 0/0
  7421 ;;		On exit  : 0/0
  7422 ;;		Unchanged: 0/0
  7423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7424 ;;      Params:         0       0       0       0
  7425 ;;      Locals:         1       0       0       0
  7426 ;;      Temps:          0       0       0       0
  7427 ;;      Totals:         1       0       0       0
  7428 ;;Total ram usage:        1 bytes
  7429 ;; Hardware stack levels used:    1
  7430 ;; Hardware stack levels required when called:    2
  7431 ;; This function calls:
  7432 ;;		Nothing
  7433 ;; This function is called by:
  7434 ;;		_getMain_All_Error_Status
  7435 ;; This function uses a non-reentrant model
  7436 ;;
  7437                           
  7438                           
  7439                           ;psect for function _getCDS_Status
  7440  0B8B                     _getCDS_Status:	
  7441                           
  7442                           ;CDS_B1.c: 41: char status = _CDS.Status == 1 ? 1 : 0;
  7443                           
  7444                           ;incstack = 0
  7445                           ; Regs used in _getCDS_Status: [wreg+status,2]
  7446  0B8B  3000               	movlw	0
  7447  0B8C  1283               	bcf	3,5	;RP0=0, select bank0
  7448  0B8D  1303               	bcf	3,6	;RP1=0, select bank0
  7449  0B8E  1A2D               	btfsc	__CDS,4
  7450  0B8F  3001               	movlw	1
  7451  0B90  00F4               	movwf	getCDS_Status@status
  7452                           
  7453                           ;CDS_B1.c: 42: return status;
  7454  0B91  0874               	movf	getCDS_Status@status,w
  7455  0B92  0008               	return
  7456  0B93                     __end_of_getCDS_Status:	
  7457                           
  7458                           	psect	text45
  7459  0B83                     __ptext45:	
  7460 ;; *************** function _getLoad_OK *****************
  7461 ;; Defined at:
  7462 ;;		line 219 in file "../src/OverLoad_B1.c"
  7463 ;; Parameters:    Size  Location     Type
  7464 ;;		None
  7465 ;; Auto vars:     Size  Location     Type
  7466 ;;  ok              1    4[COMMON] unsigned char 
  7467 ;; Return value:  Size  Location     Type
  7468 ;;                  1    wreg      unsigned char 
  7469 ;; Registers used:
  7470 ;;		wreg, status,2
  7471 ;; Tracked objects:
  7472 ;;		On entry : 0/0
  7473 ;;		On exit  : 0/0
  7474 ;;		Unchanged: 0/0
  7475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7476 ;;      Params:         0       0       0       0
  7477 ;;      Locals:         1       0       0       0
  7478 ;;      Temps:          0       0       0       0
  7479 ;;      Totals:         1       0       0       0
  7480 ;;Total ram usage:        1 bytes
  7481 ;; Hardware stack levels used:    1
  7482 ;; Hardware stack levels required when called:    2
  7483 ;; This function calls:
  7484 ;;		Nothing
  7485 ;; This function is called by:
  7486 ;;		_setLights_Main
  7487 ;; This function uses a non-reentrant model
  7488 ;;
  7489                           
  7490                           
  7491                           ;psect for function _getLoad_OK
  7492  0B83                     _getLoad_OK:	
  7493                           
  7494                           ;OverLoad_B1.c: 220: char ok = Load.OK == 1 ? 1 : 0;
  7495                           
  7496                           ;incstack = 0
  7497                           ; Regs used in _getLoad_OK: [wreg+status,2]
  7498  0B83  3000               	movlw	0
  7499  0B84  1683               	bsf	3,5	;RP0=1, select bank1
  7500  0B85  1303               	bcf	3,6	;RP1=0, select bank1
  7501  0B86  1BCF               	btfsc	_Load^(0+128),7
  7502  0B87  3001               	movlw	1
  7503  0B88  00F4               	movwf	getLoad_OK@ok
  7504                           
  7505                           ;OverLoad_B1.c: 221: return ok;
  7506  0B89  0874               	movf	getLoad_OK@ok,w
  7507  0B8A  0008               	return
  7508  0B8B                     __end_of_getLoad_OK:	
  7509                           
  7510                           	psect	text46
  7511  06F2                     __ptext46:	
  7512 ;; *************** function _Lights_Control *****************
  7513 ;; Defined at:
  7514 ;;		line 150 in file "../src/TriacRelay_B1.c"
  7515 ;; Parameters:    Size  Location     Type
  7516 ;;  lights          1    wreg     unsigned char 
  7517 ;; Auto vars:     Size  Location     Type
  7518 ;;  lights          1    4[BANK0 ] unsigned char 
  7519 ;; Return value:  Size  Location     Type
  7520 ;;		None               void
  7521 ;; Registers used:
  7522 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7523 ;; Tracked objects:
  7524 ;;		On entry : 0/0
  7525 ;;		On exit  : 0/0
  7526 ;;		Unchanged: 0/0
  7527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7528 ;;      Params:         0       0       0       0
  7529 ;;      Locals:         0       3       0       0
  7530 ;;      Temps:          0       2       0       0
  7531 ;;      Totals:         0       5       0       0
  7532 ;;Total ram usage:        5 bytes
  7533 ;; Hardware stack levels used:    1
  7534 ;; Hardware stack levels required when called:    3
  7535 ;; This function calls:
  7536 ;;		_LightsPointSelect
  7537 ;; This function is called by:
  7538 ;;		_Lights_Main
  7539 ;; This function uses a non-reentrant model
  7540 ;;
  7541                           
  7542                           
  7543                           ;psect for function _Lights_Control
  7544  06F2                     _Lights_Control:	
  7545                           
  7546                           ;incstack = 0
  7547                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7548                           ;Lights_Control@lights stored from wreg
  7549  06F2  1283               	bcf	3,5	;RP0=0, select bank0
  7550  06F3  1303               	bcf	3,6	;RP1=0, select bank0
  7551  06F4  00DE               	movwf	Lights_Control@lights
  7552                           
  7553                           ;TriacRelay_B1.c: 151: LightsPointSelect(lights);
  7554  06F5  085E               	movf	Lights_Control@lights,w
  7555  06F6  158A  23BA  118A   	fcall	_LightsPointSelect
  7556                           
  7557                           ;TriacRelay_B1.c: 152: if (Lights->GO == 1) {
  7558  06F9  1283               	bcf	3,5	;RP0=0, select bank0
  7559  06FA  1303               	bcf	3,6	;RP1=0, select bank0
  7560  06FB  0839               	movf	_Lights,w
  7561  06FC  0084               	movwf	4
  7562  06FD  1383               	bcf	3,7	;select IRP bank0
  7563  06FE  1C80               	btfss	0,1
  7564  06FF  0008               	return
  7565                           
  7566                           ;TriacRelay_B1.c: 153: Lights->Time++;
  7567  0700  3001               	movlw	1
  7568  0701  00DA               	movwf	??_Lights_Control
  7569  0702  0839               	movf	_Lights,w
  7570  0703  3E02               	addlw	2
  7571  0704  0084               	movwf	4
  7572  0705  085A               	movf	??_Lights_Control,w
  7573  0706  0780               	addwf	0,f
  7574                           
  7575                           ;TriacRelay_B1.c: 154: if (Lights->Time >= Lights->RelayValue && Lights->RelaySet == 0) 
      +                          {
  7576  0707  0839               	movf	_Lights,w
  7577  0708  3E06               	addlw	6
  7578  0709  0084               	movwf	4
  7579  070A  0800               	movf	0,w
  7580  070B  00DA               	movwf	??_Lights_Control
  7581  070C  0839               	movf	_Lights,w
  7582  070D  3E02               	addlw	2
  7583  070E  0084               	movwf	4
  7584  070F  0800               	movf	0,w
  7585  0710  00DB               	movwf	??_Lights_Control+1
  7586  0711  085A               	movf	??_Lights_Control,w
  7587  0712  025B               	subwf	??_Lights_Control+1,w
  7588  0713  1C03               	skipc
  7589  0714  2F2C               	goto	l4545
  7590  0715  0839               	movf	_Lights,w
  7591  0716  0084               	movwf	4
  7592  0717  1B80               	btfsc	0,7
  7593  0718  2F2C               	goto	l4545
  7594                           
  7595                           ;TriacRelay_B1.c: 155: Lights->RelaySet = 1;
  7596  0719  0839               	movf	_Lights,w
  7597  071A  0084               	movwf	4
  7598  071B  1780               	bsf	0,7
  7599                           
  7600                           ;TriacRelay_B1.c: 157: if (lights == 1) {
  7601  071C  085E               	movf	Lights_Control@lights,w
  7602  071D  3A01               	xorlw	1
  7603  071E  1D03               	skipz
  7604  071F  0008               	return
  7605                           
  7606                           ;TriacRelay_B1.c: 158: RA4 = Lights->Status == 1 ? 1 : 0;
  7607  0720  0839               	movf	_Lights,w
  7608  0721  0084               	movwf	4
  7609  0722  1D00               	btfss	0,2
  7610  0723  2F28               	goto	u5410
  7611  0724  1283               	bcf	3,5	;RP0=0, select bank0
  7612  0725  1303               	bcf	3,6	;RP1=0, select bank0
  7613  0726  1605               	bsf	5,4	;volatile
  7614  0727  0008               	return
  7615  0728                     u5410:	
  7616  0728  1283               	bcf	3,5	;RP0=0, select bank0
  7617  0729  1303               	bcf	3,6	;RP1=0, select bank0
  7618  072A  1205               	bcf	5,4	;volatile
  7619                           
  7620                           ;TriacRelay_B1.c: 159: }
  7621                           ;TriacRelay_B1.c: 172: } else if (Lights->Time >= Lights->TriacValue) {
  7622  072B  0008               	return
  7623  072C                     l4545:	
  7624  072C  0839               	movf	_Lights,w
  7625  072D  3E04               	addlw	4
  7626  072E  0084               	movwf	4
  7627  072F  1383               	bcf	3,7	;select IRP bank0
  7628  0730  0800               	movf	0,w
  7629  0731  00DA               	movwf	??_Lights_Control
  7630  0732  0839               	movf	_Lights,w
  7631  0733  3E02               	addlw	2
  7632  0734  0084               	movwf	4
  7633  0735  0800               	movf	0,w
  7634  0736  00DB               	movwf	??_Lights_Control+1
  7635  0737  085A               	movf	??_Lights_Control,w
  7636  0738  025B               	subwf	??_Lights_Control+1,w
  7637  0739  1C03               	skipc
  7638  073A  0008               	return
  7639                           
  7640                           ;TriacRelay_B1.c: 173: Lights->Time = 0;
  7641  073B  0839               	movf	_Lights,w
  7642  073C  3E02               	addlw	2
  7643  073D  0084               	movwf	4
  7644  073E  0180               	clrf	0
  7645                           
  7646                           ;TriacRelay_B1.c: 174: Lights->GO = 0;
  7647  073F  0839               	movf	_Lights,w
  7648  0740  0084               	movwf	4
  7649  0741  1080               	bcf	0,1
  7650                           
  7651                           ;TriacRelay_B1.c: 175: Lights->RelaySet = 0;
  7652  0742  0839               	movf	_Lights,w
  7653  0743  0084               	movwf	4
  7654  0744  1380               	bcf	0,7
  7655                           
  7656                           ;TriacRelay_B1.c: 178: LightsControl.Detect = Lights->Status == 0 ? 1 : LightsControl.De
      +                          tect;
  7657  0745  0839               	movf	_Lights,w
  7658  0746  0084               	movwf	4
  7659  0747  1D00               	btfss	0,2
  7660  0748  2F51               	goto	l4557
  7661  0749  083A               	movf	_LightsControl,w
  7662  074A  3901               	andlw	1
  7663  074B  00DA               	movwf	??_Lights_Control
  7664  074C  01DB               	clrf	??_Lights_Control+1
  7665  074D  085A               	movf	??_Lights_Control,w
  7666  074E  00DC               	movwf	_Lights_Control$4856
  7667  074F  085B               	movf	??_Lights_Control+1,w
  7668  0750  2F54               	goto	L22
  7669  0751                     l4557:	
  7670  0751  3001               	movlw	1
  7671  0752  00DC               	movwf	_Lights_Control$4856
  7672  0753  3000               	movlw	0
  7673  0754                     L22:	
  7674  0754  00DD               	movwf	_Lights_Control$4856+1
  7675  0755  085C               	movf	_Lights_Control$4856,w
  7676  0756  103A               	bcf	_LightsControl,0
  7677  0757  1D03               	skipz
  7678  0758  143A               	bsf	_LightsControl,0
  7679                           
  7680                           ;TriacRelay_B1.c: 182: if (lights == 1) {
  7681  0759  085E               	movf	Lights_Control@lights,w
  7682  075A  3A01               	xorlw	1
  7683  075B  1D03               	skipz
  7684  075C  0008               	return
  7685                           
  7686                           ;TriacRelay_B1.c: 183: RB2 = 0;
  7687  075D  1106               	bcf	6,2	;volatile
  7688  075E  0008               	return
  7689  075F                     __end_of_Lights_Control:	
  7690                           
  7691                           	psect	text47
  7692  0CCA                     __ptext47:	
  7693 ;; *************** function _Lights_Close *****************
  7694 ;; Defined at:
  7695 ;;		line 74 in file "../src/TriacRelay_B1.c"
  7696 ;; Parameters:    Size  Location     Type
  7697 ;;		None
  7698 ;; Auto vars:     Size  Location     Type
  7699 ;;		None
  7700 ;; Return value:  Size  Location     Type
  7701 ;;		None               void
  7702 ;; Registers used:
  7703 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7704 ;; Tracked objects:
  7705 ;;		On entry : 0/0
  7706 ;;		On exit  : 0/0
  7707 ;;		Unchanged: 0/0
  7708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7709 ;;      Params:         0       0       0       0
  7710 ;;      Locals:         0       0       0       0
  7711 ;;      Temps:          0       1       0       0
  7712 ;;      Totals:         0       1       0       0
  7713 ;;Total ram usage:        1 bytes
  7714 ;; Hardware stack levels used:    1
  7715 ;; Hardware stack levels required when called:    5
  7716 ;; This function calls:
  7717 ;;		_getMain_LightsStatus
  7718 ;; This function is called by:
  7719 ;;		_Lights_Main
  7720 ;; This function uses a non-reentrant model
  7721 ;;
  7722                           
  7723                           
  7724                           ;psect for function _Lights_Close
  7725  0CCA                     _Lights_Close:	
  7726                           
  7727                           ;TriacRelay_B1.c: 75: if (LightsControl.Detect == 1) {
  7728                           
  7729                           ;incstack = 0
  7730                           ; Regs used in _Lights_Close: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7731  0CCA  1283               	bcf	3,5	;RP0=0, select bank0
  7732  0CCB  1303               	bcf	3,6	;RP1=0, select bank0
  7733  0CCC  1C3A               	btfss	_LightsControl,0
  7734  0CCD  0008               	return
  7735                           
  7736                           ;TriacRelay_B1.c: 76: LightsControl.Detect = 0;
  7737  0CCE  103A               	bcf	_LightsControl,0
  7738                           
  7739                           ;TriacRelay_B1.c: 77: LightsControl.LoadGO = getMain_LightsStatus() == 0 ? 0 : 1;
  7740  0CCF  158A  25CB         	fcall	_getMain_LightsStatus
  7741  0CD1  3800               	iorlw	0
  7742  0CD2  3000               	movlw	0
  7743  0CD3  1D03               	skipz
  7744  0CD4  3001               	movlw	1
  7745  0CD5  1283               	bcf	3,5	;RP0=0, select bank0
  7746  0CD6  1303               	bcf	3,6	;RP1=0, select bank0
  7747  0CD7  00E1               	movwf	??_Lights_Close
  7748  0CD8  0DE1               	rlf	??_Lights_Close,f
  7749  0CD9  083A               	movf	_LightsControl,w
  7750  0CDA  0661               	xorwf	??_Lights_Close,w
  7751  0CDB  39FD               	andlw	-3
  7752  0CDC  0661               	xorwf	??_Lights_Close,w
  7753  0CDD  00BA               	movwf	_LightsControl
  7754  0CDE  0008               	return
  7755  0CDF                     __end_of_Lights_Close:	
  7756                           
  7757                           	psect	text48
  7758  0DCB                     __ptext48:	
  7759 ;; *************** function _getMain_LightsStatus *****************
  7760 ;; Defined at:
  7761 ;;		line 334 in file "../src/Main_B1.c"
  7762 ;; Parameters:    Size  Location     Type
  7763 ;;		None
  7764 ;; Auto vars:     Size  Location     Type
  7765 ;;  i               2    4[BANK0 ] int 
  7766 ;;  status          1    6[BANK0 ] unsigned char 
  7767 ;;  count           1    3[BANK0 ] unsigned char 
  7768 ;; Return value:  Size  Location     Type
  7769 ;;                  1    wreg      unsigned char 
  7770 ;; Registers used:
  7771 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7772 ;; Tracked objects:
  7773 ;;		On entry : 0/0
  7774 ;;		On exit  : 0/0
  7775 ;;		Unchanged: 0/0
  7776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7777 ;;      Params:         0       0       0       0
  7778 ;;      Locals:         0       4       0       0
  7779 ;;      Temps:          0       1       0       0
  7780 ;;      Totals:         0       5       0       0
  7781 ;;Total ram usage:        5 bytes
  7782 ;; Hardware stack levels used:    1
  7783 ;; Hardware stack levels required when called:    4
  7784 ;; This function calls:
  7785 ;;		_getLights_Status
  7786 ;; This function is called by:
  7787 ;;		_Load_Main
  7788 ;;		_setTemp_Main
  7789 ;;		_Lights_Close
  7790 ;; This function uses a non-reentrant model
  7791 ;;
  7792                           
  7793                           
  7794                           ;psect for function _getMain_LightsStatus
  7795  0DCB                     _getMain_LightsStatus:	
  7796                           
  7797                           ;Main_B1.c: 335: char status = 0;
  7798                           
  7799                           ;incstack = 0
  7800                           ; Regs used in _getMain_LightsStatus: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7801  0DCB  1283               	bcf	3,5	;RP0=0, select bank0
  7802  0DCC  1303               	bcf	3,6	;RP1=0, select bank0
  7803  0DCD  01E0               	clrf	getMain_LightsStatus@status
  7804                           
  7805                           ;Main_B1.c: 338: char count = 1;
  7806  0DCE  01DD               	clrf	getMain_LightsStatus@count
  7807  0DCF  0ADD               	incf	getMain_LightsStatus@count,f
  7808                           
  7809                           ;Main_B1.c: 347: for (int i = 0; i < count; i++) {
  7810  0DD0  01DE               	clrf	getMain_LightsStatus@i
  7811  0DD1  01DF               	clrf	getMain_LightsStatus@i+1
  7812  0DD2                     l4223:	
  7813  0DD2  085F               	movf	getMain_LightsStatus@i+1,w
  7814  0DD3  3A80               	xorlw	128
  7815  0DD4  00DC               	movwf	??_getMain_LightsStatus
  7816  0DD5  3080               	movlw	128
  7817  0DD6  025C               	subwf	??_getMain_LightsStatus,w
  7818  0DD7  1D03               	skipz
  7819  0DD8  2DDB               	goto	u4735
  7820  0DD9  085D               	movf	getMain_LightsStatus@count,w
  7821  0DDA  025E               	subwf	getMain_LightsStatus@i,w
  7822  0DDB                     u4735:	
  7823  0DDB  1803               	btfsc	3,0
  7824  0DDC  2DF7               	goto	l4225
  7825                           
  7826                           ;Main_B1.c: 348: if (status == 0) {
  7827  0DDD  1283               	bcf	3,5	;RP0=0, select bank0
  7828  0DDE  1303               	bcf	3,6	;RP1=0, select bank0
  7829  0DDF  08E0               	movf	getMain_LightsStatus@status,f
  7830  0DE0  1D03               	skipz
  7831  0DE1  2DF0               	goto	l4221
  7832                           
  7833                           ;Main_B1.c: 350: status = getLights_Status(i + 1) == 1 ? 1 : 0;
  7834  0DE2  085E               	movf	getMain_LightsStatus@i,w
  7835  0DE3  3E01               	addlw	1
  7836  0DE4  158A  2449  158A   	fcall	_getLights_Status
  7837  0DE7  3A01               	xorlw	1
  7838  0DE8  3000               	movlw	0
  7839  0DE9  1903               	skipnz
  7840  0DEA  3001               	movlw	1
  7841  0DEB  1283               	bcf	3,5	;RP0=0, select bank0
  7842  0DEC  1303               	bcf	3,6	;RP1=0, select bank0
  7843  0DED  00DC               	movwf	??_getMain_LightsStatus
  7844  0DEE  085C               	movf	??_getMain_LightsStatus,w
  7845  0DEF  00E0               	movwf	getMain_LightsStatus@status
  7846  0DF0                     l4221:	
  7847  0DF0  3001               	movlw	1
  7848  0DF1  07DE               	addwf	getMain_LightsStatus@i,f
  7849  0DF2  1803               	skipnc
  7850  0DF3  0ADF               	incf	getMain_LightsStatus@i+1,f
  7851  0DF4  3000               	movlw	0
  7852  0DF5  07DF               	addwf	getMain_LightsStatus@i+1,f
  7853  0DF6  2DD2               	goto	l4223
  7854  0DF7                     l4225:	
  7855                           
  7856                           ;Main_B1.c: 355: }
  7857                           ;Main_B1.c: 356: }
  7858                           ;Main_B1.c: 357: return status;
  7859  0DF7  1283               	bcf	3,5	;RP0=0, select bank0
  7860  0DF8  1303               	bcf	3,6	;RP1=0, select bank0
  7861  0DF9  0860               	movf	getMain_LightsStatus@status,w
  7862  0DFA  0008               	return
  7863  0DFB                     __end_of_getMain_LightsStatus:	
  7864                           
  7865                           	psect	text49
  7866  0C49                     __ptext49:	
  7867 ;; *************** function _getLights_Status *****************
  7868 ;; Defined at:
  7869 ;;		line 202 in file "../src/TriacRelay_B1.c"
  7870 ;; Parameters:    Size  Location     Type
  7871 ;;  lights          1    wreg     unsigned char 
  7872 ;; Auto vars:     Size  Location     Type
  7873 ;;  lights          1    0[BANK0 ] unsigned char 
  7874 ;;  status          1    1[BANK0 ] unsigned char 
  7875 ;; Return value:  Size  Location     Type
  7876 ;;                  1    wreg      unsigned char 
  7877 ;; Registers used:
  7878 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7879 ;; Tracked objects:
  7880 ;;		On entry : 0/0
  7881 ;;		On exit  : 0/0
  7882 ;;		Unchanged: 0/0
  7883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7884 ;;      Params:         0       0       0       0
  7885 ;;      Locals:         0       2       0       0
  7886 ;;      Temps:          0       0       0       0
  7887 ;;      Totals:         0       2       0       0
  7888 ;;Total ram usage:        2 bytes
  7889 ;; Hardware stack levels used:    1
  7890 ;; Hardware stack levels required when called:    3
  7891 ;; This function calls:
  7892 ;;		_LightsPointSelect
  7893 ;; This function is called by:
  7894 ;;		_getMain_LightsStatus
  7895 ;;		_PIR_Main
  7896 ;; This function uses a non-reentrant model
  7897 ;;
  7898                           
  7899                           
  7900                           ;psect for function _getLights_Status
  7901  0C49                     _getLights_Status:	
  7902                           
  7903                           ;incstack = 0
  7904                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7905                           ;getLights_Status@lights stored from wreg
  7906  0C49  1283               	bcf	3,5	;RP0=0, select bank0
  7907  0C4A  1303               	bcf	3,6	;RP1=0, select bank0
  7908  0C4B  00DA               	movwf	getLights_Status@lights
  7909                           
  7910                           ;TriacRelay_B1.c: 203: LightsPointSelect(lights);
  7911  0C4C  085A               	movf	getLights_Status@lights,w
  7912  0C4D  158A  23BA         	fcall	_LightsPointSelect
  7913                           
  7914                           ;TriacRelay_B1.c: 204: char status = Lights->Status == 1 ? 1 : 0;
  7915  0C4F  1283               	bcf	3,5	;RP0=0, select bank0
  7916  0C50  1303               	bcf	3,6	;RP1=0, select bank0
  7917  0C51  0839               	movf	_Lights,w
  7918  0C52  0084               	movwf	4
  7919  0C53  3000               	movlw	0
  7920  0C54  1383               	bcf	3,7	;select IRP bank0
  7921  0C55  1900               	btfsc	0,2
  7922  0C56  3001               	movlw	1
  7923  0C57  00DB               	movwf	getLights_Status@status
  7924                           
  7925                           ;TriacRelay_B1.c: 205: return status;
  7926  0C58  085B               	movf	getLights_Status@status,w
  7927  0C59  0008               	return
  7928  0C5A                     __end_of_getLights_Status:	
  7929                           
  7930                           	psect	text50
  7931  0B5C                     __ptext50:	
  7932 ;; *************** function _Lights_Initialization *****************
  7933 ;; Defined at:
  7934 ;;		line 34 in file "../src/TriacRelay_B1.c"
  7935 ;; Parameters:    Size  Location     Type
  7936 ;;		None
  7937 ;; Auto vars:     Size  Location     Type
  7938 ;;		None
  7939 ;; Return value:  Size  Location     Type
  7940 ;;		None               void
  7941 ;; Registers used:
  7942 ;;		wreg, status,2, status,0, pclath, cstack
  7943 ;; Tracked objects:
  7944 ;;		On entry : 0/0
  7945 ;;		On exit  : 0/0
  7946 ;;		Unchanged: 0/0
  7947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7948 ;;      Params:         0       0       0       0
  7949 ;;      Locals:         0       0       0       0
  7950 ;;      Temps:          0       0       0       0
  7951 ;;      Totals:         0       0       0       0
  7952 ;;Total ram usage:        0 bytes
  7953 ;; Hardware stack levels used:    1
  7954 ;; Hardware stack levels required when called:    4
  7955 ;; This function calls:
  7956 ;;		_setLights_Initialization
  7957 ;; This function is called by:
  7958 ;;		_main
  7959 ;; This function uses a non-reentrant model
  7960 ;;
  7961                           
  7962                           
  7963                           ;psect for function _Lights_Initialization
  7964  0B5C                     _Lights_Initialization:	
  7965                           
  7966                           ;TriacRelay_B1.c: 36: setLights_Initialization(1);
  7967                           
  7968                           ;incstack = 0
  7969                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7970  0B5C  3001               	movlw	1
  7971  0B5D  158A  2375         	fcall	_setLights_Initialization
  7972  0B5F  0008               	return
  7973  0B60                     __end_of_Lights_Initialization:	
  7974                           
  7975                           	psect	text51
  7976  0B75                     __ptext51:	
  7977 ;; *************** function _setLights_Initialization *****************
  7978 ;; Defined at:
  7979 ;;		line 49 in file "../src/TriacRelay_B1.c"
  7980 ;; Parameters:    Size  Location     Type
  7981 ;;  lights          1    wreg     unsigned char 
  7982 ;; Auto vars:     Size  Location     Type
  7983 ;;  lights          1    0[BANK0 ] unsigned char 
  7984 ;; Return value:  Size  Location     Type
  7985 ;;		None               void
  7986 ;; Registers used:
  7987 ;;		wreg, status,2, status,0, pclath, cstack
  7988 ;; Tracked objects:
  7989 ;;		On entry : 0/0
  7990 ;;		On exit  : 0/0
  7991 ;;		Unchanged: 0/0
  7992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7993 ;;      Params:         0       0       0       0
  7994 ;;      Locals:         0       1       0       0
  7995 ;;      Temps:          0       0       0       0
  7996 ;;      Totals:         0       1       0       0
  7997 ;;Total ram usage:        1 bytes
  7998 ;; Hardware stack levels used:    1
  7999 ;; Hardware stack levels required when called:    3
  8000 ;; This function calls:
  8001 ;;		_LightsPointSelect
  8002 ;; This function is called by:
  8003 ;;		_Lights_Initialization
  8004 ;; This function uses a non-reentrant model
  8005 ;;
  8006                           
  8007                           
  8008                           ;psect for function _setLights_Initialization
  8009  0B75                     _setLights_Initialization:	
  8010                           
  8011                           ;incstack = 0
  8012                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8013                           ;setLights_Initialization@lights stored from wreg
  8014  0B75  1283               	bcf	3,5	;RP0=0, select bank0
  8015  0B76  1303               	bcf	3,6	;RP1=0, select bank0
  8016  0B77  00DA               	movwf	setLights_Initialization@lights
  8017                           
  8018                           ;TriacRelay_B1.c: 50: LightsPointSelect(lights);
  8019  0B78  085A               	movf	setLights_Initialization@lights,w
  8020  0B79  158A  23BA         	fcall	_LightsPointSelect
  8021  0B7B  0008               	return
  8022  0B7C                     __end_of_setLights_Initialization:	
  8023                           
  8024                           	psect	text52
  8025  0BBA                     __ptext52:	
  8026 ;; *************** function _LightsPointSelect *****************
  8027 ;; Defined at:
  8028 ;;		line 10 in file "../src/TriacRelay_B1.c"
  8029 ;; Parameters:    Size  Location     Type
  8030 ;;  lights          1    wreg     unsigned char 
  8031 ;; Auto vars:     Size  Location     Type
  8032 ;;  lights          1    5[COMMON] unsigned char 
  8033 ;; Return value:  Size  Location     Type
  8034 ;;		None               void
  8035 ;; Registers used:
  8036 ;;		wreg
  8037 ;; Tracked objects:
  8038 ;;		On entry : 0/0
  8039 ;;		On exit  : 0/0
  8040 ;;		Unchanged: 0/0
  8041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8042 ;;      Params:         0       0       0       0
  8043 ;;      Locals:         1       0       0       0
  8044 ;;      Temps:          1       0       0       0
  8045 ;;      Totals:         2       0       0       0
  8046 ;;Total ram usage:        2 bytes
  8047 ;; Hardware stack levels used:    1
  8048 ;; Hardware stack levels required when called:    2
  8049 ;; This function calls:
  8050 ;;		Nothing
  8051 ;; This function is called by:
  8052 ;;		_setLights_Initialization
  8053 ;;		_setLights_Main
  8054 ;;		_setLights
  8055 ;;		_Lights_Control
  8056 ;;		_getLights_Status
  8057 ;;		_setLights_Trigger
  8058 ;;		_setLights_Line
  8059 ;;		_getAll_Lights_Line
  8060 ;; This function uses a non-reentrant model
  8061 ;;
  8062                           
  8063                           
  8064                           ;psect for function _LightsPointSelect
  8065  0BBA                     _LightsPointSelect:	
  8066                           
  8067                           ;incstack = 0
  8068                           ; Regs used in _LightsPointSelect: [wreg]
  8069                           ;LightsPointSelect@lights stored from wreg
  8070  0BBA  00F5               	movwf	LightsPointSelect@lights
  8071                           
  8072                           ;TriacRelay_B1.c: 14: if (lights == 1) {
  8073  0BBB  0875               	movf	LightsPointSelect@lights,w
  8074  0BBC  3A01               	xorlw	1
  8075  0BBD  1D03               	skipz
  8076  0BBE  0008               	return
  8077                           
  8078                           ;TriacRelay_B1.c: 15: Lights = &Lights1;
  8079  0BBF  3047               	movlw	_Lights1& (0+255)
  8080  0BC0  00F4               	movwf	??_LightsPointSelect
  8081  0BC1  0874               	movf	??_LightsPointSelect,w
  8082  0BC2  1283               	bcf	3,5	;RP0=0, select bank0
  8083  0BC3  1303               	bcf	3,6	;RP1=0, select bank0
  8084  0BC4  00B9               	movwf	_Lights
  8085  0BC5  0008               	return
  8086  0BC6                     __end_of_LightsPointSelect:	
  8087                           
  8088                           	psect	text53
  8089  0BFC                     __ptext53:	
  8090 ;; *************** function _LED_Main *****************
  8091 ;; Defined at:
  8092 ;;		line 47 in file "../src/LED_B1.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;		None
  8095 ;; Auto vars:     Size  Location     Type
  8096 ;;		None
  8097 ;; Return value:  Size  Location     Type
  8098 ;;		None               void
  8099 ;; Registers used:
  8100 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8101 ;; Tracked objects:
  8102 ;;		On entry : 0/0
  8103 ;;		On exit  : 0/0
  8104 ;;		Unchanged: 0/0
  8105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8106 ;;      Params:         0       0       0       0
  8107 ;;      Locals:         0       0       0       0
  8108 ;;      Temps:          0       0       0       0
  8109 ;;      Totals:         0       0       0       0
  8110 ;;Total ram usage:        0 bytes
  8111 ;; Hardware stack levels used:    1
  8112 ;; Hardware stack levels required when called:    5
  8113 ;; This function calls:
  8114 ;;		_setLED_Main
  8115 ;;		_setPIRLED_Main
  8116 ;; This function is called by:
  8117 ;;		_main
  8118 ;; This function uses a non-reentrant model
  8119 ;;
  8120                           
  8121                           
  8122                           ;psect for function _LED_Main
  8123  0BFC                     _LED_Main:	
  8124                           
  8125                           ;LED_B1.c: 49: setLED_Main(1);
  8126                           
  8127                           ;incstack = 0
  8128                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8129  0BFC  3001               	movlw	1
  8130  0BFD  118A  27C3  158A   	fcall	_setLED_Main
  8131                           
  8132                           ;LED_B1.c: 52: setLED_Main(2);
  8133  0C00  3002               	movlw	2
  8134  0C01  118A  27C3  158A   	fcall	_setLED_Main
  8135                           
  8136                           ;LED_B1.c: 58: setLED_Main(99);
  8137  0C04  3063               	movlw	99
  8138  0C05  118A  27C3  158A   	fcall	_setLED_Main
  8139                           
  8140                           ;LED_B1.c: 61: setPIRLED_Main();
  8141  0C08  118A  25A1         	fcall	_setPIRLED_Main
  8142  0C0A  0008               	return
  8143  0C0B                     __end_of_LED_Main:	
  8144                           
  8145                           	psect	text54
  8146  05A1                     __ptext54:	
  8147 ;; *************** function _setPIRLED_Main *****************
  8148 ;; Defined at:
  8149 ;;		line 248 in file "../src/LED_B1.c"
  8150 ;; Parameters:    Size  Location     Type
  8151 ;;		None
  8152 ;; Auto vars:     Size  Location     Type
  8153 ;;  count           1    3[BANK0 ] unsigned char 
  8154 ;; Return value:  Size  Location     Type
  8155 ;;		None               void
  8156 ;; Registers used:
  8157 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8158 ;; Tracked objects:
  8159 ;;		On entry : 0/0
  8160 ;;		On exit  : 0/0
  8161 ;;		Unchanged: 0/0
  8162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8163 ;;      Params:         0       0       0       0
  8164 ;;      Locals:         0       1       0       0
  8165 ;;      Temps:          0       1       0       0
  8166 ;;      Totals:         0       2       0       0
  8167 ;;Total ram usage:        2 bytes
  8168 ;; Hardware stack levels used:    1
  8169 ;; Hardware stack levels required when called:    4
  8170 ;; This function calls:
  8171 ;;		_setLED
  8172 ;; This function is called by:
  8173 ;;		_LED_Main
  8174 ;; This function uses a non-reentrant model
  8175 ;;
  8176                           
  8177                           
  8178                           ;psect for function _setPIRLED_Main
  8179  05A1                     _setPIRLED_Main:	
  8180                           
  8181                           ;LED_B1.c: 249: char count;
  8182                           ;LED_B1.c: 250: if (PIRLED.GO == 1) {
  8183                           
  8184                           ;incstack = 0
  8185                           ; Regs used in _setPIRLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8186  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  8187  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  8188  05A3  1C32               	btfss	_PIRLED,0
  8189  05A4  0008               	return
  8190                           
  8191                           ;LED_B1.c: 251: PIRLED.Time++;
  8192  05A5  3001               	movlw	1
  8193  05A6  07B4               	addwf	_PIRLED+2,f
  8194  05A7  1803               	skipnc
  8195  05A8  0AB5               	incf	_PIRLED+3,f
  8196  05A9  3000               	movlw	0
  8197  05AA  07B5               	addwf	_PIRLED+3,f
  8198                           
  8199                           ;LED_B1.c: 252: if (PIRLED.Time >= 500 / 10) {
  8200  05AB  3000               	movlw	0
  8201  05AC  0235               	subwf	_PIRLED+3,w
  8202  05AD  3032               	movlw	50
  8203  05AE  1903               	skipnz
  8204  05AF  0234               	subwf	_PIRLED+2,w
  8205  05B0  1C03               	skipc
  8206  05B1  0008               	return
  8207                           
  8208                           ;LED_B1.c: 253: PIRLED.Time = 0;
  8209  05B2  01B4               	clrf	_PIRLED+2
  8210  05B3  01B5               	clrf	_PIRLED+3
  8211                           
  8212                           ;LED_B1.c: 254: setLED(1, 0);
  8213  05B4  01DA               	clrf	setLED@command
  8214  05B5  3001               	movlw	1
  8215  05B6  118A  2612  118A   	fcall	_setLED
  8216                           
  8217                           ;LED_B1.c: 255: setLED(2, 0);
  8218  05B9  1283               	bcf	3,5	;RP0=0, select bank0
  8219  05BA  1303               	bcf	3,6	;RP1=0, select bank0
  8220  05BB  01DA               	clrf	setLED@command
  8221  05BC  3002               	movlw	2
  8222  05BD  118A  2612  118A   	fcall	_setLED
  8223                           
  8224                           ;LED_B1.c: 256: if (PIRLED.GO1 == 1) {
  8225  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  8226  05C1  1303               	bcf	3,6	;RP1=0, select bank0
  8227  05C2  1CB2               	btfss	_PIRLED,1
  8228  05C3  2DC8               	goto	l4359
  8229                           
  8230                           ;LED_B1.c: 257: count = 4;
  8231  05C4  3004               	movlw	4
  8232  05C5  00DC               	movwf	??_setPIRLED_Main
  8233  05C6  085C               	movf	??_setPIRLED_Main,w
  8234  05C7  00DD               	movwf	setPIRLED_Main@count
  8235  05C8                     l4359:	
  8236                           
  8237                           ;LED_B1.c: 258: }
  8238                           ;LED_B1.c: 259: if (PIRLED.GO2 == 1) {
  8239  05C8  1D32               	btfss	_PIRLED,2
  8240  05C9  2DCE               	goto	l4363
  8241                           
  8242                           ;LED_B1.c: 260: count = 6;
  8243  05CA  3006               	movlw	6
  8244  05CB  00DC               	movwf	??_setPIRLED_Main
  8245  05CC  085C               	movf	??_setPIRLED_Main,w
  8246  05CD  00DD               	movwf	setPIRLED_Main@count
  8247  05CE                     l4363:	
  8248                           
  8249                           ;LED_B1.c: 261: }
  8250                           ;LED_B1.c: 262: if (PIRLED.GO3 == 1) {
  8251  05CE  1DB2               	btfss	_PIRLED,3
  8252  05CF  2DD4               	goto	l4367
  8253                           
  8254                           ;LED_B1.c: 263: count = 8;
  8255  05D0  3008               	movlw	8
  8256  05D1  00DC               	movwf	??_setPIRLED_Main
  8257  05D2  085C               	movf	??_setPIRLED_Main,w
  8258  05D3  00DD               	movwf	setPIRLED_Main@count
  8259  05D4                     l4367:	
  8260                           
  8261                           ;LED_B1.c: 264: }
  8262                           ;LED_B1.c: 265: PIRLED.Count++;
  8263  05D4  3001               	movlw	1
  8264  05D5  00DC               	movwf	??_setPIRLED_Main
  8265  05D6  085C               	movf	??_setPIRLED_Main,w
  8266  05D7  07B3               	addwf	_PIRLED+1,f
  8267                           
  8268                           ;LED_B1.c: 266: if (PIRLED.Count == 1 || PIRLED.Count == 2) {
  8269  05D8  0833               	movf	_PIRLED+1,w
  8270  05D9  3A01               	xorlw	1
  8271  05DA  1903               	skipnz
  8272  05DB  2DE0               	goto	l4373
  8273  05DC  0833               	movf	_PIRLED+1,w
  8274  05DD  3A02               	xorlw	2
  8275  05DE  1D03               	skipz
  8276  05DF  2DF4               	goto	l4377
  8277  05E0                     l4373:	
  8278                           
  8279                           ;LED_B1.c: 267: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  8280  05E0  1003               	clrc
  8281  05E1  1E32               	btfss	_PIRLED,4
  8282  05E2  1403               	setc
  8283  05E3  1C03               	btfss	3,0
  8284  05E4  2DE9               	goto	u5030
  8285  05E5  1283               	bcf	3,5	;RP0=0, select bank0
  8286  05E6  1303               	bcf	3,6	;RP1=0, select bank0
  8287  05E7  1632               	bsf	_PIRLED,4
  8288  05E8  2DEC               	goto	l4375
  8289  05E9                     u5030:	
  8290  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  8291  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  8292  05EB  1232               	bcf	_PIRLED,4
  8293  05EC                     l4375:	
  8294                           
  8295                           ;LED_B1.c: 268: setLED(2, PIRLED.status);
  8296  05EC  3000               	movlw	0
  8297  05ED  1A32               	btfsc	_PIRLED,4
  8298  05EE  3001               	movlw	1
  8299  05EF  00DA               	movwf	setLED@command
  8300  05F0  3002               	movlw	2
  8301  05F1  118A  2612         	fcall	_setLED
  8302                           
  8303                           ;LED_B1.c: 269: } else {
  8304  05F3  0008               	return
  8305  05F4                     l4377:	
  8306                           
  8307                           ;LED_B1.c: 270: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  8308  05F4  1003               	clrc
  8309  05F5  1283               	bcf	3,5	;RP0=0, select bank0
  8310  05F6  1303               	bcf	3,6	;RP1=0, select bank0
  8311  05F7  1E32               	btfss	_PIRLED,4
  8312  05F8  1403               	setc
  8313  05F9  1C03               	btfss	3,0
  8314  05FA  2DFF               	goto	u5050
  8315  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  8316  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  8317  05FD  1632               	bsf	_PIRLED,4
  8318  05FE  2E02               	goto	l4379
  8319  05FF                     u5050:	
  8320  05FF  1283               	bcf	3,5	;RP0=0, select bank0
  8321  0600  1303               	bcf	3,6	;RP1=0, select bank0
  8322  0601  1232               	bcf	_PIRLED,4
  8323  0602                     l4379:	
  8324                           
  8325                           ;LED_B1.c: 271: setLED(1, PIRLED.status);
  8326  0602  3000               	movlw	0
  8327  0603  1A32               	btfsc	_PIRLED,4
  8328  0604  3001               	movlw	1
  8329  0605  00DA               	movwf	setLED@command
  8330  0606  3001               	movlw	1
  8331  0607  118A  2612  118A   	fcall	_setLED
  8332                           
  8333                           ;LED_B1.c: 272: if (PIRLED.Count == count) {
  8334  060A  1283               	bcf	3,5	;RP0=0, select bank0
  8335  060B  1303               	bcf	3,6	;RP1=0, select bank0
  8336  060C  0833               	movf	_PIRLED+1,w
  8337  060D  065D               	xorwf	setPIRLED_Main@count,w
  8338  060E  1D03               	skipz
  8339  060F  0008               	return
  8340                           
  8341                           ;LED_B1.c: 273: PIRLED.Count = 0;
  8342  0610  01B3               	clrf	_PIRLED+1
  8343  0611  0008               	return
  8344  0612                     __end_of_setPIRLED_Main:	
  8345                           
  8346                           	psect	text55
  8347  07C3                     __ptext55:	
  8348 ;; *************** function _setLED_Main *****************
  8349 ;; Defined at:
  8350 ;;		line 216 in file "../src/LED_B1.c"
  8351 ;; Parameters:    Size  Location     Type
  8352 ;;  led             1    wreg     unsigned char 
  8353 ;; Auto vars:     Size  Location     Type
  8354 ;;  led             1    2[BANK0 ] unsigned char 
  8355 ;; Return value:  Size  Location     Type
  8356 ;;		None               void
  8357 ;; Registers used:
  8358 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8359 ;; Tracked objects:
  8360 ;;		On entry : 0/0
  8361 ;;		On exit  : 0/0
  8362 ;;		Unchanged: 0/0
  8363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8364 ;;      Params:         0       0       0       0
  8365 ;;      Locals:         0       1       0       0
  8366 ;;      Temps:          0       2       0       0
  8367 ;;      Totals:         0       3       0       0
  8368 ;;Total ram usage:        3 bytes
  8369 ;; Hardware stack levels used:    1
  8370 ;; Hardware stack levels required when called:    3
  8371 ;; This function calls:
  8372 ;;		_LedPointSelect
  8373 ;; This function is called by:
  8374 ;;		_LED_Main
  8375 ;; This function uses a non-reentrant model
  8376 ;;
  8377                           
  8378                           
  8379                           ;psect for function _setLED_Main
  8380  07C3                     _setLED_Main:	
  8381                           
  8382                           ;incstack = 0
  8383                           ; Regs used in _setLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8384                           ;setLED_Main@led stored from wreg
  8385  07C3  1283               	bcf	3,5	;RP0=0, select bank0
  8386  07C4  1303               	bcf	3,6	;RP1=0, select bank0
  8387  07C5  00DC               	movwf	setLED_Main@led
  8388                           
  8389                           ;LED_B1.c: 217: LedPointSelect(led);
  8390  07C6  085C               	movf	setLED_Main@led,w
  8391  07C7  158A  250A  118A   	fcall	_LedPointSelect
  8392                           
  8393                           ;LED_B1.c: 218: if (LED->GO == 1) {
  8394  07CA  0878               	movf	_LED,w
  8395  07CB  0084               	movwf	4
  8396  07CC  1383               	bcf	3,7	;select IRP bank0
  8397  07CD  1C80               	btfss	0,1
  8398  07CE  0008               	return
  8399                           
  8400                           ;LED_B1.c: 219: LED->Time++;
  8401  07CF  0A78               	incf	_LED,w
  8402  07D0  0084               	movwf	4
  8403  07D1  3001               	movlw	1
  8404  07D2  0780               	addwf	0,f
  8405  07D3  0A84               	incf	4,f
  8406  07D4  1803               	skipnc
  8407  07D5  0A80               	incf	0,f
  8408                           
  8409                           ;LED_B1.c: 220: if (LED->Time >= 500 / 10) {
  8410  07D6  0A78               	incf	_LED,w
  8411  07D7  0084               	movwf	4
  8412  07D8  0800               	movf	0,w
  8413  07D9  1283               	bcf	3,5	;RP0=0, select bank0
  8414  07DA  1303               	bcf	3,6	;RP1=0, select bank0
  8415  07DB  00DA               	movwf	??_setLED_Main
  8416  07DC  0A84               	incf	4,f
  8417  07DD  0800               	movf	0,w
  8418  07DE  00DB               	movwf	??_setLED_Main+1
  8419  07DF  3000               	movlw	0
  8420  07E0  025B               	subwf	??_setLED_Main+1,w
  8421  07E1  3032               	movlw	50
  8422  07E2  1903               	skipnz
  8423  07E3  025A               	subwf	??_setLED_Main,w
  8424  07E4  1C03               	skipc
  8425  07E5  0008               	return
  8426                           
  8427                           ;LED_B1.c: 221: LED->Time = 0;
  8428  07E6  0A78               	incf	_LED,w
  8429  07E7  0084               	movwf	4
  8430  07E8  0180               	clrf	0
  8431  07E9  0A84               	incf	4,f
  8432  07EA  0180               	clrf	0
  8433                           
  8434                           ;LED_B1.c: 223: if (led == 1) {
  8435  07EB  085C               	movf	setLED_Main@led,w
  8436  07EC  3A01               	xorlw	1
  8437  07ED  1D03               	skipz
  8438  07EE  2FF1               	goto	l288
  8439                           
  8440                           ;LED_B1.c: 224: RB4 = RB4 == 1 ? 0 : 1;
  8441  07EF  3010               	movlw	16
  8442  07F0  0686               	xorwf	6,f
  8443  07F1                     l288:	
  8444                           
  8445                           ;LED_B1.c: 225: }
  8446                           ;LED_B1.c: 228: if (led == 2) {
  8447  07F1  085C               	movf	setLED_Main@led,w
  8448  07F2  3A02               	xorlw	2
  8449  07F3  1D03               	skipz
  8450  07F4  2FF7               	goto	l289
  8451                           
  8452                           ;LED_B1.c: 229: RB5 = RB5 == 1 ? 0 : 1;
  8453  07F5  3020               	movlw	32
  8454  07F6  0686               	xorwf	6,f
  8455  07F7                     l289:	
  8456                           
  8457                           ;LED_B1.c: 230: }
  8458                           ;LED_B1.c: 238: if (led == 99) {
  8459  07F7  085C               	movf	setLED_Main@led,w
  8460  07F8  3A63               	xorlw	99
  8461  07F9  1D03               	skipz
  8462  07FA  0008               	return
  8463                           
  8464                           ;LED_B1.c: 239: RB3 = RB3 == 1 ? 0 : 1;
  8465  07FB  3008               	movlw	8
  8466  07FC  0686               	xorwf	6,f
  8467  07FD  0008               	return
  8468  07FE                     __end_of_setLED_Main:	
  8469                           
  8470                           	psect	text56
  8471  0BAE                     __ptext56:	
  8472 ;; *************** function _LED_Initialization *****************
  8473 ;; Defined at:
  8474 ;;		line 31 in file "../src/LED_B1.c"
  8475 ;; Parameters:    Size  Location     Type
  8476 ;;		None
  8477 ;; Auto vars:     Size  Location     Type
  8478 ;;		None
  8479 ;; Return value:  Size  Location     Type
  8480 ;;		None               void
  8481 ;; Registers used:
  8482 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8483 ;; Tracked objects:
  8484 ;;		On entry : 0/0
  8485 ;;		On exit  : 0/0
  8486 ;;		Unchanged: 0/0
  8487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8488 ;;      Params:         0       0       0       0
  8489 ;;      Locals:         0       0       0       0
  8490 ;;      Temps:          0       0       0       0
  8491 ;;      Totals:         0       0       0       0
  8492 ;;Total ram usage:        0 bytes
  8493 ;; Hardware stack levels used:    1
  8494 ;; Hardware stack levels required when called:    5
  8495 ;; This function calls:
  8496 ;;		_setLED_Initialization
  8497 ;; This function is called by:
  8498 ;;		_main
  8499 ;; This function uses a non-reentrant model
  8500 ;;
  8501                           
  8502                           
  8503                           ;psect for function _LED_Initialization
  8504  0BAE                     _LED_Initialization:	
  8505                           
  8506                           ;LED_B1.c: 33: setLED_Initialization(1);
  8507                           
  8508                           ;incstack = 0
  8509                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8510  0BAE  3001               	movlw	1
  8511  0BAF  158A  247C  158A   	fcall	_setLED_Initialization
  8512                           
  8513                           ;LED_B1.c: 36: setLED_Initialization(2);
  8514  0BB2  3002               	movlw	2
  8515  0BB3  158A  247C  158A   	fcall	_setLED_Initialization
  8516                           
  8517                           ;LED_B1.c: 42: setLED_Initialization(99);
  8518  0BB6  3063               	movlw	99
  8519  0BB7  158A  247C         	fcall	_setLED_Initialization
  8520  0BB9  0008               	return
  8521  0BBA                     __end_of_LED_Initialization:	
  8522                           
  8523                           	psect	text57
  8524  0C7C                     __ptext57:	
  8525 ;; *************** function _setLED_Initialization *****************
  8526 ;; Defined at:
  8527 ;;		line 66 in file "../src/LED_B1.c"
  8528 ;; Parameters:    Size  Location     Type
  8529 ;;  led             1    wreg     unsigned char 
  8530 ;; Auto vars:     Size  Location     Type
  8531 ;;  led             1    2[BANK0 ] unsigned char 
  8532 ;; Return value:  Size  Location     Type
  8533 ;;		None               void
  8534 ;; Registers used:
  8535 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8536 ;; Tracked objects:
  8537 ;;		On entry : 0/0
  8538 ;;		On exit  : 0/0
  8539 ;;		Unchanged: 0/0
  8540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8541 ;;      Params:         0       0       0       0
  8542 ;;      Locals:         0       1       0       0
  8543 ;;      Temps:          0       0       0       0
  8544 ;;      Totals:         0       1       0       0
  8545 ;;Total ram usage:        1 bytes
  8546 ;; Hardware stack levels used:    1
  8547 ;; Hardware stack levels required when called:    4
  8548 ;; This function calls:
  8549 ;;		_LedPointSelect
  8550 ;;		_setLED
  8551 ;; This function is called by:
  8552 ;;		_LED_Initialization
  8553 ;; This function uses a non-reentrant model
  8554 ;;
  8555                           
  8556                           
  8557                           ;psect for function _setLED_Initialization
  8558  0C7C                     _setLED_Initialization:	
  8559                           
  8560                           ;incstack = 0
  8561                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8562                           ;setLED_Initialization@led stored from wreg
  8563  0C7C  1283               	bcf	3,5	;RP0=0, select bank0
  8564  0C7D  1303               	bcf	3,6	;RP1=0, select bank0
  8565  0C7E  00DC               	movwf	setLED_Initialization@led
  8566                           
  8567                           ;LED_B1.c: 67: LedPointSelect(led);
  8568  0C7F  085C               	movf	setLED_Initialization@led,w
  8569  0C80  158A  250A  158A   	fcall	_LedPointSelect
  8570                           
  8571                           ;LED_B1.c: 68: LED->Enable = 1;
  8572  0C83  0878               	movf	_LED,w
  8573  0C84  0084               	movwf	4
  8574  0C85  1383               	bcf	3,7	;select IRP bank0
  8575  0C86  1400               	bsf	0,0
  8576                           
  8577                           ;LED_B1.c: 69: setLED(led, 0);
  8578  0C87  1283               	bcf	3,5	;RP0=0, select bank0
  8579  0C88  1303               	bcf	3,6	;RP1=0, select bank0
  8580  0C89  01DA               	clrf	setLED@command
  8581  0C8A  085C               	movf	setLED_Initialization@led,w
  8582  0C8B  118A  2612         	fcall	_setLED
  8583  0C8D  0008               	return
  8584  0C8E                     __end_of_setLED_Initialization:	
  8585                           
  8586                           	psect	text58
  8587  0612                     __ptext58:	
  8588 ;; *************** function _setLED *****************
  8589 ;; Defined at:
  8590 ;;		line 73 in file "../src/LED_B1.c"
  8591 ;; Parameters:    Size  Location     Type
  8592 ;;  led             1    wreg     unsigned char 
  8593 ;;  command         1    0[BANK0 ] unsigned char 
  8594 ;; Auto vars:     Size  Location     Type
  8595 ;;  led             1    1[BANK0 ] unsigned char 
  8596 ;; Return value:  Size  Location     Type
  8597 ;;		None               void
  8598 ;; Registers used:
  8599 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8600 ;; Tracked objects:
  8601 ;;		On entry : 0/0
  8602 ;;		On exit  : 0/0
  8603 ;;		Unchanged: 0/0
  8604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8605 ;;      Params:         0       1       0       0
  8606 ;;      Locals:         0       1       0       0
  8607 ;;      Temps:          0       0       0       0
  8608 ;;      Totals:         0       2       0       0
  8609 ;;Total ram usage:        2 bytes
  8610 ;; Hardware stack levels used:    1
  8611 ;; Hardware stack levels required when called:    3
  8612 ;; This function calls:
  8613 ;;		_LedPointSelect
  8614 ;; This function is called by:
  8615 ;;		_setLED_Initialization
  8616 ;;		_setPIRLED_Main
  8617 ;;		_setMain_Exception
  8618 ;;		_PIR_Initialization
  8619 ;;		_PIR_Main
  8620 ;;		_setSYSC_Main
  8621 ;; This function uses a non-reentrant model
  8622 ;;
  8623                           
  8624                           
  8625                           ;psect for function _setLED
  8626  0612                     _setLED:	
  8627                           
  8628                           ;incstack = 0
  8629                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8630                           ;setLED@led stored from wreg
  8631  0612  1283               	bcf	3,5	;RP0=0, select bank0
  8632  0613  1303               	bcf	3,6	;RP1=0, select bank0
  8633  0614  00DB               	movwf	setLED@led
  8634                           
  8635                           ;LED_B1.c: 74: LedPointSelect(led);
  8636  0615  085B               	movf	setLED@led,w
  8637  0616  158A  250A  118A   	fcall	_LedPointSelect
  8638                           
  8639                           ;LED_B1.c: 75: if (command == 0) {
  8640  0619  1283               	bcf	3,5	;RP0=0, select bank0
  8641  061A  1303               	bcf	3,6	;RP1=0, select bank0
  8642  061B  08DA               	movf	setLED@command,f
  8643  061C  1D03               	skipz
  8644  061D  2E2B               	goto	l4121
  8645                           
  8646                           ;LED_B1.c: 77: if (led == 1) {
  8647  061E  085B               	movf	setLED@led,w
  8648  061F  3A01               	xorlw	1
  8649  0620  1D03               	skipz
  8650  0621  2E23               	goto	l4113
  8651                           
  8652                           ;LED_B1.c: 81: RB4 = 1;
  8653  0622  1606               	bsf	6,4	;volatile
  8654  0623                     l4113:	
  8655                           
  8656                           ;LED_B1.c: 83: }
  8657                           ;LED_B1.c: 86: if (led == 2) {
  8658  0623  085B               	movf	setLED@led,w
  8659  0624  3A02               	xorlw	2
  8660  0625  1903               	btfsc	3,2
  8661                           
  8662                           ;LED_B1.c: 90: RB5 = 1;
  8663  0626  1686               	bsf	6,5	;volatile
  8664                           
  8665                           ;LED_B1.c: 92: }
  8666                           ;LED_B1.c: 104: if (led == 99) {
  8667  0627  085B               	movf	setLED@led,w
  8668  0628  3A63               	xorlw	99
  8669  0629  1903               	btfsc	3,2
  8670                           
  8671                           ;LED_B1.c: 108: RB3 = 1;
  8672  062A  1586               	bsf	6,3	;volatile
  8673  062B                     l4121:	
  8674                           
  8675                           ;LED_B1.c: 110: }
  8676                           ;LED_B1.c: 112: } if (command == 1) {
  8677  062B  085A               	movf	setLED@command,w
  8678  062C  3A01               	xorlw	1
  8679  062D  1D03               	skipz
  8680  062E  2E3C               	goto	l4135
  8681                           
  8682                           ;LED_B1.c: 114: if (led == 1) {
  8683  062F  085B               	movf	setLED@led,w
  8684  0630  3A01               	xorlw	1
  8685  0631  1D03               	skipz
  8686  0632  2E34               	goto	l4127
  8687                           
  8688                           ;LED_B1.c: 118: RB4 = 0;
  8689  0633  1206               	bcf	6,4	;volatile
  8690  0634                     l4127:	
  8691                           
  8692                           ;LED_B1.c: 120: }
  8693                           ;LED_B1.c: 123: if (led == 2) {
  8694  0634  085B               	movf	setLED@led,w
  8695  0635  3A02               	xorlw	2
  8696  0636  1903               	btfsc	3,2
  8697                           
  8698                           ;LED_B1.c: 127: RB5 = 0;
  8699  0637  1286               	bcf	6,5	;volatile
  8700                           
  8701                           ;LED_B1.c: 129: }
  8702                           ;LED_B1.c: 141: if (led == 99) {
  8703  0638  085B               	movf	setLED@led,w
  8704  0639  3A63               	xorlw	99
  8705  063A  1903               	btfsc	3,2
  8706                           
  8707                           ;LED_B1.c: 145: RB3 = 0;
  8708  063B  1186               	bcf	6,3	;volatile
  8709  063C                     l4135:	
  8710                           
  8711                           ;LED_B1.c: 147: }
  8712                           ;LED_B1.c: 149: } if (command == 10) {
  8713  063C  085A               	movf	setLED@command,w
  8714  063D  3A0A               	xorlw	10
  8715  063E  1D03               	skipz
  8716  063F  2E57               	goto	l4153
  8717                           
  8718                           ;LED_B1.c: 150: LED->GO = 0;
  8719  0640  0878               	movf	_LED,w
  8720  0641  0084               	movwf	4
  8721  0642  1383               	bcf	3,7	;select IRP bank0
  8722  0643  1080               	bcf	0,1
  8723                           
  8724                           ;LED_B1.c: 151: LED->Time = 0;
  8725  0644  0A78               	incf	_LED,w
  8726  0645  0084               	movwf	4
  8727  0646  0180               	clrf	0
  8728  0647  0A84               	incf	4,f
  8729  0648  0180               	clrf	0
  8730                           
  8731                           ;LED_B1.c: 153: if (led == 1) {
  8732  0649  085B               	movf	setLED@led,w
  8733  064A  3A01               	xorlw	1
  8734  064B  1D03               	skipz
  8735  064C  2E4F               	goto	l4145
  8736                           
  8737                           ;LED_B1.c: 157: RB4 = 1;
  8738  064D  1606               	bsf	6,4	;volatile
  8739                           
  8740                           ;LED_B1.c: 159: }
  8741  064E  2E53               	goto	l4149
  8742  064F                     l4145:	
  8743                           
  8744                           ;LED_B1.c: 162: else if (led == 2) {
  8745  064F  085B               	movf	setLED@led,w
  8746  0650  3A02               	xorlw	2
  8747  0651  1903               	btfsc	3,2
  8748                           
  8749                           ;LED_B1.c: 166: RB5 = 1;
  8750  0652  1686               	bsf	6,5	;volatile
  8751  0653                     l4149:	
  8752                           
  8753                           ;LED_B1.c: 168: }
  8754                           ;LED_B1.c: 180: if (led == 99) {
  8755  0653  085B               	movf	setLED@led,w
  8756  0654  3A63               	xorlw	99
  8757  0655  1903               	btfsc	3,2
  8758                           
  8759                           ;LED_B1.c: 184: RB3 = 1;
  8760  0656  1586               	bsf	6,3	;volatile
  8761  0657                     l4153:	
  8762                           
  8763                           ;LED_B1.c: 186: }
  8764                           ;LED_B1.c: 188: }
  8765                           ;LED_B1.c: 189: if (command == 11) {
  8766  0657  085A               	movf	setLED@command,w
  8767  0658  3A0B               	xorlw	11
  8768  0659  1D03               	skipz
  8769  065A  2E5F               	goto	l4157
  8770                           
  8771                           ;LED_B1.c: 190: LED->GO = 1;
  8772  065B  0878               	movf	_LED,w
  8773  065C  0084               	movwf	4
  8774  065D  1383               	bcf	3,7	;select IRP bank0
  8775  065E  1480               	bsf	0,1
  8776  065F                     l4157:	
  8777                           
  8778                           ;LED_B1.c: 191: }
  8779                           ;LED_B1.c: 193: if (command == 111) {
  8780  065F  085A               	movf	setLED@command,w
  8781  0660  3A6F               	xorlw	111
  8782  0661  1D03               	skipz
  8783  0662  2E7D               	goto	l4183
  8784                           
  8785                           ;LED_B1.c: 194: PIRLED.Count = 0;
  8786  0663  01B3               	clrf	_PIRLED+1
  8787                           
  8788                           ;LED_B1.c: 195: PIRLED.Time = 0;
  8789  0664  01B4               	clrf	_PIRLED+2
  8790  0665  01B5               	clrf	_PIRLED+3
  8791                           
  8792                           ;LED_B1.c: 196: PIRLED.status = 0;
  8793  0666  1232               	bcf	_PIRLED,4
  8794                           
  8795                           ;LED_B1.c: 197: PIRLED.GO = 1;
  8796  0667  1432               	bsf	_PIRLED,0
  8797                           
  8798                           ;LED_B1.c: 198: PIRLED.GO1 = 0;
  8799  0668  10B2               	bcf	_PIRLED,1
  8800                           
  8801                           ;LED_B1.c: 199: PIRLED.GO2 = 0;
  8802  0669  1132               	bcf	_PIRLED,2
  8803                           
  8804                           ;LED_B1.c: 200: PIRLED.GO3 = 0;
  8805  066A  11B2               	bcf	_PIRLED,3
  8806                           
  8807                           ;LED_B1.c: 201: if (led == 1) {
  8808  066B  085B               	movf	setLED@led,w
  8809  066C  3A01               	xorlw	1
  8810  066D  1D03               	skipz
  8811  066E  2E71               	goto	l4175
  8812                           
  8813                           ;LED_B1.c: 202: PIRLED.GO1 = 1;
  8814  066F  14B2               	bsf	_PIRLED,1
  8815                           
  8816                           ;LED_B1.c: 203: } else if (led == 2) {
  8817  0670  0008               	return
  8818  0671                     l4175:	
  8819  0671  085B               	movf	setLED@led,w
  8820  0672  3A02               	xorlw	2
  8821  0673  1D03               	skipz
  8822  0674  2E77               	goto	l4179
  8823                           
  8824                           ;LED_B1.c: 204: PIRLED.GO2 = 1;
  8825  0675  1532               	bsf	_PIRLED,2
  8826                           
  8827                           ;LED_B1.c: 205: } else if (led == 3) {
  8828  0676  0008               	return
  8829  0677                     l4179:	
  8830  0677  085B               	movf	setLED@led,w
  8831  0678  3A03               	xorlw	3
  8832  0679  1D03               	skipz
  8833  067A  0008               	return
  8834                           
  8835                           ;LED_B1.c: 206: PIRLED.GO3 = 1;
  8836  067B  15B2               	bsf	_PIRLED,3
  8837                           
  8838                           ;LED_B1.c: 207: }
  8839                           ;LED_B1.c: 208: } else if (command == 110) {
  8840  067C  0008               	return
  8841  067D                     l4183:	
  8842  067D  085A               	movf	setLED@command,w
  8843  067E  3A6E               	xorlw	110
  8844  067F  1D03               	skipz
  8845  0680  0008               	return
  8846                           
  8847                           ;LED_B1.c: 209: PIRLED.GO = 0;
  8848  0681  1032               	bcf	_PIRLED,0
  8849  0682  0008               	return
  8850  0683                     __end_of_setLED:	
  8851                           
  8852                           	psect	text59
  8853  0D0A                     __ptext59:	
  8854 ;; *************** function _LedPointSelect *****************
  8855 ;; Defined at:
  8856 ;;		line 7 in file "../src/LED_B1.c"
  8857 ;; Parameters:    Size  Location     Type
  8858 ;;  led             1    wreg     unsigned char 
  8859 ;; Auto vars:     Size  Location     Type
  8860 ;;  led             1    5[COMMON] unsigned char 
  8861 ;; Return value:  Size  Location     Type
  8862 ;;		None               void
  8863 ;; Registers used:
  8864 ;;		wreg
  8865 ;; Tracked objects:
  8866 ;;		On entry : 0/0
  8867 ;;		On exit  : 0/0
  8868 ;;		Unchanged: 0/0
  8869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8870 ;;      Params:         0       0       0       0
  8871 ;;      Locals:         1       0       0       0
  8872 ;;      Temps:          1       0       0       0
  8873 ;;      Totals:         2       0       0       0
  8874 ;;Total ram usage:        2 bytes
  8875 ;; Hardware stack levels used:    1
  8876 ;; Hardware stack levels required when called:    2
  8877 ;; This function calls:
  8878 ;;		Nothing
  8879 ;; This function is called by:
  8880 ;;		_setLED_Initialization
  8881 ;;		_setLED
  8882 ;;		_setLED_Main
  8883 ;; This function uses a non-reentrant model
  8884 ;;
  8885                           
  8886                           
  8887                           ;psect for function _LedPointSelect
  8888  0D0A                     _LedPointSelect:	
  8889                           
  8890                           ;incstack = 0
  8891                           ; Regs used in _LedPointSelect: [wreg]
  8892                           ;LedPointSelect@led stored from wreg
  8893  0D0A  00F5               	movwf	LedPointSelect@led
  8894                           
  8895                           ;LED_B1.c: 9: if (led == 1) {
  8896  0D0B  0875               	movf	LedPointSelect@led,w
  8897  0D0C  3A01               	xorlw	1
  8898  0D0D  1D03               	skipz
  8899  0D0E  2D13               	goto	l246
  8900                           
  8901                           ;LED_B1.c: 10: LED = &VarLED1;
  8902  0D0F  3052               	movlw	_VarLED1& (0+255)
  8903  0D10  00F4               	movwf	??_LedPointSelect
  8904  0D11  0874               	movf	??_LedPointSelect,w
  8905  0D12  00F8               	movwf	_LED
  8906  0D13                     l246:	
  8907                           
  8908                           ;LED_B1.c: 11: }
  8909                           ;LED_B1.c: 14: if (led == 2) {
  8910  0D13  0875               	movf	LedPointSelect@led,w
  8911  0D14  3A02               	xorlw	2
  8912  0D15  1D03               	skipz
  8913  0D16  2D1B               	goto	l247
  8914                           
  8915                           ;LED_B1.c: 15: LED = &VarLED2;
  8916  0D17  3056               	movlw	_VarLED2& (0+255)
  8917  0D18  00F4               	movwf	??_LedPointSelect
  8918  0D19  0874               	movf	??_LedPointSelect,w
  8919  0D1A  00F8               	movwf	_LED
  8920  0D1B                     l247:	
  8921                           
  8922                           ;LED_B1.c: 16: }
  8923                           ;LED_B1.c: 24: if (led == 99) {
  8924  0D1B  0875               	movf	LedPointSelect@led,w
  8925  0D1C  3A63               	xorlw	99
  8926  0D1D  1D03               	skipz
  8927  0D1E  0008               	return
  8928                           
  8929                           ;LED_B1.c: 25: LED = &VarErrLED;
  8930  0D1F  304E               	movlw	_VarErrLED& (0+255)
  8931  0D20  00F4               	movwf	??_LedPointSelect
  8932  0D21  0874               	movf	??_LedPointSelect,w
  8933  0D22  00F8               	movwf	_LED
  8934  0D23  0008               	return
  8935  0D24                     __end_of_LedPointSelect:	
  8936                           
  8937                           	psect	text60
  8938  0BD2                     __ptext60:	
  8939 ;; *************** function _DetectSYSC_Signal *****************
  8940 ;; Defined at:
  8941 ;;		line 57 in file "../src/SYSC_B1.c"
  8942 ;; Parameters:    Size  Location     Type
  8943 ;;		None
  8944 ;; Auto vars:     Size  Location     Type
  8945 ;;		None
  8946 ;; Return value:  Size  Location     Type
  8947 ;;		None               void
  8948 ;; Registers used:
  8949 ;;		status,2
  8950 ;; Tracked objects:
  8951 ;;		On entry : 0/0
  8952 ;;		On exit  : 0/0
  8953 ;;		Unchanged: 0/0
  8954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8955 ;;      Params:         0       0       0       0
  8956 ;;      Locals:         0       0       0       0
  8957 ;;      Temps:          0       0       0       0
  8958 ;;      Totals:         0       0       0       0
  8959 ;;Total ram usage:        0 bytes
  8960 ;; Hardware stack levels used:    1
  8961 ;; Hardware stack levels required when called:    2
  8962 ;; This function calls:
  8963 ;;		Nothing
  8964 ;; This function is called by:
  8965 ;;		_main
  8966 ;; This function uses a non-reentrant model
  8967 ;;
  8968                           
  8969                           
  8970                           ;psect for function _DetectSYSC_Signal
  8971  0BD2                     _DetectSYSC_Signal:	
  8972                           
  8973                           ;SYSC_B1.c: 58: if (SYSC.Signal == 0) {
  8974                           
  8975                           ;incstack = 0
  8976                           ; Regs used in _DetectSYSC_Signal: [status,2]
  8977  0BD2  1283               	bcf	3,5	;RP0=0, select bank0
  8978  0BD3  1303               	bcf	3,6	;RP1=0, select bank0
  8979  0BD4  19A8               	btfsc	_SYSC,3
  8980  0BD5  2BDC               	goto	l1059
  8981                           
  8982                           ;SYSC_B1.c: 59: if (RA5 == 1) {
  8983  0BD6  1E85               	btfss	5,5	;volatile
  8984  0BD7  0008               	return
  8985                           
  8986                           ;SYSC_B1.c: 60: SYSC.Signal = 1;
  8987  0BD8  15A8               	bsf	_SYSC,3
  8988                           
  8989                           ;SYSC_B1.c: 61: SYSC.Timer = 0;
  8990  0BD9  01A9               	clrf	_SYSC+1
  8991  0BDA  01AA               	clrf	_SYSC+2
  8992                           
  8993                           ;SYSC_B1.c: 62: }
  8994                           ;SYSC_B1.c: 63: } else {
  8995  0BDB  0008               	return
  8996  0BDC                     l1059:	
  8997                           
  8998                           ;SYSC_B1.c: 64: if (RA5 == 0) {
  8999  0BDC  1A85               	btfsc	5,5	;volatile
  9000  0BDD  0008               	return
  9001                           
  9002                           ;SYSC_B1.c: 65: SYSC.Signal = 0;
  9003  0BDE  11A8               	bcf	_SYSC,3
  9004  0BDF  0008               	return
  9005  0BE0                     __end_of_DetectSYSC_Signal:	
  9006                           
  9007                           	psect	text61
  9008  0DFB                     __ptext61:	
  9009 ;; *************** function _CDS_Main *****************
  9010 ;; Defined at:
  9011 ;;		line 11 in file "../src/CDS_B1.c"
  9012 ;; Parameters:    Size  Location     Type
  9013 ;;		None
  9014 ;; Auto vars:     Size  Location     Type
  9015 ;;		None
  9016 ;; Return value:  Size  Location     Type
  9017 ;;		None               void
  9018 ;; Registers used:
  9019 ;;		wreg, status,2, status,0
  9020 ;; Tracked objects:
  9021 ;;		On entry : 0/0
  9022 ;;		On exit  : 0/0
  9023 ;;		Unchanged: 0/0
  9024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9025 ;;      Params:         0       0       0       0
  9026 ;;      Locals:         0       0       0       0
  9027 ;;      Temps:          0       3       0       0
  9028 ;;      Totals:         0       3       0       0
  9029 ;;Total ram usage:        3 bytes
  9030 ;; Hardware stack levels used:    1
  9031 ;; Hardware stack levels required when called:    2
  9032 ;; This function calls:
  9033 ;;		Nothing
  9034 ;; This function is called by:
  9035 ;;		_main
  9036 ;; This function uses a non-reentrant model
  9037 ;;
  9038                           
  9039                           
  9040                           ;psect for function _CDS_Main
  9041  0DFB                     _CDS_Main:	
  9042                           
  9043                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  9044                           
  9045                           ;incstack = 0
  9046                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
  9047  0DFB  1283               	bcf	3,5	;RP0=0, select bank0
  9048  0DFC  1303               	bcf	3,6	;RP1=0, select bank0
  9049  0DFD  1C2D               	btfss	__CDS,0
  9050  0DFE  0008               	return
  9051                           
  9052                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  9053  0DFF  18AD               	btfsc	__CDS,1
  9054  0E00  2E0E               	goto	l111
  9055                           
  9056                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  9057  0E01  19AD               	btfsc	__CDS,3
  9058  0E02  0008               	return
  9059                           
  9060                           ;CDS_B1.c: 16: _CDS.Time++;
  9061  0E03  3001               	movlw	1
  9062  0E04  00DA               	movwf	??_CDS_Main
  9063  0E05  085A               	movf	??_CDS_Main,w
  9064  0E06  07AE               	addwf	__CDS+1,f
  9065                           
  9066                           ;CDS_B1.c: 17: if (_CDS.Time >= 10)
  9067  0E07  300A               	movlw	10
  9068  0E08  022E               	subwf	__CDS+1,w
  9069  0E09  1C03               	skipc
  9070  0E0A  0008               	return
  9071                           
  9072                           ;CDS_B1.c: 18: {
  9073                           ;CDS_B1.c: 19: _CDS.Time = 0;
  9074  0E0B  01AE               	clrf	__CDS+1
  9075                           
  9076                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
  9077  0E0C  15AD               	bsf	__CDS,3
  9078                           
  9079                           ;CDS_B1.c: 21: }
  9080                           ;CDS_B1.c: 22: }
  9081                           ;CDS_B1.c: 23: } else {
  9082  0E0D  0008               	return
  9083  0E0E                     l111:	
  9084                           
  9085                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
  9086  0E0E  1CAD               	btfss	__CDS,1
  9087  0E0F  0008               	return
  9088                           
  9089                           ;CDS_B1.c: 25: _CDS.GO = 0;
  9090  0E10  10AD               	bcf	__CDS,1
  9091                           
  9092                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
  9093  0E11  1A2D               	btfsc	__CDS,4
  9094  0E12  2E19               	goto	l4613
  9095                           
  9096                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
  9097  0E13  082F               	movf	__CDS+2,w
  9098  0E14  0230               	subwf	__CDS+3,w
  9099  0E15  1C03               	skipc
  9100  0E16  0008               	return
  9101                           
  9102                           ;CDS_B1.c: 28: _CDS.Status = 1;
  9103  0E17  162D               	bsf	__CDS,4
  9104                           
  9105                           ;CDS_B1.c: 29: }
  9106                           ;CDS_B1.c: 30: } else {
  9107  0E18  0008               	return
  9108  0E19                     l4613:	
  9109                           
  9110                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  9111  0E19  082F               	movf	__CDS+2,w
  9112  0E1A  3E9C               	addlw	156
  9113  0E1B  00DA               	movwf	??_CDS_Main
  9114  0E1C  30FF               	movlw	255
  9115  0E1D  1803               	skipnc
  9116  0E1E  3000               	movlw	0
  9117  0E1F  00DB               	movwf	??_CDS_Main+1
  9118  0E20  085B               	movf	??_CDS_Main+1,w
  9119  0E21  3A80               	xorlw	128
  9120  0E22  00DC               	movwf	??_CDS_Main+2
  9121  0E23  3080               	movlw	128
  9122  0E24  025C               	subwf	??_CDS_Main+2,w
  9123  0E25  1D03               	skipz
  9124  0E26  2E29               	goto	u5615
  9125  0E27  0830               	movf	__CDS+3,w
  9126  0E28  025A               	subwf	??_CDS_Main,w
  9127  0E29                     u5615:	
  9128  0E29  1C03               	skipc
  9129  0E2A  0008               	return
  9130                           
  9131                           ;CDS_B1.c: 32: _CDS.Status = 0;
  9132  0E2B  1283               	bcf	3,5	;RP0=0, select bank0
  9133  0E2C  1303               	bcf	3,6	;RP1=0, select bank0
  9134  0E2D  122D               	bcf	__CDS,4
  9135  0E2E  0008               	return
  9136  0E2F                     __end_of_CDS_Main:	
  9137                           
  9138                           	psect	text62
  9139  0B58                     __ptext62:	
  9140 ;; *************** function _CDS_Initialization *****************
  9141 ;; Defined at:
  9142 ;;		line 7 in file "../src/CDS_B1.c"
  9143 ;; Parameters:    Size  Location     Type
  9144 ;;		None
  9145 ;; Auto vars:     Size  Location     Type
  9146 ;;		None
  9147 ;; Return value:  Size  Location     Type
  9148 ;;		None               void
  9149 ;; Registers used:
  9150 ;;		None
  9151 ;; Tracked objects:
  9152 ;;		On entry : 0/0
  9153 ;;		On exit  : 0/0
  9154 ;;		Unchanged: 0/0
  9155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9156 ;;      Params:         0       0       0       0
  9157 ;;      Locals:         0       0       0       0
  9158 ;;      Temps:          0       0       0       0
  9159 ;;      Totals:         0       0       0       0
  9160 ;;Total ram usage:        0 bytes
  9161 ;; Hardware stack levels used:    1
  9162 ;; Hardware stack levels required when called:    2
  9163 ;; This function calls:
  9164 ;;		Nothing
  9165 ;; This function is called by:
  9166 ;;		_main
  9167 ;; This function uses a non-reentrant model
  9168 ;;
  9169                           
  9170                           
  9171                           ;psect for function _CDS_Initialization
  9172  0B58                     _CDS_Initialization:	
  9173                           
  9174                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  9175                           
  9176                           ;incstack = 0
  9177                           ; Regs used in _CDS_Initialization: []
  9178  0B58  1283               	bcf	3,5	;RP0=0, select bank0
  9179  0B59  1303               	bcf	3,6	;RP1=0, select bank0
  9180  0B5A  142D               	bsf	__CDS,0
  9181  0B5B  0008               	return
  9182  0B5C                     __end_of_CDS_Initialization:	
  9183                           
  9184                           	psect	text63
  9185  0C29                     __ptext63:	
  9186 ;; *************** function _ISR *****************
  9187 ;; Defined at:
  9188 ;;		line 107 in file "../src/MCU_B1.c"
  9189 ;; Parameters:    Size  Location     Type
  9190 ;;		None
  9191 ;; Auto vars:     Size  Location     Type
  9192 ;;		None
  9193 ;; Return value:  Size  Location     Type
  9194 ;;		None               void
  9195 ;; Registers used:
  9196 ;;		wreg, status,2, status,0, pclath, cstack
  9197 ;; Tracked objects:
  9198 ;;		On entry : 0/0
  9199 ;;		On exit  : 0/0
  9200 ;;		Unchanged: 0/0
  9201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9202 ;;      Params:         0       0       0       0
  9203 ;;      Locals:         0       0       0       0
  9204 ;;      Temps:          4       0       0       0
  9205 ;;      Totals:         4       0       0       0
  9206 ;;Total ram usage:        4 bytes
  9207 ;; Hardware stack levels used:    1
  9208 ;; Hardware stack levels required when called:    1
  9209 ;; This function calls:
  9210 ;;		_TMR1_ISR
  9211 ;; This function is called by:
  9212 ;;		Interrupt level 1
  9213 ;; This function uses a non-reentrant model
  9214 ;;
  9215                           
  9216                           
  9217                           ;psect for function _ISR
  9218  0C29                     _ISR:	
  9219                           
  9220                           ;MCU_B1.c: 109: ;;
  9221                           ;MCU_B1.c: 111: ;;
  9222                           ;MCU_B1.c: 113: TMR1_ISR();
  9223  0C29  158A  253F  158A   	fcall	_TMR1_ISR
  9224  0C2C  0873               	movf	??_ISR+3,w
  9225  0C2D  1283               	bcf	3,5	;RP0=0, select bank0
  9226  0C2E  1303               	bcf	3,6	;RP1=0, select bank0
  9227  0C2F  00FF               	movwf	127
  9228  0C30  0872               	movf	??_ISR+2,w
  9229  0C31  008A               	movwf	10
  9230  0C32  0871               	movf	??_ISR+1,w
  9231  0C33  0084               	movwf	4
  9232  0C34  0E70               	swapf	??_ISR^(0+-128),w
  9233  0C35  0083               	movwf	3
  9234  0C36  0EFE               	swapf	126,f
  9235  0C37  0E7E               	swapf	126,w
  9236  0C38  0009               	retfie
  9237  0C39                     __end_of_ISR:	
  9238                           
  9239                           	psect	intentry
  9240  0004                     __pintentry:	
  9241                           ;incstack = 0
  9242                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  9243                           
  9244  0004                     interrupt_function:	
  9245  007E                     saved_w	set	btemp
  9246  0004  00FE               	movwf	btemp
  9247  0005  0E03               	swapf	3,w
  9248  0006  00F0               	movwf	??_ISR
  9249  0007  0804               	movf	4,w
  9250  0008  00F1               	movwf	??_ISR+1
  9251  0009  080A               	movf	10,w
  9252  000A  00F2               	movwf	??_ISR+2
  9253  000B  1283               	bcf	3,5	;RP0=0, select bank0
  9254  000C  1303               	bcf	3,6	;RP1=0, select bank0
  9255  000D  087F               	movf	btemp+1,w
  9256  000E  00F3               	movwf	??_ISR+3
  9257  000F  158A  2C29         	ljmp	_ISR
  9258                           
  9259                           	psect	text64
  9260  0D3F                     __ptext64:	
  9261 ;; *************** function _TMR1_ISR *****************
  9262 ;; Defined at:
  9263 ;;		line 209 in file "../src/MCU_B1.c"
  9264 ;; Parameters:    Size  Location     Type
  9265 ;;		None
  9266 ;; Auto vars:     Size  Location     Type
  9267 ;;		None
  9268 ;; Return value:  Size  Location     Type
  9269 ;;		None               void
  9270 ;; Registers used:
  9271 ;;		wreg, status,2
  9272 ;; Tracked objects:
  9273 ;;		On entry : 0/0
  9274 ;;		On exit  : 0/0
  9275 ;;		Unchanged: 0/0
  9276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9277 ;;      Params:         0       0       0       0
  9278 ;;      Locals:         0       0       0       0
  9279 ;;      Temps:          0       0       0       0
  9280 ;;      Totals:         0       0       0       0
  9281 ;;Total ram usage:        0 bytes
  9282 ;; Hardware stack levels used:    1
  9283 ;; This function calls:
  9284 ;;		Nothing
  9285 ;; This function is called by:
  9286 ;;		_ISR
  9287 ;; This function uses a non-reentrant model
  9288 ;;
  9289                           
  9290                           
  9291                           ;psect for function _TMR1_ISR
  9292  0D3F                     _TMR1_ISR:	
  9293                           
  9294                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
  9295                           
  9296                           ;incstack = 0
  9297                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  9298  0D3F  1683               	bsf	3,5	;RP0=1, select bank1
  9299  0D40  1303               	bcf	3,6	;RP1=0, select bank1
  9300  0D41  1C0C               	btfss	12,0	;volatile
  9301  0D42  0008               	return
  9302  0D43  1283               	bcf	3,5	;RP0=0, select bank0
  9303  0D44  1303               	bcf	3,6	;RP1=0, select bank0
  9304  0D45  1C0C               	btfss	12,0	;volatile
  9305  0D46  0008               	return
  9306                           
  9307                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
  9308  0D47  30FA               	movlw	250
  9309  0D48  008F               	movwf	15	;volatile
  9310                           
  9311                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
  9312  0D49  3038               	movlw	56
  9313  0D4A  008E               	movwf	14	;volatile
  9314                           
  9315                           ;MCU_B1.c: 214: TMR1IF = 0;
  9316  0D4B  100C               	bcf	12,0	;volatile
  9317                           
  9318                           ;MCU_B1.c: 234: Timer1.Count++;
  9319  0D4C  3001               	movlw	1
  9320  0D4D  07B7               	addwf	_Timer1+1,f
  9321  0D4E  1803               	skipnc
  9322  0D4F  0AB8               	incf	_Timer1+2,f
  9323  0D50  3000               	movlw	0
  9324  0D51  07B8               	addwf	_Timer1+2,f
  9325                           
  9326                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
  9327  0D52  3064               	movlw	100
  9328  0D53  0637               	xorwf	_Timer1+1,w
  9329  0D54  0438               	iorwf	_Timer1+2,w
  9330  0D55  1D03               	skipz
  9331  0D56  0008               	return
  9332                           
  9333                           ;MCU_B1.c: 236: {
  9334                           ;MCU_B1.c: 237: Timer1.Count = 0;
  9335  0D57  01B7               	clrf	_Timer1+1
  9336  0D58  01B8               	clrf	_Timer1+2
  9337                           
  9338                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
  9339  0D59  1436               	bsf	_Timer1,0
  9340  0D5A  0008               	return
  9341  0D5B                     __end_of_TMR1_ISR:	
  9342  007E                     btemp	set	126	;btemp
  9343  007E                     wtemp	set	126
  9344  007E                     wtemp0	set	126
  9345  0080                     wtemp1	set	128
  9346  0082                     wtemp2	set	130
  9347  0084                     wtemp3	set	132
  9348  0086                     wtemp4	set	134
  9349  0088                     wtemp5	set	136
  9350  007F                     wtemp6	set	127
  9351  007E                     ttemp	set	126
  9352  007E                     ttemp0	set	126
  9353  0081                     ttemp1	set	129
  9354  0084                     ttemp2	set	132
  9355  0087                     ttemp3	set	135
  9356  007F                     ttemp4	set	127
  9357  007E                     ltemp	set	126
  9358  007E                     ltemp0	set	126
  9359  0082                     ltemp1	set	130
  9360  0086                     ltemp2	set	134
  9361  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         141
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     21      79
    BANK1            80      0      79
    BANK2            16      4       4

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 7
		 -> NULL(NULL[0]), Lights1(BANK0[7]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK0[4]), VarLED2(BANK0[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _setTemp_Main->_getMain_All_Error_Status
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _setLights_Trigger->_LightsPointSelect
    _getAll_Lights_Line->_LightsPointSelect
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_All_Error_Status
    _Load_Main->_getMain_LoadOK
    _Load_Main->_setLoad_AH_AL_Restore
    _getMain_LoadOK->_getLightsControl_OK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _setLights_Main->_LightsPointSelect
    _setLights_Main->_getMain_All_Error_Status
    _setLights->_LightsPointSelect
    _setLights->_getMain_All_Error_Status
    _setLights_Line->_LightsPointSelect
    _getMain_All_Error_Status->_getCDS_Status
    _Lights_Control->_LightsPointSelect
    _getLights_Status->_LightsPointSelect
    _setLights_Initialization->_LightsPointSelect
    _setLED_Main->_LedPointSelect
    _setLED_Initialization->_LedPointSelect
    _setLED->_LedPointSelect

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->___awdiv
    _setTemp_Main->_getMain_All_Error_Status
    _SYSC_Main->_setSYSC_Main
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_setMain_Exception
    _setMain_Exception->_setLights_Trigger
    _PIR_Initialization->_setLED
    _Load_Main->_getMain_All_Error_Status
    _Lights_Main->_setLights_Main
    _setLights_Main->_setLights
    _setLights->_getMain_All_Error_Status
    _Lights_Close->_getMain_LightsStatus
    _getMain_LightsStatus->_getLights_Status
    _Lights_Initialization->_setLights_Initialization
    _LED_Main->_setPIRLED_Main
    _setPIRLED_Main->_setLED
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   29100
                                             20 BANK0      1     1      0
                                              0 BANK2      4     0      4
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           3     3      0     717
                                              0 BANK0      3     3      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            7     6      1    2574
                                              8 BANK0      7     6      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     657
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0    1085
                                              0 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     858
                                              0 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     686
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1425
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    1425
                                              8 BANK0      1     1      0
                            ___awdiv
           _getMain_All_Error_Status
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     861
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0    3164
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         1     1      0    3164
                                              8 BANK0      1     1      0
           _getMain_All_Error_Status
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                             8     8      0    7307
                                             10 BANK0      8     8      0
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                  _setLights_Trigger
                  _setMain_Exception
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    3540
                                              3 BANK0      7     7      0
                 _getAll_Lights_Line
                             _setLED
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _setLights_Trigger                                    3     2      1     405
                                              0 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getAll_Lights_Line                                   1     1      0      68
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0    2866
                                              2 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0    1108
                                              8 BANK0      7     7      0
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      71
                                              5 COMMON     1     1      0
                                              0 BANK0      1     1      0
                _getLightsControl_OK
 ---------------------------------------------------------------------------------
 (3) _getLightsControl_OK                                  1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 5     5      0     111
                                              4 COMMON     1     1      0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    1700
                       _Lights_Close
                     _Lights_Control
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       6     6      0    1273
                                             14 BANK0      6     6      0
                  _LightsPointSelect
                         _getLoad_OK
           _getMain_All_Error_Status
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            6     5      1     791
                                              8 BANK0      6     5      1
                  _LightsPointSelect
           _getMain_All_Error_Status
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      62
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             9     9      0     298
                                              5 COMMON     1     1      0
                                              0 BANK0      8     8      0
                      _getCDS_Status
 ---------------------------------------------------------------------------------
 (4) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getLoad_OK                                           1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       5     5      0     161
                                              0 BANK0      5     5      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Lights_Close                                         1     1      0     266
                                              7 BANK0      1     1      0
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     266
                                              2 BANK0      5     5      0
                   _getLights_Status
 ---------------------------------------------------------------------------------
 (4) _getLights_Status                                     2     2      0      96
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      62
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      62
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _LightsPointSelect                                    2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0    3123
                        _setLED_Main
                     _setPIRLED_Main
 ---------------------------------------------------------------------------------
 (2) _setPIRLED_Main                                       2     2      0    2906
                                              2 BANK0      2     2      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              0 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    3021
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    3021
                                              2 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    2866
                                              0 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
     _setPIRLED_Main
       _setLED
         _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Close
       _getMain_LightsStatus
         _getLights_Status
           _LightsPointSelect
     _Lights_Control
       _LightsPointSelect
     _setLights_Main
       _LightsPointSelect
       _getLoad_OK
       _getMain_All_Error_Status
         _getCDS_Status
       _setLights
         _LightsPointSelect
         _getMain_All_Error_Status
           _getCDS_Status
         _setLights_Line
           _LightsPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getMain_All_Error_Status
       _getCDS_Status
     _getMain_LightsStatus
       _getLights_Status
         _LightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getLightsControl_OK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
     _setLED
       _LedPointSelect
   _PIR_Main
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
       _getCDS_Status
     _setLED
       _LedPointSelect
     _setLights_Trigger
       _LightsPointSelect
     _setMain_Exception
       _getAll_Lights_Line
         _LightsPointSelect
       _setLED
         _LedPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
         _getCDS_Status
       _setLED
         _LedPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___awdiv
       _getMain_All_Error_Status
         _getCDS_Status
       _getMain_LightsStatus
         _getLights_Status
           _LightsPointSelect
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      AC       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     15      4F       5       98.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITBANK2            10      0       0       8        0.0%
BANK2               10      4       4       9       25.0%
DATA                 0      0      AC      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Nov 13 14:37:12 2014

                     _WDT_Clearing 07FE          getMain_Lights_Count@count 005A  
                     ___awdiv@sign 005F                                 fsr 0004  
                              l111 0E0E                                l246 0D13  
                              l247 0D1B                                l604 0F81  
                              l605 0FA1                                l288 07F1  
                              l289 07F7                                l609 0F9D  
                              l803 0529                                l682 0246  
                              l683 0335                                l684 0333  
                              l861 0205                                l862 0052  
                              l790 052C                                l599 0F68  
                              l679 036A                                l689 02F1  
                              l867 0081                                l868 0097  
                              _GIE 005F                                _RB2 0032  
                              _RA4 002C                                _LED 0078  
                              _RB3 0033                                _RA5 002D  
                              _RB4 0034                                _RB5 0035  
                              _PS0 0408                                _PS1 0409  
                              _PS2 040A                                _ISR 0C29  
                              _PSA 040B                                _WDT 0076  
           getAll_Lights_Line@line 005A                                fsr0 0004  
                              indf 0000                    __end_of_ADC_Set 0B83  
        __end_of_LightsPointSelect 0BC6             _setMain_Exception$2453 0061  
                 _getLights_Status 0C49            __size_of_Lights_Control 006D  
                             ?_ISR 0070                         Load_Main@i 0068  
                       Load_Main@j 0064                               l1215 0F32  
                             l1209 0F2F                               l1059 0BDC  
                             l4113 0623                               l4121 062B  
                             l5011 00D0                               l4221 0DF0  
                             l4301 0FF9                               l5101 077B  
                             l4127 0634                               l4135 063C  
                             l4223 0DD2                               l5015 00DC  
                             l4311 0D6B                               l4145 064F  
                             l4153 0657                               l4225 0DF7  
                             l4241 06A8                               l5017 00DD  
                             l5113 079E                               l5035 013F  
                             l5027 012B                               l5051 01B9  
                             l4315 0D71                               l4157 065F  
                             l4149 0653                               l2901 0F58  
                             l4253 06D2                               l5061 01D5  
                             l5045 0176                               l4309 0D68  
                   _Load_Main$2768 0066                               l4175 0671  
                             l4183 067D                               l2911 0F6C  
                             l4431 04C3                               l2921 0F85  
                             l4257 06EA                               l4521 0F2A  
                             l5049 01AA                               l4179 0677  
                             l4363 05CE                               l4275 0FBA  
                             l4613 0E19                               l4373 05E0  
                             l2909 0F64                               l4293 0FE6  
                             l4285 0FC2                               l4269 0FAF  
                             l4375 05EC                               l4367 05D4  
                             l4359 05C8                               l2919 0F7C  
                             l4527 0F42                               l4519 0F26  
                             l4391 0E3C                               l4287 0FD0  
                             l4463 0519                               l4447 04FE  
                             l4377 05F4                               l4545 072C  
                             l2929 0F97                               l4801 0232  
                             l4297 0FF1                               l4473 0528  
                             l4721 03D5                               l4379 0602  
                             l4723 03D9                               l4715 03CB  
                             l4731 03E6                               l4557 0751  
                             l4821 0264                               l4661 056E  
                             l4653 0552                               l4741 040A  
                             l4725 03DD                               l4733 03F7  
                             l4399 0E50                               l4495 0EDD  
                             l4727 03E1                               l4719 03D1  
                             l4489 0EC4                               l4681 059B  
                             l4665 0577                               l4585 0E94  
                             l4577 0E70                               l4915 0355  
                             l4851 02DE                               l4827 0295  
                             l4579 0E7E                               l4771 049C  
                             l4763 0470                               l4747 0426  
                             l4589 0E9F                               l4757 0454  
                             l4857 02EA                               l4777 04AA  
                             l4867 0313                               l4699 0DC2  
                             l4967 0084                               l4999 00B9  
            _myMain_Initialization 0003                       __CFG_WDTE$ON 0000  
                             u5030 05E9                               u5050 05FF  
                             u5410 0728                               _PEIE 005E  
                             u6055 0304                               u5505 0E7F  
                             u4715 0CB0                               u5515 0E8B  
                             u5525 0E95                               u5615 0E29  
                             u4735 0DDB                               u6415 01C9  
                             u5295 0EE9                               u6345 00FD  
                             u4825 0FC5                               u6355 0121  
                             u6445 01F2                               u4845 0FD1  
                             u5485 0E73                               u6375 015D  
                             u4855 0FDD                               u4865 0FE7  
                             u6395 019C                               u5975 0298  
                             u5985 029F                               u5995 02B0  
                             __CDS 002D            ?_setSYSC_Initialization 0070  
                             _SYSC 0028                               __PIR 00A0  
                             _Load 00CF                               _Temp 003B  
                             _main 075F                               btemp 007E  
                  __end_of_WDT_Set 0BD2                               ltemp 007E  
                             start 0011                               ttemp 007E  
                             wtemp 007E                   __end_of_CDS_Main 0E2F  
     __size_of_Temp_Initialization 0003                              ??_ISR 0070  
                _setLights_Trigger 0D24                      ??_Lights_Main 0076  
                    __CFG_PLLEN$ON 0000                   __end_of_LED_Main 0C0B  
               ?_setLights_Trigger 005A                   ??_setPIRLED_Main 005C  
                            ?_main 0120                    __end_of___awdiv 1000  
                            _ADRES 001E                    ___awdiv@divisor 005A  
                            _T1CON 0010                    __end_of___lwdiv 0EA6  
                    ?_Lights_Close 0070                    ___awdiv@counter 005E  
                            _TMR1H 000F                              _TMR1L 000E  
                            _PORTA 0005                              _PORTB 0006  
                            _PORTC 0007                       ?_setLED_Main 0070  
                            _TRISA 0085                              _TRISB 0086  
                            _TRISC 0087               setMain_Exception@buz 005F  
          __end_of_Timeout_Counter 0CB6                ??_setLights_Trigger 005B  
                 __end_of_PIR_Main 020D                   __end_of_TMR1_ISR 0D5B  
                 __end_of_TMR1_Set 0BFC                              _getAD 0D5B  
   __end_of_setSYSC_Initialization 0B64                     _setLights$4853 0065  
                 __end_of_WDT_Main 0C29                      _LightsControl 003A  
                   __CFG_BOREN$OFF 0000       __end_of_getMain_Lights_Count 0C6B  
                            pclath 000A                              ltemp0 007E  
                            ltemp1 0082                              ltemp2 0086  
                            ltemp3 0080     __size_of_setLED_Initialization 0012  
     __end_of_getMain_LightsStatus 0DFB      __end_of_setLED_Initialization 0C8E  
                            ttemp0 007E                              ttemp1 0081  
                            ttemp2 0084                              ttemp3 0087  
                            ttemp4 007F                              status 0003  
                            wtemp0 007E                              wtemp1 0080  
                            wtemp2 0082                              wtemp3 0084  
                            wtemp4 0086                              wtemp5 0088  
                            wtemp6 007F                  getPIR_AD@channel1 0067  
                getPIR_AD@channel2 0062             ?_setLoad_AH_AL_Restore 0070  
                   _setLights_Main 0EF6                     _setLights_Line 0BE0  
                  __initialization 0013                 __size_of_SYSC_Main 0003  
        __end_of_setLights_Trigger 0D3F                       __end_of_main 07C3  
                 __end_of_Fosc_Set 0B69                          ??_ADC_Set 0074  
                           ??_main 006E                     ??_Lights_Close 0061  
              __end_of_Lights_Main 0BAE         __size_of_LightsPointSelect 000C  
                           ?_getAD 0074             ?_myMain_Initialization 0070  
                           _ADCON0 001F                             _ADCON1 009F  
                 ___awdiv@dividend 005C                          ??_WDT_Set 0074  
                           _ANSELA 0185                             _ANSELB 0186  
         _getMain_All_Error_Status 0F49                             _FVRCON 009D  
           getLights_Status@lights 005A                             _PIRLED 0032  
                           _OSCCON 0090                 __size_of_Load_Main 0165  
                           _TMR1IE 0460                             _TMR1IF 0060  
                           _IO_Set 0CDF             getLights_Status@status 005B  
           __end_of_setLights_Main 0F49             __end_of_setLights_Line 0BEE  
              _getLightsControl_OK 0B93       __size_of_SYSC_Initialization 0003  
       __end_of_Mcu_Initialization 0C1A                             _Lights 0039  
                           _Timer1 0036        __size_of_CDS_Initialization 0004  
          ??_Lights_Initialization 0076                          ??___awdiv 0074  
                        ??___lwdiv 0074                             _setLED 0612  
                           _myMain 0020                _setLights_Main$4849 006B  
                 ___awdiv@quotient 0060                 __size_of_Temp_Main 0003  
      __end_of_Load_Initialization 0B6F               ?_getLightsControl_OK 0070  
                           saved_w 007E                   ?_Timeout_Counter 0070  
      getMain_Lights_Count@status1 005D        getMain_Lights_Count@status2 005B  
      getMain_Lights_Count@status3 005C                  __end_of_SYSC_Main 0B52  
                   _Lights_Control 06F2            __size_of_LedPointSelect 001A  
                        ?_CDS_Main 0070            __size_of_getMain_LoadOK 0010  
      __size_of_PIR_Initialization 0014         getMain_LightsStatus@status 0060  
          __end_of__initialization 0023                          ?_LED_Main 0070  
                    ?_my_MainTimer 0070                    ?_setLights_Main 0070  
                  ?_setLights_Line 0070                      ?_setSYSC_Main 0070  
       __size_of_setLights_Trigger 001B                     __pcstackCOMMON 0070  
               __size_of_getCDS_AD 002A           __end_of_getLights_Status 0C5A  
                    __end_of_getAD 0D77                          ?_PIR_Main 0070  
                        ?_TMR1_ISR 0070                          ?_TMR1_Set 0070  
           setLoad_AH_AL_Restore@i 0075                 _LED_Initialization 0BAE  
               __size_of_getPIR_AD 013A                        _Lights_Main 0BA3  
         _setLights_Initialization 0B75               _getMain_Lights_Count 0C5A  
                        ?_WDT_Main 0070                  __end_of_Load_Main 0372  
            ??_getLightsControl_OK 0074               _getMain_LightsStatus 0DCB  
       __end_of_set_TimeoutCleared 0B75                ?_LED_Initialization 0070  
           __end_of_Lights_Control 075F              getMain_LightsStatus@i 005E  
             __size_of_setLED_Main 003B                            ??_getAD 0075  
              _Temp_Initialization 0B52                         ??_CDS_Main 005A  
                       __pbssBANK0 0020                         __pbssBANK1 00A0  
                        ?_Fosc_Set 0070        __size_of_getAll_Lights_Line 0011  
                __end_of_Temp_Main 0B58                            ?_IO_Set 0070  
                  __CFG_VCAPEN$DIS 0000                     ??_my_MainTimer 0074  
                       ??_LED_Main 0076               __end_of_Lights_Close 0CDF  
                   ??_setSYSC_Main 0062          getMain_LightsStatus@count 005D  
             ??_LED_Initialization 0076                  LedPointSelect@led 0075  
                       __pmaintext 075F               ?_Temp_Initialization 0070  
                       ??_PIR_Main 0064                         ??_TMR1_ISR 0070  
                    ?_setTemp_Main 0070                 __size_of_setLights 006F  
                       _getLoad_AD 0530                         ??_TMR1_Set 0074  
                       __pintentry 0004                         _getLoad_OK 0B83  
                          ?_setLED 005A            setLights_Trigger@lights 005C  
            ?_getMain_Lights_Count 0070                            _ADC_Set 0B7C  
                       _getTemp_AD 0DA1                         ??_WDT_Main 0074  
            ?_getMain_LightsStatus 0070             __size_of_getCDS_Status 0008  
                  ?_Lights_Control 0070                  __end_of_getCDS_AD 0DA1  
                          _WDT_Set 0BC6                         ??_Fosc_Set 0074  
                __end_of_getPIR_AD 04AC            ??_setLoad_AH_AL_Restore 0074  
                  __size_of_IO_Set 0015                         getCDS_AD@i 005D  
                       getCDS_AD@j 005E                            _Lights1 0047  
                          _VarLED1 0052                            _VarLED2 0056  
            ??_Temp_Initialization 0074                     ??_setTemp_Main 0062  
                          ___awdiv 0FA3          getLightsControl_OK@loadok 0074  
                          ___lwdiv 0E66                    __size_of_setLED 0071  
                          __ptext0 0000                            __ptext1 0CB6  
                          __ptext2 0003                            __ptext3 0DA1  
                          __ptext4 0372                            __ptext5 0E66  
                          __ptext6 0530                            __ptext7 0D77  
                          __ptext8 0D5B                            __ptext9 0B6F  
                       getPIR_AD@i 0068                         getPIR_AD@j 0066  
                     __size_of_ISR 0010         ??_getMain_All_Error_Status 0075  
              _SYSC_Initialization 0B4C            ??_myMain_Initialization 0074  
         ??_setTemp_Initialization 0074                     _LedPointSelect 0D0A  
                   _getMain_LoadOK 0C39                            clrloop0 0B9C  
                __end_of_setLights 06F2               end_of_initialization 0023  
                    _getCDS_Status 0B8B               ?_SYSC_Initialization 0070  
            _setLED_Initialization 0C7C                        ?_getLoad_AD 0070  
   __size_of_Lights_Initialization 0004                        ?_getLoad_OK 0070  
           ??_getMain_Lights_Count 0074      __end_of_Lights_Initialization 0B60  
           ??_getMain_LightsStatus 005C                        ?_getTemp_AD 0070  
         setLED_Initialization@led 005C                 _Mcu_Initialization 0C0B  
             __end_of_my_MainTimer 0CCA               __end_of_setSYSC_Main 0EF6  
           __end_of_LedPointSelect 0D24             __end_of_getMain_LoadOK 0C49  
              setPIRLED_Main@count 005D                ?_Mcu_Initialization 0070  
            __size_of_Lights_Close 0015            __size_of_setPIRLED_Main 0071  
                 ??_setLights_Main 0068                   ??_setLights_Line 0076  
             setLights_Main@lights 006D                          _SYSC_Main 0B4F  
  getMain_All_Error_Status@command 0060                  __size_of_CDS_Main 0034  
                   ?_getCDS_Status 0070              ??_SYSC_Initialization 0074  
                   __end_of_IO_Set 0CF4         __end_of_CDS_Initialization 0B5C  
       ??_setLights_Initialization 0076                  __size_of_LED_Main 000F  
                _setMain_Exception 0E2F               ??_Mcu_Initialization 0075  
                    ?_WDT_Clearing 0070                 ?_setMain_Exception 0070  
                ?_getLights_Status 0070           setMain_Exception@command 0063  
                     ?_Lights_Main 0070                  __size_of_PIR_Main 01E7  
                __size_of_TMR1_ISR 001C                 ??_getLights_Status 0076  
                __size_of_TMR1_Set 000E                     __end_of_setLED 0683  
              ??_setMain_Exception 005D           ??_setSYSC_Initialization 0074  
                     _Lights_Close 0CCA                  __size_of_WDT_Main 000F  
              _Lights_Control$4856 005C                start_initialization 0013  
                  ?_LedPointSelect 0070               setLights_Line@lights 005A  
                        _Load_Main 020D                        __end_of_ISR 0C39  
                  ?_getMain_LoadOK 0070         __end_of_PIR_Initialization 0CA2  
     __size_of_Load_Initialization 0006    __size_of_setTemp_Initialization 0001  
              getCDS_Status@status 0074               __end_of_setTemp_Main 0530  
              __size_of_getLoad_AD 0071                __size_of_getLoad_OK 0008  
                       ?_SYSC_Main 0070                 _set_TimeoutCleared 0B6F  
                         ??_IO_Set 0074           __size_of_Timeout_Counter 0014  
                        _VarErrLED 004E                __size_of_getTemp_AD 002A  
           ?_setLED_Initialization 0070                  __size_of_Fosc_Set 0005  
        __end_of_setMain_Exception 0E66                          _Temp_Main 0B55  
                  setLights@lights 0067                ?_set_TimeoutCleared 0070  
                   ??_WDT_Clearing 0074                    setLights@status 0062  
      __end_of_getLightsControl_OK 0B9B                           ??_setLED 0076  
                         ?_ADC_Set 0070                   ??_Lights_Control 005A  
 __end_of_getMain_All_Error_Status 0FA3                      ??_setLED_Main 005A  
                      __pbssCOMMON 0076                          ___latbits 0001  
                       ?_Load_Main 0070                      __pcstackBANK0 005A  
                    __pcstackBANK2 0120               ??_set_TimeoutCleared 0074  
       __end_of_getAll_Lights_Line 0C7C                           ?_WDT_Set 0070  
                  ??_getCDS_Status 0074                      PIR_Main@error 006B  
                        _getCDS_AD 0D77     __size_of_setLoad_AH_AL_Restore 0016  
    __end_of_setLoad_AH_AL_Restore 0D0A                          _getPIR_AD 0372  
      __size_of_LED_Initialization 000C                         ?_Temp_Main 0070  
                   Load_Main@adjgo 0065                   ___lwdiv@dividend 005C  
                   Load_Main@error 0067             _setTemp_Initialization 0002  
                    _PIR_Main$3301 0069                           ?___awdiv 005A  
            __size_of_my_MainTimer 0014                           ?___lwdiv 005A  
            __size_of_setSYSC_Main 0050                   getMain_LoadOK@ok 005A  
         setLights_Trigger@command 005A    __size_of_setSYSC_Initialization 0004  
   __size_of_myMain_Initialization 0001      __end_of_myMain_Initialization 0004  
                   __size_of_getAD 001C                   ___lwdiv@quotient 005F  
                   _setPIRLED_Main 05A1                           _CDS_Main 0DFB  
              __end_of_setLED_Main 07FE                        ??_SYSC_Main 0076  
      __end_of_Temp_Initialization 0B55                  interrupt_function 0004  
                       ?_getCDS_AD 005A                           _LED_Main 0BFC  
                        _setLights 0683                          clear_ram0 0B9B  
 __end_of_setLights_Initialization 0B7C         __size_of_setMain_Exception 0037  
                     _my_MainTimer 0CB6                         ?_getPIR_AD 0062  
                     _setSYSC_Main 0EA6                           _GO_nDONE 00F9  
                ??_Timeout_Counter 0074                           _PIR_Main 0026  
                     ??_getLoad_AD 005A                           _TMR1_ISR 0D3F  
                     ??_getLoad_OK 0074                           _TMR1_Set 0BEE  
                     ??_getTemp_AD 005A                           _WDT_Main 0C1A  
                 __size_of_ADC_Set 0007               __size_of_Lights_Main 000B  
            __size_of_setTemp_Main 0084                        ??_Load_Main 0062  
           __end_of_setPIRLED_Main 0612     getMain_All_Error_Status@status 0061  
                      getAD@adcon0 0075                        getAD@adcon1 0074  
                   setLED_Main@led 005C               __end_of_WDT_Clearing 0800  
                         _Fosc_Set 0B64                   __size_of_WDT_Set 000C  
          setMain_Exception@status 0060                 __end_of_getLoad_AD 05A1  
               __end_of_getLoad_OK 0B8B  __size_of_getMain_All_Error_Status 005A  
        ?_getMain_All_Error_Status 0070                         ?_setLights 0062  
               __end_of_getTemp_AD 0DCB             _setSYSC_Initialization 0B60  
                getLoad_AD@channel 005C                  _DetectSYSC_Signal 0BD2  
                         _SwDetect 0079                        ??_Temp_Main 0076  
    _getMain_All_Error_Status$2474 005A      _getMain_All_Error_Status$2483 005C  
    _getMain_All_Error_Status$2485 005E                _Load_Initialization 0B69  
               ?_DetectSYSC_Signal 0070                          setLED@led 005B  
                     _setTemp_Main 04AC                   __size_of___awdiv 005D  
                 __size_of___lwdiv 0040                   ??_LedPointSelect 0074  
    __size_of_getMain_Lights_Count 0011                ??_DetectSYSC_Signal 0074  
               _CDS_Initialization 0B58                   ??_getMain_LoadOK 0075  
            _Lights_Initialization 0B5C      __size_of_getMain_LightsStatus 0030  
                getTemp_AD@channel 005C                        _setLED_Main 07C3  
                  ?_setPIRLED_Main 0070                    ___lwdiv@divisor 005A  
             ?_Load_Initialization 0070                ?_CDS_Initialization 0070  
                  ___lwdiv@counter 005E                           __ptext10 0CA2  
                         __ptext11 0C1A                           __ptext20 0B4C  
                         __ptext12 07FE                           __ptext21 0B60  
                         __ptext13 0B55                           __ptext30 0CDF  
                         __ptext22 0026                           __ptext14 04AC  
                         __ptext31 0B64                           __ptext23 0E2F  
                         __ptext15 0FA3                           __ptext40 0EF6  
                         __ptext32 0B7C                           __ptext24 0D24  
                         __ptext16 0B52                           __ptext41 0683  
                         __ptext33 020D                           __ptext25 0C6B  
                         __ptext17 0002                           __ptext50 0B5C  
                         __ptext42 0BE0                           __ptext34 0C39  
                         __ptext26 0C8E                           __ptext18 0B4F  
                         __ptext51 0B75                           __ptext43 0F49  
                         __ptext35 0B93                           __ptext27 0C0B  
                         __ptext19 0EA6                           __ptext60 0BD2  
                         __ptext52 0BBA                           __ptext44 0B8B  
                         __ptext36 0C5A                           __ptext28 0BC6  
                         __ptext61 0DFB                           __ptext53 0BFC  
                         __ptext45 0B83                           __ptext37 0B69  
                         __ptext29 0BEE                           __ptext62 0B58  
                         __ptext54 05A1                           __ptext46 06F2  
                         __ptext38 0CF4                           __ptext63 0C29  
                         __ptext55 07C3                           __ptext47 0CCA  
                         __ptext39 0BA3                           __ptext64 0D3F  
                         __ptext56 0BAE                           __ptext48 0DCB  
                         __ptext57 0C7C                           __ptext49 0C49  
                         __ptext58 0612                           __ptext59 0D0A  
        __size_of_getLights_Status 0011        __end_of_SYSC_Initialization 0B4F  
          ??_setLED_Initialization 0076                        ??_getCDS_AD 005B  
                    setLED@command 005A          __end_of_DetectSYSC_Signal 0BE0  
                    __size_of_main 0064                        ??_getPIR_AD 0063  
               _PIR_Initialization 0C8E               ??_CDS_Initialization 0074  
      __size_of_Mcu_Initialization 000F                       getLoad_OK@ok 0074  
              ?_PIR_Initialization 0070                           main@argc 0120  
                         main@argv 0122  __size_of_setLights_Initialization 0007  
        ?_setLights_Initialization 0070              ??_Load_Initialization 0076  
             Lights_Control@lights 005E               ??_PIR_Initialization 005C  
                         intlevel1 0000                        ??_setLights 0063  
          ?_setTemp_Initialization 0070            LightsPointSelect@lights 0075  
               _getAll_Lights_Line 0C6B                        getLoad_AD@i 005F  
                      getLoad_AD@j 005E                        getLoad_AD@k 005D  
          __size_of_setLights_Main 0053            __size_of_setLights_Line 000E  
              ?_getAll_Lights_Line 0070             ?_Lights_Initialization 0070  
            __size_of_WDT_Clearing 0002     setLights_Initialization@lights 005A  
     __size_of_getLightsControl_OK 0008        __size_of_set_TimeoutCleared 0006  
                _LightsPointSelect 0BBA               ??_getAll_Lights_Line 0076  
               __CFG_FOSC$INTOSCIO 0000                 ?_LightsPointSelect 0070  
                  _Timeout_Counter 0CA2         __end_of_LED_Initialization 0BBA  
            __end_of_getCDS_Status 0B93     __end_of_setTemp_Initialization 0003  
       __size_of_DetectSYSC_Signal 000E                  getCDS_AD@channel1 005F  
                getCDS_AD@channel2 005A                ??_LightsPointSelect 0074  
            _setLoad_AH_AL_Restore 0CF4  
