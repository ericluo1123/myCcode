

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Nov 25 11:15:27 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	intentry,global,class=CODE,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   155                           	dabs	1,0x7E,2
   156  0000                     	;# 
   157  0001                     	;# 
   158  0002                     	;# 
   159  0003                     	;# 
   160  0004                     	;# 
   161  0005                     	;# 
   162  0006                     	;# 
   163  0007                     	;# 
   164  0008                     	;# 
   165  0009                     	;# 
   166  000A                     	;# 
   167  000B                     	;# 
   168  000C                     	;# 
   169  000D                     	;# 
   170  000E                     	;# 
   171  0010                     	;# 
   172  0011                     	;# 
   173  0012                     	;# 
   174  0015                     	;# 
   175  0016                     	;# 
   176  0016                     	;# 
   177  0017                     	;# 
   178  0018                     	;# 
   179  0019                     	;# 
   180  001A                     	;# 
   181  001B                     	;# 
   182  001C                     	;# 
   183  008C                     	;# 
   184  008D                     	;# 
   185  008E                     	;# 
   186  0090                     	;# 
   187  0091                     	;# 
   188  0092                     	;# 
   189  0095                     	;# 
   190  0096                     	;# 
   191  0097                     	;# 
   192  0099                     	;# 
   193  009A                     	;# 
   194  009B                     	;# 
   195  009B                     	;# 
   196  009C                     	;# 
   197  009D                     	;# 
   198  009E                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  0116                     	;# 
   203  0117                     	;# 
   204  011D                     	;# 
   205  018C                     	;# 
   206  018D                     	;# 
   207  018E                     	;# 
   208  0191                     	;# 
   209  0191                     	;# 
   210  0192                     	;# 
   211  0193                     	;# 
   212  0193                     	;# 
   213  0194                     	;# 
   214  0195                     	;# 
   215  0196                     	;# 
   216  0197                     	;# 
   217  0199                     	;# 
   218  019A                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019C                     	;# 
   224  019C                     	;# 
   225  019D                     	;# 
   226  019E                     	;# 
   227  019F                     	;# 
   228  020D                     	;# 
   229  0210                     	;# 
   230  0211                     	;# 
   231  0211                     	;# 
   232  0212                     	;# 
   233  0212                     	;# 
   234  0213                     	;# 
   235  0213                     	;# 
   236  0214                     	;# 
   237  0214                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0216                     	;# 
   242  0216                     	;# 
   243  0217                     	;# 
   244  0217                     	;# 
   245  0291                     	;# 
   246  0291                     	;# 
   247  0292                     	;# 
   248  0293                     	;# 
   249  0298                     	;# 
   250  0298                     	;# 
   251  0299                     	;# 
   252  029A                     	;# 
   253  0394                     	;# 
   254  0395                     	;# 
   255  0396                     	;# 
   256  0FE4                     	;# 
   257  0FE5                     	;# 
   258  0FE6                     	;# 
   259  0FE7                     	;# 
   260  0FE8                     	;# 
   261  0FE9                     	;# 
   262  0FEA                     	;# 
   263  0FEB                     	;# 
   264  0FED                     	;# 
   265  0FEE                     	;# 
   266  0FEF                     	;# 
   267  0000                     	;# 
   268  0001                     	;# 
   269  0002                     	;# 
   270  0003                     	;# 
   271  0004                     	;# 
   272  0005                     	;# 
   273  0006                     	;# 
   274  0007                     	;# 
   275  0008                     	;# 
   276  0009                     	;# 
   277  000A                     	;# 
   278  000B                     	;# 
   279  000C                     	;# 
   280  000D                     	;# 
   281  000E                     	;# 
   282  0010                     	;# 
   283  0011                     	;# 
   284  0012                     	;# 
   285  0015                     	;# 
   286  0016                     	;# 
   287  0016                     	;# 
   288  0017                     	;# 
   289  0018                     	;# 
   290  0019                     	;# 
   291  001A                     	;# 
   292  001B                     	;# 
   293  001C                     	;# 
   294  008C                     	;# 
   295  008D                     	;# 
   296  008E                     	;# 
   297  0090                     	;# 
   298  0091                     	;# 
   299  0092                     	;# 
   300  0095                     	;# 
   301  0096                     	;# 
   302  0097                     	;# 
   303  0099                     	;# 
   304  009A                     	;# 
   305  009B                     	;# 
   306  009B                     	;# 
   307  009C                     	;# 
   308  009D                     	;# 
   309  009E                     	;# 
   310  010C                     	;# 
   311  010D                     	;# 
   312  010E                     	;# 
   313  0116                     	;# 
   314  0117                     	;# 
   315  011D                     	;# 
   316  018C                     	;# 
   317  018D                     	;# 
   318  018E                     	;# 
   319  0191                     	;# 
   320  0191                     	;# 
   321  0192                     	;# 
   322  0193                     	;# 
   323  0193                     	;# 
   324  0194                     	;# 
   325  0195                     	;# 
   326  0196                     	;# 
   327  0197                     	;# 
   328  0199                     	;# 
   329  019A                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019C                     	;# 
   335  019C                     	;# 
   336  019D                     	;# 
   337  019E                     	;# 
   338  019F                     	;# 
   339  020D                     	;# 
   340  0210                     	;# 
   341  0211                     	;# 
   342  0211                     	;# 
   343  0212                     	;# 
   344  0212                     	;# 
   345  0213                     	;# 
   346  0213                     	;# 
   347  0214                     	;# 
   348  0214                     	;# 
   349  0215                     	;# 
   350  0215                     	;# 
   351  0215                     	;# 
   352  0216                     	;# 
   353  0216                     	;# 
   354  0217                     	;# 
   355  0217                     	;# 
   356  0291                     	;# 
   357  0291                     	;# 
   358  0292                     	;# 
   359  0293                     	;# 
   360  0298                     	;# 
   361  0298                     	;# 
   362  0299                     	;# 
   363  029A                     	;# 
   364  0394                     	;# 
   365  0395                     	;# 
   366  0396                     	;# 
   367  0FE4                     	;# 
   368  0FE5                     	;# 
   369  0FE6                     	;# 
   370  0FE7                     	;# 
   371  0FE8                     	;# 
   372  0FE9                     	;# 
   373  0FEA                     	;# 
   374  0FEB                     	;# 
   375  0FED                     	;# 
   376  0FEE                     	;# 
   377  0FEF                     	;# 
   378  0000                     	;# 
   379  0001                     	;# 
   380  0002                     	;# 
   381  0003                     	;# 
   382  0004                     	;# 
   383  0005                     	;# 
   384  0006                     	;# 
   385  0007                     	;# 
   386  0008                     	;# 
   387  0009                     	;# 
   388  000A                     	;# 
   389  000B                     	;# 
   390  000C                     	;# 
   391  000D                     	;# 
   392  000E                     	;# 
   393  0010                     	;# 
   394  0011                     	;# 
   395  0012                     	;# 
   396  0015                     	;# 
   397  0016                     	;# 
   398  0016                     	;# 
   399  0017                     	;# 
   400  0018                     	;# 
   401  0019                     	;# 
   402  001A                     	;# 
   403  001B                     	;# 
   404  001C                     	;# 
   405  008C                     	;# 
   406  008D                     	;# 
   407  008E                     	;# 
   408  0090                     	;# 
   409  0091                     	;# 
   410  0092                     	;# 
   411  0095                     	;# 
   412  0096                     	;# 
   413  0097                     	;# 
   414  0099                     	;# 
   415  009A                     	;# 
   416  009B                     	;# 
   417  009B                     	;# 
   418  009C                     	;# 
   419  009D                     	;# 
   420  009E                     	;# 
   421  010C                     	;# 
   422  010D                     	;# 
   423  010E                     	;# 
   424  0116                     	;# 
   425  0117                     	;# 
   426  011D                     	;# 
   427  018C                     	;# 
   428  018D                     	;# 
   429  018E                     	;# 
   430  0191                     	;# 
   431  0191                     	;# 
   432  0192                     	;# 
   433  0193                     	;# 
   434  0193                     	;# 
   435  0194                     	;# 
   436  0195                     	;# 
   437  0196                     	;# 
   438  0197                     	;# 
   439  0199                     	;# 
   440  019A                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019C                     	;# 
   446  019C                     	;# 
   447  019D                     	;# 
   448  019E                     	;# 
   449  019F                     	;# 
   450  020D                     	;# 
   451  0210                     	;# 
   452  0211                     	;# 
   453  0211                     	;# 
   454  0212                     	;# 
   455  0212                     	;# 
   456  0213                     	;# 
   457  0213                     	;# 
   458  0214                     	;# 
   459  0214                     	;# 
   460  0215                     	;# 
   461  0215                     	;# 
   462  0215                     	;# 
   463  0216                     	;# 
   464  0216                     	;# 
   465  0217                     	;# 
   466  0217                     	;# 
   467  0291                     	;# 
   468  0291                     	;# 
   469  0292                     	;# 
   470  0293                     	;# 
   471  0298                     	;# 
   472  0298                     	;# 
   473  0299                     	;# 
   474  029A                     	;# 
   475  0394                     	;# 
   476  0395                     	;# 
   477  0396                     	;# 
   478  0FE4                     	;# 
   479  0FE5                     	;# 
   480  0FE6                     	;# 
   481  0FE7                     	;# 
   482  0FE8                     	;# 
   483  0FE9                     	;# 
   484  0FEA                     	;# 
   485  0FEB                     	;# 
   486  0FED                     	;# 
   487  0FEE                     	;# 
   488  0FEF                     	;# 
   489  0000                     	;# 
   490  0001                     	;# 
   491  0002                     	;# 
   492  0003                     	;# 
   493  0004                     	;# 
   494  0005                     	;# 
   495  0006                     	;# 
   496  0007                     	;# 
   497  0008                     	;# 
   498  0009                     	;# 
   499  000A                     	;# 
   500  000B                     	;# 
   501  000C                     	;# 
   502  000D                     	;# 
   503  000E                     	;# 
   504  0010                     	;# 
   505  0011                     	;# 
   506  0012                     	;# 
   507  0015                     	;# 
   508  0016                     	;# 
   509  0016                     	;# 
   510  0017                     	;# 
   511  0018                     	;# 
   512  0019                     	;# 
   513  001A                     	;# 
   514  001B                     	;# 
   515  001C                     	;# 
   516  008C                     	;# 
   517  008D                     	;# 
   518  008E                     	;# 
   519  0090                     	;# 
   520  0091                     	;# 
   521  0092                     	;# 
   522  0095                     	;# 
   523  0096                     	;# 
   524  0097                     	;# 
   525  0099                     	;# 
   526  009A                     	;# 
   527  009B                     	;# 
   528  009B                     	;# 
   529  009C                     	;# 
   530  009D                     	;# 
   531  009E                     	;# 
   532  010C                     	;# 
   533  010D                     	;# 
   534  010E                     	;# 
   535  0116                     	;# 
   536  0117                     	;# 
   537  011D                     	;# 
   538  018C                     	;# 
   539  018D                     	;# 
   540  018E                     	;# 
   541  0191                     	;# 
   542  0191                     	;# 
   543  0192                     	;# 
   544  0193                     	;# 
   545  0193                     	;# 
   546  0194                     	;# 
   547  0195                     	;# 
   548  0196                     	;# 
   549  0197                     	;# 
   550  0199                     	;# 
   551  019A                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019B                     	;# 
   555  019B                     	;# 
   556  019C                     	;# 
   557  019C                     	;# 
   558  019D                     	;# 
   559  019E                     	;# 
   560  019F                     	;# 
   561  020D                     	;# 
   562  0210                     	;# 
   563  0211                     	;# 
   564  0211                     	;# 
   565  0212                     	;# 
   566  0212                     	;# 
   567  0213                     	;# 
   568  0213                     	;# 
   569  0214                     	;# 
   570  0214                     	;# 
   571  0215                     	;# 
   572  0215                     	;# 
   573  0215                     	;# 
   574  0216                     	;# 
   575  0216                     	;# 
   576  0217                     	;# 
   577  0217                     	;# 
   578  0291                     	;# 
   579  0291                     	;# 
   580  0292                     	;# 
   581  0293                     	;# 
   582  0298                     	;# 
   583  0298                     	;# 
   584  0299                     	;# 
   585  029A                     	;# 
   586  0394                     	;# 
   587  0395                     	;# 
   588  0396                     	;# 
   589  0FE4                     	;# 
   590  0FE5                     	;# 
   591  0FE6                     	;# 
   592  0FE7                     	;# 
   593  0FE8                     	;# 
   594  0FE9                     	;# 
   595  0FEA                     	;# 
   596  0FEB                     	;# 
   597  0FED                     	;# 
   598  0FEE                     	;# 
   599  0FEF                     	;# 
   600  0000                     	;# 
   601  0001                     	;# 
   602  0002                     	;# 
   603  0003                     	;# 
   604  0004                     	;# 
   605  0005                     	;# 
   606  0006                     	;# 
   607  0007                     	;# 
   608  0008                     	;# 
   609  0009                     	;# 
   610  000A                     	;# 
   611  000B                     	;# 
   612  000C                     	;# 
   613  000D                     	;# 
   614  000E                     	;# 
   615  0010                     	;# 
   616  0011                     	;# 
   617  0012                     	;# 
   618  0015                     	;# 
   619  0016                     	;# 
   620  0016                     	;# 
   621  0017                     	;# 
   622  0018                     	;# 
   623  0019                     	;# 
   624  001A                     	;# 
   625  001B                     	;# 
   626  001C                     	;# 
   627  008C                     	;# 
   628  008D                     	;# 
   629  008E                     	;# 
   630  0090                     	;# 
   631  0091                     	;# 
   632  0092                     	;# 
   633  0095                     	;# 
   634  0096                     	;# 
   635  0097                     	;# 
   636  0099                     	;# 
   637  009A                     	;# 
   638  009B                     	;# 
   639  009B                     	;# 
   640  009C                     	;# 
   641  009D                     	;# 
   642  009E                     	;# 
   643  010C                     	;# 
   644  010D                     	;# 
   645  010E                     	;# 
   646  0116                     	;# 
   647  0117                     	;# 
   648  011D                     	;# 
   649  018C                     	;# 
   650  018D                     	;# 
   651  018E                     	;# 
   652  0191                     	;# 
   653  0191                     	;# 
   654  0192                     	;# 
   655  0193                     	;# 
   656  0193                     	;# 
   657  0194                     	;# 
   658  0195                     	;# 
   659  0196                     	;# 
   660  0197                     	;# 
   661  0199                     	;# 
   662  019A                     	;# 
   663  019B                     	;# 
   664  019B                     	;# 
   665  019B                     	;# 
   666  019B                     	;# 
   667  019C                     	;# 
   668  019C                     	;# 
   669  019D                     	;# 
   670  019E                     	;# 
   671  019F                     	;# 
   672  020D                     	;# 
   673  0210                     	;# 
   674  0211                     	;# 
   675  0211                     	;# 
   676  0212                     	;# 
   677  0212                     	;# 
   678  0213                     	;# 
   679  0213                     	;# 
   680  0214                     	;# 
   681  0214                     	;# 
   682  0215                     	;# 
   683  0215                     	;# 
   684  0215                     	;# 
   685  0216                     	;# 
   686  0216                     	;# 
   687  0217                     	;# 
   688  0217                     	;# 
   689  0291                     	;# 
   690  0291                     	;# 
   691  0292                     	;# 
   692  0293                     	;# 
   693  0298                     	;# 
   694  0298                     	;# 
   695  0299                     	;# 
   696  029A                     	;# 
   697  0394                     	;# 
   698  0395                     	;# 
   699  0396                     	;# 
   700  0FE4                     	;# 
   701  0FE5                     	;# 
   702  0FE6                     	;# 
   703  0FE7                     	;# 
   704  0FE8                     	;# 
   705  0FE9                     	;# 
   706  0FEA                     	;# 
   707  0FEB                     	;# 
   708  0FED                     	;# 
   709  0FEE                     	;# 
   710  0FEF                     	;# 
   711  0000                     	;# 
   712  0001                     	;# 
   713  0002                     	;# 
   714  0003                     	;# 
   715  0004                     	;# 
   716  0005                     	;# 
   717  0006                     	;# 
   718  0007                     	;# 
   719  0008                     	;# 
   720  0009                     	;# 
   721  000A                     	;# 
   722  000B                     	;# 
   723  000C                     	;# 
   724  000D                     	;# 
   725  000E                     	;# 
   726  0010                     	;# 
   727  0011                     	;# 
   728  0012                     	;# 
   729  0015                     	;# 
   730  0016                     	;# 
   731  0016                     	;# 
   732  0017                     	;# 
   733  0018                     	;# 
   734  0019                     	;# 
   735  001A                     	;# 
   736  001B                     	;# 
   737  001C                     	;# 
   738  008C                     	;# 
   739  008D                     	;# 
   740  008E                     	;# 
   741  0090                     	;# 
   742  0091                     	;# 
   743  0092                     	;# 
   744  0095                     	;# 
   745  0096                     	;# 
   746  0097                     	;# 
   747  0099                     	;# 
   748  009A                     	;# 
   749  009B                     	;# 
   750  009B                     	;# 
   751  009C                     	;# 
   752  009D                     	;# 
   753  009E                     	;# 
   754  010C                     	;# 
   755  010D                     	;# 
   756  010E                     	;# 
   757  0116                     	;# 
   758  0117                     	;# 
   759  011D                     	;# 
   760  018C                     	;# 
   761  018D                     	;# 
   762  018E                     	;# 
   763  0191                     	;# 
   764  0191                     	;# 
   765  0192                     	;# 
   766  0193                     	;# 
   767  0193                     	;# 
   768  0194                     	;# 
   769  0195                     	;# 
   770  0196                     	;# 
   771  0197                     	;# 
   772  0199                     	;# 
   773  019A                     	;# 
   774  019B                     	;# 
   775  019B                     	;# 
   776  019B                     	;# 
   777  019B                     	;# 
   778  019C                     	;# 
   779  019C                     	;# 
   780  019D                     	;# 
   781  019E                     	;# 
   782  019F                     	;# 
   783  020D                     	;# 
   784  0210                     	;# 
   785  0211                     	;# 
   786  0211                     	;# 
   787  0212                     	;# 
   788  0212                     	;# 
   789  0213                     	;# 
   790  0213                     	;# 
   791  0214                     	;# 
   792  0214                     	;# 
   793  0215                     	;# 
   794  0215                     	;# 
   795  0215                     	;# 
   796  0216                     	;# 
   797  0216                     	;# 
   798  0217                     	;# 
   799  0217                     	;# 
   800  0291                     	;# 
   801  0291                     	;# 
   802  0292                     	;# 
   803  0293                     	;# 
   804  0298                     	;# 
   805  0298                     	;# 
   806  0299                     	;# 
   807  029A                     	;# 
   808  0394                     	;# 
   809  0395                     	;# 
   810  0396                     	;# 
   811  0FE4                     	;# 
   812  0FE5                     	;# 
   813  0FE6                     	;# 
   814  0FE7                     	;# 
   815  0FE8                     	;# 
   816  0FE9                     	;# 
   817  0FEA                     	;# 
   818  0FEB                     	;# 
   819  0FED                     	;# 
   820  0FEE                     	;# 
   821  0FEF                     	;# 
   822  0000                     	;# 
   823  0001                     	;# 
   824  0002                     	;# 
   825  0003                     	;# 
   826  0004                     	;# 
   827  0005                     	;# 
   828  0006                     	;# 
   829  0007                     	;# 
   830  0008                     	;# 
   831  0009                     	;# 
   832  000A                     	;# 
   833  000B                     	;# 
   834  000C                     	;# 
   835  000D                     	;# 
   836  000E                     	;# 
   837  0010                     	;# 
   838  0011                     	;# 
   839  0012                     	;# 
   840  0015                     	;# 
   841  0016                     	;# 
   842  0016                     	;# 
   843  0017                     	;# 
   844  0018                     	;# 
   845  0019                     	;# 
   846  001A                     	;# 
   847  001B                     	;# 
   848  001C                     	;# 
   849  008C                     	;# 
   850  008D                     	;# 
   851  008E                     	;# 
   852  0090                     	;# 
   853  0091                     	;# 
   854  0092                     	;# 
   855  0095                     	;# 
   856  0096                     	;# 
   857  0097                     	;# 
   858  0099                     	;# 
   859  009A                     	;# 
   860  009B                     	;# 
   861  009B                     	;# 
   862  009C                     	;# 
   863  009D                     	;# 
   864  009E                     	;# 
   865  010C                     	;# 
   866  010D                     	;# 
   867  010E                     	;# 
   868  0116                     	;# 
   869  0117                     	;# 
   870  011D                     	;# 
   871  018C                     	;# 
   872  018D                     	;# 
   873  018E                     	;# 
   874  0191                     	;# 
   875  0191                     	;# 
   876  0192                     	;# 
   877  0193                     	;# 
   878  0193                     	;# 
   879  0194                     	;# 
   880  0195                     	;# 
   881  0196                     	;# 
   882  0197                     	;# 
   883  0199                     	;# 
   884  019A                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019B                     	;# 
   889  019C                     	;# 
   890  019C                     	;# 
   891  019D                     	;# 
   892  019E                     	;# 
   893  019F                     	;# 
   894  020D                     	;# 
   895  0210                     	;# 
   896  0211                     	;# 
   897  0211                     	;# 
   898  0212                     	;# 
   899  0212                     	;# 
   900  0213                     	;# 
   901  0213                     	;# 
   902  0214                     	;# 
   903  0214                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0216                     	;# 
   908  0216                     	;# 
   909  0217                     	;# 
   910  0217                     	;# 
   911  0291                     	;# 
   912  0291                     	;# 
   913  0292                     	;# 
   914  0293                     	;# 
   915  0298                     	;# 
   916  0298                     	;# 
   917  0299                     	;# 
   918  029A                     	;# 
   919  0394                     	;# 
   920  0395                     	;# 
   921  0396                     	;# 
   922  0FE4                     	;# 
   923  0FE5                     	;# 
   924  0FE6                     	;# 
   925  0FE7                     	;# 
   926  0FE8                     	;# 
   927  0FE9                     	;# 
   928  0FEA                     	;# 
   929  0FEB                     	;# 
   930  0FED                     	;# 
   931  0FEE                     	;# 
   932  0FEF                     	;# 
   933  0000                     	;# 
   934  0001                     	;# 
   935  0002                     	;# 
   936  0003                     	;# 
   937  0004                     	;# 
   938  0005                     	;# 
   939  0006                     	;# 
   940  0007                     	;# 
   941  0008                     	;# 
   942  0009                     	;# 
   943  000A                     	;# 
   944  000B                     	;# 
   945  000C                     	;# 
   946  000D                     	;# 
   947  000E                     	;# 
   948  0010                     	;# 
   949  0011                     	;# 
   950  0012                     	;# 
   951  0015                     	;# 
   952  0016                     	;# 
   953  0016                     	;# 
   954  0017                     	;# 
   955  0018                     	;# 
   956  0019                     	;# 
   957  001A                     	;# 
   958  001B                     	;# 
   959  001C                     	;# 
   960  008C                     	;# 
   961  008D                     	;# 
   962  008E                     	;# 
   963  0090                     	;# 
   964  0091                     	;# 
   965  0092                     	;# 
   966  0095                     	;# 
   967  0096                     	;# 
   968  0097                     	;# 
   969  0099                     	;# 
   970  009A                     	;# 
   971  009B                     	;# 
   972  009B                     	;# 
   973  009C                     	;# 
   974  009D                     	;# 
   975  009E                     	;# 
   976  010C                     	;# 
   977  010D                     	;# 
   978  010E                     	;# 
   979  0116                     	;# 
   980  0117                     	;# 
   981  011D                     	;# 
   982  018C                     	;# 
   983  018D                     	;# 
   984  018E                     	;# 
   985  0191                     	;# 
   986  0191                     	;# 
   987  0192                     	;# 
   988  0193                     	;# 
   989  0193                     	;# 
   990  0194                     	;# 
   991  0195                     	;# 
   992  0196                     	;# 
   993  0197                     	;# 
   994  0199                     	;# 
   995  019A                     	;# 
   996  019B                     	;# 
   997  019B                     	;# 
   998  019B                     	;# 
   999  019B                     	;# 
  1000  019C                     	;# 
  1001  019C                     	;# 
  1002  019D                     	;# 
  1003  019E                     	;# 
  1004  019F                     	;# 
  1005  020D                     	;# 
  1006  0210                     	;# 
  1007  0211                     	;# 
  1008  0211                     	;# 
  1009  0212                     	;# 
  1010  0212                     	;# 
  1011  0213                     	;# 
  1012  0213                     	;# 
  1013  0214                     	;# 
  1014  0214                     	;# 
  1015  0215                     	;# 
  1016  0215                     	;# 
  1017  0215                     	;# 
  1018  0216                     	;# 
  1019  0216                     	;# 
  1020  0217                     	;# 
  1021  0217                     	;# 
  1022  0291                     	;# 
  1023  0291                     	;# 
  1024  0292                     	;# 
  1025  0293                     	;# 
  1026  0298                     	;# 
  1027  0298                     	;# 
  1028  0299                     	;# 
  1029  029A                     	;# 
  1030  0394                     	;# 
  1031  0395                     	;# 
  1032  0396                     	;# 
  1033  0FE4                     	;# 
  1034  0FE5                     	;# 
  1035  0FE6                     	;# 
  1036  0FE7                     	;# 
  1037  0FE8                     	;# 
  1038  0FE9                     	;# 
  1039  0FEA                     	;# 
  1040  0FEB                     	;# 
  1041  0FED                     	;# 
  1042  0FEE                     	;# 
  1043  0FEF                     	;# 
  1044  0000                     	;# 
  1045  0001                     	;# 
  1046  0002                     	;# 
  1047  0003                     	;# 
  1048  0004                     	;# 
  1049  0005                     	;# 
  1050  0006                     	;# 
  1051  0007                     	;# 
  1052  0008                     	;# 
  1053  0009                     	;# 
  1054  000A                     	;# 
  1055  000B                     	;# 
  1056  000C                     	;# 
  1057  000D                     	;# 
  1058  000E                     	;# 
  1059  0010                     	;# 
  1060  0011                     	;# 
  1061  0012                     	;# 
  1062  0015                     	;# 
  1063  0016                     	;# 
  1064  0016                     	;# 
  1065  0017                     	;# 
  1066  0018                     	;# 
  1067  0019                     	;# 
  1068  001A                     	;# 
  1069  001B                     	;# 
  1070  001C                     	;# 
  1071  008C                     	;# 
  1072  008D                     	;# 
  1073  008E                     	;# 
  1074  0090                     	;# 
  1075  0091                     	;# 
  1076  0092                     	;# 
  1077  0095                     	;# 
  1078  0096                     	;# 
  1079  0097                     	;# 
  1080  0099                     	;# 
  1081  009A                     	;# 
  1082  009B                     	;# 
  1083  009B                     	;# 
  1084  009C                     	;# 
  1085  009D                     	;# 
  1086  009E                     	;# 
  1087  010C                     	;# 
  1088  010D                     	;# 
  1089  010E                     	;# 
  1090  0116                     	;# 
  1091  0117                     	;# 
  1092  011D                     	;# 
  1093  018C                     	;# 
  1094  018D                     	;# 
  1095  018E                     	;# 
  1096  0191                     	;# 
  1097  0191                     	;# 
  1098  0192                     	;# 
  1099  0193                     	;# 
  1100  0193                     	;# 
  1101  0194                     	;# 
  1102  0195                     	;# 
  1103  0196                     	;# 
  1104  0197                     	;# 
  1105  0199                     	;# 
  1106  019A                     	;# 
  1107  019B                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019C                     	;# 
  1112  019C                     	;# 
  1113  019D                     	;# 
  1114  019E                     	;# 
  1115  019F                     	;# 
  1116  020D                     	;# 
  1117  0210                     	;# 
  1118  0211                     	;# 
  1119  0211                     	;# 
  1120  0212                     	;# 
  1121  0212                     	;# 
  1122  0213                     	;# 
  1123  0213                     	;# 
  1124  0214                     	;# 
  1125  0214                     	;# 
  1126  0215                     	;# 
  1127  0215                     	;# 
  1128  0215                     	;# 
  1129  0216                     	;# 
  1130  0216                     	;# 
  1131  0217                     	;# 
  1132  0217                     	;# 
  1133  0291                     	;# 
  1134  0291                     	;# 
  1135  0292                     	;# 
  1136  0293                     	;# 
  1137  0298                     	;# 
  1138  0298                     	;# 
  1139  0299                     	;# 
  1140  029A                     	;# 
  1141  0394                     	;# 
  1142  0395                     	;# 
  1143  0396                     	;# 
  1144  0FE4                     	;# 
  1145  0FE5                     	;# 
  1146  0FE6                     	;# 
  1147  0FE7                     	;# 
  1148  0FE8                     	;# 
  1149  0FE9                     	;# 
  1150  0FEA                     	;# 
  1151  0FEB                     	;# 
  1152  0FED                     	;# 
  1153  0FEE                     	;# 
  1154  0FEF                     	;# 
  1155  0000                     	;# 
  1156  0001                     	;# 
  1157  0002                     	;# 
  1158  0003                     	;# 
  1159  0004                     	;# 
  1160  0005                     	;# 
  1161  0006                     	;# 
  1162  0007                     	;# 
  1163  0008                     	;# 
  1164  0009                     	;# 
  1165  000A                     	;# 
  1166  000B                     	;# 
  1167  000C                     	;# 
  1168  000D                     	;# 
  1169  000E                     	;# 
  1170  0010                     	;# 
  1171  0011                     	;# 
  1172  0012                     	;# 
  1173  0015                     	;# 
  1174  0016                     	;# 
  1175  0016                     	;# 
  1176  0017                     	;# 
  1177  0018                     	;# 
  1178  0019                     	;# 
  1179  001A                     	;# 
  1180  001B                     	;# 
  1181  001C                     	;# 
  1182  008C                     	;# 
  1183  008D                     	;# 
  1184  008E                     	;# 
  1185  0090                     	;# 
  1186  0091                     	;# 
  1187  0092                     	;# 
  1188  0095                     	;# 
  1189  0096                     	;# 
  1190  0097                     	;# 
  1191  0099                     	;# 
  1192  009A                     	;# 
  1193  009B                     	;# 
  1194  009B                     	;# 
  1195  009C                     	;# 
  1196  009D                     	;# 
  1197  009E                     	;# 
  1198  010C                     	;# 
  1199  010D                     	;# 
  1200  010E                     	;# 
  1201  0116                     	;# 
  1202  0117                     	;# 
  1203  011D                     	;# 
  1204  018C                     	;# 
  1205  018D                     	;# 
  1206  018E                     	;# 
  1207  0191                     	;# 
  1208  0191                     	;# 
  1209  0192                     	;# 
  1210  0193                     	;# 
  1211  0193                     	;# 
  1212  0194                     	;# 
  1213  0195                     	;# 
  1214  0196                     	;# 
  1215  0197                     	;# 
  1216  0199                     	;# 
  1217  019A                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019B                     	;# 
  1222  019C                     	;# 
  1223  019C                     	;# 
  1224  019D                     	;# 
  1225  019E                     	;# 
  1226  019F                     	;# 
  1227  020D                     	;# 
  1228  0210                     	;# 
  1229  0211                     	;# 
  1230  0211                     	;# 
  1231  0212                     	;# 
  1232  0212                     	;# 
  1233  0213                     	;# 
  1234  0213                     	;# 
  1235  0214                     	;# 
  1236  0214                     	;# 
  1237  0215                     	;# 
  1238  0215                     	;# 
  1239  0215                     	;# 
  1240  0216                     	;# 
  1241  0216                     	;# 
  1242  0217                     	;# 
  1243  0217                     	;# 
  1244  0291                     	;# 
  1245  0291                     	;# 
  1246  0292                     	;# 
  1247  0293                     	;# 
  1248  0298                     	;# 
  1249  0298                     	;# 
  1250  0299                     	;# 
  1251  029A                     	;# 
  1252  0394                     	;# 
  1253  0395                     	;# 
  1254  0396                     	;# 
  1255  0FE4                     	;# 
  1256  0FE5                     	;# 
  1257  0FE6                     	;# 
  1258  0FE7                     	;# 
  1259  0FE8                     	;# 
  1260  0FE9                     	;# 
  1261  0FEA                     	;# 
  1262  0FEB                     	;# 
  1263  0FED                     	;# 
  1264  0FEE                     	;# 
  1265  0FEF                     	;# 
  1266  0000                     	;# 
  1267  0001                     	;# 
  1268  0002                     	;# 
  1269  0003                     	;# 
  1270  0004                     	;# 
  1271  0005                     	;# 
  1272  0006                     	;# 
  1273  0007                     	;# 
  1274  0008                     	;# 
  1275  0009                     	;# 
  1276  000A                     	;# 
  1277  000B                     	;# 
  1278  000C                     	;# 
  1279  000D                     	;# 
  1280  000E                     	;# 
  1281  0010                     	;# 
  1282  0011                     	;# 
  1283  0012                     	;# 
  1284  0015                     	;# 
  1285  0016                     	;# 
  1286  0016                     	;# 
  1287  0017                     	;# 
  1288  0018                     	;# 
  1289  0019                     	;# 
  1290  001A                     	;# 
  1291  001B                     	;# 
  1292  001C                     	;# 
  1293  008C                     	;# 
  1294  008D                     	;# 
  1295  008E                     	;# 
  1296  0090                     	;# 
  1297  0091                     	;# 
  1298  0092                     	;# 
  1299  0095                     	;# 
  1300  0096                     	;# 
  1301  0097                     	;# 
  1302  0099                     	;# 
  1303  009A                     	;# 
  1304  009B                     	;# 
  1305  009B                     	;# 
  1306  009C                     	;# 
  1307  009D                     	;# 
  1308  009E                     	;# 
  1309  010C                     	;# 
  1310  010D                     	;# 
  1311  010E                     	;# 
  1312  0116                     	;# 
  1313  0117                     	;# 
  1314  011D                     	;# 
  1315  018C                     	;# 
  1316  018D                     	;# 
  1317  018E                     	;# 
  1318  0191                     	;# 
  1319  0191                     	;# 
  1320  0192                     	;# 
  1321  0193                     	;# 
  1322  0193                     	;# 
  1323  0194                     	;# 
  1324  0195                     	;# 
  1325  0196                     	;# 
  1326  0197                     	;# 
  1327  0199                     	;# 
  1328  019A                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019B                     	;# 
  1333  019C                     	;# 
  1334  019C                     	;# 
  1335  019D                     	;# 
  1336  019E                     	;# 
  1337  019F                     	;# 
  1338  020D                     	;# 
  1339  0210                     	;# 
  1340  0211                     	;# 
  1341  0211                     	;# 
  1342  0212                     	;# 
  1343  0212                     	;# 
  1344  0213                     	;# 
  1345  0213                     	;# 
  1346  0214                     	;# 
  1347  0214                     	;# 
  1348  0215                     	;# 
  1349  0215                     	;# 
  1350  0215                     	;# 
  1351  0216                     	;# 
  1352  0216                     	;# 
  1353  0217                     	;# 
  1354  0217                     	;# 
  1355  0291                     	;# 
  1356  0291                     	;# 
  1357  0292                     	;# 
  1358  0293                     	;# 
  1359  0298                     	;# 
  1360  0298                     	;# 
  1361  0299                     	;# 
  1362  029A                     	;# 
  1363  0394                     	;# 
  1364  0395                     	;# 
  1365  0396                     	;# 
  1366  0FE4                     	;# 
  1367  0FE5                     	;# 
  1368  0FE6                     	;# 
  1369  0FE7                     	;# 
  1370  0FE8                     	;# 
  1371  0FE9                     	;# 
  1372  0FEA                     	;# 
  1373  0FEB                     	;# 
  1374  0FED                     	;# 
  1375  0FEE                     	;# 
  1376  0FEF                     	;# 
  1377  0000                     	;# 
  1378  0001                     	;# 
  1379  0002                     	;# 
  1380  0003                     	;# 
  1381  0004                     	;# 
  1382  0005                     	;# 
  1383  0006                     	;# 
  1384  0007                     	;# 
  1385  0008                     	;# 
  1386  0009                     	;# 
  1387  000A                     	;# 
  1388  000B                     	;# 
  1389  000C                     	;# 
  1390  000D                     	;# 
  1391  000E                     	;# 
  1392  0010                     	;# 
  1393  0011                     	;# 
  1394  0012                     	;# 
  1395  0015                     	;# 
  1396  0016                     	;# 
  1397  0016                     	;# 
  1398  0017                     	;# 
  1399  0018                     	;# 
  1400  0019                     	;# 
  1401  001A                     	;# 
  1402  001B                     	;# 
  1403  001C                     	;# 
  1404  008C                     	;# 
  1405  008D                     	;# 
  1406  008E                     	;# 
  1407  0090                     	;# 
  1408  0091                     	;# 
  1409  0092                     	;# 
  1410  0095                     	;# 
  1411  0096                     	;# 
  1412  0097                     	;# 
  1413  0099                     	;# 
  1414  009A                     	;# 
  1415  009B                     	;# 
  1416  009B                     	;# 
  1417  009C                     	;# 
  1418  009D                     	;# 
  1419  009E                     	;# 
  1420  010C                     	;# 
  1421  010D                     	;# 
  1422  010E                     	;# 
  1423  0116                     	;# 
  1424  0117                     	;# 
  1425  011D                     	;# 
  1426  018C                     	;# 
  1427  018D                     	;# 
  1428  018E                     	;# 
  1429  0191                     	;# 
  1430  0191                     	;# 
  1431  0192                     	;# 
  1432  0193                     	;# 
  1433  0193                     	;# 
  1434  0194                     	;# 
  1435  0195                     	;# 
  1436  0196                     	;# 
  1437  0197                     	;# 
  1438  0199                     	;# 
  1439  019A                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019B                     	;# 
  1444  019C                     	;# 
  1445  019C                     	;# 
  1446  019D                     	;# 
  1447  019E                     	;# 
  1448  019F                     	;# 
  1449  020D                     	;# 
  1450  0210                     	;# 
  1451  0211                     	;# 
  1452  0211                     	;# 
  1453  0212                     	;# 
  1454  0212                     	;# 
  1455  0213                     	;# 
  1456  0213                     	;# 
  1457  0214                     	;# 
  1458  0214                     	;# 
  1459  0215                     	;# 
  1460  0215                     	;# 
  1461  0215                     	;# 
  1462  0216                     	;# 
  1463  0216                     	;# 
  1464  0217                     	;# 
  1465  0217                     	;# 
  1466  0291                     	;# 
  1467  0291                     	;# 
  1468  0292                     	;# 
  1469  0293                     	;# 
  1470  0298                     	;# 
  1471  0298                     	;# 
  1472  0299                     	;# 
  1473  029A                     	;# 
  1474  0394                     	;# 
  1475  0395                     	;# 
  1476  0396                     	;# 
  1477  0FE4                     	;# 
  1478  0FE5                     	;# 
  1479  0FE6                     	;# 
  1480  0FE7                     	;# 
  1481  0FE8                     	;# 
  1482  0FE9                     	;# 
  1483  0FEA                     	;# 
  1484  0FEB                     	;# 
  1485  0FED                     	;# 
  1486  0FEE                     	;# 
  1487  0FEF                     	;# 
  1488  0000                     	;# 
  1489  0001                     	;# 
  1490  0002                     	;# 
  1491  0003                     	;# 
  1492  0004                     	;# 
  1493  0005                     	;# 
  1494  0006                     	;# 
  1495  0007                     	;# 
  1496  0008                     	;# 
  1497  0009                     	;# 
  1498  000A                     	;# 
  1499  000B                     	;# 
  1500  000C                     	;# 
  1501  000D                     	;# 
  1502  000E                     	;# 
  1503  0010                     	;# 
  1504  0011                     	;# 
  1505  0012                     	;# 
  1506  0015                     	;# 
  1507  0016                     	;# 
  1508  0016                     	;# 
  1509  0017                     	;# 
  1510  0018                     	;# 
  1511  0019                     	;# 
  1512  001A                     	;# 
  1513  001B                     	;# 
  1514  001C                     	;# 
  1515  008C                     	;# 
  1516  008D                     	;# 
  1517  008E                     	;# 
  1518  0090                     	;# 
  1519  0091                     	;# 
  1520  0092                     	;# 
  1521  0095                     	;# 
  1522  0096                     	;# 
  1523  0097                     	;# 
  1524  0099                     	;# 
  1525  009A                     	;# 
  1526  009B                     	;# 
  1527  009B                     	;# 
  1528  009C                     	;# 
  1529  009D                     	;# 
  1530  009E                     	;# 
  1531  010C                     	;# 
  1532  010D                     	;# 
  1533  010E                     	;# 
  1534  0116                     	;# 
  1535  0117                     	;# 
  1536  011D                     	;# 
  1537  018C                     	;# 
  1538  018D                     	;# 
  1539  018E                     	;# 
  1540  0191                     	;# 
  1541  0191                     	;# 
  1542  0192                     	;# 
  1543  0193                     	;# 
  1544  0193                     	;# 
  1545  0194                     	;# 
  1546  0195                     	;# 
  1547  0196                     	;# 
  1548  0197                     	;# 
  1549  0199                     	;# 
  1550  019A                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019C                     	;# 
  1556  019C                     	;# 
  1557  019D                     	;# 
  1558  019E                     	;# 
  1559  019F                     	;# 
  1560  020D                     	;# 
  1561  0210                     	;# 
  1562  0211                     	;# 
  1563  0211                     	;# 
  1564  0212                     	;# 
  1565  0212                     	;# 
  1566  0213                     	;# 
  1567  0213                     	;# 
  1568  0214                     	;# 
  1569  0214                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0215                     	;# 
  1573  0216                     	;# 
  1574  0216                     	;# 
  1575  0217                     	;# 
  1576  0217                     	;# 
  1577  0291                     	;# 
  1578  0291                     	;# 
  1579  0292                     	;# 
  1580  0293                     	;# 
  1581  0298                     	;# 
  1582  0298                     	;# 
  1583  0299                     	;# 
  1584  029A                     	;# 
  1585  0394                     	;# 
  1586  0395                     	;# 
  1587  0396                     	;# 
  1588  0FE4                     	;# 
  1589  0FE5                     	;# 
  1590  0FE6                     	;# 
  1591  0FE7                     	;# 
  1592  0FE8                     	;# 
  1593  0FE9                     	;# 
  1594  0FEA                     	;# 
  1595  0FEB                     	;# 
  1596  0FED                     	;# 
  1597  0FEE                     	;# 
  1598  0FEF                     	;# 
  1599  0000                     	;# 
  1600  0001                     	;# 
  1601  0002                     	;# 
  1602  0003                     	;# 
  1603  0004                     	;# 
  1604  0005                     	;# 
  1605  0006                     	;# 
  1606  0007                     	;# 
  1607  0008                     	;# 
  1608  0009                     	;# 
  1609  000A                     	;# 
  1610  000B                     	;# 
  1611  000C                     	;# 
  1612  000D                     	;# 
  1613  000E                     	;# 
  1614  0010                     	;# 
  1615  0011                     	;# 
  1616  0012                     	;# 
  1617  0015                     	;# 
  1618  0016                     	;# 
  1619  0016                     	;# 
  1620  0017                     	;# 
  1621  0018                     	;# 
  1622  0019                     	;# 
  1623  001A                     	;# 
  1624  001B                     	;# 
  1625  001C                     	;# 
  1626  008C                     	;# 
  1627  008D                     	;# 
  1628  008E                     	;# 
  1629  0090                     	;# 
  1630  0091                     	;# 
  1631  0092                     	;# 
  1632  0095                     	;# 
  1633  0096                     	;# 
  1634  0097                     	;# 
  1635  0099                     	;# 
  1636  009A                     	;# 
  1637  009B                     	;# 
  1638  009B                     	;# 
  1639  009C                     	;# 
  1640  009D                     	;# 
  1641  009E                     	;# 
  1642  010C                     	;# 
  1643  010D                     	;# 
  1644  010E                     	;# 
  1645  0116                     	;# 
  1646  0117                     	;# 
  1647  011D                     	;# 
  1648  018C                     	;# 
  1649  018D                     	;# 
  1650  018E                     	;# 
  1651  0191                     	;# 
  1652  0191                     	;# 
  1653  0192                     	;# 
  1654  0193                     	;# 
  1655  0193                     	;# 
  1656  0194                     	;# 
  1657  0195                     	;# 
  1658  0196                     	;# 
  1659  0197                     	;# 
  1660  0199                     	;# 
  1661  019A                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019B                     	;# 
  1666  019C                     	;# 
  1667  019C                     	;# 
  1668  019D                     	;# 
  1669  019E                     	;# 
  1670  019F                     	;# 
  1671  020D                     	;# 
  1672  0210                     	;# 
  1673  0211                     	;# 
  1674  0211                     	;# 
  1675  0212                     	;# 
  1676  0212                     	;# 
  1677  0213                     	;# 
  1678  0213                     	;# 
  1679  0214                     	;# 
  1680  0214                     	;# 
  1681  0215                     	;# 
  1682  0215                     	;# 
  1683  0215                     	;# 
  1684  0216                     	;# 
  1685  0216                     	;# 
  1686  0217                     	;# 
  1687  0217                     	;# 
  1688  0291                     	;# 
  1689  0291                     	;# 
  1690  0292                     	;# 
  1691  0293                     	;# 
  1692  0298                     	;# 
  1693  0298                     	;# 
  1694  0299                     	;# 
  1695  029A                     	;# 
  1696  0394                     	;# 
  1697  0395                     	;# 
  1698  0396                     	;# 
  1699  0FE4                     	;# 
  1700  0FE5                     	;# 
  1701  0FE6                     	;# 
  1702  0FE7                     	;# 
  1703  0FE8                     	;# 
  1704  0FE9                     	;# 
  1705  0FEA                     	;# 
  1706  0FEB                     	;# 
  1707  0FED                     	;# 
  1708  0FEE                     	;# 
  1709  0FEF                     	;# 
  1710  0000                     	;# 
  1711  0001                     	;# 
  1712  0002                     	;# 
  1713  0003                     	;# 
  1714  0004                     	;# 
  1715  0005                     	;# 
  1716  0006                     	;# 
  1717  0007                     	;# 
  1718  0008                     	;# 
  1719  0009                     	;# 
  1720  000A                     	;# 
  1721  000B                     	;# 
  1722  000C                     	;# 
  1723  000D                     	;# 
  1724  000E                     	;# 
  1725  0010                     	;# 
  1726  0011                     	;# 
  1727  0012                     	;# 
  1728  0015                     	;# 
  1729  0016                     	;# 
  1730  0016                     	;# 
  1731  0017                     	;# 
  1732  0018                     	;# 
  1733  0019                     	;# 
  1734  001A                     	;# 
  1735  001B                     	;# 
  1736  001C                     	;# 
  1737  008C                     	;# 
  1738  008D                     	;# 
  1739  008E                     	;# 
  1740  0090                     	;# 
  1741  0091                     	;# 
  1742  0092                     	;# 
  1743  0095                     	;# 
  1744  0096                     	;# 
  1745  0097                     	;# 
  1746  0099                     	;# 
  1747  009A                     	;# 
  1748  009B                     	;# 
  1749  009B                     	;# 
  1750  009C                     	;# 
  1751  009D                     	;# 
  1752  009E                     	;# 
  1753  010C                     	;# 
  1754  010D                     	;# 
  1755  010E                     	;# 
  1756  0116                     	;# 
  1757  0117                     	;# 
  1758  011D                     	;# 
  1759  018C                     	;# 
  1760  018D                     	;# 
  1761  018E                     	;# 
  1762  0191                     	;# 
  1763  0191                     	;# 
  1764  0192                     	;# 
  1765  0193                     	;# 
  1766  0193                     	;# 
  1767  0194                     	;# 
  1768  0195                     	;# 
  1769  0196                     	;# 
  1770  0197                     	;# 
  1771  0199                     	;# 
  1772  019A                     	;# 
  1773  019B                     	;# 
  1774  019B                     	;# 
  1775  019B                     	;# 
  1776  019B                     	;# 
  1777  019C                     	;# 
  1778  019C                     	;# 
  1779  019D                     	;# 
  1780  019E                     	;# 
  1781  019F                     	;# 
  1782  020D                     	;# 
  1783  0210                     	;# 
  1784  0211                     	;# 
  1785  0211                     	;# 
  1786  0212                     	;# 
  1787  0212                     	;# 
  1788  0213                     	;# 
  1789  0213                     	;# 
  1790  0214                     	;# 
  1791  0214                     	;# 
  1792  0215                     	;# 
  1793  0215                     	;# 
  1794  0215                     	;# 
  1795  0216                     	;# 
  1796  0216                     	;# 
  1797  0217                     	;# 
  1798  0217                     	;# 
  1799  0291                     	;# 
  1800  0291                     	;# 
  1801  0292                     	;# 
  1802  0293                     	;# 
  1803  0298                     	;# 
  1804  0298                     	;# 
  1805  0299                     	;# 
  1806  029A                     	;# 
  1807  0394                     	;# 
  1808  0395                     	;# 
  1809  0396                     	;# 
  1810  0FE4                     	;# 
  1811  0FE5                     	;# 
  1812  0FE6                     	;# 
  1813  0FE7                     	;# 
  1814  0FE8                     	;# 
  1815  0FE9                     	;# 
  1816  0FEA                     	;# 
  1817  0FEB                     	;# 
  1818  0FED                     	;# 
  1819  0FEE                     	;# 
  1820  0FEF                     	;# 
  1821  0000                     	;# 
  1822  0001                     	;# 
  1823  0002                     	;# 
  1824  0003                     	;# 
  1825  0004                     	;# 
  1826  0005                     	;# 
  1827  0006                     	;# 
  1828  0007                     	;# 
  1829  0008                     	;# 
  1830  0009                     	;# 
  1831  000A                     	;# 
  1832  000B                     	;# 
  1833  000C                     	;# 
  1834  000D                     	;# 
  1835  000E                     	;# 
  1836  0010                     	;# 
  1837  0011                     	;# 
  1838  0012                     	;# 
  1839  0015                     	;# 
  1840  0016                     	;# 
  1841  0016                     	;# 
  1842  0017                     	;# 
  1843  0018                     	;# 
  1844  0019                     	;# 
  1845  001A                     	;# 
  1846  001B                     	;# 
  1847  001C                     	;# 
  1848  008C                     	;# 
  1849  008D                     	;# 
  1850  008E                     	;# 
  1851  0090                     	;# 
  1852  0091                     	;# 
  1853  0092                     	;# 
  1854  0095                     	;# 
  1855  0096                     	;# 
  1856  0097                     	;# 
  1857  0099                     	;# 
  1858  009A                     	;# 
  1859  009B                     	;# 
  1860  009B                     	;# 
  1861  009C                     	;# 
  1862  009D                     	;# 
  1863  009E                     	;# 
  1864  010C                     	;# 
  1865  010D                     	;# 
  1866  010E                     	;# 
  1867  0116                     	;# 
  1868  0117                     	;# 
  1869  011D                     	;# 
  1870  018C                     	;# 
  1871  018D                     	;# 
  1872  018E                     	;# 
  1873  0191                     	;# 
  1874  0191                     	;# 
  1875  0192                     	;# 
  1876  0193                     	;# 
  1877  0193                     	;# 
  1878  0194                     	;# 
  1879  0195                     	;# 
  1880  0196                     	;# 
  1881  0197                     	;# 
  1882  0199                     	;# 
  1883  019A                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019B                     	;# 
  1887  019B                     	;# 
  1888  019C                     	;# 
  1889  019C                     	;# 
  1890  019D                     	;# 
  1891  019E                     	;# 
  1892  019F                     	;# 
  1893  020D                     	;# 
  1894  0210                     	;# 
  1895  0211                     	;# 
  1896  0211                     	;# 
  1897  0212                     	;# 
  1898  0212                     	;# 
  1899  0213                     	;# 
  1900  0213                     	;# 
  1901  0214                     	;# 
  1902  0214                     	;# 
  1903  0215                     	;# 
  1904  0215                     	;# 
  1905  0215                     	;# 
  1906  0216                     	;# 
  1907  0216                     	;# 
  1908  0217                     	;# 
  1909  0217                     	;# 
  1910  0291                     	;# 
  1911  0291                     	;# 
  1912  0292                     	;# 
  1913  0293                     	;# 
  1914  0298                     	;# 
  1915  0298                     	;# 
  1916  0299                     	;# 
  1917  029A                     	;# 
  1918  0394                     	;# 
  1919  0395                     	;# 
  1920  0396                     	;# 
  1921  0FE4                     	;# 
  1922  0FE5                     	;# 
  1923  0FE6                     	;# 
  1924  0FE7                     	;# 
  1925  0FE8                     	;# 
  1926  0FE9                     	;# 
  1927  0FEA                     	;# 
  1928  0FEB                     	;# 
  1929  0FED                     	;# 
  1930  0FEE                     	;# 
  1931  0FEF                     	;# 
  1932  0000                     	;# 
  1933  0001                     	;# 
  1934  0002                     	;# 
  1935  0003                     	;# 
  1936  0004                     	;# 
  1937  0005                     	;# 
  1938  0006                     	;# 
  1939  0007                     	;# 
  1940  0008                     	;# 
  1941  0009                     	;# 
  1942  000A                     	;# 
  1943  000B                     	;# 
  1944  000C                     	;# 
  1945  000D                     	;# 
  1946  000E                     	;# 
  1947  0010                     	;# 
  1948  0011                     	;# 
  1949  0012                     	;# 
  1950  0015                     	;# 
  1951  0016                     	;# 
  1952  0016                     	;# 
  1953  0017                     	;# 
  1954  0018                     	;# 
  1955  0019                     	;# 
  1956  001A                     	;# 
  1957  001B                     	;# 
  1958  001C                     	;# 
  1959  008C                     	;# 
  1960  008D                     	;# 
  1961  008E                     	;# 
  1962  0090                     	;# 
  1963  0091                     	;# 
  1964  0092                     	;# 
  1965  0095                     	;# 
  1966  0096                     	;# 
  1967  0097                     	;# 
  1968  0099                     	;# 
  1969  009A                     	;# 
  1970  009B                     	;# 
  1971  009B                     	;# 
  1972  009C                     	;# 
  1973  009D                     	;# 
  1974  009E                     	;# 
  1975  010C                     	;# 
  1976  010D                     	;# 
  1977  010E                     	;# 
  1978  0116                     	;# 
  1979  0117                     	;# 
  1980  011D                     	;# 
  1981  018C                     	;# 
  1982  018D                     	;# 
  1983  018E                     	;# 
  1984  0191                     	;# 
  1985  0191                     	;# 
  1986  0192                     	;# 
  1987  0193                     	;# 
  1988  0193                     	;# 
  1989  0194                     	;# 
  1990  0195                     	;# 
  1991  0196                     	;# 
  1992  0197                     	;# 
  1993  0199                     	;# 
  1994  019A                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019B                     	;# 
  1999  019C                     	;# 
  2000  019C                     	;# 
  2001  019D                     	;# 
  2002  019E                     	;# 
  2003  019F                     	;# 
  2004  020D                     	;# 
  2005  0210                     	;# 
  2006  0211                     	;# 
  2007  0211                     	;# 
  2008  0212                     	;# 
  2009  0212                     	;# 
  2010  0213                     	;# 
  2011  0213                     	;# 
  2012  0214                     	;# 
  2013  0214                     	;# 
  2014  0215                     	;# 
  2015  0215                     	;# 
  2016  0215                     	;# 
  2017  0216                     	;# 
  2018  0216                     	;# 
  2019  0217                     	;# 
  2020  0217                     	;# 
  2021  0291                     	;# 
  2022  0291                     	;# 
  2023  0292                     	;# 
  2024  0293                     	;# 
  2025  0298                     	;# 
  2026  0298                     	;# 
  2027  0299                     	;# 
  2028  029A                     	;# 
  2029  0394                     	;# 
  2030  0395                     	;# 
  2031  0396                     	;# 
  2032  0FE4                     	;# 
  2033  0FE5                     	;# 
  2034  0FE6                     	;# 
  2035  0FE7                     	;# 
  2036  0FE8                     	;# 
  2037  0FE9                     	;# 
  2038  0FEA                     	;# 
  2039  0FEB                     	;# 
  2040  0FED                     	;# 
  2041  0FEE                     	;# 
  2042  0FEF                     	;# 
  2043                           
  2044                           	psect	idataBANK4
  2045  1F58                     __pidataBANK4:	
  2046                           
  2047                           ;initializer for __product
  2048  1F58  3463               	retlw	99
  2049  1F59  3402               	retlw	2
  2050  1F5A  3400               	retlw	0
  2051  1F5B  3400               	retlw	0
  2052  1F5C  3400               	retlw	0
  2053  1F5D  3400               	retlw	0
  2054  1F5E  3400               	retlw	0
  2055  1F5F  3400               	retlw	0
  2056  1F60  3400               	retlw	0
  2057  1F61  3400               	retlw	0
  2058  1F62  3400               	retlw	0
  2059  1F63  3400               	retlw	0
  2060  1F64  34FF               	retlw	255
  2061  1F65  34FF               	retlw	255
  2062  1F66  34FF               	retlw	255
  2063  1F67  3400               	retlw	0
  2064  1F68  3400               	retlw	0
  2065  1F69  3400               	retlw	0
  2066  1F6A  3400               	retlw	0
  2067  1F6B  3400               	retlw	0
  2068  1F6C  3400               	retlw	0
  2069  1F6D  3400               	retlw	0
  2070  1F6E  3400               	retlw	0
  2071  1F6F  3400               	retlw	0
  2072  1F70  3400               	retlw	0
  2073  1F71  3400               	retlw	0
  2074  1F72  3400               	retlw	0
  2075  1F73  3400               	retlw	0
  2076  1F74  3400               	retlw	0
  2077  1F75  3400               	retlw	0
  2078  1F76  3400               	retlw	0
  2079  1F77  3400               	retlw	0
  2080                           
  2081                           	psect	stringtext
  2082  1000                     __pstringtext:	
  2083  1000                     _CC2500_registers_address:	
  2084  1000  3403               	retlw	3
  2085  1001  3416               	retlw	22
  2086  1002  3417               	retlw	23
  2087  1003  341E               	retlw	30
  2088  1004  341F               	retlw	31
  2089  1005  3420               	retlw	32
  2090  1006  342A               	retlw	42
  2091  1007  342B               	retlw	43
  2092  1008  340B               	retlw	11
  2093  1009  340C               	retlw	12
  2094  100A  340D               	retlw	13
  2095  100B  340E               	retlw	14
  2096  100C  340F               	retlw	15
  2097  100D  3410               	retlw	16
  2098  100E  3411               	retlw	17
  2099  100F  3412               	retlw	18
  2100  1010  3413               	retlw	19
  2101  1011  3414               	retlw	20
  2102  1012  340A               	retlw	10
  2103  1013  3415               	retlw	21
  2104  1014  3421               	retlw	33
  2105  1015  3422               	retlw	34
  2106  1016  3418               	retlw	24
  2107  1017  3419               	retlw	25
  2108  1018  341A               	retlw	26
  2109  1019  341B               	retlw	27
  2110  101A  341C               	retlw	28
  2111  101B  341D               	retlw	29
  2112  101C  3423               	retlw	35
  2113  101D  3424               	retlw	36
  2114  101E  3425               	retlw	37
  2115  101F  3426               	retlw	38
  2116  1020  3429               	retlw	41
  2117  1021  342C               	retlw	44
  2118  1022  342D               	retlw	45
  2119  1023  342E               	retlw	46
  2120  1024  3400               	retlw	0
  2121  1025  3401               	retlw	1
  2122  1026  3402               	retlw	2
  2123  1027  3407               	retlw	7
  2124  1028  3408               	retlw	8
  2125  1029  3409               	retlw	9
  2126  102A  3406               	retlw	6
  2127  102B  3404               	retlw	4
  2128  102C  3405               	retlw	5
  2129  102D  3427               	retlw	39
  2130  102E  3428               	retlw	40
  2131  102F                     __end_of_CC2500_registers_address:	
  2132  102F                     _CC2500_rfSettings:	
  2133  102F  3407               	retlw	7
  2134  1030  3407               	retlw	7
  2135  1031  3430               	retlw	48
  2136  1032  3487               	retlw	135
  2137  1033  346B               	retlw	107
  2138  1034  34F8               	retlw	248
  2139  1035  347F               	retlw	127
  2140  1036  343F               	retlw	63
  2141  1037  3409               	retlw	9
  2142  1038  3400               	retlw	0
  2143  1039  345C               	retlw	92
  2144  103A  34A7               	retlw	167
  2145  103B  3462               	retlw	98
  2146  103C  3486               	retlw	134
  2147  103D  3483               	retlw	131
  2148  103E  3403               	retlw	3
  2149  103F  3422               	retlw	34
  2150  1040  34F8               	retlw	248
  2151  1041  3400               	retlw	0
  2152  1042  3444               	retlw	68
  2153  1043  34B6               	retlw	182
  2154  1044  3410               	retlw	16
  2155  1045  3418               	retlw	24
  2156  1046  341D               	retlw	29
  2157  1047  341C               	retlw	28
  2158  1048  34C7               	retlw	199
  2159  1049  3400               	retlw	0
  2160  104A  34B2               	retlw	178
  2161  104B  34EA               	retlw	234
  2162  104C  340A               	retlw	10
  2163  104D  3400               	retlw	0
  2164  104E  3411               	retlw	17
  2165  104F  3459               	retlw	89
  2166  1050  3488               	retlw	136
  2167  1051  3431               	retlw	49
  2168  1052  340B               	retlw	11
  2169  1053  342F               	retlw	47
  2170  1054  342E               	retlw	46
  2171  1055  3406               	retlw	6
  2172  1056  3404               	retlw	4
  2173  1057  3405               	retlw	5
  2174  1058  3400               	retlw	0
  2175  1059  3430               	retlw	48
  2176  105A  34D3               	retlw	211
  2177  105B  3491               	retlw	145
  2178  105C  3441               	retlw	65
  2179  105D  3400               	retlw	0
  2180  105E                     __end_of_CC2500_rfSettings:	
  2181  105E                     _CC2500_patable_vaule:	
  2182  105E  34FE               	retlw	254
  2183  105F  34FE               	retlw	254
  2184  1060  34FE               	retlw	254
  2185  1061  34FE               	retlw	254
  2186  1062  34FE               	retlw	254
  2187  1063  34FE               	retlw	254
  2188  1064  34FE               	retlw	254
  2189  1065  34FE               	retlw	254
  2190  1066                     __end_of_CC2500_patable_vaule:	
  2191                           
  2192                           	psect	nvBANK0
  2193  006E                     __pnvBANK0:	
  2194  006E                     _product:	
  2195  006E                     	ds	1
  2196  000C                     _PORTA	set	12
  2197  000D                     _PORTB	set	13
  2198  000E                     _PORTC	set	14
  2199  0018                     _T1CON	set	24
  2200  0017                     _TMR1H	set	23
  2201  0016                     _TMR1L	set	22
  2202  005F                     _GIE	set	95
  2203  005B                     _IOCIE	set	91
  2204  0058                     _IOCIF	set	88
  2205  005E                     _PEIE	set	94
  2206  0060                     _RA0	set	96
  2207  0063                     _RA3	set	99
  2208  0064                     _RA4	set	100
  2209  0066                     _RA6	set	102
  2210  0067                     _RA7	set	103
  2211  0068                     _RB0	set	104
  2212  0069                     _RB1	set	105
  2213  006B                     _RB3	set	107
  2214  006C                     _RB4	set	108
  2215  006D                     _RB5	set	109
  2216  0070                     _RC0	set	112
  2217  0071                     _RC1	set	113
  2218  0072                     _RC2	set	114
  2219  0074                     _RC4	set	116
  2220  0075                     _RC5	set	117
  2221  0077                     _RC7	set	119
  2222  0088                     _TMR1IF	set	136
  2223  009D                     _ADCON0	set	157
  2224  009E                     _ADCON1	set	158
  2225  009C                     _ADRESH	set	156
  2226  009B                     _ADRESL	set	155
  2227  0099                     _OSCCON	set	153
  2228  008C                     _TRISA	set	140
  2229  008D                     _TRISB	set	141
  2230  008E                     _TRISC	set	142
  2231  0097                     _WDTCON	set	151
  2232  04E9                     _GO_nDONE	set	1257
  2233  0488                     _TMR1IE	set	1160
  2234  0117                     _FVRCON	set	279
  2235  010C                     _LATA	set	268
  2236  010D                     _LATB	set	269
  2237  010E                     _LATC	set	270
  2238  018C                     _ANSELA	set	396
  2239  018D                     _ANSELB	set	397
  2240  018E                     _ANSELC	set	398
  2241  0192                     _PMADRH	set	402
  2242  0191                     _PMADRL	set	401
  2243  0196                     _PMCON2	set	406
  2244  0194                     _PMDATH	set	404
  2245  0193                     _PMDATL	set	403
  2246  0CAE                     _CFGS	set	3246
  2247  0CAC                     _FREE	set	3244
  2248  0CAD                     _LWLO	set	3245
  2249  0CA8                     _RD	set	3240
  2250  0CA9                     _WR	set	3241
  2251  0CAA                     _WREN	set	3242
  2252  1069                     _WPUB1	set	4201
  2253  106A                     _WPUB2	set	4202
  2254  0396                     _IOCBF	set	918
  2255  0395                     _IOCBN	set	917
  2256  0394                     _IOCBP	set	916
  2257  1CB2                     _IOCBF2	set	7346
  2258                           
  2259                           ; #config settings
  2260  0000                     
  2261                           	psect	cinit
  2262  0015                     start_initialization:	
  2263  0015                     __initialization:	
  2264                           
  2265                           ; Clear objects allocated to BITCOMMON
  2266  0015  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2267                           
  2268                           ; Clear objects allocated to COMMON
  2269  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2270  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2271  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2272  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2273  001A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2274                           
  2275                           ; Clear objects allocated to BANK0
  2276  001B  01EF               	clrf	__pbssBANK0& (0+127)
  2277                           
  2278                           ; Clear objects allocated to BANK1
  2279  001C  30A0               	movlw	low __pbssBANK1
  2280  001D  0084               	movwf	4
  2281  001E  3000               	movlw	high __pbssBANK1
  2282  001F  0085               	movwf	5
  2283  0020  3049               	movlw	73
  2284  0021  319B  2375  3180   	fcall	clear_ram0
  2285                           
  2286                           ; Clear objects allocated to BANK2
  2287  0024  3020               	movlw	low __pbssBANK2
  2288  0025  0084               	movwf	4
  2289  0026  3001               	movlw	high __pbssBANK2
  2290  0027  0085               	movwf	5
  2291  0028  3049               	movlw	73
  2292  0029  319B  2375  3180   	fcall	clear_ram0
  2293                           
  2294                           ; Clear objects allocated to BANK3
  2295  002C  30A0               	movlw	low __pbssBANK3
  2296  002D  0084               	movwf	4
  2297  002E  3001               	movlw	high __pbssBANK3
  2298  002F  0085               	movwf	5
  2299  0030  304E               	movlw	78
  2300  0031  319B  2375  3180   	fcall	clear_ram0
  2301                           
  2302                           ; Clear objects allocated to BANK4
  2303  0034  3020               	movlw	low __pbssBANK4
  2304  0035  0084               	movwf	4
  2305  0036  3002               	movlw	high __pbssBANK4
  2306  0037  0085               	movwf	5
  2307  0038  3025               	movlw	37
  2308  0039  319B  2375  3180   	fcall	clear_ram0
  2309                           
  2310                           ; Initialize objects allocated to BANK4
  2311  003C  3058               	movlw	low __pidataBANK4
  2312  003D  0084               	movwf	4
  2313  003E  309F               	movlw	(high __pidataBANK4)| (0+128)
  2314  003F  0085               	movwf	5
  2315  0040  3045               	movlw	low __pdataBANK4
  2316  0041  0086               	movwf	6
  2317  0042  3002               	movlw	high __pdataBANK4
  2318  0043  0087               	movwf	7
  2319  0044  3020               	movlw	32
  2320  0045  319B  236F         	fcall	init_ram
  2321  0047                     end_of_initialization:	
  2322                           ;End of C runtime variable initialization code
  2323                           
  2324  0047                     __end_of__initialization:	
  2325  0047  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2326  0048  0020               	movlb	0
  2327  0049  3196  2E40         	ljmp	_main	;jump to C main() function
  2328                           
  2329                           	psect	bitbssCOMMON
  2330  03E8                     __pbitbssCOMMON:	
  2331  03E8                     _Receive_OK:	
  2332  03E8                     	ds	1
  2333  03E9                     _Transceive_OK:	
  2334  03E9                     	ds	1
  2335                           
  2336                           	psect	bssCOMMON
  2337  0078                     __pbssCOMMON:	
  2338  0078                     _DelayOff:	
  2339  0078                     	ds	1
  2340  0079                     _DimmerLightsIntr:	
  2341  0079                     	ds	1
  2342  007A                     _LED:	
  2343  007A                     	ds	1
  2344  007B                     _SPI0Buffer:	
  2345  007B                     	ds	1
  2346  007C                     _Sw:	
  2347  007C                     	ds	1
  2348                           
  2349                           	psect	bssBANK0
  2350  006F                     __pbssBANK0:	
  2351  006F                     _DimmerLights:	
  2352  006F                     	ds	1
  2353                           
  2354                           	psect	bssBANK1
  2355  00A0                     __pbssBANK1:	
  2356  00A0                     _myMain:	
  2357  00A0                     	ds	16
  2358  00B0                     _Buz1:	
  2359  00B0                     	ds	12
  2360  00BC                     _RF1:	
  2361  00BC                     	ds	12
  2362  00C8                     _RF_Count:	
  2363  00C8                     	ds	2
  2364  00CA                     _WDT:	
  2365  00CA                     	ds	2
  2366  00CC                     _CRC:	
  2367  00CC                     	ds	1
  2368  00CD                     _DimmerLights11:	
  2369  00CD                     	ds	1
  2370  00CE                     _DimmerLights22:	
  2371  00CE                     	ds	1
  2372  00CF                     _DimmerLightsIntrIOC:	
  2373  00CF                     	ds	1
  2374  00D0                     _RSSI:	
  2375  00D0                     	ds	1
  2376  00D1                     _Rx_Length:	
  2377  00D1                     	ds	1
  2378  00D2                     _SwDetect:	
  2379  00D2                     	ds	1
  2380  00D3                     _Tx_Length:	
  2381  00D3                     	ds	1
  2382  00D4                     _r_address:	
  2383  00D4                     	ds	1
  2384  00D5                     _r_data:	
  2385  00D5                     	ds	1
  2386  00D6                     _s_data:	
  2387  00D6                     	ds	1
  2388  00D7                     _Temp:	
  2389  00D7                     	ds	18
  2390                           
  2391                           	psect	bssBANK2
  2392  0120                     __pbssBANK2:	
  2393  0120                     _Dimmer:	
  2394  0120                     	ds	3
  2395  0123                     _Timer1:	
  2396  0123                     	ds	3
  2397  0126                     _Load:	
  2398  0126                     	ds	45
  2399  0153                     _DlySw1:	
  2400  0153                     	ds	5
  2401  0158                     _DlySw2:	
  2402  0158                     	ds	5
  2403  015D                     _VarErrLED:	
  2404  015D                     	ds	4
  2405  0161                     _VarLED1:	
  2406  0161                     	ds	4
  2407  0165                     _VarLED2:	
  2408  0165                     	ds	4
  2409                           
  2410                           	psect	bssBANK3
  2411  01A0                     __pbssBANK3:	
  2412  01A0                     _RF_Data:	
  2413  01A0                     	ds	30
  2414  01BE                     _DimmerLights1:	
  2415  01BE                     	ds	15
  2416  01CD                     _DimmerLights2:	
  2417  01CD                     	ds	15
  2418  01DC                     _Sw1:	
  2419  01DC                     	ds	9
  2420  01E5                     _Sw2:	
  2421  01E5                     	ds	9
  2422                           
  2423                           	psect	bssBANK4
  2424  0220                     __pbssBANK4:	
  2425  0220                     _Memory:	
  2426  0220                     	ds	37
  2427                           
  2428                           	psect	dataBANK4
  2429  0245                     __pdataBANK4:	
  2430  0245                     __product:	
  2431  0245                     	ds	32
  2432                           
  2433                           	psect	clrtext
  2434  1B75                     clear_ram0:	
  2435                           ;	Called with FSR0 containing the base address, and
  2436                           ;	WREG with the size to clear
  2437                           
  2438  1B75  0064               	clrwdt	;clear the watchdog before getting into this loop
  2439  1B76                     clrloop0:	
  2440  1B76  0180               	clrf	0	;clear RAM location pointed to by FSR
  2441  1B77  3101               	addfsr 0,1
  2442  1B78  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2443  1B79  2B76               	goto	clrloop0	;have we reached the end yet?
  2444  1B7A  3400               	retlw	0	;all done for this memory range, return
  2445                           
  2446                           	psect	inittext
  2447  1B6F                     init_ram:	
  2448  1B6F  00FE               	movwf	126
  2449  1B70                     initloop:	
  2450  1B70  0012               	moviw fsr0++
  2451  1B71  001E               	movwi fsr1++
  2452  1B72  0BFE               	decfsz	126,f
  2453  1B73  2B70               	goto	initloop
  2454  1B74  3400               	retlw	0
  2455                           
  2456                           	psect	cstackBANK1
  2457  00E9                     __pcstackBANK1:	
  2458  00E9                     setRF_Main@loop_f:	
  2459                           
  2460                           ; 1 bytes @ 0x0
  2461  00E9                     	ds	1
  2462  00EA                     setRF_Main@Receive_OK:	
  2463                           
  2464                           ; 1 bytes @ 0x1
  2465  00EA                     	ds	1
  2466  00EB                     setRF_Main@error:	
  2467                           
  2468                           ; 1 bytes @ 0x2
  2469  00EB                     	ds	1
  2470  00EC                     ?_main:	
  2471  00EC                     main@argc:	
  2472                           ; 2 bytes @ 0x3
  2473                           
  2474                           
  2475                           ; 2 bytes @ 0x3
  2476  00EC                     	ds	2
  2477  00EE                     main@argv:	
  2478                           
  2479                           ; 2 bytes @ 0x5
  2480  00EE                     	ds	2
  2481                           
  2482                           	psect	cstackCOMMON
  2483  0070                     __pcstackCOMMON:	
  2484  0070                     ?_Timeout_Counter:	
  2485  0070                     ?_set_TimeoutCleared:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0070                     ?_CC2500_WriteByte:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0070                     ?_CC2500_WriteCommand:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0070                     ?_CC2500_ReadStatus:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0070                     ?_CC2500_ReadByte:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0070                     ?_CC2500_PowerRST:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0070                     ?_CC2500_InitSetREG:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0070                     ?_CC2500_InitPATable:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0070                     ?_CC2500_ClearTXFIFO:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0070                     ?_CC2500_ClearRXFIFO:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0070                     ?_CC2500_FrequencyCabr:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0070                     ?_CC2500_SIDLEMode:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0070                     ?_DlyOff_Initialization:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0070                     ?_DlyOff_Main:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0070                     ?_setDimmerLights_ErrorClose:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0070                     ?_setDimmerLights_Initialization:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0070                     ?_Dimmer_Initialization:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0070                     ?_setDimmerLights_Main:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0070                     ?_setDimmerLights_Line:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0070                     ?_setTxData:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0070                     ?_setLED_Initialization:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0070                     ?_setLED_Main:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0070                     ?_Fosc_Set:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0070                     ?_IO_Set:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0070                     ?_TMR1_Set:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0070                     ?_ADC_Set:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0070                     ?_IOC_Set:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0070                     ?_WDT_Set:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0070                     ?_IOC_ISR:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0070                     ?_TMR1_ISR:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_Flash_Memory_Write:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_Flash_Memory_Modify:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_WDT_Clearing:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_setLoad_AH_AL_Restore:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_setTemp_Initialization:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_setTemp_Main:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_setRF_Initialization:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_setRF_Main:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_getRxData:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_setLog_Code:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_setControl_Lights_Table:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_setRFSW_Control:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_setRFSW_AdjControl:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_setRF_DimmerValue:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_setSw_Initialization:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_setMain_Exception:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_setSw_Main:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_myMain_Initialization:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_my_MainTimer:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_Buzzer_Initialization:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_Buzzer_Main:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_CC2500_TxData:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_CC2500_RxData:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_CC2500_PowerOnInitial:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_DelayOffPointSelect:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_DelayOff_Initialization:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_DelayOff_Main:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_DimmerIntrIOCPointSelect:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ??_DimmerIntrIOCPointSelect:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_DimmerIntrPointSelect:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ??_DimmerIntrPointSelect:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_setDimmerLights_IntrControl:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_DimmerLightsPointSelect:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_DimmerLights_Initialization:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_DimmerLights_Main:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_setDimmerLights_SwOn:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_setDimmerLights_SwOff:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_setDimmerLights_AdjControl:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_setDimmerLights_AdjRF:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_LedPointSelect:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_LED_Initialization:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_LED_Main:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_Mcu_Initialization:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_ISR:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_setDimmerReClock:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_Flash_Memory_Initialization:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Flash_Memory_Main:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_Flash_Memory_Unlock:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_Flash_Memory_Erasing:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_setMemory_Modify:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_setMemory_LoopSave:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_WDT_Main:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_Load_Initialization:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_getLoad_AD:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_Load_Main:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_Temp_Initialization:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_getTemp_AD:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_Temp_Main:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_RF_Initialization:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_RF_Main:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_setRF_Learn:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_TouchPower:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_SwPointSelect:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_Switch_Initialization:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_Switch_Main:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_DelayTimejudge:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_getMain_All_Error_Status:	
  2777                           ; 1 bytes @ 0x0
  2778                           
  2779  0070                     ?_getLoad_OK:	
  2780                           ; 1 bytes @ 0x0
  2781                           
  2782  0070                     ?_getMain_LightsStatus:	
  2783                           ; 1 bytes @ 0x0
  2784                           
  2785  0070                     ?_setPercentValue:	
  2786                           ; 1 bytes @ 0x0
  2787                           
  2788  0070                     ?_getPercentValue:	
  2789                           ; 1 bytes @ 0x0
  2790                           
  2791  0070                     ?_Flash_Memory_Read:	
  2792                           ; 1 bytes @ 0x0
  2793                           
  2794  0070                     ?_getMain_LoadOK:	
  2795                           ; 1 bytes @ 0x0
  2796                           
  2797  0070                     ?_getMain_Lights_Count:	
  2798                           ; 1 bytes @ 0x0
  2799                           
  2800  0070                     ?_getRF_KeyStatus:	
  2801                           ; 1 bytes @ 0x0
  2802                           
  2803  0070                     ?_getSw_KeyStatus:	
  2804                           ; 1 bytes @ 0x0
  2805                           
  2806  0070                     ?_getDelayOff_GO:	
  2807                           ; 1 bytes @ 0x0
  2808                           
  2809  0070                     ?_getDimmerLights_Status:	
  2810                           ; 1 bytes @ 0x0
  2811                           
  2812  0070                     ?_getAll_DimmerLights_AdjGO:	
  2813                           ; 1 bytes @ 0x0
  2814                           
  2815  0070                     ?_getDimmer_LoadOK:	
  2816                           ; 1 bytes @ 0x0
  2817                           
  2818  0070                     ?_getDimmerLights_Line:	
  2819                           ; 1 bytes @ 0x0
  2820                           
  2821                           
  2822                           ; 1 bytes @ 0x0
  2823  0070                     	ds	1
  2824  0071                     DimmerIntrIOCPointSelect@lights:	
  2825  0071                     DimmerIntrPointSelect@lights:	
  2826                           ; 1 bytes @ 0x1
  2827                           
  2828                           
  2829                           ; 1 bytes @ 0x1
  2830  0071                     	ds	1
  2831  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2832  0072                     ??_setDimmerLights_IntrControl:	
  2833                           ; 0 bytes @ 0x2
  2834                           
  2835  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2836                           ; 0 bytes @ 0x2
  2837                           
  2838                           
  2839                           ; 1 bytes @ 0x2
  2840  0072                     	ds	1
  2841  0073                     ??_IOC_ISR:	
  2842  0073                     ??_setDimmerReClock:	
  2843                           ; 0 bytes @ 0x3
  2844                           
  2845                           
  2846                           ; 0 bytes @ 0x3
  2847  0073                     	ds	3
  2848  0076                     setDimmerLights_IntrControl@lights:	
  2849                           
  2850                           ; 1 bytes @ 0x6
  2851  0076                     	ds	1
  2852  0077                     ??_TMR1_ISR:	
  2853  0077                     ??_ISR:	
  2854                           ; 0 bytes @ 0x7
  2855                           
  2856                           
  2857                           ; 0 bytes @ 0x7
  2858  0077                     	ds	1
  2859                           
  2860                           	psect	cstackBANK0
  2861  0020                     __pcstackBANK0:	
  2862  0020                     ??_Timeout_Counter:	
  2863  0020                     ??_set_TimeoutCleared:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0020                     ??_CC2500_WriteByte:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0020                     ??_CC2500_ReadByte:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0020                     ?_DelayTime_1us:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0020                     ??_Dimmer_Initialization:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0020                     ??_getMain_All_Error_Status:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0020                     ??_getLoad_OK:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0020                     ??_setDimmerLights_Line:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0020                     ?_setRF_DimmerLights:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0020                     ??_setTxData:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0020                     ??_Fosc_Set:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0020                     ??_IO_Set:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0020                     ??_TMR1_Set:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0020                     ??_ADC_Set:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0020                     ??_IOC_Set:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0020                     ??_WDT_Set:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0020                     ??_Flash_Memory_Read:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0020                     ?_setMemory_Data:	
  2915                           ; 0 bytes @ 0x0
  2916                           
  2917  0020                     ??_Flash_Memory_Write:	
  2918                           ; 0 bytes @ 0x0
  2919                           
  2920  0020                     ??_WDT_Clearing:	
  2921                           ; 0 bytes @ 0x0
  2922                           
  2923  0020                     ??_setLoad_AH_AL_Restore:	
  2924                           ; 0 bytes @ 0x0
  2925                           
  2926  0020                     ??_getMain_Lights_Count:	
  2927                           ; 0 bytes @ 0x0
  2928                           
  2929  0020                     ??_setTemp_Initialization:	
  2930                           ; 0 bytes @ 0x0
  2931                           
  2932  0020                     ??_setRF_Initialization:	
  2933                           ; 0 bytes @ 0x0
  2934                           
  2935  0020                     ??_getRF_KeyStatus:	
  2936                           ; 0 bytes @ 0x0
  2937                           
  2938  0020                     ??_getSw_KeyStatus:	
  2939                           ; 0 bytes @ 0x0
  2940                           
  2941  0020                     ??_myMain_Initialization:	
  2942                           ; 0 bytes @ 0x0
  2943                           
  2944  0020                     ??_Buzzer_Initialization:	
  2945                           ; 0 bytes @ 0x0
  2946                           
  2947  0020                     ??_Buzzer_Main:	
  2948                           ; 0 bytes @ 0x0
  2949                           
  2950  0020                     ??_DelayOffPointSelect:	
  2951                           ; 0 bytes @ 0x0
  2952                           
  2953  0020                     ??_DimmerLightsPointSelect:	
  2954                           ; 0 bytes @ 0x0
  2955                           
  2956  0020                     ??_getAll_DimmerLights_AdjGO:	
  2957                           ; 0 bytes @ 0x0
  2958                           
  2959  0020                     ??_getDimmer_LoadOK:	
  2960                           ; 0 bytes @ 0x0
  2961                           
  2962  0020                     ??_getDimmerLights_Line:	
  2963                           ; 0 bytes @ 0x0
  2964                           
  2965  0020                     ??_LedPointSelect:	
  2966                           ; 0 bytes @ 0x0
  2967                           
  2968  0020                     ??_Flash_Memory_Unlock:	
  2969                           ; 0 bytes @ 0x0
  2970                           
  2971  0020                     ??_Flash_Memory_Erasing:	
  2972                           ; 0 bytes @ 0x0
  2973                           
  2974  0020                     ??_setMemory_Modify:	
  2975                           ; 0 bytes @ 0x0
  2976                           
  2977  0020                     ??_setMemory_LoopSave:	
  2978                           ; 0 bytes @ 0x0
  2979                           
  2980  0020                     ??_WDT_Main:	
  2981                           ; 0 bytes @ 0x0
  2982                           
  2983  0020                     ??_Temp_Initialization:	
  2984                           ; 0 bytes @ 0x0
  2985                           
  2986  0020                     ??_setRF_Learn:	
  2987                           ; 0 bytes @ 0x0
  2988                           
  2989  0020                     ??_TouchPower:	
  2990                           ; 0 bytes @ 0x0
  2991                           
  2992  0020                     ??_SwPointSelect:	
  2993                           ; 0 bytes @ 0x0
  2994                           
  2995  0020                     ?___bmul:	
  2996                           ; 0 bytes @ 0x0
  2997                           
  2998  0020                     ?_getBuz_GO:	
  2999                           ; 1 bytes @ 0x0
  3000                           
  3001  0020                     ?_getAD:	
  3002                           ; 2 bytes @ 0x0
  3003                           
  3004  0020                     ?___awdiv:	
  3005                           ; 2 bytes @ 0x0
  3006                           
  3007  0020                     ?___ftpack:	
  3008                           ; 2 bytes @ 0x0
  3009                           
  3010  0020                     getDimmer_LoadOK@status:	
  3011                           ; 3 bytes @ 0x0
  3012                           
  3013  0020                     setDimmerLights_Line@lights:	
  3014                           ; 1 bytes @ 0x0
  3015                           
  3016  0020                     getAD@adcon1:	
  3017                           ; 1 bytes @ 0x0
  3018                           
  3019  0020                     setMemory_Data@data:	
  3020                           ; 1 bytes @ 0x0
  3021                           
  3022  0020                     getLoad_OK@ok:	
  3023                           ; 1 bytes @ 0x0
  3024                           
  3025  0020                     setRF_DimmerLights@on:	
  3026                           ; 1 bytes @ 0x0
  3027                           
  3028  0020                     getMain_Lights_Count@count:	
  3029                           ; 1 bytes @ 0x0
  3030                           
  3031  0020                     ___bmul@multiplicand:	
  3032                           ; 1 bytes @ 0x0
  3033                           
  3034  0020                     DelayTime_1us@count:	
  3035                           ; 1 bytes @ 0x0
  3036                           
  3037  0020                     ___awdiv@divisor:	
  3038                           ; 2 bytes @ 0x0
  3039                           
  3040  0020                     ___ftpack@arg:	
  3041                           ; 2 bytes @ 0x0
  3042                           
  3043                           
  3044                           ; 3 bytes @ 0x0
  3045  0020                     	ds	1
  3046  0021                     ??_setRF_DimmerLights:	
  3047  0021                     ??_setMemory_Data:	
  3048                           ; 0 bytes @ 0x1
  3049                           
  3050  0021                     ??_getMain_LoadOK:	
  3051                           ; 0 bytes @ 0x1
  3052                           
  3053  0021                     ??_Mcu_Initialization:	
  3054                           ; 0 bytes @ 0x1
  3055                           
  3056  0021                     ??_RF_Initialization:	
  3057                           ; 0 bytes @ 0x1
  3058                           
  3059  0021                     ??___bmul:	
  3060                           ; 0 bytes @ 0x1
  3061                           
  3062  0021                     CC2500_WriteByte@loop_a:	
  3063                           ; 0 bytes @ 0x1
  3064                           
  3065  0021                     CC2500_ReadByte@loop_b:	
  3066                           ; 1 bytes @ 0x1
  3067                           
  3068  0021                     DelayOffPointSelect@sw:	
  3069                           ; 1 bytes @ 0x1
  3070                           
  3071  0021                     DimmerLightsPointSelect@lights:	
  3072                           ; 1 bytes @ 0x1
  3073                           
  3074  0021                     getAll_DimmerLights_AdjGO@adjgo:	
  3075                           ; 1 bytes @ 0x1
  3076                           
  3077  0021                     getDimmerLights_Line@line:	
  3078                           ; 1 bytes @ 0x1
  3079                           
  3080  0021                     LedPointSelect@led:	
  3081                           ; 1 bytes @ 0x1
  3082                           
  3083  0021                     Flash_Memory_Read@i:	
  3084                           ; 1 bytes @ 0x1
  3085                           
  3086  0021                     Flash_Memory_Write@i:	
  3087                           ; 1 bytes @ 0x1
  3088                           
  3089  0021                     setMemory_Modify@command:	
  3090                           ; 1 bytes @ 0x1
  3091                           
  3092  0021                     setMemory_LoopSave@command:	
  3093                           ; 1 bytes @ 0x1
  3094                           
  3095  0021                     setLoad_AH_AL_Restore@i:	
  3096                           ; 1 bytes @ 0x1
  3097                           
  3098  0021                     setRF_Learn@command:	
  3099                           ; 1 bytes @ 0x1
  3100                           
  3101  0021                     getRF_KeyStatus@key:	
  3102                           ; 1 bytes @ 0x1
  3103                           
  3104  0021                     SwPointSelect@sw:	
  3105                           ; 1 bytes @ 0x1
  3106                           
  3107  0021                     _getSw_KeyStatus$6330:	
  3108                           ; 1 bytes @ 0x1
  3109                           
  3110  0021                     getMain_Lights_Count@status3:	
  3111                           ; 1 bytes @ 0x1
  3112                           
  3113  0021                     _getMain_All_Error_Status$7075:	
  3114                           ; 1 bytes @ 0x1
  3115                           
  3116                           
  3117                           ; 2 bytes @ 0x1
  3118  0021                     	ds	1
  3119  0022                     ??_CC2500_WriteCommand:	
  3120  0022                     ??_CC2500_ReadStatus:	
  3121                           ; 0 bytes @ 0x2
  3122                           
  3123  0022                     ??_DelayTime_1us:	
  3124                           ; 0 bytes @ 0x2
  3125                           
  3126  0022                     ?_CC2500_WriteREG:	
  3127                           ; 0 bytes @ 0x2
  3128                           
  3129  0022                     ??_DlyOff_Initialization:	
  3130                           ; 0 bytes @ 0x2
  3131                           
  3132  0022                     ??_setDimmerLights_Initialization:	
  3133                           ; 0 bytes @ 0x2
  3134                           
  3135  0022                     ?_setDimmerLights_Trigger:	
  3136                           ; 0 bytes @ 0x2
  3137                           
  3138  0022                     ?_setDimmerLights_TriggerAdj:	
  3139                           ; 0 bytes @ 0x2
  3140                           
  3141  0022                     ?_setLED:	
  3142                           ; 0 bytes @ 0x2
  3143                           
  3144  0022                     ??_setLED_Main:	
  3145                           ; 0 bytes @ 0x2
  3146                           
  3147  0022                     ??_getBuz_GO:	
  3148                           ; 0 bytes @ 0x2
  3149                           
  3150  0022                     ??_getDelayOff_GO:	
  3151                           ; 0 bytes @ 0x2
  3152                           
  3153  0022                     ??_getDimmerLights_Status:	
  3154                           ; 0 bytes @ 0x2
  3155                           
  3156  0022                     ??_Load_Initialization:	
  3157                           ; 0 bytes @ 0x2
  3158                           
  3159  0022                     CC2500_WriteREG@value:	
  3160                           ; 0 bytes @ 0x2
  3161                           
  3162  0022                     DlyOff_Initialization@sw:	
  3163                           ; 1 bytes @ 0x2
  3164                           
  3165  0022                     getDelayOff_GO@sw:	
  3166                           ; 1 bytes @ 0x2
  3167                           
  3168  0022                     getDimmerLights_Status@lights:	
  3169                           ; 1 bytes @ 0x2
  3170                           
  3171  0022                     _getAll_DimmerLights_AdjGO$2556:	
  3172                           ; 1 bytes @ 0x2
  3173                           
  3174  0022                     setDimmerLights_Trigger@command:	
  3175                           ; 1 bytes @ 0x2
  3176                           
  3177  0022                     setDimmerLights_TriggerAdj@command:	
  3178                           ; 1 bytes @ 0x2
  3179                           
  3180  0022                     setLED@command:	
  3181                           ; 1 bytes @ 0x2
  3182                           
  3183  0022                     Flash_Memory_Read@address:	
  3184                           ; 1 bytes @ 0x2
  3185                           
  3186  0022                     setMemory_Data@address:	
  3187                           ; 1 bytes @ 0x2
  3188                           
  3189  0022                     _getRF_KeyStatus$5256:	
  3190                           ; 1 bytes @ 0x2
  3191                           
  3192  0022                     _getSw_KeyStatus$6331:	
  3193                           ; 1 bytes @ 0x2
  3194                           
  3195  0022                     getMain_Lights_Count@status1:	
  3196                           ; 1 bytes @ 0x2
  3197                           
  3198  0022                     getMain_LoadOK@ok:	
  3199                           ; 1 bytes @ 0x2
  3200                           
  3201  0022                     ___bmul@product:	
  3202                           ; 1 bytes @ 0x2
  3203                           
  3204  0022                     DelayTime_1us@i:	
  3205                           ; 1 bytes @ 0x2
  3206                           
  3207  0022                     ___awdiv@dividend:	
  3208                           ; 2 bytes @ 0x2
  3209                           
  3210                           
  3211                           ; 2 bytes @ 0x2
  3212  0022                     	ds	1
  3213  0023                     ??_CC2500_WriteREG:	
  3214  0023                     ??_setDimmerLights_Trigger:	
  3215                           ; 0 bytes @ 0x3
  3216                           
  3217  0023                     ??_setDimmerLights_TriggerAdj:	
  3218                           ; 0 bytes @ 0x3
  3219                           
  3220  0023                     ??_setLED:	
  3221                           ; 0 bytes @ 0x3
  3222                           
  3223  0023                     ??_DelayOff_Initialization:	
  3224                           ; 0 bytes @ 0x3
  3225                           
  3226  0023                     ??_getAD:	
  3227                           ; 0 bytes @ 0x3
  3228                           
  3229  0023                     CC2500_WriteCommand@command:	
  3230                           ; 0 bytes @ 0x3
  3231                           
  3232  0023                     CC2500_ReadStatus@status_addr:	
  3233                           ; 1 bytes @ 0x3
  3234                           
  3235  0023                     getDelayOff_GO@go:	
  3236                           ; 1 bytes @ 0x3
  3237                           
  3238  0023                     setDimmerLights_Initialization@lights:	
  3239                           ; 1 bytes @ 0x3
  3240                           
  3241  0023                     getDimmerLights_Status@status:	
  3242                           ; 1 bytes @ 0x3
  3243                           
  3244  0023                     setLED@led:	
  3245                           ; 1 bytes @ 0x3
  3246                           
  3247  0023                     getAD@adcon0:	
  3248                           ; 1 bytes @ 0x3
  3249                           
  3250  0023                     Flash_Memory_Read@ret:	
  3251                           ; 1 bytes @ 0x3
  3252                           
  3253  0023                     setRF_DimmerLights@status:	
  3254                           ; 1 bytes @ 0x3
  3255                           
  3256  0023                     getSw_KeyStatus@status:	
  3257                           ; 1 bytes @ 0x3
  3258                           
  3259  0023                     getMain_Lights_Count@status2:	
  3260                           ; 1 bytes @ 0x3
  3261                           
  3262  0023                     ___bmul@multiplier:	
  3263                           ; 1 bytes @ 0x3
  3264                           
  3265  0023                     ___ftpack@exp:	
  3266                           ; 1 bytes @ 0x3
  3267                           
  3268  0023                     _getMain_All_Error_Status$7076:	
  3269                           ; 1 bytes @ 0x3
  3270                           
  3271                           
  3272                           ; 2 bytes @ 0x3
  3273  0023                     	ds	1
  3274  0024                     ??_CC2500_ClearTXFIFO:	
  3275  0024                     ??_CC2500_ClearRXFIFO:	
  3276                           ; 0 bytes @ 0x4
  3277                           
  3278  0024                     ??_CC2500_SIDLEMode:	
  3279                           ; 0 bytes @ 0x4
  3280                           
  3281  0024                     ??_DelayTimejudge:	
  3282                           ; 0 bytes @ 0x4
  3283                           
  3284  0024                     ??_getMain_LightsStatus:	
  3285                           ; 0 bytes @ 0x4
  3286                           
  3287  0024                     ??_setLED_Initialization:	
  3288                           ; 0 bytes @ 0x4
  3289                           
  3290  0024                     ??_Flash_Memory_Modify:	
  3291                           ; 0 bytes @ 0x4
  3292                           
  3293  0024                     ??_setSw_Initialization:	
  3294                           ; 0 bytes @ 0x4
  3295                           
  3296  0024                     ??_CC2500_TxData:	
  3297                           ; 0 bytes @ 0x4
  3298                           
  3299  0024                     ??_CC2500_RxData:	
  3300                           ; 0 bytes @ 0x4
  3301                           
  3302  0024                     ??_DimmerLights_Initialization:	
  3303                           ; 0 bytes @ 0x4
  3304                           
  3305  0024                     ??_getLoad_AD:	
  3306                           ; 0 bytes @ 0x4
  3307                           
  3308  0024                     ??_getTemp_AD:	
  3309                           ; 0 bytes @ 0x4
  3310                           
  3311  0024                     ??___awdiv:	
  3312                           ; 0 bytes @ 0x4
  3313                           
  3314  0024                     CC2500_WriteREG@w_addr:	
  3315                           ; 0 bytes @ 0x4
  3316                           
  3317  0024                     setDimmerLights_Trigger@lights:	
  3318                           ; 1 bytes @ 0x4
  3319                           
  3320  0024                     setDimmerLights_TriggerAdj@lights:	
  3321                           ; 1 bytes @ 0x4
  3322                           
  3323  0024                     setLED_Initialization@led:	
  3324                           ; 1 bytes @ 0x4
  3325                           
  3326  0024                     setLED_Main@led:	
  3327                           ; 1 bytes @ 0x4
  3328                           
  3329  0024                     setRF_DimmerLights@lights:	
  3330                           ; 1 bytes @ 0x4
  3331                           
  3332  0024                     setSw_Initialization@sw:	
  3333                           ; 1 bytes @ 0x4
  3334                           
  3335  0024                     getSw_KeyStatus@sw:	
  3336                           ; 1 bytes @ 0x4
  3337                           
  3338  0024                     ___ftpack@sign:	
  3339                           ; 1 bytes @ 0x4
  3340                           
  3341  0024                     getBuz_GO@i:	
  3342                           ; 1 bytes @ 0x4
  3343                           
  3344  0024                     DelayTime_1us@j:	
  3345                           ; 2 bytes @ 0x4
  3346                           
  3347                           
  3348                           ; 2 bytes @ 0x4
  3349  0024                     	ds	1
  3350  0025                     ??_CC2500_InitSetREG:	
  3351  0025                     ??_CC2500_InitPATable:	
  3352                           ; 0 bytes @ 0x5
  3353                           
  3354  0025                     ??___ftpack:	
  3355                           ; 0 bytes @ 0x5
  3356                           
  3357  0025                     ??_setDimmerLights_AdjControl:	
  3358                           ; 0 bytes @ 0x5
  3359                           
  3360  0025                     ??_LED_Initialization:	
  3361                           ; 0 bytes @ 0x5
  3362                           
  3363  0025                     ??_LED_Main:	
  3364                           ; 0 bytes @ 0x5
  3365                           
  3366  0025                     ??_Switch_Initialization:	
  3367                           ; 0 bytes @ 0x5
  3368                           
  3369  0025                     CC2500_TxData@loop_e:	
  3370                           ; 0 bytes @ 0x5
  3371                           
  3372  0025                     CC2500_RxData@loop_f:	
  3373                           ; 1 bytes @ 0x5
  3374                           
  3375  0025                     Flash_Memory_Modify@i:	
  3376                           ; 1 bytes @ 0x5
  3377                           
  3378  0025                     getTemp_AD@channel:	
  3379                           ; 1 bytes @ 0x5
  3380                           
  3381  0025                     getMain_LightsStatus@count:	
  3382                           ; 1 bytes @ 0x5
  3383                           
  3384  0025                     getMain_All_Error_Status@command:	
  3385                           ; 1 bytes @ 0x5
  3386                           
  3387  0025                     ___awdiv@counter:	
  3388                           ; 1 bytes @ 0x5
  3389                           
  3390                           
  3391                           ; 1 bytes @ 0x5
  3392  0025                     	ds	1
  3393  0026                     ??_CC2500_PowerRST:	
  3394  0026                     ??_CC2500_FrequencyCabr:	
  3395                           ; 0 bytes @ 0x6
  3396                           
  3397  0026                     CC2500_InitSetREG@temp1:	
  3398                           ; 0 bytes @ 0x6
  3399                           
  3400  0026                     CC2500_InitPATable@temp:	
  3401                           ; 1 bytes @ 0x6
  3402                           
  3403  0026                     DelayTimejudge@i:	
  3404                           ; 1 bytes @ 0x6
  3405                           
  3406  0026                     setDimmerLights_AdjControl@idle:	
  3407                           ; 1 bytes @ 0x6
  3408                           
  3409  0026                     getLoad_AD@channel:	
  3410                           ; 1 bytes @ 0x6
  3411                           
  3412  0026                     getMain_All_Error_Status@status:	
  3413                           ; 1 bytes @ 0x6
  3414                           
  3415  0026                     ___awdiv@sign:	
  3416                           ; 1 bytes @ 0x6
  3417                           
  3418  0026                     getMain_LightsStatus@i:	
  3419                           ; 1 bytes @ 0x6
  3420                           
  3421                           
  3422                           ; 2 bytes @ 0x6
  3423  0026                     	ds	1
  3424  0027                     CC2500_InitSetREG@temp2:	
  3425  0027                     CC2500_InitPATable@loop_d:	
  3426                           ; 1 bytes @ 0x7
  3427                           
  3428  0027                     DelayTimejudge@j:	
  3429                           ; 1 bytes @ 0x7
  3430                           
  3431  0027                     _setDimmerLights_AdjControl$2577:	
  3432                           ; 1 bytes @ 0x7
  3433                           
  3434  0027                     getLoad_AD@k:	
  3435                           ; 1 bytes @ 0x7
  3436                           
  3437  0027                     ___awdiv@quotient:	
  3438                           ; 1 bytes @ 0x7
  3439                           
  3440                           
  3441                           ; 2 bytes @ 0x7
  3442  0027                     	ds	1
  3443  0028                     ?___awtoft:	
  3444  0028                     CC2500_InitSetREG@loop_c:	
  3445                           ; 3 bytes @ 0x8
  3446                           
  3447  0028                     DelayTimejudge@k:	
  3448                           ; 1 bytes @ 0x8
  3449                           
  3450  0028                     setDimmerLights_AdjControl@sw:	
  3451                           ; 1 bytes @ 0x8
  3452                           
  3453  0028                     getLoad_AD@j:	
  3454                           ; 1 bytes @ 0x8
  3455                           
  3456  0028                     getMain_LightsStatus@status:	
  3457                           ; 1 bytes @ 0x8
  3458                           
  3459  0028                     ___awtoft@c:	
  3460                           ; 1 bytes @ 0x8
  3461                           
  3462                           
  3463                           ; 2 bytes @ 0x8
  3464  0028                     	ds	1
  3465  0029                     ?_setBuz:	
  3466  0029                     ??_CC2500_PowerOnInitial:	
  3467                           ; 0 bytes @ 0x9
  3468                           
  3469  0029                     ??_Flash_Memory_Main:	
  3470                           ; 0 bytes @ 0x9
  3471                           
  3472  0029                     ??_Load_Main:	
  3473                           ; 0 bytes @ 0x9
  3474                           
  3475  0029                     DelayTimejudge@value:	
  3476                           ; 0 bytes @ 0x9
  3477                           
  3478  0029                     getLoad_AD@i:	
  3479                           ; 1 bytes @ 0x9
  3480                           
  3481  0029                     setBuz@time:	
  3482                           ; 1 bytes @ 0x9
  3483                           
  3484                           
  3485                           ; 2 bytes @ 0x9
  3486  0029                     	ds	1
  3487  002A                     ?_setDelayOff_GO:	
  3488  002A                     setDelayOff_GO@command:	
  3489                           ; 0 bytes @ 0xA
  3490                           
  3491                           
  3492                           ; 1 bytes @ 0xA
  3493  002A                     	ds	1
  3494  002B                     ??_setBuz:	
  3495  002B                     ??___awtoft:	
  3496                           ; 0 bytes @ 0xB
  3497                           
  3498  002B                     setDelayOff_GO@value:	
  3499                           ; 0 bytes @ 0xB
  3500                           
  3501  002B                     Load_Main@j:	
  3502                           ; 1 bytes @ 0xB
  3503                           
  3504                           
  3505                           ; 1 bytes @ 0xB
  3506  002B                     	ds	1
  3507  002C                     ??_setDelayOff_GO:	
  3508  002C                     setBuz@count:	
  3509                           ; 0 bytes @ 0xC
  3510                           
  3511  002C                     Load_Main@adjgo:	
  3512                           ; 1 bytes @ 0xC
  3513                           
  3514                           
  3515                           ; 1 bytes @ 0xC
  3516  002C                     	ds	1
  3517  002D                     ??_setTemp_Main:	
  3518  002D                     ??_setLog_Code:	
  3519                           ; 0 bytes @ 0xD
  3520                           
  3521  002D                     ??_my_MainTimer:	
  3522                           ; 0 bytes @ 0xD
  3523                           
  3524  002D                     ??_setDimmerLights_SwOn:	
  3525                           ; 0 bytes @ 0xD
  3526                           
  3527  002D                     _Load_Main$3849:	
  3528                           ; 0 bytes @ 0xD
  3529                           
  3530  002D                     ___awtoft@sign:	
  3531                           ; 1 bytes @ 0xD
  3532                           
  3533                           
  3534                           ; 1 bytes @ 0xD
  3535  002D                     	ds	1
  3536  002E                     ?___ftdiv:	
  3537  002E                     ?___ftmul:	
  3538                           ; 3 bytes @ 0xE
  3539                           
  3540  002E                     setDelayOff_GO@sw:	
  3541                           ; 3 bytes @ 0xE
  3542                           
  3543  002E                     setDimmerLights_SwOn@idle:	
  3544                           ; 1 bytes @ 0xE
  3545                           
  3546  002E                     Load_Main@error:	
  3547                           ; 1 bytes @ 0xE
  3548                           
  3549  002E                     ___ftdiv@f2:	
  3550                           ; 1 bytes @ 0xE
  3551                           
  3552  002E                     ___ftmul@f1:	
  3553                           ; 3 bytes @ 0xE
  3554                           
  3555                           
  3556                           ; 3 bytes @ 0xE
  3557  002E                     	ds	1
  3558  002F                     ??_setDimmerLights_SwOff:	
  3559  002F                     ??_Temp_Main:	
  3560                           ; 0 bytes @ 0xF
  3561                           
  3562  002F                     setDimmerLights_SwOn@sw:	
  3563                           ; 0 bytes @ 0xF
  3564                           
  3565  002F                     setDimmerLights_SwOff@command:	
  3566                           ; 1 bytes @ 0xF
  3567                           
  3568  002F                     Load_Main@i:	
  3569                           ; 1 bytes @ 0xF
  3570                           
  3571                           
  3572                           ; 1 bytes @ 0xF
  3573  002F                     	ds	1
  3574  0030                     setDimmerLights_SwOff@sw:	
  3575                           
  3576                           ; 1 bytes @ 0x10
  3577  0030                     	ds	1
  3578  0031                     ??_setDimmerLights_ErrorClose:	
  3579  0031                     ??_setRFSW_Control:	
  3580                           ; 0 bytes @ 0x11
  3581                           
  3582  0031                     ??_setSw_Main:	
  3583                           ; 0 bytes @ 0x11
  3584                           
  3585  0031                     ___ftdiv@f1:	
  3586                           ; 0 bytes @ 0x11
  3587                           
  3588  0031                     ___ftmul@f2:	
  3589                           ; 3 bytes @ 0x11
  3590                           
  3591                           
  3592                           ; 3 bytes @ 0x11
  3593  0031                     	ds	1
  3594  0032                     setDimmerLights_ErrorClose@count:	
  3595  0032                     setRFSW_Control@status:	
  3596                           ; 1 bytes @ 0x12
  3597                           
  3598                           
  3599                           ; 1 bytes @ 0x12
  3600  0032                     	ds	1
  3601  0033                     setDimmerLights_ErrorClose@lights:	
  3602  0033                     setRFSW_Control@sw:	
  3603                           ; 1 bytes @ 0x13
  3604                           
  3605  0033                     setSw_Main@sw:	
  3606                           ; 1 bytes @ 0x13
  3607                           
  3608                           
  3609                           ; 1 bytes @ 0x13
  3610  0033                     	ds	1
  3611  0034                     ??___ftdiv:	
  3612  0034                     ??___ftmul:	
  3613                           ; 0 bytes @ 0x14
  3614                           
  3615  0034                     setDimmerLights_ErrorClose@i:	
  3616                           ; 0 bytes @ 0x14
  3617                           
  3618                           
  3619                           ; 2 bytes @ 0x14
  3620  0034                     	ds	2
  3621  0036                     ??_DlyOff_Main:	
  3622  0036                     ??_setMain_Exception:	
  3623                           ; 0 bytes @ 0x16
  3624                           
  3625                           
  3626                           ; 0 bytes @ 0x16
  3627  0036                     	ds	2
  3628  0038                     DlyOff_Main@sw:	
  3629  0038                     setMain_Exception@buz:	
  3630                           ; 1 bytes @ 0x18
  3631                           
  3632  0038                     ___ftdiv@cntr:	
  3633                           ; 1 bytes @ 0x18
  3634                           
  3635  0038                     ___ftmul@exp:	
  3636                           ; 1 bytes @ 0x18
  3637                           
  3638                           
  3639                           ; 1 bytes @ 0x18
  3640  0038                     	ds	1
  3641  0039                     ??_DelayOff_Main:	
  3642  0039                     _setMain_Exception$7065:	
  3643                           ; 0 bytes @ 0x19
  3644                           
  3645  0039                     ___ftdiv@f3:	
  3646                           ; 2 bytes @ 0x19
  3647                           
  3648  0039                     ___ftmul@f3_as_product:	
  3649                           ; 3 bytes @ 0x19
  3650                           
  3651                           
  3652                           ; 3 bytes @ 0x19
  3653  0039                     	ds	2
  3654  003B                     setMain_Exception@status:	
  3655                           
  3656                           ; 1 bytes @ 0x1B
  3657  003B                     	ds	1
  3658  003C                     setMain_Exception@command:	
  3659  003C                     ___ftdiv@exp:	
  3660                           ; 1 bytes @ 0x1C
  3661                           
  3662  003C                     ___ftmul@cntr:	
  3663                           ; 1 bytes @ 0x1C
  3664                           
  3665                           
  3666                           ; 1 bytes @ 0x1C
  3667  003C                     	ds	1
  3668  003D                     ??_Switch_Main:	
  3669  003D                     ___ftdiv@sign:	
  3670                           ; 0 bytes @ 0x1D
  3671                           
  3672  003D                     ___ftmul@sign:	
  3673                           ; 1 bytes @ 0x1D
  3674                           
  3675                           
  3676                           ; 1 bytes @ 0x1D
  3677  003D                     	ds	1
  3678  003E                     ?___ftneg:	
  3679  003E                     Switch_Main@error:	
  3680                           ; 3 bytes @ 0x1E
  3681                           
  3682  003E                     ___ftneg@f1:	
  3683                           ; 1 bytes @ 0x1E
  3684                           
  3685                           
  3686                           ; 3 bytes @ 0x1E
  3687  003E                     	ds	3
  3688  0041                     ??___ftneg:	
  3689  0041                     ?___ftadd:	
  3690                           ; 0 bytes @ 0x21
  3691                           
  3692  0041                     ___ftadd@f1:	
  3693                           ; 3 bytes @ 0x21
  3694                           
  3695                           
  3696                           ; 3 bytes @ 0x21
  3697  0041                     	ds	3
  3698  0044                     ___ftadd@f2:	
  3699                           
  3700                           ; 3 bytes @ 0x24
  3701  0044                     	ds	3
  3702  0047                     ??___ftadd:	
  3703                           
  3704                           ; 0 bytes @ 0x27
  3705  0047                     	ds	4
  3706  004B                     ___ftadd@sign:	
  3707                           
  3708                           ; 1 bytes @ 0x2B
  3709  004B                     	ds	1
  3710  004C                     ___ftadd@exp2:	
  3711                           
  3712                           ; 1 bytes @ 0x2C
  3713  004C                     	ds	1
  3714  004D                     ___ftadd@exp1:	
  3715                           
  3716                           ; 1 bytes @ 0x2D
  3717  004D                     	ds	1
  3718  004E                     ?___fttol:	
  3719  004E                     ___fttol@f1:	
  3720                           ; 4 bytes @ 0x2E
  3721                           
  3722                           
  3723                           ; 3 bytes @ 0x2E
  3724  004E                     	ds	4
  3725  0052                     ??___fttol:	
  3726                           
  3727                           ; 0 bytes @ 0x32
  3728  0052                     	ds	4
  3729  0056                     ___fttol@sign1:	
  3730                           
  3731                           ; 1 bytes @ 0x36
  3732  0056                     	ds	1
  3733  0057                     ___fttol@lval:	
  3734                           
  3735                           ; 4 bytes @ 0x37
  3736  0057                     	ds	4
  3737  005B                     ___fttol@exp1:	
  3738                           
  3739                           ; 1 bytes @ 0x3B
  3740  005B                     	ds	1
  3741  005C                     ??_setPercentValue:	
  3742  005C                     ??_getPercentValue:	
  3743                           ; 0 bytes @ 0x3C
  3744                           
  3745                           
  3746                           ; 0 bytes @ 0x3C
  3747  005C                     	ds	2
  3748  005E                     getPercentValue@value:	
  3749  005E                     setPercentValue@value:	
  3750                           ; 1 bytes @ 0x3E
  3751                           
  3752                           
  3753                           ; 1 bytes @ 0x3E
  3754  005E                     	ds	1
  3755  005F                     getPercentValue@i:	
  3756  005F                     setPercentValue@i:	
  3757                           ; 3 bytes @ 0x3F
  3758                           
  3759                           
  3760                           ; 3 bytes @ 0x3F
  3761  005F                     	ds	3
  3762  0062                     ?_setDimmerLights:	
  3763  0062                     ?_setDimmerLights_Adj:	
  3764                           ; 0 bytes @ 0x42
  3765                           
  3766  0062                     ??_setDimmerLights_AdjRF:	
  3767                           ; 0 bytes @ 0x42
  3768                           
  3769  0062                     ??_Flash_Memory_Initialization:	
  3770                           ; 0 bytes @ 0x42
  3771                           
  3772  0062                     setDimmerLights@status:	
  3773                           ; 0 bytes @ 0x42
  3774                           
  3775  0062                     setDimmerLights_Adj@status:	
  3776                           ; 1 bytes @ 0x42
  3777                           
  3778                           
  3779                           ; 1 bytes @ 0x42
  3780  0062                     	ds	1
  3781  0063                     ??_setDimmerLights:	
  3782  0063                     ??_setDimmerLights_Adj:	
  3783                           ; 0 bytes @ 0x43
  3784                           
  3785  0063                     setDimmerLights_AdjRF@lights:	
  3786                           ; 0 bytes @ 0x43
  3787                           
  3788  0063                     Flash_Memory_Initialization@i:	
  3789                           ; 1 bytes @ 0x43
  3790                           
  3791                           
  3792                           ; 1 bytes @ 0x43
  3793  0063                     	ds	1
  3794  0064                     ??_setRF_DimmerValue:	
  3795                           
  3796                           ; 0 bytes @ 0x44
  3797  0064                     	ds	1
  3798  0065                     setDimmerLights@lights:	
  3799  0065                     setDimmerLights_Adj@lights:	
  3800                           ; 1 bytes @ 0x45
  3801                           
  3802                           
  3803                           ; 1 bytes @ 0x45
  3804  0065                     	ds	1
  3805  0066                     ??_setDimmerLights_Main:	
  3806  0066                     setDimmerLights_Main@lights:	
  3807                           ; 0 bytes @ 0x46
  3808                           
  3809  0066                     setRF_DimmerValue@lights:	
  3810                           ; 1 bytes @ 0x46
  3811                           
  3812                           
  3813                           ; 1 bytes @ 0x46
  3814  0066                     	ds	1
  3815  0067                     ??_setRFSW_AdjControl:	
  3816  0067                     ??_DimmerLights_Main:	
  3817                           ; 0 bytes @ 0x47
  3818                           
  3819                           
  3820                           ; 0 bytes @ 0x47
  3821  0067                     	ds	2
  3822  0069                     setRFSW_AdjControl@status:	
  3823  0069                     _DimmerLights_Main$2494:	
  3824                           ; 1 bytes @ 0x49
  3825                           
  3826                           
  3827                           ; 2 bytes @ 0x49
  3828  0069                     	ds	1
  3829  006A                     setRFSW_AdjControl@sw:	
  3830                           
  3831                           ; 1 bytes @ 0x4A
  3832  006A                     	ds	1
  3833  006B                     ??_getRxData:	
  3834  006B                     ??_setControl_Lights_Table:	
  3835                           ; 0 bytes @ 0x4B
  3836                           
  3837                           
  3838                           ; 0 bytes @ 0x4B
  3839  006B                     	ds	1
  3840  006C                     getRxData@error:	
  3841                           
  3842                           ; 1 bytes @ 0x4C
  3843  006C                     	ds	1
  3844  006D                     ??_setRF_Main:	
  3845                           
  3846                           ; 0 bytes @ 0x4D
  3847  006D                     	ds	1
  3848  006E                     ??_RF_Main:	
  3849  006E                     ??_main:	
  3850                           ; 0 bytes @ 0x4E
  3851                           
  3852                           
  3853                           	psect	maintext
  3854  1640                     __pmaintext:	
  3855                           ; 0 bytes @ 0x4E
  3856 ;;
  3857 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3858 ;;
  3859 ;; *************** function _main *****************
  3860 ;; Defined at:
  3861 ;;		line 7 in file "../src/main_B1.c"
  3862 ;; Parameters:    Size  Location     Type
  3863 ;;  argc            2    3[BANK1 ] int 
  3864 ;;  argv            2    5[BANK1 ] PTR PTR unsigned char 
  3865 ;; Auto vars:     Size  Location     Type
  3866 ;;		None
  3867 ;; Return value:  Size  Location     Type
  3868 ;;                  2    3[BANK1 ] int 
  3869 ;; Registers used:
  3870 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3871 ;; Tracked objects:
  3872 ;;		On entry : 17F/0
  3873 ;;		On exit  : 0/0
  3874 ;;		Unchanged: 0/0
  3875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3876 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3879 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3880 ;;Total ram usage:        4 bytes
  3881 ;; Hardware stack levels required when called:   15
  3882 ;; This function calls:
  3883 ;;		_Buzzer_Initialization
  3884 ;;		_Buzzer_Main
  3885 ;;		_CC2500_PowerOnInitial
  3886 ;;		_DelayOff_Initialization
  3887 ;;		_DelayOff_Main
  3888 ;;		_DimmerLights_Initialization
  3889 ;;		_DimmerLights_Main
  3890 ;;		_Flash_Memory_Initialization
  3891 ;;		_Flash_Memory_Main
  3892 ;;		_LED_Initialization
  3893 ;;		_LED_Main
  3894 ;;		_Load_Initialization
  3895 ;;		_Load_Main
  3896 ;;		_Mcu_Initialization
  3897 ;;		_RF_Initialization
  3898 ;;		_RF_Main
  3899 ;;		_Switch_Initialization
  3900 ;;		_Switch_Main
  3901 ;;		_Temp_Initialization
  3902 ;;		_Temp_Main
  3903 ;;		_WDT_Main
  3904 ;;		_getLoad_AD
  3905 ;;		_getTemp_AD
  3906 ;;		_myMain_Initialization
  3907 ;;		_my_MainTimer
  3908 ;; This function is called by:
  3909 ;;		Startup code after reset
  3910 ;; This function uses a non-reentrant model
  3911 ;;
  3912                           
  3913                           
  3914                           ;psect for function _main
  3915  1640                     _main:	
  3916                           
  3917                           ;main_B1.c: 8: myMain_Initialization();
  3918                           
  3919                           ;incstack = 0
  3920                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3921  1640  319C  244A  3196   	fcall	_myMain_Initialization
  3922                           
  3923                           ;main_B1.c: 9: Mcu_Initialization();
  3924  1643  319C  24E1  3196   	fcall	_Mcu_Initialization
  3925                           
  3926                           ;main_B1.c: 10: Flash_Memory_Initialization();
  3927  1646  3186  2620  3196   	fcall	_Flash_Memory_Initialization
  3928                           
  3929                           ;main_B1.c: 11: LED_Initialization();
  3930  1649  319B  23FE  3196   	fcall	_LED_Initialization
  3931                           
  3932                           ;main_B1.c: 12: Buzzer_Initialization();
  3933  164C  319B  2344  3196   	fcall	_Buzzer_Initialization
  3934                           
  3935                           ;main_B1.c: 14: ;;
  3936                           ;main_B1.c: 15: Temp_Initialization();
  3937  164F  319B  234D  3196   	fcall	_Temp_Initialization
  3938                           
  3939                           ;main_B1.c: 16: Load_Initialization();
  3940  1652  319B  2364  3196   	fcall	_Load_Initialization
  3941                           
  3942                           ;main_B1.c: 17: ;;
  3943                           ;main_B1.c: 18: DelayOff_Initialization();
  3944  1655  319B  238A  3196   	fcall	_DelayOff_Initialization
  3945                           
  3946                           ;main_B1.c: 20: DimmerLights_Initialization();
  3947  1658  319E  260B  3196   	fcall	_DimmerLights_Initialization
  3948                           
  3949                           ;main_B1.c: 21: ;;
  3950                           ;main_B1.c: 22: ;;
  3951                           ;main_B1.c: 23: ;;
  3952                           ;main_B1.c: 24: Switch_Initialization();
  3953  165B  319C  242E  3196   	fcall	_Switch_Initialization
  3954                           
  3955                           ;main_B1.c: 25: RF_Initialization();
  3956  165E  319B  2347  3196   	fcall	_RF_Initialization
  3957                           
  3958                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  3959  1661  319D  25B6  3196   	fcall	_CC2500_PowerOnInitial
  3960  1664                     l8266:	
  3961                           ;main_B1.c: 27: ;;
  3962                           ;main_B1.c: 29: while (1) {
  3963                           
  3964                           
  3965                           ;main_B1.c: 31: if (myMain.PowerON == 1) {
  3966  1664  0021               	movlb	1	; select bank1
  3967  1665  1C20               	btfss	_myMain^(0+128),0
  3968  1666  2E6F               	goto	l8270
  3969                           
  3970                           ;main_B1.c: 37: getLoad_AD(0x05);
  3971  1667  3005               	movlw	5
  3972  1668  318C  246D  3196   	fcall	_getLoad_AD
  3973                           
  3974                           ;main_B1.c: 41: getTemp_AD(0x09);
  3975  166B  3009               	movlw	9
  3976  166C  3193  232E  3196   	fcall	_getTemp_AD
  3977  166F                     l8270:	
  3978                           
  3979                           ;main_B1.c: 56: }
  3980                           ;main_B1.c: 92: if (Timer1.Timeout == 1) {
  3981  166F  0022               	movlb	2	; select bank2
  3982  1670  1C23               	btfss	_Timer1^(0+256),0
  3983  1671  2E64               	goto	l8266
  3984                           
  3985                           ;main_B1.c: 93: Timer1.Timeout = 0;
  3986  1672  1023               	bcf	_Timer1^(0+256),0
  3987                           
  3988                           ;main_B1.c: 94: my_MainTimer();
  3989  1673  3194  24B3  3196   	fcall	_my_MainTimer
  3990                           
  3991                           ;main_B1.c: 95: WDT_Main();
  3992  1676  319C  24F3  3196   	fcall	_WDT_Main
  3993                           
  3994                           ;main_B1.c: 96: ;;
  3995                           ;main_B1.c: 97: ;;
  3996                           ;main_B1.c: 98: if (myMain.PowerON == 1) {
  3997  1679  0021               	movlb	1	; select bank1
  3998  167A  1C20               	btfss	_myMain^(0+128),0
  3999  167B  2E64               	goto	l8266
  4000                           
  4001                           ;main_B1.c: 99: Flash_Memory_Main();
  4002  167C  3192  228B  3196   	fcall	_Flash_Memory_Main
  4003                           
  4004                           ;main_B1.c: 101: LED_Main();
  4005  167F  319C  240A  3196   	fcall	_LED_Main
  4006                           
  4007                           ;main_B1.c: 102: Buzzer_Main();
  4008  1682  3194  2469  3196   	fcall	_Buzzer_Main
  4009                           
  4010                           ;main_B1.c: 104: ;;
  4011                           ;main_B1.c: 105: Temp_Main();
  4012  1685  319B  2350  3196   	fcall	_Temp_Main
  4013                           
  4014                           ;main_B1.c: 106: Load_Main();
  4015  1688  3181  21BA  3196   	fcall	_Load_Main
  4016                           
  4017                           ;main_B1.c: 107: ;;
  4018                           ;main_B1.c: 109: ;;
  4019                           ;main_B1.c: 110: DimmerLights_Main();
  4020  168B  3192  2222  3196   	fcall	_DimmerLights_Main
  4021                           
  4022                           ;main_B1.c: 111: Switch_Main();
  4023  168E  3190  2074  3196   	fcall	_Switch_Main
  4024                           
  4025                           ;main_B1.c: 112: ;;
  4026                           ;main_B1.c: 113: ;;
  4027                           ;main_B1.c: 115: RF_Main();
  4028  1691  319B  234A  3196   	fcall	_RF_Main
  4029                           
  4030                           ;main_B1.c: 116: DelayOff_Main();
  4031  1694  319B  2392  3196   	fcall	_DelayOff_Main
  4032                           
  4033                           ;main_B1.c: 117: ;;
  4034  1697  2E64               	goto	l8266
  4035  1698                     __end_of_main:	
  4036                           ;main_B1.c: 125: }
  4037                           ;main_B1.c: 126: }
  4038                           ;main_B1.c: 160: }
  4039                           ;main_B1.c: 161: return (0);
  4040                           ;	Return value of _main is never used
  4041                           
  4042                           
  4043                           	psect	text1
  4044  14B3                     __ptext1:	
  4045 ;; *************** function _my_MainTimer *****************
  4046 ;; Defined at:
  4047 ;;		line 180 in file "../src/main_B1.c"
  4048 ;; Parameters:    Size  Location     Type
  4049 ;;		None
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;		None
  4052 ;; Return value:  Size  Location     Type
  4053 ;;		None               void
  4054 ;; Registers used:
  4055 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4065 ;;Total ram usage:        0 bytes
  4066 ;; Hardware stack levels used:    1
  4067 ;; Hardware stack levels required when called:    7
  4068 ;; This function calls:
  4069 ;;		_setBuz
  4070 ;; This function is called by:
  4071 ;;		_main
  4072 ;; This function uses a non-reentrant model
  4073 ;;
  4074                           
  4075                           
  4076                           ;psect for function _my_MainTimer
  4077  14B3                     _my_MainTimer:	
  4078                           
  4079                           ;main_B1.c: 182: if (myMain.PowerON == 0) {
  4080                           
  4081                           ;incstack = 0
  4082                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4083  14B3  0021               	movlb	1	; select bank1
  4084  14B4  1820               	btfsc	_myMain^(0+128),0
  4085  14B5  2CD5               	goto	l8128
  4086                           
  4087                           ;main_B1.c: 183: myMain.PowerCount++;
  4088  14B6  3001               	movlw	1
  4089  14B7  07A2               	addwf	(_myMain^(0+128)+2),f
  4090  14B8  3000               	movlw	0
  4091  14B9  3DA3               	addwfc	((_myMain+1)^(0+128)+2),f
  4092                           
  4093                           ;main_B1.c: 184: if (myMain.PowerCount == 150)
  4094  14BA  3002               	movlw	2
  4095  14BB  3EA0               	addlw	_myMain& (0+255)
  4096  14BC  0086               	movwf	6
  4097  14BD  0187               	clrf	7
  4098  14BE  3F40               	moviw [0]fsr1
  4099  14BF  3A96               	xorlw	150
  4100  14C0  1D03               	skipz
  4101  14C1  2CC4               	goto	u8255
  4102  14C2  3F41               	moviw [1]fsr1
  4103  14C3  3A00               	xorlw	0
  4104  14C4                     u8255:	
  4105  14C4  1D03               	skipz
  4106  14C5  2CEC               	goto	l8138
  4107                           
  4108                           ;main_B1.c: 185: {
  4109                           ;main_B1.c: 186: myMain.PowerCount = 0;
  4110  14C6  01A2               	clrf	(_myMain^(0+128)+2)
  4111  14C7  01A3               	clrf	((_myMain+1)^(0+128)+2)
  4112                           
  4113                           ;main_B1.c: 187: myMain.PowerON = 1;
  4114  14C8  1420               	bsf	_myMain^(0+128),0
  4115                           
  4116                           ;main_B1.c: 193: setBuz(3, 50);
  4117  14C9  3032               	movlw	50
  4118  14CA  0020               	movlb	0	; select bank0
  4119  14CB  00A9               	movwf	setBuz@time
  4120  14CC  3000               	movlw	0
  4121  14CD  00AA               	movwf	setBuz@time+1
  4122  14CE  3003               	movlw	3
  4123  14CF  3196  2698  3194   	fcall	_setBuz
  4124                           
  4125                           ;main_B1.c: 194: myMain.SelfTest = 1;
  4126  14D2  0021               	movlb	1	; select bank1
  4127  14D3  1620               	bsf	_myMain^(0+128),4
  4128                           
  4129                           ;main_B1.c: 203: }
  4130                           ;main_B1.c: 204: } else {
  4131  14D4  2CEC               	goto	l8138
  4132  14D5                     l8128:	
  4133                           
  4134                           ;main_B1.c: 212: myMain.Count1++;
  4135  14D5  3001               	movlw	1
  4136  14D6  07A6               	addwf	(_myMain^(0+128)+6),f
  4137  14D7  3000               	movlw	0
  4138  14D8  3DA7               	addwfc	((_myMain+1)^(0+128)+6),f
  4139                           
  4140                           ;main_B1.c: 213: if (myMain.Count1 == 100)
  4141  14D9  3006               	movlw	6
  4142  14DA  3EA0               	addlw	_myMain& (0+255)
  4143  14DB  0086               	movwf	6
  4144  14DC  0187               	clrf	7
  4145  14DD  3F40               	moviw [0]fsr1
  4146  14DE  3A64               	xorlw	100
  4147  14DF  1D03               	skipz
  4148  14E0  2CE3               	goto	u8265
  4149  14E1  3F41               	moviw [1]fsr1
  4150  14E2  3A00               	xorlw	0
  4151  14E3                     u8265:	
  4152  14E3  1D03               	skipz
  4153  14E4  2CEC               	goto	l8138
  4154                           
  4155                           ;main_B1.c: 214: {
  4156                           ;main_B1.c: 215: myMain.Count1 = 0;
  4157  14E5  01A6               	clrf	(_myMain^(0+128)+6)
  4158  14E6  01A7               	clrf	((_myMain+1)^(0+128)+6)
  4159                           
  4160                           ;main_B1.c: 227: if (myMain.Flag) {
  4161  14E7  1CA0               	btfss	_myMain^(0+128),1
  4162  14E8  2CEB               	goto	l2679
  4163                           
  4164                           ;main_B1.c: 228: myMain.Flag = 0;
  4165  14E9  10A0               	bcf	_myMain^(0+128),1
  4166                           
  4167                           ;main_B1.c: 237: } else {
  4168  14EA  2CEC               	goto	l8138
  4169  14EB                     l2679:	
  4170                           
  4171                           ;main_B1.c: 238: myMain.Flag = 1;
  4172  14EB  14A0               	bsf	_myMain^(0+128),1
  4173  14EC                     l8138:	
  4174                           
  4175                           ;main_B1.c: 247: }
  4176                           ;main_B1.c: 248: }
  4177                           ;main_B1.c: 250: }
  4178                           ;main_B1.c: 252: myMain.Count2++;
  4179  14EC  3001               	movlw	1
  4180  14ED  07A8               	addwf	(_myMain^(0+128)+8),f
  4181  14EE  3000               	movlw	0
  4182  14EF  3DA9               	addwfc	((_myMain+1)^(0+128)+8),f
  4183                           
  4184                           ;main_B1.c: 253: if (myMain.Count2 == 100) {
  4185  14F0  3008               	movlw	8
  4186  14F1  3EA0               	addlw	_myMain& (0+255)
  4187  14F2  0086               	movwf	6
  4188  14F3  0187               	clrf	7
  4189  14F4  3F40               	moviw [0]fsr1
  4190  14F5  3A64               	xorlw	100
  4191  14F6  1D03               	skipz
  4192  14F7  2CFA               	goto	u8285
  4193  14F8  3F41               	moviw [1]fsr1
  4194  14F9  3A00               	xorlw	0
  4195  14FA                     u8285:	
  4196  14FA  1D03               	skipz
  4197  14FB  0008               	return
  4198                           
  4199                           ;main_B1.c: 254: myMain.Count2 = 0;
  4200  14FC  01A8               	clrf	(_myMain^(0+128)+8)
  4201  14FD  01A9               	clrf	((_myMain+1)^(0+128)+8)
  4202  14FE  0008               	return
  4203  14FF                     __end_of_my_MainTimer:	
  4204                           
  4205                           	psect	text2
  4206  1C4A                     __ptext2:	
  4207 ;; *************** function _myMain_Initialization *****************
  4208 ;; Defined at:
  4209 ;;		line 167 in file "../src/main_B1.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;		None
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;		None
  4214 ;; Return value:  Size  Location     Type
  4215 ;;		None               void
  4216 ;; Registers used:
  4217 ;;		wreg, fsr1l, fsr1h
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4225 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4226 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4227 ;;Total ram usage:        1 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    5
  4230 ;; This function calls:
  4231 ;;		Nothing
  4232 ;; This function is called by:
  4233 ;;		_main
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           
  4238                           ;psect for function _myMain_Initialization
  4239  1C4A                     _myMain_Initialization:	
  4240                           
  4241                           ;main_B1.c: 169: product = &_product;
  4242                           
  4243                           ;incstack = 0
  4244                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4245  1C4A  3045               	movlw	__product& (0+255)
  4246  1C4B  0020               	movlb	0	; select bank0
  4247  1C4C  00A0               	movwf	??_myMain_Initialization
  4248  1C4D  0820               	movf	??_myMain_Initialization,w
  4249  1C4E  00EE               	movwf	_product
  4250                           
  4251                           ;main_B1.c: 170: product->Data[20] = 210;
  4252  1C4F  30D2               	movlw	210
  4253  1C50  00A0               	movwf	??_myMain_Initialization
  4254  1C51  086E               	movf	_product,w
  4255  1C52  3E14               	addlw	20
  4256  1C53  0086               	movwf	6
  4257  1C54  3002               	movlw	2	; select bank4/5
  4258  1C55  0087               	movwf	7
  4259  1C56  0820               	movf	??_myMain_Initialization,w
  4260  1C57  0081               	movwf	1
  4261  1C58  0008               	return
  4262  1C59                     __end_of_myMain_Initialization:	
  4263                           
  4264                           	psect	text3
  4265  132E                     __ptext3:	
  4266 ;; *************** function _getTemp_AD *****************
  4267 ;; Defined at:
  4268 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4269 ;; Parameters:    Size  Location     Type
  4270 ;;  channel         1    wreg     unsigned char 
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;  channel         1    5[BANK0 ] unsigned char 
  4273 ;; Return value:  Size  Location     Type
  4274 ;;		None               void
  4275 ;; Registers used:
  4276 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4277 ;; Tracked objects:
  4278 ;;		On entry : 0/0
  4279 ;;		On exit  : 0/0
  4280 ;;		Unchanged: 0/0
  4281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4283 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4284 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4285 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4286 ;;Total ram usage:        2 bytes
  4287 ;; Hardware stack levels used:    1
  4288 ;; Hardware stack levels required when called:    7
  4289 ;; This function calls:
  4290 ;;		_getAD
  4291 ;; This function is called by:
  4292 ;;		_main
  4293 ;; This function uses a non-reentrant model
  4294 ;;
  4295                           
  4296                           
  4297                           ;psect for function _getTemp_AD
  4298  132E                     _getTemp_AD:	
  4299                           
  4300                           ;incstack = 0
  4301                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4302                           ;getTemp_AD@channel stored from wreg
  4303  132E  0020               	movlb	0	; select bank0
  4304  132F  00A5               	movwf	getTemp_AD@channel
  4305                           
  4306                           ;OverTemperature_B1.c: 33: if (Temp.ADtoGO == 1) {
  4307  1330  0021               	movlb	1	; select bank1
  4308  1331  1D57               	btfss	_Temp^(0+128),2
  4309  1332  0008               	return
  4310                           
  4311                           ;OverTemperature_B1.c: 34: Temp.GO = 1;
  4312  1333  1657               	bsf	_Temp^(0+128),4
  4313                           
  4314                           ;OverTemperature_B1.c: 35: Temp.ADRES = getAD(channel, 0xf0);
  4315  1334  30F0               	movlw	240
  4316  1335  0020               	movlb	0	; select bank0
  4317  1336  00A4               	movwf	??_getTemp_AD
  4318  1337  0824               	movf	??_getTemp_AD,w
  4319  1338  00A0               	movwf	getAD@adcon1
  4320  1339  0825               	movf	getTemp_AD@channel,w
  4321  133A  319F  2738  3193   	fcall	_getAD
  4322  133D  0020               	movlb	0	; select bank0
  4323  133E  0821               	movf	?_getAD+1,w
  4324  133F  0021               	movlb	1	; select bank1
  4325  1340  01E4               	clrf	((_Temp+1)^(0+128)+12)
  4326  1341  07E4               	addwf	((_Temp+1)^(0+128)+12),f
  4327  1342  0020               	movlb	0	; select bank0
  4328  1343  0820               	movf	?_getAD,w
  4329  1344  0021               	movlb	1	; select bank1
  4330  1345  01E3               	clrf	(_Temp^(0+128)+12)
  4331  1346  07E3               	addwf	(_Temp^(0+128)+12),f
  4332                           
  4333                           ;OverTemperature_B1.c: 36: if (Temp.ADH[0] < Temp.ADRES) {
  4334  1347  0864               	movf	((_Temp+1)^(0+128)+12),w
  4335  1348  0260               	subwf	((_Temp+1)^(0+128)+8),w
  4336  1349  1D03               	skipz
  4337  134A  2B4D               	goto	u8195
  4338  134B  0863               	movf	(_Temp^(0+128)+12),w
  4339  134C  025F               	subwf	(_Temp^(0+128)+8),w
  4340  134D                     u8195:	
  4341  134D  1803               	skipnc
  4342  134E  2B56               	goto	l8076
  4343                           
  4344                           ;OverTemperature_B1.c: 37: Temp.ADH[0] = Temp.ADRES;
  4345  134F  0864               	movf	((_Temp+1)^(0+128)+12),w
  4346  1350  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4347  1351  07E0               	addwf	((_Temp+1)^(0+128)+8),f
  4348  1352  0863               	movf	(_Temp^(0+128)+12),w
  4349  1353  01DF               	clrf	(_Temp^(0+128)+8)
  4350  1354  07DF               	addwf	(_Temp^(0+128)+8),f
  4351                           
  4352                           ;OverTemperature_B1.c: 38: } else if (Temp.ADH[1] < Temp.ADRES) {
  4353  1355  0008               	return
  4354  1356                     l8076:	
  4355  1356  0864               	movf	((_Temp+1)^(0+128)+12),w
  4356  1357  0262               	subwf	((_Temp+1)^(0+128)+10),w
  4357  1358  1D03               	skipz
  4358  1359  2B5C               	goto	u8205
  4359  135A  0863               	movf	(_Temp^(0+128)+12),w
  4360  135B  0261               	subwf	(_Temp^(0+128)+10),w
  4361  135C                     u8205:	
  4362  135C  1803               	skipnc
  4363  135D  0008               	return
  4364                           
  4365                           ;OverTemperature_B1.c: 39: Temp.ADH[1] = Temp.ADRES;
  4366  135E  0864               	movf	((_Temp+1)^(0+128)+12),w
  4367  135F  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4368  1360  07E2               	addwf	((_Temp+1)^(0+128)+10),f
  4369  1361  0863               	movf	(_Temp^(0+128)+12),w
  4370  1362  01E1               	clrf	(_Temp^(0+128)+10)
  4371  1363  07E1               	addwf	(_Temp^(0+128)+10),f
  4372  1364  0008               	return
  4373  1365                     __end_of_getTemp_AD:	
  4374                           
  4375                           	psect	text4
  4376  0C6D                     __ptext4:	
  4377 ;; *************** function _getLoad_AD *****************
  4378 ;; Defined at:
  4379 ;;		line 15 in file "../src/OverLoad_B1.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;  channel         1    wreg     unsigned char 
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;  channel         1    6[BANK0 ] unsigned char 
  4384 ;;  i               1    9[BANK0 ] unsigned char 
  4385 ;;  j               1    8[BANK0 ] unsigned char 
  4386 ;;  k               1    7[BANK0 ] unsigned char 
  4387 ;; Return value:  Size  Location     Type
  4388 ;;		None               void
  4389 ;; Registers used:
  4390 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4391 ;; Tracked objects:
  4392 ;;		On entry : 0/0
  4393 ;;		On exit  : 0/0
  4394 ;;		Unchanged: 0/0
  4395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4397 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4398 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4399 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4400 ;;Total ram usage:        6 bytes
  4401 ;; Hardware stack levels used:    1
  4402 ;; Hardware stack levels required when called:    7
  4403 ;; This function calls:
  4404 ;;		_getAD
  4405 ;; This function is called by:
  4406 ;;		_main
  4407 ;; This function uses a non-reentrant model
  4408 ;;
  4409                           
  4410                           
  4411                           ;psect for function _getLoad_AD
  4412  0C6D                     _getLoad_AD:	
  4413                           
  4414                           ;incstack = 0
  4415                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4416                           ;getLoad_AD@channel stored from wreg
  4417  0C6D  0020               	movlb	0	; select bank0
  4418  0C6E  00A6               	movwf	getLoad_AD@channel
  4419                           
  4420                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4421  0C6F  01A9               	clrf	getLoad_AD@i
  4422  0C70  01A8               	clrf	getLoad_AD@j
  4423  0C71  01A7               	clrf	getLoad_AD@k
  4424                           
  4425                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4426  0C72  0022               	movlb	2	; select bank2
  4427  0C73  1E26               	btfss	_Load^(0+256),4
  4428  0C74  0008               	return
  4429                           
  4430                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4431  0C75  30F3               	movlw	243
  4432  0C76  0020               	movlb	0	; select bank0
  4433  0C77  00A4               	movwf	??_getLoad_AD
  4434  0C78  0824               	movf	??_getLoad_AD,w
  4435  0C79  00A0               	movwf	getAD@adcon1
  4436  0C7A  0826               	movf	getLoad_AD@channel,w
  4437  0C7B  319F  2738  318C   	fcall	_getAD
  4438  0C7E  0020               	movlb	0	; select bank0
  4439  0C7F  0821               	movf	?_getAD+1,w
  4440  0C80  0022               	movlb	2	; select bank2
  4441  0C81  01C8               	clrf	((_Load+1)^(0+256)+33)
  4442  0C82  07C8               	addwf	((_Load+1)^(0+256)+33),f
  4443  0C83  0020               	movlb	0	; select bank0
  4444  0C84  0820               	movf	?_getAD,w
  4445  0C85  0022               	movlb	2	; select bank2
  4446  0C86  01C7               	clrf	(_Load^(0+256)+33)
  4447  0C87  07C7               	addwf	(_Load^(0+256)+33),f
  4448                           
  4449                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4450  0C88  0020               	movlb	0	; select bank0
  4451  0C89  01A9               	clrf	getLoad_AD@i
  4452  0C8A  3004               	movlw	4
  4453  0C8B  0229               	subwf	getLoad_AD@i,w
  4454  0C8C  1803               	btfsc	3,0
  4455  0C8D  2CBB               	goto	l7898
  4456  0C8E                     l7886:	
  4457                           
  4458                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4459  0C8E  3529               	lslf	getLoad_AD@i,w
  4460  0C8F  3E31               	addlw	(_Load+11)& (0+255)
  4461  0C90  0086               	movwf	6
  4462  0C91  3001               	movlw	1	; select bank2/3
  4463  0C92  0087               	movwf	7
  4464  0C93  3F40               	moviw [0]fsr1
  4465  0C94  00A4               	movwf	??_getLoad_AD
  4466  0C95  3F41               	moviw [1]fsr1
  4467  0C96  00A5               	movwf	??_getLoad_AD+1
  4468  0C97  0022               	movlb	2	; select bank2
  4469  0C98  0848               	movf	((_Load+1)^(0+256)+33),w
  4470  0C99  0020               	movlb	0	; select bank0
  4471  0C9A  0225               	subwf	??_getLoad_AD+1,w
  4472  0C9B  1D03               	skipz
  4473  0C9C  2CA1               	goto	u7815
  4474  0C9D  0022               	movlb	2	; select bank2
  4475  0C9E  0847               	movf	(_Load^(0+256)+33),w
  4476  0C9F  0020               	movlb	0	; select bank0
  4477  0CA0  0224               	subwf	??_getLoad_AD,w
  4478  0CA1                     u7815:	
  4479  0CA1  1803               	skipnc
  4480  0CA2  2CB3               	goto	l7894
  4481  0CA3  08A8               	movf	getLoad_AD@j,f
  4482  0CA4  1D03               	skipz
  4483  0CA5  2CB3               	goto	l7894
  4484                           
  4485                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4486  0CA6  3529               	lslf	getLoad_AD@i,w
  4487  0CA7  3E31               	addlw	(_Load+11)& (0+255)
  4488  0CA8  0086               	movwf	6
  4489  0CA9  3001               	movlw	1	; select bank2/3
  4490  0CAA  0087               	movwf	7
  4491  0CAB  0022               	movlb	2	; select bank2
  4492  0CAC  0847               	movf	(_Load^(0+256)+33),w
  4493  0CAD  3FC0               	movwi [0]fsr1
  4494  0CAE  0848               	movf	((_Load+1)^(0+256)+33),w
  4495  0CAF  3FC1               	movwi [1]fsr1
  4496                           
  4497                           ;OverLoad_B1.c: 24: j = 1;
  4498  0CB0  0020               	movlb	0	; select bank0
  4499  0CB1  01A8               	clrf	getLoad_AD@j
  4500  0CB2  0AA8               	incf	getLoad_AD@j,f
  4501  0CB3                     l7894:	
  4502  0CB3  3001               	movlw	1
  4503  0CB4  00A4               	movwf	??_getLoad_AD
  4504  0CB5  0824               	movf	??_getLoad_AD,w
  4505  0CB6  07A9               	addwf	getLoad_AD@i,f
  4506  0CB7  3004               	movlw	4
  4507  0CB8  0229               	subwf	getLoad_AD@i,w
  4508  0CB9  1C03               	skipc
  4509  0CBA  2C8E               	goto	l7886
  4510  0CBB                     l7898:	
  4511                           
  4512                           ;OverLoad_B1.c: 25: }
  4513                           ;OverLoad_B1.c: 26: }
  4514                           ;OverLoad_B1.c: 27: if (j == 0) {
  4515  0CBB  08A8               	movf	getLoad_AD@j,f
  4516  0CBC  1D03               	skipz
  4517  0CBD  0008               	return
  4518                           
  4519                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4520  0CBE  01A9               	clrf	getLoad_AD@i
  4521  0CBF                     L1:	
  4522  0CBF  3004               	movlw	4
  4523  0CC0  0229               	subwf	getLoad_AD@i,w
  4524  0CC1  1803               	btfsc	3,0
  4525  0CC2  0008               	return
  4526                           
  4527                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4528  0CC3  3529               	lslf	getLoad_AD@i,w
  4529  0CC4  3E3B               	addlw	(_Load+21)& (0+255)
  4530  0CC5  0086               	movwf	6
  4531  0CC6  3001               	movlw	1	; select bank2/3
  4532  0CC7  0087               	movwf	7
  4533  0CC8  3F40               	moviw [0]fsr1
  4534  0CC9  00A4               	movwf	??_getLoad_AD
  4535  0CCA  3F41               	moviw [1]fsr1
  4536  0CCB  00A5               	movwf	??_getLoad_AD+1
  4537  0CCC  0825               	movf	??_getLoad_AD+1,w
  4538  0CCD  0022               	movlb	2	; select bank2
  4539  0CCE  0248               	subwf	((_Load+1)^(0+256)+33),w
  4540  0CCF  1D03               	skipz
  4541  0CD0  2CD5               	goto	u7865
  4542  0CD1  0020               	movlb	0	; select bank0
  4543  0CD2  0824               	movf	??_getLoad_AD,w
  4544  0CD3  0022               	movlb	2	; select bank2
  4545  0CD4  0247               	subwf	(_Load^(0+256)+33),w
  4546  0CD5                     u7865:	
  4547  0CD5  1803               	skipnc
  4548  0CD6  2CE8               	goto	l7914
  4549  0CD7  0020               	movlb	0	; select bank0
  4550  0CD8  08A7               	movf	getLoad_AD@k,f
  4551  0CD9  1D03               	skipz
  4552  0CDA  2CE8               	goto	l7914
  4553                           
  4554                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4555  0CDB  3529               	lslf	getLoad_AD@i,w
  4556  0CDC  3E3B               	addlw	(_Load+21)& (0+255)
  4557  0CDD  0086               	movwf	6
  4558  0CDE  3001               	movlw	1	; select bank2/3
  4559  0CDF  0087               	movwf	7
  4560  0CE0  0022               	movlb	2	; select bank2
  4561  0CE1  0847               	movf	(_Load^(0+256)+33),w
  4562  0CE2  3FC0               	movwi [0]fsr1
  4563  0CE3  0848               	movf	((_Load+1)^(0+256)+33),w
  4564  0CE4  3FC1               	movwi [1]fsr1
  4565                           
  4566                           ;OverLoad_B1.c: 31: k = 1;
  4567  0CE5  0020               	movlb	0	; select bank0
  4568  0CE6  01A7               	clrf	getLoad_AD@k
  4569  0CE7  0AA7               	incf	getLoad_AD@k,f
  4570  0CE8                     l7914:	
  4571  0CE8  3001               	movlw	1
  4572  0CE9  0020               	movlb	0	; select bank0
  4573  0CEA  00A4               	movwf	??_getLoad_AD
  4574  0CEB  0824               	movf	??_getLoad_AD,w
  4575  0CEC  07A9               	addwf	getLoad_AD@i,f
  4576  0CED  2CBF               	goto	L1
  4577  0CEE                     __end_of_getLoad_AD:	
  4578                           
  4579                           	psect	text5
  4580  1F38                     __ptext5:	
  4581 ;; *************** function _getAD *****************
  4582 ;; Defined at:
  4583 ;;		line 454 in file "../src/MCU_B1.c"
  4584 ;; Parameters:    Size  Location     Type
  4585 ;;  adcon0          1    wreg     unsigned char 
  4586 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4587 ;; Auto vars:     Size  Location     Type
  4588 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4589 ;; Return value:  Size  Location     Type
  4590 ;;                  2    0[BANK0 ] int 
  4591 ;; Registers used:
  4592 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4593 ;; Tracked objects:
  4594 ;;		On entry : 0/0
  4595 ;;		On exit  : 0/0
  4596 ;;		Unchanged: 0/0
  4597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4598 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4599 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4601 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4602 ;;Total ram usage:        4 bytes
  4603 ;; Hardware stack levels used:    1
  4604 ;; Hardware stack levels required when called:    6
  4605 ;; This function calls:
  4606 ;;		_Timeout_Counter
  4607 ;;		_set_TimeoutCleared
  4608 ;; This function is called by:
  4609 ;;		_getLoad_AD
  4610 ;;		_getTemp_AD
  4611 ;; This function uses a non-reentrant model
  4612 ;;
  4613                           
  4614                           
  4615                           ;psect for function _getAD
  4616  1F38                     _getAD:	
  4617                           
  4618                           ;incstack = 0
  4619                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4620                           ;getAD@adcon0 stored from wreg
  4621  1F38  0020               	movlb	0	; select bank0
  4622  1F39  00A3               	movwf	getAD@adcon0
  4623                           
  4624                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4625  1F3A  0823               	movf	getAD@adcon0,w
  4626  1F3B  0021               	movlb	1	; select bank1
  4627  1F3C  009D               	movwf	29	;volatile
  4628                           
  4629                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4630  1F3D  0020               	movlb	0	; select bank0
  4631  1F3E  0820               	movf	getAD@adcon1,w
  4632  1F3F  0021               	movlb	1	; select bank1
  4633  1F40  009E               	movwf	30	;volatile
  4634                           
  4635                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4636  1F41  149D               	bsf	29,1	;volatile
  4637                           
  4638                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4639  1F42  2F46               	goto	l7312
  4640  1F43                     l7310:	
  4641                           
  4642                           ;MCU_B1.c: 459: Timeout_Counter();
  4643  1F43  319D  25A1  319F   	fcall	_Timeout_Counter
  4644  1F46                     l7312:	
  4645  1F46  0021               	movlb	1	; select bank1
  4646  1F47  1C9D               	btfss	29,1	;volatile
  4647  1F48  2F4B               	goto	l7316
  4648  1F49  1D2D               	btfss	(_myMain^(0+128)+13),2
  4649  1F4A  2F43               	goto	l7310
  4650  1F4B                     l7316:	
  4651                           
  4652                           ;MCU_B1.c: 460: };
  4653                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4654  1F4B  319B  235F         	fcall	_set_TimeoutCleared
  4655                           
  4656                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4657  1F4D  0021               	movlb	1	; select bank1
  4658  1F4E  081C               	movf	28,w	;volatile
  4659  1F4F  0020               	movlb	0	; select bank0
  4660  1F50  01A1               	clrf	?_getAD+1
  4661  1F51  07A1               	addwf	?_getAD+1,f
  4662  1F52  0021               	movlb	1	; select bank1
  4663  1F53  081B               	movf	27,w	;volatile
  4664  1F54  0020               	movlb	0	; select bank0
  4665  1F55  01A0               	clrf	?_getAD
  4666  1F56  07A0               	addwf	?_getAD,f
  4667  1F57  0008               	return
  4668  1F58                     __end_of_getAD:	
  4669                           
  4670                           	psect	text6
  4671  1CF3                     __ptext6:	
  4672 ;; *************** function _WDT_Main *****************
  4673 ;; Defined at:
  4674 ;;		line 1033 in file "../src/MCU_B1.c"
  4675 ;; Parameters:    Size  Location     Type
  4676 ;;		None
  4677 ;; Auto vars:     Size  Location     Type
  4678 ;;		None
  4679 ;; Return value:  Size  Location     Type
  4680 ;;		None               void
  4681 ;; Registers used:
  4682 ;;		wreg, status,2, status,0, pclath, cstack
  4683 ;; Tracked objects:
  4684 ;;		On entry : 0/0
  4685 ;;		On exit  : 0/0
  4686 ;;		Unchanged: 0/0
  4687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4690 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4691 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4692 ;;Total ram usage:        1 bytes
  4693 ;; Hardware stack levels used:    1
  4694 ;; Hardware stack levels required when called:    6
  4695 ;; This function calls:
  4696 ;;		_WDT_Clearing
  4697 ;; This function is called by:
  4698 ;;		_main
  4699 ;; This function uses a non-reentrant model
  4700 ;;
  4701                           
  4702                           
  4703                           ;psect for function _WDT_Main
  4704  1CF3                     _WDT_Main:	
  4705                           
  4706                           ;MCU_B1.c: 1034: if (WDT.Enable == 1) {
  4707                           
  4708                           ;incstack = 0
  4709                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4710  1CF3  0021               	movlb	1	; select bank1
  4711  1CF4  1C4A               	btfss	_WDT^(0+128),0
  4712  1CF5  0008               	return
  4713                           
  4714                           ;MCU_B1.c: 1035: if (WDT.Timer-- > 0) {
  4715  1CF6  3001               	movlw	1
  4716  1CF7  02CB               	subwf	(_WDT^(0+128)+1),f
  4717  1CF8  084B               	movf	(_WDT^(0+128)+1),w
  4718  1CF9  3AFF               	xorlw	255
  4719  1CFA  1903               	skipnz
  4720  1CFB  0008               	return
  4721                           
  4722                           ;MCU_B1.c: 1036: WDT.Timer = 100;
  4723  1CFC  3064               	movlw	100
  4724  1CFD  0020               	movlb	0	; select bank0
  4725  1CFE  00A0               	movwf	??_WDT_Main
  4726  1CFF  0820               	movf	??_WDT_Main,w
  4727  1D00  0021               	movlb	1	; select bank1
  4728  1D01  00CB               	movwf	(_WDT^(0+128)+1)
  4729                           
  4730                           ;MCU_B1.c: 1037: WDT_Clearing();
  4731  1D02  3180  2002         	fcall	_WDT_Clearing
  4732  1D04  0008               	return
  4733  1D05                     __end_of_WDT_Main:	
  4734                           
  4735                           	psect	text7
  4736  0002                     __ptext7:	
  4737 ;; *************** function _WDT_Clearing *****************
  4738 ;; Defined at:
  4739 ;;		line 1043 in file "../src/MCU_B1.c"
  4740 ;; Parameters:    Size  Location     Type
  4741 ;;		None
  4742 ;; Auto vars:     Size  Location     Type
  4743 ;;		None
  4744 ;; Return value:  Size  Location     Type
  4745 ;;		None               void
  4746 ;; Registers used:
  4747 ;;		None
  4748 ;; Tracked objects:
  4749 ;;		On entry : 0/0
  4750 ;;		On exit  : 0/0
  4751 ;;		Unchanged: 0/0
  4752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4757 ;;Total ram usage:        0 bytes
  4758 ;; Hardware stack levels used:    1
  4759 ;; Hardware stack levels required when called:    5
  4760 ;; This function calls:
  4761 ;;		Nothing
  4762 ;; This function is called by:
  4763 ;;		_WDT_Main
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767                           
  4768                           ;psect for function _WDT_Clearing
  4769  0002                     _WDT_Clearing:	
  4770                           
  4771                           ;incstack = 0
  4772                           ; Regs used in _WDT_Clearing: []
  4773  0002  0064               	clrwdt	;# 
  4774  0003  0008               	return
  4775  0004                     __end_of_WDT_Clearing:	
  4776                           
  4777                           	psect	text8
  4778  1B50                     __ptext8:	
  4779 ;; *************** function _Temp_Main *****************
  4780 ;; Defined at:
  4781 ;;		line 51 in file "../src/OverTemperature_B1.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;		None
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;		None
  4786 ;; Return value:  Size  Location     Type
  4787 ;;		None               void
  4788 ;; Registers used:
  4789 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4790 ;; Tracked objects:
  4791 ;;		On entry : 0/0
  4792 ;;		On exit  : 0/0
  4793 ;;		Unchanged: 0/0
  4794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4799 ;;Total ram usage:        0 bytes
  4800 ;; Hardware stack levels used:    1
  4801 ;; Hardware stack levels required when called:    8
  4802 ;; This function calls:
  4803 ;;		_setTemp_Main
  4804 ;; This function is called by:
  4805 ;;		_main
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           
  4810                           ;psect for function _Temp_Main
  4811  1B50                     _Temp_Main:	
  4812                           
  4813                           ;OverTemperature_B1.c: 53: setTemp_Main();
  4814                           
  4815                           ;incstack = 0
  4816                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4817  1B50  318D  25FE         	fcall	_setTemp_Main
  4818  1B52  0008               	return
  4819  1B53                     __end_of_Temp_Main:	
  4820                           
  4821                           	psect	text9
  4822  0DFE                     __ptext9:	
  4823 ;; *************** function _setTemp_Main *****************
  4824 ;; Defined at:
  4825 ;;		line 58 in file "../src/OverTemperature_B1.c"
  4826 ;; Parameters:    Size  Location     Type
  4827 ;;		None
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;		None
  4830 ;; Return value:  Size  Location     Type
  4831 ;;		None               void
  4832 ;; Registers used:
  4833 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4834 ;; Tracked objects:
  4835 ;;		On entry : 0/0
  4836 ;;		On exit  : 0/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4841 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4842 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4843 ;;Total ram usage:        2 bytes
  4844 ;; Hardware stack levels used:    1
  4845 ;; Hardware stack levels required when called:    7
  4846 ;; This function calls:
  4847 ;;		_getMain_All_Error_Status
  4848 ;;		_setBuz
  4849 ;; This function is called by:
  4850 ;;		_Temp_Main
  4851 ;; This function uses a non-reentrant model
  4852 ;;
  4853                           
  4854                           
  4855                           ;psect for function _setTemp_Main
  4856  0DFE                     _setTemp_Main:	
  4857                           
  4858                           ;OverTemperature_B1.c: 59: if (Temp.Enable == 1) {
  4859                           
  4860                           ;incstack = 0
  4861                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4862  0DFE  0021               	movlb	1	; select bank1
  4863  0DFF  1C57               	btfss	_Temp^(0+128),0
  4864  0E00  2E9F               	goto	l1617
  4865                           
  4866                           ;OverTemperature_B1.c: 60: if (Temp.ADtoGO == 0) {
  4867  0E01  1957               	btfsc	_Temp^(0+128),2
  4868  0E02  2E12               	goto	l7388
  4869                           
  4870                           ;OverTemperature_B1.c: 61: Temp.Time++;
  4871  0E03  3001               	movlw	1
  4872  0E04  07D8               	addwf	(_Temp^(0+128)+1),f
  4873  0E05  3000               	movlw	0
  4874  0E06  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4875                           
  4876                           ;OverTemperature_B1.c: 62: if (Temp.Time >= 500) {
  4877  0E07  3001               	movlw	1
  4878  0E08  0259               	subwf	((_Temp+1)^(0+128)+1),w
  4879  0E09  30F4               	movlw	244
  4880  0E0A  1903               	skipnz
  4881  0E0B  0258               	subwf	(_Temp^(0+128)+1),w
  4882  0E0C  1C03               	skipc
  4883  0E0D  0008               	return
  4884                           
  4885                           ;OverTemperature_B1.c: 63: Temp.Time = 0;
  4886  0E0E  01D8               	clrf	(_Temp^(0+128)+1)
  4887  0E0F  01D9               	clrf	((_Temp+1)^(0+128)+1)
  4888                           
  4889                           ;OverTemperature_B1.c: 64: Temp.ADtoGO = 1;
  4890  0E10  1557               	bsf	_Temp^(0+128),2
  4891                           
  4892                           ;OverTemperature_B1.c: 65: }
  4893                           ;OverTemperature_B1.c: 66: } else {
  4894  0E11  0008               	return
  4895  0E12                     l7388:	
  4896                           
  4897                           ;OverTemperature_B1.c: 67: if (getMain_All_Error_Status(2) == 0) {
  4898  0E12  3002               	movlw	2
  4899  0E13  3191  21EF  318D   	fcall	_getMain_All_Error_Status
  4900  0E16  3800               	iorlw	0
  4901  0E17  1D03               	skipz
  4902  0E18  0008               	return
  4903                           
  4904                           ;OverTemperature_B1.c: 68: Temp.Time++;
  4905  0E19  3001               	movlw	1
  4906  0E1A  0021               	movlb	1	; select bank1
  4907  0E1B  07D8               	addwf	(_Temp^(0+128)+1),f
  4908  0E1C  3000               	movlw	0
  4909  0E1D  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4910                           
  4911                           ;OverTemperature_B1.c: 69: if (Temp.Time >= 5) {
  4912  0E1E  3000               	movlw	0
  4913  0E1F  0259               	subwf	((_Temp+1)^(0+128)+1),w
  4914  0E20  3005               	movlw	5
  4915  0E21  1903               	skipnz
  4916  0E22  0258               	subwf	(_Temp^(0+128)+1),w
  4917  0E23  1C03               	skipc
  4918  0E24  0008               	return
  4919                           
  4920                           ;OverTemperature_B1.c: 70: Temp.Time = 0;
  4921  0E25  01D8               	clrf	(_Temp^(0+128)+1)
  4922  0E26  01D9               	clrf	((_Temp+1)^(0+128)+1)
  4923                           
  4924                           ;OverTemperature_B1.c: 71: if (Temp.GO == 1) {
  4925  0E27  1E57               	btfss	_Temp^(0+128),4
  4926  0E28  0008               	return
  4927                           
  4928                           ;OverTemperature_B1.c: 72: Temp.ADtoGO = 0;
  4929  0E29  1157               	bcf	_Temp^(0+128),2
  4930                           
  4931                           ;OverTemperature_B1.c: 73: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  4932  0E2A  300A               	movlw	10
  4933  0E2B  3ED7               	addlw	_Temp& (0+255)
  4934  0E2C  0086               	movwf	6
  4935  0E2D  0187               	clrf	7
  4936  0E2E  3008               	movlw	8
  4937  0E2F  3ED7               	addlw	_Temp& (0+255)
  4938  0E30  0084               	movwf	4
  4939  0E31  0185               	clrf	5
  4940  0E32  3F40               	moviw [0]fsr1
  4941  0E33  0700               	addwf	0,w
  4942  0E34  0020               	movlb	0	; select bank0
  4943  0E35  00AD               	movwf	??_setTemp_Main
  4944  0E36  3101               	addfsr 0,1
  4945  0E37  3F41               	moviw [1]fsr1
  4946  0E38  3D00               	addwfc	0,w
  4947  0E39  00AE               	movwf	??_setTemp_Main+1
  4948  0E3A  36AE               	lsrf	??_setTemp_Main+1,f
  4949  0E3B  0CAD               	rrf	??_setTemp_Main,f
  4950  0E3C  082D               	movf	??_setTemp_Main,w
  4951  0E3D  0021               	movlb	1	; select bank1
  4952  0E3E  00DD               	movwf	(_Temp^(0+128)+6)
  4953  0E3F  0020               	movlb	0	; select bank0
  4954  0E40  082E               	movf	??_setTemp_Main+1,w
  4955  0E41  0021               	movlb	1	; select bank1
  4956  0E42  00DE               	movwf	((_Temp+1)^(0+128)+6)
  4957                           
  4958                           ;OverTemperature_B1.c: 83: Temp.SafeValue = 455;
  4959  0E43  30C7               	movlw	199
  4960  0E44  00E5               	movwf	(_Temp^(0+128)+14)
  4961  0E45  3001               	movlw	1
  4962  0E46  00E6               	movwf	(_Temp^(0+128)+15)
  4963                           
  4964                           ;OverTemperature_B1.c: 84: Temp.DangerValue = 415;
  4965  0E47  309F               	movlw	159
  4966  0E48  00E7               	movwf	(_Temp^(0+128)+16)
  4967  0E49  3001               	movlw	1
  4968  0E4A  00E8               	movwf	(_Temp^(0+128)+17)
  4969                           
  4970                           ;OverTemperature_B1.c: 90: if (Temp.ERROR == 1) {
  4971  0E4B  1CD7               	btfss	_Temp^(0+128),1
  4972  0E4C  2E6D               	goto	l7420
  4973                           
  4974                           ;OverTemperature_B1.c: 91: if (Temp.AD >= Temp.SafeValue) {
  4975  0E4D  0866               	movf	((_Temp+1)^(0+128)+14),w
  4976  0E4E  025E               	subwf	((_Temp+1)^(0+128)+6),w
  4977  0E4F  1D03               	skipz
  4978  0E50  2E53               	goto	u6955
  4979  0E51  0865               	movf	(_Temp^(0+128)+14),w
  4980  0E52  025D               	subwf	(_Temp^(0+128)+6),w
  4981  0E53                     u6955:	
  4982  0E53  1C03               	skipc
  4983  0E54  2E6B               	goto	l7418
  4984                           
  4985                           ;OverTemperature_B1.c: 92: Temp.Count++;
  4986  0E55  3001               	movlw	1
  4987  0E56  0020               	movlb	0	; select bank0
  4988  0E57  00AD               	movwf	??_setTemp_Main
  4989  0E58  082D               	movf	??_setTemp_Main,w
  4990  0E59  0021               	movlb	1	; select bank1
  4991  0E5A  07DA               	addwf	(_Temp^(0+128)+3),f
  4992                           
  4993                           ;OverTemperature_B1.c: 93: if (Temp.Count >= 3) {
  4994  0E5B  3003               	movlw	3
  4995  0E5C  025A               	subwf	(_Temp^(0+128)+3),w
  4996  0E5D  1C03               	skipc
  4997  0E5E  2E83               	goto	l7432
  4998                           
  4999                           ;OverTemperature_B1.c: 94: Temp.Count = 0;
  5000  0E5F  01DA               	clrf	(_Temp^(0+128)+3)
  5001                           
  5002                           ;OverTemperature_B1.c: 95: Temp.ERROR = 0;
  5003  0E60  10D7               	bcf	_Temp^(0+128),1
  5004                           
  5005                           ;OverTemperature_B1.c: 96: setBuz(2, 100);
  5006  0E61  3064               	movlw	100
  5007  0E62  0020               	movlb	0	; select bank0
  5008  0E63  00A9               	movwf	setBuz@time
  5009  0E64  3000               	movlw	0
  5010  0E65  00AA               	movwf	setBuz@time+1
  5011  0E66  3002               	movlw	2
  5012  0E67  3196  2698  318D   	fcall	_setBuz
  5013                           
  5014                           ;OverTemperature_B1.c: 97: }
  5015                           ;OverTemperature_B1.c: 98: } else {
  5016  0E6A  2E83               	goto	l7432
  5017  0E6B                     l7418:	
  5018                           
  5019                           ;OverTemperature_B1.c: 99: Temp.Count = 0;
  5020  0E6B  0021               	movlb	1	; select bank1
  5021  0E6C  2E82               	goto	l7430
  5022  0E6D                     l7420:	
  5023                           ;OverTemperature_B1.c: 100: }
  5024                           ;OverTemperature_B1.c: 101: } else {
  5025                           
  5026                           
  5027                           ;OverTemperature_B1.c: 102: if (Temp.AD <= Temp.DangerValue) {
  5028  0E6D  085E               	movf	((_Temp+1)^(0+128)+6),w
  5029  0E6E  0268               	subwf	((_Temp+1)^(0+128)+16),w
  5030  0E6F  1D03               	skipz
  5031  0E70  2E73               	goto	u6975
  5032  0E71  085D               	movf	(_Temp^(0+128)+6),w
  5033  0E72  0267               	subwf	(_Temp^(0+128)+16),w
  5034  0E73                     u6975:	
  5035  0E73  1C03               	skipc
  5036  0E74  2E82               	goto	l7430
  5037                           
  5038                           ;OverTemperature_B1.c: 103: Temp.Count++;
  5039  0E75  3001               	movlw	1
  5040  0E76  0020               	movlb	0	; select bank0
  5041  0E77  00AD               	movwf	??_setTemp_Main
  5042  0E78  082D               	movf	??_setTemp_Main,w
  5043  0E79  0021               	movlb	1	; select bank1
  5044  0E7A  07DA               	addwf	(_Temp^(0+128)+3),f
  5045                           
  5046                           ;OverTemperature_B1.c: 104: if (Temp.Count >= 3) {
  5047  0E7B  3003               	movlw	3
  5048  0E7C  025A               	subwf	(_Temp^(0+128)+3),w
  5049  0E7D  1C03               	skipc
  5050  0E7E  2E83               	goto	l7432
  5051                           
  5052                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5053  0E7F  01DA               	clrf	(_Temp^(0+128)+3)
  5054                           
  5055                           ;OverTemperature_B1.c: 106: Temp.ERROR = 1;
  5056  0E80  14D7               	bsf	_Temp^(0+128),1
  5057                           
  5058                           ;OverTemperature_B1.c: 107: }
  5059                           ;OverTemperature_B1.c: 108: } else {
  5060  0E81  2E83               	goto	l7432
  5061  0E82                     l7430:	
  5062                           
  5063                           ;OverTemperature_B1.c: 109: Temp.Count = 0;
  5064  0E82  01DA               	clrf	(_Temp^(0+128)+3)
  5065  0E83                     l7432:	
  5066                           
  5067                           ;OverTemperature_B1.c: 110: }
  5068                           ;OverTemperature_B1.c: 111: }
  5069                           ;OverTemperature_B1.c: 112: product->Data[24]=Temp.AD >> 8;
  5070  0E83  0021               	movlb	1	; select bank1
  5071  0E84  085E               	movf	((_Temp+1)^(0+128)+6),w
  5072  0E85  0020               	movlb	0	; select bank0
  5073  0E86  00AD               	movwf	??_setTemp_Main
  5074  0E87  086E               	movf	_product,w
  5075  0E88  3E18               	addlw	24
  5076  0E89  0086               	movwf	6
  5077  0E8A  3002               	movlw	2	; select bank4/5
  5078  0E8B  0087               	movwf	7
  5079  0E8C  082D               	movf	??_setTemp_Main,w
  5080  0E8D  0081               	movwf	1
  5081                           
  5082                           ;OverTemperature_B1.c: 113: product->Data[25]=Temp.AD;
  5083  0E8E  0021               	movlb	1	; select bank1
  5084  0E8F  085D               	movf	(_Temp^(0+128)+6),w
  5085  0E90  0020               	movlb	0	; select bank0
  5086  0E91  00AD               	movwf	??_setTemp_Main
  5087  0E92  086E               	movf	_product,w
  5088  0E93  3E19               	addlw	25
  5089  0E94  0086               	movwf	6
  5090  0E95  3002               	movlw	2	; select bank4/5
  5091  0E96  0087               	movwf	7
  5092  0E97  082D               	movf	??_setTemp_Main,w
  5093  0E98  0081               	movwf	1
  5094                           
  5095                           ;OverTemperature_B1.c: 119: Temp.ADH[0] = 0;
  5096  0E99  0021               	movlb	1	; select bank1
  5097  0E9A  01DF               	clrf	(_Temp^(0+128)+8)
  5098  0E9B  01E0               	clrf	((_Temp+1)^(0+128)+8)
  5099                           
  5100                           ;OverTemperature_B1.c: 120: Temp.ADH[1] = 0;
  5101  0E9C  01E1               	clrf	(_Temp^(0+128)+10)
  5102  0E9D  01E2               	clrf	((_Temp+1)^(0+128)+10)
  5103                           
  5104                           ;OverTemperature_B1.c: 121: }
  5105                           ;OverTemperature_B1.c: 122: }
  5106                           ;OverTemperature_B1.c: 123: }
  5107                           ;OverTemperature_B1.c: 124: }
  5108                           ;OverTemperature_B1.c: 125: } else {
  5109  0E9E  0008               	return
  5110  0E9F                     l1617:	
  5111                           
  5112                           ;OverTemperature_B1.c: 126: if (myMain.PowerON == 1) {
  5113  0E9F  1C20               	btfss	_myMain^(0+128),0
  5114  0EA0  0008               	return
  5115                           
  5116                           ;OverTemperature_B1.c: 127: Temp.Enable = 1;
  5117  0EA1  1457               	bsf	_Temp^(0+128),0
  5118  0EA2  0008               	return
  5119  0EA3                     __end_of_setTemp_Main:	
  5120                           
  5121                           	psect	text10
  5122  1B4D                     __ptext10:	
  5123 ;; *************** function _Temp_Initialization *****************
  5124 ;; Defined at:
  5125 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5126 ;; Parameters:    Size  Location     Type
  5127 ;;		None
  5128 ;; Auto vars:     Size  Location     Type
  5129 ;;		None
  5130 ;; Return value:  Size  Location     Type
  5131 ;;		None               void
  5132 ;; Registers used:
  5133 ;;		status,2, status,0, pclath, cstack
  5134 ;; Tracked objects:
  5135 ;;		On entry : 0/0
  5136 ;;		On exit  : 0/0
  5137 ;;		Unchanged: 0/0
  5138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5143 ;;Total ram usage:        0 bytes
  5144 ;; Hardware stack levels used:    1
  5145 ;; Hardware stack levels required when called:    6
  5146 ;; This function calls:
  5147 ;;		_setTemp_Initialization
  5148 ;; This function is called by:
  5149 ;;		_main
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           
  5154                           ;psect for function _Temp_Initialization
  5155  1B4D                     _Temp_Initialization:	
  5156                           
  5157                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5158                           
  5159                           ;incstack = 0
  5160                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5161  1B4D  319B  2343         	fcall	_setTemp_Initialization
  5162  1B4F  0008               	return
  5163  1B50                     __end_of_Temp_Initialization:	
  5164                           
  5165                           	psect	text11
  5166  1B43                     __ptext11:	
  5167 ;; *************** function _setTemp_Initialization *****************
  5168 ;; Defined at:
  5169 ;;		line 46 in file "../src/OverTemperature_B1.c"
  5170 ;; Parameters:    Size  Location     Type
  5171 ;;		None
  5172 ;; Auto vars:     Size  Location     Type
  5173 ;;		None
  5174 ;; Return value:  Size  Location     Type
  5175 ;;		None               void
  5176 ;; Registers used:
  5177 ;;		None
  5178 ;; Tracked objects:
  5179 ;;		On entry : 0/0
  5180 ;;		On exit  : 0/0
  5181 ;;		Unchanged: 0/0
  5182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5186 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5187 ;;Total ram usage:        0 bytes
  5188 ;; Hardware stack levels used:    1
  5189 ;; Hardware stack levels required when called:    5
  5190 ;; This function calls:
  5191 ;;		Nothing
  5192 ;; This function is called by:
  5193 ;;		_Temp_Initialization
  5194 ;; This function uses a non-reentrant model
  5195 ;;
  5196                           
  5197                           
  5198                           ;psect for function _setTemp_Initialization
  5199  1B43                     _setTemp_Initialization:	
  5200                           
  5201                           ;incstack = 0
  5202                           ; Regs used in _setTemp_Initialization: []
  5203  1B43  0008               	return
  5204  1B44                     __end_of_setTemp_Initialization:	
  5205                           
  5206                           	psect	text12
  5207  1074                     __ptext12:	
  5208 ;; *************** function _Switch_Main *****************
  5209 ;; Defined at:
  5210 ;;		line 72 in file "../src/Switch_B1.c"
  5211 ;; Parameters:    Size  Location     Type
  5212 ;;		None
  5213 ;; Auto vars:     Size  Location     Type
  5214 ;;  error           1   30[BANK0 ] unsigned char 
  5215 ;; Return value:  Size  Location     Type
  5216 ;;		None               void
  5217 ;; Registers used:
  5218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5219 ;; Tracked objects:
  5220 ;;		On entry : 0/0
  5221 ;;		On exit  : 0/0
  5222 ;;		Unchanged: 0/0
  5223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5225 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5226 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5227 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5228 ;;Total ram usage:        2 bytes
  5229 ;; Hardware stack levels used:    1
  5230 ;; Hardware stack levels required when called:   11
  5231 ;; This function calls:
  5232 ;;		_TouchPower
  5233 ;;		_getMain_All_Error_Status
  5234 ;;		_setMain_Exception
  5235 ;;		_setSw_Main
  5236 ;; This function is called by:
  5237 ;;		_main
  5238 ;; This function uses a non-reentrant model
  5239 ;;
  5240                           
  5241                           
  5242                           ;psect for function _Switch_Main
  5243  1074                     _Switch_Main:	
  5244                           
  5245                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5246                           
  5247                           ;incstack = 0
  5248                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5249  1074  3000               	movlw	0
  5250  1075  3191  21EF  3190   	fcall	_getMain_All_Error_Status
  5251  1078  0020               	movlb	0	; select bank0
  5252  1079  00BD               	movwf	??_Switch_Main
  5253  107A  083D               	movf	??_Switch_Main,w
  5254  107B  00BE               	movwf	Switch_Main@error
  5255                           
  5256                           ;Switch_B1.c: 74: if (error != 0) {
  5257  107C  083E               	movf	Switch_Main@error,w
  5258  107D  1903               	btfsc	3,2
  5259  107E  2884               	goto	l2385
  5260                           
  5261                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5262  107F  0021               	movlb	1	; select bank1
  5263  1080  1852               	btfsc	_SwDetect^(0+128),0
  5264  1081  288D               	goto	l8104
  5265                           
  5266                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5267  1082  1452               	bsf	_SwDetect^(0+128),0
  5268  1083  2888               	goto	L2
  5269  1084                     l2385:	
  5270                           ;Switch_B1.c: 80: }
  5271                           ;Switch_B1.c: 81: } else {
  5272                           
  5273                           ;Switch_B1.c: 78: setMain_Exception(error);
  5274                           
  5275                           
  5276                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5277  1084  0021               	movlb	1	; select bank1
  5278  1085  1C52               	btfss	_SwDetect^(0+128),0
  5279  1086  288D               	goto	l8104
  5280                           
  5281                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5282  1087  1052               	bcf	_SwDetect^(0+128),0
  5283  1088                     L2:	
  5284                           
  5285                           ;Switch_B1.c: 85: setMain_Exception(error);
  5286  1088  0020               	movlb	0	; select bank0
  5287  1089  083E               	movf	Switch_Main@error,w
  5288  108A  3188  2014  3190   	fcall	_setMain_Exception
  5289  108D                     l8104:	
  5290                           
  5291                           ;Switch_B1.c: 87: }
  5292                           ;Switch_B1.c: 88: }
  5293                           ;Switch_B1.c: 91: setSw_Main(1);
  5294  108D  3001               	movlw	1
  5295  108E  3180  204B  3190   	fcall	_setSw_Main
  5296                           
  5297                           ;Switch_B1.c: 95: setSw_Main(2);
  5298  1091  3002               	movlw	2
  5299  1092  3180  204B  3190   	fcall	_setSw_Main
  5300                           
  5301                           ;Switch_B1.c: 103: TouchPower();
  5302  1095  319D  25E0         	fcall	_TouchPower
  5303  1097  0008               	return
  5304  1098                     __end_of_Switch_Main:	
  5305                           
  5306                           	psect	text13
  5307  004B                     __ptext13:	
  5308 ;; *************** function _setSw_Main *****************
  5309 ;; Defined at:
  5310 ;;		line 137 in file "../src/Switch_B1.c"
  5311 ;; Parameters:    Size  Location     Type
  5312 ;;  sw              1    wreg     unsigned char 
  5313 ;; Auto vars:     Size  Location     Type
  5314 ;;  sw              1   19[BANK0 ] unsigned char 
  5315 ;; Return value:  Size  Location     Type
  5316 ;;		None               void
  5317 ;; Registers used:
  5318 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5319 ;; Tracked objects:
  5320 ;;		On entry : 0/0
  5321 ;;		On exit  : 0/0
  5322 ;;		Unchanged: 0/0
  5323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5325 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5326 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;Total ram usage:        3 bytes
  5329 ;; Hardware stack levels used:    1
  5330 ;; Hardware stack levels required when called:    9
  5331 ;; This function calls:
  5332 ;;		_SwPointSelect
  5333 ;;		_getSw_KeyStatus
  5334 ;;		_setBuz
  5335 ;;		_setDimmerLights_AdjControl
  5336 ;;		_setDimmerLights_SwOff
  5337 ;;		_setDimmerLights_SwOn
  5338 ;;		_setRF_Learn
  5339 ;; This function is called by:
  5340 ;;		_Switch_Main
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           
  5345                           ;psect for function _setSw_Main
  5346  004B                     _setSw_Main:	
  5347                           
  5348                           ;incstack = 0
  5349                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5350                           ;setSw_Main@sw stored from wreg
  5351  004B  0020               	movlb	0	; select bank0
  5352  004C  00B3               	movwf	setSw_Main@sw
  5353                           
  5354                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5355  004D  0833               	movf	setSw_Main@sw,w
  5356  004E  319D  258D  3180   	fcall	_SwPointSelect
  5357                           
  5358                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5359  0051  087C               	movf	_Sw,w
  5360  0052  0086               	movwf	6
  5361  0053  3001               	movlw	1	; select bank2/3
  5362  0054  0087               	movwf	7
  5363  0055  1C01               	btfss	1,0
  5364  0056  29B1               	goto	l2395
  5365                           
  5366                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5367  0057  0021               	movlb	1	; select bank1
  5368  0058  1852               	btfsc	_SwDetect^(0+128),0
  5369  0059  2875               	goto	l7606
  5370                           
  5371                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5372  005A  0A7C               	incf	_Sw,w
  5373  005B  0086               	movwf	6
  5374  005C  3001               	movlw	1	; select bank2/3
  5375  005D  0087               	movwf	7
  5376  005E  1081               	bcf	1,1
  5377                           
  5378                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5379  005F  0020               	movlb	0	; select bank0
  5380  0060  0833               	movf	setSw_Main@sw,w
  5381  0061  319E  26F9  3180   	fcall	_getSw_KeyStatus
  5382  0064  3A01               	xorlw	1
  5383  0065  3000               	movlw	0
  5384  0066  1903               	skipnz
  5385  0067  3001               	movlw	1
  5386  0068  0020               	movlb	0	; select bank0
  5387  0069  00B1               	movwf	??_setSw_Main
  5388  006A  087C               	movf	_Sw,w
  5389  006B  0086               	movwf	6
  5390  006C  3001               	movlw	1	; select bank2/3
  5391  006D  0087               	movwf	7
  5392  006E  0DB1               	rlf	??_setSw_Main,f
  5393  006F  0801               	movf	1,w
  5394  0070  0631               	xorwf	??_setSw_Main,w
  5395  0071  39FD               	andlw	-3
  5396  0072  0631               	xorwf	??_setSw_Main,w
  5397  0073  0081               	movwf	1
  5398                           
  5399                           ;Switch_B1.c: 143: } else {
  5400  0074  288A               	goto	l2397
  5401  0075                     l7606:	
  5402                           
  5403                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5404  0075  0A7C               	incf	_Sw,w
  5405  0076  0086               	movwf	6
  5406  0077  3001               	movlw	1	; select bank2/3
  5407  0078  0087               	movwf	7
  5408  0079  1881               	btfsc	1,1
  5409  007A  288A               	goto	l2397
  5410                           
  5411                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5412  007B  0A7C               	incf	_Sw,w
  5413  007C  0086               	movwf	6
  5414  007D  3001               	movlw	1	; select bank2/3
  5415  007E  0087               	movwf	7
  5416  007F  1481               	bsf	1,1
  5417                           
  5418                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5419  0080  087C               	movf	_Sw,w
  5420  0081  0086               	movwf	6
  5421  0082  3001               	movlw	1	; select bank2/3
  5422  0083  0087               	movwf	7
  5423  0084  1081               	bcf	1,1
  5424                           
  5425                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5426  0085  087C               	movf	_Sw,w
  5427  0086  0086               	movwf	6
  5428  0087  3001               	movlw	1	; select bank2/3
  5429  0088  0087               	movwf	7
  5430  0089  1501               	bsf	1,2
  5431  008A                     l2397:	
  5432                           
  5433                           ;Switch_B1.c: 148: }
  5434                           ;Switch_B1.c: 149: }
  5435                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5436  008A  087C               	movf	_Sw,w
  5437  008B  0086               	movwf	6
  5438  008C  3001               	movlw	1	; select bank2/3
  5439  008D  0087               	movwf	7
  5440  008E  1C81               	btfss	1,1
  5441  008F  295A               	goto	l7656
  5442                           
  5443                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5444  0090  087C               	movf	_Sw,w
  5445  0091  0086               	movwf	6
  5446  0092  3001               	movlw	1	; select bank2/3
  5447  0093  0087               	movwf	7
  5448  0094  1901               	btfsc	1,2
  5449  0095  28B8               	goto	l7622
  5450                           
  5451                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5452  0096  3001               	movlw	1
  5453  0097  0020               	movlb	0	; select bank0
  5454  0098  00B1               	movwf	??_setSw_Main
  5455  0099  087C               	movf	_Sw,w
  5456  009A  3E02               	addlw	2
  5457  009B  0086               	movwf	6
  5458  009C  3001               	movlw	1	; select bank2/3
  5459  009D  0087               	movwf	7
  5460  009E  0831               	movf	??_setSw_Main,w
  5461  009F  0781               	addwf	1,f
  5462                           
  5463                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5464  00A0  087C               	movf	_Sw,w
  5465  00A1  3E02               	addlw	2
  5466  00A2  0086               	movwf	6
  5467  00A3  3001               	movlw	1	; select bank2/3
  5468  00A4  0087               	movwf	7
  5469  00A5  3005               	movlw	5
  5470  00A6  0201               	subwf	1,w
  5471  00A7  1C03               	skipc
  5472  00A8  0008               	return
  5473                           
  5474                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5475  00A9  087C               	movf	_Sw,w
  5476  00AA  3E02               	addlw	2
  5477  00AB  0086               	movwf	6
  5478  00AC  3001               	movlw	1	; select bank2/3
  5479  00AD  0087               	movwf	7
  5480  00AE  0181               	clrf	1
  5481                           
  5482                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5483  00AF  087C               	movf	_Sw,w
  5484  00B0  0086               	movwf	6
  5485  00B1  3001               	movlw	1	; select bank2/3
  5486  00B2  0087               	movwf	7
  5487  00B3  1501               	bsf	1,2
  5488                           
  5489                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5490  00B4  0833               	movf	setSw_Main@sw,w
  5491  00B5  3193  2365         	fcall	_setDimmerLights_SwOn
  5492                           
  5493                           ;Switch_B1.c: 162: }
  5494                           ;Switch_B1.c: 163: } else {
  5495  00B7  0008               	return
  5496  00B8                     l7622:	
  5497                           
  5498                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5499  00B8  087C               	movf	_Sw,w
  5500  00B9  0086               	movwf	6
  5501  00BA  3001               	movlw	1	; select bank2/3
  5502  00BB  0087               	movwf	7
  5503  00BC  1981               	btfsc	1,3
  5504  00BD  28EA               	goto	l7632
  5505                           
  5506                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5507  00BE  087C               	movf	_Sw,w
  5508  00BF  3E03               	addlw	3
  5509  00C0  0086               	movwf	6
  5510  00C1  3001               	movlw	1	; select bank2/3
  5511  00C2  0087               	movwf	7
  5512  00C3  3001               	movlw	1
  5513  00C4  0781               	addwf	1,f
  5514  00C5  3141               	addfsr 1,1
  5515  00C6  1803               	skipnc
  5516  00C7  0A81               	incf	1,f
  5517                           
  5518                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5519  00C8  087C               	movf	_Sw,w
  5520  00C9  3E03               	addlw	3
  5521  00CA  0086               	movwf	6
  5522  00CB  3001               	movlw	1	; select bank2/3
  5523  00CC  0087               	movwf	7
  5524  00CD  3F40               	moviw [0]fsr1
  5525  00CE  0020               	movlb	0	; select bank0
  5526  00CF  00B1               	movwf	??_setSw_Main
  5527  00D0  3F41               	moviw [1]fsr1
  5528  00D1  00B2               	movwf	??_setSw_Main+1
  5529  00D2  3000               	movlw	0
  5530  00D3  0232               	subwf	??_setSw_Main+1,w
  5531  00D4  3096               	movlw	150
  5532  00D5  1903               	skipnz
  5533  00D6  0231               	subwf	??_setSw_Main,w
  5534  00D7  1C03               	skipc
  5535  00D8  0008               	return
  5536                           
  5537                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5538  00D9  087C               	movf	_Sw,w
  5539  00DA  3E03               	addlw	3
  5540  00DB  0086               	movwf	6
  5541  00DC  3001               	movlw	1	; select bank2/3
  5542  00DD  0087               	movwf	7
  5543  00DE  3000               	movlw	0
  5544  00DF  3FC0               	movwi [0]fsr1
  5545  00E0  3FC1               	movwi [1]fsr1
  5546                           
  5547                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5548  00E1  087C               	movf	_Sw,w
  5549  00E2  0086               	movwf	6
  5550  00E3  3001               	movlw	1	; select bank2/3
  5551  00E4  0087               	movwf	7
  5552  00E5  1581               	bsf	1,3
  5553                           
  5554                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5555  00E6  0833               	movf	setSw_Main@sw,w
  5556  00E7  3192  2256         	fcall	_setDimmerLights_AdjControl
  5557                           
  5558                           ;Switch_B1.c: 174: }
  5559                           ;Switch_B1.c: 175: } else {
  5560  00E9  0008               	return
  5561  00EA                     l7632:	
  5562                           
  5563                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5564  00EA  087C               	movf	_Sw,w
  5565  00EB  0086               	movwf	6
  5566  00EC  3001               	movlw	1	; select bank2/3
  5567  00ED  0087               	movwf	7
  5568  00EE  1A01               	btfsc	1,4
  5569  00EF  2928               	goto	l7646
  5570                           
  5571                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5572  00F0  087C               	movf	_Sw,w
  5573  00F1  3E05               	addlw	5
  5574  00F2  0086               	movwf	6
  5575  00F3  3001               	movlw	1	; select bank2/3
  5576  00F4  0087               	movwf	7
  5577  00F5  3001               	movlw	1
  5578  00F6  0781               	addwf	1,f
  5579  00F7  3141               	addfsr 1,1
  5580  00F8  1803               	skipnc
  5581  00F9  0A81               	incf	1,f
  5582                           
  5583                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5584  00FA  087C               	movf	_Sw,w
  5585  00FB  3E05               	addlw	5
  5586  00FC  0086               	movwf	6
  5587  00FD  3001               	movlw	1	; select bank2/3
  5588  00FE  0087               	movwf	7
  5589  00FF  3F40               	moviw [0]fsr1
  5590  0100  0020               	movlb	0	; select bank0
  5591  0101  00B1               	movwf	??_setSw_Main
  5592  0102  3F41               	moviw [1]fsr1
  5593  0103  00B2               	movwf	??_setSw_Main+1
  5594  0104  3000               	movlw	0
  5595  0105  0232               	subwf	??_setSw_Main+1,w
  5596  0106  3096               	movlw	150
  5597  0107  1903               	skipnz
  5598  0108  0231               	subwf	??_setSw_Main,w
  5599  0109  1C03               	skipc
  5600  010A  0008               	return
  5601                           
  5602                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5603  010B  087C               	movf	_Sw,w
  5604  010C  3E05               	addlw	5
  5605  010D  0086               	movwf	6
  5606  010E  3001               	movlw	1	; select bank2/3
  5607  010F  0087               	movwf	7
  5608  0110  3000               	movlw	0
  5609  0111  3FC0               	movwi [0]fsr1
  5610  0112  3FC1               	movwi [1]fsr1
  5611                           
  5612                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5613  0113  087C               	movf	_Sw,w
  5614  0114  0086               	movwf	6
  5615  0115  3001               	movlw	1	; select bank2/3
  5616  0116  0087               	movwf	7
  5617  0117  1601               	bsf	1,4
  5618                           
  5619                           ;Switch_B1.c: 183: setRF_Learn(1);
  5620  0118  3001               	movlw	1
  5621  0119  3188  2000  3180   	fcall	_setRF_Learn
  5622                           
  5623                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5624  011C  0021               	movlb	1	; select bank1
  5625  011D  1EA0               	btfss	_myMain^(0+128),5
  5626  011E  0008               	return
  5627                           
  5628                           ;Switch_B1.c: 186: setBuz(2, 100);
  5629  011F  3064               	movlw	100
  5630  0120  0020               	movlb	0	; select bank0
  5631  0121  00A9               	movwf	setBuz@time
  5632  0122  3000               	movlw	0
  5633  0123  00AA               	movwf	setBuz@time+1
  5634  0124  3002               	movlw	2
  5635  0125  3196  2698         	fcall	_setBuz
  5636                           
  5637                           ;Switch_B1.c: 187: }
  5638                           ;Switch_B1.c: 189: }
  5639                           ;Switch_B1.c: 190: } else {
  5640  0127  0008               	return
  5641  0128                     l7646:	
  5642                           
  5643                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5644  0128  087C               	movf	_Sw,w
  5645  0129  0086               	movwf	6
  5646  012A  3001               	movlw	1	; select bank2/3
  5647  012B  0087               	movwf	7
  5648  012C  1A81               	btfsc	1,5
  5649  012D  0008               	return
  5650                           
  5651                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5652  012E  087C               	movf	_Sw,w
  5653  012F  3E07               	addlw	7
  5654  0130  0086               	movwf	6
  5655  0131  3001               	movlw	1	; select bank2/3
  5656  0132  0087               	movwf	7
  5657  0133  3001               	movlw	1
  5658  0134  0781               	addwf	1,f
  5659  0135  3141               	addfsr 1,1
  5660  0136  1803               	skipnc
  5661  0137  0A81               	incf	1,f
  5662                           
  5663                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5664  0138  087C               	movf	_Sw,w
  5665  0139  3E07               	addlw	7
  5666  013A  0086               	movwf	6
  5667  013B  3001               	movlw	1	; select bank2/3
  5668  013C  0087               	movwf	7
  5669  013D  3F40               	moviw [0]fsr1
  5670  013E  0020               	movlb	0	; select bank0
  5671  013F  00B1               	movwf	??_setSw_Main
  5672  0140  3F41               	moviw [1]fsr1
  5673  0141  00B2               	movwf	??_setSw_Main+1
  5674  0142  3001               	movlw	1
  5675  0143  0232               	subwf	??_setSw_Main+1,w
  5676  0144  302C               	movlw	44
  5677  0145  1903               	skipnz
  5678  0146  0231               	subwf	??_setSw_Main,w
  5679  0147  1C03               	skipc
  5680  0148  0008               	return
  5681                           
  5682                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5683  0149  087C               	movf	_Sw,w
  5684  014A  3E07               	addlw	7
  5685  014B  0086               	movwf	6
  5686  014C  3001               	movlw	1	; select bank2/3
  5687  014D  0087               	movwf	7
  5688  014E  3000               	movlw	0
  5689  014F  3FC0               	movwi [0]fsr1
  5690  0150  3FC1               	movwi [1]fsr1
  5691                           
  5692                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5693  0151  087C               	movf	_Sw,w
  5694  0152  0086               	movwf	6
  5695  0153  3001               	movlw	1	; select bank2/3
  5696  0154  0087               	movwf	7
  5697  0155  1681               	bsf	1,5
  5698                           
  5699                           ;Switch_B1.c: 198: setRF_Learn(0);
  5700  0156  3000               	movlw	0
  5701  0157  3188  2000         	fcall	_setRF_Learn
  5702                           
  5703                           ;Switch_B1.c: 201: }
  5704                           ;Switch_B1.c: 202: }
  5705                           ;Switch_B1.c: 203: }
  5706                           ;Switch_B1.c: 204: }
  5707                           ;Switch_B1.c: 205: }
  5708                           ;Switch_B1.c: 206: } else {
  5709  0159  0008               	return
  5710  015A                     l7656:	
  5711                           
  5712                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5713  015A  087C               	movf	_Sw,w
  5714  015B  0086               	movwf	6
  5715  015C  3001               	movlw	1	; select bank2/3
  5716  015D  0087               	movwf	7
  5717  015E  1D01               	btfss	1,2
  5718  015F  0008               	return
  5719                           
  5720                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5721  0160  3001               	movlw	1
  5722  0161  0020               	movlb	0	; select bank0
  5723  0162  00B1               	movwf	??_setSw_Main
  5724  0163  087C               	movf	_Sw,w
  5725  0164  3E02               	addlw	2
  5726  0165  0086               	movwf	6
  5727  0166  3001               	movlw	1	; select bank2/3
  5728  0167  0087               	movwf	7
  5729  0168  0831               	movf	??_setSw_Main,w
  5730  0169  0781               	addwf	1,f
  5731                           
  5732                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5733  016A  087C               	movf	_Sw,w
  5734  016B  3E02               	addlw	2
  5735  016C  0086               	movwf	6
  5736  016D  3001               	movlw	1	; select bank2/3
  5737  016E  0087               	movwf	7
  5738  016F  3005               	movlw	5
  5739  0170  0201               	subwf	1,w
  5740  0171  1C03               	skipc
  5741  0172  0008               	return
  5742                           
  5743                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5744  0173  087C               	movf	_Sw,w
  5745  0174  3E02               	addlw	2
  5746  0175  0086               	movwf	6
  5747  0176  3001               	movlw	1	; select bank2/3
  5748  0177  0087               	movwf	7
  5749  0178  0181               	clrf	1
  5750                           
  5751                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5752  0179  087C               	movf	_Sw,w
  5753  017A  0086               	movwf	6
  5754  017B  3001               	movlw	1	; select bank2/3
  5755  017C  0087               	movwf	7
  5756  017D  1101               	bcf	1,2
  5757                           
  5758                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5759  017E  087C               	movf	_Sw,w
  5760  017F  3E03               	addlw	3
  5761  0180  0086               	movwf	6
  5762  0181  3001               	movlw	1	; select bank2/3
  5763  0182  0087               	movwf	7
  5764  0183  3000               	movlw	0
  5765  0184  3FC0               	movwi [0]fsr1
  5766  0185  3FC1               	movwi [1]fsr1
  5767                           
  5768                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5769  0186  087C               	movf	_Sw,w
  5770  0187  0086               	movwf	6
  5771  0188  3001               	movlw	1	; select bank2/3
  5772  0189  0087               	movwf	7
  5773  018A  1181               	bcf	1,3
  5774                           
  5775                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5776  018B  087C               	movf	_Sw,w
  5777  018C  3E05               	addlw	5
  5778  018D  0086               	movwf	6
  5779  018E  3001               	movlw	1	; select bank2/3
  5780  018F  0087               	movwf	7
  5781  0190  3000               	movlw	0
  5782  0191  3FC0               	movwi [0]fsr1
  5783  0192  3FC1               	movwi [1]fsr1
  5784                           
  5785                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5786  0193  087C               	movf	_Sw,w
  5787  0194  0086               	movwf	6
  5788  0195  3001               	movlw	1	; select bank2/3
  5789  0196  0087               	movwf	7
  5790  0197  1201               	bcf	1,4
  5791                           
  5792                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5793  0198  087C               	movf	_Sw,w
  5794  0199  3E07               	addlw	7
  5795  019A  0086               	movwf	6
  5796  019B  3001               	movlw	1	; select bank2/3
  5797  019C  0087               	movwf	7
  5798  019D  3000               	movlw	0
  5799  019E  3FC0               	movwi [0]fsr1
  5800  019F  3FC1               	movwi [1]fsr1
  5801                           
  5802                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5803  01A0  087C               	movf	_Sw,w
  5804  01A1  0086               	movwf	6
  5805  01A2  3001               	movlw	1	; select bank2/3
  5806  01A3  0087               	movwf	7
  5807  01A4  1281               	bcf	1,5
  5808                           
  5809                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5810  01A5  0021               	movlb	1	; select bank1
  5811  01A6  1852               	btfsc	_SwDetect^(0+128),0
  5812  01A7  29AD               	goto	l7682
  5813                           
  5814                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5815  01A8  0020               	movlb	0	; select bank0
  5816  01A9  0833               	movf	setSw_Main@sw,w
  5817  01AA  3194  2420  3180   	fcall	_setDimmerLights_SwOff
  5818  01AD                     l7682:	
  5819                           
  5820                           ;Switch_B1.c: 221: }
  5821                           ;Switch_B1.c: 224: setRF_Learn(0);
  5822  01AD  3000               	movlw	0
  5823  01AE  3188  2000         	fcall	_setRF_Learn
  5824                           
  5825                           ;Switch_B1.c: 226: }
  5826                           ;Switch_B1.c: 227: }
  5827                           ;Switch_B1.c: 228: }
  5828                           ;Switch_B1.c: 229: } else {
  5829  01B0  0008               	return
  5830  01B1                     l2395:	
  5831                           
  5832                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5833  01B1  0021               	movlb	1	; select bank1
  5834  01B2  1C20               	btfss	_myMain^(0+128),0
  5835  01B3  0008               	return
  5836                           
  5837                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5838  01B4  087C               	movf	_Sw,w
  5839  01B5  0086               	movwf	6
  5840  01B6  3001               	movlw	1	; select bank2/3
  5841  01B7  0087               	movwf	7
  5842  01B8  1401               	bsf	1,0
  5843  01B9  0008               	return
  5844  01BA                     __end_of_setSw_Main:	
  5845                           
  5846                           	psect	text14
  5847  0800                     __ptext14:	
  5848 ;; *************** function _setRF_Learn *****************
  5849 ;; Defined at:
  5850 ;;		line 23 in file "../src/RF_Control_B1.c"
  5851 ;; Parameters:    Size  Location     Type
  5852 ;;  command         1    wreg     unsigned char 
  5853 ;; Auto vars:     Size  Location     Type
  5854 ;;  command         1    1[BANK0 ] unsigned char 
  5855 ;; Return value:  Size  Location     Type
  5856 ;;		None               void
  5857 ;; Registers used:
  5858 ;;		wreg, status,2, status,0
  5859 ;; Tracked objects:
  5860 ;;		On entry : 0/0
  5861 ;;		On exit  : 0/0
  5862 ;;		Unchanged: 0/0
  5863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5865 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5866 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5867 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5868 ;;Total ram usage:        2 bytes
  5869 ;; Hardware stack levels used:    1
  5870 ;; Hardware stack levels required when called:    5
  5871 ;; This function calls:
  5872 ;;		Nothing
  5873 ;; This function is called by:
  5874 ;;		_setSw_Main
  5875 ;; This function uses a non-reentrant model
  5876 ;;
  5877                           
  5878                           
  5879                           ;psect for function _setRF_Learn
  5880  0800                     _setRF_Learn:	
  5881                           
  5882                           ;incstack = 0
  5883                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5884                           ;setRF_Learn@command stored from wreg
  5885  0800  0020               	movlb	0	; select bank0
  5886  0801  00A1               	movwf	setRF_Learn@command
  5887                           
  5888                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5889  0802  0821               	movf	setRF_Learn@command,w
  5890  0803  3A01               	xorlw	1
  5891  0804  3000               	movlw	0
  5892  0805  1903               	skipnz
  5893  0806  3001               	movlw	1
  5894  0807  00A0               	movwf	??_setRF_Learn
  5895  0808  0EA0               	swapf	??_setRF_Learn,f
  5896  0809  0DA0               	rlf	??_setRF_Learn,f
  5897  080A  0DA0               	rlf	??_setRF_Learn,f
  5898  080B  0021               	movlb	1	; select bank1
  5899  080C  083C               	movf	_RF1^(0+128),w
  5900  080D  0020               	movlb	0	; select bank0
  5901  080E  0620               	xorwf	??_setRF_Learn,w
  5902  080F  39BF               	andlw	-65
  5903  0810  0620               	xorwf	??_setRF_Learn,w
  5904  0811  0021               	movlb	1	; select bank1
  5905  0812  00BC               	movwf	_RF1^(0+128)
  5906  0813  0008               	return
  5907  0814                     __end_of_setRF_Learn:	
  5908                           
  5909                           	psect	text15
  5910  1256                     __ptext15:	
  5911 ;; *************** function _setDimmerLights_AdjControl *****************
  5912 ;; Defined at:
  5913 ;;		line 558 in file "../src/Dimmer_B1.c"
  5914 ;; Parameters:    Size  Location     Type
  5915 ;;  sw              1    wreg     unsigned char 
  5916 ;; Auto vars:     Size  Location     Type
  5917 ;;  sw              1    8[BANK0 ] unsigned char 
  5918 ;;  idle            1    6[BANK0 ] unsigned char 
  5919 ;; Return value:  Size  Location     Type
  5920 ;;		None               void
  5921 ;; Registers used:
  5922 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5923 ;; Tracked objects:
  5924 ;;		On entry : 0/0
  5925 ;;		On exit  : 0/0
  5926 ;;		Unchanged: 0/0
  5927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5929 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5930 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5931 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5932 ;;Total ram usage:        4 bytes
  5933 ;; Hardware stack levels used:    1
  5934 ;; Hardware stack levels required when called:    7
  5935 ;; This function calls:
  5936 ;;		_DimmerLightsPointSelect
  5937 ;;		_getAll_DimmerLights_AdjGO
  5938 ;;		_setDimmerLights_TriggerAdj
  5939 ;; This function is called by:
  5940 ;;		_setSw_Main
  5941 ;; This function uses a non-reentrant model
  5942 ;;
  5943                           
  5944                           
  5945                           ;psect for function _setDimmerLights_AdjControl
  5946  1256                     _setDimmerLights_AdjControl:	
  5947                           
  5948                           ;incstack = 0
  5949                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5950                           ;setDimmerLights_AdjControl@sw stored from wreg
  5951  1256  0020               	movlb	0	; select bank0
  5952  1257  00A8               	movwf	setDimmerLights_AdjControl@sw
  5953                           
  5954                           ;Dimmer_B1.c: 559: DimmerLightsPointSelect(sw);
  5955  1258  0828               	movf	setDimmerLights_AdjControl@sw,w
  5956  1259  319D  2505  3192   	fcall	_DimmerLightsPointSelect
  5957                           
  5958                           ;Dimmer_B1.c: 560: char idle = 0;
  5959  125C  0020               	movlb	0	; select bank0
  5960  125D  01A6               	clrf	setDimmerLights_AdjControl@idle
  5961                           
  5962                           ;Dimmer_B1.c: 562: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  5963  125E  01A7               	clrf	_setDimmerLights_AdjControl$2577
  5964  125F  319C  248A  3192   	fcall	_getAll_DimmerLights_AdjGO
  5965  1262  3A01               	xorlw	1
  5966  1263  1D03               	skipz
  5967  1264  2A6B               	goto	l6826
  5968  1265  0022               	movlb	2	; select bank2
  5969  1266  1CA0               	btfss	_Dimmer^(0+256),1
  5970  1267  2A6B               	goto	l6826
  5971  1268  0020               	movlb	0	; select bank0
  5972  1269  01A7               	clrf	_setDimmerLights_AdjControl$2577
  5973  126A  0AA7               	incf	_setDimmerLights_AdjControl$2577,f
  5974  126B                     l6826:	
  5975  126B  0020               	movlb	0	; select bank0
  5976  126C  0827               	movf	_setDimmerLights_AdjControl$2577,w
  5977  126D  00A5               	movwf	??_setDimmerLights_AdjControl
  5978  126E  0825               	movf	??_setDimmerLights_AdjControl,w
  5979  126F  00A6               	movwf	setDimmerLights_AdjControl@idle
  5980                           
  5981                           ;Dimmer_B1.c: 564: if (idle == 0) {
  5982  1270  08A6               	movf	setDimmerLights_AdjControl@idle,f
  5983  1271  1D03               	skipz
  5984  1272  0008               	return
  5985                           
  5986                           ;Dimmer_B1.c: 565: if (DimmerLights->SwFlag == 1) {
  5987  1273  086F               	movf	_DimmerLights,w
  5988  1274  3E09               	addlw	9
  5989  1275  0086               	movwf	6
  5990  1276  3001               	movlw	1	; select bank2/3
  5991  1277  0087               	movwf	7
  5992  1278  1F01               	btfss	1,6
  5993  1279  0008               	return
  5994                           
  5995                           ;Dimmer_B1.c: 566: DimmerLights->SwAdj = 1;
  5996  127A  086F               	movf	_DimmerLights,w
  5997  127B  3E09               	addlw	9
  5998  127C  0086               	movwf	6
  5999  127D  3001               	movlw	1	; select bank2/3
  6000  127E  0087               	movwf	7
  6001  127F  1781               	bsf	1,7
  6002                           
  6003                           ;Dimmer_B1.c: 567: DimmerLights->Status = 1;
  6004  1280  086F               	movf	_DimmerLights,w
  6005  1281  0086               	movwf	6
  6006  1282  3001               	movlw	1	; select bank2/3
  6007  1283  0087               	movwf	7
  6008  1284  1681               	bsf	1,5
  6009                           
  6010                           ;Dimmer_B1.c: 568: setDimmerLights_TriggerAdj(sw, 1);
  6011  1285  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6012  1286  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6013  1287  0828               	movf	setDimmerLights_AdjControl@sw,w
  6014  1288  319F  2718         	fcall	_setDimmerLights_TriggerAdj
  6015  128A  0008               	return
  6016  128B                     __end_of_setDimmerLights_AdjControl:	
  6017                           
  6018                           	psect	text16
  6019  1EF9                     __ptext16:	
  6020 ;; *************** function _getSw_KeyStatus *****************
  6021 ;; Defined at:
  6022 ;;		line 237 in file "../src/Switch_B1.c"
  6023 ;; Parameters:    Size  Location     Type
  6024 ;;  sw              1    wreg     unsigned char 
  6025 ;; Auto vars:     Size  Location     Type
  6026 ;;  sw              1    4[BANK0 ] unsigned char 
  6027 ;;  status          1    3[BANK0 ] unsigned char 
  6028 ;; Return value:  Size  Location     Type
  6029 ;;                  1    wreg      unsigned char 
  6030 ;; Registers used:
  6031 ;;		wreg, status,2
  6032 ;; Tracked objects:
  6033 ;;		On entry : 0/0
  6034 ;;		On exit  : 0/0
  6035 ;;		Unchanged: 0/0
  6036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6038 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6039 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6040 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6041 ;;Total ram usage:        5 bytes
  6042 ;; Hardware stack levels used:    1
  6043 ;; Hardware stack levels required when called:    5
  6044 ;; This function calls:
  6045 ;;		Nothing
  6046 ;; This function is called by:
  6047 ;;		_setSw_Main
  6048 ;; This function uses a non-reentrant model
  6049 ;;
  6050                           
  6051                           
  6052                           ;psect for function _getSw_KeyStatus
  6053  1EF9                     _getSw_KeyStatus:	
  6054                           
  6055                           ;incstack = 0
  6056                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6057                           ;getSw_KeyStatus@sw stored from wreg
  6058  1EF9  0020               	movlb	0	; select bank0
  6059  1EFA  00A4               	movwf	getSw_KeyStatus@sw
  6060                           
  6061                           ;Switch_B1.c: 238: char status = 0;
  6062  1EFB  01A3               	clrf	getSw_KeyStatus@status
  6063                           
  6064                           ;Switch_B1.c: 250: if (sw == 1) {
  6065  1EFC  0824               	movf	getSw_KeyStatus@sw,w
  6066  1EFD  3A01               	xorlw	1
  6067  1EFE  1D03               	skipz
  6068  1EFF  2F08               	goto	l7010
  6069                           
  6070                           ;Switch_B1.c: 251: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6071  1F00  01A1               	clrf	_getSw_KeyStatus$6330
  6072  1F01  0AA1               	incf	_getSw_KeyStatus$6330,f
  6073  1F02  1F0C               	btfss	12,6	;volatile
  6074  1F03  1A0C               	btfsc	12,4	;volatile
  6075  1F04  2F06               	goto	l7008
  6076  1F05  01A1               	clrf	_getSw_KeyStatus$6330
  6077  1F06                     l7008:	
  6078  1F06  0821               	movf	_getSw_KeyStatus$6330,w
  6079  1F07  2F13               	goto	L3
  6080  1F08                     l7010:	
  6081                           ;Switch_B1.c: 252: } else if (sw == 2) {
  6082                           
  6083  1F08  0824               	movf	getSw_KeyStatus@sw,w
  6084  1F09  3A02               	xorlw	2
  6085  1F0A  1D03               	skipz
  6086  1F0B  2F16               	goto	l7020
  6087                           
  6088                           ;Switch_B1.c: 253: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6089  1F0C  01A2               	clrf	_getSw_KeyStatus$6331
  6090  1F0D  0AA2               	incf	_getSw_KeyStatus$6331,f
  6091  1F0E  1C0C               	btfss	12,0	;volatile
  6092  1F0F  188D               	btfsc	13,1	;volatile
  6093  1F10  2F12               	goto	l7018
  6094  1F11  01A2               	clrf	_getSw_KeyStatus$6331
  6095  1F12                     l7018:	
  6096  1F12  0822               	movf	_getSw_KeyStatus$6331,w
  6097  1F13                     L3:	
  6098  1F13  00A0               	movwf	??_getSw_KeyStatus
  6099  1F14  0820               	movf	??_getSw_KeyStatus,w
  6100  1F15  00A3               	movwf	getSw_KeyStatus@status
  6101  1F16                     l7020:	
  6102                           
  6103                           ;Switch_B1.c: 254: }
  6104                           ;Switch_B1.c: 261: return status;
  6105  1F16  0823               	movf	getSw_KeyStatus@status,w
  6106  1F17  0008               	return
  6107  1F18                     __end_of_getSw_KeyStatus:	
  6108                           
  6109                           	psect	text17
  6110  1D8D                     __ptext17:	
  6111 ;; *************** function _SwPointSelect *****************
  6112 ;; Defined at:
  6113 ;;		line 25 in file "../src/Switch_B1.c"
  6114 ;; Parameters:    Size  Location     Type
  6115 ;;  sw              1    wreg     unsigned char 
  6116 ;; Auto vars:     Size  Location     Type
  6117 ;;  sw              1    1[BANK0 ] unsigned char 
  6118 ;; Return value:  Size  Location     Type
  6119 ;;		None               void
  6120 ;; Registers used:
  6121 ;;		wreg
  6122 ;; Tracked objects:
  6123 ;;		On entry : 0/0
  6124 ;;		On exit  : 0/0
  6125 ;;		Unchanged: 0/0
  6126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6128 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6129 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6130 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6131 ;;Total ram usage:        2 bytes
  6132 ;; Hardware stack levels used:    1
  6133 ;; Hardware stack levels required when called:    5
  6134 ;; This function calls:
  6135 ;;		Nothing
  6136 ;; This function is called by:
  6137 ;;		_setSw_Main
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141                           
  6142                           ;psect for function _SwPointSelect
  6143  1D8D                     _SwPointSelect:	
  6144                           
  6145                           ;incstack = 0
  6146                           ; Regs used in _SwPointSelect: [wreg]
  6147                           ;SwPointSelect@sw stored from wreg
  6148  1D8D  0020               	movlb	0	; select bank0
  6149  1D8E  00A1               	movwf	SwPointSelect@sw
  6150                           
  6151                           ;Switch_B1.c: 28: if (sw == 1) {
  6152  1D8F  0821               	movf	SwPointSelect@sw,w
  6153  1D90  3A01               	xorlw	1
  6154  1D91  1D03               	skipz
  6155  1D92  2D98               	goto	l6994
  6156                           
  6157                           ;Switch_B1.c: 29: Sw = &Sw1;
  6158  1D93  30DC               	movlw	_Sw1& (0+255)
  6159  1D94  00A0               	movwf	??_SwPointSelect
  6160  1D95  0820               	movf	??_SwPointSelect,w
  6161  1D96  00FC               	movwf	_Sw
  6162                           
  6163                           ;Switch_B1.c: 30: }
  6164  1D97  0008               	return
  6165  1D98                     l6994:	
  6166                           
  6167                           ;Switch_B1.c: 33: else if (sw == 2) {
  6168  1D98  0821               	movf	SwPointSelect@sw,w
  6169  1D99  3A02               	xorlw	2
  6170  1D9A  1D03               	skipz
  6171  1D9B  0008               	return
  6172                           
  6173                           ;Switch_B1.c: 34: Sw = &Sw2;
  6174  1D9C  30E5               	movlw	_Sw2& (0+255)
  6175  1D9D  00A0               	movwf	??_SwPointSelect
  6176  1D9E  0820               	movf	??_SwPointSelect,w
  6177  1D9F  00FC               	movwf	_Sw
  6178  1DA0  0008               	return
  6179  1DA1                     __end_of_SwPointSelect:	
  6180                           
  6181                           	psect	text18
  6182  0814                     __ptext18:	
  6183 ;; *************** function _setMain_Exception *****************
  6184 ;; Defined at:
  6185 ;;		line 278 in file "../src/main_B1.c"
  6186 ;; Parameters:    Size  Location     Type
  6187 ;;  command         1    wreg     unsigned char 
  6188 ;; Auto vars:     Size  Location     Type
  6189 ;;  command         1   28[BANK0 ] unsigned char 
  6190 ;;  status          1   27[BANK0 ] unsigned char 
  6191 ;;  buz             1   24[BANK0 ] unsigned char 
  6192 ;; Return value:  Size  Location     Type
  6193 ;;		None               void
  6194 ;; Registers used:
  6195 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6196 ;; Tracked objects:
  6197 ;;		On entry : 0/0
  6198 ;;		On exit  : 0/0
  6199 ;;		Unchanged: 0/0
  6200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6202 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6203 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6204 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6205 ;;Total ram usage:        7 bytes
  6206 ;; Hardware stack levels used:    1
  6207 ;; Hardware stack levels required when called:   10
  6208 ;; This function calls:
  6209 ;;		_getDimmerLights_Line
  6210 ;;		_getMain_LightsStatus
  6211 ;;		_setBuz
  6212 ;;		_setDimmerLights_ErrorClose
  6213 ;;		_setLED
  6214 ;; This function is called by:
  6215 ;;		_Switch_Main
  6216 ;; This function uses a non-reentrant model
  6217 ;;
  6218                           
  6219                           
  6220                           ;psect for function _setMain_Exception
  6221  0814                     _setMain_Exception:	
  6222                           
  6223                           ;incstack = 0
  6224                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6225                           ;setMain_Exception@command stored from wreg
  6226  0814  0020               	movlb	0	; select bank0
  6227  0815  00BC               	movwf	setMain_Exception@command
  6228                           
  6229                           ;main_B1.c: 279: char status = 0, buz = 0;
  6230  0816  01BB               	clrf	setMain_Exception@status
  6231  0817  01B8               	clrf	setMain_Exception@buz
  6232                           
  6233                           ;main_B1.c: 296: status = command == 3 ? getDimmerLights_Line() : 255;
  6234  0818  083C               	movf	setMain_Exception@command,w
  6235  0819  3A03               	xorlw	3
  6236  081A  1903               	skipnz
  6237  081B  2820               	goto	l7568
  6238  081C  30FF               	movlw	255
  6239  081D  00B9               	movwf	_setMain_Exception$7065
  6240  081E  3000               	movlw	0
  6241  081F  2829               	goto	L4
  6242  0820                     l7568:	
  6243  0820  319D  253E  3188   	fcall	_getDimmerLights_Line
  6244  0823  0020               	movlb	0	; select bank0
  6245  0824  00B6               	movwf	??_setMain_Exception
  6246  0825  01B7               	clrf	??_setMain_Exception+1
  6247  0826  0836               	movf	??_setMain_Exception,w
  6248  0827  00B9               	movwf	_setMain_Exception$7065
  6249  0828  0837               	movf	??_setMain_Exception+1,w
  6250  0829                     L4:	
  6251  0829  00BA               	movwf	_setMain_Exception$7065+1
  6252  082A  0839               	movf	_setMain_Exception$7065,w
  6253  082B  00B6               	movwf	??_setMain_Exception
  6254  082C  0836               	movf	??_setMain_Exception,w
  6255  082D  00BB               	movwf	setMain_Exception@status
  6256                           
  6257                           ;main_B1.c: 298: if (command == 0) {
  6258  082E  08BC               	movf	setMain_Exception@command,f
  6259  082F  1D03               	skipz
  6260  0830  2833               	goto	l7576
  6261                           
  6262                           ;main_B1.c: 299: setLED(99, 10);
  6263  0831  300A               	movlw	10
  6264  0832  2835               	goto	L5
  6265  0833                     l7576:	
  6266                           ;main_B1.c: 300: } else {
  6267                           
  6268                           
  6269                           ;main_B1.c: 301: setLED(99, 11);
  6270  0833  300B               	movlw	11
  6271  0834  0020               	movlb	0	; select bank0
  6272  0835                     L5:	
  6273  0835  00B6               	movwf	??_setMain_Exception
  6274  0836  0836               	movf	??_setMain_Exception,w
  6275  0837  00A2               	movwf	setLED@command
  6276  0838  3063               	movlw	99
  6277  0839  3195  259C  3188   	fcall	_setLED
  6278                           
  6279                           ;main_B1.c: 302: }
  6280                           ;main_B1.c: 304: if (command != 0) {
  6281  083C  0020               	movlb	0	; select bank0
  6282  083D  083C               	movf	setMain_Exception@command,w
  6283  083E  1903               	btfsc	3,2
  6284  083F  0008               	return
  6285                           
  6286                           ;main_B1.c: 305: switch (command) {
  6287  0840  2861               	goto	l7592
  6288  0841                     l7582:	
  6289                           ;main_B1.c: 306: case 2:
  6290                           
  6291                           
  6292                           ;main_B1.c: 307: if (getMain_LightsStatus() == 1) {
  6293  0841  3191  2162  3188   	fcall	_getMain_LightsStatus
  6294  0844  3A01               	xorlw	1
  6295  0845  1D03               	skipz
  6296  0846  286A               	goto	l7594
  6297                           
  6298                           ;main_B1.c: 308: setBuz(10, 300);
  6299  0847  302C               	movlw	44
  6300  0848  0020               	movlb	0	; select bank0
  6301  0849  00A9               	movwf	setBuz@time
  6302  084A  3001               	movlw	1
  6303  084B  00AA               	movwf	setBuz@time+1
  6304  084C  300A               	movlw	10
  6305  084D  3196  2698  3188   	fcall	_setBuz
  6306                           
  6307                           ;main_B1.c: 309: }
  6308                           ;main_B1.c: 310: break;
  6309  0850  286A               	goto	l7594
  6310  0851                     l7586:	
  6311                           ;main_B1.c: 311: case 3:
  6312                           
  6313                           
  6314                           ;main_B1.c: 312: if (getMain_LightsStatus() == 1) {
  6315  0851  3191  2162  3188   	fcall	_getMain_LightsStatus
  6316  0854  3A01               	xorlw	1
  6317  0855  1D03               	skipz
  6318  0856  286A               	goto	l7594
  6319                           
  6320                           ;main_B1.c: 313: setBuz(5, 300);
  6321  0857  302C               	movlw	44
  6322  0858  0020               	movlb	0	; select bank0
  6323  0859  00A9               	movwf	setBuz@time
  6324  085A  3001               	movlw	1
  6325  085B  00AA               	movwf	setBuz@time+1
  6326  085C  3005               	movlw	5
  6327  085D  3196  2698  3188   	fcall	_setBuz
  6328                           
  6329                           ;main_B1.c: 316: }
  6330                           
  6331                           ;main_B1.c: 314: }
  6332                           ;main_B1.c: 315: break;
  6333  0860  286A               	goto	l7594
  6334  0861                     l7592:	
  6335  0861  0020               	movlb	0	; select bank0
  6336  0862  083C               	movf	setMain_Exception@command,w
  6337                           
  6338                           ; Switch size 1, requested type "space"
  6339                           ; Number of cases is 2, Range of values is 2 to 3
  6340                           ; switch strategies available:
  6341                           ; Name         Instructions Cycles
  6342                           ; simple_byte            7     4 (average)
  6343                           ; direct_byte           13     9 (fixed)
  6344                           ; jumptable            263     9 (fixed)
  6345                           ;	Chosen strategy is simple_byte
  6346  0863  3A02               	xorlw	2	; case 2
  6347  0864  1903               	skipnz
  6348  0865  2841               	goto	l7582
  6349  0866  3A01               	xorlw	1	; case 3
  6350  0867  1903               	skipnz
  6351  0868  2851               	goto	l7586
  6352  0869  286A               	goto	l7594
  6353  086A                     l7594:	
  6354                           
  6355                           ;main_B1.c: 317: setDimmerLights_ErrorClose(status);
  6356  086A  0020               	movlb	0	; select bank0
  6357  086B  083B               	movf	setMain_Exception@status,w
  6358  086C  3197  274A         	fcall	_setDimmerLights_ErrorClose
  6359  086E  0020               	movlb	0	; select bank0
  6360  086F  0008               	return
  6361  0870                     __end_of_setMain_Exception:	
  6362                           
  6363                           	psect	text19
  6364  1D3E                     __ptext19:	
  6365 ;; *************** function _getDimmerLights_Line *****************
  6366 ;; Defined at:
  6367 ;;		line 707 in file "../src/Dimmer_B1.c"
  6368 ;; Parameters:    Size  Location     Type
  6369 ;;		None
  6370 ;; Auto vars:     Size  Location     Type
  6371 ;;  line            1    1[BANK0 ] unsigned char 
  6372 ;; Return value:  Size  Location     Type
  6373 ;;                  1    wreg      unsigned char 
  6374 ;; Registers used:
  6375 ;;		wreg, status,2
  6376 ;; Tracked objects:
  6377 ;;		On entry : 0/0
  6378 ;;		On exit  : 0/0
  6379 ;;		Unchanged: 0/0
  6380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6382 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6383 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6384 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6385 ;;Total ram usage:        2 bytes
  6386 ;; Hardware stack levels used:    1
  6387 ;; Hardware stack levels required when called:    5
  6388 ;; This function calls:
  6389 ;;		Nothing
  6390 ;; This function is called by:
  6391 ;;		_setMain_Exception
  6392 ;; This function uses a non-reentrant model
  6393 ;;
  6394                           
  6395                           
  6396                           ;psect for function _getDimmerLights_Line
  6397  1D3E                     _getDimmerLights_Line:	
  6398                           
  6399                           ;Dimmer_B1.c: 708: char line = 0;
  6400                           
  6401                           ;incstack = 0
  6402                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6403  1D3E  0020               	movlb	0	; select bank0
  6404  1D3F  01A1               	clrf	getDimmerLights_Line@line
  6405                           
  6406                           ;Dimmer_B1.c: 710: if (DimmerLights1.Line == 1) {
  6407  1D40  0023               	movlb	3	; select bank3
  6408  1D41  1C47               	btfss	(_DimmerLights1^(0+384)+9),0
  6409  1D42  2D47               	goto	l866
  6410                           
  6411                           ;Dimmer_B1.c: 711: line = 1;
  6412  1D43  0020               	movlb	0	; select bank0
  6413  1D44  01A1               	clrf	getDimmerLights_Line@line
  6414  1D45  0AA1               	incf	getDimmerLights_Line@line,f
  6415                           
  6416                           ;Dimmer_B1.c: 712: }
  6417  1D46  2D4E               	goto	l867
  6418  1D47                     l866:	
  6419                           
  6420                           ;Dimmer_B1.c: 715: else if (DimmerLights2.Line == 1) {
  6421  1D47  1C56               	btfss	(_DimmerLights2^(0+384)+9),0
  6422  1D48  2D4E               	goto	l867
  6423                           
  6424                           ;Dimmer_B1.c: 716: line = 2;
  6425  1D49  3002               	movlw	2
  6426  1D4A  0020               	movlb	0	; select bank0
  6427  1D4B  00A0               	movwf	??_getDimmerLights_Line
  6428  1D4C  0820               	movf	??_getDimmerLights_Line,w
  6429  1D4D  00A1               	movwf	getDimmerLights_Line@line
  6430  1D4E                     l867:	
  6431                           
  6432                           ;Dimmer_B1.c: 717: }
  6433                           ;Dimmer_B1.c: 724: return line;
  6434  1D4E  0020               	movlb	0	; select bank0
  6435  1D4F  0821               	movf	getDimmerLights_Line@line,w
  6436  1D50  0008               	return
  6437  1D51                     __end_of_getDimmerLights_Line:	
  6438                           
  6439                           	psect	text20
  6440  1C2E                     __ptext20:	
  6441 ;; *************** function _Switch_Initialization *****************
  6442 ;; Defined at:
  6443 ;;		line 46 in file "../src/Switch_B1.c"
  6444 ;; Parameters:    Size  Location     Type
  6445 ;;		None
  6446 ;; Auto vars:     Size  Location     Type
  6447 ;;		None
  6448 ;; Return value:  Size  Location     Type
  6449 ;;		None               void
  6450 ;; Registers used:
  6451 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6452 ;; Tracked objects:
  6453 ;;		On entry : 0/0
  6454 ;;		On exit  : 0/0
  6455 ;;		Unchanged: 0/0
  6456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6461 ;;Total ram usage:        0 bytes
  6462 ;; Hardware stack levels used:    1
  6463 ;; Hardware stack levels required when called:    8
  6464 ;; This function calls:
  6465 ;;		_TouchPower
  6466 ;;		_setSw_Initialization
  6467 ;; This function is called by:
  6468 ;;		_main
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           
  6473                           ;psect for function _Switch_Initialization
  6474  1C2E                     _Switch_Initialization:	
  6475                           
  6476                           ;Switch_B1.c: 47: TouchPower();
  6477                           
  6478                           ;incstack = 0
  6479                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6480  1C2E  319D  25E0  319C   	fcall	_TouchPower
  6481                           
  6482                           ;Switch_B1.c: 49: WPUB1 = 0;
  6483  1C31  0024               	movlb	4	; select bank4
  6484  1C32  108D               	bcf	13,1	;volatile
  6485                           
  6486                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6487  1C33  3001               	movlw	1
  6488  1C34  319B  23AA  319C   	fcall	_setSw_Initialization
  6489                           
  6490                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6491  1C37  3002               	movlw	2
  6492  1C38  319B  23AA         	fcall	_setSw_Initialization
  6493  1C3A  0008               	return
  6494  1C3B                     __end_of_Switch_Initialization:	
  6495                           
  6496                           	psect	text21
  6497  1BAA                     __ptext21:	
  6498 ;; *************** function _setSw_Initialization *****************
  6499 ;; Defined at:
  6500 ;;		line 109 in file "../src/Switch_B1.c"
  6501 ;; Parameters:    Size  Location     Type
  6502 ;;  sw              1    wreg     unsigned char 
  6503 ;; Auto vars:     Size  Location     Type
  6504 ;;  sw              1    4[BANK0 ] unsigned char 
  6505 ;; Return value:  Size  Location     Type
  6506 ;;		None               void
  6507 ;; Registers used:
  6508 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6509 ;; Tracked objects:
  6510 ;;		On entry : 0/0
  6511 ;;		On exit  : 0/0
  6512 ;;		Unchanged: 0/0
  6513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6515 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6517 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6518 ;;Total ram usage:        1 bytes
  6519 ;; Hardware stack levels used:    1
  6520 ;; Hardware stack levels required when called:    7
  6521 ;; This function calls:
  6522 ;;		_setLED
  6523 ;; This function is called by:
  6524 ;;		_Switch_Initialization
  6525 ;; This function uses a non-reentrant model
  6526 ;;
  6527                           
  6528                           
  6529                           ;psect for function _setSw_Initialization
  6530  1BAA                     _setSw_Initialization:	
  6531                           
  6532                           ;incstack = 0
  6533                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6534                           ;setSw_Initialization@sw stored from wreg
  6535  1BAA  0020               	movlb	0	; select bank0
  6536  1BAB  00A4               	movwf	setSw_Initialization@sw
  6537                           
  6538                           ;Switch_B1.c: 110: setLED(sw, 1);
  6539  1BAC  01A2               	clrf	setLED@command
  6540  1BAD  0AA2               	incf	setLED@command,f
  6541  1BAE  0824               	movf	setSw_Initialization@sw,w
  6542  1BAF  3195  259C         	fcall	_setLED
  6543  1BB1  0008               	return
  6544  1BB2                     __end_of_setSw_Initialization:	
  6545                           
  6546                           	psect	text22
  6547  1DE0                     __ptext22:	
  6548 ;; *************** function _TouchPower *****************
  6549 ;; Defined at:
  6550 ;;		line 10 in file "../src/Switch_B1.c"
  6551 ;; Parameters:    Size  Location     Type
  6552 ;;		None
  6553 ;; Auto vars:     Size  Location     Type
  6554 ;;		None
  6555 ;; Return value:  Size  Location     Type
  6556 ;;		None               void
  6557 ;; Registers used:
  6558 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6559 ;; Tracked objects:
  6560 ;;		On entry : 0/0
  6561 ;;		On exit  : 0/0
  6562 ;;		Unchanged: 0/0
  6563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6568 ;;Total ram usage:        0 bytes
  6569 ;; Hardware stack levels used:    1
  6570 ;; Hardware stack levels required when called:    6
  6571 ;; This function calls:
  6572 ;;		_Timeout_Counter
  6573 ;;		_set_TimeoutCleared
  6574 ;; This function is called by:
  6575 ;;		_Switch_Initialization
  6576 ;;		_Switch_Main
  6577 ;; This function uses a non-reentrant model
  6578 ;;
  6579                           
  6580                           
  6581                           ;psect for function _TouchPower
  6582  1DE0                     _TouchPower:	
  6583                           
  6584                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6585                           
  6586                           ;incstack = 0
  6587                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6588  1DE0  0020               	movlb	0	; select bank0
  6589  1DE1  1A8E               	btfsc	14,5	;volatile
  6590  1DE2  0008               	return
  6591                           
  6592                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6593  1DE3  0021               	movlb	1	; select bank1
  6594  1DE4  1C20               	btfss	_myMain^(0+128),0
  6595  1DE5  0008               	return
  6596  1DE6  2DEC               	goto	l7554
  6597  1DE7                     l2369:	
  6598                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6599                           
  6600                           
  6601                           ;Switch_B1.c: 14: RC5 = 1;
  6602  1DE7  0020               	movlb	0	; select bank0
  6603  1DE8  168E               	bsf	14,5	;volatile
  6604                           
  6605                           ;Switch_B1.c: 15: Timeout_Counter();
  6606  1DE9  319D  25A1  319D   	fcall	_Timeout_Counter
  6607  1DEC                     l7554:	
  6608  1DEC  0020               	movlb	0	; select bank0
  6609  1DED  1A8E               	btfsc	14,5	;volatile
  6610  1DEE  2DF2               	goto	l7558
  6611  1DEF  0021               	movlb	1	; select bank1
  6612  1DF0  1D2D               	btfss	(_myMain^(0+128)+13),2
  6613  1DF1  2DE7               	goto	l2369
  6614  1DF2                     l7558:	
  6615                           
  6616                           ;Switch_B1.c: 16: }
  6617                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6618  1DF2  319B  235F         	fcall	_set_TimeoutCleared
  6619  1DF4  0008               	return
  6620  1DF5                     __end_of_TouchPower:	
  6621                           
  6622                           	psect	text23
  6623  1B4A                     __ptext23:	
  6624 ;; *************** function _RF_Main *****************
  6625 ;; Defined at:
  6626 ;;		line 16 in file "../src/RF_Control_B1.c"
  6627 ;; Parameters:    Size  Location     Type
  6628 ;;		None
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;		None
  6631 ;; Return value:  Size  Location     Type
  6632 ;;		None               void
  6633 ;; Registers used:
  6634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6635 ;; Tracked objects:
  6636 ;;		On entry : 0/0
  6637 ;;		On exit  : 0/0
  6638 ;;		Unchanged: 0/0
  6639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6644 ;;Total ram usage:        0 bytes
  6645 ;; Hardware stack levels used:    1
  6646 ;; Hardware stack levels required when called:   14
  6647 ;; This function calls:
  6648 ;;		_setRF_Main
  6649 ;; This function is called by:
  6650 ;;		_main
  6651 ;; This function uses a non-reentrant model
  6652 ;;
  6653                           
  6654                           
  6655                           ;psect for function _RF_Main
  6656  1B4A                     _RF_Main:	
  6657                           
  6658                           ;RF_Control_B1.c: 18: setRF_Main();
  6659                           
  6660                           ;incstack = 0
  6661                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6662  1B4A  3185  2530         	fcall	_setRF_Main
  6663  1B4C  0008               	return
  6664  1B4D                     __end_of_RF_Main:	
  6665                           
  6666                           	psect	text24
  6667  0530                     __ptext24:	
  6668 ;; *************** function _setRF_Main *****************
  6669 ;; Defined at:
  6670 ;;		line 52 in file "../src/RF_Control_B1.c"
  6671 ;; Parameters:    Size  Location     Type
  6672 ;;		None
  6673 ;; Auto vars:     Size  Location     Type
  6674 ;;  error           1    2[BANK1 ] unsigned char 
  6675 ;;  Receive_OK      1    1[BANK1 ] unsigned char 
  6676 ;;  loop_f          1    0[BANK1 ] unsigned char 
  6677 ;; Return value:  Size  Location     Type
  6678 ;;		None               void
  6679 ;; Registers used:
  6680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6681 ;; Tracked objects:
  6682 ;;		On entry : 0/0
  6683 ;;		On exit  : 0/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6687 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6688 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6689 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;Total ram usage:        4 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; Hardware stack levels required when called:   13
  6693 ;; This function calls:
  6694 ;;		_CC2500_ReadStatus
  6695 ;;		_CC2500_RxData
  6696 ;;		_CC2500_TxData
  6697 ;;		_CC2500_WriteCommand
  6698 ;;		_getBuz_GO
  6699 ;;		_getMain_All_Error_Status
  6700 ;;		_getRF_KeyStatus
  6701 ;;		_getRxData
  6702 ;; This function is called by:
  6703 ;;		_RF_Main
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           
  6708                           ;psect for function _setRF_Main
  6709  0530                     _setRF_Main:	
  6710                           
  6711                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6712                           
  6713                           ;incstack = 0
  6714                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6715  0530  0021               	movlb	1	; select bank1
  6716  0531  01E9               	clrf	setRF_Main@loop_f^(0+128)
  6717  0532  01EA               	clrf	setRF_Main@Receive_OK^(0+128)
  6718  0533  01EB               	clrf	setRF_Main@error^(0+128)
  6719                           
  6720                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6721  0534  1C3C               	btfss	_RF1^(0+128),0
  6722  0535  2E1C               	goto	l1970
  6723                           
  6724                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6725  0536  319C  249B  3185   	fcall	_getBuz_GO
  6726  0539  0020               	movlb	0	; select bank0
  6727  053A  0821               	movf	?_getBuz_GO+1,w
  6728  053B  0420               	iorwf	?_getBuz_GO,w
  6729  053C  1D03               	skipz
  6730  053D  0008               	return
  6731                           
  6732                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6733  053E  3000               	movlw	0
  6734  053F  3191  21EF  3185   	fcall	_getMain_All_Error_Status
  6735  0542  3800               	iorlw	0
  6736  0543  1D03               	skipz
  6737  0544  2D59               	goto	l1972
  6738                           
  6739                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6740  0545  319C  24AC  3185   	fcall	_getRF_KeyStatus
  6741  0548  3A01               	xorlw	1
  6742  0549  3000               	movlw	0
  6743  054A  1903               	skipnz
  6744  054B  3001               	movlw	1
  6745  054C  0020               	movlb	0	; select bank0
  6746  054D  00ED               	movwf	??_setRF_Main
  6747  054E  0CED               	rrf	??_setRF_Main,f
  6748  054F  0CED               	rrf	??_setRF_Main,f
  6749  0550  0021               	movlb	1	; select bank1
  6750  0551  083C               	movf	_RF1^(0+128),w
  6751  0552  0020               	movlb	0	; select bank0
  6752  0553  066D               	xorwf	??_setRF_Main,w
  6753  0554  397F               	andlw	-129
  6754  0555  066D               	xorwf	??_setRF_Main,w
  6755  0556  0021               	movlb	1	; select bank1
  6756  0557  00BC               	movwf	_RF1^(0+128)
  6757                           
  6758                           ;RF_Control_B1.c: 65: } else {
  6759  0558  2D5B               	goto	l1973
  6760  0559                     l1972:	
  6761                           
  6762                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6763  0559  0021               	movlb	1	; select bank1
  6764  055A  13BC               	bcf	_RF1^(0+128),7
  6765  055B                     l1973:	
  6766                           
  6767                           ;RF_Control_B1.c: 70: }
  6768                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  6769  055B  1BBC               	btfsc	_RF1^(0+128),7
  6770  055C  1B3C               	btfsc	_RF1^(0+128),6
  6771  055D  2D63               	goto	l1974
  6772                           
  6773                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  6774  055E  01BE               	clrf	(_RF1^(0+128)+2)
  6775  055F  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6776                           
  6777                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  6778  0560  14BD               	bsf	(_RF1^(0+128)+1),1
  6779                           
  6780                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  6781  0561  11BC               	bcf	_RF1^(0+128),3
  6782                           
  6783                           ;RF_Control_B1.c: 76: } else {
  6784  0562  0008               	return
  6785  0563                     l1974:	
  6786                           
  6787                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6788  0563  18BD               	btfsc	(_RF1^(0+128)+1),1
  6789  0564  1B3C               	btfsc	_RF1^(0+128),6
  6790  0565  2D7A               	goto	l7470
  6791                           
  6792                           ;RF_Control_B1.c: 78: RF1.Count++;
  6793  0566  3001               	movlw	1
  6794  0567  07BE               	addwf	(_RF1^(0+128)+2),f
  6795  0568  3000               	movlw	0
  6796  0569  3DBF               	addwfc	((_RF1+1)^(0+128)+2),f
  6797                           
  6798                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6799  056A  3002               	movlw	2
  6800  056B  3EBC               	addlw	_RF1& (0+255)
  6801  056C  0086               	movwf	6
  6802  056D  0187               	clrf	7
  6803  056E  3F40               	moviw [0]fsr1
  6804  056F  0643               	xorwf	(_RF1^(0+128)+7),w
  6805  0570  1D03               	skipz
  6806  0571  2D74               	goto	u7075
  6807  0572  3F41               	moviw [1]fsr1
  6808  0573  0644               	xorwf	((_RF1+1)^(0+128)+7),w
  6809  0574                     u7075:	
  6810  0574  1D03               	skipz
  6811  0575  2DE9               	goto	l7522
  6812                           
  6813                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6814  0576  01BE               	clrf	(_RF1^(0+128)+2)
  6815  0577  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6816                           
  6817                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6818  0578  10BD               	bcf	(_RF1^(0+128)+1),1
  6819                           
  6820                           ;RF_Control_B1.c: 82: }
  6821                           ;RF_Control_B1.c: 83: } else {
  6822  0579  2DE9               	goto	l7522
  6823  057A                     l7470:	
  6824                           
  6825                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6826  057A  01BE               	clrf	(_RF1^(0+128)+2)
  6827  057B  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6828                           
  6829                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6830  057C  10BD               	bcf	(_RF1^(0+128)+1),1
  6831                           
  6832                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6833  057D  193C               	btfsc	_RF1^(0+128),2
  6834  057E  1B3C               	btfsc	_RF1^(0+128),6
  6835  057F  2D9B               	goto	l1979
  6836                           
  6837                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6838  0580  113C               	bcf	_RF1^(0+128),2
  6839                           
  6840                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6841  0581  11BC               	bcf	_RF1^(0+128),3
  6842                           
  6843                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6844  0582  10BC               	bcf	_RF1^(0+128),1
  6845                           
  6846                           ;RF_Control_B1.c: 92: CC2500_ReadStatus(0x3B);
  6847  0583  303B               	movlw	59
  6848  0584  319F  27BB  3185   	fcall	_CC2500_ReadStatus
  6849                           
  6850                           ;RF_Control_B1.c: 93: if (s_data != 0) {
  6851  0587  0021               	movlb	1	; select bank1
  6852  0588  0856               	movf	_s_data^(0+128),w
  6853  0589  1903               	btfsc	3,2
  6854  058A  2D97               	goto	l1980
  6855                           
  6856                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  6857  058B  3036               	movlw	54
  6858  058C  319E  2639  3185   	fcall	_CC2500_WriteCommand
  6859                           
  6860                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x3B);
  6861  058F  303B               	movlw	59
  6862  0590  319E  2639  3185   	fcall	_CC2500_WriteCommand
  6863                           
  6864                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x3A);
  6865  0593  303A               	movlw	58
  6866  0594  319E  2639  3185   	fcall	_CC2500_WriteCommand
  6867  0597                     l1980:	
  6868                           
  6869                           ;RF_Control_B1.c: 97: }
  6870                           ;RF_Control_B1.c: 98: CC2500_TxData();
  6871  0597  3189  21F0  3185   	fcall	_CC2500_TxData
  6872                           
  6873                           ;RF_Control_B1.c: 100: } else {
  6874  059A  2DE9               	goto	l7522
  6875  059B                     l1979:	
  6876                           
  6877                           ;RF_Control_B1.c: 102: if (RF1.RxStatus == 1) {
  6878  059B  1DBC               	btfss	_RF1^(0+128),3
  6879  059C  2DD4               	goto	l1982
  6880                           
  6881                           ;RF_Control_B1.c: 104: CC2500_RxData();
  6882  059D  318B  2388  3185   	fcall	_CC2500_RxData
  6883                           
  6884                           ;RF_Control_B1.c: 105: if (RF1.ReceiveGO == 1) {
  6885  05A0  0021               	movlb	1	; select bank1
  6886  05A1  1CBC               	btfss	_RF1^(0+128),1
  6887  05A2  2DE9               	goto	l7522
  6888                           
  6889                           ;RF_Control_B1.c: 106: RF1.ReceiveGO = 0;
  6890  05A3  10BC               	bcf	_RF1^(0+128),1
  6891                           
  6892                           ;RF_Control_B1.c: 107: RF1.Correction = 0;
  6893  05A4  12BD               	bcf	(_RF1^(0+128)+1),5
  6894                           
  6895                           ;RF_Control_B1.c: 108: RF1.CorrectionCounter = 0;
  6896  05A5  01C6               	clrf	(_RF1^(0+128)+10)
  6897  05A6  01C7               	clrf	((_RF1+1)^(0+128)+10)
  6898                           
  6899                           ;RF_Control_B1.c: 117: getRxData();
  6900  05A7  318B  23F9  3185   	fcall	_getRxData
  6901                           
  6902                           ;RF_Control_B1.c: 120: RF1.Run = 1;
  6903  05AA  0021               	movlb	1	; select bank1
  6904  05AB  14BD               	bsf	(_RF1^(0+128)+1),1
  6905                           
  6906                           ;RF_Control_B1.c: 122: if (RF1.Checked == 1) {
  6907  05AC  1DBD               	btfss	(_RF1^(0+128)+1),3
  6908  05AD  2DBB               	goto	l7506
  6909                           
  6910                           ;RF_Control_B1.c: 123: if (RF1.RunTime > 10) {
  6911  05AE  3000               	movlw	0
  6912  05AF  0244               	subwf	((_RF1+1)^(0+128)+7),w
  6913  05B0  300B               	movlw	11
  6914  05B1  1903               	skipnz
  6915  05B2  0243               	subwf	(_RF1^(0+128)+7),w
  6916  05B3  1C03               	skipc
  6917  05B4  2DB9               	goto	l7504
  6918                           
  6919                           ;RF_Control_B1.c: 124: RF1.RunTime = 10;
  6920  05B5  300A               	movlw	10
  6921  05B6  00C3               	movwf	(_RF1^(0+128)+7)
  6922  05B7  3000               	movlw	0
  6923  05B8  00C4               	movwf	(_RF1^(0+128)+8)
  6924  05B9                     l7504:	
  6925                           
  6926                           ;RF_Control_B1.c: 125: }
  6927                           ;RF_Control_B1.c: 126: RF1.CheckCount = 0;
  6928  05B9  01C0               	clrf	(_RF1^(0+128)+4)
  6929                           
  6930                           ;RF_Control_B1.c: 127: } else {
  6931  05BA  2DE9               	goto	l7522
  6932  05BB                     l7506:	
  6933                           
  6934                           ;RF_Control_B1.c: 128: RF1.CheckCount++;
  6935  05BB  3001               	movlw	1
  6936  05BC  0020               	movlb	0	; select bank0
  6937  05BD  00ED               	movwf	??_setRF_Main
  6938  05BE  086D               	movf	??_setRF_Main,w
  6939  05BF  0021               	movlb	1	; select bank1
  6940  05C0  07C0               	addwf	(_RF1^(0+128)+4),f
  6941                           
  6942                           ;RF_Control_B1.c: 129: if (RF1.CheckCount == 2) {
  6943  05C1  0840               	movf	(_RF1^(0+128)+4),w
  6944  05C2  3A02               	xorlw	2
  6945  05C3  1D03               	skipz
  6946  05C4  2DE9               	goto	l7522
  6947                           
  6948                           ;RF_Control_B1.c: 130: RF1.CheckCount = 0;
  6949  05C5  01C0               	clrf	(_RF1^(0+128)+4)
  6950                           
  6951                           ;RF_Control_B1.c: 131: RF1.CheckedCounter = 0;
  6952  05C6  01C1               	clrf	(_RF1^(0+128)+5)
  6953  05C7  01C2               	clrf	((_RF1+1)^(0+128)+5)
  6954                           
  6955                           ;RF_Control_B1.c: 132: if (RF1.RunTime < 200) {
  6956  05C8  3000               	movlw	0
  6957  05C9  0244               	subwf	((_RF1+1)^(0+128)+7),w
  6958  05CA  30C8               	movlw	200
  6959  05CB  1903               	skipnz
  6960  05CC  0243               	subwf	(_RF1^(0+128)+7),w
  6961  05CD  1803               	skipnc
  6962  05CE  2DE9               	goto	l7522
  6963                           
  6964                           ;RF_Control_B1.c: 133: RF1.RunTime += 10;
  6965  05CF  300A               	movlw	10
  6966  05D0  07C3               	addwf	(_RF1^(0+128)+7),f
  6967  05D1  3000               	movlw	0
  6968  05D2  3DC4               	addwfc	((_RF1+1)^(0+128)+7),f
  6969                           
  6970                           ;RF_Control_B1.c: 134: }
  6971                           ;RF_Control_B1.c: 135: }
  6972                           ;RF_Control_B1.c: 136: }
  6973                           ;RF_Control_B1.c: 137: }
  6974                           ;RF_Control_B1.c: 138: } else {
  6975  05D3  2DE9               	goto	l7522
  6976  05D4                     l1982:	
  6977                           
  6978                           ;RF_Control_B1.c: 140: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6979  05D4  1DBC               	btfss	_RF1^(0+128),3
  6980  05D5  18BC               	btfsc	_RF1^(0+128),1
  6981  05D6  2DE9               	goto	l7522
  6982                           
  6983                           ;RF_Control_B1.c: 141: RF1.RxStatus = 1;
  6984  05D7  15BC               	bsf	_RF1^(0+128),3
  6985                           
  6986                           ;RF_Control_B1.c: 142: RF1.Correction = 1;
  6987  05D8  16BD               	bsf	(_RF1^(0+128)+1),5
  6988                           
  6989                           ;RF_Control_B1.c: 144: CC2500_WriteCommand(0x36);
  6990  05D9  3036               	movlw	54
  6991  05DA  319E  2639  3185   	fcall	_CC2500_WriteCommand
  6992                           
  6993                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x3B);
  6994  05DD  303B               	movlw	59
  6995  05DE  319E  2639  3185   	fcall	_CC2500_WriteCommand
  6996                           
  6997                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x3A);
  6998  05E1  303A               	movlw	58
  6999  05E2  319E  2639  3185   	fcall	_CC2500_WriteCommand
  7000                           
  7001                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x34);
  7002  05E5  3034               	movlw	52
  7003  05E6  319E  2639  3185   	fcall	_CC2500_WriteCommand
  7004  05E9                     l7522:	
  7005                           
  7006                           ;RF_Control_B1.c: 148: }
  7007                           ;RF_Control_B1.c: 150: }
  7008                           ;RF_Control_B1.c: 151: }
  7009                           ;RF_Control_B1.c: 152: }
  7010                           ;RF_Control_B1.c: 153: if (RF1.RxStatus == 1) {
  7011  05E9  0021               	movlb	1	; select bank1
  7012  05EA  1DBC               	btfss	_RF1^(0+128),3
  7013  05EB  2E0A               	goto	l7534
  7014                           
  7015                           ;RF_Control_B1.c: 154: RF1.CheckedCounter++;
  7016  05EC  3001               	movlw	1
  7017  05ED  07C1               	addwf	(_RF1^(0+128)+5),f
  7018  05EE  3000               	movlw	0
  7019  05EF  3DC2               	addwfc	((_RF1+1)^(0+128)+5),f
  7020                           
  7021                           ;RF_Control_B1.c: 155: if (RF1.CheckedCounter == 100) {
  7022  05F0  3005               	movlw	5
  7023  05F1  3EBC               	addlw	_RF1& (0+255)
  7024  05F2  0086               	movwf	6
  7025  05F3  0187               	clrf	7
  7026  05F4  3F40               	moviw [0]fsr1
  7027  05F5  3A64               	xorlw	100
  7028  05F6  1D03               	skipz
  7029  05F7  2DFA               	goto	u7205
  7030  05F8  3F41               	moviw [1]fsr1
  7031  05F9  3A00               	xorlw	0
  7032  05FA                     u7205:	
  7033  05FA  1D03               	skipz
  7034  05FB  2E0A               	goto	l7534
  7035                           
  7036                           ;RF_Control_B1.c: 156: RF1.CheckedCounter = 0;
  7037  05FC  01C1               	clrf	(_RF1^(0+128)+5)
  7038  05FD  01C2               	clrf	((_RF1+1)^(0+128)+5)
  7039                           
  7040                           ;RF_Control_B1.c: 157: RF1.CheckCount = 0;
  7041  05FE  01C0               	clrf	(_RF1^(0+128)+4)
  7042                           
  7043                           ;RF_Control_B1.c: 158: if (RF1.RunTime > 10) {
  7044  05FF  3000               	movlw	0
  7045  0600  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7046  0601  300B               	movlw	11
  7047  0602  1903               	skipnz
  7048  0603  0243               	subwf	(_RF1^(0+128)+7),w
  7049  0604  1C03               	skipc
  7050  0605  2E0A               	goto	l7534
  7051                           
  7052                           ;RF_Control_B1.c: 159: RF1.RunTime -= 10;
  7053  0606  300A               	movlw	10
  7054  0607  02C3               	subwf	(_RF1^(0+128)+7),f
  7055  0608  3000               	movlw	0
  7056  0609  3BC4               	subwfb	((_RF1+1)^(0+128)+7),f
  7057  060A                     l7534:	
  7058                           
  7059                           ;RF_Control_B1.c: 160: }
  7060                           ;RF_Control_B1.c: 161: }
  7061                           ;RF_Control_B1.c: 162: }
  7062                           ;RF_Control_B1.c: 163: if (RF1.Correction == 1) {
  7063  060A  1EBD               	btfss	(_RF1^(0+128)+1),5
  7064  060B  0008               	return
  7065                           
  7066                           ;RF_Control_B1.c: 164: RF1.CorrectionCounter++;
  7067  060C  3001               	movlw	1
  7068  060D  07C6               	addwf	(_RF1^(0+128)+10),f
  7069  060E  3000               	movlw	0
  7070  060F  3DC7               	addwfc	((_RF1+1)^(0+128)+10),f
  7071                           
  7072                           ;RF_Control_B1.c: 165: if (RF1.CorrectionCounter >= 30000) {
  7073  0610  3075               	movlw	117
  7074  0611  0247               	subwf	((_RF1+1)^(0+128)+10),w
  7075  0612  3030               	movlw	48
  7076  0613  1903               	skipnz
  7077  0614  0246               	subwf	(_RF1^(0+128)+10),w
  7078  0615  1C03               	skipc
  7079  0616  0008               	return
  7080                           
  7081                           ;RF_Control_B1.c: 166: RF1.CorrectionCounter = 0;
  7082  0617  01C6               	clrf	(_RF1^(0+128)+10)
  7083  0618  01C7               	clrf	((_RF1+1)^(0+128)+10)
  7084                           
  7085                           ;RF_Control_B1.c: 167: RF1.RxStatus = 0;
  7086  0619  11BC               	bcf	_RF1^(0+128),3
  7087                           
  7088                           ;RF_Control_B1.c: 168: RF1.ReceiveGO = 0;
  7089  061A  10BC               	bcf	_RF1^(0+128),1
  7090                           
  7091                           ;RF_Control_B1.c: 169: }
  7092                           ;RF_Control_B1.c: 170: }
  7093                           ;RF_Control_B1.c: 171: }
  7094                           ;RF_Control_B1.c: 172: }
  7095                           ;RF_Control_B1.c: 179: } else {
  7096  061B  0008               	return
  7097  061C                     l1970:	
  7098                           
  7099                           ;RF_Control_B1.c: 180: if (myMain.PowerON == 1) {
  7100  061C  1C20               	btfss	_myMain^(0+128),0
  7101  061D  0008               	return
  7102                           
  7103                           ;RF_Control_B1.c: 181: RF1.Enable = 1;
  7104  061E  143C               	bsf	_RF1^(0+128),0
  7105  061F  0008               	return
  7106  0620                     __end_of_setRF_Main:	
  7107                           
  7108                           	psect	text25
  7109  0BF9                     __ptext25:	
  7110 ;; *************** function _getRxData *****************
  7111 ;; Defined at:
  7112 ;;		line 269 in file "../src/RF_Control_B1.c"
  7113 ;; Parameters:    Size  Location     Type
  7114 ;;		None
  7115 ;; Auto vars:     Size  Location     Type
  7116 ;;  error           1   76[BANK0 ] unsigned char 
  7117 ;; Return value:  Size  Location     Type
  7118 ;;		None               void
  7119 ;; Registers used:
  7120 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7121 ;; Tracked objects:
  7122 ;;		On entry : 0/0
  7123 ;;		On exit  : 0/0
  7124 ;;		Unchanged: 0/0
  7125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7127 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7128 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7129 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7130 ;;Total ram usage:        2 bytes
  7131 ;; Hardware stack levels used:    1
  7132 ;; Hardware stack levels required when called:   12
  7133 ;; This function calls:
  7134 ;;		_getMain_All_Error_Status
  7135 ;;		_setControl_Lights_Table
  7136 ;;		_setLog_Code
  7137 ;; This function is called by:
  7138 ;;		_setRF_Main
  7139 ;; This function uses a non-reentrant model
  7140 ;;
  7141                           
  7142                           
  7143                           ;psect for function _getRxData
  7144  0BF9                     _getRxData:	
  7145                           
  7146                           ;RF_Control_B1.c: 270: char error = getMain_All_Error_Status(0);
  7147                           
  7148                           ;incstack = 0
  7149                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7150  0BF9  3000               	movlw	0
  7151  0BFA  3191  21EF  318B   	fcall	_getMain_All_Error_Status
  7152  0BFD  0020               	movlb	0	; select bank0
  7153  0BFE  00EB               	movwf	??_getRxData
  7154  0BFF  086B               	movf	??_getRxData,w
  7155  0C00  00EC               	movwf	getRxData@error
  7156                           
  7157                           ;RF_Control_B1.c: 271: if (error == 0) {
  7158  0C01  08EC               	movf	getRxData@error,f
  7159  0C02  1D03               	skipz
  7160  0C03  0008               	return
  7161                           
  7162                           ;RF_Control_B1.c: 272: if (RF1.Learn == 1) {
  7163  0C04  0021               	movlb	1	; select bank1
  7164  0C05  1F3C               	btfss	_RF1^(0+128),6
  7165  0C06  2C17               	goto	l6956
  7166                           
  7167                           ;RF_Control_B1.c: 273: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7168  0C07  0023               	movlb	3	; select bank3
  7169  0C08  08A0               	movf	_RF_Data^(0+384),f
  7170  0C09  1D03               	skipz
  7171  0C0A  2C14               	goto	l2021
  7172  0C0B  0821               	movf	(_RF_Data^(0+384)+1),w
  7173  0C0C  3A64               	xorlw	100
  7174  0C0D  1D03               	skipz
  7175  0C0E  2C14               	goto	l2021
  7176                           
  7177                           ;RF_Control_B1.c: 274: setLog_Code();
  7178  0C0F  3192  22C1         	fcall	_setLog_Code
  7179                           
  7180                           ;RF_Control_B1.c: 275: RF1.Checked = 1;
  7181  0C11  0021               	movlb	1	; select bank1
  7182  0C12  15BD               	bsf	(_RF1^(0+128)+1),3
  7183                           
  7184                           ;RF_Control_B1.c: 276: } else {
  7185  0C13  0008               	return
  7186  0C14                     l2021:	
  7187                           
  7188                           ;RF_Control_B1.c: 277: RF1.Checked = 0;
  7189  0C14  0021               	movlb	1	; select bank1
  7190  0C15  11BD               	bcf	(_RF1^(0+128)+1),3
  7191                           
  7192                           ;RF_Control_B1.c: 278: }
  7193                           ;RF_Control_B1.c: 279: } else {
  7194  0C16  0008               	return
  7195  0C17                     l6956:	
  7196                           
  7197                           ;RF_Control_B1.c: 280: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7198  0C17  0023               	movlb	3	; select bank3
  7199  0C18  08A0               	movf	_RF_Data^(0+384),f
  7200  0C19  1D03               	skipz
  7201  0C1A  2C55               	goto	l6978
  7202  0C1B  0821               	movf	(_RF_Data^(0+384)+1),w
  7203  0C1C  3A02               	xorlw	2
  7204  0C1D  1D03               	skipz
  7205  0C1E  2C55               	goto	l6978
  7206                           
  7207                           ;RF_Control_B1.c: 282: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7208  0C1F  082C               	movf	(_RF_Data^(0+384)+12),w
  7209  0C20  3AFF               	xorlw	255
  7210  0C21  1D03               	skipz
  7211  0C22  2C2F               	goto	l6968
  7212  0C23  082D               	movf	(_RF_Data^(0+384)+13),w
  7213  0C24  3AFF               	xorlw	255
  7214  0C25  1D03               	skipz
  7215  0C26  2C2F               	goto	l6968
  7216  0C27  082E               	movf	(_RF_Data^(0+384)+14),w
  7217  0C28  3AFF               	xorlw	255
  7218  0C29  1D03               	skipz
  7219  0C2A  2C2F               	goto	l6968
  7220                           
  7221                           ;RF_Control_B1.c: 283: __nop();
  7222  0C2B  0000               	nop
  7223                           
  7224                           ;RF_Control_B1.c: 284: RF1.Checked = 0;
  7225  0C2C  0021               	movlb	1	; select bank1
  7226  0C2D  11BD               	bcf	(_RF1^(0+128)+1),3
  7227                           
  7228                           ;RF_Control_B1.c: 285: } else {
  7229  0C2E  0008               	return
  7230  0C2F                     l6968:	
  7231                           
  7232                           ;RF_Control_B1.c: 286: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7233  0C2F  0020               	movlb	0	; select bank0
  7234  0C30  086E               	movf	_product,w
  7235  0C31  3E0C               	addlw	12
  7236  0C32  0086               	movwf	6
  7237  0C33  3002               	movlw	2	; select bank4/5
  7238  0C34  0087               	movwf	7
  7239  0C35  0023               	movlb	3	; select bank3
  7240  0C36  082C               	movf	(_RF_Data^(0+384)+12),w
  7241  0C37  0601               	xorwf	1,w
  7242  0C38  1D03               	skipz
  7243  0C39  0008               	return
  7244  0C3A  0020               	movlb	0	; select bank0
  7245  0C3B  086E               	movf	_product,w
  7246  0C3C  3E0D               	addlw	13
  7247  0C3D  0086               	movwf	6
  7248  0C3E  3002               	movlw	2	; select bank4/5
  7249  0C3F  0087               	movwf	7
  7250  0C40  0023               	movlb	3	; select bank3
  7251  0C41  082D               	movf	(_RF_Data^(0+384)+13),w
  7252  0C42  0601               	xorwf	1,w
  7253  0C43  1D03               	skipz
  7254  0C44  0008               	return
  7255  0C45  0020               	movlb	0	; select bank0
  7256  0C46  086E               	movf	_product,w
  7257  0C47  3E0E               	addlw	14
  7258  0C48  0086               	movwf	6
  7259  0C49  3002               	movlw	2	; select bank4/5
  7260  0C4A  0087               	movwf	7
  7261  0C4B  0023               	movlb	3	; select bank3
  7262  0C4C  082E               	movf	(_RF_Data^(0+384)+14),w
  7263  0C4D  0601               	xorwf	1,w
  7264  0C4E  1D03               	skipz
  7265  0C4F  0008               	return
  7266                           
  7267                           ;RF_Control_B1.c: 287: setControl_Lights_Table();
  7268  0C50  318B  2320         	fcall	_setControl_Lights_Table
  7269                           
  7270                           ;RF_Control_B1.c: 288: RF1.Checked = 1;
  7271  0C52  0021               	movlb	1	; select bank1
  7272  0C53  15BD               	bsf	(_RF1^(0+128)+1),3
  7273                           
  7274                           ;RF_Control_B1.c: 289: }
  7275                           ;RF_Control_B1.c: 290: }
  7276                           ;RF_Control_B1.c: 291: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7277  0C54  0008               	return
  7278  0C55                     l6978:	
  7279  0C55  0023               	movlb	3	; select bank3
  7280  0C56  0820               	movf	_RF_Data^(0+384),w
  7281  0C57  3AFF               	xorlw	255
  7282  0C58  1D03               	skipz
  7283  0C59  2C60               	goto	l6984
  7284  0C5A  0821               	movf	(_RF_Data^(0+384)+1),w
  7285  0C5B  3A02               	xorlw	2
  7286  0C5C  1D03               	skipz
  7287  0C5D  2C60               	goto	l6984
  7288                           
  7289                           ;RF_Control_B1.c: 292: __nop();
  7290  0C5E  0000               	nop
  7291                           
  7292                           ;RF_Control_B1.c: 293: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7293  0C5F  0008               	return
  7294  0C60                     l6984:	
  7295  0C60  0023               	movlb	3	; select bank3
  7296  0C61  08A0               	movf	_RF_Data^(0+384),f
  7297  0C62  1D03               	skipz
  7298  0C63  2C6A               	goto	l2031
  7299  0C64  0821               	movf	(_RF_Data^(0+384)+1),w
  7300  0C65  3A65               	xorlw	101
  7301  0C66  1D03               	skipz
  7302  0C67  2C6A               	goto	l2031
  7303                           
  7304                           ;RF_Control_B1.c: 294: __nop();
  7305  0C68  0000               	nop
  7306                           
  7307                           ;RF_Control_B1.c: 295: } else {
  7308  0C69  0008               	return
  7309  0C6A                     l2031:	
  7310                           
  7311                           ;RF_Control_B1.c: 296: RF1.Checked = 0;
  7312  0C6A  0021               	movlb	1	; select bank1
  7313  0C6B  11BD               	bcf	(_RF1^(0+128)+1),3
  7314                           
  7315                           ;RF_Control_B1.c: 297: }
  7316                           ;RF_Control_B1.c: 302: }
  7317                           ;RF_Control_B1.c: 303: } else {
  7318  0C6C  0008               	return
  7319  0C6D                     __end_of_getRxData:	
  7320                           ;RF_Control_B1.c: 304: ;
  7321                           
  7322                           
  7323                           	psect	text26
  7324  12C1                     __ptext26:	
  7325 ;; *************** function _setLog_Code *****************
  7326 ;; Defined at:
  7327 ;;		line 309 in file "../src/RF_Control_B1.c"
  7328 ;; Parameters:    Size  Location     Type
  7329 ;;		None
  7330 ;; Auto vars:     Size  Location     Type
  7331 ;;		None
  7332 ;; Return value:  Size  Location     Type
  7333 ;;		None               void
  7334 ;; Registers used:
  7335 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7336 ;; Tracked objects:
  7337 ;;		On entry : 0/0
  7338 ;;		On exit  : 0/0
  7339 ;;		Unchanged: 0/0
  7340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7343 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7344 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7345 ;;Total ram usage:        1 bytes
  7346 ;; Hardware stack levels used:    1
  7347 ;; Hardware stack levels required when called:    7
  7348 ;; This function calls:
  7349 ;;		_setBuz
  7350 ;;		_setMemory_LoopSave
  7351 ;;		_setMemory_Modify
  7352 ;; This function is called by:
  7353 ;;		_getRxData
  7354 ;; This function uses a non-reentrant model
  7355 ;;
  7356                           
  7357                           
  7358                           ;psect for function _setLog_Code
  7359  12C1                     _setLog_Code:	
  7360                           
  7361                           ;RF_Control_B1.c: 310: RF1.Learn = 0;
  7362                           
  7363                           ;incstack = 0
  7364                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7365  12C1  0021               	movlb	1	; select bank1
  7366  12C2  133C               	bcf	_RF1^(0+128),6
  7367                           
  7368                           ;RF_Control_B1.c: 311: product->Data[12]=RF_Data[12];
  7369  12C3  0023               	movlb	3	; select bank3
  7370  12C4  082C               	movf	(_RF_Data^(0+384)+12),w
  7371  12C5  0020               	movlb	0	; select bank0
  7372  12C6  00AD               	movwf	??_setLog_Code
  7373  12C7  086E               	movf	_product,w
  7374  12C8  3E0C               	addlw	12
  7375  12C9  0086               	movwf	6
  7376  12CA  3002               	movlw	2	; select bank4/5
  7377  12CB  0087               	movwf	7
  7378  12CC  082D               	movf	??_setLog_Code,w
  7379  12CD  0081               	movwf	1
  7380                           
  7381                           ;RF_Control_B1.c: 312: product->Data[13]=RF_Data[13];
  7382  12CE  0023               	movlb	3	; select bank3
  7383  12CF  082D               	movf	(_RF_Data^(0+384)+13),w
  7384  12D0  0020               	movlb	0	; select bank0
  7385  12D1  00AD               	movwf	??_setLog_Code
  7386  12D2  086E               	movf	_product,w
  7387  12D3  3E0D               	addlw	13
  7388  12D4  0086               	movwf	6
  7389  12D5  3002               	movlw	2	; select bank4/5
  7390  12D6  0087               	movwf	7
  7391  12D7  082D               	movf	??_setLog_Code,w
  7392  12D8  0081               	movwf	1
  7393                           
  7394                           ;RF_Control_B1.c: 313: product->Data[14]=RF_Data[14];
  7395  12D9  0023               	movlb	3	; select bank3
  7396  12DA  082E               	movf	(_RF_Data^(0+384)+14),w
  7397  12DB  0020               	movlb	0	; select bank0
  7398  12DC  00AD               	movwf	??_setLog_Code
  7399  12DD  086E               	movf	_product,w
  7400  12DE  3E0E               	addlw	14
  7401  12DF  0086               	movwf	6
  7402  12E0  3002               	movlw	2	; select bank4/5
  7403  12E1  0087               	movwf	7
  7404  12E2  082D               	movf	??_setLog_Code,w
  7405  12E3  0081               	movwf	1
  7406                           
  7407                           ;RF_Control_B1.c: 314: setBuz(1, 100);
  7408  12E4  3064               	movlw	100
  7409  12E5  00A9               	movwf	setBuz@time
  7410  12E6  3000               	movlw	0
  7411  12E7  00AA               	movwf	setBuz@time+1
  7412  12E8  3001               	movlw	1
  7413  12E9  3196  2698  3192   	fcall	_setBuz
  7414                           
  7415                           ;RF_Control_B1.c: 315: if (myMain.First == 1) {
  7416  12EC  0021               	movlb	1	; select bank1
  7417  12ED  1EA0               	btfss	_myMain^(0+128),5
  7418  12EE  2AF3               	goto	l2037
  7419                           
  7420                           ;RF_Control_B1.c: 316: setMemory_LoopSave(1);
  7421  12EF  3001               	movlw	1
  7422  12F0  319D  252B  3192   	fcall	_setMemory_LoopSave
  7423  12F3                     l2037:	
  7424                           
  7425                           ;RF_Control_B1.c: 317: }
  7426                           ;RF_Control_B1.c: 318: setMemory_Modify(1);
  7427  12F3  3001               	movlw	1
  7428  12F4  319D  2518         	fcall	_setMemory_Modify
  7429  12F6  0008               	return
  7430  12F7                     __end_of_setLog_Code:	
  7431                           
  7432                           	psect	text27
  7433  1D2B                     __ptext27:	
  7434 ;; *************** function _setMemory_LoopSave *****************
  7435 ;; Defined at:
  7436 ;;		line 1006 in file "../src/MCU_B1.c"
  7437 ;; Parameters:    Size  Location     Type
  7438 ;;  command         1    wreg     unsigned char 
  7439 ;; Auto vars:     Size  Location     Type
  7440 ;;  command         1    1[BANK0 ] unsigned char 
  7441 ;; Return value:  Size  Location     Type
  7442 ;;		None               void
  7443 ;; Registers used:
  7444 ;;		wreg, status,2, status,0
  7445 ;; Tracked objects:
  7446 ;;		On entry : 0/0
  7447 ;;		On exit  : 0/0
  7448 ;;		Unchanged: 0/0
  7449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7451 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7452 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7453 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7454 ;;Total ram usage:        2 bytes
  7455 ;; Hardware stack levels used:    1
  7456 ;; Hardware stack levels required when called:    5
  7457 ;; This function calls:
  7458 ;;		Nothing
  7459 ;; This function is called by:
  7460 ;;		_setLog_Code
  7461 ;; This function uses a non-reentrant model
  7462 ;;
  7463                           
  7464                           
  7465                           ;psect for function _setMemory_LoopSave
  7466  1D2B                     _setMemory_LoopSave:	
  7467                           
  7468                           ;incstack = 0
  7469                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7470                           ;setMemory_LoopSave@command stored from wreg
  7471  1D2B  0020               	movlb	0	; select bank0
  7472  1D2C  00A1               	movwf	setMemory_LoopSave@command
  7473                           
  7474                           ;MCU_B1.c: 1007: Memory.LoopSave = command == 1 ? 1 : 0;
  7475  1D2D  0821               	movf	setMemory_LoopSave@command,w
  7476  1D2E  3A01               	xorlw	1
  7477  1D2F  3000               	movlw	0
  7478  1D30  1903               	skipnz
  7479  1D31  3001               	movlw	1
  7480  1D32  00A0               	movwf	??_setMemory_LoopSave
  7481  1D33  0DA0               	rlf	??_setMemory_LoopSave,f
  7482  1D34  0DA0               	rlf	??_setMemory_LoopSave,f
  7483  1D35  0024               	movlb	4	; select bank4
  7484  1D36  0844               	movf	(_Memory^(0+512)+36),w
  7485  1D37  0020               	movlb	0	; select bank0
  7486  1D38  0620               	xorwf	??_setMemory_LoopSave,w
  7487  1D39  39FB               	andlw	-5
  7488  1D3A  0620               	xorwf	??_setMemory_LoopSave,w
  7489  1D3B  0024               	movlb	4	; select bank4
  7490  1D3C  00C4               	movwf	(_Memory^(0+512)+36)
  7491  1D3D  0008               	return
  7492  1D3E                     __end_of_setMemory_LoopSave:	
  7493                           
  7494                           	psect	text28
  7495  0B20                     __ptext28:	
  7496 ;; *************** function _setControl_Lights_Table *****************
  7497 ;; Defined at:
  7498 ;;		line 322 in file "../src/RF_Control_B1.c"
  7499 ;; Parameters:    Size  Location     Type
  7500 ;;		None
  7501 ;; Auto vars:     Size  Location     Type
  7502 ;;		None
  7503 ;; Return value:  Size  Location     Type
  7504 ;;		None               void
  7505 ;; Registers used:
  7506 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7507 ;; Tracked objects:
  7508 ;;		On entry : 0/0
  7509 ;;		On exit  : 0/0
  7510 ;;		Unchanged: 0/0
  7511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;Total ram usage:        0 bytes
  7517 ;; Hardware stack levels used:    1
  7518 ;; Hardware stack levels required when called:   11
  7519 ;; This function calls:
  7520 ;;		_setBuz
  7521 ;;		_setDimmerLights_ErrorClose
  7522 ;;		_setRFSW_AdjControl
  7523 ;;		_setRFSW_Control
  7524 ;;		_setTxData
  7525 ;; This function is called by:
  7526 ;;		_getRxData
  7527 ;; This function uses a non-reentrant model
  7528 ;;
  7529                           
  7530                           
  7531                           ;psect for function _setControl_Lights_Table
  7532  0B20                     _setControl_Lights_Table:	
  7533                           
  7534                           ;RF_Control_B1.c: 323: switch (RF_Data[15]) {
  7535                           
  7536                           ;incstack = 0
  7537                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7538  0B20  2B6C               	goto	l6580
  7539  0B21                     l6554:	
  7540                           ;RF_Control_B1.c: 324: case 0x00:
  7541                           
  7542                           
  7543                           ;RF_Control_B1.c: 326: setDimmerLights_ErrorClose(255);
  7544  0B21  30FF               	movlw	255
  7545  0B22  3197  274A  318B   	fcall	_setDimmerLights_ErrorClose
  7546                           
  7547                           ;RF_Control_B1.c: 328: product->Data[9]=0;
  7548  0B25  0020               	movlb	0	; select bank0
  7549  0B26  086E               	movf	_product,w
  7550  0B27  3E09               	addlw	9
  7551  0B28  0086               	movwf	6
  7552  0B29  3002               	movlw	2	; select bank4/5
  7553  0B2A  0087               	movwf	7
  7554  0B2B  0181               	clrf	1
  7555                           
  7556                           ;RF_Control_B1.c: 329: product->Data[11]=0;
  7557  0B2C  086E               	movf	_product,w
  7558  0B2D  3E0B               	addlw	11
  7559  0B2E  0086               	movwf	6
  7560  0B2F  3002               	movlw	2	; select bank4/5
  7561  0B30  0087               	movwf	7
  7562  0B31  0181               	clrf	1
  7563                           
  7564                           ;RF_Control_B1.c: 330: product->Data[15]=0;
  7565  0B32  086E               	movf	_product,w
  7566  0B33  3E0F               	addlw	15
  7567  0B34  0086               	movwf	6
  7568  0B35  3002               	movlw	2	; select bank4/5
  7569  0B36  0087               	movwf	7
  7570  0B37  0181               	clrf	1
  7571                           
  7572                           ;RF_Control_B1.c: 331: product->Data[17]=0;
  7573  0B38  086E               	movf	_product,w
  7574  0B39  3E11               	addlw	17
  7575  0B3A  0086               	movwf	6
  7576  0B3B  3002               	movlw	2	; select bank4/5
  7577  0B3C  0087               	movwf	7
  7578  0B3D  0181               	clrf	1
  7579                           
  7580                           ;RF_Control_B1.c: 332: setBuz(1, 100);
  7581  0B3E  3064               	movlw	100
  7582  0B3F  00A9               	movwf	setBuz@time
  7583  0B40  3000               	movlw	0
  7584  0B41  00AA               	movwf	setBuz@time+1
  7585  0B42  3001               	movlw	1
  7586  0B43  3196  2698         	fcall	_setBuz
  7587                           
  7588                           ;RF_Control_B1.c: 334: break;
  7589  0B45  0008               	return
  7590  0B46                     l6566:	
  7591                           ;RF_Control_B1.c: 335: case 0x20:
  7592                           
  7593                           
  7594                           ;RF_Control_B1.c: 336: product->Data[9]=0;
  7595  0B46  0020               	movlb	0	; select bank0
  7596  0B47  086E               	movf	_product,w
  7597  0B48  3E09               	addlw	9
  7598  0B49  0086               	movwf	6
  7599  0B4A  3002               	movlw	2	; select bank4/5
  7600  0B4B  0087               	movwf	7
  7601  0B4C  0181               	clrf	1
  7602                           
  7603                           ;RF_Control_B1.c: 337: product->Data[11]=0;
  7604  0B4D  086E               	movf	_product,w
  7605  0B4E  3E0B               	addlw	11
  7606  0B4F  0086               	movwf	6
  7607  0B50  3002               	movlw	2	; select bank4/5
  7608  0B51  0087               	movwf	7
  7609  0B52  0181               	clrf	1
  7610                           
  7611                           ;RF_Control_B1.c: 338: product->Data[17]=0;
  7612  0B53  086E               	movf	_product,w
  7613  0B54  3E11               	addlw	17
  7614  0B55  0086               	movwf	6
  7615  0B56  3002               	movlw	2	; select bank4/5
  7616  0B57  0087               	movwf	7
  7617  0B58  0181               	clrf	1
  7618                           
  7619                           ;RF_Control_B1.c: 339: setTxData();
  7620  0B59  3186  26FC         	fcall	_setTxData
  7621                           
  7622                           ;RF_Control_B1.c: 340: break;
  7623  0B5B  0008               	return
  7624  0B5C                     l6570:	
  7625                           ;RF_Control_B1.c: 341: case 0x01:
  7626                           
  7627                           
  7628                           ;RF_Control_B1.c: 343: setRFSW_Control(1);
  7629  0B5C  3001               	movlw	1
  7630  0B5D  3195  254D         	fcall	_setRFSW_Control
  7631                           
  7632                           ;RF_Control_B1.c: 345: break;
  7633  0B5F  0008               	return
  7634  0B60                     l6572:	
  7635                           ;RF_Control_B1.c: 346: case 0x02:
  7636                           
  7637                           
  7638                           ;RF_Control_B1.c: 348: setRFSW_Control(2);
  7639  0B60  3002               	movlw	2
  7640  0B61  3195  254D         	fcall	_setRFSW_Control
  7641                           
  7642                           ;RF_Control_B1.c: 355: break;
  7643                           
  7644                           ;RF_Control_B1.c: 351: case 0x03:
  7645                           
  7646                           ;RF_Control_B1.c: 350: break;
  7647  0B63  0008               	return
  7648  0B64                     l6574:	
  7649                           ;RF_Control_B1.c: 356: case 0x11:
  7650                           
  7651                           
  7652                           ;RF_Control_B1.c: 359: setRFSW_AdjControl(1);
  7653  0B64  3001               	movlw	1
  7654  0B65  3193  23E0         	fcall	_setRFSW_AdjControl
  7655                           
  7656                           ;RF_Control_B1.c: 362: break;
  7657  0B67  0008               	return
  7658  0B68                     l6576:	
  7659                           ;RF_Control_B1.c: 363: case 0x21:
  7660                           
  7661                           
  7662                           ;RF_Control_B1.c: 366: setRFSW_AdjControl(2);
  7663  0B68  3002               	movlw	2
  7664  0B69  3193  23E0         	fcall	_setRFSW_AdjControl
  7665                           
  7666                           ;RF_Control_B1.c: 377: }
  7667                           
  7668                           ;RF_Control_B1.c: 376: break;
  7669                           
  7670                           ;RF_Control_B1.c: 370: case 0x31:
  7671                           
  7672                           ;RF_Control_B1.c: 369: break;
  7673  0B6B  0008               	return
  7674  0B6C                     l6580:	
  7675  0B6C  0023               	movlb	3	; select bank3
  7676  0B6D  082F               	movf	(_RF_Data^(0+384)+15),w
  7677                           
  7678                           ; Switch size 1, requested type "space"
  7679                           ; Number of cases is 8, Range of values is 0 to 49
  7680                           ; switch strategies available:
  7681                           ; Name         Instructions Cycles
  7682                           ; simple_byte           25    13 (average)
  7683                           ; direct_byte          106     6 (fixed)
  7684                           ; jumptable            260     6 (fixed)
  7685                           ;	Chosen strategy is simple_byte
  7686  0B6E  3A00               	xorlw	0	; case 0
  7687  0B6F  1903               	skipnz
  7688  0B70  2B21               	goto	l6554
  7689  0B71  3A01               	xorlw	1	; case 1
  7690  0B72  1903               	skipnz
  7691  0B73  2B5C               	goto	l6570
  7692  0B74  3A03               	xorlw	3	; case 2
  7693  0B75  1903               	skipnz
  7694  0B76  2B60               	goto	l6572
  7695  0B77  3A01               	xorlw	1	; case 3
  7696  0B78  1903               	skipnz
  7697  0B79  2B87               	goto	l2051
  7698  0B7A  3A12               	xorlw	18	; case 17
  7699  0B7B  1903               	skipnz
  7700  0B7C  2B64               	goto	l6574
  7701  0B7D  3A31               	xorlw	49	; case 32
  7702  0B7E  1903               	skipnz
  7703  0B7F  2B46               	goto	l6566
  7704  0B80  3A01               	xorlw	1	; case 33
  7705  0B81  1903               	skipnz
  7706  0B82  2B68               	goto	l6576
  7707  0B83  3A10               	xorlw	16	; case 49
  7708  0B84  1903               	skipnz
  7709  0B85  2B87               	goto	l2051
  7710  0B86  2B87               	goto	l2051
  7711  0B87                     l2051:	
  7712  0B87  0008               	return
  7713  0B88                     __end_of_setControl_Lights_Table:	
  7714                           
  7715                           	psect	text29
  7716  154D                     __ptext29:	
  7717 ;; *************** function _setRFSW_Control *****************
  7718 ;; Defined at:
  7719 ;;		line 404 in file "../src/RF_Control_B1.c"
  7720 ;; Parameters:    Size  Location     Type
  7721 ;;  sw              1    wreg     unsigned char 
  7722 ;; Auto vars:     Size  Location     Type
  7723 ;;  sw              1   19[BANK0 ] unsigned char 
  7724 ;;  status          1   18[BANK0 ] unsigned char 
  7725 ;; Return value:  Size  Location     Type
  7726 ;;		None               void
  7727 ;; Registers used:
  7728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7729 ;; Tracked objects:
  7730 ;;		On entry : 0/0
  7731 ;;		On exit  : 0/0
  7732 ;;		Unchanged: 0/0
  7733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7735 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7736 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7737 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7738 ;;Total ram usage:        3 bytes
  7739 ;; Hardware stack levels used:    1
  7740 ;; Hardware stack levels required when called:    9
  7741 ;; This function calls:
  7742 ;;		_getDelayOff_GO
  7743 ;;		_getDimmerLights_Status
  7744 ;;		_setBuz
  7745 ;;		_setDelayOff_GO
  7746 ;;		_setDimmerLights_SwOff
  7747 ;;		_setDimmerLights_SwOn
  7748 ;;		_setRF_DimmerLights
  7749 ;;		_setTxData
  7750 ;; This function is called by:
  7751 ;;		_setControl_Lights_Table
  7752 ;; This function uses a non-reentrant model
  7753 ;;
  7754                           
  7755                           
  7756                           ;psect for function _setRFSW_Control
  7757  154D                     _setRFSW_Control:	
  7758                           
  7759                           ;incstack = 0
  7760                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7761                           ;setRFSW_Control@sw stored from wreg
  7762  154D  0020               	movlb	0	; select bank0
  7763  154E  00B3               	movwf	setRFSW_Control@sw
  7764                           
  7765                           ;RF_Control_B1.c: 405: char status = 0;
  7766  154F  01B2               	clrf	setRFSW_Control@status
  7767                           
  7768                           ;RF_Control_B1.c: 408: if (RF_Data[16] == 0x80) {
  7769  1550  0023               	movlb	3	; select bank3
  7770  1551  0830               	movf	(_RF_Data^(0+384)+16),w
  7771  1552  3A80               	xorlw	128
  7772  1553  1D03               	skipz
  7773  1554  2D80               	goto	l6378
  7774                           
  7775                           ;RF_Control_B1.c: 409: setDelayOff_GO(sw, 1, RF_Data[17]);
  7776  1555  0020               	movlb	0	; select bank0
  7777  1556  01AA               	clrf	setDelayOff_GO@command
  7778  1557  0AAA               	incf	setDelayOff_GO@command,f
  7779  1558  0023               	movlb	3	; select bank3
  7780  1559  0831               	movf	(_RF_Data^(0+384)+17),w
  7781  155A  0020               	movlb	0	; select bank0
  7782  155B  00B1               	movwf	??_setRFSW_Control
  7783  155C  0831               	movf	??_setRFSW_Control,w
  7784  155D  00AB               	movwf	setDelayOff_GO@value
  7785  155E  0833               	movf	setRFSW_Control@sw,w
  7786  155F  3188  2070  3195   	fcall	_setDelayOff_GO
  7787                           
  7788                           ;RF_Control_B1.c: 410: if (getDimmerLights_Status(sw) == 1) {
  7789  1562  0020               	movlb	0	; select bank0
  7790  1563  0833               	movf	setRFSW_Control@sw,w
  7791  1564  319C  2459  3195   	fcall	_getDimmerLights_Status
  7792  1567  3A01               	xorlw	1
  7793  1568  1D03               	skipz
  7794  1569  2D8F               	goto	l6382
  7795                           
  7796                           ;RF_Control_B1.c: 411: setBuz(1, 100);
  7797  156A  3064               	movlw	100
  7798  156B  0020               	movlb	0	; select bank0
  7799  156C  00A9               	movwf	setBuz@time
  7800  156D  3000               	movlw	0
  7801  156E  00AA               	movwf	setBuz@time+1
  7802  156F  3001               	movlw	1
  7803  1570  3196  2698  3195   	fcall	_setBuz
  7804                           
  7805                           ;RF_Control_B1.c: 412: status = 1;
  7806  1573  0020               	movlb	0	; select bank0
  7807  1574  01B2               	clrf	setRFSW_Control@status
  7808  1575  0AB2               	incf	setRFSW_Control@status,f
  7809                           
  7810                           ;RF_Control_B1.c: 413: setRF_DimmerLights(sw, 1);
  7811  1576  01A0               	clrf	setRF_DimmerLights@on
  7812  1577  0AA0               	incf	setRF_DimmerLights@on,f
  7813  1578  0833               	movf	setRFSW_Control@sw,w
  7814  1579  3197  27A4  3195   	fcall	_setRF_DimmerLights
  7815                           
  7816                           ;RF_Control_B1.c: 414: setTxData();
  7817  157C  3186  26FC  3195   	fcall	_setTxData
  7818                           
  7819                           ;RF_Control_B1.c: 416: }
  7820                           ;RF_Control_B1.c: 417: } else {
  7821  157F  2D8F               	goto	l6382
  7822  1580                     l6378:	
  7823                           
  7824                           ;RF_Control_B1.c: 419: if (getDelayOff_GO(sw) == 1) {
  7825  1580  0020               	movlb	0	; select bank0
  7826  1581  0833               	movf	setRFSW_Control@sw,w
  7827  1582  319C  2469  3195   	fcall	_getDelayOff_GO
  7828  1585  3A01               	xorlw	1
  7829  1586  1D03               	skipz
  7830  1587  2D8F               	goto	l6382
  7831                           
  7832                           ;RF_Control_B1.c: 420: setDelayOff_GO(sw, 0, 0);
  7833  1588  0020               	movlb	0	; select bank0
  7834  1589  01AA               	clrf	setDelayOff_GO@command
  7835  158A  01AB               	clrf	setDelayOff_GO@value
  7836  158B  0833               	movf	setRFSW_Control@sw,w
  7837  158C  3188  2070  3195   	fcall	_setDelayOff_GO
  7838  158F                     l6382:	
  7839                           
  7840                           ;RF_Control_B1.c: 421: }
  7841                           ;RF_Control_B1.c: 423: }
  7842                           ;RF_Control_B1.c: 424: if (status == 0) {
  7843  158F  0020               	movlb	0	; select bank0
  7844  1590  08B2               	movf	setRFSW_Control@status,f
  7845  1591  1D03               	skipz
  7846  1592  0008               	return
  7847                           
  7848                           ;RF_Control_B1.c: 426: setDimmerLights_SwOn(sw);
  7849  1593  0833               	movf	setRFSW_Control@sw,w
  7850  1594  3193  2365  3195   	fcall	_setDimmerLights_SwOn
  7851                           
  7852                           ;RF_Control_B1.c: 427: setDimmerLights_SwOff(sw);
  7853  1597  0020               	movlb	0	; select bank0
  7854  1598  0833               	movf	setRFSW_Control@sw,w
  7855  1599  3194  2420         	fcall	_setDimmerLights_SwOff
  7856  159B  0008               	return
  7857  159C                     __end_of_setRFSW_Control:	
  7858                           
  7859                           	psect	text30
  7860  1365                     __ptext30:	
  7861 ;; *************** function _setDimmerLights_SwOn *****************
  7862 ;; Defined at:
  7863 ;;		line 517 in file "../src/Dimmer_B1.c"
  7864 ;; Parameters:    Size  Location     Type
  7865 ;;  sw              1    wreg     unsigned char 
  7866 ;; Auto vars:     Size  Location     Type
  7867 ;;  sw              1   15[BANK0 ] unsigned char 
  7868 ;;  idle            1   14[BANK0 ] unsigned char 
  7869 ;; Return value:  Size  Location     Type
  7870 ;;		None               void
  7871 ;; Registers used:
  7872 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7873 ;; Tracked objects:
  7874 ;;		On entry : 0/0
  7875 ;;		On exit  : 0/0
  7876 ;;		Unchanged: 0/0
  7877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7879 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7880 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7881 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7882 ;;Total ram usage:        3 bytes
  7883 ;; Hardware stack levels used:    1
  7884 ;; Hardware stack levels required when called:    7
  7885 ;; This function calls:
  7886 ;;		_DimmerLightsPointSelect
  7887 ;;		_getAll_DimmerLights_AdjGO
  7888 ;;		_setBuz
  7889 ;;		_setDimmerLights_Trigger
  7890 ;; This function is called by:
  7891 ;;		_setRFSW_Control
  7892 ;;		_setSw_Main
  7893 ;; This function uses a non-reentrant model
  7894 ;;
  7895                           
  7896                           
  7897                           ;psect for function _setDimmerLights_SwOn
  7898  1365                     _setDimmerLights_SwOn:	
  7899                           
  7900                           ;incstack = 0
  7901                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7902                           ;setDimmerLights_SwOn@sw stored from wreg
  7903  1365  0020               	movlb	0	; select bank0
  7904  1366  00AF               	movwf	setDimmerLights_SwOn@sw
  7905                           
  7906                           ;Dimmer_B1.c: 518: DimmerLightsPointSelect(sw);
  7907  1367  082F               	movf	setDimmerLights_SwOn@sw,w
  7908  1368  319D  2505  3193   	fcall	_DimmerLightsPointSelect
  7909                           
  7910                           ;Dimmer_B1.c: 519: char idle = 0;
  7911  136B  0020               	movlb	0	; select bank0
  7912  136C  01AE               	clrf	setDimmerLights_SwOn@idle
  7913                           
  7914                           ;Dimmer_B1.c: 521: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
  7915  136D  319C  248A  3193   	fcall	_getAll_DimmerLights_AdjGO
  7916  1370  3A01               	xorlw	1
  7917  1371  3000               	movlw	0
  7918  1372  1903               	skipnz
  7919  1373  3001               	movlw	1
  7920  1374  0020               	movlb	0	; select bank0
  7921  1375  00AD               	movwf	??_setDimmerLights_SwOn
  7922  1376  082D               	movf	??_setDimmerLights_SwOn,w
  7923  1377  00AE               	movwf	setDimmerLights_SwOn@idle
  7924                           
  7925                           ;Dimmer_B1.c: 523: if (idle == 0) {
  7926  1378  08AE               	movf	setDimmerLights_SwOn@idle,f
  7927  1379  1D03               	skipz
  7928  137A  0008               	return
  7929                           
  7930                           ;Dimmer_B1.c: 524: DimmerLights->SwFlag = 1;
  7931  137B  086F               	movf	_DimmerLights,w
  7932  137C  3E09               	addlw	9
  7933  137D  0086               	movwf	6
  7934  137E  3001               	movlw	1	; select bank2/3
  7935  137F  0087               	movwf	7
  7936  1380  1701               	bsf	1,6
  7937                           
  7938                           ;Dimmer_B1.c: 525: setBuz(1, 100);
  7939  1381  3064               	movlw	100
  7940  1382  00A9               	movwf	setBuz@time
  7941  1383  3000               	movlw	0
  7942  1384  00AA               	movwf	setBuz@time+1
  7943  1385  3001               	movlw	1
  7944  1386  3196  2698  3193   	fcall	_setBuz
  7945                           
  7946                           ;Dimmer_B1.c: 526: if (DimmerLights->Status == 0) {
  7947  1389  0020               	movlb	0	; select bank0
  7948  138A  086F               	movf	_DimmerLights,w
  7949  138B  0086               	movwf	6
  7950  138C  3001               	movlw	1	; select bank2/3
  7951  138D  0087               	movwf	7
  7952  138E  1A81               	btfsc	1,5
  7953  138F  2B9B               	goto	l6188
  7954                           
  7955                           ;Dimmer_B1.c: 527: DimmerLights->Status = 1;
  7956  1390  086F               	movf	_DimmerLights,w
  7957  1391  0086               	movwf	6
  7958  1392  3001               	movlw	1	; select bank2/3
  7959  1393  0087               	movwf	7
  7960  1394  1681               	bsf	1,5
  7961                           
  7962                           ;Dimmer_B1.c: 528: setDimmerLights_Trigger(sw, 1);
  7963  1395  01A2               	clrf	setDimmerLights_Trigger@command
  7964  1396  0AA2               	incf	setDimmerLights_Trigger@command,f
  7965  1397  082F               	movf	setDimmerLights_SwOn@sw,w
  7966  1398  319E  26BC         	fcall	_setDimmerLights_Trigger
  7967                           
  7968                           ;Dimmer_B1.c: 529: } else {
  7969  139A  0008               	return
  7970  139B                     l6188:	
  7971                           
  7972                           ;Dimmer_B1.c: 530: DimmerLights->Status = 0;
  7973  139B  0020               	movlb	0	; select bank0
  7974  139C  086F               	movf	_DimmerLights,w
  7975  139D  0086               	movwf	6
  7976  139E  3001               	movlw	1	; select bank2/3
  7977  139F  0087               	movwf	7
  7978  13A0  1281               	bcf	1,5
  7979  13A1  0008               	return
  7980  13A2                     __end_of_setDimmerLights_SwOn:	
  7981                           
  7982                           	psect	text31
  7983  13E0                     __ptext31:	
  7984 ;; *************** function _setRFSW_AdjControl *****************
  7985 ;; Defined at:
  7986 ;;		line 433 in file "../src/RF_Control_B1.c"
  7987 ;; Parameters:    Size  Location     Type
  7988 ;;  sw              1    wreg     unsigned char 
  7989 ;; Auto vars:     Size  Location     Type
  7990 ;;  sw              1   74[BANK0 ] unsigned char 
  7991 ;;  status          1   73[BANK0 ] unsigned char 
  7992 ;; Return value:  Size  Location     Type
  7993 ;;		None               void
  7994 ;; Registers used:
  7995 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7996 ;; Tracked objects:
  7997 ;;		On entry : 0/0
  7998 ;;		On exit  : 0/0
  7999 ;;		Unchanged: 0/0
  8000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8002 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8003 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8004 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8005 ;;Total ram usage:        4 bytes
  8006 ;; Hardware stack levels used:    1
  8007 ;; Hardware stack levels required when called:   10
  8008 ;; This function calls:
  8009 ;;		_getDimmerLights_Status
  8010 ;;		_setMemory_Modify
  8011 ;;		_setRF_DimmerValue
  8012 ;;		_setTxData
  8013 ;; This function is called by:
  8014 ;;		_setControl_Lights_Table
  8015 ;; This function uses a non-reentrant model
  8016 ;;
  8017                           
  8018                           
  8019                           ;psect for function _setRFSW_AdjControl
  8020  13E0                     _setRFSW_AdjControl:	
  8021                           
  8022                           ;incstack = 0
  8023                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8024                           ;setRFSW_AdjControl@sw stored from wreg
  8025  13E0  0020               	movlb	0	; select bank0
  8026  13E1  00EA               	movwf	setRFSW_AdjControl@sw
  8027                           
  8028                           ;RF_Control_B1.c: 434: char status = 0;
  8029  13E2  01E9               	clrf	setRFSW_AdjControl@status
  8030                           
  8031                           ;RF_Control_B1.c: 436: status = getDimmerLights_Status(sw);
  8032  13E3  086A               	movf	setRFSW_AdjControl@sw,w
  8033  13E4  319C  2459  3193   	fcall	_getDimmerLights_Status
  8034  13E7  0020               	movlb	0	; select bank0
  8035  13E8  00E7               	movwf	??_setRFSW_AdjControl
  8036  13E9  0867               	movf	??_setRFSW_AdjControl,w
  8037  13EA  00E9               	movwf	setRFSW_AdjControl@status
  8038                           
  8039                           ;RF_Control_B1.c: 439: if (status == 1) {
  8040  13EB  0869               	movf	setRFSW_AdjControl@status,w
  8041  13EC  3A01               	xorlw	1
  8042  13ED  1D03               	skipz
  8043  13EE  2BF9               	goto	l6396
  8044                           
  8045                           ;RF_Control_B1.c: 440: setMemory_Modify(1);
  8046  13EF  3001               	movlw	1
  8047  13F0  319D  2518  3193   	fcall	_setMemory_Modify
  8048                           
  8049                           ;RF_Control_B1.c: 441: setRF_DimmerValue(sw);
  8050  13F3  0020               	movlb	0	; select bank0
  8051  13F4  086A               	movf	setRFSW_AdjControl@sw,w
  8052  13F5  3191  21BD  3193   	fcall	_setRF_DimmerValue
  8053                           
  8054                           ;RF_Control_B1.c: 442: } else {
  8055  13F8  2C0B               	goto	l2063
  8056  13F9                     l6396:	
  8057                           
  8058                           ;RF_Control_B1.c: 443: product->Data[9]=product->Data[20 + sw];
  8059  13F9  0020               	movlb	0	; select bank0
  8060  13FA  086A               	movf	setRFSW_AdjControl@sw,w
  8061  13FB  3E14               	addlw	20
  8062  13FC  076E               	addwf	_product,w
  8063  13FD  00E7               	movwf	??_setRFSW_AdjControl
  8064  13FE  0867               	movf	??_setRFSW_AdjControl,w
  8065  13FF  0086               	movwf	6
  8066  1400  3002               	movlw	2	; select bank4/5
  8067  1401  0087               	movwf	7
  8068  1402  0801               	movf	1,w
  8069  1403  00E8               	movwf	??_setRFSW_AdjControl+1
  8070  1404  086E               	movf	_product,w
  8071  1405  3E09               	addlw	9
  8072  1406  0086               	movwf	6
  8073  1407  3002               	movlw	2	; select bank4/5
  8074  1408  0087               	movwf	7
  8075  1409  0868               	movf	??_setRFSW_AdjControl+1,w
  8076  140A  0081               	movwf	1
  8077  140B                     l2063:	
  8078                           
  8079                           ;RF_Control_B1.c: 444: }
  8080                           ;RF_Control_B1.c: 445: product->Data[17]=product->Data[26 + sw];
  8081  140B  0020               	movlb	0	; select bank0
  8082  140C  086A               	movf	setRFSW_AdjControl@sw,w
  8083  140D  3E1A               	addlw	26
  8084  140E  076E               	addwf	_product,w
  8085  140F  00E7               	movwf	??_setRFSW_AdjControl
  8086  1410  0867               	movf	??_setRFSW_AdjControl,w
  8087  1411  0086               	movwf	6
  8088  1412  3002               	movlw	2	; select bank4/5
  8089  1413  0087               	movwf	7
  8090  1414  0801               	movf	1,w
  8091  1415  00E8               	movwf	??_setRFSW_AdjControl+1
  8092  1416  086E               	movf	_product,w
  8093  1417  3E11               	addlw	17
  8094  1418  0086               	movwf	6
  8095  1419  3002               	movlw	2	; select bank4/5
  8096  141A  0087               	movwf	7
  8097  141B  0868               	movf	??_setRFSW_AdjControl+1,w
  8098  141C  0081               	movwf	1
  8099                           
  8100                           ;RF_Control_B1.c: 446: setTxData();
  8101  141D  3186  26FC         	fcall	_setTxData
  8102  141F  0008               	return
  8103  1420                     __end_of_setRFSW_AdjControl:	
  8104                           
  8105                           	psect	text32
  8106  11BD                     __ptext32:	
  8107 ;; *************** function _setRF_DimmerValue *****************
  8108 ;; Defined at:
  8109 ;;		line 451 in file "../src/RF_Control_B1.c"
  8110 ;; Parameters:    Size  Location     Type
  8111 ;;  lights          1    wreg     unsigned char 
  8112 ;; Auto vars:     Size  Location     Type
  8113 ;;  lights          1   70[BANK0 ] unsigned char 
  8114 ;; Return value:  Size  Location     Type
  8115 ;;		None               void
  8116 ;; Registers used:
  8117 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8118 ;; Tracked objects:
  8119 ;;		On entry : 0/0
  8120 ;;		On exit  : 0/0
  8121 ;;		Unchanged: 0/0
  8122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8124 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8125 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8126 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8127 ;;Total ram usage:        3 bytes
  8128 ;; Hardware stack levels used:    1
  8129 ;; Hardware stack levels required when called:    9
  8130 ;; This function calls:
  8131 ;;		_setDimmerLights_AdjRF
  8132 ;; This function is called by:
  8133 ;;		_setRFSW_AdjControl
  8134 ;; This function uses a non-reentrant model
  8135 ;;
  8136                           
  8137                           
  8138                           ;psect for function _setRF_DimmerValue
  8139  11BD                     _setRF_DimmerValue:	
  8140                           
  8141                           ;incstack = 0
  8142                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8143                           ;setRF_DimmerValue@lights stored from wreg
  8144  11BD  0020               	movlb	0	; select bank0
  8145  11BE  00E6               	movwf	setRF_DimmerValue@lights
  8146                           
  8147                           ;RF_Control_B1.c: 452: if (RF_Data[9] > 0x64) {
  8148  11BF  3065               	movlw	101
  8149  11C0  0023               	movlb	3	; select bank3
  8150  11C1  0229               	subwf	(_RF_Data^(0+384)+9),w
  8151  11C2  1C03               	skipc
  8152  11C3  29CA               	goto	l6274
  8153                           
  8154                           ;RF_Control_B1.c: 453: RF_Data[9] = 0x64;
  8155  11C4  3064               	movlw	100
  8156  11C5  0020               	movlb	0	; select bank0
  8157  11C6  00E4               	movwf	??_setRF_DimmerValue
  8158  11C7  0864               	movf	??_setRF_DimmerValue,w
  8159  11C8  0023               	movlb	3	; select bank3
  8160  11C9  00A9               	movwf	(_RF_Data^(0+384)+9)
  8161  11CA                     l6274:	
  8162                           
  8163                           ;RF_Control_B1.c: 454: }
  8164                           ;RF_Control_B1.c: 455: product->Data[9]=RF_Data[9];
  8165  11CA  0829               	movf	(_RF_Data^(0+384)+9),w
  8166  11CB  0020               	movlb	0	; select bank0
  8167  11CC  00E4               	movwf	??_setRF_DimmerValue
  8168  11CD  086E               	movf	_product,w
  8169  11CE  3E09               	addlw	9
  8170  11CF  0086               	movwf	6
  8171  11D0  3002               	movlw	2	; select bank4/5
  8172  11D1  0087               	movwf	7
  8173  11D2  0864               	movf	??_setRF_DimmerValue,w
  8174  11D3  0081               	movwf	1
  8175                           
  8176                           ;RF_Control_B1.c: 456: product->Data[11]=lights;
  8177  11D4  0866               	movf	setRF_DimmerValue@lights,w
  8178  11D5  00E4               	movwf	??_setRF_DimmerValue
  8179  11D6  086E               	movf	_product,w
  8180  11D7  3E0B               	addlw	11
  8181  11D8  0086               	movwf	6
  8182  11D9  3002               	movlw	2	; select bank4/5
  8183  11DA  0087               	movwf	7
  8184  11DB  0864               	movf	??_setRF_DimmerValue,w
  8185  11DC  0081               	movwf	1
  8186                           
  8187                           ;RF_Control_B1.c: 457: product->Data[(20 + lights)]=RF_Data[9];
  8188  11DD  0023               	movlb	3	; select bank3
  8189  11DE  0829               	movf	(_RF_Data^(0+384)+9),w
  8190  11DF  0020               	movlb	0	; select bank0
  8191  11E0  00E4               	movwf	??_setRF_DimmerValue
  8192  11E1  0866               	movf	setRF_DimmerValue@lights,w
  8193  11E2  3E14               	addlw	20
  8194  11E3  076E               	addwf	_product,w
  8195  11E4  00E5               	movwf	??_setRF_DimmerValue+1
  8196  11E5  0865               	movf	??_setRF_DimmerValue+1,w
  8197  11E6  0086               	movwf	6
  8198  11E7  3002               	movlw	2	; select bank4/5
  8199  11E8  0087               	movwf	7
  8200  11E9  0864               	movf	??_setRF_DimmerValue,w
  8201  11EA  0081               	movwf	1
  8202                           
  8203                           ;RF_Control_B1.c: 458: setDimmerLights_AdjRF(lights);
  8204  11EB  0866               	movf	setRF_DimmerValue@lights,w
  8205  11EC  319F  27DD         	fcall	_setDimmerLights_AdjRF
  8206  11EE  0008               	return
  8207  11EF                     __end_of_setRF_DimmerValue:	
  8208                           
  8209                           	psect	text33
  8210  1FDD                     __ptext33:	
  8211 ;; *************** function _setDimmerLights_AdjRF *****************
  8212 ;; Defined at:
  8213 ;;		line 758 in file "../src/Dimmer_B1.c"
  8214 ;; Parameters:    Size  Location     Type
  8215 ;;  lights          1    wreg     unsigned char 
  8216 ;; Auto vars:     Size  Location     Type
  8217 ;;  lights          1   67[BANK0 ] unsigned char 
  8218 ;; Return value:  Size  Location     Type
  8219 ;;		None               void
  8220 ;; Registers used:
  8221 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8222 ;; Tracked objects:
  8223 ;;		On entry : 0/0
  8224 ;;		On exit  : 0/0
  8225 ;;		Unchanged: 0/0
  8226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8228 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8229 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8230 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8231 ;;Total ram usage:        2 bytes
  8232 ;; Hardware stack levels used:    1
  8233 ;; Hardware stack levels required when called:    8
  8234 ;; This function calls:
  8235 ;;		_DimmerLightsPointSelect
  8236 ;;		_getPercentValue
  8237 ;; This function is called by:
  8238 ;;		_setRF_DimmerValue
  8239 ;; This function uses a non-reentrant model
  8240 ;;
  8241                           
  8242                           
  8243                           ;psect for function _setDimmerLights_AdjRF
  8244  1FDD                     _setDimmerLights_AdjRF:	
  8245                           
  8246                           ;incstack = 0
  8247                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8248                           ;setDimmerLights_AdjRF@lights stored from wreg
  8249  1FDD  0020               	movlb	0	; select bank0
  8250  1FDE  00E3               	movwf	setDimmerLights_AdjRF@lights
  8251                           
  8252                           ;Dimmer_B1.c: 759: DimmerLightsPointSelect(lights);
  8253  1FDF  0863               	movf	setDimmerLights_AdjRF@lights,w
  8254  1FE0  319D  2505  319F   	fcall	_DimmerLightsPointSelect
  8255                           
  8256                           ;Dimmer_B1.c: 760: DimmerLights->AdjRF = 1;
  8257  1FE3  0020               	movlb	0	; select bank0
  8258  1FE4  086F               	movf	_DimmerLights,w
  8259  1FE5  0086               	movwf	6
  8260  1FE6  3001               	movlw	1	; select bank2/3
  8261  1FE7  0087               	movwf	7
  8262  1FE8  1501               	bsf	1,2
  8263                           
  8264                           ;Dimmer_B1.c: 761: DimmerLights->Signal = 1;
  8265  1FE9  086F               	movf	_DimmerLights,w
  8266  1FEA  0086               	movwf	6
  8267  1FEB  3001               	movlw	1	; select bank2/3
  8268  1FEC  0087               	movwf	7
  8269  1FED  1481               	bsf	1,1
  8270                           
  8271                           ;Dimmer_B1.c: 762: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8272  1FEE  086E               	movf	_product,w
  8273  1FEF  3E09               	addlw	9
  8274  1FF0  0086               	movwf	6
  8275  1FF1  3002               	movlw	2	; select bank4/5
  8276  1FF2  0087               	movwf	7
  8277  1FF3  0801               	movf	1,w
  8278  1FF4  318A  2255         	fcall	_getPercentValue
  8279  1FF6  0020               	movlb	0	; select bank0
  8280  1FF7  00E2               	movwf	??_setDimmerLights_AdjRF
  8281  1FF8  086F               	movf	_DimmerLights,w
  8282  1FF9  3E05               	addlw	5
  8283  1FFA  0086               	movwf	6
  8284  1FFB  3001               	movlw	1	; select bank2/3
  8285  1FFC  0087               	movwf	7
  8286  1FFD  0862               	movf	??_setDimmerLights_AdjRF,w
  8287  1FFE  0081               	movwf	1
  8288  1FFF  0008               	return
  8289  2000                     __end_of_setDimmerLights_AdjRF:	
  8290                           
  8291                           	psect	text34
  8292  0A55                     __ptext34:	
  8293 ;; *************** function _getPercentValue *****************
  8294 ;; Defined at:
  8295 ;;		line 870 in file "../src/Dimmer_B1.c"
  8296 ;; Parameters:    Size  Location     Type
  8297 ;;  value           1    wreg     unsigned char 
  8298 ;; Auto vars:     Size  Location     Type
  8299 ;;  value           1   62[BANK0 ] unsigned char 
  8300 ;;  i               3   63[BANK0 ] float 
  8301 ;; Return value:  Size  Location     Type
  8302 ;;                  1    wreg      unsigned char 
  8303 ;; Registers used:
  8304 ;;		wreg, status,2, status,0, pclath, cstack
  8305 ;; Tracked objects:
  8306 ;;		On entry : 0/0
  8307 ;;		On exit  : 0/0
  8308 ;;		Unchanged: 0/0
  8309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8311 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8312 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8313 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8314 ;;Total ram usage:        6 bytes
  8315 ;; Hardware stack levels used:    1
  8316 ;; Hardware stack levels required when called:    7
  8317 ;; This function calls:
  8318 ;;		___awtoft
  8319 ;;		___ftadd
  8320 ;;		___ftdiv
  8321 ;;		___ftmul
  8322 ;;		___ftneg
  8323 ;;		___fttol
  8324 ;; This function is called by:
  8325 ;;		_setDimmerLights_AdjRF
  8326 ;; This function uses a non-reentrant model
  8327 ;;
  8328                           
  8329                           
  8330                           ;psect for function _getPercentValue
  8331  0A55                     _getPercentValue:	
  8332                           
  8333                           ;incstack = 0
  8334                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8335                           ;getPercentValue@value stored from wreg
  8336  0A55  0020               	movlb	0	; select bank0
  8337  0A56  00DE               	movwf	getPercentValue@value
  8338                           
  8339                           ;Dimmer_B1.c: 878: float i = ((char)(80*0.8)) - ((char)(15*0.8));
  8340  0A57  3000               	movlw	0
  8341  0A58  00DF               	movwf	getPercentValue@i
  8342  0A59  3050               	movlw	80
  8343  0A5A  00E0               	movwf	getPercentValue@i+1
  8344  0A5B  3042               	movlw	66
  8345  0A5C  00E1               	movwf	getPercentValue@i+2
  8346                           
  8347                           ;Dimmer_B1.c: 879: i /= 100;
  8348  0A5D  3000               	movlw	0
  8349  0A5E  00AE               	movwf	___ftdiv@f2
  8350  0A5F  30C8               	movlw	200
  8351  0A60  00AF               	movwf	___ftdiv@f2+1
  8352  0A61  3042               	movlw	66
  8353  0A62  00B0               	movwf	___ftdiv@f2+2
  8354  0A63  085F               	movf	getPercentValue@i,w
  8355  0A64  00B1               	movwf	___ftdiv@f1
  8356  0A65  0860               	movf	getPercentValue@i+1,w
  8357  0A66  00B2               	movwf	___ftdiv@f1+1
  8358  0A67  0861               	movf	getPercentValue@i+2,w
  8359  0A68  00B3               	movwf	___ftdiv@f1+2
  8360  0A69  318E  26A3  318A   	fcall	___ftdiv
  8361  0A6C  0020               	movlb	0	; select bank0
  8362  0A6D  082E               	movf	?___ftdiv,w
  8363  0A6E  00DF               	movwf	getPercentValue@i
  8364  0A6F  082F               	movf	?___ftdiv+1,w
  8365  0A70  00E0               	movwf	getPercentValue@i+1
  8366  0A71  0830               	movf	?___ftdiv+2,w
  8367  0A72  00E1               	movwf	getPercentValue@i+2
  8368                           
  8369                           ;Dimmer_B1.c: 881: return (char) (((char)(80*0.8)) - ((100 - value) * i));
  8370  0A73  085E               	movf	getPercentValue@value,w
  8371  0A74  00DC               	movwf	??_getPercentValue
  8372  0A75  01DD               	clrf	??_getPercentValue+1
  8373  0A76  09DC               	comf	??_getPercentValue,f
  8374  0A77  09DD               	comf	??_getPercentValue+1,f
  8375  0A78  0ADC               	incf	??_getPercentValue,f
  8376  0A79  1903               	skipnz
  8377  0A7A  0ADD               	incf	??_getPercentValue+1,f
  8378  0A7B  085C               	movf	??_getPercentValue,w
  8379  0A7C  3E64               	addlw	100
  8380  0A7D  00A8               	movwf	___awtoft@c
  8381  0A7E  3000               	movlw	0
  8382  0A7F  3D5D               	addwfc	??_getPercentValue+1,w
  8383  0A80  00A9               	movwf	___awtoft@c+1
  8384  0A81  319F  2799  318A   	fcall	___awtoft
  8385  0A84  0020               	movlb	0	; select bank0
  8386  0A85  0828               	movf	?___awtoft,w
  8387  0A86  00B1               	movwf	___ftmul@f2
  8388  0A87  0829               	movf	?___awtoft+1,w
  8389  0A88  00B2               	movwf	___ftmul@f2+1
  8390  0A89  082A               	movf	?___awtoft+2,w
  8391  0A8A  00B3               	movwf	___ftmul@f2+2
  8392  0A8B  085F               	movf	getPercentValue@i,w
  8393  0A8C  00AE               	movwf	___ftmul@f1
  8394  0A8D  0860               	movf	getPercentValue@i+1,w
  8395  0A8E  00AF               	movwf	___ftmul@f1+1
  8396  0A8F  0861               	movf	getPercentValue@i+2,w
  8397  0A90  00B0               	movwf	___ftmul@f1+2
  8398  0A91  318F  274C  318A   	fcall	___ftmul
  8399  0A94  0020               	movlb	0	; select bank0
  8400  0A95  082E               	movf	?___ftmul,w
  8401  0A96  00BE               	movwf	___ftneg@f1
  8402  0A97  082F               	movf	?___ftmul+1,w
  8403  0A98  00BF               	movwf	___ftneg@f1+1
  8404  0A99  0830               	movf	?___ftmul+2,w
  8405  0A9A  00C0               	movwf	___ftneg@f1+2
  8406  0A9B  319B  23B2  318A   	fcall	___ftneg
  8407  0A9E  0020               	movlb	0	; select bank0
  8408  0A9F  083E               	movf	?___ftneg,w
  8409  0AA0  00C4               	movwf	___ftadd@f2
  8410  0AA1  083F               	movf	?___ftneg+1,w
  8411  0AA2  00C5               	movwf	___ftadd@f2+1
  8412  0AA3  0840               	movf	?___ftneg+2,w
  8413  0AA4  00C6               	movwf	___ftadd@f2+2
  8414  0AA5  3000               	movlw	0
  8415  0AA6  00C1               	movwf	___ftadd@f1
  8416  0AA7  3080               	movlw	128
  8417  0AA8  00C2               	movwf	___ftadd@f1+1
  8418  0AA9  3042               	movlw	66
  8419  0AAA  00C3               	movwf	___ftadd@f1+2
  8420  0AAB  3184  243A  318A   	fcall	___ftadd
  8421  0AAE  0020               	movlb	0	; select bank0
  8422  0AAF  0841               	movf	?___ftadd,w
  8423  0AB0  00CE               	movwf	___fttol@f1
  8424  0AB1  0842               	movf	?___ftadd+1,w
  8425  0AB2  00CF               	movwf	___fttol@f1+1
  8426  0AB3  0843               	movf	?___ftadd+2,w
  8427  0AB4  00D0               	movwf	___fttol@f1+2
  8428  0AB5  318C  24EE         	fcall	___fttol
  8429  0AB7  0020               	movlb	0	; select bank0
  8430  0AB8  084E               	movf	?___fttol,w
  8431  0AB9  0008               	return
  8432  0ABA                     __end_of_getPercentValue:	
  8433                           
  8434                           	psect	text35
  8435  0F4C                     __ptext35:	
  8436 ;; *************** function ___ftmul *****************
  8437 ;; Defined at:
  8438 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8439 ;; Parameters:    Size  Location     Type
  8440 ;;  f1              3   14[BANK0 ] float 
  8441 ;;  f2              3   17[BANK0 ] float 
  8442 ;; Auto vars:     Size  Location     Type
  8443 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8444 ;;  sign            1   29[BANK0 ] unsigned char 
  8445 ;;  cntr            1   28[BANK0 ] unsigned char 
  8446 ;;  exp             1   24[BANK0 ] unsigned char 
  8447 ;; Return value:  Size  Location     Type
  8448 ;;                  3   14[BANK0 ] float 
  8449 ;; Registers used:
  8450 ;;		wreg, status,2, status,0, pclath, cstack
  8451 ;; Tracked objects:
  8452 ;;		On entry : 0/0
  8453 ;;		On exit  : 0/0
  8454 ;;		Unchanged: 0/0
  8455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8456 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8457 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8458 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8459 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8460 ;;Total ram usage:       16 bytes
  8461 ;; Hardware stack levels used:    1
  8462 ;; Hardware stack levels required when called:    6
  8463 ;; This function calls:
  8464 ;;		___ftpack
  8465 ;; This function is called by:
  8466 ;;		_getPercentValue
  8467 ;; This function uses a non-reentrant model
  8468 ;;
  8469                           
  8470                           
  8471                           ;psect for function ___ftmul
  8472  0F4C                     ___ftmul:	
  8473                           
  8474                           ;incstack = 0
  8475                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8476  0F4C  0020               	movlb	0	; select bank0
  8477  0F4D  082E               	movf	___ftmul@f1,w
  8478  0F4E  00B4               	movwf	??___ftmul
  8479  0F4F  082F               	movf	___ftmul@f1+1,w
  8480  0F50  00B5               	movwf	??___ftmul+1
  8481  0F51  0830               	movf	___ftmul@f1+2,w
  8482  0F52  00B6               	movwf	??___ftmul+2
  8483  0F53  1003               	clrc
  8484  0F54  0D35               	rlf	??___ftmul+1,w
  8485  0F55  0D36               	rlf	??___ftmul+2,w
  8486  0F56  00B7               	movwf	??___ftmul+3
  8487  0F57  0837               	movf	??___ftmul+3,w
  8488  0F58  00B8               	movwf	___ftmul@exp
  8489  0F59  08B8               	movf	___ftmul@exp,f
  8490  0F5A  1D03               	skipz
  8491  0F5B  2F63               	goto	l5890
  8492  0F5C  3000               	movlw	0
  8493  0F5D  00AE               	movwf	?___ftmul
  8494  0F5E  3000               	movlw	0
  8495  0F5F  00AF               	movwf	?___ftmul+1
  8496  0F60  3000               	movlw	0
  8497  0F61  00B0               	movwf	?___ftmul+2
  8498  0F62  0008               	return
  8499  0F63                     l5890:	
  8500  0F63  0831               	movf	___ftmul@f2,w
  8501  0F64  00B4               	movwf	??___ftmul
  8502  0F65  0832               	movf	___ftmul@f2+1,w
  8503  0F66  00B5               	movwf	??___ftmul+1
  8504  0F67  0833               	movf	___ftmul@f2+2,w
  8505  0F68  00B6               	movwf	??___ftmul+2
  8506  0F69  1003               	clrc
  8507  0F6A  0D35               	rlf	??___ftmul+1,w
  8508  0F6B  0D36               	rlf	??___ftmul+2,w
  8509  0F6C  00B7               	movwf	??___ftmul+3
  8510  0F6D  0837               	movf	??___ftmul+3,w
  8511  0F6E  00BD               	movwf	___ftmul@sign
  8512  0F6F  08BD               	movf	___ftmul@sign,f
  8513  0F70  1D03               	skipz
  8514  0F71  2F79               	goto	l5896
  8515  0F72  3000               	movlw	0
  8516  0F73  00AE               	movwf	?___ftmul
  8517  0F74  3000               	movlw	0
  8518  0F75  00AF               	movwf	?___ftmul+1
  8519  0F76  3000               	movlw	0
  8520  0F77  00B0               	movwf	?___ftmul+2
  8521  0F78  0008               	return
  8522  0F79                     l5896:	
  8523  0F79  083D               	movf	___ftmul@sign,w
  8524  0F7A  3E7B               	addlw	123
  8525  0F7B  00B4               	movwf	??___ftmul
  8526  0F7C  0834               	movf	??___ftmul,w
  8527  0F7D  07B8               	addwf	___ftmul@exp,f
  8528  0F7E  082E               	movf	___ftmul@f1,w
  8529  0F7F  00B4               	movwf	??___ftmul
  8530  0F80  082F               	movf	___ftmul@f1+1,w
  8531  0F81  00B5               	movwf	??___ftmul+1
  8532  0F82  0830               	movf	___ftmul@f1+2,w
  8533  0F83  00B6               	movwf	??___ftmul+2
  8534  0F84  3010               	movlw	16
  8535  0F85                     u4685:	
  8536  0F85  36B6               	lsrf	??___ftmul+2,f
  8537  0F86  0CB5               	rrf	??___ftmul+1,f
  8538  0F87  0CB4               	rrf	??___ftmul,f
  8539  0F88  0B89               	decfsz	9,f
  8540  0F89  2F85               	goto	u4685
  8541  0F8A  0834               	movf	??___ftmul,w
  8542  0F8B  00B7               	movwf	??___ftmul+3
  8543  0F8C  0837               	movf	??___ftmul+3,w
  8544  0F8D  00BD               	movwf	___ftmul@sign
  8545  0F8E  0831               	movf	___ftmul@f2,w
  8546  0F8F  00B4               	movwf	??___ftmul
  8547  0F90  0832               	movf	___ftmul@f2+1,w
  8548  0F91  00B5               	movwf	??___ftmul+1
  8549  0F92  0833               	movf	___ftmul@f2+2,w
  8550  0F93  00B6               	movwf	??___ftmul+2
  8551  0F94  3010               	movlw	16
  8552  0F95                     u4695:	
  8553  0F95  36B6               	lsrf	??___ftmul+2,f
  8554  0F96  0CB5               	rrf	??___ftmul+1,f
  8555  0F97  0CB4               	rrf	??___ftmul,f
  8556  0F98  0B89               	decfsz	9,f
  8557  0F99  2F95               	goto	u4695
  8558  0F9A  0834               	movf	??___ftmul,w
  8559  0F9B  00B7               	movwf	??___ftmul+3
  8560  0F9C  0837               	movf	??___ftmul+3,w
  8561  0F9D  06BD               	xorwf	___ftmul@sign,f
  8562  0F9E  3080               	movlw	128
  8563  0F9F  00B4               	movwf	??___ftmul
  8564  0FA0  0834               	movf	??___ftmul,w
  8565  0FA1  05BD               	andwf	___ftmul@sign,f
  8566  0FA2  17AF               	bsf	___ftmul@f1+1,7
  8567  0FA3  17B2               	bsf	___ftmul@f2+1,7
  8568  0FA4  30FF               	movlw	255
  8569  0FA5  05B1               	andwf	___ftmul@f2,f
  8570  0FA6  30FF               	movlw	255
  8571  0FA7  05B2               	andwf	___ftmul@f2+1,f
  8572  0FA8  3000               	movlw	0
  8573  0FA9  05B3               	andwf	___ftmul@f2+2,f
  8574  0FAA  3000               	movlw	0
  8575  0FAB  00B9               	movwf	___ftmul@f3_as_product
  8576  0FAC  3000               	movlw	0
  8577  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  8578  0FAE  3000               	movlw	0
  8579  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  8580  0FB0  3007               	movlw	7
  8581  0FB1  00B4               	movwf	??___ftmul
  8582  0FB2  0834               	movf	??___ftmul,w
  8583  0FB3  00BC               	movwf	___ftmul@cntr
  8584  0FB4                     l5908:	
  8585  0FB4  1C2E               	btfss	___ftmul@f1,0
  8586  0FB5  2FBC               	goto	l5912
  8587  0FB6  0831               	movf	___ftmul@f2,w
  8588  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  8589  0FB8  0832               	movf	___ftmul@f2+1,w
  8590  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8591  0FBA  0833               	movf	___ftmul@f2+2,w
  8592  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8593  0FBC                     l5912:	
  8594  0FBC  3001               	movlw	1
  8595  0FBD                     u4715:	
  8596  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  8597  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  8598  0FBF  0CAE               	rrf	___ftmul@f1,f
  8599  0FC0  0B89               	decfsz	9,f
  8600  0FC1  2FBD               	goto	u4715
  8601  0FC2  3001               	movlw	1
  8602  0FC3                     u4725:	
  8603  0FC3  35B1               	lslf	___ftmul@f2,f
  8604  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  8605  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  8606  0FC6  0B89               	decfsz	9,f
  8607  0FC7  2FC3               	goto	u4725
  8608  0FC8  3001               	movlw	1
  8609  0FC9  02BC               	subwf	___ftmul@cntr,f
  8610  0FCA  1D03               	btfss	3,2
  8611  0FCB  2FB4               	goto	l5908
  8612  0FCC  3009               	movlw	9
  8613  0FCD  00B4               	movwf	??___ftmul
  8614  0FCE  0834               	movf	??___ftmul,w
  8615  0FCF  00BC               	movwf	___ftmul@cntr
  8616  0FD0                     l5920:	
  8617  0FD0  1C2E               	btfss	___ftmul@f1,0
  8618  0FD1  2FD8               	goto	l5924
  8619  0FD2  0831               	movf	___ftmul@f2,w
  8620  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  8621  0FD4  0832               	movf	___ftmul@f2+1,w
  8622  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8623  0FD6  0833               	movf	___ftmul@f2+2,w
  8624  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8625  0FD8                     l5924:	
  8626  0FD8  3001               	movlw	1
  8627  0FD9                     u4755:	
  8628  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  8629  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  8630  0FDB  0CAE               	rrf	___ftmul@f1,f
  8631  0FDC  0B89               	decfsz	9,f
  8632  0FDD  2FD9               	goto	u4755
  8633  0FDE  3001               	movlw	1
  8634  0FDF                     u4765:	
  8635  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8636  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8637  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  8638  0FE2  0B89               	decfsz	9,f
  8639  0FE3  2FDF               	goto	u4765
  8640  0FE4  3001               	movlw	1
  8641  0FE5  02BC               	subwf	___ftmul@cntr,f
  8642  0FE6  1D03               	btfss	3,2
  8643  0FE7  2FD0               	goto	l5920
  8644  0FE8  0839               	movf	___ftmul@f3_as_product,w
  8645  0FE9  00A0               	movwf	___ftpack@arg
  8646  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  8647  0FEB  00A1               	movwf	___ftpack@arg+1
  8648  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  8649  0FED  00A2               	movwf	___ftpack@arg+2
  8650  0FEE  0838               	movf	___ftmul@exp,w
  8651  0FEF  00B4               	movwf	??___ftmul
  8652  0FF0  0834               	movf	??___ftmul,w
  8653  0FF1  00A3               	movwf	___ftpack@exp
  8654  0FF2  083D               	movf	___ftmul@sign,w
  8655  0FF3  00B5               	movwf	??___ftmul+1
  8656  0FF4  0835               	movf	??___ftmul+1,w
  8657  0FF5  00A4               	movwf	___ftpack@sign
  8658  0FF6  3189  212A         	fcall	___ftpack
  8659  0FF8  0020               	movlb	0	; select bank0
  8660  0FF9  0820               	movf	?___ftpack,w
  8661  0FFA  00AE               	movwf	?___ftmul
  8662  0FFB  0821               	movf	?___ftpack+1,w
  8663  0FFC  00AF               	movwf	?___ftmul+1
  8664  0FFD  0822               	movf	?___ftpack+2,w
  8665  0FFE  00B0               	movwf	?___ftmul+2
  8666  0FFF  0008               	return
  8667  1000                     __end_of___ftmul:	
  8668                           
  8669                           	psect	text36
  8670  1D18                     __ptext36:	
  8671 ;; *************** function _setMemory_Modify *****************
  8672 ;; Defined at:
  8673 ;;		line 1000 in file "../src/MCU_B1.c"
  8674 ;; Parameters:    Size  Location     Type
  8675 ;;  command         1    wreg     unsigned char 
  8676 ;; Auto vars:     Size  Location     Type
  8677 ;;  command         1    1[BANK0 ] unsigned char 
  8678 ;; Return value:  Size  Location     Type
  8679 ;;		None               void
  8680 ;; Registers used:
  8681 ;;		wreg, status,2, status,0
  8682 ;; Tracked objects:
  8683 ;;		On entry : 0/0
  8684 ;;		On exit  : 0/0
  8685 ;;		Unchanged: 0/0
  8686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8688 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8689 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8690 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8691 ;;Total ram usage:        2 bytes
  8692 ;; Hardware stack levels used:    1
  8693 ;; Hardware stack levels required when called:    5
  8694 ;; This function calls:
  8695 ;;		Nothing
  8696 ;; This function is called by:
  8697 ;;		_setLog_Code
  8698 ;;		_setRFSW_AdjControl
  8699 ;; This function uses a non-reentrant model
  8700 ;;
  8701                           
  8702                           
  8703                           ;psect for function _setMemory_Modify
  8704  1D18                     _setMemory_Modify:	
  8705                           
  8706                           ;incstack = 0
  8707                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8708                           ;setMemory_Modify@command stored from wreg
  8709  1D18  0020               	movlb	0	; select bank0
  8710  1D19  00A1               	movwf	setMemory_Modify@command
  8711                           
  8712                           ;MCU_B1.c: 1001: Memory.Modify = command == 1 ? 1 : 0;
  8713  1D1A  0821               	movf	setMemory_Modify@command,w
  8714  1D1B  3A01               	xorlw	1
  8715  1D1C  3000               	movlw	0
  8716  1D1D  1903               	skipnz
  8717  1D1E  3001               	movlw	1
  8718  1D1F  00A0               	movwf	??_setMemory_Modify
  8719  1D20  0024               	movlb	4	; select bank4
  8720  1D21  0844               	movf	(_Memory^(0+512)+36),w
  8721  1D22  0020               	movlb	0	; select bank0
  8722  1D23  0620               	xorwf	??_setMemory_Modify,w
  8723  1D24  39FE               	andlw	-2
  8724  1D25  0620               	xorwf	??_setMemory_Modify,w
  8725  1D26  0024               	movlb	4	; select bank4
  8726  1D27  00C4               	movwf	(_Memory^(0+512)+36)
  8727                           
  8728                           ;MCU_B1.c: 1002: Memory.Time = 0;
  8729  1D28  01C2               	clrf	(_Memory^(0+512)+34)
  8730  1D29  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8731  1D2A  0008               	return
  8732  1D2B                     __end_of_setMemory_Modify:	
  8733                           
  8734                           	psect	text37
  8735  1CAC                     __ptext37:	
  8736 ;; *************** function _getRF_KeyStatus *****************
  8737 ;; Defined at:
  8738 ;;		line 187 in file "../src/RF_Control_B1.c"
  8739 ;; Parameters:    Size  Location     Type
  8740 ;;		None
  8741 ;; Auto vars:     Size  Location     Type
  8742 ;;  key             1    1[BANK0 ] unsigned char 
  8743 ;; Return value:  Size  Location     Type
  8744 ;;                  1    wreg      unsigned char 
  8745 ;; Registers used:
  8746 ;;		wreg, status,2
  8747 ;; Tracked objects:
  8748 ;;		On entry : 0/0
  8749 ;;		On exit  : 0/0
  8750 ;;		Unchanged: 0/0
  8751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8753 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8754 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8755 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8756 ;;Total ram usage:        3 bytes
  8757 ;; Hardware stack levels used:    1
  8758 ;; Hardware stack levels required when called:    5
  8759 ;; This function calls:
  8760 ;;		Nothing
  8761 ;; This function is called by:
  8762 ;;		_setRF_Main
  8763 ;; This function uses a non-reentrant model
  8764 ;;
  8765                           
  8766                           
  8767                           ;psect for function _getRF_KeyStatus
  8768  1CAC                     _getRF_KeyStatus:	
  8769                           
  8770                           ;RF_Control_B1.c: 188: char key = 0;
  8771                           
  8772                           ;incstack = 0
  8773                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8774  1CAC  0020               	movlb	0	; select bank0
  8775  1CAD  01A1               	clrf	getRF_KeyStatus@key
  8776                           
  8777                           ;RF_Control_B1.c: 194: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8778  1CAE  01A2               	clrf	_getRF_KeyStatus$5256
  8779  1CAF  0AA2               	incf	_getRF_KeyStatus$5256,f
  8780  1CB0  1F0C               	btfss	12,6	;volatile
  8781  1CB1  1A0C               	btfsc	12,4	;volatile
  8782  1CB2  2CB7               	goto	l6936
  8783  1CB3  1C0C               	btfss	12,0	;volatile
  8784  1CB4  188D               	btfsc	13,1	;volatile
  8785  1CB5  2CB7               	goto	l6936
  8786  1CB6  01A2               	clrf	_getRF_KeyStatus$5256
  8787  1CB7                     l6936:	
  8788  1CB7  0822               	movf	_getRF_KeyStatus$5256,w
  8789  1CB8  00A0               	movwf	??_getRF_KeyStatus
  8790  1CB9  0820               	movf	??_getRF_KeyStatus,w
  8791  1CBA  00A1               	movwf	getRF_KeyStatus@key
  8792                           
  8793                           ;RF_Control_B1.c: 200: return key;
  8794  1CBB  0821               	movf	getRF_KeyStatus@key,w
  8795  1CBC  0008               	return
  8796  1CBD                     __end_of_getRF_KeyStatus:	
  8797                           
  8798                           	psect	text38
  8799  1C9B                     __ptext38:	
  8800 ;; *************** function _getBuz_GO *****************
  8801 ;; Defined at:
  8802 ;;		line 82 in file "../src/Buzzer_B1.c"
  8803 ;; Parameters:    Size  Location     Type
  8804 ;;		None
  8805 ;; Auto vars:     Size  Location     Type
  8806 ;;  i               2    4[BANK0 ] int 
  8807 ;; Return value:  Size  Location     Type
  8808 ;;                  2    0[BANK0 ] int 
  8809 ;; Registers used:
  8810 ;;		wreg, status,2, status,0
  8811 ;; Tracked objects:
  8812 ;;		On entry : 0/0
  8813 ;;		On exit  : 0/0
  8814 ;;		Unchanged: 0/0
  8815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8816 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8817 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8818 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8819 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8820 ;;Total ram usage:        6 bytes
  8821 ;; Hardware stack levels used:    1
  8822 ;; Hardware stack levels required when called:    5
  8823 ;; This function calls:
  8824 ;;		Nothing
  8825 ;; This function is called by:
  8826 ;;		_setRF_Main
  8827 ;; This function uses a non-reentrant model
  8828 ;;
  8829                           
  8830                           
  8831                           ;psect for function _getBuz_GO
  8832  1C9B                     _getBuz_GO:	
  8833                           
  8834                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8835                           
  8836                           ;incstack = 0
  8837                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8838  1C9B  0021               	movlb	1	; select bank1
  8839  1C9C  0C30               	rrf	_Buz1^(0+128),w
  8840  1C9D  3901               	andlw	1
  8841  1C9E  0020               	movlb	0	; select bank0
  8842  1C9F  00A2               	movwf	??_getBuz_GO
  8843  1CA0  01A3               	clrf	??_getBuz_GO+1
  8844  1CA1  0822               	movf	??_getBuz_GO,w
  8845  1CA2  00A4               	movwf	getBuz_GO@i
  8846  1CA3  0823               	movf	??_getBuz_GO+1,w
  8847  1CA4  00A5               	movwf	getBuz_GO@i+1
  8848                           
  8849                           ;Buzzer_B1.c: 84: return i;
  8850  1CA5  0825               	movf	getBuz_GO@i+1,w
  8851  1CA6  01A1               	clrf	?_getBuz_GO+1
  8852  1CA7  07A1               	addwf	?_getBuz_GO+1,f
  8853  1CA8  0824               	movf	getBuz_GO@i,w
  8854  1CA9  01A0               	clrf	?_getBuz_GO
  8855  1CAA  07A0               	addwf	?_getBuz_GO,f
  8856  1CAB  0008               	return
  8857  1CAC                     __end_of_getBuz_GO:	
  8858                           
  8859                           	psect	text39
  8860  09F0                     __ptext39:	
  8861 ;; *************** function _CC2500_TxData *****************
  8862 ;; Defined at:
  8863 ;;		line 32 in file "../src/CC2500_B1.c"
  8864 ;; Parameters:    Size  Location     Type
  8865 ;;		None
  8866 ;; Auto vars:     Size  Location     Type
  8867 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8868 ;; Return value:  Size  Location     Type
  8869 ;;		None               void
  8870 ;; Registers used:
  8871 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8872 ;; Tracked objects:
  8873 ;;		On entry : 0/0
  8874 ;;		On exit  : 0/0
  8875 ;;		Unchanged: 0/0
  8876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8878 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8879 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8880 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8881 ;;Total ram usage:        2 bytes
  8882 ;; Hardware stack levels used:    1
  8883 ;; Hardware stack levels required when called:    7
  8884 ;; This function calls:
  8885 ;;		_CC2500_WriteByte
  8886 ;;		_CC2500_WriteCommand
  8887 ;;		_Timeout_Counter
  8888 ;;		_set_TimeoutCleared
  8889 ;; This function is called by:
  8890 ;;		_setRF_Main
  8891 ;; This function uses a non-reentrant model
  8892 ;;
  8893                           
  8894                           
  8895                           ;psect for function _CC2500_TxData
  8896  09F0                     _CC2500_TxData:	
  8897                           
  8898                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8899                           ;CC2500_B1.c: 35: RC4 = 0;
  8900                           
  8901                           ;incstack = 0
  8902                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8903  09F0  0020               	movlb	0	; select bank0
  8904  09F1  120E               	bcf	14,4	;volatile
  8905                           
  8906                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8907  09F2  307F               	movlw	127
  8908  09F3  00A4               	movwf	??_CC2500_TxData
  8909  09F4  0824               	movf	??_CC2500_TxData,w
  8910  09F5  00FB               	movwf	_SPI0Buffer
  8911                           
  8912                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8913  09F6  29FA               	goto	l6592
  8914  09F7                     l6590:	
  8915                           
  8916                           ;CC2500_B1.c: 38: Timeout_Counter();
  8917  09F7  319D  25A1  3189   	fcall	_Timeout_Counter
  8918  09FA                     l6592:	
  8919  09FA  0020               	movlb	0	; select bank0
  8920  09FB  1D0E               	btfss	14,2	;volatile
  8921  09FC  2A00               	goto	l6596
  8922  09FD  0021               	movlb	1	; select bank1
  8923  09FE  1D2D               	btfss	(_myMain^(0+128)+13),2
  8924  09FF  29F7               	goto	l6590
  8925  0A00                     l6596:	
  8926                           
  8927                           ;CC2500_B1.c: 39: };
  8928                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8929  0A00  319B  235F  3189   	fcall	_set_TimeoutCleared
  8930                           
  8931                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8932  0A03  319D  2565  3189   	fcall	_CC2500_WriteByte
  8933                           
  8934                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8935  0A06  0021               	movlb	1	; select bank1
  8936  0A07  0853               	movf	_Tx_Length^(0+128),w
  8937  0A08  0020               	movlb	0	; select bank0
  8938  0A09  00A4               	movwf	??_CC2500_TxData
  8939  0A0A  0824               	movf	??_CC2500_TxData,w
  8940  0A0B  00FB               	movwf	_SPI0Buffer
  8941                           
  8942                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8943  0A0C  319D  2565  3189   	fcall	_CC2500_WriteByte
  8944                           
  8945                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8946  0A0F  0020               	movlb	0	; select bank0
  8947  0A10  01A5               	clrf	CC2500_TxData@loop_e
  8948  0A11                     l6610:	
  8949  0A11  0021               	movlb	1	; select bank1
  8950  0A12  0853               	movf	_Tx_Length^(0+128),w
  8951  0A13  0020               	movlb	0	; select bank0
  8952  0A14  0225               	subwf	CC2500_TxData@loop_e,w
  8953  0A15  1803               	btfsc	3,0
  8954  0A16  2A29               	goto	l255
  8955                           
  8956                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8957  0A17  0825               	movf	CC2500_TxData@loop_e,w
  8958  0A18  3EA0               	addlw	_RF_Data& (0+255)
  8959  0A19  0086               	movwf	6
  8960  0A1A  3001               	movlw	1	; select bank3/4
  8961  0A1B  0087               	movwf	7
  8962  0A1C  0801               	movf	1,w
  8963  0A1D  00A4               	movwf	??_CC2500_TxData
  8964  0A1E  0824               	movf	??_CC2500_TxData,w
  8965  0A1F  00FB               	movwf	_SPI0Buffer
  8966                           
  8967                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8968  0A20  319D  2565  3189   	fcall	_CC2500_WriteByte
  8969  0A23  3001               	movlw	1
  8970  0A24  0020               	movlb	0	; select bank0
  8971  0A25  00A4               	movwf	??_CC2500_TxData
  8972  0A26  0824               	movf	??_CC2500_TxData,w
  8973  0A27  07A5               	addwf	CC2500_TxData@loop_e,f
  8974  0A28  2A11               	goto	l6610
  8975  0A29                     l255:	
  8976                           
  8977                           ;CC2500_B1.c: 48: }
  8978                           ;CC2500_B1.c: 49: RC4 = 1;
  8979  0A29  160E               	bsf	14,4	;volatile
  8980                           
  8981                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8982  0A2A  3035               	movlw	53
  8983  0A2B  319E  2639  3189   	fcall	_CC2500_WriteCommand
  8984                           
  8985                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  8986  0A2E  2A32               	goto	l6616
  8987  0A2F                     l6614:	
  8988                           
  8989                           ;CC2500_B1.c: 52: Timeout_Counter();
  8990  0A2F  319D  25A1  3189   	fcall	_Timeout_Counter
  8991  0A32                     l6616:	
  8992  0A32  0020               	movlb	0	; select bank0
  8993  0A33  180D               	btfsc	13,0	;volatile
  8994  0A34  2A38               	goto	l6620
  8995  0A35  0021               	movlb	1	; select bank1
  8996  0A36  1D2D               	btfss	(_myMain^(0+128)+13),2
  8997  0A37  2A2F               	goto	l6614
  8998  0A38                     l6620:	
  8999                           
  9000                           ;CC2500_B1.c: 53: };
  9001                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9002  0A38  319B  235F  3189   	fcall	_set_TimeoutCleared
  9003                           
  9004                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9005  0A3B  2A3F               	goto	l6624
  9006  0A3C                     l6622:	
  9007                           
  9008                           ;CC2500_B1.c: 57: Timeout_Counter();
  9009  0A3C  319D  25A1  3189   	fcall	_Timeout_Counter
  9010  0A3F                     l6624:	
  9011  0A3F  0020               	movlb	0	; select bank0
  9012  0A40  1C0D               	btfss	13,0	;volatile
  9013  0A41  2A45               	goto	l6628
  9014  0A42  0021               	movlb	1	; select bank1
  9015  0A43  1D2D               	btfss	(_myMain^(0+128)+13),2
  9016  0A44  2A3C               	goto	l6622
  9017  0A45                     l6628:	
  9018                           
  9019                           ;CC2500_B1.c: 58: };
  9020                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9021  0A45  319B  235F  3189   	fcall	_set_TimeoutCleared
  9022                           
  9023                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9024  0A48  3036               	movlw	54
  9025  0A49  319E  2639  3189   	fcall	_CC2500_WriteCommand
  9026                           
  9027                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9028  0A4C  303B               	movlw	59
  9029  0A4D  319E  2639  3189   	fcall	_CC2500_WriteCommand
  9030                           
  9031                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  9032  0A50  303A               	movlw	58
  9033  0A51  319E  2639         	fcall	_CC2500_WriteCommand
  9034                           
  9035                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9036  0A53  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9037  0A54  0008               	return
  9038  0A55                     __end_of_CC2500_TxData:	
  9039                           
  9040                           	psect	text40
  9041  0B88                     __ptext40:	
  9042 ;; *************** function _CC2500_RxData *****************
  9043 ;; Defined at:
  9044 ;;		line 70 in file "../src/CC2500_B1.c"
  9045 ;; Parameters:    Size  Location     Type
  9046 ;;		None
  9047 ;; Auto vars:     Size  Location     Type
  9048 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9049 ;; Return value:  Size  Location     Type
  9050 ;;		None               void
  9051 ;; Registers used:
  9052 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9053 ;; Tracked objects:
  9054 ;;		On entry : 0/0
  9055 ;;		On exit  : 0/0
  9056 ;;		Unchanged: 0/0
  9057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9060 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9061 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9062 ;;Total ram usage:        2 bytes
  9063 ;; Hardware stack levels used:    1
  9064 ;; Hardware stack levels required when called:    7
  9065 ;; This function calls:
  9066 ;;		_CC2500_ReadByte
  9067 ;;		_CC2500_ReadStatus
  9068 ;;		_CC2500_WriteByte
  9069 ;;		_Timeout_Counter
  9070 ;;		_set_TimeoutCleared
  9071 ;; This function is called by:
  9072 ;;		_setRF_Main
  9073 ;; This function uses a non-reentrant model
  9074 ;;
  9075                           
  9076                           
  9077                           ;psect for function _CC2500_RxData
  9078  0B88                     _CC2500_RxData:	
  9079                           
  9080                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9081                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9082                           
  9083                           ;incstack = 0
  9084                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9085  0B88  0020               	movlb	0	; select bank0
  9086  0B89  180D               	btfsc	13,0	;volatile
  9087  0B8A  2B8F               	goto	l6644
  9088  0B8B  2B98               	goto	l6650
  9089  0B8C                     l6642:	
  9090                           ;CC2500_B1.c: 76: {
  9091                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9092                           
  9093                           
  9094                           ;CC2500_B1.c: 78: Timeout_Counter();
  9095  0B8C  319D  25A1  318B   	fcall	_Timeout_Counter
  9096  0B8F                     l6644:	
  9097  0B8F  0020               	movlb	0	; select bank0
  9098  0B90  1C0D               	btfss	13,0	;volatile
  9099  0B91  2B95               	goto	l6648
  9100  0B92  0021               	movlb	1	; select bank1
  9101  0B93  1D2D               	btfss	(_myMain^(0+128)+13),2
  9102  0B94  2B8C               	goto	l6642
  9103  0B95                     l6648:	
  9104                           
  9105                           ;CC2500_B1.c: 79: };
  9106                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9107  0B95  319B  235F  318B   	fcall	_set_TimeoutCleared
  9108  0B98                     l6650:	
  9109                           
  9110                           ;CC2500_B1.c: 81: }
  9111                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9112  0B98  303B               	movlw	59
  9113  0B99  319F  27BB  318B   	fcall	_CC2500_ReadStatus
  9114                           
  9115                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9116  0B9C  0021               	movlb	1	; select bank1
  9117  0B9D  0856               	movf	_s_data^(0+128),w
  9118  0B9E  1903               	btfsc	3,2
  9119  0B9F  0008               	return
  9120                           
  9121                           ;CC2500_B1.c: 86: RC4 = 0;
  9122  0BA0  0020               	movlb	0	; select bank0
  9123  0BA1  120E               	bcf	14,4	;volatile
  9124                           
  9125                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9126  0BA2  30FF               	movlw	255
  9127  0BA3  00A4               	movwf	??_CC2500_RxData
  9128  0BA4  0824               	movf	??_CC2500_RxData,w
  9129  0BA5  00FB               	movwf	_SPI0Buffer
  9130                           
  9131                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9132  0BA6  2BAD               	goto	l6660
  9133  0BA7                     l6662:	
  9134  0BA7  0021               	movlb	1	; select bank1
  9135  0BA8  192D               	btfsc	(_myMain^(0+128)+13),2
  9136  0BA9  2BB0               	goto	l280
  9137                           
  9138                           ;CC2500_B1.c: 89: Timeout_Counter();
  9139  0BAA  319D  25A1  318B   	fcall	_Timeout_Counter
  9140  0BAD                     l6660:	
  9141  0BAD  0020               	movlb	0	; select bank0
  9142  0BAE  190E               	btfsc	14,2	;volatile
  9143  0BAF  2BA7               	goto	l6662
  9144  0BB0                     l280:	
  9145                           
  9146                           ;CC2500_B1.c: 90: };
  9147                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  9148  0BB0  0021               	movlb	1	; select bank1
  9149  0BB1  192D               	btfsc	(_myMain^(0+128)+13),2
  9150  0BB2  2BF3               	goto	l281
  9151                           
  9152                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9153  0BB3  319D  2565  318B   	fcall	_CC2500_WriteByte
  9154                           
  9155                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9156  0BB6  319E  2622  318B   	fcall	_CC2500_ReadByte
  9157                           
  9158                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9159  0BB9  087B               	movf	_SPI0Buffer,w
  9160  0BBA  0020               	movlb	0	; select bank0
  9161  0BBB  00A4               	movwf	??_CC2500_RxData
  9162  0BBC  0824               	movf	??_CC2500_RxData,w
  9163  0BBD  0021               	movlb	1	; select bank1
  9164  0BBE  00D1               	movwf	_Rx_Length^(0+128)
  9165                           
  9166                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9167  0BBF  0020               	movlb	0	; select bank0
  9168  0BC0  01A5               	clrf	CC2500_RxData@loop_f
  9169  0BC1                     l6676:	
  9170  0BC1  0021               	movlb	1	; select bank1
  9171  0BC2  0851               	movf	_Rx_Length^(0+128),w
  9172  0BC3  0020               	movlb	0	; select bank0
  9173  0BC4  0225               	subwf	CC2500_RxData@loop_f,w
  9174  0BC5  1803               	btfsc	3,0
  9175  0BC6  2BD9               	goto	l6678
  9176                           
  9177                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9178  0BC7  319E  2622  318B   	fcall	_CC2500_ReadByte
  9179                           
  9180                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9181  0BCA  087B               	movf	_SPI0Buffer,w
  9182  0BCB  0020               	movlb	0	; select bank0
  9183  0BCC  00A4               	movwf	??_CC2500_RxData
  9184  0BCD  0825               	movf	CC2500_RxData@loop_f,w
  9185  0BCE  3EA0               	addlw	_RF_Data& (0+255)
  9186  0BCF  0086               	movwf	6
  9187  0BD0  3001               	movlw	1	; select bank3/4
  9188  0BD1  0087               	movwf	7
  9189  0BD2  0824               	movf	??_CC2500_RxData,w
  9190  0BD3  0081               	movwf	1
  9191  0BD4  3001               	movlw	1
  9192  0BD5  00A4               	movwf	??_CC2500_RxData
  9193  0BD6  0824               	movf	??_CC2500_RxData,w
  9194  0BD7  07A5               	addwf	CC2500_RxData@loop_f,f
  9195  0BD8  2BC1               	goto	l6676
  9196  0BD9                     l6678:	
  9197                           
  9198                           ;CC2500_B1.c: 99: }
  9199                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9200  0BD9  319E  2622  318B   	fcall	_CC2500_ReadByte
  9201                           
  9202                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9203  0BDC  087B               	movf	_SPI0Buffer,w
  9204  0BDD  0020               	movlb	0	; select bank0
  9205  0BDE  00A4               	movwf	??_CC2500_RxData
  9206  0BDF  0824               	movf	??_CC2500_RxData,w
  9207  0BE0  0021               	movlb	1	; select bank1
  9208  0BE1  00D0               	movwf	_RSSI^(0+128)
  9209                           
  9210                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9211  0BE2  319E  2622  318B   	fcall	_CC2500_ReadByte
  9212                           
  9213                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9214  0BE5  087B               	movf	_SPI0Buffer,w
  9215  0BE6  0020               	movlb	0	; select bank0
  9216  0BE7  00A4               	movwf	??_CC2500_RxData
  9217  0BE8  0824               	movf	??_CC2500_RxData,w
  9218  0BE9  0021               	movlb	1	; select bank1
  9219  0BEA  00CC               	movwf	_CRC^(0+128)
  9220                           
  9221                           ;CC2500_B1.c: 104: RC4 = 1;
  9222  0BEB  0020               	movlb	0	; select bank0
  9223  0BEC  160E               	bsf	14,4	;volatile
  9224                           
  9225                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9226  0BED  0021               	movlb	1	; select bank1
  9227  0BEE  1BCC               	btfsc	_CRC^(0+128),7
  9228                           
  9229                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9230  0BEF  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9231                           
  9232                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9233  0BF0  11BC               	bcf	_RF1^(0+128),3
  9234                           
  9235                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9236  0BF1  14BC               	bsf	_RF1^(0+128),1
  9237                           
  9238                           ;CC2500_B1.c: 110: } else {
  9239  0BF2  2BF5               	goto	l6690
  9240  0BF3                     l281:	
  9241                           
  9242                           ;CC2500_B1.c: 111: RC4 = 1;
  9243  0BF3  0020               	movlb	0	; select bank0
  9244  0BF4  160E               	bsf	14,4	;volatile
  9245  0BF5                     l6690:	
  9246                           
  9247                           ;CC2500_B1.c: 112: }
  9248                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  9249  0BF5  319B  235F         	fcall	_set_TimeoutCleared
  9250  0BF7  0021               	movlb	1	; select bank1
  9251  0BF8  0008               	return
  9252  0BF9                     __end_of_CC2500_RxData:	
  9253                           
  9254                           	psect	text41
  9255  1FBB                     __ptext41:	
  9256 ;; *************** function _CC2500_ReadStatus *****************
  9257 ;; Defined at:
  9258 ;;		line 304 in file "../src/CC2500_B1.c"
  9259 ;; Parameters:    Size  Location     Type
  9260 ;;  status_addr     1    wreg     unsigned char 
  9261 ;; Auto vars:     Size  Location     Type
  9262 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9263 ;; Return value:  Size  Location     Type
  9264 ;;		None               void
  9265 ;; Registers used:
  9266 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9267 ;; Tracked objects:
  9268 ;;		On entry : 0/0
  9269 ;;		On exit  : 0/0
  9270 ;;		Unchanged: 0/0
  9271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9273 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9274 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9275 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9276 ;;Total ram usage:        2 bytes
  9277 ;; Hardware stack levels used:    1
  9278 ;; Hardware stack levels required when called:    6
  9279 ;; This function calls:
  9280 ;;		_CC2500_ReadByte
  9281 ;;		_CC2500_WriteByte
  9282 ;;		_Timeout_Counter
  9283 ;;		_set_TimeoutCleared
  9284 ;; This function is called by:
  9285 ;;		_CC2500_RxData
  9286 ;;		_setRF_Main
  9287 ;; This function uses a non-reentrant model
  9288 ;;
  9289                           
  9290                           
  9291                           ;psect for function _CC2500_ReadStatus
  9292  1FBB                     _CC2500_ReadStatus:	
  9293                           
  9294                           ;incstack = 0
  9295                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9296                           ;CC2500_ReadStatus@status_addr stored from wreg
  9297  1FBB  0020               	movlb	0	; select bank0
  9298  1FBC  00A3               	movwf	CC2500_ReadStatus@status_addr
  9299                           
  9300                           ;CC2500_B1.c: 305: RC4 = 0;
  9301  1FBD  120E               	bcf	14,4	;volatile
  9302                           
  9303                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  9304  1FBE  0823               	movf	CC2500_ReadStatus@status_addr,w
  9305  1FBF  3EC0               	addlw	192
  9306  1FC0  00A2               	movwf	??_CC2500_ReadStatus
  9307  1FC1  0822               	movf	??_CC2500_ReadStatus,w
  9308  1FC2  00FB               	movwf	_SPI0Buffer
  9309                           
  9310                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  9311  1FC3  2FC7               	goto	l6422
  9312  1FC4                     l6420:	
  9313                           
  9314                           ;CC2500_B1.c: 309: Timeout_Counter();
  9315  1FC4  319D  25A1  319F   	fcall	_Timeout_Counter
  9316  1FC7                     l6422:	
  9317  1FC7  0020               	movlb	0	; select bank0
  9318  1FC8  1D0E               	btfss	14,2	;volatile
  9319  1FC9  2FCD               	goto	l6426
  9320  1FCA  0021               	movlb	1	; select bank1
  9321  1FCB  1D2D               	btfss	(_myMain^(0+128)+13),2
  9322  1FCC  2FC4               	goto	l6420
  9323  1FCD                     l6426:	
  9324                           
  9325                           ;CC2500_B1.c: 310: };
  9326                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  9327  1FCD  319B  235F  319F   	fcall	_set_TimeoutCleared
  9328                           
  9329                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  9330  1FD0  319D  2565  319F   	fcall	_CC2500_WriteByte
  9331                           
  9332                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  9333  1FD3  319E  2622         	fcall	_CC2500_ReadByte
  9334                           
  9335                           ;CC2500_B1.c: 315: RC4 = 1;
  9336  1FD5  0020               	movlb	0	; select bank0
  9337  1FD6  160E               	bsf	14,4	;volatile
  9338                           
  9339                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  9340  1FD7  087B               	movf	_SPI0Buffer,w
  9341  1FD8  00A2               	movwf	??_CC2500_ReadStatus
  9342  1FD9  0822               	movf	??_CC2500_ReadStatus,w
  9343  1FDA  0021               	movlb	1	; select bank1
  9344  1FDB  00D6               	movwf	_s_data^(0+128)
  9345  1FDC  0008               	return
  9346  1FDD                     __end_of_CC2500_ReadStatus:	
  9347                           
  9348                           	psect	text42
  9349  1E22                     __ptext42:	
  9350 ;; *************** function _CC2500_ReadByte *****************
  9351 ;; Defined at:
  9352 ;;		line 238 in file "../src/CC2500_B1.c"
  9353 ;; Parameters:    Size  Location     Type
  9354 ;;		None
  9355 ;; Auto vars:     Size  Location     Type
  9356 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9357 ;; Return value:  Size  Location     Type
  9358 ;;		None               void
  9359 ;; Registers used:
  9360 ;;		wreg, status,2, status,0
  9361 ;; Tracked objects:
  9362 ;;		On entry : 0/0
  9363 ;;		On exit  : 0/0
  9364 ;;		Unchanged: 0/0
  9365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9367 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9368 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9369 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9370 ;;Total ram usage:        2 bytes
  9371 ;; Hardware stack levels used:    1
  9372 ;; Hardware stack levels required when called:    5
  9373 ;; This function calls:
  9374 ;;		Nothing
  9375 ;; This function is called by:
  9376 ;;		_CC2500_RxData
  9377 ;;		_CC2500_ReadStatus
  9378 ;;		_CC2500_ReadREG
  9379 ;; This function uses a non-reentrant model
  9380 ;;
  9381                           
  9382                           
  9383                           ;psect for function _CC2500_ReadByte
  9384  1E22                     _CC2500_ReadByte:	
  9385                           
  9386                           ;CC2500_B1.c: 239: unsigned char loop_b;
  9387                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  9388                           
  9389                           ;incstack = 0
  9390                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9391  1E22  0020               	movlb	0	; select bank0
  9392  1E23  01A1               	clrf	CC2500_ReadByte@loop_b
  9393  1E24                     L6:	
  9394  1E24  3008               	movlw	8
  9395  1E25  0221               	subwf	CC2500_ReadByte@loop_b,w
  9396  1E26  1803               	btfsc	3,0
  9397  1E27  0008               	return
  9398                           
  9399                           ;CC2500_B1.c: 241: RC1 = 1;
  9400  1E28  148E               	bsf	14,1	;volatile
  9401                           
  9402                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  9403  1E29  1003               	clrc
  9404  1E2A  0DFB               	rlf	_SPI0Buffer,f
  9405                           
  9406                           ;CC2500_B1.c: 243: if (RC2 == 1)
  9407  1E2B  1D0E               	btfss	14,2	;volatile
  9408  1E2C  2E2F               	goto	l6322
  9409                           
  9410                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  9411  1E2D  147B               	bsf	_SPI0Buffer,0
  9412  1E2E  2E33               	goto	l6324
  9413  1E2F                     l6322:	
  9414                           
  9415                           ;CC2500_B1.c: 245: else
  9416                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  9417  1E2F  30FE               	movlw	254
  9418  1E30  00A0               	movwf	??_CC2500_ReadByte
  9419  1E31  0820               	movf	??_CC2500_ReadByte,w
  9420  1E32  05FB               	andwf	_SPI0Buffer,f
  9421  1E33                     l6324:	
  9422                           
  9423                           ;CC2500_B1.c: 247: RC1 = 0;
  9424  1E33  108E               	bcf	14,1	;volatile
  9425  1E34  3001               	movlw	1
  9426  1E35  00A0               	movwf	??_CC2500_ReadByte
  9427  1E36  0820               	movf	??_CC2500_ReadByte,w
  9428  1E37  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9429  1E38  2E24               	goto	L6
  9430  1E39                     __end_of_CC2500_ReadByte:	
  9431                           
  9432                           	psect	text43
  9433  1B47                     __ptext43:	
  9434 ;; *************** function _RF_Initialization *****************
  9435 ;; Defined at:
  9436 ;;		line 9 in file "../src/RF_Control_B1.c"
  9437 ;; Parameters:    Size  Location     Type
  9438 ;;		None
  9439 ;; Auto vars:     Size  Location     Type
  9440 ;;		None
  9441 ;; Return value:  Size  Location     Type
  9442 ;;		None               void
  9443 ;; Registers used:
  9444 ;;		wreg, status,2, status,0, pclath, cstack
  9445 ;; Tracked objects:
  9446 ;;		On entry : 0/0
  9447 ;;		On exit  : 0/0
  9448 ;;		Unchanged: 0/0
  9449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9454 ;;Total ram usage:        0 bytes
  9455 ;; Hardware stack levels used:    1
  9456 ;; Hardware stack levels required when called:    6
  9457 ;; This function calls:
  9458 ;;		_setRF_Initialization
  9459 ;; This function is called by:
  9460 ;;		_main
  9461 ;; This function uses a non-reentrant model
  9462 ;;
  9463                           
  9464                           
  9465                           ;psect for function _RF_Initialization
  9466  1B47                     _RF_Initialization:	
  9467                           
  9468                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9469                           
  9470                           ;incstack = 0
  9471                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9472  1B47  319B  23CF         	fcall	_setRF_Initialization
  9473  1B49  0008               	return
  9474  1B4A                     __end_of_RF_Initialization:	
  9475                           
  9476                           	psect	text44
  9477  1BCF                     __ptext44:	
  9478 ;; *************** function _setRF_Initialization *****************
  9479 ;; Defined at:
  9480 ;;		line 43 in file "../src/RF_Control_B1.c"
  9481 ;; Parameters:    Size  Location     Type
  9482 ;;		None
  9483 ;; Auto vars:     Size  Location     Type
  9484 ;;		None
  9485 ;; Return value:  Size  Location     Type
  9486 ;;		None               void
  9487 ;; Registers used:
  9488 ;;		wreg
  9489 ;; Tracked objects:
  9490 ;;		On entry : 0/0
  9491 ;;		On exit  : 0/0
  9492 ;;		Unchanged: 0/0
  9493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;Total ram usage:        1 bytes
  9499 ;; Hardware stack levels used:    1
  9500 ;; Hardware stack levels required when called:    5
  9501 ;; This function calls:
  9502 ;;		Nothing
  9503 ;; This function is called by:
  9504 ;;		_RF_Initialization
  9505 ;; This function uses a non-reentrant model
  9506 ;;
  9507                           
  9508                           
  9509                           ;psect for function _setRF_Initialization
  9510  1BCF                     _setRF_Initialization:	
  9511                           
  9512                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9513                           
  9514                           ;incstack = 0
  9515                           ; Regs used in _setRF_Initialization: [wreg]
  9516  1BCF  3015               	movlw	21
  9517  1BD0  0020               	movlb	0	; select bank0
  9518  1BD1  00A0               	movwf	??_setRF_Initialization
  9519  1BD2  0820               	movf	??_setRF_Initialization,w
  9520  1BD3  0021               	movlb	1	; select bank1
  9521  1BD4  00D3               	movwf	_Tx_Length^(0+128)
  9522                           
  9523                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9524  1BD5  300A               	movlw	10
  9525  1BD6  00C3               	movwf	(_RF1^(0+128)+7)
  9526  1BD7  3000               	movlw	0
  9527  1BD8  00C4               	movwf	(_RF1^(0+128)+8)
  9528  1BD9  0008               	return
  9529  1BDA                     __end_of_setRF_Initialization:	
  9530                           
  9531                           	psect	text45
  9532  1CE1                     __ptext45:	
  9533 ;; *************** function _Mcu_Initialization *****************
  9534 ;; Defined at:
  9535 ;;		line 30 in file "../src/MCU_B1.c"
  9536 ;; Parameters:    Size  Location     Type
  9537 ;;		None
  9538 ;; Auto vars:     Size  Location     Type
  9539 ;;		None
  9540 ;; Return value:  Size  Location     Type
  9541 ;;		None               void
  9542 ;; Registers used:
  9543 ;;		wreg, status,2, status,0, pclath, cstack
  9544 ;; Tracked objects:
  9545 ;;		On entry : 0/0
  9546 ;;		On exit  : 0/0
  9547 ;;		Unchanged: 0/0
  9548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9553 ;;Total ram usage:        0 bytes
  9554 ;; Hardware stack levels used:    1
  9555 ;; Hardware stack levels required when called:    6
  9556 ;; This function calls:
  9557 ;;		_ADC_Set
  9558 ;;		_Fosc_Set
  9559 ;;		_IOC_Set
  9560 ;;		_IO_Set
  9561 ;;		_TMR1_Set
  9562 ;;		_WDT_Set
  9563 ;; This function is called by:
  9564 ;;		_main
  9565 ;; This function uses a non-reentrant model
  9566 ;;
  9567                           
  9568                           
  9569                           ;psect for function _Mcu_Initialization
  9570  1CE1                     _Mcu_Initialization:	
  9571                           
  9572                           ;MCU_B1.c: 32: Fosc_Set();
  9573                           
  9574                           ;incstack = 0
  9575                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9576  1CE1  3187  27FC  319C   	fcall	_Fosc_Set
  9577                           
  9578                           ;MCU_B1.c: 34: IO_Set();
  9579  1CE4  319E  2652  319C   	fcall	_IO_Set
  9580                           
  9581                           ;MCU_B1.c: 36: ;;
  9582                           ;MCU_B1.c: 38: TMR1_Set();
  9583  1CE7  319C  2422  319C   	fcall	_TMR1_Set
  9584                           
  9585                           ;MCU_B1.c: 40: ADC_Set();
  9586  1CEA  319B  237B  319C   	fcall	_ADC_Set
  9587                           
  9588                           ;MCU_B1.c: 42: ;;
  9589                           ;MCU_B1.c: 44: ;;
  9590                           ;MCU_B1.c: 46: IOC_Set();
  9591  1CED  319C  2416  319C   	fcall	_IOC_Set
  9592                           
  9593                           ;MCU_B1.c: 48: ;;
  9594                           ;MCU_B1.c: 50: ;;
  9595                           ;MCU_B1.c: 52: WDT_Set();
  9596  1CF0  319B  23C4         	fcall	_WDT_Set
  9597  1CF2  0008               	return
  9598  1CF3                     __end_of_Mcu_Initialization:	
  9599                           
  9600                           	psect	text46
  9601  1BC4                     __ptext46:	
  9602 ;; *************** function _WDT_Set *****************
  9603 ;; Defined at:
  9604 ;;		line 1019 in file "../src/MCU_B1.c"
  9605 ;; Parameters:    Size  Location     Type
  9606 ;;		None
  9607 ;; Auto vars:     Size  Location     Type
  9608 ;;		None
  9609 ;; Return value:  Size  Location     Type
  9610 ;;		None               void
  9611 ;; Registers used:
  9612 ;;		wreg
  9613 ;; Tracked objects:
  9614 ;;		On entry : 0/0
  9615 ;;		On exit  : 0/0
  9616 ;;		Unchanged: 0/0
  9617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9620 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9621 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9622 ;;Total ram usage:        1 bytes
  9623 ;; Hardware stack levels used:    1
  9624 ;; Hardware stack levels required when called:    5
  9625 ;; This function calls:
  9626 ;;		Nothing
  9627 ;; This function is called by:
  9628 ;;		_Mcu_Initialization
  9629 ;; This function uses a non-reentrant model
  9630 ;;
  9631                           
  9632                           
  9633                           ;psect for function _WDT_Set
  9634  1BC4                     _WDT_Set:	
  9635                           
  9636                           ;MCU_B1.c: 1026: WDTCON = 0b00010111;;
  9637                           
  9638                           ;incstack = 0
  9639                           ; Regs used in _WDT_Set: [wreg]
  9640  1BC4  3017               	movlw	23
  9641  1BC5  0021               	movlb	1	; select bank1
  9642  1BC6  0097               	movwf	23	;volatile
  9643                           
  9644                           ;MCU_B1.c: 1028: WDT.Enable = 1;
  9645  1BC7  144A               	bsf	_WDT^(0+128),0
  9646                           
  9647                           ;MCU_B1.c: 1029: WDT.Timer = 10;
  9648  1BC8  300A               	movlw	10
  9649  1BC9  0020               	movlb	0	; select bank0
  9650  1BCA  00A0               	movwf	??_WDT_Set
  9651  1BCB  0820               	movf	??_WDT_Set,w
  9652  1BCC  0021               	movlb	1	; select bank1
  9653  1BCD  00CB               	movwf	(_WDT^(0+128)+1)
  9654  1BCE  0008               	return
  9655  1BCF                     __end_of_WDT_Set:	
  9656                           
  9657                           	psect	text47
  9658  1C22                     __ptext47:	
  9659 ;; *************** function _TMR1_Set *****************
  9660 ;; Defined at:
  9661 ;;		line 199 in file "../src/MCU_B1.c"
  9662 ;; Parameters:    Size  Location     Type
  9663 ;;		None
  9664 ;; Auto vars:     Size  Location     Type
  9665 ;;		None
  9666 ;; Return value:  Size  Location     Type
  9667 ;;		None               void
  9668 ;; Registers used:
  9669 ;;		wreg
  9670 ;; Tracked objects:
  9671 ;;		On entry : 0/0
  9672 ;;		On exit  : 0/0
  9673 ;;		Unchanged: 0/0
  9674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9679 ;;Total ram usage:        0 bytes
  9680 ;; Hardware stack levels used:    1
  9681 ;; Hardware stack levels required when called:    5
  9682 ;; This function calls:
  9683 ;;		Nothing
  9684 ;; This function is called by:
  9685 ;;		_Mcu_Initialization
  9686 ;; This function uses a non-reentrant model
  9687 ;;
  9688                           
  9689                           
  9690                           ;psect for function _TMR1_Set
  9691  1C22                     _TMR1_Set:	
  9692                           
  9693                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9694                           
  9695                           ;incstack = 0
  9696                           ; Regs used in _TMR1_Set: [wreg]
  9697  1C22  3041               	movlw	65
  9698  1C23  0020               	movlb	0	; select bank0
  9699  1C24  0098               	movwf	24	;volatile
  9700                           
  9701                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9702  1C25  30FA               	movlw	250
  9703  1C26  0097               	movwf	23	;volatile
  9704                           
  9705                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9706  1C27  3038               	movlw	56
  9707  1C28  0096               	movwf	22	;volatile
  9708                           
  9709                           ;MCU_B1.c: 203: TMR1IE = 1;
  9710  1C29  0021               	movlb	1	; select bank1
  9711  1C2A  1411               	bsf	17,0	;volatile
  9712                           
  9713                           ;MCU_B1.c: 204: PEIE = 1;
  9714  1C2B  170B               	bsf	11,6	;volatile
  9715                           
  9716                           ;MCU_B1.c: 205: GIE = 1;
  9717  1C2C  178B               	bsf	11,7	;volatile
  9718  1C2D  0008               	return
  9719  1C2E                     __end_of_TMR1_Set:	
  9720                           
  9721                           	psect	text48
  9722  1E52                     __ptext48:	
  9723 ;; *************** function _IO_Set *****************
  9724 ;; Defined at:
  9725 ;;		line 60 in file "../src/MCU_B1.c"
  9726 ;; Parameters:    Size  Location     Type
  9727 ;;		None
  9728 ;; Auto vars:     Size  Location     Type
  9729 ;;		None
  9730 ;; Return value:  Size  Location     Type
  9731 ;;		None               void
  9732 ;; Registers used:
  9733 ;;		wreg, status,2
  9734 ;; Tracked objects:
  9735 ;;		On entry : 0/0
  9736 ;;		On exit  : 0/0
  9737 ;;		Unchanged: 0/0
  9738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9743 ;;Total ram usage:        0 bytes
  9744 ;; Hardware stack levels used:    1
  9745 ;; Hardware stack levels required when called:    5
  9746 ;; This function calls:
  9747 ;;		Nothing
  9748 ;; This function is called by:
  9749 ;;		_Mcu_Initialization
  9750 ;; This function uses a non-reentrant model
  9751 ;;
  9752                           
  9753                           
  9754                           ;psect for function _IO_Set
  9755  1E52                     _IO_Set:	
  9756                           
  9757                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9758                           
  9759                           ;incstack = 0
  9760                           ; Regs used in _IO_Set: [wreg+status,2]
  9761  1E52  3077               	movlw	119
  9762  1E53  0021               	movlb	1	; select bank1
  9763  1E54  008C               	movwf	12	;volatile
  9764                           
  9765                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9766  1E55  3007               	movlw	7
  9767  1E56  008D               	movwf	13	;volatile
  9768                           
  9769                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9770  1E57  300C               	movlw	12
  9771  1E58  008E               	movwf	14	;volatile
  9772                           
  9773                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9774  1E59  0022               	movlb	2	; select bank2
  9775  1E5A  018C               	clrf	12	;volatile
  9776                           
  9777                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9778  1E5B  3002               	movlw	2
  9779  1E5C  008D               	movwf	13	;volatile
  9780                           
  9781                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9782  1E5D  018E               	clrf	14	;volatile
  9783                           
  9784                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9785  1E5E  3022               	movlw	34
  9786  1E5F  0023               	movlb	3	; select bank3
  9787  1E60  008C               	movwf	12	;volatile
  9788                           
  9789                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9790  1E61  018D               	clrf	13	;volatile
  9791                           
  9792                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9793  1E62  018E               	clrf	14	;volatile
  9794                           
  9795                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9796  1E63  3077               	movlw	119
  9797  1E64  0020               	movlb	0	; select bank0
  9798  1E65  008C               	movwf	12	;volatile
  9799                           
  9800                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  9801  1E66  3007               	movlw	7
  9802  1E67  008D               	movwf	13	;volatile
  9803                           
  9804                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9805  1E68  300C               	movlw	12
  9806  1E69  008E               	movwf	14	;volatile
  9807  1E6A  0008               	return
  9808  1E6B                     __end_of_IO_Set:	
  9809                           
  9810                           	psect	text49
  9811  1C16                     __ptext49:	
  9812 ;; *************** function _IOC_Set *****************
  9813 ;; Defined at:
  9814 ;;		line 366 in file "../src/MCU_B1.c"
  9815 ;; Parameters:    Size  Location     Type
  9816 ;;		None
  9817 ;; Auto vars:     Size  Location     Type
  9818 ;;		None
  9819 ;; Return value:  Size  Location     Type
  9820 ;;		None               void
  9821 ;; Registers used:
  9822 ;;		wreg, status,2
  9823 ;; Tracked objects:
  9824 ;;		On entry : 0/0
  9825 ;;		On exit  : 0/0
  9826 ;;		Unchanged: 0/0
  9827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9832 ;;Total ram usage:        0 bytes
  9833 ;; Hardware stack levels used:    1
  9834 ;; Hardware stack levels required when called:    5
  9835 ;; This function calls:
  9836 ;;		Nothing
  9837 ;; This function is called by:
  9838 ;;		_Mcu_Initialization
  9839 ;; This function uses a non-reentrant model
  9840 ;;
  9841                           
  9842                           
  9843                           ;psect for function _IOC_Set
  9844  1C16                     _IOC_Set:	
  9845                           
  9846                           ;MCU_B1.c: 367: WPUB2 = 0;
  9847                           
  9848                           ;incstack = 0
  9849                           ; Regs used in _IOC_Set: [wreg+status,2]
  9850  1C16  0024               	movlb	4	; select bank4
  9851  1C17  110D               	bcf	13,2	;volatile
  9852                           
  9853                           ;MCU_B1.c: 387: IOCBP = 0b00000000;
  9854  1C18  0027               	movlb	7	; select bank7
  9855  1C19  0194               	clrf	20	;volatile
  9856                           
  9857                           ;MCU_B1.c: 388: IOCBN = 0b00000100;
  9858  1C1A  3004               	movlw	4
  9859  1C1B  0095               	movwf	21	;volatile
  9860                           
  9861                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
  9862  1C1C  0196               	clrf	22	;volatile
  9863                           
  9864                           ;MCU_B1.c: 394: IOCIE = 1;
  9865  1C1D  158B               	bsf	11,3	;volatile
  9866                           
  9867                           ;MCU_B1.c: 395: IOCIF = 0;
  9868  1C1E  100B               	bcf	11,0	;volatile
  9869                           
  9870                           ;MCU_B1.c: 396: PEIE = 1;
  9871  1C1F  170B               	bsf	11,6	;volatile
  9872                           
  9873                           ;MCU_B1.c: 397: GIE = 1;
  9874  1C20  178B               	bsf	11,7	;volatile
  9875  1C21  0008               	return
  9876  1C22                     __end_of_IOC_Set:	
  9877                           
  9878                           	psect	text50
  9879  07FC                     __ptext50:	
  9880 ;; *************** function _Fosc_Set *****************
  9881 ;; Defined at:
  9882 ;;		line 56 in file "../src/MCU_B1.c"
  9883 ;; Parameters:    Size  Location     Type
  9884 ;;		None
  9885 ;; Auto vars:     Size  Location     Type
  9886 ;;		None
  9887 ;; Return value:  Size  Location     Type
  9888 ;;		None               void
  9889 ;; Registers used:
  9890 ;;		wreg
  9891 ;; Tracked objects:
  9892 ;;		On entry : 0/0
  9893 ;;		On exit  : 0/0
  9894 ;;		Unchanged: 0/0
  9895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9899 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9900 ;;Total ram usage:        0 bytes
  9901 ;; Hardware stack levels used:    1
  9902 ;; Hardware stack levels required when called:    5
  9903 ;; This function calls:
  9904 ;;		Nothing
  9905 ;; This function is called by:
  9906 ;;		_Mcu_Initialization
  9907 ;; This function uses a non-reentrant model
  9908 ;;
  9909                           
  9910                           
  9911                           ;psect for function _Fosc_Set
  9912  07FC                     _Fosc_Set:	
  9913                           
  9914                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9915                           
  9916                           ;incstack = 0
  9917                           ; Regs used in _Fosc_Set: [wreg]
  9918  07FC  3078               	movlw	120
  9919  07FD  0021               	movlb	1	; select bank1
  9920  07FE  0099               	movwf	25	;volatile
  9921  07FF  0008               	return
  9922  0800                     __end_of_Fosc_Set:	
  9923                           
  9924                           	psect	text51
  9925  1B7B                     __ptext51:	
  9926 ;; *************** function _ADC_Set *****************
  9927 ;; Defined at:
  9928 ;;		line 420 in file "../src/MCU_B1.c"
  9929 ;; Parameters:    Size  Location     Type
  9930 ;;		None
  9931 ;; Auto vars:     Size  Location     Type
  9932 ;;		None
  9933 ;; Return value:  Size  Location     Type
  9934 ;;		None               void
  9935 ;; Registers used:
  9936 ;;		wreg
  9937 ;; Tracked objects:
  9938 ;;		On entry : 0/0
  9939 ;;		On exit  : 0/0
  9940 ;;		Unchanged: 0/0
  9941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9946 ;;Total ram usage:        0 bytes
  9947 ;; Hardware stack levels used:    1
  9948 ;; Hardware stack levels required when called:    5
  9949 ;; This function calls:
  9950 ;;		Nothing
  9951 ;; This function is called by:
  9952 ;;		_Mcu_Initialization
  9953 ;; This function uses a non-reentrant model
  9954 ;;
  9955                           
  9956                           
  9957                           ;psect for function _ADC_Set
  9958  1B7B                     _ADC_Set:	
  9959                           
  9960                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
  9961                           
  9962                           ;incstack = 0
  9963                           ; Regs used in _ADC_Set: [wreg]
  9964  1B7B  30F3               	movlw	243
  9965  1B7C  0021               	movlb	1	; select bank1
  9966  1B7D  009E               	movwf	30	;volatile
  9967                           
  9968                           ;MCU_B1.c: 422: FVRCON = 0xc1;
  9969  1B7E  30C1               	movlw	193
  9970  1B7F  0022               	movlb	2	; select bank2
  9971  1B80  0097               	movwf	23	;volatile
  9972  1B81  0008               	return
  9973  1B82                     __end_of_ADC_Set:	
  9974                           
  9975                           	psect	text52
  9976  01BA                     __ptext52:	
  9977 ;; *************** function _Load_Main *****************
  9978 ;; Defined at:
  9979 ;;		line 39 in file "../src/OverLoad_B1.c"
  9980 ;; Parameters:    Size  Location     Type
  9981 ;;		None
  9982 ;; Auto vars:     Size  Location     Type
  9983 ;;  i               1   15[BANK0 ] unsigned char 
  9984 ;;  error           1   14[BANK0 ] unsigned char 
  9985 ;;  adjgo           1   12[BANK0 ] unsigned char 
  9986 ;;  j               1   11[BANK0 ] unsigned char 
  9987 ;; Return value:  Size  Location     Type
  9988 ;;		None               void
  9989 ;; Registers used:
  9990 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9991 ;; Tracked objects:
  9992 ;;		On entry : 0/0
  9993 ;;		On exit  : 0/0
  9994 ;;		Unchanged: 0/0
  9995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9997 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9998 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9999 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10000 ;;Total ram usage:        7 bytes
 10001 ;; Hardware stack levels used:    1
 10002 ;; Hardware stack levels required when called:    8
 10003 ;; This function calls:
 10004 ;;		_getAll_DimmerLights_AdjGO
 10005 ;;		_getMain_All_Error_Status
 10006 ;;		_getMain_LightsStatus
 10007 ;;		_getMain_Lights_Count
 10008 ;;		_getMain_LoadOK
 10009 ;;		_setLoad_AH_AL_Restore
 10010 ;; This function is called by:
 10011 ;;		_main
 10012 ;; This function uses a non-reentrant model
 10013 ;;
 10014                           
 10015                           
 10016                           ;psect for function _Load_Main
 10017  01BA                     _Load_Main:	
 10018                           
 10019                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
 10020                           
 10021                           ;incstack = 0
 10022                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10023  01BA  0020               	movlb	0	; select bank0
 10024  01BB  01AF               	clrf	Load_Main@i
 10025  01BC  01AB               	clrf	Load_Main@j
 10026  01BD  3000               	movlw	0
 10027  01BE  3191  21EF  3181   	fcall	_getMain_All_Error_Status
 10028  01C1  0020               	movlb	0	; select bank0
 10029  01C2  00A9               	movwf	??_Load_Main
 10030  01C3  0829               	movf	??_Load_Main,w
 10031  01C4  00AE               	movwf	Load_Main@error
 10032  01C5  01AC               	clrf	Load_Main@adjgo
 10033                           
 10034                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10035  01C6  0022               	movlb	2	; select bank2
 10036  01C7  1C26               	btfss	_Load^(0+256),0
 10037  01C8  2AF8               	goto	l1460
 10038                           
 10039                           ;OverLoad_B1.c: 44: adjgo = getAll_DimmerLights_AdjGO();
 10040  01C9  319C  248A  3181   	fcall	_getAll_DimmerLights_AdjGO
 10041  01CC  0020               	movlb	0	; select bank0
 10042  01CD  00A9               	movwf	??_Load_Main
 10043  01CE  0829               	movf	??_Load_Main,w
 10044  01CF  00AC               	movwf	Load_Main@adjgo
 10045                           
 10046                           ;OverLoad_B1.c: 46: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
 10047  01D0  01AD               	clrf	_Load_Main$3849
 10048  01D1  3191  2162  3181   	fcall	_getMain_LightsStatus
 10049  01D4  3A01               	xorlw	1
 10050  01D5  1D03               	skipz
 10051  01D6  29E0               	goto	l7938
 10052  01D7  0020               	movlb	0	; select bank0
 10053  01D8  08AE               	movf	Load_Main@error,f
 10054  01D9  1D03               	skipz
 10055  01DA  29E0               	goto	l7938
 10056  01DB  08AC               	movf	Load_Main@adjgo,f
 10057  01DC  1D03               	skipz
 10058  01DD  29E0               	goto	l7938
 10059  01DE  01AD               	clrf	_Load_Main$3849
 10060  01DF  0AAD               	incf	_Load_Main$3849,f
 10061  01E0                     l7938:	
 10062  01E0  0020               	movlb	0	; select bank0
 10063  01E1  082D               	movf	_Load_Main$3849,w
 10064  01E2  0022               	movlb	2	; select bank2
 10065  01E3  10A6               	bcf	_Load^(0+256),1
 10066  01E4  1D03               	skipz
 10067  01E5  14A6               	bsf	_Load^(0+256),1
 10068                           
 10069                           ;OverLoad_B1.c: 47: if (getMain_LoadOK() == 1 && Load.Run == 0) {
 10070  01E6  3190  2066  3181   	fcall	_getMain_LoadOK
 10071  01E9  3A01               	xorlw	1
 10072  01EA  1D03               	skipz
 10073  01EB  29F1               	goto	l1463
 10074  01EC  0022               	movlb	2	; select bank2
 10075  01ED  19A6               	btfsc	_Load^(0+256),3
 10076  01EE  29F1               	goto	l1463
 10077                           
 10078                           ;OverLoad_B1.c: 48: Load.Run = 1;
 10079  01EF  15A6               	bsf	_Load^(0+256),3
 10080                           
 10081                           ;OverLoad_B1.c: 49: Load.OK = 0;
 10082  01F0  13A6               	bcf	_Load^(0+256),7
 10083  01F1                     l1463:	
 10084                           
 10085                           ;OverLoad_B1.c: 50: }
 10086                           ;OverLoad_B1.c: 53: if (Load.GO == 1) {
 10087  01F1  0022               	movlb	2	; select bank2
 10088  01F2  1CA6               	btfss	_Load^(0+256),1
 10089  01F3  2AC8               	goto	l1464
 10090                           
 10091                           ;OverLoad_B1.c: 54: Load.LightsON = 1;
 10092  01F4  1526               	bsf	_Load^(0+256),2
 10093                           
 10094                           ;OverLoad_B1.c: 56: if (Load.ADtoGO == 1) {
 10095  01F5  1E26               	btfss	_Load^(0+256),4
 10096  01F6  2AC6               	goto	l1465
 10097                           
 10098                           ;OverLoad_B1.c: 57: Load.Time++;
 10099  01F7  3001               	movlw	1
 10100  01F8  07A7               	addwf	(_Load^(0+256)+1),f
 10101  01F9  3000               	movlw	0
 10102  01FA  3DA8               	addwfc	((_Load+1)^(0+256)+1),f
 10103                           
 10104                           ;OverLoad_B1.c: 58: if (Load.Time >= 5) {
 10105  01FB  3000               	movlw	0
 10106  01FC  0228               	subwf	((_Load+1)^(0+256)+1),w
 10107  01FD  3005               	movlw	5
 10108  01FE  1903               	skipnz
 10109  01FF  0227               	subwf	(_Load^(0+256)+1),w
 10110  0200  1C03               	skipc
 10111  0201  0008               	return
 10112                           
 10113                           ;OverLoad_B1.c: 59: Load.Time = 0;
 10114  0202  01A7               	clrf	(_Load^(0+256)+1)
 10115  0203  01A8               	clrf	((_Load+1)^(0+256)+1)
 10116                           
 10117                           ;OverLoad_B1.c: 60: Load.ADtoGO = 0;
 10118  0204  1226               	bcf	_Load^(0+256),4
 10119                           
 10120                           ;OverLoad_B1.c: 62: for (i = 0; i < 4; i++) {
 10121  0205  0020               	movlb	0	; select bank0
 10122  0206  01AF               	clrf	Load_Main@i
 10123  0207  3004               	movlw	4
 10124  0208  022F               	subwf	Load_Main@i,w
 10125  0209  1803               	btfsc	3,0
 10126  020A  2A35               	goto	l7964
 10127  020B                     l7958:	
 10128                           
 10129                           ;OverLoad_B1.c: 63: Load.ADH += Load.AH[i];
 10130  020B  352F               	lslf	Load_Main@i,w
 10131  020C  3E31               	addlw	(_Load+11)& (0+255)
 10132  020D  0086               	movwf	6
 10133  020E  3001               	movlw	1	; select bank2/3
 10134  020F  0087               	movwf	7
 10135  0210  3F40               	moviw [0]fsr1
 10136  0211  00A9               	movwf	??_Load_Main
 10137  0212  3F41               	moviw [1]fsr1
 10138  0213  00AA               	movwf	??_Load_Main+1
 10139  0214  0829               	movf	??_Load_Main,w
 10140  0215  0022               	movlb	2	; select bank2
 10141  0216  07AB               	addwf	(_Load^(0+256)+5),f
 10142  0217  0020               	movlb	0	; select bank0
 10143  0218  082A               	movf	??_Load_Main+1,w
 10144  0219  0022               	movlb	2	; select bank2
 10145  021A  3DAC               	addwfc	((_Load+1)^(0+256)+5),f
 10146                           
 10147                           ;OverLoad_B1.c: 64: Load.ADL += Load.AL[i];
 10148  021B  0020               	movlb	0	; select bank0
 10149  021C  352F               	lslf	Load_Main@i,w
 10150  021D  3E3B               	addlw	(_Load+21)& (0+255)
 10151  021E  0086               	movwf	6
 10152  021F  3001               	movlw	1	; select bank2/3
 10153  0220  0087               	movwf	7
 10154  0221  3F40               	moviw [0]fsr1
 10155  0222  00A9               	movwf	??_Load_Main
 10156  0223  3F41               	moviw [1]fsr1
 10157  0224  00AA               	movwf	??_Load_Main+1
 10158  0225  0829               	movf	??_Load_Main,w
 10159  0226  0022               	movlb	2	; select bank2
 10160  0227  07AD               	addwf	(_Load^(0+256)+7),f
 10161  0228  0020               	movlb	0	; select bank0
 10162  0229  082A               	movf	??_Load_Main+1,w
 10163  022A  0022               	movlb	2	; select bank2
 10164  022B  3DAE               	addwfc	((_Load+1)^(0+256)+7),f
 10165  022C  3001               	movlw	1
 10166  022D  0020               	movlb	0	; select bank0
 10167  022E  00A9               	movwf	??_Load_Main
 10168  022F  0829               	movf	??_Load_Main,w
 10169  0230  07AF               	addwf	Load_Main@i,f
 10170  0231  3004               	movlw	4
 10171  0232  022F               	subwf	Load_Main@i,w
 10172  0233  1C03               	skipc
 10173  0234  2A0B               	goto	l7958
 10174  0235                     l7964:	
 10175                           
 10176                           ;OverLoad_B1.c: 65: }
 10177                           ;OverLoad_B1.c: 66: Load.ADH /= 4;
 10178  0235  3002               	movlw	2
 10179  0236  0022               	movlb	2	; select bank2
 10180  0237                     u8005:	
 10181  0237  36AC               	lsrf	((_Load+1)^(0+256)+5),f
 10182  0238  0CAB               	rrf	(_Load^(0+256)+5),f
 10183  0239  0B89               	decfsz	9,f
 10184  023A  2A37               	goto	u8005
 10185                           
 10186                           ;OverLoad_B1.c: 67: Load.ADL /= 4;
 10187  023B  3002               	movlw	2
 10188  023C                     u8015:	
 10189  023C  36AE               	lsrf	((_Load+1)^(0+256)+7),f
 10190  023D  0CAD               	rrf	(_Load^(0+256)+7),f
 10191  023E  0B89               	decfsz	9,f
 10192  023F  2A3C               	goto	u8015
 10193                           
 10194                           ;OverLoad_B1.c: 68: setLoad_AH_AL_Restore();
 10195  0240  319E  26A0  3181   	fcall	_setLoad_AH_AL_Restore
 10196                           
 10197                           ;OverLoad_B1.c: 69: if (Load.ADH > Load.ADL) {
 10198  0243  0022               	movlb	2	; select bank2
 10199  0244  082C               	movf	((_Load+1)^(0+256)+5),w
 10200  0245  022E               	subwf	((_Load+1)^(0+256)+7),w
 10201  0246  1D03               	skipz
 10202  0247  2A4A               	goto	u8025
 10203  0248  082B               	movf	(_Load^(0+256)+5),w
 10204  0249  022D               	subwf	(_Load^(0+256)+7),w
 10205  024A                     u8025:	
 10206  024A  1803               	skipnc
 10207  024B  0008               	return
 10208                           
 10209                           ;OverLoad_B1.c: 70: Load.AD = Load.ADH - Load.ADL;
 10210  024C  3005               	movlw	5
 10211  024D  3E26               	addlw	_Load& (0+255)
 10212  024E  0086               	movwf	6
 10213  024F  3001               	movlw	1	; select bank2/3
 10214  0250  0087               	movwf	7
 10215  0251  092D               	comf	(_Load^(0+256)+7),w
 10216  0252  0020               	movlb	0	; select bank0
 10217  0253  00A9               	movwf	??_Load_Main
 10218  0254  0022               	movlb	2	; select bank2
 10219  0255  092E               	comf	((_Load+1)^(0+256)+7),w
 10220  0256  0020               	movlb	0	; select bank0
 10221  0257  00AA               	movwf	??_Load_Main+1
 10222  0258  0AA9               	incf	??_Load_Main,f
 10223  0259  1903               	skipnz
 10224  025A  0AAA               	incf	??_Load_Main+1,f
 10225  025B  3F40               	moviw [0]fsr1
 10226  025C  0729               	addwf	??_Load_Main,w
 10227  025D  0022               	movlb	2	; select bank2
 10228  025E  00C5               	movwf	(_Load^(0+256)+31)
 10229  025F  3F41               	moviw [1]fsr1
 10230  0260  0020               	movlb	0	; select bank0
 10231  0261  3D2A               	addwfc	??_Load_Main+1,w
 10232  0262  0022               	movlb	2	; select bank2
 10233  0263  00C6               	movwf	(_Load^(0+256)+32)
 10234                           
 10235                           ;OverLoad_B1.c: 71: Load.ADH = 0;
 10236  0264  01AB               	clrf	(_Load^(0+256)+5)
 10237  0265  01AC               	clrf	((_Load+1)^(0+256)+5)
 10238                           
 10239                           ;OverLoad_B1.c: 72: Load.ADL = 0;
 10240  0266  01AD               	clrf	(_Load^(0+256)+7)
 10241  0267  01AE               	clrf	((_Load+1)^(0+256)+7)
 10242                           
 10243                           ;OverLoad_B1.c: 73: Load.LightsCount = getMain_Lights_Count();
 10244  0268  319D  25F5  3181   	fcall	_getMain_Lights_Count
 10245  026B  0020               	movlb	0	; select bank0
 10246  026C  00A9               	movwf	??_Load_Main
 10247  026D  0829               	movf	??_Load_Main,w
 10248  026E  0022               	movlb	2	; select bank2
 10249  026F  00D1               	movwf	(_Load^(0+256)+43)
 10250                           
 10251                           ;OverLoad_B1.c: 75: if (Load.Run == 1) {
 10252  0270  1DA6               	btfss	_Load^(0+256),3
 10253  0271  2A97               	goto	l7996
 10254                           
 10255                           ;OverLoad_B1.c: 76: if (Load.Count < 2) {
 10256  0272  3002               	movlw	2
 10257  0273  024F               	subwf	(_Load^(0+256)+41),w
 10258  0274  1803               	skipnc
 10259  0275  2A97               	goto	l7996
 10260                           
 10261                           ;OverLoad_B1.c: 77: Load.Count++;
 10262  0276  3001               	movlw	1
 10263  0277  0020               	movlb	0	; select bank0
 10264  0278  00A9               	movwf	??_Load_Main
 10265  0279  0829               	movf	??_Load_Main,w
 10266  027A  0022               	movlb	2	; select bank2
 10267  027B  07CF               	addwf	(_Load^(0+256)+41),f
 10268                           
 10269                           ;OverLoad_B1.c: 78: if (Load.Count == 1) {
 10270  027C  084F               	movf	(_Load^(0+256)+41),w
 10271  027D  3A01               	xorlw	1
 10272  027E  1D03               	skipz
 10273  027F  2A84               	goto	l7988
 10274                           
 10275                           ;OverLoad_B1.c: 79: Load.JudgeValue = (20*50);
 10276  0280  30E8               	movlw	232
 10277  0281  00CB               	movwf	(_Load^(0+256)+37)
 10278  0282  3003               	movlw	3
 10279  0283  2A8F               	goto	L7
 10280  0284                     l7988:	
 10281                           ;OverLoad_B1.c: 80: } else if (Load.Count == 2) {
 10282                           
 10283  0284  084F               	movf	(_Load^(0+256)+41),w
 10284  0285  3A02               	xorlw	2
 10285  0286  1D03               	skipz
 10286  0287  2A97               	goto	l7996
 10287                           
 10288                           ;OverLoad_B1.c: 81: if (Load.LightsCount == 1) {
 10289  0288  0851               	movf	(_Load^(0+256)+43),w
 10290  0289  3A01               	xorlw	1
 10291  028A  1D03               	skipz
 10292  028B  2A91               	goto	l7994
 10293                           
 10294                           ;OverLoad_B1.c: 82: Load.JudgeValue = (int)(1.1*50);
 10295  028C  3037               	movlw	55
 10296  028D  00CB               	movwf	(_Load^(0+256)+37)
 10297  028E  3000               	movlw	0
 10298  028F                     L7:	
 10299  028F  00CC               	movwf	(_Load^(0+256)+38)
 10300                           
 10301                           ;OverLoad_B1.c: 83: } else {
 10302  0290  2A97               	goto	l7996
 10303  0291                     l7994:	
 10304                           
 10305                           ;OverLoad_B1.c: 84: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 10306  0291  082F               	movf	(_Load^(0+256)+9),w
 10307  0292  3E37               	addlw	55
 10308  0293  00CB               	movwf	(_Load^(0+256)+37)
 10309  0294  3000               	movlw	0
 10310  0295  3D30               	addwfc	((_Load+1)^(0+256)+9),w
 10311  0296  00CC               	movwf	((_Load+1)^(0+256)+37)
 10312  0297                     l7996:	
 10313                           
 10314                           ;OverLoad_B1.c: 85: }
 10315                           ;OverLoad_B1.c: 86: }
 10316                           ;OverLoad_B1.c: 87: }
 10317                           ;OverLoad_B1.c: 88: }
 10318                           ;OverLoad_B1.c: 90: if (Load.AD >= Load.JudgeValue) {
 10319  0297  084C               	movf	((_Load+1)^(0+256)+37),w
 10320  0298  0246               	subwf	((_Load+1)^(0+256)+31),w
 10321  0299  1D03               	skipz
 10322  029A  2A9D               	goto	u8085
 10323  029B  084B               	movf	(_Load^(0+256)+37),w
 10324  029C  0245               	subwf	(_Load^(0+256)+31),w
 10325  029D                     u8085:	
 10326  029D  1C03               	skipc
 10327  029E  2AAC               	goto	l8006
 10328                           
 10329                           ;OverLoad_B1.c: 91: Load.ErrorCount++;
 10330  029F  3001               	movlw	1
 10331  02A0  0020               	movlb	0	; select bank0
 10332  02A1  00A9               	movwf	??_Load_Main
 10333  02A2  0829               	movf	??_Load_Main,w
 10334  02A3  0022               	movlb	2	; select bank2
 10335  02A4  07D0               	addwf	(_Load^(0+256)+42),f
 10336                           
 10337                           ;OverLoad_B1.c: 92: if (Load.ErrorCount > 2) {
 10338  02A5  3003               	movlw	3
 10339  02A6  0250               	subwf	(_Load^(0+256)+42),w
 10340  02A7  1C03               	skipc
 10341  02A8  0008               	return
 10342                           
 10343                           ;OverLoad_B1.c: 93: Load.ErrorCount = 0;
 10344  02A9  01D0               	clrf	(_Load^(0+256)+42)
 10345                           
 10346                           ;OverLoad_B1.c: 94: Load.ERROR = 1;
 10347  02AA  16A6               	bsf	_Load^(0+256),5
 10348                           
 10349                           ;OverLoad_B1.c: 107: }
 10350                           ;OverLoad_B1.c: 108: } else {
 10351  02AB  0008               	return
 10352  02AC                     l8006:	
 10353                           
 10354                           ;OverLoad_B1.c: 109: Load.ErrorCount = 0;
 10355  02AC  01D0               	clrf	(_Load^(0+256)+42)
 10356                           
 10357                           ;OverLoad_B1.c: 110: if (Load.Run == 1) {
 10358  02AD  1DA6               	btfss	_Load^(0+256),3
 10359  02AE  0008               	return
 10360                           
 10361                           ;OverLoad_B1.c: 111: if (Load.OK == 0) {
 10362  02AF  1BA6               	btfsc	_Load^(0+256),7
 10363  02B0  0008               	return
 10364                           
 10365                           ;OverLoad_B1.c: 112: Load.SafeCount++;
 10366  02B1  3001               	movlw	1
 10367  02B2  0020               	movlb	0	; select bank0
 10368  02B3  00A9               	movwf	??_Load_Main
 10369  02B4  0829               	movf	??_Load_Main,w
 10370  02B5  0022               	movlb	2	; select bank2
 10371  02B6  07D2               	addwf	(_Load^(0+256)+44),f
 10372                           
 10373                           ;OverLoad_B1.c: 113: if (Load.SafeCount >= 3) {
 10374  02B7  3003               	movlw	3
 10375  02B8  0252               	subwf	(_Load^(0+256)+44),w
 10376  02B9  1C03               	skipc
 10377  02BA  0008               	return
 10378                           
 10379                           ;OverLoad_B1.c: 114: Load.SafeCount = 0;
 10380  02BB  01D2               	clrf	(_Load^(0+256)+44)
 10381                           
 10382                           ;OverLoad_B1.c: 115: Load.OK = 1;
 10383  02BC  17A6               	bsf	_Load^(0+256),7
 10384                           
 10385                           ;OverLoad_B1.c: 116: Load.Run = 0;
 10386  02BD  11A6               	bcf	_Load^(0+256),3
 10387                           
 10388                           ;OverLoad_B1.c: 117: Load.Count = 0;
 10389  02BE  01CF               	clrf	(_Load^(0+256)+41)
 10390                           
 10391                           ;OverLoad_B1.c: 118: Load.TotalLoad = Load.AD;
 10392  02BF  0846               	movf	((_Load+1)^(0+256)+31),w
 10393  02C0  01B0               	clrf	((_Load+1)^(0+256)+9)
 10394  02C1  07B0               	addwf	((_Load+1)^(0+256)+9),f
 10395  02C2  0845               	movf	(_Load^(0+256)+31),w
 10396  02C3  01AF               	clrf	(_Load^(0+256)+9)
 10397  02C4  07AF               	addwf	(_Load^(0+256)+9),f
 10398                           
 10399                           ;OverLoad_B1.c: 127: }
 10400                           ;OverLoad_B1.c: 128: }
 10401                           ;OverLoad_B1.c: 129: }
 10402                           ;OverLoad_B1.c: 130: }
 10403                           ;OverLoad_B1.c: 131: }
 10404                           ;OverLoad_B1.c: 132: }
 10405                           ;OverLoad_B1.c: 133: } else {
 10406  02C5  0008               	return
 10407  02C6                     l1465:	
 10408                           
 10409                           ;OverLoad_B1.c: 134: Load.ADtoGO = 1;
 10410  02C6  1626               	bsf	_Load^(0+256),4
 10411                           
 10412                           ;OverLoad_B1.c: 135: }
 10413                           ;OverLoad_B1.c: 136: } else {
 10414  02C7  0008               	return
 10415  02C8                     l1464:	
 10416                           
 10417                           ;OverLoad_B1.c: 137: if (Load.LightsON == 1 && error != 3) {
 10418  02C8  1D26               	btfss	_Load^(0+256),2
 10419  02C9  2AE6               	goto	l8054
 10420  02CA  0020               	movlb	0	; select bank0
 10421  02CB  082E               	movf	Load_Main@error,w
 10422  02CC  3A03               	xorlw	3
 10423  02CD  1903               	skipnz
 10424  02CE  2AE6               	goto	l8054
 10425                           
 10426                           ;OverLoad_B1.c: 138: Load.LightsON = 0;
 10427  02CF  0022               	movlb	2	; select bank2
 10428  02D0  1126               	bcf	_Load^(0+256),2
 10429                           
 10430                           ;OverLoad_B1.c: 140: Load.Time = 0;
 10431  02D1  01A7               	clrf	(_Load^(0+256)+1)
 10432  02D2  01A8               	clrf	((_Load+1)^(0+256)+1)
 10433                           
 10434                           ;OverLoad_B1.c: 141: Load.ADtoGO = 0;
 10435  02D3  1226               	bcf	_Load^(0+256),4
 10436                           
 10437                           ;OverLoad_B1.c: 142: setLoad_AH_AL_Restore();
 10438  02D4  319E  26A0  3181   	fcall	_setLoad_AH_AL_Restore
 10439                           
 10440                           ;OverLoad_B1.c: 143: Load.Count = 0;
 10441  02D7  0022               	movlb	2	; select bank2
 10442  02D8  01CF               	clrf	(_Load^(0+256)+41)
 10443                           
 10444                           ;OverLoad_B1.c: 144: Load.ErrorCount = 0;
 10445  02D9  01D0               	clrf	(_Load^(0+256)+42)
 10446                           
 10447                           ;OverLoad_B1.c: 145: Load.SafeCount = 0;
 10448  02DA  01D2               	clrf	(_Load^(0+256)+44)
 10449                           
 10450                           ;OverLoad_B1.c: 147: Load.ADH = 0;
 10451  02DB  01AB               	clrf	(_Load^(0+256)+5)
 10452  02DC  01AC               	clrf	((_Load+1)^(0+256)+5)
 10453                           
 10454                           ;OverLoad_B1.c: 148: Load.ADL = 0;
 10455  02DD  01AD               	clrf	(_Load^(0+256)+7)
 10456  02DE  01AE               	clrf	((_Load+1)^(0+256)+7)
 10457                           
 10458                           ;OverLoad_B1.c: 149: Load.AD = 0;
 10459  02DF  01C5               	clrf	(_Load^(0+256)+31)
 10460  02E0  01C6               	clrf	((_Load+1)^(0+256)+31)
 10461                           
 10462                           ;OverLoad_B1.c: 150: Load.JudgeValue = 0;
 10463  02E1  01CB               	clrf	(_Load^(0+256)+37)
 10464  02E2  01CC               	clrf	((_Load+1)^(0+256)+37)
 10465                           
 10466                           ;OverLoad_B1.c: 151: Load.LightsCount = 0;
 10467  02E3  01D1               	clrf	(_Load^(0+256)+43)
 10468                           
 10469                           ;OverLoad_B1.c: 152: Load.Run = 0;
 10470  02E4  11A6               	bcf	_Load^(0+256),3
 10471                           
 10472                           ;OverLoad_B1.c: 153: Load.OK = 1;
 10473  02E5  17A6               	bsf	_Load^(0+256),7
 10474  02E6                     l8054:	
 10475                           
 10476                           ;OverLoad_B1.c: 161: }
 10477                           ;OverLoad_B1.c: 162: if (Load.ERROR == 1) {
 10478  02E6  0022               	movlb	2	; select bank2
 10479  02E7  1EA6               	btfss	_Load^(0+256),5
 10480  02E8  0008               	return
 10481                           
 10482                           ;OverLoad_B1.c: 163: Load.ErrorTime++;
 10483  02E9  3001               	movlw	1
 10484  02EA  07A9               	addwf	(_Load^(0+256)+3),f
 10485  02EB  3000               	movlw	0
 10486  02EC  3DAA               	addwfc	((_Load+1)^(0+256)+3),f
 10487                           
 10488                           ;OverLoad_B1.c: 164: if (Load.ErrorTime >= 1000) {
 10489  02ED  3003               	movlw	3
 10490  02EE  022A               	subwf	((_Load+1)^(0+256)+3),w
 10491  02EF  30E8               	movlw	232
 10492  02F0  1903               	skipnz
 10493  02F1  0229               	subwf	(_Load^(0+256)+3),w
 10494  02F2  1C03               	skipc
 10495  02F3  0008               	return
 10496                           
 10497                           ;OverLoad_B1.c: 165: Load.ErrorTime = 0;
 10498  02F4  01A9               	clrf	(_Load^(0+256)+3)
 10499  02F5  01AA               	clrf	((_Load+1)^(0+256)+3)
 10500                           
 10501                           ;OverLoad_B1.c: 172: Load.ERROR = 0;
 10502  02F6  12A6               	bcf	_Load^(0+256),5
 10503                           
 10504                           ;OverLoad_B1.c: 173: }
 10505                           ;OverLoad_B1.c: 174: }
 10506                           ;OverLoad_B1.c: 175: }
 10507                           ;OverLoad_B1.c: 176: } else {
 10508  02F7  0008               	return
 10509  02F8                     l1460:	
 10510                           
 10511                           ;OverLoad_B1.c: 177: if (myMain.PowerON == 1) {
 10512  02F8  0021               	movlb	1	; select bank1
 10513  02F9  1C20               	btfss	_myMain^(0+128),0
 10514  02FA  0008               	return
 10515                           
 10516                           ;OverLoad_B1.c: 178: Load.Enable = 1;
 10517  02FB  0022               	movlb	2	; select bank2
 10518  02FC  1426               	bsf	_Load^(0+256),0
 10519  02FD  0008               	return
 10520  02FE                     __end_of_Load_Main:	
 10521                           
 10522                           	psect	text53
 10523  1066                     __ptext53:	
 10524 ;; *************** function _getMain_LoadOK *****************
 10525 ;; Defined at:
 10526 ;;		line 436 in file "../src/main_B1.c"
 10527 ;; Parameters:    Size  Location     Type
 10528 ;;		None
 10529 ;; Auto vars:     Size  Location     Type
 10530 ;;  ok              1    2[BANK0 ] unsigned char 
 10531 ;; Return value:  Size  Location     Type
 10532 ;;                  1    wreg      unsigned char 
 10533 ;; Registers used:
 10534 ;;		wreg, status,2, pclath, cstack
 10535 ;; Tracked objects:
 10536 ;;		On entry : 0/0
 10537 ;;		On exit  : 0/0
 10538 ;;		Unchanged: 0/0
 10539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10541 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10542 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10543 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10544 ;;Total ram usage:        2 bytes
 10545 ;; Hardware stack levels used:    1
 10546 ;; Hardware stack levels required when called:    6
 10547 ;; This function calls:
 10548 ;;		_getDimmer_LoadOK
 10549 ;; This function is called by:
 10550 ;;		_Load_Main
 10551 ;; This function uses a non-reentrant model
 10552 ;;
 10553                           
 10554                           
 10555                           ;psect for function _getMain_LoadOK
 10556  1066                     _getMain_LoadOK:	
 10557                           
 10558                           ;main_B1.c: 437: char ok = 0;
 10559                           
 10560                           ;incstack = 0
 10561                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10562  1066  0020               	movlb	0	; select bank0
 10563  1067  01A2               	clrf	getMain_LoadOK@ok
 10564                           
 10565                           ;main_B1.c: 443: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10566  1068  319B  23A2         	fcall	_getDimmer_LoadOK
 10567  106A  3A01               	xorlw	1
 10568  106B  3000               	movlw	0
 10569  106C  1903               	skipnz
 10570  106D  3001               	movlw	1
 10571  106E  0020               	movlb	0	; select bank0
 10572  106F  00A1               	movwf	??_getMain_LoadOK
 10573  1070  0821               	movf	??_getMain_LoadOK,w
 10574  1071  00A2               	movwf	getMain_LoadOK@ok
 10575                           
 10576                           ;main_B1.c: 445: return ok;
 10577  1072  0822               	movf	getMain_LoadOK@ok,w
 10578  1073  0008               	return
 10579  1074                     __end_of_getMain_LoadOK:	
 10580                           
 10581                           	psect	text54
 10582  1BA2                     __ptext54:	
 10583 ;; *************** function _getDimmer_LoadOK *****************
 10584 ;; Defined at:
 10585 ;;		line 611 in file "../src/Dimmer_B1.c"
 10586 ;; Parameters:    Size  Location     Type
 10587 ;;		None
 10588 ;; Auto vars:     Size  Location     Type
 10589 ;;  status          1    0[BANK0 ] unsigned char 
 10590 ;; Return value:  Size  Location     Type
 10591 ;;                  1    wreg      unsigned char 
 10592 ;; Registers used:
 10593 ;;		wreg, status,2
 10594 ;; Tracked objects:
 10595 ;;		On entry : 0/0
 10596 ;;		On exit  : 0/0
 10597 ;;		Unchanged: 0/0
 10598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10600 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10602 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10603 ;;Total ram usage:        1 bytes
 10604 ;; Hardware stack levels used:    1
 10605 ;; Hardware stack levels required when called:    5
 10606 ;; This function calls:
 10607 ;;		Nothing
 10608 ;; This function is called by:
 10609 ;;		_getMain_LoadOK
 10610 ;; This function uses a non-reentrant model
 10611 ;;
 10612                           
 10613                           
 10614                           ;psect for function _getDimmer_LoadOK
 10615  1BA2                     _getDimmer_LoadOK:	
 10616                           
 10617                           ;Dimmer_B1.c: 612: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10618                           
 10619                           ;incstack = 0
 10620                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10621  1BA2  3000               	movlw	0
 10622  1BA3  0022               	movlb	2	; select bank2
 10623  1BA4  18A0               	btfsc	_Dimmer^(0+256),1
 10624  1BA5  3001               	movlw	1
 10625  1BA6  0020               	movlb	0	; select bank0
 10626  1BA7  00A0               	movwf	getDimmer_LoadOK@status
 10627                           
 10628                           ;Dimmer_B1.c: 613: return status;
 10629  1BA8  0820               	movf	getDimmer_LoadOK@status,w
 10630  1BA9  0008               	return
 10631  1BAA                     __end_of_getDimmer_LoadOK:	
 10632                           
 10633                           	psect	text55
 10634  1DF5                     __ptext55:	
 10635 ;; *************** function _getMain_Lights_Count *****************
 10636 ;; Defined at:
 10637 ;;		line 406 in file "../src/main_B1.c"
 10638 ;; Parameters:    Size  Location     Type
 10639 ;;		None
 10640 ;; Auto vars:     Size  Location     Type
 10641 ;;  status2         1    3[BANK0 ] unsigned char 
 10642 ;;  status1         1    2[BANK0 ] unsigned char 
 10643 ;;  status3         1    1[BANK0 ] unsigned char 
 10644 ;;  count           1    0[BANK0 ] unsigned char 
 10645 ;; Return value:  Size  Location     Type
 10646 ;;                  1    wreg      unsigned char 
 10647 ;; Registers used:
 10648 ;;		wreg, status,2, status,0
 10649 ;; Tracked objects:
 10650 ;;		On entry : 0/0
 10651 ;;		On exit  : 0/0
 10652 ;;		Unchanged: 0/0
 10653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10655 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10657 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10658 ;;Total ram usage:        4 bytes
 10659 ;; Hardware stack levels used:    1
 10660 ;; Hardware stack levels required when called:    5
 10661 ;; This function calls:
 10662 ;;		Nothing
 10663 ;; This function is called by:
 10664 ;;		_Load_Main
 10665 ;; This function uses a non-reentrant model
 10666 ;;
 10667                           
 10668                           
 10669                           ;psect for function _getMain_Lights_Count
 10670  1DF5                     _getMain_Lights_Count:	
 10671                           
 10672                           ;main_B1.c: 407: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10673                           
 10674                           ;incstack = 0
 10675                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10676  1DF5  0020               	movlb	0	; select bank0
 10677  1DF6  01A2               	clrf	getMain_Lights_Count@status1
 10678  1DF7  01A3               	clrf	getMain_Lights_Count@status2
 10679  1DF8  01A1               	clrf	getMain_Lights_Count@status3
 10680  1DF9  01A0               	clrf	getMain_Lights_Count@count
 10681                           
 10682                           ;main_B1.c: 411: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10683  1DFA  3000               	movlw	0
 10684  1DFB  0023               	movlb	3	; select bank3
 10685  1DFC  18C7               	btfsc	(_DimmerLights1^(0+384)+9),1
 10686  1DFD  3001               	movlw	1
 10687  1DFE  0020               	movlb	0	; select bank0
 10688  1DFF  00A2               	movwf	getMain_Lights_Count@status1
 10689                           
 10690                           ;main_B1.c: 414: status2 = DimmerLights2.Loop == 1 ? 1 : 0;
 10691  1E00  3000               	movlw	0
 10692  1E01  0023               	movlb	3	; select bank3
 10693  1E02  18D6               	btfsc	(_DimmerLights2^(0+384)+9),1
 10694  1E03  3001               	movlw	1
 10695  1E04  0020               	movlb	0	; select bank0
 10696  1E05  00A3               	movwf	getMain_Lights_Count@status2
 10697                           
 10698                           ;main_B1.c: 432: return count = (status1 + status2 + status3);
 10699  1E06  0822               	movf	getMain_Lights_Count@status1,w
 10700  1E07  0723               	addwf	getMain_Lights_Count@status2,w
 10701  1E08  0721               	addwf	getMain_Lights_Count@status3,w
 10702  1E09  00A0               	movwf	getMain_Lights_Count@count
 10703  1E0A  0008               	return
 10704  1E0B                     __end_of_getMain_Lights_Count:	
 10705                           
 10706                           	psect	text56
 10707  1C8A                     __ptext56:	
 10708 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 10709 ;; Defined at:
 10710 ;;		line 502 in file "../src/Dimmer_B1.c"
 10711 ;; Parameters:    Size  Location     Type
 10712 ;;		None
 10713 ;; Auto vars:     Size  Location     Type
 10714 ;;  adjgo           1    1[BANK0 ] unsigned char 
 10715 ;; Return value:  Size  Location     Type
 10716 ;;                  1    wreg      unsigned char 
 10717 ;; Registers used:
 10718 ;;		wreg, status,2
 10719 ;; Tracked objects:
 10720 ;;		On entry : 0/0
 10721 ;;		On exit  : 0/0
 10722 ;;		Unchanged: 0/0
 10723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10725 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10726 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10727 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10728 ;;Total ram usage:        3 bytes
 10729 ;; Hardware stack levels used:    1
 10730 ;; Hardware stack levels required when called:    5
 10731 ;; This function calls:
 10732 ;;		Nothing
 10733 ;; This function is called by:
 10734 ;;		_setDimmerLights_SwOn
 10735 ;;		_setDimmerLights_AdjControl
 10736 ;;		_Load_Main
 10737 ;; This function uses a non-reentrant model
 10738 ;;
 10739                           
 10740                           
 10741                           ;psect for function _getAll_DimmerLights_AdjGO
 10742  1C8A                     _getAll_DimmerLights_AdjGO:	
 10743                           
 10744                           ;Dimmer_B1.c: 503: char adjgo = 0;
 10745                           
 10746                           ;incstack = 0
 10747                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 10748  1C8A  0020               	movlb	0	; select bank0
 10749  1C8B  01A1               	clrf	getAll_DimmerLights_AdjGO@adjgo
 10750                           
 10751                           ;Dimmer_B1.c: 508: adjgo = DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1 ? 1 : 0;
 10752  1C8C  01A2               	clrf	_getAll_DimmerLights_AdjGO$2556
 10753  1C8D  0AA2               	incf	_getAll_DimmerLights_AdjGO$2556,f
 10754  1C8E  0023               	movlb	3	; select bank3
 10755  1C8F  1DC6               	btfss	(_DimmerLights1^(0+384)+8),3
 10756  1C90  19D5               	btfsc	(_DimmerLights2^(0+384)+8),3
 10757  1C91  2C94               	goto	l6138
 10758  1C92  0020               	movlb	0	; select bank0
 10759  1C93  01A2               	clrf	_getAll_DimmerLights_AdjGO$2556
 10760  1C94                     l6138:	
 10761  1C94  0020               	movlb	0	; select bank0
 10762  1C95  0822               	movf	_getAll_DimmerLights_AdjGO$2556,w
 10763  1C96  00A0               	movwf	??_getAll_DimmerLights_AdjGO
 10764  1C97  0820               	movf	??_getAll_DimmerLights_AdjGO,w
 10765  1C98  00A1               	movwf	getAll_DimmerLights_AdjGO@adjgo
 10766                           
 10767                           ;Dimmer_B1.c: 513: return adjgo;
 10768  1C99  0821               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 10769  1C9A  0008               	return
 10770  1C9B                     __end_of_getAll_DimmerLights_AdjGO:	
 10771                           
 10772                           	psect	text57
 10773  1B64                     __ptext57:	
 10774 ;; *************** function _Load_Initialization *****************
 10775 ;; Defined at:
 10776 ;;		line 9 in file "../src/OverLoad_B1.c"
 10777 ;; Parameters:    Size  Location     Type
 10778 ;;		None
 10779 ;; Auto vars:     Size  Location     Type
 10780 ;;		None
 10781 ;; Return value:  Size  Location     Type
 10782 ;;		None               void
 10783 ;; Registers used:
 10784 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10785 ;; Tracked objects:
 10786 ;;		On entry : 0/0
 10787 ;;		On exit  : 0/0
 10788 ;;		Unchanged: 0/0
 10789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10794 ;;Total ram usage:        0 bytes
 10795 ;; Hardware stack levels used:    1
 10796 ;; Hardware stack levels required when called:    6
 10797 ;; This function calls:
 10798 ;;		_setLoad_AH_AL_Restore
 10799 ;; This function is called by:
 10800 ;;		_main
 10801 ;; This function uses a non-reentrant model
 10802 ;;
 10803                           
 10804                           
 10805                           ;psect for function _Load_Initialization
 10806  1B64                     _Load_Initialization:	
 10807                           
 10808                           ;OverLoad_B1.c: 10: Load.OK = 1;
 10809                           
 10810                           ;incstack = 0
 10811                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10812  1B64  0022               	movlb	2	; select bank2
 10813  1B65  17A6               	bsf	_Load^(0+256),7
 10814                           
 10815                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10816  1B66  319E  26A0         	fcall	_setLoad_AH_AL_Restore
 10817  1B68  0008               	return
 10818  1B69                     __end_of_Load_Initialization:	
 10819                           
 10820                           	psect	text58
 10821  1EA0                     __ptext58:	
 10822 ;; *************** function _setLoad_AH_AL_Restore *****************
 10823 ;; Defined at:
 10824 ;;		line 284 in file "../src/OverLoad_B1.c"
 10825 ;; Parameters:    Size  Location     Type
 10826 ;;		None
 10827 ;; Auto vars:     Size  Location     Type
 10828 ;;  i               1    1[BANK0 ] unsigned char 
 10829 ;; Return value:  Size  Location     Type
 10830 ;;		None               void
 10831 ;; Registers used:
 10832 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10833 ;; Tracked objects:
 10834 ;;		On entry : 0/0
 10835 ;;		On exit  : 0/0
 10836 ;;		Unchanged: 0/0
 10837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10839 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10840 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10841 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10842 ;;Total ram usage:        2 bytes
 10843 ;; Hardware stack levels used:    1
 10844 ;; Hardware stack levels required when called:    5
 10845 ;; This function calls:
 10846 ;;		Nothing
 10847 ;; This function is called by:
 10848 ;;		_Load_Initialization
 10849 ;;		_Load_Main
 10850 ;; This function uses a non-reentrant model
 10851 ;;
 10852                           
 10853                           
 10854                           ;psect for function _setLoad_AH_AL_Restore
 10855  1EA0                     _setLoad_AH_AL_Restore:	
 10856                           
 10857                           ;OverLoad_B1.c: 285: char i;
 10858                           ;OverLoad_B1.c: 286: for (i = 0; i < 5; i++) {
 10859                           
 10860                           ;incstack = 0
 10861                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 10862  1EA0  0020               	movlb	0	; select bank0
 10863  1EA1  01A1               	clrf	setLoad_AH_AL_Restore@i
 10864  1EA2                     L8:	
 10865  1EA2  3005               	movlw	5
 10866  1EA3  0221               	subwf	setLoad_AH_AL_Restore@i,w
 10867  1EA4  1803               	btfsc	3,0
 10868  1EA5  0008               	return
 10869                           
 10870                           ;OverLoad_B1.c: 287: Load.AH[i] = 0;
 10871  1EA6  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10872  1EA7  3E31               	addlw	(_Load+11)& (0+255)
 10873  1EA8  0086               	movwf	6
 10874  1EA9  3001               	movlw	1	; select bank2/3
 10875  1EAA  0087               	movwf	7
 10876  1EAB  3000               	movlw	0
 10877  1EAC  3FC0               	movwi [0]fsr1
 10878  1EAD  3FC1               	movwi [1]fsr1
 10879                           
 10880                           ;OverLoad_B1.c: 288: Load.AL[i] = 0xffff;
 10881  1EAE  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10882  1EAF  3E3B               	addlw	(_Load+21)& (0+255)
 10883  1EB0  0086               	movwf	6
 10884  1EB1  3001               	movlw	1	; select bank2/3
 10885  1EB2  0087               	movwf	7
 10886  1EB3  30FF               	movlw	255
 10887  1EB4  3FC0               	movwi [0]fsr1
 10888  1EB5  30FF               	movlw	255
 10889  1EB6  3FC1               	movwi [1]fsr1
 10890  1EB7  3001               	movlw	1
 10891  1EB8  00A0               	movwf	??_setLoad_AH_AL_Restore
 10892  1EB9  0820               	movf	??_setLoad_AH_AL_Restore,w
 10893  1EBA  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 10894  1EBB  2EA2               	goto	L8
 10895  1EBC                     __end_of_setLoad_AH_AL_Restore:	
 10896                           
 10897                           	psect	text59
 10898  1C0A                     __ptext59:	
 10899 ;; *************** function _LED_Main *****************
 10900 ;; Defined at:
 10901 ;;		line 47 in file "../src/LED_B1.c"
 10902 ;; Parameters:    Size  Location     Type
 10903 ;;		None
 10904 ;; Auto vars:     Size  Location     Type
 10905 ;;		None
 10906 ;; Return value:  Size  Location     Type
 10907 ;;		None               void
 10908 ;; Registers used:
 10909 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10910 ;; Tracked objects:
 10911 ;;		On entry : 0/0
 10912 ;;		On exit  : 0/0
 10913 ;;		Unchanged: 0/0
 10914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10919 ;;Total ram usage:        0 bytes
 10920 ;; Hardware stack levels used:    1
 10921 ;; Hardware stack levels required when called:    7
 10922 ;; This function calls:
 10923 ;;		_setLED_Main
 10924 ;; This function is called by:
 10925 ;;		_main
 10926 ;; This function uses a non-reentrant model
 10927 ;;
 10928                           
 10929                           
 10930                           ;psect for function _LED_Main
 10931  1C0A                     _LED_Main:	
 10932                           
 10933                           ;LED_B1.c: 53: setLED_Main(1);
 10934                           
 10935                           ;incstack = 0
 10936                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10937  1C0A  3001               	movlw	1
 10938  1C0B  3193  23A2  319C   	fcall	_setLED_Main
 10939                           
 10940                           ;LED_B1.c: 56: setLED_Main(2);
 10941  1C0E  3002               	movlw	2
 10942  1C0F  3193  23A2  319C   	fcall	_setLED_Main
 10943                           
 10944                           ;LED_B1.c: 62: setLED_Main(99);
 10945  1C12  3063               	movlw	99
 10946  1C13  3193  23A2         	fcall	_setLED_Main
 10947  1C15  0008               	return
 10948  1C16                     __end_of_LED_Main:	
 10949                           
 10950                           	psect	text60
 10951  13A2                     __ptext60:	
 10952 ;; *************** function _setLED_Main *****************
 10953 ;; Defined at:
 10954 ;;		line 221 in file "../src/LED_B1.c"
 10955 ;; Parameters:    Size  Location     Type
 10956 ;;  led             1    wreg     unsigned char 
 10957 ;; Auto vars:     Size  Location     Type
 10958 ;;  led             1    4[BANK0 ] unsigned char 
 10959 ;; Return value:  Size  Location     Type
 10960 ;;		None               void
 10961 ;; Registers used:
 10962 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10963 ;; Tracked objects:
 10964 ;;		On entry : 0/0
 10965 ;;		On exit  : 0/0
 10966 ;;		Unchanged: 0/0
 10967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10969 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10970 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10971 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10972 ;;Total ram usage:        3 bytes
 10973 ;; Hardware stack levels used:    1
 10974 ;; Hardware stack levels required when called:    6
 10975 ;; This function calls:
 10976 ;;		_LedPointSelect
 10977 ;; This function is called by:
 10978 ;;		_LED_Main
 10979 ;; This function uses a non-reentrant model
 10980 ;;
 10981                           
 10982                           
 10983                           ;psect for function _setLED_Main
 10984  13A2                     _setLED_Main:	
 10985                           
 10986                           ;incstack = 0
 10987                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10988                           ;setLED_Main@led stored from wreg
 10989  13A2  0020               	movlb	0	; select bank0
 10990  13A3  00A4               	movwf	setLED_Main@led
 10991                           
 10992                           ;LED_B1.c: 222: LedPointSelect(led);
 10993  13A4  0824               	movf	setLED_Main@led,w
 10994  13A5  319E  2685  3193   	fcall	_LedPointSelect
 10995                           
 10996                           ;LED_B1.c: 223: if (LED->GO == 1) {
 10997  13A8  087A               	movf	_LED,w
 10998  13A9  0086               	movwf	6
 10999  13AA  3001               	movlw	1	; select bank2/3
 11000  13AB  0087               	movwf	7
 11001  13AC  1C81               	btfss	1,1
 11002  13AD  0008               	return
 11003                           
 11004                           ;LED_B1.c: 224: LED->Time++;
 11005  13AE  0A7A               	incf	_LED,w
 11006  13AF  0086               	movwf	6
 11007  13B0  3001               	movlw	1	; select bank2/3
 11008  13B1  0087               	movwf	7
 11009  13B2  3001               	movlw	1
 11010  13B3  0781               	addwf	1,f
 11011  13B4  3141               	addfsr 1,1
 11012  13B5  1803               	skipnc
 11013  13B6  0A81               	incf	1,f
 11014                           
 11015                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 11016  13B7  0A7A               	incf	_LED,w
 11017  13B8  0086               	movwf	6
 11018  13B9  3001               	movlw	1	; select bank2/3
 11019  13BA  0087               	movwf	7
 11020  13BB  3F40               	moviw [0]fsr1
 11021  13BC  0020               	movlb	0	; select bank0
 11022  13BD  00A2               	movwf	??_setLED_Main
 11023  13BE  3F41               	moviw [1]fsr1
 11024  13BF  00A3               	movwf	??_setLED_Main+1
 11025  13C0  3000               	movlw	0
 11026  13C1  0223               	subwf	??_setLED_Main+1,w
 11027  13C2  3032               	movlw	50
 11028  13C3  1903               	skipnz
 11029  13C4  0222               	subwf	??_setLED_Main,w
 11030  13C5  1C03               	skipc
 11031  13C6  0008               	return
 11032                           
 11033                           ;LED_B1.c: 226: LED->Time = 0;
 11034  13C7  0A7A               	incf	_LED,w
 11035  13C8  0086               	movwf	6
 11036  13C9  3001               	movlw	1	; select bank2/3
 11037  13CA  0087               	movwf	7
 11038  13CB  3000               	movlw	0
 11039  13CC  3FC0               	movwi [0]fsr1
 11040  13CD  3FC1               	movwi [1]fsr1
 11041                           
 11042                           ;LED_B1.c: 228: if (led == 1) {
 11043  13CE  0824               	movf	setLED_Main@led,w
 11044  13CF  3A01               	xorlw	1
 11045                           
 11046                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 11047  13D0  3008               	movlw	8
 11048  13D1  1903               	btfsc	3,2
 11049  13D2  068C               	xorwf	12,f
 11050                           
 11051                           ;LED_B1.c: 230: }
 11052                           ;LED_B1.c: 233: if (led == 2) {
 11053  13D3  0824               	movf	setLED_Main@led,w
 11054  13D4  3A02               	xorlw	2
 11055  13D5  1D03               	skipz
 11056  13D6  2BD9               	goto	l1033
 11057                           
 11058                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 11059  13D7  3080               	movlw	128
 11060  13D8  068E               	xorwf	14,f
 11061  13D9                     l1033:	
 11062                           
 11063                           ;LED_B1.c: 235: }
 11064                           ;LED_B1.c: 243: if (led == 99) {
 11065  13D9  0824               	movf	setLED_Main@led,w
 11066  13DA  3A63               	xorlw	99
 11067  13DB  1D03               	skipz
 11068  13DC  0008               	return
 11069                           
 11070                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11071  13DD  3020               	movlw	32
 11072  13DE  068D               	xorwf	13,f
 11073  13DF  0008               	return
 11074  13E0                     __end_of_setLED_Main:	
 11075                           
 11076                           	psect	text61
 11077  1BFE                     __ptext61:	
 11078 ;; *************** function _LED_Initialization *****************
 11079 ;; Defined at:
 11080 ;;		line 31 in file "../src/LED_B1.c"
 11081 ;; Parameters:    Size  Location     Type
 11082 ;;		None
 11083 ;; Auto vars:     Size  Location     Type
 11084 ;;		None
 11085 ;; Return value:  Size  Location     Type
 11086 ;;		None               void
 11087 ;; Registers used:
 11088 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11089 ;; Tracked objects:
 11090 ;;		On entry : 0/0
 11091 ;;		On exit  : 0/0
 11092 ;;		Unchanged: 0/0
 11093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11098 ;;Total ram usage:        0 bytes
 11099 ;; Hardware stack levels used:    1
 11100 ;; Hardware stack levels required when called:    8
 11101 ;; This function calls:
 11102 ;;		_setLED_Initialization
 11103 ;; This function is called by:
 11104 ;;		_main
 11105 ;; This function uses a non-reentrant model
 11106 ;;
 11107                           
 11108                           
 11109                           ;psect for function _LED_Initialization
 11110  1BFE                     _LED_Initialization:	
 11111                           
 11112                           ;LED_B1.c: 33: setLED_Initialization(1);
 11113                           
 11114                           ;incstack = 0
 11115                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11116  1BFE  3001               	movlw	1
 11117  1BFF  319C  2479  319B   	fcall	_setLED_Initialization
 11118                           
 11119                           ;LED_B1.c: 36: setLED_Initialization(2);
 11120  1C02  3002               	movlw	2
 11121  1C03  319C  2479  319B   	fcall	_setLED_Initialization
 11122                           
 11123                           ;LED_B1.c: 42: setLED_Initialization(99);
 11124  1C06  3063               	movlw	99
 11125  1C07  319C  2479         	fcall	_setLED_Initialization
 11126  1C09  0008               	return
 11127  1C0A                     __end_of_LED_Initialization:	
 11128                           
 11129                           	psect	text62
 11130  1C79                     __ptext62:	
 11131 ;; *************** function _setLED_Initialization *****************
 11132 ;; Defined at:
 11133 ;;		line 69 in file "../src/LED_B1.c"
 11134 ;; Parameters:    Size  Location     Type
 11135 ;;  led             1    wreg     unsigned char 
 11136 ;; Auto vars:     Size  Location     Type
 11137 ;;  led             1    4[BANK0 ] unsigned char 
 11138 ;; Return value:  Size  Location     Type
 11139 ;;		None               void
 11140 ;; Registers used:
 11141 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11142 ;; Tracked objects:
 11143 ;;		On entry : 0/0
 11144 ;;		On exit  : 0/0
 11145 ;;		Unchanged: 0/0
 11146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11148 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11150 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11151 ;;Total ram usage:        1 bytes
 11152 ;; Hardware stack levels used:    1
 11153 ;; Hardware stack levels required when called:    7
 11154 ;; This function calls:
 11155 ;;		_LedPointSelect
 11156 ;;		_setLED
 11157 ;; This function is called by:
 11158 ;;		_LED_Initialization
 11159 ;; This function uses a non-reentrant model
 11160 ;;
 11161                           
 11162                           
 11163                           ;psect for function _setLED_Initialization
 11164  1C79                     _setLED_Initialization:	
 11165                           
 11166                           ;incstack = 0
 11167                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11168                           ;setLED_Initialization@led stored from wreg
 11169  1C79  0020               	movlb	0	; select bank0
 11170  1C7A  00A4               	movwf	setLED_Initialization@led
 11171                           
 11172                           ;LED_B1.c: 70: LedPointSelect(led);
 11173  1C7B  0824               	movf	setLED_Initialization@led,w
 11174  1C7C  319E  2685  319C   	fcall	_LedPointSelect
 11175                           
 11176                           ;LED_B1.c: 71: LED->Enable = 1;
 11177  1C7F  087A               	movf	_LED,w
 11178  1C80  0086               	movwf	6
 11179  1C81  3001               	movlw	1	; select bank2/3
 11180  1C82  0087               	movwf	7
 11181  1C83  1401               	bsf	1,0
 11182                           
 11183                           ;LED_B1.c: 72: setLED(led, 0);
 11184  1C84  0020               	movlb	0	; select bank0
 11185  1C85  01A2               	clrf	setLED@command
 11186  1C86  0824               	movf	setLED_Initialization@led,w
 11187  1C87  3195  259C         	fcall	_setLED
 11188  1C89  0008               	return
 11189  1C8A                     __end_of_setLED_Initialization:	
 11190                           
 11191                           	psect	text63
 11192  128B                     __ptext63:	
 11193 ;; *************** function _Flash_Memory_Main *****************
 11194 ;; Defined at:
 11195 ;;		line 901 in file "../src/MCU_B1.c"
 11196 ;; Parameters:    Size  Location     Type
 11197 ;;		None
 11198 ;; Auto vars:     Size  Location     Type
 11199 ;;		None
 11200 ;; Return value:  Size  Location     Type
 11201 ;;		None               void
 11202 ;; Registers used:
 11203 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11204 ;; Tracked objects:
 11205 ;;		On entry : 0/0
 11206 ;;		On exit  : 0/0
 11207 ;;		Unchanged: 0/0
 11208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11211 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11212 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11213 ;;Total ram usage:        1 bytes
 11214 ;; Hardware stack levels used:    1
 11215 ;; Hardware stack levels required when called:    8
 11216 ;; This function calls:
 11217 ;;		_Flash_Memory_Modify
 11218 ;;		_getMain_LightsStatus
 11219 ;; This function is called by:
 11220 ;;		_main
 11221 ;; This function uses a non-reentrant model
 11222 ;;
 11223                           
 11224                           
 11225                           ;psect for function _Flash_Memory_Main
 11226  128B                     _Flash_Memory_Main:	
 11227                           
 11228                           ;MCU_B1.c: 902: if (Memory.Modify == 1) {
 11229                           
 11230                           ;incstack = 0
 11231                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11232  128B  0024               	movlb	4	; select bank4
 11233  128C  1C44               	btfss	(_Memory^(0+512)+36),0
 11234  128D  0008               	return
 11235                           
 11236                           ;MCU_B1.c: 903: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11237  128E  3191  2162  3192   	fcall	_getMain_LightsStatus
 11238  1291  3A00               	xorlw	0
 11239  1292  3000               	movlw	0
 11240  1293  1903               	skipnz
 11241  1294  3001               	movlw	1
 11242  1295  0020               	movlb	0	; select bank0
 11243  1296  00A9               	movwf	??_Flash_Memory_Main
 11244  1297  0DA9               	rlf	??_Flash_Memory_Main,f
 11245  1298  0024               	movlb	4	; select bank4
 11246  1299  0844               	movf	(_Memory^(0+512)+36),w
 11247  129A  0020               	movlb	0	; select bank0
 11248  129B  0629               	xorwf	??_Flash_Memory_Main,w
 11249  129C  39FD               	andlw	-3
 11250  129D  0629               	xorwf	??_Flash_Memory_Main,w
 11251  129E  0024               	movlb	4	; select bank4
 11252  129F  00C4               	movwf	(_Memory^(0+512)+36)
 11253                           
 11254                           ;MCU_B1.c: 904: if (Memory.GO == 1) {
 11255  12A0  1CC4               	btfss	(_Memory^(0+512)+36),1
 11256  12A1  2ABB               	goto	l1301
 11257                           
 11258                           ;MCU_B1.c: 905: Memory.Runtime = 1;
 11259  12A2  15C4               	bsf	(_Memory^(0+512)+36),3
 11260                           
 11261                           ;MCU_B1.c: 906: Memory.Time++;
 11262  12A3  3001               	movlw	1
 11263  12A4  07C2               	addwf	(_Memory^(0+512)+34),f
 11264  12A5  3000               	movlw	0
 11265  12A6  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11266                           
 11267                           ;MCU_B1.c: 907: if (Memory.Time == 25) {
 11268  12A7  3022               	movlw	34
 11269  12A8  3E20               	addlw	_Memory& (0+255)
 11270  12A9  0086               	movwf	6
 11271  12AA  3002               	movlw	2	; select bank4/5
 11272  12AB  0087               	movwf	7
 11273  12AC  3F40               	moviw [0]fsr1
 11274  12AD  3A19               	xorlw	25
 11275  12AE  1D03               	skipz
 11276  12AF  2AB2               	goto	u7755
 11277  12B0  3F41               	moviw [1]fsr1
 11278  12B1  3A00               	xorlw	0
 11279  12B2                     u7755:	
 11280  12B2  1D03               	skipz
 11281  12B3  0008               	return
 11282                           
 11283                           ;MCU_B1.c: 908: Memory.Time = 0;
 11284  12B4  01C2               	clrf	(_Memory^(0+512)+34)
 11285  12B5  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11286                           
 11287                           ;MCU_B1.c: 909: Memory.Modify = 0;
 11288  12B6  1044               	bcf	(_Memory^(0+512)+36),0
 11289                           
 11290                           ;MCU_B1.c: 910: Memory.GO = 0;
 11291  12B7  10C4               	bcf	(_Memory^(0+512)+36),1
 11292                           
 11293                           ;MCU_B1.c: 911: Flash_Memory_Modify();
 11294  12B8  3194  24FF         	fcall	_Flash_Memory_Modify
 11295                           
 11296                           ;MCU_B1.c: 912: }
 11297                           ;MCU_B1.c: 913: } else {
 11298  12BA  0008               	return
 11299  12BB                     l1301:	
 11300                           
 11301                           ;MCU_B1.c: 914: if (Memory.Runtime == 1) {
 11302  12BB  1DC4               	btfss	(_Memory^(0+512)+36),3
 11303  12BC  0008               	return
 11304                           
 11305                           ;MCU_B1.c: 915: Memory.Runtime = 0;
 11306  12BD  11C4               	bcf	(_Memory^(0+512)+36),3
 11307                           
 11308                           ;MCU_B1.c: 916: Memory.Time = 0;
 11309  12BE  01C2               	clrf	(_Memory^(0+512)+34)
 11310  12BF  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11311  12C0  0008               	return
 11312  12C1                     __end_of_Flash_Memory_Main:	
 11313                           
 11314                           	psect	text64
 11315  14FF                     __ptext64:	
 11316 ;; *************** function _Flash_Memory_Modify *****************
 11317 ;; Defined at:
 11318 ;;		line 974 in file "../src/MCU_B1.c"
 11319 ;; Parameters:    Size  Location     Type
 11320 ;;		None
 11321 ;; Auto vars:     Size  Location     Type
 11322 ;;  i               1    5[BANK0 ] unsigned char 
 11323 ;; Return value:  Size  Location     Type
 11324 ;;		None               void
 11325 ;; Registers used:
 11326 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11327 ;; Tracked objects:
 11328 ;;		On entry : 0/0
 11329 ;;		On exit  : 0/0
 11330 ;;		Unchanged: 0/0
 11331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11333 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11334 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11335 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11336 ;;Total ram usage:        2 bytes
 11337 ;; Hardware stack levels used:    1
 11338 ;; Hardware stack levels required when called:    7
 11339 ;; This function calls:
 11340 ;;		_Flash_Memory_Erasing
 11341 ;;		_Flash_Memory_Read
 11342 ;;		_Flash_Memory_Write
 11343 ;;		_setMemory_Data
 11344 ;; This function is called by:
 11345 ;;		_Flash_Memory_Main
 11346 ;; This function uses a non-reentrant model
 11347 ;;
 11348                           
 11349                           
 11350                           ;psect for function _Flash_Memory_Modify
 11351  14FF                     _Flash_Memory_Modify:	
 11352                           
 11353                           ;MCU_B1.c: 975: char i = 0;
 11354                           
 11355                           ;incstack = 0
 11356                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11357  14FF  0020               	movlb	0	; select bank0
 11358  1500  01A5               	clrf	Flash_Memory_Modify@i
 11359                           
 11360                           ;MCU_B1.c: 976: for (i = 0; i < 32; i++) {
 11361  1501  01A5               	clrf	Flash_Memory_Modify@i
 11362  1502  3020               	movlw	32
 11363  1503  0225               	subwf	Flash_Memory_Modify@i,w
 11364  1504  1803               	btfsc	3,0
 11365  1505  2D1B               	goto	l7334
 11366  1506                     l7328:	
 11367                           
 11368                           ;MCU_B1.c: 977: Memory.Data[i] = Flash_Memory_Read(i);
 11369  1506  0825               	movf	Flash_Memory_Modify@i,w
 11370  1507  319E  266B  3194   	fcall	_Flash_Memory_Read
 11371  150A  0020               	movlb	0	; select bank0
 11372  150B  00A4               	movwf	??_Flash_Memory_Modify
 11373  150C  0825               	movf	Flash_Memory_Modify@i,w
 11374  150D  3E20               	addlw	_Memory& (0+255)
 11375  150E  0086               	movwf	6
 11376  150F  3002               	movlw	2	; select bank4/5
 11377  1510  0087               	movwf	7
 11378  1511  0824               	movf	??_Flash_Memory_Modify,w
 11379  1512  0081               	movwf	1
 11380  1513  3001               	movlw	1
 11381  1514  00A4               	movwf	??_Flash_Memory_Modify
 11382  1515  0824               	movf	??_Flash_Memory_Modify,w
 11383  1516  07A5               	addwf	Flash_Memory_Modify@i,f
 11384  1517  3020               	movlw	32
 11385  1518  0225               	subwf	Flash_Memory_Modify@i,w
 11386  1519  1C03               	skipc
 11387  151A  2D06               	goto	l7328
 11388  151B                     l7334:	
 11389                           
 11390                           ;MCU_B1.c: 978: }
 11391                           ;MCU_B1.c: 979: setMemory_Data(0, product->Data[12]);
 11392  151B  086E               	movf	_product,w
 11393  151C  0086               	movwf	6
 11394  151D  3002               	movlw	2	; select bank4/5
 11395  151E  0087               	movwf	7
 11396  151F  3002               	movlw	2	; select bank4/5
 11397  1520  3F4C               	moviw [12]fsr1
 11398  1521  00A0               	movwf	setMemory_Data@data
 11399  1522  3000               	movlw	0
 11400  1523  319B  23E6  3194   	fcall	_setMemory_Data
 11401                           
 11402                           ;MCU_B1.c: 980: setMemory_Data(1, product->Data[13]);
 11403  1526  0020               	movlb	0	; select bank0
 11404  1527  086E               	movf	_product,w
 11405  1528  0086               	movwf	6
 11406  1529  3002               	movlw	2	; select bank4/5
 11407  152A  0087               	movwf	7
 11408  152B  3002               	movlw	2	; select bank4/5
 11409  152C  3F4D               	moviw [13]fsr1
 11410  152D  00A0               	movwf	setMemory_Data@data
 11411  152E  3001               	movlw	1
 11412  152F  319B  23E6  3194   	fcall	_setMemory_Data
 11413                           
 11414                           ;MCU_B1.c: 981: setMemory_Data(2, product->Data[14]);
 11415  1532  0020               	movlb	0	; select bank0
 11416  1533  086E               	movf	_product,w
 11417  1534  0086               	movwf	6
 11418  1535  3002               	movlw	2	; select bank4/5
 11419  1536  0087               	movwf	7
 11420  1537  3002               	movlw	2	; select bank4/5
 11421  1538  3F4E               	moviw [14]fsr1
 11422  1539  00A0               	movwf	setMemory_Data@data
 11423  153A  3002               	movlw	2
 11424  153B  319B  23E6  3194   	fcall	_setMemory_Data
 11425                           
 11426                           ;MCU_B1.c: 987: if (Memory.LoopSave == 1) {
 11427  153E  0024               	movlb	4	; select bank4
 11428  153F  1D44               	btfss	(_Memory^(0+512)+36),2
 11429  1540  2D45               	goto	l1324
 11430                           
 11431                           ;MCU_B1.c: 988: Memory.LoopSave = 0;
 11432  1541  1144               	bcf	(_Memory^(0+512)+36),2
 11433                           
 11434                           ;MCU_B1.c: 989: myMain.FirstOpen = 0;
 11435  1542  0021               	movlb	1	; select bank1
 11436  1543  11A0               	bcf	_myMain^(0+128),3
 11437                           
 11438                           ;MCU_B1.c: 990: myMain.First = 0;
 11439  1544  12A0               	bcf	_myMain^(0+128),5
 11440  1545                     l1324:	
 11441                           
 11442                           ;MCU_B1.c: 992: }
 11443                           ;MCU_B1.c: 993: GIE = 0;
 11444  1545  138B               	bcf	11,7	;volatile
 11445                           
 11446                           ;MCU_B1.c: 994: Flash_Memory_Erasing();
 11447  1546  319B  23F2  3194   	fcall	_Flash_Memory_Erasing
 11448                           
 11449                           ;MCU_B1.c: 995: Flash_Memory_Write();
 11450  1549  3191  218E         	fcall	_Flash_Memory_Write
 11451                           
 11452                           ;MCU_B1.c: 996: GIE = 1;
 11453  154B  178B               	bsf	11,7	;volatile
 11454  154C  0008               	return
 11455  154D                     __end_of_Flash_Memory_Modify:	
 11456                           
 11457                           	psect	text65
 11458  1BF2                     __ptext65:	
 11459 ;; *************** function _Flash_Memory_Erasing *****************
 11460 ;; Defined at:
 11461 ;;		line 963 in file "../src/MCU_B1.c"
 11462 ;; Parameters:    Size  Location     Type
 11463 ;;		None
 11464 ;; Auto vars:     Size  Location     Type
 11465 ;;		None
 11466 ;; Return value:  Size  Location     Type
 11467 ;;		None               void
 11468 ;; Registers used:
 11469 ;;		wreg, status,2, status,0, pclath, cstack
 11470 ;; Tracked objects:
 11471 ;;		On entry : 0/0
 11472 ;;		On exit  : 0/0
 11473 ;;		Unchanged: 0/0
 11474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11479 ;;Total ram usage:        0 bytes
 11480 ;; Hardware stack levels used:    1
 11481 ;; Hardware stack levels required when called:    6
 11482 ;; This function calls:
 11483 ;;		_Flash_Memory_Unlock
 11484 ;; This function is called by:
 11485 ;;		_Flash_Memory_Modify
 11486 ;; This function uses a non-reentrant model
 11487 ;;
 11488                           
 11489                           
 11490                           ;psect for function _Flash_Memory_Erasing
 11491  1BF2                     _Flash_Memory_Erasing:	
 11492                           
 11493                           ;MCU_B1.c: 964: CFGS = 0;
 11494                           
 11495                           ;incstack = 0
 11496                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11497  1BF2  0023               	movlb	3	; select bank3
 11498  1BF3  1315               	bcf	21,6	;volatile
 11499                           
 11500                           ;MCU_B1.c: 965: PMADRH = 0x30;
 11501  1BF4  3030               	movlw	48
 11502  1BF5  0092               	movwf	18	;volatile
 11503                           
 11504                           ;MCU_B1.c: 966: PMADRL = 0x00;
 11505  1BF6  0191               	clrf	17	;volatile
 11506                           
 11507                           ;MCU_B1.c: 967: FREE = 1;
 11508  1BF7  1615               	bsf	21,4	;volatile
 11509                           
 11510                           ;MCU_B1.c: 968: WREN = 1;
 11511  1BF8  1515               	bsf	21,2	;volatile
 11512                           
 11513                           ;MCU_B1.c: 969: Flash_Memory_Unlock();
 11514  1BF9  319B  23BB         	fcall	_Flash_Memory_Unlock
 11515                           
 11516                           ;MCU_B1.c: 970: WREN = 0;
 11517  1BFB  0023               	movlb	3	; select bank3
 11518  1BFC  1115               	bcf	21,2	;volatile
 11519  1BFD  0008               	return
 11520  1BFE                     __end_of_Flash_Memory_Erasing:	
 11521                           
 11522                           	psect	text66
 11523  0620                     __ptext66:	
 11524 ;; *************** function _Flash_Memory_Initialization *****************
 11525 ;; Defined at:
 11526 ;;		line 860 in file "../src/MCU_B1.c"
 11527 ;; Parameters:    Size  Location     Type
 11528 ;;		None
 11529 ;; Auto vars:     Size  Location     Type
 11530 ;;  i               1   67[BANK0 ] unsigned char 
 11531 ;; Return value:  Size  Location     Type
 11532 ;;		None               void
 11533 ;; Registers used:
 11534 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11535 ;; Tracked objects:
 11536 ;;		On entry : 0/0
 11537 ;;		On exit  : 0/0
 11538 ;;		Unchanged: 0/0
 11539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11541 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11542 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11543 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11544 ;;Total ram usage:        2 bytes
 11545 ;; Hardware stack levels used:    1
 11546 ;; Hardware stack levels required when called:    8
 11547 ;; This function calls:
 11548 ;;		_Flash_Memory_Read
 11549 ;;		_Flash_Memory_Write
 11550 ;;		_setMemory_Data
 11551 ;;		_setPercentValue
 11552 ;; This function is called by:
 11553 ;;		_main
 11554 ;; This function uses a non-reentrant model
 11555 ;;
 11556                           
 11557                           
 11558                           ;psect for function _Flash_Memory_Initialization
 11559  0620                     _Flash_Memory_Initialization:	
 11560                           
 11561                           ;MCU_B1.c: 861: char i = 0;
 11562                           
 11563                           ;incstack = 0
 11564                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11565  0620  0020               	movlb	0	; select bank0
 11566  0621  01E3               	clrf	Flash_Memory_Initialization@i
 11567                           
 11568                           ;MCU_B1.c: 862: if (Flash_Memory_Read(31) == 0xaa) {
 11569  0622  301F               	movlw	31
 11570  0623  319E  266B  3186   	fcall	_Flash_Memory_Read
 11571  0626  3AAA               	xorlw	170
 11572  0627  1D03               	skipz
 11573  0628  2E92               	goto	l7806
 11574                           
 11575                           ;MCU_B1.c: 863: product->Data[12] = Flash_Memory_Read(0);
 11576  0629  3000               	movlw	0
 11577  062A  319E  266B  3186   	fcall	_Flash_Memory_Read
 11578  062D  0020               	movlb	0	; select bank0
 11579  062E  00E2               	movwf	??_Flash_Memory_Initialization
 11580  062F  086E               	movf	_product,w
 11581  0630  3E0C               	addlw	12
 11582  0631  0086               	movwf	6
 11583  0632  3002               	movlw	2	; select bank4/5
 11584  0633  0087               	movwf	7
 11585  0634  0862               	movf	??_Flash_Memory_Initialization,w
 11586  0635  0081               	movwf	1
 11587                           
 11588                           ;MCU_B1.c: 864: product->Data[13] = Flash_Memory_Read(1);
 11589  0636  3001               	movlw	1
 11590  0637  319E  266B  3186   	fcall	_Flash_Memory_Read
 11591  063A  0020               	movlb	0	; select bank0
 11592  063B  00E2               	movwf	??_Flash_Memory_Initialization
 11593  063C  086E               	movf	_product,w
 11594  063D  3E0D               	addlw	13
 11595  063E  0086               	movwf	6
 11596  063F  3002               	movlw	2	; select bank4/5
 11597  0640  0087               	movwf	7
 11598  0641  0862               	movf	??_Flash_Memory_Initialization,w
 11599  0642  0081               	movwf	1
 11600                           
 11601                           ;MCU_B1.c: 865: product->Data[14] = Flash_Memory_Read(2);
 11602  0643  3002               	movlw	2
 11603  0644  319E  266B  3186   	fcall	_Flash_Memory_Read
 11604  0647  0020               	movlb	0	; select bank0
 11605  0648  00E2               	movwf	??_Flash_Memory_Initialization
 11606  0649  086E               	movf	_product,w
 11607  064A  3E0E               	addlw	14
 11608  064B  0086               	movwf	6
 11609  064C  3002               	movlw	2	; select bank4/5
 11610  064D  0087               	movwf	7
 11611  064E  0862               	movf	??_Flash_Memory_Initialization,w
 11612  064F  0081               	movwf	1
 11613                           
 11614                           ;MCU_B1.c: 871: i = setPercentValue(((char)(80*0.8)));
 11615  0650  3040               	movlw	64
 11616  0651  3189  218B  3186   	fcall	_setPercentValue
 11617  0654  0020               	movlb	0	; select bank0
 11618  0655  00E2               	movwf	??_Flash_Memory_Initialization
 11619  0656  0862               	movf	??_Flash_Memory_Initialization,w
 11620  0657  00E3               	movwf	Flash_Memory_Initialization@i
 11621                           
 11622                           ;MCU_B1.c: 872: product->Data[21] = i;
 11623  0658  0863               	movf	Flash_Memory_Initialization@i,w
 11624  0659  00E2               	movwf	??_Flash_Memory_Initialization
 11625  065A  086E               	movf	_product,w
 11626  065B  3E15               	addlw	21
 11627  065C  0086               	movwf	6
 11628  065D  3002               	movlw	2	; select bank4/5
 11629  065E  0087               	movwf	7
 11630  065F  0862               	movf	??_Flash_Memory_Initialization,w
 11631  0660  0081               	movwf	1
 11632                           
 11633                           ;MCU_B1.c: 873: product->Data[22] = i;
 11634  0661  0863               	movf	Flash_Memory_Initialization@i,w
 11635  0662  00E2               	movwf	??_Flash_Memory_Initialization
 11636  0663  086E               	movf	_product,w
 11637  0664  3E16               	addlw	22
 11638  0665  0086               	movwf	6
 11639  0666  3002               	movlw	2	; select bank4/5
 11640  0667  0087               	movwf	7
 11641  0668  0862               	movf	??_Flash_Memory_Initialization,w
 11642  0669  0081               	movwf	1
 11643                           
 11644                           ;MCU_B1.c: 874: product->Data[23] = i;
 11645  066A  0863               	movf	Flash_Memory_Initialization@i,w
 11646  066B  00E2               	movwf	??_Flash_Memory_Initialization
 11647  066C  086E               	movf	_product,w
 11648  066D  3E17               	addlw	23
 11649  066E  0086               	movwf	6
 11650  066F  3002               	movlw	2	; select bank4/5
 11651  0670  0087               	movwf	7
 11652  0671  0862               	movf	??_Flash_Memory_Initialization,w
 11653  0672  0081               	movwf	1
 11654                           
 11655                           ;MCU_B1.c: 876: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11656  0673  086E               	movf	_product,w
 11657  0674  3E0C               	addlw	12
 11658  0675  0086               	movwf	6
 11659  0676  3002               	movlw	2	; select bank4/5
 11660  0677  0087               	movwf	7
 11661  0678  0801               	movf	1,w
 11662  0679  3AFF               	xorlw	255
 11663  067A  1D03               	skipz
 11664  067B  0008               	return
 11665  067C  086E               	movf	_product,w
 11666  067D  3E0D               	addlw	13
 11667  067E  0086               	movwf	6
 11668  067F  3002               	movlw	2	; select bank4/5
 11669  0680  0087               	movwf	7
 11670  0681  0801               	movf	1,w
 11671  0682  3AFF               	xorlw	255
 11672  0683  1D03               	skipz
 11673  0684  0008               	return
 11674  0685  086E               	movf	_product,w
 11675  0686  3E0E               	addlw	14
 11676  0687  0086               	movwf	6
 11677  0688  3002               	movlw	2	; select bank4/5
 11678  0689  0087               	movwf	7
 11679  068A  0801               	movf	1,w
 11680  068B  3AFF               	xorlw	255
 11681  068C  1D03               	skipz
 11682  068D  0008               	return
 11683                           
 11684                           ;MCU_B1.c: 877: myMain.FirstOpen = 1;
 11685  068E  0021               	movlb	1	; select bank1
 11686  068F  15A0               	bsf	_myMain^(0+128),3
 11687                           
 11688                           ;MCU_B1.c: 878: myMain.First = 1;
 11689  0690  16A0               	bsf	_myMain^(0+128),5
 11690                           
 11691                           ;MCU_B1.c: 879: }
 11692                           ;MCU_B1.c: 880: } else {
 11693  0691  0008               	return
 11694  0692                     l7806:	
 11695                           
 11696                           ;MCU_B1.c: 881: i = setPercentValue(((char)(80*0.8)));
 11697  0692  3040               	movlw	64
 11698  0693  3189  218B  3186   	fcall	_setPercentValue
 11699  0696  0020               	movlb	0	; select bank0
 11700  0697  00E2               	movwf	??_Flash_Memory_Initialization
 11701  0698  0862               	movf	??_Flash_Memory_Initialization,w
 11702  0699  00E3               	movwf	Flash_Memory_Initialization@i
 11703                           
 11704                           ;MCU_B1.c: 882: setMemory_Data(0, 0xff);
 11705  069A  30FF               	movlw	255
 11706  069B  00E2               	movwf	??_Flash_Memory_Initialization
 11707  069C  0862               	movf	??_Flash_Memory_Initialization,w
 11708  069D  00A0               	movwf	setMemory_Data@data
 11709  069E  3000               	movlw	0
 11710  069F  319B  23E6  3186   	fcall	_setMemory_Data
 11711                           
 11712                           ;MCU_B1.c: 883: setMemory_Data(1, 0xff);
 11713  06A2  30FF               	movlw	255
 11714  06A3  0020               	movlb	0	; select bank0
 11715  06A4  00E2               	movwf	??_Flash_Memory_Initialization
 11716  06A5  0862               	movf	??_Flash_Memory_Initialization,w
 11717  06A6  00A0               	movwf	setMemory_Data@data
 11718  06A7  3001               	movlw	1
 11719  06A8  319B  23E6  3186   	fcall	_setMemory_Data
 11720                           
 11721                           ;MCU_B1.c: 884: setMemory_Data(2, 0xff);
 11722  06AB  30FF               	movlw	255
 11723  06AC  0020               	movlb	0	; select bank0
 11724  06AD  00E2               	movwf	??_Flash_Memory_Initialization
 11725  06AE  0862               	movf	??_Flash_Memory_Initialization,w
 11726  06AF  00A0               	movwf	setMemory_Data@data
 11727  06B0  3002               	movlw	2
 11728  06B1  319B  23E6  3186   	fcall	_setMemory_Data
 11729                           
 11730                           ;MCU_B1.c: 885: setMemory_Data(3, 0xff);
 11731  06B4  30FF               	movlw	255
 11732  06B5  0020               	movlb	0	; select bank0
 11733  06B6  00E2               	movwf	??_Flash_Memory_Initialization
 11734  06B7  0862               	movf	??_Flash_Memory_Initialization,w
 11735  06B8  00A0               	movwf	setMemory_Data@data
 11736  06B9  3003               	movlw	3
 11737  06BA  319B  23E6  3186   	fcall	_setMemory_Data
 11738                           
 11739                           ;MCU_B1.c: 886: setMemory_Data(4, 0xff);
 11740  06BD  30FF               	movlw	255
 11741  06BE  0020               	movlb	0	; select bank0
 11742  06BF  00E2               	movwf	??_Flash_Memory_Initialization
 11743  06C0  0862               	movf	??_Flash_Memory_Initialization,w
 11744  06C1  00A0               	movwf	setMemory_Data@data
 11745  06C2  3004               	movlw	4
 11746  06C3  319B  23E6  3186   	fcall	_setMemory_Data
 11747                           
 11748                           ;MCU_B1.c: 887: setMemory_Data(5, 0xff);
 11749  06C6  30FF               	movlw	255
 11750  06C7  0020               	movlb	0	; select bank0
 11751  06C8  00E2               	movwf	??_Flash_Memory_Initialization
 11752  06C9  0862               	movf	??_Flash_Memory_Initialization,w
 11753  06CA  00A0               	movwf	setMemory_Data@data
 11754  06CB  3005               	movlw	5
 11755  06CC  319B  23E6  3186   	fcall	_setMemory_Data
 11756                           
 11757                           ;MCU_B1.c: 888: setMemory_Data(31, 0xaa);
 11758  06CF  30AA               	movlw	170
 11759  06D0  0020               	movlb	0	; select bank0
 11760  06D1  00E2               	movwf	??_Flash_Memory_Initialization
 11761  06D2  0862               	movf	??_Flash_Memory_Initialization,w
 11762  06D3  00A0               	movwf	setMemory_Data@data
 11763  06D4  301F               	movlw	31
 11764  06D5  319B  23E6  3186   	fcall	_setMemory_Data
 11765                           
 11766                           ;MCU_B1.c: 889: product->Data[21] = i;
 11767  06D8  0020               	movlb	0	; select bank0
 11768  06D9  0863               	movf	Flash_Memory_Initialization@i,w
 11769  06DA  00E2               	movwf	??_Flash_Memory_Initialization
 11770  06DB  086E               	movf	_product,w
 11771  06DC  3E15               	addlw	21
 11772  06DD  0086               	movwf	6
 11773  06DE  3002               	movlw	2	; select bank4/5
 11774  06DF  0087               	movwf	7
 11775  06E0  0862               	movf	??_Flash_Memory_Initialization,w
 11776  06E1  0081               	movwf	1
 11777                           
 11778                           ;MCU_B1.c: 890: product->Data[22] = i;
 11779  06E2  0863               	movf	Flash_Memory_Initialization@i,w
 11780  06E3  00E2               	movwf	??_Flash_Memory_Initialization
 11781  06E4  086E               	movf	_product,w
 11782  06E5  3E16               	addlw	22
 11783  06E6  0086               	movwf	6
 11784  06E7  3002               	movlw	2	; select bank4/5
 11785  06E8  0087               	movwf	7
 11786  06E9  0862               	movf	??_Flash_Memory_Initialization,w
 11787  06EA  0081               	movwf	1
 11788                           
 11789                           ;MCU_B1.c: 891: product->Data[23] = i;
 11790  06EB  0863               	movf	Flash_Memory_Initialization@i,w
 11791  06EC  00E2               	movwf	??_Flash_Memory_Initialization
 11792  06ED  086E               	movf	_product,w
 11793  06EE  3E17               	addlw	23
 11794  06EF  0086               	movwf	6
 11795  06F0  3002               	movlw	2	; select bank4/5
 11796  06F1  0087               	movwf	7
 11797  06F2  0862               	movf	??_Flash_Memory_Initialization,w
 11798  06F3  0081               	movwf	1
 11799                           
 11800                           ;MCU_B1.c: 892: GIE = 0;
 11801  06F4  138B               	bcf	11,7	;volatile
 11802                           
 11803                           ;MCU_B1.c: 893: Flash_Memory_Write();
 11804  06F5  3191  218E         	fcall	_Flash_Memory_Write
 11805                           
 11806                           ;MCU_B1.c: 894: GIE = 1;
 11807  06F7  178B               	bsf	11,7	;volatile
 11808                           
 11809                           ;MCU_B1.c: 895: myMain.FirstOpen = 1;
 11810  06F8  0021               	movlb	1	; select bank1
 11811  06F9  15A0               	bsf	_myMain^(0+128),3
 11812                           
 11813                           ;MCU_B1.c: 896: myMain.First = 1;
 11814  06FA  16A0               	bsf	_myMain^(0+128),5
 11815  06FB  0008               	return
 11816  06FC                     __end_of_Flash_Memory_Initialization:	
 11817                           
 11818                           	psect	text67
 11819  1BE6                     __ptext67:	
 11820 ;; *************** function _setMemory_Data *****************
 11821 ;; Defined at:
 11822 ;;		line 1011 in file "../src/MCU_B1.c"
 11823 ;; Parameters:    Size  Location     Type
 11824 ;;  address         1    wreg     unsigned char 
 11825 ;;  data            1    0[BANK0 ] unsigned char 
 11826 ;; Auto vars:     Size  Location     Type
 11827 ;;  address         1    2[BANK0 ] unsigned char 
 11828 ;; Return value:  Size  Location     Type
 11829 ;;		None               void
 11830 ;; Registers used:
 11831 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11832 ;; Tracked objects:
 11833 ;;		On entry : 0/0
 11834 ;;		On exit  : 0/0
 11835 ;;		Unchanged: 0/0
 11836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11837 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11838 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11839 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11840 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11841 ;;Total ram usage:        3 bytes
 11842 ;; Hardware stack levels used:    1
 11843 ;; Hardware stack levels required when called:    5
 11844 ;; This function calls:
 11845 ;;		Nothing
 11846 ;; This function is called by:
 11847 ;;		_Flash_Memory_Initialization
 11848 ;;		_Flash_Memory_Modify
 11849 ;; This function uses a non-reentrant model
 11850 ;;
 11851                           
 11852                           
 11853                           ;psect for function _setMemory_Data
 11854  1BE6                     _setMemory_Data:	
 11855                           
 11856                           ;incstack = 0
 11857                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 11858                           ;setMemory_Data@address stored from wreg
 11859  1BE6  0020               	movlb	0	; select bank0
 11860  1BE7  00A2               	movwf	setMemory_Data@address
 11861                           
 11862                           ;MCU_B1.c: 1012: Memory.Data[address] = data;
 11863  1BE8  0820               	movf	setMemory_Data@data,w
 11864  1BE9  00A1               	movwf	??_setMemory_Data
 11865  1BEA  0822               	movf	setMemory_Data@address,w
 11866  1BEB  3E20               	addlw	_Memory& (0+255)
 11867  1BEC  0086               	movwf	6
 11868  1BED  3002               	movlw	2	; select bank4/5
 11869  1BEE  0087               	movwf	7
 11870  1BEF  0821               	movf	??_setMemory_Data,w
 11871  1BF0  0081               	movwf	1
 11872  1BF1  0008               	return
 11873  1BF2                     __end_of_setMemory_Data:	
 11874                           
 11875                           	psect	text68
 11876  118E                     __ptext68:	
 11877 ;; *************** function _Flash_Memory_Write *****************
 11878 ;; Defined at:
 11879 ;;		line 944 in file "../src/MCU_B1.c"
 11880 ;; Parameters:    Size  Location     Type
 11881 ;;		None
 11882 ;; Auto vars:     Size  Location     Type
 11883 ;;  i               1    1[BANK0 ] unsigned char 
 11884 ;; Return value:  Size  Location     Type
 11885 ;;		None               void
 11886 ;; Registers used:
 11887 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11888 ;; Tracked objects:
 11889 ;;		On entry : 0/0
 11890 ;;		On exit  : 0/0
 11891 ;;		Unchanged: 0/0
 11892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11894 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11895 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11896 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11897 ;;Total ram usage:        2 bytes
 11898 ;; Hardware stack levels used:    1
 11899 ;; Hardware stack levels required when called:    6
 11900 ;; This function calls:
 11901 ;;		_Flash_Memory_Unlock
 11902 ;; This function is called by:
 11903 ;;		_Flash_Memory_Initialization
 11904 ;;		_Flash_Memory_Modify
 11905 ;; This function uses a non-reentrant model
 11906 ;;
 11907                           
 11908                           
 11909                           ;psect for function _Flash_Memory_Write
 11910  118E                     _Flash_Memory_Write:	
 11911                           
 11912                           ;MCU_B1.c: 945: char i = 0;
 11913                           
 11914                           ;incstack = 0
 11915                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11916  118E  0020               	movlb	0	; select bank0
 11917  118F  01A1               	clrf	Flash_Memory_Write@i
 11918                           
 11919                           ;MCU_B1.c: 946: CFGS = 0;
 11920  1190  0023               	movlb	3	; select bank3
 11921  1191  1315               	bcf	21,6	;volatile
 11922                           
 11923                           ;MCU_B1.c: 947: PMADRH = 0x30;
 11924  1192  3030               	movlw	48
 11925  1193  0092               	movwf	18	;volatile
 11926                           
 11927                           ;MCU_B1.c: 948: PMDATH = 0;
 11928  1194  0194               	clrf	20	;volatile
 11929                           
 11930                           ;MCU_B1.c: 949: FREE = 0;
 11931  1195  1215               	bcf	21,4	;volatile
 11932                           
 11933                           ;MCU_B1.c: 950: LWLO = 1;
 11934  1196  1695               	bsf	21,5	;volatile
 11935                           
 11936                           ;MCU_B1.c: 951: WREN = 1;
 11937  1197  1515               	bsf	21,2	;volatile
 11938                           
 11939                           ;MCU_B1.c: 952: for (i = 0; i < 32; i++) {
 11940  1198  0020               	movlb	0	; select bank0
 11941  1199  01A1               	clrf	Flash_Memory_Write@i
 11942  119A  3020               	movlw	32
 11943  119B  0221               	subwf	Flash_Memory_Write@i,w
 11944  119C  1803               	btfsc	3,0
 11945  119D  29B6               	goto	l1315
 11946  119E                     l6892:	
 11947                           
 11948                           ;MCU_B1.c: 953: PMADRL = i;
 11949  119E  0821               	movf	Flash_Memory_Write@i,w
 11950  119F  0023               	movlb	3	; select bank3
 11951  11A0  0091               	movwf	17	;volatile
 11952                           
 11953                           ;MCU_B1.c: 954: PMDATL = Memory.Data[i];
 11954  11A1  0020               	movlb	0	; select bank0
 11955  11A2  0821               	movf	Flash_Memory_Write@i,w
 11956  11A3  3E20               	addlw	_Memory& (0+255)
 11957  11A4  0086               	movwf	6
 11958  11A5  3002               	movlw	2	; select bank4/5
 11959  11A6  0087               	movwf	7
 11960  11A7  0801               	movf	1,w
 11961  11A8  0023               	movlb	3	; select bank3
 11962  11A9  0093               	movwf	19	;volatile
 11963                           
 11964                           ;MCU_B1.c: 955: Flash_Memory_Unlock();
 11965  11AA  319B  23BB  3191   	fcall	_Flash_Memory_Unlock
 11966  11AD  3001               	movlw	1
 11967  11AE  0020               	movlb	0	; select bank0
 11968  11AF  00A0               	movwf	??_Flash_Memory_Write
 11969  11B0  0820               	movf	??_Flash_Memory_Write,w
 11970  11B1  07A1               	addwf	Flash_Memory_Write@i,f
 11971  11B2  3020               	movlw	32
 11972  11B3  0221               	subwf	Flash_Memory_Write@i,w
 11973  11B4  1C03               	skipc
 11974  11B5  299E               	goto	l6892
 11975  11B6                     l1315:	
 11976                           
 11977                           ;MCU_B1.c: 956: }
 11978                           ;MCU_B1.c: 957: LWLO = 0;
 11979  11B6  0023               	movlb	3	; select bank3
 11980  11B7  1295               	bcf	21,5	;volatile
 11981                           
 11982                           ;MCU_B1.c: 958: Flash_Memory_Unlock();
 11983  11B8  319B  23BB         	fcall	_Flash_Memory_Unlock
 11984                           
 11985                           ;MCU_B1.c: 959: WREN = 0;
 11986  11BA  0023               	movlb	3	; select bank3
 11987  11BB  1115               	bcf	21,2	;volatile
 11988  11BC  0008               	return
 11989  11BD                     __end_of_Flash_Memory_Write:	
 11990                           
 11991                           	psect	text69
 11992  1BBB                     __ptext69:	
 11993 ;; *************** function _Flash_Memory_Unlock *****************
 11994 ;; Defined at:
 11995 ;;		line 923 in file "../src/MCU_B1.c"
 11996 ;; Parameters:    Size  Location     Type
 11997 ;;		None
 11998 ;; Auto vars:     Size  Location     Type
 11999 ;;		None
 12000 ;; Return value:  Size  Location     Type
 12001 ;;		None               void
 12002 ;; Registers used:
 12003 ;;		wreg
 12004 ;; Tracked objects:
 12005 ;;		On entry : 0/0
 12006 ;;		On exit  : 0/0
 12007 ;;		Unchanged: 0/0
 12008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12013 ;;Total ram usage:        0 bytes
 12014 ;; Hardware stack levels used:    1
 12015 ;; Hardware stack levels required when called:    5
 12016 ;; This function calls:
 12017 ;;		Nothing
 12018 ;; This function is called by:
 12019 ;;		_Flash_Memory_Write
 12020 ;;		_Flash_Memory_Erasing
 12021 ;; This function uses a non-reentrant model
 12022 ;;
 12023                           
 12024                           
 12025                           ;psect for function _Flash_Memory_Unlock
 12026  1BBB                     _Flash_Memory_Unlock:	
 12027                           
 12028                           ;MCU_B1.c: 924: PMCON2 = 0x55;
 12029                           
 12030                           ;incstack = 0
 12031                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12032  1BBB  3055               	movlw	85
 12033  1BBC  0023               	movlb	3	; select bank3
 12034  1BBD  0096               	movwf	22	;volatile
 12035                           
 12036                           ;MCU_B1.c: 925: PMCON2 = 0xaa;
 12037  1BBE  30AA               	movlw	170
 12038  1BBF  0096               	movwf	22	;volatile
 12039                           
 12040                           ;MCU_B1.c: 926: WR = 1;
 12041  1BC0  1495               	bsf	21,1	;volatile
 12042                           
 12043                           ;MCU_B1.c: 927: __nop();
 12044  1BC1  0000               	nop
 12045                           
 12046                           ;MCU_B1.c: 928: __nop();
 12047  1BC2  0000               	nop
 12048  1BC3  0008               	return
 12049  1BC4                     __end_of_Flash_Memory_Unlock:	
 12050                           
 12051                           	psect	text70
 12052  1E6B                     __ptext70:	
 12053 ;; *************** function _Flash_Memory_Read *****************
 12054 ;; Defined at:
 12055 ;;		line 932 in file "../src/MCU_B1.c"
 12056 ;; Parameters:    Size  Location     Type
 12057 ;;  address         1    wreg     unsigned char 
 12058 ;; Auto vars:     Size  Location     Type
 12059 ;;  address         1    2[BANK0 ] unsigned char 
 12060 ;;  ret             1    3[BANK0 ] unsigned char 
 12061 ;;  i               1    1[BANK0 ] unsigned char 
 12062 ;; Return value:  Size  Location     Type
 12063 ;;                  1    wreg      unsigned char 
 12064 ;; Registers used:
 12065 ;;		wreg, status,2
 12066 ;; Tracked objects:
 12067 ;;		On entry : 0/0
 12068 ;;		On exit  : 0/0
 12069 ;;		Unchanged: 0/0
 12070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12072 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12073 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12074 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12075 ;;Total ram usage:        4 bytes
 12076 ;; Hardware stack levels used:    1
 12077 ;; Hardware stack levels required when called:    5
 12078 ;; This function calls:
 12079 ;;		Nothing
 12080 ;; This function is called by:
 12081 ;;		_Flash_Memory_Initialization
 12082 ;;		_Flash_Memory_Modify
 12083 ;; This function uses a non-reentrant model
 12084 ;;
 12085                           
 12086                           
 12087                           ;psect for function _Flash_Memory_Read
 12088  1E6B                     _Flash_Memory_Read:	
 12089                           
 12090                           ;incstack = 0
 12091                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12092                           ;Flash_Memory_Read@address stored from wreg
 12093  1E6B  0020               	movlb	0	; select bank0
 12094  1E6C  00A2               	movwf	Flash_Memory_Read@address
 12095                           
 12096                           ;MCU_B1.c: 933: char i = 0, ret = 0;
 12097  1E6D  01A1               	clrf	Flash_Memory_Read@i
 12098  1E6E  01A3               	clrf	Flash_Memory_Read@ret
 12099                           
 12100                           ;MCU_B1.c: 934: PMADRH = 0x30;
 12101  1E6F  3030               	movlw	48
 12102  1E70  0023               	movlb	3	; select bank3
 12103  1E71  0092               	movwf	18	;volatile
 12104                           
 12105                           ;MCU_B1.c: 935: PMADRL = address;
 12106  1E72  0020               	movlb	0	; select bank0
 12107  1E73  0822               	movf	Flash_Memory_Read@address,w
 12108  1E74  0023               	movlb	3	; select bank3
 12109  1E75  0091               	movwf	17	;volatile
 12110                           
 12111                           ;MCU_B1.c: 936: CFGS = 0;
 12112  1E76  1315               	bcf	21,6	;volatile
 12113                           
 12114                           ;MCU_B1.c: 937: RD = 1;
 12115  1E77  1415               	bsf	21,0	;volatile
 12116                           
 12117                           ;MCU_B1.c: 938: i = PMDATH;
 12118  1E78  0814               	movf	20,w	;volatile
 12119  1E79  0020               	movlb	0	; select bank0
 12120  1E7A  00A0               	movwf	??_Flash_Memory_Read
 12121  1E7B  0820               	movf	??_Flash_Memory_Read,w
 12122  1E7C  00A1               	movwf	Flash_Memory_Read@i
 12123                           
 12124                           ;MCU_B1.c: 939: ret = PMDATL;
 12125  1E7D  0023               	movlb	3	; select bank3
 12126  1E7E  0813               	movf	19,w	;volatile
 12127  1E7F  0020               	movlb	0	; select bank0
 12128  1E80  00A0               	movwf	??_Flash_Memory_Read
 12129  1E81  0820               	movf	??_Flash_Memory_Read,w
 12130  1E82  00A3               	movwf	Flash_Memory_Read@ret
 12131                           
 12132                           ;MCU_B1.c: 940: return ret;
 12133  1E83  0823               	movf	Flash_Memory_Read@ret,w
 12134  1E84  0008               	return
 12135  1E85                     __end_of_Flash_Memory_Read:	
 12136                           
 12137                           	psect	text71
 12138  1222                     __ptext71:	
 12139 ;; *************** function _DimmerLights_Main *****************
 12140 ;; Defined at:
 12141 ;;		line 402 in file "../src/Dimmer_B1.c"
 12142 ;; Parameters:    Size  Location     Type
 12143 ;;		None
 12144 ;; Auto vars:     Size  Location     Type
 12145 ;;		None
 12146 ;; Return value:  Size  Location     Type
 12147 ;;		None               void
 12148 ;; Registers used:
 12149 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12150 ;; Tracked objects:
 12151 ;;		On entry : 0/0
 12152 ;;		On exit  : 0/0
 12153 ;;		Unchanged: 0/0
 12154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12156 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12157 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12158 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12159 ;;Total ram usage:        4 bytes
 12160 ;; Hardware stack levels used:    1
 12161 ;; Hardware stack levels required when called:   10
 12162 ;; This function calls:
 12163 ;;		_getLoad_OK
 12164 ;;		_getMain_All_Error_Status
 12165 ;;		_getMain_LightsStatus
 12166 ;;		_setDimmerLights_Main
 12167 ;; This function is called by:
 12168 ;;		_main
 12169 ;; This function uses a non-reentrant model
 12170 ;;
 12171                           
 12172                           
 12173                           ;psect for function _DimmerLights_Main
 12174  1222                     _DimmerLights_Main:	
 12175                           
 12176                           ;Dimmer_B1.c: 404: if (getMain_All_Error_Status(0) == 0) {
 12177                           
 12178                           ;incstack = 0
 12179                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12180  1222  3000               	movlw	0
 12181  1223  3191  21EF  3192   	fcall	_getMain_All_Error_Status
 12182  1226  3800               	iorlw	0
 12183  1227  1D03               	skipz
 12184  1228  2A4C               	goto	l778
 12185                           
 12186                           ;Dimmer_B1.c: 405: if (Dimmer.LoadOK == 1) {
 12187  1229  0022               	movlb	2	; select bank2
 12188  122A  1CA0               	btfss	_Dimmer^(0+256),1
 12189  122B  2A4E               	goto	l7748
 12190                           
 12191                           ;Dimmer_B1.c: 406: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 12192  122C  319B  239A  3192   	fcall	_getLoad_OK
 12193  122F  3A01               	xorlw	1
 12194  1230  1903               	skipnz
 12195  1231  2A43               	goto	l7744
 12196  1232  3191  2162  3192   	fcall	_getMain_LightsStatus
 12197  1235  3A00               	xorlw	0
 12198  1236  1903               	skipnz
 12199  1237  2A43               	goto	l7744
 12200  1238  0022               	movlb	2	; select bank2
 12201  1239  0C20               	rrf	_Dimmer^(0+256),w
 12202  123A  3901               	andlw	1
 12203  123B  0020               	movlb	0	; select bank0
 12204  123C  00E7               	movwf	??_DimmerLights_Main
 12205  123D  01E8               	clrf	??_DimmerLights_Main+1
 12206  123E  0867               	movf	??_DimmerLights_Main,w
 12207  123F  00E9               	movwf	_DimmerLights_Main$2494
 12208  1240  0868               	movf	??_DimmerLights_Main+1,w
 12209  1241  00EA               	movwf	_DimmerLights_Main$2494+1
 12210  1242  2A46               	goto	l7746
 12211  1243                     l7744:	
 12212  1243  0020               	movlb	0	; select bank0
 12213  1244  01E9               	clrf	_DimmerLights_Main$2494
 12214  1245  01EA               	clrf	_DimmerLights_Main$2494+1
 12215  1246                     l7746:	
 12216  1246  0869               	movf	_DimmerLights_Main$2494,w
 12217  1247  0022               	movlb	2	; select bank2
 12218  1248  10A0               	bcf	_Dimmer^(0+256),1
 12219  1249  1D03               	skipz
 12220  124A  14A0               	bsf	_Dimmer^(0+256),1
 12221                           
 12222                           ;Dimmer_B1.c: 407: }
 12223                           ;Dimmer_B1.c: 408: } else {
 12224  124B  2A4E               	goto	l7748
 12225  124C                     l778:	
 12226                           
 12227                           ;Dimmer_B1.c: 409: Dimmer.LoadOK = 0;
 12228  124C  0022               	movlb	2	; select bank2
 12229  124D  10A0               	bcf	_Dimmer^(0+256),1
 12230  124E                     l7748:	
 12231                           
 12232                           ;Dimmer_B1.c: 410: }
 12233                           ;Dimmer_B1.c: 414: setDimmerLights_Main(1);
 12234  124E  3001               	movlw	1
 12235  124F  3196  26F1  3192   	fcall	_setDimmerLights_Main
 12236                           
 12237                           ;Dimmer_B1.c: 418: setDimmerLights_Main(2);
 12238  1252  3002               	movlw	2
 12239  1253  3196  26F1         	fcall	_setDimmerLights_Main
 12240  1255  0008               	return
 12241  1256                     __end_of_DimmerLights_Main:	
 12242                           
 12243                           	psect	text72
 12244  16F1                     __ptext72:	
 12245 ;; *************** function _setDimmerLights_Main *****************
 12246 ;; Defined at:
 12247 ;;		line 428 in file "../src/Dimmer_B1.c"
 12248 ;; Parameters:    Size  Location     Type
 12249 ;;  lights          1    wreg     unsigned char 
 12250 ;; Auto vars:     Size  Location     Type
 12251 ;;  lights          1   70[BANK0 ] unsigned char 
 12252 ;; Return value:  Size  Location     Type
 12253 ;;		None               void
 12254 ;; Registers used:
 12255 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12256 ;; Tracked objects:
 12257 ;;		On entry : 0/0
 12258 ;;		On exit  : 0/0
 12259 ;;		Unchanged: 0/0
 12260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12262 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12264 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12265 ;;Total ram usage:        1 bytes
 12266 ;; Hardware stack levels used:    1
 12267 ;; Hardware stack levels required when called:    9
 12268 ;; This function calls:
 12269 ;;		_DimmerLightsPointSelect
 12270 ;;		_setBuz
 12271 ;;		_setDimmerLights
 12272 ;;		_setDimmerLights_Adj
 12273 ;; This function is called by:
 12274 ;;		_DimmerLights_Main
 12275 ;; This function uses a non-reentrant model
 12276 ;;
 12277                           
 12278                           
 12279                           ;psect for function _setDimmerLights_Main
 12280  16F1                     _setDimmerLights_Main:	
 12281                           
 12282                           ;incstack = 0
 12283                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12284                           ;setDimmerLights_Main@lights stored from wreg
 12285  16F1  0020               	movlb	0	; select bank0
 12286  16F2  00E6               	movwf	setDimmerLights_Main@lights
 12287                           
 12288                           ;Dimmer_B1.c: 429: DimmerLightsPointSelect(lights);
 12289  16F3  0866               	movf	setDimmerLights_Main@lights,w
 12290  16F4  319D  2505  3196   	fcall	_DimmerLightsPointSelect
 12291                           
 12292                           ;Dimmer_B1.c: 430: if (DimmerLights->Trigger == 1) {
 12293  16F7  0020               	movlb	0	; select bank0
 12294  16F8  086F               	movf	_DimmerLights,w
 12295  16F9  3E08               	addlw	8
 12296  16FA  0086               	movwf	6
 12297  16FB  3001               	movlw	1	; select bank2/3
 12298  16FC  0087               	movwf	7
 12299  16FD  1D01               	btfss	1,2
 12300  16FE  2F1C               	goto	l7218
 12301                           
 12302                           ;Dimmer_B1.c: 432: if (Dimmer.LoadOK == 0) {
 12303  16FF  0022               	movlb	2	; select bank2
 12304  1700  18A0               	btfsc	_Dimmer^(0+256),1
 12305  1701  0008               	return
 12306                           
 12307                           ;Dimmer_B1.c: 433: DimmerLights->Trigger = 0;
 12308  1702  0020               	movlb	0	; select bank0
 12309  1703  086F               	movf	_DimmerLights,w
 12310  1704  3E08               	addlw	8
 12311  1705  0086               	movwf	6
 12312  1706  3001               	movlw	1	; select bank2/3
 12313  1707  0087               	movwf	7
 12314  1708  1101               	bcf	1,2
 12315                           
 12316                           ;Dimmer_B1.c: 435: if (DimmerLights->Switch == 1) {
 12317  1709  086F               	movf	_DimmerLights,w
 12318  170A  3E08               	addlw	8
 12319  170B  0086               	movwf	6
 12320  170C  3001               	movlw	1	; select bank2/3
 12321  170D  0087               	movwf	7
 12322  170E  1C81               	btfss	1,1
 12323  170F  2F16               	goto	l7216
 12324                           
 12325                           ;Dimmer_B1.c: 436: setDimmerLights(lights, 1);
 12326  1710  01E2               	clrf	setDimmerLights@status
 12327  1711  0AE2               	incf	setDimmerLights@status,f
 12328  1712  0866               	movf	setDimmerLights_Main@lights,w
 12329  1713  318D  2575         	fcall	_setDimmerLights
 12330                           
 12331                           ;Dimmer_B1.c: 437: } else {
 12332  1715  0008               	return
 12333  1716                     l7216:	
 12334                           
 12335                           ;Dimmer_B1.c: 438: setDimmerLights(lights, 0);
 12336  1716  0020               	movlb	0	; select bank0
 12337  1717  01E2               	clrf	setDimmerLights@status
 12338  1718  0866               	movf	setDimmerLights_Main@lights,w
 12339  1719  318D  2575         	fcall	_setDimmerLights
 12340                           
 12341                           ;Dimmer_B1.c: 439: }
 12342                           ;Dimmer_B1.c: 440: }
 12343                           ;Dimmer_B1.c: 441: } else {
 12344  171B  0008               	return
 12345  171C                     l7218:	
 12346                           
 12347                           ;Dimmer_B1.c: 442: if (DimmerLights->TriggerAdj == 1) {
 12348  171C  0020               	movlb	0	; select bank0
 12349  171D  086F               	movf	_DimmerLights,w
 12350  171E  3E08               	addlw	8
 12351  171F  0086               	movwf	6
 12352  1720  3001               	movlw	1	; select bank2/3
 12353  1721  0087               	movwf	7
 12354  1722  1E01               	btfss	1,4
 12355  1723  0008               	return
 12356                           
 12357                           ;Dimmer_B1.c: 443: if (Dimmer.LoadOK == 0) {
 12358  1724  0022               	movlb	2	; select bank2
 12359  1725  18A0               	btfsc	_Dimmer^(0+256),1
 12360  1726  0008               	return
 12361                           
 12362                           ;Dimmer_B1.c: 444: DimmerLights->TriggerAdj = 0;
 12363  1727  0020               	movlb	0	; select bank0
 12364  1728  086F               	movf	_DimmerLights,w
 12365  1729  3E08               	addlw	8
 12366  172A  0086               	movwf	6
 12367  172B  3001               	movlw	1	; select bank2/3
 12368  172C  0087               	movwf	7
 12369  172D  1201               	bcf	1,4
 12370                           
 12371                           ;Dimmer_B1.c: 445: if (DimmerLights->AdjGo == 1) {
 12372  172E  086F               	movf	_DimmerLights,w
 12373  172F  3E08               	addlw	8
 12374  1730  0086               	movwf	6
 12375  1731  3001               	movlw	1	; select bank2/3
 12376  1732  0087               	movwf	7
 12377  1733  1D81               	btfss	1,3
 12378  1734  2F44               	goto	l7228
 12379                           
 12380                           ;Dimmer_B1.c: 446: setDimmerLights_Adj(lights, 1);
 12381  1735  01E2               	clrf	setDimmerLights_Adj@status
 12382  1736  0AE2               	incf	setDimmerLights_Adj@status,f
 12383  1737  0866               	movf	setDimmerLights_Main@lights,w
 12384  1738  318A  22BA  3196   	fcall	_setDimmerLights_Adj
 12385                           
 12386                           ;Dimmer_B1.c: 447: setBuz(1, 100);
 12387  173B  3064               	movlw	100
 12388  173C  0020               	movlb	0	; select bank0
 12389  173D  00A9               	movwf	setBuz@time
 12390  173E  3000               	movlw	0
 12391  173F  00AA               	movwf	setBuz@time+1
 12392  1740  3001               	movlw	1
 12393  1741  3196  2698         	fcall	_setBuz
 12394                           
 12395                           ;Dimmer_B1.c: 448: } else {
 12396  1743  0008               	return
 12397  1744                     l7228:	
 12398                           
 12399                           ;Dimmer_B1.c: 449: setDimmerLights_Adj(lights, 0);
 12400  1744  0020               	movlb	0	; select bank0
 12401  1745  01E2               	clrf	setDimmerLights_Adj@status
 12402  1746  0866               	movf	setDimmerLights_Main@lights,w
 12403  1747  318A  22BA         	fcall	_setDimmerLights_Adj
 12404  1749  0008               	return
 12405  174A                     __end_of_setDimmerLights_Main:	
 12406                           
 12407                           	psect	text73
 12408  0ABA                     __ptext73:	
 12409 ;; *************** function _setDimmerLights_Adj *****************
 12410 ;; Defined at:
 12411 ;;		line 728 in file "../src/Dimmer_B1.c"
 12412 ;; Parameters:    Size  Location     Type
 12413 ;;  lights          1    wreg     unsigned char 
 12414 ;;  status          1   66[BANK0 ] unsigned char 
 12415 ;; Auto vars:     Size  Location     Type
 12416 ;;  lights          1   69[BANK0 ] unsigned char 
 12417 ;; Return value:  Size  Location     Type
 12418 ;;		None               void
 12419 ;; Registers used:
 12420 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12421 ;; Tracked objects:
 12422 ;;		On entry : 0/0
 12423 ;;		On exit  : 0/0
 12424 ;;		Unchanged: 0/0
 12425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12426 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12427 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12428 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12429 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12430 ;;Total ram usage:        4 bytes
 12431 ;; Hardware stack levels used:    1
 12432 ;; Hardware stack levels required when called:    8
 12433 ;; This function calls:
 12434 ;;		_DimmerLightsPointSelect
 12435 ;;		_getMain_All_Error_Status
 12436 ;;		_setPercentValue
 12437 ;;		_setRF_DimmerLights
 12438 ;;		_setTxData
 12439 ;; This function is called by:
 12440 ;;		_setDimmerLights_Main
 12441 ;; This function uses a non-reentrant model
 12442 ;;
 12443                           
 12444                           
 12445                           ;psect for function _setDimmerLights_Adj
 12446  0ABA                     _setDimmerLights_Adj:	
 12447                           
 12448                           ;incstack = 0
 12449                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12450                           ;setDimmerLights_Adj@lights stored from wreg
 12451  0ABA  0020               	movlb	0	; select bank0
 12452  0ABB  00E5               	movwf	setDimmerLights_Adj@lights
 12453                           
 12454                           ;Dimmer_B1.c: 729: DimmerLightsPointSelect(lights);
 12455  0ABC  0865               	movf	setDimmerLights_Adj@lights,w
 12456  0ABD  319D  2505  318A   	fcall	_DimmerLightsPointSelect
 12457                           
 12458                           ;Dimmer_B1.c: 730: if (status == 1) {
 12459  0AC0  0020               	movlb	0	; select bank0
 12460  0AC1  0862               	movf	setDimmerLights_Adj@status,w
 12461  0AC2  3A01               	xorlw	1
 12462  0AC3  1D03               	skipz
 12463  0AC4  2AD0               	goto	l6802
 12464                           
 12465                           ;Dimmer_B1.c: 731: DimmerLights->AdjFlag = 1;
 12466  0AC5  086F               	movf	_DimmerLights,w
 12467  0AC6  0086               	movwf	6
 12468  0AC7  3001               	movlw	1	; select bank2/3
 12469  0AC8  0087               	movwf	7
 12470  0AC9  1581               	bsf	1,3
 12471                           
 12472                           ;Dimmer_B1.c: 732: DimmerLights->Signal = 1;
 12473  0ACA  086F               	movf	_DimmerLights,w
 12474  0ACB  0086               	movwf	6
 12475  0ACC  3001               	movlw	1	; select bank2/3
 12476  0ACD  0087               	movwf	7
 12477  0ACE  1481               	bsf	1,1
 12478                           
 12479                           ;Dimmer_B1.c: 733: } else {
 12480  0ACF  0008               	return
 12481  0AD0                     l6802:	
 12482                           
 12483                           ;Dimmer_B1.c: 734: if (DimmerLights->AdjFlag == 1) {
 12484  0AD0  086F               	movf	_DimmerLights,w
 12485  0AD1  0086               	movwf	6
 12486  0AD2  3001               	movlw	1	; select bank2/3
 12487  0AD3  0087               	movwf	7
 12488  0AD4  1D81               	btfss	1,3
 12489  0AD5  0008               	return
 12490                           
 12491                           ;Dimmer_B1.c: 735: DimmerLights->Signal = 0;
 12492  0AD6  086F               	movf	_DimmerLights,w
 12493  0AD7  0086               	movwf	6
 12494  0AD8  3001               	movlw	1	; select bank2/3
 12495  0AD9  0087               	movwf	7
 12496  0ADA  1081               	bcf	1,1
 12497                           
 12498                           ;Dimmer_B1.c: 736: DimmerLights->AdjFlag = 0;
 12499  0ADB  086F               	movf	_DimmerLights,w
 12500  0ADC  0086               	movwf	6
 12501  0ADD  3001               	movlw	1	; select bank2/3
 12502  0ADE  0087               	movwf	7
 12503  0ADF  1181               	bcf	1,3
 12504                           
 12505                           ;Dimmer_B1.c: 737: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12506  0AE0  086F               	movf	_DimmerLights,w
 12507  0AE1  3E04               	addlw	4
 12508  0AE2  0086               	movwf	6
 12509  0AE3  3001               	movlw	1	; select bank2/3
 12510  0AE4  0087               	movwf	7
 12511  0AE5  0801               	movf	1,w
 12512  0AE6  00E3               	movwf	??_setDimmerLights_Adj
 12513  0AE7  086F               	movf	_DimmerLights,w
 12514  0AE8  3E05               	addlw	5
 12515  0AE9  0086               	movwf	6
 12516  0AEA  3001               	movlw	1	; select bank2/3
 12517  0AEB  0087               	movwf	7
 12518  0AEC  0863               	movf	??_setDimmerLights_Adj,w
 12519  0AED  0081               	movwf	1
 12520                           
 12521                           ;Dimmer_B1.c: 738: product->Data[(20 + lights)]=setPercentValue(DimmerLights->DimmingVal
      +                          ue);
 12522  0AEE  086F               	movf	_DimmerLights,w
 12523  0AEF  3E04               	addlw	4
 12524  0AF0  0086               	movwf	6
 12525  0AF1  3001               	movlw	1	; select bank2/3
 12526  0AF2  0087               	movwf	7
 12527  0AF3  0801               	movf	1,w
 12528  0AF4  3189  218B  318A   	fcall	_setPercentValue
 12529  0AF7  0020               	movlb	0	; select bank0
 12530  0AF8  00E3               	movwf	??_setDimmerLights_Adj
 12531  0AF9  0865               	movf	setDimmerLights_Adj@lights,w
 12532  0AFA  3E14               	addlw	20
 12533  0AFB  076E               	addwf	_product,w
 12534  0AFC  00E4               	movwf	??_setDimmerLights_Adj+1
 12535  0AFD  0864               	movf	??_setDimmerLights_Adj+1,w
 12536  0AFE  0086               	movwf	6
 12537  0AFF  3002               	movlw	2	; select bank4/5
 12538  0B00  0087               	movwf	7
 12539  0B01  0863               	movf	??_setDimmerLights_Adj,w
 12540  0B02  0081               	movwf	1
 12541                           
 12542                           ;Dimmer_B1.c: 748: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12543  0B03  3000               	movlw	0
 12544  0B04  3191  21EF  318A   	fcall	_getMain_All_Error_Status
 12545  0B07  3A00               	xorlw	0
 12546  0B08  3000               	movlw	0
 12547  0B09  1903               	skipnz
 12548  0B0A  3001               	movlw	1
 12549  0B0B  0020               	movlb	0	; select bank0
 12550  0B0C  00E3               	movwf	??_setDimmerLights_Adj
 12551  0B0D  0DE3               	rlf	??_setDimmerLights_Adj,f
 12552  0B0E  0022               	movlb	2	; select bank2
 12553  0B0F  0820               	movf	_Dimmer^(0+256),w
 12554  0B10  0020               	movlb	0	; select bank0
 12555  0B11  0663               	xorwf	??_setDimmerLights_Adj,w
 12556  0B12  39FD               	andlw	-3
 12557  0B13  0663               	xorwf	??_setDimmerLights_Adj,w
 12558  0B14  0022               	movlb	2	; select bank2
 12559  0B15  00A0               	movwf	_Dimmer^(0+256)
 12560                           
 12561                           ;Dimmer_B1.c: 751: setRF_DimmerLights(lights, 1);
 12562  0B16  0020               	movlb	0	; select bank0
 12563  0B17  01A0               	clrf	setRF_DimmerLights@on
 12564  0B18  0AA0               	incf	setRF_DimmerLights@on,f
 12565  0B19  0865               	movf	setDimmerLights_Adj@lights,w
 12566  0B1A  3197  27A4  318A   	fcall	_setRF_DimmerLights
 12567                           
 12568                           ;Dimmer_B1.c: 752: setTxData();
 12569  0B1D  3186  26FC         	fcall	_setTxData
 12570  0B1F  0008               	return
 12571  0B20                     __end_of_setDimmerLights_Adj:	
 12572                           
 12573                           	psect	text74
 12574  0D75                     __ptext74:	
 12575 ;; *************** function _setDimmerLights *****************
 12576 ;; Defined at:
 12577 ;;		line 623 in file "../src/Dimmer_B1.c"
 12578 ;; Parameters:    Size  Location     Type
 12579 ;;  lights          1    wreg     unsigned char 
 12580 ;;  status          1   66[BANK0 ] unsigned char 
 12581 ;; Auto vars:     Size  Location     Type
 12582 ;;  lights          1   69[BANK0 ] unsigned char 
 12583 ;; Return value:  Size  Location     Type
 12584 ;;		None               void
 12585 ;; Registers used:
 12586 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12587 ;; Tracked objects:
 12588 ;;		On entry : 0/0
 12589 ;;		On exit  : 0/0
 12590 ;;		Unchanged: 0/0
 12591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12592 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12593 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12594 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12595 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12596 ;;Total ram usage:        4 bytes
 12597 ;; Hardware stack levels used:    1
 12598 ;; Hardware stack levels required when called:    8
 12599 ;; This function calls:
 12600 ;;		_DimmerLightsPointSelect
 12601 ;;		_getMain_All_Error_Status
 12602 ;;		_setDimmerLights_Line
 12603 ;;		_setLED
 12604 ;;		_setPercentValue
 12605 ;;		_setRF_DimmerLights
 12606 ;;		_setTxData
 12607 ;; This function is called by:
 12608 ;;		_setDimmerLights_Main
 12609 ;; This function uses a non-reentrant model
 12610 ;;
 12611                           
 12612                           
 12613                           ;psect for function _setDimmerLights
 12614  0D75                     _setDimmerLights:	
 12615                           
 12616                           ;incstack = 0
 12617                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12618                           ;setDimmerLights@lights stored from wreg
 12619  0D75  0020               	movlb	0	; select bank0
 12620  0D76  00E5               	movwf	setDimmerLights@lights
 12621                           
 12622                           ;Dimmer_B1.c: 624: DimmerLightsPointSelect(lights);
 12623  0D77  0865               	movf	setDimmerLights@lights,w
 12624  0D78  319D  2505  318D   	fcall	_DimmerLightsPointSelect
 12625                           
 12626                           ;Dimmer_B1.c: 627: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12627  0D7B  3000               	movlw	0
 12628  0D7C  3191  21EF  318D   	fcall	_getMain_All_Error_Status
 12629  0D7F  3A00               	xorlw	0
 12630  0D80  3000               	movlw	0
 12631  0D81  1903               	skipnz
 12632  0D82  3001               	movlw	1
 12633  0D83  0020               	movlb	0	; select bank0
 12634  0D84  00E3               	movwf	??_setDimmerLights
 12635  0D85  0DE3               	rlf	??_setDimmerLights,f
 12636  0D86  0022               	movlb	2	; select bank2
 12637  0D87  0820               	movf	_Dimmer^(0+256),w
 12638  0D88  0020               	movlb	0	; select bank0
 12639  0D89  0663               	xorwf	??_setDimmerLights,w
 12640  0D8A  39FD               	andlw	-3
 12641  0D8B  0663               	xorwf	??_setDimmerLights,w
 12642  0D8C  0022               	movlb	2	; select bank2
 12643  0D8D  00A0               	movwf	_Dimmer^(0+256)
 12644                           
 12645                           ;Dimmer_B1.c: 631: if (status == 1) {
 12646  0D8E  0020               	movlb	0	; select bank0
 12647  0D8F  0862               	movf	setDimmerLights@status,w
 12648  0D90  3A01               	xorlw	1
 12649  0D91  1D03               	skipz
 12650  0D92  2DC3               	goto	l6782
 12651                           
 12652                           ;Dimmer_B1.c: 632: DimmerLights->Loop = 1;
 12653  0D93  086F               	movf	_DimmerLights,w
 12654  0D94  3E09               	addlw	9
 12655  0D95  0086               	movwf	6
 12656  0D96  3001               	movlw	1	; select bank2/3
 12657  0D97  0087               	movwf	7
 12658  0D98  1481               	bsf	1,1
 12659                           
 12660                           ;Dimmer_B1.c: 633: setLED(lights, 0);
 12661  0D99  01A2               	clrf	setLED@command
 12662  0D9A  0865               	movf	setDimmerLights@lights,w
 12663  0D9B  3195  259C  318D   	fcall	_setLED
 12664                           
 12665                           ;Dimmer_B1.c: 635: setDimmerLights_Line(lights);
 12666  0D9E  0020               	movlb	0	; select bank0
 12667  0D9F  0865               	movf	setDimmerLights@lights,w
 12668  0DA0  319D  25CB  318D   	fcall	_setDimmerLights_Line
 12669                           
 12670                           ;Dimmer_B1.c: 636: DimmerLights->StatusFlag = 1;
 12671  0DA3  0020               	movlb	0	; select bank0
 12672  0DA4  086F               	movf	_DimmerLights,w
 12673  0DA5  0086               	movwf	6
 12674  0DA6  3001               	movlw	1	; select bank2/3
 12675  0DA7  0087               	movwf	7
 12676  0DA8  1701               	bsf	1,6
 12677                           
 12678                           ;Dimmer_B1.c: 643: DimmerLights->DimmingValue = ((char)(80*0.8));
 12679  0DA9  3040               	movlw	64
 12680  0DAA  00E3               	movwf	??_setDimmerLights
 12681  0DAB  086F               	movf	_DimmerLights,w
 12682  0DAC  3E04               	addlw	4
 12683  0DAD  0086               	movwf	6
 12684  0DAE  3001               	movlw	1	; select bank2/3
 12685  0DAF  0087               	movwf	7
 12686  0DB0  0863               	movf	??_setDimmerLights,w
 12687  0DB1  0081               	movwf	1
 12688                           
 12689                           ;Dimmer_B1.c: 644: product->Data[(20 + lights)]=setPercentValue(((char)(80*0.8)));
 12690  0DB2  3040               	movlw	64
 12691  0DB3  3189  218B  318D   	fcall	_setPercentValue
 12692  0DB6  0020               	movlb	0	; select bank0
 12693  0DB7  00E3               	movwf	??_setDimmerLights
 12694  0DB8  0865               	movf	setDimmerLights@lights,w
 12695  0DB9  3E14               	addlw	20
 12696  0DBA  076E               	addwf	_product,w
 12697  0DBB  00E4               	movwf	??_setDimmerLights+1
 12698  0DBC  0864               	movf	??_setDimmerLights+1,w
 12699  0DBD  0086               	movwf	6
 12700  0DBE  3002               	movlw	2	; select bank4/5
 12701  0DBF  0087               	movwf	7
 12702  0DC0  0863               	movf	??_setDimmerLights,w
 12703  0DC1  0081               	movwf	1
 12704  0DC2  2DEA               	goto	l6794
 12705  0DC3                     l6782:	
 12706                           ;Dimmer_B1.c: 654: } else {
 12707                           
 12708                           ;Dimmer_B1.c: 652: DimmerLights->DimmingTimeValue = 7;
 12709                           
 12710                           
 12711                           ;Dimmer_B1.c: 655: DimmerLights->StatusFlag = 0;
 12712  0DC3  086F               	movf	_DimmerLights,w
 12713  0DC4  0086               	movwf	6
 12714  0DC5  3001               	movlw	1	; select bank2/3
 12715  0DC6  0087               	movwf	7
 12716  0DC7  1301               	bcf	1,6
 12717                           
 12718                           ;Dimmer_B1.c: 656: DimmerLights->Loop = 0;
 12719  0DC8  086F               	movf	_DimmerLights,w
 12720  0DC9  3E09               	addlw	9
 12721  0DCA  0086               	movwf	6
 12722  0DCB  3001               	movlw	1	; select bank2/3
 12723  0DCC  0087               	movwf	7
 12724  0DCD  1081               	bcf	1,1
 12725                           
 12726                           ;Dimmer_B1.c: 657: setLED(lights, 1);
 12727  0DCE  01A2               	clrf	setLED@command
 12728  0DCF  0AA2               	incf	setLED@command,f
 12729  0DD0  0865               	movf	setDimmerLights@lights,w
 12730  0DD1  3195  259C  318D   	fcall	_setLED
 12731                           
 12732                           ;Dimmer_B1.c: 665: DimmerLights->MosfetClose = 1;
 12733  0DD4  0020               	movlb	0	; select bank0
 12734  0DD5  086F               	movf	_DimmerLights,w
 12735  0DD6  3E08               	addlw	8
 12736  0DD7  0086               	movwf	6
 12737  0DD8  3001               	movlw	1	; select bank2/3
 12738  0DD9  0087               	movwf	7
 12739  0DDA  1781               	bsf	1,7
 12740                           
 12741                           ;Dimmer_B1.c: 668: DimmerLights->AdjFlag = 0;
 12742  0DDB  086F               	movf	_DimmerLights,w
 12743  0DDC  0086               	movwf	6
 12744  0DDD  3001               	movlw	1	; select bank2/3
 12745  0DDE  0087               	movwf	7
 12746  0DDF  1181               	bcf	1,3
 12747                           
 12748                           ;Dimmer_B1.c: 669: DimmerLights->AdjStatus = 0;
 12749  0DE0  086F               	movf	_DimmerLights,w
 12750  0DE1  0086               	movwf	6
 12751  0DE2  3001               	movlw	1	; select bank2/3
 12752  0DE3  0087               	movwf	7
 12753  0DE4  1201               	bcf	1,4
 12754                           
 12755                           ;Dimmer_B1.c: 670: DimmerLights->AdjRF = 0;
 12756  0DE5  086F               	movf	_DimmerLights,w
 12757  0DE6  0086               	movwf	6
 12758  0DE7  3001               	movlw	1	; select bank2/3
 12759  0DE8  0087               	movwf	7
 12760  0DE9  1101               	bcf	1,2
 12761  0DEA                     l6794:	
 12762                           
 12763                           ;Dimmer_B1.c: 671: DimmerLights->DimmingTimeValue = 7;
 12764  0DEA  3007               	movlw	7
 12765  0DEB  00E3               	movwf	??_setDimmerLights
 12766  0DEC  086F               	movf	_DimmerLights,w
 12767  0DED  3E02               	addlw	2
 12768  0DEE  0086               	movwf	6
 12769  0DEF  3001               	movlw	1	; select bank2/3
 12770  0DF0  0087               	movwf	7
 12771  0DF1  0863               	movf	??_setDimmerLights,w
 12772  0DF2  0081               	movwf	1
 12773                           
 12774                           ;Dimmer_B1.c: 673: }
 12775                           ;Dimmer_B1.c: 674: setRF_DimmerLights(lights, status);
 12776  0DF3  0862               	movf	setDimmerLights@status,w
 12777  0DF4  00E3               	movwf	??_setDimmerLights
 12778  0DF5  0863               	movf	??_setDimmerLights,w
 12779  0DF6  00A0               	movwf	setRF_DimmerLights@on
 12780  0DF7  0865               	movf	setDimmerLights@lights,w
 12781  0DF8  3197  27A4  318D   	fcall	_setRF_DimmerLights
 12782                           
 12783                           ;Dimmer_B1.c: 675: setTxData();
 12784  0DFB  3186  26FC         	fcall	_setTxData
 12785  0DFD  0008               	return
 12786  0DFE                     __end_of_setDimmerLights:	
 12787                           
 12788                           	psect	text75
 12789  06FC                     __ptext75:	
 12790 ;; *************** function _setTxData *****************
 12791 ;; Defined at:
 12792 ;;		line 204 in file "../src/RF_Control_B1.c"
 12793 ;; Parameters:    Size  Location     Type
 12794 ;;		None
 12795 ;; Auto vars:     Size  Location     Type
 12796 ;;  i               1    0        unsigned char 
 12797 ;; Return value:  Size  Location     Type
 12798 ;;		None               void
 12799 ;; Registers used:
 12800 ;;		wreg, fsr1l, fsr1h
 12801 ;; Tracked objects:
 12802 ;;		On entry : 0/0
 12803 ;;		On exit  : 0/0
 12804 ;;		Unchanged: 0/0
 12805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12808 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12809 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12810 ;;Total ram usage:        1 bytes
 12811 ;; Hardware stack levels used:    1
 12812 ;; Hardware stack levels required when called:    5
 12813 ;; This function calls:
 12814 ;;		Nothing
 12815 ;; This function is called by:
 12816 ;;		_setDimmerLights
 12817 ;;		_setDimmerLights_Adj
 12818 ;;		_setControl_Lights_Table
 12819 ;;		_setRFSW_Control
 12820 ;;		_setRFSW_AdjControl
 12821 ;; This function uses a non-reentrant model
 12822 ;;
 12823                           
 12824                           
 12825                           ;psect for function _setTxData
 12826  06FC                     _setTxData:	
 12827                           
 12828                           ;RF_Control_B1.c: 205: char i;
 12829                           ;RF_Control_B1.c: 206: if (RF1.Enable == 1) {
 12830                           
 12831                           ;incstack = 0
 12832                           ; Regs used in _setTxData: [wregfsr1]
 12833  06FC  0021               	movlb	1	; select bank1
 12834  06FD  1C3C               	btfss	_RF1^(0+128),0
 12835  06FE  0008               	return
 12836                           
 12837                           ;RF_Control_B1.c: 208: RF1.TransceiveGO = 1;
 12838  06FF  153C               	bsf	_RF1^(0+128),2
 12839                           
 12840                           ;RF_Control_B1.c: 209: RF1.RunTime = 20;
 12841  0700  3014               	movlw	20
 12842  0701  00C3               	movwf	(_RF1^(0+128)+7)
 12843  0702  3000               	movlw	0
 12844  0703  00C4               	movwf	(_RF1^(0+128)+8)
 12845                           
 12846                           ;RF_Control_B1.c: 218: RF_Data[0] = 0x63;
 12847  0704  3063               	movlw	99
 12848  0705  0020               	movlb	0	; select bank0
 12849  0706  00A0               	movwf	??_setTxData
 12850  0707  0820               	movf	??_setTxData,w
 12851  0708  0023               	movlb	3	; select bank3
 12852  0709  00A0               	movwf	_RF_Data^(0+384)
 12853                           
 12854                           ;RF_Control_B1.c: 219: RF_Data[1] = 0x02;
 12855  070A  3002               	movlw	2
 12856  070B  0020               	movlb	0	; select bank0
 12857  070C  00A0               	movwf	??_setTxData
 12858  070D  0820               	movf	??_setTxData,w
 12859  070E  0023               	movlb	3	; select bank3
 12860  070F  00A1               	movwf	(_RF_Data^(0+384)+1)
 12861                           
 12862                           ;RF_Control_B1.c: 220: RF_Data[2] = product->Data[2];
 12863  0710  0020               	movlb	0	; select bank0
 12864  0711  086E               	movf	_product,w
 12865  0712  0086               	movwf	6
 12866  0713  3002               	movlw	2	; select bank4/5
 12867  0714  0087               	movwf	7
 12868  0715  3002               	movlw	2	; select bank4/5
 12869  0716  3F42               	moviw [2]fsr1
 12870  0717  0023               	movlb	3	; select bank3
 12871  0718  00A2               	movwf	(_RF_Data^(0+384)+2)
 12872                           
 12873                           ;RF_Control_B1.c: 221: RF_Data[3] = product->Data[3];
 12874  0719  0020               	movlb	0	; select bank0
 12875  071A  086E               	movf	_product,w
 12876  071B  0086               	movwf	6
 12877  071C  3002               	movlw	2	; select bank4/5
 12878  071D  0087               	movwf	7
 12879  071E  3002               	movlw	2	; select bank4/5
 12880  071F  3F43               	moviw [3]fsr1
 12881  0720  0023               	movlb	3	; select bank3
 12882  0721  00A3               	movwf	(_RF_Data^(0+384)+3)
 12883                           
 12884                           ;RF_Control_B1.c: 222: RF_Data[4] = product->Data[4];
 12885  0722  0020               	movlb	0	; select bank0
 12886  0723  086E               	movf	_product,w
 12887  0724  0086               	movwf	6
 12888  0725  3002               	movlw	2	; select bank4/5
 12889  0726  0087               	movwf	7
 12890  0727  3002               	movlw	2	; select bank4/5
 12891  0728  3F44               	moviw [4]fsr1
 12892  0729  0023               	movlb	3	; select bank3
 12893  072A  00A4               	movwf	(_RF_Data^(0+384)+4)
 12894                           
 12895                           ;RF_Control_B1.c: 223: RF_Data[5] = product->Data[5];
 12896  072B  0020               	movlb	0	; select bank0
 12897  072C  086E               	movf	_product,w
 12898  072D  0086               	movwf	6
 12899  072E  3002               	movlw	2	; select bank4/5
 12900  072F  0087               	movwf	7
 12901  0730  3002               	movlw	2	; select bank4/5
 12902  0731  3F45               	moviw [5]fsr1
 12903  0732  0023               	movlb	3	; select bank3
 12904  0733  00A5               	movwf	(_RF_Data^(0+384)+5)
 12905                           
 12906                           ;RF_Control_B1.c: 224: RF_Data[6] = product->Data[6];
 12907  0734  0020               	movlb	0	; select bank0
 12908  0735  086E               	movf	_product,w
 12909  0736  0086               	movwf	6
 12910  0737  3002               	movlw	2	; select bank4/5
 12911  0738  0087               	movwf	7
 12912  0739  3002               	movlw	2	; select bank4/5
 12913  073A  3F46               	moviw [6]fsr1
 12914  073B  0023               	movlb	3	; select bank3
 12915  073C  00A6               	movwf	(_RF_Data^(0+384)+6)
 12916                           
 12917                           ;RF_Control_B1.c: 225: RF_Data[7] = product->Data[7];
 12918  073D  0020               	movlb	0	; select bank0
 12919  073E  086E               	movf	_product,w
 12920  073F  0086               	movwf	6
 12921  0740  3002               	movlw	2	; select bank4/5
 12922  0741  0087               	movwf	7
 12923  0742  3002               	movlw	2	; select bank4/5
 12924  0743  3F47               	moviw [7]fsr1
 12925  0744  0023               	movlb	3	; select bank3
 12926  0745  00A7               	movwf	(_RF_Data^(0+384)+7)
 12927                           
 12928                           ;RF_Control_B1.c: 226: RF_Data[8] = product->Data[8];
 12929  0746  0020               	movlb	0	; select bank0
 12930  0747  086E               	movf	_product,w
 12931  0748  0086               	movwf	6
 12932  0749  3002               	movlw	2	; select bank4/5
 12933  074A  0087               	movwf	7
 12934  074B  3002               	movlw	2	; select bank4/5
 12935  074C  3F48               	moviw [8]fsr1
 12936  074D  0023               	movlb	3	; select bank3
 12937  074E  00A8               	movwf	(_RF_Data^(0+384)+8)
 12938                           
 12939                           ;RF_Control_B1.c: 227: RF_Data[9] = product->Data[9];
 12940  074F  0020               	movlb	0	; select bank0
 12941  0750  086E               	movf	_product,w
 12942  0751  0086               	movwf	6
 12943  0752  3002               	movlw	2	; select bank4/5
 12944  0753  0087               	movwf	7
 12945  0754  3002               	movlw	2	; select bank4/5
 12946  0755  3F49               	moviw [9]fsr1
 12947  0756  0023               	movlb	3	; select bank3
 12948  0757  00A9               	movwf	(_RF_Data^(0+384)+9)
 12949                           
 12950                           ;RF_Control_B1.c: 228: RF_Data[10] = product->Data[10];
 12951  0758  0020               	movlb	0	; select bank0
 12952  0759  086E               	movf	_product,w
 12953  075A  0086               	movwf	6
 12954  075B  3002               	movlw	2	; select bank4/5
 12955  075C  0087               	movwf	7
 12956  075D  3002               	movlw	2	; select bank4/5
 12957  075E  3F4A               	moviw [10]fsr1
 12958  075F  0023               	movlb	3	; select bank3
 12959  0760  00AA               	movwf	(_RF_Data^(0+384)+10)
 12960                           
 12961                           ;RF_Control_B1.c: 229: RF_Data[11] = product->Data[11];
 12962  0761  0020               	movlb	0	; select bank0
 12963  0762  086E               	movf	_product,w
 12964  0763  0086               	movwf	6
 12965  0764  3002               	movlw	2	; select bank4/5
 12966  0765  0087               	movwf	7
 12967  0766  3002               	movlw	2	; select bank4/5
 12968  0767  3F4B               	moviw [11]fsr1
 12969  0768  0023               	movlb	3	; select bank3
 12970  0769  00AB               	movwf	(_RF_Data^(0+384)+11)
 12971                           
 12972                           ;RF_Control_B1.c: 230: RF_Data[12] = product->Data[12];
 12973  076A  0020               	movlb	0	; select bank0
 12974  076B  086E               	movf	_product,w
 12975  076C  0086               	movwf	6
 12976  076D  3002               	movlw	2	; select bank4/5
 12977  076E  0087               	movwf	7
 12978  076F  3002               	movlw	2	; select bank4/5
 12979  0770  3F4C               	moviw [12]fsr1
 12980  0771  0023               	movlb	3	; select bank3
 12981  0772  00AC               	movwf	(_RF_Data^(0+384)+12)
 12982                           
 12983                           ;RF_Control_B1.c: 231: RF_Data[13] = product->Data[13];
 12984  0773  0020               	movlb	0	; select bank0
 12985  0774  086E               	movf	_product,w
 12986  0775  0086               	movwf	6
 12987  0776  3002               	movlw	2	; select bank4/5
 12988  0777  0087               	movwf	7
 12989  0778  3002               	movlw	2	; select bank4/5
 12990  0779  3F4D               	moviw [13]fsr1
 12991  077A  0023               	movlb	3	; select bank3
 12992  077B  00AD               	movwf	(_RF_Data^(0+384)+13)
 12993                           
 12994                           ;RF_Control_B1.c: 232: RF_Data[14] = product->Data[14];
 12995  077C  0020               	movlb	0	; select bank0
 12996  077D  086E               	movf	_product,w
 12997  077E  0086               	movwf	6
 12998  077F  3002               	movlw	2	; select bank4/5
 12999  0780  0087               	movwf	7
 13000  0781  3002               	movlw	2	; select bank4/5
 13001  0782  3F4E               	moviw [14]fsr1
 13002  0783  0023               	movlb	3	; select bank3
 13003  0784  00AE               	movwf	(_RF_Data^(0+384)+14)
 13004                           
 13005                           ;RF_Control_B1.c: 233: RF_Data[15] = product->Data[15];
 13006  0785  0020               	movlb	0	; select bank0
 13007  0786  086E               	movf	_product,w
 13008  0787  0086               	movwf	6
 13009  0788  3002               	movlw	2	; select bank4/5
 13010  0789  0087               	movwf	7
 13011  078A  3002               	movlw	2	; select bank4/5
 13012  078B  3F4F               	moviw [15]fsr1
 13013  078C  0023               	movlb	3	; select bank3
 13014  078D  00AF               	movwf	(_RF_Data^(0+384)+15)
 13015                           
 13016                           ;RF_Control_B1.c: 234: RF_Data[16] = product->Data[16];
 13017  078E  0020               	movlb	0	; select bank0
 13018  078F  086E               	movf	_product,w
 13019  0790  0086               	movwf	6
 13020  0791  3002               	movlw	2	; select bank4/5
 13021  0792  0087               	movwf	7
 13022  0793  3002               	movlw	2	; select bank4/5
 13023  0794  3F50               	moviw [16]fsr1
 13024  0795  0023               	movlb	3	; select bank3
 13025  0796  00B0               	movwf	(_RF_Data^(0+384)+16)
 13026                           
 13027                           ;RF_Control_B1.c: 235: RF_Data[17] = product->Data[17];
 13028  0797  0020               	movlb	0	; select bank0
 13029  0798  086E               	movf	_product,w
 13030  0799  0086               	movwf	6
 13031  079A  3002               	movlw	2	; select bank4/5
 13032  079B  0087               	movwf	7
 13033  079C  3002               	movlw	2	; select bank4/5
 13034  079D  3F51               	moviw [17]fsr1
 13035  079E  0023               	movlb	3	; select bank3
 13036  079F  00B1               	movwf	(_RF_Data^(0+384)+17)
 13037                           
 13038                           ;RF_Control_B1.c: 236: RF_Data[18] = product->Data[18];
 13039  07A0  0020               	movlb	0	; select bank0
 13040  07A1  086E               	movf	_product,w
 13041  07A2  0086               	movwf	6
 13042  07A3  3002               	movlw	2	; select bank4/5
 13043  07A4  0087               	movwf	7
 13044  07A5  3002               	movlw	2	; select bank4/5
 13045  07A6  3F52               	moviw [18]fsr1
 13046  07A7  0023               	movlb	3	; select bank3
 13047  07A8  00B2               	movwf	(_RF_Data^(0+384)+18)
 13048                           
 13049                           ;RF_Control_B1.c: 237: RF_Data[19] = product->Data[19];
 13050  07A9  0020               	movlb	0	; select bank0
 13051  07AA  086E               	movf	_product,w
 13052  07AB  0086               	movwf	6
 13053  07AC  3002               	movlw	2	; select bank4/5
 13054  07AD  0087               	movwf	7
 13055  07AE  3002               	movlw	2	; select bank4/5
 13056  07AF  3F53               	moviw [19]fsr1
 13057  07B0  0023               	movlb	3	; select bank3
 13058  07B1  00B3               	movwf	(_RF_Data^(0+384)+19)
 13059                           
 13060                           ;RF_Control_B1.c: 238: RF_Data[20] = 210;
 13061  07B2  30D2               	movlw	210
 13062  07B3  0020               	movlb	0	; select bank0
 13063  07B4  00A0               	movwf	??_setTxData
 13064  07B5  0820               	movf	??_setTxData,w
 13065  07B6  0023               	movlb	3	; select bank3
 13066  07B7  00B4               	movwf	(_RF_Data^(0+384)+20)
 13067  07B8  0008               	return
 13068  07B9                     __end_of_setTxData:	
 13069                           
 13070                           	psect	text76
 13071  17A4                     __ptext76:	
 13072 ;; *************** function _setRF_DimmerLights *****************
 13073 ;; Defined at:
 13074 ;;		line 462 in file "../src/RF_Control_B1.c"
 13075 ;; Parameters:    Size  Location     Type
 13076 ;;  lights          1    wreg     unsigned char 
 13077 ;;  on              1    0[BANK0 ] unsigned char 
 13078 ;; Auto vars:     Size  Location     Type
 13079 ;;  lights          1    4[BANK0 ] unsigned char 
 13080 ;;  status          1    3[BANK0 ] unsigned char 
 13081 ;; Return value:  Size  Location     Type
 13082 ;;		None               void
 13083 ;; Registers used:
 13084 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13085 ;; Tracked objects:
 13086 ;;		On entry : 0/0
 13087 ;;		On exit  : 0/0
 13088 ;;		Unchanged: 0/0
 13089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13090 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13091 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13092 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13093 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13094 ;;Total ram usage:        5 bytes
 13095 ;; Hardware stack levels used:    1
 13096 ;; Hardware stack levels required when called:    5
 13097 ;; This function calls:
 13098 ;;		Nothing
 13099 ;; This function is called by:
 13100 ;;		_setDimmerLights
 13101 ;;		_setDimmerLights_Adj
 13102 ;;		_setRFSW_Control
 13103 ;; This function uses a non-reentrant model
 13104 ;;
 13105                           
 13106                           
 13107                           ;psect for function _setRF_DimmerLights
 13108  17A4                     _setRF_DimmerLights:	
 13109                           
 13110                           ;incstack = 0
 13111                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 13112                           ;setRF_DimmerLights@lights stored from wreg
 13113  17A4  0020               	movlb	0	; select bank0
 13114  17A5  00A4               	movwf	setRF_DimmerLights@lights
 13115                           
 13116                           ;RF_Control_B1.c: 463: char status = 1;
 13117  17A6  01A3               	clrf	setRF_DimmerLights@status
 13118  17A7  0AA3               	incf	setRF_DimmerLights@status,f
 13119                           
 13120                           ;RF_Control_B1.c: 464: status <<= (lights - 1);
 13121  17A8  0824               	movf	setRF_DimmerLights@lights,w
 13122  17A9  3EFF               	addlw	-1
 13123  17AA  0A89               	incf	9,f
 13124  17AB  2FAE               	goto	u5210
 13125  17AC                     u5215:	
 13126  17AC  1003               	clrc
 13127  17AD  0DA3               	rlf	setRF_DimmerLights@status,f
 13128  17AE                     u5210:	
 13129  17AE  3EFF               	addlw	-1
 13130  17AF  1D03               	skipz
 13131  17B0  2FAC               	goto	u5215
 13132                           
 13133                           ;RF_Control_B1.c: 465: product->Data[11]=lights;
 13134  17B1  0824               	movf	setRF_DimmerLights@lights,w
 13135  17B2  00A1               	movwf	??_setRF_DimmerLights
 13136  17B3  086E               	movf	_product,w
 13137  17B4  3E0B               	addlw	11
 13138  17B5  0086               	movwf	6
 13139  17B6  3002               	movlw	2	; select bank4/5
 13140  17B7  0087               	movwf	7
 13141  17B8  0821               	movf	??_setRF_DimmerLights,w
 13142  17B9  0081               	movwf	1
 13143                           
 13144                           ;RF_Control_B1.c: 473: product->Data[9]=product->Data[20 + lights];
 13145  17BA  0824               	movf	setRF_DimmerLights@lights,w
 13146  17BB  3E14               	addlw	20
 13147  17BC  076E               	addwf	_product,w
 13148  17BD  00A1               	movwf	??_setRF_DimmerLights
 13149  17BE  0821               	movf	??_setRF_DimmerLights,w
 13150  17BF  0086               	movwf	6
 13151  17C0  3002               	movlw	2	; select bank4/5
 13152  17C1  0087               	movwf	7
 13153  17C2  0801               	movf	1,w
 13154  17C3  00A2               	movwf	??_setRF_DimmerLights+1
 13155  17C4  086E               	movf	_product,w
 13156  17C5  3E09               	addlw	9
 13157  17C6  0086               	movwf	6
 13158  17C7  3002               	movlw	2	; select bank4/5
 13159  17C8  0087               	movwf	7
 13160  17C9  0822               	movf	??_setRF_DimmerLights+1,w
 13161  17CA  0081               	movwf	1
 13162                           
 13163                           ;RF_Control_B1.c: 474: product->Data[17]=product->Data[26 + lights];
 13164  17CB  0824               	movf	setRF_DimmerLights@lights,w
 13165  17CC  3E1A               	addlw	26
 13166  17CD  076E               	addwf	_product,w
 13167  17CE  00A1               	movwf	??_setRF_DimmerLights
 13168  17CF  0821               	movf	??_setRF_DimmerLights,w
 13169  17D0  0086               	movwf	6
 13170  17D1  3002               	movlw	2	; select bank4/5
 13171  17D2  0087               	movwf	7
 13172  17D3  0801               	movf	1,w
 13173  17D4  00A2               	movwf	??_setRF_DimmerLights+1
 13174  17D5  086E               	movf	_product,w
 13175  17D6  3E11               	addlw	17
 13176  17D7  0086               	movwf	6
 13177  17D8  3002               	movlw	2	; select bank4/5
 13178  17D9  0087               	movwf	7
 13179  17DA  0822               	movf	??_setRF_DimmerLights+1,w
 13180  17DB  0081               	movwf	1
 13181                           
 13182                           ;RF_Control_B1.c: 475: if (on == 1) {
 13183  17DC  0820               	movf	setRF_DimmerLights@on,w
 13184  17DD  3A01               	xorlw	1
 13185  17DE  1D03               	skipz
 13186  17DF  2FF0               	goto	l6222
 13187                           
 13188                           ;RF_Control_B1.c: 476: product->Data[15]=(product->Data[15] | status);
 13189  17E0  086E               	movf	_product,w
 13190  17E1  3E0F               	addlw	15
 13191  17E2  0086               	movwf	6
 13192  17E3  3002               	movlw	2	; select bank4/5
 13193  17E4  0087               	movwf	7
 13194  17E5  0801               	movf	1,w
 13195  17E6  0423               	iorwf	setRF_DimmerLights@status,w
 13196  17E7  00A1               	movwf	??_setRF_DimmerLights
 13197  17E8  086E               	movf	_product,w
 13198  17E9  3E0F               	addlw	15
 13199  17EA  0086               	movwf	6
 13200  17EB  3002               	movlw	2	; select bank4/5
 13201  17EC  0087               	movwf	7
 13202  17ED  0821               	movf	??_setRF_DimmerLights,w
 13203  17EE  0081               	movwf	1
 13204                           
 13205                           ;RF_Control_B1.c: 477: } else {
 13206  17EF  0008               	return
 13207  17F0                     l6222:	
 13208                           
 13209                           ;RF_Control_B1.c: 478: product->Data[15]=(product->Data[15]&(~status));
 13210  17F0  086E               	movf	_product,w
 13211  17F1  3E0F               	addlw	15
 13212  17F2  0086               	movwf	6
 13213  17F3  3002               	movlw	2	; select bank4/5
 13214  17F4  0087               	movwf	7
 13215  17F5  0923               	comf	setRF_DimmerLights@status,w
 13216  17F6  0501               	andwf	1,w
 13217  17F7  00A1               	movwf	??_setRF_DimmerLights
 13218  17F8  086E               	movf	_product,w
 13219  17F9  3E0F               	addlw	15
 13220  17FA  0086               	movwf	6
 13221  17FB  3002               	movlw	2	; select bank4/5
 13222  17FC  0087               	movwf	7
 13223  17FD  0821               	movf	??_setRF_DimmerLights,w
 13224  17FE  0081               	movwf	1
 13225  17FF  0008               	return
 13226  1800                     __end_of_setRF_DimmerLights:	
 13227                           
 13228                           	psect	text77
 13229  098B                     __ptext77:	
 13230 ;; *************** function _setPercentValue *****************
 13231 ;; Defined at:
 13232 ;;		line 886 in file "../src/Dimmer_B1.c"
 13233 ;; Parameters:    Size  Location     Type
 13234 ;;  value           1    wreg     unsigned char 
 13235 ;; Auto vars:     Size  Location     Type
 13236 ;;  value           1   62[BANK0 ] unsigned char 
 13237 ;;  i               3   63[BANK0 ] float 
 13238 ;; Return value:  Size  Location     Type
 13239 ;;                  1    wreg      unsigned char 
 13240 ;; Registers used:
 13241 ;;		wreg, status,2, status,0, pclath, cstack
 13242 ;; Tracked objects:
 13243 ;;		On entry : 0/0
 13244 ;;		On exit  : 0/0
 13245 ;;		Unchanged: 0/0
 13246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13248 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13249 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13250 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13251 ;;Total ram usage:        6 bytes
 13252 ;; Hardware stack levels used:    1
 13253 ;; Hardware stack levels required when called:    7
 13254 ;; This function calls:
 13255 ;;		___awtoft
 13256 ;;		___ftadd
 13257 ;;		___ftdiv
 13258 ;;		___ftneg
 13259 ;;		___fttol
 13260 ;; This function is called by:
 13261 ;;		_setDimmerLights
 13262 ;;		_setDimmerLights_Adj
 13263 ;;		_Flash_Memory_Initialization
 13264 ;; This function uses a non-reentrant model
 13265 ;;
 13266                           
 13267                           
 13268                           ;psect for function _setPercentValue
 13269  098B                     _setPercentValue:	
 13270                           
 13271                           ;incstack = 0
 13272                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13273                           ;setPercentValue@value stored from wreg
 13274  098B  0020               	movlb	0	; select bank0
 13275  098C  00DE               	movwf	setPercentValue@value
 13276                           
 13277                           ;Dimmer_B1.c: 894: float i = ((char)(80*0.8)) - ((char)(15*0.8));
 13278  098D  3000               	movlw	0
 13279  098E  00DF               	movwf	setPercentValue@i
 13280  098F  3050               	movlw	80
 13281  0990  00E0               	movwf	setPercentValue@i+1
 13282  0991  3042               	movlw	66
 13283  0992  00E1               	movwf	setPercentValue@i+2
 13284                           
 13285                           ;Dimmer_B1.c: 895: i /= 100;
 13286  0993  3000               	movlw	0
 13287  0994  00AE               	movwf	___ftdiv@f2
 13288  0995  30C8               	movlw	200
 13289  0996  00AF               	movwf	___ftdiv@f2+1
 13290  0997  3042               	movlw	66
 13291  0998  00B0               	movwf	___ftdiv@f2+2
 13292  0999  085F               	movf	setPercentValue@i,w
 13293  099A  00B1               	movwf	___ftdiv@f1
 13294  099B  0860               	movf	setPercentValue@i+1,w
 13295  099C  00B2               	movwf	___ftdiv@f1+1
 13296  099D  0861               	movf	setPercentValue@i+2,w
 13297  099E  00B3               	movwf	___ftdiv@f1+2
 13298  099F  318E  26A3  3189   	fcall	___ftdiv
 13299  09A2  0020               	movlb	0	; select bank0
 13300  09A3  082E               	movf	?___ftdiv,w
 13301  09A4  00DF               	movwf	setPercentValue@i
 13302  09A5  082F               	movf	?___ftdiv+1,w
 13303  09A6  00E0               	movwf	setPercentValue@i+1
 13304  09A7  0830               	movf	?___ftdiv+2,w
 13305  09A8  00E1               	movwf	setPercentValue@i+2
 13306                           
 13307                           ;Dimmer_B1.c: 897: return (char) (100 - ((((char)(80*0.8)) - value) / i));
 13308  09A9  085E               	movf	setPercentValue@value,w
 13309  09AA  00DC               	movwf	??_setPercentValue
 13310  09AB  01DD               	clrf	??_setPercentValue+1
 13311  09AC  09DC               	comf	??_setPercentValue,f
 13312  09AD  09DD               	comf	??_setPercentValue+1,f
 13313  09AE  0ADC               	incf	??_setPercentValue,f
 13314  09AF  1903               	skipnz
 13315  09B0  0ADD               	incf	??_setPercentValue+1,f
 13316  09B1  085C               	movf	??_setPercentValue,w
 13317  09B2  3E40               	addlw	64
 13318  09B3  00A8               	movwf	___awtoft@c
 13319  09B4  3000               	movlw	0
 13320  09B5  3D5D               	addwfc	??_setPercentValue+1,w
 13321  09B6  00A9               	movwf	___awtoft@c+1
 13322  09B7  319F  2799  3189   	fcall	___awtoft
 13323  09BA  0020               	movlb	0	; select bank0
 13324  09BB  0828               	movf	?___awtoft,w
 13325  09BC  00B1               	movwf	___ftdiv@f1
 13326  09BD  0829               	movf	?___awtoft+1,w
 13327  09BE  00B2               	movwf	___ftdiv@f1+1
 13328  09BF  082A               	movf	?___awtoft+2,w
 13329  09C0  00B3               	movwf	___ftdiv@f1+2
 13330  09C1  085F               	movf	setPercentValue@i,w
 13331  09C2  00AE               	movwf	___ftdiv@f2
 13332  09C3  0860               	movf	setPercentValue@i+1,w
 13333  09C4  00AF               	movwf	___ftdiv@f2+1
 13334  09C5  0861               	movf	setPercentValue@i+2,w
 13335  09C6  00B0               	movwf	___ftdiv@f2+2
 13336  09C7  318E  26A3  3189   	fcall	___ftdiv
 13337  09CA  0020               	movlb	0	; select bank0
 13338  09CB  082E               	movf	?___ftdiv,w
 13339  09CC  00BE               	movwf	___ftneg@f1
 13340  09CD  082F               	movf	?___ftdiv+1,w
 13341  09CE  00BF               	movwf	___ftneg@f1+1
 13342  09CF  0830               	movf	?___ftdiv+2,w
 13343  09D0  00C0               	movwf	___ftneg@f1+2
 13344  09D1  319B  23B2  3189   	fcall	___ftneg
 13345  09D4  0020               	movlb	0	; select bank0
 13346  09D5  083E               	movf	?___ftneg,w
 13347  09D6  00C4               	movwf	___ftadd@f2
 13348  09D7  083F               	movf	?___ftneg+1,w
 13349  09D8  00C5               	movwf	___ftadd@f2+1
 13350  09D9  0840               	movf	?___ftneg+2,w
 13351  09DA  00C6               	movwf	___ftadd@f2+2
 13352  09DB  3000               	movlw	0
 13353  09DC  00C1               	movwf	___ftadd@f1
 13354  09DD  30C8               	movlw	200
 13355  09DE  00C2               	movwf	___ftadd@f1+1
 13356  09DF  3042               	movlw	66
 13357  09E0  00C3               	movwf	___ftadd@f1+2
 13358  09E1  3184  243A  3189   	fcall	___ftadd
 13359  09E4  0020               	movlb	0	; select bank0
 13360  09E5  0841               	movf	?___ftadd,w
 13361  09E6  00CE               	movwf	___fttol@f1
 13362  09E7  0842               	movf	?___ftadd+1,w
 13363  09E8  00CF               	movwf	___fttol@f1+1
 13364  09E9  0843               	movf	?___ftadd+2,w
 13365  09EA  00D0               	movwf	___fttol@f1+2
 13366  09EB  318C  24EE         	fcall	___fttol
 13367  09ED  0020               	movlb	0	; select bank0
 13368  09EE  084E               	movf	?___fttol,w
 13369  09EF  0008               	return
 13370  09F0                     __end_of_setPercentValue:	
 13371                           
 13372                           	psect	text78
 13373  0CEE                     __ptext78:	
 13374 ;; *************** function ___fttol *****************
 13375 ;; Defined at:
 13376 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13377 ;; Parameters:    Size  Location     Type
 13378 ;;  f1              3   46[BANK0 ] float 
 13379 ;; Auto vars:     Size  Location     Type
 13380 ;;  lval            4   55[BANK0 ] unsigned long 
 13381 ;;  exp1            1   59[BANK0 ] unsigned char 
 13382 ;;  sign1           1   54[BANK0 ] unsigned char 
 13383 ;; Return value:  Size  Location     Type
 13384 ;;                  4   46[BANK0 ] long 
 13385 ;; Registers used:
 13386 ;;		wreg, status,2, status,0
 13387 ;; Tracked objects:
 13388 ;;		On entry : 0/0
 13389 ;;		On exit  : 0/0
 13390 ;;		Unchanged: 0/0
 13391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13392 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13393 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13394 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13395 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13396 ;;Total ram usage:       14 bytes
 13397 ;; Hardware stack levels used:    1
 13398 ;; Hardware stack levels required when called:    5
 13399 ;; This function calls:
 13400 ;;		Nothing
 13401 ;; This function is called by:
 13402 ;;		_getPercentValue
 13403 ;;		_setPercentValue
 13404 ;; This function uses a non-reentrant model
 13405 ;;
 13406                           
 13407                           
 13408                           ;psect for function ___fttol
 13409  0CEE                     ___fttol:	
 13410                           
 13411                           ;incstack = 0
 13412                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13413  0CEE  0020               	movlb	0	; select bank0
 13414  0CEF  084E               	movf	___fttol@f1,w
 13415  0CF0  00D2               	movwf	??___fttol
 13416  0CF1  084F               	movf	___fttol@f1+1,w
 13417  0CF2  00D3               	movwf	??___fttol+1
 13418  0CF3  0850               	movf	___fttol@f1+2,w
 13419  0CF4  00D4               	movwf	??___fttol+2
 13420  0CF5  1003               	clrc
 13421  0CF6  0D53               	rlf	??___fttol+1,w
 13422  0CF7  0D54               	rlf	??___fttol+2,w
 13423  0CF8  00D5               	movwf	??___fttol+3
 13424  0CF9  0855               	movf	??___fttol+3,w
 13425  0CFA  00DB               	movwf	___fttol@exp1
 13426  0CFB  08DB               	movf	___fttol@exp1,f
 13427  0CFC  1D03               	skipz
 13428  0CFD  2D07               	goto	l5948
 13429  0CFE  3000               	movlw	0
 13430  0CFF  00D1               	movwf	?___fttol+3
 13431  0D00  3000               	movlw	0
 13432  0D01  00D0               	movwf	?___fttol+2
 13433  0D02  3000               	movlw	0
 13434  0D03  00CF               	movwf	?___fttol+1
 13435  0D04  3000               	movlw	0
 13436  0D05  00CE               	movwf	?___fttol
 13437  0D06  0008               	return
 13438  0D07                     l5948:	
 13439  0D07  084E               	movf	___fttol@f1,w
 13440  0D08  00D2               	movwf	??___fttol
 13441  0D09  084F               	movf	___fttol@f1+1,w
 13442  0D0A  00D3               	movwf	??___fttol+1
 13443  0D0B  0850               	movf	___fttol@f1+2,w
 13444  0D0C  00D4               	movwf	??___fttol+2
 13445  0D0D  3017               	movlw	23
 13446  0D0E                     u4805:	
 13447  0D0E  36D4               	lsrf	??___fttol+2,f
 13448  0D0F  0CD3               	rrf	??___fttol+1,f
 13449  0D10  0CD2               	rrf	??___fttol,f
 13450  0D11  0B89               	decfsz	9,f
 13451  0D12  2D0E               	goto	u4805
 13452  0D13  0852               	movf	??___fttol,w
 13453  0D14  00D5               	movwf	??___fttol+3
 13454  0D15  0855               	movf	??___fttol+3,w
 13455  0D16  00D6               	movwf	___fttol@sign1
 13456  0D17  17CF               	bsf	___fttol@f1+1,7
 13457  0D18  30FF               	movlw	255
 13458  0D19  05CE               	andwf	___fttol@f1,f
 13459  0D1A  30FF               	movlw	255
 13460  0D1B  05CF               	andwf	___fttol@f1+1,f
 13461  0D1C  3000               	movlw	0
 13462  0D1D  05D0               	andwf	___fttol@f1+2,f
 13463  0D1E  084E               	movf	___fttol@f1,w
 13464  0D1F  00D7               	movwf	___fttol@lval
 13465  0D20  084F               	movf	___fttol@f1+1,w
 13466  0D21  00D8               	movwf	___fttol@lval+1
 13467  0D22  0850               	movf	___fttol@f1+2,w
 13468  0D23  00D9               	movwf	___fttol@lval+2
 13469  0D24  01DA               	clrf	___fttol@lval+3
 13470  0D25  308E               	movlw	142
 13471  0D26  02DB               	subwf	___fttol@exp1,f
 13472  0D27  1FDB               	btfss	___fttol@exp1,7
 13473  0D28  2D45               	goto	l5968
 13474  0D29  085B               	movf	___fttol@exp1,w
 13475  0D2A  3A80               	xorlw	128
 13476  0D2B  3E8F               	addlw	143
 13477  0D2C  1803               	skipnc
 13478  0D2D  2D37               	goto	l5966
 13479  0D2E  3000               	movlw	0
 13480  0D2F  00D1               	movwf	?___fttol+3
 13481  0D30  3000               	movlw	0
 13482  0D31  00D0               	movwf	?___fttol+2
 13483  0D32  3000               	movlw	0
 13484  0D33  00CF               	movwf	?___fttol+1
 13485  0D34  3000               	movlw	0
 13486  0D35  00CE               	movwf	?___fttol
 13487  0D36  0008               	return
 13488  0D37                     l5966:	
 13489  0D37  3001               	movlw	1
 13490  0D38                     u4835:	
 13491  0D38  36DA               	lsrf	___fttol@lval+3,f
 13492  0D39  0CD9               	rrf	___fttol@lval+2,f
 13493  0D3A  0CD8               	rrf	___fttol@lval+1,f
 13494  0D3B  0CD7               	rrf	___fttol@lval,f
 13495  0D3C  0B89               	decfsz	9,f
 13496  0D3D  2D38               	goto	u4835
 13497  0D3E  3001               	movlw	1
 13498  0D3F  00D2               	movwf	??___fttol
 13499  0D40  0852               	movf	??___fttol,w
 13500  0D41  07DB               	addwf	___fttol@exp1,f
 13501  0D42  1903               	btfsc	3,2
 13502  0D43  2D5E               	goto	l5978
 13503  0D44  2D37               	goto	l5966
 13504  0D45                     l5968:	
 13505  0D45  3018               	movlw	24
 13506  0D46  025B               	subwf	___fttol@exp1,w
 13507  0D47  1C03               	skipc
 13508  0D48  2D5B               	goto	l5976
 13509  0D49  3000               	movlw	0
 13510  0D4A  00D1               	movwf	?___fttol+3
 13511  0D4B  3000               	movlw	0
 13512  0D4C  00D0               	movwf	?___fttol+2
 13513  0D4D  3000               	movlw	0
 13514  0D4E  00CF               	movwf	?___fttol+1
 13515  0D4F  3000               	movlw	0
 13516  0D50  00CE               	movwf	?___fttol
 13517  0D51  0008               	return
 13518  0D52                     l5974:	
 13519  0D52  3001               	movlw	1
 13520  0D53                     u4865:	
 13521  0D53  35D7               	lslf	___fttol@lval,f
 13522  0D54  0DD8               	rlf	___fttol@lval+1,f
 13523  0D55  0DD9               	rlf	___fttol@lval+2,f
 13524  0D56  0DDA               	rlf	___fttol@lval+3,f
 13525  0D57  0B89               	decfsz	9,f
 13526  0D58  2D53               	goto	u4865
 13527  0D59  3001               	movlw	1
 13528  0D5A  02DB               	subwf	___fttol@exp1,f
 13529  0D5B                     l5976:	
 13530  0D5B  08DB               	movf	___fttol@exp1,f
 13531  0D5C  1D03               	skipz
 13532  0D5D  2D52               	goto	l5974
 13533  0D5E                     l5978:	
 13534  0D5E  0856               	movf	___fttol@sign1,w
 13535  0D5F  1903               	btfsc	3,2
 13536  0D60  2D6C               	goto	l5982
 13537  0D61  09D7               	comf	___fttol@lval,f
 13538  0D62  09D8               	comf	___fttol@lval+1,f
 13539  0D63  09D9               	comf	___fttol@lval+2,f
 13540  0D64  09DA               	comf	___fttol@lval+3,f
 13541  0D65  0AD7               	incf	___fttol@lval,f
 13542  0D66  1903               	skipnz
 13543  0D67  0AD8               	incf	___fttol@lval+1,f
 13544  0D68  1903               	skipnz
 13545  0D69  0AD9               	incf	___fttol@lval+2,f
 13546  0D6A  1903               	skipnz
 13547  0D6B  0ADA               	incf	___fttol@lval+3,f
 13548  0D6C                     l5982:	
 13549  0D6C  085A               	movf	___fttol@lval+3,w
 13550  0D6D  00D1               	movwf	?___fttol+3
 13551  0D6E  0859               	movf	___fttol@lval+2,w
 13552  0D6F  00D0               	movwf	?___fttol+2
 13553  0D70  0858               	movf	___fttol@lval+1,w
 13554  0D71  00CF               	movwf	?___fttol+1
 13555  0D72  0857               	movf	___fttol@lval,w
 13556  0D73  00CE               	movwf	?___fttol
 13557  0D74  0008               	return
 13558  0D75                     __end_of___fttol:	
 13559                           
 13560                           	psect	text79
 13561  1BB2                     __ptext79:	
 13562 ;; *************** function ___ftneg *****************
 13563 ;; Defined at:
 13564 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13565 ;; Parameters:    Size  Location     Type
 13566 ;;  f1              3   30[BANK0 ] float 
 13567 ;; Auto vars:     Size  Location     Type
 13568 ;;		None
 13569 ;; Return value:  Size  Location     Type
 13570 ;;                  3   30[BANK0 ] float 
 13571 ;; Registers used:
 13572 ;;		wreg
 13573 ;; Tracked objects:
 13574 ;;		On entry : 0/0
 13575 ;;		On exit  : 0/0
 13576 ;;		Unchanged: 0/0
 13577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13578 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13581 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13582 ;;Total ram usage:        3 bytes
 13583 ;; Hardware stack levels used:    1
 13584 ;; Hardware stack levels required when called:    5
 13585 ;; This function calls:
 13586 ;;		Nothing
 13587 ;; This function is called by:
 13588 ;;		_getPercentValue
 13589 ;;		_setPercentValue
 13590 ;; This function uses a non-reentrant model
 13591 ;;
 13592                           
 13593                           
 13594                           ;psect for function ___ftneg
 13595  1BB2                     ___ftneg:	
 13596                           
 13597                           ;incstack = 0
 13598                           ; Regs used in ___ftneg: [wreg]
 13599  1BB2  0020               	movlb	0	; select bank0
 13600  1BB3  0840               	movf	___ftneg@f1+2,w
 13601  1BB4  043F               	iorwf	___ftneg@f1+1,w
 13602  1BB5  043E               	iorwf	___ftneg@f1,w
 13603  1BB6  1903               	skipnz
 13604  1BB7  0008               	return
 13605  1BB8  3080               	movlw	128
 13606  1BB9  06C0               	xorwf	___ftneg@f1+2,f
 13607  1BBA  0008               	return
 13608  1BBB                     __end_of___ftneg:	
 13609                           
 13610                           	psect	text80
 13611  0EA3                     __ptext80:	
 13612 ;; *************** function ___ftdiv *****************
 13613 ;; Defined at:
 13614 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13615 ;; Parameters:    Size  Location     Type
 13616 ;;  f2              3   14[BANK0 ] float 
 13617 ;;  f1              3   17[BANK0 ] float 
 13618 ;; Auto vars:     Size  Location     Type
 13619 ;;  f3              3   25[BANK0 ] float 
 13620 ;;  sign            1   29[BANK0 ] unsigned char 
 13621 ;;  exp             1   28[BANK0 ] unsigned char 
 13622 ;;  cntr            1   24[BANK0 ] unsigned char 
 13623 ;; Return value:  Size  Location     Type
 13624 ;;                  3   14[BANK0 ] float 
 13625 ;; Registers used:
 13626 ;;		wreg, status,2, status,0, pclath, cstack
 13627 ;; Tracked objects:
 13628 ;;		On entry : 0/0
 13629 ;;		On exit  : 0/0
 13630 ;;		Unchanged: 0/0
 13631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13632 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13633 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13634 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13635 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13636 ;;Total ram usage:       16 bytes
 13637 ;; Hardware stack levels used:    1
 13638 ;; Hardware stack levels required when called:    6
 13639 ;; This function calls:
 13640 ;;		___ftpack
 13641 ;; This function is called by:
 13642 ;;		_getPercentValue
 13643 ;;		_setPercentValue
 13644 ;; This function uses a non-reentrant model
 13645 ;;
 13646                           
 13647                           
 13648                           ;psect for function ___ftdiv
 13649  0EA3                     ___ftdiv:	
 13650                           
 13651                           ;incstack = 0
 13652                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13653  0EA3  0020               	movlb	0	; select bank0
 13654  0EA4  0831               	movf	___ftdiv@f1,w
 13655  0EA5  00B4               	movwf	??___ftdiv
 13656  0EA6  0832               	movf	___ftdiv@f1+1,w
 13657  0EA7  00B5               	movwf	??___ftdiv+1
 13658  0EA8  0833               	movf	___ftdiv@f1+2,w
 13659  0EA9  00B6               	movwf	??___ftdiv+2
 13660  0EAA  1003               	clrc
 13661  0EAB  0D35               	rlf	??___ftdiv+1,w
 13662  0EAC  0D36               	rlf	??___ftdiv+2,w
 13663  0EAD  00B7               	movwf	??___ftdiv+3
 13664  0EAE  0837               	movf	??___ftdiv+3,w
 13665  0EAF  00BC               	movwf	___ftdiv@exp
 13666  0EB0  08BC               	movf	___ftdiv@exp,f
 13667  0EB1  1D03               	skipz
 13668  0EB2  2EBA               	goto	l5848
 13669  0EB3  3000               	movlw	0
 13670  0EB4  00AE               	movwf	?___ftdiv
 13671  0EB5  3000               	movlw	0
 13672  0EB6  00AF               	movwf	?___ftdiv+1
 13673  0EB7  3000               	movlw	0
 13674  0EB8  00B0               	movwf	?___ftdiv+2
 13675  0EB9  0008               	return
 13676  0EBA                     l5848:	
 13677  0EBA  082E               	movf	___ftdiv@f2,w
 13678  0EBB  00B4               	movwf	??___ftdiv
 13679  0EBC  082F               	movf	___ftdiv@f2+1,w
 13680  0EBD  00B5               	movwf	??___ftdiv+1
 13681  0EBE  0830               	movf	___ftdiv@f2+2,w
 13682  0EBF  00B6               	movwf	??___ftdiv+2
 13683  0EC0  1003               	clrc
 13684  0EC1  0D35               	rlf	??___ftdiv+1,w
 13685  0EC2  0D36               	rlf	??___ftdiv+2,w
 13686  0EC3  00B7               	movwf	??___ftdiv+3
 13687  0EC4  0837               	movf	??___ftdiv+3,w
 13688  0EC5  00BD               	movwf	___ftdiv@sign
 13689  0EC6  08BD               	movf	___ftdiv@sign,f
 13690  0EC7  1D03               	skipz
 13691  0EC8  2ED0               	goto	l5854
 13692  0EC9  3000               	movlw	0
 13693  0ECA  00AE               	movwf	?___ftdiv
 13694  0ECB  3000               	movlw	0
 13695  0ECC  00AF               	movwf	?___ftdiv+1
 13696  0ECD  3000               	movlw	0
 13697  0ECE  00B0               	movwf	?___ftdiv+2
 13698  0ECF  0008               	return
 13699  0ED0                     l5854:	
 13700  0ED0  3000               	movlw	0
 13701  0ED1  00B9               	movwf	___ftdiv@f3
 13702  0ED2  3000               	movlw	0
 13703  0ED3  00BA               	movwf	___ftdiv@f3+1
 13704  0ED4  3000               	movlw	0
 13705  0ED5  00BB               	movwf	___ftdiv@f3+2
 13706  0ED6  3089               	movlw	137
 13707  0ED7  073D               	addwf	___ftdiv@sign,w
 13708  0ED8  00B4               	movwf	??___ftdiv
 13709  0ED9  0834               	movf	??___ftdiv,w
 13710  0EDA  02BC               	subwf	___ftdiv@exp,f
 13711  0EDB  0831               	movf	___ftdiv@f1,w
 13712  0EDC  00B4               	movwf	??___ftdiv
 13713  0EDD  0832               	movf	___ftdiv@f1+1,w
 13714  0EDE  00B5               	movwf	??___ftdiv+1
 13715  0EDF  0833               	movf	___ftdiv@f1+2,w
 13716  0EE0  00B6               	movwf	??___ftdiv+2
 13717  0EE1  3010               	movlw	16
 13718  0EE2                     u4605:	
 13719  0EE2  36B6               	lsrf	??___ftdiv+2,f
 13720  0EE3  0CB5               	rrf	??___ftdiv+1,f
 13721  0EE4  0CB4               	rrf	??___ftdiv,f
 13722  0EE5  0B89               	decfsz	9,f
 13723  0EE6  2EE2               	goto	u4605
 13724  0EE7  0834               	movf	??___ftdiv,w
 13725  0EE8  00B7               	movwf	??___ftdiv+3
 13726  0EE9  0837               	movf	??___ftdiv+3,w
 13727  0EEA  00BD               	movwf	___ftdiv@sign
 13728  0EEB  082E               	movf	___ftdiv@f2,w
 13729  0EEC  00B4               	movwf	??___ftdiv
 13730  0EED  082F               	movf	___ftdiv@f2+1,w
 13731  0EEE  00B5               	movwf	??___ftdiv+1
 13732  0EEF  0830               	movf	___ftdiv@f2+2,w
 13733  0EF0  00B6               	movwf	??___ftdiv+2
 13734  0EF1  3010               	movlw	16
 13735  0EF2                     u4615:	
 13736  0EF2  36B6               	lsrf	??___ftdiv+2,f
 13737  0EF3  0CB5               	rrf	??___ftdiv+1,f
 13738  0EF4  0CB4               	rrf	??___ftdiv,f
 13739  0EF5  0B89               	decfsz	9,f
 13740  0EF6  2EF2               	goto	u4615
 13741  0EF7  0834               	movf	??___ftdiv,w
 13742  0EF8  00B7               	movwf	??___ftdiv+3
 13743  0EF9  0837               	movf	??___ftdiv+3,w
 13744  0EFA  06BD               	xorwf	___ftdiv@sign,f
 13745  0EFB  3080               	movlw	128
 13746  0EFC  00B4               	movwf	??___ftdiv
 13747  0EFD  0834               	movf	??___ftdiv,w
 13748  0EFE  05BD               	andwf	___ftdiv@sign,f
 13749  0EFF  17B2               	bsf	___ftdiv@f1+1,7
 13750  0F00  30FF               	movlw	255
 13751  0F01  05B1               	andwf	___ftdiv@f1,f
 13752  0F02  30FF               	movlw	255
 13753  0F03  05B2               	andwf	___ftdiv@f1+1,f
 13754  0F04  3000               	movlw	0
 13755  0F05  05B3               	andwf	___ftdiv@f1+2,f
 13756  0F06  17AF               	bsf	___ftdiv@f2+1,7
 13757  0F07  30FF               	movlw	255
 13758  0F08  05AE               	andwf	___ftdiv@f2,f
 13759  0F09  30FF               	movlw	255
 13760  0F0A  05AF               	andwf	___ftdiv@f2+1,f
 13761  0F0B  3000               	movlw	0
 13762  0F0C  05B0               	andwf	___ftdiv@f2+2,f
 13763  0F0D  3018               	movlw	24
 13764  0F0E  00B4               	movwf	??___ftdiv
 13765  0F0F  0834               	movf	??___ftdiv,w
 13766  0F10  00B8               	movwf	___ftdiv@cntr
 13767  0F11                     l5868:	
 13768  0F11  3001               	movlw	1
 13769  0F12                     u4625:	
 13770  0F12  35B9               	lslf	___ftdiv@f3,f
 13771  0F13  0DBA               	rlf	___ftdiv@f3+1,f
 13772  0F14  0DBB               	rlf	___ftdiv@f3+2,f
 13773  0F15  0B89               	decfsz	9,f
 13774  0F16  2F12               	goto	u4625
 13775  0F17  0830               	movf	___ftdiv@f2+2,w
 13776  0F18  0233               	subwf	___ftdiv@f1+2,w
 13777  0F19  1D03               	skipz
 13778  0F1A  2F21               	goto	u4635
 13779  0F1B  082F               	movf	___ftdiv@f2+1,w
 13780  0F1C  0232               	subwf	___ftdiv@f1+1,w
 13781  0F1D  1D03               	skipz
 13782  0F1E  2F21               	goto	u4635
 13783  0F1F  082E               	movf	___ftdiv@f2,w
 13784  0F20  0231               	subwf	___ftdiv@f1,w
 13785  0F21                     u4635:	
 13786  0F21  1C03               	skipc
 13787  0F22  2F2A               	goto	l5876
 13788  0F23  082E               	movf	___ftdiv@f2,w
 13789  0F24  02B1               	subwf	___ftdiv@f1,f
 13790  0F25  082F               	movf	___ftdiv@f2+1,w
 13791  0F26  3BB2               	subwfb	___ftdiv@f1+1,f
 13792  0F27  0830               	movf	___ftdiv@f2+2,w
 13793  0F28  3BB3               	subwfb	___ftdiv@f1+2,f
 13794  0F29  1439               	bsf	___ftdiv@f3,0
 13795  0F2A                     l5876:	
 13796  0F2A  3001               	movlw	1
 13797  0F2B                     u4645:	
 13798  0F2B  35B1               	lslf	___ftdiv@f1,f
 13799  0F2C  0DB2               	rlf	___ftdiv@f1+1,f
 13800  0F2D  0DB3               	rlf	___ftdiv@f1+2,f
 13801  0F2E  0B89               	decfsz	9,f
 13802  0F2F  2F2B               	goto	u4645
 13803  0F30  3001               	movlw	1
 13804  0F31  02B8               	subwf	___ftdiv@cntr,f
 13805  0F32  1D03               	btfss	3,2
 13806  0F33  2F11               	goto	l5868
 13807  0F34  0839               	movf	___ftdiv@f3,w
 13808  0F35  00A0               	movwf	___ftpack@arg
 13809  0F36  083A               	movf	___ftdiv@f3+1,w
 13810  0F37  00A1               	movwf	___ftpack@arg+1
 13811  0F38  083B               	movf	___ftdiv@f3+2,w
 13812  0F39  00A2               	movwf	___ftpack@arg+2
 13813  0F3A  083C               	movf	___ftdiv@exp,w
 13814  0F3B  00B4               	movwf	??___ftdiv
 13815  0F3C  0834               	movf	??___ftdiv,w
 13816  0F3D  00A3               	movwf	___ftpack@exp
 13817  0F3E  083D               	movf	___ftdiv@sign,w
 13818  0F3F  00B5               	movwf	??___ftdiv+1
 13819  0F40  0835               	movf	??___ftdiv+1,w
 13820  0F41  00A4               	movwf	___ftpack@sign
 13821  0F42  3189  212A         	fcall	___ftpack
 13822  0F44  0020               	movlb	0	; select bank0
 13823  0F45  0820               	movf	?___ftpack,w
 13824  0F46  00AE               	movwf	?___ftdiv
 13825  0F47  0821               	movf	?___ftpack+1,w
 13826  0F48  00AF               	movwf	?___ftdiv+1
 13827  0F49  0822               	movf	?___ftpack+2,w
 13828  0F4A  00B0               	movwf	?___ftdiv+2
 13829  0F4B  0008               	return
 13830  0F4C                     __end_of___ftdiv:	
 13831                           
 13832                           	psect	text81
 13833  043A                     __ptext81:	
 13834 ;; *************** function ___ftadd *****************
 13835 ;; Defined at:
 13836 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 13837 ;; Parameters:    Size  Location     Type
 13838 ;;  f1              3   33[BANK0 ] float 
 13839 ;;  f2              3   36[BANK0 ] float 
 13840 ;; Auto vars:     Size  Location     Type
 13841 ;;  exp1            1   45[BANK0 ] unsigned char 
 13842 ;;  exp2            1   44[BANK0 ] unsigned char 
 13843 ;;  sign            1   43[BANK0 ] unsigned char 
 13844 ;; Return value:  Size  Location     Type
 13845 ;;                  3   33[BANK0 ] float 
 13846 ;; Registers used:
 13847 ;;		wreg, status,2, status,0, pclath, cstack
 13848 ;; Tracked objects:
 13849 ;;		On entry : 0/0
 13850 ;;		On exit  : 0/0
 13851 ;;		Unchanged: 0/0
 13852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13853 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13854 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13855 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13856 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13857 ;;Total ram usage:       13 bytes
 13858 ;; Hardware stack levels used:    1
 13859 ;; Hardware stack levels required when called:    6
 13860 ;; This function calls:
 13861 ;;		___ftpack
 13862 ;; This function is called by:
 13863 ;;		_getPercentValue
 13864 ;;		_setPercentValue
 13865 ;; This function uses a non-reentrant model
 13866 ;;
 13867                           
 13868                           
 13869                           ;psect for function ___ftadd
 13870  043A                     ___ftadd:	
 13871                           
 13872                           ;incstack = 0
 13873                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 13874  043A  0020               	movlb	0	; select bank0
 13875  043B  0841               	movf	___ftadd@f1,w
 13876  043C  00C7               	movwf	??___ftadd
 13877  043D  0842               	movf	___ftadd@f1+1,w
 13878  043E  00C8               	movwf	??___ftadd+1
 13879  043F  0843               	movf	___ftadd@f1+2,w
 13880  0440  00C9               	movwf	??___ftadd+2
 13881  0441  1003               	clrc
 13882  0442  0D48               	rlf	??___ftadd+1,w
 13883  0443  0D49               	rlf	??___ftadd+2,w
 13884  0444  00CA               	movwf	??___ftadd+3
 13885  0445  084A               	movf	??___ftadd+3,w
 13886  0446  00CD               	movwf	___ftadd@exp1
 13887  0447  0844               	movf	___ftadd@f2,w
 13888  0448  00C7               	movwf	??___ftadd
 13889  0449  0845               	movf	___ftadd@f2+1,w
 13890  044A  00C8               	movwf	??___ftadd+1
 13891  044B  0846               	movf	___ftadd@f2+2,w
 13892  044C  00C9               	movwf	??___ftadd+2
 13893  044D  1003               	clrc
 13894  044E  0D48               	rlf	??___ftadd+1,w
 13895  044F  0D49               	rlf	??___ftadd+2,w
 13896  0450  00CA               	movwf	??___ftadd+3
 13897  0451  084A               	movf	??___ftadd+3,w
 13898  0452  00CC               	movwf	___ftadd@exp2
 13899  0453  084D               	movf	___ftadd@exp1,w
 13900  0454  1903               	btfsc	3,2
 13901  0455  2C62               	goto	l5778
 13902  0456  084C               	movf	___ftadd@exp2,w
 13903  0457  024D               	subwf	___ftadd@exp1,w
 13904  0458  1803               	skipnc
 13905  0459  2C69               	goto	l5782
 13906  045A  034D               	decf	___ftadd@exp1,w
 13907  045B  3AFF               	xorlw	255
 13908  045C  074C               	addwf	___ftadd@exp2,w
 13909  045D  00C7               	movwf	??___ftadd
 13910  045E  3019               	movlw	25
 13911  045F  0247               	subwf	??___ftadd,w
 13912  0460  1C03               	skipc
 13913  0461  2C69               	goto	l5782
 13914  0462                     l5778:	
 13915  0462  0844               	movf	___ftadd@f2,w
 13916  0463  00C1               	movwf	?___ftadd
 13917  0464  0845               	movf	___ftadd@f2+1,w
 13918  0465  00C2               	movwf	?___ftadd+1
 13919  0466  0846               	movf	___ftadd@f2+2,w
 13920  0467  00C3               	movwf	?___ftadd+2
 13921  0468  0008               	return
 13922  0469                     l5782:	
 13923  0469  084C               	movf	___ftadd@exp2,w
 13924  046A  1903               	btfsc	3,2
 13925  046B  0008               	return
 13926  046C  084D               	movf	___ftadd@exp1,w
 13927  046D  024C               	subwf	___ftadd@exp2,w
 13928  046E  1803               	skipnc
 13929  046F  2C78               	goto	l5788
 13930  0470  034C               	decf	___ftadd@exp2,w
 13931  0471  3AFF               	xorlw	255
 13932  0472  074D               	addwf	___ftadd@exp1,w
 13933  0473  00C7               	movwf	??___ftadd
 13934  0474  3019               	movlw	25
 13935  0475  0247               	subwf	??___ftadd,w
 13936  0476  1803               	btfsc	3,0
 13937  0477  0008               	return
 13938  0478                     l5788:	
 13939  0478  3006               	movlw	6
 13940  0479  00C7               	movwf	??___ftadd
 13941  047A  0847               	movf	??___ftadd,w
 13942  047B  00CB               	movwf	___ftadd@sign
 13943  047C  1BC3               	btfsc	___ftadd@f1+2,7
 13944  047D  17CB               	bsf	___ftadd@sign,7
 13945  047E  1BC6               	btfsc	___ftadd@f2+2,7
 13946  047F  174B               	bsf	___ftadd@sign,6
 13947  0480  17C2               	bsf	___ftadd@f1+1,7
 13948  0481  30FF               	movlw	255
 13949  0482  05C1               	andwf	___ftadd@f1,f
 13950  0483  30FF               	movlw	255
 13951  0484  05C2               	andwf	___ftadd@f1+1,f
 13952  0485  3000               	movlw	0
 13953  0486  05C3               	andwf	___ftadd@f1+2,f
 13954  0487  17C5               	bsf	___ftadd@f2+1,7
 13955  0488  30FF               	movlw	255
 13956  0489  05C4               	andwf	___ftadd@f2,f
 13957  048A  30FF               	movlw	255
 13958  048B  05C5               	andwf	___ftadd@f2+1,f
 13959  048C  3000               	movlw	0
 13960  048D  05C6               	andwf	___ftadd@f2+2,f
 13961  048E  084C               	movf	___ftadd@exp2,w
 13962  048F  024D               	subwf	___ftadd@exp1,w
 13963  0490  1803               	skipnc
 13964  0491  2CB4               	goto	l5810
 13965  0492                     l5800:	
 13966  0492  3001               	movlw	1
 13967  0493                     u4445:	
 13968  0493  35C4               	lslf	___ftadd@f2,f
 13969  0494  0DC5               	rlf	___ftadd@f2+1,f
 13970  0495  0DC6               	rlf	___ftadd@f2+2,f
 13971  0496  0B89               	decfsz	9,f
 13972  0497  2C93               	goto	u4445
 13973  0498  3001               	movlw	1
 13974  0499  02CC               	subwf	___ftadd@exp2,f
 13975  049A  084C               	movf	___ftadd@exp2,w
 13976  049B  064D               	xorwf	___ftadd@exp1,w
 13977  049C  1903               	skipnz
 13978  049D  2CAF               	goto	l5808
 13979  049E  3001               	movlw	1
 13980  049F  02CB               	subwf	___ftadd@sign,f
 13981  04A0  084B               	movf	___ftadd@sign,w
 13982  04A1  3907               	andlw	7
 13983  04A2  1903               	btfsc	3,2
 13984  04A3  2CAF               	goto	l5808
 13985  04A4  2C92               	goto	l5800
 13986  04A5                     l5806:	
 13987  04A5  3001               	movlw	1
 13988  04A6                     u4475:	
 13989  04A6  36C3               	lsrf	___ftadd@f1+2,f
 13990  04A7  0CC2               	rrf	___ftadd@f1+1,f
 13991  04A8  0CC1               	rrf	___ftadd@f1,f
 13992  04A9  0B89               	decfsz	9,f
 13993  04AA  2CA6               	goto	u4475
 13994  04AB  3001               	movlw	1
 13995  04AC  00C7               	movwf	??___ftadd
 13996  04AD  0847               	movf	??___ftadd,w
 13997  04AE  07CD               	addwf	___ftadd@exp1,f
 13998  04AF                     l5808:	
 13999  04AF  084D               	movf	___ftadd@exp1,w
 14000  04B0  064C               	xorwf	___ftadd@exp2,w
 14001  04B1  1903               	btfsc	3,2
 14002  04B2  2CD9               	goto	l2929
 14003  04B3  2CA5               	goto	l5806
 14004  04B4                     l5810:	
 14005  04B4  084D               	movf	___ftadd@exp1,w
 14006  04B5  024C               	subwf	___ftadd@exp2,w
 14007  04B6  1803               	skipnc
 14008  04B7  2CD9               	goto	l2929
 14009  04B8                     l5812:	
 14010  04B8  3001               	movlw	1
 14011  04B9                     u4505:	
 14012  04B9  35C1               	lslf	___ftadd@f1,f
 14013  04BA  0DC2               	rlf	___ftadd@f1+1,f
 14014  04BB  0DC3               	rlf	___ftadd@f1+2,f
 14015  04BC  0B89               	decfsz	9,f
 14016  04BD  2CB9               	goto	u4505
 14017  04BE  3001               	movlw	1
 14018  04BF  02CD               	subwf	___ftadd@exp1,f
 14019  04C0  084C               	movf	___ftadd@exp2,w
 14020  04C1  064D               	xorwf	___ftadd@exp1,w
 14021  04C2  1903               	skipnz
 14022  04C3  2CD5               	goto	l5820
 14023  04C4  3001               	movlw	1
 14024  04C5  02CB               	subwf	___ftadd@sign,f
 14025  04C6  084B               	movf	___ftadd@sign,w
 14026  04C7  3907               	andlw	7
 14027  04C8  1903               	btfsc	3,2
 14028  04C9  2CD5               	goto	l5820
 14029  04CA  2CB8               	goto	l5812
 14030  04CB                     l5818:	
 14031  04CB  3001               	movlw	1
 14032  04CC                     u4535:	
 14033  04CC  36C6               	lsrf	___ftadd@f2+2,f
 14034  04CD  0CC5               	rrf	___ftadd@f2+1,f
 14035  04CE  0CC4               	rrf	___ftadd@f2,f
 14036  04CF  0B89               	decfsz	9,f
 14037  04D0  2CCC               	goto	u4535
 14038  04D1  3001               	movlw	1
 14039  04D2  00C7               	movwf	??___ftadd
 14040  04D3  0847               	movf	??___ftadd,w
 14041  04D4  07CC               	addwf	___ftadd@exp2,f
 14042  04D5                     l5820:	
 14043  04D5  084D               	movf	___ftadd@exp1,w
 14044  04D6  064C               	xorwf	___ftadd@exp2,w
 14045  04D7  1D03               	skipz
 14046  04D8  2CCB               	goto	l5818
 14047  04D9                     l2929:	
 14048  04D9  1FCB               	btfss	___ftadd@sign,7
 14049  04DA  2CEB               	goto	l5824
 14050  04DB  30FF               	movlw	255
 14051  04DC  06C1               	xorwf	___ftadd@f1,f
 14052  04DD  30FF               	movlw	255
 14053  04DE  06C2               	xorwf	___ftadd@f1+1,f
 14054  04DF  30FF               	movlw	255
 14055  04E0  06C3               	xorwf	___ftadd@f1+2,f
 14056  04E1  3001               	movlw	1
 14057  04E2  07C1               	addwf	___ftadd@f1,f
 14058  04E3  3000               	movlw	0
 14059  04E4  1803               	skipnc
 14060  04E5  3001               	movlw	1
 14061  04E6  07C2               	addwf	___ftadd@f1+1,f
 14062  04E7  3000               	movlw	0
 14063  04E8  1803               	skipnc
 14064  04E9  3001               	movlw	1
 14065  04EA  07C3               	addwf	___ftadd@f1+2,f
 14066  04EB                     l5824:	
 14067  04EB  1F4B               	btfss	___ftadd@sign,6
 14068  04EC  2CFD               	goto	l5828
 14069  04ED  30FF               	movlw	255
 14070  04EE  06C4               	xorwf	___ftadd@f2,f
 14071  04EF  30FF               	movlw	255
 14072  04F0  06C5               	xorwf	___ftadd@f2+1,f
 14073  04F1  30FF               	movlw	255
 14074  04F2  06C6               	xorwf	___ftadd@f2+2,f
 14075  04F3  3001               	movlw	1
 14076  04F4  07C4               	addwf	___ftadd@f2,f
 14077  04F5  3000               	movlw	0
 14078  04F6  1803               	skipnc
 14079  04F7  3001               	movlw	1
 14080  04F8  07C5               	addwf	___ftadd@f2+1,f
 14081  04F9  3000               	movlw	0
 14082  04FA  1803               	skipnc
 14083  04FB  3001               	movlw	1
 14084  04FC  07C6               	addwf	___ftadd@f2+2,f
 14085  04FD                     l5828:	
 14086  04FD  01CB               	clrf	___ftadd@sign
 14087  04FE  0841               	movf	___ftadd@f1,w
 14088  04FF  07C4               	addwf	___ftadd@f2,f
 14089  0500  0842               	movf	___ftadd@f1+1,w
 14090  0501  3DC5               	addwfc	___ftadd@f2+1,f
 14091  0502  0843               	movf	___ftadd@f1+2,w
 14092  0503  3DC6               	addwfc	___ftadd@f2+2,f
 14093  0504  1FC6               	btfss	___ftadd@f2+2,7
 14094  0505  2D18               	goto	l5838
 14095  0506  30FF               	movlw	255
 14096  0507  06C4               	xorwf	___ftadd@f2,f
 14097  0508  30FF               	movlw	255
 14098  0509  06C5               	xorwf	___ftadd@f2+1,f
 14099  050A  30FF               	movlw	255
 14100  050B  06C6               	xorwf	___ftadd@f2+2,f
 14101  050C  3001               	movlw	1
 14102  050D  07C4               	addwf	___ftadd@f2,f
 14103  050E  3000               	movlw	0
 14104  050F  1803               	skipnc
 14105  0510  3001               	movlw	1
 14106  0511  07C5               	addwf	___ftadd@f2+1,f
 14107  0512  3000               	movlw	0
 14108  0513  1803               	skipnc
 14109  0514  3001               	movlw	1
 14110  0515  07C6               	addwf	___ftadd@f2+2,f
 14111  0516  01CB               	clrf	___ftadd@sign
 14112  0517  0ACB               	incf	___ftadd@sign,f
 14113  0518                     l5838:	
 14114  0518  0844               	movf	___ftadd@f2,w
 14115  0519  00A0               	movwf	___ftpack@arg
 14116  051A  0845               	movf	___ftadd@f2+1,w
 14117  051B  00A1               	movwf	___ftpack@arg+1
 14118  051C  0846               	movf	___ftadd@f2+2,w
 14119  051D  00A2               	movwf	___ftpack@arg+2
 14120  051E  084D               	movf	___ftadd@exp1,w
 14121  051F  00C7               	movwf	??___ftadd
 14122  0520  0847               	movf	??___ftadd,w
 14123  0521  00A3               	movwf	___ftpack@exp
 14124  0522  084B               	movf	___ftadd@sign,w
 14125  0523  00C8               	movwf	??___ftadd+1
 14126  0524  0848               	movf	??___ftadd+1,w
 14127  0525  00A4               	movwf	___ftpack@sign
 14128  0526  3189  212A         	fcall	___ftpack
 14129  0528  0020               	movlb	0	; select bank0
 14130  0529  0820               	movf	?___ftpack,w
 14131  052A  00C1               	movwf	?___ftadd
 14132  052B  0821               	movf	?___ftpack+1,w
 14133  052C  00C2               	movwf	?___ftadd+1
 14134  052D  0822               	movf	?___ftpack+2,w
 14135  052E  00C3               	movwf	?___ftadd+2
 14136  052F  0008               	return
 14137  0530                     __end_of___ftadd:	
 14138                           
 14139                           	psect	text82
 14140  1F99                     __ptext82:	
 14141 ;; *************** function ___awtoft *****************
 14142 ;; Defined at:
 14143 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14144 ;; Parameters:    Size  Location     Type
 14145 ;;  c               2    8[BANK0 ] int 
 14146 ;; Auto vars:     Size  Location     Type
 14147 ;;  sign            1   13[BANK0 ] unsigned char 
 14148 ;; Return value:  Size  Location     Type
 14149 ;;                  3    8[BANK0 ] float 
 14150 ;; Registers used:
 14151 ;;		wreg, status,2, status,0, pclath, cstack
 14152 ;; Tracked objects:
 14153 ;;		On entry : 0/0
 14154 ;;		On exit  : 0/0
 14155 ;;		Unchanged: 0/0
 14156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14157 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14158 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14159 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14160 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14161 ;;Total ram usage:        6 bytes
 14162 ;; Hardware stack levels used:    1
 14163 ;; Hardware stack levels required when called:    6
 14164 ;; This function calls:
 14165 ;;		___ftpack
 14166 ;; This function is called by:
 14167 ;;		_getPercentValue
 14168 ;;		_setPercentValue
 14169 ;; This function uses a non-reentrant model
 14170 ;;
 14171                           
 14172                           
 14173                           ;psect for function ___awtoft
 14174  1F99                     ___awtoft:	
 14175                           
 14176                           ;incstack = 0
 14177                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14178  1F99  0020               	movlb	0	; select bank0
 14179  1F9A  01AD               	clrf	___awtoft@sign
 14180  1F9B  1FA9               	btfss	___awtoft@c+1,7
 14181  1F9C  2FA4               	goto	l5766
 14182  1F9D  09A8               	comf	___awtoft@c,f
 14183  1F9E  09A9               	comf	___awtoft@c+1,f
 14184  1F9F  0AA8               	incf	___awtoft@c,f
 14185  1FA0  1903               	skipnz
 14186  1FA1  0AA9               	incf	___awtoft@c+1,f
 14187  1FA2  01AD               	clrf	___awtoft@sign
 14188  1FA3  0AAD               	incf	___awtoft@sign,f
 14189  1FA4                     l5766:	
 14190  1FA4  0828               	movf	___awtoft@c,w
 14191  1FA5  00A0               	movwf	___ftpack@arg
 14192  1FA6  0829               	movf	___awtoft@c+1,w
 14193  1FA7  00A1               	movwf	___ftpack@arg+1
 14194  1FA8  01A2               	clrf	___ftpack@arg+2
 14195  1FA9  308E               	movlw	142
 14196  1FAA  00AB               	movwf	??___awtoft
 14197  1FAB  082B               	movf	??___awtoft,w
 14198  1FAC  00A3               	movwf	___ftpack@exp
 14199  1FAD  082D               	movf	___awtoft@sign,w
 14200  1FAE  00AC               	movwf	??___awtoft+1
 14201  1FAF  082C               	movf	??___awtoft+1,w
 14202  1FB0  00A4               	movwf	___ftpack@sign
 14203  1FB1  3189  212A         	fcall	___ftpack
 14204  1FB3  0020               	movlb	0	; select bank0
 14205  1FB4  0820               	movf	?___ftpack,w
 14206  1FB5  00A8               	movwf	?___awtoft
 14207  1FB6  0821               	movf	?___ftpack+1,w
 14208  1FB7  00A9               	movwf	?___awtoft+1
 14209  1FB8  0822               	movf	?___ftpack+2,w
 14210  1FB9  00AA               	movwf	?___awtoft+2
 14211  1FBA  0008               	return
 14212  1FBB                     __end_of___awtoft:	
 14213                           
 14214                           	psect	text83
 14215  092A                     __ptext83:	
 14216 ;; *************** function ___ftpack *****************
 14217 ;; Defined at:
 14218 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14219 ;; Parameters:    Size  Location     Type
 14220 ;;  arg             3    0[BANK0 ] unsigned um
 14221 ;;  exp             1    3[BANK0 ] unsigned char 
 14222 ;;  sign            1    4[BANK0 ] unsigned char 
 14223 ;; Auto vars:     Size  Location     Type
 14224 ;;		None
 14225 ;; Return value:  Size  Location     Type
 14226 ;;                  3    0[BANK0 ] float 
 14227 ;; Registers used:
 14228 ;;		wreg, status,2, status,0
 14229 ;; Tracked objects:
 14230 ;;		On entry : 0/0
 14231 ;;		On exit  : 0/0
 14232 ;;		Unchanged: 0/0
 14233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14234 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14236 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14237 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14238 ;;Total ram usage:        8 bytes
 14239 ;; Hardware stack levels used:    1
 14240 ;; Hardware stack levels required when called:    5
 14241 ;; This function calls:
 14242 ;;		Nothing
 14243 ;; This function is called by:
 14244 ;;		___awtoft
 14245 ;;		___ftadd
 14246 ;;		___ftdiv
 14247 ;;		___ftmul
 14248 ;; This function uses a non-reentrant model
 14249 ;;
 14250                           
 14251                           
 14252                           ;psect for function ___ftpack
 14253  092A                     ___ftpack:	
 14254                           
 14255                           ;incstack = 0
 14256                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14257  092A  0020               	movlb	0	; select bank0
 14258  092B  0823               	movf	___ftpack@exp,w
 14259  092C  1903               	btfsc	3,2
 14260  092D  2933               	goto	l5716
 14261  092E  0822               	movf	___ftpack@arg+2,w
 14262  092F  0421               	iorwf	___ftpack@arg+1,w
 14263  0930  0420               	iorwf	___ftpack@arg,w
 14264  0931  1D03               	skipz
 14265  0932  2944               	goto	l5722
 14266  0933                     l5716:	
 14267  0933  3000               	movlw	0
 14268  0934  00A0               	movwf	?___ftpack
 14269  0935  3000               	movlw	0
 14270  0936  00A1               	movwf	?___ftpack+1
 14271  0937  3000               	movlw	0
 14272  0938  00A2               	movwf	?___ftpack+2
 14273  0939  0008               	return
 14274  093A                     l5720:	
 14275  093A  3001               	movlw	1
 14276  093B  00A5               	movwf	??___ftpack
 14277  093C  0825               	movf	??___ftpack,w
 14278  093D  07A3               	addwf	___ftpack@exp,f
 14279  093E  3001               	movlw	1
 14280  093F                     u4235:	
 14281  093F  36A2               	lsrf	___ftpack@arg+2,f
 14282  0940  0CA1               	rrf	___ftpack@arg+1,f
 14283  0941  0CA0               	rrf	___ftpack@arg,f
 14284  0942  0B89               	decfsz	9,f
 14285  0943  293F               	goto	u4235
 14286  0944                     l5722:	
 14287  0944  30FE               	movlw	254
 14288  0945  0522               	andwf	___ftpack@arg+2,w
 14289  0946  1903               	btfsc	3,2
 14290  0947  295D               	goto	l2900
 14291  0948  293A               	goto	l5720
 14292  0949                     l5724:	
 14293  0949  3001               	movlw	1
 14294  094A  00A5               	movwf	??___ftpack
 14295  094B  0825               	movf	??___ftpack,w
 14296  094C  07A3               	addwf	___ftpack@exp,f
 14297  094D  3001               	movlw	1
 14298  094E  07A0               	addwf	___ftpack@arg,f
 14299  094F  3000               	movlw	0
 14300  0950  1803               	skipnc
 14301  0951  3001               	movlw	1
 14302  0952  07A1               	addwf	___ftpack@arg+1,f
 14303  0953  3000               	movlw	0
 14304  0954  1803               	skipnc
 14305  0955  3001               	movlw	1
 14306  0956  07A2               	addwf	___ftpack@arg+2,f
 14307  0957  3001               	movlw	1
 14308  0958                     u4255:	
 14309  0958  36A2               	lsrf	___ftpack@arg+2,f
 14310  0959  0CA1               	rrf	___ftpack@arg+1,f
 14311  095A  0CA0               	rrf	___ftpack@arg,f
 14312  095B  0B89               	decfsz	9,f
 14313  095C  2958               	goto	u4255
 14314  095D                     l2900:	
 14315  095D  30FF               	movlw	255
 14316  095E  0522               	andwf	___ftpack@arg+2,w
 14317  095F  1903               	btfsc	3,2
 14318  0960  296A               	goto	l5732
 14319  0961  2949               	goto	l5724
 14320  0962                     l5730:	
 14321  0962  3001               	movlw	1
 14322  0963  02A3               	subwf	___ftpack@exp,f
 14323  0964  3001               	movlw	1
 14324  0965                     u4275:	
 14325  0965  35A0               	lslf	___ftpack@arg,f
 14326  0966  0DA1               	rlf	___ftpack@arg+1,f
 14327  0967  0DA2               	rlf	___ftpack@arg+2,f
 14328  0968  0B89               	decfsz	9,f
 14329  0969  2965               	goto	u4275
 14330  096A                     l5732:	
 14331  096A  1FA1               	btfss	___ftpack@arg+1,7
 14332  096B  2962               	goto	l5730
 14333  096C  1823               	btfsc	___ftpack@exp,0
 14334  096D  2974               	goto	l2906
 14335  096E  30FF               	movlw	255
 14336  096F  05A0               	andwf	___ftpack@arg,f
 14337  0970  307F               	movlw	127
 14338  0971  05A1               	andwf	___ftpack@arg+1,f
 14339  0972  30FF               	movlw	255
 14340  0973  05A2               	andwf	___ftpack@arg+2,f
 14341  0974                     l2906:	
 14342  0974  1003               	clrc
 14343  0975  0CA3               	rrf	___ftpack@exp,f
 14344  0976  0823               	movf	___ftpack@exp,w
 14345  0977  00A5               	movwf	??___ftpack
 14346  0978  01A6               	clrf	??___ftpack+1
 14347  0979  01A7               	clrf	??___ftpack+2
 14348  097A  3010               	movlw	16
 14349  097B                     u4305:	
 14350  097B  35A5               	lslf	??___ftpack,f
 14351  097C  0DA6               	rlf	??___ftpack+1,f
 14352  097D  0DA7               	rlf	??___ftpack+2,f
 14353  097E  0B89               	decfsz	9,f
 14354  097F  297B               	goto	u4305
 14355  0980  0825               	movf	??___ftpack,w
 14356  0981  04A0               	iorwf	___ftpack@arg,f
 14357  0982  0826               	movf	??___ftpack+1,w
 14358  0983  04A1               	iorwf	___ftpack@arg+1,f
 14359  0984  0827               	movf	??___ftpack+2,w
 14360  0985  04A2               	iorwf	___ftpack@arg+2,f
 14361  0986  0824               	movf	___ftpack@sign,w
 14362  0987  1903               	btfsc	3,2
 14363  0988  0008               	return
 14364  0989  17A2               	bsf	___ftpack@arg+2,7
 14365  098A  0008               	return
 14366  098B                     __end_of___ftpack:	
 14367                           
 14368                           	psect	text84
 14369  159C                     __ptext84:	
 14370 ;; *************** function _setLED *****************
 14371 ;; Defined at:
 14372 ;;		line 76 in file "../src/LED_B1.c"
 14373 ;; Parameters:    Size  Location     Type
 14374 ;;  led             1    wreg     unsigned char 
 14375 ;;  command         1    2[BANK0 ] unsigned char 
 14376 ;; Auto vars:     Size  Location     Type
 14377 ;;  led             1    3[BANK0 ] unsigned char 
 14378 ;; Return value:  Size  Location     Type
 14379 ;;		None               void
 14380 ;; Registers used:
 14381 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14382 ;; Tracked objects:
 14383 ;;		On entry : 0/0
 14384 ;;		On exit  : 0/0
 14385 ;;		Unchanged: 0/0
 14386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14387 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14388 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14390 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14391 ;;Total ram usage:        2 bytes
 14392 ;; Hardware stack levels used:    1
 14393 ;; Hardware stack levels required when called:    6
 14394 ;; This function calls:
 14395 ;;		_LedPointSelect
 14396 ;; This function is called by:
 14397 ;;		_setDimmerLights
 14398 ;;		_setLED_Initialization
 14399 ;;		_setSw_Initialization
 14400 ;;		_setMain_Exception
 14401 ;; This function uses a non-reentrant model
 14402 ;;
 14403                           
 14404                           
 14405                           ;psect for function _setLED
 14406  159C                     _setLED:	
 14407                           
 14408                           ;incstack = 0
 14409                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14410                           ;setLED@led stored from wreg
 14411  159C  0020               	movlb	0	; select bank0
 14412  159D  00A3               	movwf	setLED@led
 14413                           
 14414                           ;LED_B1.c: 77: LedPointSelect(led);
 14415  159E  0823               	movf	setLED@led,w
 14416  159F  319E  2685  3195   	fcall	_LedPointSelect
 14417                           
 14418                           ;LED_B1.c: 78: if (command == 0) {
 14419  15A2  0020               	movlb	0	; select bank0
 14420  15A3  08A2               	movf	setLED@command,f
 14421  15A4  1D03               	skipz
 14422  15A5  2DB3               	goto	l6482
 14423                           
 14424                           ;LED_B1.c: 80: if (led == 1) {
 14425  15A6  0823               	movf	setLED@led,w
 14426  15A7  3A01               	xorlw	1
 14427  15A8  1D03               	skipz
 14428  15A9  2DAB               	goto	l6474
 14429                           
 14430                           ;LED_B1.c: 84: RA3 = 1;
 14431  15AA  158C               	bsf	12,3	;volatile
 14432  15AB                     l6474:	
 14433                           
 14434                           ;LED_B1.c: 86: }
 14435                           ;LED_B1.c: 89: if (led == 2) {
 14436  15AB  0823               	movf	setLED@led,w
 14437  15AC  3A02               	xorlw	2
 14438  15AD  1903               	btfsc	3,2
 14439                           
 14440                           ;LED_B1.c: 93: RC7 = 1;
 14441  15AE  178E               	bsf	14,7	;volatile
 14442                           
 14443                           ;LED_B1.c: 95: }
 14444                           ;LED_B1.c: 107: if (led == 99) {
 14445  15AF  0823               	movf	setLED@led,w
 14446  15B0  3A63               	xorlw	99
 14447  15B1  1903               	btfsc	3,2
 14448                           
 14449                           ;LED_B1.c: 111: RB5 = 1;
 14450  15B2  168D               	bsf	13,5	;volatile
 14451  15B3                     l6482:	
 14452                           
 14453                           ;LED_B1.c: 113: }
 14454                           ;LED_B1.c: 115: }
 14455                           ;LED_B1.c: 116: if (command == 1) {
 14456  15B3  0822               	movf	setLED@command,w
 14457  15B4  3A01               	xorlw	1
 14458  15B5  1D03               	skipz
 14459  15B6  2DC4               	goto	l6496
 14460                           
 14461                           ;LED_B1.c: 118: if (led == 1) {
 14462  15B7  0823               	movf	setLED@led,w
 14463  15B8  3A01               	xorlw	1
 14464  15B9  1D03               	skipz
 14465  15BA  2DBC               	goto	l6488
 14466                           
 14467                           ;LED_B1.c: 122: RA3 = 0;
 14468  15BB  118C               	bcf	12,3	;volatile
 14469  15BC                     l6488:	
 14470                           
 14471                           ;LED_B1.c: 124: }
 14472                           ;LED_B1.c: 127: if (led == 2) {
 14473  15BC  0823               	movf	setLED@led,w
 14474  15BD  3A02               	xorlw	2
 14475  15BE  1903               	btfsc	3,2
 14476                           
 14477                           ;LED_B1.c: 131: RC7 = 0;
 14478  15BF  138E               	bcf	14,7	;volatile
 14479                           
 14480                           ;LED_B1.c: 133: }
 14481                           ;LED_B1.c: 145: if (led == 99) {
 14482  15C0  0823               	movf	setLED@led,w
 14483  15C1  3A63               	xorlw	99
 14484  15C2  1903               	btfsc	3,2
 14485                           
 14486                           ;LED_B1.c: 149: RB5 = 0;
 14487  15C3  128D               	bcf	13,5	;volatile
 14488  15C4                     l6496:	
 14489                           
 14490                           ;LED_B1.c: 151: }
 14491                           ;LED_B1.c: 153: }
 14492                           ;LED_B1.c: 154: if (command == 10) {
 14493  15C4  0822               	movf	setLED@command,w
 14494  15C5  3A0A               	xorlw	10
 14495  15C6  1D03               	skipz
 14496  15C7  2DE2               	goto	l6512
 14497                           
 14498                           ;LED_B1.c: 155: LED->GO = 0;
 14499  15C8  087A               	movf	_LED,w
 14500  15C9  0086               	movwf	6
 14501  15CA  3001               	movlw	1	; select bank2/3
 14502  15CB  0087               	movwf	7
 14503  15CC  1081               	bcf	1,1
 14504                           
 14505                           ;LED_B1.c: 156: LED->Time = 0;
 14506  15CD  0A7A               	incf	_LED,w
 14507  15CE  0086               	movwf	6
 14508  15CF  3001               	movlw	1	; select bank2/3
 14509  15D0  0087               	movwf	7
 14510  15D1  3000               	movlw	0
 14511  15D2  3FC0               	movwi [0]fsr1
 14512  15D3  3FC1               	movwi [1]fsr1
 14513                           
 14514                           ;LED_B1.c: 158: if (led == 1) {
 14515  15D4  0823               	movf	setLED@led,w
 14516  15D5  3A01               	xorlw	1
 14517  15D6  1D03               	skipz
 14518  15D7  2DDA               	goto	l6504
 14519                           
 14520                           ;LED_B1.c: 162: RA3 = 1;
 14521  15D8  158C               	bsf	12,3	;volatile
 14522                           
 14523                           ;LED_B1.c: 164: }
 14524  15D9  2DDE               	goto	l6508
 14525  15DA                     l6504:	
 14526                           
 14527                           ;LED_B1.c: 167: else if (led == 2) {
 14528  15DA  0823               	movf	setLED@led,w
 14529  15DB  3A02               	xorlw	2
 14530  15DC  1903               	btfsc	3,2
 14531                           
 14532                           ;LED_B1.c: 171: RC7 = 1;
 14533  15DD  178E               	bsf	14,7	;volatile
 14534  15DE                     l6508:	
 14535                           
 14536                           ;LED_B1.c: 173: }
 14537                           ;LED_B1.c: 185: if (led == 99) {
 14538  15DE  0823               	movf	setLED@led,w
 14539  15DF  3A63               	xorlw	99
 14540  15E0  1903               	btfsc	3,2
 14541                           
 14542                           ;LED_B1.c: 189: RB5 = 1;
 14543  15E1  168D               	bsf	13,5	;volatile
 14544  15E2                     l6512:	
 14545                           
 14546                           ;LED_B1.c: 191: }
 14547                           ;LED_B1.c: 193: }
 14548                           ;LED_B1.c: 194: if (command == 11) {
 14549  15E2  0822               	movf	setLED@command,w
 14550  15E3  3A0B               	xorlw	11
 14551  15E4  1D03               	skipz
 14552  15E5  0008               	return
 14553                           
 14554                           ;LED_B1.c: 195: LED->GO = 1;
 14555  15E6  087A               	movf	_LED,w
 14556  15E7  0086               	movwf	6
 14557  15E8  3001               	movlw	1	; select bank2/3
 14558  15E9  0087               	movwf	7
 14559  15EA  1481               	bsf	1,1
 14560  15EB  0008               	return
 14561  15EC                     __end_of_setLED:	
 14562                           
 14563                           	psect	text85
 14564  1E85                     __ptext85:	
 14565 ;; *************** function _LedPointSelect *****************
 14566 ;; Defined at:
 14567 ;;		line 7 in file "../src/LED_B1.c"
 14568 ;; Parameters:    Size  Location     Type
 14569 ;;  led             1    wreg     unsigned char 
 14570 ;; Auto vars:     Size  Location     Type
 14571 ;;  led             1    1[BANK0 ] unsigned char 
 14572 ;; Return value:  Size  Location     Type
 14573 ;;		None               void
 14574 ;; Registers used:
 14575 ;;		wreg
 14576 ;; Tracked objects:
 14577 ;;		On entry : 0/0
 14578 ;;		On exit  : 0/0
 14579 ;;		Unchanged: 0/0
 14580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14582 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14583 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14584 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14585 ;;Total ram usage:        2 bytes
 14586 ;; Hardware stack levels used:    1
 14587 ;; Hardware stack levels required when called:    5
 14588 ;; This function calls:
 14589 ;;		Nothing
 14590 ;; This function is called by:
 14591 ;;		_setLED_Initialization
 14592 ;;		_setLED
 14593 ;;		_setLED_Main
 14594 ;; This function uses a non-reentrant model
 14595 ;;
 14596                           
 14597                           
 14598                           ;psect for function _LedPointSelect
 14599  1E85                     _LedPointSelect:	
 14600                           
 14601                           ;incstack = 0
 14602                           ; Regs used in _LedPointSelect: [wreg]
 14603                           ;LedPointSelect@led stored from wreg
 14604  1E85  0020               	movlb	0	; select bank0
 14605  1E86  00A1               	movwf	LedPointSelect@led
 14606                           
 14607                           ;LED_B1.c: 9: if (led == 1) {
 14608  1E87  0821               	movf	LedPointSelect@led,w
 14609  1E88  3A01               	xorlw	1
 14610  1E89  1D03               	skipz
 14611  1E8A  2E8F               	goto	l998
 14612                           
 14613                           ;LED_B1.c: 10: LED = &VarLED1;
 14614  1E8B  3061               	movlw	_VarLED1& (0+255)
 14615  1E8C  00A0               	movwf	??_LedPointSelect
 14616  1E8D  0820               	movf	??_LedPointSelect,w
 14617  1E8E  00FA               	movwf	_LED
 14618  1E8F                     l998:	
 14619                           
 14620                           ;LED_B1.c: 11: }
 14621                           ;LED_B1.c: 14: if (led == 2) {
 14622  1E8F  0821               	movf	LedPointSelect@led,w
 14623  1E90  3A02               	xorlw	2
 14624  1E91  1D03               	skipz
 14625  1E92  2E97               	goto	l999
 14626                           
 14627                           ;LED_B1.c: 15: LED = &VarLED2;
 14628  1E93  3065               	movlw	_VarLED2& (0+255)
 14629  1E94  00A0               	movwf	??_LedPointSelect
 14630  1E95  0820               	movf	??_LedPointSelect,w
 14631  1E96  00FA               	movwf	_LED
 14632  1E97                     l999:	
 14633                           
 14634                           ;LED_B1.c: 16: }
 14635                           ;LED_B1.c: 24: if (led == 99) {
 14636  1E97  0821               	movf	LedPointSelect@led,w
 14637  1E98  3A63               	xorlw	99
 14638  1E99  1D03               	skipz
 14639  1E9A  0008               	return
 14640                           
 14641                           ;LED_B1.c: 25: LED = &VarErrLED;
 14642  1E9B  305D               	movlw	_VarErrLED& (0+255)
 14643  1E9C  00A0               	movwf	??_LedPointSelect
 14644  1E9D  0820               	movf	??_LedPointSelect,w
 14645  1E9E  00FA               	movwf	_LED
 14646  1E9F  0008               	return
 14647  1EA0                     __end_of_LedPointSelect:	
 14648                           
 14649                           	psect	text86
 14650  1DCB                     __ptext86:	
 14651 ;; *************** function _setDimmerLights_Line *****************
 14652 ;; Defined at:
 14653 ;;		line 679 in file "../src/Dimmer_B1.c"
 14654 ;; Parameters:    Size  Location     Type
 14655 ;;  lights          1    wreg     unsigned char 
 14656 ;; Auto vars:     Size  Location     Type
 14657 ;;  lights          1    0[BANK0 ] unsigned char 
 14658 ;; Return value:  Size  Location     Type
 14659 ;;		None               void
 14660 ;; Registers used:
 14661 ;;		wreg
 14662 ;; Tracked objects:
 14663 ;;		On entry : 0/0
 14664 ;;		On exit  : 0/0
 14665 ;;		Unchanged: 0/0
 14666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14668 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14670 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14671 ;;Total ram usage:        1 bytes
 14672 ;; Hardware stack levels used:    1
 14673 ;; Hardware stack levels required when called:    5
 14674 ;; This function calls:
 14675 ;;		Nothing
 14676 ;; This function is called by:
 14677 ;;		_setDimmerLights
 14678 ;; This function uses a non-reentrant model
 14679 ;;
 14680                           
 14681                           
 14682                           ;psect for function _setDimmerLights_Line
 14683  1DCB                     _setDimmerLights_Line:	
 14684                           
 14685                           ;incstack = 0
 14686                           ; Regs used in _setDimmerLights_Line: [wreg]
 14687                           ;setDimmerLights_Line@lights stored from wreg
 14688  1DCB  0020               	movlb	0	; select bank0
 14689  1DCC  00A0               	movwf	setDimmerLights_Line@lights
 14690                           
 14691                           ;Dimmer_B1.c: 681: DimmerLights1.Line = 0;
 14692  1DCD  0023               	movlb	3	; select bank3
 14693  1DCE  1047               	bcf	(_DimmerLights1^(0+384)+9),0
 14694                           
 14695                           ;Dimmer_B1.c: 684: DimmerLights2.Line = 0;
 14696  1DCF  1056               	bcf	(_DimmerLights2^(0+384)+9),0
 14697                           
 14698                           ;Dimmer_B1.c: 690: if (lights == 1) {
 14699  1DD0  0020               	movlb	0	; select bank0
 14700  1DD1  0820               	movf	setDimmerLights_Line@lights,w
 14701  1DD2  3A01               	xorlw	1
 14702  1DD3  1D03               	skipz
 14703  1DD4  2DD8               	goto	l6522
 14704                           
 14705                           ;Dimmer_B1.c: 691: DimmerLights1.Line = 1;
 14706  1DD5  0023               	movlb	3	; select bank3
 14707  1DD6  1447               	bsf	(_DimmerLights1^(0+384)+9),0
 14708                           
 14709                           ;Dimmer_B1.c: 692: }
 14710  1DD7  0008               	return
 14711  1DD8                     l6522:	
 14712                           
 14713                           ;Dimmer_B1.c: 695: else if (lights == 2) {
 14714  1DD8  0020               	movlb	0	; select bank0
 14715  1DD9  0820               	movf	setDimmerLights_Line@lights,w
 14716  1DDA  3A02               	xorlw	2
 14717  1DDB  1D03               	skipz
 14718  1DDC  0008               	return
 14719                           
 14720                           ;Dimmer_B1.c: 696: DimmerLights2.Line = 1;
 14721  1DDD  0023               	movlb	3	; select bank3
 14722  1DDE  1456               	bsf	(_DimmerLights2^(0+384)+9),0
 14723  1DDF  0008               	return
 14724  1DE0                     __end_of_setDimmerLights_Line:	
 14725                           
 14726                           	psect	text87
 14727  11EF                     __ptext87:	
 14728 ;; *************** function _getMain_All_Error_Status *****************
 14729 ;; Defined at:
 14730 ;;		line 365 in file "../src/main_B1.c"
 14731 ;; Parameters:    Size  Location     Type
 14732 ;;  command         1    wreg     unsigned char 
 14733 ;; Auto vars:     Size  Location     Type
 14734 ;;  command         1    5[BANK0 ] unsigned char 
 14735 ;;  status          1    6[BANK0 ] unsigned char 
 14736 ;; Return value:  Size  Location     Type
 14737 ;;                  1    wreg      unsigned char 
 14738 ;; Registers used:
 14739 ;;		wreg, status,2, status,0
 14740 ;; Tracked objects:
 14741 ;;		On entry : 0/0
 14742 ;;		On exit  : 0/0
 14743 ;;		Unchanged: 0/0
 14744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14746 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14747 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14748 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14749 ;;Total ram usage:        7 bytes
 14750 ;; Hardware stack levels used:    1
 14751 ;; Hardware stack levels required when called:    5
 14752 ;; This function calls:
 14753 ;;		Nothing
 14754 ;; This function is called by:
 14755 ;;		_DimmerLights_Main
 14756 ;;		_setDimmerLights
 14757 ;;		_setDimmerLights_Adj
 14758 ;;		_Load_Main
 14759 ;;		_setTemp_Main
 14760 ;;		_setRF_Main
 14761 ;;		_getRxData
 14762 ;;		_Switch_Main
 14763 ;; This function uses a non-reentrant model
 14764 ;;
 14765                           
 14766                           
 14767                           ;psect for function _getMain_All_Error_Status
 14768  11EF                     _getMain_All_Error_Status:	
 14769                           
 14770                           ;incstack = 0
 14771                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 14772                           ;getMain_All_Error_Status@command stored from wreg
 14773  11EF  0020               	movlb	0	; select bank0
 14774  11F0  00A5               	movwf	getMain_All_Error_Status@command
 14775                           
 14776                           ;main_B1.c: 366: char status = 0;
 14777  11F1  01A6               	clrf	getMain_All_Error_Status@status
 14778                           
 14779                           ;main_B1.c: 377: if (status == 0 && command != 2) {
 14780  11F2  08A6               	movf	getMain_All_Error_Status@status,f
 14781  11F3  1D03               	skipz
 14782  11F4  2A09               	goto	l6454
 14783  11F5  0825               	movf	getMain_All_Error_Status@command,w
 14784  11F6  3A02               	xorlw	2
 14785  11F7  1903               	skipnz
 14786  11F8  2A09               	goto	l6454
 14787                           
 14788                           ;main_B1.c: 378: status = Temp.ERROR == 1 ? 2 : 0;
 14789  11F9  0021               	movlb	1	; select bank1
 14790  11FA  18D7               	btfsc	_Temp^(0+128),1
 14791  11FB  2A00               	goto	l6452
 14792  11FC  0020               	movlb	0	; select bank0
 14793  11FD  01A1               	clrf	_getMain_All_Error_Status$7075
 14794  11FE  01A2               	clrf	_getMain_All_Error_Status$7075+1
 14795  11FF  2A05               	goto	l2723
 14796  1200                     l6452:	
 14797  1200  3002               	movlw	2
 14798  1201  0020               	movlb	0	; select bank0
 14799  1202  00A1               	movwf	_getMain_All_Error_Status$7075
 14800  1203  3000               	movlw	0
 14801  1204  00A2               	movwf	_getMain_All_Error_Status$7075+1
 14802  1205                     l2723:	
 14803  1205  0821               	movf	_getMain_All_Error_Status$7075,w
 14804  1206  00A0               	movwf	??_getMain_All_Error_Status
 14805  1207  0820               	movf	??_getMain_All_Error_Status,w
 14806  1208  00A6               	movwf	getMain_All_Error_Status@status
 14807  1209                     l6454:	
 14808                           
 14809                           ;main_B1.c: 379: }
 14810                           ;main_B1.c: 384: if (status == 0 && command != 3) {
 14811  1209  08A6               	movf	getMain_All_Error_Status@status,f
 14812  120A  1D03               	skipz
 14813  120B  2A20               	goto	l2724
 14814  120C  0825               	movf	getMain_All_Error_Status@command,w
 14815  120D  3A03               	xorlw	3
 14816  120E  1903               	skipnz
 14817  120F  2A20               	goto	l2724
 14818                           
 14819                           ;main_B1.c: 385: status = Load.ERROR == 1 ? 3 : 0;
 14820  1210  0022               	movlb	2	; select bank2
 14821  1211  1AA6               	btfsc	_Load^(0+256),5
 14822  1212  2A17               	goto	l6462
 14823  1213  0020               	movlb	0	; select bank0
 14824  1214  01A3               	clrf	_getMain_All_Error_Status$7076
 14825  1215  01A4               	clrf	_getMain_All_Error_Status$7076+1
 14826  1216  2A1C               	goto	l2728
 14827  1217                     l6462:	
 14828  1217  3003               	movlw	3
 14829  1218  0020               	movlb	0	; select bank0
 14830  1219  00A3               	movwf	_getMain_All_Error_Status$7076
 14831  121A  3000               	movlw	0
 14832  121B  00A4               	movwf	_getMain_All_Error_Status$7076+1
 14833  121C                     l2728:	
 14834  121C  0823               	movf	_getMain_All_Error_Status$7076,w
 14835  121D  00A0               	movwf	??_getMain_All_Error_Status
 14836  121E  0820               	movf	??_getMain_All_Error_Status,w
 14837  121F  00A6               	movwf	getMain_All_Error_Status@status
 14838  1220                     l2724:	
 14839                           
 14840                           ;main_B1.c: 386: }
 14841                           ;main_B1.c: 402: return status;
 14842  1220  0826               	movf	getMain_All_Error_Status@status,w
 14843  1221  0008               	return
 14844  1222                     __end_of_getMain_All_Error_Status:	
 14845                           
 14846                           	psect	text88
 14847  1162                     __ptext88:	
 14848 ;; *************** function _getMain_LightsStatus *****************
 14849 ;; Defined at:
 14850 ;;		line 338 in file "../src/main_B1.c"
 14851 ;; Parameters:    Size  Location     Type
 14852 ;;		None
 14853 ;; Auto vars:     Size  Location     Type
 14854 ;;  i               2    6[BANK0 ] int 
 14855 ;;  status          1    8[BANK0 ] unsigned char 
 14856 ;;  count           1    5[BANK0 ] unsigned char 
 14857 ;; Return value:  Size  Location     Type
 14858 ;;                  1    wreg      unsigned char 
 14859 ;; Registers used:
 14860 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14861 ;; Tracked objects:
 14862 ;;		On entry : 0/0
 14863 ;;		On exit  : 0/0
 14864 ;;		Unchanged: 0/0
 14865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14867 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14868 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14869 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14870 ;;Total ram usage:        5 bytes
 14871 ;; Hardware stack levels used:    1
 14872 ;; Hardware stack levels required when called:    7
 14873 ;; This function calls:
 14874 ;;		_getDimmerLights_Status
 14875 ;; This function is called by:
 14876 ;;		_DimmerLights_Main
 14877 ;;		_Flash_Memory_Main
 14878 ;;		_Load_Main
 14879 ;;		_setMain_Exception
 14880 ;; This function uses a non-reentrant model
 14881 ;;
 14882                           
 14883                           
 14884                           ;psect for function _getMain_LightsStatus
 14885  1162                     _getMain_LightsStatus:	
 14886                           
 14887                           ;main_B1.c: 339: char status = 0;
 14888                           
 14889                           ;incstack = 0
 14890                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14891  1162  0020               	movlb	0	; select bank0
 14892  1163  01A8               	clrf	getMain_LightsStatus@status
 14893                           
 14894                           ;main_B1.c: 345: char count = 2;
 14895  1164  3002               	movlw	2
 14896  1165  00A4               	movwf	??_getMain_LightsStatus
 14897  1166  0824               	movf	??_getMain_LightsStatus,w
 14898  1167  00A5               	movwf	getMain_LightsStatus@count
 14899                           
 14900                           ;main_B1.c: 351: for (int i = 0; i < count; i++) {
 14901  1168  01A6               	clrf	getMain_LightsStatus@i
 14902  1169  01A7               	clrf	getMain_LightsStatus@i+1
 14903  116A                     l6758:	
 14904  116A  0827               	movf	getMain_LightsStatus@i+1,w
 14905  116B  3A80               	xorlw	128
 14906  116C  00A4               	movwf	??_getMain_LightsStatus
 14907  116D  3080               	movlw	128
 14908  116E  0224               	subwf	??_getMain_LightsStatus,w
 14909  116F  1D03               	skipz
 14910  1170  2973               	goto	u6015
 14911  1171  0825               	movf	getMain_LightsStatus@count,w
 14912  1172  0226               	subwf	getMain_LightsStatus@i,w
 14913  1173                     u6015:	
 14914  1173  1803               	btfsc	3,0
 14915  1174  298B               	goto	l6760
 14916                           
 14917                           ;main_B1.c: 352: if (status == 0) {
 14918  1175  0020               	movlb	0	; select bank0
 14919  1176  08A8               	movf	getMain_LightsStatus@status,f
 14920  1177  1D03               	skipz
 14921  1178  2986               	goto	l6756
 14922                           
 14923                           ;main_B1.c: 357: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 14924  1179  0826               	movf	getMain_LightsStatus@i,w
 14925  117A  3E01               	addlw	1
 14926  117B  319C  2459  3191   	fcall	_getDimmerLights_Status
 14927  117E  3A01               	xorlw	1
 14928  117F  3000               	movlw	0
 14929  1180  1903               	skipnz
 14930  1181  3001               	movlw	1
 14931  1182  0020               	movlb	0	; select bank0
 14932  1183  00A4               	movwf	??_getMain_LightsStatus
 14933  1184  0824               	movf	??_getMain_LightsStatus,w
 14934  1185  00A8               	movwf	getMain_LightsStatus@status
 14935  1186                     l6756:	
 14936  1186  3001               	movlw	1
 14937  1187  07A6               	addwf	getMain_LightsStatus@i,f
 14938  1188  3000               	movlw	0
 14939  1189  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 14940  118A  296A               	goto	l6758
 14941  118B                     l6760:	
 14942                           
 14943                           ;main_B1.c: 359: }
 14944                           ;main_B1.c: 360: }
 14945                           ;main_B1.c: 361: return status;
 14946  118B  0020               	movlb	0	; select bank0
 14947  118C  0828               	movf	getMain_LightsStatus@status,w
 14948  118D  0008               	return
 14949  118E                     __end_of_getMain_LightsStatus:	
 14950                           
 14951                           	psect	text89
 14952  1B9A                     __ptext89:	
 14953 ;; *************** function _getLoad_OK *****************
 14954 ;; Defined at:
 14955 ;;		line 218 in file "../src/OverLoad_B1.c"
 14956 ;; Parameters:    Size  Location     Type
 14957 ;;		None
 14958 ;; Auto vars:     Size  Location     Type
 14959 ;;  ok              1    0[BANK0 ] unsigned char 
 14960 ;; Return value:  Size  Location     Type
 14961 ;;                  1    wreg      unsigned char 
 14962 ;; Registers used:
 14963 ;;		wreg, status,2
 14964 ;; Tracked objects:
 14965 ;;		On entry : 0/0
 14966 ;;		On exit  : 0/0
 14967 ;;		Unchanged: 0/0
 14968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14972 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14973 ;;Total ram usage:        1 bytes
 14974 ;; Hardware stack levels used:    1
 14975 ;; Hardware stack levels required when called:    5
 14976 ;; This function calls:
 14977 ;;		Nothing
 14978 ;; This function is called by:
 14979 ;;		_DimmerLights_Main
 14980 ;; This function uses a non-reentrant model
 14981 ;;
 14982                           
 14983                           
 14984                           ;psect for function _getLoad_OK
 14985  1B9A                     _getLoad_OK:	
 14986                           
 14987                           ;OverLoad_B1.c: 219: char ok = Load.OK == 1 ? 1 : 0;
 14988                           
 14989                           ;incstack = 0
 14990                           ; Regs used in _getLoad_OK: [wreg+status,2]
 14991  1B9A  3000               	movlw	0
 14992  1B9B  0022               	movlb	2	; select bank2
 14993  1B9C  1BA6               	btfsc	_Load^(0+256),7
 14994  1B9D  3001               	movlw	1
 14995  1B9E  0020               	movlb	0	; select bank0
 14996  1B9F  00A0               	movwf	getLoad_OK@ok
 14997                           
 14998                           ;OverLoad_B1.c: 220: return ok;
 14999  1BA0  0820               	movf	getLoad_OK@ok,w
 15000  1BA1  0008               	return
 15001  1BA2                     __end_of_getLoad_OK:	
 15002                           
 15003                           	psect	text90
 15004  1E0B                     __ptext90:	
 15005 ;; *************** function _DimmerLights_Initialization *****************
 15006 ;; Defined at:
 15007 ;;		line 341 in file "../src/Dimmer_B1.c"
 15008 ;; Parameters:    Size  Location     Type
 15009 ;;		None
 15010 ;; Auto vars:     Size  Location     Type
 15011 ;;		None
 15012 ;; Return value:  Size  Location     Type
 15013 ;;		None               void
 15014 ;; Registers used:
 15015 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15016 ;; Tracked objects:
 15017 ;;		On entry : 0/0
 15018 ;;		On exit  : 0/0
 15019 ;;		Unchanged: 0/0
 15020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15023 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15024 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15025 ;;Total ram usage:        1 bytes
 15026 ;; Hardware stack levels used:    1
 15027 ;; Hardware stack levels required when called:    7
 15028 ;; This function calls:
 15029 ;;		_Dimmer_Initialization
 15030 ;;		_setDimmerLights_Initialization
 15031 ;; This function is called by:
 15032 ;;		_main
 15033 ;; This function uses a non-reentrant model
 15034 ;;
 15035                           
 15036                           
 15037                           ;psect for function _DimmerLights_Initialization
 15038  1E0B                     _DimmerLights_Initialization:	
 15039                           
 15040                           ;Dimmer_B1.c: 343: DimmerLights11 = &DimmerLights1;
 15041                           
 15042                           ;incstack = 0
 15043                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15044  1E0B  30BE               	movlw	_DimmerLights1& (0+255)
 15045  1E0C  0020               	movlb	0	; select bank0
 15046  1E0D  00A4               	movwf	??_DimmerLights_Initialization
 15047  1E0E  0824               	movf	??_DimmerLights_Initialization,w
 15048  1E0F  0021               	movlb	1	; select bank1
 15049  1E10  00CD               	movwf	_DimmerLights11^(0+128)
 15050                           
 15051                           ;Dimmer_B1.c: 344: setDimmerLights_Initialization(1);
 15052  1E11  3001               	movlw	1
 15053  1E12  3190  20BE  319E   	fcall	_setDimmerLights_Initialization
 15054                           
 15055                           ;Dimmer_B1.c: 348: DimmerLights22 = &DimmerLights2;
 15056  1E15  30CD               	movlw	_DimmerLights2& (0+255)
 15057  1E16  0020               	movlb	0	; select bank0
 15058  1E17  00A4               	movwf	??_DimmerLights_Initialization
 15059  1E18  0824               	movf	??_DimmerLights_Initialization,w
 15060  1E19  0021               	movlb	1	; select bank1
 15061  1E1A  00CE               	movwf	_DimmerLights22^(0+128)
 15062                           
 15063                           ;Dimmer_B1.c: 349: setDimmerLights_Initialization(2);
 15064  1E1B  3002               	movlw	2
 15065  1E1C  3190  20BE  319E   	fcall	_setDimmerLights_Initialization
 15066                           
 15067                           ;Dimmer_B1.c: 358: Dimmer_Initialization();
 15068  1E1F  319B  2342         	fcall	_Dimmer_Initialization
 15069  1E21  0008               	return
 15070  1E22                     __end_of_DimmerLights_Initialization:	
 15071                           
 15072                           	psect	text91
 15073  10BE                     __ptext91:	
 15074 ;; *************** function _setDimmerLights_Initialization *****************
 15075 ;; Defined at:
 15076 ;;		line 364 in file "../src/Dimmer_B1.c"
 15077 ;; Parameters:    Size  Location     Type
 15078 ;;  lights          1    wreg     unsigned char 
 15079 ;; Auto vars:     Size  Location     Type
 15080 ;;  lights          1    3[BANK0 ] unsigned char 
 15081 ;; Return value:  Size  Location     Type
 15082 ;;		None               void
 15083 ;; Registers used:
 15084 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15085 ;; Tracked objects:
 15086 ;;		On entry : 0/0
 15087 ;;		On exit  : 0/0
 15088 ;;		Unchanged: 0/0
 15089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15091 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15092 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15093 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15094 ;;Total ram usage:        2 bytes
 15095 ;; Hardware stack levels used:    1
 15096 ;; Hardware stack levels required when called:    6
 15097 ;; This function calls:
 15098 ;;		_DimmerLightsPointSelect
 15099 ;; This function is called by:
 15100 ;;		_DimmerLights_Initialization
 15101 ;; This function uses a non-reentrant model
 15102 ;;
 15103                           
 15104                           
 15105                           ;psect for function _setDimmerLights_Initialization
 15106  10BE                     _setDimmerLights_Initialization:	
 15107                           
 15108                           ;incstack = 0
 15109                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15110                           ;setDimmerLights_Initialization@lights stored from wreg
 15111  10BE  0020               	movlb	0	; select bank0
 15112  10BF  00A3               	movwf	setDimmerLights_Initialization@lights
 15113                           
 15114                           ;Dimmer_B1.c: 366: DimmerLightsPointSelect(lights);
 15115  10C0  0823               	movf	setDimmerLights_Initialization@lights,w
 15116  10C1  319D  2505         	fcall	_DimmerLightsPointSelect
 15117                           
 15118                           ;Dimmer_B1.c: 372: DimmerLights->MaxmumValue = ((char)(80*0.8));
 15119  10C3  3040               	movlw	64
 15120  10C4  0020               	movlb	0	; select bank0
 15121  10C5  00A2               	movwf	??_setDimmerLights_Initialization
 15122  10C6  086F               	movf	_DimmerLights,w
 15123  10C7  3E05               	addlw	5
 15124  10C8  0086               	movwf	6
 15125  10C9  3001               	movlw	1	; select bank2/3
 15126  10CA  0087               	movwf	7
 15127  10CB  0822               	movf	??_setDimmerLights_Initialization,w
 15128  10CC  0081               	movwf	1
 15129                           
 15130                           ;Dimmer_B1.c: 373: DimmerLights->MinimumValue = ((char)(15*0.8));
 15131  10CD  300C               	movlw	12
 15132  10CE  00A2               	movwf	??_setDimmerLights_Initialization
 15133  10CF  086F               	movf	_DimmerLights,w
 15134  10D0  3E06               	addlw	6
 15135  10D1  0086               	movwf	6
 15136  10D2  3001               	movlw	1	; select bank2/3
 15137  10D3  0087               	movwf	7
 15138  10D4  0822               	movf	??_setDimmerLights_Initialization,w
 15139  10D5  0081               	movwf	1
 15140                           
 15141                           ;Dimmer_B1.c: 387: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15142  10D6  086F               	movf	_DimmerLights,w
 15143  10D7  3E05               	addlw	5
 15144  10D8  0086               	movwf	6
 15145  10D9  3001               	movlw	1	; select bank2/3
 15146  10DA  0087               	movwf	7
 15147  10DB  0801               	movf	1,w
 15148  10DC  00A2               	movwf	??_setDimmerLights_Initialization
 15149  10DD  086F               	movf	_DimmerLights,w
 15150  10DE  3E04               	addlw	4
 15151  10DF  0086               	movwf	6
 15152  10E0  3001               	movlw	1	; select bank2/3
 15153  10E1  0087               	movwf	7
 15154  10E2  0822               	movf	??_setDimmerLights_Initialization,w
 15155  10E3  0081               	movwf	1
 15156  10E4  0008               	return
 15157  10E5                     __end_of_setDimmerLights_Initialization:	
 15158                           
 15159                           	psect	text92
 15160  1B42                     __ptext92:	
 15161 ;; *************** function _Dimmer_Initialization *****************
 15162 ;; Defined at:
 15163 ;;		line 904 in file "../src/Dimmer_B1.c"
 15164 ;; Parameters:    Size  Location     Type
 15165 ;;		None
 15166 ;; Auto vars:     Size  Location     Type
 15167 ;;		None
 15168 ;; Return value:  Size  Location     Type
 15169 ;;		None               void
 15170 ;; Registers used:
 15171 ;;		None
 15172 ;; Tracked objects:
 15173 ;;		On entry : 0/0
 15174 ;;		On exit  : 0/0
 15175 ;;		Unchanged: 0/0
 15176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15181 ;;Total ram usage:        0 bytes
 15182 ;; Hardware stack levels used:    1
 15183 ;; Hardware stack levels required when called:    5
 15184 ;; This function calls:
 15185 ;;		Nothing
 15186 ;; This function is called by:
 15187 ;;		_DimmerLights_Initialization
 15188 ;; This function uses a non-reentrant model
 15189 ;;
 15190                           
 15191                           
 15192                           ;psect for function _Dimmer_Initialization
 15193  1B42                     _Dimmer_Initialization:	
 15194                           
 15195                           ;incstack = 0
 15196                           ; Regs used in _Dimmer_Initialization: []
 15197  1B42  0008               	return
 15198  1B43                     __end_of_Dimmer_Initialization:	
 15199                           
 15200                           	psect	text93
 15201  1B92                     __ptext93:	
 15202 ;; *************** function _DelayOff_Main *****************
 15203 ;; Defined at:
 15204 ;;		line 41 in file "../src/DelayOff_B1.c"
 15205 ;; Parameters:    Size  Location     Type
 15206 ;;		None
 15207 ;; Auto vars:     Size  Location     Type
 15208 ;;		None
 15209 ;; Return value:  Size  Location     Type
 15210 ;;		None               void
 15211 ;; Registers used:
 15212 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15213 ;; Tracked objects:
 15214 ;;		On entry : 0/0
 15215 ;;		On exit  : 0/0
 15216 ;;		Unchanged: 0/0
 15217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15222 ;;Total ram usage:        0 bytes
 15223 ;; Hardware stack levels used:    1
 15224 ;; Hardware stack levels required when called:   11
 15225 ;; This function calls:
 15226 ;;		_DlyOff_Main
 15227 ;; This function is called by:
 15228 ;;		_main
 15229 ;; This function uses a non-reentrant model
 15230 ;;
 15231                           
 15232                           
 15233                           ;psect for function _DelayOff_Main
 15234  1B92                     _DelayOff_Main:	
 15235                           
 15236                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15237                           
 15238                           ;incstack = 0
 15239                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15240  1B92  3001               	movlw	1
 15241  1B93  3188  20CD  319B   	fcall	_DlyOff_Main
 15242                           
 15243                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 15244  1B96  3002               	movlw	2
 15245  1B97  3188  20CD         	fcall	_DlyOff_Main
 15246  1B99  0008               	return
 15247  1B9A                     __end_of_DelayOff_Main:	
 15248                           
 15249                           	psect	text94
 15250  08CD                     __ptext94:	
 15251 ;; *************** function _DlyOff_Main *****************
 15252 ;; Defined at:
 15253 ;;		line 61 in file "../src/DelayOff_B1.c"
 15254 ;; Parameters:    Size  Location     Type
 15255 ;;  sw              1    wreg     unsigned char 
 15256 ;; Auto vars:     Size  Location     Type
 15257 ;;  sw              1   24[BANK0 ] unsigned char 
 15258 ;; Return value:  Size  Location     Type
 15259 ;;		None               void
 15260 ;; Registers used:
 15261 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15262 ;; Tracked objects:
 15263 ;;		On entry : 0/0
 15264 ;;		On exit  : 0/0
 15265 ;;		Unchanged: 0/0
 15266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15269 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15270 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15271 ;;Total ram usage:        3 bytes
 15272 ;; Hardware stack levels used:    1
 15273 ;; Hardware stack levels required when called:   10
 15274 ;; This function calls:
 15275 ;;		_DelayOffPointSelect
 15276 ;;		_setBuz
 15277 ;;		_setDimmerLights_ErrorClose
 15278 ;; This function is called by:
 15279 ;;		_DelayOff_Main
 15280 ;; This function uses a non-reentrant model
 15281 ;;
 15282                           
 15283                           
 15284                           ;psect for function _DlyOff_Main
 15285  08CD                     _DlyOff_Main:	
 15286                           
 15287                           ;incstack = 0
 15288                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15289                           ;DlyOff_Main@sw stored from wreg
 15290  08CD  0020               	movlb	0	; select bank0
 15291  08CE  00B8               	movwf	DlyOff_Main@sw
 15292                           
 15293                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15294  08CF  0838               	movf	DlyOff_Main@sw,w
 15295  08D0  319D  2579  3188   	fcall	_DelayOffPointSelect
 15296                           
 15297                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15298  08D3  0878               	movf	_DelayOff,w
 15299  08D4  0086               	movwf	6
 15300  08D5  3001               	movlw	1	; select bank2/3
 15301  08D6  0087               	movwf	7
 15302  08D7  1C81               	btfss	1,1
 15303  08D8  0008               	return
 15304                           
 15305                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15306  08D9  0878               	movf	_DelayOff,w
 15307  08DA  3E02               	addlw	2
 15308  08DB  0086               	movwf	6
 15309  08DC  3001               	movlw	1	; select bank2/3
 15310  08DD  0087               	movwf	7
 15311  08DE  3001               	movlw	1
 15312  08DF  0781               	addwf	1,f
 15313  08E0  3141               	addfsr 1,1
 15314  08E1  1803               	skipnc
 15315  08E2  0A81               	incf	1,f
 15316                           
 15317                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15318  08E3  0878               	movf	_DelayOff,w
 15319  08E4  3E02               	addlw	2
 15320  08E5  0086               	movwf	6
 15321  08E6  3001               	movlw	1	; select bank2/3
 15322  08E7  0087               	movwf	7
 15323  08E8  3F40               	moviw [0]fsr1
 15324  08E9  0020               	movlb	0	; select bank0
 15325  08EA  00B6               	movwf	??_DlyOff_Main
 15326  08EB  3F41               	moviw [1]fsr1
 15327  08EC  00B7               	movwf	??_DlyOff_Main+1
 15328  08ED  3017               	movlw	23
 15329  08EE  0237               	subwf	??_DlyOff_Main+1,w
 15330  08EF  3070               	movlw	112
 15331  08F0  1903               	skipnz
 15332  08F1  0236               	subwf	??_DlyOff_Main,w
 15333  08F2  1C03               	skipc
 15334  08F3  0008               	return
 15335                           
 15336                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15337  08F4  0878               	movf	_DelayOff,w
 15338  08F5  3E02               	addlw	2
 15339  08F6  0086               	movwf	6
 15340  08F7  3001               	movlw	1	; select bank2/3
 15341  08F8  0087               	movwf	7
 15342  08F9  3000               	movlw	0
 15343  08FA  3FC0               	movwi [0]fsr1
 15344  08FB  3FC1               	movwi [1]fsr1
 15345                           
 15346                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15347  08FC  3001               	movlw	1
 15348  08FD  00B6               	movwf	??_DlyOff_Main
 15349  08FE  0878               	movf	_DelayOff,w
 15350  08FF  3E04               	addlw	4
 15351  0900  0086               	movwf	6
 15352  0901  3001               	movlw	1	; select bank2/3
 15353  0902  0087               	movwf	7
 15354  0903  0836               	movf	??_DlyOff_Main,w
 15355  0904  0781               	addwf	1,f
 15356                           
 15357                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15358  0905  0878               	movf	_DelayOff,w
 15359  0906  3E04               	addlw	4
 15360  0907  0086               	movwf	6
 15361  0908  3001               	movlw	1	; select bank2/3
 15362  0909  0087               	movwf	7
 15363  090A  0A78               	incf	_DelayOff,w
 15364  090B  0084               	movwf	4
 15365  090C  3001               	movlw	1	; select bank2/3
 15366  090D  0085               	movwf	5
 15367  090E  0800               	movf	0,w
 15368  090F  0201               	subwf	1,w
 15369  0910  1C03               	skipc
 15370  0911  0008               	return
 15371                           
 15372                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15373  0912  0878               	movf	_DelayOff,w
 15374  0913  3E04               	addlw	4
 15375  0914  0086               	movwf	6
 15376  0915  3001               	movlw	1	; select bank2/3
 15377  0916  0087               	movwf	7
 15378  0917  0181               	clrf	1
 15379                           
 15380                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15381  0918  0878               	movf	_DelayOff,w
 15382  0919  0086               	movwf	6
 15383  091A  3001               	movlw	1	; select bank2/3
 15384  091B  0087               	movwf	7
 15385  091C  1081               	bcf	1,1
 15386                           
 15387                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15388  091D  3064               	movlw	100
 15389  091E  00A9               	movwf	setBuz@time
 15390  091F  3000               	movlw	0
 15391  0920  00AA               	movwf	setBuz@time+1
 15392  0921  3001               	movlw	1
 15393  0922  3196  2698  3188   	fcall	_setBuz
 15394                           
 15395                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15396  0925  0020               	movlb	0	; select bank0
 15397  0926  0838               	movf	DlyOff_Main@sw,w
 15398  0927  3197  274A         	fcall	_setDimmerLights_ErrorClose
 15399  0929  0008               	return
 15400  092A                     __end_of_DlyOff_Main:	
 15401                           
 15402                           	psect	text95
 15403  174A                     __ptext95:	
 15404 ;; *************** function _setDimmerLights_ErrorClose *****************
 15405 ;; Defined at:
 15406 ;;		line 574 in file "../src/Dimmer_B1.c"
 15407 ;; Parameters:    Size  Location     Type
 15408 ;;  lights          1    wreg     unsigned char 
 15409 ;; Auto vars:     Size  Location     Type
 15410 ;;  lights          1   19[BANK0 ] unsigned char 
 15411 ;;  i               2   20[BANK0 ] int 
 15412 ;;  count           1   18[BANK0 ] unsigned char 
 15413 ;; Return value:  Size  Location     Type
 15414 ;;		None               void
 15415 ;; Registers used:
 15416 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15417 ;; Tracked objects:
 15418 ;;		On entry : 0/0
 15419 ;;		On exit  : 0/0
 15420 ;;		Unchanged: 0/0
 15421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15423 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15424 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15425 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15426 ;;Total ram usage:        5 bytes
 15427 ;; Hardware stack levels used:    1
 15428 ;; Hardware stack levels required when called:    9
 15429 ;; This function calls:
 15430 ;;		_DimmerLightsPointSelect
 15431 ;;		_getDimmerLights_Status
 15432 ;;		_setDimmerLights_SwOff
 15433 ;; This function is called by:
 15434 ;;		_DlyOff_Main
 15435 ;;		_setControl_Lights_Table
 15436 ;;		_setMain_Exception
 15437 ;; This function uses a non-reentrant model
 15438 ;;
 15439                           
 15440                           
 15441                           ;psect for function _setDimmerLights_ErrorClose
 15442  174A                     _setDimmerLights_ErrorClose:	
 15443                           
 15444                           ;incstack = 0
 15445                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15446                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15447  174A  0020               	movlb	0	; select bank0
 15448  174B  00B3               	movwf	setDimmerLights_ErrorClose@lights
 15449                           
 15450                           ;Dimmer_B1.c: 575: if (lights == 255) {
 15451  174C  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15452  174D  3AFF               	xorlw	255
 15453  174E  1D03               	skipz
 15454  174F  2F87               	goto	l6346
 15455                           
 15456                           ;Dimmer_B1.c: 580: char count = 2;
 15457  1750  3002               	movlw	2
 15458  1751  00B1               	movwf	??_setDimmerLights_ErrorClose
 15459  1752  0831               	movf	??_setDimmerLights_ErrorClose,w
 15460  1753  00B2               	movwf	setDimmerLights_ErrorClose@count
 15461                           
 15462                           ;Dimmer_B1.c: 585: for (int i = 0; i < count; i++) {
 15463  1754  01B4               	clrf	setDimmerLights_ErrorClose@i
 15464  1755  01B5               	clrf	setDimmerLights_ErrorClose@i+1
 15465  1756                     l6344:	
 15466  1756  0835               	movf	setDimmerLights_ErrorClose@i+1,w
 15467  1757  3A80               	xorlw	128
 15468  1758  00B1               	movwf	??_setDimmerLights_ErrorClose
 15469  1759  3080               	movlw	128
 15470  175A  0231               	subwf	??_setDimmerLights_ErrorClose,w
 15471  175B  1D03               	skipz
 15472  175C  2F5F               	goto	u5345
 15473  175D  0832               	movf	setDimmerLights_ErrorClose@count,w
 15474  175E  0234               	subwf	setDimmerLights_ErrorClose@i,w
 15475  175F                     u5345:	
 15476  175F  1803               	btfsc	3,0
 15477  1760  0008               	return
 15478                           
 15479                           ;Dimmer_B1.c: 586: DimmerLightsPointSelect(i + 1);
 15480  1761  0020               	movlb	0	; select bank0
 15481  1762  0834               	movf	setDimmerLights_ErrorClose@i,w
 15482  1763  3E01               	addlw	1
 15483  1764  319D  2505  3197   	fcall	_DimmerLightsPointSelect
 15484                           
 15485                           ;Dimmer_B1.c: 587: if (getDimmerLights_Status(i + 1) == 1) {
 15486  1767  0020               	movlb	0	; select bank0
 15487  1768  0834               	movf	setDimmerLights_ErrorClose@i,w
 15488  1769  3E01               	addlw	1
 15489  176A  319C  2459  3197   	fcall	_getDimmerLights_Status
 15490  176D  3A01               	xorlw	1
 15491  176E  1D03               	skipz
 15492  176F  2F81               	goto	l6342
 15493                           
 15494                           ;Dimmer_B1.c: 588: DimmerLights->SwFlag = 1;
 15495  1770  0020               	movlb	0	; select bank0
 15496  1771  086F               	movf	_DimmerLights,w
 15497  1772  3E09               	addlw	9
 15498  1773  0086               	movwf	6
 15499  1774  3001               	movlw	1	; select bank2/3
 15500  1775  0087               	movwf	7
 15501  1776  1701               	bsf	1,6
 15502                           
 15503                           ;Dimmer_B1.c: 589: DimmerLights->Status = 0;
 15504  1777  086F               	movf	_DimmerLights,w
 15505  1778  0086               	movwf	6
 15506  1779  3001               	movlw	1	; select bank2/3
 15507  177A  0087               	movwf	7
 15508  177B  1281               	bcf	1,5
 15509                           
 15510                           ;Dimmer_B1.c: 590: setDimmerLights_SwOff(i + 1);
 15511  177C  0834               	movf	setDimmerLights_ErrorClose@i,w
 15512  177D  3E01               	addlw	1
 15513  177E  3194  2420  3197   	fcall	_setDimmerLights_SwOff
 15514  1781                     l6342:	
 15515  1781  3001               	movlw	1
 15516  1782  0020               	movlb	0	; select bank0
 15517  1783  07B4               	addwf	setDimmerLights_ErrorClose@i,f
 15518  1784  3000               	movlw	0
 15519  1785  3DB5               	addwfc	setDimmerLights_ErrorClose@i+1,f
 15520  1786  2F56               	goto	l6344
 15521  1787                     l6346:	
 15522                           ;Dimmer_B1.c: 591: }
 15523                           ;Dimmer_B1.c: 592: }
 15524                           ;Dimmer_B1.c: 593: } else {
 15525                           
 15526                           
 15527                           ;Dimmer_B1.c: 594: DimmerLightsPointSelect(lights);
 15528  1787  0020               	movlb	0	; select bank0
 15529  1788  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15530  1789  319D  2505  3197   	fcall	_DimmerLightsPointSelect
 15531                           
 15532                           ;Dimmer_B1.c: 595: if (getDimmerLights_Status(lights) == 1) {
 15533  178C  0020               	movlb	0	; select bank0
 15534  178D  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15535  178E  319C  2459  3197   	fcall	_getDimmerLights_Status
 15536  1791  3A01               	xorlw	1
 15537  1792  1D03               	skipz
 15538  1793  0008               	return
 15539                           
 15540                           ;Dimmer_B1.c: 596: DimmerLights->SwFlag = 1;
 15541  1794  0020               	movlb	0	; select bank0
 15542  1795  086F               	movf	_DimmerLights,w
 15543  1796  3E09               	addlw	9
 15544  1797  0086               	movwf	6
 15545  1798  3001               	movlw	1	; select bank2/3
 15546  1799  0087               	movwf	7
 15547  179A  1701               	bsf	1,6
 15548                           
 15549                           ;Dimmer_B1.c: 597: DimmerLights->Status = 0;
 15550  179B  086F               	movf	_DimmerLights,w
 15551  179C  0086               	movwf	6
 15552  179D  3001               	movlw	1	; select bank2/3
 15553  179E  0087               	movwf	7
 15554  179F  1281               	bcf	1,5
 15555                           
 15556                           ;Dimmer_B1.c: 598: setDimmerLights_SwOff(lights);
 15557  17A0  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15558  17A1  3194  2420         	fcall	_setDimmerLights_SwOff
 15559  17A3  0008               	return
 15560  17A4                     __end_of_setDimmerLights_ErrorClose:	
 15561                           
 15562                           	psect	text96
 15563  1420                     __ptext96:	
 15564 ;; *************** function _setDimmerLights_SwOff *****************
 15565 ;; Defined at:
 15566 ;;		line 536 in file "../src/Dimmer_B1.c"
 15567 ;; Parameters:    Size  Location     Type
 15568 ;;  sw              1    wreg     unsigned char 
 15569 ;; Auto vars:     Size  Location     Type
 15570 ;;  sw              1   16[BANK0 ] unsigned char 
 15571 ;;  command         1   15[BANK0 ] unsigned char 
 15572 ;; Return value:  Size  Location     Type
 15573 ;;		None               void
 15574 ;; Registers used:
 15575 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15576 ;; Tracked objects:
 15577 ;;		On entry : 0/0
 15578 ;;		On exit  : 0/0
 15579 ;;		Unchanged: 0/0
 15580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15582 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15584 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15585 ;;Total ram usage:        2 bytes
 15586 ;; Hardware stack levels used:    1
 15587 ;; Hardware stack levels required when called:    8
 15588 ;; This function calls:
 15589 ;;		_DimmerLightsPointSelect
 15590 ;;		_getDelayOff_GO
 15591 ;;		_setDelayOff_GO
 15592 ;;		_setDimmerLights_Trigger
 15593 ;;		_setDimmerLights_TriggerAdj
 15594 ;; This function is called by:
 15595 ;;		_setDimmerLights_ErrorClose
 15596 ;;		_setRFSW_Control
 15597 ;;		_setSw_Main
 15598 ;; This function uses a non-reentrant model
 15599 ;;
 15600                           
 15601                           
 15602                           ;psect for function _setDimmerLights_SwOff
 15603  1420                     _setDimmerLights_SwOff:	
 15604                           
 15605                           ;incstack = 0
 15606                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15607                           ;setDimmerLights_SwOff@sw stored from wreg
 15608  1420  0020               	movlb	0	; select bank0
 15609  1421  00B0               	movwf	setDimmerLights_SwOff@sw
 15610                           
 15611                           ;Dimmer_B1.c: 537: DimmerLightsPointSelect(sw);
 15612  1422  0830               	movf	setDimmerLights_SwOff@sw,w
 15613  1423  319D  2505  3194   	fcall	_DimmerLightsPointSelect
 15614                           
 15615                           ;Dimmer_B1.c: 538: char command = DimmerLights->Status == 1 ? 1 : 0;
 15616  1426  0020               	movlb	0	; select bank0
 15617  1427  086F               	movf	_DimmerLights,w
 15618  1428  0086               	movwf	6
 15619  1429  3001               	movlw	1	; select bank2/3
 15620  142A  0087               	movwf	7
 15621  142B  3000               	movlw	0
 15622  142C  1A81               	btfsc	1,5
 15623  142D  3001               	movlw	1
 15624  142E  00AF               	movwf	setDimmerLights_SwOff@command
 15625                           
 15626                           ;Dimmer_B1.c: 539: if (DimmerLights->SwFlag == 1) {
 15627  142F  086F               	movf	_DimmerLights,w
 15628  1430  3E09               	addlw	9
 15629  1431  0086               	movwf	6
 15630  1432  3001               	movlw	1	; select bank2/3
 15631  1433  0087               	movwf	7
 15632  1434  1F01               	btfss	1,6
 15633  1435  0008               	return
 15634                           
 15635                           ;Dimmer_B1.c: 540: DimmerLights->SwFlag = 0;
 15636  1436  086F               	movf	_DimmerLights,w
 15637  1437  3E09               	addlw	9
 15638  1438  0086               	movwf	6
 15639  1439  3001               	movlw	1	; select bank2/3
 15640  143A  0087               	movwf	7
 15641  143B  1301               	bcf	1,6
 15642                           
 15643                           ;Dimmer_B1.c: 541: if (DimmerLights->Status == 1) {
 15644  143C  086F               	movf	_DimmerLights,w
 15645  143D  0086               	movwf	6
 15646  143E  3001               	movlw	1	; select bank2/3
 15647  143F  0087               	movwf	7
 15648  1440  1E81               	btfss	1,5
 15649  1441  2C54               	goto	l6204
 15650                           
 15651                           ;Dimmer_B1.c: 542: if (DimmerLights->SwAdj == 1) {
 15652  1442  086F               	movf	_DimmerLights,w
 15653  1443  3E09               	addlw	9
 15654  1444  0086               	movwf	6
 15655  1445  3001               	movlw	1	; select bank2/3
 15656  1446  0087               	movwf	7
 15657  1447  1F81               	btfss	1,7
 15658  1448  0008               	return
 15659                           
 15660                           ;Dimmer_B1.c: 543: DimmerLights->SwAdj = 0;
 15661  1449  086F               	movf	_DimmerLights,w
 15662  144A  3E09               	addlw	9
 15663  144B  0086               	movwf	6
 15664  144C  3001               	movlw	1	; select bank2/3
 15665  144D  0087               	movwf	7
 15666  144E  1381               	bcf	1,7
 15667                           
 15668                           ;Dimmer_B1.c: 544: setDimmerLights_TriggerAdj(sw, 0);
 15669  144F  01A2               	clrf	setDimmerLights_TriggerAdj@command
 15670  1450  0830               	movf	setDimmerLights_SwOff@sw,w
 15671  1451  319F  2718         	fcall	_setDimmerLights_TriggerAdj
 15672                           
 15673                           ;Dimmer_B1.c: 545: }
 15674                           ;Dimmer_B1.c: 546: } else {
 15675  1453  0008               	return
 15676  1454                     l6204:	
 15677                           
 15678                           ;Dimmer_B1.c: 547: setDimmerLights_Trigger(sw, 0);
 15679  1454  0020               	movlb	0	; select bank0
 15680  1455  01A2               	clrf	setDimmerLights_Trigger@command
 15681  1456  0830               	movf	setDimmerLights_SwOff@sw,w
 15682  1457  319E  26BC  3194   	fcall	_setDimmerLights_Trigger
 15683                           
 15684                           ;Dimmer_B1.c: 549: if (getDelayOff_GO(sw) == 1) {
 15685  145A  0020               	movlb	0	; select bank0
 15686  145B  0830               	movf	setDimmerLights_SwOff@sw,w
 15687  145C  319C  2469  3194   	fcall	_getDelayOff_GO
 15688  145F  3A01               	xorlw	1
 15689  1460  1D03               	skipz
 15690  1461  0008               	return
 15691                           
 15692                           ;Dimmer_B1.c: 550: setDelayOff_GO(sw, 0, 0);
 15693  1462  0020               	movlb	0	; select bank0
 15694  1463  01AA               	clrf	setDelayOff_GO@command
 15695  1464  01AB               	clrf	setDelayOff_GO@value
 15696  1465  0830               	movf	setDimmerLights_SwOff@sw,w
 15697  1466  3188  2070         	fcall	_setDelayOff_GO
 15698  1468  0008               	return
 15699  1469                     __end_of_setDimmerLights_SwOff:	
 15700                           
 15701                           	psect	text97
 15702  1F18                     __ptext97:	
 15703 ;; *************** function _setDimmerLights_TriggerAdj *****************
 15704 ;; Defined at:
 15705 ;;		line 785 in file "../src/Dimmer_B1.c"
 15706 ;; Parameters:    Size  Location     Type
 15707 ;;  lights          1    wreg     unsigned char 
 15708 ;;  command         1    2[BANK0 ] unsigned char 
 15709 ;; Auto vars:     Size  Location     Type
 15710 ;;  lights          1    4[BANK0 ] unsigned char 
 15711 ;; Return value:  Size  Location     Type
 15712 ;;		None               void
 15713 ;; Registers used:
 15714 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15715 ;; Tracked objects:
 15716 ;;		On entry : 0/0
 15717 ;;		On exit  : 0/0
 15718 ;;		Unchanged: 0/0
 15719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15720 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15721 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15722 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15723 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15724 ;;Total ram usage:        3 bytes
 15725 ;; Hardware stack levels used:    1
 15726 ;; Hardware stack levels required when called:    6
 15727 ;; This function calls:
 15728 ;;		_DimmerLightsPointSelect
 15729 ;; This function is called by:
 15730 ;;		_setDimmerLights_SwOff
 15731 ;;		_setDimmerLights_AdjControl
 15732 ;; This function uses a non-reentrant model
 15733 ;;
 15734                           
 15735                           
 15736                           ;psect for function _setDimmerLights_TriggerAdj
 15737  1F18                     _setDimmerLights_TriggerAdj:	
 15738                           
 15739                           ;incstack = 0
 15740                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15741                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 15742  1F18  0020               	movlb	0	; select bank0
 15743  1F19  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 15744                           
 15745                           ;Dimmer_B1.c: 786: DimmerLightsPointSelect(lights);
 15746  1F1A  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 15747  1F1B  319D  2505         	fcall	_DimmerLightsPointSelect
 15748                           
 15749                           ;Dimmer_B1.c: 787: DimmerLights->TriggerAdj = 1;
 15750  1F1D  0020               	movlb	0	; select bank0
 15751  1F1E  086F               	movf	_DimmerLights,w
 15752  1F1F  3E08               	addlw	8
 15753  1F20  0086               	movwf	6
 15754  1F21  3001               	movlw	1	; select bank2/3
 15755  1F22  0087               	movwf	7
 15756  1F23  1601               	bsf	1,4
 15757                           
 15758                           ;Dimmer_B1.c: 788: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 15759  1F24  0822               	movf	setDimmerLights_TriggerAdj@command,w
 15760  1F25  3A01               	xorlw	1
 15761  1F26  3000               	movlw	0
 15762  1F27  1903               	skipnz
 15763  1F28  3001               	movlw	1
 15764  1F29  00A3               	movwf	??_setDimmerLights_TriggerAdj
 15765  1F2A  086F               	movf	_DimmerLights,w
 15766  1F2B  3E08               	addlw	8
 15767  1F2C  0086               	movwf	6
 15768  1F2D  3001               	movlw	1	; select bank2/3
 15769  1F2E  0087               	movwf	7
 15770  1F2F  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15771  1F30  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15772  1F31  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15773  1F32  0801               	movf	1,w
 15774  1F33  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15775  1F34  39F7               	andlw	-9
 15776  1F35  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15777  1F36  0081               	movwf	1
 15778  1F37  0008               	return
 15779  1F38                     __end_of_setDimmerLights_TriggerAdj:	
 15780                           
 15781                           	psect	text98
 15782  1EBC                     __ptext98:	
 15783 ;; *************** function _setDimmerLights_Trigger *****************
 15784 ;; Defined at:
 15785 ;;		line 779 in file "../src/Dimmer_B1.c"
 15786 ;; Parameters:    Size  Location     Type
 15787 ;;  lights          1    wreg     unsigned char 
 15788 ;;  command         1    2[BANK0 ] unsigned char 
 15789 ;; Auto vars:     Size  Location     Type
 15790 ;;  lights          1    4[BANK0 ] unsigned char 
 15791 ;; Return value:  Size  Location     Type
 15792 ;;		None               void
 15793 ;; Registers used:
 15794 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15795 ;; Tracked objects:
 15796 ;;		On entry : 0/0
 15797 ;;		On exit  : 0/0
 15798 ;;		Unchanged: 0/0
 15799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15800 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15801 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15802 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15803 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15804 ;;Total ram usage:        3 bytes
 15805 ;; Hardware stack levels used:    1
 15806 ;; Hardware stack levels required when called:    6
 15807 ;; This function calls:
 15808 ;;		_DimmerLightsPointSelect
 15809 ;; This function is called by:
 15810 ;;		_setDimmerLights_SwOn
 15811 ;;		_setDimmerLights_SwOff
 15812 ;; This function uses a non-reentrant model
 15813 ;;
 15814                           
 15815                           
 15816                           ;psect for function _setDimmerLights_Trigger
 15817  1EBC                     _setDimmerLights_Trigger:	
 15818                           
 15819                           ;incstack = 0
 15820                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15821                           ;setDimmerLights_Trigger@lights stored from wreg
 15822  1EBC  0020               	movlb	0	; select bank0
 15823  1EBD  00A4               	movwf	setDimmerLights_Trigger@lights
 15824                           
 15825                           ;Dimmer_B1.c: 780: DimmerLightsPointSelect(lights);
 15826  1EBE  0824               	movf	setDimmerLights_Trigger@lights,w
 15827  1EBF  319D  2505         	fcall	_DimmerLightsPointSelect
 15828                           
 15829                           ;Dimmer_B1.c: 781: DimmerLights->Trigger = 1;
 15830  1EC1  0020               	movlb	0	; select bank0
 15831  1EC2  086F               	movf	_DimmerLights,w
 15832  1EC3  3E08               	addlw	8
 15833  1EC4  0086               	movwf	6
 15834  1EC5  3001               	movlw	1	; select bank2/3
 15835  1EC6  0087               	movwf	7
 15836  1EC7  1501               	bsf	1,2
 15837                           
 15838                           ;Dimmer_B1.c: 782: DimmerLights->Switch = command == 1 ? 1 : 0;
 15839  1EC8  0822               	movf	setDimmerLights_Trigger@command,w
 15840  1EC9  3A01               	xorlw	1
 15841  1ECA  3000               	movlw	0
 15842  1ECB  1903               	skipnz
 15843  1ECC  3001               	movlw	1
 15844  1ECD  00A3               	movwf	??_setDimmerLights_Trigger
 15845  1ECE  086F               	movf	_DimmerLights,w
 15846  1ECF  3E08               	addlw	8
 15847  1ED0  0086               	movwf	6
 15848  1ED1  3001               	movlw	1	; select bank2/3
 15849  1ED2  0087               	movwf	7
 15850  1ED3  0DA3               	rlf	??_setDimmerLights_Trigger,f
 15851  1ED4  0801               	movf	1,w
 15852  1ED5  0623               	xorwf	??_setDimmerLights_Trigger,w
 15853  1ED6  39FD               	andlw	-3
 15854  1ED7  0623               	xorwf	??_setDimmerLights_Trigger,w
 15855  1ED8  0081               	movwf	1
 15856  1ED9  0008               	return
 15857  1EDA                     __end_of_setDimmerLights_Trigger:	
 15858                           
 15859                           	psect	text99
 15860  0870                     __ptext99:	
 15861 ;; *************** function _setDelayOff_GO *****************
 15862 ;; Defined at:
 15863 ;;		line 83 in file "../src/DelayOff_B1.c"
 15864 ;; Parameters:    Size  Location     Type
 15865 ;;  sw              1    wreg     unsigned char 
 15866 ;;  command         1   10[BANK0 ] unsigned char 
 15867 ;;  value           1   11[BANK0 ] unsigned char 
 15868 ;; Auto vars:     Size  Location     Type
 15869 ;;  sw              1   14[BANK0 ] unsigned char 
 15870 ;; Return value:  Size  Location     Type
 15871 ;;		None               void
 15872 ;; Registers used:
 15873 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15874 ;; Tracked objects:
 15875 ;;		On entry : 0/0
 15876 ;;		On exit  : 0/0
 15877 ;;		Unchanged: 0/0
 15878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15879 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15880 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15881 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15882 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15883 ;;Total ram usage:        5 bytes
 15884 ;; Hardware stack levels used:    1
 15885 ;; Hardware stack levels required when called:    7
 15886 ;; This function calls:
 15887 ;;		_DelayOffPointSelect
 15888 ;;		_DelayTimejudge
 15889 ;; This function is called by:
 15890 ;;		_setDimmerLights_SwOff
 15891 ;;		_setRFSW_Control
 15892 ;; This function uses a non-reentrant model
 15893 ;;
 15894                           
 15895                           
 15896                           ;psect for function _setDelayOff_GO
 15897  0870                     _setDelayOff_GO:	
 15898                           
 15899                           ;incstack = 0
 15900                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15901                           ;setDelayOff_GO@sw stored from wreg
 15902  0870  0020               	movlb	0	; select bank0
 15903  0871  00AE               	movwf	setDelayOff_GO@sw
 15904                           
 15905                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 15906  0872  082E               	movf	setDelayOff_GO@sw,w
 15907  0873  319D  2579  3188   	fcall	_DelayOffPointSelect
 15908                           
 15909                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 15910  0876  0020               	movlb	0	; select bank0
 15911  0877  082A               	movf	setDelayOff_GO@command,w
 15912  0878  3A01               	xorlw	1
 15913  0879  3000               	movlw	0
 15914  087A  1903               	skipnz
 15915  087B  3001               	movlw	1
 15916  087C  00AC               	movwf	??_setDelayOff_GO
 15917  087D  0878               	movf	_DelayOff,w
 15918  087E  0086               	movwf	6
 15919  087F  3001               	movlw	1	; select bank2/3
 15920  0880  0087               	movwf	7
 15921  0881  0DAC               	rlf	??_setDelayOff_GO,f
 15922  0882  0801               	movf	1,w
 15923  0883  062C               	xorwf	??_setDelayOff_GO,w
 15924  0884  39FD               	andlw	-3
 15925  0885  062C               	xorwf	??_setDelayOff_GO,w
 15926  0886  0081               	movwf	1
 15927                           
 15928                           ;DelayOff_B1.c: 89: if (command == 1) {
 15929  0887  082A               	movf	setDelayOff_GO@command,w
 15930  0888  3A01               	xorlw	1
 15931  0889  1D03               	skipz
 15932  088A  28B5               	goto	l6114
 15933                           
 15934                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 15935  088B  082B               	movf	setDelayOff_GO@value,w
 15936  088C  3191  2138  3188   	fcall	_DelayTimejudge
 15937  088F  0020               	movlb	0	; select bank0
 15938  0890  00AC               	movwf	??_setDelayOff_GO
 15939  0891  0A78               	incf	_DelayOff,w
 15940  0892  0086               	movwf	6
 15941  0893  3001               	movlw	1	; select bank2/3
 15942  0894  0087               	movwf	7
 15943  0895  082C               	movf	??_setDelayOff_GO,w
 15944  0896  0081               	movwf	1
 15945                           
 15946                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 15947  0897  300F               	movlw	15
 15948  0898  052B               	andwf	setDelayOff_GO@value,w
 15949  0899  00AC               	movwf	??_setDelayOff_GO
 15950  089A  082C               	movf	??_setDelayOff_GO,w
 15951  089B  3A05               	xorlw	5
 15952  089C  1903               	skipnz
 15953  089D  28A2               	goto	l6108
 15954  089E  082B               	movf	setDelayOff_GO@value,w
 15955  089F  390F               	andlw	15
 15956  08A0  1D03               	btfss	3,2
 15957  08A1  28A8               	goto	l6112
 15958  08A2                     l6108:	
 15959  08A2  3026               	movlw	38
 15960  08A3  022B               	subwf	setDelayOff_GO@value,w
 15961  08A4  1803               	skipnc
 15962  08A5  28A8               	goto	l6112
 15963                           
 15964                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
 15965  08A6  082B               	movf	setDelayOff_GO@value,w
 15966  08A7  28A9               	goto	L9
 15967  08A8                     l6112:	
 15968                           ;DelayOff_B1.c: 93: } else {
 15969                           
 15970                           
 15971                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
 15972  08A8  3005               	movlw	5
 15973  08A9                     L9:	
 15974  08A9  00AC               	movwf	??_setDelayOff_GO
 15975  08AA  082E               	movf	setDelayOff_GO@sw,w
 15976  08AB  3E1A               	addlw	26
 15977  08AC  076E               	addwf	_product,w
 15978  08AD  00AD               	movwf	??_setDelayOff_GO+1
 15979  08AE  082D               	movf	??_setDelayOff_GO+1,w
 15980  08AF  0086               	movwf	6
 15981  08B0  3002               	movlw	2	; select bank4/5
 15982  08B1  0087               	movwf	7
 15983  08B2  082C               	movf	??_setDelayOff_GO,w
 15984  08B3  0081               	movwf	1
 15985                           
 15986                           ;DelayOff_B1.c: 95: }
 15987                           ;DelayOff_B1.c: 96: } else {
 15988  08B4  28BE               	goto	l6116
 15989  08B5                     l6114:	
 15990                           
 15991                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
 15992  08B5  082E               	movf	setDelayOff_GO@sw,w
 15993  08B6  3E1A               	addlw	26
 15994  08B7  076E               	addwf	_product,w
 15995  08B8  00AC               	movwf	??_setDelayOff_GO
 15996  08B9  082C               	movf	??_setDelayOff_GO,w
 15997  08BA  0086               	movwf	6
 15998  08BB  3002               	movlw	2	; select bank4/5
 15999  08BC  0087               	movwf	7
 16000  08BD  0181               	clrf	1
 16001  08BE                     l6116:	
 16002                           
 16003                           ;DelayOff_B1.c: 98: }
 16004                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 16005  08BE  0878               	movf	_DelayOff,w
 16006  08BF  3E02               	addlw	2
 16007  08C0  0086               	movwf	6
 16008  08C1  3001               	movlw	1	; select bank2/3
 16009  08C2  0087               	movwf	7
 16010  08C3  3000               	movlw	0
 16011  08C4  3FC0               	movwi [0]fsr1
 16012  08C5  3FC1               	movwi [1]fsr1
 16013                           
 16014                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 16015  08C6  0878               	movf	_DelayOff,w
 16016  08C7  3E04               	addlw	4
 16017  08C8  0086               	movwf	6
 16018  08C9  3001               	movlw	1	; select bank2/3
 16019  08CA  0087               	movwf	7
 16020  08CB  0181               	clrf	1
 16021  08CC  0008               	return
 16022  08CD                     __end_of_setDelayOff_GO:	
 16023                           
 16024                           	psect	text100
 16025  1138                     __ptext100:	
 16026 ;; *************** function _DelayTimejudge *****************
 16027 ;; Defined at:
 16028 ;;		line 112 in file "../src/DelayOff_B1.c"
 16029 ;; Parameters:    Size  Location     Type
 16030 ;;  value           1    wreg     unsigned char 
 16031 ;; Auto vars:     Size  Location     Type
 16032 ;;  value           1    9[BANK0 ] unsigned char 
 16033 ;;  k               1    8[BANK0 ] unsigned char 
 16034 ;;  j               1    7[BANK0 ] unsigned char 
 16035 ;;  i               1    6[BANK0 ] unsigned char 
 16036 ;; Return value:  Size  Location     Type
 16037 ;;                  1    wreg      unsigned char 
 16038 ;; Registers used:
 16039 ;;		wreg, status,2, status,0, pclath, cstack
 16040 ;; Tracked objects:
 16041 ;;		On entry : 0/0
 16042 ;;		On exit  : 0/0
 16043 ;;		Unchanged: 0/0
 16044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16046 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16047 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16048 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16049 ;;Total ram usage:        6 bytes
 16050 ;; Hardware stack levels used:    1
 16051 ;; Hardware stack levels required when called:    6
 16052 ;; This function calls:
 16053 ;;		___bmul
 16054 ;; This function is called by:
 16055 ;;		_setDelayOff_GO
 16056 ;; This function uses a non-reentrant model
 16057 ;;
 16058                           
 16059                           
 16060                           ;psect for function _DelayTimejudge
 16061  1138                     _DelayTimejudge:	
 16062                           
 16063                           ;incstack = 0
 16064                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16065                           ;DelayTimejudge@value stored from wreg
 16066  1138  0020               	movlb	0	; select bank0
 16067  1139  00A9               	movwf	DelayTimejudge@value
 16068                           
 16069                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16070  113A  3005               	movlw	5
 16071  113B  00A4               	movwf	??_DelayTimejudge
 16072  113C  0824               	movf	??_DelayTimejudge,w
 16073  113D  00A6               	movwf	DelayTimejudge@i
 16074  113E  01A7               	clrf	DelayTimejudge@j
 16075  113F  01A8               	clrf	DelayTimejudge@k
 16076                           
 16077                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16078  1140  3031               	movlw	49
 16079  1141  0229               	subwf	DelayTimejudge@value,w
 16080  1142  1803               	skipnc
 16081  1143  2960               	goto	l6006
 16082                           
 16083                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16084  1144  0829               	movf	DelayTimejudge@value,w
 16085  1145  390F               	andlw	15
 16086  1146  00A4               	movwf	??_DelayTimejudge
 16087  1147  0824               	movf	??_DelayTimejudge,w
 16088  1148  00A7               	movwf	DelayTimejudge@j
 16089                           
 16090                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16091  1149  0829               	movf	DelayTimejudge@value,w
 16092  114A  00A4               	movwf	??_DelayTimejudge
 16093  114B  3004               	movlw	4
 16094  114C                     u4925:	
 16095  114C  36A4               	lsrf	??_DelayTimejudge,f
 16096  114D  0B89               	decfsz	9,f
 16097  114E  294C               	goto	u4925
 16098  114F  0824               	movf	??_DelayTimejudge,w
 16099  1150  390F               	andlw	15
 16100  1151  00A5               	movwf	??_DelayTimejudge+1
 16101  1152  0825               	movf	??_DelayTimejudge+1,w
 16102  1153  00A8               	movwf	DelayTimejudge@k
 16103                           
 16104                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16105  1154  300A               	movlw	10
 16106  1155  00A4               	movwf	??_DelayTimejudge
 16107  1156  0824               	movf	??_DelayTimejudge,w
 16108  1157  00A0               	movwf	___bmul@multiplicand
 16109  1158  0828               	movf	DelayTimejudge@k,w
 16110  1159  319C  24CF         	fcall	___bmul
 16111  115B  0020               	movlb	0	; select bank0
 16112  115C  0727               	addwf	DelayTimejudge@j,w
 16113  115D  00A5               	movwf	??_DelayTimejudge+1
 16114  115E  0825               	movf	??_DelayTimejudge+1,w
 16115  115F  00A6               	movwf	DelayTimejudge@i
 16116  1160                     l6006:	
 16117                           
 16118                           ;DelayOff_B1.c: 118: }
 16119                           ;DelayOff_B1.c: 139: return i;
 16120  1160  0826               	movf	DelayTimejudge@i,w
 16121  1161  0008               	return
 16122  1162                     __end_of_DelayTimejudge:	
 16123                           
 16124                           	psect	text101
 16125  1CCF                     __ptext101:	
 16126 ;; *************** function ___bmul *****************
 16127 ;; Defined at:
 16128 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16129 ;; Parameters:    Size  Location     Type
 16130 ;;  multiplier      1    wreg     unsigned char 
 16131 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16132 ;; Auto vars:     Size  Location     Type
 16133 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16134 ;;  product         1    2[BANK0 ] unsigned char 
 16135 ;; Return value:  Size  Location     Type
 16136 ;;                  1    wreg      unsigned char 
 16137 ;; Registers used:
 16138 ;;		wreg, status,2, status,0
 16139 ;; Tracked objects:
 16140 ;;		On entry : 0/0
 16141 ;;		On exit  : 0/0
 16142 ;;		Unchanged: 0/0
 16143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16144 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16145 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16146 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16147 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16148 ;;Total ram usage:        4 bytes
 16149 ;; Hardware stack levels used:    1
 16150 ;; Hardware stack levels required when called:    5
 16151 ;; This function calls:
 16152 ;;		Nothing
 16153 ;; This function is called by:
 16154 ;;		_DelayTimejudge
 16155 ;; This function uses a non-reentrant model
 16156 ;;
 16157                           
 16158                           
 16159                           ;psect for function ___bmul
 16160  1CCF                     ___bmul:	
 16161                           
 16162                           ;incstack = 0
 16163                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16164                           ;___bmul@multiplier stored from wreg
 16165  1CCF  0020               	movlb	0	; select bank0
 16166  1CD0  00A3               	movwf	___bmul@multiplier
 16167  1CD1  01A2               	clrf	___bmul@product
 16168  1CD2                     l5744:	
 16169  1CD2  1C23               	btfss	___bmul@multiplier,0
 16170  1CD3  2CD8               	goto	l5748
 16171  1CD4  0820               	movf	___bmul@multiplicand,w
 16172  1CD5  00A1               	movwf	??___bmul
 16173  1CD6  0821               	movf	??___bmul,w
 16174  1CD7  07A2               	addwf	___bmul@product,f
 16175  1CD8                     l5748:	
 16176  1CD8  1003               	clrc
 16177  1CD9  0DA0               	rlf	___bmul@multiplicand,f
 16178  1CDA  1003               	clrc
 16179  1CDB  0CA3               	rrf	___bmul@multiplier,f
 16180  1CDC  08A3               	movf	___bmul@multiplier,f
 16181  1CDD  1D03               	skipz
 16182  1CDE  2CD2               	goto	l5744
 16183  1CDF  0822               	movf	___bmul@product,w
 16184  1CE0  0008               	return
 16185  1CE1                     __end_of___bmul:	
 16186                           
 16187                           	psect	text102
 16188  1C69                     __ptext102:	
 16189 ;; *************** function _getDelayOff_GO *****************
 16190 ;; Defined at:
 16191 ;;		line 105 in file "../src/DelayOff_B1.c"
 16192 ;; Parameters:    Size  Location     Type
 16193 ;;  sw              1    wreg     unsigned char 
 16194 ;; Auto vars:     Size  Location     Type
 16195 ;;  sw              1    2[BANK0 ] unsigned char 
 16196 ;;  go              1    3[BANK0 ] unsigned char 
 16197 ;; Return value:  Size  Location     Type
 16198 ;;                  1    wreg      unsigned char 
 16199 ;; Registers used:
 16200 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16201 ;; Tracked objects:
 16202 ;;		On entry : 0/0
 16203 ;;		On exit  : 0/0
 16204 ;;		Unchanged: 0/0
 16205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16207 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16209 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16210 ;;Total ram usage:        2 bytes
 16211 ;; Hardware stack levels used:    1
 16212 ;; Hardware stack levels required when called:    6
 16213 ;; This function calls:
 16214 ;;		_DelayOffPointSelect
 16215 ;; This function is called by:
 16216 ;;		_setDimmerLights_SwOff
 16217 ;;		_setRFSW_Control
 16218 ;; This function uses a non-reentrant model
 16219 ;;
 16220                           
 16221                           
 16222                           ;psect for function _getDelayOff_GO
 16223  1C69                     _getDelayOff_GO:	
 16224                           
 16225                           ;incstack = 0
 16226                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16227                           ;getDelayOff_GO@sw stored from wreg
 16228  1C69  0020               	movlb	0	; select bank0
 16229  1C6A  00A2               	movwf	getDelayOff_GO@sw
 16230                           
 16231                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16232  1C6B  0822               	movf	getDelayOff_GO@sw,w
 16233  1C6C  319D  2579         	fcall	_DelayOffPointSelect
 16234                           
 16235                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16236  1C6E  0878               	movf	_DelayOff,w
 16237  1C6F  0086               	movwf	6
 16238  1C70  3001               	movlw	1	; select bank2/3
 16239  1C71  0087               	movwf	7
 16240  1C72  3000               	movlw	0
 16241  1C73  1881               	btfsc	1,1
 16242  1C74  3001               	movlw	1
 16243  1C75  0020               	movlb	0	; select bank0
 16244  1C76  00A3               	movwf	getDelayOff_GO@go
 16245                           
 16246                           ;DelayOff_B1.c: 108: return go;
 16247  1C77  0823               	movf	getDelayOff_GO@go,w
 16248  1C78  0008               	return
 16249  1C79                     __end_of_getDelayOff_GO:	
 16250                           
 16251                           	psect	text103
 16252  1C59                     __ptext103:	
 16253 ;; *************** function _getDimmerLights_Status *****************
 16254 ;; Defined at:
 16255 ;;		line 457 in file "../src/Dimmer_B1.c"
 16256 ;; Parameters:    Size  Location     Type
 16257 ;;  lights          1    wreg     unsigned char 
 16258 ;; Auto vars:     Size  Location     Type
 16259 ;;  lights          1    2[BANK0 ] unsigned char 
 16260 ;;  status          1    3[BANK0 ] unsigned char 
 16261 ;; Return value:  Size  Location     Type
 16262 ;;                  1    wreg      unsigned char 
 16263 ;; Registers used:
 16264 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16265 ;; Tracked objects:
 16266 ;;		On entry : 0/0
 16267 ;;		On exit  : 0/0
 16268 ;;		Unchanged: 0/0
 16269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16271 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16273 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16274 ;;Total ram usage:        2 bytes
 16275 ;; Hardware stack levels used:    1
 16276 ;; Hardware stack levels required when called:    6
 16277 ;; This function calls:
 16278 ;;		_DimmerLightsPointSelect
 16279 ;; This function is called by:
 16280 ;;		_setDimmerLights_ErrorClose
 16281 ;;		_setRFSW_Control
 16282 ;;		_setRFSW_AdjControl
 16283 ;;		_getMain_LightsStatus
 16284 ;; This function uses a non-reentrant model
 16285 ;;
 16286                           
 16287                           
 16288                           ;psect for function _getDimmerLights_Status
 16289  1C59                     _getDimmerLights_Status:	
 16290                           
 16291                           ;incstack = 0
 16292                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16293                           ;getDimmerLights_Status@lights stored from wreg
 16294  1C59  0020               	movlb	0	; select bank0
 16295  1C5A  00A2               	movwf	getDimmerLights_Status@lights
 16296                           
 16297                           ;Dimmer_B1.c: 458: DimmerLightsPointSelect(lights);
 16298  1C5B  0822               	movf	getDimmerLights_Status@lights,w
 16299  1C5C  319D  2505         	fcall	_DimmerLightsPointSelect
 16300                           
 16301                           ;Dimmer_B1.c: 459: char status = DimmerLights->Status == 1 ? 1 : 0;
 16302  1C5E  0020               	movlb	0	; select bank0
 16303  1C5F  086F               	movf	_DimmerLights,w
 16304  1C60  0086               	movwf	6
 16305  1C61  3001               	movlw	1	; select bank2/3
 16306  1C62  0087               	movwf	7
 16307  1C63  3000               	movlw	0
 16308  1C64  1A81               	btfsc	1,5
 16309  1C65  3001               	movlw	1
 16310  1C66  00A3               	movwf	getDimmerLights_Status@status
 16311                           
 16312                           ;Dimmer_B1.c: 460: return status;
 16313  1C67  0823               	movf	getDimmerLights_Status@status,w
 16314  1C68  0008               	return
 16315  1C69                     __end_of_getDimmerLights_Status:	
 16316                           
 16317                           	psect	text104
 16318  1D05                     __ptext104:	
 16319 ;; *************** function _DimmerLightsPointSelect *****************
 16320 ;; Defined at:
 16321 ;;		line 322 in file "../src/Dimmer_B1.c"
 16322 ;; Parameters:    Size  Location     Type
 16323 ;;  lights          1    wreg     unsigned char 
 16324 ;; Auto vars:     Size  Location     Type
 16325 ;;  lights          1    1[BANK0 ] unsigned char 
 16326 ;; Return value:  Size  Location     Type
 16327 ;;		None               void
 16328 ;; Registers used:
 16329 ;;		wreg
 16330 ;; Tracked objects:
 16331 ;;		On entry : 0/0
 16332 ;;		On exit  : 0/0
 16333 ;;		Unchanged: 0/0
 16334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16336 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16337 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16338 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16339 ;;Total ram usage:        2 bytes
 16340 ;; Hardware stack levels used:    1
 16341 ;; Hardware stack levels required when called:    5
 16342 ;; This function calls:
 16343 ;;		Nothing
 16344 ;; This function is called by:
 16345 ;;		_setDimmerLights_Initialization
 16346 ;;		_setDimmerLights_Main
 16347 ;;		_getDimmerLights_Status
 16348 ;;		_setDimmerLights_SwOn
 16349 ;;		_setDimmerLights_SwOff
 16350 ;;		_setDimmerLights_AdjControl
 16351 ;;		_setDimmerLights_ErrorClose
 16352 ;;		_setDimmerLights
 16353 ;;		_setDimmerLights_Adj
 16354 ;;		_setDimmerLights_AdjRF
 16355 ;;		_setDimmerLights_Trigger
 16356 ;;		_setDimmerLights_TriggerAdj
 16357 ;;		_setDimmerLights_Status
 16358 ;;		_setDimmerLights_GO
 16359 ;;		_setDimmerLights_MaxmumValue
 16360 ;; This function uses a non-reentrant model
 16361 ;;
 16362                           
 16363                           
 16364                           ;psect for function _DimmerLightsPointSelect
 16365  1D05                     _DimmerLightsPointSelect:	
 16366                           
 16367                           ;incstack = 0
 16368                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16369                           ;DimmerLightsPointSelect@lights stored from wreg
 16370  1D05  0020               	movlb	0	; select bank0
 16371  1D06  00A1               	movwf	DimmerLightsPointSelect@lights
 16372                           
 16373                           ;Dimmer_B1.c: 324: if (lights == 1) {
 16374  1D07  0821               	movf	DimmerLightsPointSelect@lights,w
 16375  1D08  3A01               	xorlw	1
 16376  1D09  1D03               	skipz
 16377  1D0A  2D0F               	goto	l767
 16378                           
 16379                           ;Dimmer_B1.c: 325: DimmerLights = &DimmerLights1;
 16380  1D0B  30BE               	movlw	_DimmerLights1& (0+255)
 16381  1D0C  00A0               	movwf	??_DimmerLightsPointSelect
 16382  1D0D  0820               	movf	??_DimmerLightsPointSelect,w
 16383  1D0E  00EF               	movwf	_DimmerLights
 16384  1D0F                     l767:	
 16385                           
 16386                           ;Dimmer_B1.c: 326: }
 16387                           ;Dimmer_B1.c: 329: if (lights == 2) {
 16388  1D0F  0821               	movf	DimmerLightsPointSelect@lights,w
 16389  1D10  3A02               	xorlw	2
 16390  1D11  1D03               	skipz
 16391  1D12  0008               	return
 16392                           
 16393                           ;Dimmer_B1.c: 330: DimmerLights = &DimmerLights2;
 16394  1D13  30CD               	movlw	_DimmerLights2& (0+255)
 16395  1D14  00A0               	movwf	??_DimmerLightsPointSelect
 16396  1D15  0820               	movf	??_DimmerLightsPointSelect,w
 16397  1D16  00EF               	movwf	_DimmerLights
 16398  1D17  0008               	return
 16399  1D18                     __end_of_DimmerLightsPointSelect:	
 16400                           
 16401                           	psect	text105
 16402  1698                     __ptext105:	
 16403 ;; *************** function _setBuz *****************
 16404 ;; Defined at:
 16405 ;;		line 22 in file "../src/Buzzer_B1.c"
 16406 ;; Parameters:    Size  Location     Type
 16407 ;;  count           1    wreg     unsigned char 
 16408 ;;  time            2    9[BANK0 ] int 
 16409 ;; Auto vars:     Size  Location     Type
 16410 ;;  count           1   12[BANK0 ] unsigned char 
 16411 ;; Return value:  Size  Location     Type
 16412 ;;		None               void
 16413 ;; Registers used:
 16414 ;;		wreg, status,2, status,0, pclath, cstack
 16415 ;; Tracked objects:
 16416 ;;		On entry : 0/0
 16417 ;;		On exit  : 0/0
 16418 ;;		Unchanged: 0/0
 16419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16420 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16422 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16423 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16424 ;;Total ram usage:        4 bytes
 16425 ;; Hardware stack levels used:    1
 16426 ;; Hardware stack levels required when called:    6
 16427 ;; This function calls:
 16428 ;;		___awdiv
 16429 ;; This function is called by:
 16430 ;;		_DlyOff_Main
 16431 ;;		_setDimmerLights_Main
 16432 ;;		_setDimmerLights_SwOn
 16433 ;;		_setTemp_Main
 16434 ;;		_setLog_Code
 16435 ;;		_setControl_Lights_Table
 16436 ;;		_setRFSW_Control
 16437 ;;		_setSw_Main
 16438 ;;		_my_MainTimer
 16439 ;;		_setMain_Exception
 16440 ;; This function uses a non-reentrant model
 16441 ;;
 16442                           
 16443                           
 16444                           ;psect for function _setBuz
 16445  1698                     _setBuz:	
 16446                           
 16447                           ;incstack = 0
 16448                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16449                           ;setBuz@count stored from wreg
 16450  1698  0020               	movlb	0	; select bank0
 16451  1699  00AC               	movwf	setBuz@count
 16452                           
 16453                           ;Buzzer_B1.c: 23: time /= 10;
 16454  169A  300A               	movlw	10
 16455  169B  00A0               	movwf	___awdiv@divisor
 16456  169C  3000               	movlw	0
 16457  169D  00A1               	movwf	___awdiv@divisor+1
 16458  169E  082A               	movf	setBuz@time+1,w
 16459  169F  01A3               	clrf	___awdiv@dividend+1
 16460  16A0  07A3               	addwf	___awdiv@dividend+1,f
 16461  16A1  0829               	movf	setBuz@time,w
 16462  16A2  01A2               	clrf	___awdiv@dividend
 16463  16A3  07A2               	addwf	___awdiv@dividend,f
 16464  16A4  3195  25EC  3196   	fcall	___awdiv
 16465  16A7  0020               	movlb	0	; select bank0
 16466  16A8  0821               	movf	?___awdiv+1,w
 16467  16A9  01AA               	clrf	setBuz@time+1
 16468  16AA  07AA               	addwf	setBuz@time+1,f
 16469  16AB  0820               	movf	?___awdiv,w
 16470  16AC  01A9               	clrf	setBuz@time
 16471  16AD  07A9               	addwf	setBuz@time,f
 16472                           
 16473                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16474  16AE  0021               	movlb	1	; select bank1
 16475  16AF  1C30               	btfss	_Buz1^(0+128),0
 16476  16B0  0008               	return
 16477                           
 16478                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16479  16B1  18B0               	btfsc	_Buz1^(0+128),1
 16480  16B2  2EC9               	goto	l96
 16481                           
 16482                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16483  16B3  14B0               	bsf	_Buz1^(0+128),1
 16484                           
 16485                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16486  16B4  01B1               	clrf	(_Buz1^(0+128)+1)
 16487  16B5  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 16488                           
 16489                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16490  16B6  0020               	movlb	0	; select bank0
 16491  16B7  082C               	movf	setBuz@count,w
 16492  16B8  00AB               	movwf	??_setBuz
 16493  16B9  082B               	movf	??_setBuz,w
 16494  16BA  0021               	movlb	1	; select bank1
 16495  16BB  00B3               	movwf	(_Buz1^(0+128)+3)
 16496                           
 16497                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16498  16BC  0020               	movlb	0	; select bank0
 16499  16BD  082A               	movf	setBuz@time+1,w
 16500  16BE  0021               	movlb	1	; select bank1
 16501  16BF  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 16502  16C0  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 16503  16C1  0020               	movlb	0	; select bank0
 16504  16C2  0829               	movf	setBuz@time,w
 16505  16C3  0021               	movlb	1	; select bank1
 16506  16C4  01B6               	clrf	(_Buz1^(0+128)+6)
 16507  16C5  07B6               	addwf	(_Buz1^(0+128)+6),f
 16508                           
 16509                           ;Buzzer_B1.c: 30: RB3 = 1;
 16510  16C6  0020               	movlb	0	; select bank0
 16511  16C7  158D               	bsf	13,3	;volatile
 16512                           
 16513                           ;Buzzer_B1.c: 31: } else {
 16514  16C8  0008               	return
 16515  16C9                     l96:	
 16516                           
 16517                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16518  16C9  19B0               	btfsc	_Buz1^(0+128),3
 16519  16CA  2EDD               	goto	l98
 16520                           
 16521                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16522  16CB  15B0               	bsf	_Buz1^(0+128),3
 16523                           
 16524                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16525  16CC  0020               	movlb	0	; select bank0
 16526  16CD  082C               	movf	setBuz@count,w
 16527  16CE  00AB               	movwf	??_setBuz
 16528  16CF  082B               	movf	??_setBuz,w
 16529  16D0  0021               	movlb	1	; select bank1
 16530  16D1  00B4               	movwf	(_Buz1^(0+128)+4)
 16531                           
 16532                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16533  16D2  0020               	movlb	0	; select bank0
 16534  16D3  082A               	movf	setBuz@time+1,w
 16535  16D4  0021               	movlb	1	; select bank1
 16536  16D5  01B9               	clrf	((_Buz1+1)^(0+128)+8)
 16537  16D6  07B9               	addwf	((_Buz1+1)^(0+128)+8),f
 16538  16D7  0020               	movlb	0	; select bank0
 16539  16D8  0829               	movf	setBuz@time,w
 16540  16D9  0021               	movlb	1	; select bank1
 16541  16DA  01B8               	clrf	(_Buz1^(0+128)+8)
 16542  16DB  07B8               	addwf	(_Buz1^(0+128)+8),f
 16543                           
 16544                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16545  16DC  0008               	return
 16546  16DD                     l98:	
 16547  16DD  1A30               	btfsc	_Buz1^(0+128),4
 16548  16DE  0008               	return
 16549                           
 16550                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16551  16DF  1630               	bsf	_Buz1^(0+128),4
 16552                           
 16553                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16554  16E0  0020               	movlb	0	; select bank0
 16555  16E1  082C               	movf	setBuz@count,w
 16556  16E2  00AB               	movwf	??_setBuz
 16557  16E3  082B               	movf	??_setBuz,w
 16558  16E4  0021               	movlb	1	; select bank1
 16559  16E5  00B5               	movwf	(_Buz1^(0+128)+5)
 16560                           
 16561                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16562  16E6  0020               	movlb	0	; select bank0
 16563  16E7  082A               	movf	setBuz@time+1,w
 16564  16E8  0021               	movlb	1	; select bank1
 16565  16E9  01BB               	clrf	((_Buz1+1)^(0+128)+10)
 16566  16EA  07BB               	addwf	((_Buz1+1)^(0+128)+10),f
 16567  16EB  0020               	movlb	0	; select bank0
 16568  16EC  0829               	movf	setBuz@time,w
 16569  16ED  0021               	movlb	1	; select bank1
 16570  16EE  01BA               	clrf	(_Buz1^(0+128)+10)
 16571  16EF  07BA               	addwf	(_Buz1^(0+128)+10),f
 16572  16F0  0008               	return
 16573  16F1                     __end_of_setBuz:	
 16574                           
 16575                           	psect	text106
 16576  15EC                     __ptext106:	
 16577 ;; *************** function ___awdiv *****************
 16578 ;; Defined at:
 16579 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16580 ;; Parameters:    Size  Location     Type
 16581 ;;  divisor         2    0[BANK0 ] int 
 16582 ;;  dividend        2    2[BANK0 ] int 
 16583 ;; Auto vars:     Size  Location     Type
 16584 ;;  quotient        2    7[BANK0 ] int 
 16585 ;;  sign            1    6[BANK0 ] unsigned char 
 16586 ;;  counter         1    5[BANK0 ] unsigned char 
 16587 ;; Return value:  Size  Location     Type
 16588 ;;                  2    0[BANK0 ] int 
 16589 ;; Registers used:
 16590 ;;		wreg, status,2, status,0
 16591 ;; Tracked objects:
 16592 ;;		On entry : 0/0
 16593 ;;		On exit  : 0/0
 16594 ;;		Unchanged: 0/0
 16595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16596 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16597 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16598 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16599 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16600 ;;Total ram usage:        9 bytes
 16601 ;; Hardware stack levels used:    1
 16602 ;; Hardware stack levels required when called:    5
 16603 ;; This function calls:
 16604 ;;		Nothing
 16605 ;; This function is called by:
 16606 ;;		_setBuz
 16607 ;; This function uses a non-reentrant model
 16608 ;;
 16609                           
 16610                           
 16611                           ;psect for function ___awdiv
 16612  15EC                     ___awdiv:	
 16613                           
 16614                           ;incstack = 0
 16615                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16616  15EC  0020               	movlb	0	; select bank0
 16617  15ED  01A6               	clrf	___awdiv@sign
 16618  15EE  1FA1               	btfss	___awdiv@divisor+1,7
 16619  15EF  2DF7               	goto	l6032
 16620  15F0  09A0               	comf	___awdiv@divisor,f
 16621  15F1  09A1               	comf	___awdiv@divisor+1,f
 16622  15F2  0AA0               	incf	___awdiv@divisor,f
 16623  15F3  1903               	skipnz
 16624  15F4  0AA1               	incf	___awdiv@divisor+1,f
 16625  15F5  01A6               	clrf	___awdiv@sign
 16626  15F6  0AA6               	incf	___awdiv@sign,f
 16627  15F7                     l6032:	
 16628  15F7  1FA3               	btfss	___awdiv@dividend+1,7
 16629  15F8  2E02               	goto	l6038
 16630  15F9  09A2               	comf	___awdiv@dividend,f
 16631  15FA  09A3               	comf	___awdiv@dividend+1,f
 16632  15FB  0AA2               	incf	___awdiv@dividend,f
 16633  15FC  1903               	skipnz
 16634  15FD  0AA3               	incf	___awdiv@dividend+1,f
 16635  15FE  3001               	movlw	1
 16636  15FF  00A4               	movwf	??___awdiv
 16637  1600  0824               	movf	??___awdiv,w
 16638  1601  06A6               	xorwf	___awdiv@sign,f
 16639  1602                     l6038:	
 16640  1602  01A7               	clrf	___awdiv@quotient
 16641  1603  01A8               	clrf	___awdiv@quotient+1
 16642  1604  0821               	movf	___awdiv@divisor+1,w
 16643  1605  0420               	iorwf	___awdiv@divisor,w
 16644  1606  1903               	skipnz
 16645  1607  2E31               	goto	l6060
 16646  1608  01A5               	clrf	___awdiv@counter
 16647  1609  0AA5               	incf	___awdiv@counter,f
 16648  160A                     l6048:	
 16649  160A  1BA1               	btfsc	___awdiv@divisor+1,7
 16650  160B  2E16               	goto	l6050
 16651  160C  3001               	movlw	1
 16652  160D                     u4985:	
 16653  160D  35A0               	lslf	___awdiv@divisor,f
 16654  160E  0DA1               	rlf	___awdiv@divisor+1,f
 16655  160F  0B89               	decfsz	9,f
 16656  1610  2E0D               	goto	u4985
 16657  1611  3001               	movlw	1
 16658  1612  00A4               	movwf	??___awdiv
 16659  1613  0824               	movf	??___awdiv,w
 16660  1614  07A5               	addwf	___awdiv@counter,f
 16661  1615  2E0A               	goto	l6048
 16662  1616                     l6050:	
 16663  1616  3001               	movlw	1
 16664  1617                     u5005:	
 16665  1617  35A7               	lslf	___awdiv@quotient,f
 16666  1618  0DA8               	rlf	___awdiv@quotient+1,f
 16667  1619  0B89               	decfsz	9,f
 16668  161A  2E17               	goto	u5005
 16669  161B  0821               	movf	___awdiv@divisor+1,w
 16670  161C  0223               	subwf	___awdiv@dividend+1,w
 16671  161D  1D03               	skipz
 16672  161E  2E21               	goto	u5015
 16673  161F  0820               	movf	___awdiv@divisor,w
 16674  1620  0222               	subwf	___awdiv@dividend,w
 16675  1621                     u5015:	
 16676  1621  1C03               	skipc
 16677  1622  2E28               	goto	l6056
 16678  1623  0820               	movf	___awdiv@divisor,w
 16679  1624  02A2               	subwf	___awdiv@dividend,f
 16680  1625  0821               	movf	___awdiv@divisor+1,w
 16681  1626  3BA3               	subwfb	___awdiv@dividend+1,f
 16682  1627  1427               	bsf	___awdiv@quotient,0
 16683  1628                     l6056:	
 16684  1628  3001               	movlw	1
 16685  1629                     u5025:	
 16686  1629  36A1               	lsrf	___awdiv@divisor+1,f
 16687  162A  0CA0               	rrf	___awdiv@divisor,f
 16688  162B  0B89               	decfsz	9,f
 16689  162C  2E29               	goto	u5025
 16690  162D  3001               	movlw	1
 16691  162E  02A5               	subwf	___awdiv@counter,f
 16692  162F  1D03               	btfss	3,2
 16693  1630  2E16               	goto	l6050
 16694  1631                     l6060:	
 16695  1631  0826               	movf	___awdiv@sign,w
 16696  1632  1903               	btfsc	3,2
 16697  1633  2E39               	goto	l6064
 16698  1634  09A7               	comf	___awdiv@quotient,f
 16699  1635  09A8               	comf	___awdiv@quotient+1,f
 16700  1636  0AA7               	incf	___awdiv@quotient,f
 16701  1637  1903               	skipnz
 16702  1638  0AA8               	incf	___awdiv@quotient+1,f
 16703  1639                     l6064:	
 16704  1639  0828               	movf	___awdiv@quotient+1,w
 16705  163A  01A1               	clrf	?___awdiv+1
 16706  163B  07A1               	addwf	?___awdiv+1,f
 16707  163C  0827               	movf	___awdiv@quotient,w
 16708  163D  01A0               	clrf	?___awdiv
 16709  163E  07A0               	addwf	?___awdiv,f
 16710  163F  0008               	return
 16711  1640                     __end_of___awdiv:	
 16712                           
 16713                           	psect	text107
 16714  1B8A                     __ptext107:	
 16715 ;; *************** function _DelayOff_Initialization *****************
 16716 ;; Defined at:
 16717 ;;		line 26 in file "../src/DelayOff_B1.c"
 16718 ;; Parameters:    Size  Location     Type
 16719 ;;		None
 16720 ;; Auto vars:     Size  Location     Type
 16721 ;;		None
 16722 ;; Return value:  Size  Location     Type
 16723 ;;		None               void
 16724 ;; Registers used:
 16725 ;;		wreg, status,2, status,0, pclath, cstack
 16726 ;; Tracked objects:
 16727 ;;		On entry : 0/0
 16728 ;;		On exit  : 0/0
 16729 ;;		Unchanged: 0/0
 16730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16735 ;;Total ram usage:        0 bytes
 16736 ;; Hardware stack levels used:    1
 16737 ;; Hardware stack levels required when called:    7
 16738 ;; This function calls:
 16739 ;;		_DlyOff_Initialization
 16740 ;; This function is called by:
 16741 ;;		_main
 16742 ;; This function uses a non-reentrant model
 16743 ;;
 16744                           
 16745                           
 16746                           ;psect for function _DelayOff_Initialization
 16747  1B8A                     _DelayOff_Initialization:	
 16748                           
 16749                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16750                           
 16751                           ;incstack = 0
 16752                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16753  1B8A  3001               	movlw	1
 16754  1B8B  319B  2369  319B   	fcall	_DlyOff_Initialization
 16755                           
 16756                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 16757  1B8E  3002               	movlw	2
 16758  1B8F  319B  2369         	fcall	_DlyOff_Initialization
 16759  1B91  0008               	return
 16760  1B92                     __end_of_DelayOff_Initialization:	
 16761                           
 16762                           	psect	text108
 16763  1B69                     __ptext108:	
 16764 ;; *************** function _DlyOff_Initialization *****************
 16765 ;; Defined at:
 16766 ;;		line 56 in file "../src/DelayOff_B1.c"
 16767 ;; Parameters:    Size  Location     Type
 16768 ;;  sw              1    wreg     unsigned char 
 16769 ;; Auto vars:     Size  Location     Type
 16770 ;;  sw              1    2[BANK0 ] unsigned char 
 16771 ;; Return value:  Size  Location     Type
 16772 ;;		None               void
 16773 ;; Registers used:
 16774 ;;		wreg, status,2, status,0, pclath, cstack
 16775 ;; Tracked objects:
 16776 ;;		On entry : 0/0
 16777 ;;		On exit  : 0/0
 16778 ;;		Unchanged: 0/0
 16779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16781 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16783 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16784 ;;Total ram usage:        1 bytes
 16785 ;; Hardware stack levels used:    1
 16786 ;; Hardware stack levels required when called:    6
 16787 ;; This function calls:
 16788 ;;		_DelayOffPointSelect
 16789 ;; This function is called by:
 16790 ;;		_DelayOff_Initialization
 16791 ;; This function uses a non-reentrant model
 16792 ;;
 16793                           
 16794                           
 16795                           ;psect for function _DlyOff_Initialization
 16796  1B69                     _DlyOff_Initialization:	
 16797                           
 16798                           ;incstack = 0
 16799                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16800                           ;DlyOff_Initialization@sw stored from wreg
 16801  1B69  0020               	movlb	0	; select bank0
 16802  1B6A  00A2               	movwf	DlyOff_Initialization@sw
 16803                           
 16804                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16805  1B6B  0822               	movf	DlyOff_Initialization@sw,w
 16806  1B6C  319D  2579         	fcall	_DelayOffPointSelect
 16807  1B6E  0008               	return
 16808  1B6F                     __end_of_DlyOff_Initialization:	
 16809                           
 16810                           	psect	text109
 16811  1D79                     __ptext109:	
 16812 ;; *************** function _DelayOffPointSelect *****************
 16813 ;; Defined at:
 16814 ;;		line 7 in file "../src/DelayOff_B1.c"
 16815 ;; Parameters:    Size  Location     Type
 16816 ;;  sw              1    wreg     unsigned char 
 16817 ;; Auto vars:     Size  Location     Type
 16818 ;;  sw              1    1[BANK0 ] unsigned char 
 16819 ;; Return value:  Size  Location     Type
 16820 ;;		None               void
 16821 ;; Registers used:
 16822 ;;		wreg
 16823 ;; Tracked objects:
 16824 ;;		On entry : 0/0
 16825 ;;		On exit  : 0/0
 16826 ;;		Unchanged: 0/0
 16827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16829 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16830 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16831 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16832 ;;Total ram usage:        2 bytes
 16833 ;; Hardware stack levels used:    1
 16834 ;; Hardware stack levels required when called:    5
 16835 ;; This function calls:
 16836 ;;		Nothing
 16837 ;; This function is called by:
 16838 ;;		_DlyOff_Initialization
 16839 ;;		_DlyOff_Main
 16840 ;;		_setDelayOff_GO
 16841 ;;		_getDelayOff_GO
 16842 ;; This function uses a non-reentrant model
 16843 ;;
 16844                           
 16845                           
 16846                           ;psect for function _DelayOffPointSelect
 16847  1D79                     _DelayOffPointSelect:	
 16848                           
 16849                           ;incstack = 0
 16850                           ; Regs used in _DelayOffPointSelect: [wreg]
 16851                           ;DelayOffPointSelect@sw stored from wreg
 16852  1D79  0020               	movlb	0	; select bank0
 16853  1D7A  00A1               	movwf	DelayOffPointSelect@sw
 16854                           
 16855                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16856  1D7B  0821               	movf	DelayOffPointSelect@sw,w
 16857  1D7C  3A01               	xorlw	1
 16858  1D7D  1D03               	skipz
 16859  1D7E  2D84               	goto	l5990
 16860                           
 16861                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16862  1D7F  3053               	movlw	_DlySw1& (0+255)
 16863  1D80  00A0               	movwf	??_DelayOffPointSelect
 16864  1D81  0820               	movf	??_DelayOffPointSelect,w
 16865  1D82  00F8               	movwf	_DelayOff
 16866                           
 16867                           ;DelayOff_B1.c: 11: }
 16868  1D83  0008               	return
 16869  1D84                     l5990:	
 16870                           
 16871                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 16872  1D84  0821               	movf	DelayOffPointSelect@sw,w
 16873  1D85  3A02               	xorlw	2
 16874  1D86  1D03               	skipz
 16875  1D87  0008               	return
 16876                           
 16877                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 16878  1D88  3058               	movlw	_DlySw2& (0+255)
 16879  1D89  00A0               	movwf	??_DelayOffPointSelect
 16880  1D8A  0820               	movf	??_DelayOffPointSelect,w
 16881  1D8B  00F8               	movwf	_DelayOff
 16882  1D8C  0008               	return
 16883  1D8D                     __end_of_DelayOffPointSelect:	
 16884                           
 16885                           	psect	text110
 16886  1DB6                     __ptext110:	
 16887 ;; *************** function _CC2500_PowerOnInitial *****************
 16888 ;; Defined at:
 16889 ;;		line 122 in file "../src/CC2500_B1.c"
 16890 ;; Parameters:    Size  Location     Type
 16891 ;;		None
 16892 ;; Auto vars:     Size  Location     Type
 16893 ;;		None
 16894 ;; Return value:  Size  Location     Type
 16895 ;;		None               void
 16896 ;; Registers used:
 16897 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16898 ;; Tracked objects:
 16899 ;;		On entry : 0/0
 16900 ;;		On exit  : 0/0
 16901 ;;		Unchanged: 0/0
 16902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16907 ;;Total ram usage:        0 bytes
 16908 ;; Hardware stack levels used:    1
 16909 ;; Hardware stack levels required when called:    8
 16910 ;; This function calls:
 16911 ;;		_CC2500_ClearRXFIFO
 16912 ;;		_CC2500_ClearTXFIFO
 16913 ;;		_CC2500_FrequencyCabr
 16914 ;;		_CC2500_InitPATable
 16915 ;;		_CC2500_InitSetREG
 16916 ;;		_CC2500_PowerRST
 16917 ;;		_CC2500_SIDLEMode
 16918 ;; This function is called by:
 16919 ;;		_main
 16920 ;; This function uses a non-reentrant model
 16921 ;;
 16922                           
 16923                           
 16924                           ;psect for function _CC2500_PowerOnInitial
 16925  1DB6                     _CC2500_PowerOnInitial:	
 16926                           
 16927                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 16928                           
 16929                           ;incstack = 0
 16930                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16931  1DB6  3187  27B9  319D   	fcall	_CC2500_PowerRST
 16932                           
 16933                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 16934  1DB9  3191  210E  319D   	fcall	_CC2500_InitSetREG
 16935                           
 16936                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 16937  1DBC  319E  26DA  319D   	fcall	_CC2500_InitPATable
 16938                           
 16939                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 16940  1DBF  319B  2357  319D   	fcall	_CC2500_ClearTXFIFO
 16941                           
 16942                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 16943  1DC2  319B  2353  319D   	fcall	_CC2500_ClearRXFIFO
 16944                           
 16945                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 16946  1DC5  319B  23DA  319D   	fcall	_CC2500_FrequencyCabr
 16947                           
 16948                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 16949  1DC8  319B  235B         	fcall	_CC2500_SIDLEMode
 16950  1DCA  0008               	return
 16951  1DCB                     __end_of_CC2500_PowerOnInitial:	
 16952                           
 16953                           	psect	text111
 16954  1B5B                     __ptext111:	
 16955 ;; *************** function _CC2500_SIDLEMode *****************
 16956 ;; Defined at:
 16957 ;;		line 212 in file "../src/CC2500_B1.c"
 16958 ;; Parameters:    Size  Location     Type
 16959 ;;		None
 16960 ;; Auto vars:     Size  Location     Type
 16961 ;;		None
 16962 ;; Return value:  Size  Location     Type
 16963 ;;		None               void
 16964 ;; Registers used:
 16965 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16966 ;; Tracked objects:
 16967 ;;		On entry : 0/0
 16968 ;;		On exit  : 0/0
 16969 ;;		Unchanged: 0/0
 16970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16975 ;;Total ram usage:        0 bytes
 16976 ;; Hardware stack levels used:    1
 16977 ;; Hardware stack levels required when called:    7
 16978 ;; This function calls:
 16979 ;;		_CC2500_WriteCommand
 16980 ;; This function is called by:
 16981 ;;		_CC2500_PowerOnInitial
 16982 ;; This function uses a non-reentrant model
 16983 ;;
 16984                           
 16985                           
 16986                           ;psect for function _CC2500_SIDLEMode
 16987  1B5B                     _CC2500_SIDLEMode:	
 16988                           
 16989                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 16990                           
 16991                           ;incstack = 0
 16992                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16993  1B5B  3036               	movlw	54
 16994  1B5C  319E  2639         	fcall	_CC2500_WriteCommand
 16995  1B5E  0008               	return
 16996  1B5F                     __end_of_CC2500_SIDLEMode:	
 16997                           
 16998                           	psect	text112
 16999  07B9                     __ptext112:	
 17000 ;; *************** function _CC2500_PowerRST *****************
 17001 ;; Defined at:
 17002 ;;		line 135 in file "../src/CC2500_B1.c"
 17003 ;; Parameters:    Size  Location     Type
 17004 ;;		None
 17005 ;; Auto vars:     Size  Location     Type
 17006 ;;		None
 17007 ;; Return value:  Size  Location     Type
 17008 ;;		None               void
 17009 ;; Registers used:
 17010 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17011 ;; Tracked objects:
 17012 ;;		On entry : 0/0
 17013 ;;		On exit  : 0/0
 17014 ;;		Unchanged: 0/0
 17015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17018 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17019 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17020 ;;Total ram usage:        1 bytes
 17021 ;; Hardware stack levels used:    1
 17022 ;; Hardware stack levels required when called:    6
 17023 ;; This function calls:
 17024 ;;		_CC2500_WriteByte
 17025 ;;		_DelayTime_1us
 17026 ;;		_Timeout_Counter
 17027 ;;		_set_TimeoutCleared
 17028 ;; This function is called by:
 17029 ;;		_CC2500_PowerOnInitial
 17030 ;; This function uses a non-reentrant model
 17031 ;;
 17032                           
 17033                           
 17034                           ;psect for function _CC2500_PowerRST
 17035  07B9                     _CC2500_PowerRST:	
 17036                           
 17037                           ;CC2500_B1.c: 136: RC1 = 0;
 17038                           
 17039                           ;incstack = 0
 17040                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17041  07B9  0020               	movlb	0	; select bank0
 17042  07BA  108E               	bcf	14,1	;volatile
 17043                           
 17044                           ;CC2500_B1.c: 137: RC0 = 0;
 17045  07BB  100E               	bcf	14,0	;volatile
 17046                           
 17047                           ;CC2500_B1.c: 138: RC4 = 1;
 17048  07BC  160E               	bsf	14,4	;volatile
 17049                           
 17050                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 17051  07BD  300A               	movlw	10
 17052  07BE  00A0               	movwf	DelayTime_1us@count
 17053  07BF  3000               	movlw	0
 17054  07C0  00A1               	movwf	DelayTime_1us@count+1
 17055  07C1  3190  2098  3187   	fcall	_DelayTime_1us
 17056                           
 17057                           ;CC2500_B1.c: 140: RC4 = 0;
 17058  07C4  0020               	movlb	0	; select bank0
 17059  07C5  120E               	bcf	14,4	;volatile
 17060                           
 17061                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 17062  07C6  300A               	movlw	10
 17063  07C7  00A0               	movwf	DelayTime_1us@count
 17064  07C8  3000               	movlw	0
 17065  07C9  00A1               	movwf	DelayTime_1us@count+1
 17066  07CA  3190  2098  3187   	fcall	_DelayTime_1us
 17067                           
 17068                           ;CC2500_B1.c: 142: RC4 = 1;
 17069  07CD  0020               	movlb	0	; select bank0
 17070  07CE  160E               	bsf	14,4	;volatile
 17071                           
 17072                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 17073  07CF  3028               	movlw	40
 17074  07D0  00A0               	movwf	DelayTime_1us@count
 17075  07D1  3000               	movlw	0
 17076  07D2  00A1               	movwf	DelayTime_1us@count+1
 17077  07D3  3190  2098  3187   	fcall	_DelayTime_1us
 17078                           
 17079                           ;CC2500_B1.c: 144: RC4 = 0;
 17080  07D6  0020               	movlb	0	; select bank0
 17081  07D7  120E               	bcf	14,4	;volatile
 17082                           
 17083                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 17084  07D8  3030               	movlw	48
 17085  07D9  00A6               	movwf	??_CC2500_PowerRST
 17086  07DA  0826               	movf	??_CC2500_PowerRST,w
 17087  07DB  00FB               	movwf	_SPI0Buffer
 17088                           
 17089                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 17090  07DC  2FE0               	goto	l7038
 17091  07DD                     l7036:	
 17092                           
 17093                           ;CC2500_B1.c: 147: Timeout_Counter();
 17094  07DD  319D  25A1  3187   	fcall	_Timeout_Counter
 17095  07E0                     l7038:	
 17096  07E0  0020               	movlb	0	; select bank0
 17097  07E1  1D0E               	btfss	14,2	;volatile
 17098  07E2  2FE6               	goto	l7042
 17099  07E3  0021               	movlb	1	; select bank1
 17100  07E4  1D2D               	btfss	(_myMain^(0+128)+13),2
 17101  07E5  2FDD               	goto	l7036
 17102  07E6                     l7042:	
 17103                           
 17104                           ;CC2500_B1.c: 148: };
 17105                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 17106  07E6  319B  235F  3187   	fcall	_set_TimeoutCleared
 17107                           
 17108                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 17109  07E9  319D  2565  3187   	fcall	_CC2500_WriteByte
 17110                           
 17111                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 17112  07EC  2FF0               	goto	l7048
 17113  07ED                     l7046:	
 17114                           
 17115                           ;CC2500_B1.c: 152: Timeout_Counter();
 17116  07ED  319D  25A1  3187   	fcall	_Timeout_Counter
 17117  07F0                     l7048:	
 17118  07F0  0020               	movlb	0	; select bank0
 17119  07F1  1D0E               	btfss	14,2	;volatile
 17120  07F2  2FF6               	goto	l7052
 17121  07F3  0021               	movlb	1	; select bank1
 17122  07F4  1D2D               	btfss	(_myMain^(0+128)+13),2
 17123  07F5  2FED               	goto	l7046
 17124  07F6                     l7052:	
 17125                           
 17126                           ;CC2500_B1.c: 153: };
 17127                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 17128  07F6  319B  235F         	fcall	_set_TimeoutCleared
 17129                           
 17130                           ;CC2500_B1.c: 155: RC0 = 0;
 17131  07F8  0020               	movlb	0	; select bank0
 17132  07F9  100E               	bcf	14,0	;volatile
 17133                           
 17134                           ;CC2500_B1.c: 156: RC4 = 1;
 17135  07FA  160E               	bsf	14,4	;volatile
 17136  07FB  0008               	return
 17137  07FC                     __end_of_CC2500_PowerRST:	
 17138                           
 17139                           	psect	text113
 17140  110E                     __ptext113:	
 17141 ;; *************** function _CC2500_InitSetREG *****************
 17142 ;; Defined at:
 17143 ;;		line 162 in file "../src/CC2500_B1.c"
 17144 ;; Parameters:    Size  Location     Type
 17145 ;;		None
 17146 ;; Auto vars:     Size  Location     Type
 17147 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17148 ;;  temp2           1    7[BANK0 ] unsigned char 
 17149 ;;  temp1           1    6[BANK0 ] unsigned char 
 17150 ;; Return value:  Size  Location     Type
 17151 ;;		None               void
 17152 ;; Registers used:
 17153 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17154 ;; Tracked objects:
 17155 ;;		On entry : 0/0
 17156 ;;		On exit  : 0/0
 17157 ;;		Unchanged: 0/0
 17158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17160 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17161 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17162 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17163 ;;Total ram usage:        4 bytes
 17164 ;; Hardware stack levels used:    1
 17165 ;; Hardware stack levels required when called:    7
 17166 ;; This function calls:
 17167 ;;		_CC2500_WriteREG
 17168 ;; This function is called by:
 17169 ;;		_CC2500_PowerOnInitial
 17170 ;; This function uses a non-reentrant model
 17171 ;;
 17172                           
 17173                           
 17174                           ;psect for function _CC2500_InitSetREG
 17175  110E                     _CC2500_InitSetREG:	
 17176                           
 17177                           ;CC2500_B1.c: 163: unsigned char loop_c;
 17178                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 17179                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 17180                           
 17181                           ;incstack = 0
 17182                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17183  110E  0020               	movlb	0	; select bank0
 17184  110F  01A8               	clrf	CC2500_InitSetREG@loop_c
 17185  1110                     L10:	
 17186  1110  302F               	movlw	47
 17187  1111  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17188  1112  1803               	btfsc	3,0
 17189  1113  0008               	return
 17190                           
 17191                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 17192  1114  0828               	movf	CC2500_InitSetREG@loop_c,w
 17193  1115  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17194  1116  0084               	movwf	4
 17195  1117  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17196  1118  1803               	skipnc
 17197  1119  3E01               	addlw	1
 17198  111A  0085               	movwf	5
 17199  111B  0800               	movf	0,w	;code access
 17200  111C  00A5               	movwf	??_CC2500_InitSetREG
 17201  111D  0825               	movf	??_CC2500_InitSetREG,w
 17202  111E  00A6               	movwf	CC2500_InitSetREG@temp1
 17203                           
 17204                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 17205  111F  0828               	movf	CC2500_InitSetREG@loop_c,w
 17206  1120  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17207  1121  0084               	movwf	4
 17208  1122  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17209  1123  1803               	skipnc
 17210  1124  3E01               	addlw	1
 17211  1125  0085               	movwf	5
 17212  1126  0800               	movf	0,w	;code access
 17213  1127  00A5               	movwf	??_CC2500_InitSetREG
 17214  1128  0825               	movf	??_CC2500_InitSetREG,w
 17215  1129  00A7               	movwf	CC2500_InitSetREG@temp2
 17216                           
 17217                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 17218  112A  0827               	movf	CC2500_InitSetREG@temp2,w
 17219  112B  00A5               	movwf	??_CC2500_InitSetREG
 17220  112C  0825               	movf	??_CC2500_InitSetREG,w
 17221  112D  00A2               	movwf	CC2500_WriteREG@value
 17222  112E  0826               	movf	CC2500_InitSetREG@temp1,w
 17223  112F  319F  2778  3191   	fcall	_CC2500_WriteREG
 17224  1132  3001               	movlw	1
 17225  1133  0020               	movlb	0	; select bank0
 17226  1134  00A5               	movwf	??_CC2500_InitSetREG
 17227  1135  0825               	movf	??_CC2500_InitSetREG,w
 17228  1136  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17229  1137  2910               	goto	L10
 17230  1138                     __end_of_CC2500_InitSetREG:	
 17231                           
 17232                           	psect	text114
 17233  1EDA                     __ptext114:	
 17234 ;; *************** function _CC2500_InitPATable *****************
 17235 ;; Defined at:
 17236 ;;		line 177 in file "../src/CC2500_B1.c"
 17237 ;; Parameters:    Size  Location     Type
 17238 ;;		None
 17239 ;; Auto vars:     Size  Location     Type
 17240 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17241 ;;  temp            1    6[BANK0 ] unsigned char 
 17242 ;; Return value:  Size  Location     Type
 17243 ;;		None               void
 17244 ;; Registers used:
 17245 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17246 ;; Tracked objects:
 17247 ;;		On entry : 0/0
 17248 ;;		On exit  : 0/0
 17249 ;;		Unchanged: 0/0
 17250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17252 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17253 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17254 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17255 ;;Total ram usage:        3 bytes
 17256 ;; Hardware stack levels used:    1
 17257 ;; Hardware stack levels required when called:    7
 17258 ;; This function calls:
 17259 ;;		_CC2500_WriteREG
 17260 ;; This function is called by:
 17261 ;;		_CC2500_PowerOnInitial
 17262 ;; This function uses a non-reentrant model
 17263 ;;
 17264                           
 17265                           
 17266                           ;psect for function _CC2500_InitPATable
 17267  1EDA                     _CC2500_InitPATable:	
 17268                           
 17269                           ;CC2500_B1.c: 178: unsigned char loop_d;
 17270                           ;CC2500_B1.c: 179: unsigned char temp;
 17271                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 17272                           
 17273                           ;incstack = 0
 17274                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17275  1EDA  0020               	movlb	0	; select bank0
 17276  1EDB  01A7               	clrf	CC2500_InitPATable@loop_d
 17277  1EDC                     L11:	
 17278  1EDC  3008               	movlw	8
 17279  1EDD  0227               	subwf	CC2500_InitPATable@loop_d,w
 17280  1EDE  1803               	btfsc	3,0
 17281  1EDF  0008               	return
 17282                           
 17283                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 17284  1EE0  0827               	movf	CC2500_InitPATable@loop_d,w
 17285  1EE1  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17286  1EE2  0084               	movwf	4
 17287  1EE3  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17288  1EE4  1803               	skipnc
 17289  1EE5  3E01               	addlw	1
 17290  1EE6  0085               	movwf	5
 17291  1EE7  0800               	movf	0,w	;code access
 17292  1EE8  00A5               	movwf	??_CC2500_InitPATable
 17293  1EE9  0825               	movf	??_CC2500_InitPATable,w
 17294  1EEA  00A6               	movwf	CC2500_InitPATable@temp
 17295                           
 17296                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 17297  1EEB  0826               	movf	CC2500_InitPATable@temp,w
 17298  1EEC  00A5               	movwf	??_CC2500_InitPATable
 17299  1EED  0825               	movf	??_CC2500_InitPATable,w
 17300  1EEE  00A2               	movwf	CC2500_WriteREG@value
 17301  1EEF  303E               	movlw	62
 17302  1EF0  319F  2778  319E   	fcall	_CC2500_WriteREG
 17303  1EF3  3001               	movlw	1
 17304  1EF4  0020               	movlb	0	; select bank0
 17305  1EF5  00A5               	movwf	??_CC2500_InitPATable
 17306  1EF6  0825               	movf	??_CC2500_InitPATable,w
 17307  1EF7  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17308  1EF8  2EDC               	goto	L11
 17309  1EF9                     __end_of_CC2500_InitPATable:	
 17310                           
 17311                           	psect	text115
 17312  1F78                     __ptext115:	
 17313 ;; *************** function _CC2500_WriteREG *****************
 17314 ;; Defined at:
 17315 ;;		line 254 in file "../src/CC2500_B1.c"
 17316 ;; Parameters:    Size  Location     Type
 17317 ;;  w_addr          1    wreg     unsigned char 
 17318 ;;  value           1    2[BANK0 ] unsigned char 
 17319 ;; Auto vars:     Size  Location     Type
 17320 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17321 ;; Return value:  Size  Location     Type
 17322 ;;		None               void
 17323 ;; Registers used:
 17324 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17325 ;; Tracked objects:
 17326 ;;		On entry : 0/0
 17327 ;;		On exit  : 0/0
 17328 ;;		Unchanged: 0/0
 17329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17330 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17331 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17332 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17333 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17334 ;;Total ram usage:        3 bytes
 17335 ;; Hardware stack levels used:    1
 17336 ;; Hardware stack levels required when called:    6
 17337 ;; This function calls:
 17338 ;;		_CC2500_WriteByte
 17339 ;;		_Timeout_Counter
 17340 ;;		_set_TimeoutCleared
 17341 ;; This function is called by:
 17342 ;;		_CC2500_InitSetREG
 17343 ;;		_CC2500_InitPATable
 17344 ;; This function uses a non-reentrant model
 17345 ;;
 17346                           
 17347                           
 17348                           ;psect for function _CC2500_WriteREG
 17349  1F78                     _CC2500_WriteREG:	
 17350                           
 17351                           ;incstack = 0
 17352                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17353                           ;CC2500_WriteREG@w_addr stored from wreg
 17354  1F78  0020               	movlb	0	; select bank0
 17355  1F79  00A4               	movwf	CC2500_WriteREG@w_addr
 17356                           
 17357                           ;CC2500_B1.c: 255: RC4 = 0;
 17358  1F7A  120E               	bcf	14,4	;volatile
 17359                           
 17360                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 17361  1F7B  0824               	movf	CC2500_WriteREG@w_addr,w
 17362  1F7C  00A3               	movwf	??_CC2500_WriteREG
 17363  1F7D  0823               	movf	??_CC2500_WriteREG,w
 17364  1F7E  00FB               	movwf	_SPI0Buffer
 17365                           
 17366                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 17367  1F7F  2F83               	goto	l6710
 17368  1F80                     l6708:	
 17369                           
 17370                           ;CC2500_B1.c: 258: Timeout_Counter();
 17371  1F80  319D  25A1  319F   	fcall	_Timeout_Counter
 17372  1F83                     l6710:	
 17373  1F83  0020               	movlb	0	; select bank0
 17374  1F84  1D0E               	btfss	14,2	;volatile
 17375  1F85  2F89               	goto	l6714
 17376  1F86  0021               	movlb	1	; select bank1
 17377  1F87  1D2D               	btfss	(_myMain^(0+128)+13),2
 17378  1F88  2F80               	goto	l6708
 17379  1F89                     l6714:	
 17380                           
 17381                           ;CC2500_B1.c: 259: };
 17382                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 17383  1F89  319B  235F  319F   	fcall	_set_TimeoutCleared
 17384                           
 17385                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 17386  1F8C  319D  2565  319F   	fcall	_CC2500_WriteByte
 17387                           
 17388                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 17389  1F8F  0020               	movlb	0	; select bank0
 17390  1F90  0822               	movf	CC2500_WriteREG@value,w
 17391  1F91  00A3               	movwf	??_CC2500_WriteREG
 17392  1F92  0823               	movf	??_CC2500_WriteREG,w
 17393  1F93  00FB               	movwf	_SPI0Buffer
 17394                           
 17395                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 17396  1F94  319D  2565         	fcall	_CC2500_WriteByte
 17397                           
 17398                           ;CC2500_B1.c: 265: RC4 = 1;
 17399  1F96  0020               	movlb	0	; select bank0
 17400  1F97  160E               	bsf	14,4	;volatile
 17401  1F98  0008               	return
 17402  1F99                     __end_of_CC2500_WriteREG:	
 17403                           
 17404                           	psect	text116
 17405  1BDA                     __ptext116:	
 17406 ;; *************** function _CC2500_FrequencyCabr *****************
 17407 ;; Defined at:
 17408 ;;		line 204 in file "../src/CC2500_B1.c"
 17409 ;; Parameters:    Size  Location     Type
 17410 ;;		None
 17411 ;; Auto vars:     Size  Location     Type
 17412 ;;		None
 17413 ;; Return value:  Size  Location     Type
 17414 ;;		None               void
 17415 ;; Registers used:
 17416 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17417 ;; Tracked objects:
 17418 ;;		On entry : 0/0
 17419 ;;		On exit  : 0/0
 17420 ;;		Unchanged: 0/0
 17421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17426 ;;Total ram usage:        0 bytes
 17427 ;; Hardware stack levels used:    1
 17428 ;; Hardware stack levels required when called:    7
 17429 ;; This function calls:
 17430 ;;		_CC2500_WriteCommand
 17431 ;;		_DelayTime_1us
 17432 ;; This function is called by:
 17433 ;;		_CC2500_PowerOnInitial
 17434 ;; This function uses a non-reentrant model
 17435 ;;
 17436                           
 17437                           
 17438                           ;psect for function _CC2500_FrequencyCabr
 17439  1BDA                     _CC2500_FrequencyCabr:	
 17440                           
 17441                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 17442                           
 17443                           ;incstack = 0
 17444                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17445  1BDA  3033               	movlw	51
 17446  1BDB  319E  2639  319B   	fcall	_CC2500_WriteCommand
 17447                           
 17448                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 17449  1BDE  30E8               	movlw	232
 17450  1BDF  0020               	movlb	0	; select bank0
 17451  1BE0  00A0               	movwf	DelayTime_1us@count
 17452  1BE1  3003               	movlw	3
 17453  1BE2  00A1               	movwf	DelayTime_1us@count+1
 17454  1BE3  3190  2098         	fcall	_DelayTime_1us
 17455  1BE5  0008               	return
 17456  1BE6                     __end_of_CC2500_FrequencyCabr:	
 17457                           
 17458                           	psect	text117
 17459  1098                     __ptext117:	
 17460 ;; *************** function _DelayTime_1us *****************
 17461 ;; Defined at:
 17462 ;;		line 323 in file "../src/CC2500_B1.c"
 17463 ;; Parameters:    Size  Location     Type
 17464 ;;  count           2    0[BANK0 ] int 
 17465 ;; Auto vars:     Size  Location     Type
 17466 ;;  j               2    4[BANK0 ] unsigned int 
 17467 ;;  i               2    2[BANK0 ] unsigned int 
 17468 ;; Return value:  Size  Location     Type
 17469 ;;		None               void
 17470 ;; Registers used:
 17471 ;;		wreg, status,2
 17472 ;; Tracked objects:
 17473 ;;		On entry : 0/0
 17474 ;;		On exit  : 0/0
 17475 ;;		Unchanged: 0/0
 17476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17477 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17478 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17480 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17481 ;;Total ram usage:        6 bytes
 17482 ;; Hardware stack levels used:    1
 17483 ;; Hardware stack levels required when called:    5
 17484 ;; This function calls:
 17485 ;;		Nothing
 17486 ;; This function is called by:
 17487 ;;		_CC2500_PowerRST
 17488 ;;		_CC2500_FrequencyCabr
 17489 ;; This function uses a non-reentrant model
 17490 ;;
 17491                           
 17492                           
 17493                           ;psect for function _DelayTime_1us
 17494  1098                     _DelayTime_1us:	
 17495                           
 17496                           ;CC2500_B1.c: 324: unsigned int i, j;
 17497                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 17498                           
 17499                           ;incstack = 0
 17500                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17501  1098  3001               	movlw	1
 17502  1099  0020               	movlb	0	; select bank0
 17503  109A  00A2               	movwf	DelayTime_1us@i
 17504  109B  3000               	movlw	0
 17505  109C  00A3               	movwf	DelayTime_1us@i+1
 17506  109D                     l374:	
 17507  109D  0821               	movf	DelayTime_1us@count+1,w
 17508  109E  0223               	subwf	DelayTime_1us@i+1,w
 17509  109F  1D03               	skipz
 17510  10A0  28A3               	goto	u5905
 17511  10A1  0820               	movf	DelayTime_1us@count,w
 17512  10A2  0222               	subwf	DelayTime_1us@i,w
 17513  10A3                     u5905:	
 17514  10A3  1803               	btfsc	3,0
 17515  10A4  0008               	return
 17516                           
 17517                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 17518  10A5  01A4               	clrf	DelayTime_1us@j
 17519  10A6  01A5               	clrf	DelayTime_1us@j+1
 17520  10A7  3000               	movlw	0
 17521  10A8  0225               	subwf	DelayTime_1us@j+1,w
 17522  10A9  3002               	movlw	2
 17523  10AA  1903               	skipnz
 17524  10AB  0224               	subwf	DelayTime_1us@j,w
 17525  10AC  1803               	btfsc	3,0
 17526  10AD  28B9               	goto	l6702
 17527  10AE                     l6700:	
 17528  10AE  3001               	movlw	1
 17529  10AF  07A4               	addwf	DelayTime_1us@j,f
 17530  10B0  3000               	movlw	0
 17531  10B1  3DA5               	addwfc	DelayTime_1us@j+1,f
 17532  10B2  3000               	movlw	0
 17533  10B3  0225               	subwf	DelayTime_1us@j+1,w
 17534  10B4  3002               	movlw	2
 17535  10B5  1903               	skipnz
 17536  10B6  0224               	subwf	DelayTime_1us@j,w
 17537  10B7  1C03               	skipc
 17538  10B8  28AE               	goto	l6700
 17539  10B9                     l6702:	
 17540  10B9  3001               	movlw	1
 17541  10BA  07A2               	addwf	DelayTime_1us@i,f
 17542  10BB  3000               	movlw	0
 17543  10BC  3DA3               	addwfc	DelayTime_1us@i+1,f
 17544  10BD  289D               	goto	l374
 17545  10BE                     __end_of_DelayTime_1us:	
 17546                           
 17547                           	psect	text118
 17548  1B57                     __ptext118:	
 17549 ;; *************** function _CC2500_ClearTXFIFO *****************
 17550 ;; Defined at:
 17551 ;;		line 190 in file "../src/CC2500_B1.c"
 17552 ;; Parameters:    Size  Location     Type
 17553 ;;		None
 17554 ;; Auto vars:     Size  Location     Type
 17555 ;;		None
 17556 ;; Return value:  Size  Location     Type
 17557 ;;		None               void
 17558 ;; Registers used:
 17559 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17560 ;; Tracked objects:
 17561 ;;		On entry : 0/0
 17562 ;;		On exit  : 0/0
 17563 ;;		Unchanged: 0/0
 17564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17568 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17569 ;;Total ram usage:        0 bytes
 17570 ;; Hardware stack levels used:    1
 17571 ;; Hardware stack levels required when called:    7
 17572 ;; This function calls:
 17573 ;;		_CC2500_WriteCommand
 17574 ;; This function is called by:
 17575 ;;		_CC2500_PowerOnInitial
 17576 ;; This function uses a non-reentrant model
 17577 ;;
 17578                           
 17579                           
 17580                           ;psect for function _CC2500_ClearTXFIFO
 17581  1B57                     _CC2500_ClearTXFIFO:	
 17582                           
 17583                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 17584                           
 17585                           ;incstack = 0
 17586                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17587  1B57  303B               	movlw	59
 17588  1B58  319E  2639         	fcall	_CC2500_WriteCommand
 17589  1B5A  0008               	return
 17590  1B5B                     __end_of_CC2500_ClearTXFIFO:	
 17591                           
 17592                           	psect	text119
 17593  1B53                     __ptext119:	
 17594 ;; *************** function _CC2500_ClearRXFIFO *****************
 17595 ;; Defined at:
 17596 ;;		line 197 in file "../src/CC2500_B1.c"
 17597 ;; Parameters:    Size  Location     Type
 17598 ;;		None
 17599 ;; Auto vars:     Size  Location     Type
 17600 ;;		None
 17601 ;; Return value:  Size  Location     Type
 17602 ;;		None               void
 17603 ;; Registers used:
 17604 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17605 ;; Tracked objects:
 17606 ;;		On entry : 0/0
 17607 ;;		On exit  : 0/0
 17608 ;;		Unchanged: 0/0
 17609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17614 ;;Total ram usage:        0 bytes
 17615 ;; Hardware stack levels used:    1
 17616 ;; Hardware stack levels required when called:    7
 17617 ;; This function calls:
 17618 ;;		_CC2500_WriteCommand
 17619 ;; This function is called by:
 17620 ;;		_CC2500_PowerOnInitial
 17621 ;; This function uses a non-reentrant model
 17622 ;;
 17623                           
 17624                           
 17625                           ;psect for function _CC2500_ClearRXFIFO
 17626  1B53                     _CC2500_ClearRXFIFO:	
 17627                           
 17628                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 17629                           
 17630                           ;incstack = 0
 17631                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17632  1B53  303A               	movlw	58
 17633  1B54  319E  2639         	fcall	_CC2500_WriteCommand
 17634  1B56  0008               	return
 17635  1B57                     __end_of_CC2500_ClearRXFIFO:	
 17636                           
 17637                           	psect	text120
 17638  1E39                     __ptext120:	
 17639 ;; *************** function _CC2500_WriteCommand *****************
 17640 ;; Defined at:
 17641 ;;		line 288 in file "../src/CC2500_B1.c"
 17642 ;; Parameters:    Size  Location     Type
 17643 ;;  command         1    wreg     unsigned char 
 17644 ;; Auto vars:     Size  Location     Type
 17645 ;;  command         1    3[BANK0 ] unsigned char 
 17646 ;; Return value:  Size  Location     Type
 17647 ;;		None               void
 17648 ;; Registers used:
 17649 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17650 ;; Tracked objects:
 17651 ;;		On entry : 0/0
 17652 ;;		On exit  : 0/0
 17653 ;;		Unchanged: 0/0
 17654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17656 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17657 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17658 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17659 ;;Total ram usage:        2 bytes
 17660 ;; Hardware stack levels used:    1
 17661 ;; Hardware stack levels required when called:    6
 17662 ;; This function calls:
 17663 ;;		_CC2500_WriteByte
 17664 ;;		_Timeout_Counter
 17665 ;;		_set_TimeoutCleared
 17666 ;; This function is called by:
 17667 ;;		_CC2500_TxData
 17668 ;;		_CC2500_ClearTXFIFO
 17669 ;;		_CC2500_ClearRXFIFO
 17670 ;;		_CC2500_FrequencyCabr
 17671 ;;		_CC2500_SIDLEMode
 17672 ;;		_setRF_Main
 17673 ;;		_RF_RxDisable
 17674 ;; This function uses a non-reentrant model
 17675 ;;
 17676                           
 17677                           
 17678                           ;psect for function _CC2500_WriteCommand
 17679  1E39                     _CC2500_WriteCommand:	
 17680                           
 17681                           ;incstack = 0
 17682                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17683                           ;CC2500_WriteCommand@command stored from wreg
 17684  1E39  0020               	movlb	0	; select bank0
 17685  1E3A  00A3               	movwf	CC2500_WriteCommand@command
 17686                           
 17687                           ;CC2500_B1.c: 289: RC4 = 0;
 17688  1E3B  120E               	bcf	14,4	;volatile
 17689                           
 17690                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 17691  1E3C  0823               	movf	CC2500_WriteCommand@command,w
 17692  1E3D  00A2               	movwf	??_CC2500_WriteCommand
 17693  1E3E  0822               	movf	??_CC2500_WriteCommand,w
 17694  1E3F  00FB               	movwf	_SPI0Buffer
 17695                           
 17696                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 17697  1E40  2E44               	goto	l6406
 17698  1E41                     l6404:	
 17699                           
 17700                           ;CC2500_B1.c: 293: Timeout_Counter();
 17701  1E41  319D  25A1  319E   	fcall	_Timeout_Counter
 17702  1E44                     l6406:	
 17703  1E44  0020               	movlb	0	; select bank0
 17704  1E45  1D0E               	btfss	14,2	;volatile
 17705  1E46  2E4A               	goto	l6410
 17706  1E47  0021               	movlb	1	; select bank1
 17707  1E48  1D2D               	btfss	(_myMain^(0+128)+13),2
 17708  1E49  2E41               	goto	l6404
 17709  1E4A                     l6410:	
 17710                           
 17711                           ;CC2500_B1.c: 294: };
 17712                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 17713  1E4A  319B  235F  319E   	fcall	_set_TimeoutCleared
 17714                           
 17715                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 17716  1E4D  319D  2565         	fcall	_CC2500_WriteByte
 17717                           
 17718                           ;CC2500_B1.c: 298: RC4 = 1;
 17719  1E4F  0020               	movlb	0	; select bank0
 17720  1E50  160E               	bsf	14,4	;volatile
 17721  1E51  0008               	return
 17722  1E52                     __end_of_CC2500_WriteCommand:	
 17723                           
 17724                           	psect	text121
 17725  1B5F                     __ptext121:	
 17726 ;; *************** function _set_TimeoutCleared *****************
 17727 ;; Defined at:
 17728 ;;		line 272 in file "../src/main_B1.c"
 17729 ;; Parameters:    Size  Location     Type
 17730 ;;		None
 17731 ;; Auto vars:     Size  Location     Type
 17732 ;;		None
 17733 ;; Return value:  Size  Location     Type
 17734 ;;		None               void
 17735 ;; Registers used:
 17736 ;;		status,2
 17737 ;; Tracked objects:
 17738 ;;		On entry : 0/0
 17739 ;;		On exit  : 0/0
 17740 ;;		Unchanged: 0/0
 17741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17746 ;;Total ram usage:        0 bytes
 17747 ;; Hardware stack levels used:    1
 17748 ;; Hardware stack levels required when called:    5
 17749 ;; This function calls:
 17750 ;;		Nothing
 17751 ;; This function is called by:
 17752 ;;		_CC2500_TxData
 17753 ;;		_CC2500_RxData
 17754 ;;		_CC2500_PowerRST
 17755 ;;		_CC2500_WriteREG
 17756 ;;		_CC2500_WriteCommand
 17757 ;;		_CC2500_ReadStatus
 17758 ;;		_getAD
 17759 ;;		_TouchPower
 17760 ;;		_CC2500_ReadREG
 17761 ;; This function uses a non-reentrant model
 17762 ;;
 17763                           
 17764                           
 17765                           ;psect for function _set_TimeoutCleared
 17766  1B5F                     _set_TimeoutCleared:	
 17767                           
 17768                           ;main_B1.c: 273: myMain.Timeout = 0;
 17769                           
 17770                           ;incstack = 0
 17771                           ; Regs used in _set_TimeoutCleared: [status,2]
 17772  1B5F  0021               	movlb	1	; select bank1
 17773  1B60  112D               	bcf	(_myMain^(0+128)+13),2
 17774                           
 17775                           ;main_B1.c: 274: myMain.Timeout_Counter = 0;
 17776  1B61  01AE               	clrf	(_myMain^(0+128)+14)
 17777  1B62  01AF               	clrf	((_myMain+1)^(0+128)+14)
 17778  1B63  0008               	return
 17779  1B64                     __end_of_set_TimeoutCleared:	
 17780                           
 17781                           	psect	text122
 17782  1DA1                     __ptext122:	
 17783 ;; *************** function _Timeout_Counter *****************
 17784 ;; Defined at:
 17785 ;;		line 263 in file "../src/main_B1.c"
 17786 ;; Parameters:    Size  Location     Type
 17787 ;;		None
 17788 ;; Auto vars:     Size  Location     Type
 17789 ;;		None
 17790 ;; Return value:  Size  Location     Type
 17791 ;;		None               void
 17792 ;; Registers used:
 17793 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17794 ;; Tracked objects:
 17795 ;;		On entry : 0/0
 17796 ;;		On exit  : 0/0
 17797 ;;		Unchanged: 0/0
 17798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17803 ;;Total ram usage:        0 bytes
 17804 ;; Hardware stack levels used:    1
 17805 ;; Hardware stack levels required when called:    5
 17806 ;; This function calls:
 17807 ;;		Nothing
 17808 ;; This function is called by:
 17809 ;;		_CC2500_TxData
 17810 ;;		_CC2500_RxData
 17811 ;;		_CC2500_PowerRST
 17812 ;;		_CC2500_WriteREG
 17813 ;;		_CC2500_WriteCommand
 17814 ;;		_CC2500_ReadStatus
 17815 ;;		_getAD
 17816 ;;		_TouchPower
 17817 ;;		_CC2500_ReadREG
 17818 ;; This function uses a non-reentrant model
 17819 ;;
 17820                           
 17821                           
 17822                           ;psect for function _Timeout_Counter
 17823  1DA1                     _Timeout_Counter:	
 17824                           
 17825                           ;main_B1.c: 264: myMain.Timeout_Counter++;
 17826                           
 17827                           ;incstack = 0
 17828                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17829  1DA1  3001               	movlw	1
 17830  1DA2  0021               	movlb	1	; select bank1
 17831  1DA3  07AE               	addwf	(_myMain^(0+128)+14),f
 17832  1DA4  3000               	movlw	0
 17833  1DA5  3DAF               	addwfc	((_myMain+1)^(0+128)+14),f
 17834                           
 17835                           ;main_B1.c: 265: if (myMain.Timeout_Counter == 10000) {
 17836  1DA6  300E               	movlw	14
 17837  1DA7  3EA0               	addlw	_myMain& (0+255)
 17838  1DA8  0086               	movwf	6
 17839  1DA9  0187               	clrf	7
 17840  1DAA  3F40               	moviw [0]fsr1
 17841  1DAB  3A10               	xorlw	16
 17842  1DAC  1D03               	skipz
 17843  1DAD  2DB0               	goto	u5255
 17844  1DAE  3F41               	moviw [1]fsr1
 17845  1DAF  3A27               	xorlw	39
 17846  1DB0                     u5255:	
 17847  1DB0  1D03               	skipz
 17848  1DB1  0008               	return
 17849                           
 17850                           ;main_B1.c: 266: myMain.Timeout_Counter = 0;
 17851  1DB2  01AE               	clrf	(_myMain^(0+128)+14)
 17852  1DB3  01AF               	clrf	((_myMain+1)^(0+128)+14)
 17853                           
 17854                           ;main_B1.c: 267: myMain.Timeout = 1;
 17855  1DB4  152D               	bsf	(_myMain^(0+128)+13),2
 17856  1DB5  0008               	return
 17857  1DB6                     __end_of_Timeout_Counter:	
 17858                           
 17859                           	psect	text123
 17860  1D65                     __ptext123:	
 17861 ;; *************** function _CC2500_WriteByte *****************
 17862 ;; Defined at:
 17863 ;;		line 222 in file "../src/CC2500_B1.c"
 17864 ;; Parameters:    Size  Location     Type
 17865 ;;		None
 17866 ;; Auto vars:     Size  Location     Type
 17867 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17868 ;; Return value:  Size  Location     Type
 17869 ;;		None               void
 17870 ;; Registers used:
 17871 ;;		wreg, status,2, status,0
 17872 ;; Tracked objects:
 17873 ;;		On entry : 0/0
 17874 ;;		On exit  : 0/0
 17875 ;;		Unchanged: 0/0
 17876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17878 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17879 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17880 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17881 ;;Total ram usage:        2 bytes
 17882 ;; Hardware stack levels used:    1
 17883 ;; Hardware stack levels required when called:    5
 17884 ;; This function calls:
 17885 ;;		Nothing
 17886 ;; This function is called by:
 17887 ;;		_CC2500_TxData
 17888 ;;		_CC2500_RxData
 17889 ;;		_CC2500_PowerRST
 17890 ;;		_CC2500_WriteREG
 17891 ;;		_CC2500_WriteCommand
 17892 ;;		_CC2500_ReadStatus
 17893 ;;		_CC2500_ReadREG
 17894 ;; This function uses a non-reentrant model
 17895 ;;
 17896                           
 17897                           
 17898                           ;psect for function _CC2500_WriteByte
 17899  1D65                     _CC2500_WriteByte:	
 17900                           
 17901                           ;CC2500_B1.c: 223: unsigned char loop_a;
 17902                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 17903                           
 17904                           ;incstack = 0
 17905                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17906  1D65  0020               	movlb	0	; select bank0
 17907  1D66  01A1               	clrf	CC2500_WriteByte@loop_a
 17908  1D67                     L12:	
 17909  1D67  3008               	movlw	8
 17910  1D68  0221               	subwf	CC2500_WriteByte@loop_a,w
 17911  1D69  1803               	btfsc	3,0
 17912  1D6A  0008               	return
 17913                           
 17914                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 17915  1D6B  1FFB               	btfss	_SPI0Buffer,7
 17916  1D6C  2D6F               	goto	l330
 17917                           
 17918                           ;CC2500_B1.c: 226: RC0 = 1;
 17919  1D6D  140E               	bsf	14,0	;volatile
 17920  1D6E  2D70               	goto	l331
 17921  1D6F                     l330:	
 17922                           
 17923                           ;CC2500_B1.c: 227: else
 17924                           ;CC2500_B1.c: 228: RC0 = 0;
 17925  1D6F  100E               	bcf	14,0	;volatile
 17926  1D70                     l331:	
 17927                           
 17928                           ;CC2500_B1.c: 229: RC1 = 1;
 17929  1D70  148E               	bsf	14,1	;volatile
 17930                           
 17931                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 17932  1D71  1003               	clrc
 17933  1D72  0DFB               	rlf	_SPI0Buffer,f
 17934                           
 17935                           ;CC2500_B1.c: 231: RC1 = 0;
 17936  1D73  108E               	bcf	14,1	;volatile
 17937  1D74  3001               	movlw	1
 17938  1D75  00A0               	movwf	??_CC2500_WriteByte
 17939  1D76  0820               	movf	??_CC2500_WriteByte,w
 17940  1D77  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17941  1D78  2D67               	goto	L12
 17942  1D79                     __end_of_CC2500_WriteByte:	
 17943                           
 17944                           	psect	text124
 17945  1469                     __ptext124:	
 17946 ;; *************** function _Buzzer_Main *****************
 17947 ;; Defined at:
 17948 ;;		line 46 in file "../src/Buzzer_B1.c"
 17949 ;; Parameters:    Size  Location     Type
 17950 ;;		None
 17951 ;; Auto vars:     Size  Location     Type
 17952 ;;		None
 17953 ;; Return value:  Size  Location     Type
 17954 ;;		None               void
 17955 ;; Registers used:
 17956 ;;		wreg, status,2, status,0
 17957 ;; Tracked objects:
 17958 ;;		On entry : 0/0
 17959 ;;		On exit  : 0/0
 17960 ;;		Unchanged: 0/0
 17961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17964 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17965 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17966 ;;Total ram usage:        1 bytes
 17967 ;; Hardware stack levels used:    1
 17968 ;; Hardware stack levels required when called:    5
 17969 ;; This function calls:
 17970 ;;		Nothing
 17971 ;; This function is called by:
 17972 ;;		_main
 17973 ;; This function uses a non-reentrant model
 17974 ;;
 17975                           
 17976                           
 17977                           ;psect for function _Buzzer_Main
 17978  1469                     _Buzzer_Main:	
 17979                           
 17980                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17981                           
 17982                           ;incstack = 0
 17983                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17984  1469  0021               	movlb	1	; select bank1
 17985  146A  1CB0               	btfss	_Buz1^(0+128),1
 17986  146B  0008               	return
 17987                           
 17988                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17989  146C  3001               	movlw	1
 17990  146D  07B1               	addwf	(_Buz1^(0+128)+1),f
 17991  146E  3000               	movlw	0
 17992  146F  3DB2               	addwfc	((_Buz1+1)^(0+128)+1),f
 17993                           
 17994                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17995  1470  0837               	movf	((_Buz1+1)^(0+128)+6),w
 17996  1471  0232               	subwf	((_Buz1+1)^(0+128)+1),w
 17997  1472  1D03               	skipz
 17998  1473  2C76               	goto	u7525
 17999  1474  0836               	movf	(_Buz1^(0+128)+6),w
 18000  1475  0231               	subwf	(_Buz1^(0+128)+1),w
 18001  1476                     u7525:	
 18002  1476  1C03               	skipc
 18003  1477  0008               	return
 18004                           
 18005                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18006  1478  01B1               	clrf	(_Buz1^(0+128)+1)
 18007  1479  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 18008                           
 18009                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18010  147A  12B0               	bcf	_Buz1^(0+128),5
 18011  147B  0020               	movlb	0	; select bank0
 18012  147C  1D8D               	btfss	13,3	;volatile
 18013  147D  2C80               	goto	l7696
 18014  147E  0021               	movlb	1	; select bank1
 18015  147F  16B0               	bsf	_Buz1^(0+128),5
 18016  1480                     l7696:	
 18017                           
 18018                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18019  1480  0021               	movlb	1	; select bank1
 18020  1481  1AB0               	btfsc	_Buz1^(0+128),5
 18021  1482  2CAC               	goto	l106
 18022                           
 18023                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18024  1483  08B3               	movf	(_Buz1^(0+128)+3),f
 18025  1484  1D03               	skipz
 18026  1485  2CA8               	goto	l107
 18027                           
 18028                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18029  1486  1DB0               	btfss	_Buz1^(0+128),3
 18030  1487  2C96               	goto	l108
 18031                           
 18032                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18033  1488  11B0               	bcf	_Buz1^(0+128),3
 18034                           
 18035                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18036  1489  0834               	movf	(_Buz1^(0+128)+4),w
 18037  148A  0020               	movlb	0	; select bank0
 18038  148B  00A0               	movwf	??_Buzzer_Main
 18039  148C  0820               	movf	??_Buzzer_Main,w
 18040  148D  0021               	movlb	1	; select bank1
 18041  148E  00B3               	movwf	(_Buz1^(0+128)+3)
 18042                           
 18043                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18044  148F  0839               	movf	((_Buz1+1)^(0+128)+8),w
 18045  1490  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 18046  1491  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 18047  1492  0838               	movf	(_Buz1^(0+128)+8),w
 18048  1493  01B6               	clrf	(_Buz1^(0+128)+6)
 18049  1494  07B6               	addwf	(_Buz1^(0+128)+6),f
 18050                           
 18051                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18052  1495  0008               	return
 18053  1496                     l108:	
 18054  1496  1E30               	btfss	_Buz1^(0+128),4
 18055  1497  2CA6               	goto	l110
 18056                           
 18057                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18058  1498  1230               	bcf	_Buz1^(0+128),4
 18059                           
 18060                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18061  1499  0835               	movf	(_Buz1^(0+128)+5),w
 18062  149A  0020               	movlb	0	; select bank0
 18063  149B  00A0               	movwf	??_Buzzer_Main
 18064  149C  0820               	movf	??_Buzzer_Main,w
 18065  149D  0021               	movlb	1	; select bank1
 18066  149E  00B3               	movwf	(_Buz1^(0+128)+3)
 18067                           
 18068                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18069  149F  083B               	movf	((_Buz1+1)^(0+128)+10),w
 18070  14A0  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 18071  14A1  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 18072  14A2  083A               	movf	(_Buz1^(0+128)+10),w
 18073  14A3  01B6               	clrf	(_Buz1^(0+128)+6)
 18074  14A4  07B6               	addwf	(_Buz1^(0+128)+6),f
 18075                           
 18076                           ;Buzzer_B1.c: 62: } else {
 18077  14A5  0008               	return
 18078  14A6                     l110:	
 18079                           
 18080                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18081  14A6  10B0               	bcf	_Buz1^(0+128),1
 18082                           
 18083                           ;Buzzer_B1.c: 64: }
 18084                           ;Buzzer_B1.c: 65: } else {
 18085  14A7  0008               	return
 18086  14A8                     l107:	
 18087                           
 18088                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18089  14A8  16B0               	bsf	_Buz1^(0+128),5
 18090                           
 18091                           ;Buzzer_B1.c: 68: RB3 = 1;
 18092  14A9  0020               	movlb	0	; select bank0
 18093  14AA  158D               	bsf	13,3	;volatile
 18094                           
 18095                           ;Buzzer_B1.c: 69: }
 18096                           ;Buzzer_B1.c: 70: } else {
 18097  14AB  0008               	return
 18098  14AC                     l106:	
 18099                           
 18100                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18101  14AC  12B0               	bcf	_Buz1^(0+128),5
 18102                           
 18103                           ;Buzzer_B1.c: 73: RB3 = 0;
 18104  14AD  0020               	movlb	0	; select bank0
 18105  14AE  118D               	bcf	13,3	;volatile
 18106                           
 18107                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18108  14AF  3001               	movlw	1
 18109  14B0  0021               	movlb	1	; select bank1
 18110  14B1  02B3               	subwf	(_Buz1^(0+128)+3),f
 18111  14B2  0008               	return
 18112  14B3                     __end_of_Buzzer_Main:	
 18113                           
 18114                           	psect	text125
 18115  1B44                     __ptext125:	
 18116 ;; *************** function _Buzzer_Initialization *****************
 18117 ;; Defined at:
 18118 ;;		line 11 in file "../src/Buzzer_B1.c"
 18119 ;; Parameters:    Size  Location     Type
 18120 ;;		None
 18121 ;; Auto vars:     Size  Location     Type
 18122 ;;		None
 18123 ;; Return value:  Size  Location     Type
 18124 ;;		None               void
 18125 ;; Registers used:
 18126 ;;		None
 18127 ;; Tracked objects:
 18128 ;;		On entry : 0/0
 18129 ;;		On exit  : 0/0
 18130 ;;		Unchanged: 0/0
 18131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18136 ;;Total ram usage:        0 bytes
 18137 ;; Hardware stack levels used:    1
 18138 ;; Hardware stack levels required when called:    5
 18139 ;; This function calls:
 18140 ;;		Nothing
 18141 ;; This function is called by:
 18142 ;;		_main
 18143 ;; This function uses a non-reentrant model
 18144 ;;
 18145                           
 18146                           
 18147                           ;psect for function _Buzzer_Initialization
 18148  1B44                     _Buzzer_Initialization:	
 18149                           
 18150                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18151                           
 18152                           ;incstack = 0
 18153                           ; Regs used in _Buzzer_Initialization: []
 18154  1B44  0021               	movlb	1	; select bank1
 18155  1B45  1430               	bsf	_Buz1^(0+128),0
 18156  1B46  0008               	return
 18157  1B47                     __end_of_Buzzer_Initialization:	
 18158                           
 18159                           	psect	intentry
 18160  0004                     __pintentry:	
 18161 ;; *************** function _ISR *****************
 18162 ;; Defined at:
 18163 ;;		line 107 in file "../src/MCU_B1.c"
 18164 ;; Parameters:    Size  Location     Type
 18165 ;;		None
 18166 ;; Auto vars:     Size  Location     Type
 18167 ;;		None
 18168 ;; Return value:  Size  Location     Type
 18169 ;;		None               void
 18170 ;; Registers used:
 18171 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18172 ;; Tracked objects:
 18173 ;;		On entry : 0/0
 18174 ;;		On exit  : 0/0
 18175 ;;		Unchanged: 0/0
 18176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18179 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18180 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18181 ;;Total ram usage:        1 bytes
 18182 ;; Hardware stack levels used:    1
 18183 ;; Hardware stack levels required when called:    4
 18184 ;; This function calls:
 18185 ;;		_IOC_ISR
 18186 ;;		_TMR1_ISR
 18187 ;; This function is called by:
 18188 ;;		Interrupt level 1
 18189 ;; This function uses a non-reentrant model
 18190 ;;
 18191                           
 18192  0004                     _ISR:	
 18193                           
 18194                           ;incstack = 0
 18195                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18196  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18197  0005  3180               	pagesel	$
 18198  0006  0020               	movlb	0	; select bank0
 18199  0007  087F               	movf	127,w
 18200  0008  00F7               	movwf	??_ISR
 18201                           
 18202                           ;MCU_B1.c: 109: IOC_ISR();
 18203  0009  319C  243B  3180   	fcall	_IOC_ISR
 18204                           
 18205                           ;MCU_B1.c: 111: ;;
 18206                           ;MCU_B1.c: 113: TMR1_ISR();
 18207  000C  3190  20E5         	fcall	_TMR1_ISR
 18208  000E  0877               	movf	??_ISR,w
 18209  000F  0020               	movlb	0	; select bank0
 18210  0010  00FF               	movwf	127
 18211  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18212  0012  0009               	retfie
 18213  0013                     __end_of_ISR:	
 18214                           
 18215                           	psect	text127
 18216  10E5                     __ptext127:	
 18217 ;; *************** function _TMR1_ISR *****************
 18218 ;; Defined at:
 18219 ;;		line 209 in file "../src/MCU_B1.c"
 18220 ;; Parameters:    Size  Location     Type
 18221 ;;		None
 18222 ;; Auto vars:     Size  Location     Type
 18223 ;;		None
 18224 ;; Return value:  Size  Location     Type
 18225 ;;		None               void
 18226 ;; Registers used:
 18227 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18228 ;; Tracked objects:
 18229 ;;		On entry : 0/0
 18230 ;;		On exit  : 0/0
 18231 ;;		Unchanged: 0/0
 18232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18237 ;;Total ram usage:        0 bytes
 18238 ;; Hardware stack levels used:    1
 18239 ;; Hardware stack levels required when called:    2
 18240 ;; This function calls:
 18241 ;;		_setDimmerLights_IntrControl
 18242 ;; This function is called by:
 18243 ;;		_ISR
 18244 ;; This function uses a non-reentrant model
 18245 ;;
 18246                           
 18247                           
 18248                           ;psect for function _TMR1_ISR
 18249  10E5                     _TMR1_ISR:	
 18250                           
 18251                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18252                           
 18253                           ;incstack = 0
 18254                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18255  10E5  0021               	movlb	1	; select bank1
 18256  10E6  1C11               	btfss	17,0	;volatile
 18257  10E7  0008               	return
 18258  10E8  0020               	movlb	0	; select bank0
 18259  10E9  1C11               	btfss	17,0	;volatile
 18260  10EA  0008               	return
 18261                           
 18262                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18263  10EB  30FA               	movlw	250
 18264  10EC  0097               	movwf	23	;volatile
 18265                           
 18266                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18267  10ED  3038               	movlw	56
 18268  10EE  0096               	movwf	22	;volatile
 18269                           
 18270                           ;MCU_B1.c: 214: TMR1IF = 0;
 18271  10EF  1011               	bcf	17,0	;volatile
 18272                           
 18273                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18274  10F0  3001               	movlw	1
 18275  10F1  3182  22FE  3190   	fcall	_setDimmerLights_IntrControl
 18276                           
 18277                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18278  10F4  3002               	movlw	2
 18279  10F5  3182  22FE  3190   	fcall	_setDimmerLights_IntrControl
 18280                           
 18281                           ;MCU_B1.c: 234: Timer1.Count++;
 18282  10F8  3001               	movlw	1
 18283  10F9  0022               	movlb	2	; select bank2
 18284  10FA  07A4               	addwf	(_Timer1^(0+256)+1),f
 18285  10FB  3000               	movlw	0
 18286  10FC  3DA5               	addwfc	((_Timer1+1)^(0+256)+1),f
 18287                           
 18288                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 18289  10FD  3001               	movlw	1
 18290  10FE  3E23               	addlw	_Timer1& (0+255)
 18291  10FF  0086               	movwf	6
 18292  1100  3001               	movlw	1	; select bank2/3
 18293  1101  0087               	movwf	7
 18294  1102  3F40               	moviw [0]fsr1
 18295  1103  3A64               	xorlw	100
 18296  1104  1D03               	skipz
 18297  1105  2908               	goto	u768_25
 18298  1106  3F41               	moviw [1]fsr1
 18299  1107  3A00               	xorlw	0
 18300  1108                     u768_25:	
 18301  1108  1D03               	skipz
 18302  1109  0008               	return
 18303                           
 18304                           ;MCU_B1.c: 236: {
 18305                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18306  110A  01A4               	clrf	(_Timer1^(0+256)+1)
 18307  110B  01A5               	clrf	((_Timer1+1)^(0+256)+1)
 18308                           
 18309                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18310  110C  1423               	bsf	_Timer1^(0+256),0
 18311  110D  0008               	return
 18312  110E                     __end_of_TMR1_ISR:	
 18313                           
 18314                           	psect	text128
 18315  02FE                     __ptext128:	
 18316 ;; *************** function _setDimmerLights_IntrControl *****************
 18317 ;; Defined at:
 18318 ;;		line 92 in file "../src/Dimmer_B1.c"
 18319 ;; Parameters:    Size  Location     Type
 18320 ;;  lights          1    wreg     unsigned char 
 18321 ;; Auto vars:     Size  Location     Type
 18322 ;;  lights          1    6[COMMON] unsigned char 
 18323 ;; Return value:  Size  Location     Type
 18324 ;;		None               void
 18325 ;; Registers used:
 18326 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18327 ;; Tracked objects:
 18328 ;;		On entry : 0/0
 18329 ;;		On exit  : 0/0
 18330 ;;		Unchanged: 0/0
 18331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18333 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18334 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18335 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18336 ;;Total ram usage:        5 bytes
 18337 ;; Hardware stack levels used:    1
 18338 ;; Hardware stack levels required when called:    1
 18339 ;; This function calls:
 18340 ;;		_DimmerIntrPointSelect
 18341 ;; This function is called by:
 18342 ;;		_TMR1_ISR
 18343 ;; This function uses a non-reentrant model
 18344 ;;
 18345                           
 18346                           
 18347                           ;psect for function _setDimmerLights_IntrControl
 18348  02FE                     _setDimmerLights_IntrControl:	
 18349                           
 18350                           ;incstack = 0
 18351                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18352                           ;setDimmerLights_IntrControl@lights stored from wreg
 18353  02FE  00F6               	movwf	setDimmerLights_IntrControl@lights
 18354                           
 18355                           ;Dimmer_B1.c: 228: DimmerIntrPointSelect(lights);
 18356  02FF  0876               	movf	setDimmerLights_IntrControl@lights,w
 18357  0300  319C  24BD  3182   	fcall	_DimmerIntrPointSelect
 18358                           
 18359                           ;Dimmer_B1.c: 229: if (DimmerLightsIntr->GO == 1) {
 18360  0303  0879               	movf	_DimmerLightsIntr,w
 18361  0304  0086               	movwf	6
 18362  0305  3001               	movlw	1	; select bank2/3
 18363  0306  0087               	movwf	7
 18364  0307  1C01               	btfss	1,0
 18365  0308  2B60               	goto	i1l7144
 18366                           
 18367                           ;Dimmer_B1.c: 230: DimmerLightsIntr->Count++;
 18368  0309  3001               	movlw	1
 18369  030A  00F2               	movwf	??_setDimmerLights_IntrControl
 18370  030B  0879               	movf	_DimmerLightsIntr,w
 18371  030C  3E03               	addlw	3
 18372  030D  0086               	movwf	6
 18373  030E  3001               	movlw	1	; select bank2/3
 18374  030F  0087               	movwf	7
 18375  0310  0872               	movf	??_setDimmerLights_IntrControl,w
 18376  0311  0781               	addwf	1,f
 18377                           
 18378                           ;Dimmer_B1.c: 231: if (DimmerLightsIntr->Count
 18379                           ;Dimmer_B1.c: 232: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 18380  0312  0022               	movlb	2	; select bank2
 18381  0313  0822               	movf	(_Dimmer^(0+256)+2),w
 18382  0314  00F2               	movwf	??_setDimmerLights_IntrControl
 18383  0315  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18384  0316  09F2               	comf	??_setDimmerLights_IntrControl,f
 18385  0317  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18386  0318  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18387  0319  1903               	skipnz
 18388  031A  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18389  031B  0879               	movf	_DimmerLightsIntr,w
 18390  031C  3E04               	addlw	4
 18391  031D  0086               	movwf	6
 18392  031E  3001               	movlw	1	; select bank2/3
 18393  031F  0087               	movwf	7
 18394  0320  0801               	movf	1,w
 18395  0321  0772               	addwf	??_setDimmerLights_IntrControl,w
 18396  0322  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18397  0323  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18398  0324  1803               	skipnc
 18399  0325  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18400  0326  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18401  0327  0879               	movf	_DimmerLightsIntr,w
 18402  0328  3E03               	addlw	3
 18403  0329  0086               	movwf	6
 18404  032A  3001               	movlw	1	; select bank2/3
 18405  032B  0087               	movwf	7
 18406  032C  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18407  032D  3A80               	xorlw	128
 18408  032E  3C80               	sublw	128
 18409  032F  1D03               	skipz
 18410  0330  2B33               	goto	u653_25
 18411  0331  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18412  0332  0201               	subwf	1,w
 18413  0333                     u653_25:	
 18414  0333  1C03               	skipc
 18415  0334  0008               	return
 18416                           
 18417                           ;Dimmer_B1.c: 233: DimmerLightsIntr->Count = 0;
 18418  0335  0879               	movf	_DimmerLightsIntr,w
 18419  0336  3E03               	addlw	3
 18420  0337  0086               	movwf	6
 18421  0338  3001               	movlw	1	; select bank2/3
 18422  0339  0087               	movwf	7
 18423  033A  0181               	clrf	1
 18424                           
 18425                           ;Dimmer_B1.c: 234: DimmerLightsIntr->GO = 0;
 18426  033B  0879               	movf	_DimmerLightsIntr,w
 18427  033C  0086               	movwf	6
 18428  033D  3001               	movlw	1	; select bank2/3
 18429  033E  0087               	movwf	7
 18430  033F  1001               	bcf	1,0
 18431                           
 18432                           ;Dimmer_B1.c: 235: DimmerLightsIntr->Flag = 1;
 18433  0340  0879               	movf	_DimmerLightsIntr,w
 18434  0341  3E08               	addlw	8
 18435  0342  0086               	movwf	6
 18436  0343  3001               	movlw	1	; select bank2/3
 18437  0344  0087               	movwf	7
 18438  0345  1401               	bsf	1,0
 18439                           
 18440                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->MOSFET == 1) {
 18441  0346  0879               	movf	_DimmerLightsIntr,w
 18442  0347  3E09               	addlw	9
 18443  0348  0086               	movwf	6
 18444  0349  3001               	movlw	1	; select bank2/3
 18445  034A  0087               	movwf	7
 18446  034B  1E01               	btfss	1,4
 18447  034C  0008               	return
 18448                           
 18449                           ;Dimmer_B1.c: 237: DimmerLightsIntr->MOSFET = 0;
 18450  034D  0879               	movf	_DimmerLightsIntr,w
 18451  034E  3E09               	addlw	9
 18452  034F  0086               	movwf	6
 18453  0350  3001               	movlw	1	; select bank2/3
 18454  0351  0087               	movwf	7
 18455  0352  1201               	bcf	1,4
 18456                           
 18457                           ;Dimmer_B1.c: 239: if (lights == 1) {
 18458  0353  0876               	movf	setDimmerLights_IntrControl@lights,w
 18459  0354  3A01               	xorlw	1
 18460  0355  1D03               	skipz
 18461  0356  2B59               	goto	i1l7140
 18462                           
 18463                           ;Dimmer_B1.c: 240: RA7 = 0;
 18464  0357  0020               	movlb	0	; select bank0
 18465  0358  138C               	bcf	12,7	;volatile
 18466  0359                     i1l7140:	
 18467                           ;Dimmer_B1.c: 241: ;;
 18468                           
 18469                           
 18470                           ;Dimmer_B1.c: 242: }
 18471                           ;Dimmer_B1.c: 245: if (lights == 2) {
 18472  0359  0876               	movf	setDimmerLights_IntrControl@lights,w
 18473  035A  3A02               	xorlw	2
 18474  035B  1D03               	skipz
 18475  035C  0008               	return
 18476                           
 18477                           ;Dimmer_B1.c: 246: RB4 = 0;
 18478  035D  0020               	movlb	0	; select bank0
 18479  035E  120D               	bcf	13,4	;volatile
 18480                           
 18481                           ;Dimmer_B1.c: 247: }
 18482                           ;Dimmer_B1.c: 249: }
 18483                           ;Dimmer_B1.c: 250: }
 18484                           ;Dimmer_B1.c: 251: } else {
 18485  035F  0008               	return
 18486  0360                     i1l7144:	
 18487                           
 18488                           ;Dimmer_B1.c: 252: if (DimmerLightsIntr->Flag == 1) {
 18489  0360  0879               	movf	_DimmerLightsIntr,w
 18490  0361  3E08               	addlw	8
 18491  0362  0086               	movwf	6
 18492  0363  3001               	movlw	1	; select bank2/3
 18493  0364  0087               	movwf	7
 18494  0365  1C01               	btfss	1,0
 18495  0366  2C14               	goto	i1l746
 18496                           
 18497                           ;Dimmer_B1.c: 253: DimmerLightsIntr->Flag = 0;
 18498  0367  0879               	movf	_DimmerLightsIntr,w
 18499  0368  3E08               	addlw	8
 18500  0369  0086               	movwf	6
 18501  036A  3001               	movlw	1	; select bank2/3
 18502  036B  0087               	movwf	7
 18503  036C  1001               	bcf	1,0
 18504                           
 18505                           ;Dimmer_B1.c: 254: if (DimmerLightsIntr->Signal == 1) {
 18506  036D  0879               	movf	_DimmerLightsIntr,w
 18507  036E  0086               	movwf	6
 18508  036F  3001               	movlw	1	; select bank2/3
 18509  0370  0087               	movwf	7
 18510  0371  1C81               	btfss	1,1
 18511  0372  2C14               	goto	i1l746
 18512                           
 18513                           ;Dimmer_B1.c: 255: DimmerLightsIntr->DimmingTime++;
 18514  0373  3001               	movlw	1
 18515  0374  00F2               	movwf	??_setDimmerLights_IntrControl
 18516  0375  0A79               	incf	_DimmerLightsIntr,w
 18517  0376  0086               	movwf	6
 18518  0377  3001               	movlw	1	; select bank2/3
 18519  0378  0087               	movwf	7
 18520  0379  0872               	movf	??_setDimmerLights_IntrControl,w
 18521  037A  0781               	addwf	1,f
 18522                           
 18523                           ;Dimmer_B1.c: 256: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18524  037B  0A79               	incf	_DimmerLightsIntr,w
 18525  037C  0086               	movwf	6
 18526  037D  3001               	movlw	1	; select bank2/3
 18527  037E  0087               	movwf	7
 18528  037F  0879               	movf	_DimmerLightsIntr,w
 18529  0380  3E02               	addlw	2
 18530  0381  0084               	movwf	4
 18531  0382  3001               	movlw	1	; select bank2/3
 18532  0383  0085               	movwf	5
 18533  0384  0800               	movf	0,w
 18534  0385  0201               	subwf	1,w
 18535  0386  1C03               	skipc
 18536  0387  2C14               	goto	i1l746
 18537                           
 18538                           ;Dimmer_B1.c: 257: DimmerLightsIntr->DimmingTime = 0;
 18539  0388  0A79               	incf	_DimmerLightsIntr,w
 18540  0389  0086               	movwf	6
 18541  038A  3001               	movlw	1	; select bank2/3
 18542  038B  0087               	movwf	7
 18543  038C  0181               	clrf	1
 18544                           
 18545                           ;Dimmer_B1.c: 258: if (DimmerLightsIntr->AdjFlag == 1) {
 18546  038D  0879               	movf	_DimmerLightsIntr,w
 18547  038E  0086               	movwf	6
 18548  038F  3001               	movlw	1	; select bank2/3
 18549  0390  0087               	movwf	7
 18550  0391  1D81               	btfss	1,3
 18551  0392  2BC9               	goto	i1l7170
 18552                           
 18553                           ;Dimmer_B1.c: 259: if (DimmerLightsIntr->AdjStatus == 0) {
 18554  0393  0879               	movf	_DimmerLightsIntr,w
 18555  0394  0086               	movwf	6
 18556  0395  3001               	movlw	1	; select bank2/3
 18557  0396  0087               	movwf	7
 18558  0397  1A01               	btfsc	1,4
 18559  0398  2BB2               	goto	i1l7164
 18560                           
 18561                           ;Dimmer_B1.c: 260: if (DimmerLightsIntr->DimmingValue < ((char)(80*0.8))) {
 18562  0399  0879               	movf	_DimmerLightsIntr,w
 18563  039A  3E04               	addlw	4
 18564  039B  0086               	movwf	6
 18565  039C  3001               	movlw	1	; select bank2/3
 18566  039D  0087               	movwf	7
 18567  039E  3040               	movlw	64
 18568  039F  0201               	subwf	1,w
 18569  03A0  1803               	skipnc
 18570  03A1  2BAC               	goto	i1l7162
 18571                           
 18572                           ;Dimmer_B1.c: 261: DimmerLightsIntr->DimmingValue++;
 18573  03A2  3001               	movlw	1
 18574  03A3  00F2               	movwf	??_setDimmerLights_IntrControl
 18575  03A4  0879               	movf	_DimmerLightsIntr,w
 18576  03A5  3E04               	addlw	4
 18577  03A6  0086               	movwf	6
 18578  03A7  3001               	movlw	1	; select bank2/3
 18579  03A8  0087               	movwf	7
 18580  03A9  0872               	movf	??_setDimmerLights_IntrControl,w
 18581  03AA  0781               	addwf	1,f
 18582                           
 18583                           ;Dimmer_B1.c: 262: } else {
 18584  03AB  2C14               	goto	i1l746
 18585  03AC                     i1l7162:	
 18586                           
 18587                           ;Dimmer_B1.c: 263: DimmerLightsIntr->AdjStatus = 1;
 18588  03AC  0879               	movf	_DimmerLightsIntr,w
 18589  03AD  0086               	movwf	6
 18590  03AE  3001               	movlw	1	; select bank2/3
 18591  03AF  0087               	movwf	7
 18592  03B0  1601               	bsf	1,4
 18593                           
 18594                           ;Dimmer_B1.c: 264: }
 18595                           ;Dimmer_B1.c: 265: } else {
 18596  03B1  2C14               	goto	i1l746
 18597  03B2                     i1l7164:	
 18598                           
 18599                           ;Dimmer_B1.c: 266: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18600  03B2  0879               	movf	_DimmerLightsIntr,w
 18601  03B3  3E04               	addlw	4
 18602  03B4  0086               	movwf	6
 18603  03B5  3001               	movlw	1	; select bank2/3
 18604  03B6  0087               	movwf	7
 18605  03B7  300D               	movlw	13
 18606  03B8  0201               	subwf	1,w
 18607  03B9  1C03               	skipc
 18608  03BA  2BC3               	goto	i1l7168
 18609                           
 18610                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingValue--;
 18611  03BB  0879               	movf	_DimmerLightsIntr,w
 18612  03BC  3E04               	addlw	4
 18613  03BD  0086               	movwf	6
 18614  03BE  3001               	movlw	1	; select bank2/3
 18615  03BF  0087               	movwf	7
 18616  03C0  3001               	movlw	1
 18617  03C1  0281               	subwf	1,f
 18618                           
 18619                           ;Dimmer_B1.c: 268: } else {
 18620  03C2  2C14               	goto	i1l746
 18621  03C3                     i1l7168:	
 18622                           
 18623                           ;Dimmer_B1.c: 269: DimmerLightsIntr->AdjStatus = 0;
 18624  03C3  0879               	movf	_DimmerLightsIntr,w
 18625  03C4  0086               	movwf	6
 18626  03C5  3001               	movlw	1	; select bank2/3
 18627  03C6  0087               	movwf	7
 18628  03C7  1201               	bcf	1,4
 18629                           
 18630                           ;Dimmer_B1.c: 270: }
 18631                           ;Dimmer_B1.c: 271: }
 18632                           ;Dimmer_B1.c: 272: } else if (DimmerLightsIntr->AdjRF == 1) {
 18633  03C8  2C14               	goto	i1l746
 18634  03C9                     i1l7170:	
 18635  03C9  0879               	movf	_DimmerLightsIntr,w
 18636  03CA  0086               	movwf	6
 18637  03CB  3001               	movlw	1	; select bank2/3
 18638  03CC  0087               	movwf	7
 18639  03CD  1D01               	btfss	1,2
 18640  03CE  2C14               	goto	i1l746
 18641                           
 18642                           ;Dimmer_B1.c: 273: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18643  03CF  0879               	movf	_DimmerLightsIntr,w
 18644  03D0  3E04               	addlw	4
 18645  03D1  0086               	movwf	6
 18646  03D2  3001               	movlw	1	; select bank2/3
 18647  03D3  0087               	movwf	7
 18648  03D4  0879               	movf	_DimmerLightsIntr,w
 18649  03D5  3E05               	addlw	5
 18650  03D6  0084               	movwf	4
 18651  03D7  3001               	movlw	1	; select bank2/3
 18652  03D8  0085               	movwf	5
 18653  03D9  0800               	movf	0,w
 18654  03DA  0201               	subwf	1,w
 18655  03DB  1803               	skipnc
 18656  03DC  2BE7               	goto	i1l7176
 18657                           
 18658                           ;Dimmer_B1.c: 274: DimmerLightsIntr->DimmingValue++;
 18659  03DD  3001               	movlw	1
 18660  03DE  00F2               	movwf	??_setDimmerLights_IntrControl
 18661  03DF  0879               	movf	_DimmerLightsIntr,w
 18662  03E0  3E04               	addlw	4
 18663  03E1  0086               	movwf	6
 18664  03E2  3001               	movlw	1	; select bank2/3
 18665  03E3  0087               	movwf	7
 18666  03E4  0872               	movf	??_setDimmerLights_IntrControl,w
 18667  03E5  0781               	addwf	1,f
 18668                           
 18669                           ;Dimmer_B1.c: 275: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18670  03E6  2BFC               	goto	i1l7180
 18671  03E7                     i1l7176:	
 18672  03E7  0879               	movf	_DimmerLightsIntr,w
 18673  03E8  3E05               	addlw	5
 18674  03E9  0086               	movwf	6
 18675  03EA  3001               	movlw	1	; select bank2/3
 18676  03EB  0087               	movwf	7
 18677  03EC  0879               	movf	_DimmerLightsIntr,w
 18678  03ED  3E04               	addlw	4
 18679  03EE  0084               	movwf	4
 18680  03EF  3001               	movlw	1	; select bank2/3
 18681  03F0  0085               	movwf	5
 18682  03F1  0800               	movf	0,w
 18683  03F2  0201               	subwf	1,w
 18684  03F3  1803               	skipnc
 18685  03F4  2BFC               	goto	i1l7180
 18686                           
 18687                           ;Dimmer_B1.c: 276: DimmerLightsIntr->DimmingValue--;
 18688  03F5  0879               	movf	_DimmerLightsIntr,w
 18689  03F6  3E04               	addlw	4
 18690  03F7  0086               	movwf	6
 18691  03F8  3001               	movlw	1	; select bank2/3
 18692  03F9  0087               	movwf	7
 18693  03FA  3001               	movlw	1
 18694  03FB  0281               	subwf	1,f
 18695  03FC                     i1l7180:	
 18696                           
 18697                           ;Dimmer_B1.c: 277: }
 18698                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18699  03FC  0879               	movf	_DimmerLightsIntr,w
 18700  03FD  3E05               	addlw	5
 18701  03FE  0086               	movwf	6
 18702  03FF  3001               	movlw	1	; select bank2/3
 18703  0400  0087               	movwf	7
 18704  0401  0879               	movf	_DimmerLightsIntr,w
 18705  0402  3E04               	addlw	4
 18706  0403  0084               	movwf	4
 18707  0404  3001               	movlw	1	; select bank2/3
 18708  0405  0085               	movwf	5
 18709  0406  0800               	movf	0,w
 18710  0407  0601               	xorwf	1,w
 18711  0408  1D03               	skipz
 18712  0409  2C14               	goto	i1l746
 18713                           
 18714                           ;Dimmer_B1.c: 279: DimmerLightsIntr->AdjRF = 0;
 18715  040A  0879               	movf	_DimmerLightsIntr,w
 18716  040B  0086               	movwf	6
 18717  040C  3001               	movlw	1	; select bank2/3
 18718  040D  0087               	movwf	7
 18719  040E  1101               	bcf	1,2
 18720                           
 18721                           ;Dimmer_B1.c: 280: DimmerLightsIntr->Signal = 0;
 18722  040F  0879               	movf	_DimmerLightsIntr,w
 18723  0410  0086               	movwf	6
 18724  0411  3001               	movlw	1	; select bank2/3
 18725  0412  0087               	movwf	7
 18726  0413  1081               	bcf	1,1
 18727  0414                     i1l746:	
 18728                           
 18729                           ;Dimmer_B1.c: 281: }
 18730                           ;Dimmer_B1.c: 282: }
 18731                           ;Dimmer_B1.c: 300: }
 18732                           ;Dimmer_B1.c: 301: }
 18733                           ;Dimmer_B1.c: 302: }
 18734                           ;Dimmer_B1.c: 304: if (DimmerLightsIntr->MosfetSignal == 1) {
 18735  0414  0879               	movf	_DimmerLightsIntr,w
 18736  0415  3E09               	addlw	9
 18737  0416  0086               	movwf	6
 18738  0417  3001               	movlw	1	; select bank2/3
 18739  0418  0087               	movwf	7
 18740  0419  1D81               	btfss	1,3
 18741  041A  0008               	return
 18742                           
 18743                           ;Dimmer_B1.c: 305: DimmerLightsIntr->MosfetSignalCount++;
 18744  041B  3001               	movlw	1
 18745  041C  00F2               	movwf	??_setDimmerLights_IntrControl
 18746  041D  0879               	movf	_DimmerLightsIntr,w
 18747  041E  3E0C               	addlw	12
 18748  041F  0086               	movwf	6
 18749  0420  3001               	movlw	1	; select bank2/3
 18750  0421  0087               	movwf	7
 18751  0422  0872               	movf	??_setDimmerLights_IntrControl,w
 18752  0423  0781               	addwf	1,f
 18753                           
 18754                           ;Dimmer_B1.c: 306: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 18755  0424  0879               	movf	_DimmerLightsIntr,w
 18756  0425  3E0C               	addlw	12
 18757  0426  0086               	movwf	6
 18758  0427  3001               	movlw	1	; select bank2/3
 18759  0428  0087               	movwf	7
 18760  0429  0801               	movf	1,w
 18761  042A  3A05               	xorlw	5
 18762  042B  1D03               	skipz
 18763  042C  0008               	return
 18764                           
 18765                           ;Dimmer_B1.c: 307: DimmerLightsIntr->MosfetSignalCount = 0;
 18766  042D  0879               	movf	_DimmerLightsIntr,w
 18767  042E  3E0C               	addlw	12
 18768  042F  0086               	movwf	6
 18769  0430  3001               	movlw	1	; select bank2/3
 18770  0431  0087               	movwf	7
 18771  0432  0181               	clrf	1
 18772                           
 18773                           ;Dimmer_B1.c: 308: DimmerLightsIntr->MosfetSignal = 0;
 18774  0433  0879               	movf	_DimmerLightsIntr,w
 18775  0434  3E09               	addlw	9
 18776  0435  0086               	movwf	6
 18777  0436  3001               	movlw	1	; select bank2/3
 18778  0437  0087               	movwf	7
 18779  0438  1181               	bcf	1,3
 18780  0439  0008               	return
 18781  043A                     __end_of_setDimmerLights_IntrControl:	
 18782                           
 18783                           	psect	text129
 18784  1CBD                     __ptext129:	
 18785 ;; *************** function _DimmerIntrPointSelect *****************
 18786 ;; Defined at:
 18787 ;;		line 70 in file "../src/Dimmer_B1.c"
 18788 ;; Parameters:    Size  Location     Type
 18789 ;;  lights          1    wreg     unsigned char 
 18790 ;; Auto vars:     Size  Location     Type
 18791 ;;  lights          1    1[COMMON] unsigned char 
 18792 ;; Return value:  Size  Location     Type
 18793 ;;		None               void
 18794 ;; Registers used:
 18795 ;;		wreg
 18796 ;; Tracked objects:
 18797 ;;		On entry : 0/0
 18798 ;;		On exit  : 0/0
 18799 ;;		Unchanged: 0/0
 18800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18802 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18803 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18804 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18805 ;;Total ram usage:        2 bytes
 18806 ;; Hardware stack levels used:    1
 18807 ;; This function calls:
 18808 ;;		Nothing
 18809 ;; This function is called by:
 18810 ;;		_setDimmerLights_IntrControl
 18811 ;; This function uses a non-reentrant model
 18812 ;;
 18813                           
 18814                           
 18815                           ;psect for function _DimmerIntrPointSelect
 18816  1CBD                     _DimmerIntrPointSelect:	
 18817                           
 18818                           ;incstack = 0
 18819                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18820                           ;DimmerIntrPointSelect@lights stored from wreg
 18821  1CBD  00F1               	movwf	DimmerIntrPointSelect@lights
 18822                           
 18823                           ;Dimmer_B1.c: 72: if (lights == 1) {
 18824  1CBE  0871               	movf	DimmerIntrPointSelect@lights,w
 18825  1CBF  3A01               	xorlw	1
 18826  1CC0  1D03               	skipz
 18827  1CC1  2CC6               	goto	i1l735
 18828                           
 18829                           ;Dimmer_B1.c: 73: DimmerLightsIntr = &DimmerLights1;
 18830  1CC2  30BE               	movlw	_DimmerLights1& (0+255)
 18831  1CC3  00F0               	movwf	??_DimmerIntrPointSelect
 18832  1CC4  0870               	movf	??_DimmerIntrPointSelect,w
 18833  1CC5  00F9               	movwf	_DimmerLightsIntr
 18834  1CC6                     i1l735:	
 18835                           
 18836                           ;Dimmer_B1.c: 74: }
 18837                           ;Dimmer_B1.c: 77: if (lights == 2) {
 18838  1CC6  0871               	movf	DimmerIntrPointSelect@lights,w
 18839  1CC7  3A02               	xorlw	2
 18840  1CC8  1D03               	skipz
 18841  1CC9  0008               	return
 18842                           
 18843                           ;Dimmer_B1.c: 78: DimmerLightsIntr = &DimmerLights2;
 18844  1CCA  30CD               	movlw	_DimmerLights2& (0+255)
 18845  1CCB  00F0               	movwf	??_DimmerIntrPointSelect
 18846  1CCC  0870               	movf	??_DimmerIntrPointSelect,w
 18847  1CCD  00F9               	movwf	_DimmerLightsIntr
 18848  1CCE  0008               	return
 18849  1CCF                     __end_of_DimmerIntrPointSelect:	
 18850                           
 18851                           	psect	text130
 18852  1C3B                     __ptext130:	
 18853 ;; *************** function _IOC_ISR *****************
 18854 ;; Defined at:
 18855 ;;		line 401 in file "../src/MCU_B1.c"
 18856 ;; Parameters:    Size  Location     Type
 18857 ;;		None
 18858 ;; Auto vars:     Size  Location     Type
 18859 ;;		None
 18860 ;; Return value:  Size  Location     Type
 18861 ;;		None               void
 18862 ;; Registers used:
 18863 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18864 ;; Tracked objects:
 18865 ;;		On entry : 0/0
 18866 ;;		On exit  : 0/0
 18867 ;;		Unchanged: 0/0
 18868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18873 ;;Total ram usage:        0 bytes
 18874 ;; Hardware stack levels used:    1
 18875 ;; Hardware stack levels required when called:    3
 18876 ;; This function calls:
 18877 ;;		_setDimmerReClock
 18878 ;; This function is called by:
 18879 ;;		_ISR
 18880 ;; This function uses a non-reentrant model
 18881 ;;
 18882                           
 18883                           
 18884                           ;psect for function _IOC_ISR
 18885  1C3B                     _IOC_ISR:	
 18886                           
 18887                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18888                           
 18889                           ;incstack = 0
 18890                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18891  1C3B  1D8B               	btfss	11,3	;volatile
 18892  1C3C  0008               	return
 18893  1C3D  1C0B               	btfss	11,0	;volatile
 18894  1C3E  0008               	return
 18895  1C3F  0027               	movlb	7	; select bank7
 18896  1C40  1D16               	btfss	22,2	;volatile
 18897  1C41  0008               	return
 18898                           
 18899                           ;MCU_B1.c: 403: IOCBF2 = 0;
 18900  1C42  1116               	bcf	22,2	;volatile
 18901                           
 18902                           ;MCU_B1.c: 404: IOCIF = 0;
 18903  1C43  100B               	bcf	11,0	;volatile
 18904                           
 18905                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 18906  1C44  0021               	movlb	1	; select bank1
 18907  1C45  1C20               	btfss	_myMain^(0+128),0
 18908  1C46  0008               	return
 18909                           
 18910                           ;MCU_B1.c: 408: setDimmerReClock();
 18911  1C47  319B  2382         	fcall	_setDimmerReClock
 18912  1C49  0008               	return
 18913  1C4A                     __end_of_IOC_ISR:	
 18914                           
 18915                           	psect	text131
 18916  1B82                     __ptext131:	
 18917 ;; *************** function _setDimmerReClock *****************
 18918 ;; Defined at:
 18919 ;;		line 244 in file "../src/MCU_B1.c"
 18920 ;; Parameters:    Size  Location     Type
 18921 ;;		None
 18922 ;; Auto vars:     Size  Location     Type
 18923 ;;		None
 18924 ;; Return value:  Size  Location     Type
 18925 ;;		None               void
 18926 ;; Registers used:
 18927 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18928 ;; Tracked objects:
 18929 ;;		On entry : 0/0
 18930 ;;		On exit  : 0/0
 18931 ;;		Unchanged: 0/0
 18932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18937 ;;Total ram usage:        0 bytes
 18938 ;; Hardware stack levels used:    1
 18939 ;; Hardware stack levels required when called:    2
 18940 ;; This function calls:
 18941 ;;		_setDimmerLights_IntrIOC_GO
 18942 ;; This function is called by:
 18943 ;;		_IOC_ISR
 18944 ;; This function uses a non-reentrant model
 18945 ;;
 18946                           
 18947                           
 18948                           ;psect for function _setDimmerReClock
 18949  1B82                     _setDimmerReClock:	
 18950                           
 18951                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 18952                           
 18953                           ;incstack = 0
 18954                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18955  1B82  3001               	movlw	1
 18956  1B83  3192  22F7  319B   	fcall	_setDimmerLights_IntrIOC_GO
 18957                           
 18958                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 18959  1B86  3002               	movlw	2
 18960  1B87  3192  22F7         	fcall	_setDimmerLights_IntrIOC_GO
 18961  1B89  0008               	return
 18962  1B8A                     __end_of_setDimmerReClock:	
 18963                           
 18964                           	psect	text132
 18965  12F7                     __ptext132:	
 18966 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18967 ;; Defined at:
 18968 ;;		line 28 in file "../src/Dimmer_B1.c"
 18969 ;; Parameters:    Size  Location     Type
 18970 ;;  lights          1    wreg     unsigned char 
 18971 ;; Auto vars:     Size  Location     Type
 18972 ;;  lights          1    2[COMMON] unsigned char 
 18973 ;; Return value:  Size  Location     Type
 18974 ;;		None               void
 18975 ;; Registers used:
 18976 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18977 ;; Tracked objects:
 18978 ;;		On entry : 0/0
 18979 ;;		On exit  : 0/0
 18980 ;;		Unchanged: 0/0
 18981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18983 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18985 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18986 ;;Total ram usage:        1 bytes
 18987 ;; Hardware stack levels used:    1
 18988 ;; Hardware stack levels required when called:    1
 18989 ;; This function calls:
 18990 ;;		_DimmerIntrIOCPointSelect
 18991 ;; This function is called by:
 18992 ;;		_setDimmerReClock
 18993 ;; This function uses a non-reentrant model
 18994 ;;
 18995                           
 18996                           
 18997                           ;psect for function _setDimmerLights_IntrIOC_GO
 18998  12F7                     _setDimmerLights_IntrIOC_GO:	
 18999                           
 19000                           ;incstack = 0
 19001                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19002                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19003  12F7  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19004                           
 19005                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 19006  12F8  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19007  12F9  319D  2551  3192   	fcall	_DimmerIntrIOCPointSelect
 19008                           
 19009                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0) {
 19010  12FC  0021               	movlb	1	; select bank1
 19011  12FD  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19012  12FE  0086               	movwf	6
 19013  12FF  3001               	movlw	1	; select bank2/3
 19014  1300  0087               	movwf	7
 19015  1301  1801               	btfsc	1,0
 19016  1302  0008               	return
 19017  1303  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19018  1304  3E09               	addlw	9
 19019  1305  0086               	movwf	6
 19020  1306  3001               	movlw	1	; select bank2/3
 19021  1307  0087               	movwf	7
 19022  1308  1981               	btfsc	1,3
 19023  1309  0008               	return
 19024                           
 19025                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 19026  130A  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19027  130B  0086               	movwf	6
 19028  130C  3001               	movlw	1	; select bank2/3
 19029  130D  0087               	movwf	7
 19030  130E  1401               	bsf	1,0
 19031                           
 19032                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 19033  130F  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19034  1310  3E09               	addlw	9
 19035  1311  0086               	movwf	6
 19036  1312  3001               	movlw	1	; select bank2/3
 19037  1313  0087               	movwf	7
 19038  1314  1581               	bsf	1,3
 19039                           
 19040                           ;Dimmer_B1.c: 48: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 19041  1315  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19042  1316  0086               	movwf	6
 19043  1317  3001               	movlw	1	; select bank2/3
 19044  1318  0087               	movwf	7
 19045  1319  1F01               	btfss	1,6
 19046  131A  0008               	return
 19047                           
 19048                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MOSFET = 1;
 19049  131B  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19050  131C  3E09               	addlw	9
 19051  131D  0086               	movwf	6
 19052  131E  3001               	movlw	1	; select bank2/3
 19053  131F  0087               	movwf	7
 19054  1320  1601               	bsf	1,4
 19055                           
 19056                           ;Dimmer_B1.c: 51: if (lights == 1) {
 19057  1321  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19058  1322  3A01               	xorlw	1
 19059  1323  1D03               	skipz
 19060  1324  2B27               	goto	i1l6736
 19061                           
 19062                           ;Dimmer_B1.c: 52: RA7 = 1;
 19063  1325  0020               	movlb	0	; select bank0
 19064  1326  178C               	bsf	12,7	;volatile
 19065  1327                     i1l6736:	
 19066                           ;Dimmer_B1.c: 53: ;;
 19067                           
 19068                           
 19069                           ;Dimmer_B1.c: 54: }
 19070                           ;Dimmer_B1.c: 57: if (lights == 2) {
 19071  1327  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19072  1328  3A02               	xorlw	2
 19073  1329  1D03               	skipz
 19074  132A  0008               	return
 19075                           
 19076                           ;Dimmer_B1.c: 58: RB4 = 1;
 19077  132B  0020               	movlb	0	; select bank0
 19078  132C  160D               	bsf	13,4	;volatile
 19079  132D  0008               	return
 19080  132E                     __end_of_setDimmerLights_IntrIOC_GO:	
 19081                           
 19082                           	psect	text133
 19083  1D51                     __ptext133:	
 19084 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19085 ;; Defined at:
 19086 ;;		line 8 in file "../src/Dimmer_B1.c"
 19087 ;; Parameters:    Size  Location     Type
 19088 ;;  lights          1    wreg     unsigned char 
 19089 ;; Auto vars:     Size  Location     Type
 19090 ;;  lights          1    1[COMMON] unsigned char 
 19091 ;; Return value:  Size  Location     Type
 19092 ;;		None               void
 19093 ;; Registers used:
 19094 ;;		wreg
 19095 ;; Tracked objects:
 19096 ;;		On entry : 0/0
 19097 ;;		On exit  : 0/0
 19098 ;;		Unchanged: 0/0
 19099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19101 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19102 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19103 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19104 ;;Total ram usage:        2 bytes
 19105 ;; Hardware stack levels used:    1
 19106 ;; This function calls:
 19107 ;;		Nothing
 19108 ;; This function is called by:
 19109 ;;		_setDimmerLights_IntrIOC_GO
 19110 ;; This function uses a non-reentrant model
 19111 ;;
 19112                           
 19113                           
 19114                           ;psect for function _DimmerIntrIOCPointSelect
 19115  1D51                     _DimmerIntrIOCPointSelect:	
 19116                           
 19117                           ;incstack = 0
 19118                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19119                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19120  1D51  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19121                           
 19122                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19123  1D52  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19124  1D53  3A01               	xorlw	1
 19125  1D54  1D03               	skipz
 19126  1D55  2D5B               	goto	i1l723
 19127                           
 19128                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19129  1D56  30BE               	movlw	_DimmerLights1& (0+255)
 19130  1D57  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19131  1D58  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19132  1D59  0021               	movlb	1	; select bank1
 19133  1D5A  00CF               	movwf	_DimmerLightsIntrIOC^(0+128)
 19134  1D5B                     i1l723:	
 19135                           
 19136                           ;Dimmer_B1.c: 12: }
 19137                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19138  1D5B  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19139  1D5C  3A02               	xorlw	2
 19140  1D5D  1D03               	skipz
 19141  1D5E  0008               	return
 19142                           
 19143                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19144  1D5F  30CD               	movlw	_DimmerLights2& (0+255)
 19145  1D60  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19146  1D61  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19147  1D62  0021               	movlb	1	; select bank1
 19148  1D63  00CF               	movwf	_DimmerLightsIntrIOC^(0+128)
 19149  1D64  0008               	return
 19150  1D65                     __end_of_DimmerIntrIOCPointSelect:	
 19151  007E                     btemp	set	126	;btemp
 19152  007E                     pic14e$flags	set	126
 19153  007E                     wtemp	set	126
 19154  007E                     wtemp0	set	126
 19155  0080                     wtemp1	set	128
 19156  0082                     wtemp2	set	130
 19157  0084                     wtemp3	set	132
 19158  0086                     wtemp4	set	134
 19159  0088                     wtemp5	set	136
 19160  007F                     wtemp6	set	127
 19161  007E                     ttemp	set	126
 19162  007E                     ttemp0	set	126
 19163  0081                     ttemp1	set	129
 19164  0084                     ttemp2	set	132
 19165  0087                     ttemp3	set	135
 19166  007F                     ttemp4	set	127
 19167  007E                     ltemp	set	126
 19168  007E                     ltemp0	set	126
 19169  0082                     ltemp1	set	130
 19170  0086                     ltemp2	set	134
 19171  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         267
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     78      80
    BANK1            80      7      80
    BANK2            80      0      73
    BANK3            80      0      78
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK2[5]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setPercentValue
    _setDimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   97264
                                              3 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1612
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     244
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     495
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1773
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0    1773
                                             13 BANK0      2     2      0
           _getMain_All_Error_Status
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   11671
                                             29 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    6308
                                             17 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     450
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    5135
                                             22 BANK0      7     7      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29516
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   29516
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28687
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1656
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   26847
                             _setBuz
         _setDimmerLights_ErrorClose
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0    7483
                                             17 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    2038
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   15503
                                             71 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15280
                                             68 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   15214
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     252
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0     808
                                              9 BANK0      7     7      0
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      73
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1368
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12979
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   28548
                                             71 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   28136
                                             70 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  4     3      1   12665
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      4     3      1   13705
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1     423
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     204
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    3949
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    3949
                                             22 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0    2249
                                             17 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    1915
                                             15 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     266
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     266
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1139
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     319
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     181
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0      89
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1612
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     494
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     404
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     359
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     268
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     110
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
             _setRF_DimmerLights
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      49       9       91.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4E      11       97.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     18A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     18A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Nov 25 11:15:27 2014

                   __size_of_Switch_Main 0024                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l96 16C9                                       l98 16DD  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1F99  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 007C                     _getDimmerLights_Line 1D3E  
                 __end_of_setDelayOff_GO 08CD                             ___ftadd@exp1 004D  
                           ___ftadd@exp2 004C                setDimmerLights_Adj@lights 0065  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 16F1  
                   _setDimmerLights_Line 1DCB                             ___ftadd@sign 004B  
                                    l110 14A6                                      l106 14AC  
                                    l107 14A8                                      l108 1496  
                                    l330 1D6F                                      l331 1D70  
                   _setDimmerLights_SwOn 1365                                      l255 0A29  
                                    l280 0BB0                                      l281 0BF3  
                                    l374 109D                                      l767 1D0F  
                                    l778 124C                                      l866 1D47  
                                    l867 1D4E                                      _GIE 005F  
                                    _CRC 00CC                                      l998 1E8F  
                                    l999 1E97                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0017  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RA4 0064  
                                    _LED 007A                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00BC  
                                    _ISR 0004                                      _WDT 00CA  
           getDimmerLights_Status@lights 0022                                      _Sw1 01DC  
                                    _Sw2 01E5                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1D79                    _Buzzer_Initialization 1B44  
                        __end_of_ADC_Set 1B82                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
           getDimmerLights_Status@status 0023                          _setDimmerLights 0D75  
                 _setMain_Exception$7065 0039                        ??_getSw_KeyStatus 0020  
                  _setDimmerLights_AdjRF 1FDD                                     ?_ISR 0070  
        setDimmerLights_ErrorClose@count 0032                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1C4A                               Load_Main@i 002F  
                             Load_Main@j 002B                             ___ftdiv@sign 003D  
                                   l1033 13D9                                     l1301 12BB  
                                   l2021 0C14                                     l2031 0C6A  
                                   l1315 11B6                                     l2051 0B87  
                                   l1324 1545                                     l2037 12F3  
                                   l2063 140B                 ?_DimmerLightsPointSelect 0070  
                                   l1460 02F8                                     l1463 01F1  
                                   l1464 02C8                                     l1465 02C6  
                                   l1617 0E9F                          __end_of_IOC_Set 1C22  
                                   l2369 1DE7                                     l2385 1084  
                                   l2723 1205                                     l2395 01B1  
                                   l2724 1220                                     l2900 095D  
                                   l2397 008A                                     l6006 1160  
                                   l6032 15F7                                     l6112 08A8  
                                   l2728 121C                                     l6050 1616  
                                   l6114 08B5                                     l2906 0974  
                                   l1970 061C                                     l7010 1F08  
                                   l6060 1631                                     l6116 08BE  
                                   l6108 08A2                                     l6204 1454  
                                   l1980 0597                                     l1972 0559  
                                   l7020 1F16                                     l1973 055B  
                                   l6038 1602                                     l6222 17F0  
                                   l1982 05D4                                     l1974 0563  
                                   l2679 14EB                           _Load_Main$3849 002D  
                                   l6064 1639                                     l6056 1628  
                                   l6048 160A                                     l7008 1F06  
                                   l2929 04D9                                     l6410 1E4A  
                                   l7042 07E6                                     l6138 1C94  
                                   l6322 1E2F                                     l7018 1F12  
                                   l1979 059B                                     l6404 1E41  
                                   l7052 07F6                                     l7036 07DD  
                                   l6324 1E33                                     l6420 1FC4  
                                   l6406 1E44                                     l7046 07ED  
                                   l7038 07E0                                     l6342 1781  
                                   l8006 02AC                                     l6422 1FC7  
                                   l7310 1F43                                     l7048 07F0  
                                   l6344 1756                                     l6504 15DA  
                                   l6512 15E2                                     l5720 093A  
                                   l5800 0492                                     l7216 1716  
                                   l8104 108D                                     l7312 1F46  
                                   l6346 1787                                     l6522 1DD8  
                                   l5730 0962                                     l5722 0944  
                                   l5810 04B4                                     l7218 171C  
                                   l6426 1FCD                                     l6610 0A11  
                                   l6274 11CA                                     l6700 10AE  
                                   l6452 1200                                     l6508 15DE  
                                   l5732 096A                                     l5724 0949  
                                   l5716 0933                                     l5820 04D5  
                                   l5812 04B8                                     l7228 1744  
                                   l6620 0A38                                     l6188 139B  
                                   l7420 0E6D                                     l7316 1F4B  
                  _setDimmerLights_SwOff 1420                                     l6702 10B9  
                                   l6710 1F83                                     l6462 1217  
                                   l6454 1209                                     l5806 04A5  
                                   l7334 151B                                     l8054 02E6  
                                   l6622 0A3C                                     l6614 0A2F  
                                   l6382 158F                                     l7430 0E82  
                                   l5744 1CD2                                     l5824 04EB  
                                   l5808 04AF                                     l7328 1506  
                                   l6624 0A3F                                     l6616 0A32  
                                   l5920 0FD0                                     l5912 0FBC  
                                   l7504 05B9                                     l7432 0E83  
                                   l8128 14D5                                     l6714 1F89  
                                   l6474 15AB                                     l6482 15B3  
                                   l5818 04CB                                     l6802 0AD0  
                                   l6642 0B8C                                     l6650 0B98  
                                   l6378 1580                                     l6570 0B5C  
                                   l6554 0B21                                     l7506 05BB  
                                   l7522 05E9                                     l7418 0E6B  
                                   l8138 14EC                                     l6708 1F80  
                                   l5748 1CD8                                     l5828 04FD  
                                   l6660 0BAD                                     l6644 0B8F  
                                   l6628 0A45                                     l5924 0FD8  
                                   l5908 0FB4                                     l6396 13F9  
                                   l6572 0B60                                     l6580 0B6C  
                                   l8076 1356                                     l5766 1FA4  
                                   l5838 0518                                     l5782 0469  
                                   l5854 0ED0                                     l6662 0BA7  
                                   l6590 09F7                                     l6574 0B64  
                                   l6566 0B46                                     l7534 060A  
                                   l7470 057A                                     l7622 00B8  
                                   l7606 0075                                     l8270 166F  
                                   l6760 118B                                     l6488 15BC  
                                   l6496 15C4                                     l5848 0EBA  
                                   l6648 0B95                                     l6592 09FA  
                                   l6576 0B68                                     l7632 00EA  
                                   l5778 0462                                     l6690 0BF5  
                                   l5890 0F63                                     l7554 1DEC  
                                   l6826 126B                                     l8266 1664  
                                   l6756 1186                                     l5788 0478  
                                   l5876 0F2A                                     l5868 0F11  
                                   l5948 0D07                                     l6676 0BC1  
                                   l6596 0A00                                     l7388 0E12  
                                   l5990 1D84                                     l6758 116A  
                                   l5982 0D6C                                     l5974 0D52  
                                   l5966 0D37                                     l6782 0DC3  
                                   l7806 0692                                     l6678 0BD9  
                                   l7558 1DF2                                     l7582 0841  
                                   l7646 0128                                     l5976 0D5B  
                                   l5968 0D45                                     l7744 1243  
                                   l6936 1CB7                                     l5896 0F79  
                                   l7592 0861                                     l7576 0833  
                                   l7568 0820                                     l7656 015A  
                                   l5978 0D5E                                     l6794 0DEA  
                                   l7746 1246                                     l7586 0851  
                                   l7594 086A                                     l7682 01AD  
                                   l7914 0CE8                                     l7748 124E  
                                   l6892 119E                                     l6956 0C17  
                  _myMain_Initialization 1C4A                                     l7696 1480  
                                   l6984 0C60                                     l6968 0C2F  
                                   l7938 01E0                                     l6978 0C55  
                                   l6994 1D98                                     l7964 0235  
                                   l7958 020B                                     l7894 0CB3  
                                   l7886 0C8E                                     _CFGS 0CAE  
                                   l7994 0291                                     l7898 0CBB  
                                   l7988 0284                                     l7996 0297  
                           __CFG_WDTE$ON 0000                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     u5005 1617  
                                   u5015 1621                                     u5025 1629  
                                   u4305 097B                                     u5210 17AE  
                                   u4235 093F                                     u6015 1173  
                                   u4255 0958                                     u5215 17AC  
                                   u4505 04B9                                     u4275 0965  
                                   _PEIE 005E                                     u4445 0493  
                                   u4605 0EE2                                     u5255 1DB0  
                                   u4535 04CC                                     u4615 0EF2  
                                   u5345 175F                                     u4625 0F12  
                                   u4475 04A6                                     u4635 0F21  
                                   u4715 0FBD                                     u4645 0F2B  
                                   u4805 0D0E                                     u8005 0237  
                                   u4725 0FC3                                     u7205 05FA  
                                   u8015 023C                                     u8025 024A  
                                   u4835 0D38                                     u4755 0FD9  
                                   u7075 0574                                     u4925 114C  
                                   u4765 0FDF                                     u4685 0F85  
                                   u8205 135C                                     u4695 0F95  
                                   u5905 10A3                                     u4865 0D53  
                                   u7525 1476                                     u8085 029D  
                                   u8255 14C4                                     u4985 160D  
                                   u8265 14E3                                     u8195 134D  
                                   u8285 14FA                                     u7815 0CA1  
                                   u7755 12B2                                     u6955 0E53  
                                   u6975 0E73                                     u7865 0CD5  
                                   _LWLO 0CAD                                     _RSSI 00D0  
                                   _WREN 0CAA                                     _Buz1 00B0  
                                   _Load 0126                                     _Temp 00D7  
                                   _main 1640                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 092A                          __end_of_RF_Main 1B4D  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0020  
                                   btemp 007E                          __end_of_WDT_Set 1BCF  
                                   ltemp 007E            __size_of_setRF_Initialization 000B  
                       _setDimmerReClock 1B82                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 1420  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                      ?_getDimmer_LoadOK 0070                                    ??_ISR 0077  
                           ___fttol@exp1 005B                             ___fttol@lval 0057  
                 _getDimmerLights_Status 1C59                       ??_getDimmer_LoadOK 0020  
         __size_of_DimmerIntrPointSelect 0012                         __end_of_LED_Main 1C16  
       setDimmerLights_ErrorClose@lights 0033            __end_of_DimmerIntrPointSelect 1CCF  
                  ?_getDimmerLights_Line 0070                    ?_setDimmerLights_Main 0070  
                  ?_setDimmerLights_Line 0070                          ?_setDelayOff_GO 002A  
                  ?_setDimmerLights_SwOn 0070                                    ?_main 00EC  
                        __end_of___awdiv 1640                          __end_of___ftadd 0530  
                        __end_of___ftdiv 0F4C                          __end_of___ftneg 1BBB  
                        __end_of___ftmul 1000                          ___awdiv@divisor 0020  
                                  _T1CON 0018                          __end_of___fttol 0D75  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l723 1D5B  
                                  i1l735 1CC6                                    i1l746 0414  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0021                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                   setMain_Exception@buz 0038                  __end_of_Timeout_Counter 1DB6  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 132E  
             _setDimmerLights_IntrIOC_GO 12F7                         __end_of_TMR1_ISR 110E  
           __size_of_CC2500_WriteCommand 0019       __end_of_setDimmerLights_ErrorClose 17A4  
             _setDimmerLights_ErrorClose 174A                         __end_of_TMR1_Set 1C2E  
                                  _getAD 1F38                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1D05              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E8  
                         __CFG_BOREN$OFF 0000             __end_of_getMain_Lights_Count 1E0B  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011             __end_of_getMain_LightsStatus 118E  
          __end_of_setLED_Initialization 1C8A                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 17A4  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003         __size_of_DelayOff_Initialization 0008  
                 ?_setLoad_AH_AL_Restore 0070                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 0A55                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0070  
                      ?_setMemory_Modify 0070                  __size_of_getDelayOff_GO 0010  
                      ??_setPercentValue 005C                             __end_of_main 1698  
                    ?_setRF_DimmerLights 0020                         __end_of_Fosc_Set 0800  
                     ??_setMemory_Modify 0020                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0DFE  
                   _setSw_Initialization 1BAA                                   ??_main 006E  
                          ___fttol@sign1 0056                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0B20                           _setMemory_Data 1BE6  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 0014  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E8  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1D18  
                 ?_setDimmerLights_AdjRF 0070                 __size_of_setRFSW_Control 004F  
                ??_Switch_Initialization 0025                     ??_setRF_DimmerLights 0021  
                                 ?_getAD 0020             setDimmerLights_AdjControl@sw 0028  
                      ??_getRF_KeyStatus 0020                   ?_setDimmerLights_SwOff 0070  
                            _DlyOff_Main 08CD                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006E                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 1FBB  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 098B  
               _getMain_All_Error_Status 11EF                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1EBC                                   i1l7140 0359  
                                 i1l7144 0360                                   i1l7162 03AC  
                                 i1l7170 03C9                                   i1l7180 03FC  
                                 i1l7164 03B2                                   i1l7176 03E7  
                                 i1l7168 03C3                                   i1l6736 1327  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                                   u653_25 0333  
                     __size_of_Load_Main 0144                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   _IO_Set 1E52  
                                 u768_25 1108                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1B42  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1DCB  
                                 _Dimmer 0120                                   _DlySw1 0153  
                                 _DlySw2 0158               __end_of_Mcu_Initialization 1CF3  
                    __end_of_Buzzer_Main 14B3                                   _Memory 0220  
                                 _Timer1 0123       __end_of_setDimmerLights_TriggerAdj 1F38  
             _setDimmerLights_TriggerAdj 1F18                                   ___bmul 1CCF  
                              ??___awdiv 0024                                ??___ftadd 0047  
           __size_of_DelayOffPointSelect 0014                                ??___ftdiv 0034  
                              ??___ftneg 0041                    setDimmerLights@lights 0065  
                              ??___ftmul 0034                                ??___fttol 0052  
           ?_Flash_Memory_Initialization 0070                   ??_getDimmerLights_Line 0020  
            setDimmerLights_AdjRF@lights 0063                   ??_setDimmerLights_Main 0066  
                 ??_setDimmerLights_Line 0020                                   _r_data 00D5  
                                 _s_data 00D6                   ??_setDimmerLights_SwOn 002D  
                                 _setLED 159C                                   _myMain 00A0  
                 __end_of_setMemory_Data 1BF2                         _DimmerLightsIntr 0079  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0062  
                       ___awdiv@quotient 0027                                   _setBuz 1698  
                     __size_of_Temp_Main 0003              __end_of_Load_Initialization 1B69  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039              ?_setDimmerLights_AdjControl 0070  
    __end_of_setDimmerLights_IntrControl 043A              _setDimmerLights_IntrControl 02FE  
               Flash_Memory_Read@address 0022                         ?_Timeout_Counter 0070  
             __end_of_setMemory_LoopSave 1D3E              getMain_Lights_Count@status1 0022  
            getMain_Lights_Count@status2 0023              getMain_Lights_Count@status3 0021  
                  __end_of_SwPointSelect 1DA1             __size_of_Flash_Memory_Modify 004E  
      setDimmerLights_IntrControl@lights 0076                  __size_of_LedPointSelect 001B  
                __size_of_getMain_LoadOK 000E                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009               getMain_LightsStatus@status 0028  
                             _TouchPower 1DE0               ?_getAll_DimmerLights_AdjGO 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 0ABA         __end_of_CC2500_registers_address 102F  
                __end_of__initialization 0047                                ?_LED_Main 0070  
                             ___ftadd@f1 0041                               ___ftadd@f2 0044  
                   _getRF_KeyStatus$5256 0022                            ?_my_MainTimer 0070  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                               ___ftneg@f1 003E  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004E  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                           __pidataBANK4 1F58                            __end_of_getAD 1F58  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
                 setLoad_AH_AL_Restore@i 0021                setMemory_LoopSave@command 0021  
           __size_of_setDimmerLights_Adj 0066                       _LED_Initialization 1BFE  
                        _getSw_KeyStatus 1EF9                ??_setControl_Lights_Table 006B  
                     getRF_KeyStatus@key 0021                         ??_DelayTimejudge 0024  
                        ?_setMemory_Data 0020            ??_Flash_Memory_Initialization 0062  
                       ?_setDimmerLights 0062                     _getMain_Lights_Count 1DF5  
                              ?_WDT_Main 0070                        __end_of_Load_Main 02FE  
                     __size_of_getBuz_GO 0011                     _getMain_LightsStatus 1162  
             __end_of_set_TimeoutCleared 1B64                 __end_of_setDimmerReClock 1B8A  
                     __size_of_getRxData 0074                      ?_LED_Initialization 0070  
                  getMain_LightsStatus@i 0026                        ?_CC2500_WriteByte 0070  
                         _DimmerLights11 00CD                           _DimmerLights22 00CE  
                   __size_of_setLED_Main 003E                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 1B4D  
                     ??_CC2500_WriteByte 0020                               __pbssBANK0 006F  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                               __pbssBANK4 0220  
                              ?_Fosc_Set 0070                              _Buzzer_Main 1469  
                      ??_setRFSW_Control 0031                        __end_of_Temp_Main 1B53  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                         ??_my_MainTimer 002D                               ??_LED_Main 0025  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1B8A  
              getMain_LightsStatus@count 0025                            ??_Switch_Main 003D  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 006F  
                      LedPointSelect@led 0021                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 0014                              setBuz@count 002C  
                ?_getDimmerLights_Status 0070                               __pmaintext 1640  
                         _getDelayOff_GO 1C69                      _CC2500_WriteCommand 1E39  
                   ?_Temp_Initialization 0070                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 0013                         ??_setDelayOff_GO 002C  
          ??_DimmerLights_Initialization 0024                               ??_TMR1_ISR 0077  
                          ?_setTemp_Main 0070                               _getLoad_AD 0C6D  
                             ??_TMR1_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                               _getLoad_OK 1B9A  
                     __size_of_setTxData 00BD                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                    ?_getMain_Lights_Count 0070  
                                _ADC_Set 1B7B                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 132E                               ??_WDT_Main 0020  
                  ?_getMain_LightsStatus 0070             __end_of_setRF_Initialization 1BDA  
                     _setRFSW_AdjControl 13E0                                  _IOC_ISR 1C3B  
                                _IOC_Set 1C16                     __size_of_setLog_Code 0036  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 128B  
              __size_of_getDimmer_LoadOK 0008                        _Flash_Memory_Read 1E6B  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 0071  
                 __size_of_CC2500_TxData 0065              ?_setDimmerLights_ErrorClose 0070  
                    ?_setRFSW_AdjControl 0070                                  _RF_Data 01A0  
                                _RF_Main 1B4A                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1BC4  
        __end_of_setControl_Lights_Table 0B88                          setRF_Main@error 00EB  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _setPercentValue 098B                  ??_setLoad_AH_AL_Restore 0020  
                       ?_getPercentValue 0070             __end_of_CC2500_FrequencyCabr 1BE6  
                        __size_of_IO_Set 0019                        __end_of_getBuz_GO 1CAC  
                    ??_Flash_Memory_Main 0029                      ??_Flash_Memory_Read 0020  
                 __end_of_getDelayOff_GO 1C79                                  _VarLED1 0161  
                                _VarLED2 0165           __end_of_getDimmerLights_Status 1C69  
                      __end_of_getRxData 0C6D                  __end_of_getSw_KeyStatus 1F18  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1D65  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1EDA  
                   ??_setRFSW_AdjControl 0067                           ??_setTemp_Main 002D  
                        __size_of___bmul 0012                                  ___awdiv 15EC  
                                ___ftadd 043A                                  ___ftdiv 0EA3  
                                ___ftneg 1BB2                                  ___ftmul 0F4C  
                                ___fttol 0CEE                      __end_of_Switch_Main 1098  
                ??_Buzzer_Initialization 0020                          _getRF_KeyStatus 1CAC  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0050                     setRFSW_AdjControl@sw 006A  
                        __size_of_setBuz 0059                                  __ptext1 14B3  
                                __ptext2 1C4A                                  __ptext3 132E  
                                __ptext4 0C6D                                  __ptext5 1F38  
                                __ptext6 1CF3                                  __ptext7 0002  
                                __ptext8 1B50                                  __ptext9 0DFE  
                ??_setDimmerLights_AdjRF 0062                __size_of_CC2500_SIDLEMode 0004  
                  _DimmerIntrPointSelect 1CBD                             __size_of_ISR 000F  
             ??_getMain_All_Error_Status 0020                __end_of_Flash_Memory_Main 12C1  
              __end_of_Flash_Memory_Read 1E85                  ??_setDimmerLights_SwOff 002F  
                             _setRF_Main 0530                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1B92                        _DimmerLights_Main 1222  
         __size_of_DlyOff_Initialization 0006                    ??_CC2500_WriteCommand 0022  
              __size_of_setMemory_Modify 0013            __end_of_DlyOff_Initialization 1B6F  
             __end_of_CC2500_ClearRXFIFO 1B57                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1B5B            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006E                           _LedPointSelect 1E85  
                    _DelayOffPointSelect 1D79                           _getMain_LoadOK 1066  
                                clrloop0 1B76           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 1C3B                     end_of_initialization 0047  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 110E  
                          _DelayTime_1us 1098                        __end_of_setTxData 07B9  
             __end_of_Flash_Memory_Write 11BD                                  init_ram 1B6F  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 1B70  
                             _setSw_Main 004B                    CC2500_ReadByte@loop_b 0021  
                 setDimmerLights_SwOn@sw 002F                        _CC2500_ReadStatus 1FBB  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1C79  
                        ?_getDelayOff_GO 0070                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                 __size_of_CC2500_ReadByte 0017  
                          _CC2500_RxData 0B88                            _CC2500_TxData 09F0  
                    ??_CC2500_InitSetREG 0025              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 14FF                              ?_getLoad_AD 0070  
                            ?_getLoad_OK 0070                   ??_getMain_Lights_Count 0020  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1BBB  
                    ??_CC2500_ReadStatus 0022                   ??_getMain_LightsStatus 0024  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
                    __size_of_TouchPower 0015                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 1256  
                     _Mcu_Initialization 1CE1                 __size_of_CC2500_PowerRST 0043  
                   __end_of_my_MainTimer 14FF                           ?_DelayOff_Main 0070  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1EA0  
                __end_of_setPercentValue 09F0                   __end_of_getMain_LoadOK 1074  
               __size_of_CC2500_WriteREG 0021                __end_of_CC2500_InitSetREG 1138  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 005C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 0ABA                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 1FDD              ??_getAll_DimmerLights_AdjGO 0020  
        getMain_All_Error_Status@command 0025                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1E6B                     _setRF_Initialization 1BCF  
                     _setMemory_LoopSave 1D2B                              _Switch_Main 1074  
                      __size_of_LED_Main 000C                         ?_getSw_KeyStatus 0070  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1D05                  __end_of_getRF_KeyStatus 1CBD  
                      _setMain_Exception 0814                         ??_setMemory_Data 0021  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1DB6  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                       ?_setMain_Exception 0070  
                    ?_setMemory_LoopSave 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1CE1                 setMain_Exception@command 003C  
                   setRF_DimmerLights@on 0020                 _DimmerIntrIOCPointSelect 1D51  
        _setDimmerLights_AdjControl$2577 0027                        getSw_KeyStatus@sw 0024  
                      __size_of_TMR1_ISR 0029            __size_of_getDimmerLights_Line 0013  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR1_Set 000C  
          __size_of_setDimmerLights_Main 0059                           __end_of_setLED 15EC  
          __size_of_setDimmerLights_Line 0015            __size_of_setDimmerLights_SwOn 003D  
                         __end_of_setBuz 16F1                      ??_setMain_Exception 0036  
                   _CC2500_FrequencyCabr 1BDA               __size_of_Flash_Memory_Main 0036  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 154D                        __size_of_WDT_Main 0012  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 11BD                          ?_LedPointSelect 0070  
                              _Load_Main 01BA                              __end_of_ISR 0013  
                        ?_getMain_LoadOK 0070                         _getDimmer_LoadOK 1BA2  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 0005  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 1EF9          __size_of_setTemp_Initialization 0001  
                   ??_setMemory_LoopSave 0020                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0EA3  
                    __size_of_getLoad_AD 0081                             ?_Buzzer_Main 0070  
                    __size_of_getLoad_OK 0008                       _set_TimeoutCleared 1B5F  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0015  
                              _VarErrLED 015D                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0064                      __size_of_getTemp_AD 0037  
                 ?_setLED_Initialization 0070                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                __end_of_setMain_Exception 0870  
              __size_of_CC2500_WriteByte 0014                                _Temp_Main 1B50  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D1                  setRF_DimmerValue@lights 0066  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00D3  
                            __pdataBANK4 0245                _getAll_DimmerLights_AdjGO 1C8A  
                               ??_setLED 0023                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0039  
                      ??_CC2500_ReadByte 0020         __end_of_getMain_All_Error_Status 1222  
                       _CC2500_SIDLEMode 1B5B               __size_of_DimmerLights_Main 0034  
              __end_of_setRF_DimmerValue 11EF                       setMemory_Data@data 0020  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070           _getAll_DimmerLights_AdjGO$2556 0022  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                         _setMemory_Modify 1D18  
                             ?_Load_Main 0070                            __pcstackBANK0 0020  
                          __pcstackBANK1 00E9                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0089  
                          DlyOff_Main@sw 0038                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 005D  
             __size_of_CC2500_ReadStatus 0022                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 01BE  
                          _DimmerLights2 01CD                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 001C                          ??_CC2500_RxData 0024  
          __end_of_setLoad_AH_AL_Restore 1EBC                 setRFSW_AdjControl@status 0069  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006E  
                         getRxData@error 006C              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                               ?_Temp_Main 0070  
                    __size_of_setRF_Main 00F0                           Load_Main@adjgo 002C  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                       ?_getRF_KeyStatus 0070                           Load_Main@error 002E  
                 _setTemp_Initialization 1B43                                _getBuz_GO 1C9B  
    __end_of_Flash_Memory_Initialization 06FC              _Flash_Memory_Initialization 0620  
                               ?___awdiv 0020                                __ptext100 1138  
                              __ptext101 1CCF                                __ptext110 1DB6  
                              __ptext102 1C69                                __ptext111 1B5B  
                              __ptext103 1C59                                __ptext120 1E39  
                              __ptext112 07B9                                __ptext104 1D05  
                              __ptext121 1B5F                                __ptext113 110E  
                              __ptext105 1698                                __ptext130 1C3B  
                              __ptext122 1DA1                                __ptext114 1EDA  
                              __ptext106 15EC                                __ptext131 1B82  
                              __ptext123 1D65                                __ptext115 1F78  
                              __ptext107 1B8A                                __ptext132 12F7  
                              __ptext124 1469                                __ptext116 1BDA  
                              __ptext108 1B69                                __ptext133 1D51  
                              __ptext125 1B44                                __ptext117 1098  
                              __ptext109 1D79                                 ?___ftadd 0041  
                              __ptext118 1B57                                __ptext127 10E5  
                              __ptext119 1B53                                __ptext128 02FE  
                              __ptext129 1CBD                                _getRxData 0BF9  
                               ?___ftdiv 002E                                 ?___ftneg 003E  
                               ?___ftmul 002E                                 ?___fttol 004E  
                  __size_of_my_MainTimer 004C                  __end_of_setRFSW_Control 159C  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
                       getMain_LoadOK@ok 0022            __end_of_Buzzer_Initialization 1B47  
                       getPercentValue@i 005F                         setPercentValue@i 005F  
                          ??_setLog_Code 002D                 getDimmerLights_Line@line 0021  
                     __end_of_TouchPower 1DF5                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 016F  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
          __end_of_setDimmerLights_AdjRF 2000                   CC2500_WriteByte@loop_a 0021  
                 _DimmerLights_Main$2494 0069                                _r_address 00D4  
         __size_of_setDimmerLights_SwOff 0049           __size_of_myMain_Initialization 000F  
          __end_of_setDimmerLights_SwOff 1469             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1C59                           __size_of_getAD 0020  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1D8D  
                    __end_of_setLED_Main 13E0                         ??_getDelayOff_GO 0022  
                    _DimmerLightsIntrIOC 00CF                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 1B50             setDimmerLights_SwOff@command 002F  
                      _CC2500_rfSettings 102F                                 _LED_Main 1C0A  
                        SwPointSelect@sw 0021                                clear_ram0 1B75  
               CC2500_InitPATable@loop_d 0027               __size_of_setMain_Exception 005C  
                           _my_MainTimer 14B3                                _setTxData 06FC  
    __end_of_DimmerLights_Initialization 1E22              _DimmerLights_Initialization 1E0B  
                     _CC2500_ClearRXFIFO 1B53                       _CC2500_ClearTXFIFO 1B57  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0024  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 0814  
                      ??_Timeout_Counter 0020                               ?_getBuz_GO 0020  
               __size_of_getPercentValue 0065                 setRF_DimmerLights@status 0023  
            __size_of_setRFSW_AdjControl 0040                       _Flash_Memory_Write 118E  
                             ?_getRxData 0070                             ??_getLoad_AD 0024  
                               _TMR1_ISR 10E5                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                             ??_getLoad_OK 0020  
                               _TMR1_Set 1C22                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00C8                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 1E52                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 1CF3                  DlyOff_Initialization@sw 0022  
                  getSw_KeyStatus@status 0023                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0032                      ?_Flash_Memory_Write 0070  
                       setRF_Main@loop_f 00E9                    __size_of_setTemp_Main 00A5  
                __size_of_setDelayOff_GO 005D             ??_setDimmerLights_AdjControl 0025  
                               _DelayOff 0078                             setSw_Main@sw 0033  
       setDimmerLights_IntrIOC_GO@lights 0072                              ??_Load_Main 0029  
                       __size_of_IOC_ISR 000F             ?_setDimmerLights_IntrControl 0070  
         getMain_All_Error_Status@status 0026                         __size_of_IOC_Set 000C  
           __end_of_Flash_Memory_Erasing 1BFE                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                         setLED_Main@led 0024                     __end_of_WDT_Clearing 0004  
                    __end_of_setLog_Code 12F7                    _DlyOff_Initialization 1B69  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 07FC                         __size_of_WDT_Set 000B  
                  setRFSW_Control@status 0032                  setMain_Exception@status 003B  
                     __end_of_getLoad_AD 0CEE                       __end_of_getLoad_OK 1BA2  
                  _Switch_Initialization 1C2E        __size_of_getMain_All_Error_Status 0033  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0063  
              ?_getMain_All_Error_Status 0070                     __size_of_Buzzer_Main 004A  
                     __end_of_getTemp_AD 1365                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1D65                        getLoad_AD@channel 0026  
           Flash_Memory_Initialization@i 0063                                 _SwDetect 00D2  
                            ??_Temp_Main 002F                        setRFSW_Control@sw 0033  
          _getMain_All_Error_Status$7075 0021            _getMain_All_Error_Status$7076 0023  
               __end_of_getDimmer_LoadOK 1BAA                      _Load_Initialization 1B64  
                              setLED@led 0023                  ??_DimmerIntrPointSelect 0070  
    __size_of_setDimmerLights_AdjControl 0035                             _setTemp_Main 0DFE  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                       __size_of___ftneg 0009                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                 setDimmerLights_SwOn@idle 002E  
                               ___awtoft 1F99                         ??_LedPointSelect 0020  
                               ___ftpack 092A            __size_of_getMain_Lights_Count 0016  
                       ??_getMain_LoadOK 0021            __size_of_getMain_LightsStatus 002C  
                      getTemp_AD@channel 0025                             ??_setRF_Main 006D  
                   CC2500_WriteREG@value 0022                              _setLED_Main 13A2  
             __end_of_setRF_DimmerLights 1800                 ?_DelayOff_Initialization 0070  
                       getDelayOff_GO@go 0023                         getDelayOff_GO@sw 0022  
                       setDelayOff_GO@sw 002E       __size_of_getAll_DimmerLights_AdjGO 0011  
                   ?_Load_Initialization 0070                                 __ptext10 1B4D  
                               __ptext11 1B43                                 __ptext20 1C2E  
                               __ptext12 1074                                 __ptext21 1BAA  
                               __ptext13 004B                                 __ptext30 1365  
                               __ptext22 1DE0                                 __ptext14 0800  
                               __ptext31 13E0                                 __ptext23 1B4A  
                               __ptext15 1256                                 __ptext40 0B88  
                               __ptext32 11BD                                 __ptext24 0530  
                               __ptext16 1EF9                                 __ptext41 1FBB  
                               __ptext33 1FDD                                 __ptext25 0BF9  
                               __ptext17 1D8D                                 __ptext50 07FC  
                               __ptext42 1E22                                 __ptext34 0A55  
                               __ptext26 12C1                                 __ptext18 0814  
                               __ptext51 1B7B                                 __ptext43 1B47  
                               __ptext35 0F4C                                 __ptext27 1D2B  
                               __ptext19 1D3E                                 __ptext60 13A2  
                               __ptext52 01BA                                 __ptext44 1BCF  
                               __ptext36 1D18                                 __ptext28 0B20  
                               __ptext61 1BFE                                 __ptext53 1066  
                               __ptext45 1CE1                                 __ptext37 1CAC  
                               __ptext29 154D                                 __ptext70 1E6B  
                               __ptext62 1C79                                 __ptext54 1BA2  
                               __ptext46 1BC4                                 __ptext38 1C9B  
                               __ptext71 1222                                 __ptext63 128B  
                               __ptext55 1DF5                                 __ptext47 1C22  
                               __ptext39 09F0                                 __ptext80 0EA3  
                               __ptext72 16F1                                 __ptext64 14FF  
                               __ptext56 1C8A                                 __ptext48 1E52  
                               __ptext81 043A                                 __ptext73 0ABA  
                               __ptext65 1BF2                                 __ptext57 1B64  
                               __ptext49 1C16                                 __ptext90 1E0B  
                               __ptext82 1F99                                 __ptext74 0D75  
                               __ptext66 0620                                 __ptext58 1EA0  
                               __ptext91 10BE                                 __ptext83 092A  
                               __ptext75 06FC                                 __ptext67 1BE6  
                               __ptext59 1C0A                                 __ptext92 1B42  
                               __ptext84 159C                                 __ptext76 17A4  
                               __ptext68 118E                                 __ptext93 1B92  
                               __ptext85 1E85                                 __ptext77 098B  
                               __ptext69 1BBB                                 __ptext94 08CD  
                               __ptext86 1DCB                                 __ptext78 0CEE  
                               __ptext95 174A                                 __ptext87 11EF  
                               __ptext79 1BB2                                 __ptext96 1420  
                               __ptext88 1162                                 __ptext97 1F18  
                               __ptext89 1B9A                                 __ptext98 1EBC  
                               __ptext99 0870                                 __product 0245  
          ??_setDimmerLights_IntrControl 0072                  ??_setLED_Initialization 0024  
               ??_getDimmerLights_Status 0022           __size_of_Dimmer_Initialization 0001  
           __end_of_getDimmerLights_Line 1D51            __end_of_Dimmer_Initialization 1B43  
           __end_of_setDimmerLights_Main 174A             __end_of_setDimmerLights_Line 1DE0  
                       Switch_Main@error 003E             __end_of_setDimmerLights_SwOn 13A2  
                 getDimmer_LoadOK@status 0020                             ??_setSw_Main 0031  
                          setLED@command 0022                            __size_of_main 0058  
                            _setRF_Learn 0800                 __end_of_CC2500_SIDLEMode 1B5F  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 1D8D  
             CC2500_WriteCommand@command 0023                     setRF_Main@Receive_OK 00EA  
              __size_of_setDimmerReClock 0008           setDimmerLights_AdjControl@idle 0026  
                        _CC2500_ReadByte 1E22                       _CC2500_InitPATable 1EDA  
               __end_of_setMemory_Modify 1D2B            setDimmerLights_Trigger@lights 0024  
                     __end_of_setRF_Main 0620                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012              setDimmerLights_ErrorClose@i 0034  
                   _CC2500_patable_vaule 105E                              ??_getRxData 006B  
                           getLoad_OK@ok 0020         setDimmerLights_TriggerAdj@lights 0024  
                               main@argc 00EC                                 main@argv 00EE  
                    ?_CC2500_InitPATable 0070                     _getSw_KeyStatus$6330 0021  
                   _getSw_KeyStatus$6331 0022                          _CC2500_PowerRST 07B9  
               __size_of_getSw_KeyStatus 001F              __end_of_Flash_Memory_Modify 154D  
                      ??_getPercentValue 005C                              _setLog_Code 12C1  
            __end_of_Flash_Memory_Unlock 1BC4                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1F78                       __end_of_setSw_Main 01BA  
                  ??_Load_Initialization 0022                            _Transceive_OK 03E9  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 1138  
                            pic14e$flags 007E             ??_setDimmerLights_IntrIOC_GO 0072  
             setDimmerLights_Line@lights 0020             ??_setDimmerLights_ErrorClose 0031  
                setDimmerLights_SwOff@sw 0030        __end_of_getAll_DimmerLights_AdjGO 1C9B  
            __size_of_setMemory_LoopSave 0013                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 10E5  
__size_of_setDimmerLights_Initialization 0027           _setDimmerLights_Initialization 10BE  
            __end_of_setDimmerLights_Adj 0B20                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                      _RF_Initialization 1B47     __size_of_setDimmerLights_IntrControl 013C  
                            getLoad_AD@i 0029                              getLoad_AD@j 0028  
                            getLoad_AD@k 0027                     _Flash_Memory_Erasing 1BF2  
                     ?_RF_Initialization 0070                               _SPI0Buffer 007B  
        __end_of_DelayOff_Initialization 1B92      __size_of_setDimmerLights_IntrIOC_GO 0037  
    __size_of_setDimmerLights_ErrorClose 005A                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1B9A       __end_of_setDimmerLights_AdjControl 128B  
             _setDimmerLights_AdjControl 1256                      ??_RF_Initialization 0021  
                __size_of_setMemory_Data 000C                           _setDelayOff_GO 0870  
       __size_of_setControl_Lights_Table 0068                   __end_of_DelayTimejudge 1162  
   __size_of_Flash_Memory_Initialization 00DC              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0036                    setMemory_Data@address 0022  
                  __end_of_DelayTime_1us 10BE                  __end_of_CC2500_ReadByte 1E39  
           __end_of_setSw_Initialization 1BB2                          _Timeout_Counter 1DA1  
        __size_of_getDimmerLights_Status 0010                     getPercentValue@value 005E  
             __end_of_LED_Initialization 1C0A         __size_of_setDimmerLights_Trigger 001E  
         __end_of_setTemp_Initialization 1B44                 __size_of_setPercentValue 0065  
                setMemory_Modify@command 0021                     setPercentValue@value 005E  
              __end_of_RF_Initialization 1B4A                    __end_of_CC2500_RxData 0BF9  
                  __end_of_CC2500_TxData 0A55                    _setLoad_AH_AL_Restore 1EA0  
                __end_of_CC2500_PowerRST 07FC           getAll_DimmerLights_AdjGO@adjgo 0021  
