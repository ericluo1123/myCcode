

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Nov 21 16:16:18 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	intentry,global,class=CODE,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   155                           	dabs	1,0x7E,2
   156  0000                     	;# 
   157  0001                     	;# 
   158  0002                     	;# 
   159  0003                     	;# 
   160  0004                     	;# 
   161  0005                     	;# 
   162  0006                     	;# 
   163  0007                     	;# 
   164  0008                     	;# 
   165  0009                     	;# 
   166  000A                     	;# 
   167  000B                     	;# 
   168  000C                     	;# 
   169  000D                     	;# 
   170  000E                     	;# 
   171  0010                     	;# 
   172  0011                     	;# 
   173  0012                     	;# 
   174  0015                     	;# 
   175  0016                     	;# 
   176  0016                     	;# 
   177  0017                     	;# 
   178  0018                     	;# 
   179  0019                     	;# 
   180  001A                     	;# 
   181  001B                     	;# 
   182  001C                     	;# 
   183  008C                     	;# 
   184  008D                     	;# 
   185  008E                     	;# 
   186  0090                     	;# 
   187  0091                     	;# 
   188  0092                     	;# 
   189  0095                     	;# 
   190  0096                     	;# 
   191  0097                     	;# 
   192  0099                     	;# 
   193  009A                     	;# 
   194  009B                     	;# 
   195  009B                     	;# 
   196  009C                     	;# 
   197  009D                     	;# 
   198  009E                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  0116                     	;# 
   203  0117                     	;# 
   204  011D                     	;# 
   205  018C                     	;# 
   206  018D                     	;# 
   207  018E                     	;# 
   208  0191                     	;# 
   209  0191                     	;# 
   210  0192                     	;# 
   211  0193                     	;# 
   212  0193                     	;# 
   213  0194                     	;# 
   214  0195                     	;# 
   215  0196                     	;# 
   216  0197                     	;# 
   217  0199                     	;# 
   218  019A                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019C                     	;# 
   224  019C                     	;# 
   225  019D                     	;# 
   226  019E                     	;# 
   227  019F                     	;# 
   228  020D                     	;# 
   229  0210                     	;# 
   230  0211                     	;# 
   231  0211                     	;# 
   232  0212                     	;# 
   233  0212                     	;# 
   234  0213                     	;# 
   235  0213                     	;# 
   236  0214                     	;# 
   237  0214                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0216                     	;# 
   242  0216                     	;# 
   243  0217                     	;# 
   244  0217                     	;# 
   245  0291                     	;# 
   246  0291                     	;# 
   247  0292                     	;# 
   248  0293                     	;# 
   249  0298                     	;# 
   250  0298                     	;# 
   251  0299                     	;# 
   252  029A                     	;# 
   253  0394                     	;# 
   254  0395                     	;# 
   255  0396                     	;# 
   256  0FE4                     	;# 
   257  0FE5                     	;# 
   258  0FE6                     	;# 
   259  0FE7                     	;# 
   260  0FE8                     	;# 
   261  0FE9                     	;# 
   262  0FEA                     	;# 
   263  0FEB                     	;# 
   264  0FED                     	;# 
   265  0FEE                     	;# 
   266  0FEF                     	;# 
   267  0000                     	;# 
   268  0001                     	;# 
   269  0002                     	;# 
   270  0003                     	;# 
   271  0004                     	;# 
   272  0005                     	;# 
   273  0006                     	;# 
   274  0007                     	;# 
   275  0008                     	;# 
   276  0009                     	;# 
   277  000A                     	;# 
   278  000B                     	;# 
   279  000C                     	;# 
   280  000D                     	;# 
   281  000E                     	;# 
   282  0010                     	;# 
   283  0011                     	;# 
   284  0012                     	;# 
   285  0015                     	;# 
   286  0016                     	;# 
   287  0016                     	;# 
   288  0017                     	;# 
   289  0018                     	;# 
   290  0019                     	;# 
   291  001A                     	;# 
   292  001B                     	;# 
   293  001C                     	;# 
   294  008C                     	;# 
   295  008D                     	;# 
   296  008E                     	;# 
   297  0090                     	;# 
   298  0091                     	;# 
   299  0092                     	;# 
   300  0095                     	;# 
   301  0096                     	;# 
   302  0097                     	;# 
   303  0099                     	;# 
   304  009A                     	;# 
   305  009B                     	;# 
   306  009B                     	;# 
   307  009C                     	;# 
   308  009D                     	;# 
   309  009E                     	;# 
   310  010C                     	;# 
   311  010D                     	;# 
   312  010E                     	;# 
   313  0116                     	;# 
   314  0117                     	;# 
   315  011D                     	;# 
   316  018C                     	;# 
   317  018D                     	;# 
   318  018E                     	;# 
   319  0191                     	;# 
   320  0191                     	;# 
   321  0192                     	;# 
   322  0193                     	;# 
   323  0193                     	;# 
   324  0194                     	;# 
   325  0195                     	;# 
   326  0196                     	;# 
   327  0197                     	;# 
   328  0199                     	;# 
   329  019A                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019C                     	;# 
   335  019C                     	;# 
   336  019D                     	;# 
   337  019E                     	;# 
   338  019F                     	;# 
   339  020D                     	;# 
   340  0210                     	;# 
   341  0211                     	;# 
   342  0211                     	;# 
   343  0212                     	;# 
   344  0212                     	;# 
   345  0213                     	;# 
   346  0213                     	;# 
   347  0214                     	;# 
   348  0214                     	;# 
   349  0215                     	;# 
   350  0215                     	;# 
   351  0215                     	;# 
   352  0216                     	;# 
   353  0216                     	;# 
   354  0217                     	;# 
   355  0217                     	;# 
   356  0291                     	;# 
   357  0291                     	;# 
   358  0292                     	;# 
   359  0293                     	;# 
   360  0298                     	;# 
   361  0298                     	;# 
   362  0299                     	;# 
   363  029A                     	;# 
   364  0394                     	;# 
   365  0395                     	;# 
   366  0396                     	;# 
   367  0FE4                     	;# 
   368  0FE5                     	;# 
   369  0FE6                     	;# 
   370  0FE7                     	;# 
   371  0FE8                     	;# 
   372  0FE9                     	;# 
   373  0FEA                     	;# 
   374  0FEB                     	;# 
   375  0FED                     	;# 
   376  0FEE                     	;# 
   377  0FEF                     	;# 
   378  0000                     	;# 
   379  0001                     	;# 
   380  0002                     	;# 
   381  0003                     	;# 
   382  0004                     	;# 
   383  0005                     	;# 
   384  0006                     	;# 
   385  0007                     	;# 
   386  0008                     	;# 
   387  0009                     	;# 
   388  000A                     	;# 
   389  000B                     	;# 
   390  000C                     	;# 
   391  000D                     	;# 
   392  000E                     	;# 
   393  0010                     	;# 
   394  0011                     	;# 
   395  0012                     	;# 
   396  0015                     	;# 
   397  0016                     	;# 
   398  0016                     	;# 
   399  0017                     	;# 
   400  0018                     	;# 
   401  0019                     	;# 
   402  001A                     	;# 
   403  001B                     	;# 
   404  001C                     	;# 
   405  008C                     	;# 
   406  008D                     	;# 
   407  008E                     	;# 
   408  0090                     	;# 
   409  0091                     	;# 
   410  0092                     	;# 
   411  0095                     	;# 
   412  0096                     	;# 
   413  0097                     	;# 
   414  0099                     	;# 
   415  009A                     	;# 
   416  009B                     	;# 
   417  009B                     	;# 
   418  009C                     	;# 
   419  009D                     	;# 
   420  009E                     	;# 
   421  010C                     	;# 
   422  010D                     	;# 
   423  010E                     	;# 
   424  0116                     	;# 
   425  0117                     	;# 
   426  011D                     	;# 
   427  018C                     	;# 
   428  018D                     	;# 
   429  018E                     	;# 
   430  0191                     	;# 
   431  0191                     	;# 
   432  0192                     	;# 
   433  0193                     	;# 
   434  0193                     	;# 
   435  0194                     	;# 
   436  0195                     	;# 
   437  0196                     	;# 
   438  0197                     	;# 
   439  0199                     	;# 
   440  019A                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019C                     	;# 
   446  019C                     	;# 
   447  019D                     	;# 
   448  019E                     	;# 
   449  019F                     	;# 
   450  020D                     	;# 
   451  0210                     	;# 
   452  0211                     	;# 
   453  0211                     	;# 
   454  0212                     	;# 
   455  0212                     	;# 
   456  0213                     	;# 
   457  0213                     	;# 
   458  0214                     	;# 
   459  0214                     	;# 
   460  0215                     	;# 
   461  0215                     	;# 
   462  0215                     	;# 
   463  0216                     	;# 
   464  0216                     	;# 
   465  0217                     	;# 
   466  0217                     	;# 
   467  0291                     	;# 
   468  0291                     	;# 
   469  0292                     	;# 
   470  0293                     	;# 
   471  0298                     	;# 
   472  0298                     	;# 
   473  0299                     	;# 
   474  029A                     	;# 
   475  0394                     	;# 
   476  0395                     	;# 
   477  0396                     	;# 
   478  0FE4                     	;# 
   479  0FE5                     	;# 
   480  0FE6                     	;# 
   481  0FE7                     	;# 
   482  0FE8                     	;# 
   483  0FE9                     	;# 
   484  0FEA                     	;# 
   485  0FEB                     	;# 
   486  0FED                     	;# 
   487  0FEE                     	;# 
   488  0FEF                     	;# 
   489  0000                     	;# 
   490  0001                     	;# 
   491  0002                     	;# 
   492  0003                     	;# 
   493  0004                     	;# 
   494  0005                     	;# 
   495  0006                     	;# 
   496  0007                     	;# 
   497  0008                     	;# 
   498  0009                     	;# 
   499  000A                     	;# 
   500  000B                     	;# 
   501  000C                     	;# 
   502  000D                     	;# 
   503  000E                     	;# 
   504  0010                     	;# 
   505  0011                     	;# 
   506  0012                     	;# 
   507  0015                     	;# 
   508  0016                     	;# 
   509  0016                     	;# 
   510  0017                     	;# 
   511  0018                     	;# 
   512  0019                     	;# 
   513  001A                     	;# 
   514  001B                     	;# 
   515  001C                     	;# 
   516  008C                     	;# 
   517  008D                     	;# 
   518  008E                     	;# 
   519  0090                     	;# 
   520  0091                     	;# 
   521  0092                     	;# 
   522  0095                     	;# 
   523  0096                     	;# 
   524  0097                     	;# 
   525  0099                     	;# 
   526  009A                     	;# 
   527  009B                     	;# 
   528  009B                     	;# 
   529  009C                     	;# 
   530  009D                     	;# 
   531  009E                     	;# 
   532  010C                     	;# 
   533  010D                     	;# 
   534  010E                     	;# 
   535  0116                     	;# 
   536  0117                     	;# 
   537  011D                     	;# 
   538  018C                     	;# 
   539  018D                     	;# 
   540  018E                     	;# 
   541  0191                     	;# 
   542  0191                     	;# 
   543  0192                     	;# 
   544  0193                     	;# 
   545  0193                     	;# 
   546  0194                     	;# 
   547  0195                     	;# 
   548  0196                     	;# 
   549  0197                     	;# 
   550  0199                     	;# 
   551  019A                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019B                     	;# 
   555  019B                     	;# 
   556  019C                     	;# 
   557  019C                     	;# 
   558  019D                     	;# 
   559  019E                     	;# 
   560  019F                     	;# 
   561  020D                     	;# 
   562  0210                     	;# 
   563  0211                     	;# 
   564  0211                     	;# 
   565  0212                     	;# 
   566  0212                     	;# 
   567  0213                     	;# 
   568  0213                     	;# 
   569  0214                     	;# 
   570  0214                     	;# 
   571  0215                     	;# 
   572  0215                     	;# 
   573  0215                     	;# 
   574  0216                     	;# 
   575  0216                     	;# 
   576  0217                     	;# 
   577  0217                     	;# 
   578  0291                     	;# 
   579  0291                     	;# 
   580  0292                     	;# 
   581  0293                     	;# 
   582  0298                     	;# 
   583  0298                     	;# 
   584  0299                     	;# 
   585  029A                     	;# 
   586  0394                     	;# 
   587  0395                     	;# 
   588  0396                     	;# 
   589  0FE4                     	;# 
   590  0FE5                     	;# 
   591  0FE6                     	;# 
   592  0FE7                     	;# 
   593  0FE8                     	;# 
   594  0FE9                     	;# 
   595  0FEA                     	;# 
   596  0FEB                     	;# 
   597  0FED                     	;# 
   598  0FEE                     	;# 
   599  0FEF                     	;# 
   600  0000                     	;# 
   601  0001                     	;# 
   602  0002                     	;# 
   603  0003                     	;# 
   604  0004                     	;# 
   605  0005                     	;# 
   606  0006                     	;# 
   607  0007                     	;# 
   608  0008                     	;# 
   609  0009                     	;# 
   610  000A                     	;# 
   611  000B                     	;# 
   612  000C                     	;# 
   613  000D                     	;# 
   614  000E                     	;# 
   615  0010                     	;# 
   616  0011                     	;# 
   617  0012                     	;# 
   618  0015                     	;# 
   619  0016                     	;# 
   620  0016                     	;# 
   621  0017                     	;# 
   622  0018                     	;# 
   623  0019                     	;# 
   624  001A                     	;# 
   625  001B                     	;# 
   626  001C                     	;# 
   627  008C                     	;# 
   628  008D                     	;# 
   629  008E                     	;# 
   630  0090                     	;# 
   631  0091                     	;# 
   632  0092                     	;# 
   633  0095                     	;# 
   634  0096                     	;# 
   635  0097                     	;# 
   636  0099                     	;# 
   637  009A                     	;# 
   638  009B                     	;# 
   639  009B                     	;# 
   640  009C                     	;# 
   641  009D                     	;# 
   642  009E                     	;# 
   643  010C                     	;# 
   644  010D                     	;# 
   645  010E                     	;# 
   646  0116                     	;# 
   647  0117                     	;# 
   648  011D                     	;# 
   649  018C                     	;# 
   650  018D                     	;# 
   651  018E                     	;# 
   652  0191                     	;# 
   653  0191                     	;# 
   654  0192                     	;# 
   655  0193                     	;# 
   656  0193                     	;# 
   657  0194                     	;# 
   658  0195                     	;# 
   659  0196                     	;# 
   660  0197                     	;# 
   661  0199                     	;# 
   662  019A                     	;# 
   663  019B                     	;# 
   664  019B                     	;# 
   665  019B                     	;# 
   666  019B                     	;# 
   667  019C                     	;# 
   668  019C                     	;# 
   669  019D                     	;# 
   670  019E                     	;# 
   671  019F                     	;# 
   672  020D                     	;# 
   673  0210                     	;# 
   674  0211                     	;# 
   675  0211                     	;# 
   676  0212                     	;# 
   677  0212                     	;# 
   678  0213                     	;# 
   679  0213                     	;# 
   680  0214                     	;# 
   681  0214                     	;# 
   682  0215                     	;# 
   683  0215                     	;# 
   684  0215                     	;# 
   685  0216                     	;# 
   686  0216                     	;# 
   687  0217                     	;# 
   688  0217                     	;# 
   689  0291                     	;# 
   690  0291                     	;# 
   691  0292                     	;# 
   692  0293                     	;# 
   693  0298                     	;# 
   694  0298                     	;# 
   695  0299                     	;# 
   696  029A                     	;# 
   697  0394                     	;# 
   698  0395                     	;# 
   699  0396                     	;# 
   700  0FE4                     	;# 
   701  0FE5                     	;# 
   702  0FE6                     	;# 
   703  0FE7                     	;# 
   704  0FE8                     	;# 
   705  0FE9                     	;# 
   706  0FEA                     	;# 
   707  0FEB                     	;# 
   708  0FED                     	;# 
   709  0FEE                     	;# 
   710  0FEF                     	;# 
   711  0000                     	;# 
   712  0001                     	;# 
   713  0002                     	;# 
   714  0003                     	;# 
   715  0004                     	;# 
   716  0005                     	;# 
   717  0006                     	;# 
   718  0007                     	;# 
   719  0008                     	;# 
   720  0009                     	;# 
   721  000A                     	;# 
   722  000B                     	;# 
   723  000C                     	;# 
   724  000D                     	;# 
   725  000E                     	;# 
   726  0010                     	;# 
   727  0011                     	;# 
   728  0012                     	;# 
   729  0015                     	;# 
   730  0016                     	;# 
   731  0016                     	;# 
   732  0017                     	;# 
   733  0018                     	;# 
   734  0019                     	;# 
   735  001A                     	;# 
   736  001B                     	;# 
   737  001C                     	;# 
   738  008C                     	;# 
   739  008D                     	;# 
   740  008E                     	;# 
   741  0090                     	;# 
   742  0091                     	;# 
   743  0092                     	;# 
   744  0095                     	;# 
   745  0096                     	;# 
   746  0097                     	;# 
   747  0099                     	;# 
   748  009A                     	;# 
   749  009B                     	;# 
   750  009B                     	;# 
   751  009C                     	;# 
   752  009D                     	;# 
   753  009E                     	;# 
   754  010C                     	;# 
   755  010D                     	;# 
   756  010E                     	;# 
   757  0116                     	;# 
   758  0117                     	;# 
   759  011D                     	;# 
   760  018C                     	;# 
   761  018D                     	;# 
   762  018E                     	;# 
   763  0191                     	;# 
   764  0191                     	;# 
   765  0192                     	;# 
   766  0193                     	;# 
   767  0193                     	;# 
   768  0194                     	;# 
   769  0195                     	;# 
   770  0196                     	;# 
   771  0197                     	;# 
   772  0199                     	;# 
   773  019A                     	;# 
   774  019B                     	;# 
   775  019B                     	;# 
   776  019B                     	;# 
   777  019B                     	;# 
   778  019C                     	;# 
   779  019C                     	;# 
   780  019D                     	;# 
   781  019E                     	;# 
   782  019F                     	;# 
   783  020D                     	;# 
   784  0210                     	;# 
   785  0211                     	;# 
   786  0211                     	;# 
   787  0212                     	;# 
   788  0212                     	;# 
   789  0213                     	;# 
   790  0213                     	;# 
   791  0214                     	;# 
   792  0214                     	;# 
   793  0215                     	;# 
   794  0215                     	;# 
   795  0215                     	;# 
   796  0216                     	;# 
   797  0216                     	;# 
   798  0217                     	;# 
   799  0217                     	;# 
   800  0291                     	;# 
   801  0291                     	;# 
   802  0292                     	;# 
   803  0293                     	;# 
   804  0298                     	;# 
   805  0298                     	;# 
   806  0299                     	;# 
   807  029A                     	;# 
   808  0394                     	;# 
   809  0395                     	;# 
   810  0396                     	;# 
   811  0FE4                     	;# 
   812  0FE5                     	;# 
   813  0FE6                     	;# 
   814  0FE7                     	;# 
   815  0FE8                     	;# 
   816  0FE9                     	;# 
   817  0FEA                     	;# 
   818  0FEB                     	;# 
   819  0FED                     	;# 
   820  0FEE                     	;# 
   821  0FEF                     	;# 
   822  0000                     	;# 
   823  0001                     	;# 
   824  0002                     	;# 
   825  0003                     	;# 
   826  0004                     	;# 
   827  0005                     	;# 
   828  0006                     	;# 
   829  0007                     	;# 
   830  0008                     	;# 
   831  0009                     	;# 
   832  000A                     	;# 
   833  000B                     	;# 
   834  000C                     	;# 
   835  000D                     	;# 
   836  000E                     	;# 
   837  0010                     	;# 
   838  0011                     	;# 
   839  0012                     	;# 
   840  0015                     	;# 
   841  0016                     	;# 
   842  0016                     	;# 
   843  0017                     	;# 
   844  0018                     	;# 
   845  0019                     	;# 
   846  001A                     	;# 
   847  001B                     	;# 
   848  001C                     	;# 
   849  008C                     	;# 
   850  008D                     	;# 
   851  008E                     	;# 
   852  0090                     	;# 
   853  0091                     	;# 
   854  0092                     	;# 
   855  0095                     	;# 
   856  0096                     	;# 
   857  0097                     	;# 
   858  0099                     	;# 
   859  009A                     	;# 
   860  009B                     	;# 
   861  009B                     	;# 
   862  009C                     	;# 
   863  009D                     	;# 
   864  009E                     	;# 
   865  010C                     	;# 
   866  010D                     	;# 
   867  010E                     	;# 
   868  0116                     	;# 
   869  0117                     	;# 
   870  011D                     	;# 
   871  018C                     	;# 
   872  018D                     	;# 
   873  018E                     	;# 
   874  0191                     	;# 
   875  0191                     	;# 
   876  0192                     	;# 
   877  0193                     	;# 
   878  0193                     	;# 
   879  0194                     	;# 
   880  0195                     	;# 
   881  0196                     	;# 
   882  0197                     	;# 
   883  0199                     	;# 
   884  019A                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019B                     	;# 
   889  019C                     	;# 
   890  019C                     	;# 
   891  019D                     	;# 
   892  019E                     	;# 
   893  019F                     	;# 
   894  020D                     	;# 
   895  0210                     	;# 
   896  0211                     	;# 
   897  0211                     	;# 
   898  0212                     	;# 
   899  0212                     	;# 
   900  0213                     	;# 
   901  0213                     	;# 
   902  0214                     	;# 
   903  0214                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0216                     	;# 
   908  0216                     	;# 
   909  0217                     	;# 
   910  0217                     	;# 
   911  0291                     	;# 
   912  0291                     	;# 
   913  0292                     	;# 
   914  0293                     	;# 
   915  0298                     	;# 
   916  0298                     	;# 
   917  0299                     	;# 
   918  029A                     	;# 
   919  0394                     	;# 
   920  0395                     	;# 
   921  0396                     	;# 
   922  0FE4                     	;# 
   923  0FE5                     	;# 
   924  0FE6                     	;# 
   925  0FE7                     	;# 
   926  0FE8                     	;# 
   927  0FE9                     	;# 
   928  0FEA                     	;# 
   929  0FEB                     	;# 
   930  0FED                     	;# 
   931  0FEE                     	;# 
   932  0FEF                     	;# 
   933  0000                     	;# 
   934  0001                     	;# 
   935  0002                     	;# 
   936  0003                     	;# 
   937  0004                     	;# 
   938  0005                     	;# 
   939  0006                     	;# 
   940  0007                     	;# 
   941  0008                     	;# 
   942  0009                     	;# 
   943  000A                     	;# 
   944  000B                     	;# 
   945  000C                     	;# 
   946  000D                     	;# 
   947  000E                     	;# 
   948  0010                     	;# 
   949  0011                     	;# 
   950  0012                     	;# 
   951  0015                     	;# 
   952  0016                     	;# 
   953  0016                     	;# 
   954  0017                     	;# 
   955  0018                     	;# 
   956  0019                     	;# 
   957  001A                     	;# 
   958  001B                     	;# 
   959  001C                     	;# 
   960  008C                     	;# 
   961  008D                     	;# 
   962  008E                     	;# 
   963  0090                     	;# 
   964  0091                     	;# 
   965  0092                     	;# 
   966  0095                     	;# 
   967  0096                     	;# 
   968  0097                     	;# 
   969  0099                     	;# 
   970  009A                     	;# 
   971  009B                     	;# 
   972  009B                     	;# 
   973  009C                     	;# 
   974  009D                     	;# 
   975  009E                     	;# 
   976  010C                     	;# 
   977  010D                     	;# 
   978  010E                     	;# 
   979  0116                     	;# 
   980  0117                     	;# 
   981  011D                     	;# 
   982  018C                     	;# 
   983  018D                     	;# 
   984  018E                     	;# 
   985  0191                     	;# 
   986  0191                     	;# 
   987  0192                     	;# 
   988  0193                     	;# 
   989  0193                     	;# 
   990  0194                     	;# 
   991  0195                     	;# 
   992  0196                     	;# 
   993  0197                     	;# 
   994  0199                     	;# 
   995  019A                     	;# 
   996  019B                     	;# 
   997  019B                     	;# 
   998  019B                     	;# 
   999  019B                     	;# 
  1000  019C                     	;# 
  1001  019C                     	;# 
  1002  019D                     	;# 
  1003  019E                     	;# 
  1004  019F                     	;# 
  1005  020D                     	;# 
  1006  0210                     	;# 
  1007  0211                     	;# 
  1008  0211                     	;# 
  1009  0212                     	;# 
  1010  0212                     	;# 
  1011  0213                     	;# 
  1012  0213                     	;# 
  1013  0214                     	;# 
  1014  0214                     	;# 
  1015  0215                     	;# 
  1016  0215                     	;# 
  1017  0215                     	;# 
  1018  0216                     	;# 
  1019  0216                     	;# 
  1020  0217                     	;# 
  1021  0217                     	;# 
  1022  0291                     	;# 
  1023  0291                     	;# 
  1024  0292                     	;# 
  1025  0293                     	;# 
  1026  0298                     	;# 
  1027  0298                     	;# 
  1028  0299                     	;# 
  1029  029A                     	;# 
  1030  0394                     	;# 
  1031  0395                     	;# 
  1032  0396                     	;# 
  1033  0FE4                     	;# 
  1034  0FE5                     	;# 
  1035  0FE6                     	;# 
  1036  0FE7                     	;# 
  1037  0FE8                     	;# 
  1038  0FE9                     	;# 
  1039  0FEA                     	;# 
  1040  0FEB                     	;# 
  1041  0FED                     	;# 
  1042  0FEE                     	;# 
  1043  0FEF                     	;# 
  1044  0000                     	;# 
  1045  0001                     	;# 
  1046  0002                     	;# 
  1047  0003                     	;# 
  1048  0004                     	;# 
  1049  0005                     	;# 
  1050  0006                     	;# 
  1051  0007                     	;# 
  1052  0008                     	;# 
  1053  0009                     	;# 
  1054  000A                     	;# 
  1055  000B                     	;# 
  1056  000C                     	;# 
  1057  000D                     	;# 
  1058  000E                     	;# 
  1059  0010                     	;# 
  1060  0011                     	;# 
  1061  0012                     	;# 
  1062  0015                     	;# 
  1063  0016                     	;# 
  1064  0016                     	;# 
  1065  0017                     	;# 
  1066  0018                     	;# 
  1067  0019                     	;# 
  1068  001A                     	;# 
  1069  001B                     	;# 
  1070  001C                     	;# 
  1071  008C                     	;# 
  1072  008D                     	;# 
  1073  008E                     	;# 
  1074  0090                     	;# 
  1075  0091                     	;# 
  1076  0092                     	;# 
  1077  0095                     	;# 
  1078  0096                     	;# 
  1079  0097                     	;# 
  1080  0099                     	;# 
  1081  009A                     	;# 
  1082  009B                     	;# 
  1083  009B                     	;# 
  1084  009C                     	;# 
  1085  009D                     	;# 
  1086  009E                     	;# 
  1087  010C                     	;# 
  1088  010D                     	;# 
  1089  010E                     	;# 
  1090  0116                     	;# 
  1091  0117                     	;# 
  1092  011D                     	;# 
  1093  018C                     	;# 
  1094  018D                     	;# 
  1095  018E                     	;# 
  1096  0191                     	;# 
  1097  0191                     	;# 
  1098  0192                     	;# 
  1099  0193                     	;# 
  1100  0193                     	;# 
  1101  0194                     	;# 
  1102  0195                     	;# 
  1103  0196                     	;# 
  1104  0197                     	;# 
  1105  0199                     	;# 
  1106  019A                     	;# 
  1107  019B                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019C                     	;# 
  1112  019C                     	;# 
  1113  019D                     	;# 
  1114  019E                     	;# 
  1115  019F                     	;# 
  1116  020D                     	;# 
  1117  0210                     	;# 
  1118  0211                     	;# 
  1119  0211                     	;# 
  1120  0212                     	;# 
  1121  0212                     	;# 
  1122  0213                     	;# 
  1123  0213                     	;# 
  1124  0214                     	;# 
  1125  0214                     	;# 
  1126  0215                     	;# 
  1127  0215                     	;# 
  1128  0215                     	;# 
  1129  0216                     	;# 
  1130  0216                     	;# 
  1131  0217                     	;# 
  1132  0217                     	;# 
  1133  0291                     	;# 
  1134  0291                     	;# 
  1135  0292                     	;# 
  1136  0293                     	;# 
  1137  0298                     	;# 
  1138  0298                     	;# 
  1139  0299                     	;# 
  1140  029A                     	;# 
  1141  0394                     	;# 
  1142  0395                     	;# 
  1143  0396                     	;# 
  1144  0FE4                     	;# 
  1145  0FE5                     	;# 
  1146  0FE6                     	;# 
  1147  0FE7                     	;# 
  1148  0FE8                     	;# 
  1149  0FE9                     	;# 
  1150  0FEA                     	;# 
  1151  0FEB                     	;# 
  1152  0FED                     	;# 
  1153  0FEE                     	;# 
  1154  0FEF                     	;# 
  1155  0000                     	;# 
  1156  0001                     	;# 
  1157  0002                     	;# 
  1158  0003                     	;# 
  1159  0004                     	;# 
  1160  0005                     	;# 
  1161  0006                     	;# 
  1162  0007                     	;# 
  1163  0008                     	;# 
  1164  0009                     	;# 
  1165  000A                     	;# 
  1166  000B                     	;# 
  1167  000C                     	;# 
  1168  000D                     	;# 
  1169  000E                     	;# 
  1170  0010                     	;# 
  1171  0011                     	;# 
  1172  0012                     	;# 
  1173  0015                     	;# 
  1174  0016                     	;# 
  1175  0016                     	;# 
  1176  0017                     	;# 
  1177  0018                     	;# 
  1178  0019                     	;# 
  1179  001A                     	;# 
  1180  001B                     	;# 
  1181  001C                     	;# 
  1182  008C                     	;# 
  1183  008D                     	;# 
  1184  008E                     	;# 
  1185  0090                     	;# 
  1186  0091                     	;# 
  1187  0092                     	;# 
  1188  0095                     	;# 
  1189  0096                     	;# 
  1190  0097                     	;# 
  1191  0099                     	;# 
  1192  009A                     	;# 
  1193  009B                     	;# 
  1194  009B                     	;# 
  1195  009C                     	;# 
  1196  009D                     	;# 
  1197  009E                     	;# 
  1198  010C                     	;# 
  1199  010D                     	;# 
  1200  010E                     	;# 
  1201  0116                     	;# 
  1202  0117                     	;# 
  1203  011D                     	;# 
  1204  018C                     	;# 
  1205  018D                     	;# 
  1206  018E                     	;# 
  1207  0191                     	;# 
  1208  0191                     	;# 
  1209  0192                     	;# 
  1210  0193                     	;# 
  1211  0193                     	;# 
  1212  0194                     	;# 
  1213  0195                     	;# 
  1214  0196                     	;# 
  1215  0197                     	;# 
  1216  0199                     	;# 
  1217  019A                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019B                     	;# 
  1222  019C                     	;# 
  1223  019C                     	;# 
  1224  019D                     	;# 
  1225  019E                     	;# 
  1226  019F                     	;# 
  1227  020D                     	;# 
  1228  0210                     	;# 
  1229  0211                     	;# 
  1230  0211                     	;# 
  1231  0212                     	;# 
  1232  0212                     	;# 
  1233  0213                     	;# 
  1234  0213                     	;# 
  1235  0214                     	;# 
  1236  0214                     	;# 
  1237  0215                     	;# 
  1238  0215                     	;# 
  1239  0215                     	;# 
  1240  0216                     	;# 
  1241  0216                     	;# 
  1242  0217                     	;# 
  1243  0217                     	;# 
  1244  0291                     	;# 
  1245  0291                     	;# 
  1246  0292                     	;# 
  1247  0293                     	;# 
  1248  0298                     	;# 
  1249  0298                     	;# 
  1250  0299                     	;# 
  1251  029A                     	;# 
  1252  0394                     	;# 
  1253  0395                     	;# 
  1254  0396                     	;# 
  1255  0FE4                     	;# 
  1256  0FE5                     	;# 
  1257  0FE6                     	;# 
  1258  0FE7                     	;# 
  1259  0FE8                     	;# 
  1260  0FE9                     	;# 
  1261  0FEA                     	;# 
  1262  0FEB                     	;# 
  1263  0FED                     	;# 
  1264  0FEE                     	;# 
  1265  0FEF                     	;# 
  1266  0000                     	;# 
  1267  0001                     	;# 
  1268  0002                     	;# 
  1269  0003                     	;# 
  1270  0004                     	;# 
  1271  0005                     	;# 
  1272  0006                     	;# 
  1273  0007                     	;# 
  1274  0008                     	;# 
  1275  0009                     	;# 
  1276  000A                     	;# 
  1277  000B                     	;# 
  1278  000C                     	;# 
  1279  000D                     	;# 
  1280  000E                     	;# 
  1281  0010                     	;# 
  1282  0011                     	;# 
  1283  0012                     	;# 
  1284  0015                     	;# 
  1285  0016                     	;# 
  1286  0016                     	;# 
  1287  0017                     	;# 
  1288  0018                     	;# 
  1289  0019                     	;# 
  1290  001A                     	;# 
  1291  001B                     	;# 
  1292  001C                     	;# 
  1293  008C                     	;# 
  1294  008D                     	;# 
  1295  008E                     	;# 
  1296  0090                     	;# 
  1297  0091                     	;# 
  1298  0092                     	;# 
  1299  0095                     	;# 
  1300  0096                     	;# 
  1301  0097                     	;# 
  1302  0099                     	;# 
  1303  009A                     	;# 
  1304  009B                     	;# 
  1305  009B                     	;# 
  1306  009C                     	;# 
  1307  009D                     	;# 
  1308  009E                     	;# 
  1309  010C                     	;# 
  1310  010D                     	;# 
  1311  010E                     	;# 
  1312  0116                     	;# 
  1313  0117                     	;# 
  1314  011D                     	;# 
  1315  018C                     	;# 
  1316  018D                     	;# 
  1317  018E                     	;# 
  1318  0191                     	;# 
  1319  0191                     	;# 
  1320  0192                     	;# 
  1321  0193                     	;# 
  1322  0193                     	;# 
  1323  0194                     	;# 
  1324  0195                     	;# 
  1325  0196                     	;# 
  1326  0197                     	;# 
  1327  0199                     	;# 
  1328  019A                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019B                     	;# 
  1333  019C                     	;# 
  1334  019C                     	;# 
  1335  019D                     	;# 
  1336  019E                     	;# 
  1337  019F                     	;# 
  1338  020D                     	;# 
  1339  0210                     	;# 
  1340  0211                     	;# 
  1341  0211                     	;# 
  1342  0212                     	;# 
  1343  0212                     	;# 
  1344  0213                     	;# 
  1345  0213                     	;# 
  1346  0214                     	;# 
  1347  0214                     	;# 
  1348  0215                     	;# 
  1349  0215                     	;# 
  1350  0215                     	;# 
  1351  0216                     	;# 
  1352  0216                     	;# 
  1353  0217                     	;# 
  1354  0217                     	;# 
  1355  0291                     	;# 
  1356  0291                     	;# 
  1357  0292                     	;# 
  1358  0293                     	;# 
  1359  0298                     	;# 
  1360  0298                     	;# 
  1361  0299                     	;# 
  1362  029A                     	;# 
  1363  0394                     	;# 
  1364  0395                     	;# 
  1365  0396                     	;# 
  1366  0FE4                     	;# 
  1367  0FE5                     	;# 
  1368  0FE6                     	;# 
  1369  0FE7                     	;# 
  1370  0FE8                     	;# 
  1371  0FE9                     	;# 
  1372  0FEA                     	;# 
  1373  0FEB                     	;# 
  1374  0FED                     	;# 
  1375  0FEE                     	;# 
  1376  0FEF                     	;# 
  1377  0000                     	;# 
  1378  0001                     	;# 
  1379  0002                     	;# 
  1380  0003                     	;# 
  1381  0004                     	;# 
  1382  0005                     	;# 
  1383  0006                     	;# 
  1384  0007                     	;# 
  1385  0008                     	;# 
  1386  0009                     	;# 
  1387  000A                     	;# 
  1388  000B                     	;# 
  1389  000C                     	;# 
  1390  000D                     	;# 
  1391  000E                     	;# 
  1392  0010                     	;# 
  1393  0011                     	;# 
  1394  0012                     	;# 
  1395  0015                     	;# 
  1396  0016                     	;# 
  1397  0016                     	;# 
  1398  0017                     	;# 
  1399  0018                     	;# 
  1400  0019                     	;# 
  1401  001A                     	;# 
  1402  001B                     	;# 
  1403  001C                     	;# 
  1404  008C                     	;# 
  1405  008D                     	;# 
  1406  008E                     	;# 
  1407  0090                     	;# 
  1408  0091                     	;# 
  1409  0092                     	;# 
  1410  0095                     	;# 
  1411  0096                     	;# 
  1412  0097                     	;# 
  1413  0099                     	;# 
  1414  009A                     	;# 
  1415  009B                     	;# 
  1416  009B                     	;# 
  1417  009C                     	;# 
  1418  009D                     	;# 
  1419  009E                     	;# 
  1420  010C                     	;# 
  1421  010D                     	;# 
  1422  010E                     	;# 
  1423  0116                     	;# 
  1424  0117                     	;# 
  1425  011D                     	;# 
  1426  018C                     	;# 
  1427  018D                     	;# 
  1428  018E                     	;# 
  1429  0191                     	;# 
  1430  0191                     	;# 
  1431  0192                     	;# 
  1432  0193                     	;# 
  1433  0193                     	;# 
  1434  0194                     	;# 
  1435  0195                     	;# 
  1436  0196                     	;# 
  1437  0197                     	;# 
  1438  0199                     	;# 
  1439  019A                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019B                     	;# 
  1444  019C                     	;# 
  1445  019C                     	;# 
  1446  019D                     	;# 
  1447  019E                     	;# 
  1448  019F                     	;# 
  1449  020D                     	;# 
  1450  0210                     	;# 
  1451  0211                     	;# 
  1452  0211                     	;# 
  1453  0212                     	;# 
  1454  0212                     	;# 
  1455  0213                     	;# 
  1456  0213                     	;# 
  1457  0214                     	;# 
  1458  0214                     	;# 
  1459  0215                     	;# 
  1460  0215                     	;# 
  1461  0215                     	;# 
  1462  0216                     	;# 
  1463  0216                     	;# 
  1464  0217                     	;# 
  1465  0217                     	;# 
  1466  0291                     	;# 
  1467  0291                     	;# 
  1468  0292                     	;# 
  1469  0293                     	;# 
  1470  0298                     	;# 
  1471  0298                     	;# 
  1472  0299                     	;# 
  1473  029A                     	;# 
  1474  0394                     	;# 
  1475  0395                     	;# 
  1476  0396                     	;# 
  1477  0FE4                     	;# 
  1478  0FE5                     	;# 
  1479  0FE6                     	;# 
  1480  0FE7                     	;# 
  1481  0FE8                     	;# 
  1482  0FE9                     	;# 
  1483  0FEA                     	;# 
  1484  0FEB                     	;# 
  1485  0FED                     	;# 
  1486  0FEE                     	;# 
  1487  0FEF                     	;# 
  1488  0000                     	;# 
  1489  0001                     	;# 
  1490  0002                     	;# 
  1491  0003                     	;# 
  1492  0004                     	;# 
  1493  0005                     	;# 
  1494  0006                     	;# 
  1495  0007                     	;# 
  1496  0008                     	;# 
  1497  0009                     	;# 
  1498  000A                     	;# 
  1499  000B                     	;# 
  1500  000C                     	;# 
  1501  000D                     	;# 
  1502  000E                     	;# 
  1503  0010                     	;# 
  1504  0011                     	;# 
  1505  0012                     	;# 
  1506  0015                     	;# 
  1507  0016                     	;# 
  1508  0016                     	;# 
  1509  0017                     	;# 
  1510  0018                     	;# 
  1511  0019                     	;# 
  1512  001A                     	;# 
  1513  001B                     	;# 
  1514  001C                     	;# 
  1515  008C                     	;# 
  1516  008D                     	;# 
  1517  008E                     	;# 
  1518  0090                     	;# 
  1519  0091                     	;# 
  1520  0092                     	;# 
  1521  0095                     	;# 
  1522  0096                     	;# 
  1523  0097                     	;# 
  1524  0099                     	;# 
  1525  009A                     	;# 
  1526  009B                     	;# 
  1527  009B                     	;# 
  1528  009C                     	;# 
  1529  009D                     	;# 
  1530  009E                     	;# 
  1531  010C                     	;# 
  1532  010D                     	;# 
  1533  010E                     	;# 
  1534  0116                     	;# 
  1535  0117                     	;# 
  1536  011D                     	;# 
  1537  018C                     	;# 
  1538  018D                     	;# 
  1539  018E                     	;# 
  1540  0191                     	;# 
  1541  0191                     	;# 
  1542  0192                     	;# 
  1543  0193                     	;# 
  1544  0193                     	;# 
  1545  0194                     	;# 
  1546  0195                     	;# 
  1547  0196                     	;# 
  1548  0197                     	;# 
  1549  0199                     	;# 
  1550  019A                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019C                     	;# 
  1556  019C                     	;# 
  1557  019D                     	;# 
  1558  019E                     	;# 
  1559  019F                     	;# 
  1560  020D                     	;# 
  1561  0210                     	;# 
  1562  0211                     	;# 
  1563  0211                     	;# 
  1564  0212                     	;# 
  1565  0212                     	;# 
  1566  0213                     	;# 
  1567  0213                     	;# 
  1568  0214                     	;# 
  1569  0214                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0215                     	;# 
  1573  0216                     	;# 
  1574  0216                     	;# 
  1575  0217                     	;# 
  1576  0217                     	;# 
  1577  0291                     	;# 
  1578  0291                     	;# 
  1579  0292                     	;# 
  1580  0293                     	;# 
  1581  0298                     	;# 
  1582  0298                     	;# 
  1583  0299                     	;# 
  1584  029A                     	;# 
  1585  0394                     	;# 
  1586  0395                     	;# 
  1587  0396                     	;# 
  1588  0FE4                     	;# 
  1589  0FE5                     	;# 
  1590  0FE6                     	;# 
  1591  0FE7                     	;# 
  1592  0FE8                     	;# 
  1593  0FE9                     	;# 
  1594  0FEA                     	;# 
  1595  0FEB                     	;# 
  1596  0FED                     	;# 
  1597  0FEE                     	;# 
  1598  0FEF                     	;# 
  1599  0000                     	;# 
  1600  0001                     	;# 
  1601  0002                     	;# 
  1602  0003                     	;# 
  1603  0004                     	;# 
  1604  0005                     	;# 
  1605  0006                     	;# 
  1606  0007                     	;# 
  1607  0008                     	;# 
  1608  0009                     	;# 
  1609  000A                     	;# 
  1610  000B                     	;# 
  1611  000C                     	;# 
  1612  000D                     	;# 
  1613  000E                     	;# 
  1614  0010                     	;# 
  1615  0011                     	;# 
  1616  0012                     	;# 
  1617  0015                     	;# 
  1618  0016                     	;# 
  1619  0016                     	;# 
  1620  0017                     	;# 
  1621  0018                     	;# 
  1622  0019                     	;# 
  1623  001A                     	;# 
  1624  001B                     	;# 
  1625  001C                     	;# 
  1626  008C                     	;# 
  1627  008D                     	;# 
  1628  008E                     	;# 
  1629  0090                     	;# 
  1630  0091                     	;# 
  1631  0092                     	;# 
  1632  0095                     	;# 
  1633  0096                     	;# 
  1634  0097                     	;# 
  1635  0099                     	;# 
  1636  009A                     	;# 
  1637  009B                     	;# 
  1638  009B                     	;# 
  1639  009C                     	;# 
  1640  009D                     	;# 
  1641  009E                     	;# 
  1642  010C                     	;# 
  1643  010D                     	;# 
  1644  010E                     	;# 
  1645  0116                     	;# 
  1646  0117                     	;# 
  1647  011D                     	;# 
  1648  018C                     	;# 
  1649  018D                     	;# 
  1650  018E                     	;# 
  1651  0191                     	;# 
  1652  0191                     	;# 
  1653  0192                     	;# 
  1654  0193                     	;# 
  1655  0193                     	;# 
  1656  0194                     	;# 
  1657  0195                     	;# 
  1658  0196                     	;# 
  1659  0197                     	;# 
  1660  0199                     	;# 
  1661  019A                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019B                     	;# 
  1666  019C                     	;# 
  1667  019C                     	;# 
  1668  019D                     	;# 
  1669  019E                     	;# 
  1670  019F                     	;# 
  1671  020D                     	;# 
  1672  0210                     	;# 
  1673  0211                     	;# 
  1674  0211                     	;# 
  1675  0212                     	;# 
  1676  0212                     	;# 
  1677  0213                     	;# 
  1678  0213                     	;# 
  1679  0214                     	;# 
  1680  0214                     	;# 
  1681  0215                     	;# 
  1682  0215                     	;# 
  1683  0215                     	;# 
  1684  0216                     	;# 
  1685  0216                     	;# 
  1686  0217                     	;# 
  1687  0217                     	;# 
  1688  0291                     	;# 
  1689  0291                     	;# 
  1690  0292                     	;# 
  1691  0293                     	;# 
  1692  0298                     	;# 
  1693  0298                     	;# 
  1694  0299                     	;# 
  1695  029A                     	;# 
  1696  0394                     	;# 
  1697  0395                     	;# 
  1698  0396                     	;# 
  1699  0FE4                     	;# 
  1700  0FE5                     	;# 
  1701  0FE6                     	;# 
  1702  0FE7                     	;# 
  1703  0FE8                     	;# 
  1704  0FE9                     	;# 
  1705  0FEA                     	;# 
  1706  0FEB                     	;# 
  1707  0FED                     	;# 
  1708  0FEE                     	;# 
  1709  0FEF                     	;# 
  1710  0000                     	;# 
  1711  0001                     	;# 
  1712  0002                     	;# 
  1713  0003                     	;# 
  1714  0004                     	;# 
  1715  0005                     	;# 
  1716  0006                     	;# 
  1717  0007                     	;# 
  1718  0008                     	;# 
  1719  0009                     	;# 
  1720  000A                     	;# 
  1721  000B                     	;# 
  1722  000C                     	;# 
  1723  000D                     	;# 
  1724  000E                     	;# 
  1725  0010                     	;# 
  1726  0011                     	;# 
  1727  0012                     	;# 
  1728  0015                     	;# 
  1729  0016                     	;# 
  1730  0016                     	;# 
  1731  0017                     	;# 
  1732  0018                     	;# 
  1733  0019                     	;# 
  1734  001A                     	;# 
  1735  001B                     	;# 
  1736  001C                     	;# 
  1737  008C                     	;# 
  1738  008D                     	;# 
  1739  008E                     	;# 
  1740  0090                     	;# 
  1741  0091                     	;# 
  1742  0092                     	;# 
  1743  0095                     	;# 
  1744  0096                     	;# 
  1745  0097                     	;# 
  1746  0099                     	;# 
  1747  009A                     	;# 
  1748  009B                     	;# 
  1749  009B                     	;# 
  1750  009C                     	;# 
  1751  009D                     	;# 
  1752  009E                     	;# 
  1753  010C                     	;# 
  1754  010D                     	;# 
  1755  010E                     	;# 
  1756  0116                     	;# 
  1757  0117                     	;# 
  1758  011D                     	;# 
  1759  018C                     	;# 
  1760  018D                     	;# 
  1761  018E                     	;# 
  1762  0191                     	;# 
  1763  0191                     	;# 
  1764  0192                     	;# 
  1765  0193                     	;# 
  1766  0193                     	;# 
  1767  0194                     	;# 
  1768  0195                     	;# 
  1769  0196                     	;# 
  1770  0197                     	;# 
  1771  0199                     	;# 
  1772  019A                     	;# 
  1773  019B                     	;# 
  1774  019B                     	;# 
  1775  019B                     	;# 
  1776  019B                     	;# 
  1777  019C                     	;# 
  1778  019C                     	;# 
  1779  019D                     	;# 
  1780  019E                     	;# 
  1781  019F                     	;# 
  1782  020D                     	;# 
  1783  0210                     	;# 
  1784  0211                     	;# 
  1785  0211                     	;# 
  1786  0212                     	;# 
  1787  0212                     	;# 
  1788  0213                     	;# 
  1789  0213                     	;# 
  1790  0214                     	;# 
  1791  0214                     	;# 
  1792  0215                     	;# 
  1793  0215                     	;# 
  1794  0215                     	;# 
  1795  0216                     	;# 
  1796  0216                     	;# 
  1797  0217                     	;# 
  1798  0217                     	;# 
  1799  0291                     	;# 
  1800  0291                     	;# 
  1801  0292                     	;# 
  1802  0293                     	;# 
  1803  0298                     	;# 
  1804  0298                     	;# 
  1805  0299                     	;# 
  1806  029A                     	;# 
  1807  0394                     	;# 
  1808  0395                     	;# 
  1809  0396                     	;# 
  1810  0FE4                     	;# 
  1811  0FE5                     	;# 
  1812  0FE6                     	;# 
  1813  0FE7                     	;# 
  1814  0FE8                     	;# 
  1815  0FE9                     	;# 
  1816  0FEA                     	;# 
  1817  0FEB                     	;# 
  1818  0FED                     	;# 
  1819  0FEE                     	;# 
  1820  0FEF                     	;# 
  1821  0000                     	;# 
  1822  0001                     	;# 
  1823  0002                     	;# 
  1824  0003                     	;# 
  1825  0004                     	;# 
  1826  0005                     	;# 
  1827  0006                     	;# 
  1828  0007                     	;# 
  1829  0008                     	;# 
  1830  0009                     	;# 
  1831  000A                     	;# 
  1832  000B                     	;# 
  1833  000C                     	;# 
  1834  000D                     	;# 
  1835  000E                     	;# 
  1836  0010                     	;# 
  1837  0011                     	;# 
  1838  0012                     	;# 
  1839  0015                     	;# 
  1840  0016                     	;# 
  1841  0016                     	;# 
  1842  0017                     	;# 
  1843  0018                     	;# 
  1844  0019                     	;# 
  1845  001A                     	;# 
  1846  001B                     	;# 
  1847  001C                     	;# 
  1848  008C                     	;# 
  1849  008D                     	;# 
  1850  008E                     	;# 
  1851  0090                     	;# 
  1852  0091                     	;# 
  1853  0092                     	;# 
  1854  0095                     	;# 
  1855  0096                     	;# 
  1856  0097                     	;# 
  1857  0099                     	;# 
  1858  009A                     	;# 
  1859  009B                     	;# 
  1860  009B                     	;# 
  1861  009C                     	;# 
  1862  009D                     	;# 
  1863  009E                     	;# 
  1864  010C                     	;# 
  1865  010D                     	;# 
  1866  010E                     	;# 
  1867  0116                     	;# 
  1868  0117                     	;# 
  1869  011D                     	;# 
  1870  018C                     	;# 
  1871  018D                     	;# 
  1872  018E                     	;# 
  1873  0191                     	;# 
  1874  0191                     	;# 
  1875  0192                     	;# 
  1876  0193                     	;# 
  1877  0193                     	;# 
  1878  0194                     	;# 
  1879  0195                     	;# 
  1880  0196                     	;# 
  1881  0197                     	;# 
  1882  0199                     	;# 
  1883  019A                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019B                     	;# 
  1887  019B                     	;# 
  1888  019C                     	;# 
  1889  019C                     	;# 
  1890  019D                     	;# 
  1891  019E                     	;# 
  1892  019F                     	;# 
  1893  020D                     	;# 
  1894  0210                     	;# 
  1895  0211                     	;# 
  1896  0211                     	;# 
  1897  0212                     	;# 
  1898  0212                     	;# 
  1899  0213                     	;# 
  1900  0213                     	;# 
  1901  0214                     	;# 
  1902  0214                     	;# 
  1903  0215                     	;# 
  1904  0215                     	;# 
  1905  0215                     	;# 
  1906  0216                     	;# 
  1907  0216                     	;# 
  1908  0217                     	;# 
  1909  0217                     	;# 
  1910  0291                     	;# 
  1911  0291                     	;# 
  1912  0292                     	;# 
  1913  0293                     	;# 
  1914  0298                     	;# 
  1915  0298                     	;# 
  1916  0299                     	;# 
  1917  029A                     	;# 
  1918  0394                     	;# 
  1919  0395                     	;# 
  1920  0396                     	;# 
  1921  0FE4                     	;# 
  1922  0FE5                     	;# 
  1923  0FE6                     	;# 
  1924  0FE7                     	;# 
  1925  0FE8                     	;# 
  1926  0FE9                     	;# 
  1927  0FEA                     	;# 
  1928  0FEB                     	;# 
  1929  0FED                     	;# 
  1930  0FEE                     	;# 
  1931  0FEF                     	;# 
  1932  0000                     	;# 
  1933  0001                     	;# 
  1934  0002                     	;# 
  1935  0003                     	;# 
  1936  0004                     	;# 
  1937  0005                     	;# 
  1938  0006                     	;# 
  1939  0007                     	;# 
  1940  0008                     	;# 
  1941  0009                     	;# 
  1942  000A                     	;# 
  1943  000B                     	;# 
  1944  000C                     	;# 
  1945  000D                     	;# 
  1946  000E                     	;# 
  1947  0010                     	;# 
  1948  0011                     	;# 
  1949  0012                     	;# 
  1950  0015                     	;# 
  1951  0016                     	;# 
  1952  0016                     	;# 
  1953  0017                     	;# 
  1954  0018                     	;# 
  1955  0019                     	;# 
  1956  001A                     	;# 
  1957  001B                     	;# 
  1958  001C                     	;# 
  1959  008C                     	;# 
  1960  008D                     	;# 
  1961  008E                     	;# 
  1962  0090                     	;# 
  1963  0091                     	;# 
  1964  0092                     	;# 
  1965  0095                     	;# 
  1966  0096                     	;# 
  1967  0097                     	;# 
  1968  0099                     	;# 
  1969  009A                     	;# 
  1970  009B                     	;# 
  1971  009B                     	;# 
  1972  009C                     	;# 
  1973  009D                     	;# 
  1974  009E                     	;# 
  1975  010C                     	;# 
  1976  010D                     	;# 
  1977  010E                     	;# 
  1978  0116                     	;# 
  1979  0117                     	;# 
  1980  011D                     	;# 
  1981  018C                     	;# 
  1982  018D                     	;# 
  1983  018E                     	;# 
  1984  0191                     	;# 
  1985  0191                     	;# 
  1986  0192                     	;# 
  1987  0193                     	;# 
  1988  0193                     	;# 
  1989  0194                     	;# 
  1990  0195                     	;# 
  1991  0196                     	;# 
  1992  0197                     	;# 
  1993  0199                     	;# 
  1994  019A                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019B                     	;# 
  1999  019C                     	;# 
  2000  019C                     	;# 
  2001  019D                     	;# 
  2002  019E                     	;# 
  2003  019F                     	;# 
  2004  020D                     	;# 
  2005  0210                     	;# 
  2006  0211                     	;# 
  2007  0211                     	;# 
  2008  0212                     	;# 
  2009  0212                     	;# 
  2010  0213                     	;# 
  2011  0213                     	;# 
  2012  0214                     	;# 
  2013  0214                     	;# 
  2014  0215                     	;# 
  2015  0215                     	;# 
  2016  0215                     	;# 
  2017  0216                     	;# 
  2018  0216                     	;# 
  2019  0217                     	;# 
  2020  0217                     	;# 
  2021  0291                     	;# 
  2022  0291                     	;# 
  2023  0292                     	;# 
  2024  0293                     	;# 
  2025  0298                     	;# 
  2026  0298                     	;# 
  2027  0299                     	;# 
  2028  029A                     	;# 
  2029  0394                     	;# 
  2030  0395                     	;# 
  2031  0396                     	;# 
  2032  0FE4                     	;# 
  2033  0FE5                     	;# 
  2034  0FE6                     	;# 
  2035  0FE7                     	;# 
  2036  0FE8                     	;# 
  2037  0FE9                     	;# 
  2038  0FEA                     	;# 
  2039  0FEB                     	;# 
  2040  0FED                     	;# 
  2041  0FEE                     	;# 
  2042  0FEF                     	;# 
  2043                           
  2044                           	psect	idataBANK4
  2045  1F58                     __pidataBANK4:	
  2046                           
  2047                           ;initializer for __product
  2048  1F58  3463               	retlw	99
  2049  1F59  3402               	retlw	2
  2050  1F5A  3400               	retlw	0
  2051  1F5B  3400               	retlw	0
  2052  1F5C  3400               	retlw	0
  2053  1F5D  3400               	retlw	0
  2054  1F5E  3400               	retlw	0
  2055  1F5F  3400               	retlw	0
  2056  1F60  3400               	retlw	0
  2057  1F61  3400               	retlw	0
  2058  1F62  3400               	retlw	0
  2059  1F63  3400               	retlw	0
  2060  1F64  34FF               	retlw	255
  2061  1F65  34FF               	retlw	255
  2062  1F66  34FF               	retlw	255
  2063  1F67  3400               	retlw	0
  2064  1F68  3400               	retlw	0
  2065  1F69  3400               	retlw	0
  2066  1F6A  3400               	retlw	0
  2067  1F6B  3400               	retlw	0
  2068  1F6C  3400               	retlw	0
  2069  1F6D  3400               	retlw	0
  2070  1F6E  3400               	retlw	0
  2071  1F6F  3400               	retlw	0
  2072  1F70  3400               	retlw	0
  2073  1F71  3400               	retlw	0
  2074  1F72  3400               	retlw	0
  2075  1F73  3400               	retlw	0
  2076  1F74  3400               	retlw	0
  2077  1F75  3400               	retlw	0
  2078  1F76  3400               	retlw	0
  2079  1F77  3400               	retlw	0
  2080                           
  2081                           	psect	stringtext
  2082  1000                     __pstringtext:	
  2083  1000                     _CC2500_registers_address:	
  2084  1000  3403               	retlw	3
  2085  1001  3416               	retlw	22
  2086  1002  3417               	retlw	23
  2087  1003  341E               	retlw	30
  2088  1004  341F               	retlw	31
  2089  1005  3420               	retlw	32
  2090  1006  342A               	retlw	42
  2091  1007  342B               	retlw	43
  2092  1008  340B               	retlw	11
  2093  1009  340C               	retlw	12
  2094  100A  340D               	retlw	13
  2095  100B  340E               	retlw	14
  2096  100C  340F               	retlw	15
  2097  100D  3410               	retlw	16
  2098  100E  3411               	retlw	17
  2099  100F  3412               	retlw	18
  2100  1010  3413               	retlw	19
  2101  1011  3414               	retlw	20
  2102  1012  340A               	retlw	10
  2103  1013  3415               	retlw	21
  2104  1014  3421               	retlw	33
  2105  1015  3422               	retlw	34
  2106  1016  3418               	retlw	24
  2107  1017  3419               	retlw	25
  2108  1018  341A               	retlw	26
  2109  1019  341B               	retlw	27
  2110  101A  341C               	retlw	28
  2111  101B  341D               	retlw	29
  2112  101C  3423               	retlw	35
  2113  101D  3424               	retlw	36
  2114  101E  3425               	retlw	37
  2115  101F  3426               	retlw	38
  2116  1020  3429               	retlw	41
  2117  1021  342C               	retlw	44
  2118  1022  342D               	retlw	45
  2119  1023  342E               	retlw	46
  2120  1024  3400               	retlw	0
  2121  1025  3401               	retlw	1
  2122  1026  3402               	retlw	2
  2123  1027  3407               	retlw	7
  2124  1028  3408               	retlw	8
  2125  1029  3409               	retlw	9
  2126  102A  3406               	retlw	6
  2127  102B  3404               	retlw	4
  2128  102C  3405               	retlw	5
  2129  102D  3427               	retlw	39
  2130  102E  3428               	retlw	40
  2131  102F                     __end_of_CC2500_registers_address:	
  2132  102F                     _CC2500_rfSettings:	
  2133  102F  3407               	retlw	7
  2134  1030  3407               	retlw	7
  2135  1031  3430               	retlw	48
  2136  1032  3487               	retlw	135
  2137  1033  346B               	retlw	107
  2138  1034  34F8               	retlw	248
  2139  1035  347F               	retlw	127
  2140  1036  343F               	retlw	63
  2141  1037  3409               	retlw	9
  2142  1038  3400               	retlw	0
  2143  1039  345C               	retlw	92
  2144  103A  34A7               	retlw	167
  2145  103B  3462               	retlw	98
  2146  103C  3486               	retlw	134
  2147  103D  3483               	retlw	131
  2148  103E  3403               	retlw	3
  2149  103F  3422               	retlw	34
  2150  1040  34F8               	retlw	248
  2151  1041  3400               	retlw	0
  2152  1042  3444               	retlw	68
  2153  1043  34B6               	retlw	182
  2154  1044  3410               	retlw	16
  2155  1045  3418               	retlw	24
  2156  1046  341D               	retlw	29
  2157  1047  341C               	retlw	28
  2158  1048  34C7               	retlw	199
  2159  1049  3400               	retlw	0
  2160  104A  34B2               	retlw	178
  2161  104B  34EA               	retlw	234
  2162  104C  340A               	retlw	10
  2163  104D  3400               	retlw	0
  2164  104E  3411               	retlw	17
  2165  104F  3459               	retlw	89
  2166  1050  3488               	retlw	136
  2167  1051  3431               	retlw	49
  2168  1052  340B               	retlw	11
  2169  1053  342F               	retlw	47
  2170  1054  342E               	retlw	46
  2171  1055  3406               	retlw	6
  2172  1056  3404               	retlw	4
  2173  1057  3405               	retlw	5
  2174  1058  3400               	retlw	0
  2175  1059  3430               	retlw	48
  2176  105A  34D3               	retlw	211
  2177  105B  3491               	retlw	145
  2178  105C  3441               	retlw	65
  2179  105D  3400               	retlw	0
  2180  105E                     __end_of_CC2500_rfSettings:	
  2181  105E                     _CC2500_patable_vaule:	
  2182  105E  34FE               	retlw	254
  2183  105F  34FE               	retlw	254
  2184  1060  34FE               	retlw	254
  2185  1061  34FE               	retlw	254
  2186  1062  34FE               	retlw	254
  2187  1063  34FE               	retlw	254
  2188  1064  34FE               	retlw	254
  2189  1065  34FE               	retlw	254
  2190  1066                     __end_of_CC2500_patable_vaule:	
  2191                           
  2192                           	psect	nvBANK0
  2193  006E                     __pnvBANK0:	
  2194  006E                     _product:	
  2195  006E                     	ds	1
  2196  000C                     _PORTA	set	12
  2197  000D                     _PORTB	set	13
  2198  000E                     _PORTC	set	14
  2199  0018                     _T1CON	set	24
  2200  0017                     _TMR1H	set	23
  2201  0016                     _TMR1L	set	22
  2202  005F                     _GIE	set	95
  2203  005B                     _IOCIE	set	91
  2204  0058                     _IOCIF	set	88
  2205  005E                     _PEIE	set	94
  2206  0060                     _RA0	set	96
  2207  0063                     _RA3	set	99
  2208  0064                     _RA4	set	100
  2209  0066                     _RA6	set	102
  2210  0067                     _RA7	set	103
  2211  0068                     _RB0	set	104
  2212  0069                     _RB1	set	105
  2213  006B                     _RB3	set	107
  2214  006C                     _RB4	set	108
  2215  006D                     _RB5	set	109
  2216  0070                     _RC0	set	112
  2217  0071                     _RC1	set	113
  2218  0072                     _RC2	set	114
  2219  0074                     _RC4	set	116
  2220  0075                     _RC5	set	117
  2221  0077                     _RC7	set	119
  2222  0088                     _TMR1IF	set	136
  2223  009D                     _ADCON0	set	157
  2224  009E                     _ADCON1	set	158
  2225  009C                     _ADRESH	set	156
  2226  009B                     _ADRESL	set	155
  2227  0099                     _OSCCON	set	153
  2228  008C                     _TRISA	set	140
  2229  008D                     _TRISB	set	141
  2230  008E                     _TRISC	set	142
  2231  0097                     _WDTCON	set	151
  2232  04E9                     _GO_nDONE	set	1257
  2233  0488                     _TMR1IE	set	1160
  2234  0117                     _FVRCON	set	279
  2235  010C                     _LATA	set	268
  2236  010D                     _LATB	set	269
  2237  010E                     _LATC	set	270
  2238  018C                     _ANSELA	set	396
  2239  018D                     _ANSELB	set	397
  2240  018E                     _ANSELC	set	398
  2241  0192                     _PMADRH	set	402
  2242  0191                     _PMADRL	set	401
  2243  0196                     _PMCON2	set	406
  2244  0194                     _PMDATH	set	404
  2245  0193                     _PMDATL	set	403
  2246  0CAE                     _CFGS	set	3246
  2247  0CAC                     _FREE	set	3244
  2248  0CAD                     _LWLO	set	3245
  2249  0CA8                     _RD	set	3240
  2250  0CA9                     _WR	set	3241
  2251  0CAA                     _WREN	set	3242
  2252  1069                     _WPUB1	set	4201
  2253  106A                     _WPUB2	set	4202
  2254  0396                     _IOCBF	set	918
  2255  0395                     _IOCBN	set	917
  2256  0394                     _IOCBP	set	916
  2257  1CB2                     _IOCBF2	set	7346
  2258                           
  2259                           ; #config settings
  2260  0000                     
  2261                           	psect	cinit
  2262  0015                     start_initialization:	
  2263  0015                     __initialization:	
  2264                           
  2265                           ; Clear objects allocated to BITCOMMON
  2266  0015  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2267                           
  2268                           ; Clear objects allocated to COMMON
  2269  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2270  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2271  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2272  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2273  001A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2274                           
  2275                           ; Clear objects allocated to BANK0
  2276  001B  01EF               	clrf	__pbssBANK0& (0+127)
  2277                           
  2278                           ; Clear objects allocated to BANK1
  2279  001C  30A0               	movlw	low __pbssBANK1
  2280  001D  0084               	movwf	4
  2281  001E  3000               	movlw	high __pbssBANK1
  2282  001F  0085               	movwf	5
  2283  0020  3049               	movlw	73
  2284  0021  319B  235C  3180   	fcall	clear_ram0
  2285                           
  2286                           ; Clear objects allocated to BANK2
  2287  0024  3020               	movlw	low __pbssBANK2
  2288  0025  0084               	movwf	4
  2289  0026  3001               	movlw	high __pbssBANK2
  2290  0027  0085               	movwf	5
  2291  0028  3049               	movlw	73
  2292  0029  319B  235C  3180   	fcall	clear_ram0
  2293                           
  2294                           ; Clear objects allocated to BANK3
  2295  002C  30A0               	movlw	low __pbssBANK3
  2296  002D  0084               	movwf	4
  2297  002E  3001               	movlw	high __pbssBANK3
  2298  002F  0085               	movwf	5
  2299  0030  304E               	movlw	78
  2300  0031  319B  235C  3180   	fcall	clear_ram0
  2301                           
  2302                           ; Clear objects allocated to BANK4
  2303  0034  3020               	movlw	low __pbssBANK4
  2304  0035  0084               	movwf	4
  2305  0036  3002               	movlw	high __pbssBANK4
  2306  0037  0085               	movwf	5
  2307  0038  3025               	movlw	37
  2308  0039  319B  235C  3180   	fcall	clear_ram0
  2309                           
  2310                           ; Initialize objects allocated to BANK4
  2311  003C  3058               	movlw	low __pidataBANK4
  2312  003D  0084               	movwf	4
  2313  003E  309F               	movlw	(high __pidataBANK4)| (0+128)
  2314  003F  0085               	movwf	5
  2315  0040  3045               	movlw	low __pdataBANK4
  2316  0041  0086               	movwf	6
  2317  0042  3002               	movlw	high __pdataBANK4
  2318  0043  0087               	movwf	7
  2319  0044  3020               	movlw	32
  2320  0045  319B  2356         	fcall	init_ram
  2321  0047                     end_of_initialization:	
  2322                           ;End of C runtime variable initialization code
  2323                           
  2324  0047                     __end_of__initialization:	
  2325  0047  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2326  0048  0020               	movlb	0
  2327  0049  3196  2E3E         	ljmp	_main	;jump to C main() function
  2328                           
  2329                           	psect	bitbssCOMMON
  2330  03E8                     __pbitbssCOMMON:	
  2331  03E8                     _Receive_OK:	
  2332  03E8                     	ds	1
  2333  03E9                     _Transceive_OK:	
  2334  03E9                     	ds	1
  2335                           
  2336                           	psect	bssCOMMON
  2337  0078                     __pbssCOMMON:	
  2338  0078                     _DelayOff:	
  2339  0078                     	ds	1
  2340  0079                     _DimmerLightsIntr:	
  2341  0079                     	ds	1
  2342  007A                     _LED:	
  2343  007A                     	ds	1
  2344  007B                     _SPI0Buffer:	
  2345  007B                     	ds	1
  2346  007C                     _Sw:	
  2347  007C                     	ds	1
  2348                           
  2349                           	psect	bssBANK0
  2350  006F                     __pbssBANK0:	
  2351  006F                     _DimmerLights:	
  2352  006F                     	ds	1
  2353                           
  2354                           	psect	bssBANK1
  2355  00A0                     __pbssBANK1:	
  2356  00A0                     _myMain:	
  2357  00A0                     	ds	16
  2358  00B0                     _Buz1:	
  2359  00B0                     	ds	12
  2360  00BC                     _RF1:	
  2361  00BC                     	ds	12
  2362  00C8                     _RF_Count:	
  2363  00C8                     	ds	2
  2364  00CA                     _WDT:	
  2365  00CA                     	ds	2
  2366  00CC                     _CRC:	
  2367  00CC                     	ds	1
  2368  00CD                     _DimmerLights11:	
  2369  00CD                     	ds	1
  2370  00CE                     _DimmerLights22:	
  2371  00CE                     	ds	1
  2372  00CF                     _DimmerLightsIntrIOC:	
  2373  00CF                     	ds	1
  2374  00D0                     _RSSI:	
  2375  00D0                     	ds	1
  2376  00D1                     _Rx_Length:	
  2377  00D1                     	ds	1
  2378  00D2                     _SwDetect:	
  2379  00D2                     	ds	1
  2380  00D3                     _Tx_Length:	
  2381  00D3                     	ds	1
  2382  00D4                     _r_address:	
  2383  00D4                     	ds	1
  2384  00D5                     _r_data:	
  2385  00D5                     	ds	1
  2386  00D6                     _s_data:	
  2387  00D6                     	ds	1
  2388  00D7                     _Temp:	
  2389  00D7                     	ds	18
  2390                           
  2391                           	psect	bssBANK2
  2392  0120                     __pbssBANK2:	
  2393  0120                     _Dimmer:	
  2394  0120                     	ds	3
  2395  0123                     _Timer1:	
  2396  0123                     	ds	3
  2397  0126                     _Load:	
  2398  0126                     	ds	45
  2399  0153                     _DlySw1:	
  2400  0153                     	ds	5
  2401  0158                     _DlySw2:	
  2402  0158                     	ds	5
  2403  015D                     _VarErrLED:	
  2404  015D                     	ds	4
  2405  0161                     _VarLED1:	
  2406  0161                     	ds	4
  2407  0165                     _VarLED2:	
  2408  0165                     	ds	4
  2409                           
  2410                           	psect	bssBANK3
  2411  01A0                     __pbssBANK3:	
  2412  01A0                     _RF_Data:	
  2413  01A0                     	ds	30
  2414  01BE                     _DimmerLights1:	
  2415  01BE                     	ds	15
  2416  01CD                     _DimmerLights2:	
  2417  01CD                     	ds	15
  2418  01DC                     _Sw1:	
  2419  01DC                     	ds	9
  2420  01E5                     _Sw2:	
  2421  01E5                     	ds	9
  2422                           
  2423                           	psect	bssBANK4
  2424  0220                     __pbssBANK4:	
  2425  0220                     _Memory:	
  2426  0220                     	ds	37
  2427                           
  2428                           	psect	dataBANK4
  2429  0245                     __pdataBANK4:	
  2430  0245                     __product:	
  2431  0245                     	ds	32
  2432                           
  2433                           	psect	clrtext
  2434  1B5C                     clear_ram0:	
  2435                           ;	Called with FSR0 containing the base address, and
  2436                           ;	WREG with the size to clear
  2437                           
  2438  1B5C  0064               	clrwdt	;clear the watchdog before getting into this loop
  2439  1B5D                     clrloop0:	
  2440  1B5D  0180               	clrf	0	;clear RAM location pointed to by FSR
  2441  1B5E  3101               	addfsr 0,1
  2442  1B5F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2443  1B60  2B5D               	goto	clrloop0	;have we reached the end yet?
  2444  1B61  3400               	retlw	0	;all done for this memory range, return
  2445                           
  2446                           	psect	inittext
  2447  1B56                     init_ram:	
  2448  1B56  00FE               	movwf	126
  2449  1B57                     initloop:	
  2450  1B57  0012               	moviw fsr0++
  2451  1B58  001E               	movwi fsr1++
  2452  1B59  0BFE               	decfsz	126,f
  2453  1B5A  2B57               	goto	initloop
  2454  1B5B  3400               	retlw	0
  2455                           
  2456                           	psect	cstackBANK1
  2457  00E9                     __pcstackBANK1:	
  2458  00E9                     setRF_Main@loop_f:	
  2459                           
  2460                           ; 1 bytes @ 0x0
  2461  00E9                     	ds	1
  2462  00EA                     setRF_Main@Receive_OK:	
  2463                           
  2464                           ; 1 bytes @ 0x1
  2465  00EA                     	ds	1
  2466  00EB                     setRF_Main@error:	
  2467                           
  2468                           ; 1 bytes @ 0x2
  2469  00EB                     	ds	1
  2470  00EC                     ?_main:	
  2471  00EC                     main@argc:	
  2472                           ; 2 bytes @ 0x3
  2473                           
  2474                           
  2475                           ; 2 bytes @ 0x3
  2476  00EC                     	ds	2
  2477  00EE                     main@argv:	
  2478                           
  2479                           ; 2 bytes @ 0x5
  2480  00EE                     	ds	2
  2481                           
  2482                           	psect	cstackCOMMON
  2483  0070                     __pcstackCOMMON:	
  2484  0070                     ?_Timeout_Counter:	
  2485  0070                     ?_set_TimeoutCleared:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0070                     ?_CC2500_WriteByte:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0070                     ?_CC2500_WriteCommand:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0070                     ?_CC2500_ReadStatus:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0070                     ?_CC2500_ReadByte:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0070                     ?_CC2500_PowerRST:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0070                     ?_CC2500_InitSetREG:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0070                     ?_CC2500_InitPATable:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0070                     ?_CC2500_ClearTXFIFO:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0070                     ?_CC2500_ClearRXFIFO:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0070                     ?_CC2500_FrequencyCabr:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0070                     ?_CC2500_SIDLEMode:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0070                     ?_DlyOff_Initialization:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0070                     ?_DlyOff_Main:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0070                     ?_setDimmerLights_ErrorClose:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0070                     ?_setDimmerLights_Initialization:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0070                     ?_Dimmer_Initialization:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0070                     ?_setDimmerLights_Main:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0070                     ?_setDimmerLights_Line:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0070                     ?_setTxData:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0070                     ?_setLED_Initialization:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0070                     ?_setLED_Main:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0070                     ?_Fosc_Set:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0070                     ?_IO_Set:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0070                     ?_TMR1_Set:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0070                     ?_ADC_Set:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0070                     ?_IOC_Set:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0070                     ?_WDT_Set:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0070                     ?_IOC_ISR:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0070                     ?_TMR1_ISR:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_Flash_Memory_Write:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_Flash_Memory_Modify:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_WDT_Clearing:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_setLoad_AH_AL_Restore:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_setTemp_Initialization:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_setTemp_Main:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_setRF_Initialization:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_setRF_Main:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_getRxData:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_setLog_Code:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_setControl_Lights_Table:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_setRFSW_Control:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_setRFSW_AdjControl:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_setRF_DimmerValue:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_setSw_Initialization:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_setMain_Exception:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_setSw_Main:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_myMain_Initialization:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_my_MainTimer:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_Buzzer_Initialization:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_Buzzer_Main:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_CC2500_TxData:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_CC2500_RxData:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_CC2500_PowerOnInitial:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_DelayOffPointSelect:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_DelayOff_Initialization:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_DelayOff_Main:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_DimmerIntrIOCPointSelect:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ??_DimmerIntrIOCPointSelect:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_DimmerIntrPointSelect:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ??_DimmerIntrPointSelect:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_setDimmerLights_IntrControl:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_DimmerLightsPointSelect:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_DimmerLights_Initialization:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_DimmerLights_Main:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_setDimmerLights_SwOn:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_setDimmerLights_SwOff:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_setDimmerLights_AdjControl:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_setDimmerLights_AdjRF:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_LedPointSelect:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_LED_Initialization:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_LED_Main:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_Mcu_Initialization:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_ISR:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_setDimmerReClock:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_Flash_Memory_Initialization:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Flash_Memory_Main:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_Flash_Memory_Unlock:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_Flash_Memory_Erasing:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_setMemory_Modify:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_setMemory_LoopSave:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_WDT_Main:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_Load_Initialization:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_getLoad_AD:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_Load_Main:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_Temp_Initialization:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_getTemp_AD:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_Temp_Main:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_RF_Initialization:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_RF_Main:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_setRF_Learn:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_TouchPower:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_SwPointSelect:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_Switch_Initialization:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_Switch_Main:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_DelayTimejudge:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_getMain_All_Error_Status:	
  2777                           ; 1 bytes @ 0x0
  2778                           
  2779  0070                     ?_getLoad_OK:	
  2780                           ; 1 bytes @ 0x0
  2781                           
  2782  0070                     ?_getMain_LightsStatus:	
  2783                           ; 1 bytes @ 0x0
  2784                           
  2785  0070                     ?_setPercentValue:	
  2786                           ; 1 bytes @ 0x0
  2787                           
  2788  0070                     ?_getPercentValue:	
  2789                           ; 1 bytes @ 0x0
  2790                           
  2791  0070                     ?_Flash_Memory_Read:	
  2792                           ; 1 bytes @ 0x0
  2793                           
  2794  0070                     ?_getMain_LoadOK:	
  2795                           ; 1 bytes @ 0x0
  2796                           
  2797  0070                     ?_getMain_Lights_Count:	
  2798                           ; 1 bytes @ 0x0
  2799                           
  2800  0070                     ?_getRF_KeyStatus:	
  2801                           ; 1 bytes @ 0x0
  2802                           
  2803  0070                     ?_getSw_KeyStatus:	
  2804                           ; 1 bytes @ 0x0
  2805                           
  2806  0070                     ?_getDelayOff_GO:	
  2807                           ; 1 bytes @ 0x0
  2808                           
  2809  0070                     ?_getDimmerLights_Status:	
  2810                           ; 1 bytes @ 0x0
  2811                           
  2812  0070                     ?_getAll_DimmerLights_AdjGO:	
  2813                           ; 1 bytes @ 0x0
  2814                           
  2815  0070                     ?_getDimmer_LoadOK:	
  2816                           ; 1 bytes @ 0x0
  2817                           
  2818  0070                     ?_getDimmerLights_Line:	
  2819                           ; 1 bytes @ 0x0
  2820                           
  2821                           
  2822                           ; 1 bytes @ 0x0
  2823  0070                     	ds	1
  2824  0071                     DimmerIntrIOCPointSelect@lights:	
  2825  0071                     DimmerIntrPointSelect@lights:	
  2826                           ; 1 bytes @ 0x1
  2827                           
  2828                           
  2829                           ; 1 bytes @ 0x1
  2830  0071                     	ds	1
  2831  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2832  0072                     ??_setDimmerLights_IntrControl:	
  2833                           ; 0 bytes @ 0x2
  2834                           
  2835  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2836                           ; 0 bytes @ 0x2
  2837                           
  2838                           
  2839                           ; 1 bytes @ 0x2
  2840  0072                     	ds	1
  2841  0073                     ??_IOC_ISR:	
  2842  0073                     ??_setDimmerReClock:	
  2843                           ; 0 bytes @ 0x3
  2844                           
  2845                           
  2846                           ; 0 bytes @ 0x3
  2847  0073                     	ds	3
  2848  0076                     setDimmerLights_IntrControl@lights:	
  2849                           
  2850                           ; 1 bytes @ 0x6
  2851  0076                     	ds	1
  2852  0077                     ??_TMR1_ISR:	
  2853  0077                     ??_ISR:	
  2854                           ; 0 bytes @ 0x7
  2855                           
  2856                           
  2857                           ; 0 bytes @ 0x7
  2858  0077                     	ds	1
  2859                           
  2860                           	psect	cstackBANK0
  2861  0020                     __pcstackBANK0:	
  2862  0020                     ??_Timeout_Counter:	
  2863  0020                     ??_set_TimeoutCleared:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0020                     ??_CC2500_WriteByte:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0020                     ??_CC2500_ReadByte:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0020                     ?_DelayTime_1us:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0020                     ??_Dimmer_Initialization:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0020                     ??_getMain_All_Error_Status:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0020                     ??_getLoad_OK:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0020                     ??_setDimmerLights_Line:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0020                     ?_setRF_DimmerLights:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0020                     ??_setTxData:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0020                     ??_Fosc_Set:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0020                     ??_IO_Set:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0020                     ??_TMR1_Set:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0020                     ??_ADC_Set:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0020                     ??_IOC_Set:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0020                     ??_WDT_Set:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0020                     ??_Flash_Memory_Read:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0020                     ?_setMemory_Data:	
  2915                           ; 0 bytes @ 0x0
  2916                           
  2917  0020                     ??_Flash_Memory_Write:	
  2918                           ; 0 bytes @ 0x0
  2919                           
  2920  0020                     ??_WDT_Clearing:	
  2921                           ; 0 bytes @ 0x0
  2922                           
  2923  0020                     ??_setLoad_AH_AL_Restore:	
  2924                           ; 0 bytes @ 0x0
  2925                           
  2926  0020                     ??_getMain_Lights_Count:	
  2927                           ; 0 bytes @ 0x0
  2928                           
  2929  0020                     ??_setTemp_Initialization:	
  2930                           ; 0 bytes @ 0x0
  2931                           
  2932  0020                     ??_setRF_Initialization:	
  2933                           ; 0 bytes @ 0x0
  2934                           
  2935  0020                     ??_getRF_KeyStatus:	
  2936                           ; 0 bytes @ 0x0
  2937                           
  2938  0020                     ??_getSw_KeyStatus:	
  2939                           ; 0 bytes @ 0x0
  2940                           
  2941  0020                     ??_myMain_Initialization:	
  2942                           ; 0 bytes @ 0x0
  2943                           
  2944  0020                     ??_Buzzer_Initialization:	
  2945                           ; 0 bytes @ 0x0
  2946                           
  2947  0020                     ??_Buzzer_Main:	
  2948                           ; 0 bytes @ 0x0
  2949                           
  2950  0020                     ??_DelayOffPointSelect:	
  2951                           ; 0 bytes @ 0x0
  2952                           
  2953  0020                     ??_DimmerLightsPointSelect:	
  2954                           ; 0 bytes @ 0x0
  2955                           
  2956  0020                     ??_getAll_DimmerLights_AdjGO:	
  2957                           ; 0 bytes @ 0x0
  2958                           
  2959  0020                     ??_getDimmer_LoadOK:	
  2960                           ; 0 bytes @ 0x0
  2961                           
  2962  0020                     ??_getDimmerLights_Line:	
  2963                           ; 0 bytes @ 0x0
  2964                           
  2965  0020                     ??_LedPointSelect:	
  2966                           ; 0 bytes @ 0x0
  2967                           
  2968  0020                     ??_Flash_Memory_Unlock:	
  2969                           ; 0 bytes @ 0x0
  2970                           
  2971  0020                     ??_Flash_Memory_Erasing:	
  2972                           ; 0 bytes @ 0x0
  2973                           
  2974  0020                     ??_setMemory_Modify:	
  2975                           ; 0 bytes @ 0x0
  2976                           
  2977  0020                     ??_setMemory_LoopSave:	
  2978                           ; 0 bytes @ 0x0
  2979                           
  2980  0020                     ??_WDT_Main:	
  2981                           ; 0 bytes @ 0x0
  2982                           
  2983  0020                     ??_Temp_Initialization:	
  2984                           ; 0 bytes @ 0x0
  2985                           
  2986  0020                     ??_setRF_Learn:	
  2987                           ; 0 bytes @ 0x0
  2988                           
  2989  0020                     ??_TouchPower:	
  2990                           ; 0 bytes @ 0x0
  2991                           
  2992  0020                     ??_SwPointSelect:	
  2993                           ; 0 bytes @ 0x0
  2994                           
  2995  0020                     ?___bmul:	
  2996                           ; 0 bytes @ 0x0
  2997                           
  2998  0020                     ?_getBuz_GO:	
  2999                           ; 1 bytes @ 0x0
  3000                           
  3001  0020                     ?_getAD:	
  3002                           ; 2 bytes @ 0x0
  3003                           
  3004  0020                     ?___awdiv:	
  3005                           ; 2 bytes @ 0x0
  3006                           
  3007  0020                     ?___ftpack:	
  3008                           ; 2 bytes @ 0x0
  3009                           
  3010  0020                     getDimmer_LoadOK@status:	
  3011                           ; 3 bytes @ 0x0
  3012                           
  3013  0020                     setDimmerLights_Line@lights:	
  3014                           ; 1 bytes @ 0x0
  3015                           
  3016  0020                     getAD@adcon1:	
  3017                           ; 1 bytes @ 0x0
  3018                           
  3019  0020                     setMemory_Data@data:	
  3020                           ; 1 bytes @ 0x0
  3021                           
  3022  0020                     getLoad_OK@ok:	
  3023                           ; 1 bytes @ 0x0
  3024                           
  3025  0020                     setRF_DimmerLights@on:	
  3026                           ; 1 bytes @ 0x0
  3027                           
  3028  0020                     getMain_Lights_Count@count:	
  3029                           ; 1 bytes @ 0x0
  3030                           
  3031  0020                     ___bmul@multiplicand:	
  3032                           ; 1 bytes @ 0x0
  3033                           
  3034  0020                     DelayTime_1us@count:	
  3035                           ; 1 bytes @ 0x0
  3036                           
  3037  0020                     ___awdiv@divisor:	
  3038                           ; 2 bytes @ 0x0
  3039                           
  3040  0020                     ___ftpack@arg:	
  3041                           ; 2 bytes @ 0x0
  3042                           
  3043                           
  3044                           ; 3 bytes @ 0x0
  3045  0020                     	ds	1
  3046  0021                     ??_setRF_DimmerLights:	
  3047  0021                     ??_setMemory_Data:	
  3048                           ; 0 bytes @ 0x1
  3049                           
  3050  0021                     ??_getMain_LoadOK:	
  3051                           ; 0 bytes @ 0x1
  3052                           
  3053  0021                     ??_Mcu_Initialization:	
  3054                           ; 0 bytes @ 0x1
  3055                           
  3056  0021                     ??_RF_Initialization:	
  3057                           ; 0 bytes @ 0x1
  3058                           
  3059  0021                     ??___bmul:	
  3060                           ; 0 bytes @ 0x1
  3061                           
  3062  0021                     CC2500_WriteByte@loop_a:	
  3063                           ; 0 bytes @ 0x1
  3064                           
  3065  0021                     CC2500_ReadByte@loop_b:	
  3066                           ; 1 bytes @ 0x1
  3067                           
  3068  0021                     DelayOffPointSelect@sw:	
  3069                           ; 1 bytes @ 0x1
  3070                           
  3071  0021                     DimmerLightsPointSelect@lights:	
  3072                           ; 1 bytes @ 0x1
  3073                           
  3074  0021                     getAll_DimmerLights_AdjGO@adjgo:	
  3075                           ; 1 bytes @ 0x1
  3076                           
  3077  0021                     getDimmerLights_Line@line:	
  3078                           ; 1 bytes @ 0x1
  3079                           
  3080  0021                     LedPointSelect@led:	
  3081                           ; 1 bytes @ 0x1
  3082                           
  3083  0021                     Flash_Memory_Read@i:	
  3084                           ; 1 bytes @ 0x1
  3085                           
  3086  0021                     Flash_Memory_Write@i:	
  3087                           ; 1 bytes @ 0x1
  3088                           
  3089  0021                     setMemory_Modify@command:	
  3090                           ; 1 bytes @ 0x1
  3091                           
  3092  0021                     setMemory_LoopSave@command:	
  3093                           ; 1 bytes @ 0x1
  3094                           
  3095  0021                     setLoad_AH_AL_Restore@i:	
  3096                           ; 1 bytes @ 0x1
  3097                           
  3098  0021                     setRF_Learn@command:	
  3099                           ; 1 bytes @ 0x1
  3100                           
  3101  0021                     getRF_KeyStatus@key:	
  3102                           ; 1 bytes @ 0x1
  3103                           
  3104  0021                     SwPointSelect@sw:	
  3105                           ; 1 bytes @ 0x1
  3106                           
  3107  0021                     _getSw_KeyStatus$6330:	
  3108                           ; 1 bytes @ 0x1
  3109                           
  3110  0021                     getMain_Lights_Count@status3:	
  3111                           ; 1 bytes @ 0x1
  3112                           
  3113  0021                     _getMain_All_Error_Status$7076:	
  3114                           ; 1 bytes @ 0x1
  3115                           
  3116                           
  3117                           ; 2 bytes @ 0x1
  3118  0021                     	ds	1
  3119  0022                     ??_CC2500_WriteCommand:	
  3120  0022                     ??_CC2500_ReadStatus:	
  3121                           ; 0 bytes @ 0x2
  3122                           
  3123  0022                     ??_DelayTime_1us:	
  3124                           ; 0 bytes @ 0x2
  3125                           
  3126  0022                     ?_CC2500_WriteREG:	
  3127                           ; 0 bytes @ 0x2
  3128                           
  3129  0022                     ??_DlyOff_Initialization:	
  3130                           ; 0 bytes @ 0x2
  3131                           
  3132  0022                     ??_setDimmerLights_Initialization:	
  3133                           ; 0 bytes @ 0x2
  3134                           
  3135  0022                     ?_setDimmerLights_Trigger:	
  3136                           ; 0 bytes @ 0x2
  3137                           
  3138  0022                     ?_setDimmerLights_TriggerAdj:	
  3139                           ; 0 bytes @ 0x2
  3140                           
  3141  0022                     ?_setLED:	
  3142                           ; 0 bytes @ 0x2
  3143                           
  3144  0022                     ??_setLED_Main:	
  3145                           ; 0 bytes @ 0x2
  3146                           
  3147  0022                     ??_getBuz_GO:	
  3148                           ; 0 bytes @ 0x2
  3149                           
  3150  0022                     ??_getDelayOff_GO:	
  3151                           ; 0 bytes @ 0x2
  3152                           
  3153  0022                     ??_getDimmerLights_Status:	
  3154                           ; 0 bytes @ 0x2
  3155                           
  3156  0022                     ??_Load_Initialization:	
  3157                           ; 0 bytes @ 0x2
  3158                           
  3159  0022                     CC2500_WriteREG@value:	
  3160                           ; 0 bytes @ 0x2
  3161                           
  3162  0022                     DlyOff_Initialization@sw:	
  3163                           ; 1 bytes @ 0x2
  3164                           
  3165  0022                     getDelayOff_GO@sw:	
  3166                           ; 1 bytes @ 0x2
  3167                           
  3168  0022                     getDimmerLights_Status@lights:	
  3169                           ; 1 bytes @ 0x2
  3170                           
  3171  0022                     _getAll_DimmerLights_AdjGO$2556:	
  3172                           ; 1 bytes @ 0x2
  3173                           
  3174  0022                     setDimmerLights_Trigger@command:	
  3175                           ; 1 bytes @ 0x2
  3176                           
  3177  0022                     setDimmerLights_TriggerAdj@command:	
  3178                           ; 1 bytes @ 0x2
  3179                           
  3180  0022                     setLED@command:	
  3181                           ; 1 bytes @ 0x2
  3182                           
  3183  0022                     Flash_Memory_Read@address:	
  3184                           ; 1 bytes @ 0x2
  3185                           
  3186  0022                     setMemory_Data@address:	
  3187                           ; 1 bytes @ 0x2
  3188                           
  3189  0022                     _getRF_KeyStatus$5256:	
  3190                           ; 1 bytes @ 0x2
  3191                           
  3192  0022                     _getSw_KeyStatus$6331:	
  3193                           ; 1 bytes @ 0x2
  3194                           
  3195  0022                     getMain_Lights_Count@status1:	
  3196                           ; 1 bytes @ 0x2
  3197                           
  3198  0022                     getMain_LoadOK@ok:	
  3199                           ; 1 bytes @ 0x2
  3200                           
  3201  0022                     ___bmul@product:	
  3202                           ; 1 bytes @ 0x2
  3203                           
  3204  0022                     DelayTime_1us@i:	
  3205                           ; 1 bytes @ 0x2
  3206                           
  3207  0022                     ___awdiv@dividend:	
  3208                           ; 2 bytes @ 0x2
  3209                           
  3210                           
  3211                           ; 2 bytes @ 0x2
  3212  0022                     	ds	1
  3213  0023                     ??_CC2500_WriteREG:	
  3214  0023                     ??_setDimmerLights_Trigger:	
  3215                           ; 0 bytes @ 0x3
  3216                           
  3217  0023                     ??_setDimmerLights_TriggerAdj:	
  3218                           ; 0 bytes @ 0x3
  3219                           
  3220  0023                     ??_setLED:	
  3221                           ; 0 bytes @ 0x3
  3222                           
  3223  0023                     ??_DelayOff_Initialization:	
  3224                           ; 0 bytes @ 0x3
  3225                           
  3226  0023                     ??_getAD:	
  3227                           ; 0 bytes @ 0x3
  3228                           
  3229  0023                     CC2500_WriteCommand@command:	
  3230                           ; 0 bytes @ 0x3
  3231                           
  3232  0023                     CC2500_ReadStatus@status_addr:	
  3233                           ; 1 bytes @ 0x3
  3234                           
  3235  0023                     getDelayOff_GO@go:	
  3236                           ; 1 bytes @ 0x3
  3237                           
  3238  0023                     setDimmerLights_Initialization@lights:	
  3239                           ; 1 bytes @ 0x3
  3240                           
  3241  0023                     getDimmerLights_Status@status:	
  3242                           ; 1 bytes @ 0x3
  3243                           
  3244  0023                     setLED@led:	
  3245                           ; 1 bytes @ 0x3
  3246                           
  3247  0023                     getAD@adcon0:	
  3248                           ; 1 bytes @ 0x3
  3249                           
  3250  0023                     Flash_Memory_Read@ret:	
  3251                           ; 1 bytes @ 0x3
  3252                           
  3253  0023                     setRF_DimmerLights@status:	
  3254                           ; 1 bytes @ 0x3
  3255                           
  3256  0023                     getSw_KeyStatus@status:	
  3257                           ; 1 bytes @ 0x3
  3258                           
  3259  0023                     getMain_Lights_Count@status2:	
  3260                           ; 1 bytes @ 0x3
  3261                           
  3262  0023                     ___bmul@multiplier:	
  3263                           ; 1 bytes @ 0x3
  3264                           
  3265  0023                     ___ftpack@exp:	
  3266                           ; 1 bytes @ 0x3
  3267                           
  3268  0023                     _getMain_All_Error_Status$7077:	
  3269                           ; 1 bytes @ 0x3
  3270                           
  3271                           
  3272                           ; 2 bytes @ 0x3
  3273  0023                     	ds	1
  3274  0024                     ??_CC2500_ClearTXFIFO:	
  3275  0024                     ??_CC2500_ClearRXFIFO:	
  3276                           ; 0 bytes @ 0x4
  3277                           
  3278  0024                     ??_CC2500_SIDLEMode:	
  3279                           ; 0 bytes @ 0x4
  3280                           
  3281  0024                     ??_DelayTimejudge:	
  3282                           ; 0 bytes @ 0x4
  3283                           
  3284  0024                     ??_getMain_LightsStatus:	
  3285                           ; 0 bytes @ 0x4
  3286                           
  3287  0024                     ??_setLED_Initialization:	
  3288                           ; 0 bytes @ 0x4
  3289                           
  3290  0024                     ??_Flash_Memory_Modify:	
  3291                           ; 0 bytes @ 0x4
  3292                           
  3293  0024                     ??_setSw_Initialization:	
  3294                           ; 0 bytes @ 0x4
  3295                           
  3296  0024                     ??_CC2500_TxData:	
  3297                           ; 0 bytes @ 0x4
  3298                           
  3299  0024                     ??_CC2500_RxData:	
  3300                           ; 0 bytes @ 0x4
  3301                           
  3302  0024                     ??_DimmerLights_Initialization:	
  3303                           ; 0 bytes @ 0x4
  3304                           
  3305  0024                     ??_getLoad_AD:	
  3306                           ; 0 bytes @ 0x4
  3307                           
  3308  0024                     ??_getTemp_AD:	
  3309                           ; 0 bytes @ 0x4
  3310                           
  3311  0024                     ??___awdiv:	
  3312                           ; 0 bytes @ 0x4
  3313                           
  3314  0024                     CC2500_WriteREG@w_addr:	
  3315                           ; 0 bytes @ 0x4
  3316                           
  3317  0024                     setDimmerLights_Trigger@lights:	
  3318                           ; 1 bytes @ 0x4
  3319                           
  3320  0024                     setDimmerLights_TriggerAdj@lights:	
  3321                           ; 1 bytes @ 0x4
  3322                           
  3323  0024                     setLED_Initialization@led:	
  3324                           ; 1 bytes @ 0x4
  3325                           
  3326  0024                     setLED_Main@led:	
  3327                           ; 1 bytes @ 0x4
  3328                           
  3329  0024                     setRF_DimmerLights@lights:	
  3330                           ; 1 bytes @ 0x4
  3331                           
  3332  0024                     setSw_Initialization@sw:	
  3333                           ; 1 bytes @ 0x4
  3334                           
  3335  0024                     getSw_KeyStatus@sw:	
  3336                           ; 1 bytes @ 0x4
  3337                           
  3338  0024                     ___ftpack@sign:	
  3339                           ; 1 bytes @ 0x4
  3340                           
  3341  0024                     getBuz_GO@i:	
  3342                           ; 1 bytes @ 0x4
  3343                           
  3344  0024                     DelayTime_1us@j:	
  3345                           ; 2 bytes @ 0x4
  3346                           
  3347                           
  3348                           ; 2 bytes @ 0x4
  3349  0024                     	ds	1
  3350  0025                     ??_CC2500_InitSetREG:	
  3351  0025                     ??_CC2500_InitPATable:	
  3352                           ; 0 bytes @ 0x5
  3353                           
  3354  0025                     ??___ftpack:	
  3355                           ; 0 bytes @ 0x5
  3356                           
  3357  0025                     ??_setDimmerLights_AdjControl:	
  3358                           ; 0 bytes @ 0x5
  3359                           
  3360  0025                     ??_LED_Initialization:	
  3361                           ; 0 bytes @ 0x5
  3362                           
  3363  0025                     ??_LED_Main:	
  3364                           ; 0 bytes @ 0x5
  3365                           
  3366  0025                     ??_Switch_Initialization:	
  3367                           ; 0 bytes @ 0x5
  3368                           
  3369  0025                     CC2500_TxData@loop_e:	
  3370                           ; 0 bytes @ 0x5
  3371                           
  3372  0025                     CC2500_RxData@loop_f:	
  3373                           ; 1 bytes @ 0x5
  3374                           
  3375  0025                     Flash_Memory_Modify@i:	
  3376                           ; 1 bytes @ 0x5
  3377                           
  3378  0025                     getTemp_AD@channel:	
  3379                           ; 1 bytes @ 0x5
  3380                           
  3381  0025                     getMain_LightsStatus@count:	
  3382                           ; 1 bytes @ 0x5
  3383                           
  3384  0025                     getMain_All_Error_Status@command:	
  3385                           ; 1 bytes @ 0x5
  3386                           
  3387  0025                     ___awdiv@counter:	
  3388                           ; 1 bytes @ 0x5
  3389                           
  3390                           
  3391                           ; 1 bytes @ 0x5
  3392  0025                     	ds	1
  3393  0026                     ??_CC2500_PowerRST:	
  3394  0026                     ??_CC2500_FrequencyCabr:	
  3395                           ; 0 bytes @ 0x6
  3396                           
  3397  0026                     CC2500_InitSetREG@temp1:	
  3398                           ; 0 bytes @ 0x6
  3399                           
  3400  0026                     CC2500_InitPATable@temp:	
  3401                           ; 1 bytes @ 0x6
  3402                           
  3403  0026                     DelayTimejudge@i:	
  3404                           ; 1 bytes @ 0x6
  3405                           
  3406  0026                     setDimmerLights_AdjControl@idle:	
  3407                           ; 1 bytes @ 0x6
  3408                           
  3409  0026                     getLoad_AD@channel:	
  3410                           ; 1 bytes @ 0x6
  3411                           
  3412  0026                     getMain_All_Error_Status@status:	
  3413                           ; 1 bytes @ 0x6
  3414                           
  3415  0026                     ___awdiv@sign:	
  3416                           ; 1 bytes @ 0x6
  3417                           
  3418  0026                     getMain_LightsStatus@i:	
  3419                           ; 1 bytes @ 0x6
  3420                           
  3421                           
  3422                           ; 2 bytes @ 0x6
  3423  0026                     	ds	1
  3424  0027                     CC2500_InitSetREG@temp2:	
  3425  0027                     CC2500_InitPATable@loop_d:	
  3426                           ; 1 bytes @ 0x7
  3427                           
  3428  0027                     DelayTimejudge@j:	
  3429                           ; 1 bytes @ 0x7
  3430                           
  3431  0027                     _setDimmerLights_AdjControl$2577:	
  3432                           ; 1 bytes @ 0x7
  3433                           
  3434  0027                     getLoad_AD@k:	
  3435                           ; 1 bytes @ 0x7
  3436                           
  3437  0027                     ___awdiv@quotient:	
  3438                           ; 1 bytes @ 0x7
  3439                           
  3440                           
  3441                           ; 2 bytes @ 0x7
  3442  0027                     	ds	1
  3443  0028                     ?___awtoft:	
  3444  0028                     CC2500_InitSetREG@loop_c:	
  3445                           ; 3 bytes @ 0x8
  3446                           
  3447  0028                     DelayTimejudge@k:	
  3448                           ; 1 bytes @ 0x8
  3449                           
  3450  0028                     setDimmerLights_AdjControl@sw:	
  3451                           ; 1 bytes @ 0x8
  3452                           
  3453  0028                     getLoad_AD@j:	
  3454                           ; 1 bytes @ 0x8
  3455                           
  3456  0028                     getMain_LightsStatus@status:	
  3457                           ; 1 bytes @ 0x8
  3458                           
  3459  0028                     ___awtoft@c:	
  3460                           ; 1 bytes @ 0x8
  3461                           
  3462                           
  3463                           ; 2 bytes @ 0x8
  3464  0028                     	ds	1
  3465  0029                     ?_setBuz:	
  3466  0029                     ??_CC2500_PowerOnInitial:	
  3467                           ; 0 bytes @ 0x9
  3468                           
  3469  0029                     ??_Flash_Memory_Main:	
  3470                           ; 0 bytes @ 0x9
  3471                           
  3472  0029                     ??_Load_Main:	
  3473                           ; 0 bytes @ 0x9
  3474                           
  3475  0029                     DelayTimejudge@value:	
  3476                           ; 0 bytes @ 0x9
  3477                           
  3478  0029                     getLoad_AD@i:	
  3479                           ; 1 bytes @ 0x9
  3480                           
  3481  0029                     setBuz@time:	
  3482                           ; 1 bytes @ 0x9
  3483                           
  3484                           
  3485                           ; 2 bytes @ 0x9
  3486  0029                     	ds	1
  3487  002A                     ?_setDelayOff_GO:	
  3488  002A                     setDelayOff_GO@command:	
  3489                           ; 0 bytes @ 0xA
  3490                           
  3491                           
  3492                           ; 1 bytes @ 0xA
  3493  002A                     	ds	1
  3494  002B                     ??_setBuz:	
  3495  002B                     ??___awtoft:	
  3496                           ; 0 bytes @ 0xB
  3497                           
  3498  002B                     setDelayOff_GO@value:	
  3499                           ; 0 bytes @ 0xB
  3500                           
  3501  002B                     Load_Main@j:	
  3502                           ; 1 bytes @ 0xB
  3503                           
  3504                           
  3505                           ; 1 bytes @ 0xB
  3506  002B                     	ds	1
  3507  002C                     ??_setDelayOff_GO:	
  3508  002C                     setBuz@count:	
  3509                           ; 0 bytes @ 0xC
  3510                           
  3511  002C                     Load_Main@adjgo:	
  3512                           ; 1 bytes @ 0xC
  3513                           
  3514                           
  3515                           ; 1 bytes @ 0xC
  3516  002C                     	ds	1
  3517  002D                     ??_setTemp_Main:	
  3518  002D                     ??_setLog_Code:	
  3519                           ; 0 bytes @ 0xD
  3520                           
  3521  002D                     ??_my_MainTimer:	
  3522                           ; 0 bytes @ 0xD
  3523                           
  3524  002D                     ??_setDimmerLights_SwOn:	
  3525                           ; 0 bytes @ 0xD
  3526                           
  3527  002D                     _Load_Main$3849:	
  3528                           ; 0 bytes @ 0xD
  3529                           
  3530  002D                     ___awtoft@sign:	
  3531                           ; 1 bytes @ 0xD
  3532                           
  3533                           
  3534                           ; 1 bytes @ 0xD
  3535  002D                     	ds	1
  3536  002E                     ?___ftdiv:	
  3537  002E                     ?___ftmul:	
  3538                           ; 3 bytes @ 0xE
  3539                           
  3540  002E                     setDelayOff_GO@sw:	
  3541                           ; 3 bytes @ 0xE
  3542                           
  3543  002E                     setDimmerLights_SwOn@idle:	
  3544                           ; 1 bytes @ 0xE
  3545                           
  3546  002E                     Load_Main@error:	
  3547                           ; 1 bytes @ 0xE
  3548                           
  3549  002E                     ___ftdiv@f2:	
  3550                           ; 1 bytes @ 0xE
  3551                           
  3552  002E                     ___ftmul@f1:	
  3553                           ; 3 bytes @ 0xE
  3554                           
  3555                           
  3556                           ; 3 bytes @ 0xE
  3557  002E                     	ds	1
  3558  002F                     ??_setDimmerLights_SwOff:	
  3559  002F                     ??_Temp_Main:	
  3560                           ; 0 bytes @ 0xF
  3561                           
  3562  002F                     setDimmerLights_SwOn@sw:	
  3563                           ; 0 bytes @ 0xF
  3564                           
  3565  002F                     setDimmerLights_SwOff@command:	
  3566                           ; 1 bytes @ 0xF
  3567                           
  3568  002F                     Load_Main@i:	
  3569                           ; 1 bytes @ 0xF
  3570                           
  3571                           
  3572                           ; 1 bytes @ 0xF
  3573  002F                     	ds	1
  3574  0030                     setDimmerLights_SwOff@sw:	
  3575                           
  3576                           ; 1 bytes @ 0x10
  3577  0030                     	ds	1
  3578  0031                     ??_setDimmerLights_ErrorClose:	
  3579  0031                     ??_setRFSW_Control:	
  3580                           ; 0 bytes @ 0x11
  3581                           
  3582  0031                     ??_setSw_Main:	
  3583                           ; 0 bytes @ 0x11
  3584                           
  3585  0031                     ___ftdiv@f1:	
  3586                           ; 0 bytes @ 0x11
  3587                           
  3588  0031                     ___ftmul@f2:	
  3589                           ; 3 bytes @ 0x11
  3590                           
  3591                           
  3592                           ; 3 bytes @ 0x11
  3593  0031                     	ds	1
  3594  0032                     setDimmerLights_ErrorClose@count:	
  3595  0032                     setRFSW_Control@status:	
  3596                           ; 1 bytes @ 0x12
  3597                           
  3598                           
  3599                           ; 1 bytes @ 0x12
  3600  0032                     	ds	1
  3601  0033                     setDimmerLights_ErrorClose@lights:	
  3602  0033                     setRFSW_Control@sw:	
  3603                           ; 1 bytes @ 0x13
  3604                           
  3605  0033                     setSw_Main@sw:	
  3606                           ; 1 bytes @ 0x13
  3607                           
  3608                           
  3609                           ; 1 bytes @ 0x13
  3610  0033                     	ds	1
  3611  0034                     ??___ftdiv:	
  3612  0034                     ??___ftmul:	
  3613                           ; 0 bytes @ 0x14
  3614                           
  3615  0034                     setDimmerLights_ErrorClose@i:	
  3616                           ; 0 bytes @ 0x14
  3617                           
  3618                           
  3619                           ; 2 bytes @ 0x14
  3620  0034                     	ds	2
  3621  0036                     ??_DlyOff_Main:	
  3622  0036                     ??_setMain_Exception:	
  3623                           ; 0 bytes @ 0x16
  3624                           
  3625                           
  3626                           ; 0 bytes @ 0x16
  3627  0036                     	ds	2
  3628  0038                     DlyOff_Main@sw:	
  3629  0038                     setMain_Exception@buz:	
  3630                           ; 1 bytes @ 0x18
  3631                           
  3632  0038                     ___ftdiv@cntr:	
  3633                           ; 1 bytes @ 0x18
  3634                           
  3635  0038                     ___ftmul@exp:	
  3636                           ; 1 bytes @ 0x18
  3637                           
  3638                           
  3639                           ; 1 bytes @ 0x18
  3640  0038                     	ds	1
  3641  0039                     ??_DelayOff_Main:	
  3642  0039                     _setMain_Exception$7066:	
  3643                           ; 0 bytes @ 0x19
  3644                           
  3645  0039                     ___ftdiv@f3:	
  3646                           ; 2 bytes @ 0x19
  3647                           
  3648  0039                     ___ftmul@f3_as_product:	
  3649                           ; 3 bytes @ 0x19
  3650                           
  3651                           
  3652                           ; 3 bytes @ 0x19
  3653  0039                     	ds	2
  3654  003B                     setMain_Exception@status:	
  3655                           
  3656                           ; 1 bytes @ 0x1B
  3657  003B                     	ds	1
  3658  003C                     setMain_Exception@command:	
  3659  003C                     ___ftdiv@exp:	
  3660                           ; 1 bytes @ 0x1C
  3661                           
  3662  003C                     ___ftmul@cntr:	
  3663                           ; 1 bytes @ 0x1C
  3664                           
  3665                           
  3666                           ; 1 bytes @ 0x1C
  3667  003C                     	ds	1
  3668  003D                     ??_Switch_Main:	
  3669  003D                     ___ftdiv@sign:	
  3670                           ; 0 bytes @ 0x1D
  3671                           
  3672  003D                     ___ftmul@sign:	
  3673                           ; 1 bytes @ 0x1D
  3674                           
  3675                           
  3676                           ; 1 bytes @ 0x1D
  3677  003D                     	ds	1
  3678  003E                     ?___ftneg:	
  3679  003E                     Switch_Main@error:	
  3680                           ; 3 bytes @ 0x1E
  3681                           
  3682  003E                     ___ftneg@f1:	
  3683                           ; 1 bytes @ 0x1E
  3684                           
  3685                           
  3686                           ; 3 bytes @ 0x1E
  3687  003E                     	ds	3
  3688  0041                     ??___ftneg:	
  3689  0041                     ?___ftadd:	
  3690                           ; 0 bytes @ 0x21
  3691                           
  3692  0041                     ___ftadd@f1:	
  3693                           ; 3 bytes @ 0x21
  3694                           
  3695                           
  3696                           ; 3 bytes @ 0x21
  3697  0041                     	ds	3
  3698  0044                     ___ftadd@f2:	
  3699                           
  3700                           ; 3 bytes @ 0x24
  3701  0044                     	ds	3
  3702  0047                     ??___ftadd:	
  3703                           
  3704                           ; 0 bytes @ 0x27
  3705  0047                     	ds	4
  3706  004B                     ___ftadd@sign:	
  3707                           
  3708                           ; 1 bytes @ 0x2B
  3709  004B                     	ds	1
  3710  004C                     ___ftadd@exp2:	
  3711                           
  3712                           ; 1 bytes @ 0x2C
  3713  004C                     	ds	1
  3714  004D                     ___ftadd@exp1:	
  3715                           
  3716                           ; 1 bytes @ 0x2D
  3717  004D                     	ds	1
  3718  004E                     ?___fttol:	
  3719  004E                     ___fttol@f1:	
  3720                           ; 4 bytes @ 0x2E
  3721                           
  3722                           
  3723                           ; 3 bytes @ 0x2E
  3724  004E                     	ds	4
  3725  0052                     ??___fttol:	
  3726                           
  3727                           ; 0 bytes @ 0x32
  3728  0052                     	ds	4
  3729  0056                     ___fttol@sign1:	
  3730                           
  3731                           ; 1 bytes @ 0x36
  3732  0056                     	ds	1
  3733  0057                     ___fttol@lval:	
  3734                           
  3735                           ; 4 bytes @ 0x37
  3736  0057                     	ds	4
  3737  005B                     ___fttol@exp1:	
  3738                           
  3739                           ; 1 bytes @ 0x3B
  3740  005B                     	ds	1
  3741  005C                     ??_setPercentValue:	
  3742  005C                     ??_getPercentValue:	
  3743                           ; 0 bytes @ 0x3C
  3744                           
  3745                           
  3746                           ; 0 bytes @ 0x3C
  3747  005C                     	ds	2
  3748  005E                     getPercentValue@value:	
  3749  005E                     setPercentValue@value:	
  3750                           ; 1 bytes @ 0x3E
  3751                           
  3752                           
  3753                           ; 1 bytes @ 0x3E
  3754  005E                     	ds	1
  3755  005F                     getPercentValue@i:	
  3756  005F                     setPercentValue@i:	
  3757                           ; 3 bytes @ 0x3F
  3758                           
  3759                           
  3760                           ; 3 bytes @ 0x3F
  3761  005F                     	ds	3
  3762  0062                     ?_setDimmerLights:	
  3763  0062                     ?_setDimmerLights_Adj:	
  3764                           ; 0 bytes @ 0x42
  3765                           
  3766  0062                     ??_setDimmerLights_AdjRF:	
  3767                           ; 0 bytes @ 0x42
  3768                           
  3769  0062                     ??_Flash_Memory_Initialization:	
  3770                           ; 0 bytes @ 0x42
  3771                           
  3772  0062                     setDimmerLights@status:	
  3773                           ; 0 bytes @ 0x42
  3774                           
  3775  0062                     setDimmerLights_Adj@status:	
  3776                           ; 1 bytes @ 0x42
  3777                           
  3778                           
  3779                           ; 1 bytes @ 0x42
  3780  0062                     	ds	1
  3781  0063                     ??_setDimmerLights:	
  3782  0063                     ??_setDimmerLights_Adj:	
  3783                           ; 0 bytes @ 0x43
  3784                           
  3785  0063                     setDimmerLights_AdjRF@lights:	
  3786                           ; 0 bytes @ 0x43
  3787                           
  3788  0063                     Flash_Memory_Initialization@i:	
  3789                           ; 1 bytes @ 0x43
  3790                           
  3791                           
  3792                           ; 1 bytes @ 0x43
  3793  0063                     	ds	1
  3794  0064                     ??_setRF_DimmerValue:	
  3795                           
  3796                           ; 0 bytes @ 0x44
  3797  0064                     	ds	1
  3798  0065                     setDimmerLights@lights:	
  3799  0065                     setDimmerLights_Adj@lights:	
  3800                           ; 1 bytes @ 0x45
  3801                           
  3802                           
  3803                           ; 1 bytes @ 0x45
  3804  0065                     	ds	1
  3805  0066                     ??_setDimmerLights_Main:	
  3806  0066                     setDimmerLights_Main@lights:	
  3807                           ; 0 bytes @ 0x46
  3808                           
  3809  0066                     setRF_DimmerValue@lights:	
  3810                           ; 1 bytes @ 0x46
  3811                           
  3812                           
  3813                           ; 1 bytes @ 0x46
  3814  0066                     	ds	1
  3815  0067                     ??_setRFSW_AdjControl:	
  3816  0067                     ??_DimmerLights_Main:	
  3817                           ; 0 bytes @ 0x47
  3818                           
  3819                           
  3820                           ; 0 bytes @ 0x47
  3821  0067                     	ds	2
  3822  0069                     setRFSW_AdjControl@status:	
  3823  0069                     _DimmerLights_Main$2494:	
  3824                           ; 1 bytes @ 0x49
  3825                           
  3826                           
  3827                           ; 2 bytes @ 0x49
  3828  0069                     	ds	1
  3829  006A                     setRFSW_AdjControl@sw:	
  3830                           
  3831                           ; 1 bytes @ 0x4A
  3832  006A                     	ds	1
  3833  006B                     ??_getRxData:	
  3834  006B                     ??_setControl_Lights_Table:	
  3835                           ; 0 bytes @ 0x4B
  3836                           
  3837                           
  3838                           ; 0 bytes @ 0x4B
  3839  006B                     	ds	1
  3840  006C                     getRxData@error:	
  3841                           
  3842                           ; 1 bytes @ 0x4C
  3843  006C                     	ds	1
  3844  006D                     ??_setRF_Main:	
  3845                           
  3846                           ; 0 bytes @ 0x4D
  3847  006D                     	ds	1
  3848  006E                     ??_RF_Main:	
  3849  006E                     ??_main:	
  3850                           ; 0 bytes @ 0x4E
  3851                           
  3852                           
  3853                           	psect	maintext
  3854  163E                     __pmaintext:	
  3855                           ; 0 bytes @ 0x4E
  3856 ;;
  3857 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3858 ;;
  3859 ;; *************** function _main *****************
  3860 ;; Defined at:
  3861 ;;		line 7 in file "../src/main_B1.c"
  3862 ;; Parameters:    Size  Location     Type
  3863 ;;  argc            2    3[BANK1 ] int 
  3864 ;;  argv            2    5[BANK1 ] PTR PTR unsigned char 
  3865 ;; Auto vars:     Size  Location     Type
  3866 ;;		None
  3867 ;; Return value:  Size  Location     Type
  3868 ;;                  2    3[BANK1 ] int 
  3869 ;; Registers used:
  3870 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3871 ;; Tracked objects:
  3872 ;;		On entry : 17F/0
  3873 ;;		On exit  : 0/0
  3874 ;;		Unchanged: 0/0
  3875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3876 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3879 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3880 ;;Total ram usage:        4 bytes
  3881 ;; Hardware stack levels required when called:   15
  3882 ;; This function calls:
  3883 ;;		_Buzzer_Initialization
  3884 ;;		_Buzzer_Main
  3885 ;;		_CC2500_PowerOnInitial
  3886 ;;		_DelayOff_Initialization
  3887 ;;		_DelayOff_Main
  3888 ;;		_DimmerLights_Initialization
  3889 ;;		_DimmerLights_Main
  3890 ;;		_Flash_Memory_Initialization
  3891 ;;		_Flash_Memory_Main
  3892 ;;		_LED_Initialization
  3893 ;;		_LED_Main
  3894 ;;		_Load_Initialization
  3895 ;;		_Load_Main
  3896 ;;		_Mcu_Initialization
  3897 ;;		_RF_Initialization
  3898 ;;		_RF_Main
  3899 ;;		_Switch_Initialization
  3900 ;;		_Switch_Main
  3901 ;;		_Temp_Initialization
  3902 ;;		_Temp_Main
  3903 ;;		_WDT_Main
  3904 ;;		_getLoad_AD
  3905 ;;		_getTemp_AD
  3906 ;;		_myMain_Initialization
  3907 ;;		_my_MainTimer
  3908 ;; This function is called by:
  3909 ;;		Startup code after reset
  3910 ;; This function uses a non-reentrant model
  3911 ;;
  3912                           
  3913                           
  3914                           ;psect for function _main
  3915  163E                     _main:	
  3916                           
  3917                           ;main_B1.c: 8: myMain_Initialization();
  3918                           
  3919                           ;incstack = 0
  3920                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3921  163E  319C  2436  3196   	fcall	_myMain_Initialization
  3922                           
  3923                           ;main_B1.c: 9: Mcu_Initialization();
  3924  1641  319C  24CD  3196   	fcall	_Mcu_Initialization
  3925                           
  3926                           ;main_B1.c: 10: Flash_Memory_Initialization();
  3927  1644  3186  2620  3196   	fcall	_Flash_Memory_Initialization
  3928                           
  3929                           ;main_B1.c: 11: LED_Initialization();
  3930  1647  319B  23DC  3196   	fcall	_LED_Initialization
  3931                           
  3932                           ;main_B1.c: 12: Buzzer_Initialization();
  3933  164A  319B  232B  3196   	fcall	_Buzzer_Initialization
  3934                           
  3935                           ;main_B1.c: 14: ;;
  3936                           ;main_B1.c: 15: Temp_Initialization();
  3937  164D  319B  2334  3196   	fcall	_Temp_Initialization
  3938                           
  3939                           ;main_B1.c: 16: Load_Initialization();
  3940  1650  319B  234B  3196   	fcall	_Load_Initialization
  3941                           
  3942                           ;main_B1.c: 17: ;;
  3943                           ;main_B1.c: 18: DelayOff_Initialization();
  3944  1653  319B  2371  3196   	fcall	_DelayOff_Initialization
  3945                           
  3946                           ;main_B1.c: 20: DimmerLights_Initialization();
  3947  1656  319E  260B  3196   	fcall	_DimmerLights_Initialization
  3948                           
  3949                           ;main_B1.c: 21: ;;
  3950                           ;main_B1.c: 22: ;;
  3951                           ;main_B1.c: 23: ;;
  3952                           ;main_B1.c: 24: Switch_Initialization();
  3953  1659  319C  240C  3196   	fcall	_Switch_Initialization
  3954                           
  3955                           ;main_B1.c: 25: RF_Initialization();
  3956  165C  319B  232E  3196   	fcall	_RF_Initialization
  3957                           
  3958                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  3959  165F  319D  25B6  3196   	fcall	_CC2500_PowerOnInitial
  3960  1662                     l8280:	
  3961                           ;main_B1.c: 27: ;;
  3962                           ;main_B1.c: 29: while (1) {
  3963                           
  3964                           
  3965                           ;main_B1.c: 31: if (myMain.PowerON == 1) {
  3966  1662  0021               	movlb	1	; select bank1
  3967  1663  1C20               	btfss	_myMain^(0+128),0
  3968  1664  2E6D               	goto	l8284
  3969                           
  3970                           ;main_B1.c: 37: getLoad_AD(0x05);
  3971  1665  3005               	movlw	5
  3972  1666  318C  2457  3196   	fcall	_getLoad_AD
  3973                           
  3974                           ;main_B1.c: 41: getTemp_AD(0x09);
  3975  1669  3009               	movlw	9
  3976  166A  3193  232A  3196   	fcall	_getTemp_AD
  3977  166D                     l8284:	
  3978                           
  3979                           ;main_B1.c: 56: }
  3980                           ;main_B1.c: 92: if (Timer1.Timeout == 1) {
  3981  166D  0022               	movlb	2	; select bank2
  3982  166E  1C23               	btfss	_Timer1^(0+256),0
  3983  166F  2E62               	goto	l8280
  3984                           
  3985                           ;main_B1.c: 93: Timer1.Timeout = 0;
  3986  1670  1023               	bcf	_Timer1^(0+256),0
  3987                           
  3988                           ;main_B1.c: 94: my_MainTimer();
  3989  1671  3194  24FD  3196   	fcall	_my_MainTimer
  3990                           
  3991                           ;main_B1.c: 95: WDT_Main();
  3992  1674  319C  24DF  3196   	fcall	_WDT_Main
  3993                           
  3994                           ;main_B1.c: 96: ;;
  3995                           ;main_B1.c: 97: ;;
  3996                           ;main_B1.c: 98: if (myMain.PowerON == 1) {
  3997  1677  0021               	movlb	1	; select bank1
  3998  1678  1C20               	btfss	_myMain^(0+128),0
  3999  1679  2E62               	goto	l8280
  4000                           
  4001                           ;main_B1.c: 99: Flash_Memory_Main();
  4002  167A  3192  2287  3196   	fcall	_Flash_Memory_Main
  4003                           
  4004                           ;main_B1.c: 101: LED_Main();
  4005  167D  319B  23E8  3196   	fcall	_LED_Main
  4006                           
  4007                           ;main_B1.c: 102: Buzzer_Main();
  4008  1680  3194  2465  3196   	fcall	_Buzzer_Main
  4009                           
  4010                           ;main_B1.c: 104: ;;
  4011                           ;main_B1.c: 105: Temp_Main();
  4012  1683  319B  2337  3196   	fcall	_Temp_Main
  4013                           
  4014                           ;main_B1.c: 106: Load_Main();
  4015  1686  3181  21BA  3196   	fcall	_Load_Main
  4016                           
  4017                           ;main_B1.c: 107: ;;
  4018                           ;main_B1.c: 109: ;;
  4019                           ;main_B1.c: 110: DimmerLights_Main();
  4020  1689  3192  221E  3196   	fcall	_DimmerLights_Main
  4021                           
  4022                           ;main_B1.c: 111: Switch_Main();
  4023  168C  3190  2070  3196   	fcall	_Switch_Main
  4024                           
  4025                           ;main_B1.c: 112: ;;
  4026                           ;main_B1.c: 113: ;;
  4027                           ;main_B1.c: 115: RF_Main();
  4028  168F  319B  2331  3196   	fcall	_RF_Main
  4029                           
  4030                           ;main_B1.c: 116: DelayOff_Main();
  4031  1692  319B  2379  3196   	fcall	_DelayOff_Main
  4032                           
  4033                           ;main_B1.c: 117: ;;
  4034  1695  2E62               	goto	l8280
  4035  1696                     __end_of_main:	
  4036                           ;main_B1.c: 125: }
  4037                           ;main_B1.c: 126: }
  4038                           ;main_B1.c: 160: }
  4039                           ;main_B1.c: 161: return (0);
  4040                           ;	Return value of _main is never used
  4041                           
  4042                           
  4043                           	psect	text1
  4044  14FD                     __ptext1:	
  4045 ;; *************** function _my_MainTimer *****************
  4046 ;; Defined at:
  4047 ;;		line 180 in file "../src/main_B1.c"
  4048 ;; Parameters:    Size  Location     Type
  4049 ;;		None
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;		None
  4052 ;; Return value:  Size  Location     Type
  4053 ;;		None               void
  4054 ;; Registers used:
  4055 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4065 ;;Total ram usage:        0 bytes
  4066 ;; Hardware stack levels used:    1
  4067 ;; Hardware stack levels required when called:    7
  4068 ;; This function calls:
  4069 ;;		_setBuz
  4070 ;;		_setTxData
  4071 ;; This function is called by:
  4072 ;;		_main
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           
  4077                           ;psect for function _my_MainTimer
  4078  14FD                     _my_MainTimer:	
  4079                           
  4080                           ;main_B1.c: 182: if (myMain.PowerON == 0) {
  4081                           
  4082                           ;incstack = 0
  4083                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4084  14FD  0021               	movlb	1	; select bank1
  4085  14FE  1820               	btfsc	_myMain^(0+128),0
  4086  14FF  2D1F               	goto	l8140
  4087                           
  4088                           ;main_B1.c: 183: myMain.PowerCount++;
  4089  1500  3001               	movlw	1
  4090  1501  07A2               	addwf	(_myMain^(0+128)+2),f
  4091  1502  3000               	movlw	0
  4092  1503  3DA3               	addwfc	((_myMain+1)^(0+128)+2),f
  4093                           
  4094                           ;main_B1.c: 184: if (myMain.PowerCount == 150)
  4095  1504  3002               	movlw	2
  4096  1505  3EA0               	addlw	_myMain& (0+255)
  4097  1506  0086               	movwf	6
  4098  1507  0187               	clrf	7
  4099  1508  3F40               	moviw [0]fsr1
  4100  1509  3A96               	xorlw	150
  4101  150A  1D03               	skipz
  4102  150B  2D0E               	goto	u8255
  4103  150C  3F41               	moviw [1]fsr1
  4104  150D  3A00               	xorlw	0
  4105  150E                     u8255:	
  4106  150E  1D03               	skipz
  4107  150F  2D36               	goto	l8150
  4108                           
  4109                           ;main_B1.c: 185: {
  4110                           ;main_B1.c: 186: myMain.PowerCount = 0;
  4111  1510  01A2               	clrf	(_myMain^(0+128)+2)
  4112  1511  01A3               	clrf	((_myMain+1)^(0+128)+2)
  4113                           
  4114                           ;main_B1.c: 187: myMain.PowerON = 1;
  4115  1512  1420               	bsf	_myMain^(0+128),0
  4116                           
  4117                           ;main_B1.c: 193: setBuz(3, 50);
  4118  1513  3032               	movlw	50
  4119  1514  0020               	movlb	0	; select bank0
  4120  1515  00A9               	movwf	setBuz@time
  4121  1516  3000               	movlw	0
  4122  1517  00AA               	movwf	setBuz@time+1
  4123  1518  3003               	movlw	3
  4124  1519  3196  2696  3194   	fcall	_setBuz
  4125                           
  4126                           ;main_B1.c: 194: myMain.SelfTest = 1;
  4127  151C  0021               	movlb	1	; select bank1
  4128  151D  1620               	bsf	_myMain^(0+128),4
  4129                           
  4130                           ;main_B1.c: 203: }
  4131                           ;main_B1.c: 204: } else {
  4132  151E  2D36               	goto	l8150
  4133  151F                     l8140:	
  4134                           
  4135                           ;main_B1.c: 212: myMain.Count1++;
  4136  151F  3001               	movlw	1
  4137  1520  07A6               	addwf	(_myMain^(0+128)+6),f
  4138  1521  3000               	movlw	0
  4139  1522  3DA7               	addwfc	((_myMain+1)^(0+128)+6),f
  4140                           
  4141                           ;main_B1.c: 213: if (myMain.Count1 == 100)
  4142  1523  3006               	movlw	6
  4143  1524  3EA0               	addlw	_myMain& (0+255)
  4144  1525  0086               	movwf	6
  4145  1526  0187               	clrf	7
  4146  1527  3F40               	moviw [0]fsr1
  4147  1528  3A64               	xorlw	100
  4148  1529  1D03               	skipz
  4149  152A  2D2D               	goto	u8265
  4150  152B  3F41               	moviw [1]fsr1
  4151  152C  3A00               	xorlw	0
  4152  152D                     u8265:	
  4153  152D  1D03               	skipz
  4154  152E  2D36               	goto	l8150
  4155                           
  4156                           ;main_B1.c: 214: {
  4157                           ;main_B1.c: 215: myMain.Count1 = 0;
  4158  152F  01A6               	clrf	(_myMain^(0+128)+6)
  4159  1530  01A7               	clrf	((_myMain+1)^(0+128)+6)
  4160                           
  4161                           ;main_B1.c: 227: if (myMain.Flag) {
  4162  1531  1CA0               	btfss	_myMain^(0+128),1
  4163  1532  2D35               	goto	l2681
  4164                           
  4165                           ;main_B1.c: 228: myMain.Flag = 0;
  4166  1533  10A0               	bcf	_myMain^(0+128),1
  4167                           
  4168                           ;main_B1.c: 237: } else {
  4169  1534  2D36               	goto	l8150
  4170  1535                     l2681:	
  4171                           
  4172                           ;main_B1.c: 238: myMain.Flag = 1;
  4173  1535  14A0               	bsf	_myMain^(0+128),1
  4174  1536                     l8150:	
  4175                           
  4176                           ;main_B1.c: 247: }
  4177                           ;main_B1.c: 248: }
  4178                           ;main_B1.c: 250: }
  4179                           ;main_B1.c: 252: myMain.Count2++;
  4180  1536  3001               	movlw	1
  4181  1537  07A8               	addwf	(_myMain^(0+128)+8),f
  4182  1538  3000               	movlw	0
  4183  1539  3DA9               	addwfc	((_myMain+1)^(0+128)+8),f
  4184                           
  4185                           ;main_B1.c: 253: if (myMain.Count2 == 100) {
  4186  153A  3008               	movlw	8
  4187  153B  3EA0               	addlw	_myMain& (0+255)
  4188  153C  0086               	movwf	6
  4189  153D  0187               	clrf	7
  4190  153E  3F40               	moviw [0]fsr1
  4191  153F  3A64               	xorlw	100
  4192  1540  1D03               	skipz
  4193  1541  2D44               	goto	u8285
  4194  1542  3F41               	moviw [1]fsr1
  4195  1543  3A00               	xorlw	0
  4196  1544                     u8285:	
  4197  1544  1D03               	skipz
  4198  1545  0008               	return
  4199                           
  4200                           ;main_B1.c: 254: myMain.Count2 = 0;
  4201  1546  01A8               	clrf	(_myMain^(0+128)+8)
  4202  1547  01A9               	clrf	((_myMain+1)^(0+128)+8)
  4203                           
  4204                           ;main_B1.c: 256: setTxData();
  4205  1548  3186  26FC         	fcall	_setTxData
  4206  154A  0008               	return
  4207  154B                     __end_of_my_MainTimer:	
  4208                           
  4209                           	psect	text2
  4210  1C36                     __ptext2:	
  4211 ;; *************** function _myMain_Initialization *****************
  4212 ;; Defined at:
  4213 ;;		line 167 in file "../src/main_B1.c"
  4214 ;; Parameters:    Size  Location     Type
  4215 ;;		None
  4216 ;; Auto vars:     Size  Location     Type
  4217 ;;		None
  4218 ;; Return value:  Size  Location     Type
  4219 ;;		None               void
  4220 ;; Registers used:
  4221 ;;		wreg, fsr1l, fsr1h
  4222 ;; Tracked objects:
  4223 ;;		On entry : 0/0
  4224 ;;		On exit  : 0/0
  4225 ;;		Unchanged: 0/0
  4226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4229 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4230 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4231 ;;Total ram usage:        1 bytes
  4232 ;; Hardware stack levels used:    1
  4233 ;; Hardware stack levels required when called:    5
  4234 ;; This function calls:
  4235 ;;		Nothing
  4236 ;; This function is called by:
  4237 ;;		_main
  4238 ;; This function uses a non-reentrant model
  4239 ;;
  4240                           
  4241                           
  4242                           ;psect for function _myMain_Initialization
  4243  1C36                     _myMain_Initialization:	
  4244                           
  4245                           ;main_B1.c: 169: product = &_product;
  4246                           
  4247                           ;incstack = 0
  4248                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4249  1C36  3045               	movlw	__product& (0+255)
  4250  1C37  0020               	movlb	0	; select bank0
  4251  1C38  00A0               	movwf	??_myMain_Initialization
  4252  1C39  0820               	movf	??_myMain_Initialization,w
  4253  1C3A  00EE               	movwf	_product
  4254                           
  4255                           ;main_B1.c: 170: product->Data[20] = 210;
  4256  1C3B  30D2               	movlw	210
  4257  1C3C  00A0               	movwf	??_myMain_Initialization
  4258  1C3D  086E               	movf	_product,w
  4259  1C3E  3E14               	addlw	20
  4260  1C3F  0086               	movwf	6
  4261  1C40  3002               	movlw	2	; select bank4/5
  4262  1C41  0087               	movwf	7
  4263  1C42  0820               	movf	??_myMain_Initialization,w
  4264  1C43  0081               	movwf	1
  4265  1C44  0008               	return
  4266  1C45                     __end_of_myMain_Initialization:	
  4267                           
  4268                           	psect	text3
  4269  132A                     __ptext3:	
  4270 ;; *************** function _getTemp_AD *****************
  4271 ;; Defined at:
  4272 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;  channel         1    wreg     unsigned char 
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;  channel         1    5[BANK0 ] unsigned char 
  4277 ;; Return value:  Size  Location     Type
  4278 ;;		None               void
  4279 ;; Registers used:
  4280 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4281 ;; Tracked objects:
  4282 ;;		On entry : 0/0
  4283 ;;		On exit  : 0/0
  4284 ;;		Unchanged: 0/0
  4285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4287 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4288 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4289 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4290 ;;Total ram usage:        2 bytes
  4291 ;; Hardware stack levels used:    1
  4292 ;; Hardware stack levels required when called:    7
  4293 ;; This function calls:
  4294 ;;		_getAD
  4295 ;; This function is called by:
  4296 ;;		_main
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           
  4301                           ;psect for function _getTemp_AD
  4302  132A                     _getTemp_AD:	
  4303                           
  4304                           ;incstack = 0
  4305                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4306                           ;getTemp_AD@channel stored from wreg
  4307  132A  0020               	movlb	0	; select bank0
  4308  132B  00A5               	movwf	getTemp_AD@channel
  4309                           
  4310                           ;OverTemperature_B1.c: 33: if (Temp.ADtoGO == 1) {
  4311  132C  0021               	movlb	1	; select bank1
  4312  132D  1D57               	btfss	_Temp^(0+128),2
  4313  132E  0008               	return
  4314                           
  4315                           ;OverTemperature_B1.c: 34: Temp.GO = 1;
  4316  132F  1657               	bsf	_Temp^(0+128),4
  4317                           
  4318                           ;OverTemperature_B1.c: 35: Temp.ADRES = getAD(channel, 0xf0);
  4319  1330  30F0               	movlw	240
  4320  1331  0020               	movlb	0	; select bank0
  4321  1332  00A4               	movwf	??_getTemp_AD
  4322  1333  0824               	movf	??_getTemp_AD,w
  4323  1334  00A0               	movwf	getAD@adcon1
  4324  1335  0825               	movf	getTemp_AD@channel,w
  4325  1336  319F  2738  3193   	fcall	_getAD
  4326  1339  0020               	movlb	0	; select bank0
  4327  133A  0821               	movf	?_getAD+1,w
  4328  133B  0021               	movlb	1	; select bank1
  4329  133C  01E4               	clrf	((_Temp+1)^(0+128)+12)
  4330  133D  07E4               	addwf	((_Temp+1)^(0+128)+12),f
  4331  133E  0020               	movlb	0	; select bank0
  4332  133F  0820               	movf	?_getAD,w
  4333  1340  0021               	movlb	1	; select bank1
  4334  1341  01E3               	clrf	(_Temp^(0+128)+12)
  4335  1342  07E3               	addwf	(_Temp^(0+128)+12),f
  4336                           
  4337                           ;OverTemperature_B1.c: 36: if (Temp.ADH[0] < Temp.ADRES) {
  4338  1343  0864               	movf	((_Temp+1)^(0+128)+12),w
  4339  1344  0260               	subwf	((_Temp+1)^(0+128)+8),w
  4340  1345  1D03               	skipz
  4341  1346  2B49               	goto	u8195
  4342  1347  0863               	movf	(_Temp^(0+128)+12),w
  4343  1348  025F               	subwf	(_Temp^(0+128)+8),w
  4344  1349                     u8195:	
  4345  1349  1803               	skipnc
  4346  134A  2B52               	goto	l8088
  4347                           
  4348                           ;OverTemperature_B1.c: 37: Temp.ADH[0] = Temp.ADRES;
  4349  134B  0864               	movf	((_Temp+1)^(0+128)+12),w
  4350  134C  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4351  134D  07E0               	addwf	((_Temp+1)^(0+128)+8),f
  4352  134E  0863               	movf	(_Temp^(0+128)+12),w
  4353  134F  01DF               	clrf	(_Temp^(0+128)+8)
  4354  1350  07DF               	addwf	(_Temp^(0+128)+8),f
  4355                           
  4356                           ;OverTemperature_B1.c: 38: } else if (Temp.ADH[1] < Temp.ADRES) {
  4357  1351  0008               	return
  4358  1352                     l8088:	
  4359  1352  0864               	movf	((_Temp+1)^(0+128)+12),w
  4360  1353  0262               	subwf	((_Temp+1)^(0+128)+10),w
  4361  1354  1D03               	skipz
  4362  1355  2B58               	goto	u8205
  4363  1356  0863               	movf	(_Temp^(0+128)+12),w
  4364  1357  0261               	subwf	(_Temp^(0+128)+10),w
  4365  1358                     u8205:	
  4366  1358  1803               	skipnc
  4367  1359  0008               	return
  4368                           
  4369                           ;OverTemperature_B1.c: 39: Temp.ADH[1] = Temp.ADRES;
  4370  135A  0864               	movf	((_Temp+1)^(0+128)+12),w
  4371  135B  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4372  135C  07E2               	addwf	((_Temp+1)^(0+128)+10),f
  4373  135D  0863               	movf	(_Temp^(0+128)+12),w
  4374  135E  01E1               	clrf	(_Temp^(0+128)+10)
  4375  135F  07E1               	addwf	(_Temp^(0+128)+10),f
  4376  1360  0008               	return
  4377  1361                     __end_of_getTemp_AD:	
  4378                           
  4379                           	psect	text4
  4380  0C57                     __ptext4:	
  4381 ;; *************** function _getLoad_AD *****************
  4382 ;; Defined at:
  4383 ;;		line 15 in file "../src/OverLoad_B1.c"
  4384 ;; Parameters:    Size  Location     Type
  4385 ;;  channel         1    wreg     unsigned char 
  4386 ;; Auto vars:     Size  Location     Type
  4387 ;;  channel         1    6[BANK0 ] unsigned char 
  4388 ;;  i               1    9[BANK0 ] unsigned char 
  4389 ;;  j               1    8[BANK0 ] unsigned char 
  4390 ;;  k               1    7[BANK0 ] unsigned char 
  4391 ;; Return value:  Size  Location     Type
  4392 ;;		None               void
  4393 ;; Registers used:
  4394 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4395 ;; Tracked objects:
  4396 ;;		On entry : 0/0
  4397 ;;		On exit  : 0/0
  4398 ;;		Unchanged: 0/0
  4399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4401 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4402 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4403 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4404 ;;Total ram usage:        6 bytes
  4405 ;; Hardware stack levels used:    1
  4406 ;; Hardware stack levels required when called:    7
  4407 ;; This function calls:
  4408 ;;		_getAD
  4409 ;; This function is called by:
  4410 ;;		_main
  4411 ;; This function uses a non-reentrant model
  4412 ;;
  4413                           
  4414                           
  4415                           ;psect for function _getLoad_AD
  4416  0C57                     _getLoad_AD:	
  4417                           
  4418                           ;incstack = 0
  4419                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4420                           ;getLoad_AD@channel stored from wreg
  4421  0C57  0020               	movlb	0	; select bank0
  4422  0C58  00A6               	movwf	getLoad_AD@channel
  4423                           
  4424                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4425  0C59  01A9               	clrf	getLoad_AD@i
  4426  0C5A  01A8               	clrf	getLoad_AD@j
  4427  0C5B  01A7               	clrf	getLoad_AD@k
  4428                           
  4429                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4430  0C5C  0022               	movlb	2	; select bank2
  4431  0C5D  1E26               	btfss	_Load^(0+256),4
  4432  0C5E  0008               	return
  4433                           
  4434                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4435  0C5F  30F3               	movlw	243
  4436  0C60  0020               	movlb	0	; select bank0
  4437  0C61  00A4               	movwf	??_getLoad_AD
  4438  0C62  0824               	movf	??_getLoad_AD,w
  4439  0C63  00A0               	movwf	getAD@adcon1
  4440  0C64  0826               	movf	getLoad_AD@channel,w
  4441  0C65  319F  2738  318C   	fcall	_getAD
  4442  0C68  0020               	movlb	0	; select bank0
  4443  0C69  0821               	movf	?_getAD+1,w
  4444  0C6A  0022               	movlb	2	; select bank2
  4445  0C6B  01C8               	clrf	((_Load+1)^(0+256)+33)
  4446  0C6C  07C8               	addwf	((_Load+1)^(0+256)+33),f
  4447  0C6D  0020               	movlb	0	; select bank0
  4448  0C6E  0820               	movf	?_getAD,w
  4449  0C6F  0022               	movlb	2	; select bank2
  4450  0C70  01C7               	clrf	(_Load^(0+256)+33)
  4451  0C71  07C7               	addwf	(_Load^(0+256)+33),f
  4452                           
  4453                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4454  0C72  0020               	movlb	0	; select bank0
  4455  0C73  01A9               	clrf	getLoad_AD@i
  4456  0C74  3004               	movlw	4
  4457  0C75  0229               	subwf	getLoad_AD@i,w
  4458  0C76  1803               	btfsc	3,0
  4459  0C77  2CA5               	goto	l7910
  4460  0C78                     l7898:	
  4461                           
  4462                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4463  0C78  3529               	lslf	getLoad_AD@i,w
  4464  0C79  3E31               	addlw	(_Load+11)& (0+255)
  4465  0C7A  0086               	movwf	6
  4466  0C7B  3001               	movlw	1	; select bank2/3
  4467  0C7C  0087               	movwf	7
  4468  0C7D  3F40               	moviw [0]fsr1
  4469  0C7E  00A4               	movwf	??_getLoad_AD
  4470  0C7F  3F41               	moviw [1]fsr1
  4471  0C80  00A5               	movwf	??_getLoad_AD+1
  4472  0C81  0022               	movlb	2	; select bank2
  4473  0C82  0848               	movf	((_Load+1)^(0+256)+33),w
  4474  0C83  0020               	movlb	0	; select bank0
  4475  0C84  0225               	subwf	??_getLoad_AD+1,w
  4476  0C85  1D03               	skipz
  4477  0C86  2C8B               	goto	u7815
  4478  0C87  0022               	movlb	2	; select bank2
  4479  0C88  0847               	movf	(_Load^(0+256)+33),w
  4480  0C89  0020               	movlb	0	; select bank0
  4481  0C8A  0224               	subwf	??_getLoad_AD,w
  4482  0C8B                     u7815:	
  4483  0C8B  1803               	skipnc
  4484  0C8C  2C9D               	goto	l7906
  4485  0C8D  08A8               	movf	getLoad_AD@j,f
  4486  0C8E  1D03               	skipz
  4487  0C8F  2C9D               	goto	l7906
  4488                           
  4489                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4490  0C90  3529               	lslf	getLoad_AD@i,w
  4491  0C91  3E31               	addlw	(_Load+11)& (0+255)
  4492  0C92  0086               	movwf	6
  4493  0C93  3001               	movlw	1	; select bank2/3
  4494  0C94  0087               	movwf	7
  4495  0C95  0022               	movlb	2	; select bank2
  4496  0C96  0847               	movf	(_Load^(0+256)+33),w
  4497  0C97  3FC0               	movwi [0]fsr1
  4498  0C98  0848               	movf	((_Load+1)^(0+256)+33),w
  4499  0C99  3FC1               	movwi [1]fsr1
  4500                           
  4501                           ;OverLoad_B1.c: 24: j = 1;
  4502  0C9A  0020               	movlb	0	; select bank0
  4503  0C9B  01A8               	clrf	getLoad_AD@j
  4504  0C9C  0AA8               	incf	getLoad_AD@j,f
  4505  0C9D                     l7906:	
  4506  0C9D  3001               	movlw	1
  4507  0C9E  00A4               	movwf	??_getLoad_AD
  4508  0C9F  0824               	movf	??_getLoad_AD,w
  4509  0CA0  07A9               	addwf	getLoad_AD@i,f
  4510  0CA1  3004               	movlw	4
  4511  0CA2  0229               	subwf	getLoad_AD@i,w
  4512  0CA3  1C03               	skipc
  4513  0CA4  2C78               	goto	l7898
  4514  0CA5                     l7910:	
  4515                           
  4516                           ;OverLoad_B1.c: 25: }
  4517                           ;OverLoad_B1.c: 26: }
  4518                           ;OverLoad_B1.c: 27: if (j == 0) {
  4519  0CA5  08A8               	movf	getLoad_AD@j,f
  4520  0CA6  1D03               	skipz
  4521  0CA7  0008               	return
  4522                           
  4523                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4524  0CA8  01A9               	clrf	getLoad_AD@i
  4525  0CA9                     L1:	
  4526  0CA9  3004               	movlw	4
  4527  0CAA  0229               	subwf	getLoad_AD@i,w
  4528  0CAB  1803               	btfsc	3,0
  4529  0CAC  0008               	return
  4530                           
  4531                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4532  0CAD  3529               	lslf	getLoad_AD@i,w
  4533  0CAE  3E3B               	addlw	(_Load+21)& (0+255)
  4534  0CAF  0086               	movwf	6
  4535  0CB0  3001               	movlw	1	; select bank2/3
  4536  0CB1  0087               	movwf	7
  4537  0CB2  3F40               	moviw [0]fsr1
  4538  0CB3  00A4               	movwf	??_getLoad_AD
  4539  0CB4  3F41               	moviw [1]fsr1
  4540  0CB5  00A5               	movwf	??_getLoad_AD+1
  4541  0CB6  0825               	movf	??_getLoad_AD+1,w
  4542  0CB7  0022               	movlb	2	; select bank2
  4543  0CB8  0248               	subwf	((_Load+1)^(0+256)+33),w
  4544  0CB9  1D03               	skipz
  4545  0CBA  2CBF               	goto	u7865
  4546  0CBB  0020               	movlb	0	; select bank0
  4547  0CBC  0824               	movf	??_getLoad_AD,w
  4548  0CBD  0022               	movlb	2	; select bank2
  4549  0CBE  0247               	subwf	(_Load^(0+256)+33),w
  4550  0CBF                     u7865:	
  4551  0CBF  1803               	skipnc
  4552  0CC0  2CD2               	goto	l7926
  4553  0CC1  0020               	movlb	0	; select bank0
  4554  0CC2  08A7               	movf	getLoad_AD@k,f
  4555  0CC3  1D03               	skipz
  4556  0CC4  2CD2               	goto	l7926
  4557                           
  4558                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4559  0CC5  3529               	lslf	getLoad_AD@i,w
  4560  0CC6  3E3B               	addlw	(_Load+21)& (0+255)
  4561  0CC7  0086               	movwf	6
  4562  0CC8  3001               	movlw	1	; select bank2/3
  4563  0CC9  0087               	movwf	7
  4564  0CCA  0022               	movlb	2	; select bank2
  4565  0CCB  0847               	movf	(_Load^(0+256)+33),w
  4566  0CCC  3FC0               	movwi [0]fsr1
  4567  0CCD  0848               	movf	((_Load+1)^(0+256)+33),w
  4568  0CCE  3FC1               	movwi [1]fsr1
  4569                           
  4570                           ;OverLoad_B1.c: 31: k = 1;
  4571  0CCF  0020               	movlb	0	; select bank0
  4572  0CD0  01A7               	clrf	getLoad_AD@k
  4573  0CD1  0AA7               	incf	getLoad_AD@k,f
  4574  0CD2                     l7926:	
  4575  0CD2  3001               	movlw	1
  4576  0CD3  0020               	movlb	0	; select bank0
  4577  0CD4  00A4               	movwf	??_getLoad_AD
  4578  0CD5  0824               	movf	??_getLoad_AD,w
  4579  0CD6  07A9               	addwf	getLoad_AD@i,f
  4580  0CD7  2CA9               	goto	L1
  4581  0CD8                     __end_of_getLoad_AD:	
  4582                           
  4583                           	psect	text5
  4584  1F38                     __ptext5:	
  4585 ;; *************** function _getAD *****************
  4586 ;; Defined at:
  4587 ;;		line 454 in file "../src/MCU_B1.c"
  4588 ;; Parameters:    Size  Location     Type
  4589 ;;  adcon0          1    wreg     unsigned char 
  4590 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4591 ;; Auto vars:     Size  Location     Type
  4592 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4593 ;; Return value:  Size  Location     Type
  4594 ;;                  2    0[BANK0 ] int 
  4595 ;; Registers used:
  4596 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4597 ;; Tracked objects:
  4598 ;;		On entry : 0/0
  4599 ;;		On exit  : 0/0
  4600 ;;		Unchanged: 0/0
  4601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4602 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4603 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4605 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4606 ;;Total ram usage:        4 bytes
  4607 ;; Hardware stack levels used:    1
  4608 ;; Hardware stack levels required when called:    6
  4609 ;; This function calls:
  4610 ;;		_Timeout_Counter
  4611 ;;		_set_TimeoutCleared
  4612 ;; This function is called by:
  4613 ;;		_getLoad_AD
  4614 ;;		_getTemp_AD
  4615 ;; This function uses a non-reentrant model
  4616 ;;
  4617                           
  4618                           
  4619                           ;psect for function _getAD
  4620  1F38                     _getAD:	
  4621                           
  4622                           ;incstack = 0
  4623                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4624                           ;getAD@adcon0 stored from wreg
  4625  1F38  0020               	movlb	0	; select bank0
  4626  1F39  00A3               	movwf	getAD@adcon0
  4627                           
  4628                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4629  1F3A  0823               	movf	getAD@adcon0,w
  4630  1F3B  0021               	movlb	1	; select bank1
  4631  1F3C  009D               	movwf	29	;volatile
  4632                           
  4633                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4634  1F3D  0020               	movlb	0	; select bank0
  4635  1F3E  0820               	movf	getAD@adcon1,w
  4636  1F3F  0021               	movlb	1	; select bank1
  4637  1F40  009E               	movwf	30	;volatile
  4638                           
  4639                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4640  1F41  149D               	bsf	29,1	;volatile
  4641                           
  4642                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4643  1F42  2F46               	goto	l7320
  4644  1F43                     l7318:	
  4645                           
  4646                           ;MCU_B1.c: 459: Timeout_Counter();
  4647  1F43  319D  25A1  319F   	fcall	_Timeout_Counter
  4648  1F46                     l7320:	
  4649  1F46  0021               	movlb	1	; select bank1
  4650  1F47  1C9D               	btfss	29,1	;volatile
  4651  1F48  2F4B               	goto	l7324
  4652  1F49  1D2D               	btfss	(_myMain^(0+128)+13),2
  4653  1F4A  2F43               	goto	l7318
  4654  1F4B                     l7324:	
  4655                           
  4656                           ;MCU_B1.c: 460: };
  4657                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4658  1F4B  319B  2346         	fcall	_set_TimeoutCleared
  4659                           
  4660                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4661  1F4D  0021               	movlb	1	; select bank1
  4662  1F4E  081C               	movf	28,w	;volatile
  4663  1F4F  0020               	movlb	0	; select bank0
  4664  1F50  01A1               	clrf	?_getAD+1
  4665  1F51  07A1               	addwf	?_getAD+1,f
  4666  1F52  0021               	movlb	1	; select bank1
  4667  1F53  081B               	movf	27,w	;volatile
  4668  1F54  0020               	movlb	0	; select bank0
  4669  1F55  01A0               	clrf	?_getAD
  4670  1F56  07A0               	addwf	?_getAD,f
  4671  1F57  0008               	return
  4672  1F58                     __end_of_getAD:	
  4673                           
  4674                           	psect	text6
  4675  1CDF                     __ptext6:	
  4676 ;; *************** function _WDT_Main *****************
  4677 ;; Defined at:
  4678 ;;		line 1033 in file "../src/MCU_B1.c"
  4679 ;; Parameters:    Size  Location     Type
  4680 ;;		None
  4681 ;; Auto vars:     Size  Location     Type
  4682 ;;		None
  4683 ;; Return value:  Size  Location     Type
  4684 ;;		None               void
  4685 ;; Registers used:
  4686 ;;		wreg, status,2, status,0, pclath, cstack
  4687 ;; Tracked objects:
  4688 ;;		On entry : 0/0
  4689 ;;		On exit  : 0/0
  4690 ;;		Unchanged: 0/0
  4691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4694 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4695 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4696 ;;Total ram usage:        1 bytes
  4697 ;; Hardware stack levels used:    1
  4698 ;; Hardware stack levels required when called:    6
  4699 ;; This function calls:
  4700 ;;		_WDT_Clearing
  4701 ;; This function is called by:
  4702 ;;		_main
  4703 ;; This function uses a non-reentrant model
  4704 ;;
  4705                           
  4706                           
  4707                           ;psect for function _WDT_Main
  4708  1CDF                     _WDT_Main:	
  4709                           
  4710                           ;MCU_B1.c: 1034: if (WDT.Enable == 1) {
  4711                           
  4712                           ;incstack = 0
  4713                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4714  1CDF  0021               	movlb	1	; select bank1
  4715  1CE0  1C4A               	btfss	_WDT^(0+128),0
  4716  1CE1  0008               	return
  4717                           
  4718                           ;MCU_B1.c: 1035: if (WDT.Timer-- > 0) {
  4719  1CE2  3001               	movlw	1
  4720  1CE3  02CB               	subwf	(_WDT^(0+128)+1),f
  4721  1CE4  084B               	movf	(_WDT^(0+128)+1),w
  4722  1CE5  3AFF               	xorlw	255
  4723  1CE6  1903               	skipnz
  4724  1CE7  0008               	return
  4725                           
  4726                           ;MCU_B1.c: 1036: WDT.Timer = 100;
  4727  1CE8  3064               	movlw	100
  4728  1CE9  0020               	movlb	0	; select bank0
  4729  1CEA  00A0               	movwf	??_WDT_Main
  4730  1CEB  0820               	movf	??_WDT_Main,w
  4731  1CEC  0021               	movlb	1	; select bank1
  4732  1CED  00CB               	movwf	(_WDT^(0+128)+1)
  4733                           
  4734                           ;MCU_B1.c: 1037: WDT_Clearing();
  4735  1CEE  3180  2002         	fcall	_WDT_Clearing
  4736  1CF0  0008               	return
  4737  1CF1                     __end_of_WDT_Main:	
  4738                           
  4739                           	psect	text7
  4740  0002                     __ptext7:	
  4741 ;; *************** function _WDT_Clearing *****************
  4742 ;; Defined at:
  4743 ;;		line 1043 in file "../src/MCU_B1.c"
  4744 ;; Parameters:    Size  Location     Type
  4745 ;;		None
  4746 ;; Auto vars:     Size  Location     Type
  4747 ;;		None
  4748 ;; Return value:  Size  Location     Type
  4749 ;;		None               void
  4750 ;; Registers used:
  4751 ;;		None
  4752 ;; Tracked objects:
  4753 ;;		On entry : 0/0
  4754 ;;		On exit  : 0/0
  4755 ;;		Unchanged: 0/0
  4756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4761 ;;Total ram usage:        0 bytes
  4762 ;; Hardware stack levels used:    1
  4763 ;; Hardware stack levels required when called:    5
  4764 ;; This function calls:
  4765 ;;		Nothing
  4766 ;; This function is called by:
  4767 ;;		_WDT_Main
  4768 ;; This function uses a non-reentrant model
  4769 ;;
  4770                           
  4771                           
  4772                           ;psect for function _WDT_Clearing
  4773  0002                     _WDT_Clearing:	
  4774                           
  4775                           ;incstack = 0
  4776                           ; Regs used in _WDT_Clearing: []
  4777  0002  0064               	clrwdt	;# 
  4778  0003  0008               	return
  4779  0004                     __end_of_WDT_Clearing:	
  4780                           
  4781                           	psect	text8
  4782  1B37                     __ptext8:	
  4783 ;; *************** function _Temp_Main *****************
  4784 ;; Defined at:
  4785 ;;		line 51 in file "../src/OverTemperature_B1.c"
  4786 ;; Parameters:    Size  Location     Type
  4787 ;;		None
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;		None
  4790 ;; Return value:  Size  Location     Type
  4791 ;;		None               void
  4792 ;; Registers used:
  4793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4794 ;; Tracked objects:
  4795 ;;		On entry : 0/0
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4803 ;;Total ram usage:        0 bytes
  4804 ;; Hardware stack levels used:    1
  4805 ;; Hardware stack levels required when called:    8
  4806 ;; This function calls:
  4807 ;;		_setTemp_Main
  4808 ;; This function is called by:
  4809 ;;		_main
  4810 ;; This function uses a non-reentrant model
  4811 ;;
  4812                           
  4813                           
  4814                           ;psect for function _Temp_Main
  4815  1B37                     _Temp_Main:	
  4816                           
  4817                           ;OverTemperature_B1.c: 53: setTemp_Main();
  4818                           
  4819                           ;incstack = 0
  4820                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4821  1B37  318F  2745         	fcall	_setTemp_Main
  4822  1B39  0008               	return
  4823  1B3A                     __end_of_Temp_Main:	
  4824                           
  4825                           	psect	text9
  4826  0F45                     __ptext9:	
  4827 ;; *************** function _setTemp_Main *****************
  4828 ;; Defined at:
  4829 ;;		line 58 in file "../src/OverTemperature_B1.c"
  4830 ;; Parameters:    Size  Location     Type
  4831 ;;		None
  4832 ;; Auto vars:     Size  Location     Type
  4833 ;;		None
  4834 ;; Return value:  Size  Location     Type
  4835 ;;		None               void
  4836 ;; Registers used:
  4837 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4838 ;; Tracked objects:
  4839 ;;		On entry : 0/0
  4840 ;;		On exit  : 0/0
  4841 ;;		Unchanged: 0/0
  4842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4845 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4846 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4847 ;;Total ram usage:        2 bytes
  4848 ;; Hardware stack levels used:    1
  4849 ;; Hardware stack levels required when called:    7
  4850 ;; This function calls:
  4851 ;;		_getMain_All_Error_Status
  4852 ;;		_setBuz
  4853 ;; This function is called by:
  4854 ;;		_Temp_Main
  4855 ;; This function uses a non-reentrant model
  4856 ;;
  4857                           
  4858                           
  4859                           ;psect for function _setTemp_Main
  4860  0F45                     _setTemp_Main:	
  4861                           
  4862                           ;OverTemperature_B1.c: 59: if (Temp.Enable == 1) {
  4863                           
  4864                           ;incstack = 0
  4865                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4866  0F45  0021               	movlb	1	; select bank1
  4867  0F46  1C57               	btfss	_Temp^(0+128),0
  4868  0F47  2FFC               	goto	l1617
  4869                           
  4870                           ;OverTemperature_B1.c: 60: if (Temp.ADtoGO == 0) {
  4871  0F48  1957               	btfsc	_Temp^(0+128),2
  4872  0F49  2F59               	goto	l7396
  4873                           
  4874                           ;OverTemperature_B1.c: 61: Temp.Time++;
  4875  0F4A  3001               	movlw	1
  4876  0F4B  07D8               	addwf	(_Temp^(0+128)+1),f
  4877  0F4C  3000               	movlw	0
  4878  0F4D  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4879                           
  4880                           ;OverTemperature_B1.c: 62: if (Temp.Time >= 500) {
  4881  0F4E  3001               	movlw	1
  4882  0F4F  0259               	subwf	((_Temp+1)^(0+128)+1),w
  4883  0F50  30F4               	movlw	244
  4884  0F51  1903               	skipnz
  4885  0F52  0258               	subwf	(_Temp^(0+128)+1),w
  4886  0F53  1C03               	skipc
  4887  0F54  0008               	return
  4888                           
  4889                           ;OverTemperature_B1.c: 63: Temp.Time = 0;
  4890  0F55  01D8               	clrf	(_Temp^(0+128)+1)
  4891  0F56  01D9               	clrf	((_Temp+1)^(0+128)+1)
  4892                           
  4893                           ;OverTemperature_B1.c: 64: Temp.ADtoGO = 1;
  4894  0F57  1557               	bsf	_Temp^(0+128),2
  4895                           
  4896                           ;OverTemperature_B1.c: 65: }
  4897                           ;OverTemperature_B1.c: 66: } else {
  4898  0F58  0008               	return
  4899  0F59                     l7396:	
  4900                           
  4901                           ;OverTemperature_B1.c: 67: if (getMain_All_Error_Status(2) == 0) {
  4902  0F59  3002               	movlw	2
  4903  0F5A  3191  21EB  318F   	fcall	_getMain_All_Error_Status
  4904  0F5D  3800               	iorlw	0
  4905  0F5E  1D03               	skipz
  4906  0F5F  0008               	return
  4907                           
  4908                           ;OverTemperature_B1.c: 68: Temp.Time++;
  4909  0F60  3001               	movlw	1
  4910  0F61  0021               	movlb	1	; select bank1
  4911  0F62  07D8               	addwf	(_Temp^(0+128)+1),f
  4912  0F63  3000               	movlw	0
  4913  0F64  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4914                           
  4915                           ;OverTemperature_B1.c: 69: if (Temp.Time >= 5) {
  4916  0F65  3000               	movlw	0
  4917  0F66  0259               	subwf	((_Temp+1)^(0+128)+1),w
  4918  0F67  3005               	movlw	5
  4919  0F68  1903               	skipnz
  4920  0F69  0258               	subwf	(_Temp^(0+128)+1),w
  4921  0F6A  1C03               	skipc
  4922  0F6B  0008               	return
  4923                           
  4924                           ;OverTemperature_B1.c: 70: Temp.Time = 0;
  4925  0F6C  01D8               	clrf	(_Temp^(0+128)+1)
  4926  0F6D  01D9               	clrf	((_Temp+1)^(0+128)+1)
  4927                           
  4928                           ;OverTemperature_B1.c: 71: if (Temp.GO == 1) {
  4929  0F6E  1E57               	btfss	_Temp^(0+128),4
  4930  0F6F  0008               	return
  4931                           
  4932                           ;OverTemperature_B1.c: 72: Temp.ADtoGO = 0;
  4933  0F70  1157               	bcf	_Temp^(0+128),2
  4934                           
  4935                           ;OverTemperature_B1.c: 73: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  4936  0F71  300A               	movlw	10
  4937  0F72  3ED7               	addlw	_Temp& (0+255)
  4938  0F73  0086               	movwf	6
  4939  0F74  0187               	clrf	7
  4940  0F75  3008               	movlw	8
  4941  0F76  3ED7               	addlw	_Temp& (0+255)
  4942  0F77  0084               	movwf	4
  4943  0F78  0185               	clrf	5
  4944  0F79  3F40               	moviw [0]fsr1
  4945  0F7A  0700               	addwf	0,w
  4946  0F7B  0020               	movlb	0	; select bank0
  4947  0F7C  00AD               	movwf	??_setTemp_Main
  4948  0F7D  3101               	addfsr 0,1
  4949  0F7E  3F41               	moviw [1]fsr1
  4950  0F7F  3D00               	addwfc	0,w
  4951  0F80  00AE               	movwf	??_setTemp_Main+1
  4952  0F81  36AE               	lsrf	??_setTemp_Main+1,f
  4953  0F82  0CAD               	rrf	??_setTemp_Main,f
  4954  0F83  082D               	movf	??_setTemp_Main,w
  4955  0F84  0021               	movlb	1	; select bank1
  4956  0F85  00DD               	movwf	(_Temp^(0+128)+6)
  4957  0F86  0020               	movlb	0	; select bank0
  4958  0F87  082E               	movf	??_setTemp_Main+1,w
  4959  0F88  0021               	movlb	1	; select bank1
  4960  0F89  00DE               	movwf	((_Temp+1)^(0+128)+6)
  4961                           
  4962                           ;OverTemperature_B1.c: 83: Temp.SafeValue = 450;
  4963  0F8A  30C2               	movlw	194
  4964  0F8B  00E5               	movwf	(_Temp^(0+128)+14)
  4965  0F8C  3001               	movlw	1
  4966  0F8D  00E6               	movwf	(_Temp^(0+128)+15)
  4967                           
  4968                           ;OverTemperature_B1.c: 84: Temp.DangerValue = 430;
  4969  0F8E  30AE               	movlw	174
  4970  0F8F  00E7               	movwf	(_Temp^(0+128)+16)
  4971  0F90  3001               	movlw	1
  4972  0F91  00E8               	movwf	(_Temp^(0+128)+17)
  4973                           
  4974                           ;OverTemperature_B1.c: 90: if (Temp.ERROR == 1) {
  4975  0F92  1CD7               	btfss	_Temp^(0+128),1
  4976  0F93  2FB4               	goto	l7428
  4977                           
  4978                           ;OverTemperature_B1.c: 91: if (Temp.AD >= Temp.SafeValue) {
  4979  0F94  0866               	movf	((_Temp+1)^(0+128)+14),w
  4980  0F95  025E               	subwf	((_Temp+1)^(0+128)+6),w
  4981  0F96  1D03               	skipz
  4982  0F97  2F9A               	goto	u6955
  4983  0F98  0865               	movf	(_Temp^(0+128)+14),w
  4984  0F99  025D               	subwf	(_Temp^(0+128)+6),w
  4985  0F9A                     u6955:	
  4986  0F9A  1C03               	skipc
  4987  0F9B  2FB2               	goto	l7426
  4988                           
  4989                           ;OverTemperature_B1.c: 92: Temp.Count++;
  4990  0F9C  3001               	movlw	1
  4991  0F9D  0020               	movlb	0	; select bank0
  4992  0F9E  00AD               	movwf	??_setTemp_Main
  4993  0F9F  082D               	movf	??_setTemp_Main,w
  4994  0FA0  0021               	movlb	1	; select bank1
  4995  0FA1  07DA               	addwf	(_Temp^(0+128)+3),f
  4996                           
  4997                           ;OverTemperature_B1.c: 93: if (Temp.Count >= 3) {
  4998  0FA2  3003               	movlw	3
  4999  0FA3  025A               	subwf	(_Temp^(0+128)+3),w
  5000  0FA4  1C03               	skipc
  5001  0FA5  2FCA               	goto	l7440
  5002                           
  5003                           ;OverTemperature_B1.c: 94: Temp.Count = 0;
  5004  0FA6  01DA               	clrf	(_Temp^(0+128)+3)
  5005                           
  5006                           ;OverTemperature_B1.c: 95: Temp.ERROR = 0;
  5007  0FA7  10D7               	bcf	_Temp^(0+128),1
  5008                           
  5009                           ;OverTemperature_B1.c: 96: setBuz(2, 100);
  5010  0FA8  3064               	movlw	100
  5011  0FA9  0020               	movlb	0	; select bank0
  5012  0FAA  00A9               	movwf	setBuz@time
  5013  0FAB  3000               	movlw	0
  5014  0FAC  00AA               	movwf	setBuz@time+1
  5015  0FAD  3002               	movlw	2
  5016  0FAE  3196  2696  318F   	fcall	_setBuz
  5017                           
  5018                           ;OverTemperature_B1.c: 97: }
  5019                           ;OverTemperature_B1.c: 98: } else {
  5020  0FB1  2FCA               	goto	l7440
  5021  0FB2                     l7426:	
  5022                           
  5023                           ;OverTemperature_B1.c: 99: Temp.Count = 0;
  5024  0FB2  0021               	movlb	1	; select bank1
  5025  0FB3  2FC9               	goto	l7438
  5026  0FB4                     l7428:	
  5027                           ;OverTemperature_B1.c: 100: }
  5028                           ;OverTemperature_B1.c: 101: } else {
  5029                           
  5030                           
  5031                           ;OverTemperature_B1.c: 102: if (Temp.AD <= Temp.DangerValue) {
  5032  0FB4  085E               	movf	((_Temp+1)^(0+128)+6),w
  5033  0FB5  0268               	subwf	((_Temp+1)^(0+128)+16),w
  5034  0FB6  1D03               	skipz
  5035  0FB7  2FBA               	goto	u6975
  5036  0FB8  085D               	movf	(_Temp^(0+128)+6),w
  5037  0FB9  0267               	subwf	(_Temp^(0+128)+16),w
  5038  0FBA                     u6975:	
  5039  0FBA  1C03               	skipc
  5040  0FBB  2FC9               	goto	l7438
  5041                           
  5042                           ;OverTemperature_B1.c: 103: Temp.Count++;
  5043  0FBC  3001               	movlw	1
  5044  0FBD  0020               	movlb	0	; select bank0
  5045  0FBE  00AD               	movwf	??_setTemp_Main
  5046  0FBF  082D               	movf	??_setTemp_Main,w
  5047  0FC0  0021               	movlb	1	; select bank1
  5048  0FC1  07DA               	addwf	(_Temp^(0+128)+3),f
  5049                           
  5050                           ;OverTemperature_B1.c: 104: if (Temp.Count >= 3) {
  5051  0FC2  3003               	movlw	3
  5052  0FC3  025A               	subwf	(_Temp^(0+128)+3),w
  5053  0FC4  1C03               	skipc
  5054  0FC5  2FCA               	goto	l7440
  5055                           
  5056                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5057  0FC6  01DA               	clrf	(_Temp^(0+128)+3)
  5058                           
  5059                           ;OverTemperature_B1.c: 106: Temp.ERROR = 1;
  5060  0FC7  14D7               	bsf	_Temp^(0+128),1
  5061                           
  5062                           ;OverTemperature_B1.c: 107: }
  5063                           ;OverTemperature_B1.c: 108: } else {
  5064  0FC8  2FCA               	goto	l7440
  5065  0FC9                     l7438:	
  5066                           
  5067                           ;OverTemperature_B1.c: 109: Temp.Count = 0;
  5068  0FC9  01DA               	clrf	(_Temp^(0+128)+3)
  5069  0FCA                     l7440:	
  5070                           
  5071                           ;OverTemperature_B1.c: 110: }
  5072                           ;OverTemperature_B1.c: 111: }
  5073                           ;OverTemperature_B1.c: 112: product->Data[24]=Temp.AD >> 8;
  5074  0FCA  0021               	movlb	1	; select bank1
  5075  0FCB  085E               	movf	((_Temp+1)^(0+128)+6),w
  5076  0FCC  0020               	movlb	0	; select bank0
  5077  0FCD  00AD               	movwf	??_setTemp_Main
  5078  0FCE  086E               	movf	_product,w
  5079  0FCF  3E18               	addlw	24
  5080  0FD0  0086               	movwf	6
  5081  0FD1  3002               	movlw	2	; select bank4/5
  5082  0FD2  0087               	movwf	7
  5083  0FD3  082D               	movf	??_setTemp_Main,w
  5084  0FD4  0081               	movwf	1
  5085                           
  5086                           ;OverTemperature_B1.c: 113: product->Data[25]=Temp.AD;
  5087  0FD5  0021               	movlb	1	; select bank1
  5088  0FD6  085D               	movf	(_Temp^(0+128)+6),w
  5089  0FD7  0020               	movlb	0	; select bank0
  5090  0FD8  00AD               	movwf	??_setTemp_Main
  5091  0FD9  086E               	movf	_product,w
  5092  0FDA  3E19               	addlw	25
  5093  0FDB  0086               	movwf	6
  5094  0FDC  3002               	movlw	2	; select bank4/5
  5095  0FDD  0087               	movwf	7
  5096  0FDE  082D               	movf	??_setTemp_Main,w
  5097  0FDF  0081               	movwf	1
  5098                           
  5099                           ;OverTemperature_B1.c: 116: product->Data[2]=Temp.AD >> 8;
  5100  0FE0  0021               	movlb	1	; select bank1
  5101  0FE1  085E               	movf	((_Temp+1)^(0+128)+6),w
  5102  0FE2  0020               	movlb	0	; select bank0
  5103  0FE3  00AD               	movwf	??_setTemp_Main
  5104  0FE4  086E               	movf	_product,w
  5105  0FE5  3E02               	addlw	2
  5106  0FE6  0086               	movwf	6
  5107  0FE7  3002               	movlw	2	; select bank4/5
  5108  0FE8  0087               	movwf	7
  5109  0FE9  082D               	movf	??_setTemp_Main,w
  5110  0FEA  0081               	movwf	1
  5111                           
  5112                           ;OverTemperature_B1.c: 117: product->Data[3]=Temp.AD;
  5113  0FEB  0021               	movlb	1	; select bank1
  5114  0FEC  085D               	movf	(_Temp^(0+128)+6),w
  5115  0FED  0020               	movlb	0	; select bank0
  5116  0FEE  00AD               	movwf	??_setTemp_Main
  5117  0FEF  086E               	movf	_product,w
  5118  0FF0  3E03               	addlw	3
  5119  0FF1  0086               	movwf	6
  5120  0FF2  3002               	movlw	2	; select bank4/5
  5121  0FF3  0087               	movwf	7
  5122  0FF4  082D               	movf	??_setTemp_Main,w
  5123  0FF5  0081               	movwf	1
  5124                           
  5125                           ;OverTemperature_B1.c: 119: Temp.ADH[0] = 0;
  5126  0FF6  0021               	movlb	1	; select bank1
  5127  0FF7  01DF               	clrf	(_Temp^(0+128)+8)
  5128  0FF8  01E0               	clrf	((_Temp+1)^(0+128)+8)
  5129                           
  5130                           ;OverTemperature_B1.c: 120: Temp.ADH[1] = 0;
  5131  0FF9  01E1               	clrf	(_Temp^(0+128)+10)
  5132  0FFA  01E2               	clrf	((_Temp+1)^(0+128)+10)
  5133                           
  5134                           ;OverTemperature_B1.c: 121: }
  5135                           ;OverTemperature_B1.c: 122: }
  5136                           ;OverTemperature_B1.c: 123: }
  5137                           ;OverTemperature_B1.c: 124: }
  5138                           ;OverTemperature_B1.c: 125: } else {
  5139  0FFB  0008               	return
  5140  0FFC                     l1617:	
  5141                           
  5142                           ;OverTemperature_B1.c: 126: if (myMain.PowerON == 1) {
  5143  0FFC  1C20               	btfss	_myMain^(0+128),0
  5144  0FFD  0008               	return
  5145                           
  5146                           ;OverTemperature_B1.c: 127: Temp.Enable = 1;
  5147  0FFE  1457               	bsf	_Temp^(0+128),0
  5148  0FFF  0008               	return
  5149  1000                     __end_of_setTemp_Main:	
  5150                           
  5151                           	psect	text10
  5152  1B34                     __ptext10:	
  5153 ;; *************** function _Temp_Initialization *****************
  5154 ;; Defined at:
  5155 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5156 ;; Parameters:    Size  Location     Type
  5157 ;;		None
  5158 ;; Auto vars:     Size  Location     Type
  5159 ;;		None
  5160 ;; Return value:  Size  Location     Type
  5161 ;;		None               void
  5162 ;; Registers used:
  5163 ;;		status,2, status,0, pclath, cstack
  5164 ;; Tracked objects:
  5165 ;;		On entry : 0/0
  5166 ;;		On exit  : 0/0
  5167 ;;		Unchanged: 0/0
  5168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5173 ;;Total ram usage:        0 bytes
  5174 ;; Hardware stack levels used:    1
  5175 ;; Hardware stack levels required when called:    6
  5176 ;; This function calls:
  5177 ;;		_setTemp_Initialization
  5178 ;; This function is called by:
  5179 ;;		_main
  5180 ;; This function uses a non-reentrant model
  5181 ;;
  5182                           
  5183                           
  5184                           ;psect for function _Temp_Initialization
  5185  1B34                     _Temp_Initialization:	
  5186                           
  5187                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5188                           
  5189                           ;incstack = 0
  5190                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5191  1B34  3190  2066         	fcall	_setTemp_Initialization
  5192  1B36  0008               	return
  5193  1B37                     __end_of_Temp_Initialization:	
  5194                           
  5195                           	psect	text11
  5196  1066                     __ptext11:	
  5197 ;; *************** function _setTemp_Initialization *****************
  5198 ;; Defined at:
  5199 ;;		line 46 in file "../src/OverTemperature_B1.c"
  5200 ;; Parameters:    Size  Location     Type
  5201 ;;		None
  5202 ;; Auto vars:     Size  Location     Type
  5203 ;;		None
  5204 ;; Return value:  Size  Location     Type
  5205 ;;		None               void
  5206 ;; Registers used:
  5207 ;;		None
  5208 ;; Tracked objects:
  5209 ;;		On entry : 0/0
  5210 ;;		On exit  : 0/0
  5211 ;;		Unchanged: 0/0
  5212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5217 ;;Total ram usage:        0 bytes
  5218 ;; Hardware stack levels used:    1
  5219 ;; Hardware stack levels required when called:    5
  5220 ;; This function calls:
  5221 ;;		Nothing
  5222 ;; This function is called by:
  5223 ;;		_Temp_Initialization
  5224 ;; This function uses a non-reentrant model
  5225 ;;
  5226                           
  5227                           
  5228                           ;psect for function _setTemp_Initialization
  5229  1066                     _setTemp_Initialization:	
  5230                           
  5231                           ;incstack = 0
  5232                           ; Regs used in _setTemp_Initialization: []
  5233  1066  0008               	return
  5234  1067                     __end_of_setTemp_Initialization:	
  5235                           
  5236                           	psect	text12
  5237  1070                     __ptext12:	
  5238 ;; *************** function _Switch_Main *****************
  5239 ;; Defined at:
  5240 ;;		line 72 in file "../src/Switch_B1.c"
  5241 ;; Parameters:    Size  Location     Type
  5242 ;;		None
  5243 ;; Auto vars:     Size  Location     Type
  5244 ;;  error           1   30[BANK0 ] unsigned char 
  5245 ;; Return value:  Size  Location     Type
  5246 ;;		None               void
  5247 ;; Registers used:
  5248 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5249 ;; Tracked objects:
  5250 ;;		On entry : 0/0
  5251 ;;		On exit  : 0/0
  5252 ;;		Unchanged: 0/0
  5253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5255 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5256 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5257 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5258 ;;Total ram usage:        2 bytes
  5259 ;; Hardware stack levels used:    1
  5260 ;; Hardware stack levels required when called:   11
  5261 ;; This function calls:
  5262 ;;		_TouchPower
  5263 ;;		_getMain_All_Error_Status
  5264 ;;		_setMain_Exception
  5265 ;;		_setSw_Main
  5266 ;; This function is called by:
  5267 ;;		_main
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           
  5272                           ;psect for function _Switch_Main
  5273  1070                     _Switch_Main:	
  5274                           
  5275                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5276                           
  5277                           ;incstack = 0
  5278                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5279  1070  3000               	movlw	0
  5280  1071  3191  21EB  3190   	fcall	_getMain_All_Error_Status
  5281  1074  0020               	movlb	0	; select bank0
  5282  1075  00BD               	movwf	??_Switch_Main
  5283  1076  083D               	movf	??_Switch_Main,w
  5284  1077  00BE               	movwf	Switch_Main@error
  5285                           
  5286                           ;Switch_B1.c: 74: if (error != 0) {
  5287  1078  083E               	movf	Switch_Main@error,w
  5288  1079  1903               	btfsc	3,2
  5289  107A  2880               	goto	l2385
  5290                           
  5291                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5292  107B  0021               	movlb	1	; select bank1
  5293  107C  1852               	btfsc	_SwDetect^(0+128),0
  5294  107D  2889               	goto	l8116
  5295                           
  5296                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5297  107E  1452               	bsf	_SwDetect^(0+128),0
  5298  107F  2884               	goto	L2
  5299  1080                     l2385:	
  5300                           ;Switch_B1.c: 80: }
  5301                           ;Switch_B1.c: 81: } else {
  5302                           
  5303                           ;Switch_B1.c: 78: setMain_Exception(error);
  5304                           
  5305                           
  5306                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5307  1080  0021               	movlb	1	; select bank1
  5308  1081  1C52               	btfss	_SwDetect^(0+128),0
  5309  1082  2889               	goto	l8116
  5310                           
  5311                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5312  1083  1052               	bcf	_SwDetect^(0+128),0
  5313  1084                     L2:	
  5314                           
  5315                           ;Switch_B1.c: 85: setMain_Exception(error);
  5316  1084  0020               	movlb	0	; select bank0
  5317  1085  083E               	movf	Switch_Main@error,w
  5318  1086  3197  27A4  3190   	fcall	_setMain_Exception
  5319  1089                     l8116:	
  5320                           
  5321                           ;Switch_B1.c: 87: }
  5322                           ;Switch_B1.c: 88: }
  5323                           ;Switch_B1.c: 91: setSw_Main(1);
  5324  1089  3001               	movlw	1
  5325  108A  3180  204B  3190   	fcall	_setSw_Main
  5326                           
  5327                           ;Switch_B1.c: 95: setSw_Main(2);
  5328  108D  3002               	movlw	2
  5329  108E  3180  204B  3190   	fcall	_setSw_Main
  5330                           
  5331                           ;Switch_B1.c: 103: TouchPower();
  5332  1091  319D  25E0         	fcall	_TouchPower
  5333  1093  0008               	return
  5334  1094                     __end_of_Switch_Main:	
  5335                           
  5336                           	psect	text13
  5337  004B                     __ptext13:	
  5338 ;; *************** function _setSw_Main *****************
  5339 ;; Defined at:
  5340 ;;		line 137 in file "../src/Switch_B1.c"
  5341 ;; Parameters:    Size  Location     Type
  5342 ;;  sw              1    wreg     unsigned char 
  5343 ;; Auto vars:     Size  Location     Type
  5344 ;;  sw              1   19[BANK0 ] unsigned char 
  5345 ;; Return value:  Size  Location     Type
  5346 ;;		None               void
  5347 ;; Registers used:
  5348 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5349 ;; Tracked objects:
  5350 ;;		On entry : 0/0
  5351 ;;		On exit  : 0/0
  5352 ;;		Unchanged: 0/0
  5353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5355 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5356 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5357 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5358 ;;Total ram usage:        3 bytes
  5359 ;; Hardware stack levels used:    1
  5360 ;; Hardware stack levels required when called:    9
  5361 ;; This function calls:
  5362 ;;		_SwPointSelect
  5363 ;;		_getSw_KeyStatus
  5364 ;;		_setBuz
  5365 ;;		_setDimmerLights_AdjControl
  5366 ;;		_setDimmerLights_SwOff
  5367 ;;		_setDimmerLights_SwOn
  5368 ;;		_setRF_Learn
  5369 ;; This function is called by:
  5370 ;;		_Switch_Main
  5371 ;; This function uses a non-reentrant model
  5372 ;;
  5373                           
  5374                           
  5375                           ;psect for function _setSw_Main
  5376  004B                     _setSw_Main:	
  5377                           
  5378                           ;incstack = 0
  5379                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5380                           ;setSw_Main@sw stored from wreg
  5381  004B  0020               	movlb	0	; select bank0
  5382  004C  00B3               	movwf	setSw_Main@sw
  5383                           
  5384                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5385  004D  0833               	movf	setSw_Main@sw,w
  5386  004E  319D  2579  3180   	fcall	_SwPointSelect
  5387                           
  5388                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5389  0051  087C               	movf	_Sw,w
  5390  0052  0086               	movwf	6
  5391  0053  3001               	movlw	1	; select bank2/3
  5392  0054  0087               	movwf	7
  5393  0055  1C01               	btfss	1,0
  5394  0056  29B1               	goto	l2395
  5395                           
  5396                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5397  0057  0021               	movlb	1	; select bank1
  5398  0058  1852               	btfsc	_SwDetect^(0+128),0
  5399  0059  2875               	goto	l7618
  5400                           
  5401                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5402  005A  0A7C               	incf	_Sw,w
  5403  005B  0086               	movwf	6
  5404  005C  3001               	movlw	1	; select bank2/3
  5405  005D  0087               	movwf	7
  5406  005E  1081               	bcf	1,1
  5407                           
  5408                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5409  005F  0020               	movlb	0	; select bank0
  5410  0060  0833               	movf	setSw_Main@sw,w
  5411  0061  319E  26F9  3180   	fcall	_getSw_KeyStatus
  5412  0064  3A01               	xorlw	1
  5413  0065  3000               	movlw	0
  5414  0066  1903               	skipnz
  5415  0067  3001               	movlw	1
  5416  0068  0020               	movlb	0	; select bank0
  5417  0069  00B1               	movwf	??_setSw_Main
  5418  006A  087C               	movf	_Sw,w
  5419  006B  0086               	movwf	6
  5420  006C  3001               	movlw	1	; select bank2/3
  5421  006D  0087               	movwf	7
  5422  006E  0DB1               	rlf	??_setSw_Main,f
  5423  006F  0801               	movf	1,w
  5424  0070  0631               	xorwf	??_setSw_Main,w
  5425  0071  39FD               	andlw	-3
  5426  0072  0631               	xorwf	??_setSw_Main,w
  5427  0073  0081               	movwf	1
  5428                           
  5429                           ;Switch_B1.c: 143: } else {
  5430  0074  288A               	goto	l2397
  5431  0075                     l7618:	
  5432                           
  5433                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5434  0075  0A7C               	incf	_Sw,w
  5435  0076  0086               	movwf	6
  5436  0077  3001               	movlw	1	; select bank2/3
  5437  0078  0087               	movwf	7
  5438  0079  1881               	btfsc	1,1
  5439  007A  288A               	goto	l2397
  5440                           
  5441                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5442  007B  0A7C               	incf	_Sw,w
  5443  007C  0086               	movwf	6
  5444  007D  3001               	movlw	1	; select bank2/3
  5445  007E  0087               	movwf	7
  5446  007F  1481               	bsf	1,1
  5447                           
  5448                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5449  0080  087C               	movf	_Sw,w
  5450  0081  0086               	movwf	6
  5451  0082  3001               	movlw	1	; select bank2/3
  5452  0083  0087               	movwf	7
  5453  0084  1081               	bcf	1,1
  5454                           
  5455                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5456  0085  087C               	movf	_Sw,w
  5457  0086  0086               	movwf	6
  5458  0087  3001               	movlw	1	; select bank2/3
  5459  0088  0087               	movwf	7
  5460  0089  1501               	bsf	1,2
  5461  008A                     l2397:	
  5462                           
  5463                           ;Switch_B1.c: 148: }
  5464                           ;Switch_B1.c: 149: }
  5465                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5466  008A  087C               	movf	_Sw,w
  5467  008B  0086               	movwf	6
  5468  008C  3001               	movlw	1	; select bank2/3
  5469  008D  0087               	movwf	7
  5470  008E  1C81               	btfss	1,1
  5471  008F  295A               	goto	l7668
  5472                           
  5473                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5474  0090  087C               	movf	_Sw,w
  5475  0091  0086               	movwf	6
  5476  0092  3001               	movlw	1	; select bank2/3
  5477  0093  0087               	movwf	7
  5478  0094  1901               	btfsc	1,2
  5479  0095  28B8               	goto	l7634
  5480                           
  5481                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5482  0096  3001               	movlw	1
  5483  0097  0020               	movlb	0	; select bank0
  5484  0098  00B1               	movwf	??_setSw_Main
  5485  0099  087C               	movf	_Sw,w
  5486  009A  3E02               	addlw	2
  5487  009B  0086               	movwf	6
  5488  009C  3001               	movlw	1	; select bank2/3
  5489  009D  0087               	movwf	7
  5490  009E  0831               	movf	??_setSw_Main,w
  5491  009F  0781               	addwf	1,f
  5492                           
  5493                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5494  00A0  087C               	movf	_Sw,w
  5495  00A1  3E02               	addlw	2
  5496  00A2  0086               	movwf	6
  5497  00A3  3001               	movlw	1	; select bank2/3
  5498  00A4  0087               	movwf	7
  5499  00A5  3005               	movlw	5
  5500  00A6  0201               	subwf	1,w
  5501  00A7  1C03               	skipc
  5502  00A8  0008               	return
  5503                           
  5504                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5505  00A9  087C               	movf	_Sw,w
  5506  00AA  3E02               	addlw	2
  5507  00AB  0086               	movwf	6
  5508  00AC  3001               	movlw	1	; select bank2/3
  5509  00AD  0087               	movwf	7
  5510  00AE  0181               	clrf	1
  5511                           
  5512                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5513  00AF  087C               	movf	_Sw,w
  5514  00B0  0086               	movwf	6
  5515  00B1  3001               	movlw	1	; select bank2/3
  5516  00B2  0087               	movwf	7
  5517  00B3  1501               	bsf	1,2
  5518                           
  5519                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5520  00B4  0833               	movf	setSw_Main@sw,w
  5521  00B5  3193  2361         	fcall	_setDimmerLights_SwOn
  5522                           
  5523                           ;Switch_B1.c: 162: }
  5524                           ;Switch_B1.c: 163: } else {
  5525  00B7  0008               	return
  5526  00B8                     l7634:	
  5527                           
  5528                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5529  00B8  087C               	movf	_Sw,w
  5530  00B9  0086               	movwf	6
  5531  00BA  3001               	movlw	1	; select bank2/3
  5532  00BB  0087               	movwf	7
  5533  00BC  1981               	btfsc	1,3
  5534  00BD  28EA               	goto	l7644
  5535                           
  5536                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5537  00BE  087C               	movf	_Sw,w
  5538  00BF  3E03               	addlw	3
  5539  00C0  0086               	movwf	6
  5540  00C1  3001               	movlw	1	; select bank2/3
  5541  00C2  0087               	movwf	7
  5542  00C3  3001               	movlw	1
  5543  00C4  0781               	addwf	1,f
  5544  00C5  3141               	addfsr 1,1
  5545  00C6  1803               	skipnc
  5546  00C7  0A81               	incf	1,f
  5547                           
  5548                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5549  00C8  087C               	movf	_Sw,w
  5550  00C9  3E03               	addlw	3
  5551  00CA  0086               	movwf	6
  5552  00CB  3001               	movlw	1	; select bank2/3
  5553  00CC  0087               	movwf	7
  5554  00CD  3F40               	moviw [0]fsr1
  5555  00CE  0020               	movlb	0	; select bank0
  5556  00CF  00B1               	movwf	??_setSw_Main
  5557  00D0  3F41               	moviw [1]fsr1
  5558  00D1  00B2               	movwf	??_setSw_Main+1
  5559  00D2  3000               	movlw	0
  5560  00D3  0232               	subwf	??_setSw_Main+1,w
  5561  00D4  3096               	movlw	150
  5562  00D5  1903               	skipnz
  5563  00D6  0231               	subwf	??_setSw_Main,w
  5564  00D7  1C03               	skipc
  5565  00D8  0008               	return
  5566                           
  5567                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5568  00D9  087C               	movf	_Sw,w
  5569  00DA  3E03               	addlw	3
  5570  00DB  0086               	movwf	6
  5571  00DC  3001               	movlw	1	; select bank2/3
  5572  00DD  0087               	movwf	7
  5573  00DE  3000               	movlw	0
  5574  00DF  3FC0               	movwi [0]fsr1
  5575  00E0  3FC1               	movwi [1]fsr1
  5576                           
  5577                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5578  00E1  087C               	movf	_Sw,w
  5579  00E2  0086               	movwf	6
  5580  00E3  3001               	movlw	1	; select bank2/3
  5581  00E4  0087               	movwf	7
  5582  00E5  1581               	bsf	1,3
  5583                           
  5584                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5585  00E6  0833               	movf	setSw_Main@sw,w
  5586  00E7  3192  2252         	fcall	_setDimmerLights_AdjControl
  5587                           
  5588                           ;Switch_B1.c: 174: }
  5589                           ;Switch_B1.c: 175: } else {
  5590  00E9  0008               	return
  5591  00EA                     l7644:	
  5592                           
  5593                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5594  00EA  087C               	movf	_Sw,w
  5595  00EB  0086               	movwf	6
  5596  00EC  3001               	movlw	1	; select bank2/3
  5597  00ED  0087               	movwf	7
  5598  00EE  1A01               	btfsc	1,4
  5599  00EF  2928               	goto	l7658
  5600                           
  5601                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5602  00F0  087C               	movf	_Sw,w
  5603  00F1  3E05               	addlw	5
  5604  00F2  0086               	movwf	6
  5605  00F3  3001               	movlw	1	; select bank2/3
  5606  00F4  0087               	movwf	7
  5607  00F5  3001               	movlw	1
  5608  00F6  0781               	addwf	1,f
  5609  00F7  3141               	addfsr 1,1
  5610  00F8  1803               	skipnc
  5611  00F9  0A81               	incf	1,f
  5612                           
  5613                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5614  00FA  087C               	movf	_Sw,w
  5615  00FB  3E05               	addlw	5
  5616  00FC  0086               	movwf	6
  5617  00FD  3001               	movlw	1	; select bank2/3
  5618  00FE  0087               	movwf	7
  5619  00FF  3F40               	moviw [0]fsr1
  5620  0100  0020               	movlb	0	; select bank0
  5621  0101  00B1               	movwf	??_setSw_Main
  5622  0102  3F41               	moviw [1]fsr1
  5623  0103  00B2               	movwf	??_setSw_Main+1
  5624  0104  3000               	movlw	0
  5625  0105  0232               	subwf	??_setSw_Main+1,w
  5626  0106  3096               	movlw	150
  5627  0107  1903               	skipnz
  5628  0108  0231               	subwf	??_setSw_Main,w
  5629  0109  1C03               	skipc
  5630  010A  0008               	return
  5631                           
  5632                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5633  010B  087C               	movf	_Sw,w
  5634  010C  3E05               	addlw	5
  5635  010D  0086               	movwf	6
  5636  010E  3001               	movlw	1	; select bank2/3
  5637  010F  0087               	movwf	7
  5638  0110  3000               	movlw	0
  5639  0111  3FC0               	movwi [0]fsr1
  5640  0112  3FC1               	movwi [1]fsr1
  5641                           
  5642                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5643  0113  087C               	movf	_Sw,w
  5644  0114  0086               	movwf	6
  5645  0115  3001               	movlw	1	; select bank2/3
  5646  0116  0087               	movwf	7
  5647  0117  1601               	bsf	1,4
  5648                           
  5649                           ;Switch_B1.c: 183: setRF_Learn(1);
  5650  0118  3001               	movlw	1
  5651  0119  319D  258D  3180   	fcall	_setRF_Learn
  5652                           
  5653                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5654  011C  0021               	movlb	1	; select bank1
  5655  011D  1EA0               	btfss	_myMain^(0+128),5
  5656  011E  0008               	return
  5657                           
  5658                           ;Switch_B1.c: 186: setBuz(2, 100);
  5659  011F  3064               	movlw	100
  5660  0120  0020               	movlb	0	; select bank0
  5661  0121  00A9               	movwf	setBuz@time
  5662  0122  3000               	movlw	0
  5663  0123  00AA               	movwf	setBuz@time+1
  5664  0124  3002               	movlw	2
  5665  0125  3196  2696         	fcall	_setBuz
  5666                           
  5667                           ;Switch_B1.c: 187: }
  5668                           ;Switch_B1.c: 189: }
  5669                           ;Switch_B1.c: 190: } else {
  5670  0127  0008               	return
  5671  0128                     l7658:	
  5672                           
  5673                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5674  0128  087C               	movf	_Sw,w
  5675  0129  0086               	movwf	6
  5676  012A  3001               	movlw	1	; select bank2/3
  5677  012B  0087               	movwf	7
  5678  012C  1A81               	btfsc	1,5
  5679  012D  0008               	return
  5680                           
  5681                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5682  012E  087C               	movf	_Sw,w
  5683  012F  3E07               	addlw	7
  5684  0130  0086               	movwf	6
  5685  0131  3001               	movlw	1	; select bank2/3
  5686  0132  0087               	movwf	7
  5687  0133  3001               	movlw	1
  5688  0134  0781               	addwf	1,f
  5689  0135  3141               	addfsr 1,1
  5690  0136  1803               	skipnc
  5691  0137  0A81               	incf	1,f
  5692                           
  5693                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5694  0138  087C               	movf	_Sw,w
  5695  0139  3E07               	addlw	7
  5696  013A  0086               	movwf	6
  5697  013B  3001               	movlw	1	; select bank2/3
  5698  013C  0087               	movwf	7
  5699  013D  3F40               	moviw [0]fsr1
  5700  013E  0020               	movlb	0	; select bank0
  5701  013F  00B1               	movwf	??_setSw_Main
  5702  0140  3F41               	moviw [1]fsr1
  5703  0141  00B2               	movwf	??_setSw_Main+1
  5704  0142  3001               	movlw	1
  5705  0143  0232               	subwf	??_setSw_Main+1,w
  5706  0144  302C               	movlw	44
  5707  0145  1903               	skipnz
  5708  0146  0231               	subwf	??_setSw_Main,w
  5709  0147  1C03               	skipc
  5710  0148  0008               	return
  5711                           
  5712                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5713  0149  087C               	movf	_Sw,w
  5714  014A  3E07               	addlw	7
  5715  014B  0086               	movwf	6
  5716  014C  3001               	movlw	1	; select bank2/3
  5717  014D  0087               	movwf	7
  5718  014E  3000               	movlw	0
  5719  014F  3FC0               	movwi [0]fsr1
  5720  0150  3FC1               	movwi [1]fsr1
  5721                           
  5722                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5723  0151  087C               	movf	_Sw,w
  5724  0152  0086               	movwf	6
  5725  0153  3001               	movlw	1	; select bank2/3
  5726  0154  0087               	movwf	7
  5727  0155  1681               	bsf	1,5
  5728                           
  5729                           ;Switch_B1.c: 198: setRF_Learn(0);
  5730  0156  3000               	movlw	0
  5731  0157  319D  258D         	fcall	_setRF_Learn
  5732                           
  5733                           ;Switch_B1.c: 201: }
  5734                           ;Switch_B1.c: 202: }
  5735                           ;Switch_B1.c: 203: }
  5736                           ;Switch_B1.c: 204: }
  5737                           ;Switch_B1.c: 205: }
  5738                           ;Switch_B1.c: 206: } else {
  5739  0159  0008               	return
  5740  015A                     l7668:	
  5741                           
  5742                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5743  015A  087C               	movf	_Sw,w
  5744  015B  0086               	movwf	6
  5745  015C  3001               	movlw	1	; select bank2/3
  5746  015D  0087               	movwf	7
  5747  015E  1D01               	btfss	1,2
  5748  015F  0008               	return
  5749                           
  5750                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5751  0160  3001               	movlw	1
  5752  0161  0020               	movlb	0	; select bank0
  5753  0162  00B1               	movwf	??_setSw_Main
  5754  0163  087C               	movf	_Sw,w
  5755  0164  3E02               	addlw	2
  5756  0165  0086               	movwf	6
  5757  0166  3001               	movlw	1	; select bank2/3
  5758  0167  0087               	movwf	7
  5759  0168  0831               	movf	??_setSw_Main,w
  5760  0169  0781               	addwf	1,f
  5761                           
  5762                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5763  016A  087C               	movf	_Sw,w
  5764  016B  3E02               	addlw	2
  5765  016C  0086               	movwf	6
  5766  016D  3001               	movlw	1	; select bank2/3
  5767  016E  0087               	movwf	7
  5768  016F  3005               	movlw	5
  5769  0170  0201               	subwf	1,w
  5770  0171  1C03               	skipc
  5771  0172  0008               	return
  5772                           
  5773                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5774  0173  087C               	movf	_Sw,w
  5775  0174  3E02               	addlw	2
  5776  0175  0086               	movwf	6
  5777  0176  3001               	movlw	1	; select bank2/3
  5778  0177  0087               	movwf	7
  5779  0178  0181               	clrf	1
  5780                           
  5781                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5782  0179  087C               	movf	_Sw,w
  5783  017A  0086               	movwf	6
  5784  017B  3001               	movlw	1	; select bank2/3
  5785  017C  0087               	movwf	7
  5786  017D  1101               	bcf	1,2
  5787                           
  5788                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5789  017E  087C               	movf	_Sw,w
  5790  017F  3E03               	addlw	3
  5791  0180  0086               	movwf	6
  5792  0181  3001               	movlw	1	; select bank2/3
  5793  0182  0087               	movwf	7
  5794  0183  3000               	movlw	0
  5795  0184  3FC0               	movwi [0]fsr1
  5796  0185  3FC1               	movwi [1]fsr1
  5797                           
  5798                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5799  0186  087C               	movf	_Sw,w
  5800  0187  0086               	movwf	6
  5801  0188  3001               	movlw	1	; select bank2/3
  5802  0189  0087               	movwf	7
  5803  018A  1181               	bcf	1,3
  5804                           
  5805                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5806  018B  087C               	movf	_Sw,w
  5807  018C  3E05               	addlw	5
  5808  018D  0086               	movwf	6
  5809  018E  3001               	movlw	1	; select bank2/3
  5810  018F  0087               	movwf	7
  5811  0190  3000               	movlw	0
  5812  0191  3FC0               	movwi [0]fsr1
  5813  0192  3FC1               	movwi [1]fsr1
  5814                           
  5815                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5816  0193  087C               	movf	_Sw,w
  5817  0194  0086               	movwf	6
  5818  0195  3001               	movlw	1	; select bank2/3
  5819  0196  0087               	movwf	7
  5820  0197  1201               	bcf	1,4
  5821                           
  5822                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5823  0198  087C               	movf	_Sw,w
  5824  0199  3E07               	addlw	7
  5825  019A  0086               	movwf	6
  5826  019B  3001               	movlw	1	; select bank2/3
  5827  019C  0087               	movwf	7
  5828  019D  3000               	movlw	0
  5829  019E  3FC0               	movwi [0]fsr1
  5830  019F  3FC1               	movwi [1]fsr1
  5831                           
  5832                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5833  01A0  087C               	movf	_Sw,w
  5834  01A1  0086               	movwf	6
  5835  01A2  3001               	movlw	1	; select bank2/3
  5836  01A3  0087               	movwf	7
  5837  01A4  1281               	bcf	1,5
  5838                           
  5839                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5840  01A5  0021               	movlb	1	; select bank1
  5841  01A6  1852               	btfsc	_SwDetect^(0+128),0
  5842  01A7  29AD               	goto	l7694
  5843                           
  5844                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5845  01A8  0020               	movlb	0	; select bank0
  5846  01A9  0833               	movf	setSw_Main@sw,w
  5847  01AA  3194  241C  3180   	fcall	_setDimmerLights_SwOff
  5848  01AD                     l7694:	
  5849                           
  5850                           ;Switch_B1.c: 221: }
  5851                           ;Switch_B1.c: 224: setRF_Learn(0);
  5852  01AD  3000               	movlw	0
  5853  01AE  319D  258D         	fcall	_setRF_Learn
  5854                           
  5855                           ;Switch_B1.c: 226: }
  5856                           ;Switch_B1.c: 227: }
  5857                           ;Switch_B1.c: 228: }
  5858                           ;Switch_B1.c: 229: } else {
  5859  01B0  0008               	return
  5860  01B1                     l2395:	
  5861                           
  5862                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5863  01B1  0021               	movlb	1	; select bank1
  5864  01B2  1C20               	btfss	_myMain^(0+128),0
  5865  01B3  0008               	return
  5866                           
  5867                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5868  01B4  087C               	movf	_Sw,w
  5869  01B5  0086               	movwf	6
  5870  01B6  3001               	movlw	1	; select bank2/3
  5871  01B7  0087               	movwf	7
  5872  01B8  1401               	bsf	1,0
  5873  01B9  0008               	return
  5874  01BA                     __end_of_setSw_Main:	
  5875                           
  5876                           	psect	text14
  5877  1D8D                     __ptext14:	
  5878 ;; *************** function _setRF_Learn *****************
  5879 ;; Defined at:
  5880 ;;		line 23 in file "../src/RF_Control_B1.c"
  5881 ;; Parameters:    Size  Location     Type
  5882 ;;  command         1    wreg     unsigned char 
  5883 ;; Auto vars:     Size  Location     Type
  5884 ;;  command         1    1[BANK0 ] unsigned char 
  5885 ;; Return value:  Size  Location     Type
  5886 ;;		None               void
  5887 ;; Registers used:
  5888 ;;		wreg, status,2, status,0
  5889 ;; Tracked objects:
  5890 ;;		On entry : 0/0
  5891 ;;		On exit  : 0/0
  5892 ;;		Unchanged: 0/0
  5893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5895 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5896 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5897 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5898 ;;Total ram usage:        2 bytes
  5899 ;; Hardware stack levels used:    1
  5900 ;; Hardware stack levels required when called:    5
  5901 ;; This function calls:
  5902 ;;		Nothing
  5903 ;; This function is called by:
  5904 ;;		_setSw_Main
  5905 ;; This function uses a non-reentrant model
  5906 ;;
  5907                           
  5908                           
  5909                           ;psect for function _setRF_Learn
  5910  1D8D                     _setRF_Learn:	
  5911                           
  5912                           ;incstack = 0
  5913                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5914                           ;setRF_Learn@command stored from wreg
  5915  1D8D  0020               	movlb	0	; select bank0
  5916  1D8E  00A1               	movwf	setRF_Learn@command
  5917                           
  5918                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5919  1D8F  0821               	movf	setRF_Learn@command,w
  5920  1D90  3A01               	xorlw	1
  5921  1D91  3000               	movlw	0
  5922  1D92  1903               	skipnz
  5923  1D93  3001               	movlw	1
  5924  1D94  00A0               	movwf	??_setRF_Learn
  5925  1D95  0EA0               	swapf	??_setRF_Learn,f
  5926  1D96  0DA0               	rlf	??_setRF_Learn,f
  5927  1D97  0DA0               	rlf	??_setRF_Learn,f
  5928  1D98  0021               	movlb	1	; select bank1
  5929  1D99  083C               	movf	_RF1^(0+128),w
  5930  1D9A  0020               	movlb	0	; select bank0
  5931  1D9B  0620               	xorwf	??_setRF_Learn,w
  5932  1D9C  39BF               	andlw	-65
  5933  1D9D  0620               	xorwf	??_setRF_Learn,w
  5934  1D9E  0021               	movlb	1	; select bank1
  5935  1D9F  00BC               	movwf	_RF1^(0+128)
  5936  1DA0  0008               	return
  5937  1DA1                     __end_of_setRF_Learn:	
  5938                           
  5939                           	psect	text15
  5940  1252                     __ptext15:	
  5941 ;; *************** function _setDimmerLights_AdjControl *****************
  5942 ;; Defined at:
  5943 ;;		line 558 in file "../src/Dimmer_B1.c"
  5944 ;; Parameters:    Size  Location     Type
  5945 ;;  sw              1    wreg     unsigned char 
  5946 ;; Auto vars:     Size  Location     Type
  5947 ;;  sw              1    8[BANK0 ] unsigned char 
  5948 ;;  idle            1    6[BANK0 ] unsigned char 
  5949 ;; Return value:  Size  Location     Type
  5950 ;;		None               void
  5951 ;; Registers used:
  5952 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5953 ;; Tracked objects:
  5954 ;;		On entry : 0/0
  5955 ;;		On exit  : 0/0
  5956 ;;		Unchanged: 0/0
  5957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5959 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5960 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5961 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5962 ;;Total ram usage:        4 bytes
  5963 ;; Hardware stack levels used:    1
  5964 ;; Hardware stack levels required when called:    7
  5965 ;; This function calls:
  5966 ;;		_DimmerLightsPointSelect
  5967 ;;		_getAll_DimmerLights_AdjGO
  5968 ;;		_setDimmerLights_TriggerAdj
  5969 ;; This function is called by:
  5970 ;;		_setSw_Main
  5971 ;; This function uses a non-reentrant model
  5972 ;;
  5973                           
  5974                           
  5975                           ;psect for function _setDimmerLights_AdjControl
  5976  1252                     _setDimmerLights_AdjControl:	
  5977                           
  5978                           ;incstack = 0
  5979                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5980                           ;setDimmerLights_AdjControl@sw stored from wreg
  5981  1252  0020               	movlb	0	; select bank0
  5982  1253  00A8               	movwf	setDimmerLights_AdjControl@sw
  5983                           
  5984                           ;Dimmer_B1.c: 559: DimmerLightsPointSelect(sw);
  5985  1254  0828               	movf	setDimmerLights_AdjControl@sw,w
  5986  1255  319C  24F1  3192   	fcall	_DimmerLightsPointSelect
  5987                           
  5988                           ;Dimmer_B1.c: 560: char idle = 0;
  5989  1258  0020               	movlb	0	; select bank0
  5990  1259  01A6               	clrf	setDimmerLights_AdjControl@idle
  5991                           
  5992                           ;Dimmer_B1.c: 562: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  5993  125A  01A7               	clrf	_setDimmerLights_AdjControl$2577
  5994  125B  319C  2476  3192   	fcall	_getAll_DimmerLights_AdjGO
  5995  125E  3A01               	xorlw	1
  5996  125F  1D03               	skipz
  5997  1260  2A67               	goto	l6834
  5998  1261  0022               	movlb	2	; select bank2
  5999  1262  1CA0               	btfss	_Dimmer^(0+256),1
  6000  1263  2A67               	goto	l6834
  6001  1264  0020               	movlb	0	; select bank0
  6002  1265  01A7               	clrf	_setDimmerLights_AdjControl$2577
  6003  1266  0AA7               	incf	_setDimmerLights_AdjControl$2577,f
  6004  1267                     l6834:	
  6005  1267  0020               	movlb	0	; select bank0
  6006  1268  0827               	movf	_setDimmerLights_AdjControl$2577,w
  6007  1269  00A5               	movwf	??_setDimmerLights_AdjControl
  6008  126A  0825               	movf	??_setDimmerLights_AdjControl,w
  6009  126B  00A6               	movwf	setDimmerLights_AdjControl@idle
  6010                           
  6011                           ;Dimmer_B1.c: 564: if (idle == 0) {
  6012  126C  08A6               	movf	setDimmerLights_AdjControl@idle,f
  6013  126D  1D03               	skipz
  6014  126E  0008               	return
  6015                           
  6016                           ;Dimmer_B1.c: 565: if (DimmerLights->SwFlag == 1) {
  6017  126F  086F               	movf	_DimmerLights,w
  6018  1270  3E09               	addlw	9
  6019  1271  0086               	movwf	6
  6020  1272  3001               	movlw	1	; select bank2/3
  6021  1273  0087               	movwf	7
  6022  1274  1F01               	btfss	1,6
  6023  1275  0008               	return
  6024                           
  6025                           ;Dimmer_B1.c: 566: DimmerLights->SwAdj = 1;
  6026  1276  086F               	movf	_DimmerLights,w
  6027  1277  3E09               	addlw	9
  6028  1278  0086               	movwf	6
  6029  1279  3001               	movlw	1	; select bank2/3
  6030  127A  0087               	movwf	7
  6031  127B  1781               	bsf	1,7
  6032                           
  6033                           ;Dimmer_B1.c: 567: DimmerLights->Status = 1;
  6034  127C  086F               	movf	_DimmerLights,w
  6035  127D  0086               	movwf	6
  6036  127E  3001               	movlw	1	; select bank2/3
  6037  127F  0087               	movwf	7
  6038  1280  1681               	bsf	1,5
  6039                           
  6040                           ;Dimmer_B1.c: 568: setDimmerLights_TriggerAdj(sw, 1);
  6041  1281  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6042  1282  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6043  1283  0828               	movf	setDimmerLights_AdjControl@sw,w
  6044  1284  319F  2718         	fcall	_setDimmerLights_TriggerAdj
  6045  1286  0008               	return
  6046  1287                     __end_of_setDimmerLights_AdjControl:	
  6047                           
  6048                           	psect	text16
  6049  1EF9                     __ptext16:	
  6050 ;; *************** function _getSw_KeyStatus *****************
  6051 ;; Defined at:
  6052 ;;		line 237 in file "../src/Switch_B1.c"
  6053 ;; Parameters:    Size  Location     Type
  6054 ;;  sw              1    wreg     unsigned char 
  6055 ;; Auto vars:     Size  Location     Type
  6056 ;;  sw              1    4[BANK0 ] unsigned char 
  6057 ;;  status          1    3[BANK0 ] unsigned char 
  6058 ;; Return value:  Size  Location     Type
  6059 ;;                  1    wreg      unsigned char 
  6060 ;; Registers used:
  6061 ;;		wreg, status,2
  6062 ;; Tracked objects:
  6063 ;;		On entry : 0/0
  6064 ;;		On exit  : 0/0
  6065 ;;		Unchanged: 0/0
  6066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6068 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6069 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6070 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6071 ;;Total ram usage:        5 bytes
  6072 ;; Hardware stack levels used:    1
  6073 ;; Hardware stack levels required when called:    5
  6074 ;; This function calls:
  6075 ;;		Nothing
  6076 ;; This function is called by:
  6077 ;;		_setSw_Main
  6078 ;; This function uses a non-reentrant model
  6079 ;;
  6080                           
  6081                           
  6082                           ;psect for function _getSw_KeyStatus
  6083  1EF9                     _getSw_KeyStatus:	
  6084                           
  6085                           ;incstack = 0
  6086                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6087                           ;getSw_KeyStatus@sw stored from wreg
  6088  1EF9  0020               	movlb	0	; select bank0
  6089  1EFA  00A4               	movwf	getSw_KeyStatus@sw
  6090                           
  6091                           ;Switch_B1.c: 238: char status = 0;
  6092  1EFB  01A3               	clrf	getSw_KeyStatus@status
  6093                           
  6094                           ;Switch_B1.c: 250: if (sw == 1) {
  6095  1EFC  0824               	movf	getSw_KeyStatus@sw,w
  6096  1EFD  3A01               	xorlw	1
  6097  1EFE  1D03               	skipz
  6098  1EFF  2F08               	goto	l7018
  6099                           
  6100                           ;Switch_B1.c: 251: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6101  1F00  01A1               	clrf	_getSw_KeyStatus$6330
  6102  1F01  0AA1               	incf	_getSw_KeyStatus$6330,f
  6103  1F02  1F0C               	btfss	12,6	;volatile
  6104  1F03  1A0C               	btfsc	12,4	;volatile
  6105  1F04  2F06               	goto	l7016
  6106  1F05  01A1               	clrf	_getSw_KeyStatus$6330
  6107  1F06                     l7016:	
  6108  1F06  0821               	movf	_getSw_KeyStatus$6330,w
  6109  1F07  2F13               	goto	L3
  6110  1F08                     l7018:	
  6111                           ;Switch_B1.c: 252: } else if (sw == 2) {
  6112                           
  6113  1F08  0824               	movf	getSw_KeyStatus@sw,w
  6114  1F09  3A02               	xorlw	2
  6115  1F0A  1D03               	skipz
  6116  1F0B  2F16               	goto	l7028
  6117                           
  6118                           ;Switch_B1.c: 253: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6119  1F0C  01A2               	clrf	_getSw_KeyStatus$6331
  6120  1F0D  0AA2               	incf	_getSw_KeyStatus$6331,f
  6121  1F0E  1C0C               	btfss	12,0	;volatile
  6122  1F0F  188D               	btfsc	13,1	;volatile
  6123  1F10  2F12               	goto	l7026
  6124  1F11  01A2               	clrf	_getSw_KeyStatus$6331
  6125  1F12                     l7026:	
  6126  1F12  0822               	movf	_getSw_KeyStatus$6331,w
  6127  1F13                     L3:	
  6128  1F13  00A0               	movwf	??_getSw_KeyStatus
  6129  1F14  0820               	movf	??_getSw_KeyStatus,w
  6130  1F15  00A3               	movwf	getSw_KeyStatus@status
  6131  1F16                     l7028:	
  6132                           
  6133                           ;Switch_B1.c: 254: }
  6134                           ;Switch_B1.c: 261: return status;
  6135  1F16  0823               	movf	getSw_KeyStatus@status,w
  6136  1F17  0008               	return
  6137  1F18                     __end_of_getSw_KeyStatus:	
  6138                           
  6139                           	psect	text17
  6140  1D79                     __ptext17:	
  6141 ;; *************** function _SwPointSelect *****************
  6142 ;; Defined at:
  6143 ;;		line 25 in file "../src/Switch_B1.c"
  6144 ;; Parameters:    Size  Location     Type
  6145 ;;  sw              1    wreg     unsigned char 
  6146 ;; Auto vars:     Size  Location     Type
  6147 ;;  sw              1    1[BANK0 ] unsigned char 
  6148 ;; Return value:  Size  Location     Type
  6149 ;;		None               void
  6150 ;; Registers used:
  6151 ;;		wreg
  6152 ;; Tracked objects:
  6153 ;;		On entry : 0/0
  6154 ;;		On exit  : 0/0
  6155 ;;		Unchanged: 0/0
  6156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6158 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6159 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6160 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6161 ;;Total ram usage:        2 bytes
  6162 ;; Hardware stack levels used:    1
  6163 ;; Hardware stack levels required when called:    5
  6164 ;; This function calls:
  6165 ;;		Nothing
  6166 ;; This function is called by:
  6167 ;;		_setSw_Main
  6168 ;; This function uses a non-reentrant model
  6169 ;;
  6170                           
  6171                           
  6172                           ;psect for function _SwPointSelect
  6173  1D79                     _SwPointSelect:	
  6174                           
  6175                           ;incstack = 0
  6176                           ; Regs used in _SwPointSelect: [wreg]
  6177                           ;SwPointSelect@sw stored from wreg
  6178  1D79  0020               	movlb	0	; select bank0
  6179  1D7A  00A1               	movwf	SwPointSelect@sw
  6180                           
  6181                           ;Switch_B1.c: 28: if (sw == 1) {
  6182  1D7B  0821               	movf	SwPointSelect@sw,w
  6183  1D7C  3A01               	xorlw	1
  6184  1D7D  1D03               	skipz
  6185  1D7E  2D84               	goto	l7002
  6186                           
  6187                           ;Switch_B1.c: 29: Sw = &Sw1;
  6188  1D7F  30DC               	movlw	_Sw1& (0+255)
  6189  1D80  00A0               	movwf	??_SwPointSelect
  6190  1D81  0820               	movf	??_SwPointSelect,w
  6191  1D82  00FC               	movwf	_Sw
  6192                           
  6193                           ;Switch_B1.c: 30: }
  6194  1D83  0008               	return
  6195  1D84                     l7002:	
  6196                           
  6197                           ;Switch_B1.c: 33: else if (sw == 2) {
  6198  1D84  0821               	movf	SwPointSelect@sw,w
  6199  1D85  3A02               	xorlw	2
  6200  1D86  1D03               	skipz
  6201  1D87  0008               	return
  6202                           
  6203                           ;Switch_B1.c: 34: Sw = &Sw2;
  6204  1D88  30E5               	movlw	_Sw2& (0+255)
  6205  1D89  00A0               	movwf	??_SwPointSelect
  6206  1D8A  0820               	movf	??_SwPointSelect,w
  6207  1D8B  00FC               	movwf	_Sw
  6208  1D8C  0008               	return
  6209  1D8D                     __end_of_SwPointSelect:	
  6210                           
  6211                           	psect	text18
  6212  17A4                     __ptext18:	
  6213 ;; *************** function _setMain_Exception *****************
  6214 ;; Defined at:
  6215 ;;		line 278 in file "../src/main_B1.c"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;  command         1    wreg     unsigned char 
  6218 ;; Auto vars:     Size  Location     Type
  6219 ;;  command         1   28[BANK0 ] unsigned char 
  6220 ;;  status          1   27[BANK0 ] unsigned char 
  6221 ;;  buz             1   24[BANK0 ] unsigned char 
  6222 ;; Return value:  Size  Location     Type
  6223 ;;		None               void
  6224 ;; Registers used:
  6225 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6226 ;; Tracked objects:
  6227 ;;		On entry : 0/0
  6228 ;;		On exit  : 0/0
  6229 ;;		Unchanged: 0/0
  6230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6232 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6233 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6234 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6235 ;;Total ram usage:        7 bytes
  6236 ;; Hardware stack levels used:    1
  6237 ;; Hardware stack levels required when called:   10
  6238 ;; This function calls:
  6239 ;;		_getDimmerLights_Line
  6240 ;;		_getMain_LightsStatus
  6241 ;;		_setBuz
  6242 ;;		_setDimmerLights_ErrorClose
  6243 ;;		_setLED
  6244 ;; This function is called by:
  6245 ;;		_Switch_Main
  6246 ;; This function uses a non-reentrant model
  6247 ;;
  6248                           
  6249                           
  6250                           ;psect for function _setMain_Exception
  6251  17A4                     _setMain_Exception:	
  6252                           
  6253                           ;incstack = 0
  6254                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6255                           ;setMain_Exception@command stored from wreg
  6256  17A4  0020               	movlb	0	; select bank0
  6257  17A5  00BC               	movwf	setMain_Exception@command
  6258                           
  6259                           ;main_B1.c: 279: char status = 0, buz = 0;
  6260  17A6  01BB               	clrf	setMain_Exception@status
  6261  17A7  01B8               	clrf	setMain_Exception@buz
  6262                           
  6263                           ;main_B1.c: 296: status = command == 3 ? getDimmerLights_Line() : 255;
  6264  17A8  083C               	movf	setMain_Exception@command,w
  6265  17A9  3A03               	xorlw	3
  6266  17AA  1903               	skipnz
  6267  17AB  2FB0               	goto	l7580
  6268  17AC  30FF               	movlw	255
  6269  17AD  00B9               	movwf	_setMain_Exception$7066
  6270  17AE  3000               	movlw	0
  6271  17AF  2FB9               	goto	L4
  6272  17B0                     l7580:	
  6273  17B0  319D  252A  3197   	fcall	_getDimmerLights_Line
  6274  17B3  0020               	movlb	0	; select bank0
  6275  17B4  00B6               	movwf	??_setMain_Exception
  6276  17B5  01B7               	clrf	??_setMain_Exception+1
  6277  17B6  0836               	movf	??_setMain_Exception,w
  6278  17B7  00B9               	movwf	_setMain_Exception$7066
  6279  17B8  0837               	movf	??_setMain_Exception+1,w
  6280  17B9                     L4:	
  6281  17B9  00BA               	movwf	_setMain_Exception$7066+1
  6282  17BA  0839               	movf	_setMain_Exception$7066,w
  6283  17BB  00B6               	movwf	??_setMain_Exception
  6284  17BC  0836               	movf	??_setMain_Exception,w
  6285  17BD  00BB               	movwf	setMain_Exception@status
  6286                           
  6287                           ;main_B1.c: 298: if (command == 0) {
  6288  17BE  08BC               	movf	setMain_Exception@command,f
  6289  17BF  1D03               	skipz
  6290  17C0  2FC3               	goto	l7588
  6291                           
  6292                           ;main_B1.c: 299: setLED(99, 10);
  6293  17C1  300A               	movlw	10
  6294  17C2  2FC5               	goto	L5
  6295  17C3                     l7588:	
  6296                           ;main_B1.c: 300: } else {
  6297                           
  6298                           
  6299                           ;main_B1.c: 301: setLED(99, 11);
  6300  17C3  300B               	movlw	11
  6301  17C4  0020               	movlb	0	; select bank0
  6302  17C5                     L5:	
  6303  17C5  00B6               	movwf	??_setMain_Exception
  6304  17C6  0836               	movf	??_setMain_Exception,w
  6305  17C7  00A2               	movwf	setLED@command
  6306  17C8  3063               	movlw	99
  6307  17C9  3195  259A  3197   	fcall	_setLED
  6308                           
  6309                           ;main_B1.c: 302: }
  6310                           ;main_B1.c: 304: if (command != 0) {
  6311  17CC  0020               	movlb	0	; select bank0
  6312  17CD  083C               	movf	setMain_Exception@command,w
  6313  17CE  1903               	btfsc	3,2
  6314  17CF  0008               	return
  6315                           
  6316                           ;main_B1.c: 305: switch (command) {
  6317  17D0  2FF1               	goto	l7604
  6318  17D1                     l7594:	
  6319                           ;main_B1.c: 306: case 2:
  6320                           
  6321                           
  6322                           ;main_B1.c: 307: if (getMain_LightsStatus() == 1) {
  6323  17D1  3191  215E  3197   	fcall	_getMain_LightsStatus
  6324  17D4  3A01               	xorlw	1
  6325  17D5  1D03               	skipz
  6326  17D6  2FFA               	goto	l7606
  6327                           
  6328                           ;main_B1.c: 308: setBuz(10, 300);
  6329  17D7  302C               	movlw	44
  6330  17D8  0020               	movlb	0	; select bank0
  6331  17D9  00A9               	movwf	setBuz@time
  6332  17DA  3001               	movlw	1
  6333  17DB  00AA               	movwf	setBuz@time+1
  6334  17DC  300A               	movlw	10
  6335  17DD  3196  2696  3197   	fcall	_setBuz
  6336                           
  6337                           ;main_B1.c: 309: }
  6338                           ;main_B1.c: 310: break;
  6339  17E0  2FFA               	goto	l7606
  6340  17E1                     l7598:	
  6341                           ;main_B1.c: 311: case 3:
  6342                           
  6343                           
  6344                           ;main_B1.c: 312: if (getMain_LightsStatus() == 1) {
  6345  17E1  3191  215E  3197   	fcall	_getMain_LightsStatus
  6346  17E4  3A01               	xorlw	1
  6347  17E5  1D03               	skipz
  6348  17E6  2FFA               	goto	l7606
  6349                           
  6350                           ;main_B1.c: 313: setBuz(5, 300);
  6351  17E7  302C               	movlw	44
  6352  17E8  0020               	movlb	0	; select bank0
  6353  17E9  00A9               	movwf	setBuz@time
  6354  17EA  3001               	movlw	1
  6355  17EB  00AA               	movwf	setBuz@time+1
  6356  17EC  3005               	movlw	5
  6357  17ED  3196  2696  3197   	fcall	_setBuz
  6358                           
  6359                           ;main_B1.c: 316: }
  6360                           
  6361                           ;main_B1.c: 314: }
  6362                           ;main_B1.c: 315: break;
  6363  17F0  2FFA               	goto	l7606
  6364  17F1                     l7604:	
  6365  17F1  0020               	movlb	0	; select bank0
  6366  17F2  083C               	movf	setMain_Exception@command,w
  6367                           
  6368                           ; Switch size 1, requested type "space"
  6369                           ; Number of cases is 2, Range of values is 2 to 3
  6370                           ; switch strategies available:
  6371                           ; Name         Instructions Cycles
  6372                           ; simple_byte            7     4 (average)
  6373                           ; direct_byte           13     9 (fixed)
  6374                           ; jumptable            263     9 (fixed)
  6375                           ;	Chosen strategy is simple_byte
  6376  17F3  3A02               	xorlw	2	; case 2
  6377  17F4  1903               	skipnz
  6378  17F5  2FD1               	goto	l7594
  6379  17F6  3A01               	xorlw	1	; case 3
  6380  17F7  1903               	skipnz
  6381  17F8  2FE1               	goto	l7598
  6382  17F9  2FFA               	goto	l7606
  6383  17FA                     l7606:	
  6384                           
  6385                           ;main_B1.c: 317: setDimmerLights_ErrorClose(status);
  6386  17FA  0020               	movlb	0	; select bank0
  6387  17FB  083B               	movf	setMain_Exception@status,w
  6388  17FC  3188  2000         	fcall	_setDimmerLights_ErrorClose
  6389  17FE  0020               	movlb	0	; select bank0
  6390  17FF  0008               	return
  6391  1800                     __end_of_setMain_Exception:	
  6392                           
  6393                           	psect	text19
  6394  1D2A                     __ptext19:	
  6395 ;; *************** function _getDimmerLights_Line *****************
  6396 ;; Defined at:
  6397 ;;		line 707 in file "../src/Dimmer_B1.c"
  6398 ;; Parameters:    Size  Location     Type
  6399 ;;		None
  6400 ;; Auto vars:     Size  Location     Type
  6401 ;;  line            1    1[BANK0 ] unsigned char 
  6402 ;; Return value:  Size  Location     Type
  6403 ;;                  1    wreg      unsigned char 
  6404 ;; Registers used:
  6405 ;;		wreg, status,2
  6406 ;; Tracked objects:
  6407 ;;		On entry : 0/0
  6408 ;;		On exit  : 0/0
  6409 ;;		Unchanged: 0/0
  6410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6412 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6413 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6414 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6415 ;;Total ram usage:        2 bytes
  6416 ;; Hardware stack levels used:    1
  6417 ;; Hardware stack levels required when called:    5
  6418 ;; This function calls:
  6419 ;;		Nothing
  6420 ;; This function is called by:
  6421 ;;		_setMain_Exception
  6422 ;; This function uses a non-reentrant model
  6423 ;;
  6424                           
  6425                           
  6426                           ;psect for function _getDimmerLights_Line
  6427  1D2A                     _getDimmerLights_Line:	
  6428                           
  6429                           ;Dimmer_B1.c: 708: char line = 0;
  6430                           
  6431                           ;incstack = 0
  6432                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6433  1D2A  0020               	movlb	0	; select bank0
  6434  1D2B  01A1               	clrf	getDimmerLights_Line@line
  6435                           
  6436                           ;Dimmer_B1.c: 710: if (DimmerLights1.Line == 1) {
  6437  1D2C  0023               	movlb	3	; select bank3
  6438  1D2D  1C47               	btfss	(_DimmerLights1^(0+384)+9),0
  6439  1D2E  2D33               	goto	l866
  6440                           
  6441                           ;Dimmer_B1.c: 711: line = 1;
  6442  1D2F  0020               	movlb	0	; select bank0
  6443  1D30  01A1               	clrf	getDimmerLights_Line@line
  6444  1D31  0AA1               	incf	getDimmerLights_Line@line,f
  6445                           
  6446                           ;Dimmer_B1.c: 712: }
  6447  1D32  2D3A               	goto	l867
  6448  1D33                     l866:	
  6449                           
  6450                           ;Dimmer_B1.c: 715: else if (DimmerLights2.Line == 1) {
  6451  1D33  1C56               	btfss	(_DimmerLights2^(0+384)+9),0
  6452  1D34  2D3A               	goto	l867
  6453                           
  6454                           ;Dimmer_B1.c: 716: line = 2;
  6455  1D35  3002               	movlw	2
  6456  1D36  0020               	movlb	0	; select bank0
  6457  1D37  00A0               	movwf	??_getDimmerLights_Line
  6458  1D38  0820               	movf	??_getDimmerLights_Line,w
  6459  1D39  00A1               	movwf	getDimmerLights_Line@line
  6460  1D3A                     l867:	
  6461                           
  6462                           ;Dimmer_B1.c: 717: }
  6463                           ;Dimmer_B1.c: 724: return line;
  6464  1D3A  0020               	movlb	0	; select bank0
  6465  1D3B  0821               	movf	getDimmerLights_Line@line,w
  6466  1D3C  0008               	return
  6467  1D3D                     __end_of_getDimmerLights_Line:	
  6468                           
  6469                           	psect	text20
  6470  1C0C                     __ptext20:	
  6471 ;; *************** function _Switch_Initialization *****************
  6472 ;; Defined at:
  6473 ;;		line 46 in file "../src/Switch_B1.c"
  6474 ;; Parameters:    Size  Location     Type
  6475 ;;		None
  6476 ;; Auto vars:     Size  Location     Type
  6477 ;;		None
  6478 ;; Return value:  Size  Location     Type
  6479 ;;		None               void
  6480 ;; Registers used:
  6481 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6482 ;; Tracked objects:
  6483 ;;		On entry : 0/0
  6484 ;;		On exit  : 0/0
  6485 ;;		Unchanged: 0/0
  6486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6490 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6491 ;;Total ram usage:        0 bytes
  6492 ;; Hardware stack levels used:    1
  6493 ;; Hardware stack levels required when called:    8
  6494 ;; This function calls:
  6495 ;;		_TouchPower
  6496 ;;		_setSw_Initialization
  6497 ;; This function is called by:
  6498 ;;		_main
  6499 ;; This function uses a non-reentrant model
  6500 ;;
  6501                           
  6502                           
  6503                           ;psect for function _Switch_Initialization
  6504  1C0C                     _Switch_Initialization:	
  6505                           
  6506                           ;Switch_B1.c: 47: TouchPower();
  6507                           
  6508                           ;incstack = 0
  6509                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6510  1C0C  319D  25E0  319C   	fcall	_TouchPower
  6511                           
  6512                           ;Switch_B1.c: 49: WPUB1 = 0;
  6513  1C0F  0024               	movlb	4	; select bank4
  6514  1C10  108D               	bcf	13,1	;volatile
  6515                           
  6516                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6517  1C11  3001               	movlw	1
  6518  1C12  319B  2391  319C   	fcall	_setSw_Initialization
  6519                           
  6520                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6521  1C15  3002               	movlw	2
  6522  1C16  319B  2391         	fcall	_setSw_Initialization
  6523  1C18  0008               	return
  6524  1C19                     __end_of_Switch_Initialization:	
  6525                           
  6526                           	psect	text21
  6527  1B91                     __ptext21:	
  6528 ;; *************** function _setSw_Initialization *****************
  6529 ;; Defined at:
  6530 ;;		line 109 in file "../src/Switch_B1.c"
  6531 ;; Parameters:    Size  Location     Type
  6532 ;;  sw              1    wreg     unsigned char 
  6533 ;; Auto vars:     Size  Location     Type
  6534 ;;  sw              1    4[BANK0 ] unsigned char 
  6535 ;; Return value:  Size  Location     Type
  6536 ;;		None               void
  6537 ;; Registers used:
  6538 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6539 ;; Tracked objects:
  6540 ;;		On entry : 0/0
  6541 ;;		On exit  : 0/0
  6542 ;;		Unchanged: 0/0
  6543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6545 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;Total ram usage:        1 bytes
  6549 ;; Hardware stack levels used:    1
  6550 ;; Hardware stack levels required when called:    7
  6551 ;; This function calls:
  6552 ;;		_setLED
  6553 ;; This function is called by:
  6554 ;;		_Switch_Initialization
  6555 ;; This function uses a non-reentrant model
  6556 ;;
  6557                           
  6558                           
  6559                           ;psect for function _setSw_Initialization
  6560  1B91                     _setSw_Initialization:	
  6561                           
  6562                           ;incstack = 0
  6563                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6564                           ;setSw_Initialization@sw stored from wreg
  6565  1B91  0020               	movlb	0	; select bank0
  6566  1B92  00A4               	movwf	setSw_Initialization@sw
  6567                           
  6568                           ;Switch_B1.c: 110: setLED(sw, 1);
  6569  1B93  01A2               	clrf	setLED@command
  6570  1B94  0AA2               	incf	setLED@command,f
  6571  1B95  0824               	movf	setSw_Initialization@sw,w
  6572  1B96  3195  259A         	fcall	_setLED
  6573  1B98  0008               	return
  6574  1B99                     __end_of_setSw_Initialization:	
  6575                           
  6576                           	psect	text22
  6577  1DE0                     __ptext22:	
  6578 ;; *************** function _TouchPower *****************
  6579 ;; Defined at:
  6580 ;;		line 10 in file "../src/Switch_B1.c"
  6581 ;; Parameters:    Size  Location     Type
  6582 ;;		None
  6583 ;; Auto vars:     Size  Location     Type
  6584 ;;		None
  6585 ;; Return value:  Size  Location     Type
  6586 ;;		None               void
  6587 ;; Registers used:
  6588 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6589 ;; Tracked objects:
  6590 ;;		On entry : 0/0
  6591 ;;		On exit  : 0/0
  6592 ;;		Unchanged: 0/0
  6593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;Total ram usage:        0 bytes
  6599 ;; Hardware stack levels used:    1
  6600 ;; Hardware stack levels required when called:    6
  6601 ;; This function calls:
  6602 ;;		_Timeout_Counter
  6603 ;;		_set_TimeoutCleared
  6604 ;; This function is called by:
  6605 ;;		_Switch_Initialization
  6606 ;;		_Switch_Main
  6607 ;; This function uses a non-reentrant model
  6608 ;;
  6609                           
  6610                           
  6611                           ;psect for function _TouchPower
  6612  1DE0                     _TouchPower:	
  6613                           
  6614                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6615                           
  6616                           ;incstack = 0
  6617                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6618  1DE0  0020               	movlb	0	; select bank0
  6619  1DE1  1A8E               	btfsc	14,5	;volatile
  6620  1DE2  0008               	return
  6621                           
  6622                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6623  1DE3  0021               	movlb	1	; select bank1
  6624  1DE4  1C20               	btfss	_myMain^(0+128),0
  6625  1DE5  0008               	return
  6626  1DE6  2DEC               	goto	l7566
  6627  1DE7                     l2369:	
  6628                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6629                           
  6630                           
  6631                           ;Switch_B1.c: 14: RC5 = 1;
  6632  1DE7  0020               	movlb	0	; select bank0
  6633  1DE8  168E               	bsf	14,5	;volatile
  6634                           
  6635                           ;Switch_B1.c: 15: Timeout_Counter();
  6636  1DE9  319D  25A1  319D   	fcall	_Timeout_Counter
  6637  1DEC                     l7566:	
  6638  1DEC  0020               	movlb	0	; select bank0
  6639  1DED  1A8E               	btfsc	14,5	;volatile
  6640  1DEE  2DF2               	goto	l7570
  6641  1DEF  0021               	movlb	1	; select bank1
  6642  1DF0  1D2D               	btfss	(_myMain^(0+128)+13),2
  6643  1DF1  2DE7               	goto	l2369
  6644  1DF2                     l7570:	
  6645                           
  6646                           ;Switch_B1.c: 16: }
  6647                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6648  1DF2  319B  2346         	fcall	_set_TimeoutCleared
  6649  1DF4  0008               	return
  6650  1DF5                     __end_of_TouchPower:	
  6651                           
  6652                           	psect	text23
  6653  1B31                     __ptext23:	
  6654 ;; *************** function _RF_Main *****************
  6655 ;; Defined at:
  6656 ;;		line 16 in file "../src/RF_Control_B1.c"
  6657 ;; Parameters:    Size  Location     Type
  6658 ;;		None
  6659 ;; Auto vars:     Size  Location     Type
  6660 ;;		None
  6661 ;; Return value:  Size  Location     Type
  6662 ;;		None               void
  6663 ;; Registers used:
  6664 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6665 ;; Tracked objects:
  6666 ;;		On entry : 0/0
  6667 ;;		On exit  : 0/0
  6668 ;;		Unchanged: 0/0
  6669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6674 ;;Total ram usage:        0 bytes
  6675 ;; Hardware stack levels used:    1
  6676 ;; Hardware stack levels required when called:   14
  6677 ;; This function calls:
  6678 ;;		_setRF_Main
  6679 ;; This function is called by:
  6680 ;;		_main
  6681 ;; This function uses a non-reentrant model
  6682 ;;
  6683                           
  6684                           
  6685                           ;psect for function _RF_Main
  6686  1B31                     _RF_Main:	
  6687                           
  6688                           ;RF_Control_B1.c: 18: setRF_Main();
  6689                           
  6690                           ;incstack = 0
  6691                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6692  1B31  3185  2530         	fcall	_setRF_Main
  6693  1B33  0008               	return
  6694  1B34                     __end_of_RF_Main:	
  6695                           
  6696                           	psect	text24
  6697  0530                     __ptext24:	
  6698 ;; *************** function _setRF_Main *****************
  6699 ;; Defined at:
  6700 ;;		line 52 in file "../src/RF_Control_B1.c"
  6701 ;; Parameters:    Size  Location     Type
  6702 ;;		None
  6703 ;; Auto vars:     Size  Location     Type
  6704 ;;  error           1    2[BANK1 ] unsigned char 
  6705 ;;  Receive_OK      1    1[BANK1 ] unsigned char 
  6706 ;;  loop_f          1    0[BANK1 ] unsigned char 
  6707 ;; Return value:  Size  Location     Type
  6708 ;;		None               void
  6709 ;; Registers used:
  6710 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6711 ;; Tracked objects:
  6712 ;;		On entry : 0/0
  6713 ;;		On exit  : 0/0
  6714 ;;		Unchanged: 0/0
  6715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6717 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6718 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6719 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6720 ;;Total ram usage:        4 bytes
  6721 ;; Hardware stack levels used:    1
  6722 ;; Hardware stack levels required when called:   13
  6723 ;; This function calls:
  6724 ;;		_CC2500_ReadStatus
  6725 ;;		_CC2500_RxData
  6726 ;;		_CC2500_TxData
  6727 ;;		_CC2500_WriteCommand
  6728 ;;		_getBuz_GO
  6729 ;;		_getMain_All_Error_Status
  6730 ;;		_getRF_KeyStatus
  6731 ;;		_getRxData
  6732 ;; This function is called by:
  6733 ;;		_RF_Main
  6734 ;; This function uses a non-reentrant model
  6735 ;;
  6736                           
  6737                           
  6738                           ;psect for function _setRF_Main
  6739  0530                     _setRF_Main:	
  6740                           
  6741                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6742                           
  6743                           ;incstack = 0
  6744                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6745  0530  0021               	movlb	1	; select bank1
  6746  0531  01E9               	clrf	setRF_Main@loop_f^(0+128)
  6747  0532  01EA               	clrf	setRF_Main@Receive_OK^(0+128)
  6748  0533  01EB               	clrf	setRF_Main@error^(0+128)
  6749                           
  6750                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6751  0534  1C3C               	btfss	_RF1^(0+128),0
  6752  0535  2E1C               	goto	l1970
  6753                           
  6754                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6755  0536  319C  2487  3185   	fcall	_getBuz_GO
  6756  0539  0020               	movlb	0	; select bank0
  6757  053A  0821               	movf	?_getBuz_GO+1,w
  6758  053B  0420               	iorwf	?_getBuz_GO,w
  6759  053C  1D03               	skipz
  6760  053D  0008               	return
  6761                           
  6762                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6763  053E  3000               	movlw	0
  6764  053F  3191  21EB  3185   	fcall	_getMain_All_Error_Status
  6765  0542  3800               	iorlw	0
  6766  0543  1D03               	skipz
  6767  0544  2D59               	goto	l1972
  6768                           
  6769                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6770  0545  319C  2498  3185   	fcall	_getRF_KeyStatus
  6771  0548  3A01               	xorlw	1
  6772  0549  3000               	movlw	0
  6773  054A  1903               	skipnz
  6774  054B  3001               	movlw	1
  6775  054C  0020               	movlb	0	; select bank0
  6776  054D  00ED               	movwf	??_setRF_Main
  6777  054E  0CED               	rrf	??_setRF_Main,f
  6778  054F  0CED               	rrf	??_setRF_Main,f
  6779  0550  0021               	movlb	1	; select bank1
  6780  0551  083C               	movf	_RF1^(0+128),w
  6781  0552  0020               	movlb	0	; select bank0
  6782  0553  066D               	xorwf	??_setRF_Main,w
  6783  0554  397F               	andlw	-129
  6784  0555  066D               	xorwf	??_setRF_Main,w
  6785  0556  0021               	movlb	1	; select bank1
  6786  0557  00BC               	movwf	_RF1^(0+128)
  6787                           
  6788                           ;RF_Control_B1.c: 65: } else {
  6789  0558  2D5B               	goto	l1973
  6790  0559                     l1972:	
  6791                           
  6792                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6793  0559  0021               	movlb	1	; select bank1
  6794  055A  13BC               	bcf	_RF1^(0+128),7
  6795  055B                     l1973:	
  6796                           
  6797                           ;RF_Control_B1.c: 70: }
  6798                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  6799  055B  1BBC               	btfsc	_RF1^(0+128),7
  6800  055C  1B3C               	btfsc	_RF1^(0+128),6
  6801  055D  2D63               	goto	l1974
  6802                           
  6803                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  6804  055E  01BE               	clrf	(_RF1^(0+128)+2)
  6805  055F  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6806                           
  6807                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  6808  0560  14BD               	bsf	(_RF1^(0+128)+1),1
  6809                           
  6810                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  6811  0561  11BC               	bcf	_RF1^(0+128),3
  6812                           
  6813                           ;RF_Control_B1.c: 76: } else {
  6814  0562  0008               	return
  6815  0563                     l1974:	
  6816                           
  6817                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6818  0563  18BD               	btfsc	(_RF1^(0+128)+1),1
  6819  0564  1B3C               	btfsc	_RF1^(0+128),6
  6820  0565  2D7A               	goto	l7482
  6821                           
  6822                           ;RF_Control_B1.c: 78: RF1.Count++;
  6823  0566  3001               	movlw	1
  6824  0567  07BE               	addwf	(_RF1^(0+128)+2),f
  6825  0568  3000               	movlw	0
  6826  0569  3DBF               	addwfc	((_RF1+1)^(0+128)+2),f
  6827                           
  6828                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6829  056A  3002               	movlw	2
  6830  056B  3EBC               	addlw	_RF1& (0+255)
  6831  056C  0086               	movwf	6
  6832  056D  0187               	clrf	7
  6833  056E  3F40               	moviw [0]fsr1
  6834  056F  0643               	xorwf	(_RF1^(0+128)+7),w
  6835  0570  1D03               	skipz
  6836  0571  2D74               	goto	u7075
  6837  0572  3F41               	moviw [1]fsr1
  6838  0573  0644               	xorwf	((_RF1+1)^(0+128)+7),w
  6839  0574                     u7075:	
  6840  0574  1D03               	skipz
  6841  0575  2DE9               	goto	l7534
  6842                           
  6843                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6844  0576  01BE               	clrf	(_RF1^(0+128)+2)
  6845  0577  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6846                           
  6847                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6848  0578  10BD               	bcf	(_RF1^(0+128)+1),1
  6849                           
  6850                           ;RF_Control_B1.c: 82: }
  6851                           ;RF_Control_B1.c: 83: } else {
  6852  0579  2DE9               	goto	l7534
  6853  057A                     l7482:	
  6854                           
  6855                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6856  057A  01BE               	clrf	(_RF1^(0+128)+2)
  6857  057B  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6858                           
  6859                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6860  057C  10BD               	bcf	(_RF1^(0+128)+1),1
  6861                           
  6862                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6863  057D  193C               	btfsc	_RF1^(0+128),2
  6864  057E  1B3C               	btfsc	_RF1^(0+128),6
  6865  057F  2D9B               	goto	l1979
  6866                           
  6867                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6868  0580  113C               	bcf	_RF1^(0+128),2
  6869                           
  6870                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6871  0581  11BC               	bcf	_RF1^(0+128),3
  6872                           
  6873                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6874  0582  10BC               	bcf	_RF1^(0+128),1
  6875                           
  6876                           ;RF_Control_B1.c: 92: CC2500_ReadStatus(0x3B);
  6877  0583  303B               	movlw	59
  6878  0584  319F  27BB  3185   	fcall	_CC2500_ReadStatus
  6879                           
  6880                           ;RF_Control_B1.c: 93: if (s_data != 0) {
  6881  0587  0021               	movlb	1	; select bank1
  6882  0588  0856               	movf	_s_data^(0+128),w
  6883  0589  1903               	btfsc	3,2
  6884  058A  2D97               	goto	l1980
  6885                           
  6886                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  6887  058B  3036               	movlw	54
  6888  058C  319E  2639  3185   	fcall	_CC2500_WriteCommand
  6889                           
  6890                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x3B);
  6891  058F  303B               	movlw	59
  6892  0590  319E  2639  3185   	fcall	_CC2500_WriteCommand
  6893                           
  6894                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x3A);
  6895  0593  303A               	movlw	58
  6896  0594  319E  2639  3185   	fcall	_CC2500_WriteCommand
  6897  0597                     l1980:	
  6898                           
  6899                           ;RF_Control_B1.c: 97: }
  6900                           ;RF_Control_B1.c: 98: CC2500_TxData();
  6901  0597  3189  21DA  3185   	fcall	_CC2500_TxData
  6902                           
  6903                           ;RF_Control_B1.c: 100: } else {
  6904  059A  2DE9               	goto	l7534
  6905  059B                     l1979:	
  6906                           
  6907                           ;RF_Control_B1.c: 102: if (RF1.RxStatus == 1) {
  6908  059B  1DBC               	btfss	_RF1^(0+128),3
  6909  059C  2DD4               	goto	l1982
  6910                           
  6911                           ;RF_Control_B1.c: 104: CC2500_RxData();
  6912  059D  318B  2372  3185   	fcall	_CC2500_RxData
  6913                           
  6914                           ;RF_Control_B1.c: 105: if (RF1.ReceiveGO == 1) {
  6915  05A0  0021               	movlb	1	; select bank1
  6916  05A1  1CBC               	btfss	_RF1^(0+128),1
  6917  05A2  2DE9               	goto	l7534
  6918                           
  6919                           ;RF_Control_B1.c: 106: RF1.ReceiveGO = 0;
  6920  05A3  10BC               	bcf	_RF1^(0+128),1
  6921                           
  6922                           ;RF_Control_B1.c: 107: RF1.Correction = 0;
  6923  05A4  12BD               	bcf	(_RF1^(0+128)+1),5
  6924                           
  6925                           ;RF_Control_B1.c: 108: RF1.CorrectionCounter = 0;
  6926  05A5  01C6               	clrf	(_RF1^(0+128)+10)
  6927  05A6  01C7               	clrf	((_RF1+1)^(0+128)+10)
  6928                           
  6929                           ;RF_Control_B1.c: 117: getRxData();
  6930  05A7  318B  23E3  3185   	fcall	_getRxData
  6931                           
  6932                           ;RF_Control_B1.c: 120: RF1.Run = 1;
  6933  05AA  0021               	movlb	1	; select bank1
  6934  05AB  14BD               	bsf	(_RF1^(0+128)+1),1
  6935                           
  6936                           ;RF_Control_B1.c: 122: if (RF1.Checked == 1) {
  6937  05AC  1DBD               	btfss	(_RF1^(0+128)+1),3
  6938  05AD  2DBB               	goto	l7518
  6939                           
  6940                           ;RF_Control_B1.c: 123: if (RF1.RunTime > 10) {
  6941  05AE  3000               	movlw	0
  6942  05AF  0244               	subwf	((_RF1+1)^(0+128)+7),w
  6943  05B0  300B               	movlw	11
  6944  05B1  1903               	skipnz
  6945  05B2  0243               	subwf	(_RF1^(0+128)+7),w
  6946  05B3  1C03               	skipc
  6947  05B4  2DB9               	goto	l7516
  6948                           
  6949                           ;RF_Control_B1.c: 124: RF1.RunTime = 10;
  6950  05B5  300A               	movlw	10
  6951  05B6  00C3               	movwf	(_RF1^(0+128)+7)
  6952  05B7  3000               	movlw	0
  6953  05B8  00C4               	movwf	(_RF1^(0+128)+8)
  6954  05B9                     l7516:	
  6955                           
  6956                           ;RF_Control_B1.c: 125: }
  6957                           ;RF_Control_B1.c: 126: RF1.CheckCount = 0;
  6958  05B9  01C0               	clrf	(_RF1^(0+128)+4)
  6959                           
  6960                           ;RF_Control_B1.c: 127: } else {
  6961  05BA  2DE9               	goto	l7534
  6962  05BB                     l7518:	
  6963                           
  6964                           ;RF_Control_B1.c: 128: RF1.CheckCount++;
  6965  05BB  3001               	movlw	1
  6966  05BC  0020               	movlb	0	; select bank0
  6967  05BD  00ED               	movwf	??_setRF_Main
  6968  05BE  086D               	movf	??_setRF_Main,w
  6969  05BF  0021               	movlb	1	; select bank1
  6970  05C0  07C0               	addwf	(_RF1^(0+128)+4),f
  6971                           
  6972                           ;RF_Control_B1.c: 129: if (RF1.CheckCount == 2) {
  6973  05C1  0840               	movf	(_RF1^(0+128)+4),w
  6974  05C2  3A02               	xorlw	2
  6975  05C3  1D03               	skipz
  6976  05C4  2DE9               	goto	l7534
  6977                           
  6978                           ;RF_Control_B1.c: 130: RF1.CheckCount = 0;
  6979  05C5  01C0               	clrf	(_RF1^(0+128)+4)
  6980                           
  6981                           ;RF_Control_B1.c: 131: RF1.CheckedCounter = 0;
  6982  05C6  01C1               	clrf	(_RF1^(0+128)+5)
  6983  05C7  01C2               	clrf	((_RF1+1)^(0+128)+5)
  6984                           
  6985                           ;RF_Control_B1.c: 132: if (RF1.RunTime < 200) {
  6986  05C8  3000               	movlw	0
  6987  05C9  0244               	subwf	((_RF1+1)^(0+128)+7),w
  6988  05CA  30C8               	movlw	200
  6989  05CB  1903               	skipnz
  6990  05CC  0243               	subwf	(_RF1^(0+128)+7),w
  6991  05CD  1803               	skipnc
  6992  05CE  2DE9               	goto	l7534
  6993                           
  6994                           ;RF_Control_B1.c: 133: RF1.RunTime += 10;
  6995  05CF  300A               	movlw	10
  6996  05D0  07C3               	addwf	(_RF1^(0+128)+7),f
  6997  05D1  3000               	movlw	0
  6998  05D2  3DC4               	addwfc	((_RF1+1)^(0+128)+7),f
  6999                           
  7000                           ;RF_Control_B1.c: 134: }
  7001                           ;RF_Control_B1.c: 135: }
  7002                           ;RF_Control_B1.c: 136: }
  7003                           ;RF_Control_B1.c: 137: }
  7004                           ;RF_Control_B1.c: 138: } else {
  7005  05D3  2DE9               	goto	l7534
  7006  05D4                     l1982:	
  7007                           
  7008                           ;RF_Control_B1.c: 140: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7009  05D4  1DBC               	btfss	_RF1^(0+128),3
  7010  05D5  18BC               	btfsc	_RF1^(0+128),1
  7011  05D6  2DE9               	goto	l7534
  7012                           
  7013                           ;RF_Control_B1.c: 141: RF1.RxStatus = 1;
  7014  05D7  15BC               	bsf	_RF1^(0+128),3
  7015                           
  7016                           ;RF_Control_B1.c: 142: RF1.Correction = 1;
  7017  05D8  16BD               	bsf	(_RF1^(0+128)+1),5
  7018                           
  7019                           ;RF_Control_B1.c: 144: CC2500_WriteCommand(0x36);
  7020  05D9  3036               	movlw	54
  7021  05DA  319E  2639  3185   	fcall	_CC2500_WriteCommand
  7022                           
  7023                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x3B);
  7024  05DD  303B               	movlw	59
  7025  05DE  319E  2639  3185   	fcall	_CC2500_WriteCommand
  7026                           
  7027                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x3A);
  7028  05E1  303A               	movlw	58
  7029  05E2  319E  2639  3185   	fcall	_CC2500_WriteCommand
  7030                           
  7031                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x34);
  7032  05E5  3034               	movlw	52
  7033  05E6  319E  2639  3185   	fcall	_CC2500_WriteCommand
  7034  05E9                     l7534:	
  7035                           
  7036                           ;RF_Control_B1.c: 148: }
  7037                           ;RF_Control_B1.c: 150: }
  7038                           ;RF_Control_B1.c: 151: }
  7039                           ;RF_Control_B1.c: 152: }
  7040                           ;RF_Control_B1.c: 153: if (RF1.RxStatus == 1) {
  7041  05E9  0021               	movlb	1	; select bank1
  7042  05EA  1DBC               	btfss	_RF1^(0+128),3
  7043  05EB  2E0A               	goto	l7546
  7044                           
  7045                           ;RF_Control_B1.c: 154: RF1.CheckedCounter++;
  7046  05EC  3001               	movlw	1
  7047  05ED  07C1               	addwf	(_RF1^(0+128)+5),f
  7048  05EE  3000               	movlw	0
  7049  05EF  3DC2               	addwfc	((_RF1+1)^(0+128)+5),f
  7050                           
  7051                           ;RF_Control_B1.c: 155: if (RF1.CheckedCounter == 100) {
  7052  05F0  3005               	movlw	5
  7053  05F1  3EBC               	addlw	_RF1& (0+255)
  7054  05F2  0086               	movwf	6
  7055  05F3  0187               	clrf	7
  7056  05F4  3F40               	moviw [0]fsr1
  7057  05F5  3A64               	xorlw	100
  7058  05F6  1D03               	skipz
  7059  05F7  2DFA               	goto	u7205
  7060  05F8  3F41               	moviw [1]fsr1
  7061  05F9  3A00               	xorlw	0
  7062  05FA                     u7205:	
  7063  05FA  1D03               	skipz
  7064  05FB  2E0A               	goto	l7546
  7065                           
  7066                           ;RF_Control_B1.c: 156: RF1.CheckedCounter = 0;
  7067  05FC  01C1               	clrf	(_RF1^(0+128)+5)
  7068  05FD  01C2               	clrf	((_RF1+1)^(0+128)+5)
  7069                           
  7070                           ;RF_Control_B1.c: 157: RF1.CheckCount = 0;
  7071  05FE  01C0               	clrf	(_RF1^(0+128)+4)
  7072                           
  7073                           ;RF_Control_B1.c: 158: if (RF1.RunTime > 10) {
  7074  05FF  3000               	movlw	0
  7075  0600  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7076  0601  300B               	movlw	11
  7077  0602  1903               	skipnz
  7078  0603  0243               	subwf	(_RF1^(0+128)+7),w
  7079  0604  1C03               	skipc
  7080  0605  2E0A               	goto	l7546
  7081                           
  7082                           ;RF_Control_B1.c: 159: RF1.RunTime -= 10;
  7083  0606  300A               	movlw	10
  7084  0607  02C3               	subwf	(_RF1^(0+128)+7),f
  7085  0608  3000               	movlw	0
  7086  0609  3BC4               	subwfb	((_RF1+1)^(0+128)+7),f
  7087  060A                     l7546:	
  7088                           
  7089                           ;RF_Control_B1.c: 160: }
  7090                           ;RF_Control_B1.c: 161: }
  7091                           ;RF_Control_B1.c: 162: }
  7092                           ;RF_Control_B1.c: 163: if (RF1.Correction == 1) {
  7093  060A  1EBD               	btfss	(_RF1^(0+128)+1),5
  7094  060B  0008               	return
  7095                           
  7096                           ;RF_Control_B1.c: 164: RF1.CorrectionCounter++;
  7097  060C  3001               	movlw	1
  7098  060D  07C6               	addwf	(_RF1^(0+128)+10),f
  7099  060E  3000               	movlw	0
  7100  060F  3DC7               	addwfc	((_RF1+1)^(0+128)+10),f
  7101                           
  7102                           ;RF_Control_B1.c: 165: if (RF1.CorrectionCounter >= 30000) {
  7103  0610  3075               	movlw	117
  7104  0611  0247               	subwf	((_RF1+1)^(0+128)+10),w
  7105  0612  3030               	movlw	48
  7106  0613  1903               	skipnz
  7107  0614  0246               	subwf	(_RF1^(0+128)+10),w
  7108  0615  1C03               	skipc
  7109  0616  0008               	return
  7110                           
  7111                           ;RF_Control_B1.c: 166: RF1.CorrectionCounter = 0;
  7112  0617  01C6               	clrf	(_RF1^(0+128)+10)
  7113  0618  01C7               	clrf	((_RF1+1)^(0+128)+10)
  7114                           
  7115                           ;RF_Control_B1.c: 167: RF1.RxStatus = 0;
  7116  0619  11BC               	bcf	_RF1^(0+128),3
  7117                           
  7118                           ;RF_Control_B1.c: 168: RF1.ReceiveGO = 0;
  7119  061A  10BC               	bcf	_RF1^(0+128),1
  7120                           
  7121                           ;RF_Control_B1.c: 169: }
  7122                           ;RF_Control_B1.c: 170: }
  7123                           ;RF_Control_B1.c: 171: }
  7124                           ;RF_Control_B1.c: 172: }
  7125                           ;RF_Control_B1.c: 179: } else {
  7126  061B  0008               	return
  7127  061C                     l1970:	
  7128                           
  7129                           ;RF_Control_B1.c: 180: if (myMain.PowerON == 1) {
  7130  061C  1C20               	btfss	_myMain^(0+128),0
  7131  061D  0008               	return
  7132                           
  7133                           ;RF_Control_B1.c: 181: RF1.Enable = 1;
  7134  061E  143C               	bsf	_RF1^(0+128),0
  7135  061F  0008               	return
  7136  0620                     __end_of_setRF_Main:	
  7137                           
  7138                           	psect	text25
  7139  0BE3                     __ptext25:	
  7140 ;; *************** function _getRxData *****************
  7141 ;; Defined at:
  7142 ;;		line 269 in file "../src/RF_Control_B1.c"
  7143 ;; Parameters:    Size  Location     Type
  7144 ;;		None
  7145 ;; Auto vars:     Size  Location     Type
  7146 ;;  error           1   76[BANK0 ] unsigned char 
  7147 ;; Return value:  Size  Location     Type
  7148 ;;		None               void
  7149 ;; Registers used:
  7150 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7151 ;; Tracked objects:
  7152 ;;		On entry : 0/0
  7153 ;;		On exit  : 0/0
  7154 ;;		Unchanged: 0/0
  7155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7157 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7158 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7159 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7160 ;;Total ram usage:        2 bytes
  7161 ;; Hardware stack levels used:    1
  7162 ;; Hardware stack levels required when called:   12
  7163 ;; This function calls:
  7164 ;;		_getMain_All_Error_Status
  7165 ;;		_setControl_Lights_Table
  7166 ;;		_setLog_Code
  7167 ;; This function is called by:
  7168 ;;		_setRF_Main
  7169 ;; This function uses a non-reentrant model
  7170 ;;
  7171                           
  7172                           
  7173                           ;psect for function _getRxData
  7174  0BE3                     _getRxData:	
  7175                           
  7176                           ;RF_Control_B1.c: 270: char error = getMain_All_Error_Status(0);
  7177                           
  7178                           ;incstack = 0
  7179                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7180  0BE3  3000               	movlw	0
  7181  0BE4  3191  21EB  318B   	fcall	_getMain_All_Error_Status
  7182  0BE7  0020               	movlb	0	; select bank0
  7183  0BE8  00EB               	movwf	??_getRxData
  7184  0BE9  086B               	movf	??_getRxData,w
  7185  0BEA  00EC               	movwf	getRxData@error
  7186                           
  7187                           ;RF_Control_B1.c: 271: if (error == 0) {
  7188  0BEB  08EC               	movf	getRxData@error,f
  7189  0BEC  1D03               	skipz
  7190  0BED  0008               	return
  7191                           
  7192                           ;RF_Control_B1.c: 272: if (RF1.Learn == 1) {
  7193  0BEE  0021               	movlb	1	; select bank1
  7194  0BEF  1F3C               	btfss	_RF1^(0+128),6
  7195  0BF0  2C01               	goto	l6964
  7196                           
  7197                           ;RF_Control_B1.c: 273: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7198  0BF1  0023               	movlb	3	; select bank3
  7199  0BF2  08A0               	movf	_RF_Data^(0+384),f
  7200  0BF3  1D03               	skipz
  7201  0BF4  2BFE               	goto	l2021
  7202  0BF5  0821               	movf	(_RF_Data^(0+384)+1),w
  7203  0BF6  3A64               	xorlw	100
  7204  0BF7  1D03               	skipz
  7205  0BF8  2BFE               	goto	l2021
  7206                           
  7207                           ;RF_Control_B1.c: 274: setLog_Code();
  7208  0BF9  3192  22BD         	fcall	_setLog_Code
  7209                           
  7210                           ;RF_Control_B1.c: 275: RF1.Checked = 1;
  7211  0BFB  0021               	movlb	1	; select bank1
  7212  0BFC  15BD               	bsf	(_RF1^(0+128)+1),3
  7213                           
  7214                           ;RF_Control_B1.c: 276: } else {
  7215  0BFD  0008               	return
  7216  0BFE                     l2021:	
  7217                           
  7218                           ;RF_Control_B1.c: 277: RF1.Checked = 0;
  7219  0BFE  0021               	movlb	1	; select bank1
  7220  0BFF  11BD               	bcf	(_RF1^(0+128)+1),3
  7221                           
  7222                           ;RF_Control_B1.c: 278: }
  7223                           ;RF_Control_B1.c: 279: } else {
  7224  0C00  0008               	return
  7225  0C01                     l6964:	
  7226                           
  7227                           ;RF_Control_B1.c: 280: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7228  0C01  0023               	movlb	3	; select bank3
  7229  0C02  08A0               	movf	_RF_Data^(0+384),f
  7230  0C03  1D03               	skipz
  7231  0C04  2C3F               	goto	l6986
  7232  0C05  0821               	movf	(_RF_Data^(0+384)+1),w
  7233  0C06  3A02               	xorlw	2
  7234  0C07  1D03               	skipz
  7235  0C08  2C3F               	goto	l6986
  7236                           
  7237                           ;RF_Control_B1.c: 282: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7238  0C09  082C               	movf	(_RF_Data^(0+384)+12),w
  7239  0C0A  3AFF               	xorlw	255
  7240  0C0B  1D03               	skipz
  7241  0C0C  2C19               	goto	l6976
  7242  0C0D  082D               	movf	(_RF_Data^(0+384)+13),w
  7243  0C0E  3AFF               	xorlw	255
  7244  0C0F  1D03               	skipz
  7245  0C10  2C19               	goto	l6976
  7246  0C11  082E               	movf	(_RF_Data^(0+384)+14),w
  7247  0C12  3AFF               	xorlw	255
  7248  0C13  1D03               	skipz
  7249  0C14  2C19               	goto	l6976
  7250                           
  7251                           ;RF_Control_B1.c: 283: __nop();
  7252  0C15  0000               	nop
  7253                           
  7254                           ;RF_Control_B1.c: 284: RF1.Checked = 0;
  7255  0C16  0021               	movlb	1	; select bank1
  7256  0C17  11BD               	bcf	(_RF1^(0+128)+1),3
  7257                           
  7258                           ;RF_Control_B1.c: 285: } else {
  7259  0C18  0008               	return
  7260  0C19                     l6976:	
  7261                           
  7262                           ;RF_Control_B1.c: 286: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7263  0C19  0020               	movlb	0	; select bank0
  7264  0C1A  086E               	movf	_product,w
  7265  0C1B  3E0C               	addlw	12
  7266  0C1C  0086               	movwf	6
  7267  0C1D  3002               	movlw	2	; select bank4/5
  7268  0C1E  0087               	movwf	7
  7269  0C1F  0023               	movlb	3	; select bank3
  7270  0C20  082C               	movf	(_RF_Data^(0+384)+12),w
  7271  0C21  0601               	xorwf	1,w
  7272  0C22  1D03               	skipz
  7273  0C23  0008               	return
  7274  0C24  0020               	movlb	0	; select bank0
  7275  0C25  086E               	movf	_product,w
  7276  0C26  3E0D               	addlw	13
  7277  0C27  0086               	movwf	6
  7278  0C28  3002               	movlw	2	; select bank4/5
  7279  0C29  0087               	movwf	7
  7280  0C2A  0023               	movlb	3	; select bank3
  7281  0C2B  082D               	movf	(_RF_Data^(0+384)+13),w
  7282  0C2C  0601               	xorwf	1,w
  7283  0C2D  1D03               	skipz
  7284  0C2E  0008               	return
  7285  0C2F  0020               	movlb	0	; select bank0
  7286  0C30  086E               	movf	_product,w
  7287  0C31  3E0E               	addlw	14
  7288  0C32  0086               	movwf	6
  7289  0C33  3002               	movlw	2	; select bank4/5
  7290  0C34  0087               	movwf	7
  7291  0C35  0023               	movlb	3	; select bank3
  7292  0C36  082E               	movf	(_RF_Data^(0+384)+14),w
  7293  0C37  0601               	xorwf	1,w
  7294  0C38  1D03               	skipz
  7295  0C39  0008               	return
  7296                           
  7297                           ;RF_Control_B1.c: 287: setControl_Lights_Table();
  7298  0C3A  318B  230A         	fcall	_setControl_Lights_Table
  7299                           
  7300                           ;RF_Control_B1.c: 288: RF1.Checked = 1;
  7301  0C3C  0021               	movlb	1	; select bank1
  7302  0C3D  15BD               	bsf	(_RF1^(0+128)+1),3
  7303                           
  7304                           ;RF_Control_B1.c: 289: }
  7305                           ;RF_Control_B1.c: 290: }
  7306                           ;RF_Control_B1.c: 291: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7307  0C3E  0008               	return
  7308  0C3F                     l6986:	
  7309  0C3F  0023               	movlb	3	; select bank3
  7310  0C40  0820               	movf	_RF_Data^(0+384),w
  7311  0C41  3AFF               	xorlw	255
  7312  0C42  1D03               	skipz
  7313  0C43  2C4A               	goto	l6992
  7314  0C44  0821               	movf	(_RF_Data^(0+384)+1),w
  7315  0C45  3A02               	xorlw	2
  7316  0C46  1D03               	skipz
  7317  0C47  2C4A               	goto	l6992
  7318                           
  7319                           ;RF_Control_B1.c: 292: __nop();
  7320  0C48  0000               	nop
  7321                           
  7322                           ;RF_Control_B1.c: 293: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7323  0C49  0008               	return
  7324  0C4A                     l6992:	
  7325  0C4A  0023               	movlb	3	; select bank3
  7326  0C4B  08A0               	movf	_RF_Data^(0+384),f
  7327  0C4C  1D03               	skipz
  7328  0C4D  2C54               	goto	l2031
  7329  0C4E  0821               	movf	(_RF_Data^(0+384)+1),w
  7330  0C4F  3A65               	xorlw	101
  7331  0C50  1D03               	skipz
  7332  0C51  2C54               	goto	l2031
  7333                           
  7334                           ;RF_Control_B1.c: 294: __nop();
  7335  0C52  0000               	nop
  7336                           
  7337                           ;RF_Control_B1.c: 295: } else {
  7338  0C53  0008               	return
  7339  0C54                     l2031:	
  7340                           
  7341                           ;RF_Control_B1.c: 296: RF1.Checked = 0;
  7342  0C54  0021               	movlb	1	; select bank1
  7343  0C55  11BD               	bcf	(_RF1^(0+128)+1),3
  7344                           
  7345                           ;RF_Control_B1.c: 297: }
  7346                           ;RF_Control_B1.c: 302: }
  7347                           ;RF_Control_B1.c: 303: } else {
  7348  0C56  0008               	return
  7349  0C57                     __end_of_getRxData:	
  7350                           ;RF_Control_B1.c: 304: ;
  7351                           
  7352                           
  7353                           	psect	text26
  7354  12BD                     __ptext26:	
  7355 ;; *************** function _setLog_Code *****************
  7356 ;; Defined at:
  7357 ;;		line 309 in file "../src/RF_Control_B1.c"
  7358 ;; Parameters:    Size  Location     Type
  7359 ;;		None
  7360 ;; Auto vars:     Size  Location     Type
  7361 ;;		None
  7362 ;; Return value:  Size  Location     Type
  7363 ;;		None               void
  7364 ;; Registers used:
  7365 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7366 ;; Tracked objects:
  7367 ;;		On entry : 0/0
  7368 ;;		On exit  : 0/0
  7369 ;;		Unchanged: 0/0
  7370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7373 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7374 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7375 ;;Total ram usage:        1 bytes
  7376 ;; Hardware stack levels used:    1
  7377 ;; Hardware stack levels required when called:    7
  7378 ;; This function calls:
  7379 ;;		_setBuz
  7380 ;;		_setMemory_LoopSave
  7381 ;;		_setMemory_Modify
  7382 ;; This function is called by:
  7383 ;;		_getRxData
  7384 ;; This function uses a non-reentrant model
  7385 ;;
  7386                           
  7387                           
  7388                           ;psect for function _setLog_Code
  7389  12BD                     _setLog_Code:	
  7390                           
  7391                           ;RF_Control_B1.c: 310: RF1.Learn = 0;
  7392                           
  7393                           ;incstack = 0
  7394                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7395  12BD  0021               	movlb	1	; select bank1
  7396  12BE  133C               	bcf	_RF1^(0+128),6
  7397                           
  7398                           ;RF_Control_B1.c: 311: product->Data[12]=RF_Data[12];
  7399  12BF  0023               	movlb	3	; select bank3
  7400  12C0  082C               	movf	(_RF_Data^(0+384)+12),w
  7401  12C1  0020               	movlb	0	; select bank0
  7402  12C2  00AD               	movwf	??_setLog_Code
  7403  12C3  086E               	movf	_product,w
  7404  12C4  3E0C               	addlw	12
  7405  12C5  0086               	movwf	6
  7406  12C6  3002               	movlw	2	; select bank4/5
  7407  12C7  0087               	movwf	7
  7408  12C8  082D               	movf	??_setLog_Code,w
  7409  12C9  0081               	movwf	1
  7410                           
  7411                           ;RF_Control_B1.c: 312: product->Data[13]=RF_Data[13];
  7412  12CA  0023               	movlb	3	; select bank3
  7413  12CB  082D               	movf	(_RF_Data^(0+384)+13),w
  7414  12CC  0020               	movlb	0	; select bank0
  7415  12CD  00AD               	movwf	??_setLog_Code
  7416  12CE  086E               	movf	_product,w
  7417  12CF  3E0D               	addlw	13
  7418  12D0  0086               	movwf	6
  7419  12D1  3002               	movlw	2	; select bank4/5
  7420  12D2  0087               	movwf	7
  7421  12D3  082D               	movf	??_setLog_Code,w
  7422  12D4  0081               	movwf	1
  7423                           
  7424                           ;RF_Control_B1.c: 313: product->Data[14]=RF_Data[14];
  7425  12D5  0023               	movlb	3	; select bank3
  7426  12D6  082E               	movf	(_RF_Data^(0+384)+14),w
  7427  12D7  0020               	movlb	0	; select bank0
  7428  12D8  00AD               	movwf	??_setLog_Code
  7429  12D9  086E               	movf	_product,w
  7430  12DA  3E0E               	addlw	14
  7431  12DB  0086               	movwf	6
  7432  12DC  3002               	movlw	2	; select bank4/5
  7433  12DD  0087               	movwf	7
  7434  12DE  082D               	movf	??_setLog_Code,w
  7435  12DF  0081               	movwf	1
  7436                           
  7437                           ;RF_Control_B1.c: 314: setBuz(1, 100);
  7438  12E0  3064               	movlw	100
  7439  12E1  00A9               	movwf	setBuz@time
  7440  12E2  3000               	movlw	0
  7441  12E3  00AA               	movwf	setBuz@time+1
  7442  12E4  3001               	movlw	1
  7443  12E5  3196  2696  3192   	fcall	_setBuz
  7444                           
  7445                           ;RF_Control_B1.c: 315: if (myMain.First == 1) {
  7446  12E8  0021               	movlb	1	; select bank1
  7447  12E9  1EA0               	btfss	_myMain^(0+128),5
  7448  12EA  2AEF               	goto	l2037
  7449                           
  7450                           ;RF_Control_B1.c: 316: setMemory_LoopSave(1);
  7451  12EB  3001               	movlw	1
  7452  12EC  319D  2517  3192   	fcall	_setMemory_LoopSave
  7453  12EF                     l2037:	
  7454                           
  7455                           ;RF_Control_B1.c: 317: }
  7456                           ;RF_Control_B1.c: 318: setMemory_Modify(1);
  7457  12EF  3001               	movlw	1
  7458  12F0  319D  2504         	fcall	_setMemory_Modify
  7459  12F2  0008               	return
  7460  12F3                     __end_of_setLog_Code:	
  7461                           
  7462                           	psect	text27
  7463  1D17                     __ptext27:	
  7464 ;; *************** function _setMemory_LoopSave *****************
  7465 ;; Defined at:
  7466 ;;		line 1006 in file "../src/MCU_B1.c"
  7467 ;; Parameters:    Size  Location     Type
  7468 ;;  command         1    wreg     unsigned char 
  7469 ;; Auto vars:     Size  Location     Type
  7470 ;;  command         1    1[BANK0 ] unsigned char 
  7471 ;; Return value:  Size  Location     Type
  7472 ;;		None               void
  7473 ;; Registers used:
  7474 ;;		wreg, status,2, status,0
  7475 ;; Tracked objects:
  7476 ;;		On entry : 0/0
  7477 ;;		On exit  : 0/0
  7478 ;;		Unchanged: 0/0
  7479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7481 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7482 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7483 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7484 ;;Total ram usage:        2 bytes
  7485 ;; Hardware stack levels used:    1
  7486 ;; Hardware stack levels required when called:    5
  7487 ;; This function calls:
  7488 ;;		Nothing
  7489 ;; This function is called by:
  7490 ;;		_setLog_Code
  7491 ;; This function uses a non-reentrant model
  7492 ;;
  7493                           
  7494                           
  7495                           ;psect for function _setMemory_LoopSave
  7496  1D17                     _setMemory_LoopSave:	
  7497                           
  7498                           ;incstack = 0
  7499                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7500                           ;setMemory_LoopSave@command stored from wreg
  7501  1D17  0020               	movlb	0	; select bank0
  7502  1D18  00A1               	movwf	setMemory_LoopSave@command
  7503                           
  7504                           ;MCU_B1.c: 1007: Memory.LoopSave = command == 1 ? 1 : 0;
  7505  1D19  0821               	movf	setMemory_LoopSave@command,w
  7506  1D1A  3A01               	xorlw	1
  7507  1D1B  3000               	movlw	0
  7508  1D1C  1903               	skipnz
  7509  1D1D  3001               	movlw	1
  7510  1D1E  00A0               	movwf	??_setMemory_LoopSave
  7511  1D1F  0DA0               	rlf	??_setMemory_LoopSave,f
  7512  1D20  0DA0               	rlf	??_setMemory_LoopSave,f
  7513  1D21  0024               	movlb	4	; select bank4
  7514  1D22  0844               	movf	(_Memory^(0+512)+36),w
  7515  1D23  0020               	movlb	0	; select bank0
  7516  1D24  0620               	xorwf	??_setMemory_LoopSave,w
  7517  1D25  39FB               	andlw	-5
  7518  1D26  0620               	xorwf	??_setMemory_LoopSave,w
  7519  1D27  0024               	movlb	4	; select bank4
  7520  1D28  00C4               	movwf	(_Memory^(0+512)+36)
  7521  1D29  0008               	return
  7522  1D2A                     __end_of_setMemory_LoopSave:	
  7523                           
  7524                           	psect	text28
  7525  0B0A                     __ptext28:	
  7526 ;; *************** function _setControl_Lights_Table *****************
  7527 ;; Defined at:
  7528 ;;		line 322 in file "../src/RF_Control_B1.c"
  7529 ;; Parameters:    Size  Location     Type
  7530 ;;		None
  7531 ;; Auto vars:     Size  Location     Type
  7532 ;;		None
  7533 ;; Return value:  Size  Location     Type
  7534 ;;		None               void
  7535 ;; Registers used:
  7536 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7537 ;; Tracked objects:
  7538 ;;		On entry : 0/0
  7539 ;;		On exit  : 0/0
  7540 ;;		Unchanged: 0/0
  7541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7546 ;;Total ram usage:        0 bytes
  7547 ;; Hardware stack levels used:    1
  7548 ;; Hardware stack levels required when called:   11
  7549 ;; This function calls:
  7550 ;;		_setBuz
  7551 ;;		_setDimmerLights_ErrorClose
  7552 ;;		_setRFSW_AdjControl
  7553 ;;		_setRFSW_Control
  7554 ;;		_setTxData
  7555 ;; This function is called by:
  7556 ;;		_getRxData
  7557 ;; This function uses a non-reentrant model
  7558 ;;
  7559                           
  7560                           
  7561                           ;psect for function _setControl_Lights_Table
  7562  0B0A                     _setControl_Lights_Table:	
  7563                           
  7564                           ;RF_Control_B1.c: 323: switch (RF_Data[15]) {
  7565                           
  7566                           ;incstack = 0
  7567                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7568  0B0A  2B56               	goto	l6588
  7569  0B0B                     l6562:	
  7570                           ;RF_Control_B1.c: 324: case 0x00:
  7571                           
  7572                           
  7573                           ;RF_Control_B1.c: 326: setDimmerLights_ErrorClose(255);
  7574  0B0B  30FF               	movlw	255
  7575  0B0C  3188  2000  318B   	fcall	_setDimmerLights_ErrorClose
  7576                           
  7577                           ;RF_Control_B1.c: 328: product->Data[9]=0;
  7578  0B0F  0020               	movlb	0	; select bank0
  7579  0B10  086E               	movf	_product,w
  7580  0B11  3E09               	addlw	9
  7581  0B12  0086               	movwf	6
  7582  0B13  3002               	movlw	2	; select bank4/5
  7583  0B14  0087               	movwf	7
  7584  0B15  0181               	clrf	1
  7585                           
  7586                           ;RF_Control_B1.c: 329: product->Data[11]=0;
  7587  0B16  086E               	movf	_product,w
  7588  0B17  3E0B               	addlw	11
  7589  0B18  0086               	movwf	6
  7590  0B19  3002               	movlw	2	; select bank4/5
  7591  0B1A  0087               	movwf	7
  7592  0B1B  0181               	clrf	1
  7593                           
  7594                           ;RF_Control_B1.c: 330: product->Data[15]=0;
  7595  0B1C  086E               	movf	_product,w
  7596  0B1D  3E0F               	addlw	15
  7597  0B1E  0086               	movwf	6
  7598  0B1F  3002               	movlw	2	; select bank4/5
  7599  0B20  0087               	movwf	7
  7600  0B21  0181               	clrf	1
  7601                           
  7602                           ;RF_Control_B1.c: 331: product->Data[17]=0;
  7603  0B22  086E               	movf	_product,w
  7604  0B23  3E11               	addlw	17
  7605  0B24  0086               	movwf	6
  7606  0B25  3002               	movlw	2	; select bank4/5
  7607  0B26  0087               	movwf	7
  7608  0B27  0181               	clrf	1
  7609                           
  7610                           ;RF_Control_B1.c: 332: setBuz(1, 100);
  7611  0B28  3064               	movlw	100
  7612  0B29  00A9               	movwf	setBuz@time
  7613  0B2A  3000               	movlw	0
  7614  0B2B  00AA               	movwf	setBuz@time+1
  7615  0B2C  3001               	movlw	1
  7616  0B2D  3196  2696         	fcall	_setBuz
  7617                           
  7618                           ;RF_Control_B1.c: 334: break;
  7619  0B2F  0008               	return
  7620  0B30                     l6574:	
  7621                           ;RF_Control_B1.c: 335: case 0x20:
  7622                           
  7623                           
  7624                           ;RF_Control_B1.c: 336: product->Data[9]=0;
  7625  0B30  0020               	movlb	0	; select bank0
  7626  0B31  086E               	movf	_product,w
  7627  0B32  3E09               	addlw	9
  7628  0B33  0086               	movwf	6
  7629  0B34  3002               	movlw	2	; select bank4/5
  7630  0B35  0087               	movwf	7
  7631  0B36  0181               	clrf	1
  7632                           
  7633                           ;RF_Control_B1.c: 337: product->Data[11]=0;
  7634  0B37  086E               	movf	_product,w
  7635  0B38  3E0B               	addlw	11
  7636  0B39  0086               	movwf	6
  7637  0B3A  3002               	movlw	2	; select bank4/5
  7638  0B3B  0087               	movwf	7
  7639  0B3C  0181               	clrf	1
  7640                           
  7641                           ;RF_Control_B1.c: 338: product->Data[17]=0;
  7642  0B3D  086E               	movf	_product,w
  7643  0B3E  3E11               	addlw	17
  7644  0B3F  0086               	movwf	6
  7645  0B40  3002               	movlw	2	; select bank4/5
  7646  0B41  0087               	movwf	7
  7647  0B42  0181               	clrf	1
  7648                           
  7649                           ;RF_Control_B1.c: 339: setTxData();
  7650  0B43  3186  26FC         	fcall	_setTxData
  7651                           
  7652                           ;RF_Control_B1.c: 340: break;
  7653  0B45  0008               	return
  7654  0B46                     l6578:	
  7655                           ;RF_Control_B1.c: 341: case 0x01:
  7656                           
  7657                           
  7658                           ;RF_Control_B1.c: 343: setRFSW_Control(1);
  7659  0B46  3001               	movlw	1
  7660  0B47  3195  254B         	fcall	_setRFSW_Control
  7661                           
  7662                           ;RF_Control_B1.c: 345: break;
  7663  0B49  0008               	return
  7664  0B4A                     l6580:	
  7665                           ;RF_Control_B1.c: 346: case 0x02:
  7666                           
  7667                           
  7668                           ;RF_Control_B1.c: 348: setRFSW_Control(2);
  7669  0B4A  3002               	movlw	2
  7670  0B4B  3195  254B         	fcall	_setRFSW_Control
  7671                           
  7672                           ;RF_Control_B1.c: 355: break;
  7673                           
  7674                           ;RF_Control_B1.c: 351: case 0x03:
  7675                           
  7676                           ;RF_Control_B1.c: 350: break;
  7677  0B4D  0008               	return
  7678  0B4E                     l6582:	
  7679                           ;RF_Control_B1.c: 356: case 0x11:
  7680                           
  7681                           
  7682                           ;RF_Control_B1.c: 359: setRFSW_AdjControl(1);
  7683  0B4E  3001               	movlw	1
  7684  0B4F  3193  23DC         	fcall	_setRFSW_AdjControl
  7685                           
  7686                           ;RF_Control_B1.c: 362: break;
  7687  0B51  0008               	return
  7688  0B52                     l6584:	
  7689                           ;RF_Control_B1.c: 363: case 0x21:
  7690                           
  7691                           
  7692                           ;RF_Control_B1.c: 366: setRFSW_AdjControl(2);
  7693  0B52  3002               	movlw	2
  7694  0B53  3193  23DC         	fcall	_setRFSW_AdjControl
  7695                           
  7696                           ;RF_Control_B1.c: 377: }
  7697                           
  7698                           ;RF_Control_B1.c: 376: break;
  7699                           
  7700                           ;RF_Control_B1.c: 370: case 0x31:
  7701                           
  7702                           ;RF_Control_B1.c: 369: break;
  7703  0B55  0008               	return
  7704  0B56                     l6588:	
  7705  0B56  0023               	movlb	3	; select bank3
  7706  0B57  082F               	movf	(_RF_Data^(0+384)+15),w
  7707                           
  7708                           ; Switch size 1, requested type "space"
  7709                           ; Number of cases is 8, Range of values is 0 to 49
  7710                           ; switch strategies available:
  7711                           ; Name         Instructions Cycles
  7712                           ; simple_byte           25    13 (average)
  7713                           ; direct_byte          106     6 (fixed)
  7714                           ; jumptable            260     6 (fixed)
  7715                           ;	Chosen strategy is simple_byte
  7716  0B58  3A00               	xorlw	0	; case 0
  7717  0B59  1903               	skipnz
  7718  0B5A  2B0B               	goto	l6562
  7719  0B5B  3A01               	xorlw	1	; case 1
  7720  0B5C  1903               	skipnz
  7721  0B5D  2B46               	goto	l6578
  7722  0B5E  3A03               	xorlw	3	; case 2
  7723  0B5F  1903               	skipnz
  7724  0B60  2B4A               	goto	l6580
  7725  0B61  3A01               	xorlw	1	; case 3
  7726  0B62  1903               	skipnz
  7727  0B63  2B71               	goto	l2051
  7728  0B64  3A12               	xorlw	18	; case 17
  7729  0B65  1903               	skipnz
  7730  0B66  2B4E               	goto	l6582
  7731  0B67  3A31               	xorlw	49	; case 32
  7732  0B68  1903               	skipnz
  7733  0B69  2B30               	goto	l6574
  7734  0B6A  3A01               	xorlw	1	; case 33
  7735  0B6B  1903               	skipnz
  7736  0B6C  2B52               	goto	l6584
  7737  0B6D  3A10               	xorlw	16	; case 49
  7738  0B6E  1903               	skipnz
  7739  0B6F  2B71               	goto	l2051
  7740  0B70  2B71               	goto	l2051
  7741  0B71                     l2051:	
  7742  0B71  0008               	return
  7743  0B72                     __end_of_setControl_Lights_Table:	
  7744                           
  7745                           	psect	text29
  7746  154B                     __ptext29:	
  7747 ;; *************** function _setRFSW_Control *****************
  7748 ;; Defined at:
  7749 ;;		line 404 in file "../src/RF_Control_B1.c"
  7750 ;; Parameters:    Size  Location     Type
  7751 ;;  sw              1    wreg     unsigned char 
  7752 ;; Auto vars:     Size  Location     Type
  7753 ;;  sw              1   19[BANK0 ] unsigned char 
  7754 ;;  status          1   18[BANK0 ] unsigned char 
  7755 ;; Return value:  Size  Location     Type
  7756 ;;		None               void
  7757 ;; Registers used:
  7758 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7759 ;; Tracked objects:
  7760 ;;		On entry : 0/0
  7761 ;;		On exit  : 0/0
  7762 ;;		Unchanged: 0/0
  7763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7765 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7766 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7767 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7768 ;;Total ram usage:        3 bytes
  7769 ;; Hardware stack levels used:    1
  7770 ;; Hardware stack levels required when called:    9
  7771 ;; This function calls:
  7772 ;;		_getDelayOff_GO
  7773 ;;		_getDimmerLights_Status
  7774 ;;		_setBuz
  7775 ;;		_setDelayOff_GO
  7776 ;;		_setDimmerLights_SwOff
  7777 ;;		_setDimmerLights_SwOn
  7778 ;;		_setRF_DimmerLights
  7779 ;;		_setTxData
  7780 ;; This function is called by:
  7781 ;;		_setControl_Lights_Table
  7782 ;; This function uses a non-reentrant model
  7783 ;;
  7784                           
  7785                           
  7786                           ;psect for function _setRFSW_Control
  7787  154B                     _setRFSW_Control:	
  7788                           
  7789                           ;incstack = 0
  7790                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7791                           ;setRFSW_Control@sw stored from wreg
  7792  154B  0020               	movlb	0	; select bank0
  7793  154C  00B3               	movwf	setRFSW_Control@sw
  7794                           
  7795                           ;RF_Control_B1.c: 405: char status = 0;
  7796  154D  01B2               	clrf	setRFSW_Control@status
  7797                           
  7798                           ;RF_Control_B1.c: 408: if (RF_Data[16] == 0x80) {
  7799  154E  0023               	movlb	3	; select bank3
  7800  154F  0830               	movf	(_RF_Data^(0+384)+16),w
  7801  1550  3A80               	xorlw	128
  7802  1551  1D03               	skipz
  7803  1552  2D7E               	goto	l6386
  7804                           
  7805                           ;RF_Control_B1.c: 409: setDelayOff_GO(sw, 1, RF_Data[17]);
  7806  1553  0020               	movlb	0	; select bank0
  7807  1554  01AA               	clrf	setDelayOff_GO@command
  7808  1555  0AAA               	incf	setDelayOff_GO@command,f
  7809  1556  0023               	movlb	3	; select bank3
  7810  1557  0831               	movf	(_RF_Data^(0+384)+17),w
  7811  1558  0020               	movlb	0	; select bank0
  7812  1559  00B1               	movwf	??_setRFSW_Control
  7813  155A  0831               	movf	??_setRFSW_Control,w
  7814  155B  00AB               	movwf	setDelayOff_GO@value
  7815  155C  0833               	movf	setRFSW_Control@sw,w
  7816  155D  3188  205A  3195   	fcall	_setDelayOff_GO
  7817                           
  7818                           ;RF_Control_B1.c: 410: if (getDimmerLights_Status(sw) == 1) {
  7819  1560  0020               	movlb	0	; select bank0
  7820  1561  0833               	movf	setRFSW_Control@sw,w
  7821  1562  319C  2445  3195   	fcall	_getDimmerLights_Status
  7822  1565  3A01               	xorlw	1
  7823  1566  1D03               	skipz
  7824  1567  2D8D               	goto	l6390
  7825                           
  7826                           ;RF_Control_B1.c: 411: setBuz(1, 100);
  7827  1568  3064               	movlw	100
  7828  1569  0020               	movlb	0	; select bank0
  7829  156A  00A9               	movwf	setBuz@time
  7830  156B  3000               	movlw	0
  7831  156C  00AA               	movwf	setBuz@time+1
  7832  156D  3001               	movlw	1
  7833  156E  3196  2696  3195   	fcall	_setBuz
  7834                           
  7835                           ;RF_Control_B1.c: 412: status = 1;
  7836  1571  0020               	movlb	0	; select bank0
  7837  1572  01B2               	clrf	setRFSW_Control@status
  7838  1573  0AB2               	incf	setRFSW_Control@status,f
  7839                           
  7840                           ;RF_Control_B1.c: 413: setRF_DimmerLights(sw, 1);
  7841  1574  01A0               	clrf	setRF_DimmerLights@on
  7842  1575  0AA0               	incf	setRF_DimmerLights@on,f
  7843  1576  0833               	movf	setRFSW_Control@sw,w
  7844  1577  3197  2748  3195   	fcall	_setRF_DimmerLights
  7845                           
  7846                           ;RF_Control_B1.c: 414: setTxData();
  7847  157A  3186  26FC  3195   	fcall	_setTxData
  7848                           
  7849                           ;RF_Control_B1.c: 416: }
  7850                           ;RF_Control_B1.c: 417: } else {
  7851  157D  2D8D               	goto	l6390
  7852  157E                     l6386:	
  7853                           
  7854                           ;RF_Control_B1.c: 419: if (getDelayOff_GO(sw) == 1) {
  7855  157E  0020               	movlb	0	; select bank0
  7856  157F  0833               	movf	setRFSW_Control@sw,w
  7857  1580  319C  2455  3195   	fcall	_getDelayOff_GO
  7858  1583  3A01               	xorlw	1
  7859  1584  1D03               	skipz
  7860  1585  2D8D               	goto	l6390
  7861                           
  7862                           ;RF_Control_B1.c: 420: setDelayOff_GO(sw, 0, 0);
  7863  1586  0020               	movlb	0	; select bank0
  7864  1587  01AA               	clrf	setDelayOff_GO@command
  7865  1588  01AB               	clrf	setDelayOff_GO@value
  7866  1589  0833               	movf	setRFSW_Control@sw,w
  7867  158A  3188  205A  3195   	fcall	_setDelayOff_GO
  7868  158D                     l6390:	
  7869                           
  7870                           ;RF_Control_B1.c: 421: }
  7871                           ;RF_Control_B1.c: 423: }
  7872                           ;RF_Control_B1.c: 424: if (status == 0) {
  7873  158D  0020               	movlb	0	; select bank0
  7874  158E  08B2               	movf	setRFSW_Control@status,f
  7875  158F  1D03               	skipz
  7876  1590  0008               	return
  7877                           
  7878                           ;RF_Control_B1.c: 426: setDimmerLights_SwOn(sw);
  7879  1591  0833               	movf	setRFSW_Control@sw,w
  7880  1592  3193  2361  3195   	fcall	_setDimmerLights_SwOn
  7881                           
  7882                           ;RF_Control_B1.c: 427: setDimmerLights_SwOff(sw);
  7883  1595  0020               	movlb	0	; select bank0
  7884  1596  0833               	movf	setRFSW_Control@sw,w
  7885  1597  3194  241C         	fcall	_setDimmerLights_SwOff
  7886  1599  0008               	return
  7887  159A                     __end_of_setRFSW_Control:	
  7888                           
  7889                           	psect	text30
  7890  1361                     __ptext30:	
  7891 ;; *************** function _setDimmerLights_SwOn *****************
  7892 ;; Defined at:
  7893 ;;		line 517 in file "../src/Dimmer_B1.c"
  7894 ;; Parameters:    Size  Location     Type
  7895 ;;  sw              1    wreg     unsigned char 
  7896 ;; Auto vars:     Size  Location     Type
  7897 ;;  sw              1   15[BANK0 ] unsigned char 
  7898 ;;  idle            1   14[BANK0 ] unsigned char 
  7899 ;; Return value:  Size  Location     Type
  7900 ;;		None               void
  7901 ;; Registers used:
  7902 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7903 ;; Tracked objects:
  7904 ;;		On entry : 0/0
  7905 ;;		On exit  : 0/0
  7906 ;;		Unchanged: 0/0
  7907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7909 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7910 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7911 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7912 ;;Total ram usage:        3 bytes
  7913 ;; Hardware stack levels used:    1
  7914 ;; Hardware stack levels required when called:    7
  7915 ;; This function calls:
  7916 ;;		_DimmerLightsPointSelect
  7917 ;;		_getAll_DimmerLights_AdjGO
  7918 ;;		_setBuz
  7919 ;;		_setDimmerLights_Trigger
  7920 ;; This function is called by:
  7921 ;;		_setRFSW_Control
  7922 ;;		_setSw_Main
  7923 ;; This function uses a non-reentrant model
  7924 ;;
  7925                           
  7926                           
  7927                           ;psect for function _setDimmerLights_SwOn
  7928  1361                     _setDimmerLights_SwOn:	
  7929                           
  7930                           ;incstack = 0
  7931                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7932                           ;setDimmerLights_SwOn@sw stored from wreg
  7933  1361  0020               	movlb	0	; select bank0
  7934  1362  00AF               	movwf	setDimmerLights_SwOn@sw
  7935                           
  7936                           ;Dimmer_B1.c: 518: DimmerLightsPointSelect(sw);
  7937  1363  082F               	movf	setDimmerLights_SwOn@sw,w
  7938  1364  319C  24F1  3193   	fcall	_DimmerLightsPointSelect
  7939                           
  7940                           ;Dimmer_B1.c: 519: char idle = 0;
  7941  1367  0020               	movlb	0	; select bank0
  7942  1368  01AE               	clrf	setDimmerLights_SwOn@idle
  7943                           
  7944                           ;Dimmer_B1.c: 521: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
  7945  1369  319C  2476  3193   	fcall	_getAll_DimmerLights_AdjGO
  7946  136C  3A01               	xorlw	1
  7947  136D  3000               	movlw	0
  7948  136E  1903               	skipnz
  7949  136F  3001               	movlw	1
  7950  1370  0020               	movlb	0	; select bank0
  7951  1371  00AD               	movwf	??_setDimmerLights_SwOn
  7952  1372  082D               	movf	??_setDimmerLights_SwOn,w
  7953  1373  00AE               	movwf	setDimmerLights_SwOn@idle
  7954                           
  7955                           ;Dimmer_B1.c: 523: if (idle == 0) {
  7956  1374  08AE               	movf	setDimmerLights_SwOn@idle,f
  7957  1375  1D03               	skipz
  7958  1376  0008               	return
  7959                           
  7960                           ;Dimmer_B1.c: 524: DimmerLights->SwFlag = 1;
  7961  1377  086F               	movf	_DimmerLights,w
  7962  1378  3E09               	addlw	9
  7963  1379  0086               	movwf	6
  7964  137A  3001               	movlw	1	; select bank2/3
  7965  137B  0087               	movwf	7
  7966  137C  1701               	bsf	1,6
  7967                           
  7968                           ;Dimmer_B1.c: 525: setBuz(1, 100);
  7969  137D  3064               	movlw	100
  7970  137E  00A9               	movwf	setBuz@time
  7971  137F  3000               	movlw	0
  7972  1380  00AA               	movwf	setBuz@time+1
  7973  1381  3001               	movlw	1
  7974  1382  3196  2696  3193   	fcall	_setBuz
  7975                           
  7976                           ;Dimmer_B1.c: 526: if (DimmerLights->Status == 0) {
  7977  1385  0020               	movlb	0	; select bank0
  7978  1386  086F               	movf	_DimmerLights,w
  7979  1387  0086               	movwf	6
  7980  1388  3001               	movlw	1	; select bank2/3
  7981  1389  0087               	movwf	7
  7982  138A  1A81               	btfsc	1,5
  7983  138B  2B97               	goto	l6196
  7984                           
  7985                           ;Dimmer_B1.c: 527: DimmerLights->Status = 1;
  7986  138C  086F               	movf	_DimmerLights,w
  7987  138D  0086               	movwf	6
  7988  138E  3001               	movlw	1	; select bank2/3
  7989  138F  0087               	movwf	7
  7990  1390  1681               	bsf	1,5
  7991                           
  7992                           ;Dimmer_B1.c: 528: setDimmerLights_Trigger(sw, 1);
  7993  1391  01A2               	clrf	setDimmerLights_Trigger@command
  7994  1392  0AA2               	incf	setDimmerLights_Trigger@command,f
  7995  1393  082F               	movf	setDimmerLights_SwOn@sw,w
  7996  1394  319E  26BC         	fcall	_setDimmerLights_Trigger
  7997                           
  7998                           ;Dimmer_B1.c: 529: } else {
  7999  1396  0008               	return
  8000  1397                     l6196:	
  8001                           
  8002                           ;Dimmer_B1.c: 530: DimmerLights->Status = 0;
  8003  1397  0020               	movlb	0	; select bank0
  8004  1398  086F               	movf	_DimmerLights,w
  8005  1399  0086               	movwf	6
  8006  139A  3001               	movlw	1	; select bank2/3
  8007  139B  0087               	movwf	7
  8008  139C  1281               	bcf	1,5
  8009  139D  0008               	return
  8010  139E                     __end_of_setDimmerLights_SwOn:	
  8011                           
  8012                           	psect	text31
  8013  13DC                     __ptext31:	
  8014 ;; *************** function _setRFSW_AdjControl *****************
  8015 ;; Defined at:
  8016 ;;		line 433 in file "../src/RF_Control_B1.c"
  8017 ;; Parameters:    Size  Location     Type
  8018 ;;  sw              1    wreg     unsigned char 
  8019 ;; Auto vars:     Size  Location     Type
  8020 ;;  sw              1   74[BANK0 ] unsigned char 
  8021 ;;  status          1   73[BANK0 ] unsigned char 
  8022 ;; Return value:  Size  Location     Type
  8023 ;;		None               void
  8024 ;; Registers used:
  8025 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8026 ;; Tracked objects:
  8027 ;;		On entry : 0/0
  8028 ;;		On exit  : 0/0
  8029 ;;		Unchanged: 0/0
  8030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8032 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8033 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8034 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8035 ;;Total ram usage:        4 bytes
  8036 ;; Hardware stack levels used:    1
  8037 ;; Hardware stack levels required when called:   10
  8038 ;; This function calls:
  8039 ;;		_getDimmerLights_Status
  8040 ;;		_setMemory_Modify
  8041 ;;		_setRF_DimmerValue
  8042 ;;		_setTxData
  8043 ;; This function is called by:
  8044 ;;		_setControl_Lights_Table
  8045 ;; This function uses a non-reentrant model
  8046 ;;
  8047                           
  8048                           
  8049                           ;psect for function _setRFSW_AdjControl
  8050  13DC                     _setRFSW_AdjControl:	
  8051                           
  8052                           ;incstack = 0
  8053                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8054                           ;setRFSW_AdjControl@sw stored from wreg
  8055  13DC  0020               	movlb	0	; select bank0
  8056  13DD  00EA               	movwf	setRFSW_AdjControl@sw
  8057                           
  8058                           ;RF_Control_B1.c: 434: char status = 0;
  8059  13DE  01E9               	clrf	setRFSW_AdjControl@status
  8060                           
  8061                           ;RF_Control_B1.c: 436: status = getDimmerLights_Status(sw);
  8062  13DF  086A               	movf	setRFSW_AdjControl@sw,w
  8063  13E0  319C  2445  3193   	fcall	_getDimmerLights_Status
  8064  13E3  0020               	movlb	0	; select bank0
  8065  13E4  00E7               	movwf	??_setRFSW_AdjControl
  8066  13E5  0867               	movf	??_setRFSW_AdjControl,w
  8067  13E6  00E9               	movwf	setRFSW_AdjControl@status
  8068                           
  8069                           ;RF_Control_B1.c: 439: if (status == 1) {
  8070  13E7  0869               	movf	setRFSW_AdjControl@status,w
  8071  13E8  3A01               	xorlw	1
  8072  13E9  1D03               	skipz
  8073  13EA  2BF5               	goto	l6404
  8074                           
  8075                           ;RF_Control_B1.c: 440: setMemory_Modify(1);
  8076  13EB  3001               	movlw	1
  8077  13EC  319D  2504  3193   	fcall	_setMemory_Modify
  8078                           
  8079                           ;RF_Control_B1.c: 441: setRF_DimmerValue(sw);
  8080  13EF  0020               	movlb	0	; select bank0
  8081  13F0  086A               	movf	setRFSW_AdjControl@sw,w
  8082  13F1  3191  21B9  3193   	fcall	_setRF_DimmerValue
  8083                           
  8084                           ;RF_Control_B1.c: 442: } else {
  8085  13F4  2C07               	goto	l2063
  8086  13F5                     l6404:	
  8087                           
  8088                           ;RF_Control_B1.c: 443: product->Data[9]=product->Data[20 + sw];
  8089  13F5  0020               	movlb	0	; select bank0
  8090  13F6  086A               	movf	setRFSW_AdjControl@sw,w
  8091  13F7  3E14               	addlw	20
  8092  13F8  076E               	addwf	_product,w
  8093  13F9  00E7               	movwf	??_setRFSW_AdjControl
  8094  13FA  0867               	movf	??_setRFSW_AdjControl,w
  8095  13FB  0086               	movwf	6
  8096  13FC  3002               	movlw	2	; select bank4/5
  8097  13FD  0087               	movwf	7
  8098  13FE  0801               	movf	1,w
  8099  13FF  00E8               	movwf	??_setRFSW_AdjControl+1
  8100  1400  086E               	movf	_product,w
  8101  1401  3E09               	addlw	9
  8102  1402  0086               	movwf	6
  8103  1403  3002               	movlw	2	; select bank4/5
  8104  1404  0087               	movwf	7
  8105  1405  0868               	movf	??_setRFSW_AdjControl+1,w
  8106  1406  0081               	movwf	1
  8107  1407                     l2063:	
  8108                           
  8109                           ;RF_Control_B1.c: 444: }
  8110                           ;RF_Control_B1.c: 445: product->Data[17]=product->Data[26 + sw];
  8111  1407  0020               	movlb	0	; select bank0
  8112  1408  086A               	movf	setRFSW_AdjControl@sw,w
  8113  1409  3E1A               	addlw	26
  8114  140A  076E               	addwf	_product,w
  8115  140B  00E7               	movwf	??_setRFSW_AdjControl
  8116  140C  0867               	movf	??_setRFSW_AdjControl,w
  8117  140D  0086               	movwf	6
  8118  140E  3002               	movlw	2	; select bank4/5
  8119  140F  0087               	movwf	7
  8120  1410  0801               	movf	1,w
  8121  1411  00E8               	movwf	??_setRFSW_AdjControl+1
  8122  1412  086E               	movf	_product,w
  8123  1413  3E11               	addlw	17
  8124  1414  0086               	movwf	6
  8125  1415  3002               	movlw	2	; select bank4/5
  8126  1416  0087               	movwf	7
  8127  1417  0868               	movf	??_setRFSW_AdjControl+1,w
  8128  1418  0081               	movwf	1
  8129                           
  8130                           ;RF_Control_B1.c: 446: setTxData();
  8131  1419  3186  26FC         	fcall	_setTxData
  8132  141B  0008               	return
  8133  141C                     __end_of_setRFSW_AdjControl:	
  8134                           
  8135                           	psect	text32
  8136  11B9                     __ptext32:	
  8137 ;; *************** function _setRF_DimmerValue *****************
  8138 ;; Defined at:
  8139 ;;		line 451 in file "../src/RF_Control_B1.c"
  8140 ;; Parameters:    Size  Location     Type
  8141 ;;  lights          1    wreg     unsigned char 
  8142 ;; Auto vars:     Size  Location     Type
  8143 ;;  lights          1   70[BANK0 ] unsigned char 
  8144 ;; Return value:  Size  Location     Type
  8145 ;;		None               void
  8146 ;; Registers used:
  8147 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8148 ;; Tracked objects:
  8149 ;;		On entry : 0/0
  8150 ;;		On exit  : 0/0
  8151 ;;		Unchanged: 0/0
  8152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8154 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8155 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8156 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8157 ;;Total ram usage:        3 bytes
  8158 ;; Hardware stack levels used:    1
  8159 ;; Hardware stack levels required when called:    9
  8160 ;; This function calls:
  8161 ;;		_setDimmerLights_AdjRF
  8162 ;; This function is called by:
  8163 ;;		_setRFSW_AdjControl
  8164 ;; This function uses a non-reentrant model
  8165 ;;
  8166                           
  8167                           
  8168                           ;psect for function _setRF_DimmerValue
  8169  11B9                     _setRF_DimmerValue:	
  8170                           
  8171                           ;incstack = 0
  8172                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8173                           ;setRF_DimmerValue@lights stored from wreg
  8174  11B9  0020               	movlb	0	; select bank0
  8175  11BA  00E6               	movwf	setRF_DimmerValue@lights
  8176                           
  8177                           ;RF_Control_B1.c: 452: if (RF_Data[9] > 0x64) {
  8178  11BB  3065               	movlw	101
  8179  11BC  0023               	movlb	3	; select bank3
  8180  11BD  0229               	subwf	(_RF_Data^(0+384)+9),w
  8181  11BE  1C03               	skipc
  8182  11BF  29C6               	goto	l6282
  8183                           
  8184                           ;RF_Control_B1.c: 453: RF_Data[9] = 0x64;
  8185  11C0  3064               	movlw	100
  8186  11C1  0020               	movlb	0	; select bank0
  8187  11C2  00E4               	movwf	??_setRF_DimmerValue
  8188  11C3  0864               	movf	??_setRF_DimmerValue,w
  8189  11C4  0023               	movlb	3	; select bank3
  8190  11C5  00A9               	movwf	(_RF_Data^(0+384)+9)
  8191  11C6                     l6282:	
  8192                           
  8193                           ;RF_Control_B1.c: 454: }
  8194                           ;RF_Control_B1.c: 455: product->Data[9]=RF_Data[9];
  8195  11C6  0829               	movf	(_RF_Data^(0+384)+9),w
  8196  11C7  0020               	movlb	0	; select bank0
  8197  11C8  00E4               	movwf	??_setRF_DimmerValue
  8198  11C9  086E               	movf	_product,w
  8199  11CA  3E09               	addlw	9
  8200  11CB  0086               	movwf	6
  8201  11CC  3002               	movlw	2	; select bank4/5
  8202  11CD  0087               	movwf	7
  8203  11CE  0864               	movf	??_setRF_DimmerValue,w
  8204  11CF  0081               	movwf	1
  8205                           
  8206                           ;RF_Control_B1.c: 456: product->Data[11]=lights;
  8207  11D0  0866               	movf	setRF_DimmerValue@lights,w
  8208  11D1  00E4               	movwf	??_setRF_DimmerValue
  8209  11D2  086E               	movf	_product,w
  8210  11D3  3E0B               	addlw	11
  8211  11D4  0086               	movwf	6
  8212  11D5  3002               	movlw	2	; select bank4/5
  8213  11D6  0087               	movwf	7
  8214  11D7  0864               	movf	??_setRF_DimmerValue,w
  8215  11D8  0081               	movwf	1
  8216                           
  8217                           ;RF_Control_B1.c: 457: product->Data[(20 + lights)]=RF_Data[9];
  8218  11D9  0023               	movlb	3	; select bank3
  8219  11DA  0829               	movf	(_RF_Data^(0+384)+9),w
  8220  11DB  0020               	movlb	0	; select bank0
  8221  11DC  00E4               	movwf	??_setRF_DimmerValue
  8222  11DD  0866               	movf	setRF_DimmerValue@lights,w
  8223  11DE  3E14               	addlw	20
  8224  11DF  076E               	addwf	_product,w
  8225  11E0  00E5               	movwf	??_setRF_DimmerValue+1
  8226  11E1  0865               	movf	??_setRF_DimmerValue+1,w
  8227  11E2  0086               	movwf	6
  8228  11E3  3002               	movlw	2	; select bank4/5
  8229  11E4  0087               	movwf	7
  8230  11E5  0864               	movf	??_setRF_DimmerValue,w
  8231  11E6  0081               	movwf	1
  8232                           
  8233                           ;RF_Control_B1.c: 458: setDimmerLights_AdjRF(lights);
  8234  11E7  0866               	movf	setRF_DimmerValue@lights,w
  8235  11E8  319F  27DD         	fcall	_setDimmerLights_AdjRF
  8236  11EA  0008               	return
  8237  11EB                     __end_of_setRF_DimmerValue:	
  8238                           
  8239                           	psect	text33
  8240  1FDD                     __ptext33:	
  8241 ;; *************** function _setDimmerLights_AdjRF *****************
  8242 ;; Defined at:
  8243 ;;		line 758 in file "../src/Dimmer_B1.c"
  8244 ;; Parameters:    Size  Location     Type
  8245 ;;  lights          1    wreg     unsigned char 
  8246 ;; Auto vars:     Size  Location     Type
  8247 ;;  lights          1   67[BANK0 ] unsigned char 
  8248 ;; Return value:  Size  Location     Type
  8249 ;;		None               void
  8250 ;; Registers used:
  8251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8252 ;; Tracked objects:
  8253 ;;		On entry : 0/0
  8254 ;;		On exit  : 0/0
  8255 ;;		Unchanged: 0/0
  8256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8259 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8260 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8261 ;;Total ram usage:        2 bytes
  8262 ;; Hardware stack levels used:    1
  8263 ;; Hardware stack levels required when called:    8
  8264 ;; This function calls:
  8265 ;;		_DimmerLightsPointSelect
  8266 ;;		_getPercentValue
  8267 ;; This function is called by:
  8268 ;;		_setRF_DimmerValue
  8269 ;; This function uses a non-reentrant model
  8270 ;;
  8271                           
  8272                           
  8273                           ;psect for function _setDimmerLights_AdjRF
  8274  1FDD                     _setDimmerLights_AdjRF:	
  8275                           
  8276                           ;incstack = 0
  8277                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8278                           ;setDimmerLights_AdjRF@lights stored from wreg
  8279  1FDD  0020               	movlb	0	; select bank0
  8280  1FDE  00E3               	movwf	setDimmerLights_AdjRF@lights
  8281                           
  8282                           ;Dimmer_B1.c: 759: DimmerLightsPointSelect(lights);
  8283  1FDF  0863               	movf	setDimmerLights_AdjRF@lights,w
  8284  1FE0  319C  24F1  319F   	fcall	_DimmerLightsPointSelect
  8285                           
  8286                           ;Dimmer_B1.c: 760: DimmerLights->AdjRF = 1;
  8287  1FE3  0020               	movlb	0	; select bank0
  8288  1FE4  086F               	movf	_DimmerLights,w
  8289  1FE5  0086               	movwf	6
  8290  1FE6  3001               	movlw	1	; select bank2/3
  8291  1FE7  0087               	movwf	7
  8292  1FE8  1501               	bsf	1,2
  8293                           
  8294                           ;Dimmer_B1.c: 761: DimmerLights->Signal = 1;
  8295  1FE9  086F               	movf	_DimmerLights,w
  8296  1FEA  0086               	movwf	6
  8297  1FEB  3001               	movlw	1	; select bank2/3
  8298  1FEC  0087               	movwf	7
  8299  1FED  1481               	bsf	1,1
  8300                           
  8301                           ;Dimmer_B1.c: 762: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8302  1FEE  086E               	movf	_product,w
  8303  1FEF  3E09               	addlw	9
  8304  1FF0  0086               	movwf	6
  8305  1FF1  3002               	movlw	2	; select bank4/5
  8306  1FF2  0087               	movwf	7
  8307  1FF3  0801               	movf	1,w
  8308  1FF4  318A  223F         	fcall	_getPercentValue
  8309  1FF6  0020               	movlb	0	; select bank0
  8310  1FF7  00E2               	movwf	??_setDimmerLights_AdjRF
  8311  1FF8  086F               	movf	_DimmerLights,w
  8312  1FF9  3E05               	addlw	5
  8313  1FFA  0086               	movwf	6
  8314  1FFB  3001               	movlw	1	; select bank2/3
  8315  1FFC  0087               	movwf	7
  8316  1FFD  0862               	movf	??_setDimmerLights_AdjRF,w
  8317  1FFE  0081               	movwf	1
  8318  1FFF  0008               	return
  8319  2000                     __end_of_setDimmerLights_AdjRF:	
  8320                           
  8321                           	psect	text34
  8322  0A3F                     __ptext34:	
  8323 ;; *************** function _getPercentValue *****************
  8324 ;; Defined at:
  8325 ;;		line 870 in file "../src/Dimmer_B1.c"
  8326 ;; Parameters:    Size  Location     Type
  8327 ;;  value           1    wreg     unsigned char 
  8328 ;; Auto vars:     Size  Location     Type
  8329 ;;  value           1   62[BANK0 ] unsigned char 
  8330 ;;  i               3   63[BANK0 ] float 
  8331 ;; Return value:  Size  Location     Type
  8332 ;;                  1    wreg      unsigned char 
  8333 ;; Registers used:
  8334 ;;		wreg, status,2, status,0, pclath, cstack
  8335 ;; Tracked objects:
  8336 ;;		On entry : 0/0
  8337 ;;		On exit  : 0/0
  8338 ;;		Unchanged: 0/0
  8339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8341 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8342 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8343 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8344 ;;Total ram usage:        6 bytes
  8345 ;; Hardware stack levels used:    1
  8346 ;; Hardware stack levels required when called:    7
  8347 ;; This function calls:
  8348 ;;		___awtoft
  8349 ;;		___ftadd
  8350 ;;		___ftdiv
  8351 ;;		___ftmul
  8352 ;;		___ftneg
  8353 ;;		___fttol
  8354 ;; This function is called by:
  8355 ;;		_setDimmerLights_AdjRF
  8356 ;; This function uses a non-reentrant model
  8357 ;;
  8358                           
  8359                           
  8360                           ;psect for function _getPercentValue
  8361  0A3F                     _getPercentValue:	
  8362                           
  8363                           ;incstack = 0
  8364                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8365                           ;getPercentValue@value stored from wreg
  8366  0A3F  0020               	movlb	0	; select bank0
  8367  0A40  00DE               	movwf	getPercentValue@value
  8368                           
  8369                           ;Dimmer_B1.c: 878: float i = ((char)(80*0.8)) - ((char)(15*0.8));
  8370  0A41  3000               	movlw	0
  8371  0A42  00DF               	movwf	getPercentValue@i
  8372  0A43  3050               	movlw	80
  8373  0A44  00E0               	movwf	getPercentValue@i+1
  8374  0A45  3042               	movlw	66
  8375  0A46  00E1               	movwf	getPercentValue@i+2
  8376                           
  8377                           ;Dimmer_B1.c: 879: i /= 100;
  8378  0A47  3000               	movlw	0
  8379  0A48  00AE               	movwf	___ftdiv@f2
  8380  0A49  30C8               	movlw	200
  8381  0A4A  00AF               	movwf	___ftdiv@f2+1
  8382  0A4B  3042               	movlw	66
  8383  0A4C  00B0               	movwf	___ftdiv@f2+2
  8384  0A4D  085F               	movf	getPercentValue@i,w
  8385  0A4E  00B1               	movwf	___ftdiv@f1
  8386  0A4F  0860               	movf	getPercentValue@i+1,w
  8387  0A50  00B2               	movwf	___ftdiv@f1+1
  8388  0A51  0861               	movf	getPercentValue@i+2,w
  8389  0A52  00B3               	movwf	___ftdiv@f1+2
  8390  0A53  318D  25E8  318A   	fcall	___ftdiv
  8391  0A56  0020               	movlb	0	; select bank0
  8392  0A57  082E               	movf	?___ftdiv,w
  8393  0A58  00DF               	movwf	getPercentValue@i
  8394  0A59  082F               	movf	?___ftdiv+1,w
  8395  0A5A  00E0               	movwf	getPercentValue@i+1
  8396  0A5B  0830               	movf	?___ftdiv+2,w
  8397  0A5C  00E1               	movwf	getPercentValue@i+2
  8398                           
  8399                           ;Dimmer_B1.c: 881: return (char) (((char)(80*0.8)) - ((100 - value) * i));
  8400  0A5D  085E               	movf	getPercentValue@value,w
  8401  0A5E  00DC               	movwf	??_getPercentValue
  8402  0A5F  01DD               	clrf	??_getPercentValue+1
  8403  0A60  09DC               	comf	??_getPercentValue,f
  8404  0A61  09DD               	comf	??_getPercentValue+1,f
  8405  0A62  0ADC               	incf	??_getPercentValue,f
  8406  0A63  1903               	skipnz
  8407  0A64  0ADD               	incf	??_getPercentValue+1,f
  8408  0A65  085C               	movf	??_getPercentValue,w
  8409  0A66  3E64               	addlw	100
  8410  0A67  00A8               	movwf	___awtoft@c
  8411  0A68  3000               	movlw	0
  8412  0A69  3D5D               	addwfc	??_getPercentValue+1,w
  8413  0A6A  00A9               	movwf	___awtoft@c+1
  8414  0A6B  319F  2799  318A   	fcall	___awtoft
  8415  0A6E  0020               	movlb	0	; select bank0
  8416  0A6F  0828               	movf	?___awtoft,w
  8417  0A70  00B1               	movwf	___ftmul@f2
  8418  0A71  0829               	movf	?___awtoft+1,w
  8419  0A72  00B2               	movwf	___ftmul@f2+1
  8420  0A73  082A               	movf	?___awtoft+2,w
  8421  0A74  00B3               	movwf	___ftmul@f2+2
  8422  0A75  085F               	movf	getPercentValue@i,w
  8423  0A76  00AE               	movwf	___ftmul@f1
  8424  0A77  0860               	movf	getPercentValue@i+1,w
  8425  0A78  00AF               	movwf	___ftmul@f1+1
  8426  0A79  0861               	movf	getPercentValue@i+2,w
  8427  0A7A  00B0               	movwf	___ftmul@f1+2
  8428  0A7B  318E  2691  318A   	fcall	___ftmul
  8429  0A7E  0020               	movlb	0	; select bank0
  8430  0A7F  082E               	movf	?___ftmul,w
  8431  0A80  00BE               	movwf	___ftneg@f1
  8432  0A81  082F               	movf	?___ftmul+1,w
  8433  0A82  00BF               	movwf	___ftneg@f1+1
  8434  0A83  0830               	movf	?___ftmul+2,w
  8435  0A84  00C0               	movwf	___ftneg@f1+2
  8436  0A85  319B  2399  318A   	fcall	___ftneg
  8437  0A88  0020               	movlb	0	; select bank0
  8438  0A89  083E               	movf	?___ftneg,w
  8439  0A8A  00C4               	movwf	___ftadd@f2
  8440  0A8B  083F               	movf	?___ftneg+1,w
  8441  0A8C  00C5               	movwf	___ftadd@f2+1
  8442  0A8D  0840               	movf	?___ftneg+2,w
  8443  0A8E  00C6               	movwf	___ftadd@f2+2
  8444  0A8F  3000               	movlw	0
  8445  0A90  00C1               	movwf	___ftadd@f1
  8446  0A91  3080               	movlw	128
  8447  0A92  00C2               	movwf	___ftadd@f1+1
  8448  0A93  3042               	movlw	66
  8449  0A94  00C3               	movwf	___ftadd@f1+2
  8450  0A95  3184  243A  318A   	fcall	___ftadd
  8451  0A98  0020               	movlb	0	; select bank0
  8452  0A99  0841               	movf	?___ftadd,w
  8453  0A9A  00CE               	movwf	___fttol@f1
  8454  0A9B  0842               	movf	?___ftadd+1,w
  8455  0A9C  00CF               	movwf	___fttol@f1+1
  8456  0A9D  0843               	movf	?___ftadd+2,w
  8457  0A9E  00D0               	movwf	___fttol@f1+2
  8458  0A9F  318C  24D8         	fcall	___fttol
  8459  0AA1  0020               	movlb	0	; select bank0
  8460  0AA2  084E               	movf	?___fttol,w
  8461  0AA3  0008               	return
  8462  0AA4                     __end_of_getPercentValue:	
  8463                           
  8464                           	psect	text35
  8465  0E91                     __ptext35:	
  8466 ;; *************** function ___ftmul *****************
  8467 ;; Defined at:
  8468 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8469 ;; Parameters:    Size  Location     Type
  8470 ;;  f1              3   14[BANK0 ] float 
  8471 ;;  f2              3   17[BANK0 ] float 
  8472 ;; Auto vars:     Size  Location     Type
  8473 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8474 ;;  sign            1   29[BANK0 ] unsigned char 
  8475 ;;  cntr            1   28[BANK0 ] unsigned char 
  8476 ;;  exp             1   24[BANK0 ] unsigned char 
  8477 ;; Return value:  Size  Location     Type
  8478 ;;                  3   14[BANK0 ] float 
  8479 ;; Registers used:
  8480 ;;		wreg, status,2, status,0, pclath, cstack
  8481 ;; Tracked objects:
  8482 ;;		On entry : 0/0
  8483 ;;		On exit  : 0/0
  8484 ;;		Unchanged: 0/0
  8485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8486 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8487 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8488 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;Total ram usage:       16 bytes
  8491 ;; Hardware stack levels used:    1
  8492 ;; Hardware stack levels required when called:    6
  8493 ;; This function calls:
  8494 ;;		___ftpack
  8495 ;; This function is called by:
  8496 ;;		_getPercentValue
  8497 ;; This function uses a non-reentrant model
  8498 ;;
  8499                           
  8500                           
  8501                           ;psect for function ___ftmul
  8502  0E91                     ___ftmul:	
  8503                           
  8504                           ;incstack = 0
  8505                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8506  0E91  0020               	movlb	0	; select bank0
  8507  0E92  082E               	movf	___ftmul@f1,w
  8508  0E93  00B4               	movwf	??___ftmul
  8509  0E94  082F               	movf	___ftmul@f1+1,w
  8510  0E95  00B5               	movwf	??___ftmul+1
  8511  0E96  0830               	movf	___ftmul@f1+2,w
  8512  0E97  00B6               	movwf	??___ftmul+2
  8513  0E98  1003               	clrc
  8514  0E99  0D35               	rlf	??___ftmul+1,w
  8515  0E9A  0D36               	rlf	??___ftmul+2,w
  8516  0E9B  00B7               	movwf	??___ftmul+3
  8517  0E9C  0837               	movf	??___ftmul+3,w
  8518  0E9D  00B8               	movwf	___ftmul@exp
  8519  0E9E  08B8               	movf	___ftmul@exp,f
  8520  0E9F  1D03               	skipz
  8521  0EA0  2EA8               	goto	l5898
  8522  0EA1  3000               	movlw	0
  8523  0EA2  00AE               	movwf	?___ftmul
  8524  0EA3  3000               	movlw	0
  8525  0EA4  00AF               	movwf	?___ftmul+1
  8526  0EA5  3000               	movlw	0
  8527  0EA6  00B0               	movwf	?___ftmul+2
  8528  0EA7  0008               	return
  8529  0EA8                     l5898:	
  8530  0EA8  0831               	movf	___ftmul@f2,w
  8531  0EA9  00B4               	movwf	??___ftmul
  8532  0EAA  0832               	movf	___ftmul@f2+1,w
  8533  0EAB  00B5               	movwf	??___ftmul+1
  8534  0EAC  0833               	movf	___ftmul@f2+2,w
  8535  0EAD  00B6               	movwf	??___ftmul+2
  8536  0EAE  1003               	clrc
  8537  0EAF  0D35               	rlf	??___ftmul+1,w
  8538  0EB0  0D36               	rlf	??___ftmul+2,w
  8539  0EB1  00B7               	movwf	??___ftmul+3
  8540  0EB2  0837               	movf	??___ftmul+3,w
  8541  0EB3  00BD               	movwf	___ftmul@sign
  8542  0EB4  08BD               	movf	___ftmul@sign,f
  8543  0EB5  1D03               	skipz
  8544  0EB6  2EBE               	goto	l5904
  8545  0EB7  3000               	movlw	0
  8546  0EB8  00AE               	movwf	?___ftmul
  8547  0EB9  3000               	movlw	0
  8548  0EBA  00AF               	movwf	?___ftmul+1
  8549  0EBB  3000               	movlw	0
  8550  0EBC  00B0               	movwf	?___ftmul+2
  8551  0EBD  0008               	return
  8552  0EBE                     l5904:	
  8553  0EBE  083D               	movf	___ftmul@sign,w
  8554  0EBF  3E7B               	addlw	123
  8555  0EC0  00B4               	movwf	??___ftmul
  8556  0EC1  0834               	movf	??___ftmul,w
  8557  0EC2  07B8               	addwf	___ftmul@exp,f
  8558  0EC3  082E               	movf	___ftmul@f1,w
  8559  0EC4  00B4               	movwf	??___ftmul
  8560  0EC5  082F               	movf	___ftmul@f1+1,w
  8561  0EC6  00B5               	movwf	??___ftmul+1
  8562  0EC7  0830               	movf	___ftmul@f1+2,w
  8563  0EC8  00B6               	movwf	??___ftmul+2
  8564  0EC9  3010               	movlw	16
  8565  0ECA                     u4685:	
  8566  0ECA  36B6               	lsrf	??___ftmul+2,f
  8567  0ECB  0CB5               	rrf	??___ftmul+1,f
  8568  0ECC  0CB4               	rrf	??___ftmul,f
  8569  0ECD  0B89               	decfsz	9,f
  8570  0ECE  2ECA               	goto	u4685
  8571  0ECF  0834               	movf	??___ftmul,w
  8572  0ED0  00B7               	movwf	??___ftmul+3
  8573  0ED1  0837               	movf	??___ftmul+3,w
  8574  0ED2  00BD               	movwf	___ftmul@sign
  8575  0ED3  0831               	movf	___ftmul@f2,w
  8576  0ED4  00B4               	movwf	??___ftmul
  8577  0ED5  0832               	movf	___ftmul@f2+1,w
  8578  0ED6  00B5               	movwf	??___ftmul+1
  8579  0ED7  0833               	movf	___ftmul@f2+2,w
  8580  0ED8  00B6               	movwf	??___ftmul+2
  8581  0ED9  3010               	movlw	16
  8582  0EDA                     u4695:	
  8583  0EDA  36B6               	lsrf	??___ftmul+2,f
  8584  0EDB  0CB5               	rrf	??___ftmul+1,f
  8585  0EDC  0CB4               	rrf	??___ftmul,f
  8586  0EDD  0B89               	decfsz	9,f
  8587  0EDE  2EDA               	goto	u4695
  8588  0EDF  0834               	movf	??___ftmul,w
  8589  0EE0  00B7               	movwf	??___ftmul+3
  8590  0EE1  0837               	movf	??___ftmul+3,w
  8591  0EE2  06BD               	xorwf	___ftmul@sign,f
  8592  0EE3  3080               	movlw	128
  8593  0EE4  00B4               	movwf	??___ftmul
  8594  0EE5  0834               	movf	??___ftmul,w
  8595  0EE6  05BD               	andwf	___ftmul@sign,f
  8596  0EE7  17AF               	bsf	___ftmul@f1+1,7
  8597  0EE8  17B2               	bsf	___ftmul@f2+1,7
  8598  0EE9  30FF               	movlw	255
  8599  0EEA  05B1               	andwf	___ftmul@f2,f
  8600  0EEB  30FF               	movlw	255
  8601  0EEC  05B2               	andwf	___ftmul@f2+1,f
  8602  0EED  3000               	movlw	0
  8603  0EEE  05B3               	andwf	___ftmul@f2+2,f
  8604  0EEF  3000               	movlw	0
  8605  0EF0  00B9               	movwf	___ftmul@f3_as_product
  8606  0EF1  3000               	movlw	0
  8607  0EF2  00BA               	movwf	___ftmul@f3_as_product+1
  8608  0EF3  3000               	movlw	0
  8609  0EF4  00BB               	movwf	___ftmul@f3_as_product+2
  8610  0EF5  3007               	movlw	7
  8611  0EF6  00B4               	movwf	??___ftmul
  8612  0EF7  0834               	movf	??___ftmul,w
  8613  0EF8  00BC               	movwf	___ftmul@cntr
  8614  0EF9                     l5916:	
  8615  0EF9  1C2E               	btfss	___ftmul@f1,0
  8616  0EFA  2F01               	goto	l5920
  8617  0EFB  0831               	movf	___ftmul@f2,w
  8618  0EFC  07B9               	addwf	___ftmul@f3_as_product,f
  8619  0EFD  0832               	movf	___ftmul@f2+1,w
  8620  0EFE  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8621  0EFF  0833               	movf	___ftmul@f2+2,w
  8622  0F00  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8623  0F01                     l5920:	
  8624  0F01  3001               	movlw	1
  8625  0F02                     u4715:	
  8626  0F02  36B0               	lsrf	___ftmul@f1+2,f
  8627  0F03  0CAF               	rrf	___ftmul@f1+1,f
  8628  0F04  0CAE               	rrf	___ftmul@f1,f
  8629  0F05  0B89               	decfsz	9,f
  8630  0F06  2F02               	goto	u4715
  8631  0F07  3001               	movlw	1
  8632  0F08                     u4725:	
  8633  0F08  35B1               	lslf	___ftmul@f2,f
  8634  0F09  0DB2               	rlf	___ftmul@f2+1,f
  8635  0F0A  0DB3               	rlf	___ftmul@f2+2,f
  8636  0F0B  0B89               	decfsz	9,f
  8637  0F0C  2F08               	goto	u4725
  8638  0F0D  3001               	movlw	1
  8639  0F0E  02BC               	subwf	___ftmul@cntr,f
  8640  0F0F  1D03               	btfss	3,2
  8641  0F10  2EF9               	goto	l5916
  8642  0F11  3009               	movlw	9
  8643  0F12  00B4               	movwf	??___ftmul
  8644  0F13  0834               	movf	??___ftmul,w
  8645  0F14  00BC               	movwf	___ftmul@cntr
  8646  0F15                     l5928:	
  8647  0F15  1C2E               	btfss	___ftmul@f1,0
  8648  0F16  2F1D               	goto	l5932
  8649  0F17  0831               	movf	___ftmul@f2,w
  8650  0F18  07B9               	addwf	___ftmul@f3_as_product,f
  8651  0F19  0832               	movf	___ftmul@f2+1,w
  8652  0F1A  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8653  0F1B  0833               	movf	___ftmul@f2+2,w
  8654  0F1C  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8655  0F1D                     l5932:	
  8656  0F1D  3001               	movlw	1
  8657  0F1E                     u4755:	
  8658  0F1E  36B0               	lsrf	___ftmul@f1+2,f
  8659  0F1F  0CAF               	rrf	___ftmul@f1+1,f
  8660  0F20  0CAE               	rrf	___ftmul@f1,f
  8661  0F21  0B89               	decfsz	9,f
  8662  0F22  2F1E               	goto	u4755
  8663  0F23  3001               	movlw	1
  8664  0F24                     u4765:	
  8665  0F24  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8666  0F25  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8667  0F26  0CB9               	rrf	___ftmul@f3_as_product,f
  8668  0F27  0B89               	decfsz	9,f
  8669  0F28  2F24               	goto	u4765
  8670  0F29  3001               	movlw	1
  8671  0F2A  02BC               	subwf	___ftmul@cntr,f
  8672  0F2B  1D03               	btfss	3,2
  8673  0F2C  2F15               	goto	l5928
  8674  0F2D  0839               	movf	___ftmul@f3_as_product,w
  8675  0F2E  00A0               	movwf	___ftpack@arg
  8676  0F2F  083A               	movf	___ftmul@f3_as_product+1,w
  8677  0F30  00A1               	movwf	___ftpack@arg+1
  8678  0F31  083B               	movf	___ftmul@f3_as_product+2,w
  8679  0F32  00A2               	movwf	___ftpack@arg+2
  8680  0F33  0838               	movf	___ftmul@exp,w
  8681  0F34  00B4               	movwf	??___ftmul
  8682  0F35  0834               	movf	??___ftmul,w
  8683  0F36  00A3               	movwf	___ftpack@exp
  8684  0F37  083D               	movf	___ftmul@sign,w
  8685  0F38  00B5               	movwf	??___ftmul+1
  8686  0F39  0835               	movf	??___ftmul+1,w
  8687  0F3A  00A4               	movwf	___ftpack@sign
  8688  0F3B  3189  2114         	fcall	___ftpack
  8689  0F3D  0020               	movlb	0	; select bank0
  8690  0F3E  0820               	movf	?___ftpack,w
  8691  0F3F  00AE               	movwf	?___ftmul
  8692  0F40  0821               	movf	?___ftpack+1,w
  8693  0F41  00AF               	movwf	?___ftmul+1
  8694  0F42  0822               	movf	?___ftpack+2,w
  8695  0F43  00B0               	movwf	?___ftmul+2
  8696  0F44  0008               	return
  8697  0F45                     __end_of___ftmul:	
  8698                           
  8699                           	psect	text36
  8700  1D04                     __ptext36:	
  8701 ;; *************** function _setMemory_Modify *****************
  8702 ;; Defined at:
  8703 ;;		line 1000 in file "../src/MCU_B1.c"
  8704 ;; Parameters:    Size  Location     Type
  8705 ;;  command         1    wreg     unsigned char 
  8706 ;; Auto vars:     Size  Location     Type
  8707 ;;  command         1    1[BANK0 ] unsigned char 
  8708 ;; Return value:  Size  Location     Type
  8709 ;;		None               void
  8710 ;; Registers used:
  8711 ;;		wreg, status,2, status,0
  8712 ;; Tracked objects:
  8713 ;;		On entry : 0/0
  8714 ;;		On exit  : 0/0
  8715 ;;		Unchanged: 0/0
  8716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8718 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8719 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8720 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8721 ;;Total ram usage:        2 bytes
  8722 ;; Hardware stack levels used:    1
  8723 ;; Hardware stack levels required when called:    5
  8724 ;; This function calls:
  8725 ;;		Nothing
  8726 ;; This function is called by:
  8727 ;;		_setLog_Code
  8728 ;;		_setRFSW_AdjControl
  8729 ;; This function uses a non-reentrant model
  8730 ;;
  8731                           
  8732                           
  8733                           ;psect for function _setMemory_Modify
  8734  1D04                     _setMemory_Modify:	
  8735                           
  8736                           ;incstack = 0
  8737                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8738                           ;setMemory_Modify@command stored from wreg
  8739  1D04  0020               	movlb	0	; select bank0
  8740  1D05  00A1               	movwf	setMemory_Modify@command
  8741                           
  8742                           ;MCU_B1.c: 1001: Memory.Modify = command == 1 ? 1 : 0;
  8743  1D06  0821               	movf	setMemory_Modify@command,w
  8744  1D07  3A01               	xorlw	1
  8745  1D08  3000               	movlw	0
  8746  1D09  1903               	skipnz
  8747  1D0A  3001               	movlw	1
  8748  1D0B  00A0               	movwf	??_setMemory_Modify
  8749  1D0C  0024               	movlb	4	; select bank4
  8750  1D0D  0844               	movf	(_Memory^(0+512)+36),w
  8751  1D0E  0020               	movlb	0	; select bank0
  8752  1D0F  0620               	xorwf	??_setMemory_Modify,w
  8753  1D10  39FE               	andlw	-2
  8754  1D11  0620               	xorwf	??_setMemory_Modify,w
  8755  1D12  0024               	movlb	4	; select bank4
  8756  1D13  00C4               	movwf	(_Memory^(0+512)+36)
  8757                           
  8758                           ;MCU_B1.c: 1002: Memory.Time = 0;
  8759  1D14  01C2               	clrf	(_Memory^(0+512)+34)
  8760  1D15  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8761  1D16  0008               	return
  8762  1D17                     __end_of_setMemory_Modify:	
  8763                           
  8764                           	psect	text37
  8765  1C98                     __ptext37:	
  8766 ;; *************** function _getRF_KeyStatus *****************
  8767 ;; Defined at:
  8768 ;;		line 187 in file "../src/RF_Control_B1.c"
  8769 ;; Parameters:    Size  Location     Type
  8770 ;;		None
  8771 ;; Auto vars:     Size  Location     Type
  8772 ;;  key             1    1[BANK0 ] unsigned char 
  8773 ;; Return value:  Size  Location     Type
  8774 ;;                  1    wreg      unsigned char 
  8775 ;; Registers used:
  8776 ;;		wreg, status,2
  8777 ;; Tracked objects:
  8778 ;;		On entry : 0/0
  8779 ;;		On exit  : 0/0
  8780 ;;		Unchanged: 0/0
  8781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8783 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8784 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8785 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8786 ;;Total ram usage:        3 bytes
  8787 ;; Hardware stack levels used:    1
  8788 ;; Hardware stack levels required when called:    5
  8789 ;; This function calls:
  8790 ;;		Nothing
  8791 ;; This function is called by:
  8792 ;;		_setRF_Main
  8793 ;; This function uses a non-reentrant model
  8794 ;;
  8795                           
  8796                           
  8797                           ;psect for function _getRF_KeyStatus
  8798  1C98                     _getRF_KeyStatus:	
  8799                           
  8800                           ;RF_Control_B1.c: 188: char key = 0;
  8801                           
  8802                           ;incstack = 0
  8803                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8804  1C98  0020               	movlb	0	; select bank0
  8805  1C99  01A1               	clrf	getRF_KeyStatus@key
  8806                           
  8807                           ;RF_Control_B1.c: 194: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8808  1C9A  01A2               	clrf	_getRF_KeyStatus$5256
  8809  1C9B  0AA2               	incf	_getRF_KeyStatus$5256,f
  8810  1C9C  1F0C               	btfss	12,6	;volatile
  8811  1C9D  1A0C               	btfsc	12,4	;volatile
  8812  1C9E  2CA3               	goto	l6944
  8813  1C9F  1C0C               	btfss	12,0	;volatile
  8814  1CA0  188D               	btfsc	13,1	;volatile
  8815  1CA1  2CA3               	goto	l6944
  8816  1CA2  01A2               	clrf	_getRF_KeyStatus$5256
  8817  1CA3                     l6944:	
  8818  1CA3  0822               	movf	_getRF_KeyStatus$5256,w
  8819  1CA4  00A0               	movwf	??_getRF_KeyStatus
  8820  1CA5  0820               	movf	??_getRF_KeyStatus,w
  8821  1CA6  00A1               	movwf	getRF_KeyStatus@key
  8822                           
  8823                           ;RF_Control_B1.c: 200: return key;
  8824  1CA7  0821               	movf	getRF_KeyStatus@key,w
  8825  1CA8  0008               	return
  8826  1CA9                     __end_of_getRF_KeyStatus:	
  8827                           
  8828                           	psect	text38
  8829  1C87                     __ptext38:	
  8830 ;; *************** function _getBuz_GO *****************
  8831 ;; Defined at:
  8832 ;;		line 82 in file "../src/Buzzer_B1.c"
  8833 ;; Parameters:    Size  Location     Type
  8834 ;;		None
  8835 ;; Auto vars:     Size  Location     Type
  8836 ;;  i               2    4[BANK0 ] int 
  8837 ;; Return value:  Size  Location     Type
  8838 ;;                  2    0[BANK0 ] int 
  8839 ;; Registers used:
  8840 ;;		wreg, status,2, status,0
  8841 ;; Tracked objects:
  8842 ;;		On entry : 0/0
  8843 ;;		On exit  : 0/0
  8844 ;;		Unchanged: 0/0
  8845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8846 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8847 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8848 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8849 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8850 ;;Total ram usage:        6 bytes
  8851 ;; Hardware stack levels used:    1
  8852 ;; Hardware stack levels required when called:    5
  8853 ;; This function calls:
  8854 ;;		Nothing
  8855 ;; This function is called by:
  8856 ;;		_setRF_Main
  8857 ;; This function uses a non-reentrant model
  8858 ;;
  8859                           
  8860                           
  8861                           ;psect for function _getBuz_GO
  8862  1C87                     _getBuz_GO:	
  8863                           
  8864                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8865                           
  8866                           ;incstack = 0
  8867                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8868  1C87  0021               	movlb	1	; select bank1
  8869  1C88  0C30               	rrf	_Buz1^(0+128),w
  8870  1C89  3901               	andlw	1
  8871  1C8A  0020               	movlb	0	; select bank0
  8872  1C8B  00A2               	movwf	??_getBuz_GO
  8873  1C8C  01A3               	clrf	??_getBuz_GO+1
  8874  1C8D  0822               	movf	??_getBuz_GO,w
  8875  1C8E  00A4               	movwf	getBuz_GO@i
  8876  1C8F  0823               	movf	??_getBuz_GO+1,w
  8877  1C90  00A5               	movwf	getBuz_GO@i+1
  8878                           
  8879                           ;Buzzer_B1.c: 84: return i;
  8880  1C91  0825               	movf	getBuz_GO@i+1,w
  8881  1C92  01A1               	clrf	?_getBuz_GO+1
  8882  1C93  07A1               	addwf	?_getBuz_GO+1,f
  8883  1C94  0824               	movf	getBuz_GO@i,w
  8884  1C95  01A0               	clrf	?_getBuz_GO
  8885  1C96  07A0               	addwf	?_getBuz_GO,f
  8886  1C97  0008               	return
  8887  1C98                     __end_of_getBuz_GO:	
  8888                           
  8889                           	psect	text39
  8890  09DA                     __ptext39:	
  8891 ;; *************** function _CC2500_TxData *****************
  8892 ;; Defined at:
  8893 ;;		line 32 in file "../src/CC2500_B1.c"
  8894 ;; Parameters:    Size  Location     Type
  8895 ;;		None
  8896 ;; Auto vars:     Size  Location     Type
  8897 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8898 ;; Return value:  Size  Location     Type
  8899 ;;		None               void
  8900 ;; Registers used:
  8901 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8902 ;; Tracked objects:
  8903 ;;		On entry : 0/0
  8904 ;;		On exit  : 0/0
  8905 ;;		Unchanged: 0/0
  8906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8908 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8909 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8910 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8911 ;;Total ram usage:        2 bytes
  8912 ;; Hardware stack levels used:    1
  8913 ;; Hardware stack levels required when called:    7
  8914 ;; This function calls:
  8915 ;;		_CC2500_WriteByte
  8916 ;;		_CC2500_WriteCommand
  8917 ;;		_Timeout_Counter
  8918 ;;		_set_TimeoutCleared
  8919 ;; This function is called by:
  8920 ;;		_setRF_Main
  8921 ;; This function uses a non-reentrant model
  8922 ;;
  8923                           
  8924                           
  8925                           ;psect for function _CC2500_TxData
  8926  09DA                     _CC2500_TxData:	
  8927                           
  8928                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8929                           ;CC2500_B1.c: 35: RC4 = 0;
  8930                           
  8931                           ;incstack = 0
  8932                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8933  09DA  0020               	movlb	0	; select bank0
  8934  09DB  120E               	bcf	14,4	;volatile
  8935                           
  8936                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8937  09DC  307F               	movlw	127
  8938  09DD  00A4               	movwf	??_CC2500_TxData
  8939  09DE  0824               	movf	??_CC2500_TxData,w
  8940  09DF  00FB               	movwf	_SPI0Buffer
  8941                           
  8942                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8943  09E0  29E4               	goto	l6600
  8944  09E1                     l6598:	
  8945                           
  8946                           ;CC2500_B1.c: 38: Timeout_Counter();
  8947  09E1  319D  25A1  3189   	fcall	_Timeout_Counter
  8948  09E4                     l6600:	
  8949  09E4  0020               	movlb	0	; select bank0
  8950  09E5  1D0E               	btfss	14,2	;volatile
  8951  09E6  29EA               	goto	l6604
  8952  09E7  0021               	movlb	1	; select bank1
  8953  09E8  1D2D               	btfss	(_myMain^(0+128)+13),2
  8954  09E9  29E1               	goto	l6598
  8955  09EA                     l6604:	
  8956                           
  8957                           ;CC2500_B1.c: 39: };
  8958                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8959  09EA  319B  2346  3189   	fcall	_set_TimeoutCleared
  8960                           
  8961                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8962  09ED  319D  2551  3189   	fcall	_CC2500_WriteByte
  8963                           
  8964                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8965  09F0  0021               	movlb	1	; select bank1
  8966  09F1  0853               	movf	_Tx_Length^(0+128),w
  8967  09F2  0020               	movlb	0	; select bank0
  8968  09F3  00A4               	movwf	??_CC2500_TxData
  8969  09F4  0824               	movf	??_CC2500_TxData,w
  8970  09F5  00FB               	movwf	_SPI0Buffer
  8971                           
  8972                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8973  09F6  319D  2551  3189   	fcall	_CC2500_WriteByte
  8974                           
  8975                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8976  09F9  0020               	movlb	0	; select bank0
  8977  09FA  01A5               	clrf	CC2500_TxData@loop_e
  8978  09FB                     l6618:	
  8979  09FB  0021               	movlb	1	; select bank1
  8980  09FC  0853               	movf	_Tx_Length^(0+128),w
  8981  09FD  0020               	movlb	0	; select bank0
  8982  09FE  0225               	subwf	CC2500_TxData@loop_e,w
  8983  09FF  1803               	btfsc	3,0
  8984  0A00  2A13               	goto	l255
  8985                           
  8986                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8987  0A01  0825               	movf	CC2500_TxData@loop_e,w
  8988  0A02  3EA0               	addlw	_RF_Data& (0+255)
  8989  0A03  0086               	movwf	6
  8990  0A04  3001               	movlw	1	; select bank3/4
  8991  0A05  0087               	movwf	7
  8992  0A06  0801               	movf	1,w
  8993  0A07  00A4               	movwf	??_CC2500_TxData
  8994  0A08  0824               	movf	??_CC2500_TxData,w
  8995  0A09  00FB               	movwf	_SPI0Buffer
  8996                           
  8997                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8998  0A0A  319D  2551  3189   	fcall	_CC2500_WriteByte
  8999  0A0D  3001               	movlw	1
  9000  0A0E  0020               	movlb	0	; select bank0
  9001  0A0F  00A4               	movwf	??_CC2500_TxData
  9002  0A10  0824               	movf	??_CC2500_TxData,w
  9003  0A11  07A5               	addwf	CC2500_TxData@loop_e,f
  9004  0A12  29FB               	goto	l6618
  9005  0A13                     l255:	
  9006                           
  9007                           ;CC2500_B1.c: 48: }
  9008                           ;CC2500_B1.c: 49: RC4 = 1;
  9009  0A13  160E               	bsf	14,4	;volatile
  9010                           
  9011                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9012  0A14  3035               	movlw	53
  9013  0A15  319E  2639  3189   	fcall	_CC2500_WriteCommand
  9014                           
  9015                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9016  0A18  2A1C               	goto	l6624
  9017  0A19                     l6622:	
  9018                           
  9019                           ;CC2500_B1.c: 52: Timeout_Counter();
  9020  0A19  319D  25A1  3189   	fcall	_Timeout_Counter
  9021  0A1C                     l6624:	
  9022  0A1C  0020               	movlb	0	; select bank0
  9023  0A1D  180D               	btfsc	13,0	;volatile
  9024  0A1E  2A22               	goto	l6628
  9025  0A1F  0021               	movlb	1	; select bank1
  9026  0A20  1D2D               	btfss	(_myMain^(0+128)+13),2
  9027  0A21  2A19               	goto	l6622
  9028  0A22                     l6628:	
  9029                           
  9030                           ;CC2500_B1.c: 53: };
  9031                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9032  0A22  319B  2346  3189   	fcall	_set_TimeoutCleared
  9033                           
  9034                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9035  0A25  2A29               	goto	l6632
  9036  0A26                     l6630:	
  9037                           
  9038                           ;CC2500_B1.c: 57: Timeout_Counter();
  9039  0A26  319D  25A1  3189   	fcall	_Timeout_Counter
  9040  0A29                     l6632:	
  9041  0A29  0020               	movlb	0	; select bank0
  9042  0A2A  1C0D               	btfss	13,0	;volatile
  9043  0A2B  2A2F               	goto	l6636
  9044  0A2C  0021               	movlb	1	; select bank1
  9045  0A2D  1D2D               	btfss	(_myMain^(0+128)+13),2
  9046  0A2E  2A26               	goto	l6630
  9047  0A2F                     l6636:	
  9048                           
  9049                           ;CC2500_B1.c: 58: };
  9050                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9051  0A2F  319B  2346  3189   	fcall	_set_TimeoutCleared
  9052                           
  9053                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9054  0A32  3036               	movlw	54
  9055  0A33  319E  2639  3189   	fcall	_CC2500_WriteCommand
  9056                           
  9057                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9058  0A36  303B               	movlw	59
  9059  0A37  319E  2639  3189   	fcall	_CC2500_WriteCommand
  9060                           
  9061                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  9062  0A3A  303A               	movlw	58
  9063  0A3B  319E  2639         	fcall	_CC2500_WriteCommand
  9064                           
  9065                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9066  0A3D  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9067  0A3E  0008               	return
  9068  0A3F                     __end_of_CC2500_TxData:	
  9069                           
  9070                           	psect	text40
  9071  0B72                     __ptext40:	
  9072 ;; *************** function _CC2500_RxData *****************
  9073 ;; Defined at:
  9074 ;;		line 70 in file "../src/CC2500_B1.c"
  9075 ;; Parameters:    Size  Location     Type
  9076 ;;		None
  9077 ;; Auto vars:     Size  Location     Type
  9078 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9079 ;; Return value:  Size  Location     Type
  9080 ;;		None               void
  9081 ;; Registers used:
  9082 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9083 ;; Tracked objects:
  9084 ;;		On entry : 0/0
  9085 ;;		On exit  : 0/0
  9086 ;;		Unchanged: 0/0
  9087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9089 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9090 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9091 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9092 ;;Total ram usage:        2 bytes
  9093 ;; Hardware stack levels used:    1
  9094 ;; Hardware stack levels required when called:    7
  9095 ;; This function calls:
  9096 ;;		_CC2500_ReadByte
  9097 ;;		_CC2500_ReadStatus
  9098 ;;		_CC2500_WriteByte
  9099 ;;		_Timeout_Counter
  9100 ;;		_set_TimeoutCleared
  9101 ;; This function is called by:
  9102 ;;		_setRF_Main
  9103 ;; This function uses a non-reentrant model
  9104 ;;
  9105                           
  9106                           
  9107                           ;psect for function _CC2500_RxData
  9108  0B72                     _CC2500_RxData:	
  9109                           
  9110                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9111                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9112                           
  9113                           ;incstack = 0
  9114                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9115  0B72  0020               	movlb	0	; select bank0
  9116  0B73  180D               	btfsc	13,0	;volatile
  9117  0B74  2B79               	goto	l6652
  9118  0B75  2B82               	goto	l6658
  9119  0B76                     l6650:	
  9120                           ;CC2500_B1.c: 76: {
  9121                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9122                           
  9123                           
  9124                           ;CC2500_B1.c: 78: Timeout_Counter();
  9125  0B76  319D  25A1  318B   	fcall	_Timeout_Counter
  9126  0B79                     l6652:	
  9127  0B79  0020               	movlb	0	; select bank0
  9128  0B7A  1C0D               	btfss	13,0	;volatile
  9129  0B7B  2B7F               	goto	l6656
  9130  0B7C  0021               	movlb	1	; select bank1
  9131  0B7D  1D2D               	btfss	(_myMain^(0+128)+13),2
  9132  0B7E  2B76               	goto	l6650
  9133  0B7F                     l6656:	
  9134                           
  9135                           ;CC2500_B1.c: 79: };
  9136                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9137  0B7F  319B  2346  318B   	fcall	_set_TimeoutCleared
  9138  0B82                     l6658:	
  9139                           
  9140                           ;CC2500_B1.c: 81: }
  9141                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9142  0B82  303B               	movlw	59
  9143  0B83  319F  27BB  318B   	fcall	_CC2500_ReadStatus
  9144                           
  9145                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9146  0B86  0021               	movlb	1	; select bank1
  9147  0B87  0856               	movf	_s_data^(0+128),w
  9148  0B88  1903               	btfsc	3,2
  9149  0B89  0008               	return
  9150                           
  9151                           ;CC2500_B1.c: 86: RC4 = 0;
  9152  0B8A  0020               	movlb	0	; select bank0
  9153  0B8B  120E               	bcf	14,4	;volatile
  9154                           
  9155                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9156  0B8C  30FF               	movlw	255
  9157  0B8D  00A4               	movwf	??_CC2500_RxData
  9158  0B8E  0824               	movf	??_CC2500_RxData,w
  9159  0B8F  00FB               	movwf	_SPI0Buffer
  9160                           
  9161                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9162  0B90  2B97               	goto	l6668
  9163  0B91                     l6670:	
  9164  0B91  0021               	movlb	1	; select bank1
  9165  0B92  192D               	btfsc	(_myMain^(0+128)+13),2
  9166  0B93  2B9A               	goto	l280
  9167                           
  9168                           ;CC2500_B1.c: 89: Timeout_Counter();
  9169  0B94  319D  25A1  318B   	fcall	_Timeout_Counter
  9170  0B97                     l6668:	
  9171  0B97  0020               	movlb	0	; select bank0
  9172  0B98  190E               	btfsc	14,2	;volatile
  9173  0B99  2B91               	goto	l6670
  9174  0B9A                     l280:	
  9175                           
  9176                           ;CC2500_B1.c: 90: };
  9177                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  9178  0B9A  0021               	movlb	1	; select bank1
  9179  0B9B  192D               	btfsc	(_myMain^(0+128)+13),2
  9180  0B9C  2BDD               	goto	l281
  9181                           
  9182                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9183  0B9D  319D  2551  318B   	fcall	_CC2500_WriteByte
  9184                           
  9185                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9186  0BA0  319E  2622  318B   	fcall	_CC2500_ReadByte
  9187                           
  9188                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9189  0BA3  087B               	movf	_SPI0Buffer,w
  9190  0BA4  0020               	movlb	0	; select bank0
  9191  0BA5  00A4               	movwf	??_CC2500_RxData
  9192  0BA6  0824               	movf	??_CC2500_RxData,w
  9193  0BA7  0021               	movlb	1	; select bank1
  9194  0BA8  00D1               	movwf	_Rx_Length^(0+128)
  9195                           
  9196                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9197  0BA9  0020               	movlb	0	; select bank0
  9198  0BAA  01A5               	clrf	CC2500_RxData@loop_f
  9199  0BAB                     l6684:	
  9200  0BAB  0021               	movlb	1	; select bank1
  9201  0BAC  0851               	movf	_Rx_Length^(0+128),w
  9202  0BAD  0020               	movlb	0	; select bank0
  9203  0BAE  0225               	subwf	CC2500_RxData@loop_f,w
  9204  0BAF  1803               	btfsc	3,0
  9205  0BB0  2BC3               	goto	l6686
  9206                           
  9207                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9208  0BB1  319E  2622  318B   	fcall	_CC2500_ReadByte
  9209                           
  9210                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9211  0BB4  087B               	movf	_SPI0Buffer,w
  9212  0BB5  0020               	movlb	0	; select bank0
  9213  0BB6  00A4               	movwf	??_CC2500_RxData
  9214  0BB7  0825               	movf	CC2500_RxData@loop_f,w
  9215  0BB8  3EA0               	addlw	_RF_Data& (0+255)
  9216  0BB9  0086               	movwf	6
  9217  0BBA  3001               	movlw	1	; select bank3/4
  9218  0BBB  0087               	movwf	7
  9219  0BBC  0824               	movf	??_CC2500_RxData,w
  9220  0BBD  0081               	movwf	1
  9221  0BBE  3001               	movlw	1
  9222  0BBF  00A4               	movwf	??_CC2500_RxData
  9223  0BC0  0824               	movf	??_CC2500_RxData,w
  9224  0BC1  07A5               	addwf	CC2500_RxData@loop_f,f
  9225  0BC2  2BAB               	goto	l6684
  9226  0BC3                     l6686:	
  9227                           
  9228                           ;CC2500_B1.c: 99: }
  9229                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9230  0BC3  319E  2622  318B   	fcall	_CC2500_ReadByte
  9231                           
  9232                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9233  0BC6  087B               	movf	_SPI0Buffer,w
  9234  0BC7  0020               	movlb	0	; select bank0
  9235  0BC8  00A4               	movwf	??_CC2500_RxData
  9236  0BC9  0824               	movf	??_CC2500_RxData,w
  9237  0BCA  0021               	movlb	1	; select bank1
  9238  0BCB  00D0               	movwf	_RSSI^(0+128)
  9239                           
  9240                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9241  0BCC  319E  2622  318B   	fcall	_CC2500_ReadByte
  9242                           
  9243                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9244  0BCF  087B               	movf	_SPI0Buffer,w
  9245  0BD0  0020               	movlb	0	; select bank0
  9246  0BD1  00A4               	movwf	??_CC2500_RxData
  9247  0BD2  0824               	movf	??_CC2500_RxData,w
  9248  0BD3  0021               	movlb	1	; select bank1
  9249  0BD4  00CC               	movwf	_CRC^(0+128)
  9250                           
  9251                           ;CC2500_B1.c: 104: RC4 = 1;
  9252  0BD5  0020               	movlb	0	; select bank0
  9253  0BD6  160E               	bsf	14,4	;volatile
  9254                           
  9255                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9256  0BD7  0021               	movlb	1	; select bank1
  9257  0BD8  1BCC               	btfsc	_CRC^(0+128),7
  9258                           
  9259                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9260  0BD9  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9261                           
  9262                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9263  0BDA  11BC               	bcf	_RF1^(0+128),3
  9264                           
  9265                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9266  0BDB  14BC               	bsf	_RF1^(0+128),1
  9267                           
  9268                           ;CC2500_B1.c: 110: } else {
  9269  0BDC  2BDF               	goto	l6698
  9270  0BDD                     l281:	
  9271                           
  9272                           ;CC2500_B1.c: 111: RC4 = 1;
  9273  0BDD  0020               	movlb	0	; select bank0
  9274  0BDE  160E               	bsf	14,4	;volatile
  9275  0BDF                     l6698:	
  9276                           
  9277                           ;CC2500_B1.c: 112: }
  9278                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  9279  0BDF  319B  2346         	fcall	_set_TimeoutCleared
  9280  0BE1  0021               	movlb	1	; select bank1
  9281  0BE2  0008               	return
  9282  0BE3                     __end_of_CC2500_RxData:	
  9283                           
  9284                           	psect	text41
  9285  1FBB                     __ptext41:	
  9286 ;; *************** function _CC2500_ReadStatus *****************
  9287 ;; Defined at:
  9288 ;;		line 304 in file "../src/CC2500_B1.c"
  9289 ;; Parameters:    Size  Location     Type
  9290 ;;  status_addr     1    wreg     unsigned char 
  9291 ;; Auto vars:     Size  Location     Type
  9292 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9293 ;; Return value:  Size  Location     Type
  9294 ;;		None               void
  9295 ;; Registers used:
  9296 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9297 ;; Tracked objects:
  9298 ;;		On entry : 0/0
  9299 ;;		On exit  : 0/0
  9300 ;;		Unchanged: 0/0
  9301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9303 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9305 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9306 ;;Total ram usage:        2 bytes
  9307 ;; Hardware stack levels used:    1
  9308 ;; Hardware stack levels required when called:    6
  9309 ;; This function calls:
  9310 ;;		_CC2500_ReadByte
  9311 ;;		_CC2500_WriteByte
  9312 ;;		_Timeout_Counter
  9313 ;;		_set_TimeoutCleared
  9314 ;; This function is called by:
  9315 ;;		_CC2500_RxData
  9316 ;;		_setRF_Main
  9317 ;; This function uses a non-reentrant model
  9318 ;;
  9319                           
  9320                           
  9321                           ;psect for function _CC2500_ReadStatus
  9322  1FBB                     _CC2500_ReadStatus:	
  9323                           
  9324                           ;incstack = 0
  9325                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9326                           ;CC2500_ReadStatus@status_addr stored from wreg
  9327  1FBB  0020               	movlb	0	; select bank0
  9328  1FBC  00A3               	movwf	CC2500_ReadStatus@status_addr
  9329                           
  9330                           ;CC2500_B1.c: 305: RC4 = 0;
  9331  1FBD  120E               	bcf	14,4	;volatile
  9332                           
  9333                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  9334  1FBE  0823               	movf	CC2500_ReadStatus@status_addr,w
  9335  1FBF  3EC0               	addlw	192
  9336  1FC0  00A2               	movwf	??_CC2500_ReadStatus
  9337  1FC1  0822               	movf	??_CC2500_ReadStatus,w
  9338  1FC2  00FB               	movwf	_SPI0Buffer
  9339                           
  9340                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  9341  1FC3  2FC7               	goto	l6430
  9342  1FC4                     l6428:	
  9343                           
  9344                           ;CC2500_B1.c: 309: Timeout_Counter();
  9345  1FC4  319D  25A1  319F   	fcall	_Timeout_Counter
  9346  1FC7                     l6430:	
  9347  1FC7  0020               	movlb	0	; select bank0
  9348  1FC8  1D0E               	btfss	14,2	;volatile
  9349  1FC9  2FCD               	goto	l6434
  9350  1FCA  0021               	movlb	1	; select bank1
  9351  1FCB  1D2D               	btfss	(_myMain^(0+128)+13),2
  9352  1FCC  2FC4               	goto	l6428
  9353  1FCD                     l6434:	
  9354                           
  9355                           ;CC2500_B1.c: 310: };
  9356                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  9357  1FCD  319B  2346  319F   	fcall	_set_TimeoutCleared
  9358                           
  9359                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  9360  1FD0  319D  2551  319F   	fcall	_CC2500_WriteByte
  9361                           
  9362                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  9363  1FD3  319E  2622         	fcall	_CC2500_ReadByte
  9364                           
  9365                           ;CC2500_B1.c: 315: RC4 = 1;
  9366  1FD5  0020               	movlb	0	; select bank0
  9367  1FD6  160E               	bsf	14,4	;volatile
  9368                           
  9369                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  9370  1FD7  087B               	movf	_SPI0Buffer,w
  9371  1FD8  00A2               	movwf	??_CC2500_ReadStatus
  9372  1FD9  0822               	movf	??_CC2500_ReadStatus,w
  9373  1FDA  0021               	movlb	1	; select bank1
  9374  1FDB  00D6               	movwf	_s_data^(0+128)
  9375  1FDC  0008               	return
  9376  1FDD                     __end_of_CC2500_ReadStatus:	
  9377                           
  9378                           	psect	text42
  9379  1E22                     __ptext42:	
  9380 ;; *************** function _CC2500_ReadByte *****************
  9381 ;; Defined at:
  9382 ;;		line 238 in file "../src/CC2500_B1.c"
  9383 ;; Parameters:    Size  Location     Type
  9384 ;;		None
  9385 ;; Auto vars:     Size  Location     Type
  9386 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9387 ;; Return value:  Size  Location     Type
  9388 ;;		None               void
  9389 ;; Registers used:
  9390 ;;		wreg, status,2, status,0
  9391 ;; Tracked objects:
  9392 ;;		On entry : 0/0
  9393 ;;		On exit  : 0/0
  9394 ;;		Unchanged: 0/0
  9395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9397 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9398 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9399 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9400 ;;Total ram usage:        2 bytes
  9401 ;; Hardware stack levels used:    1
  9402 ;; Hardware stack levels required when called:    5
  9403 ;; This function calls:
  9404 ;;		Nothing
  9405 ;; This function is called by:
  9406 ;;		_CC2500_RxData
  9407 ;;		_CC2500_ReadStatus
  9408 ;;		_CC2500_ReadREG
  9409 ;; This function uses a non-reentrant model
  9410 ;;
  9411                           
  9412                           
  9413                           ;psect for function _CC2500_ReadByte
  9414  1E22                     _CC2500_ReadByte:	
  9415                           
  9416                           ;CC2500_B1.c: 239: unsigned char loop_b;
  9417                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  9418                           
  9419                           ;incstack = 0
  9420                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9421  1E22  0020               	movlb	0	; select bank0
  9422  1E23  01A1               	clrf	CC2500_ReadByte@loop_b
  9423  1E24                     L6:	
  9424  1E24  3008               	movlw	8
  9425  1E25  0221               	subwf	CC2500_ReadByte@loop_b,w
  9426  1E26  1803               	btfsc	3,0
  9427  1E27  0008               	return
  9428                           
  9429                           ;CC2500_B1.c: 241: RC1 = 1;
  9430  1E28  148E               	bsf	14,1	;volatile
  9431                           
  9432                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  9433  1E29  1003               	clrc
  9434  1E2A  0DFB               	rlf	_SPI0Buffer,f
  9435                           
  9436                           ;CC2500_B1.c: 243: if (RC2 == 1)
  9437  1E2B  1D0E               	btfss	14,2	;volatile
  9438  1E2C  2E2F               	goto	l6330
  9439                           
  9440                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  9441  1E2D  147B               	bsf	_SPI0Buffer,0
  9442  1E2E  2E33               	goto	l6332
  9443  1E2F                     l6330:	
  9444                           
  9445                           ;CC2500_B1.c: 245: else
  9446                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  9447  1E2F  30FE               	movlw	254
  9448  1E30  00A0               	movwf	??_CC2500_ReadByte
  9449  1E31  0820               	movf	??_CC2500_ReadByte,w
  9450  1E32  05FB               	andwf	_SPI0Buffer,f
  9451  1E33                     l6332:	
  9452                           
  9453                           ;CC2500_B1.c: 247: RC1 = 0;
  9454  1E33  108E               	bcf	14,1	;volatile
  9455  1E34  3001               	movlw	1
  9456  1E35  00A0               	movwf	??_CC2500_ReadByte
  9457  1E36  0820               	movf	??_CC2500_ReadByte,w
  9458  1E37  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9459  1E38  2E24               	goto	L6
  9460  1E39                     __end_of_CC2500_ReadByte:	
  9461                           
  9462                           	psect	text43
  9463  1B2E                     __ptext43:	
  9464 ;; *************** function _RF_Initialization *****************
  9465 ;; Defined at:
  9466 ;;		line 9 in file "../src/RF_Control_B1.c"
  9467 ;; Parameters:    Size  Location     Type
  9468 ;;		None
  9469 ;; Auto vars:     Size  Location     Type
  9470 ;;		None
  9471 ;; Return value:  Size  Location     Type
  9472 ;;		None               void
  9473 ;; Registers used:
  9474 ;;		wreg, status,2, status,0, pclath, cstack
  9475 ;; Tracked objects:
  9476 ;;		On entry : 0/0
  9477 ;;		On exit  : 0/0
  9478 ;;		Unchanged: 0/0
  9479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9484 ;;Total ram usage:        0 bytes
  9485 ;; Hardware stack levels used:    1
  9486 ;; Hardware stack levels required when called:    6
  9487 ;; This function calls:
  9488 ;;		_setRF_Initialization
  9489 ;; This function is called by:
  9490 ;;		_main
  9491 ;; This function uses a non-reentrant model
  9492 ;;
  9493                           
  9494                           
  9495                           ;psect for function _RF_Initialization
  9496  1B2E                     _RF_Initialization:	
  9497                           
  9498                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9499                           
  9500                           ;incstack = 0
  9501                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9502  1B2E  319B  23AD         	fcall	_setRF_Initialization
  9503  1B30  0008               	return
  9504  1B31                     __end_of_RF_Initialization:	
  9505                           
  9506                           	psect	text44
  9507  1BAD                     __ptext44:	
  9508 ;; *************** function _setRF_Initialization *****************
  9509 ;; Defined at:
  9510 ;;		line 43 in file "../src/RF_Control_B1.c"
  9511 ;; Parameters:    Size  Location     Type
  9512 ;;		None
  9513 ;; Auto vars:     Size  Location     Type
  9514 ;;		None
  9515 ;; Return value:  Size  Location     Type
  9516 ;;		None               void
  9517 ;; Registers used:
  9518 ;;		wreg
  9519 ;; Tracked objects:
  9520 ;;		On entry : 0/0
  9521 ;;		On exit  : 0/0
  9522 ;;		Unchanged: 0/0
  9523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9526 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9527 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9528 ;;Total ram usage:        1 bytes
  9529 ;; Hardware stack levels used:    1
  9530 ;; Hardware stack levels required when called:    5
  9531 ;; This function calls:
  9532 ;;		Nothing
  9533 ;; This function is called by:
  9534 ;;		_RF_Initialization
  9535 ;; This function uses a non-reentrant model
  9536 ;;
  9537                           
  9538                           
  9539                           ;psect for function _setRF_Initialization
  9540  1BAD                     _setRF_Initialization:	
  9541                           
  9542                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9543                           
  9544                           ;incstack = 0
  9545                           ; Regs used in _setRF_Initialization: [wreg]
  9546  1BAD  3015               	movlw	21
  9547  1BAE  0020               	movlb	0	; select bank0
  9548  1BAF  00A0               	movwf	??_setRF_Initialization
  9549  1BB0  0820               	movf	??_setRF_Initialization,w
  9550  1BB1  0021               	movlb	1	; select bank1
  9551  1BB2  00D3               	movwf	_Tx_Length^(0+128)
  9552                           
  9553                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9554  1BB3  300A               	movlw	10
  9555  1BB4  00C3               	movwf	(_RF1^(0+128)+7)
  9556  1BB5  3000               	movlw	0
  9557  1BB6  00C4               	movwf	(_RF1^(0+128)+8)
  9558  1BB7  0008               	return
  9559  1BB8                     __end_of_setRF_Initialization:	
  9560                           
  9561                           	psect	text45
  9562  1CCD                     __ptext45:	
  9563 ;; *************** function _Mcu_Initialization *****************
  9564 ;; Defined at:
  9565 ;;		line 30 in file "../src/MCU_B1.c"
  9566 ;; Parameters:    Size  Location     Type
  9567 ;;		None
  9568 ;; Auto vars:     Size  Location     Type
  9569 ;;		None
  9570 ;; Return value:  Size  Location     Type
  9571 ;;		None               void
  9572 ;; Registers used:
  9573 ;;		wreg, status,2, status,0, pclath, cstack
  9574 ;; Tracked objects:
  9575 ;;		On entry : 0/0
  9576 ;;		On exit  : 0/0
  9577 ;;		Unchanged: 0/0
  9578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9583 ;;Total ram usage:        0 bytes
  9584 ;; Hardware stack levels used:    1
  9585 ;; Hardware stack levels required when called:    6
  9586 ;; This function calls:
  9587 ;;		_ADC_Set
  9588 ;;		_Fosc_Set
  9589 ;;		_IOC_Set
  9590 ;;		_IO_Set
  9591 ;;		_TMR1_Set
  9592 ;;		_WDT_Set
  9593 ;; This function is called by:
  9594 ;;		_main
  9595 ;; This function uses a non-reentrant model
  9596 ;;
  9597                           
  9598                           
  9599                           ;psect for function _Mcu_Initialization
  9600  1CCD                     _Mcu_Initialization:	
  9601                           
  9602                           ;MCU_B1.c: 32: Fosc_Set();
  9603                           
  9604                           ;incstack = 0
  9605                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9606  1CCD  3187  27FC  319C   	fcall	_Fosc_Set
  9607                           
  9608                           ;MCU_B1.c: 34: IO_Set();
  9609  1CD0  319E  2652  319C   	fcall	_IO_Set
  9610                           
  9611                           ;MCU_B1.c: 36: ;;
  9612                           ;MCU_B1.c: 38: TMR1_Set();
  9613  1CD3  319C  2400  319C   	fcall	_TMR1_Set
  9614                           
  9615                           ;MCU_B1.c: 40: ADC_Set();
  9616  1CD6  319B  2362  319C   	fcall	_ADC_Set
  9617                           
  9618                           ;MCU_B1.c: 42: ;;
  9619                           ;MCU_B1.c: 44: ;;
  9620                           ;MCU_B1.c: 46: IOC_Set();
  9621  1CD9  319B  23F4  319C   	fcall	_IOC_Set
  9622                           
  9623                           ;MCU_B1.c: 48: ;;
  9624                           ;MCU_B1.c: 50: ;;
  9625                           ;MCU_B1.c: 52: WDT_Set();
  9626  1CDC  319B  23A2         	fcall	_WDT_Set
  9627  1CDE  0008               	return
  9628  1CDF                     __end_of_Mcu_Initialization:	
  9629                           
  9630                           	psect	text46
  9631  1BA2                     __ptext46:	
  9632 ;; *************** function _WDT_Set *****************
  9633 ;; Defined at:
  9634 ;;		line 1019 in file "../src/MCU_B1.c"
  9635 ;; Parameters:    Size  Location     Type
  9636 ;;		None
  9637 ;; Auto vars:     Size  Location     Type
  9638 ;;		None
  9639 ;; Return value:  Size  Location     Type
  9640 ;;		None               void
  9641 ;; Registers used:
  9642 ;;		wreg
  9643 ;; Tracked objects:
  9644 ;;		On entry : 0/0
  9645 ;;		On exit  : 0/0
  9646 ;;		Unchanged: 0/0
  9647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9650 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9651 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9652 ;;Total ram usage:        1 bytes
  9653 ;; Hardware stack levels used:    1
  9654 ;; Hardware stack levels required when called:    5
  9655 ;; This function calls:
  9656 ;;		Nothing
  9657 ;; This function is called by:
  9658 ;;		_Mcu_Initialization
  9659 ;; This function uses a non-reentrant model
  9660 ;;
  9661                           
  9662                           
  9663                           ;psect for function _WDT_Set
  9664  1BA2                     _WDT_Set:	
  9665                           
  9666                           ;MCU_B1.c: 1026: WDTCON = 0b00010111;;
  9667                           
  9668                           ;incstack = 0
  9669                           ; Regs used in _WDT_Set: [wreg]
  9670  1BA2  3017               	movlw	23
  9671  1BA3  0021               	movlb	1	; select bank1
  9672  1BA4  0097               	movwf	23	;volatile
  9673                           
  9674                           ;MCU_B1.c: 1028: WDT.Enable = 1;
  9675  1BA5  144A               	bsf	_WDT^(0+128),0
  9676                           
  9677                           ;MCU_B1.c: 1029: WDT.Timer = 10;
  9678  1BA6  300A               	movlw	10
  9679  1BA7  0020               	movlb	0	; select bank0
  9680  1BA8  00A0               	movwf	??_WDT_Set
  9681  1BA9  0820               	movf	??_WDT_Set,w
  9682  1BAA  0021               	movlb	1	; select bank1
  9683  1BAB  00CB               	movwf	(_WDT^(0+128)+1)
  9684  1BAC  0008               	return
  9685  1BAD                     __end_of_WDT_Set:	
  9686                           
  9687                           	psect	text47
  9688  1C00                     __ptext47:	
  9689 ;; *************** function _TMR1_Set *****************
  9690 ;; Defined at:
  9691 ;;		line 199 in file "../src/MCU_B1.c"
  9692 ;; Parameters:    Size  Location     Type
  9693 ;;		None
  9694 ;; Auto vars:     Size  Location     Type
  9695 ;;		None
  9696 ;; Return value:  Size  Location     Type
  9697 ;;		None               void
  9698 ;; Registers used:
  9699 ;;		wreg
  9700 ;; Tracked objects:
  9701 ;;		On entry : 0/0
  9702 ;;		On exit  : 0/0
  9703 ;;		Unchanged: 0/0
  9704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9709 ;;Total ram usage:        0 bytes
  9710 ;; Hardware stack levels used:    1
  9711 ;; Hardware stack levels required when called:    5
  9712 ;; This function calls:
  9713 ;;		Nothing
  9714 ;; This function is called by:
  9715 ;;		_Mcu_Initialization
  9716 ;; This function uses a non-reentrant model
  9717 ;;
  9718                           
  9719                           
  9720                           ;psect for function _TMR1_Set
  9721  1C00                     _TMR1_Set:	
  9722                           
  9723                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9724                           
  9725                           ;incstack = 0
  9726                           ; Regs used in _TMR1_Set: [wreg]
  9727  1C00  3041               	movlw	65
  9728  1C01  0020               	movlb	0	; select bank0
  9729  1C02  0098               	movwf	24	;volatile
  9730                           
  9731                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9732  1C03  30FA               	movlw	250
  9733  1C04  0097               	movwf	23	;volatile
  9734                           
  9735                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9736  1C05  3038               	movlw	56
  9737  1C06  0096               	movwf	22	;volatile
  9738                           
  9739                           ;MCU_B1.c: 203: TMR1IE = 1;
  9740  1C07  0021               	movlb	1	; select bank1
  9741  1C08  1411               	bsf	17,0	;volatile
  9742                           
  9743                           ;MCU_B1.c: 204: PEIE = 1;
  9744  1C09  170B               	bsf	11,6	;volatile
  9745                           
  9746                           ;MCU_B1.c: 205: GIE = 1;
  9747  1C0A  178B               	bsf	11,7	;volatile
  9748  1C0B  0008               	return
  9749  1C0C                     __end_of_TMR1_Set:	
  9750                           
  9751                           	psect	text48
  9752  1E52                     __ptext48:	
  9753 ;; *************** function _IO_Set *****************
  9754 ;; Defined at:
  9755 ;;		line 60 in file "../src/MCU_B1.c"
  9756 ;; Parameters:    Size  Location     Type
  9757 ;;		None
  9758 ;; Auto vars:     Size  Location     Type
  9759 ;;		None
  9760 ;; Return value:  Size  Location     Type
  9761 ;;		None               void
  9762 ;; Registers used:
  9763 ;;		wreg, status,2
  9764 ;; Tracked objects:
  9765 ;;		On entry : 0/0
  9766 ;;		On exit  : 0/0
  9767 ;;		Unchanged: 0/0
  9768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9773 ;;Total ram usage:        0 bytes
  9774 ;; Hardware stack levels used:    1
  9775 ;; Hardware stack levels required when called:    5
  9776 ;; This function calls:
  9777 ;;		Nothing
  9778 ;; This function is called by:
  9779 ;;		_Mcu_Initialization
  9780 ;; This function uses a non-reentrant model
  9781 ;;
  9782                           
  9783                           
  9784                           ;psect for function _IO_Set
  9785  1E52                     _IO_Set:	
  9786                           
  9787                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9788                           
  9789                           ;incstack = 0
  9790                           ; Regs used in _IO_Set: [wreg+status,2]
  9791  1E52  3077               	movlw	119
  9792  1E53  0021               	movlb	1	; select bank1
  9793  1E54  008C               	movwf	12	;volatile
  9794                           
  9795                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9796  1E55  3007               	movlw	7
  9797  1E56  008D               	movwf	13	;volatile
  9798                           
  9799                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9800  1E57  300C               	movlw	12
  9801  1E58  008E               	movwf	14	;volatile
  9802                           
  9803                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9804  1E59  0022               	movlb	2	; select bank2
  9805  1E5A  018C               	clrf	12	;volatile
  9806                           
  9807                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9808  1E5B  3002               	movlw	2
  9809  1E5C  008D               	movwf	13	;volatile
  9810                           
  9811                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9812  1E5D  018E               	clrf	14	;volatile
  9813                           
  9814                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9815  1E5E  3022               	movlw	34
  9816  1E5F  0023               	movlb	3	; select bank3
  9817  1E60  008C               	movwf	12	;volatile
  9818                           
  9819                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9820  1E61  018D               	clrf	13	;volatile
  9821                           
  9822                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9823  1E62  018E               	clrf	14	;volatile
  9824                           
  9825                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9826  1E63  3077               	movlw	119
  9827  1E64  0020               	movlb	0	; select bank0
  9828  1E65  008C               	movwf	12	;volatile
  9829                           
  9830                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  9831  1E66  3007               	movlw	7
  9832  1E67  008D               	movwf	13	;volatile
  9833                           
  9834                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9835  1E68  300C               	movlw	12
  9836  1E69  008E               	movwf	14	;volatile
  9837  1E6A  0008               	return
  9838  1E6B                     __end_of_IO_Set:	
  9839                           
  9840                           	psect	text49
  9841  1BF4                     __ptext49:	
  9842 ;; *************** function _IOC_Set *****************
  9843 ;; Defined at:
  9844 ;;		line 366 in file "../src/MCU_B1.c"
  9845 ;; Parameters:    Size  Location     Type
  9846 ;;		None
  9847 ;; Auto vars:     Size  Location     Type
  9848 ;;		None
  9849 ;; Return value:  Size  Location     Type
  9850 ;;		None               void
  9851 ;; Registers used:
  9852 ;;		wreg, status,2
  9853 ;; Tracked objects:
  9854 ;;		On entry : 0/0
  9855 ;;		On exit  : 0/0
  9856 ;;		Unchanged: 0/0
  9857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9862 ;;Total ram usage:        0 bytes
  9863 ;; Hardware stack levels used:    1
  9864 ;; Hardware stack levels required when called:    5
  9865 ;; This function calls:
  9866 ;;		Nothing
  9867 ;; This function is called by:
  9868 ;;		_Mcu_Initialization
  9869 ;; This function uses a non-reentrant model
  9870 ;;
  9871                           
  9872                           
  9873                           ;psect for function _IOC_Set
  9874  1BF4                     _IOC_Set:	
  9875                           
  9876                           ;MCU_B1.c: 367: WPUB2 = 0;
  9877                           
  9878                           ;incstack = 0
  9879                           ; Regs used in _IOC_Set: [wreg+status,2]
  9880  1BF4  0024               	movlb	4	; select bank4
  9881  1BF5  110D               	bcf	13,2	;volatile
  9882                           
  9883                           ;MCU_B1.c: 387: IOCBP = 0b00000000;
  9884  1BF6  0027               	movlb	7	; select bank7
  9885  1BF7  0194               	clrf	20	;volatile
  9886                           
  9887                           ;MCU_B1.c: 388: IOCBN = 0b00000100;
  9888  1BF8  3004               	movlw	4
  9889  1BF9  0095               	movwf	21	;volatile
  9890                           
  9891                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
  9892  1BFA  0196               	clrf	22	;volatile
  9893                           
  9894                           ;MCU_B1.c: 394: IOCIE = 1;
  9895  1BFB  158B               	bsf	11,3	;volatile
  9896                           
  9897                           ;MCU_B1.c: 395: IOCIF = 0;
  9898  1BFC  100B               	bcf	11,0	;volatile
  9899                           
  9900                           ;MCU_B1.c: 396: PEIE = 1;
  9901  1BFD  170B               	bsf	11,6	;volatile
  9902                           
  9903                           ;MCU_B1.c: 397: GIE = 1;
  9904  1BFE  178B               	bsf	11,7	;volatile
  9905  1BFF  0008               	return
  9906  1C00                     __end_of_IOC_Set:	
  9907                           
  9908                           	psect	text50
  9909  07FC                     __ptext50:	
  9910 ;; *************** function _Fosc_Set *****************
  9911 ;; Defined at:
  9912 ;;		line 56 in file "../src/MCU_B1.c"
  9913 ;; Parameters:    Size  Location     Type
  9914 ;;		None
  9915 ;; Auto vars:     Size  Location     Type
  9916 ;;		None
  9917 ;; Return value:  Size  Location     Type
  9918 ;;		None               void
  9919 ;; Registers used:
  9920 ;;		wreg
  9921 ;; Tracked objects:
  9922 ;;		On entry : 0/0
  9923 ;;		On exit  : 0/0
  9924 ;;		Unchanged: 0/0
  9925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9930 ;;Total ram usage:        0 bytes
  9931 ;; Hardware stack levels used:    1
  9932 ;; Hardware stack levels required when called:    5
  9933 ;; This function calls:
  9934 ;;		Nothing
  9935 ;; This function is called by:
  9936 ;;		_Mcu_Initialization
  9937 ;; This function uses a non-reentrant model
  9938 ;;
  9939                           
  9940                           
  9941                           ;psect for function _Fosc_Set
  9942  07FC                     _Fosc_Set:	
  9943                           
  9944                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9945                           
  9946                           ;incstack = 0
  9947                           ; Regs used in _Fosc_Set: [wreg]
  9948  07FC  3078               	movlw	120
  9949  07FD  0021               	movlb	1	; select bank1
  9950  07FE  0099               	movwf	25	;volatile
  9951  07FF  0008               	return
  9952  0800                     __end_of_Fosc_Set:	
  9953                           
  9954                           	psect	text51
  9955  1B62                     __ptext51:	
  9956 ;; *************** function _ADC_Set *****************
  9957 ;; Defined at:
  9958 ;;		line 420 in file "../src/MCU_B1.c"
  9959 ;; Parameters:    Size  Location     Type
  9960 ;;		None
  9961 ;; Auto vars:     Size  Location     Type
  9962 ;;		None
  9963 ;; Return value:  Size  Location     Type
  9964 ;;		None               void
  9965 ;; Registers used:
  9966 ;;		wreg
  9967 ;; Tracked objects:
  9968 ;;		On entry : 0/0
  9969 ;;		On exit  : 0/0
  9970 ;;		Unchanged: 0/0
  9971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;Total ram usage:        0 bytes
  9977 ;; Hardware stack levels used:    1
  9978 ;; Hardware stack levels required when called:    5
  9979 ;; This function calls:
  9980 ;;		Nothing
  9981 ;; This function is called by:
  9982 ;;		_Mcu_Initialization
  9983 ;; This function uses a non-reentrant model
  9984 ;;
  9985                           
  9986                           
  9987                           ;psect for function _ADC_Set
  9988  1B62                     _ADC_Set:	
  9989                           
  9990                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
  9991                           
  9992                           ;incstack = 0
  9993                           ; Regs used in _ADC_Set: [wreg]
  9994  1B62  30F3               	movlw	243
  9995  1B63  0021               	movlb	1	; select bank1
  9996  1B64  009E               	movwf	30	;volatile
  9997                           
  9998                           ;MCU_B1.c: 422: FVRCON = 0xc1;
  9999  1B65  30C1               	movlw	193
 10000  1B66  0022               	movlb	2	; select bank2
 10001  1B67  0097               	movwf	23	;volatile
 10002  1B68  0008               	return
 10003  1B69                     __end_of_ADC_Set:	
 10004                           
 10005                           	psect	text52
 10006  01BA                     __ptext52:	
 10007 ;; *************** function _Load_Main *****************
 10008 ;; Defined at:
 10009 ;;		line 39 in file "../src/OverLoad_B1.c"
 10010 ;; Parameters:    Size  Location     Type
 10011 ;;		None
 10012 ;; Auto vars:     Size  Location     Type
 10013 ;;  i               1   15[BANK0 ] unsigned char 
 10014 ;;  error           1   14[BANK0 ] unsigned char 
 10015 ;;  adjgo           1   12[BANK0 ] unsigned char 
 10016 ;;  j               1   11[BANK0 ] unsigned char 
 10017 ;; Return value:  Size  Location     Type
 10018 ;;		None               void
 10019 ;; Registers used:
 10020 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10021 ;; Tracked objects:
 10022 ;;		On entry : 0/0
 10023 ;;		On exit  : 0/0
 10024 ;;		Unchanged: 0/0
 10025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10027 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10028 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10029 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10030 ;;Total ram usage:        7 bytes
 10031 ;; Hardware stack levels used:    1
 10032 ;; Hardware stack levels required when called:    8
 10033 ;; This function calls:
 10034 ;;		_getAll_DimmerLights_AdjGO
 10035 ;;		_getMain_All_Error_Status
 10036 ;;		_getMain_LightsStatus
 10037 ;;		_getMain_Lights_Count
 10038 ;;		_getMain_LoadOK
 10039 ;;		_setLoad_AH_AL_Restore
 10040 ;; This function is called by:
 10041 ;;		_main
 10042 ;; This function uses a non-reentrant model
 10043 ;;
 10044                           
 10045                           
 10046                           ;psect for function _Load_Main
 10047  01BA                     _Load_Main:	
 10048                           
 10049                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
 10050                           
 10051                           ;incstack = 0
 10052                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10053  01BA  0020               	movlb	0	; select bank0
 10054  01BB  01AF               	clrf	Load_Main@i
 10055  01BC  01AB               	clrf	Load_Main@j
 10056  01BD  3000               	movlw	0
 10057  01BE  3191  21EB  3181   	fcall	_getMain_All_Error_Status
 10058  01C1  0020               	movlb	0	; select bank0
 10059  01C2  00A9               	movwf	??_Load_Main
 10060  01C3  0829               	movf	??_Load_Main,w
 10061  01C4  00AE               	movwf	Load_Main@error
 10062  01C5  01AC               	clrf	Load_Main@adjgo
 10063                           
 10064                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10065  01C6  0022               	movlb	2	; select bank2
 10066  01C7  1C26               	btfss	_Load^(0+256),0
 10067  01C8  2AF8               	goto	l1460
 10068                           
 10069                           ;OverLoad_B1.c: 44: adjgo = getAll_DimmerLights_AdjGO();
 10070  01C9  319C  2476  3181   	fcall	_getAll_DimmerLights_AdjGO
 10071  01CC  0020               	movlb	0	; select bank0
 10072  01CD  00A9               	movwf	??_Load_Main
 10073  01CE  0829               	movf	??_Load_Main,w
 10074  01CF  00AC               	movwf	Load_Main@adjgo
 10075                           
 10076                           ;OverLoad_B1.c: 46: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
 10077  01D0  01AD               	clrf	_Load_Main$3849
 10078  01D1  3191  215E  3181   	fcall	_getMain_LightsStatus
 10079  01D4  3A01               	xorlw	1
 10080  01D5  1D03               	skipz
 10081  01D6  29E0               	goto	l7950
 10082  01D7  0020               	movlb	0	; select bank0
 10083  01D8  08AE               	movf	Load_Main@error,f
 10084  01D9  1D03               	skipz
 10085  01DA  29E0               	goto	l7950
 10086  01DB  08AC               	movf	Load_Main@adjgo,f
 10087  01DC  1D03               	skipz
 10088  01DD  29E0               	goto	l7950
 10089  01DE  01AD               	clrf	_Load_Main$3849
 10090  01DF  0AAD               	incf	_Load_Main$3849,f
 10091  01E0                     l7950:	
 10092  01E0  0020               	movlb	0	; select bank0
 10093  01E1  082D               	movf	_Load_Main$3849,w
 10094  01E2  0022               	movlb	2	; select bank2
 10095  01E3  10A6               	bcf	_Load^(0+256),1
 10096  01E4  1D03               	skipz
 10097  01E5  14A6               	bsf	_Load^(0+256),1
 10098                           
 10099                           ;OverLoad_B1.c: 47: if (getMain_LoadOK() == 1 && Load.Run == 0) {
 10100  01E6  319C  2419  3181   	fcall	_getMain_LoadOK
 10101  01E9  3A01               	xorlw	1
 10102  01EA  1D03               	skipz
 10103  01EB  29F1               	goto	l1463
 10104  01EC  0022               	movlb	2	; select bank2
 10105  01ED  19A6               	btfsc	_Load^(0+256),3
 10106  01EE  29F1               	goto	l1463
 10107                           
 10108                           ;OverLoad_B1.c: 48: Load.Run = 1;
 10109  01EF  15A6               	bsf	_Load^(0+256),3
 10110                           
 10111                           ;OverLoad_B1.c: 49: Load.OK = 0;
 10112  01F0  13A6               	bcf	_Load^(0+256),7
 10113  01F1                     l1463:	
 10114                           
 10115                           ;OverLoad_B1.c: 50: }
 10116                           ;OverLoad_B1.c: 53: if (Load.GO == 1) {
 10117  01F1  0022               	movlb	2	; select bank2
 10118  01F2  1CA6               	btfss	_Load^(0+256),1
 10119  01F3  2AC8               	goto	l1464
 10120                           
 10121                           ;OverLoad_B1.c: 54: Load.LightsON = 1;
 10122  01F4  1526               	bsf	_Load^(0+256),2
 10123                           
 10124                           ;OverLoad_B1.c: 56: if (Load.ADtoGO == 1) {
 10125  01F5  1E26               	btfss	_Load^(0+256),4
 10126  01F6  2AC6               	goto	l1465
 10127                           
 10128                           ;OverLoad_B1.c: 57: Load.Time++;
 10129  01F7  3001               	movlw	1
 10130  01F8  07A7               	addwf	(_Load^(0+256)+1),f
 10131  01F9  3000               	movlw	0
 10132  01FA  3DA8               	addwfc	((_Load+1)^(0+256)+1),f
 10133                           
 10134                           ;OverLoad_B1.c: 58: if (Load.Time >= 5) {
 10135  01FB  3000               	movlw	0
 10136  01FC  0228               	subwf	((_Load+1)^(0+256)+1),w
 10137  01FD  3005               	movlw	5
 10138  01FE  1903               	skipnz
 10139  01FF  0227               	subwf	(_Load^(0+256)+1),w
 10140  0200  1C03               	skipc
 10141  0201  0008               	return
 10142                           
 10143                           ;OverLoad_B1.c: 59: Load.Time = 0;
 10144  0202  01A7               	clrf	(_Load^(0+256)+1)
 10145  0203  01A8               	clrf	((_Load+1)^(0+256)+1)
 10146                           
 10147                           ;OverLoad_B1.c: 60: Load.ADtoGO = 0;
 10148  0204  1226               	bcf	_Load^(0+256),4
 10149                           
 10150                           ;OverLoad_B1.c: 62: for (i = 0; i < 4; i++) {
 10151  0205  0020               	movlb	0	; select bank0
 10152  0206  01AF               	clrf	Load_Main@i
 10153  0207  3004               	movlw	4
 10154  0208  022F               	subwf	Load_Main@i,w
 10155  0209  1803               	btfsc	3,0
 10156  020A  2A35               	goto	l7976
 10157  020B                     l7970:	
 10158                           
 10159                           ;OverLoad_B1.c: 63: Load.ADH += Load.AH[i];
 10160  020B  352F               	lslf	Load_Main@i,w
 10161  020C  3E31               	addlw	(_Load+11)& (0+255)
 10162  020D  0086               	movwf	6
 10163  020E  3001               	movlw	1	; select bank2/3
 10164  020F  0087               	movwf	7
 10165  0210  3F40               	moviw [0]fsr1
 10166  0211  00A9               	movwf	??_Load_Main
 10167  0212  3F41               	moviw [1]fsr1
 10168  0213  00AA               	movwf	??_Load_Main+1
 10169  0214  0829               	movf	??_Load_Main,w
 10170  0215  0022               	movlb	2	; select bank2
 10171  0216  07AB               	addwf	(_Load^(0+256)+5),f
 10172  0217  0020               	movlb	0	; select bank0
 10173  0218  082A               	movf	??_Load_Main+1,w
 10174  0219  0022               	movlb	2	; select bank2
 10175  021A  3DAC               	addwfc	((_Load+1)^(0+256)+5),f
 10176                           
 10177                           ;OverLoad_B1.c: 64: Load.ADL += Load.AL[i];
 10178  021B  0020               	movlb	0	; select bank0
 10179  021C  352F               	lslf	Load_Main@i,w
 10180  021D  3E3B               	addlw	(_Load+21)& (0+255)
 10181  021E  0086               	movwf	6
 10182  021F  3001               	movlw	1	; select bank2/3
 10183  0220  0087               	movwf	7
 10184  0221  3F40               	moviw [0]fsr1
 10185  0222  00A9               	movwf	??_Load_Main
 10186  0223  3F41               	moviw [1]fsr1
 10187  0224  00AA               	movwf	??_Load_Main+1
 10188  0225  0829               	movf	??_Load_Main,w
 10189  0226  0022               	movlb	2	; select bank2
 10190  0227  07AD               	addwf	(_Load^(0+256)+7),f
 10191  0228  0020               	movlb	0	; select bank0
 10192  0229  082A               	movf	??_Load_Main+1,w
 10193  022A  0022               	movlb	2	; select bank2
 10194  022B  3DAE               	addwfc	((_Load+1)^(0+256)+7),f
 10195  022C  3001               	movlw	1
 10196  022D  0020               	movlb	0	; select bank0
 10197  022E  00A9               	movwf	??_Load_Main
 10198  022F  0829               	movf	??_Load_Main,w
 10199  0230  07AF               	addwf	Load_Main@i,f
 10200  0231  3004               	movlw	4
 10201  0232  022F               	subwf	Load_Main@i,w
 10202  0233  1C03               	skipc
 10203  0234  2A0B               	goto	l7970
 10204  0235                     l7976:	
 10205                           
 10206                           ;OverLoad_B1.c: 65: }
 10207                           ;OverLoad_B1.c: 66: Load.ADH /= 4;
 10208  0235  3002               	movlw	2
 10209  0236  0022               	movlb	2	; select bank2
 10210  0237                     u8005:	
 10211  0237  36AC               	lsrf	((_Load+1)^(0+256)+5),f
 10212  0238  0CAB               	rrf	(_Load^(0+256)+5),f
 10213  0239  0B89               	decfsz	9,f
 10214  023A  2A37               	goto	u8005
 10215                           
 10216                           ;OverLoad_B1.c: 67: Load.ADL /= 4;
 10217  023B  3002               	movlw	2
 10218  023C                     u8015:	
 10219  023C  36AE               	lsrf	((_Load+1)^(0+256)+7),f
 10220  023D  0CAD               	rrf	(_Load^(0+256)+7),f
 10221  023E  0B89               	decfsz	9,f
 10222  023F  2A3C               	goto	u8015
 10223                           
 10224                           ;OverLoad_B1.c: 68: setLoad_AH_AL_Restore();
 10225  0240  319E  26A0  3181   	fcall	_setLoad_AH_AL_Restore
 10226                           
 10227                           ;OverLoad_B1.c: 69: if (Load.ADH > Load.ADL) {
 10228  0243  0022               	movlb	2	; select bank2
 10229  0244  082C               	movf	((_Load+1)^(0+256)+5),w
 10230  0245  022E               	subwf	((_Load+1)^(0+256)+7),w
 10231  0246  1D03               	skipz
 10232  0247  2A4A               	goto	u8025
 10233  0248  082B               	movf	(_Load^(0+256)+5),w
 10234  0249  022D               	subwf	(_Load^(0+256)+7),w
 10235  024A                     u8025:	
 10236  024A  1803               	skipnc
 10237  024B  0008               	return
 10238                           
 10239                           ;OverLoad_B1.c: 70: Load.AD = Load.ADH - Load.ADL;
 10240  024C  3005               	movlw	5
 10241  024D  3E26               	addlw	_Load& (0+255)
 10242  024E  0086               	movwf	6
 10243  024F  3001               	movlw	1	; select bank2/3
 10244  0250  0087               	movwf	7
 10245  0251  092D               	comf	(_Load^(0+256)+7),w
 10246  0252  0020               	movlb	0	; select bank0
 10247  0253  00A9               	movwf	??_Load_Main
 10248  0254  0022               	movlb	2	; select bank2
 10249  0255  092E               	comf	((_Load+1)^(0+256)+7),w
 10250  0256  0020               	movlb	0	; select bank0
 10251  0257  00AA               	movwf	??_Load_Main+1
 10252  0258  0AA9               	incf	??_Load_Main,f
 10253  0259  1903               	skipnz
 10254  025A  0AAA               	incf	??_Load_Main+1,f
 10255  025B  3F40               	moviw [0]fsr1
 10256  025C  0729               	addwf	??_Load_Main,w
 10257  025D  0022               	movlb	2	; select bank2
 10258  025E  00C5               	movwf	(_Load^(0+256)+31)
 10259  025F  3F41               	moviw [1]fsr1
 10260  0260  0020               	movlb	0	; select bank0
 10261  0261  3D2A               	addwfc	??_Load_Main+1,w
 10262  0262  0022               	movlb	2	; select bank2
 10263  0263  00C6               	movwf	(_Load^(0+256)+32)
 10264                           
 10265                           ;OverLoad_B1.c: 71: Load.ADH = 0;
 10266  0264  01AB               	clrf	(_Load^(0+256)+5)
 10267  0265  01AC               	clrf	((_Load+1)^(0+256)+5)
 10268                           
 10269                           ;OverLoad_B1.c: 72: Load.ADL = 0;
 10270  0266  01AD               	clrf	(_Load^(0+256)+7)
 10271  0267  01AE               	clrf	((_Load+1)^(0+256)+7)
 10272                           
 10273                           ;OverLoad_B1.c: 73: Load.LightsCount = getMain_Lights_Count();
 10274  0268  319D  25F5  3181   	fcall	_getMain_Lights_Count
 10275  026B  0020               	movlb	0	; select bank0
 10276  026C  00A9               	movwf	??_Load_Main
 10277  026D  0829               	movf	??_Load_Main,w
 10278  026E  0022               	movlb	2	; select bank2
 10279  026F  00D1               	movwf	(_Load^(0+256)+43)
 10280                           
 10281                           ;OverLoad_B1.c: 75: if (Load.Run == 1) {
 10282  0270  1DA6               	btfss	_Load^(0+256),3
 10283  0271  2A97               	goto	l8008
 10284                           
 10285                           ;OverLoad_B1.c: 76: if (Load.Count < 2) {
 10286  0272  3002               	movlw	2
 10287  0273  024F               	subwf	(_Load^(0+256)+41),w
 10288  0274  1803               	skipnc
 10289  0275  2A97               	goto	l8008
 10290                           
 10291                           ;OverLoad_B1.c: 77: Load.Count++;
 10292  0276  3001               	movlw	1
 10293  0277  0020               	movlb	0	; select bank0
 10294  0278  00A9               	movwf	??_Load_Main
 10295  0279  0829               	movf	??_Load_Main,w
 10296  027A  0022               	movlb	2	; select bank2
 10297  027B  07CF               	addwf	(_Load^(0+256)+41),f
 10298                           
 10299                           ;OverLoad_B1.c: 78: if (Load.Count == 1) {
 10300  027C  084F               	movf	(_Load^(0+256)+41),w
 10301  027D  3A01               	xorlw	1
 10302  027E  1D03               	skipz
 10303  027F  2A84               	goto	l8000
 10304                           
 10305                           ;OverLoad_B1.c: 79: Load.JudgeValue = (20*55);
 10306  0280  304C               	movlw	76
 10307  0281  00CB               	movwf	(_Load^(0+256)+37)
 10308  0282  3004               	movlw	4
 10309  0283  2A8F               	goto	L7
 10310  0284                     l8000:	
 10311                           ;OverLoad_B1.c: 80: } else if (Load.Count == 2) {
 10312                           
 10313  0284  084F               	movf	(_Load^(0+256)+41),w
 10314  0285  3A02               	xorlw	2
 10315  0286  1D03               	skipz
 10316  0287  2A97               	goto	l8008
 10317                           
 10318                           ;OverLoad_B1.c: 81: if (Load.LightsCount == 1) {
 10319  0288  0851               	movf	(_Load^(0+256)+43),w
 10320  0289  3A01               	xorlw	1
 10321  028A  1D03               	skipz
 10322  028B  2A91               	goto	l8006
 10323                           
 10324                           ;OverLoad_B1.c: 82: Load.JudgeValue = (int)(1.8*55);
 10325  028C  3063               	movlw	99
 10326  028D  00CB               	movwf	(_Load^(0+256)+37)
 10327  028E  3000               	movlw	0
 10328  028F                     L7:	
 10329  028F  00CC               	movwf	(_Load^(0+256)+38)
 10330                           
 10331                           ;OverLoad_B1.c: 83: } else {
 10332  0290  2A97               	goto	l8008
 10333  0291                     l8006:	
 10334                           
 10335                           ;OverLoad_B1.c: 84: Load.JudgeValue = (int)(1.8*55) + Load.TotalLoad;
 10336  0291  082F               	movf	(_Load^(0+256)+9),w
 10337  0292  3E63               	addlw	99
 10338  0293  00CB               	movwf	(_Load^(0+256)+37)
 10339  0294  3000               	movlw	0
 10340  0295  3D30               	addwfc	((_Load+1)^(0+256)+9),w
 10341  0296  00CC               	movwf	((_Load+1)^(0+256)+37)
 10342  0297                     l8008:	
 10343                           
 10344                           ;OverLoad_B1.c: 85: }
 10345                           ;OverLoad_B1.c: 86: }
 10346                           ;OverLoad_B1.c: 87: }
 10347                           ;OverLoad_B1.c: 88: }
 10348                           ;OverLoad_B1.c: 90: if (Load.AD >= Load.JudgeValue) {
 10349  0297  084C               	movf	((_Load+1)^(0+256)+37),w
 10350  0298  0246               	subwf	((_Load+1)^(0+256)+31),w
 10351  0299  1D03               	skipz
 10352  029A  2A9D               	goto	u8085
 10353  029B  084B               	movf	(_Load^(0+256)+37),w
 10354  029C  0245               	subwf	(_Load^(0+256)+31),w
 10355  029D                     u8085:	
 10356  029D  1C03               	skipc
 10357  029E  2AAC               	goto	l8018
 10358                           
 10359                           ;OverLoad_B1.c: 91: Load.ErrorCount++;
 10360  029F  3001               	movlw	1
 10361  02A0  0020               	movlb	0	; select bank0
 10362  02A1  00A9               	movwf	??_Load_Main
 10363  02A2  0829               	movf	??_Load_Main,w
 10364  02A3  0022               	movlb	2	; select bank2
 10365  02A4  07D0               	addwf	(_Load^(0+256)+42),f
 10366                           
 10367                           ;OverLoad_B1.c: 92: if (Load.ErrorCount > 2) {
 10368  02A5  3003               	movlw	3
 10369  02A6  0250               	subwf	(_Load^(0+256)+42),w
 10370  02A7  1C03               	skipc
 10371  02A8  0008               	return
 10372                           
 10373                           ;OverLoad_B1.c: 93: Load.ErrorCount = 0;
 10374  02A9  01D0               	clrf	(_Load^(0+256)+42)
 10375                           
 10376                           ;OverLoad_B1.c: 94: Load.ERROR = 1;
 10377  02AA  16A6               	bsf	_Load^(0+256),5
 10378                           
 10379                           ;OverLoad_B1.c: 107: }
 10380                           ;OverLoad_B1.c: 108: } else {
 10381  02AB  0008               	return
 10382  02AC                     l8018:	
 10383                           
 10384                           ;OverLoad_B1.c: 109: Load.ErrorCount = 0;
 10385  02AC  01D0               	clrf	(_Load^(0+256)+42)
 10386                           
 10387                           ;OverLoad_B1.c: 110: if (Load.Run == 1) {
 10388  02AD  1DA6               	btfss	_Load^(0+256),3
 10389  02AE  0008               	return
 10390                           
 10391                           ;OverLoad_B1.c: 111: if (Load.OK == 0) {
 10392  02AF  1BA6               	btfsc	_Load^(0+256),7
 10393  02B0  0008               	return
 10394                           
 10395                           ;OverLoad_B1.c: 112: Load.SafeCount++;
 10396  02B1  3001               	movlw	1
 10397  02B2  0020               	movlb	0	; select bank0
 10398  02B3  00A9               	movwf	??_Load_Main
 10399  02B4  0829               	movf	??_Load_Main,w
 10400  02B5  0022               	movlb	2	; select bank2
 10401  02B6  07D2               	addwf	(_Load^(0+256)+44),f
 10402                           
 10403                           ;OverLoad_B1.c: 113: if (Load.SafeCount >= 3) {
 10404  02B7  3003               	movlw	3
 10405  02B8  0252               	subwf	(_Load^(0+256)+44),w
 10406  02B9  1C03               	skipc
 10407  02BA  0008               	return
 10408                           
 10409                           ;OverLoad_B1.c: 114: Load.SafeCount = 0;
 10410  02BB  01D2               	clrf	(_Load^(0+256)+44)
 10411                           
 10412                           ;OverLoad_B1.c: 115: Load.OK = 1;
 10413  02BC  17A6               	bsf	_Load^(0+256),7
 10414                           
 10415                           ;OverLoad_B1.c: 116: Load.Run = 0;
 10416  02BD  11A6               	bcf	_Load^(0+256),3
 10417                           
 10418                           ;OverLoad_B1.c: 117: Load.Count = 0;
 10419  02BE  01CF               	clrf	(_Load^(0+256)+41)
 10420                           
 10421                           ;OverLoad_B1.c: 118: Load.TotalLoad = Load.AD;
 10422  02BF  0846               	movf	((_Load+1)^(0+256)+31),w
 10423  02C0  01B0               	clrf	((_Load+1)^(0+256)+9)
 10424  02C1  07B0               	addwf	((_Load+1)^(0+256)+9),f
 10425  02C2  0845               	movf	(_Load^(0+256)+31),w
 10426  02C3  01AF               	clrf	(_Load^(0+256)+9)
 10427  02C4  07AF               	addwf	(_Load^(0+256)+9),f
 10428                           
 10429                           ;OverLoad_B1.c: 127: }
 10430                           ;OverLoad_B1.c: 128: }
 10431                           ;OverLoad_B1.c: 129: }
 10432                           ;OverLoad_B1.c: 130: }
 10433                           ;OverLoad_B1.c: 131: }
 10434                           ;OverLoad_B1.c: 132: }
 10435                           ;OverLoad_B1.c: 133: } else {
 10436  02C5  0008               	return
 10437  02C6                     l1465:	
 10438                           
 10439                           ;OverLoad_B1.c: 134: Load.ADtoGO = 1;
 10440  02C6  1626               	bsf	_Load^(0+256),4
 10441                           
 10442                           ;OverLoad_B1.c: 135: }
 10443                           ;OverLoad_B1.c: 136: } else {
 10444  02C7  0008               	return
 10445  02C8                     l1464:	
 10446                           
 10447                           ;OverLoad_B1.c: 137: if (Load.LightsON == 1 && error != 3) {
 10448  02C8  1D26               	btfss	_Load^(0+256),2
 10449  02C9  2AE6               	goto	l8066
 10450  02CA  0020               	movlb	0	; select bank0
 10451  02CB  082E               	movf	Load_Main@error,w
 10452  02CC  3A03               	xorlw	3
 10453  02CD  1903               	skipnz
 10454  02CE  2AE6               	goto	l8066
 10455                           
 10456                           ;OverLoad_B1.c: 138: Load.LightsON = 0;
 10457  02CF  0022               	movlb	2	; select bank2
 10458  02D0  1126               	bcf	_Load^(0+256),2
 10459                           
 10460                           ;OverLoad_B1.c: 140: Load.Time = 0;
 10461  02D1  01A7               	clrf	(_Load^(0+256)+1)
 10462  02D2  01A8               	clrf	((_Load+1)^(0+256)+1)
 10463                           
 10464                           ;OverLoad_B1.c: 141: Load.ADtoGO = 0;
 10465  02D3  1226               	bcf	_Load^(0+256),4
 10466                           
 10467                           ;OverLoad_B1.c: 142: setLoad_AH_AL_Restore();
 10468  02D4  319E  26A0  3181   	fcall	_setLoad_AH_AL_Restore
 10469                           
 10470                           ;OverLoad_B1.c: 143: Load.Count = 0;
 10471  02D7  0022               	movlb	2	; select bank2
 10472  02D8  01CF               	clrf	(_Load^(0+256)+41)
 10473                           
 10474                           ;OverLoad_B1.c: 144: Load.ErrorCount = 0;
 10475  02D9  01D0               	clrf	(_Load^(0+256)+42)
 10476                           
 10477                           ;OverLoad_B1.c: 145: Load.SafeCount = 0;
 10478  02DA  01D2               	clrf	(_Load^(0+256)+44)
 10479                           
 10480                           ;OverLoad_B1.c: 147: Load.ADH = 0;
 10481  02DB  01AB               	clrf	(_Load^(0+256)+5)
 10482  02DC  01AC               	clrf	((_Load+1)^(0+256)+5)
 10483                           
 10484                           ;OverLoad_B1.c: 148: Load.ADL = 0;
 10485  02DD  01AD               	clrf	(_Load^(0+256)+7)
 10486  02DE  01AE               	clrf	((_Load+1)^(0+256)+7)
 10487                           
 10488                           ;OverLoad_B1.c: 149: Load.AD = 0;
 10489  02DF  01C5               	clrf	(_Load^(0+256)+31)
 10490  02E0  01C6               	clrf	((_Load+1)^(0+256)+31)
 10491                           
 10492                           ;OverLoad_B1.c: 150: Load.JudgeValue = 0;
 10493  02E1  01CB               	clrf	(_Load^(0+256)+37)
 10494  02E2  01CC               	clrf	((_Load+1)^(0+256)+37)
 10495                           
 10496                           ;OverLoad_B1.c: 151: Load.LightsCount = 0;
 10497  02E3  01D1               	clrf	(_Load^(0+256)+43)
 10498                           
 10499                           ;OverLoad_B1.c: 152: Load.Run = 0;
 10500  02E4  11A6               	bcf	_Load^(0+256),3
 10501                           
 10502                           ;OverLoad_B1.c: 153: Load.OK = 1;
 10503  02E5  17A6               	bsf	_Load^(0+256),7
 10504  02E6                     l8066:	
 10505                           
 10506                           ;OverLoad_B1.c: 161: }
 10507                           ;OverLoad_B1.c: 162: if (Load.ERROR == 1) {
 10508  02E6  0022               	movlb	2	; select bank2
 10509  02E7  1EA6               	btfss	_Load^(0+256),5
 10510  02E8  0008               	return
 10511                           
 10512                           ;OverLoad_B1.c: 163: Load.ErrorTime++;
 10513  02E9  3001               	movlw	1
 10514  02EA  07A9               	addwf	(_Load^(0+256)+3),f
 10515  02EB  3000               	movlw	0
 10516  02EC  3DAA               	addwfc	((_Load+1)^(0+256)+3),f
 10517                           
 10518                           ;OverLoad_B1.c: 164: if (Load.ErrorTime >= 1000) {
 10519  02ED  3003               	movlw	3
 10520  02EE  022A               	subwf	((_Load+1)^(0+256)+3),w
 10521  02EF  30E8               	movlw	232
 10522  02F0  1903               	skipnz
 10523  02F1  0229               	subwf	(_Load^(0+256)+3),w
 10524  02F2  1C03               	skipc
 10525  02F3  0008               	return
 10526                           
 10527                           ;OverLoad_B1.c: 165: Load.ErrorTime = 0;
 10528  02F4  01A9               	clrf	(_Load^(0+256)+3)
 10529  02F5  01AA               	clrf	((_Load+1)^(0+256)+3)
 10530                           
 10531                           ;OverLoad_B1.c: 172: Load.ERROR = 0;
 10532  02F6  12A6               	bcf	_Load^(0+256),5
 10533                           
 10534                           ;OverLoad_B1.c: 173: }
 10535                           ;OverLoad_B1.c: 174: }
 10536                           ;OverLoad_B1.c: 175: }
 10537                           ;OverLoad_B1.c: 176: } else {
 10538  02F7  0008               	return
 10539  02F8                     l1460:	
 10540                           
 10541                           ;OverLoad_B1.c: 177: if (myMain.PowerON == 1) {
 10542  02F8  0021               	movlb	1	; select bank1
 10543  02F9  1C20               	btfss	_myMain^(0+128),0
 10544  02FA  0008               	return
 10545                           
 10546                           ;OverLoad_B1.c: 178: Load.Enable = 1;
 10547  02FB  0022               	movlb	2	; select bank2
 10548  02FC  1426               	bsf	_Load^(0+256),0
 10549  02FD  0008               	return
 10550  02FE                     __end_of_Load_Main:	
 10551                           
 10552                           	psect	text53
 10553  1C19                     __ptext53:	
 10554 ;; *************** function _getMain_LoadOK *****************
 10555 ;; Defined at:
 10556 ;;		line 436 in file "../src/main_B1.c"
 10557 ;; Parameters:    Size  Location     Type
 10558 ;;		None
 10559 ;; Auto vars:     Size  Location     Type
 10560 ;;  ok              1    2[BANK0 ] unsigned char 
 10561 ;; Return value:  Size  Location     Type
 10562 ;;                  1    wreg      unsigned char 
 10563 ;; Registers used:
 10564 ;;		wreg, status,2, pclath, cstack
 10565 ;; Tracked objects:
 10566 ;;		On entry : 0/0
 10567 ;;		On exit  : 0/0
 10568 ;;		Unchanged: 0/0
 10569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10571 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10572 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10573 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10574 ;;Total ram usage:        2 bytes
 10575 ;; Hardware stack levels used:    1
 10576 ;; Hardware stack levels required when called:    6
 10577 ;; This function calls:
 10578 ;;		_getDimmer_LoadOK
 10579 ;; This function is called by:
 10580 ;;		_Load_Main
 10581 ;; This function uses a non-reentrant model
 10582 ;;
 10583                           
 10584                           
 10585                           ;psect for function _getMain_LoadOK
 10586  1C19                     _getMain_LoadOK:	
 10587                           
 10588                           ;main_B1.c: 437: char ok = 0;
 10589                           
 10590                           ;incstack = 0
 10591                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10592  1C19  0020               	movlb	0	; select bank0
 10593  1C1A  01A2               	clrf	getMain_LoadOK@ok
 10594                           
 10595                           ;main_B1.c: 443: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10596  1C1B  319B  2389         	fcall	_getDimmer_LoadOK
 10597  1C1D  3A01               	xorlw	1
 10598  1C1E  3000               	movlw	0
 10599  1C1F  1903               	skipnz
 10600  1C20  3001               	movlw	1
 10601  1C21  0020               	movlb	0	; select bank0
 10602  1C22  00A1               	movwf	??_getMain_LoadOK
 10603  1C23  0821               	movf	??_getMain_LoadOK,w
 10604  1C24  00A2               	movwf	getMain_LoadOK@ok
 10605                           
 10606                           ;main_B1.c: 445: return ok;
 10607  1C25  0822               	movf	getMain_LoadOK@ok,w
 10608  1C26  0008               	return
 10609  1C27                     __end_of_getMain_LoadOK:	
 10610                           
 10611                           	psect	text54
 10612  1B89                     __ptext54:	
 10613 ;; *************** function _getDimmer_LoadOK *****************
 10614 ;; Defined at:
 10615 ;;		line 611 in file "../src/Dimmer_B1.c"
 10616 ;; Parameters:    Size  Location     Type
 10617 ;;		None
 10618 ;; Auto vars:     Size  Location     Type
 10619 ;;  status          1    0[BANK0 ] unsigned char 
 10620 ;; Return value:  Size  Location     Type
 10621 ;;                  1    wreg      unsigned char 
 10622 ;; Registers used:
 10623 ;;		wreg, status,2
 10624 ;; Tracked objects:
 10625 ;;		On entry : 0/0
 10626 ;;		On exit  : 0/0
 10627 ;;		Unchanged: 0/0
 10628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10630 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10632 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10633 ;;Total ram usage:        1 bytes
 10634 ;; Hardware stack levels used:    1
 10635 ;; Hardware stack levels required when called:    5
 10636 ;; This function calls:
 10637 ;;		Nothing
 10638 ;; This function is called by:
 10639 ;;		_getMain_LoadOK
 10640 ;; This function uses a non-reentrant model
 10641 ;;
 10642                           
 10643                           
 10644                           ;psect for function _getDimmer_LoadOK
 10645  1B89                     _getDimmer_LoadOK:	
 10646                           
 10647                           ;Dimmer_B1.c: 612: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10648                           
 10649                           ;incstack = 0
 10650                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10651  1B89  3000               	movlw	0
 10652  1B8A  0022               	movlb	2	; select bank2
 10653  1B8B  18A0               	btfsc	_Dimmer^(0+256),1
 10654  1B8C  3001               	movlw	1
 10655  1B8D  0020               	movlb	0	; select bank0
 10656  1B8E  00A0               	movwf	getDimmer_LoadOK@status
 10657                           
 10658                           ;Dimmer_B1.c: 613: return status;
 10659  1B8F  0820               	movf	getDimmer_LoadOK@status,w
 10660  1B90  0008               	return
 10661  1B91                     __end_of_getDimmer_LoadOK:	
 10662                           
 10663                           	psect	text55
 10664  1DF5                     __ptext55:	
 10665 ;; *************** function _getMain_Lights_Count *****************
 10666 ;; Defined at:
 10667 ;;		line 406 in file "../src/main_B1.c"
 10668 ;; Parameters:    Size  Location     Type
 10669 ;;		None
 10670 ;; Auto vars:     Size  Location     Type
 10671 ;;  status2         1    3[BANK0 ] unsigned char 
 10672 ;;  status1         1    2[BANK0 ] unsigned char 
 10673 ;;  status3         1    1[BANK0 ] unsigned char 
 10674 ;;  count           1    0[BANK0 ] unsigned char 
 10675 ;; Return value:  Size  Location     Type
 10676 ;;                  1    wreg      unsigned char 
 10677 ;; Registers used:
 10678 ;;		wreg, status,2, status,0
 10679 ;; Tracked objects:
 10680 ;;		On entry : 0/0
 10681 ;;		On exit  : 0/0
 10682 ;;		Unchanged: 0/0
 10683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10685 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10687 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10688 ;;Total ram usage:        4 bytes
 10689 ;; Hardware stack levels used:    1
 10690 ;; Hardware stack levels required when called:    5
 10691 ;; This function calls:
 10692 ;;		Nothing
 10693 ;; This function is called by:
 10694 ;;		_Load_Main
 10695 ;; This function uses a non-reentrant model
 10696 ;;
 10697                           
 10698                           
 10699                           ;psect for function _getMain_Lights_Count
 10700  1DF5                     _getMain_Lights_Count:	
 10701                           
 10702                           ;main_B1.c: 407: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10703                           
 10704                           ;incstack = 0
 10705                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10706  1DF5  0020               	movlb	0	; select bank0
 10707  1DF6  01A2               	clrf	getMain_Lights_Count@status1
 10708  1DF7  01A3               	clrf	getMain_Lights_Count@status2
 10709  1DF8  01A1               	clrf	getMain_Lights_Count@status3
 10710  1DF9  01A0               	clrf	getMain_Lights_Count@count
 10711                           
 10712                           ;main_B1.c: 411: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10713  1DFA  3000               	movlw	0
 10714  1DFB  0023               	movlb	3	; select bank3
 10715  1DFC  18C7               	btfsc	(_DimmerLights1^(0+384)+9),1
 10716  1DFD  3001               	movlw	1
 10717  1DFE  0020               	movlb	0	; select bank0
 10718  1DFF  00A2               	movwf	getMain_Lights_Count@status1
 10719                           
 10720                           ;main_B1.c: 414: status2 = DimmerLights2.Loop == 1 ? 1 : 0;
 10721  1E00  3000               	movlw	0
 10722  1E01  0023               	movlb	3	; select bank3
 10723  1E02  18D6               	btfsc	(_DimmerLights2^(0+384)+9),1
 10724  1E03  3001               	movlw	1
 10725  1E04  0020               	movlb	0	; select bank0
 10726  1E05  00A3               	movwf	getMain_Lights_Count@status2
 10727                           
 10728                           ;main_B1.c: 432: return count = (status1 + status2 + status3);
 10729  1E06  0822               	movf	getMain_Lights_Count@status1,w
 10730  1E07  0723               	addwf	getMain_Lights_Count@status2,w
 10731  1E08  0721               	addwf	getMain_Lights_Count@status3,w
 10732  1E09  00A0               	movwf	getMain_Lights_Count@count
 10733  1E0A  0008               	return
 10734  1E0B                     __end_of_getMain_Lights_Count:	
 10735                           
 10736                           	psect	text56
 10737  1C76                     __ptext56:	
 10738 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 10739 ;; Defined at:
 10740 ;;		line 502 in file "../src/Dimmer_B1.c"
 10741 ;; Parameters:    Size  Location     Type
 10742 ;;		None
 10743 ;; Auto vars:     Size  Location     Type
 10744 ;;  adjgo           1    1[BANK0 ] unsigned char 
 10745 ;; Return value:  Size  Location     Type
 10746 ;;                  1    wreg      unsigned char 
 10747 ;; Registers used:
 10748 ;;		wreg, status,2
 10749 ;; Tracked objects:
 10750 ;;		On entry : 0/0
 10751 ;;		On exit  : 0/0
 10752 ;;		Unchanged: 0/0
 10753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10755 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10756 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10757 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10758 ;;Total ram usage:        3 bytes
 10759 ;; Hardware stack levels used:    1
 10760 ;; Hardware stack levels required when called:    5
 10761 ;; This function calls:
 10762 ;;		Nothing
 10763 ;; This function is called by:
 10764 ;;		_setDimmerLights_SwOn
 10765 ;;		_setDimmerLights_AdjControl
 10766 ;;		_Load_Main
 10767 ;; This function uses a non-reentrant model
 10768 ;;
 10769                           
 10770                           
 10771                           ;psect for function _getAll_DimmerLights_AdjGO
 10772  1C76                     _getAll_DimmerLights_AdjGO:	
 10773                           
 10774                           ;Dimmer_B1.c: 503: char adjgo = 0;
 10775                           
 10776                           ;incstack = 0
 10777                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 10778  1C76  0020               	movlb	0	; select bank0
 10779  1C77  01A1               	clrf	getAll_DimmerLights_AdjGO@adjgo
 10780                           
 10781                           ;Dimmer_B1.c: 508: adjgo = DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1 ? 1 : 0;
 10782  1C78  01A2               	clrf	_getAll_DimmerLights_AdjGO$2556
 10783  1C79  0AA2               	incf	_getAll_DimmerLights_AdjGO$2556,f
 10784  1C7A  0023               	movlb	3	; select bank3
 10785  1C7B  1DC6               	btfss	(_DimmerLights1^(0+384)+8),3
 10786  1C7C  19D5               	btfsc	(_DimmerLights2^(0+384)+8),3
 10787  1C7D  2C80               	goto	l6146
 10788  1C7E  0020               	movlb	0	; select bank0
 10789  1C7F  01A2               	clrf	_getAll_DimmerLights_AdjGO$2556
 10790  1C80                     l6146:	
 10791  1C80  0020               	movlb	0	; select bank0
 10792  1C81  0822               	movf	_getAll_DimmerLights_AdjGO$2556,w
 10793  1C82  00A0               	movwf	??_getAll_DimmerLights_AdjGO
 10794  1C83  0820               	movf	??_getAll_DimmerLights_AdjGO,w
 10795  1C84  00A1               	movwf	getAll_DimmerLights_AdjGO@adjgo
 10796                           
 10797                           ;Dimmer_B1.c: 513: return adjgo;
 10798  1C85  0821               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 10799  1C86  0008               	return
 10800  1C87                     __end_of_getAll_DimmerLights_AdjGO:	
 10801                           
 10802                           	psect	text57
 10803  1B4B                     __ptext57:	
 10804 ;; *************** function _Load_Initialization *****************
 10805 ;; Defined at:
 10806 ;;		line 9 in file "../src/OverLoad_B1.c"
 10807 ;; Parameters:    Size  Location     Type
 10808 ;;		None
 10809 ;; Auto vars:     Size  Location     Type
 10810 ;;		None
 10811 ;; Return value:  Size  Location     Type
 10812 ;;		None               void
 10813 ;; Registers used:
 10814 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10815 ;; Tracked objects:
 10816 ;;		On entry : 0/0
 10817 ;;		On exit  : 0/0
 10818 ;;		Unchanged: 0/0
 10819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10824 ;;Total ram usage:        0 bytes
 10825 ;; Hardware stack levels used:    1
 10826 ;; Hardware stack levels required when called:    6
 10827 ;; This function calls:
 10828 ;;		_setLoad_AH_AL_Restore
 10829 ;; This function is called by:
 10830 ;;		_main
 10831 ;; This function uses a non-reentrant model
 10832 ;;
 10833                           
 10834                           
 10835                           ;psect for function _Load_Initialization
 10836  1B4B                     _Load_Initialization:	
 10837                           
 10838                           ;OverLoad_B1.c: 10: Load.OK = 1;
 10839                           
 10840                           ;incstack = 0
 10841                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10842  1B4B  0022               	movlb	2	; select bank2
 10843  1B4C  17A6               	bsf	_Load^(0+256),7
 10844                           
 10845                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10846  1B4D  319E  26A0         	fcall	_setLoad_AH_AL_Restore
 10847  1B4F  0008               	return
 10848  1B50                     __end_of_Load_Initialization:	
 10849                           
 10850                           	psect	text58
 10851  1EA0                     __ptext58:	
 10852 ;; *************** function _setLoad_AH_AL_Restore *****************
 10853 ;; Defined at:
 10854 ;;		line 284 in file "../src/OverLoad_B1.c"
 10855 ;; Parameters:    Size  Location     Type
 10856 ;;		None
 10857 ;; Auto vars:     Size  Location     Type
 10858 ;;  i               1    1[BANK0 ] unsigned char 
 10859 ;; Return value:  Size  Location     Type
 10860 ;;		None               void
 10861 ;; Registers used:
 10862 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10863 ;; Tracked objects:
 10864 ;;		On entry : 0/0
 10865 ;;		On exit  : 0/0
 10866 ;;		Unchanged: 0/0
 10867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10869 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10870 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10871 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10872 ;;Total ram usage:        2 bytes
 10873 ;; Hardware stack levels used:    1
 10874 ;; Hardware stack levels required when called:    5
 10875 ;; This function calls:
 10876 ;;		Nothing
 10877 ;; This function is called by:
 10878 ;;		_Load_Initialization
 10879 ;;		_Load_Main
 10880 ;; This function uses a non-reentrant model
 10881 ;;
 10882                           
 10883                           
 10884                           ;psect for function _setLoad_AH_AL_Restore
 10885  1EA0                     _setLoad_AH_AL_Restore:	
 10886                           
 10887                           ;OverLoad_B1.c: 285: char i;
 10888                           ;OverLoad_B1.c: 286: for (i = 0; i < 5; i++) {
 10889                           
 10890                           ;incstack = 0
 10891                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 10892  1EA0  0020               	movlb	0	; select bank0
 10893  1EA1  01A1               	clrf	setLoad_AH_AL_Restore@i
 10894  1EA2                     L8:	
 10895  1EA2  3005               	movlw	5
 10896  1EA3  0221               	subwf	setLoad_AH_AL_Restore@i,w
 10897  1EA4  1803               	btfsc	3,0
 10898  1EA5  0008               	return
 10899                           
 10900                           ;OverLoad_B1.c: 287: Load.AH[i] = 0;
 10901  1EA6  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10902  1EA7  3E31               	addlw	(_Load+11)& (0+255)
 10903  1EA8  0086               	movwf	6
 10904  1EA9  3001               	movlw	1	; select bank2/3
 10905  1EAA  0087               	movwf	7
 10906  1EAB  3000               	movlw	0
 10907  1EAC  3FC0               	movwi [0]fsr1
 10908  1EAD  3FC1               	movwi [1]fsr1
 10909                           
 10910                           ;OverLoad_B1.c: 288: Load.AL[i] = 0xffff;
 10911  1EAE  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10912  1EAF  3E3B               	addlw	(_Load+21)& (0+255)
 10913  1EB0  0086               	movwf	6
 10914  1EB1  3001               	movlw	1	; select bank2/3
 10915  1EB2  0087               	movwf	7
 10916  1EB3  30FF               	movlw	255
 10917  1EB4  3FC0               	movwi [0]fsr1
 10918  1EB5  30FF               	movlw	255
 10919  1EB6  3FC1               	movwi [1]fsr1
 10920  1EB7  3001               	movlw	1
 10921  1EB8  00A0               	movwf	??_setLoad_AH_AL_Restore
 10922  1EB9  0820               	movf	??_setLoad_AH_AL_Restore,w
 10923  1EBA  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 10924  1EBB  2EA2               	goto	L8
 10925  1EBC                     __end_of_setLoad_AH_AL_Restore:	
 10926                           
 10927                           	psect	text59
 10928  1BE8                     __ptext59:	
 10929 ;; *************** function _LED_Main *****************
 10930 ;; Defined at:
 10931 ;;		line 47 in file "../src/LED_B1.c"
 10932 ;; Parameters:    Size  Location     Type
 10933 ;;		None
 10934 ;; Auto vars:     Size  Location     Type
 10935 ;;		None
 10936 ;; Return value:  Size  Location     Type
 10937 ;;		None               void
 10938 ;; Registers used:
 10939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10940 ;; Tracked objects:
 10941 ;;		On entry : 0/0
 10942 ;;		On exit  : 0/0
 10943 ;;		Unchanged: 0/0
 10944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10949 ;;Total ram usage:        0 bytes
 10950 ;; Hardware stack levels used:    1
 10951 ;; Hardware stack levels required when called:    7
 10952 ;; This function calls:
 10953 ;;		_setLED_Main
 10954 ;; This function is called by:
 10955 ;;		_main
 10956 ;; This function uses a non-reentrant model
 10957 ;;
 10958                           
 10959                           
 10960                           ;psect for function _LED_Main
 10961  1BE8                     _LED_Main:	
 10962                           
 10963                           ;LED_B1.c: 53: setLED_Main(1);
 10964                           
 10965                           ;incstack = 0
 10966                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10967  1BE8  3001               	movlw	1
 10968  1BE9  3193  239E  319B   	fcall	_setLED_Main
 10969                           
 10970                           ;LED_B1.c: 56: setLED_Main(2);
 10971  1BEC  3002               	movlw	2
 10972  1BED  3193  239E  319B   	fcall	_setLED_Main
 10973                           
 10974                           ;LED_B1.c: 62: setLED_Main(99);
 10975  1BF0  3063               	movlw	99
 10976  1BF1  3193  239E         	fcall	_setLED_Main
 10977  1BF3  0008               	return
 10978  1BF4                     __end_of_LED_Main:	
 10979                           
 10980                           	psect	text60
 10981  139E                     __ptext60:	
 10982 ;; *************** function _setLED_Main *****************
 10983 ;; Defined at:
 10984 ;;		line 221 in file "../src/LED_B1.c"
 10985 ;; Parameters:    Size  Location     Type
 10986 ;;  led             1    wreg     unsigned char 
 10987 ;; Auto vars:     Size  Location     Type
 10988 ;;  led             1    4[BANK0 ] unsigned char 
 10989 ;; Return value:  Size  Location     Type
 10990 ;;		None               void
 10991 ;; Registers used:
 10992 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10993 ;; Tracked objects:
 10994 ;;		On entry : 0/0
 10995 ;;		On exit  : 0/0
 10996 ;;		Unchanged: 0/0
 10997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10999 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11000 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11001 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11002 ;;Total ram usage:        3 bytes
 11003 ;; Hardware stack levels used:    1
 11004 ;; Hardware stack levels required when called:    6
 11005 ;; This function calls:
 11006 ;;		_LedPointSelect
 11007 ;; This function is called by:
 11008 ;;		_LED_Main
 11009 ;; This function uses a non-reentrant model
 11010 ;;
 11011                           
 11012                           
 11013                           ;psect for function _setLED_Main
 11014  139E                     _setLED_Main:	
 11015                           
 11016                           ;incstack = 0
 11017                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11018                           ;setLED_Main@led stored from wreg
 11019  139E  0020               	movlb	0	; select bank0
 11020  139F  00A4               	movwf	setLED_Main@led
 11021                           
 11022                           ;LED_B1.c: 222: LedPointSelect(led);
 11023  13A0  0824               	movf	setLED_Main@led,w
 11024  13A1  319E  2685  3193   	fcall	_LedPointSelect
 11025                           
 11026                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11027  13A4  087A               	movf	_LED,w
 11028  13A5  0086               	movwf	6
 11029  13A6  3001               	movlw	1	; select bank2/3
 11030  13A7  0087               	movwf	7
 11031  13A8  1C81               	btfss	1,1
 11032  13A9  0008               	return
 11033                           
 11034                           ;LED_B1.c: 224: LED->Time++;
 11035  13AA  0A7A               	incf	_LED,w
 11036  13AB  0086               	movwf	6
 11037  13AC  3001               	movlw	1	; select bank2/3
 11038  13AD  0087               	movwf	7
 11039  13AE  3001               	movlw	1
 11040  13AF  0781               	addwf	1,f
 11041  13B0  3141               	addfsr 1,1
 11042  13B1  1803               	skipnc
 11043  13B2  0A81               	incf	1,f
 11044                           
 11045                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 11046  13B3  0A7A               	incf	_LED,w
 11047  13B4  0086               	movwf	6
 11048  13B5  3001               	movlw	1	; select bank2/3
 11049  13B6  0087               	movwf	7
 11050  13B7  3F40               	moviw [0]fsr1
 11051  13B8  0020               	movlb	0	; select bank0
 11052  13B9  00A2               	movwf	??_setLED_Main
 11053  13BA  3F41               	moviw [1]fsr1
 11054  13BB  00A3               	movwf	??_setLED_Main+1
 11055  13BC  3000               	movlw	0
 11056  13BD  0223               	subwf	??_setLED_Main+1,w
 11057  13BE  3032               	movlw	50
 11058  13BF  1903               	skipnz
 11059  13C0  0222               	subwf	??_setLED_Main,w
 11060  13C1  1C03               	skipc
 11061  13C2  0008               	return
 11062                           
 11063                           ;LED_B1.c: 226: LED->Time = 0;
 11064  13C3  0A7A               	incf	_LED,w
 11065  13C4  0086               	movwf	6
 11066  13C5  3001               	movlw	1	; select bank2/3
 11067  13C6  0087               	movwf	7
 11068  13C7  3000               	movlw	0
 11069  13C8  3FC0               	movwi [0]fsr1
 11070  13C9  3FC1               	movwi [1]fsr1
 11071                           
 11072                           ;LED_B1.c: 228: if (led == 1) {
 11073  13CA  0824               	movf	setLED_Main@led,w
 11074  13CB  3A01               	xorlw	1
 11075                           
 11076                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 11077  13CC  3008               	movlw	8
 11078  13CD  1903               	btfsc	3,2
 11079  13CE  068C               	xorwf	12,f
 11080                           
 11081                           ;LED_B1.c: 230: }
 11082                           ;LED_B1.c: 233: if (led == 2) {
 11083  13CF  0824               	movf	setLED_Main@led,w
 11084  13D0  3A02               	xorlw	2
 11085  13D1  1D03               	skipz
 11086  13D2  2BD5               	goto	l1033
 11087                           
 11088                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 11089  13D3  3080               	movlw	128
 11090  13D4  068E               	xorwf	14,f
 11091  13D5                     l1033:	
 11092                           
 11093                           ;LED_B1.c: 235: }
 11094                           ;LED_B1.c: 243: if (led == 99) {
 11095  13D5  0824               	movf	setLED_Main@led,w
 11096  13D6  3A63               	xorlw	99
 11097  13D7  1D03               	skipz
 11098  13D8  0008               	return
 11099                           
 11100                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11101  13D9  3020               	movlw	32
 11102  13DA  068D               	xorwf	13,f
 11103  13DB  0008               	return
 11104  13DC                     __end_of_setLED_Main:	
 11105                           
 11106                           	psect	text61
 11107  1BDC                     __ptext61:	
 11108 ;; *************** function _LED_Initialization *****************
 11109 ;; Defined at:
 11110 ;;		line 31 in file "../src/LED_B1.c"
 11111 ;; Parameters:    Size  Location     Type
 11112 ;;		None
 11113 ;; Auto vars:     Size  Location     Type
 11114 ;;		None
 11115 ;; Return value:  Size  Location     Type
 11116 ;;		None               void
 11117 ;; Registers used:
 11118 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11119 ;; Tracked objects:
 11120 ;;		On entry : 0/0
 11121 ;;		On exit  : 0/0
 11122 ;;		Unchanged: 0/0
 11123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11128 ;;Total ram usage:        0 bytes
 11129 ;; Hardware stack levels used:    1
 11130 ;; Hardware stack levels required when called:    8
 11131 ;; This function calls:
 11132 ;;		_setLED_Initialization
 11133 ;; This function is called by:
 11134 ;;		_main
 11135 ;; This function uses a non-reentrant model
 11136 ;;
 11137                           
 11138                           
 11139                           ;psect for function _LED_Initialization
 11140  1BDC                     _LED_Initialization:	
 11141                           
 11142                           ;LED_B1.c: 33: setLED_Initialization(1);
 11143                           
 11144                           ;incstack = 0
 11145                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11146  1BDC  3001               	movlw	1
 11147  1BDD  319C  2465  319B   	fcall	_setLED_Initialization
 11148                           
 11149                           ;LED_B1.c: 36: setLED_Initialization(2);
 11150  1BE0  3002               	movlw	2
 11151  1BE1  319C  2465  319B   	fcall	_setLED_Initialization
 11152                           
 11153                           ;LED_B1.c: 42: setLED_Initialization(99);
 11154  1BE4  3063               	movlw	99
 11155  1BE5  319C  2465         	fcall	_setLED_Initialization
 11156  1BE7  0008               	return
 11157  1BE8                     __end_of_LED_Initialization:	
 11158                           
 11159                           	psect	text62
 11160  1C65                     __ptext62:	
 11161 ;; *************** function _setLED_Initialization *****************
 11162 ;; Defined at:
 11163 ;;		line 69 in file "../src/LED_B1.c"
 11164 ;; Parameters:    Size  Location     Type
 11165 ;;  led             1    wreg     unsigned char 
 11166 ;; Auto vars:     Size  Location     Type
 11167 ;;  led             1    4[BANK0 ] unsigned char 
 11168 ;; Return value:  Size  Location     Type
 11169 ;;		None               void
 11170 ;; Registers used:
 11171 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11172 ;; Tracked objects:
 11173 ;;		On entry : 0/0
 11174 ;;		On exit  : 0/0
 11175 ;;		Unchanged: 0/0
 11176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11178 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11180 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11181 ;;Total ram usage:        1 bytes
 11182 ;; Hardware stack levels used:    1
 11183 ;; Hardware stack levels required when called:    7
 11184 ;; This function calls:
 11185 ;;		_LedPointSelect
 11186 ;;		_setLED
 11187 ;; This function is called by:
 11188 ;;		_LED_Initialization
 11189 ;; This function uses a non-reentrant model
 11190 ;;
 11191                           
 11192                           
 11193                           ;psect for function _setLED_Initialization
 11194  1C65                     _setLED_Initialization:	
 11195                           
 11196                           ;incstack = 0
 11197                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11198                           ;setLED_Initialization@led stored from wreg
 11199  1C65  0020               	movlb	0	; select bank0
 11200  1C66  00A4               	movwf	setLED_Initialization@led
 11201                           
 11202                           ;LED_B1.c: 70: LedPointSelect(led);
 11203  1C67  0824               	movf	setLED_Initialization@led,w
 11204  1C68  319E  2685  319C   	fcall	_LedPointSelect
 11205                           
 11206                           ;LED_B1.c: 71: LED->Enable = 1;
 11207  1C6B  087A               	movf	_LED,w
 11208  1C6C  0086               	movwf	6
 11209  1C6D  3001               	movlw	1	; select bank2/3
 11210  1C6E  0087               	movwf	7
 11211  1C6F  1401               	bsf	1,0
 11212                           
 11213                           ;LED_B1.c: 72: setLED(led, 0);
 11214  1C70  0020               	movlb	0	; select bank0
 11215  1C71  01A2               	clrf	setLED@command
 11216  1C72  0824               	movf	setLED_Initialization@led,w
 11217  1C73  3195  259A         	fcall	_setLED
 11218  1C75  0008               	return
 11219  1C76                     __end_of_setLED_Initialization:	
 11220                           
 11221                           	psect	text63
 11222  1287                     __ptext63:	
 11223 ;; *************** function _Flash_Memory_Main *****************
 11224 ;; Defined at:
 11225 ;;		line 901 in file "../src/MCU_B1.c"
 11226 ;; Parameters:    Size  Location     Type
 11227 ;;		None
 11228 ;; Auto vars:     Size  Location     Type
 11229 ;;		None
 11230 ;; Return value:  Size  Location     Type
 11231 ;;		None               void
 11232 ;; Registers used:
 11233 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11234 ;; Tracked objects:
 11235 ;;		On entry : 0/0
 11236 ;;		On exit  : 0/0
 11237 ;;		Unchanged: 0/0
 11238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11241 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11242 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11243 ;;Total ram usage:        1 bytes
 11244 ;; Hardware stack levels used:    1
 11245 ;; Hardware stack levels required when called:    8
 11246 ;; This function calls:
 11247 ;;		_Flash_Memory_Modify
 11248 ;;		_getMain_LightsStatus
 11249 ;; This function is called by:
 11250 ;;		_main
 11251 ;; This function uses a non-reentrant model
 11252 ;;
 11253                           
 11254                           
 11255                           ;psect for function _Flash_Memory_Main
 11256  1287                     _Flash_Memory_Main:	
 11257                           
 11258                           ;MCU_B1.c: 902: if (Memory.Modify == 1) {
 11259                           
 11260                           ;incstack = 0
 11261                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11262  1287  0024               	movlb	4	; select bank4
 11263  1288  1C44               	btfss	(_Memory^(0+512)+36),0
 11264  1289  0008               	return
 11265                           
 11266                           ;MCU_B1.c: 903: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11267  128A  3191  215E  3192   	fcall	_getMain_LightsStatus
 11268  128D  3A00               	xorlw	0
 11269  128E  3000               	movlw	0
 11270  128F  1903               	skipnz
 11271  1290  3001               	movlw	1
 11272  1291  0020               	movlb	0	; select bank0
 11273  1292  00A9               	movwf	??_Flash_Memory_Main
 11274  1293  0DA9               	rlf	??_Flash_Memory_Main,f
 11275  1294  0024               	movlb	4	; select bank4
 11276  1295  0844               	movf	(_Memory^(0+512)+36),w
 11277  1296  0020               	movlb	0	; select bank0
 11278  1297  0629               	xorwf	??_Flash_Memory_Main,w
 11279  1298  39FD               	andlw	-3
 11280  1299  0629               	xorwf	??_Flash_Memory_Main,w
 11281  129A  0024               	movlb	4	; select bank4
 11282  129B  00C4               	movwf	(_Memory^(0+512)+36)
 11283                           
 11284                           ;MCU_B1.c: 904: if (Memory.GO == 1) {
 11285  129C  1CC4               	btfss	(_Memory^(0+512)+36),1
 11286  129D  2AB7               	goto	l1301
 11287                           
 11288                           ;MCU_B1.c: 905: Memory.Runtime = 1;
 11289  129E  15C4               	bsf	(_Memory^(0+512)+36),3
 11290                           
 11291                           ;MCU_B1.c: 906: Memory.Time++;
 11292  129F  3001               	movlw	1
 11293  12A0  07C2               	addwf	(_Memory^(0+512)+34),f
 11294  12A1  3000               	movlw	0
 11295  12A2  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11296                           
 11297                           ;MCU_B1.c: 907: if (Memory.Time == 25) {
 11298  12A3  3022               	movlw	34
 11299  12A4  3E20               	addlw	_Memory& (0+255)
 11300  12A5  0086               	movwf	6
 11301  12A6  3002               	movlw	2	; select bank4/5
 11302  12A7  0087               	movwf	7
 11303  12A8  3F40               	moviw [0]fsr1
 11304  12A9  3A19               	xorlw	25
 11305  12AA  1D03               	skipz
 11306  12AB  2AAE               	goto	u7755
 11307  12AC  3F41               	moviw [1]fsr1
 11308  12AD  3A00               	xorlw	0
 11309  12AE                     u7755:	
 11310  12AE  1D03               	skipz
 11311  12AF  0008               	return
 11312                           
 11313                           ;MCU_B1.c: 908: Memory.Time = 0;
 11314  12B0  01C2               	clrf	(_Memory^(0+512)+34)
 11315  12B1  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11316                           
 11317                           ;MCU_B1.c: 909: Memory.Modify = 0;
 11318  12B2  1044               	bcf	(_Memory^(0+512)+36),0
 11319                           
 11320                           ;MCU_B1.c: 910: Memory.GO = 0;
 11321  12B3  10C4               	bcf	(_Memory^(0+512)+36),1
 11322                           
 11323                           ;MCU_B1.c: 911: Flash_Memory_Modify();
 11324  12B4  3194  24AF         	fcall	_Flash_Memory_Modify
 11325                           
 11326                           ;MCU_B1.c: 912: }
 11327                           ;MCU_B1.c: 913: } else {
 11328  12B6  0008               	return
 11329  12B7                     l1301:	
 11330                           
 11331                           ;MCU_B1.c: 914: if (Memory.Runtime == 1) {
 11332  12B7  1DC4               	btfss	(_Memory^(0+512)+36),3
 11333  12B8  0008               	return
 11334                           
 11335                           ;MCU_B1.c: 915: Memory.Runtime = 0;
 11336  12B9  11C4               	bcf	(_Memory^(0+512)+36),3
 11337                           
 11338                           ;MCU_B1.c: 916: Memory.Time = 0;
 11339  12BA  01C2               	clrf	(_Memory^(0+512)+34)
 11340  12BB  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11341  12BC  0008               	return
 11342  12BD                     __end_of_Flash_Memory_Main:	
 11343                           
 11344                           	psect	text64
 11345  14AF                     __ptext64:	
 11346 ;; *************** function _Flash_Memory_Modify *****************
 11347 ;; Defined at:
 11348 ;;		line 974 in file "../src/MCU_B1.c"
 11349 ;; Parameters:    Size  Location     Type
 11350 ;;		None
 11351 ;; Auto vars:     Size  Location     Type
 11352 ;;  i               1    5[BANK0 ] unsigned char 
 11353 ;; Return value:  Size  Location     Type
 11354 ;;		None               void
 11355 ;; Registers used:
 11356 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11357 ;; Tracked objects:
 11358 ;;		On entry : 0/0
 11359 ;;		On exit  : 0/0
 11360 ;;		Unchanged: 0/0
 11361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11363 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11364 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11365 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11366 ;;Total ram usage:        2 bytes
 11367 ;; Hardware stack levels used:    1
 11368 ;; Hardware stack levels required when called:    7
 11369 ;; This function calls:
 11370 ;;		_Flash_Memory_Erasing
 11371 ;;		_Flash_Memory_Read
 11372 ;;		_Flash_Memory_Write
 11373 ;;		_setMemory_Data
 11374 ;; This function is called by:
 11375 ;;		_Flash_Memory_Main
 11376 ;; This function uses a non-reentrant model
 11377 ;;
 11378                           
 11379                           
 11380                           ;psect for function _Flash_Memory_Modify
 11381  14AF                     _Flash_Memory_Modify:	
 11382                           
 11383                           ;MCU_B1.c: 975: char i = 0;
 11384                           
 11385                           ;incstack = 0
 11386                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11387  14AF  0020               	movlb	0	; select bank0
 11388  14B0  01A5               	clrf	Flash_Memory_Modify@i
 11389                           
 11390                           ;MCU_B1.c: 976: for (i = 0; i < 32; i++) {
 11391  14B1  01A5               	clrf	Flash_Memory_Modify@i
 11392  14B2  3020               	movlw	32
 11393  14B3  0225               	subwf	Flash_Memory_Modify@i,w
 11394  14B4  1803               	btfsc	3,0
 11395  14B5  2CCB               	goto	l7342
 11396  14B6                     l7336:	
 11397                           
 11398                           ;MCU_B1.c: 977: Memory.Data[i] = Flash_Memory_Read(i);
 11399  14B6  0825               	movf	Flash_Memory_Modify@i,w
 11400  14B7  319E  266B  3194   	fcall	_Flash_Memory_Read
 11401  14BA  0020               	movlb	0	; select bank0
 11402  14BB  00A4               	movwf	??_Flash_Memory_Modify
 11403  14BC  0825               	movf	Flash_Memory_Modify@i,w
 11404  14BD  3E20               	addlw	_Memory& (0+255)
 11405  14BE  0086               	movwf	6
 11406  14BF  3002               	movlw	2	; select bank4/5
 11407  14C0  0087               	movwf	7
 11408  14C1  0824               	movf	??_Flash_Memory_Modify,w
 11409  14C2  0081               	movwf	1
 11410  14C3  3001               	movlw	1
 11411  14C4  00A4               	movwf	??_Flash_Memory_Modify
 11412  14C5  0824               	movf	??_Flash_Memory_Modify,w
 11413  14C6  07A5               	addwf	Flash_Memory_Modify@i,f
 11414  14C7  3020               	movlw	32
 11415  14C8  0225               	subwf	Flash_Memory_Modify@i,w
 11416  14C9  1C03               	skipc
 11417  14CA  2CB6               	goto	l7336
 11418  14CB                     l7342:	
 11419                           
 11420                           ;MCU_B1.c: 978: }
 11421                           ;MCU_B1.c: 979: setMemory_Data(0, product->Data[12]);
 11422  14CB  086E               	movf	_product,w
 11423  14CC  0086               	movwf	6
 11424  14CD  3002               	movlw	2	; select bank4/5
 11425  14CE  0087               	movwf	7
 11426  14CF  3002               	movlw	2	; select bank4/5
 11427  14D0  3F4C               	moviw [12]fsr1
 11428  14D1  00A0               	movwf	setMemory_Data@data
 11429  14D2  3000               	movlw	0
 11430  14D3  319B  23C4  3194   	fcall	_setMemory_Data
 11431                           
 11432                           ;MCU_B1.c: 980: setMemory_Data(1, product->Data[13]);
 11433  14D6  0020               	movlb	0	; select bank0
 11434  14D7  086E               	movf	_product,w
 11435  14D8  0086               	movwf	6
 11436  14D9  3002               	movlw	2	; select bank4/5
 11437  14DA  0087               	movwf	7
 11438  14DB  3002               	movlw	2	; select bank4/5
 11439  14DC  3F4D               	moviw [13]fsr1
 11440  14DD  00A0               	movwf	setMemory_Data@data
 11441  14DE  3001               	movlw	1
 11442  14DF  319B  23C4  3194   	fcall	_setMemory_Data
 11443                           
 11444                           ;MCU_B1.c: 981: setMemory_Data(2, product->Data[14]);
 11445  14E2  0020               	movlb	0	; select bank0
 11446  14E3  086E               	movf	_product,w
 11447  14E4  0086               	movwf	6
 11448  14E5  3002               	movlw	2	; select bank4/5
 11449  14E6  0087               	movwf	7
 11450  14E7  3002               	movlw	2	; select bank4/5
 11451  14E8  3F4E               	moviw [14]fsr1
 11452  14E9  00A0               	movwf	setMemory_Data@data
 11453  14EA  3002               	movlw	2
 11454  14EB  319B  23C4  3194   	fcall	_setMemory_Data
 11455                           
 11456                           ;MCU_B1.c: 987: if (Memory.LoopSave == 1) {
 11457  14EE  0024               	movlb	4	; select bank4
 11458  14EF  1D44               	btfss	(_Memory^(0+512)+36),2
 11459  14F0  2CF5               	goto	l1324
 11460                           
 11461                           ;MCU_B1.c: 988: Memory.LoopSave = 0;
 11462  14F1  1144               	bcf	(_Memory^(0+512)+36),2
 11463                           
 11464                           ;MCU_B1.c: 989: myMain.FirstOpen = 0;
 11465  14F2  0021               	movlb	1	; select bank1
 11466  14F3  11A0               	bcf	_myMain^(0+128),3
 11467                           
 11468                           ;MCU_B1.c: 990: myMain.First = 0;
 11469  14F4  12A0               	bcf	_myMain^(0+128),5
 11470  14F5                     l1324:	
 11471                           
 11472                           ;MCU_B1.c: 992: }
 11473                           ;MCU_B1.c: 993: GIE = 0;
 11474  14F5  138B               	bcf	11,7	;volatile
 11475                           
 11476                           ;MCU_B1.c: 994: Flash_Memory_Erasing();
 11477  14F6  319B  23D0  3194   	fcall	_Flash_Memory_Erasing
 11478                           
 11479                           ;MCU_B1.c: 995: Flash_Memory_Write();
 11480  14F9  3191  218A         	fcall	_Flash_Memory_Write
 11481                           
 11482                           ;MCU_B1.c: 996: GIE = 1;
 11483  14FB  178B               	bsf	11,7	;volatile
 11484  14FC  0008               	return
 11485  14FD                     __end_of_Flash_Memory_Modify:	
 11486                           
 11487                           	psect	text65
 11488  1BD0                     __ptext65:	
 11489 ;; *************** function _Flash_Memory_Erasing *****************
 11490 ;; Defined at:
 11491 ;;		line 963 in file "../src/MCU_B1.c"
 11492 ;; Parameters:    Size  Location     Type
 11493 ;;		None
 11494 ;; Auto vars:     Size  Location     Type
 11495 ;;		None
 11496 ;; Return value:  Size  Location     Type
 11497 ;;		None               void
 11498 ;; Registers used:
 11499 ;;		wreg, status,2, status,0, pclath, cstack
 11500 ;; Tracked objects:
 11501 ;;		On entry : 0/0
 11502 ;;		On exit  : 0/0
 11503 ;;		Unchanged: 0/0
 11504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11509 ;;Total ram usage:        0 bytes
 11510 ;; Hardware stack levels used:    1
 11511 ;; Hardware stack levels required when called:    6
 11512 ;; This function calls:
 11513 ;;		_Flash_Memory_Unlock
 11514 ;; This function is called by:
 11515 ;;		_Flash_Memory_Modify
 11516 ;; This function uses a non-reentrant model
 11517 ;;
 11518                           
 11519                           
 11520                           ;psect for function _Flash_Memory_Erasing
 11521  1BD0                     _Flash_Memory_Erasing:	
 11522                           
 11523                           ;MCU_B1.c: 964: CFGS = 0;
 11524                           
 11525                           ;incstack = 0
 11526                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11527  1BD0  0023               	movlb	3	; select bank3
 11528  1BD1  1315               	bcf	21,6	;volatile
 11529                           
 11530                           ;MCU_B1.c: 965: PMADRH = 0x30;
 11531  1BD2  3030               	movlw	48
 11532  1BD3  0092               	movwf	18	;volatile
 11533                           
 11534                           ;MCU_B1.c: 966: PMADRL = 0x00;
 11535  1BD4  0191               	clrf	17	;volatile
 11536                           
 11537                           ;MCU_B1.c: 967: FREE = 1;
 11538  1BD5  1615               	bsf	21,4	;volatile
 11539                           
 11540                           ;MCU_B1.c: 968: WREN = 1;
 11541  1BD6  1515               	bsf	21,2	;volatile
 11542                           
 11543                           ;MCU_B1.c: 969: Flash_Memory_Unlock();
 11544  1BD7  3190  2067         	fcall	_Flash_Memory_Unlock
 11545                           
 11546                           ;MCU_B1.c: 970: WREN = 0;
 11547  1BD9  0023               	movlb	3	; select bank3
 11548  1BDA  1115               	bcf	21,2	;volatile
 11549  1BDB  0008               	return
 11550  1BDC                     __end_of_Flash_Memory_Erasing:	
 11551                           
 11552                           	psect	text66
 11553  0620                     __ptext66:	
 11554 ;; *************** function _Flash_Memory_Initialization *****************
 11555 ;; Defined at:
 11556 ;;		line 860 in file "../src/MCU_B1.c"
 11557 ;; Parameters:    Size  Location     Type
 11558 ;;		None
 11559 ;; Auto vars:     Size  Location     Type
 11560 ;;  i               1   67[BANK0 ] unsigned char 
 11561 ;; Return value:  Size  Location     Type
 11562 ;;		None               void
 11563 ;; Registers used:
 11564 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11565 ;; Tracked objects:
 11566 ;;		On entry : 0/0
 11567 ;;		On exit  : 0/0
 11568 ;;		Unchanged: 0/0
 11569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11571 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11572 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11573 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11574 ;;Total ram usage:        2 bytes
 11575 ;; Hardware stack levels used:    1
 11576 ;; Hardware stack levels required when called:    8
 11577 ;; This function calls:
 11578 ;;		_Flash_Memory_Read
 11579 ;;		_Flash_Memory_Write
 11580 ;;		_setMemory_Data
 11581 ;;		_setPercentValue
 11582 ;; This function is called by:
 11583 ;;		_main
 11584 ;; This function uses a non-reentrant model
 11585 ;;
 11586                           
 11587                           
 11588                           ;psect for function _Flash_Memory_Initialization
 11589  0620                     _Flash_Memory_Initialization:	
 11590                           
 11591                           ;MCU_B1.c: 861: char i = 0;
 11592                           
 11593                           ;incstack = 0
 11594                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11595  0620  0020               	movlb	0	; select bank0
 11596  0621  01E3               	clrf	Flash_Memory_Initialization@i
 11597                           
 11598                           ;MCU_B1.c: 862: if (Flash_Memory_Read(31) == 0xaa) {
 11599  0622  301F               	movlw	31
 11600  0623  319E  266B  3186   	fcall	_Flash_Memory_Read
 11601  0626  3AAA               	xorlw	170
 11602  0627  1D03               	skipz
 11603  0628  2E92               	goto	l7818
 11604                           
 11605                           ;MCU_B1.c: 863: product->Data[12] = Flash_Memory_Read(0);
 11606  0629  3000               	movlw	0
 11607  062A  319E  266B  3186   	fcall	_Flash_Memory_Read
 11608  062D  0020               	movlb	0	; select bank0
 11609  062E  00E2               	movwf	??_Flash_Memory_Initialization
 11610  062F  086E               	movf	_product,w
 11611  0630  3E0C               	addlw	12
 11612  0631  0086               	movwf	6
 11613  0632  3002               	movlw	2	; select bank4/5
 11614  0633  0087               	movwf	7
 11615  0634  0862               	movf	??_Flash_Memory_Initialization,w
 11616  0635  0081               	movwf	1
 11617                           
 11618                           ;MCU_B1.c: 864: product->Data[13] = Flash_Memory_Read(1);
 11619  0636  3001               	movlw	1
 11620  0637  319E  266B  3186   	fcall	_Flash_Memory_Read
 11621  063A  0020               	movlb	0	; select bank0
 11622  063B  00E2               	movwf	??_Flash_Memory_Initialization
 11623  063C  086E               	movf	_product,w
 11624  063D  3E0D               	addlw	13
 11625  063E  0086               	movwf	6
 11626  063F  3002               	movlw	2	; select bank4/5
 11627  0640  0087               	movwf	7
 11628  0641  0862               	movf	??_Flash_Memory_Initialization,w
 11629  0642  0081               	movwf	1
 11630                           
 11631                           ;MCU_B1.c: 865: product->Data[14] = Flash_Memory_Read(2);
 11632  0643  3002               	movlw	2
 11633  0644  319E  266B  3186   	fcall	_Flash_Memory_Read
 11634  0647  0020               	movlb	0	; select bank0
 11635  0648  00E2               	movwf	??_Flash_Memory_Initialization
 11636  0649  086E               	movf	_product,w
 11637  064A  3E0E               	addlw	14
 11638  064B  0086               	movwf	6
 11639  064C  3002               	movlw	2	; select bank4/5
 11640  064D  0087               	movwf	7
 11641  064E  0862               	movf	??_Flash_Memory_Initialization,w
 11642  064F  0081               	movwf	1
 11643                           
 11644                           ;MCU_B1.c: 871: i = setPercentValue(((char)(80*0.8)));
 11645  0650  3040               	movlw	64
 11646  0651  3189  2175  3186   	fcall	_setPercentValue
 11647  0654  0020               	movlb	0	; select bank0
 11648  0655  00E2               	movwf	??_Flash_Memory_Initialization
 11649  0656  0862               	movf	??_Flash_Memory_Initialization,w
 11650  0657  00E3               	movwf	Flash_Memory_Initialization@i
 11651                           
 11652                           ;MCU_B1.c: 872: product->Data[21] = i;
 11653  0658  0863               	movf	Flash_Memory_Initialization@i,w
 11654  0659  00E2               	movwf	??_Flash_Memory_Initialization
 11655  065A  086E               	movf	_product,w
 11656  065B  3E15               	addlw	21
 11657  065C  0086               	movwf	6
 11658  065D  3002               	movlw	2	; select bank4/5
 11659  065E  0087               	movwf	7
 11660  065F  0862               	movf	??_Flash_Memory_Initialization,w
 11661  0660  0081               	movwf	1
 11662                           
 11663                           ;MCU_B1.c: 873: product->Data[22] = i;
 11664  0661  0863               	movf	Flash_Memory_Initialization@i,w
 11665  0662  00E2               	movwf	??_Flash_Memory_Initialization
 11666  0663  086E               	movf	_product,w
 11667  0664  3E16               	addlw	22
 11668  0665  0086               	movwf	6
 11669  0666  3002               	movlw	2	; select bank4/5
 11670  0667  0087               	movwf	7
 11671  0668  0862               	movf	??_Flash_Memory_Initialization,w
 11672  0669  0081               	movwf	1
 11673                           
 11674                           ;MCU_B1.c: 874: product->Data[23] = i;
 11675  066A  0863               	movf	Flash_Memory_Initialization@i,w
 11676  066B  00E2               	movwf	??_Flash_Memory_Initialization
 11677  066C  086E               	movf	_product,w
 11678  066D  3E17               	addlw	23
 11679  066E  0086               	movwf	6
 11680  066F  3002               	movlw	2	; select bank4/5
 11681  0670  0087               	movwf	7
 11682  0671  0862               	movf	??_Flash_Memory_Initialization,w
 11683  0672  0081               	movwf	1
 11684                           
 11685                           ;MCU_B1.c: 876: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11686  0673  086E               	movf	_product,w
 11687  0674  3E0C               	addlw	12
 11688  0675  0086               	movwf	6
 11689  0676  3002               	movlw	2	; select bank4/5
 11690  0677  0087               	movwf	7
 11691  0678  0801               	movf	1,w
 11692  0679  3AFF               	xorlw	255
 11693  067A  1D03               	skipz
 11694  067B  0008               	return
 11695  067C  086E               	movf	_product,w
 11696  067D  3E0D               	addlw	13
 11697  067E  0086               	movwf	6
 11698  067F  3002               	movlw	2	; select bank4/5
 11699  0680  0087               	movwf	7
 11700  0681  0801               	movf	1,w
 11701  0682  3AFF               	xorlw	255
 11702  0683  1D03               	skipz
 11703  0684  0008               	return
 11704  0685  086E               	movf	_product,w
 11705  0686  3E0E               	addlw	14
 11706  0687  0086               	movwf	6
 11707  0688  3002               	movlw	2	; select bank4/5
 11708  0689  0087               	movwf	7
 11709  068A  0801               	movf	1,w
 11710  068B  3AFF               	xorlw	255
 11711  068C  1D03               	skipz
 11712  068D  0008               	return
 11713                           
 11714                           ;MCU_B1.c: 877: myMain.FirstOpen = 1;
 11715  068E  0021               	movlb	1	; select bank1
 11716  068F  15A0               	bsf	_myMain^(0+128),3
 11717                           
 11718                           ;MCU_B1.c: 878: myMain.First = 1;
 11719  0690  16A0               	bsf	_myMain^(0+128),5
 11720                           
 11721                           ;MCU_B1.c: 879: }
 11722                           ;MCU_B1.c: 880: } else {
 11723  0691  0008               	return
 11724  0692                     l7818:	
 11725                           
 11726                           ;MCU_B1.c: 881: i = setPercentValue(((char)(80*0.8)));
 11727  0692  3040               	movlw	64
 11728  0693  3189  2175  3186   	fcall	_setPercentValue
 11729  0696  0020               	movlb	0	; select bank0
 11730  0697  00E2               	movwf	??_Flash_Memory_Initialization
 11731  0698  0862               	movf	??_Flash_Memory_Initialization,w
 11732  0699  00E3               	movwf	Flash_Memory_Initialization@i
 11733                           
 11734                           ;MCU_B1.c: 882: setMemory_Data(0, 0xff);
 11735  069A  30FF               	movlw	255
 11736  069B  00E2               	movwf	??_Flash_Memory_Initialization
 11737  069C  0862               	movf	??_Flash_Memory_Initialization,w
 11738  069D  00A0               	movwf	setMemory_Data@data
 11739  069E  3000               	movlw	0
 11740  069F  319B  23C4  3186   	fcall	_setMemory_Data
 11741                           
 11742                           ;MCU_B1.c: 883: setMemory_Data(1, 0xff);
 11743  06A2  30FF               	movlw	255
 11744  06A3  0020               	movlb	0	; select bank0
 11745  06A4  00E2               	movwf	??_Flash_Memory_Initialization
 11746  06A5  0862               	movf	??_Flash_Memory_Initialization,w
 11747  06A6  00A0               	movwf	setMemory_Data@data
 11748  06A7  3001               	movlw	1
 11749  06A8  319B  23C4  3186   	fcall	_setMemory_Data
 11750                           
 11751                           ;MCU_B1.c: 884: setMemory_Data(2, 0xff);
 11752  06AB  30FF               	movlw	255
 11753  06AC  0020               	movlb	0	; select bank0
 11754  06AD  00E2               	movwf	??_Flash_Memory_Initialization
 11755  06AE  0862               	movf	??_Flash_Memory_Initialization,w
 11756  06AF  00A0               	movwf	setMemory_Data@data
 11757  06B0  3002               	movlw	2
 11758  06B1  319B  23C4  3186   	fcall	_setMemory_Data
 11759                           
 11760                           ;MCU_B1.c: 885: setMemory_Data(3, 0xff);
 11761  06B4  30FF               	movlw	255
 11762  06B5  0020               	movlb	0	; select bank0
 11763  06B6  00E2               	movwf	??_Flash_Memory_Initialization
 11764  06B7  0862               	movf	??_Flash_Memory_Initialization,w
 11765  06B8  00A0               	movwf	setMemory_Data@data
 11766  06B9  3003               	movlw	3
 11767  06BA  319B  23C4  3186   	fcall	_setMemory_Data
 11768                           
 11769                           ;MCU_B1.c: 886: setMemory_Data(4, 0xff);
 11770  06BD  30FF               	movlw	255
 11771  06BE  0020               	movlb	0	; select bank0
 11772  06BF  00E2               	movwf	??_Flash_Memory_Initialization
 11773  06C0  0862               	movf	??_Flash_Memory_Initialization,w
 11774  06C1  00A0               	movwf	setMemory_Data@data
 11775  06C2  3004               	movlw	4
 11776  06C3  319B  23C4  3186   	fcall	_setMemory_Data
 11777                           
 11778                           ;MCU_B1.c: 887: setMemory_Data(5, 0xff);
 11779  06C6  30FF               	movlw	255
 11780  06C7  0020               	movlb	0	; select bank0
 11781  06C8  00E2               	movwf	??_Flash_Memory_Initialization
 11782  06C9  0862               	movf	??_Flash_Memory_Initialization,w
 11783  06CA  00A0               	movwf	setMemory_Data@data
 11784  06CB  3005               	movlw	5
 11785  06CC  319B  23C4  3186   	fcall	_setMemory_Data
 11786                           
 11787                           ;MCU_B1.c: 888: setMemory_Data(31, 0xaa);
 11788  06CF  30AA               	movlw	170
 11789  06D0  0020               	movlb	0	; select bank0
 11790  06D1  00E2               	movwf	??_Flash_Memory_Initialization
 11791  06D2  0862               	movf	??_Flash_Memory_Initialization,w
 11792  06D3  00A0               	movwf	setMemory_Data@data
 11793  06D4  301F               	movlw	31
 11794  06D5  319B  23C4  3186   	fcall	_setMemory_Data
 11795                           
 11796                           ;MCU_B1.c: 889: product->Data[21] = i;
 11797  06D8  0020               	movlb	0	; select bank0
 11798  06D9  0863               	movf	Flash_Memory_Initialization@i,w
 11799  06DA  00E2               	movwf	??_Flash_Memory_Initialization
 11800  06DB  086E               	movf	_product,w
 11801  06DC  3E15               	addlw	21
 11802  06DD  0086               	movwf	6
 11803  06DE  3002               	movlw	2	; select bank4/5
 11804  06DF  0087               	movwf	7
 11805  06E0  0862               	movf	??_Flash_Memory_Initialization,w
 11806  06E1  0081               	movwf	1
 11807                           
 11808                           ;MCU_B1.c: 890: product->Data[22] = i;
 11809  06E2  0863               	movf	Flash_Memory_Initialization@i,w
 11810  06E3  00E2               	movwf	??_Flash_Memory_Initialization
 11811  06E4  086E               	movf	_product,w
 11812  06E5  3E16               	addlw	22
 11813  06E6  0086               	movwf	6
 11814  06E7  3002               	movlw	2	; select bank4/5
 11815  06E8  0087               	movwf	7
 11816  06E9  0862               	movf	??_Flash_Memory_Initialization,w
 11817  06EA  0081               	movwf	1
 11818                           
 11819                           ;MCU_B1.c: 891: product->Data[23] = i;
 11820  06EB  0863               	movf	Flash_Memory_Initialization@i,w
 11821  06EC  00E2               	movwf	??_Flash_Memory_Initialization
 11822  06ED  086E               	movf	_product,w
 11823  06EE  3E17               	addlw	23
 11824  06EF  0086               	movwf	6
 11825  06F0  3002               	movlw	2	; select bank4/5
 11826  06F1  0087               	movwf	7
 11827  06F2  0862               	movf	??_Flash_Memory_Initialization,w
 11828  06F3  0081               	movwf	1
 11829                           
 11830                           ;MCU_B1.c: 892: GIE = 0;
 11831  06F4  138B               	bcf	11,7	;volatile
 11832                           
 11833                           ;MCU_B1.c: 893: Flash_Memory_Write();
 11834  06F5  3191  218A         	fcall	_Flash_Memory_Write
 11835                           
 11836                           ;MCU_B1.c: 894: GIE = 1;
 11837  06F7  178B               	bsf	11,7	;volatile
 11838                           
 11839                           ;MCU_B1.c: 895: myMain.FirstOpen = 1;
 11840  06F8  0021               	movlb	1	; select bank1
 11841  06F9  15A0               	bsf	_myMain^(0+128),3
 11842                           
 11843                           ;MCU_B1.c: 896: myMain.First = 1;
 11844  06FA  16A0               	bsf	_myMain^(0+128),5
 11845  06FB  0008               	return
 11846  06FC                     __end_of_Flash_Memory_Initialization:	
 11847                           
 11848                           	psect	text67
 11849  1BC4                     __ptext67:	
 11850 ;; *************** function _setMemory_Data *****************
 11851 ;; Defined at:
 11852 ;;		line 1011 in file "../src/MCU_B1.c"
 11853 ;; Parameters:    Size  Location     Type
 11854 ;;  address         1    wreg     unsigned char 
 11855 ;;  data            1    0[BANK0 ] unsigned char 
 11856 ;; Auto vars:     Size  Location     Type
 11857 ;;  address         1    2[BANK0 ] unsigned char 
 11858 ;; Return value:  Size  Location     Type
 11859 ;;		None               void
 11860 ;; Registers used:
 11861 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11862 ;; Tracked objects:
 11863 ;;		On entry : 0/0
 11864 ;;		On exit  : 0/0
 11865 ;;		Unchanged: 0/0
 11866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11867 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11868 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11869 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11870 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11871 ;;Total ram usage:        3 bytes
 11872 ;; Hardware stack levels used:    1
 11873 ;; Hardware stack levels required when called:    5
 11874 ;; This function calls:
 11875 ;;		Nothing
 11876 ;; This function is called by:
 11877 ;;		_Flash_Memory_Initialization
 11878 ;;		_Flash_Memory_Modify
 11879 ;; This function uses a non-reentrant model
 11880 ;;
 11881                           
 11882                           
 11883                           ;psect for function _setMemory_Data
 11884  1BC4                     _setMemory_Data:	
 11885                           
 11886                           ;incstack = 0
 11887                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 11888                           ;setMemory_Data@address stored from wreg
 11889  1BC4  0020               	movlb	0	; select bank0
 11890  1BC5  00A2               	movwf	setMemory_Data@address
 11891                           
 11892                           ;MCU_B1.c: 1012: Memory.Data[address] = data;
 11893  1BC6  0820               	movf	setMemory_Data@data,w
 11894  1BC7  00A1               	movwf	??_setMemory_Data
 11895  1BC8  0822               	movf	setMemory_Data@address,w
 11896  1BC9  3E20               	addlw	_Memory& (0+255)
 11897  1BCA  0086               	movwf	6
 11898  1BCB  3002               	movlw	2	; select bank4/5
 11899  1BCC  0087               	movwf	7
 11900  1BCD  0821               	movf	??_setMemory_Data,w
 11901  1BCE  0081               	movwf	1
 11902  1BCF  0008               	return
 11903  1BD0                     __end_of_setMemory_Data:	
 11904                           
 11905                           	psect	text68
 11906  118A                     __ptext68:	
 11907 ;; *************** function _Flash_Memory_Write *****************
 11908 ;; Defined at:
 11909 ;;		line 944 in file "../src/MCU_B1.c"
 11910 ;; Parameters:    Size  Location     Type
 11911 ;;		None
 11912 ;; Auto vars:     Size  Location     Type
 11913 ;;  i               1    1[BANK0 ] unsigned char 
 11914 ;; Return value:  Size  Location     Type
 11915 ;;		None               void
 11916 ;; Registers used:
 11917 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11918 ;; Tracked objects:
 11919 ;;		On entry : 0/0
 11920 ;;		On exit  : 0/0
 11921 ;;		Unchanged: 0/0
 11922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11924 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11925 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11926 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11927 ;;Total ram usage:        2 bytes
 11928 ;; Hardware stack levels used:    1
 11929 ;; Hardware stack levels required when called:    6
 11930 ;; This function calls:
 11931 ;;		_Flash_Memory_Unlock
 11932 ;; This function is called by:
 11933 ;;		_Flash_Memory_Initialization
 11934 ;;		_Flash_Memory_Modify
 11935 ;; This function uses a non-reentrant model
 11936 ;;
 11937                           
 11938                           
 11939                           ;psect for function _Flash_Memory_Write
 11940  118A                     _Flash_Memory_Write:	
 11941                           
 11942                           ;MCU_B1.c: 945: char i = 0;
 11943                           
 11944                           ;incstack = 0
 11945                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11946  118A  0020               	movlb	0	; select bank0
 11947  118B  01A1               	clrf	Flash_Memory_Write@i
 11948                           
 11949                           ;MCU_B1.c: 946: CFGS = 0;
 11950  118C  0023               	movlb	3	; select bank3
 11951  118D  1315               	bcf	21,6	;volatile
 11952                           
 11953                           ;MCU_B1.c: 947: PMADRH = 0x30;
 11954  118E  3030               	movlw	48
 11955  118F  0092               	movwf	18	;volatile
 11956                           
 11957                           ;MCU_B1.c: 948: PMDATH = 0;
 11958  1190  0194               	clrf	20	;volatile
 11959                           
 11960                           ;MCU_B1.c: 949: FREE = 0;
 11961  1191  1215               	bcf	21,4	;volatile
 11962                           
 11963                           ;MCU_B1.c: 950: LWLO = 1;
 11964  1192  1695               	bsf	21,5	;volatile
 11965                           
 11966                           ;MCU_B1.c: 951: WREN = 1;
 11967  1193  1515               	bsf	21,2	;volatile
 11968                           
 11969                           ;MCU_B1.c: 952: for (i = 0; i < 32; i++) {
 11970  1194  0020               	movlb	0	; select bank0
 11971  1195  01A1               	clrf	Flash_Memory_Write@i
 11972  1196  3020               	movlw	32
 11973  1197  0221               	subwf	Flash_Memory_Write@i,w
 11974  1198  1803               	btfsc	3,0
 11975  1199  29B2               	goto	l1315
 11976  119A                     l6900:	
 11977                           
 11978                           ;MCU_B1.c: 953: PMADRL = i;
 11979  119A  0821               	movf	Flash_Memory_Write@i,w
 11980  119B  0023               	movlb	3	; select bank3
 11981  119C  0091               	movwf	17	;volatile
 11982                           
 11983                           ;MCU_B1.c: 954: PMDATL = Memory.Data[i];
 11984  119D  0020               	movlb	0	; select bank0
 11985  119E  0821               	movf	Flash_Memory_Write@i,w
 11986  119F  3E20               	addlw	_Memory& (0+255)
 11987  11A0  0086               	movwf	6
 11988  11A1  3002               	movlw	2	; select bank4/5
 11989  11A2  0087               	movwf	7
 11990  11A3  0801               	movf	1,w
 11991  11A4  0023               	movlb	3	; select bank3
 11992  11A5  0093               	movwf	19	;volatile
 11993                           
 11994                           ;MCU_B1.c: 955: Flash_Memory_Unlock();
 11995  11A6  3190  2067  3191   	fcall	_Flash_Memory_Unlock
 11996  11A9  3001               	movlw	1
 11997  11AA  0020               	movlb	0	; select bank0
 11998  11AB  00A0               	movwf	??_Flash_Memory_Write
 11999  11AC  0820               	movf	??_Flash_Memory_Write,w
 12000  11AD  07A1               	addwf	Flash_Memory_Write@i,f
 12001  11AE  3020               	movlw	32
 12002  11AF  0221               	subwf	Flash_Memory_Write@i,w
 12003  11B0  1C03               	skipc
 12004  11B1  299A               	goto	l6900
 12005  11B2                     l1315:	
 12006                           
 12007                           ;MCU_B1.c: 956: }
 12008                           ;MCU_B1.c: 957: LWLO = 0;
 12009  11B2  0023               	movlb	3	; select bank3
 12010  11B3  1295               	bcf	21,5	;volatile
 12011                           
 12012                           ;MCU_B1.c: 958: Flash_Memory_Unlock();
 12013  11B4  3190  2067         	fcall	_Flash_Memory_Unlock
 12014                           
 12015                           ;MCU_B1.c: 959: WREN = 0;
 12016  11B6  0023               	movlb	3	; select bank3
 12017  11B7  1115               	bcf	21,2	;volatile
 12018  11B8  0008               	return
 12019  11B9                     __end_of_Flash_Memory_Write:	
 12020                           
 12021                           	psect	text69
 12022  1067                     __ptext69:	
 12023 ;; *************** function _Flash_Memory_Unlock *****************
 12024 ;; Defined at:
 12025 ;;		line 923 in file "../src/MCU_B1.c"
 12026 ;; Parameters:    Size  Location     Type
 12027 ;;		None
 12028 ;; Auto vars:     Size  Location     Type
 12029 ;;		None
 12030 ;; Return value:  Size  Location     Type
 12031 ;;		None               void
 12032 ;; Registers used:
 12033 ;;		wreg
 12034 ;; Tracked objects:
 12035 ;;		On entry : 0/0
 12036 ;;		On exit  : 0/0
 12037 ;;		Unchanged: 0/0
 12038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12043 ;;Total ram usage:        0 bytes
 12044 ;; Hardware stack levels used:    1
 12045 ;; Hardware stack levels required when called:    5
 12046 ;; This function calls:
 12047 ;;		Nothing
 12048 ;; This function is called by:
 12049 ;;		_Flash_Memory_Write
 12050 ;;		_Flash_Memory_Erasing
 12051 ;; This function uses a non-reentrant model
 12052 ;;
 12053                           
 12054                           
 12055                           ;psect for function _Flash_Memory_Unlock
 12056  1067                     _Flash_Memory_Unlock:	
 12057                           
 12058                           ;MCU_B1.c: 924: PMCON2 = 0x55;
 12059                           
 12060                           ;incstack = 0
 12061                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12062  1067  3055               	movlw	85
 12063  1068  0023               	movlb	3	; select bank3
 12064  1069  0096               	movwf	22	;volatile
 12065                           
 12066                           ;MCU_B1.c: 925: PMCON2 = 0xaa;
 12067  106A  30AA               	movlw	170
 12068  106B  0096               	movwf	22	;volatile
 12069                           
 12070                           ;MCU_B1.c: 926: WR = 1;
 12071  106C  1495               	bsf	21,1	;volatile
 12072                           
 12073                           ;MCU_B1.c: 927: __nop();
 12074  106D  0000               	nop
 12075                           
 12076                           ;MCU_B1.c: 928: __nop();
 12077  106E  0000               	nop
 12078  106F  0008               	return
 12079  1070                     __end_of_Flash_Memory_Unlock:	
 12080                           
 12081                           	psect	text70
 12082  1E6B                     __ptext70:	
 12083 ;; *************** function _Flash_Memory_Read *****************
 12084 ;; Defined at:
 12085 ;;		line 932 in file "../src/MCU_B1.c"
 12086 ;; Parameters:    Size  Location     Type
 12087 ;;  address         1    wreg     unsigned char 
 12088 ;; Auto vars:     Size  Location     Type
 12089 ;;  address         1    2[BANK0 ] unsigned char 
 12090 ;;  ret             1    3[BANK0 ] unsigned char 
 12091 ;;  i               1    1[BANK0 ] unsigned char 
 12092 ;; Return value:  Size  Location     Type
 12093 ;;                  1    wreg      unsigned char 
 12094 ;; Registers used:
 12095 ;;		wreg, status,2
 12096 ;; Tracked objects:
 12097 ;;		On entry : 0/0
 12098 ;;		On exit  : 0/0
 12099 ;;		Unchanged: 0/0
 12100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12102 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12103 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12104 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12105 ;;Total ram usage:        4 bytes
 12106 ;; Hardware stack levels used:    1
 12107 ;; Hardware stack levels required when called:    5
 12108 ;; This function calls:
 12109 ;;		Nothing
 12110 ;; This function is called by:
 12111 ;;		_Flash_Memory_Initialization
 12112 ;;		_Flash_Memory_Modify
 12113 ;; This function uses a non-reentrant model
 12114 ;;
 12115                           
 12116                           
 12117                           ;psect for function _Flash_Memory_Read
 12118  1E6B                     _Flash_Memory_Read:	
 12119                           
 12120                           ;incstack = 0
 12121                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12122                           ;Flash_Memory_Read@address stored from wreg
 12123  1E6B  0020               	movlb	0	; select bank0
 12124  1E6C  00A2               	movwf	Flash_Memory_Read@address
 12125                           
 12126                           ;MCU_B1.c: 933: char i = 0, ret = 0;
 12127  1E6D  01A1               	clrf	Flash_Memory_Read@i
 12128  1E6E  01A3               	clrf	Flash_Memory_Read@ret
 12129                           
 12130                           ;MCU_B1.c: 934: PMADRH = 0x30;
 12131  1E6F  3030               	movlw	48
 12132  1E70  0023               	movlb	3	; select bank3
 12133  1E71  0092               	movwf	18	;volatile
 12134                           
 12135                           ;MCU_B1.c: 935: PMADRL = address;
 12136  1E72  0020               	movlb	0	; select bank0
 12137  1E73  0822               	movf	Flash_Memory_Read@address,w
 12138  1E74  0023               	movlb	3	; select bank3
 12139  1E75  0091               	movwf	17	;volatile
 12140                           
 12141                           ;MCU_B1.c: 936: CFGS = 0;
 12142  1E76  1315               	bcf	21,6	;volatile
 12143                           
 12144                           ;MCU_B1.c: 937: RD = 1;
 12145  1E77  1415               	bsf	21,0	;volatile
 12146                           
 12147                           ;MCU_B1.c: 938: i = PMDATH;
 12148  1E78  0814               	movf	20,w	;volatile
 12149  1E79  0020               	movlb	0	; select bank0
 12150  1E7A  00A0               	movwf	??_Flash_Memory_Read
 12151  1E7B  0820               	movf	??_Flash_Memory_Read,w
 12152  1E7C  00A1               	movwf	Flash_Memory_Read@i
 12153                           
 12154                           ;MCU_B1.c: 939: ret = PMDATL;
 12155  1E7D  0023               	movlb	3	; select bank3
 12156  1E7E  0813               	movf	19,w	;volatile
 12157  1E7F  0020               	movlb	0	; select bank0
 12158  1E80  00A0               	movwf	??_Flash_Memory_Read
 12159  1E81  0820               	movf	??_Flash_Memory_Read,w
 12160  1E82  00A3               	movwf	Flash_Memory_Read@ret
 12161                           
 12162                           ;MCU_B1.c: 940: return ret;
 12163  1E83  0823               	movf	Flash_Memory_Read@ret,w
 12164  1E84  0008               	return
 12165  1E85                     __end_of_Flash_Memory_Read:	
 12166                           
 12167                           	psect	text71
 12168  121E                     __ptext71:	
 12169 ;; *************** function _DimmerLights_Main *****************
 12170 ;; Defined at:
 12171 ;;		line 402 in file "../src/Dimmer_B1.c"
 12172 ;; Parameters:    Size  Location     Type
 12173 ;;		None
 12174 ;; Auto vars:     Size  Location     Type
 12175 ;;		None
 12176 ;; Return value:  Size  Location     Type
 12177 ;;		None               void
 12178 ;; Registers used:
 12179 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12180 ;; Tracked objects:
 12181 ;;		On entry : 0/0
 12182 ;;		On exit  : 0/0
 12183 ;;		Unchanged: 0/0
 12184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12186 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12187 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12188 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12189 ;;Total ram usage:        4 bytes
 12190 ;; Hardware stack levels used:    1
 12191 ;; Hardware stack levels required when called:   10
 12192 ;; This function calls:
 12193 ;;		_getLoad_OK
 12194 ;;		_getMain_All_Error_Status
 12195 ;;		_getMain_LightsStatus
 12196 ;;		_setDimmerLights_Main
 12197 ;; This function is called by:
 12198 ;;		_main
 12199 ;; This function uses a non-reentrant model
 12200 ;;
 12201                           
 12202                           
 12203                           ;psect for function _DimmerLights_Main
 12204  121E                     _DimmerLights_Main:	
 12205                           
 12206                           ;Dimmer_B1.c: 404: if (getMain_All_Error_Status(0) == 0) {
 12207                           
 12208                           ;incstack = 0
 12209                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12210  121E  3000               	movlw	0
 12211  121F  3191  21EB  3192   	fcall	_getMain_All_Error_Status
 12212  1222  3800               	iorlw	0
 12213  1223  1D03               	skipz
 12214  1224  2A48               	goto	l778
 12215                           
 12216                           ;Dimmer_B1.c: 405: if (Dimmer.LoadOK == 1) {
 12217  1225  0022               	movlb	2	; select bank2
 12218  1226  1CA0               	btfss	_Dimmer^(0+256),1
 12219  1227  2A4A               	goto	l7760
 12220                           
 12221                           ;Dimmer_B1.c: 406: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 12222  1228  319B  2381  3192   	fcall	_getLoad_OK
 12223  122B  3A01               	xorlw	1
 12224  122C  1903               	skipnz
 12225  122D  2A3F               	goto	l7756
 12226  122E  3191  215E  3192   	fcall	_getMain_LightsStatus
 12227  1231  3A00               	xorlw	0
 12228  1232  1903               	skipnz
 12229  1233  2A3F               	goto	l7756
 12230  1234  0022               	movlb	2	; select bank2
 12231  1235  0C20               	rrf	_Dimmer^(0+256),w
 12232  1236  3901               	andlw	1
 12233  1237  0020               	movlb	0	; select bank0
 12234  1238  00E7               	movwf	??_DimmerLights_Main
 12235  1239  01E8               	clrf	??_DimmerLights_Main+1
 12236  123A  0867               	movf	??_DimmerLights_Main,w
 12237  123B  00E9               	movwf	_DimmerLights_Main$2494
 12238  123C  0868               	movf	??_DimmerLights_Main+1,w
 12239  123D  00EA               	movwf	_DimmerLights_Main$2494+1
 12240  123E  2A42               	goto	l7758
 12241  123F                     l7756:	
 12242  123F  0020               	movlb	0	; select bank0
 12243  1240  01E9               	clrf	_DimmerLights_Main$2494
 12244  1241  01EA               	clrf	_DimmerLights_Main$2494+1
 12245  1242                     l7758:	
 12246  1242  0869               	movf	_DimmerLights_Main$2494,w
 12247  1243  0022               	movlb	2	; select bank2
 12248  1244  10A0               	bcf	_Dimmer^(0+256),1
 12249  1245  1D03               	skipz
 12250  1246  14A0               	bsf	_Dimmer^(0+256),1
 12251                           
 12252                           ;Dimmer_B1.c: 407: }
 12253                           ;Dimmer_B1.c: 408: } else {
 12254  1247  2A4A               	goto	l7760
 12255  1248                     l778:	
 12256                           
 12257                           ;Dimmer_B1.c: 409: Dimmer.LoadOK = 0;
 12258  1248  0022               	movlb	2	; select bank2
 12259  1249  10A0               	bcf	_Dimmer^(0+256),1
 12260  124A                     l7760:	
 12261                           
 12262                           ;Dimmer_B1.c: 410: }
 12263                           ;Dimmer_B1.c: 414: setDimmerLights_Main(1);
 12264  124A  3001               	movlw	1
 12265  124B  3196  26EF  3192   	fcall	_setDimmerLights_Main
 12266                           
 12267                           ;Dimmer_B1.c: 418: setDimmerLights_Main(2);
 12268  124E  3002               	movlw	2
 12269  124F  3196  26EF         	fcall	_setDimmerLights_Main
 12270  1251  0008               	return
 12271  1252                     __end_of_DimmerLights_Main:	
 12272                           
 12273                           	psect	text72
 12274  16EF                     __ptext72:	
 12275 ;; *************** function _setDimmerLights_Main *****************
 12276 ;; Defined at:
 12277 ;;		line 428 in file "../src/Dimmer_B1.c"
 12278 ;; Parameters:    Size  Location     Type
 12279 ;;  lights          1    wreg     unsigned char 
 12280 ;; Auto vars:     Size  Location     Type
 12281 ;;  lights          1   70[BANK0 ] unsigned char 
 12282 ;; Return value:  Size  Location     Type
 12283 ;;		None               void
 12284 ;; Registers used:
 12285 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12286 ;; Tracked objects:
 12287 ;;		On entry : 0/0
 12288 ;;		On exit  : 0/0
 12289 ;;		Unchanged: 0/0
 12290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12292 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12294 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12295 ;;Total ram usage:        1 bytes
 12296 ;; Hardware stack levels used:    1
 12297 ;; Hardware stack levels required when called:    9
 12298 ;; This function calls:
 12299 ;;		_DimmerLightsPointSelect
 12300 ;;		_setBuz
 12301 ;;		_setDimmerLights
 12302 ;;		_setDimmerLights_Adj
 12303 ;; This function is called by:
 12304 ;;		_DimmerLights_Main
 12305 ;; This function uses a non-reentrant model
 12306 ;;
 12307                           
 12308                           
 12309                           ;psect for function _setDimmerLights_Main
 12310  16EF                     _setDimmerLights_Main:	
 12311                           
 12312                           ;incstack = 0
 12313                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12314                           ;setDimmerLights_Main@lights stored from wreg
 12315  16EF  0020               	movlb	0	; select bank0
 12316  16F0  00E6               	movwf	setDimmerLights_Main@lights
 12317                           
 12318                           ;Dimmer_B1.c: 429: DimmerLightsPointSelect(lights);
 12319  16F1  0866               	movf	setDimmerLights_Main@lights,w
 12320  16F2  319C  24F1  3196   	fcall	_DimmerLightsPointSelect
 12321                           
 12322                           ;Dimmer_B1.c: 430: if (DimmerLights->Trigger == 1) {
 12323  16F5  0020               	movlb	0	; select bank0
 12324  16F6  086F               	movf	_DimmerLights,w
 12325  16F7  3E08               	addlw	8
 12326  16F8  0086               	movwf	6
 12327  16F9  3001               	movlw	1	; select bank2/3
 12328  16FA  0087               	movwf	7
 12329  16FB  1D01               	btfss	1,2
 12330  16FC  2F1A               	goto	l7226
 12331                           
 12332                           ;Dimmer_B1.c: 432: if (Dimmer.LoadOK == 0) {
 12333  16FD  0022               	movlb	2	; select bank2
 12334  16FE  18A0               	btfsc	_Dimmer^(0+256),1
 12335  16FF  0008               	return
 12336                           
 12337                           ;Dimmer_B1.c: 433: DimmerLights->Trigger = 0;
 12338  1700  0020               	movlb	0	; select bank0
 12339  1701  086F               	movf	_DimmerLights,w
 12340  1702  3E08               	addlw	8
 12341  1703  0086               	movwf	6
 12342  1704  3001               	movlw	1	; select bank2/3
 12343  1705  0087               	movwf	7
 12344  1706  1101               	bcf	1,2
 12345                           
 12346                           ;Dimmer_B1.c: 435: if (DimmerLights->Switch == 1) {
 12347  1707  086F               	movf	_DimmerLights,w
 12348  1708  3E08               	addlw	8
 12349  1709  0086               	movwf	6
 12350  170A  3001               	movlw	1	; select bank2/3
 12351  170B  0087               	movwf	7
 12352  170C  1C81               	btfss	1,1
 12353  170D  2F14               	goto	l7224
 12354                           
 12355                           ;Dimmer_B1.c: 436: setDimmerLights(lights, 1);
 12356  170E  01E2               	clrf	setDimmerLights@status
 12357  170F  0AE2               	incf	setDimmerLights@status,f
 12358  1710  0866               	movf	setDimmerLights_Main@lights,w
 12359  1711  318D  255F         	fcall	_setDimmerLights
 12360                           
 12361                           ;Dimmer_B1.c: 437: } else {
 12362  1713  0008               	return
 12363  1714                     l7224:	
 12364                           
 12365                           ;Dimmer_B1.c: 438: setDimmerLights(lights, 0);
 12366  1714  0020               	movlb	0	; select bank0
 12367  1715  01E2               	clrf	setDimmerLights@status
 12368  1716  0866               	movf	setDimmerLights_Main@lights,w
 12369  1717  318D  255F         	fcall	_setDimmerLights
 12370                           
 12371                           ;Dimmer_B1.c: 439: }
 12372                           ;Dimmer_B1.c: 440: }
 12373                           ;Dimmer_B1.c: 441: } else {
 12374  1719  0008               	return
 12375  171A                     l7226:	
 12376                           
 12377                           ;Dimmer_B1.c: 442: if (DimmerLights->TriggerAdj == 1) {
 12378  171A  0020               	movlb	0	; select bank0
 12379  171B  086F               	movf	_DimmerLights,w
 12380  171C  3E08               	addlw	8
 12381  171D  0086               	movwf	6
 12382  171E  3001               	movlw	1	; select bank2/3
 12383  171F  0087               	movwf	7
 12384  1720  1E01               	btfss	1,4
 12385  1721  0008               	return
 12386                           
 12387                           ;Dimmer_B1.c: 443: if (Dimmer.LoadOK == 0) {
 12388  1722  0022               	movlb	2	; select bank2
 12389  1723  18A0               	btfsc	_Dimmer^(0+256),1
 12390  1724  0008               	return
 12391                           
 12392                           ;Dimmer_B1.c: 444: DimmerLights->TriggerAdj = 0;
 12393  1725  0020               	movlb	0	; select bank0
 12394  1726  086F               	movf	_DimmerLights,w
 12395  1727  3E08               	addlw	8
 12396  1728  0086               	movwf	6
 12397  1729  3001               	movlw	1	; select bank2/3
 12398  172A  0087               	movwf	7
 12399  172B  1201               	bcf	1,4
 12400                           
 12401                           ;Dimmer_B1.c: 445: if (DimmerLights->AdjGo == 1) {
 12402  172C  086F               	movf	_DimmerLights,w
 12403  172D  3E08               	addlw	8
 12404  172E  0086               	movwf	6
 12405  172F  3001               	movlw	1	; select bank2/3
 12406  1730  0087               	movwf	7
 12407  1731  1D81               	btfss	1,3
 12408  1732  2F42               	goto	l7236
 12409                           
 12410                           ;Dimmer_B1.c: 446: setDimmerLights_Adj(lights, 1);
 12411  1733  01E2               	clrf	setDimmerLights_Adj@status
 12412  1734  0AE2               	incf	setDimmerLights_Adj@status,f
 12413  1735  0866               	movf	setDimmerLights_Main@lights,w
 12414  1736  318A  22A4  3196   	fcall	_setDimmerLights_Adj
 12415                           
 12416                           ;Dimmer_B1.c: 447: setBuz(1, 100);
 12417  1739  3064               	movlw	100
 12418  173A  0020               	movlb	0	; select bank0
 12419  173B  00A9               	movwf	setBuz@time
 12420  173C  3000               	movlw	0
 12421  173D  00AA               	movwf	setBuz@time+1
 12422  173E  3001               	movlw	1
 12423  173F  3196  2696         	fcall	_setBuz
 12424                           
 12425                           ;Dimmer_B1.c: 448: } else {
 12426  1741  0008               	return
 12427  1742                     l7236:	
 12428                           
 12429                           ;Dimmer_B1.c: 449: setDimmerLights_Adj(lights, 0);
 12430  1742  0020               	movlb	0	; select bank0
 12431  1743  01E2               	clrf	setDimmerLights_Adj@status
 12432  1744  0866               	movf	setDimmerLights_Main@lights,w
 12433  1745  318A  22A4         	fcall	_setDimmerLights_Adj
 12434  1747  0008               	return
 12435  1748                     __end_of_setDimmerLights_Main:	
 12436                           
 12437                           	psect	text73
 12438  0AA4                     __ptext73:	
 12439 ;; *************** function _setDimmerLights_Adj *****************
 12440 ;; Defined at:
 12441 ;;		line 728 in file "../src/Dimmer_B1.c"
 12442 ;; Parameters:    Size  Location     Type
 12443 ;;  lights          1    wreg     unsigned char 
 12444 ;;  status          1   66[BANK0 ] unsigned char 
 12445 ;; Auto vars:     Size  Location     Type
 12446 ;;  lights          1   69[BANK0 ] unsigned char 
 12447 ;; Return value:  Size  Location     Type
 12448 ;;		None               void
 12449 ;; Registers used:
 12450 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12451 ;; Tracked objects:
 12452 ;;		On entry : 0/0
 12453 ;;		On exit  : 0/0
 12454 ;;		Unchanged: 0/0
 12455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12456 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12457 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12458 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12459 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12460 ;;Total ram usage:        4 bytes
 12461 ;; Hardware stack levels used:    1
 12462 ;; Hardware stack levels required when called:    8
 12463 ;; This function calls:
 12464 ;;		_DimmerLightsPointSelect
 12465 ;;		_getMain_All_Error_Status
 12466 ;;		_setPercentValue
 12467 ;;		_setRF_DimmerLights
 12468 ;;		_setTxData
 12469 ;; This function is called by:
 12470 ;;		_setDimmerLights_Main
 12471 ;; This function uses a non-reentrant model
 12472 ;;
 12473                           
 12474                           
 12475                           ;psect for function _setDimmerLights_Adj
 12476  0AA4                     _setDimmerLights_Adj:	
 12477                           
 12478                           ;incstack = 0
 12479                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12480                           ;setDimmerLights_Adj@lights stored from wreg
 12481  0AA4  0020               	movlb	0	; select bank0
 12482  0AA5  00E5               	movwf	setDimmerLights_Adj@lights
 12483                           
 12484                           ;Dimmer_B1.c: 729: DimmerLightsPointSelect(lights);
 12485  0AA6  0865               	movf	setDimmerLights_Adj@lights,w
 12486  0AA7  319C  24F1  318A   	fcall	_DimmerLightsPointSelect
 12487                           
 12488                           ;Dimmer_B1.c: 730: if (status == 1) {
 12489  0AAA  0020               	movlb	0	; select bank0
 12490  0AAB  0862               	movf	setDimmerLights_Adj@status,w
 12491  0AAC  3A01               	xorlw	1
 12492  0AAD  1D03               	skipz
 12493  0AAE  2ABA               	goto	l6810
 12494                           
 12495                           ;Dimmer_B1.c: 731: DimmerLights->AdjFlag = 1;
 12496  0AAF  086F               	movf	_DimmerLights,w
 12497  0AB0  0086               	movwf	6
 12498  0AB1  3001               	movlw	1	; select bank2/3
 12499  0AB2  0087               	movwf	7
 12500  0AB3  1581               	bsf	1,3
 12501                           
 12502                           ;Dimmer_B1.c: 732: DimmerLights->Signal = 1;
 12503  0AB4  086F               	movf	_DimmerLights,w
 12504  0AB5  0086               	movwf	6
 12505  0AB6  3001               	movlw	1	; select bank2/3
 12506  0AB7  0087               	movwf	7
 12507  0AB8  1481               	bsf	1,1
 12508                           
 12509                           ;Dimmer_B1.c: 733: } else {
 12510  0AB9  0008               	return
 12511  0ABA                     l6810:	
 12512                           
 12513                           ;Dimmer_B1.c: 734: if (DimmerLights->AdjFlag == 1) {
 12514  0ABA  086F               	movf	_DimmerLights,w
 12515  0ABB  0086               	movwf	6
 12516  0ABC  3001               	movlw	1	; select bank2/3
 12517  0ABD  0087               	movwf	7
 12518  0ABE  1D81               	btfss	1,3
 12519  0ABF  0008               	return
 12520                           
 12521                           ;Dimmer_B1.c: 735: DimmerLights->Signal = 0;
 12522  0AC0  086F               	movf	_DimmerLights,w
 12523  0AC1  0086               	movwf	6
 12524  0AC2  3001               	movlw	1	; select bank2/3
 12525  0AC3  0087               	movwf	7
 12526  0AC4  1081               	bcf	1,1
 12527                           
 12528                           ;Dimmer_B1.c: 736: DimmerLights->AdjFlag = 0;
 12529  0AC5  086F               	movf	_DimmerLights,w
 12530  0AC6  0086               	movwf	6
 12531  0AC7  3001               	movlw	1	; select bank2/3
 12532  0AC8  0087               	movwf	7
 12533  0AC9  1181               	bcf	1,3
 12534                           
 12535                           ;Dimmer_B1.c: 737: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12536  0ACA  086F               	movf	_DimmerLights,w
 12537  0ACB  3E04               	addlw	4
 12538  0ACC  0086               	movwf	6
 12539  0ACD  3001               	movlw	1	; select bank2/3
 12540  0ACE  0087               	movwf	7
 12541  0ACF  0801               	movf	1,w
 12542  0AD0  00E3               	movwf	??_setDimmerLights_Adj
 12543  0AD1  086F               	movf	_DimmerLights,w
 12544  0AD2  3E05               	addlw	5
 12545  0AD3  0086               	movwf	6
 12546  0AD4  3001               	movlw	1	; select bank2/3
 12547  0AD5  0087               	movwf	7
 12548  0AD6  0863               	movf	??_setDimmerLights_Adj,w
 12549  0AD7  0081               	movwf	1
 12550                           
 12551                           ;Dimmer_B1.c: 738: product->Data[(20 + lights)]=setPercentValue(DimmerLights->DimmingVal
      +                          ue);
 12552  0AD8  086F               	movf	_DimmerLights,w
 12553  0AD9  3E04               	addlw	4
 12554  0ADA  0086               	movwf	6
 12555  0ADB  3001               	movlw	1	; select bank2/3
 12556  0ADC  0087               	movwf	7
 12557  0ADD  0801               	movf	1,w
 12558  0ADE  3189  2175  318A   	fcall	_setPercentValue
 12559  0AE1  0020               	movlb	0	; select bank0
 12560  0AE2  00E3               	movwf	??_setDimmerLights_Adj
 12561  0AE3  0865               	movf	setDimmerLights_Adj@lights,w
 12562  0AE4  3E14               	addlw	20
 12563  0AE5  076E               	addwf	_product,w
 12564  0AE6  00E4               	movwf	??_setDimmerLights_Adj+1
 12565  0AE7  0864               	movf	??_setDimmerLights_Adj+1,w
 12566  0AE8  0086               	movwf	6
 12567  0AE9  3002               	movlw	2	; select bank4/5
 12568  0AEA  0087               	movwf	7
 12569  0AEB  0863               	movf	??_setDimmerLights_Adj,w
 12570  0AEC  0081               	movwf	1
 12571                           
 12572                           ;Dimmer_B1.c: 748: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12573  0AED  3000               	movlw	0
 12574  0AEE  3191  21EB  318A   	fcall	_getMain_All_Error_Status
 12575  0AF1  3A00               	xorlw	0
 12576  0AF2  3000               	movlw	0
 12577  0AF3  1903               	skipnz
 12578  0AF4  3001               	movlw	1
 12579  0AF5  0020               	movlb	0	; select bank0
 12580  0AF6  00E3               	movwf	??_setDimmerLights_Adj
 12581  0AF7  0DE3               	rlf	??_setDimmerLights_Adj,f
 12582  0AF8  0022               	movlb	2	; select bank2
 12583  0AF9  0820               	movf	_Dimmer^(0+256),w
 12584  0AFA  0020               	movlb	0	; select bank0
 12585  0AFB  0663               	xorwf	??_setDimmerLights_Adj,w
 12586  0AFC  39FD               	andlw	-3
 12587  0AFD  0663               	xorwf	??_setDimmerLights_Adj,w
 12588  0AFE  0022               	movlb	2	; select bank2
 12589  0AFF  00A0               	movwf	_Dimmer^(0+256)
 12590                           
 12591                           ;Dimmer_B1.c: 751: setRF_DimmerLights(lights, 1);
 12592  0B00  0020               	movlb	0	; select bank0
 12593  0B01  01A0               	clrf	setRF_DimmerLights@on
 12594  0B02  0AA0               	incf	setRF_DimmerLights@on,f
 12595  0B03  0865               	movf	setDimmerLights_Adj@lights,w
 12596  0B04  3197  2748  318A   	fcall	_setRF_DimmerLights
 12597                           
 12598                           ;Dimmer_B1.c: 752: setTxData();
 12599  0B07  3186  26FC         	fcall	_setTxData
 12600  0B09  0008               	return
 12601  0B0A                     __end_of_setDimmerLights_Adj:	
 12602                           
 12603                           	psect	text74
 12604  0D5F                     __ptext74:	
 12605 ;; *************** function _setDimmerLights *****************
 12606 ;; Defined at:
 12607 ;;		line 623 in file "../src/Dimmer_B1.c"
 12608 ;; Parameters:    Size  Location     Type
 12609 ;;  lights          1    wreg     unsigned char 
 12610 ;;  status          1   66[BANK0 ] unsigned char 
 12611 ;; Auto vars:     Size  Location     Type
 12612 ;;  lights          1   69[BANK0 ] unsigned char 
 12613 ;; Return value:  Size  Location     Type
 12614 ;;		None               void
 12615 ;; Registers used:
 12616 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12617 ;; Tracked objects:
 12618 ;;		On entry : 0/0
 12619 ;;		On exit  : 0/0
 12620 ;;		Unchanged: 0/0
 12621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12622 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12623 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12624 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12625 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12626 ;;Total ram usage:        4 bytes
 12627 ;; Hardware stack levels used:    1
 12628 ;; Hardware stack levels required when called:    8
 12629 ;; This function calls:
 12630 ;;		_DimmerLightsPointSelect
 12631 ;;		_getMain_All_Error_Status
 12632 ;;		_setDimmerLights_Line
 12633 ;;		_setLED
 12634 ;;		_setPercentValue
 12635 ;;		_setRF_DimmerLights
 12636 ;;		_setTxData
 12637 ;; This function is called by:
 12638 ;;		_setDimmerLights_Main
 12639 ;; This function uses a non-reentrant model
 12640 ;;
 12641                           
 12642                           
 12643                           ;psect for function _setDimmerLights
 12644  0D5F                     _setDimmerLights:	
 12645                           
 12646                           ;incstack = 0
 12647                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12648                           ;setDimmerLights@lights stored from wreg
 12649  0D5F  0020               	movlb	0	; select bank0
 12650  0D60  00E5               	movwf	setDimmerLights@lights
 12651                           
 12652                           ;Dimmer_B1.c: 624: DimmerLightsPointSelect(lights);
 12653  0D61  0865               	movf	setDimmerLights@lights,w
 12654  0D62  319C  24F1  318D   	fcall	_DimmerLightsPointSelect
 12655                           
 12656                           ;Dimmer_B1.c: 627: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12657  0D65  3000               	movlw	0
 12658  0D66  3191  21EB  318D   	fcall	_getMain_All_Error_Status
 12659  0D69  3A00               	xorlw	0
 12660  0D6A  3000               	movlw	0
 12661  0D6B  1903               	skipnz
 12662  0D6C  3001               	movlw	1
 12663  0D6D  0020               	movlb	0	; select bank0
 12664  0D6E  00E3               	movwf	??_setDimmerLights
 12665  0D6F  0DE3               	rlf	??_setDimmerLights,f
 12666  0D70  0022               	movlb	2	; select bank2
 12667  0D71  0820               	movf	_Dimmer^(0+256),w
 12668  0D72  0020               	movlb	0	; select bank0
 12669  0D73  0663               	xorwf	??_setDimmerLights,w
 12670  0D74  39FD               	andlw	-3
 12671  0D75  0663               	xorwf	??_setDimmerLights,w
 12672  0D76  0022               	movlb	2	; select bank2
 12673  0D77  00A0               	movwf	_Dimmer^(0+256)
 12674                           
 12675                           ;Dimmer_B1.c: 631: if (status == 1) {
 12676  0D78  0020               	movlb	0	; select bank0
 12677  0D79  0862               	movf	setDimmerLights@status,w
 12678  0D7A  3A01               	xorlw	1
 12679  0D7B  1D03               	skipz
 12680  0D7C  2DAD               	goto	l6790
 12681                           
 12682                           ;Dimmer_B1.c: 632: DimmerLights->Loop = 1;
 12683  0D7D  086F               	movf	_DimmerLights,w
 12684  0D7E  3E09               	addlw	9
 12685  0D7F  0086               	movwf	6
 12686  0D80  3001               	movlw	1	; select bank2/3
 12687  0D81  0087               	movwf	7
 12688  0D82  1481               	bsf	1,1
 12689                           
 12690                           ;Dimmer_B1.c: 633: setLED(lights, 0);
 12691  0D83  01A2               	clrf	setLED@command
 12692  0D84  0865               	movf	setDimmerLights@lights,w
 12693  0D85  3195  259A  318D   	fcall	_setLED
 12694                           
 12695                           ;Dimmer_B1.c: 635: setDimmerLights_Line(lights);
 12696  0D88  0020               	movlb	0	; select bank0
 12697  0D89  0865               	movf	setDimmerLights@lights,w
 12698  0D8A  319D  25CB  318D   	fcall	_setDimmerLights_Line
 12699                           
 12700                           ;Dimmer_B1.c: 636: DimmerLights->StatusFlag = 1;
 12701  0D8D  0020               	movlb	0	; select bank0
 12702  0D8E  086F               	movf	_DimmerLights,w
 12703  0D8F  0086               	movwf	6
 12704  0D90  3001               	movlw	1	; select bank2/3
 12705  0D91  0087               	movwf	7
 12706  0D92  1701               	bsf	1,6
 12707                           
 12708                           ;Dimmer_B1.c: 643: DimmerLights->DimmingValue = ((char)(80*0.8));
 12709  0D93  3040               	movlw	64
 12710  0D94  00E3               	movwf	??_setDimmerLights
 12711  0D95  086F               	movf	_DimmerLights,w
 12712  0D96  3E04               	addlw	4
 12713  0D97  0086               	movwf	6
 12714  0D98  3001               	movlw	1	; select bank2/3
 12715  0D99  0087               	movwf	7
 12716  0D9A  0863               	movf	??_setDimmerLights,w
 12717  0D9B  0081               	movwf	1
 12718                           
 12719                           ;Dimmer_B1.c: 644: product->Data[(20 + lights)]=setPercentValue(((char)(80*0.8)));
 12720  0D9C  3040               	movlw	64
 12721  0D9D  3189  2175  318D   	fcall	_setPercentValue
 12722  0DA0  0020               	movlb	0	; select bank0
 12723  0DA1  00E3               	movwf	??_setDimmerLights
 12724  0DA2  0865               	movf	setDimmerLights@lights,w
 12725  0DA3  3E14               	addlw	20
 12726  0DA4  076E               	addwf	_product,w
 12727  0DA5  00E4               	movwf	??_setDimmerLights+1
 12728  0DA6  0864               	movf	??_setDimmerLights+1,w
 12729  0DA7  0086               	movwf	6
 12730  0DA8  3002               	movlw	2	; select bank4/5
 12731  0DA9  0087               	movwf	7
 12732  0DAA  0863               	movf	??_setDimmerLights,w
 12733  0DAB  0081               	movwf	1
 12734  0DAC  2DD4               	goto	l6802
 12735  0DAD                     l6790:	
 12736                           ;Dimmer_B1.c: 654: } else {
 12737                           
 12738                           ;Dimmer_B1.c: 652: DimmerLights->DimmingTimeValue = 7;
 12739                           
 12740                           
 12741                           ;Dimmer_B1.c: 655: DimmerLights->StatusFlag = 0;
 12742  0DAD  086F               	movf	_DimmerLights,w
 12743  0DAE  0086               	movwf	6
 12744  0DAF  3001               	movlw	1	; select bank2/3
 12745  0DB0  0087               	movwf	7
 12746  0DB1  1301               	bcf	1,6
 12747                           
 12748                           ;Dimmer_B1.c: 656: DimmerLights->Loop = 0;
 12749  0DB2  086F               	movf	_DimmerLights,w
 12750  0DB3  3E09               	addlw	9
 12751  0DB4  0086               	movwf	6
 12752  0DB5  3001               	movlw	1	; select bank2/3
 12753  0DB6  0087               	movwf	7
 12754  0DB7  1081               	bcf	1,1
 12755                           
 12756                           ;Dimmer_B1.c: 657: setLED(lights, 1);
 12757  0DB8  01A2               	clrf	setLED@command
 12758  0DB9  0AA2               	incf	setLED@command,f
 12759  0DBA  0865               	movf	setDimmerLights@lights,w
 12760  0DBB  3195  259A  318D   	fcall	_setLED
 12761                           
 12762                           ;Dimmer_B1.c: 665: DimmerLights->MosfetClose = 1;
 12763  0DBE  0020               	movlb	0	; select bank0
 12764  0DBF  086F               	movf	_DimmerLights,w
 12765  0DC0  3E08               	addlw	8
 12766  0DC1  0086               	movwf	6
 12767  0DC2  3001               	movlw	1	; select bank2/3
 12768  0DC3  0087               	movwf	7
 12769  0DC4  1781               	bsf	1,7
 12770                           
 12771                           ;Dimmer_B1.c: 668: DimmerLights->AdjFlag = 0;
 12772  0DC5  086F               	movf	_DimmerLights,w
 12773  0DC6  0086               	movwf	6
 12774  0DC7  3001               	movlw	1	; select bank2/3
 12775  0DC8  0087               	movwf	7
 12776  0DC9  1181               	bcf	1,3
 12777                           
 12778                           ;Dimmer_B1.c: 669: DimmerLights->AdjStatus = 0;
 12779  0DCA  086F               	movf	_DimmerLights,w
 12780  0DCB  0086               	movwf	6
 12781  0DCC  3001               	movlw	1	; select bank2/3
 12782  0DCD  0087               	movwf	7
 12783  0DCE  1201               	bcf	1,4
 12784                           
 12785                           ;Dimmer_B1.c: 670: DimmerLights->AdjRF = 0;
 12786  0DCF  086F               	movf	_DimmerLights,w
 12787  0DD0  0086               	movwf	6
 12788  0DD1  3001               	movlw	1	; select bank2/3
 12789  0DD2  0087               	movwf	7
 12790  0DD3  1101               	bcf	1,2
 12791  0DD4                     l6802:	
 12792                           
 12793                           ;Dimmer_B1.c: 671: DimmerLights->DimmingTimeValue = 7;
 12794  0DD4  3007               	movlw	7
 12795  0DD5  00E3               	movwf	??_setDimmerLights
 12796  0DD6  086F               	movf	_DimmerLights,w
 12797  0DD7  3E02               	addlw	2
 12798  0DD8  0086               	movwf	6
 12799  0DD9  3001               	movlw	1	; select bank2/3
 12800  0DDA  0087               	movwf	7
 12801  0DDB  0863               	movf	??_setDimmerLights,w
 12802  0DDC  0081               	movwf	1
 12803                           
 12804                           ;Dimmer_B1.c: 673: }
 12805                           ;Dimmer_B1.c: 674: setRF_DimmerLights(lights, status);
 12806  0DDD  0862               	movf	setDimmerLights@status,w
 12807  0DDE  00E3               	movwf	??_setDimmerLights
 12808  0DDF  0863               	movf	??_setDimmerLights,w
 12809  0DE0  00A0               	movwf	setRF_DimmerLights@on
 12810  0DE1  0865               	movf	setDimmerLights@lights,w
 12811  0DE2  3197  2748  318D   	fcall	_setRF_DimmerLights
 12812                           
 12813                           ;Dimmer_B1.c: 675: setTxData();
 12814  0DE5  3186  26FC         	fcall	_setTxData
 12815  0DE7  0008               	return
 12816  0DE8                     __end_of_setDimmerLights:	
 12817                           
 12818                           	psect	text75
 12819  06FC                     __ptext75:	
 12820 ;; *************** function _setTxData *****************
 12821 ;; Defined at:
 12822 ;;		line 204 in file "../src/RF_Control_B1.c"
 12823 ;; Parameters:    Size  Location     Type
 12824 ;;		None
 12825 ;; Auto vars:     Size  Location     Type
 12826 ;;  i               1    0        unsigned char 
 12827 ;; Return value:  Size  Location     Type
 12828 ;;		None               void
 12829 ;; Registers used:
 12830 ;;		wreg, fsr1l, fsr1h
 12831 ;; Tracked objects:
 12832 ;;		On entry : 0/0
 12833 ;;		On exit  : 0/0
 12834 ;;		Unchanged: 0/0
 12835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12838 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12839 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12840 ;;Total ram usage:        1 bytes
 12841 ;; Hardware stack levels used:    1
 12842 ;; Hardware stack levels required when called:    5
 12843 ;; This function calls:
 12844 ;;		Nothing
 12845 ;; This function is called by:
 12846 ;;		_setDimmerLights
 12847 ;;		_setDimmerLights_Adj
 12848 ;;		_setControl_Lights_Table
 12849 ;;		_setRFSW_Control
 12850 ;;		_setRFSW_AdjControl
 12851 ;;		_my_MainTimer
 12852 ;; This function uses a non-reentrant model
 12853 ;;
 12854                           
 12855                           
 12856                           ;psect for function _setTxData
 12857  06FC                     _setTxData:	
 12858                           
 12859                           ;RF_Control_B1.c: 205: char i;
 12860                           ;RF_Control_B1.c: 206: if (RF1.Enable == 1) {
 12861                           
 12862                           ;incstack = 0
 12863                           ; Regs used in _setTxData: [wregfsr1]
 12864  06FC  0021               	movlb	1	; select bank1
 12865  06FD  1C3C               	btfss	_RF1^(0+128),0
 12866  06FE  0008               	return
 12867                           
 12868                           ;RF_Control_B1.c: 208: RF1.TransceiveGO = 1;
 12869  06FF  153C               	bsf	_RF1^(0+128),2
 12870                           
 12871                           ;RF_Control_B1.c: 209: RF1.RunTime = 20;
 12872  0700  3014               	movlw	20
 12873  0701  00C3               	movwf	(_RF1^(0+128)+7)
 12874  0702  3000               	movlw	0
 12875  0703  00C4               	movwf	(_RF1^(0+128)+8)
 12876                           
 12877                           ;RF_Control_B1.c: 218: RF_Data[0] = 0x63;
 12878  0704  3063               	movlw	99
 12879  0705  0020               	movlb	0	; select bank0
 12880  0706  00A0               	movwf	??_setTxData
 12881  0707  0820               	movf	??_setTxData,w
 12882  0708  0023               	movlb	3	; select bank3
 12883  0709  00A0               	movwf	_RF_Data^(0+384)
 12884                           
 12885                           ;RF_Control_B1.c: 219: RF_Data[1] = 0x02;
 12886  070A  3002               	movlw	2
 12887  070B  0020               	movlb	0	; select bank0
 12888  070C  00A0               	movwf	??_setTxData
 12889  070D  0820               	movf	??_setTxData,w
 12890  070E  0023               	movlb	3	; select bank3
 12891  070F  00A1               	movwf	(_RF_Data^(0+384)+1)
 12892                           
 12893                           ;RF_Control_B1.c: 220: RF_Data[2] = product->Data[2];
 12894  0710  0020               	movlb	0	; select bank0
 12895  0711  086E               	movf	_product,w
 12896  0712  0086               	movwf	6
 12897  0713  3002               	movlw	2	; select bank4/5
 12898  0714  0087               	movwf	7
 12899  0715  3002               	movlw	2	; select bank4/5
 12900  0716  3F42               	moviw [2]fsr1
 12901  0717  0023               	movlb	3	; select bank3
 12902  0718  00A2               	movwf	(_RF_Data^(0+384)+2)
 12903                           
 12904                           ;RF_Control_B1.c: 221: RF_Data[3] = product->Data[3];
 12905  0719  0020               	movlb	0	; select bank0
 12906  071A  086E               	movf	_product,w
 12907  071B  0086               	movwf	6
 12908  071C  3002               	movlw	2	; select bank4/5
 12909  071D  0087               	movwf	7
 12910  071E  3002               	movlw	2	; select bank4/5
 12911  071F  3F43               	moviw [3]fsr1
 12912  0720  0023               	movlb	3	; select bank3
 12913  0721  00A3               	movwf	(_RF_Data^(0+384)+3)
 12914                           
 12915                           ;RF_Control_B1.c: 222: RF_Data[4] = product->Data[4];
 12916  0722  0020               	movlb	0	; select bank0
 12917  0723  086E               	movf	_product,w
 12918  0724  0086               	movwf	6
 12919  0725  3002               	movlw	2	; select bank4/5
 12920  0726  0087               	movwf	7
 12921  0727  3002               	movlw	2	; select bank4/5
 12922  0728  3F44               	moviw [4]fsr1
 12923  0729  0023               	movlb	3	; select bank3
 12924  072A  00A4               	movwf	(_RF_Data^(0+384)+4)
 12925                           
 12926                           ;RF_Control_B1.c: 223: RF_Data[5] = product->Data[5];
 12927  072B  0020               	movlb	0	; select bank0
 12928  072C  086E               	movf	_product,w
 12929  072D  0086               	movwf	6
 12930  072E  3002               	movlw	2	; select bank4/5
 12931  072F  0087               	movwf	7
 12932  0730  3002               	movlw	2	; select bank4/5
 12933  0731  3F45               	moviw [5]fsr1
 12934  0732  0023               	movlb	3	; select bank3
 12935  0733  00A5               	movwf	(_RF_Data^(0+384)+5)
 12936                           
 12937                           ;RF_Control_B1.c: 224: RF_Data[6] = product->Data[6];
 12938  0734  0020               	movlb	0	; select bank0
 12939  0735  086E               	movf	_product,w
 12940  0736  0086               	movwf	6
 12941  0737  3002               	movlw	2	; select bank4/5
 12942  0738  0087               	movwf	7
 12943  0739  3002               	movlw	2	; select bank4/5
 12944  073A  3F46               	moviw [6]fsr1
 12945  073B  0023               	movlb	3	; select bank3
 12946  073C  00A6               	movwf	(_RF_Data^(0+384)+6)
 12947                           
 12948                           ;RF_Control_B1.c: 225: RF_Data[7] = product->Data[7];
 12949  073D  0020               	movlb	0	; select bank0
 12950  073E  086E               	movf	_product,w
 12951  073F  0086               	movwf	6
 12952  0740  3002               	movlw	2	; select bank4/5
 12953  0741  0087               	movwf	7
 12954  0742  3002               	movlw	2	; select bank4/5
 12955  0743  3F47               	moviw [7]fsr1
 12956  0744  0023               	movlb	3	; select bank3
 12957  0745  00A7               	movwf	(_RF_Data^(0+384)+7)
 12958                           
 12959                           ;RF_Control_B1.c: 226: RF_Data[8] = product->Data[8];
 12960  0746  0020               	movlb	0	; select bank0
 12961  0747  086E               	movf	_product,w
 12962  0748  0086               	movwf	6
 12963  0749  3002               	movlw	2	; select bank4/5
 12964  074A  0087               	movwf	7
 12965  074B  3002               	movlw	2	; select bank4/5
 12966  074C  3F48               	moviw [8]fsr1
 12967  074D  0023               	movlb	3	; select bank3
 12968  074E  00A8               	movwf	(_RF_Data^(0+384)+8)
 12969                           
 12970                           ;RF_Control_B1.c: 227: RF_Data[9] = product->Data[9];
 12971  074F  0020               	movlb	0	; select bank0
 12972  0750  086E               	movf	_product,w
 12973  0751  0086               	movwf	6
 12974  0752  3002               	movlw	2	; select bank4/5
 12975  0753  0087               	movwf	7
 12976  0754  3002               	movlw	2	; select bank4/5
 12977  0755  3F49               	moviw [9]fsr1
 12978  0756  0023               	movlb	3	; select bank3
 12979  0757  00A9               	movwf	(_RF_Data^(0+384)+9)
 12980                           
 12981                           ;RF_Control_B1.c: 228: RF_Data[10] = product->Data[10];
 12982  0758  0020               	movlb	0	; select bank0
 12983  0759  086E               	movf	_product,w
 12984  075A  0086               	movwf	6
 12985  075B  3002               	movlw	2	; select bank4/5
 12986  075C  0087               	movwf	7
 12987  075D  3002               	movlw	2	; select bank4/5
 12988  075E  3F4A               	moviw [10]fsr1
 12989  075F  0023               	movlb	3	; select bank3
 12990  0760  00AA               	movwf	(_RF_Data^(0+384)+10)
 12991                           
 12992                           ;RF_Control_B1.c: 229: RF_Data[11] = product->Data[11];
 12993  0761  0020               	movlb	0	; select bank0
 12994  0762  086E               	movf	_product,w
 12995  0763  0086               	movwf	6
 12996  0764  3002               	movlw	2	; select bank4/5
 12997  0765  0087               	movwf	7
 12998  0766  3002               	movlw	2	; select bank4/5
 12999  0767  3F4B               	moviw [11]fsr1
 13000  0768  0023               	movlb	3	; select bank3
 13001  0769  00AB               	movwf	(_RF_Data^(0+384)+11)
 13002                           
 13003                           ;RF_Control_B1.c: 230: RF_Data[12] = product->Data[12];
 13004  076A  0020               	movlb	0	; select bank0
 13005  076B  086E               	movf	_product,w
 13006  076C  0086               	movwf	6
 13007  076D  3002               	movlw	2	; select bank4/5
 13008  076E  0087               	movwf	7
 13009  076F  3002               	movlw	2	; select bank4/5
 13010  0770  3F4C               	moviw [12]fsr1
 13011  0771  0023               	movlb	3	; select bank3
 13012  0772  00AC               	movwf	(_RF_Data^(0+384)+12)
 13013                           
 13014                           ;RF_Control_B1.c: 231: RF_Data[13] = product->Data[13];
 13015  0773  0020               	movlb	0	; select bank0
 13016  0774  086E               	movf	_product,w
 13017  0775  0086               	movwf	6
 13018  0776  3002               	movlw	2	; select bank4/5
 13019  0777  0087               	movwf	7
 13020  0778  3002               	movlw	2	; select bank4/5
 13021  0779  3F4D               	moviw [13]fsr1
 13022  077A  0023               	movlb	3	; select bank3
 13023  077B  00AD               	movwf	(_RF_Data^(0+384)+13)
 13024                           
 13025                           ;RF_Control_B1.c: 232: RF_Data[14] = product->Data[14];
 13026  077C  0020               	movlb	0	; select bank0
 13027  077D  086E               	movf	_product,w
 13028  077E  0086               	movwf	6
 13029  077F  3002               	movlw	2	; select bank4/5
 13030  0780  0087               	movwf	7
 13031  0781  3002               	movlw	2	; select bank4/5
 13032  0782  3F4E               	moviw [14]fsr1
 13033  0783  0023               	movlb	3	; select bank3
 13034  0784  00AE               	movwf	(_RF_Data^(0+384)+14)
 13035                           
 13036                           ;RF_Control_B1.c: 233: RF_Data[15] = product->Data[15];
 13037  0785  0020               	movlb	0	; select bank0
 13038  0786  086E               	movf	_product,w
 13039  0787  0086               	movwf	6
 13040  0788  3002               	movlw	2	; select bank4/5
 13041  0789  0087               	movwf	7
 13042  078A  3002               	movlw	2	; select bank4/5
 13043  078B  3F4F               	moviw [15]fsr1
 13044  078C  0023               	movlb	3	; select bank3
 13045  078D  00AF               	movwf	(_RF_Data^(0+384)+15)
 13046                           
 13047                           ;RF_Control_B1.c: 234: RF_Data[16] = product->Data[16];
 13048  078E  0020               	movlb	0	; select bank0
 13049  078F  086E               	movf	_product,w
 13050  0790  0086               	movwf	6
 13051  0791  3002               	movlw	2	; select bank4/5
 13052  0792  0087               	movwf	7
 13053  0793  3002               	movlw	2	; select bank4/5
 13054  0794  3F50               	moviw [16]fsr1
 13055  0795  0023               	movlb	3	; select bank3
 13056  0796  00B0               	movwf	(_RF_Data^(0+384)+16)
 13057                           
 13058                           ;RF_Control_B1.c: 235: RF_Data[17] = product->Data[17];
 13059  0797  0020               	movlb	0	; select bank0
 13060  0798  086E               	movf	_product,w
 13061  0799  0086               	movwf	6
 13062  079A  3002               	movlw	2	; select bank4/5
 13063  079B  0087               	movwf	7
 13064  079C  3002               	movlw	2	; select bank4/5
 13065  079D  3F51               	moviw [17]fsr1
 13066  079E  0023               	movlb	3	; select bank3
 13067  079F  00B1               	movwf	(_RF_Data^(0+384)+17)
 13068                           
 13069                           ;RF_Control_B1.c: 236: RF_Data[18] = product->Data[18];
 13070  07A0  0020               	movlb	0	; select bank0
 13071  07A1  086E               	movf	_product,w
 13072  07A2  0086               	movwf	6
 13073  07A3  3002               	movlw	2	; select bank4/5
 13074  07A4  0087               	movwf	7
 13075  07A5  3002               	movlw	2	; select bank4/5
 13076  07A6  3F52               	moviw [18]fsr1
 13077  07A7  0023               	movlb	3	; select bank3
 13078  07A8  00B2               	movwf	(_RF_Data^(0+384)+18)
 13079                           
 13080                           ;RF_Control_B1.c: 237: RF_Data[19] = product->Data[19];
 13081  07A9  0020               	movlb	0	; select bank0
 13082  07AA  086E               	movf	_product,w
 13083  07AB  0086               	movwf	6
 13084  07AC  3002               	movlw	2	; select bank4/5
 13085  07AD  0087               	movwf	7
 13086  07AE  3002               	movlw	2	; select bank4/5
 13087  07AF  3F53               	moviw [19]fsr1
 13088  07B0  0023               	movlb	3	; select bank3
 13089  07B1  00B3               	movwf	(_RF_Data^(0+384)+19)
 13090                           
 13091                           ;RF_Control_B1.c: 238: RF_Data[20] = 210;
 13092  07B2  30D2               	movlw	210
 13093  07B3  0020               	movlb	0	; select bank0
 13094  07B4  00A0               	movwf	??_setTxData
 13095  07B5  0820               	movf	??_setTxData,w
 13096  07B6  0023               	movlb	3	; select bank3
 13097  07B7  00B4               	movwf	(_RF_Data^(0+384)+20)
 13098  07B8  0008               	return
 13099  07B9                     __end_of_setTxData:	
 13100                           
 13101                           	psect	text76
 13102  1748                     __ptext76:	
 13103 ;; *************** function _setRF_DimmerLights *****************
 13104 ;; Defined at:
 13105 ;;		line 462 in file "../src/RF_Control_B1.c"
 13106 ;; Parameters:    Size  Location     Type
 13107 ;;  lights          1    wreg     unsigned char 
 13108 ;;  on              1    0[BANK0 ] unsigned char 
 13109 ;; Auto vars:     Size  Location     Type
 13110 ;;  lights          1    4[BANK0 ] unsigned char 
 13111 ;;  status          1    3[BANK0 ] unsigned char 
 13112 ;; Return value:  Size  Location     Type
 13113 ;;		None               void
 13114 ;; Registers used:
 13115 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13116 ;; Tracked objects:
 13117 ;;		On entry : 0/0
 13118 ;;		On exit  : 0/0
 13119 ;;		Unchanged: 0/0
 13120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13121 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13122 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13123 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13124 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13125 ;;Total ram usage:        5 bytes
 13126 ;; Hardware stack levels used:    1
 13127 ;; Hardware stack levels required when called:    5
 13128 ;; This function calls:
 13129 ;;		Nothing
 13130 ;; This function is called by:
 13131 ;;		_setDimmerLights
 13132 ;;		_setDimmerLights_Adj
 13133 ;;		_setRFSW_Control
 13134 ;; This function uses a non-reentrant model
 13135 ;;
 13136                           
 13137                           
 13138                           ;psect for function _setRF_DimmerLights
 13139  1748                     _setRF_DimmerLights:	
 13140                           
 13141                           ;incstack = 0
 13142                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 13143                           ;setRF_DimmerLights@lights stored from wreg
 13144  1748  0020               	movlb	0	; select bank0
 13145  1749  00A4               	movwf	setRF_DimmerLights@lights
 13146                           
 13147                           ;RF_Control_B1.c: 463: char status = 1;
 13148  174A  01A3               	clrf	setRF_DimmerLights@status
 13149  174B  0AA3               	incf	setRF_DimmerLights@status,f
 13150                           
 13151                           ;RF_Control_B1.c: 464: status <<= (lights - 1);
 13152  174C  0824               	movf	setRF_DimmerLights@lights,w
 13153  174D  3EFF               	addlw	-1
 13154  174E  0A89               	incf	9,f
 13155  174F  2F52               	goto	u5210
 13156  1750                     u5215:	
 13157  1750  1003               	clrc
 13158  1751  0DA3               	rlf	setRF_DimmerLights@status,f
 13159  1752                     u5210:	
 13160  1752  3EFF               	addlw	-1
 13161  1753  1D03               	skipz
 13162  1754  2F50               	goto	u5215
 13163                           
 13164                           ;RF_Control_B1.c: 465: product->Data[11]=lights;
 13165  1755  0824               	movf	setRF_DimmerLights@lights,w
 13166  1756  00A1               	movwf	??_setRF_DimmerLights
 13167  1757  086E               	movf	_product,w
 13168  1758  3E0B               	addlw	11
 13169  1759  0086               	movwf	6
 13170  175A  3002               	movlw	2	; select bank4/5
 13171  175B  0087               	movwf	7
 13172  175C  0821               	movf	??_setRF_DimmerLights,w
 13173  175D  0081               	movwf	1
 13174                           
 13175                           ;RF_Control_B1.c: 473: product->Data[9]=product->Data[20 + lights];
 13176  175E  0824               	movf	setRF_DimmerLights@lights,w
 13177  175F  3E14               	addlw	20
 13178  1760  076E               	addwf	_product,w
 13179  1761  00A1               	movwf	??_setRF_DimmerLights
 13180  1762  0821               	movf	??_setRF_DimmerLights,w
 13181  1763  0086               	movwf	6
 13182  1764  3002               	movlw	2	; select bank4/5
 13183  1765  0087               	movwf	7
 13184  1766  0801               	movf	1,w
 13185  1767  00A2               	movwf	??_setRF_DimmerLights+1
 13186  1768  086E               	movf	_product,w
 13187  1769  3E09               	addlw	9
 13188  176A  0086               	movwf	6
 13189  176B  3002               	movlw	2	; select bank4/5
 13190  176C  0087               	movwf	7
 13191  176D  0822               	movf	??_setRF_DimmerLights+1,w
 13192  176E  0081               	movwf	1
 13193                           
 13194                           ;RF_Control_B1.c: 474: product->Data[17]=product->Data[26 + lights];
 13195  176F  0824               	movf	setRF_DimmerLights@lights,w
 13196  1770  3E1A               	addlw	26
 13197  1771  076E               	addwf	_product,w
 13198  1772  00A1               	movwf	??_setRF_DimmerLights
 13199  1773  0821               	movf	??_setRF_DimmerLights,w
 13200  1774  0086               	movwf	6
 13201  1775  3002               	movlw	2	; select bank4/5
 13202  1776  0087               	movwf	7
 13203  1777  0801               	movf	1,w
 13204  1778  00A2               	movwf	??_setRF_DimmerLights+1
 13205  1779  086E               	movf	_product,w
 13206  177A  3E11               	addlw	17
 13207  177B  0086               	movwf	6
 13208  177C  3002               	movlw	2	; select bank4/5
 13209  177D  0087               	movwf	7
 13210  177E  0822               	movf	??_setRF_DimmerLights+1,w
 13211  177F  0081               	movwf	1
 13212                           
 13213                           ;RF_Control_B1.c: 475: if (on == 1) {
 13214  1780  0820               	movf	setRF_DimmerLights@on,w
 13215  1781  3A01               	xorlw	1
 13216  1782  1D03               	skipz
 13217  1783  2F94               	goto	l6230
 13218                           
 13219                           ;RF_Control_B1.c: 476: product->Data[15]=(product->Data[15] | status);
 13220  1784  086E               	movf	_product,w
 13221  1785  3E0F               	addlw	15
 13222  1786  0086               	movwf	6
 13223  1787  3002               	movlw	2	; select bank4/5
 13224  1788  0087               	movwf	7
 13225  1789  0801               	movf	1,w
 13226  178A  0423               	iorwf	setRF_DimmerLights@status,w
 13227  178B  00A1               	movwf	??_setRF_DimmerLights
 13228  178C  086E               	movf	_product,w
 13229  178D  3E0F               	addlw	15
 13230  178E  0086               	movwf	6
 13231  178F  3002               	movlw	2	; select bank4/5
 13232  1790  0087               	movwf	7
 13233  1791  0821               	movf	??_setRF_DimmerLights,w
 13234  1792  0081               	movwf	1
 13235                           
 13236                           ;RF_Control_B1.c: 477: } else {
 13237  1793  0008               	return
 13238  1794                     l6230:	
 13239                           
 13240                           ;RF_Control_B1.c: 478: product->Data[15]=(product->Data[15]&(~status));
 13241  1794  086E               	movf	_product,w
 13242  1795  3E0F               	addlw	15
 13243  1796  0086               	movwf	6
 13244  1797  3002               	movlw	2	; select bank4/5
 13245  1798  0087               	movwf	7
 13246  1799  0923               	comf	setRF_DimmerLights@status,w
 13247  179A  0501               	andwf	1,w
 13248  179B  00A1               	movwf	??_setRF_DimmerLights
 13249  179C  086E               	movf	_product,w
 13250  179D  3E0F               	addlw	15
 13251  179E  0086               	movwf	6
 13252  179F  3002               	movlw	2	; select bank4/5
 13253  17A0  0087               	movwf	7
 13254  17A1  0821               	movf	??_setRF_DimmerLights,w
 13255  17A2  0081               	movwf	1
 13256  17A3  0008               	return
 13257  17A4                     __end_of_setRF_DimmerLights:	
 13258                           
 13259                           	psect	text77
 13260  0975                     __ptext77:	
 13261 ;; *************** function _setPercentValue *****************
 13262 ;; Defined at:
 13263 ;;		line 886 in file "../src/Dimmer_B1.c"
 13264 ;; Parameters:    Size  Location     Type
 13265 ;;  value           1    wreg     unsigned char 
 13266 ;; Auto vars:     Size  Location     Type
 13267 ;;  value           1   62[BANK0 ] unsigned char 
 13268 ;;  i               3   63[BANK0 ] float 
 13269 ;; Return value:  Size  Location     Type
 13270 ;;                  1    wreg      unsigned char 
 13271 ;; Registers used:
 13272 ;;		wreg, status,2, status,0, pclath, cstack
 13273 ;; Tracked objects:
 13274 ;;		On entry : 0/0
 13275 ;;		On exit  : 0/0
 13276 ;;		Unchanged: 0/0
 13277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13279 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13280 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13281 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13282 ;;Total ram usage:        6 bytes
 13283 ;; Hardware stack levels used:    1
 13284 ;; Hardware stack levels required when called:    7
 13285 ;; This function calls:
 13286 ;;		___awtoft
 13287 ;;		___ftadd
 13288 ;;		___ftdiv
 13289 ;;		___ftneg
 13290 ;;		___fttol
 13291 ;; This function is called by:
 13292 ;;		_setDimmerLights
 13293 ;;		_setDimmerLights_Adj
 13294 ;;		_Flash_Memory_Initialization
 13295 ;; This function uses a non-reentrant model
 13296 ;;
 13297                           
 13298                           
 13299                           ;psect for function _setPercentValue
 13300  0975                     _setPercentValue:	
 13301                           
 13302                           ;incstack = 0
 13303                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13304                           ;setPercentValue@value stored from wreg
 13305  0975  0020               	movlb	0	; select bank0
 13306  0976  00DE               	movwf	setPercentValue@value
 13307                           
 13308                           ;Dimmer_B1.c: 894: float i = ((char)(80*0.8)) - ((char)(15*0.8));
 13309  0977  3000               	movlw	0
 13310  0978  00DF               	movwf	setPercentValue@i
 13311  0979  3050               	movlw	80
 13312  097A  00E0               	movwf	setPercentValue@i+1
 13313  097B  3042               	movlw	66
 13314  097C  00E1               	movwf	setPercentValue@i+2
 13315                           
 13316                           ;Dimmer_B1.c: 895: i /= 100;
 13317  097D  3000               	movlw	0
 13318  097E  00AE               	movwf	___ftdiv@f2
 13319  097F  30C8               	movlw	200
 13320  0980  00AF               	movwf	___ftdiv@f2+1
 13321  0981  3042               	movlw	66
 13322  0982  00B0               	movwf	___ftdiv@f2+2
 13323  0983  085F               	movf	setPercentValue@i,w
 13324  0984  00B1               	movwf	___ftdiv@f1
 13325  0985  0860               	movf	setPercentValue@i+1,w
 13326  0986  00B2               	movwf	___ftdiv@f1+1
 13327  0987  0861               	movf	setPercentValue@i+2,w
 13328  0988  00B3               	movwf	___ftdiv@f1+2
 13329  0989  318D  25E8  3189   	fcall	___ftdiv
 13330  098C  0020               	movlb	0	; select bank0
 13331  098D  082E               	movf	?___ftdiv,w
 13332  098E  00DF               	movwf	setPercentValue@i
 13333  098F  082F               	movf	?___ftdiv+1,w
 13334  0990  00E0               	movwf	setPercentValue@i+1
 13335  0991  0830               	movf	?___ftdiv+2,w
 13336  0992  00E1               	movwf	setPercentValue@i+2
 13337                           
 13338                           ;Dimmer_B1.c: 897: return (char) (100 - ((((char)(80*0.8)) - value) / i));
 13339  0993  085E               	movf	setPercentValue@value,w
 13340  0994  00DC               	movwf	??_setPercentValue
 13341  0995  01DD               	clrf	??_setPercentValue+1
 13342  0996  09DC               	comf	??_setPercentValue,f
 13343  0997  09DD               	comf	??_setPercentValue+1,f
 13344  0998  0ADC               	incf	??_setPercentValue,f
 13345  0999  1903               	skipnz
 13346  099A  0ADD               	incf	??_setPercentValue+1,f
 13347  099B  085C               	movf	??_setPercentValue,w
 13348  099C  3E40               	addlw	64
 13349  099D  00A8               	movwf	___awtoft@c
 13350  099E  3000               	movlw	0
 13351  099F  3D5D               	addwfc	??_setPercentValue+1,w
 13352  09A0  00A9               	movwf	___awtoft@c+1
 13353  09A1  319F  2799  3189   	fcall	___awtoft
 13354  09A4  0020               	movlb	0	; select bank0
 13355  09A5  0828               	movf	?___awtoft,w
 13356  09A6  00B1               	movwf	___ftdiv@f1
 13357  09A7  0829               	movf	?___awtoft+1,w
 13358  09A8  00B2               	movwf	___ftdiv@f1+1
 13359  09A9  082A               	movf	?___awtoft+2,w
 13360  09AA  00B3               	movwf	___ftdiv@f1+2
 13361  09AB  085F               	movf	setPercentValue@i,w
 13362  09AC  00AE               	movwf	___ftdiv@f2
 13363  09AD  0860               	movf	setPercentValue@i+1,w
 13364  09AE  00AF               	movwf	___ftdiv@f2+1
 13365  09AF  0861               	movf	setPercentValue@i+2,w
 13366  09B0  00B0               	movwf	___ftdiv@f2+2
 13367  09B1  318D  25E8  3189   	fcall	___ftdiv
 13368  09B4  0020               	movlb	0	; select bank0
 13369  09B5  082E               	movf	?___ftdiv,w
 13370  09B6  00BE               	movwf	___ftneg@f1
 13371  09B7  082F               	movf	?___ftdiv+1,w
 13372  09B8  00BF               	movwf	___ftneg@f1+1
 13373  09B9  0830               	movf	?___ftdiv+2,w
 13374  09BA  00C0               	movwf	___ftneg@f1+2
 13375  09BB  319B  2399  3189   	fcall	___ftneg
 13376  09BE  0020               	movlb	0	; select bank0
 13377  09BF  083E               	movf	?___ftneg,w
 13378  09C0  00C4               	movwf	___ftadd@f2
 13379  09C1  083F               	movf	?___ftneg+1,w
 13380  09C2  00C5               	movwf	___ftadd@f2+1
 13381  09C3  0840               	movf	?___ftneg+2,w
 13382  09C4  00C6               	movwf	___ftadd@f2+2
 13383  09C5  3000               	movlw	0
 13384  09C6  00C1               	movwf	___ftadd@f1
 13385  09C7  30C8               	movlw	200
 13386  09C8  00C2               	movwf	___ftadd@f1+1
 13387  09C9  3042               	movlw	66
 13388  09CA  00C3               	movwf	___ftadd@f1+2
 13389  09CB  3184  243A  3189   	fcall	___ftadd
 13390  09CE  0020               	movlb	0	; select bank0
 13391  09CF  0841               	movf	?___ftadd,w
 13392  09D0  00CE               	movwf	___fttol@f1
 13393  09D1  0842               	movf	?___ftadd+1,w
 13394  09D2  00CF               	movwf	___fttol@f1+1
 13395  09D3  0843               	movf	?___ftadd+2,w
 13396  09D4  00D0               	movwf	___fttol@f1+2
 13397  09D5  318C  24D8         	fcall	___fttol
 13398  09D7  0020               	movlb	0	; select bank0
 13399  09D8  084E               	movf	?___fttol,w
 13400  09D9  0008               	return
 13401  09DA                     __end_of_setPercentValue:	
 13402                           
 13403                           	psect	text78
 13404  0CD8                     __ptext78:	
 13405 ;; *************** function ___fttol *****************
 13406 ;; Defined at:
 13407 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13408 ;; Parameters:    Size  Location     Type
 13409 ;;  f1              3   46[BANK0 ] float 
 13410 ;; Auto vars:     Size  Location     Type
 13411 ;;  lval            4   55[BANK0 ] unsigned long 
 13412 ;;  exp1            1   59[BANK0 ] unsigned char 
 13413 ;;  sign1           1   54[BANK0 ] unsigned char 
 13414 ;; Return value:  Size  Location     Type
 13415 ;;                  4   46[BANK0 ] long 
 13416 ;; Registers used:
 13417 ;;		wreg, status,2, status,0
 13418 ;; Tracked objects:
 13419 ;;		On entry : 0/0
 13420 ;;		On exit  : 0/0
 13421 ;;		Unchanged: 0/0
 13422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13423 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13424 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13425 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13426 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13427 ;;Total ram usage:       14 bytes
 13428 ;; Hardware stack levels used:    1
 13429 ;; Hardware stack levels required when called:    5
 13430 ;; This function calls:
 13431 ;;		Nothing
 13432 ;; This function is called by:
 13433 ;;		_getPercentValue
 13434 ;;		_setPercentValue
 13435 ;; This function uses a non-reentrant model
 13436 ;;
 13437                           
 13438                           
 13439                           ;psect for function ___fttol
 13440  0CD8                     ___fttol:	
 13441                           
 13442                           ;incstack = 0
 13443                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13444  0CD8  0020               	movlb	0	; select bank0
 13445  0CD9  084E               	movf	___fttol@f1,w
 13446  0CDA  00D2               	movwf	??___fttol
 13447  0CDB  084F               	movf	___fttol@f1+1,w
 13448  0CDC  00D3               	movwf	??___fttol+1
 13449  0CDD  0850               	movf	___fttol@f1+2,w
 13450  0CDE  00D4               	movwf	??___fttol+2
 13451  0CDF  1003               	clrc
 13452  0CE0  0D53               	rlf	??___fttol+1,w
 13453  0CE1  0D54               	rlf	??___fttol+2,w
 13454  0CE2  00D5               	movwf	??___fttol+3
 13455  0CE3  0855               	movf	??___fttol+3,w
 13456  0CE4  00DB               	movwf	___fttol@exp1
 13457  0CE5  08DB               	movf	___fttol@exp1,f
 13458  0CE6  1D03               	skipz
 13459  0CE7  2CF1               	goto	l5956
 13460  0CE8  3000               	movlw	0
 13461  0CE9  00D1               	movwf	?___fttol+3
 13462  0CEA  3000               	movlw	0
 13463  0CEB  00D0               	movwf	?___fttol+2
 13464  0CEC  3000               	movlw	0
 13465  0CED  00CF               	movwf	?___fttol+1
 13466  0CEE  3000               	movlw	0
 13467  0CEF  00CE               	movwf	?___fttol
 13468  0CF0  0008               	return
 13469  0CF1                     l5956:	
 13470  0CF1  084E               	movf	___fttol@f1,w
 13471  0CF2  00D2               	movwf	??___fttol
 13472  0CF3  084F               	movf	___fttol@f1+1,w
 13473  0CF4  00D3               	movwf	??___fttol+1
 13474  0CF5  0850               	movf	___fttol@f1+2,w
 13475  0CF6  00D4               	movwf	??___fttol+2
 13476  0CF7  3017               	movlw	23
 13477  0CF8                     u4805:	
 13478  0CF8  36D4               	lsrf	??___fttol+2,f
 13479  0CF9  0CD3               	rrf	??___fttol+1,f
 13480  0CFA  0CD2               	rrf	??___fttol,f
 13481  0CFB  0B89               	decfsz	9,f
 13482  0CFC  2CF8               	goto	u4805
 13483  0CFD  0852               	movf	??___fttol,w
 13484  0CFE  00D5               	movwf	??___fttol+3
 13485  0CFF  0855               	movf	??___fttol+3,w
 13486  0D00  00D6               	movwf	___fttol@sign1
 13487  0D01  17CF               	bsf	___fttol@f1+1,7
 13488  0D02  30FF               	movlw	255
 13489  0D03  05CE               	andwf	___fttol@f1,f
 13490  0D04  30FF               	movlw	255
 13491  0D05  05CF               	andwf	___fttol@f1+1,f
 13492  0D06  3000               	movlw	0
 13493  0D07  05D0               	andwf	___fttol@f1+2,f
 13494  0D08  084E               	movf	___fttol@f1,w
 13495  0D09  00D7               	movwf	___fttol@lval
 13496  0D0A  084F               	movf	___fttol@f1+1,w
 13497  0D0B  00D8               	movwf	___fttol@lval+1
 13498  0D0C  0850               	movf	___fttol@f1+2,w
 13499  0D0D  00D9               	movwf	___fttol@lval+2
 13500  0D0E  01DA               	clrf	___fttol@lval+3
 13501  0D0F  308E               	movlw	142
 13502  0D10  02DB               	subwf	___fttol@exp1,f
 13503  0D11  1FDB               	btfss	___fttol@exp1,7
 13504  0D12  2D2F               	goto	l5976
 13505  0D13  085B               	movf	___fttol@exp1,w
 13506  0D14  3A80               	xorlw	128
 13507  0D15  3E8F               	addlw	143
 13508  0D16  1803               	skipnc
 13509  0D17  2D21               	goto	l5974
 13510  0D18  3000               	movlw	0
 13511  0D19  00D1               	movwf	?___fttol+3
 13512  0D1A  3000               	movlw	0
 13513  0D1B  00D0               	movwf	?___fttol+2
 13514  0D1C  3000               	movlw	0
 13515  0D1D  00CF               	movwf	?___fttol+1
 13516  0D1E  3000               	movlw	0
 13517  0D1F  00CE               	movwf	?___fttol
 13518  0D20  0008               	return
 13519  0D21                     l5974:	
 13520  0D21  3001               	movlw	1
 13521  0D22                     u4835:	
 13522  0D22  36DA               	lsrf	___fttol@lval+3,f
 13523  0D23  0CD9               	rrf	___fttol@lval+2,f
 13524  0D24  0CD8               	rrf	___fttol@lval+1,f
 13525  0D25  0CD7               	rrf	___fttol@lval,f
 13526  0D26  0B89               	decfsz	9,f
 13527  0D27  2D22               	goto	u4835
 13528  0D28  3001               	movlw	1
 13529  0D29  00D2               	movwf	??___fttol
 13530  0D2A  0852               	movf	??___fttol,w
 13531  0D2B  07DB               	addwf	___fttol@exp1,f
 13532  0D2C  1903               	btfsc	3,2
 13533  0D2D  2D48               	goto	l5986
 13534  0D2E  2D21               	goto	l5974
 13535  0D2F                     l5976:	
 13536  0D2F  3018               	movlw	24
 13537  0D30  025B               	subwf	___fttol@exp1,w
 13538  0D31  1C03               	skipc
 13539  0D32  2D45               	goto	l5984
 13540  0D33  3000               	movlw	0
 13541  0D34  00D1               	movwf	?___fttol+3
 13542  0D35  3000               	movlw	0
 13543  0D36  00D0               	movwf	?___fttol+2
 13544  0D37  3000               	movlw	0
 13545  0D38  00CF               	movwf	?___fttol+1
 13546  0D39  3000               	movlw	0
 13547  0D3A  00CE               	movwf	?___fttol
 13548  0D3B  0008               	return
 13549  0D3C                     l5982:	
 13550  0D3C  3001               	movlw	1
 13551  0D3D                     u4865:	
 13552  0D3D  35D7               	lslf	___fttol@lval,f
 13553  0D3E  0DD8               	rlf	___fttol@lval+1,f
 13554  0D3F  0DD9               	rlf	___fttol@lval+2,f
 13555  0D40  0DDA               	rlf	___fttol@lval+3,f
 13556  0D41  0B89               	decfsz	9,f
 13557  0D42  2D3D               	goto	u4865
 13558  0D43  3001               	movlw	1
 13559  0D44  02DB               	subwf	___fttol@exp1,f
 13560  0D45                     l5984:	
 13561  0D45  08DB               	movf	___fttol@exp1,f
 13562  0D46  1D03               	skipz
 13563  0D47  2D3C               	goto	l5982
 13564  0D48                     l5986:	
 13565  0D48  0856               	movf	___fttol@sign1,w
 13566  0D49  1903               	btfsc	3,2
 13567  0D4A  2D56               	goto	l5990
 13568  0D4B  09D7               	comf	___fttol@lval,f
 13569  0D4C  09D8               	comf	___fttol@lval+1,f
 13570  0D4D  09D9               	comf	___fttol@lval+2,f
 13571  0D4E  09DA               	comf	___fttol@lval+3,f
 13572  0D4F  0AD7               	incf	___fttol@lval,f
 13573  0D50  1903               	skipnz
 13574  0D51  0AD8               	incf	___fttol@lval+1,f
 13575  0D52  1903               	skipnz
 13576  0D53  0AD9               	incf	___fttol@lval+2,f
 13577  0D54  1903               	skipnz
 13578  0D55  0ADA               	incf	___fttol@lval+3,f
 13579  0D56                     l5990:	
 13580  0D56  085A               	movf	___fttol@lval+3,w
 13581  0D57  00D1               	movwf	?___fttol+3
 13582  0D58  0859               	movf	___fttol@lval+2,w
 13583  0D59  00D0               	movwf	?___fttol+2
 13584  0D5A  0858               	movf	___fttol@lval+1,w
 13585  0D5B  00CF               	movwf	?___fttol+1
 13586  0D5C  0857               	movf	___fttol@lval,w
 13587  0D5D  00CE               	movwf	?___fttol
 13588  0D5E  0008               	return
 13589  0D5F                     __end_of___fttol:	
 13590                           
 13591                           	psect	text79
 13592  1B99                     __ptext79:	
 13593 ;; *************** function ___ftneg *****************
 13594 ;; Defined at:
 13595 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13596 ;; Parameters:    Size  Location     Type
 13597 ;;  f1              3   30[BANK0 ] float 
 13598 ;; Auto vars:     Size  Location     Type
 13599 ;;		None
 13600 ;; Return value:  Size  Location     Type
 13601 ;;                  3   30[BANK0 ] float 
 13602 ;; Registers used:
 13603 ;;		wreg
 13604 ;; Tracked objects:
 13605 ;;		On entry : 0/0
 13606 ;;		On exit  : 0/0
 13607 ;;		Unchanged: 0/0
 13608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13609 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13612 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13613 ;;Total ram usage:        3 bytes
 13614 ;; Hardware stack levels used:    1
 13615 ;; Hardware stack levels required when called:    5
 13616 ;; This function calls:
 13617 ;;		Nothing
 13618 ;; This function is called by:
 13619 ;;		_getPercentValue
 13620 ;;		_setPercentValue
 13621 ;; This function uses a non-reentrant model
 13622 ;;
 13623                           
 13624                           
 13625                           ;psect for function ___ftneg
 13626  1B99                     ___ftneg:	
 13627                           
 13628                           ;incstack = 0
 13629                           ; Regs used in ___ftneg: [wreg]
 13630  1B99  0020               	movlb	0	; select bank0
 13631  1B9A  0840               	movf	___ftneg@f1+2,w
 13632  1B9B  043F               	iorwf	___ftneg@f1+1,w
 13633  1B9C  043E               	iorwf	___ftneg@f1,w
 13634  1B9D  1903               	skipnz
 13635  1B9E  0008               	return
 13636  1B9F  3080               	movlw	128
 13637  1BA0  06C0               	xorwf	___ftneg@f1+2,f
 13638  1BA1  0008               	return
 13639  1BA2                     __end_of___ftneg:	
 13640                           
 13641                           	psect	text80
 13642  0DE8                     __ptext80:	
 13643 ;; *************** function ___ftdiv *****************
 13644 ;; Defined at:
 13645 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13646 ;; Parameters:    Size  Location     Type
 13647 ;;  f2              3   14[BANK0 ] float 
 13648 ;;  f1              3   17[BANK0 ] float 
 13649 ;; Auto vars:     Size  Location     Type
 13650 ;;  f3              3   25[BANK0 ] float 
 13651 ;;  sign            1   29[BANK0 ] unsigned char 
 13652 ;;  exp             1   28[BANK0 ] unsigned char 
 13653 ;;  cntr            1   24[BANK0 ] unsigned char 
 13654 ;; Return value:  Size  Location     Type
 13655 ;;                  3   14[BANK0 ] float 
 13656 ;; Registers used:
 13657 ;;		wreg, status,2, status,0, pclath, cstack
 13658 ;; Tracked objects:
 13659 ;;		On entry : 0/0
 13660 ;;		On exit  : 0/0
 13661 ;;		Unchanged: 0/0
 13662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13663 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13664 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13665 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13666 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13667 ;;Total ram usage:       16 bytes
 13668 ;; Hardware stack levels used:    1
 13669 ;; Hardware stack levels required when called:    6
 13670 ;; This function calls:
 13671 ;;		___ftpack
 13672 ;; This function is called by:
 13673 ;;		_getPercentValue
 13674 ;;		_setPercentValue
 13675 ;; This function uses a non-reentrant model
 13676 ;;
 13677                           
 13678                           
 13679                           ;psect for function ___ftdiv
 13680  0DE8                     ___ftdiv:	
 13681                           
 13682                           ;incstack = 0
 13683                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13684  0DE8  0020               	movlb	0	; select bank0
 13685  0DE9  0831               	movf	___ftdiv@f1,w
 13686  0DEA  00B4               	movwf	??___ftdiv
 13687  0DEB  0832               	movf	___ftdiv@f1+1,w
 13688  0DEC  00B5               	movwf	??___ftdiv+1
 13689  0DED  0833               	movf	___ftdiv@f1+2,w
 13690  0DEE  00B6               	movwf	??___ftdiv+2
 13691  0DEF  1003               	clrc
 13692  0DF0  0D35               	rlf	??___ftdiv+1,w
 13693  0DF1  0D36               	rlf	??___ftdiv+2,w
 13694  0DF2  00B7               	movwf	??___ftdiv+3
 13695  0DF3  0837               	movf	??___ftdiv+3,w
 13696  0DF4  00BC               	movwf	___ftdiv@exp
 13697  0DF5  08BC               	movf	___ftdiv@exp,f
 13698  0DF6  1D03               	skipz
 13699  0DF7  2DFF               	goto	l5856
 13700  0DF8  3000               	movlw	0
 13701  0DF9  00AE               	movwf	?___ftdiv
 13702  0DFA  3000               	movlw	0
 13703  0DFB  00AF               	movwf	?___ftdiv+1
 13704  0DFC  3000               	movlw	0
 13705  0DFD  00B0               	movwf	?___ftdiv+2
 13706  0DFE  0008               	return
 13707  0DFF                     l5856:	
 13708  0DFF  082E               	movf	___ftdiv@f2,w
 13709  0E00  00B4               	movwf	??___ftdiv
 13710  0E01  082F               	movf	___ftdiv@f2+1,w
 13711  0E02  00B5               	movwf	??___ftdiv+1
 13712  0E03  0830               	movf	___ftdiv@f2+2,w
 13713  0E04  00B6               	movwf	??___ftdiv+2
 13714  0E05  1003               	clrc
 13715  0E06  0D35               	rlf	??___ftdiv+1,w
 13716  0E07  0D36               	rlf	??___ftdiv+2,w
 13717  0E08  00B7               	movwf	??___ftdiv+3
 13718  0E09  0837               	movf	??___ftdiv+3,w
 13719  0E0A  00BD               	movwf	___ftdiv@sign
 13720  0E0B  08BD               	movf	___ftdiv@sign,f
 13721  0E0C  1D03               	skipz
 13722  0E0D  2E15               	goto	l5862
 13723  0E0E  3000               	movlw	0
 13724  0E0F  00AE               	movwf	?___ftdiv
 13725  0E10  3000               	movlw	0
 13726  0E11  00AF               	movwf	?___ftdiv+1
 13727  0E12  3000               	movlw	0
 13728  0E13  00B0               	movwf	?___ftdiv+2
 13729  0E14  0008               	return
 13730  0E15                     l5862:	
 13731  0E15  3000               	movlw	0
 13732  0E16  00B9               	movwf	___ftdiv@f3
 13733  0E17  3000               	movlw	0
 13734  0E18  00BA               	movwf	___ftdiv@f3+1
 13735  0E19  3000               	movlw	0
 13736  0E1A  00BB               	movwf	___ftdiv@f3+2
 13737  0E1B  3089               	movlw	137
 13738  0E1C  073D               	addwf	___ftdiv@sign,w
 13739  0E1D  00B4               	movwf	??___ftdiv
 13740  0E1E  0834               	movf	??___ftdiv,w
 13741  0E1F  02BC               	subwf	___ftdiv@exp,f
 13742  0E20  0831               	movf	___ftdiv@f1,w
 13743  0E21  00B4               	movwf	??___ftdiv
 13744  0E22  0832               	movf	___ftdiv@f1+1,w
 13745  0E23  00B5               	movwf	??___ftdiv+1
 13746  0E24  0833               	movf	___ftdiv@f1+2,w
 13747  0E25  00B6               	movwf	??___ftdiv+2
 13748  0E26  3010               	movlw	16
 13749  0E27                     u4605:	
 13750  0E27  36B6               	lsrf	??___ftdiv+2,f
 13751  0E28  0CB5               	rrf	??___ftdiv+1,f
 13752  0E29  0CB4               	rrf	??___ftdiv,f
 13753  0E2A  0B89               	decfsz	9,f
 13754  0E2B  2E27               	goto	u4605
 13755  0E2C  0834               	movf	??___ftdiv,w
 13756  0E2D  00B7               	movwf	??___ftdiv+3
 13757  0E2E  0837               	movf	??___ftdiv+3,w
 13758  0E2F  00BD               	movwf	___ftdiv@sign
 13759  0E30  082E               	movf	___ftdiv@f2,w
 13760  0E31  00B4               	movwf	??___ftdiv
 13761  0E32  082F               	movf	___ftdiv@f2+1,w
 13762  0E33  00B5               	movwf	??___ftdiv+1
 13763  0E34  0830               	movf	___ftdiv@f2+2,w
 13764  0E35  00B6               	movwf	??___ftdiv+2
 13765  0E36  3010               	movlw	16
 13766  0E37                     u4615:	
 13767  0E37  36B6               	lsrf	??___ftdiv+2,f
 13768  0E38  0CB5               	rrf	??___ftdiv+1,f
 13769  0E39  0CB4               	rrf	??___ftdiv,f
 13770  0E3A  0B89               	decfsz	9,f
 13771  0E3B  2E37               	goto	u4615
 13772  0E3C  0834               	movf	??___ftdiv,w
 13773  0E3D  00B7               	movwf	??___ftdiv+3
 13774  0E3E  0837               	movf	??___ftdiv+3,w
 13775  0E3F  06BD               	xorwf	___ftdiv@sign,f
 13776  0E40  3080               	movlw	128
 13777  0E41  00B4               	movwf	??___ftdiv
 13778  0E42  0834               	movf	??___ftdiv,w
 13779  0E43  05BD               	andwf	___ftdiv@sign,f
 13780  0E44  17B2               	bsf	___ftdiv@f1+1,7
 13781  0E45  30FF               	movlw	255
 13782  0E46  05B1               	andwf	___ftdiv@f1,f
 13783  0E47  30FF               	movlw	255
 13784  0E48  05B2               	andwf	___ftdiv@f1+1,f
 13785  0E49  3000               	movlw	0
 13786  0E4A  05B3               	andwf	___ftdiv@f1+2,f
 13787  0E4B  17AF               	bsf	___ftdiv@f2+1,7
 13788  0E4C  30FF               	movlw	255
 13789  0E4D  05AE               	andwf	___ftdiv@f2,f
 13790  0E4E  30FF               	movlw	255
 13791  0E4F  05AF               	andwf	___ftdiv@f2+1,f
 13792  0E50  3000               	movlw	0
 13793  0E51  05B0               	andwf	___ftdiv@f2+2,f
 13794  0E52  3018               	movlw	24
 13795  0E53  00B4               	movwf	??___ftdiv
 13796  0E54  0834               	movf	??___ftdiv,w
 13797  0E55  00B8               	movwf	___ftdiv@cntr
 13798  0E56                     l5876:	
 13799  0E56  3001               	movlw	1
 13800  0E57                     u4625:	
 13801  0E57  35B9               	lslf	___ftdiv@f3,f
 13802  0E58  0DBA               	rlf	___ftdiv@f3+1,f
 13803  0E59  0DBB               	rlf	___ftdiv@f3+2,f
 13804  0E5A  0B89               	decfsz	9,f
 13805  0E5B  2E57               	goto	u4625
 13806  0E5C  0830               	movf	___ftdiv@f2+2,w
 13807  0E5D  0233               	subwf	___ftdiv@f1+2,w
 13808  0E5E  1D03               	skipz
 13809  0E5F  2E66               	goto	u4635
 13810  0E60  082F               	movf	___ftdiv@f2+1,w
 13811  0E61  0232               	subwf	___ftdiv@f1+1,w
 13812  0E62  1D03               	skipz
 13813  0E63  2E66               	goto	u4635
 13814  0E64  082E               	movf	___ftdiv@f2,w
 13815  0E65  0231               	subwf	___ftdiv@f1,w
 13816  0E66                     u4635:	
 13817  0E66  1C03               	skipc
 13818  0E67  2E6F               	goto	l5884
 13819  0E68  082E               	movf	___ftdiv@f2,w
 13820  0E69  02B1               	subwf	___ftdiv@f1,f
 13821  0E6A  082F               	movf	___ftdiv@f2+1,w
 13822  0E6B  3BB2               	subwfb	___ftdiv@f1+1,f
 13823  0E6C  0830               	movf	___ftdiv@f2+2,w
 13824  0E6D  3BB3               	subwfb	___ftdiv@f1+2,f
 13825  0E6E  1439               	bsf	___ftdiv@f3,0
 13826  0E6F                     l5884:	
 13827  0E6F  3001               	movlw	1
 13828  0E70                     u4645:	
 13829  0E70  35B1               	lslf	___ftdiv@f1,f
 13830  0E71  0DB2               	rlf	___ftdiv@f1+1,f
 13831  0E72  0DB3               	rlf	___ftdiv@f1+2,f
 13832  0E73  0B89               	decfsz	9,f
 13833  0E74  2E70               	goto	u4645
 13834  0E75  3001               	movlw	1
 13835  0E76  02B8               	subwf	___ftdiv@cntr,f
 13836  0E77  1D03               	btfss	3,2
 13837  0E78  2E56               	goto	l5876
 13838  0E79  0839               	movf	___ftdiv@f3,w
 13839  0E7A  00A0               	movwf	___ftpack@arg
 13840  0E7B  083A               	movf	___ftdiv@f3+1,w
 13841  0E7C  00A1               	movwf	___ftpack@arg+1
 13842  0E7D  083B               	movf	___ftdiv@f3+2,w
 13843  0E7E  00A2               	movwf	___ftpack@arg+2
 13844  0E7F  083C               	movf	___ftdiv@exp,w
 13845  0E80  00B4               	movwf	??___ftdiv
 13846  0E81  0834               	movf	??___ftdiv,w
 13847  0E82  00A3               	movwf	___ftpack@exp
 13848  0E83  083D               	movf	___ftdiv@sign,w
 13849  0E84  00B5               	movwf	??___ftdiv+1
 13850  0E85  0835               	movf	??___ftdiv+1,w
 13851  0E86  00A4               	movwf	___ftpack@sign
 13852  0E87  3189  2114         	fcall	___ftpack
 13853  0E89  0020               	movlb	0	; select bank0
 13854  0E8A  0820               	movf	?___ftpack,w
 13855  0E8B  00AE               	movwf	?___ftdiv
 13856  0E8C  0821               	movf	?___ftpack+1,w
 13857  0E8D  00AF               	movwf	?___ftdiv+1
 13858  0E8E  0822               	movf	?___ftpack+2,w
 13859  0E8F  00B0               	movwf	?___ftdiv+2
 13860  0E90  0008               	return
 13861  0E91                     __end_of___ftdiv:	
 13862                           
 13863                           	psect	text81
 13864  043A                     __ptext81:	
 13865 ;; *************** function ___ftadd *****************
 13866 ;; Defined at:
 13867 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 13868 ;; Parameters:    Size  Location     Type
 13869 ;;  f1              3   33[BANK0 ] float 
 13870 ;;  f2              3   36[BANK0 ] float 
 13871 ;; Auto vars:     Size  Location     Type
 13872 ;;  exp1            1   45[BANK0 ] unsigned char 
 13873 ;;  exp2            1   44[BANK0 ] unsigned char 
 13874 ;;  sign            1   43[BANK0 ] unsigned char 
 13875 ;; Return value:  Size  Location     Type
 13876 ;;                  3   33[BANK0 ] float 
 13877 ;; Registers used:
 13878 ;;		wreg, status,2, status,0, pclath, cstack
 13879 ;; Tracked objects:
 13880 ;;		On entry : 0/0
 13881 ;;		On exit  : 0/0
 13882 ;;		Unchanged: 0/0
 13883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13884 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13885 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13886 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13887 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13888 ;;Total ram usage:       13 bytes
 13889 ;; Hardware stack levels used:    1
 13890 ;; Hardware stack levels required when called:    6
 13891 ;; This function calls:
 13892 ;;		___ftpack
 13893 ;; This function is called by:
 13894 ;;		_getPercentValue
 13895 ;;		_setPercentValue
 13896 ;; This function uses a non-reentrant model
 13897 ;;
 13898                           
 13899                           
 13900                           ;psect for function ___ftadd
 13901  043A                     ___ftadd:	
 13902                           
 13903                           ;incstack = 0
 13904                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 13905  043A  0020               	movlb	0	; select bank0
 13906  043B  0841               	movf	___ftadd@f1,w
 13907  043C  00C7               	movwf	??___ftadd
 13908  043D  0842               	movf	___ftadd@f1+1,w
 13909  043E  00C8               	movwf	??___ftadd+1
 13910  043F  0843               	movf	___ftadd@f1+2,w
 13911  0440  00C9               	movwf	??___ftadd+2
 13912  0441  1003               	clrc
 13913  0442  0D48               	rlf	??___ftadd+1,w
 13914  0443  0D49               	rlf	??___ftadd+2,w
 13915  0444  00CA               	movwf	??___ftadd+3
 13916  0445  084A               	movf	??___ftadd+3,w
 13917  0446  00CD               	movwf	___ftadd@exp1
 13918  0447  0844               	movf	___ftadd@f2,w
 13919  0448  00C7               	movwf	??___ftadd
 13920  0449  0845               	movf	___ftadd@f2+1,w
 13921  044A  00C8               	movwf	??___ftadd+1
 13922  044B  0846               	movf	___ftadd@f2+2,w
 13923  044C  00C9               	movwf	??___ftadd+2
 13924  044D  1003               	clrc
 13925  044E  0D48               	rlf	??___ftadd+1,w
 13926  044F  0D49               	rlf	??___ftadd+2,w
 13927  0450  00CA               	movwf	??___ftadd+3
 13928  0451  084A               	movf	??___ftadd+3,w
 13929  0452  00CC               	movwf	___ftadd@exp2
 13930  0453  084D               	movf	___ftadd@exp1,w
 13931  0454  1903               	btfsc	3,2
 13932  0455  2C62               	goto	l5786
 13933  0456  084C               	movf	___ftadd@exp2,w
 13934  0457  024D               	subwf	___ftadd@exp1,w
 13935  0458  1803               	skipnc
 13936  0459  2C69               	goto	l5790
 13937  045A  034D               	decf	___ftadd@exp1,w
 13938  045B  3AFF               	xorlw	255
 13939  045C  074C               	addwf	___ftadd@exp2,w
 13940  045D  00C7               	movwf	??___ftadd
 13941  045E  3019               	movlw	25
 13942  045F  0247               	subwf	??___ftadd,w
 13943  0460  1C03               	skipc
 13944  0461  2C69               	goto	l5790
 13945  0462                     l5786:	
 13946  0462  0844               	movf	___ftadd@f2,w
 13947  0463  00C1               	movwf	?___ftadd
 13948  0464  0845               	movf	___ftadd@f2+1,w
 13949  0465  00C2               	movwf	?___ftadd+1
 13950  0466  0846               	movf	___ftadd@f2+2,w
 13951  0467  00C3               	movwf	?___ftadd+2
 13952  0468  0008               	return
 13953  0469                     l5790:	
 13954  0469  084C               	movf	___ftadd@exp2,w
 13955  046A  1903               	btfsc	3,2
 13956  046B  0008               	return
 13957  046C  084D               	movf	___ftadd@exp1,w
 13958  046D  024C               	subwf	___ftadd@exp2,w
 13959  046E  1803               	skipnc
 13960  046F  2C78               	goto	l5796
 13961  0470  034C               	decf	___ftadd@exp2,w
 13962  0471  3AFF               	xorlw	255
 13963  0472  074D               	addwf	___ftadd@exp1,w
 13964  0473  00C7               	movwf	??___ftadd
 13965  0474  3019               	movlw	25
 13966  0475  0247               	subwf	??___ftadd,w
 13967  0476  1803               	btfsc	3,0
 13968  0477  0008               	return
 13969  0478                     l5796:	
 13970  0478  3006               	movlw	6
 13971  0479  00C7               	movwf	??___ftadd
 13972  047A  0847               	movf	??___ftadd,w
 13973  047B  00CB               	movwf	___ftadd@sign
 13974  047C  1BC3               	btfsc	___ftadd@f1+2,7
 13975  047D  17CB               	bsf	___ftadd@sign,7
 13976  047E  1BC6               	btfsc	___ftadd@f2+2,7
 13977  047F  174B               	bsf	___ftadd@sign,6
 13978  0480  17C2               	bsf	___ftadd@f1+1,7
 13979  0481  30FF               	movlw	255
 13980  0482  05C1               	andwf	___ftadd@f1,f
 13981  0483  30FF               	movlw	255
 13982  0484  05C2               	andwf	___ftadd@f1+1,f
 13983  0485  3000               	movlw	0
 13984  0486  05C3               	andwf	___ftadd@f1+2,f
 13985  0487  17C5               	bsf	___ftadd@f2+1,7
 13986  0488  30FF               	movlw	255
 13987  0489  05C4               	andwf	___ftadd@f2,f
 13988  048A  30FF               	movlw	255
 13989  048B  05C5               	andwf	___ftadd@f2+1,f
 13990  048C  3000               	movlw	0
 13991  048D  05C6               	andwf	___ftadd@f2+2,f
 13992  048E  084C               	movf	___ftadd@exp2,w
 13993  048F  024D               	subwf	___ftadd@exp1,w
 13994  0490  1803               	skipnc
 13995  0491  2CB4               	goto	l5818
 13996  0492                     l5808:	
 13997  0492  3001               	movlw	1
 13998  0493                     u4445:	
 13999  0493  35C4               	lslf	___ftadd@f2,f
 14000  0494  0DC5               	rlf	___ftadd@f2+1,f
 14001  0495  0DC6               	rlf	___ftadd@f2+2,f
 14002  0496  0B89               	decfsz	9,f
 14003  0497  2C93               	goto	u4445
 14004  0498  3001               	movlw	1
 14005  0499  02CC               	subwf	___ftadd@exp2,f
 14006  049A  084C               	movf	___ftadd@exp2,w
 14007  049B  064D               	xorwf	___ftadd@exp1,w
 14008  049C  1903               	skipnz
 14009  049D  2CAF               	goto	l5816
 14010  049E  3001               	movlw	1
 14011  049F  02CB               	subwf	___ftadd@sign,f
 14012  04A0  084B               	movf	___ftadd@sign,w
 14013  04A1  3907               	andlw	7
 14014  04A2  1903               	btfsc	3,2
 14015  04A3  2CAF               	goto	l5816
 14016  04A4  2C92               	goto	l5808
 14017  04A5                     l5814:	
 14018  04A5  3001               	movlw	1
 14019  04A6                     u4475:	
 14020  04A6  36C3               	lsrf	___ftadd@f1+2,f
 14021  04A7  0CC2               	rrf	___ftadd@f1+1,f
 14022  04A8  0CC1               	rrf	___ftadd@f1,f
 14023  04A9  0B89               	decfsz	9,f
 14024  04AA  2CA6               	goto	u4475
 14025  04AB  3001               	movlw	1
 14026  04AC  00C7               	movwf	??___ftadd
 14027  04AD  0847               	movf	??___ftadd,w
 14028  04AE  07CD               	addwf	___ftadd@exp1,f
 14029  04AF                     l5816:	
 14030  04AF  084D               	movf	___ftadd@exp1,w
 14031  04B0  064C               	xorwf	___ftadd@exp2,w
 14032  04B1  1903               	btfsc	3,2
 14033  04B2  2CD9               	goto	l2931
 14034  04B3  2CA5               	goto	l5814
 14035  04B4                     l5818:	
 14036  04B4  084D               	movf	___ftadd@exp1,w
 14037  04B5  024C               	subwf	___ftadd@exp2,w
 14038  04B6  1803               	skipnc
 14039  04B7  2CD9               	goto	l2931
 14040  04B8                     l5820:	
 14041  04B8  3001               	movlw	1
 14042  04B9                     u4505:	
 14043  04B9  35C1               	lslf	___ftadd@f1,f
 14044  04BA  0DC2               	rlf	___ftadd@f1+1,f
 14045  04BB  0DC3               	rlf	___ftadd@f1+2,f
 14046  04BC  0B89               	decfsz	9,f
 14047  04BD  2CB9               	goto	u4505
 14048  04BE  3001               	movlw	1
 14049  04BF  02CD               	subwf	___ftadd@exp1,f
 14050  04C0  084C               	movf	___ftadd@exp2,w
 14051  04C1  064D               	xorwf	___ftadd@exp1,w
 14052  04C2  1903               	skipnz
 14053  04C3  2CD5               	goto	l5828
 14054  04C4  3001               	movlw	1
 14055  04C5  02CB               	subwf	___ftadd@sign,f
 14056  04C6  084B               	movf	___ftadd@sign,w
 14057  04C7  3907               	andlw	7
 14058  04C8  1903               	btfsc	3,2
 14059  04C9  2CD5               	goto	l5828
 14060  04CA  2CB8               	goto	l5820
 14061  04CB                     l5826:	
 14062  04CB  3001               	movlw	1
 14063  04CC                     u4535:	
 14064  04CC  36C6               	lsrf	___ftadd@f2+2,f
 14065  04CD  0CC5               	rrf	___ftadd@f2+1,f
 14066  04CE  0CC4               	rrf	___ftadd@f2,f
 14067  04CF  0B89               	decfsz	9,f
 14068  04D0  2CCC               	goto	u4535
 14069  04D1  3001               	movlw	1
 14070  04D2  00C7               	movwf	??___ftadd
 14071  04D3  0847               	movf	??___ftadd,w
 14072  04D4  07CC               	addwf	___ftadd@exp2,f
 14073  04D5                     l5828:	
 14074  04D5  084D               	movf	___ftadd@exp1,w
 14075  04D6  064C               	xorwf	___ftadd@exp2,w
 14076  04D7  1D03               	skipz
 14077  04D8  2CCB               	goto	l5826
 14078  04D9                     l2931:	
 14079  04D9  1FCB               	btfss	___ftadd@sign,7
 14080  04DA  2CEB               	goto	l5832
 14081  04DB  30FF               	movlw	255
 14082  04DC  06C1               	xorwf	___ftadd@f1,f
 14083  04DD  30FF               	movlw	255
 14084  04DE  06C2               	xorwf	___ftadd@f1+1,f
 14085  04DF  30FF               	movlw	255
 14086  04E0  06C3               	xorwf	___ftadd@f1+2,f
 14087  04E1  3001               	movlw	1
 14088  04E2  07C1               	addwf	___ftadd@f1,f
 14089  04E3  3000               	movlw	0
 14090  04E4  1803               	skipnc
 14091  04E5  3001               	movlw	1
 14092  04E6  07C2               	addwf	___ftadd@f1+1,f
 14093  04E7  3000               	movlw	0
 14094  04E8  1803               	skipnc
 14095  04E9  3001               	movlw	1
 14096  04EA  07C3               	addwf	___ftadd@f1+2,f
 14097  04EB                     l5832:	
 14098  04EB  1F4B               	btfss	___ftadd@sign,6
 14099  04EC  2CFD               	goto	l5836
 14100  04ED  30FF               	movlw	255
 14101  04EE  06C4               	xorwf	___ftadd@f2,f
 14102  04EF  30FF               	movlw	255
 14103  04F0  06C5               	xorwf	___ftadd@f2+1,f
 14104  04F1  30FF               	movlw	255
 14105  04F2  06C6               	xorwf	___ftadd@f2+2,f
 14106  04F3  3001               	movlw	1
 14107  04F4  07C4               	addwf	___ftadd@f2,f
 14108  04F5  3000               	movlw	0
 14109  04F6  1803               	skipnc
 14110  04F7  3001               	movlw	1
 14111  04F8  07C5               	addwf	___ftadd@f2+1,f
 14112  04F9  3000               	movlw	0
 14113  04FA  1803               	skipnc
 14114  04FB  3001               	movlw	1
 14115  04FC  07C6               	addwf	___ftadd@f2+2,f
 14116  04FD                     l5836:	
 14117  04FD  01CB               	clrf	___ftadd@sign
 14118  04FE  0841               	movf	___ftadd@f1,w
 14119  04FF  07C4               	addwf	___ftadd@f2,f
 14120  0500  0842               	movf	___ftadd@f1+1,w
 14121  0501  3DC5               	addwfc	___ftadd@f2+1,f
 14122  0502  0843               	movf	___ftadd@f1+2,w
 14123  0503  3DC6               	addwfc	___ftadd@f2+2,f
 14124  0504  1FC6               	btfss	___ftadd@f2+2,7
 14125  0505  2D18               	goto	l5846
 14126  0506  30FF               	movlw	255
 14127  0507  06C4               	xorwf	___ftadd@f2,f
 14128  0508  30FF               	movlw	255
 14129  0509  06C5               	xorwf	___ftadd@f2+1,f
 14130  050A  30FF               	movlw	255
 14131  050B  06C6               	xorwf	___ftadd@f2+2,f
 14132  050C  3001               	movlw	1
 14133  050D  07C4               	addwf	___ftadd@f2,f
 14134  050E  3000               	movlw	0
 14135  050F  1803               	skipnc
 14136  0510  3001               	movlw	1
 14137  0511  07C5               	addwf	___ftadd@f2+1,f
 14138  0512  3000               	movlw	0
 14139  0513  1803               	skipnc
 14140  0514  3001               	movlw	1
 14141  0515  07C6               	addwf	___ftadd@f2+2,f
 14142  0516  01CB               	clrf	___ftadd@sign
 14143  0517  0ACB               	incf	___ftadd@sign,f
 14144  0518                     l5846:	
 14145  0518  0844               	movf	___ftadd@f2,w
 14146  0519  00A0               	movwf	___ftpack@arg
 14147  051A  0845               	movf	___ftadd@f2+1,w
 14148  051B  00A1               	movwf	___ftpack@arg+1
 14149  051C  0846               	movf	___ftadd@f2+2,w
 14150  051D  00A2               	movwf	___ftpack@arg+2
 14151  051E  084D               	movf	___ftadd@exp1,w
 14152  051F  00C7               	movwf	??___ftadd
 14153  0520  0847               	movf	??___ftadd,w
 14154  0521  00A3               	movwf	___ftpack@exp
 14155  0522  084B               	movf	___ftadd@sign,w
 14156  0523  00C8               	movwf	??___ftadd+1
 14157  0524  0848               	movf	??___ftadd+1,w
 14158  0525  00A4               	movwf	___ftpack@sign
 14159  0526  3189  2114         	fcall	___ftpack
 14160  0528  0020               	movlb	0	; select bank0
 14161  0529  0820               	movf	?___ftpack,w
 14162  052A  00C1               	movwf	?___ftadd
 14163  052B  0821               	movf	?___ftpack+1,w
 14164  052C  00C2               	movwf	?___ftadd+1
 14165  052D  0822               	movf	?___ftpack+2,w
 14166  052E  00C3               	movwf	?___ftadd+2
 14167  052F  0008               	return
 14168  0530                     __end_of___ftadd:	
 14169                           
 14170                           	psect	text82
 14171  1F99                     __ptext82:	
 14172 ;; *************** function ___awtoft *****************
 14173 ;; Defined at:
 14174 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14175 ;; Parameters:    Size  Location     Type
 14176 ;;  c               2    8[BANK0 ] int 
 14177 ;; Auto vars:     Size  Location     Type
 14178 ;;  sign            1   13[BANK0 ] unsigned char 
 14179 ;; Return value:  Size  Location     Type
 14180 ;;                  3    8[BANK0 ] float 
 14181 ;; Registers used:
 14182 ;;		wreg, status,2, status,0, pclath, cstack
 14183 ;; Tracked objects:
 14184 ;;		On entry : 0/0
 14185 ;;		On exit  : 0/0
 14186 ;;		Unchanged: 0/0
 14187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14188 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14189 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14190 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14191 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14192 ;;Total ram usage:        6 bytes
 14193 ;; Hardware stack levels used:    1
 14194 ;; Hardware stack levels required when called:    6
 14195 ;; This function calls:
 14196 ;;		___ftpack
 14197 ;; This function is called by:
 14198 ;;		_getPercentValue
 14199 ;;		_setPercentValue
 14200 ;; This function uses a non-reentrant model
 14201 ;;
 14202                           
 14203                           
 14204                           ;psect for function ___awtoft
 14205  1F99                     ___awtoft:	
 14206                           
 14207                           ;incstack = 0
 14208                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14209  1F99  0020               	movlb	0	; select bank0
 14210  1F9A  01AD               	clrf	___awtoft@sign
 14211  1F9B  1FA9               	btfss	___awtoft@c+1,7
 14212  1F9C  2FA4               	goto	l5774
 14213  1F9D  09A8               	comf	___awtoft@c,f
 14214  1F9E  09A9               	comf	___awtoft@c+1,f
 14215  1F9F  0AA8               	incf	___awtoft@c,f
 14216  1FA0  1903               	skipnz
 14217  1FA1  0AA9               	incf	___awtoft@c+1,f
 14218  1FA2  01AD               	clrf	___awtoft@sign
 14219  1FA3  0AAD               	incf	___awtoft@sign,f
 14220  1FA4                     l5774:	
 14221  1FA4  0828               	movf	___awtoft@c,w
 14222  1FA5  00A0               	movwf	___ftpack@arg
 14223  1FA6  0829               	movf	___awtoft@c+1,w
 14224  1FA7  00A1               	movwf	___ftpack@arg+1
 14225  1FA8  01A2               	clrf	___ftpack@arg+2
 14226  1FA9  308E               	movlw	142
 14227  1FAA  00AB               	movwf	??___awtoft
 14228  1FAB  082B               	movf	??___awtoft,w
 14229  1FAC  00A3               	movwf	___ftpack@exp
 14230  1FAD  082D               	movf	___awtoft@sign,w
 14231  1FAE  00AC               	movwf	??___awtoft+1
 14232  1FAF  082C               	movf	??___awtoft+1,w
 14233  1FB0  00A4               	movwf	___ftpack@sign
 14234  1FB1  3189  2114         	fcall	___ftpack
 14235  1FB3  0020               	movlb	0	; select bank0
 14236  1FB4  0820               	movf	?___ftpack,w
 14237  1FB5  00A8               	movwf	?___awtoft
 14238  1FB6  0821               	movf	?___ftpack+1,w
 14239  1FB7  00A9               	movwf	?___awtoft+1
 14240  1FB8  0822               	movf	?___ftpack+2,w
 14241  1FB9  00AA               	movwf	?___awtoft+2
 14242  1FBA  0008               	return
 14243  1FBB                     __end_of___awtoft:	
 14244                           
 14245                           	psect	text83
 14246  0914                     __ptext83:	
 14247 ;; *************** function ___ftpack *****************
 14248 ;; Defined at:
 14249 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14250 ;; Parameters:    Size  Location     Type
 14251 ;;  arg             3    0[BANK0 ] unsigned um
 14252 ;;  exp             1    3[BANK0 ] unsigned char 
 14253 ;;  sign            1    4[BANK0 ] unsigned char 
 14254 ;; Auto vars:     Size  Location     Type
 14255 ;;		None
 14256 ;; Return value:  Size  Location     Type
 14257 ;;                  3    0[BANK0 ] float 
 14258 ;; Registers used:
 14259 ;;		wreg, status,2, status,0
 14260 ;; Tracked objects:
 14261 ;;		On entry : 0/0
 14262 ;;		On exit  : 0/0
 14263 ;;		Unchanged: 0/0
 14264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14265 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14267 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14268 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14269 ;;Total ram usage:        8 bytes
 14270 ;; Hardware stack levels used:    1
 14271 ;; Hardware stack levels required when called:    5
 14272 ;; This function calls:
 14273 ;;		Nothing
 14274 ;; This function is called by:
 14275 ;;		___awtoft
 14276 ;;		___ftadd
 14277 ;;		___ftdiv
 14278 ;;		___ftmul
 14279 ;; This function uses a non-reentrant model
 14280 ;;
 14281                           
 14282                           
 14283                           ;psect for function ___ftpack
 14284  0914                     ___ftpack:	
 14285                           
 14286                           ;incstack = 0
 14287                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14288  0914  0020               	movlb	0	; select bank0
 14289  0915  0823               	movf	___ftpack@exp,w
 14290  0916  1903               	btfsc	3,2
 14291  0917  291D               	goto	l5724
 14292  0918  0822               	movf	___ftpack@arg+2,w
 14293  0919  0421               	iorwf	___ftpack@arg+1,w
 14294  091A  0420               	iorwf	___ftpack@arg,w
 14295  091B  1D03               	skipz
 14296  091C  292E               	goto	l5730
 14297  091D                     l5724:	
 14298  091D  3000               	movlw	0
 14299  091E  00A0               	movwf	?___ftpack
 14300  091F  3000               	movlw	0
 14301  0920  00A1               	movwf	?___ftpack+1
 14302  0921  3000               	movlw	0
 14303  0922  00A2               	movwf	?___ftpack+2
 14304  0923  0008               	return
 14305  0924                     l5728:	
 14306  0924  3001               	movlw	1
 14307  0925  00A5               	movwf	??___ftpack
 14308  0926  0825               	movf	??___ftpack,w
 14309  0927  07A3               	addwf	___ftpack@exp,f
 14310  0928  3001               	movlw	1
 14311  0929                     u4235:	
 14312  0929  36A2               	lsrf	___ftpack@arg+2,f
 14313  092A  0CA1               	rrf	___ftpack@arg+1,f
 14314  092B  0CA0               	rrf	___ftpack@arg,f
 14315  092C  0B89               	decfsz	9,f
 14316  092D  2929               	goto	u4235
 14317  092E                     l5730:	
 14318  092E  30FE               	movlw	254
 14319  092F  0522               	andwf	___ftpack@arg+2,w
 14320  0930  1903               	btfsc	3,2
 14321  0931  2947               	goto	l2902
 14322  0932  2924               	goto	l5728
 14323  0933                     l5732:	
 14324  0933  3001               	movlw	1
 14325  0934  00A5               	movwf	??___ftpack
 14326  0935  0825               	movf	??___ftpack,w
 14327  0936  07A3               	addwf	___ftpack@exp,f
 14328  0937  3001               	movlw	1
 14329  0938  07A0               	addwf	___ftpack@arg,f
 14330  0939  3000               	movlw	0
 14331  093A  1803               	skipnc
 14332  093B  3001               	movlw	1
 14333  093C  07A1               	addwf	___ftpack@arg+1,f
 14334  093D  3000               	movlw	0
 14335  093E  1803               	skipnc
 14336  093F  3001               	movlw	1
 14337  0940  07A2               	addwf	___ftpack@arg+2,f
 14338  0941  3001               	movlw	1
 14339  0942                     u4255:	
 14340  0942  36A2               	lsrf	___ftpack@arg+2,f
 14341  0943  0CA1               	rrf	___ftpack@arg+1,f
 14342  0944  0CA0               	rrf	___ftpack@arg,f
 14343  0945  0B89               	decfsz	9,f
 14344  0946  2942               	goto	u4255
 14345  0947                     l2902:	
 14346  0947  30FF               	movlw	255
 14347  0948  0522               	andwf	___ftpack@arg+2,w
 14348  0949  1903               	btfsc	3,2
 14349  094A  2954               	goto	l5740
 14350  094B  2933               	goto	l5732
 14351  094C                     l5738:	
 14352  094C  3001               	movlw	1
 14353  094D  02A3               	subwf	___ftpack@exp,f
 14354  094E  3001               	movlw	1
 14355  094F                     u4275:	
 14356  094F  35A0               	lslf	___ftpack@arg,f
 14357  0950  0DA1               	rlf	___ftpack@arg+1,f
 14358  0951  0DA2               	rlf	___ftpack@arg+2,f
 14359  0952  0B89               	decfsz	9,f
 14360  0953  294F               	goto	u4275
 14361  0954                     l5740:	
 14362  0954  1FA1               	btfss	___ftpack@arg+1,7
 14363  0955  294C               	goto	l5738
 14364  0956  1823               	btfsc	___ftpack@exp,0
 14365  0957  295E               	goto	l2908
 14366  0958  30FF               	movlw	255
 14367  0959  05A0               	andwf	___ftpack@arg,f
 14368  095A  307F               	movlw	127
 14369  095B  05A1               	andwf	___ftpack@arg+1,f
 14370  095C  30FF               	movlw	255
 14371  095D  05A2               	andwf	___ftpack@arg+2,f
 14372  095E                     l2908:	
 14373  095E  1003               	clrc
 14374  095F  0CA3               	rrf	___ftpack@exp,f
 14375  0960  0823               	movf	___ftpack@exp,w
 14376  0961  00A5               	movwf	??___ftpack
 14377  0962  01A6               	clrf	??___ftpack+1
 14378  0963  01A7               	clrf	??___ftpack+2
 14379  0964  3010               	movlw	16
 14380  0965                     u4305:	
 14381  0965  35A5               	lslf	??___ftpack,f
 14382  0966  0DA6               	rlf	??___ftpack+1,f
 14383  0967  0DA7               	rlf	??___ftpack+2,f
 14384  0968  0B89               	decfsz	9,f
 14385  0969  2965               	goto	u4305
 14386  096A  0825               	movf	??___ftpack,w
 14387  096B  04A0               	iorwf	___ftpack@arg,f
 14388  096C  0826               	movf	??___ftpack+1,w
 14389  096D  04A1               	iorwf	___ftpack@arg+1,f
 14390  096E  0827               	movf	??___ftpack+2,w
 14391  096F  04A2               	iorwf	___ftpack@arg+2,f
 14392  0970  0824               	movf	___ftpack@sign,w
 14393  0971  1903               	btfsc	3,2
 14394  0972  0008               	return
 14395  0973  17A2               	bsf	___ftpack@arg+2,7
 14396  0974  0008               	return
 14397  0975                     __end_of___ftpack:	
 14398                           
 14399                           	psect	text84
 14400  159A                     __ptext84:	
 14401 ;; *************** function _setLED *****************
 14402 ;; Defined at:
 14403 ;;		line 76 in file "../src/LED_B1.c"
 14404 ;; Parameters:    Size  Location     Type
 14405 ;;  led             1    wreg     unsigned char 
 14406 ;;  command         1    2[BANK0 ] unsigned char 
 14407 ;; Auto vars:     Size  Location     Type
 14408 ;;  led             1    3[BANK0 ] unsigned char 
 14409 ;; Return value:  Size  Location     Type
 14410 ;;		None               void
 14411 ;; Registers used:
 14412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14413 ;; Tracked objects:
 14414 ;;		On entry : 0/0
 14415 ;;		On exit  : 0/0
 14416 ;;		Unchanged: 0/0
 14417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14418 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14421 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14422 ;;Total ram usage:        2 bytes
 14423 ;; Hardware stack levels used:    1
 14424 ;; Hardware stack levels required when called:    6
 14425 ;; This function calls:
 14426 ;;		_LedPointSelect
 14427 ;; This function is called by:
 14428 ;;		_setDimmerLights
 14429 ;;		_setLED_Initialization
 14430 ;;		_setSw_Initialization
 14431 ;;		_setMain_Exception
 14432 ;; This function uses a non-reentrant model
 14433 ;;
 14434                           
 14435                           
 14436                           ;psect for function _setLED
 14437  159A                     _setLED:	
 14438                           
 14439                           ;incstack = 0
 14440                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14441                           ;setLED@led stored from wreg
 14442  159A  0020               	movlb	0	; select bank0
 14443  159B  00A3               	movwf	setLED@led
 14444                           
 14445                           ;LED_B1.c: 77: LedPointSelect(led);
 14446  159C  0823               	movf	setLED@led,w
 14447  159D  319E  2685  3195   	fcall	_LedPointSelect
 14448                           
 14449                           ;LED_B1.c: 78: if (command == 0) {
 14450  15A0  0020               	movlb	0	; select bank0
 14451  15A1  08A2               	movf	setLED@command,f
 14452  15A2  1D03               	skipz
 14453  15A3  2DB1               	goto	l6490
 14454                           
 14455                           ;LED_B1.c: 80: if (led == 1) {
 14456  15A4  0823               	movf	setLED@led,w
 14457  15A5  3A01               	xorlw	1
 14458  15A6  1D03               	skipz
 14459  15A7  2DA9               	goto	l6482
 14460                           
 14461                           ;LED_B1.c: 84: RA3 = 1;
 14462  15A8  158C               	bsf	12,3	;volatile
 14463  15A9                     l6482:	
 14464                           
 14465                           ;LED_B1.c: 86: }
 14466                           ;LED_B1.c: 89: if (led == 2) {
 14467  15A9  0823               	movf	setLED@led,w
 14468  15AA  3A02               	xorlw	2
 14469  15AB  1903               	btfsc	3,2
 14470                           
 14471                           ;LED_B1.c: 93: RC7 = 1;
 14472  15AC  178E               	bsf	14,7	;volatile
 14473                           
 14474                           ;LED_B1.c: 95: }
 14475                           ;LED_B1.c: 107: if (led == 99) {
 14476  15AD  0823               	movf	setLED@led,w
 14477  15AE  3A63               	xorlw	99
 14478  15AF  1903               	btfsc	3,2
 14479                           
 14480                           ;LED_B1.c: 111: RB5 = 1;
 14481  15B0  168D               	bsf	13,5	;volatile
 14482  15B1                     l6490:	
 14483                           
 14484                           ;LED_B1.c: 113: }
 14485                           ;LED_B1.c: 115: }
 14486                           ;LED_B1.c: 116: if (command == 1) {
 14487  15B1  0822               	movf	setLED@command,w
 14488  15B2  3A01               	xorlw	1
 14489  15B3  1D03               	skipz
 14490  15B4  2DC2               	goto	l6504
 14491                           
 14492                           ;LED_B1.c: 118: if (led == 1) {
 14493  15B5  0823               	movf	setLED@led,w
 14494  15B6  3A01               	xorlw	1
 14495  15B7  1D03               	skipz
 14496  15B8  2DBA               	goto	l6496
 14497                           
 14498                           ;LED_B1.c: 122: RA3 = 0;
 14499  15B9  118C               	bcf	12,3	;volatile
 14500  15BA                     l6496:	
 14501                           
 14502                           ;LED_B1.c: 124: }
 14503                           ;LED_B1.c: 127: if (led == 2) {
 14504  15BA  0823               	movf	setLED@led,w
 14505  15BB  3A02               	xorlw	2
 14506  15BC  1903               	btfsc	3,2
 14507                           
 14508                           ;LED_B1.c: 131: RC7 = 0;
 14509  15BD  138E               	bcf	14,7	;volatile
 14510                           
 14511                           ;LED_B1.c: 133: }
 14512                           ;LED_B1.c: 145: if (led == 99) {
 14513  15BE  0823               	movf	setLED@led,w
 14514  15BF  3A63               	xorlw	99
 14515  15C0  1903               	btfsc	3,2
 14516                           
 14517                           ;LED_B1.c: 149: RB5 = 0;
 14518  15C1  128D               	bcf	13,5	;volatile
 14519  15C2                     l6504:	
 14520                           
 14521                           ;LED_B1.c: 151: }
 14522                           ;LED_B1.c: 153: }
 14523                           ;LED_B1.c: 154: if (command == 10) {
 14524  15C2  0822               	movf	setLED@command,w
 14525  15C3  3A0A               	xorlw	10
 14526  15C4  1D03               	skipz
 14527  15C5  2DE0               	goto	l6520
 14528                           
 14529                           ;LED_B1.c: 155: LED->GO = 0;
 14530  15C6  087A               	movf	_LED,w
 14531  15C7  0086               	movwf	6
 14532  15C8  3001               	movlw	1	; select bank2/3
 14533  15C9  0087               	movwf	7
 14534  15CA  1081               	bcf	1,1
 14535                           
 14536                           ;LED_B1.c: 156: LED->Time = 0;
 14537  15CB  0A7A               	incf	_LED,w
 14538  15CC  0086               	movwf	6
 14539  15CD  3001               	movlw	1	; select bank2/3
 14540  15CE  0087               	movwf	7
 14541  15CF  3000               	movlw	0
 14542  15D0  3FC0               	movwi [0]fsr1
 14543  15D1  3FC1               	movwi [1]fsr1
 14544                           
 14545                           ;LED_B1.c: 158: if (led == 1) {
 14546  15D2  0823               	movf	setLED@led,w
 14547  15D3  3A01               	xorlw	1
 14548  15D4  1D03               	skipz
 14549  15D5  2DD8               	goto	l6512
 14550                           
 14551                           ;LED_B1.c: 162: RA3 = 1;
 14552  15D6  158C               	bsf	12,3	;volatile
 14553                           
 14554                           ;LED_B1.c: 164: }
 14555  15D7  2DDC               	goto	l6516
 14556  15D8                     l6512:	
 14557                           
 14558                           ;LED_B1.c: 167: else if (led == 2) {
 14559  15D8  0823               	movf	setLED@led,w
 14560  15D9  3A02               	xorlw	2
 14561  15DA  1903               	btfsc	3,2
 14562                           
 14563                           ;LED_B1.c: 171: RC7 = 1;
 14564  15DB  178E               	bsf	14,7	;volatile
 14565  15DC                     l6516:	
 14566                           
 14567                           ;LED_B1.c: 173: }
 14568                           ;LED_B1.c: 185: if (led == 99) {
 14569  15DC  0823               	movf	setLED@led,w
 14570  15DD  3A63               	xorlw	99
 14571  15DE  1903               	btfsc	3,2
 14572                           
 14573                           ;LED_B1.c: 189: RB5 = 1;
 14574  15DF  168D               	bsf	13,5	;volatile
 14575  15E0                     l6520:	
 14576                           
 14577                           ;LED_B1.c: 191: }
 14578                           ;LED_B1.c: 193: }
 14579                           ;LED_B1.c: 194: if (command == 11) {
 14580  15E0  0822               	movf	setLED@command,w
 14581  15E1  3A0B               	xorlw	11
 14582  15E2  1D03               	skipz
 14583  15E3  0008               	return
 14584                           
 14585                           ;LED_B1.c: 195: LED->GO = 1;
 14586  15E4  087A               	movf	_LED,w
 14587  15E5  0086               	movwf	6
 14588  15E6  3001               	movlw	1	; select bank2/3
 14589  15E7  0087               	movwf	7
 14590  15E8  1481               	bsf	1,1
 14591  15E9  0008               	return
 14592  15EA                     __end_of_setLED:	
 14593                           
 14594                           	psect	text85
 14595  1E85                     __ptext85:	
 14596 ;; *************** function _LedPointSelect *****************
 14597 ;; Defined at:
 14598 ;;		line 7 in file "../src/LED_B1.c"
 14599 ;; Parameters:    Size  Location     Type
 14600 ;;  led             1    wreg     unsigned char 
 14601 ;; Auto vars:     Size  Location     Type
 14602 ;;  led             1    1[BANK0 ] unsigned char 
 14603 ;; Return value:  Size  Location     Type
 14604 ;;		None               void
 14605 ;; Registers used:
 14606 ;;		wreg
 14607 ;; Tracked objects:
 14608 ;;		On entry : 0/0
 14609 ;;		On exit  : 0/0
 14610 ;;		Unchanged: 0/0
 14611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14613 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14614 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14615 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14616 ;;Total ram usage:        2 bytes
 14617 ;; Hardware stack levels used:    1
 14618 ;; Hardware stack levels required when called:    5
 14619 ;; This function calls:
 14620 ;;		Nothing
 14621 ;; This function is called by:
 14622 ;;		_setLED_Initialization
 14623 ;;		_setLED
 14624 ;;		_setLED_Main
 14625 ;; This function uses a non-reentrant model
 14626 ;;
 14627                           
 14628                           
 14629                           ;psect for function _LedPointSelect
 14630  1E85                     _LedPointSelect:	
 14631                           
 14632                           ;incstack = 0
 14633                           ; Regs used in _LedPointSelect: [wreg]
 14634                           ;LedPointSelect@led stored from wreg
 14635  1E85  0020               	movlb	0	; select bank0
 14636  1E86  00A1               	movwf	LedPointSelect@led
 14637                           
 14638                           ;LED_B1.c: 9: if (led == 1) {
 14639  1E87  0821               	movf	LedPointSelect@led,w
 14640  1E88  3A01               	xorlw	1
 14641  1E89  1D03               	skipz
 14642  1E8A  2E8F               	goto	l998
 14643                           
 14644                           ;LED_B1.c: 10: LED = &VarLED1;
 14645  1E8B  3061               	movlw	_VarLED1& (0+255)
 14646  1E8C  00A0               	movwf	??_LedPointSelect
 14647  1E8D  0820               	movf	??_LedPointSelect,w
 14648  1E8E  00FA               	movwf	_LED
 14649  1E8F                     l998:	
 14650                           
 14651                           ;LED_B1.c: 11: }
 14652                           ;LED_B1.c: 14: if (led == 2) {
 14653  1E8F  0821               	movf	LedPointSelect@led,w
 14654  1E90  3A02               	xorlw	2
 14655  1E91  1D03               	skipz
 14656  1E92  2E97               	goto	l999
 14657                           
 14658                           ;LED_B1.c: 15: LED = &VarLED2;
 14659  1E93  3065               	movlw	_VarLED2& (0+255)
 14660  1E94  00A0               	movwf	??_LedPointSelect
 14661  1E95  0820               	movf	??_LedPointSelect,w
 14662  1E96  00FA               	movwf	_LED
 14663  1E97                     l999:	
 14664                           
 14665                           ;LED_B1.c: 16: }
 14666                           ;LED_B1.c: 24: if (led == 99) {
 14667  1E97  0821               	movf	LedPointSelect@led,w
 14668  1E98  3A63               	xorlw	99
 14669  1E99  1D03               	skipz
 14670  1E9A  0008               	return
 14671                           
 14672                           ;LED_B1.c: 25: LED = &VarErrLED;
 14673  1E9B  305D               	movlw	_VarErrLED& (0+255)
 14674  1E9C  00A0               	movwf	??_LedPointSelect
 14675  1E9D  0820               	movf	??_LedPointSelect,w
 14676  1E9E  00FA               	movwf	_LED
 14677  1E9F  0008               	return
 14678  1EA0                     __end_of_LedPointSelect:	
 14679                           
 14680                           	psect	text86
 14681  1DCB                     __ptext86:	
 14682 ;; *************** function _setDimmerLights_Line *****************
 14683 ;; Defined at:
 14684 ;;		line 679 in file "../src/Dimmer_B1.c"
 14685 ;; Parameters:    Size  Location     Type
 14686 ;;  lights          1    wreg     unsigned char 
 14687 ;; Auto vars:     Size  Location     Type
 14688 ;;  lights          1    0[BANK0 ] unsigned char 
 14689 ;; Return value:  Size  Location     Type
 14690 ;;		None               void
 14691 ;; Registers used:
 14692 ;;		wreg
 14693 ;; Tracked objects:
 14694 ;;		On entry : 0/0
 14695 ;;		On exit  : 0/0
 14696 ;;		Unchanged: 0/0
 14697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14699 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14701 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14702 ;;Total ram usage:        1 bytes
 14703 ;; Hardware stack levels used:    1
 14704 ;; Hardware stack levels required when called:    5
 14705 ;; This function calls:
 14706 ;;		Nothing
 14707 ;; This function is called by:
 14708 ;;		_setDimmerLights
 14709 ;; This function uses a non-reentrant model
 14710 ;;
 14711                           
 14712                           
 14713                           ;psect for function _setDimmerLights_Line
 14714  1DCB                     _setDimmerLights_Line:	
 14715                           
 14716                           ;incstack = 0
 14717                           ; Regs used in _setDimmerLights_Line: [wreg]
 14718                           ;setDimmerLights_Line@lights stored from wreg
 14719  1DCB  0020               	movlb	0	; select bank0
 14720  1DCC  00A0               	movwf	setDimmerLights_Line@lights
 14721                           
 14722                           ;Dimmer_B1.c: 681: DimmerLights1.Line = 0;
 14723  1DCD  0023               	movlb	3	; select bank3
 14724  1DCE  1047               	bcf	(_DimmerLights1^(0+384)+9),0
 14725                           
 14726                           ;Dimmer_B1.c: 684: DimmerLights2.Line = 0;
 14727  1DCF  1056               	bcf	(_DimmerLights2^(0+384)+9),0
 14728                           
 14729                           ;Dimmer_B1.c: 690: if (lights == 1) {
 14730  1DD0  0020               	movlb	0	; select bank0
 14731  1DD1  0820               	movf	setDimmerLights_Line@lights,w
 14732  1DD2  3A01               	xorlw	1
 14733  1DD3  1D03               	skipz
 14734  1DD4  2DD8               	goto	l6530
 14735                           
 14736                           ;Dimmer_B1.c: 691: DimmerLights1.Line = 1;
 14737  1DD5  0023               	movlb	3	; select bank3
 14738  1DD6  1447               	bsf	(_DimmerLights1^(0+384)+9),0
 14739                           
 14740                           ;Dimmer_B1.c: 692: }
 14741  1DD7  0008               	return
 14742  1DD8                     l6530:	
 14743                           
 14744                           ;Dimmer_B1.c: 695: else if (lights == 2) {
 14745  1DD8  0020               	movlb	0	; select bank0
 14746  1DD9  0820               	movf	setDimmerLights_Line@lights,w
 14747  1DDA  3A02               	xorlw	2
 14748  1DDB  1D03               	skipz
 14749  1DDC  0008               	return
 14750                           
 14751                           ;Dimmer_B1.c: 696: DimmerLights2.Line = 1;
 14752  1DDD  0023               	movlb	3	; select bank3
 14753  1DDE  1456               	bsf	(_DimmerLights2^(0+384)+9),0
 14754  1DDF  0008               	return
 14755  1DE0                     __end_of_setDimmerLights_Line:	
 14756                           
 14757                           	psect	text87
 14758  11EB                     __ptext87:	
 14759 ;; *************** function _getMain_All_Error_Status *****************
 14760 ;; Defined at:
 14761 ;;		line 365 in file "../src/main_B1.c"
 14762 ;; Parameters:    Size  Location     Type
 14763 ;;  command         1    wreg     unsigned char 
 14764 ;; Auto vars:     Size  Location     Type
 14765 ;;  command         1    5[BANK0 ] unsigned char 
 14766 ;;  status          1    6[BANK0 ] unsigned char 
 14767 ;; Return value:  Size  Location     Type
 14768 ;;                  1    wreg      unsigned char 
 14769 ;; Registers used:
 14770 ;;		wreg, status,2, status,0
 14771 ;; Tracked objects:
 14772 ;;		On entry : 0/0
 14773 ;;		On exit  : 0/0
 14774 ;;		Unchanged: 0/0
 14775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14777 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14778 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14779 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14780 ;;Total ram usage:        7 bytes
 14781 ;; Hardware stack levels used:    1
 14782 ;; Hardware stack levels required when called:    5
 14783 ;; This function calls:
 14784 ;;		Nothing
 14785 ;; This function is called by:
 14786 ;;		_DimmerLights_Main
 14787 ;;		_setDimmerLights
 14788 ;;		_setDimmerLights_Adj
 14789 ;;		_Load_Main
 14790 ;;		_setTemp_Main
 14791 ;;		_setRF_Main
 14792 ;;		_getRxData
 14793 ;;		_Switch_Main
 14794 ;; This function uses a non-reentrant model
 14795 ;;
 14796                           
 14797                           
 14798                           ;psect for function _getMain_All_Error_Status
 14799  11EB                     _getMain_All_Error_Status:	
 14800                           
 14801                           ;incstack = 0
 14802                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 14803                           ;getMain_All_Error_Status@command stored from wreg
 14804  11EB  0020               	movlb	0	; select bank0
 14805  11EC  00A5               	movwf	getMain_All_Error_Status@command
 14806                           
 14807                           ;main_B1.c: 366: char status = 0;
 14808  11ED  01A6               	clrf	getMain_All_Error_Status@status
 14809                           
 14810                           ;main_B1.c: 377: if (status == 0 && command != 2) {
 14811  11EE  08A6               	movf	getMain_All_Error_Status@status,f
 14812  11EF  1D03               	skipz
 14813  11F0  2A05               	goto	l6462
 14814  11F1  0825               	movf	getMain_All_Error_Status@command,w
 14815  11F2  3A02               	xorlw	2
 14816  11F3  1903               	skipnz
 14817  11F4  2A05               	goto	l6462
 14818                           
 14819                           ;main_B1.c: 378: status = Temp.ERROR == 1 ? 2 : 0;
 14820  11F5  0021               	movlb	1	; select bank1
 14821  11F6  18D7               	btfsc	_Temp^(0+128),1
 14822  11F7  29FC               	goto	l6460
 14823  11F8  0020               	movlb	0	; select bank0
 14824  11F9  01A1               	clrf	_getMain_All_Error_Status$7076
 14825  11FA  01A2               	clrf	_getMain_All_Error_Status$7076+1
 14826  11FB  2A01               	goto	l2725
 14827  11FC                     l6460:	
 14828  11FC  3002               	movlw	2
 14829  11FD  0020               	movlb	0	; select bank0
 14830  11FE  00A1               	movwf	_getMain_All_Error_Status$7076
 14831  11FF  3000               	movlw	0
 14832  1200  00A2               	movwf	_getMain_All_Error_Status$7076+1
 14833  1201                     l2725:	
 14834  1201  0821               	movf	_getMain_All_Error_Status$7076,w
 14835  1202  00A0               	movwf	??_getMain_All_Error_Status
 14836  1203  0820               	movf	??_getMain_All_Error_Status,w
 14837  1204  00A6               	movwf	getMain_All_Error_Status@status
 14838  1205                     l6462:	
 14839                           
 14840                           ;main_B1.c: 379: }
 14841                           ;main_B1.c: 384: if (status == 0 && command != 3) {
 14842  1205  08A6               	movf	getMain_All_Error_Status@status,f
 14843  1206  1D03               	skipz
 14844  1207  2A1C               	goto	l2726
 14845  1208  0825               	movf	getMain_All_Error_Status@command,w
 14846  1209  3A03               	xorlw	3
 14847  120A  1903               	skipnz
 14848  120B  2A1C               	goto	l2726
 14849                           
 14850                           ;main_B1.c: 385: status = Load.ERROR == 1 ? 3 : 0;
 14851  120C  0022               	movlb	2	; select bank2
 14852  120D  1AA6               	btfsc	_Load^(0+256),5
 14853  120E  2A13               	goto	l6470
 14854  120F  0020               	movlb	0	; select bank0
 14855  1210  01A3               	clrf	_getMain_All_Error_Status$7077
 14856  1211  01A4               	clrf	_getMain_All_Error_Status$7077+1
 14857  1212  2A18               	goto	l2730
 14858  1213                     l6470:	
 14859  1213  3003               	movlw	3
 14860  1214  0020               	movlb	0	; select bank0
 14861  1215  00A3               	movwf	_getMain_All_Error_Status$7077
 14862  1216  3000               	movlw	0
 14863  1217  00A4               	movwf	_getMain_All_Error_Status$7077+1
 14864  1218                     l2730:	
 14865  1218  0823               	movf	_getMain_All_Error_Status$7077,w
 14866  1219  00A0               	movwf	??_getMain_All_Error_Status
 14867  121A  0820               	movf	??_getMain_All_Error_Status,w
 14868  121B  00A6               	movwf	getMain_All_Error_Status@status
 14869  121C                     l2726:	
 14870                           
 14871                           ;main_B1.c: 386: }
 14872                           ;main_B1.c: 402: return status;
 14873  121C  0826               	movf	getMain_All_Error_Status@status,w
 14874  121D  0008               	return
 14875  121E                     __end_of_getMain_All_Error_Status:	
 14876                           
 14877                           	psect	text88
 14878  115E                     __ptext88:	
 14879 ;; *************** function _getMain_LightsStatus *****************
 14880 ;; Defined at:
 14881 ;;		line 338 in file "../src/main_B1.c"
 14882 ;; Parameters:    Size  Location     Type
 14883 ;;		None
 14884 ;; Auto vars:     Size  Location     Type
 14885 ;;  i               2    6[BANK0 ] int 
 14886 ;;  status          1    8[BANK0 ] unsigned char 
 14887 ;;  count           1    5[BANK0 ] unsigned char 
 14888 ;; Return value:  Size  Location     Type
 14889 ;;                  1    wreg      unsigned char 
 14890 ;; Registers used:
 14891 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14892 ;; Tracked objects:
 14893 ;;		On entry : 0/0
 14894 ;;		On exit  : 0/0
 14895 ;;		Unchanged: 0/0
 14896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14898 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14899 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14900 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14901 ;;Total ram usage:        5 bytes
 14902 ;; Hardware stack levels used:    1
 14903 ;; Hardware stack levels required when called:    7
 14904 ;; This function calls:
 14905 ;;		_getDimmerLights_Status
 14906 ;; This function is called by:
 14907 ;;		_DimmerLights_Main
 14908 ;;		_Flash_Memory_Main
 14909 ;;		_Load_Main
 14910 ;;		_setMain_Exception
 14911 ;; This function uses a non-reentrant model
 14912 ;;
 14913                           
 14914                           
 14915                           ;psect for function _getMain_LightsStatus
 14916  115E                     _getMain_LightsStatus:	
 14917                           
 14918                           ;main_B1.c: 339: char status = 0;
 14919                           
 14920                           ;incstack = 0
 14921                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14922  115E  0020               	movlb	0	; select bank0
 14923  115F  01A8               	clrf	getMain_LightsStatus@status
 14924                           
 14925                           ;main_B1.c: 345: char count = 2;
 14926  1160  3002               	movlw	2
 14927  1161  00A4               	movwf	??_getMain_LightsStatus
 14928  1162  0824               	movf	??_getMain_LightsStatus,w
 14929  1163  00A5               	movwf	getMain_LightsStatus@count
 14930                           
 14931                           ;main_B1.c: 351: for (int i = 0; i < count; i++) {
 14932  1164  01A6               	clrf	getMain_LightsStatus@i
 14933  1165  01A7               	clrf	getMain_LightsStatus@i+1
 14934  1166                     l6766:	
 14935  1166  0827               	movf	getMain_LightsStatus@i+1,w
 14936  1167  3A80               	xorlw	128
 14937  1168  00A4               	movwf	??_getMain_LightsStatus
 14938  1169  3080               	movlw	128
 14939  116A  0224               	subwf	??_getMain_LightsStatus,w
 14940  116B  1D03               	skipz
 14941  116C  296F               	goto	u6015
 14942  116D  0825               	movf	getMain_LightsStatus@count,w
 14943  116E  0226               	subwf	getMain_LightsStatus@i,w
 14944  116F                     u6015:	
 14945  116F  1803               	btfsc	3,0
 14946  1170  2987               	goto	l6768
 14947                           
 14948                           ;main_B1.c: 352: if (status == 0) {
 14949  1171  0020               	movlb	0	; select bank0
 14950  1172  08A8               	movf	getMain_LightsStatus@status,f
 14951  1173  1D03               	skipz
 14952  1174  2982               	goto	l6764
 14953                           
 14954                           ;main_B1.c: 357: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 14955  1175  0826               	movf	getMain_LightsStatus@i,w
 14956  1176  3E01               	addlw	1
 14957  1177  319C  2445  3191   	fcall	_getDimmerLights_Status
 14958  117A  3A01               	xorlw	1
 14959  117B  3000               	movlw	0
 14960  117C  1903               	skipnz
 14961  117D  3001               	movlw	1
 14962  117E  0020               	movlb	0	; select bank0
 14963  117F  00A4               	movwf	??_getMain_LightsStatus
 14964  1180  0824               	movf	??_getMain_LightsStatus,w
 14965  1181  00A8               	movwf	getMain_LightsStatus@status
 14966  1182                     l6764:	
 14967  1182  3001               	movlw	1
 14968  1183  07A6               	addwf	getMain_LightsStatus@i,f
 14969  1184  3000               	movlw	0
 14970  1185  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 14971  1186  2966               	goto	l6766
 14972  1187                     l6768:	
 14973                           
 14974                           ;main_B1.c: 359: }
 14975                           ;main_B1.c: 360: }
 14976                           ;main_B1.c: 361: return status;
 14977  1187  0020               	movlb	0	; select bank0
 14978  1188  0828               	movf	getMain_LightsStatus@status,w
 14979  1189  0008               	return
 14980  118A                     __end_of_getMain_LightsStatus:	
 14981                           
 14982                           	psect	text89
 14983  1B81                     __ptext89:	
 14984 ;; *************** function _getLoad_OK *****************
 14985 ;; Defined at:
 14986 ;;		line 218 in file "../src/OverLoad_B1.c"
 14987 ;; Parameters:    Size  Location     Type
 14988 ;;		None
 14989 ;; Auto vars:     Size  Location     Type
 14990 ;;  ok              1    0[BANK0 ] unsigned char 
 14991 ;; Return value:  Size  Location     Type
 14992 ;;                  1    wreg      unsigned char 
 14993 ;; Registers used:
 14994 ;;		wreg, status,2
 14995 ;; Tracked objects:
 14996 ;;		On entry : 0/0
 14997 ;;		On exit  : 0/0
 14998 ;;		Unchanged: 0/0
 14999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15001 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15003 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15004 ;;Total ram usage:        1 bytes
 15005 ;; Hardware stack levels used:    1
 15006 ;; Hardware stack levels required when called:    5
 15007 ;; This function calls:
 15008 ;;		Nothing
 15009 ;; This function is called by:
 15010 ;;		_DimmerLights_Main
 15011 ;; This function uses a non-reentrant model
 15012 ;;
 15013                           
 15014                           
 15015                           ;psect for function _getLoad_OK
 15016  1B81                     _getLoad_OK:	
 15017                           
 15018                           ;OverLoad_B1.c: 219: char ok = Load.OK == 1 ? 1 : 0;
 15019                           
 15020                           ;incstack = 0
 15021                           ; Regs used in _getLoad_OK: [wreg+status,2]
 15022  1B81  3000               	movlw	0
 15023  1B82  0022               	movlb	2	; select bank2
 15024  1B83  1BA6               	btfsc	_Load^(0+256),7
 15025  1B84  3001               	movlw	1
 15026  1B85  0020               	movlb	0	; select bank0
 15027  1B86  00A0               	movwf	getLoad_OK@ok
 15028                           
 15029                           ;OverLoad_B1.c: 220: return ok;
 15030  1B87  0820               	movf	getLoad_OK@ok,w
 15031  1B88  0008               	return
 15032  1B89                     __end_of_getLoad_OK:	
 15033                           
 15034                           	psect	text90
 15035  1E0B                     __ptext90:	
 15036 ;; *************** function _DimmerLights_Initialization *****************
 15037 ;; Defined at:
 15038 ;;		line 341 in file "../src/Dimmer_B1.c"
 15039 ;; Parameters:    Size  Location     Type
 15040 ;;		None
 15041 ;; Auto vars:     Size  Location     Type
 15042 ;;		None
 15043 ;; Return value:  Size  Location     Type
 15044 ;;		None               void
 15045 ;; Registers used:
 15046 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15047 ;; Tracked objects:
 15048 ;;		On entry : 0/0
 15049 ;;		On exit  : 0/0
 15050 ;;		Unchanged: 0/0
 15051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15054 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15055 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15056 ;;Total ram usage:        1 bytes
 15057 ;; Hardware stack levels used:    1
 15058 ;; Hardware stack levels required when called:    7
 15059 ;; This function calls:
 15060 ;;		_Dimmer_Initialization
 15061 ;;		_setDimmerLights_Initialization
 15062 ;; This function is called by:
 15063 ;;		_main
 15064 ;; This function uses a non-reentrant model
 15065 ;;
 15066                           
 15067                           
 15068                           ;psect for function _DimmerLights_Initialization
 15069  1E0B                     _DimmerLights_Initialization:	
 15070                           
 15071                           ;Dimmer_B1.c: 343: DimmerLights11 = &DimmerLights1;
 15072                           
 15073                           ;incstack = 0
 15074                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15075  1E0B  30BE               	movlw	_DimmerLights1& (0+255)
 15076  1E0C  0020               	movlb	0	; select bank0
 15077  1E0D  00A4               	movwf	??_DimmerLights_Initialization
 15078  1E0E  0824               	movf	??_DimmerLights_Initialization,w
 15079  1E0F  0021               	movlb	1	; select bank1
 15080  1E10  00CD               	movwf	_DimmerLights11^(0+128)
 15081                           
 15082                           ;Dimmer_B1.c: 344: setDimmerLights_Initialization(1);
 15083  1E11  3001               	movlw	1
 15084  1E12  3190  20BA  319E   	fcall	_setDimmerLights_Initialization
 15085                           
 15086                           ;Dimmer_B1.c: 348: DimmerLights22 = &DimmerLights2;
 15087  1E15  30CD               	movlw	_DimmerLights2& (0+255)
 15088  1E16  0020               	movlb	0	; select bank0
 15089  1E17  00A4               	movwf	??_DimmerLights_Initialization
 15090  1E18  0824               	movf	??_DimmerLights_Initialization,w
 15091  1E19  0021               	movlb	1	; select bank1
 15092  1E1A  00CE               	movwf	_DimmerLights22^(0+128)
 15093                           
 15094                           ;Dimmer_B1.c: 349: setDimmerLights_Initialization(2);
 15095  1E1B  3002               	movlw	2
 15096  1E1C  3190  20BA  319E   	fcall	_setDimmerLights_Initialization
 15097                           
 15098                           ;Dimmer_B1.c: 358: Dimmer_Initialization();
 15099  1E1F  319B  232A         	fcall	_Dimmer_Initialization
 15100  1E21  0008               	return
 15101  1E22                     __end_of_DimmerLights_Initialization:	
 15102                           
 15103                           	psect	text91
 15104  10BA                     __ptext91:	
 15105 ;; *************** function _setDimmerLights_Initialization *****************
 15106 ;; Defined at:
 15107 ;;		line 364 in file "../src/Dimmer_B1.c"
 15108 ;; Parameters:    Size  Location     Type
 15109 ;;  lights          1    wreg     unsigned char 
 15110 ;; Auto vars:     Size  Location     Type
 15111 ;;  lights          1    3[BANK0 ] unsigned char 
 15112 ;; Return value:  Size  Location     Type
 15113 ;;		None               void
 15114 ;; Registers used:
 15115 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15116 ;; Tracked objects:
 15117 ;;		On entry : 0/0
 15118 ;;		On exit  : 0/0
 15119 ;;		Unchanged: 0/0
 15120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15122 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15123 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15124 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15125 ;;Total ram usage:        2 bytes
 15126 ;; Hardware stack levels used:    1
 15127 ;; Hardware stack levels required when called:    6
 15128 ;; This function calls:
 15129 ;;		_DimmerLightsPointSelect
 15130 ;; This function is called by:
 15131 ;;		_DimmerLights_Initialization
 15132 ;; This function uses a non-reentrant model
 15133 ;;
 15134                           
 15135                           
 15136                           ;psect for function _setDimmerLights_Initialization
 15137  10BA                     _setDimmerLights_Initialization:	
 15138                           
 15139                           ;incstack = 0
 15140                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15141                           ;setDimmerLights_Initialization@lights stored from wreg
 15142  10BA  0020               	movlb	0	; select bank0
 15143  10BB  00A3               	movwf	setDimmerLights_Initialization@lights
 15144                           
 15145                           ;Dimmer_B1.c: 366: DimmerLightsPointSelect(lights);
 15146  10BC  0823               	movf	setDimmerLights_Initialization@lights,w
 15147  10BD  319C  24F1         	fcall	_DimmerLightsPointSelect
 15148                           
 15149                           ;Dimmer_B1.c: 372: DimmerLights->MaxmumValue = ((char)(80*0.8));
 15150  10BF  3040               	movlw	64
 15151  10C0  0020               	movlb	0	; select bank0
 15152  10C1  00A2               	movwf	??_setDimmerLights_Initialization
 15153  10C2  086F               	movf	_DimmerLights,w
 15154  10C3  3E05               	addlw	5
 15155  10C4  0086               	movwf	6
 15156  10C5  3001               	movlw	1	; select bank2/3
 15157  10C6  0087               	movwf	7
 15158  10C7  0822               	movf	??_setDimmerLights_Initialization,w
 15159  10C8  0081               	movwf	1
 15160                           
 15161                           ;Dimmer_B1.c: 373: DimmerLights->MinimumValue = ((char)(15*0.8));
 15162  10C9  300C               	movlw	12
 15163  10CA  00A2               	movwf	??_setDimmerLights_Initialization
 15164  10CB  086F               	movf	_DimmerLights,w
 15165  10CC  3E06               	addlw	6
 15166  10CD  0086               	movwf	6
 15167  10CE  3001               	movlw	1	; select bank2/3
 15168  10CF  0087               	movwf	7
 15169  10D0  0822               	movf	??_setDimmerLights_Initialization,w
 15170  10D1  0081               	movwf	1
 15171                           
 15172                           ;Dimmer_B1.c: 387: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15173  10D2  086F               	movf	_DimmerLights,w
 15174  10D3  3E05               	addlw	5
 15175  10D4  0086               	movwf	6
 15176  10D5  3001               	movlw	1	; select bank2/3
 15177  10D6  0087               	movwf	7
 15178  10D7  0801               	movf	1,w
 15179  10D8  00A2               	movwf	??_setDimmerLights_Initialization
 15180  10D9  086F               	movf	_DimmerLights,w
 15181  10DA  3E04               	addlw	4
 15182  10DB  0086               	movwf	6
 15183  10DC  3001               	movlw	1	; select bank2/3
 15184  10DD  0087               	movwf	7
 15185  10DE  0822               	movf	??_setDimmerLights_Initialization,w
 15186  10DF  0081               	movwf	1
 15187  10E0  0008               	return
 15188  10E1                     __end_of_setDimmerLights_Initialization:	
 15189                           
 15190                           	psect	text92
 15191  1B2A                     __ptext92:	
 15192 ;; *************** function _Dimmer_Initialization *****************
 15193 ;; Defined at:
 15194 ;;		line 904 in file "../src/Dimmer_B1.c"
 15195 ;; Parameters:    Size  Location     Type
 15196 ;;		None
 15197 ;; Auto vars:     Size  Location     Type
 15198 ;;		None
 15199 ;; Return value:  Size  Location     Type
 15200 ;;		None               void
 15201 ;; Registers used:
 15202 ;;		None
 15203 ;; Tracked objects:
 15204 ;;		On entry : 0/0
 15205 ;;		On exit  : 0/0
 15206 ;;		Unchanged: 0/0
 15207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15212 ;;Total ram usage:        0 bytes
 15213 ;; Hardware stack levels used:    1
 15214 ;; Hardware stack levels required when called:    5
 15215 ;; This function calls:
 15216 ;;		Nothing
 15217 ;; This function is called by:
 15218 ;;		_DimmerLights_Initialization
 15219 ;; This function uses a non-reentrant model
 15220 ;;
 15221                           
 15222                           
 15223                           ;psect for function _Dimmer_Initialization
 15224  1B2A                     _Dimmer_Initialization:	
 15225                           
 15226                           ;incstack = 0
 15227                           ; Regs used in _Dimmer_Initialization: []
 15228  1B2A  0008               	return
 15229  1B2B                     __end_of_Dimmer_Initialization:	
 15230                           
 15231                           	psect	text93
 15232  1B79                     __ptext93:	
 15233 ;; *************** function _DelayOff_Main *****************
 15234 ;; Defined at:
 15235 ;;		line 41 in file "../src/DelayOff_B1.c"
 15236 ;; Parameters:    Size  Location     Type
 15237 ;;		None
 15238 ;; Auto vars:     Size  Location     Type
 15239 ;;		None
 15240 ;; Return value:  Size  Location     Type
 15241 ;;		None               void
 15242 ;; Registers used:
 15243 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15244 ;; Tracked objects:
 15245 ;;		On entry : 0/0
 15246 ;;		On exit  : 0/0
 15247 ;;		Unchanged: 0/0
 15248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15253 ;;Total ram usage:        0 bytes
 15254 ;; Hardware stack levels used:    1
 15255 ;; Hardware stack levels required when called:   11
 15256 ;; This function calls:
 15257 ;;		_DlyOff_Main
 15258 ;; This function is called by:
 15259 ;;		_main
 15260 ;; This function uses a non-reentrant model
 15261 ;;
 15262                           
 15263                           
 15264                           ;psect for function _DelayOff_Main
 15265  1B79                     _DelayOff_Main:	
 15266                           
 15267                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15268                           
 15269                           ;incstack = 0
 15270                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15271  1B79  3001               	movlw	1
 15272  1B7A  3188  20B7  319B   	fcall	_DlyOff_Main
 15273                           
 15274                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 15275  1B7D  3002               	movlw	2
 15276  1B7E  3188  20B7         	fcall	_DlyOff_Main
 15277  1B80  0008               	return
 15278  1B81                     __end_of_DelayOff_Main:	
 15279                           
 15280                           	psect	text94
 15281  08B7                     __ptext94:	
 15282 ;; *************** function _DlyOff_Main *****************
 15283 ;; Defined at:
 15284 ;;		line 61 in file "../src/DelayOff_B1.c"
 15285 ;; Parameters:    Size  Location     Type
 15286 ;;  sw              1    wreg     unsigned char 
 15287 ;; Auto vars:     Size  Location     Type
 15288 ;;  sw              1   24[BANK0 ] unsigned char 
 15289 ;; Return value:  Size  Location     Type
 15290 ;;		None               void
 15291 ;; Registers used:
 15292 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15293 ;; Tracked objects:
 15294 ;;		On entry : 0/0
 15295 ;;		On exit  : 0/0
 15296 ;;		Unchanged: 0/0
 15297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15299 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15300 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15301 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15302 ;;Total ram usage:        3 bytes
 15303 ;; Hardware stack levels used:    1
 15304 ;; Hardware stack levels required when called:   10
 15305 ;; This function calls:
 15306 ;;		_DelayOffPointSelect
 15307 ;;		_setBuz
 15308 ;;		_setDimmerLights_ErrorClose
 15309 ;; This function is called by:
 15310 ;;		_DelayOff_Main
 15311 ;; This function uses a non-reentrant model
 15312 ;;
 15313                           
 15314                           
 15315                           ;psect for function _DlyOff_Main
 15316  08B7                     _DlyOff_Main:	
 15317                           
 15318                           ;incstack = 0
 15319                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15320                           ;DlyOff_Main@sw stored from wreg
 15321  08B7  0020               	movlb	0	; select bank0
 15322  08B8  00B8               	movwf	DlyOff_Main@sw
 15323                           
 15324                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15325  08B9  0838               	movf	DlyOff_Main@sw,w
 15326  08BA  319D  2565  3188   	fcall	_DelayOffPointSelect
 15327                           
 15328                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15329  08BD  0878               	movf	_DelayOff,w
 15330  08BE  0086               	movwf	6
 15331  08BF  3001               	movlw	1	; select bank2/3
 15332  08C0  0087               	movwf	7
 15333  08C1  1C81               	btfss	1,1
 15334  08C2  0008               	return
 15335                           
 15336                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15337  08C3  0878               	movf	_DelayOff,w
 15338  08C4  3E02               	addlw	2
 15339  08C5  0086               	movwf	6
 15340  08C6  3001               	movlw	1	; select bank2/3
 15341  08C7  0087               	movwf	7
 15342  08C8  3001               	movlw	1
 15343  08C9  0781               	addwf	1,f
 15344  08CA  3141               	addfsr 1,1
 15345  08CB  1803               	skipnc
 15346  08CC  0A81               	incf	1,f
 15347                           
 15348                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15349  08CD  0878               	movf	_DelayOff,w
 15350  08CE  3E02               	addlw	2
 15351  08CF  0086               	movwf	6
 15352  08D0  3001               	movlw	1	; select bank2/3
 15353  08D1  0087               	movwf	7
 15354  08D2  3F40               	moviw [0]fsr1
 15355  08D3  0020               	movlb	0	; select bank0
 15356  08D4  00B6               	movwf	??_DlyOff_Main
 15357  08D5  3F41               	moviw [1]fsr1
 15358  08D6  00B7               	movwf	??_DlyOff_Main+1
 15359  08D7  3017               	movlw	23
 15360  08D8  0237               	subwf	??_DlyOff_Main+1,w
 15361  08D9  3070               	movlw	112
 15362  08DA  1903               	skipnz
 15363  08DB  0236               	subwf	??_DlyOff_Main,w
 15364  08DC  1C03               	skipc
 15365  08DD  0008               	return
 15366                           
 15367                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15368  08DE  0878               	movf	_DelayOff,w
 15369  08DF  3E02               	addlw	2
 15370  08E0  0086               	movwf	6
 15371  08E1  3001               	movlw	1	; select bank2/3
 15372  08E2  0087               	movwf	7
 15373  08E3  3000               	movlw	0
 15374  08E4  3FC0               	movwi [0]fsr1
 15375  08E5  3FC1               	movwi [1]fsr1
 15376                           
 15377                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15378  08E6  3001               	movlw	1
 15379  08E7  00B6               	movwf	??_DlyOff_Main
 15380  08E8  0878               	movf	_DelayOff,w
 15381  08E9  3E04               	addlw	4
 15382  08EA  0086               	movwf	6
 15383  08EB  3001               	movlw	1	; select bank2/3
 15384  08EC  0087               	movwf	7
 15385  08ED  0836               	movf	??_DlyOff_Main,w
 15386  08EE  0781               	addwf	1,f
 15387                           
 15388                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15389  08EF  0878               	movf	_DelayOff,w
 15390  08F0  3E04               	addlw	4
 15391  08F1  0086               	movwf	6
 15392  08F2  3001               	movlw	1	; select bank2/3
 15393  08F3  0087               	movwf	7
 15394  08F4  0A78               	incf	_DelayOff,w
 15395  08F5  0084               	movwf	4
 15396  08F6  3001               	movlw	1	; select bank2/3
 15397  08F7  0085               	movwf	5
 15398  08F8  0800               	movf	0,w
 15399  08F9  0201               	subwf	1,w
 15400  08FA  1C03               	skipc
 15401  08FB  0008               	return
 15402                           
 15403                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15404  08FC  0878               	movf	_DelayOff,w
 15405  08FD  3E04               	addlw	4
 15406  08FE  0086               	movwf	6
 15407  08FF  3001               	movlw	1	; select bank2/3
 15408  0900  0087               	movwf	7
 15409  0901  0181               	clrf	1
 15410                           
 15411                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15412  0902  0878               	movf	_DelayOff,w
 15413  0903  0086               	movwf	6
 15414  0904  3001               	movlw	1	; select bank2/3
 15415  0905  0087               	movwf	7
 15416  0906  1081               	bcf	1,1
 15417                           
 15418                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15419  0907  3064               	movlw	100
 15420  0908  00A9               	movwf	setBuz@time
 15421  0909  3000               	movlw	0
 15422  090A  00AA               	movwf	setBuz@time+1
 15423  090B  3001               	movlw	1
 15424  090C  3196  2696  3188   	fcall	_setBuz
 15425                           
 15426                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15427  090F  0020               	movlb	0	; select bank0
 15428  0910  0838               	movf	DlyOff_Main@sw,w
 15429  0911  3188  2000         	fcall	_setDimmerLights_ErrorClose
 15430  0913  0008               	return
 15431  0914                     __end_of_DlyOff_Main:	
 15432                           
 15433                           	psect	text95
 15434  0800                     __ptext95:	
 15435 ;; *************** function _setDimmerLights_ErrorClose *****************
 15436 ;; Defined at:
 15437 ;;		line 574 in file "../src/Dimmer_B1.c"
 15438 ;; Parameters:    Size  Location     Type
 15439 ;;  lights          1    wreg     unsigned char 
 15440 ;; Auto vars:     Size  Location     Type
 15441 ;;  lights          1   19[BANK0 ] unsigned char 
 15442 ;;  i               2   20[BANK0 ] int 
 15443 ;;  count           1   18[BANK0 ] unsigned char 
 15444 ;; Return value:  Size  Location     Type
 15445 ;;		None               void
 15446 ;; Registers used:
 15447 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15448 ;; Tracked objects:
 15449 ;;		On entry : 0/0
 15450 ;;		On exit  : 0/0
 15451 ;;		Unchanged: 0/0
 15452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15454 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15455 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15456 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15457 ;;Total ram usage:        5 bytes
 15458 ;; Hardware stack levels used:    1
 15459 ;; Hardware stack levels required when called:    9
 15460 ;; This function calls:
 15461 ;;		_DimmerLightsPointSelect
 15462 ;;		_getDimmerLights_Status
 15463 ;;		_setDimmerLights_SwOff
 15464 ;; This function is called by:
 15465 ;;		_DlyOff_Main
 15466 ;;		_setControl_Lights_Table
 15467 ;;		_setMain_Exception
 15468 ;; This function uses a non-reentrant model
 15469 ;;
 15470                           
 15471                           
 15472                           ;psect for function _setDimmerLights_ErrorClose
 15473  0800                     _setDimmerLights_ErrorClose:	
 15474                           
 15475                           ;incstack = 0
 15476                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15477                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15478  0800  0020               	movlb	0	; select bank0
 15479  0801  00B3               	movwf	setDimmerLights_ErrorClose@lights
 15480                           
 15481                           ;Dimmer_B1.c: 575: if (lights == 255) {
 15482  0802  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15483  0803  3AFF               	xorlw	255
 15484  0804  1D03               	skipz
 15485  0805  283D               	goto	l6354
 15486                           
 15487                           ;Dimmer_B1.c: 580: char count = 2;
 15488  0806  3002               	movlw	2
 15489  0807  00B1               	movwf	??_setDimmerLights_ErrorClose
 15490  0808  0831               	movf	??_setDimmerLights_ErrorClose,w
 15491  0809  00B2               	movwf	setDimmerLights_ErrorClose@count
 15492                           
 15493                           ;Dimmer_B1.c: 585: for (int i = 0; i < count; i++) {
 15494  080A  01B4               	clrf	setDimmerLights_ErrorClose@i
 15495  080B  01B5               	clrf	setDimmerLights_ErrorClose@i+1
 15496  080C                     l6352:	
 15497  080C  0835               	movf	setDimmerLights_ErrorClose@i+1,w
 15498  080D  3A80               	xorlw	128
 15499  080E  00B1               	movwf	??_setDimmerLights_ErrorClose
 15500  080F  3080               	movlw	128
 15501  0810  0231               	subwf	??_setDimmerLights_ErrorClose,w
 15502  0811  1D03               	skipz
 15503  0812  2815               	goto	u5345
 15504  0813  0832               	movf	setDimmerLights_ErrorClose@count,w
 15505  0814  0234               	subwf	setDimmerLights_ErrorClose@i,w
 15506  0815                     u5345:	
 15507  0815  1803               	btfsc	3,0
 15508  0816  0008               	return
 15509                           
 15510                           ;Dimmer_B1.c: 586: DimmerLightsPointSelect(i + 1);
 15511  0817  0020               	movlb	0	; select bank0
 15512  0818  0834               	movf	setDimmerLights_ErrorClose@i,w
 15513  0819  3E01               	addlw	1
 15514  081A  319C  24F1  3188   	fcall	_DimmerLightsPointSelect
 15515                           
 15516                           ;Dimmer_B1.c: 587: if (getDimmerLights_Status(i + 1) == 1) {
 15517  081D  0020               	movlb	0	; select bank0
 15518  081E  0834               	movf	setDimmerLights_ErrorClose@i,w
 15519  081F  3E01               	addlw	1
 15520  0820  319C  2445  3188   	fcall	_getDimmerLights_Status
 15521  0823  3A01               	xorlw	1
 15522  0824  1D03               	skipz
 15523  0825  2837               	goto	l6350
 15524                           
 15525                           ;Dimmer_B1.c: 588: DimmerLights->SwFlag = 1;
 15526  0826  0020               	movlb	0	; select bank0
 15527  0827  086F               	movf	_DimmerLights,w
 15528  0828  3E09               	addlw	9
 15529  0829  0086               	movwf	6
 15530  082A  3001               	movlw	1	; select bank2/3
 15531  082B  0087               	movwf	7
 15532  082C  1701               	bsf	1,6
 15533                           
 15534                           ;Dimmer_B1.c: 589: DimmerLights->Status = 0;
 15535  082D  086F               	movf	_DimmerLights,w
 15536  082E  0086               	movwf	6
 15537  082F  3001               	movlw	1	; select bank2/3
 15538  0830  0087               	movwf	7
 15539  0831  1281               	bcf	1,5
 15540                           
 15541                           ;Dimmer_B1.c: 590: setDimmerLights_SwOff(i + 1);
 15542  0832  0834               	movf	setDimmerLights_ErrorClose@i,w
 15543  0833  3E01               	addlw	1
 15544  0834  3194  241C  3188   	fcall	_setDimmerLights_SwOff
 15545  0837                     l6350:	
 15546  0837  3001               	movlw	1
 15547  0838  0020               	movlb	0	; select bank0
 15548  0839  07B4               	addwf	setDimmerLights_ErrorClose@i,f
 15549  083A  3000               	movlw	0
 15550  083B  3DB5               	addwfc	setDimmerLights_ErrorClose@i+1,f
 15551  083C  280C               	goto	l6352
 15552  083D                     l6354:	
 15553                           ;Dimmer_B1.c: 591: }
 15554                           ;Dimmer_B1.c: 592: }
 15555                           ;Dimmer_B1.c: 593: } else {
 15556                           
 15557                           
 15558                           ;Dimmer_B1.c: 594: DimmerLightsPointSelect(lights);
 15559  083D  0020               	movlb	0	; select bank0
 15560  083E  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15561  083F  319C  24F1  3188   	fcall	_DimmerLightsPointSelect
 15562                           
 15563                           ;Dimmer_B1.c: 595: if (getDimmerLights_Status(lights) == 1) {
 15564  0842  0020               	movlb	0	; select bank0
 15565  0843  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15566  0844  319C  2445  3188   	fcall	_getDimmerLights_Status
 15567  0847  3A01               	xorlw	1
 15568  0848  1D03               	skipz
 15569  0849  0008               	return
 15570                           
 15571                           ;Dimmer_B1.c: 596: DimmerLights->SwFlag = 1;
 15572  084A  0020               	movlb	0	; select bank0
 15573  084B  086F               	movf	_DimmerLights,w
 15574  084C  3E09               	addlw	9
 15575  084D  0086               	movwf	6
 15576  084E  3001               	movlw	1	; select bank2/3
 15577  084F  0087               	movwf	7
 15578  0850  1701               	bsf	1,6
 15579                           
 15580                           ;Dimmer_B1.c: 597: DimmerLights->Status = 0;
 15581  0851  086F               	movf	_DimmerLights,w
 15582  0852  0086               	movwf	6
 15583  0853  3001               	movlw	1	; select bank2/3
 15584  0854  0087               	movwf	7
 15585  0855  1281               	bcf	1,5
 15586                           
 15587                           ;Dimmer_B1.c: 598: setDimmerLights_SwOff(lights);
 15588  0856  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15589  0857  3194  241C         	fcall	_setDimmerLights_SwOff
 15590  0859  0008               	return
 15591  085A                     __end_of_setDimmerLights_ErrorClose:	
 15592                           
 15593                           	psect	text96
 15594  141C                     __ptext96:	
 15595 ;; *************** function _setDimmerLights_SwOff *****************
 15596 ;; Defined at:
 15597 ;;		line 536 in file "../src/Dimmer_B1.c"
 15598 ;; Parameters:    Size  Location     Type
 15599 ;;  sw              1    wreg     unsigned char 
 15600 ;; Auto vars:     Size  Location     Type
 15601 ;;  sw              1   16[BANK0 ] unsigned char 
 15602 ;;  command         1   15[BANK0 ] unsigned char 
 15603 ;; Return value:  Size  Location     Type
 15604 ;;		None               void
 15605 ;; Registers used:
 15606 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15607 ;; Tracked objects:
 15608 ;;		On entry : 0/0
 15609 ;;		On exit  : 0/0
 15610 ;;		Unchanged: 0/0
 15611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15613 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15615 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15616 ;;Total ram usage:        2 bytes
 15617 ;; Hardware stack levels used:    1
 15618 ;; Hardware stack levels required when called:    8
 15619 ;; This function calls:
 15620 ;;		_DimmerLightsPointSelect
 15621 ;;		_getDelayOff_GO
 15622 ;;		_setDelayOff_GO
 15623 ;;		_setDimmerLights_Trigger
 15624 ;;		_setDimmerLights_TriggerAdj
 15625 ;; This function is called by:
 15626 ;;		_setDimmerLights_ErrorClose
 15627 ;;		_setRFSW_Control
 15628 ;;		_setSw_Main
 15629 ;; This function uses a non-reentrant model
 15630 ;;
 15631                           
 15632                           
 15633                           ;psect for function _setDimmerLights_SwOff
 15634  141C                     _setDimmerLights_SwOff:	
 15635                           
 15636                           ;incstack = 0
 15637                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15638                           ;setDimmerLights_SwOff@sw stored from wreg
 15639  141C  0020               	movlb	0	; select bank0
 15640  141D  00B0               	movwf	setDimmerLights_SwOff@sw
 15641                           
 15642                           ;Dimmer_B1.c: 537: DimmerLightsPointSelect(sw);
 15643  141E  0830               	movf	setDimmerLights_SwOff@sw,w
 15644  141F  319C  24F1  3194   	fcall	_DimmerLightsPointSelect
 15645                           
 15646                           ;Dimmer_B1.c: 538: char command = DimmerLights->Status == 1 ? 1 : 0;
 15647  1422  0020               	movlb	0	; select bank0
 15648  1423  086F               	movf	_DimmerLights,w
 15649  1424  0086               	movwf	6
 15650  1425  3001               	movlw	1	; select bank2/3
 15651  1426  0087               	movwf	7
 15652  1427  3000               	movlw	0
 15653  1428  1A81               	btfsc	1,5
 15654  1429  3001               	movlw	1
 15655  142A  00AF               	movwf	setDimmerLights_SwOff@command
 15656                           
 15657                           ;Dimmer_B1.c: 539: if (DimmerLights->SwFlag == 1) {
 15658  142B  086F               	movf	_DimmerLights,w
 15659  142C  3E09               	addlw	9
 15660  142D  0086               	movwf	6
 15661  142E  3001               	movlw	1	; select bank2/3
 15662  142F  0087               	movwf	7
 15663  1430  1F01               	btfss	1,6
 15664  1431  0008               	return
 15665                           
 15666                           ;Dimmer_B1.c: 540: DimmerLights->SwFlag = 0;
 15667  1432  086F               	movf	_DimmerLights,w
 15668  1433  3E09               	addlw	9
 15669  1434  0086               	movwf	6
 15670  1435  3001               	movlw	1	; select bank2/3
 15671  1436  0087               	movwf	7
 15672  1437  1301               	bcf	1,6
 15673                           
 15674                           ;Dimmer_B1.c: 541: if (DimmerLights->Status == 1) {
 15675  1438  086F               	movf	_DimmerLights,w
 15676  1439  0086               	movwf	6
 15677  143A  3001               	movlw	1	; select bank2/3
 15678  143B  0087               	movwf	7
 15679  143C  1E81               	btfss	1,5
 15680  143D  2C50               	goto	l6212
 15681                           
 15682                           ;Dimmer_B1.c: 542: if (DimmerLights->SwAdj == 1) {
 15683  143E  086F               	movf	_DimmerLights,w
 15684  143F  3E09               	addlw	9
 15685  1440  0086               	movwf	6
 15686  1441  3001               	movlw	1	; select bank2/3
 15687  1442  0087               	movwf	7
 15688  1443  1F81               	btfss	1,7
 15689  1444  0008               	return
 15690                           
 15691                           ;Dimmer_B1.c: 543: DimmerLights->SwAdj = 0;
 15692  1445  086F               	movf	_DimmerLights,w
 15693  1446  3E09               	addlw	9
 15694  1447  0086               	movwf	6
 15695  1448  3001               	movlw	1	; select bank2/3
 15696  1449  0087               	movwf	7
 15697  144A  1381               	bcf	1,7
 15698                           
 15699                           ;Dimmer_B1.c: 544: setDimmerLights_TriggerAdj(sw, 0);
 15700  144B  01A2               	clrf	setDimmerLights_TriggerAdj@command
 15701  144C  0830               	movf	setDimmerLights_SwOff@sw,w
 15702  144D  319F  2718         	fcall	_setDimmerLights_TriggerAdj
 15703                           
 15704                           ;Dimmer_B1.c: 545: }
 15705                           ;Dimmer_B1.c: 546: } else {
 15706  144F  0008               	return
 15707  1450                     l6212:	
 15708                           
 15709                           ;Dimmer_B1.c: 547: setDimmerLights_Trigger(sw, 0);
 15710  1450  0020               	movlb	0	; select bank0
 15711  1451  01A2               	clrf	setDimmerLights_Trigger@command
 15712  1452  0830               	movf	setDimmerLights_SwOff@sw,w
 15713  1453  319E  26BC  3194   	fcall	_setDimmerLights_Trigger
 15714                           
 15715                           ;Dimmer_B1.c: 549: if (getDelayOff_GO(sw) == 1) {
 15716  1456  0020               	movlb	0	; select bank0
 15717  1457  0830               	movf	setDimmerLights_SwOff@sw,w
 15718  1458  319C  2455  3194   	fcall	_getDelayOff_GO
 15719  145B  3A01               	xorlw	1
 15720  145C  1D03               	skipz
 15721  145D  0008               	return
 15722                           
 15723                           ;Dimmer_B1.c: 550: setDelayOff_GO(sw, 0, 0);
 15724  145E  0020               	movlb	0	; select bank0
 15725  145F  01AA               	clrf	setDelayOff_GO@command
 15726  1460  01AB               	clrf	setDelayOff_GO@value
 15727  1461  0830               	movf	setDimmerLights_SwOff@sw,w
 15728  1462  3188  205A         	fcall	_setDelayOff_GO
 15729  1464  0008               	return
 15730  1465                     __end_of_setDimmerLights_SwOff:	
 15731                           
 15732                           	psect	text97
 15733  1F18                     __ptext97:	
 15734 ;; *************** function _setDimmerLights_TriggerAdj *****************
 15735 ;; Defined at:
 15736 ;;		line 785 in file "../src/Dimmer_B1.c"
 15737 ;; Parameters:    Size  Location     Type
 15738 ;;  lights          1    wreg     unsigned char 
 15739 ;;  command         1    2[BANK0 ] unsigned char 
 15740 ;; Auto vars:     Size  Location     Type
 15741 ;;  lights          1    4[BANK0 ] unsigned char 
 15742 ;; Return value:  Size  Location     Type
 15743 ;;		None               void
 15744 ;; Registers used:
 15745 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15746 ;; Tracked objects:
 15747 ;;		On entry : 0/0
 15748 ;;		On exit  : 0/0
 15749 ;;		Unchanged: 0/0
 15750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15751 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15752 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15753 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15754 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15755 ;;Total ram usage:        3 bytes
 15756 ;; Hardware stack levels used:    1
 15757 ;; Hardware stack levels required when called:    6
 15758 ;; This function calls:
 15759 ;;		_DimmerLightsPointSelect
 15760 ;; This function is called by:
 15761 ;;		_setDimmerLights_SwOff
 15762 ;;		_setDimmerLights_AdjControl
 15763 ;; This function uses a non-reentrant model
 15764 ;;
 15765                           
 15766                           
 15767                           ;psect for function _setDimmerLights_TriggerAdj
 15768  1F18                     _setDimmerLights_TriggerAdj:	
 15769                           
 15770                           ;incstack = 0
 15771                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15772                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 15773  1F18  0020               	movlb	0	; select bank0
 15774  1F19  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 15775                           
 15776                           ;Dimmer_B1.c: 786: DimmerLightsPointSelect(lights);
 15777  1F1A  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 15778  1F1B  319C  24F1         	fcall	_DimmerLightsPointSelect
 15779                           
 15780                           ;Dimmer_B1.c: 787: DimmerLights->TriggerAdj = 1;
 15781  1F1D  0020               	movlb	0	; select bank0
 15782  1F1E  086F               	movf	_DimmerLights,w
 15783  1F1F  3E08               	addlw	8
 15784  1F20  0086               	movwf	6
 15785  1F21  3001               	movlw	1	; select bank2/3
 15786  1F22  0087               	movwf	7
 15787  1F23  1601               	bsf	1,4
 15788                           
 15789                           ;Dimmer_B1.c: 788: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 15790  1F24  0822               	movf	setDimmerLights_TriggerAdj@command,w
 15791  1F25  3A01               	xorlw	1
 15792  1F26  3000               	movlw	0
 15793  1F27  1903               	skipnz
 15794  1F28  3001               	movlw	1
 15795  1F29  00A3               	movwf	??_setDimmerLights_TriggerAdj
 15796  1F2A  086F               	movf	_DimmerLights,w
 15797  1F2B  3E08               	addlw	8
 15798  1F2C  0086               	movwf	6
 15799  1F2D  3001               	movlw	1	; select bank2/3
 15800  1F2E  0087               	movwf	7
 15801  1F2F  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15802  1F30  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15803  1F31  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15804  1F32  0801               	movf	1,w
 15805  1F33  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15806  1F34  39F7               	andlw	-9
 15807  1F35  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15808  1F36  0081               	movwf	1
 15809  1F37  0008               	return
 15810  1F38                     __end_of_setDimmerLights_TriggerAdj:	
 15811                           
 15812                           	psect	text98
 15813  1EBC                     __ptext98:	
 15814 ;; *************** function _setDimmerLights_Trigger *****************
 15815 ;; Defined at:
 15816 ;;		line 779 in file "../src/Dimmer_B1.c"
 15817 ;; Parameters:    Size  Location     Type
 15818 ;;  lights          1    wreg     unsigned char 
 15819 ;;  command         1    2[BANK0 ] unsigned char 
 15820 ;; Auto vars:     Size  Location     Type
 15821 ;;  lights          1    4[BANK0 ] unsigned char 
 15822 ;; Return value:  Size  Location     Type
 15823 ;;		None               void
 15824 ;; Registers used:
 15825 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15826 ;; Tracked objects:
 15827 ;;		On entry : 0/0
 15828 ;;		On exit  : 0/0
 15829 ;;		Unchanged: 0/0
 15830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15831 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15832 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15833 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15834 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15835 ;;Total ram usage:        3 bytes
 15836 ;; Hardware stack levels used:    1
 15837 ;; Hardware stack levels required when called:    6
 15838 ;; This function calls:
 15839 ;;		_DimmerLightsPointSelect
 15840 ;; This function is called by:
 15841 ;;		_setDimmerLights_SwOn
 15842 ;;		_setDimmerLights_SwOff
 15843 ;; This function uses a non-reentrant model
 15844 ;;
 15845                           
 15846                           
 15847                           ;psect for function _setDimmerLights_Trigger
 15848  1EBC                     _setDimmerLights_Trigger:	
 15849                           
 15850                           ;incstack = 0
 15851                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15852                           ;setDimmerLights_Trigger@lights stored from wreg
 15853  1EBC  0020               	movlb	0	; select bank0
 15854  1EBD  00A4               	movwf	setDimmerLights_Trigger@lights
 15855                           
 15856                           ;Dimmer_B1.c: 780: DimmerLightsPointSelect(lights);
 15857  1EBE  0824               	movf	setDimmerLights_Trigger@lights,w
 15858  1EBF  319C  24F1         	fcall	_DimmerLightsPointSelect
 15859                           
 15860                           ;Dimmer_B1.c: 781: DimmerLights->Trigger = 1;
 15861  1EC1  0020               	movlb	0	; select bank0
 15862  1EC2  086F               	movf	_DimmerLights,w
 15863  1EC3  3E08               	addlw	8
 15864  1EC4  0086               	movwf	6
 15865  1EC5  3001               	movlw	1	; select bank2/3
 15866  1EC6  0087               	movwf	7
 15867  1EC7  1501               	bsf	1,2
 15868                           
 15869                           ;Dimmer_B1.c: 782: DimmerLights->Switch = command == 1 ? 1 : 0;
 15870  1EC8  0822               	movf	setDimmerLights_Trigger@command,w
 15871  1EC9  3A01               	xorlw	1
 15872  1ECA  3000               	movlw	0
 15873  1ECB  1903               	skipnz
 15874  1ECC  3001               	movlw	1
 15875  1ECD  00A3               	movwf	??_setDimmerLights_Trigger
 15876  1ECE  086F               	movf	_DimmerLights,w
 15877  1ECF  3E08               	addlw	8
 15878  1ED0  0086               	movwf	6
 15879  1ED1  3001               	movlw	1	; select bank2/3
 15880  1ED2  0087               	movwf	7
 15881  1ED3  0DA3               	rlf	??_setDimmerLights_Trigger,f
 15882  1ED4  0801               	movf	1,w
 15883  1ED5  0623               	xorwf	??_setDimmerLights_Trigger,w
 15884  1ED6  39FD               	andlw	-3
 15885  1ED7  0623               	xorwf	??_setDimmerLights_Trigger,w
 15886  1ED8  0081               	movwf	1
 15887  1ED9  0008               	return
 15888  1EDA                     __end_of_setDimmerLights_Trigger:	
 15889                           
 15890                           	psect	text99
 15891  085A                     __ptext99:	
 15892 ;; *************** function _setDelayOff_GO *****************
 15893 ;; Defined at:
 15894 ;;		line 83 in file "../src/DelayOff_B1.c"
 15895 ;; Parameters:    Size  Location     Type
 15896 ;;  sw              1    wreg     unsigned char 
 15897 ;;  command         1   10[BANK0 ] unsigned char 
 15898 ;;  value           1   11[BANK0 ] unsigned char 
 15899 ;; Auto vars:     Size  Location     Type
 15900 ;;  sw              1   14[BANK0 ] unsigned char 
 15901 ;; Return value:  Size  Location     Type
 15902 ;;		None               void
 15903 ;; Registers used:
 15904 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15905 ;; Tracked objects:
 15906 ;;		On entry : 0/0
 15907 ;;		On exit  : 0/0
 15908 ;;		Unchanged: 0/0
 15909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15910 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15911 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15912 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15913 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15914 ;;Total ram usage:        5 bytes
 15915 ;; Hardware stack levels used:    1
 15916 ;; Hardware stack levels required when called:    7
 15917 ;; This function calls:
 15918 ;;		_DelayOffPointSelect
 15919 ;;		_DelayTimejudge
 15920 ;; This function is called by:
 15921 ;;		_setDimmerLights_SwOff
 15922 ;;		_setRFSW_Control
 15923 ;; This function uses a non-reentrant model
 15924 ;;
 15925                           
 15926                           
 15927                           ;psect for function _setDelayOff_GO
 15928  085A                     _setDelayOff_GO:	
 15929                           
 15930                           ;incstack = 0
 15931                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15932                           ;setDelayOff_GO@sw stored from wreg
 15933  085A  0020               	movlb	0	; select bank0
 15934  085B  00AE               	movwf	setDelayOff_GO@sw
 15935                           
 15936                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 15937  085C  082E               	movf	setDelayOff_GO@sw,w
 15938  085D  319D  2565  3188   	fcall	_DelayOffPointSelect
 15939                           
 15940                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 15941  0860  0020               	movlb	0	; select bank0
 15942  0861  082A               	movf	setDelayOff_GO@command,w
 15943  0862  3A01               	xorlw	1
 15944  0863  3000               	movlw	0
 15945  0864  1903               	skipnz
 15946  0865  3001               	movlw	1
 15947  0866  00AC               	movwf	??_setDelayOff_GO
 15948  0867  0878               	movf	_DelayOff,w
 15949  0868  0086               	movwf	6
 15950  0869  3001               	movlw	1	; select bank2/3
 15951  086A  0087               	movwf	7
 15952  086B  0DAC               	rlf	??_setDelayOff_GO,f
 15953  086C  0801               	movf	1,w
 15954  086D  062C               	xorwf	??_setDelayOff_GO,w
 15955  086E  39FD               	andlw	-3
 15956  086F  062C               	xorwf	??_setDelayOff_GO,w
 15957  0870  0081               	movwf	1
 15958                           
 15959                           ;DelayOff_B1.c: 89: if (command == 1) {
 15960  0871  082A               	movf	setDelayOff_GO@command,w
 15961  0872  3A01               	xorlw	1
 15962  0873  1D03               	skipz
 15963  0874  289F               	goto	l6122
 15964                           
 15965                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 15966  0875  082B               	movf	setDelayOff_GO@value,w
 15967  0876  3191  2134  3188   	fcall	_DelayTimejudge
 15968  0879  0020               	movlb	0	; select bank0
 15969  087A  00AC               	movwf	??_setDelayOff_GO
 15970  087B  0A78               	incf	_DelayOff,w
 15971  087C  0086               	movwf	6
 15972  087D  3001               	movlw	1	; select bank2/3
 15973  087E  0087               	movwf	7
 15974  087F  082C               	movf	??_setDelayOff_GO,w
 15975  0880  0081               	movwf	1
 15976                           
 15977                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 15978  0881  300F               	movlw	15
 15979  0882  052B               	andwf	setDelayOff_GO@value,w
 15980  0883  00AC               	movwf	??_setDelayOff_GO
 15981  0884  082C               	movf	??_setDelayOff_GO,w
 15982  0885  3A05               	xorlw	5
 15983  0886  1903               	skipnz
 15984  0887  288C               	goto	l6116
 15985  0888  082B               	movf	setDelayOff_GO@value,w
 15986  0889  390F               	andlw	15
 15987  088A  1D03               	btfss	3,2
 15988  088B  2892               	goto	l6120
 15989  088C                     l6116:	
 15990  088C  3026               	movlw	38
 15991  088D  022B               	subwf	setDelayOff_GO@value,w
 15992  088E  1803               	skipnc
 15993  088F  2892               	goto	l6120
 15994                           
 15995                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
 15996  0890  082B               	movf	setDelayOff_GO@value,w
 15997  0891  2893               	goto	L9
 15998  0892                     l6120:	
 15999                           ;DelayOff_B1.c: 93: } else {
 16000                           
 16001                           
 16002                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
 16003  0892  3005               	movlw	5
 16004  0893                     L9:	
 16005  0893  00AC               	movwf	??_setDelayOff_GO
 16006  0894  082E               	movf	setDelayOff_GO@sw,w
 16007  0895  3E1A               	addlw	26
 16008  0896  076E               	addwf	_product,w
 16009  0897  00AD               	movwf	??_setDelayOff_GO+1
 16010  0898  082D               	movf	??_setDelayOff_GO+1,w
 16011  0899  0086               	movwf	6
 16012  089A  3002               	movlw	2	; select bank4/5
 16013  089B  0087               	movwf	7
 16014  089C  082C               	movf	??_setDelayOff_GO,w
 16015  089D  0081               	movwf	1
 16016                           
 16017                           ;DelayOff_B1.c: 95: }
 16018                           ;DelayOff_B1.c: 96: } else {
 16019  089E  28A8               	goto	l6124
 16020  089F                     l6122:	
 16021                           
 16022                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
 16023  089F  082E               	movf	setDelayOff_GO@sw,w
 16024  08A0  3E1A               	addlw	26
 16025  08A1  076E               	addwf	_product,w
 16026  08A2  00AC               	movwf	??_setDelayOff_GO
 16027  08A3  082C               	movf	??_setDelayOff_GO,w
 16028  08A4  0086               	movwf	6
 16029  08A5  3002               	movlw	2	; select bank4/5
 16030  08A6  0087               	movwf	7
 16031  08A7  0181               	clrf	1
 16032  08A8                     l6124:	
 16033                           
 16034                           ;DelayOff_B1.c: 98: }
 16035                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 16036  08A8  0878               	movf	_DelayOff,w
 16037  08A9  3E02               	addlw	2
 16038  08AA  0086               	movwf	6
 16039  08AB  3001               	movlw	1	; select bank2/3
 16040  08AC  0087               	movwf	7
 16041  08AD  3000               	movlw	0
 16042  08AE  3FC0               	movwi [0]fsr1
 16043  08AF  3FC1               	movwi [1]fsr1
 16044                           
 16045                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 16046  08B0  0878               	movf	_DelayOff,w
 16047  08B1  3E04               	addlw	4
 16048  08B2  0086               	movwf	6
 16049  08B3  3001               	movlw	1	; select bank2/3
 16050  08B4  0087               	movwf	7
 16051  08B5  0181               	clrf	1
 16052  08B6  0008               	return
 16053  08B7                     __end_of_setDelayOff_GO:	
 16054                           
 16055                           	psect	text100
 16056  1134                     __ptext100:	
 16057 ;; *************** function _DelayTimejudge *****************
 16058 ;; Defined at:
 16059 ;;		line 112 in file "../src/DelayOff_B1.c"
 16060 ;; Parameters:    Size  Location     Type
 16061 ;;  value           1    wreg     unsigned char 
 16062 ;; Auto vars:     Size  Location     Type
 16063 ;;  value           1    9[BANK0 ] unsigned char 
 16064 ;;  k               1    8[BANK0 ] unsigned char 
 16065 ;;  j               1    7[BANK0 ] unsigned char 
 16066 ;;  i               1    6[BANK0 ] unsigned char 
 16067 ;; Return value:  Size  Location     Type
 16068 ;;                  1    wreg      unsigned char 
 16069 ;; Registers used:
 16070 ;;		wreg, status,2, status,0, pclath, cstack
 16071 ;; Tracked objects:
 16072 ;;		On entry : 0/0
 16073 ;;		On exit  : 0/0
 16074 ;;		Unchanged: 0/0
 16075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16077 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16078 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16079 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16080 ;;Total ram usage:        6 bytes
 16081 ;; Hardware stack levels used:    1
 16082 ;; Hardware stack levels required when called:    6
 16083 ;; This function calls:
 16084 ;;		___bmul
 16085 ;; This function is called by:
 16086 ;;		_setDelayOff_GO
 16087 ;; This function uses a non-reentrant model
 16088 ;;
 16089                           
 16090                           
 16091                           ;psect for function _DelayTimejudge
 16092  1134                     _DelayTimejudge:	
 16093                           
 16094                           ;incstack = 0
 16095                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16096                           ;DelayTimejudge@value stored from wreg
 16097  1134  0020               	movlb	0	; select bank0
 16098  1135  00A9               	movwf	DelayTimejudge@value
 16099                           
 16100                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16101  1136  3005               	movlw	5
 16102  1137  00A4               	movwf	??_DelayTimejudge
 16103  1138  0824               	movf	??_DelayTimejudge,w
 16104  1139  00A6               	movwf	DelayTimejudge@i
 16105  113A  01A7               	clrf	DelayTimejudge@j
 16106  113B  01A8               	clrf	DelayTimejudge@k
 16107                           
 16108                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16109  113C  3031               	movlw	49
 16110  113D  0229               	subwf	DelayTimejudge@value,w
 16111  113E  1803               	skipnc
 16112  113F  295C               	goto	l6014
 16113                           
 16114                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16115  1140  0829               	movf	DelayTimejudge@value,w
 16116  1141  390F               	andlw	15
 16117  1142  00A4               	movwf	??_DelayTimejudge
 16118  1143  0824               	movf	??_DelayTimejudge,w
 16119  1144  00A7               	movwf	DelayTimejudge@j
 16120                           
 16121                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16122  1145  0829               	movf	DelayTimejudge@value,w
 16123  1146  00A4               	movwf	??_DelayTimejudge
 16124  1147  3004               	movlw	4
 16125  1148                     u4925:	
 16126  1148  36A4               	lsrf	??_DelayTimejudge,f
 16127  1149  0B89               	decfsz	9,f
 16128  114A  2948               	goto	u4925
 16129  114B  0824               	movf	??_DelayTimejudge,w
 16130  114C  390F               	andlw	15
 16131  114D  00A5               	movwf	??_DelayTimejudge+1
 16132  114E  0825               	movf	??_DelayTimejudge+1,w
 16133  114F  00A8               	movwf	DelayTimejudge@k
 16134                           
 16135                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16136  1150  300A               	movlw	10
 16137  1151  00A4               	movwf	??_DelayTimejudge
 16138  1152  0824               	movf	??_DelayTimejudge,w
 16139  1153  00A0               	movwf	___bmul@multiplicand
 16140  1154  0828               	movf	DelayTimejudge@k,w
 16141  1155  319C  24BB         	fcall	___bmul
 16142  1157  0020               	movlb	0	; select bank0
 16143  1158  0727               	addwf	DelayTimejudge@j,w
 16144  1159  00A5               	movwf	??_DelayTimejudge+1
 16145  115A  0825               	movf	??_DelayTimejudge+1,w
 16146  115B  00A6               	movwf	DelayTimejudge@i
 16147  115C                     l6014:	
 16148                           
 16149                           ;DelayOff_B1.c: 118: }
 16150                           ;DelayOff_B1.c: 139: return i;
 16151  115C  0826               	movf	DelayTimejudge@i,w
 16152  115D  0008               	return
 16153  115E                     __end_of_DelayTimejudge:	
 16154                           
 16155                           	psect	text101
 16156  1CBB                     __ptext101:	
 16157 ;; *************** function ___bmul *****************
 16158 ;; Defined at:
 16159 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16160 ;; Parameters:    Size  Location     Type
 16161 ;;  multiplier      1    wreg     unsigned char 
 16162 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16163 ;; Auto vars:     Size  Location     Type
 16164 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16165 ;;  product         1    2[BANK0 ] unsigned char 
 16166 ;; Return value:  Size  Location     Type
 16167 ;;                  1    wreg      unsigned char 
 16168 ;; Registers used:
 16169 ;;		wreg, status,2, status,0
 16170 ;; Tracked objects:
 16171 ;;		On entry : 0/0
 16172 ;;		On exit  : 0/0
 16173 ;;		Unchanged: 0/0
 16174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16175 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16176 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16177 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16178 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16179 ;;Total ram usage:        4 bytes
 16180 ;; Hardware stack levels used:    1
 16181 ;; Hardware stack levels required when called:    5
 16182 ;; This function calls:
 16183 ;;		Nothing
 16184 ;; This function is called by:
 16185 ;;		_DelayTimejudge
 16186 ;; This function uses a non-reentrant model
 16187 ;;
 16188                           
 16189                           
 16190                           ;psect for function ___bmul
 16191  1CBB                     ___bmul:	
 16192                           
 16193                           ;incstack = 0
 16194                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16195                           ;___bmul@multiplier stored from wreg
 16196  1CBB  0020               	movlb	0	; select bank0
 16197  1CBC  00A3               	movwf	___bmul@multiplier
 16198  1CBD  01A2               	clrf	___bmul@product
 16199  1CBE                     l5752:	
 16200  1CBE  1C23               	btfss	___bmul@multiplier,0
 16201  1CBF  2CC4               	goto	l5756
 16202  1CC0  0820               	movf	___bmul@multiplicand,w
 16203  1CC1  00A1               	movwf	??___bmul
 16204  1CC2  0821               	movf	??___bmul,w
 16205  1CC3  07A2               	addwf	___bmul@product,f
 16206  1CC4                     l5756:	
 16207  1CC4  1003               	clrc
 16208  1CC5  0DA0               	rlf	___bmul@multiplicand,f
 16209  1CC6  1003               	clrc
 16210  1CC7  0CA3               	rrf	___bmul@multiplier,f
 16211  1CC8  08A3               	movf	___bmul@multiplier,f
 16212  1CC9  1D03               	skipz
 16213  1CCA  2CBE               	goto	l5752
 16214  1CCB  0822               	movf	___bmul@product,w
 16215  1CCC  0008               	return
 16216  1CCD                     __end_of___bmul:	
 16217                           
 16218                           	psect	text102
 16219  1C55                     __ptext102:	
 16220 ;; *************** function _getDelayOff_GO *****************
 16221 ;; Defined at:
 16222 ;;		line 105 in file "../src/DelayOff_B1.c"
 16223 ;; Parameters:    Size  Location     Type
 16224 ;;  sw              1    wreg     unsigned char 
 16225 ;; Auto vars:     Size  Location     Type
 16226 ;;  sw              1    2[BANK0 ] unsigned char 
 16227 ;;  go              1    3[BANK0 ] unsigned char 
 16228 ;; Return value:  Size  Location     Type
 16229 ;;                  1    wreg      unsigned char 
 16230 ;; Registers used:
 16231 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16232 ;; Tracked objects:
 16233 ;;		On entry : 0/0
 16234 ;;		On exit  : 0/0
 16235 ;;		Unchanged: 0/0
 16236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16238 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16240 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16241 ;;Total ram usage:        2 bytes
 16242 ;; Hardware stack levels used:    1
 16243 ;; Hardware stack levels required when called:    6
 16244 ;; This function calls:
 16245 ;;		_DelayOffPointSelect
 16246 ;; This function is called by:
 16247 ;;		_setDimmerLights_SwOff
 16248 ;;		_setRFSW_Control
 16249 ;; This function uses a non-reentrant model
 16250 ;;
 16251                           
 16252                           
 16253                           ;psect for function _getDelayOff_GO
 16254  1C55                     _getDelayOff_GO:	
 16255                           
 16256                           ;incstack = 0
 16257                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16258                           ;getDelayOff_GO@sw stored from wreg
 16259  1C55  0020               	movlb	0	; select bank0
 16260  1C56  00A2               	movwf	getDelayOff_GO@sw
 16261                           
 16262                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16263  1C57  0822               	movf	getDelayOff_GO@sw,w
 16264  1C58  319D  2565         	fcall	_DelayOffPointSelect
 16265                           
 16266                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16267  1C5A  0878               	movf	_DelayOff,w
 16268  1C5B  0086               	movwf	6
 16269  1C5C  3001               	movlw	1	; select bank2/3
 16270  1C5D  0087               	movwf	7
 16271  1C5E  3000               	movlw	0
 16272  1C5F  1881               	btfsc	1,1
 16273  1C60  3001               	movlw	1
 16274  1C61  0020               	movlb	0	; select bank0
 16275  1C62  00A3               	movwf	getDelayOff_GO@go
 16276                           
 16277                           ;DelayOff_B1.c: 108: return go;
 16278  1C63  0823               	movf	getDelayOff_GO@go,w
 16279  1C64  0008               	return
 16280  1C65                     __end_of_getDelayOff_GO:	
 16281                           
 16282                           	psect	text103
 16283  1C45                     __ptext103:	
 16284 ;; *************** function _getDimmerLights_Status *****************
 16285 ;; Defined at:
 16286 ;;		line 457 in file "../src/Dimmer_B1.c"
 16287 ;; Parameters:    Size  Location     Type
 16288 ;;  lights          1    wreg     unsigned char 
 16289 ;; Auto vars:     Size  Location     Type
 16290 ;;  lights          1    2[BANK0 ] unsigned char 
 16291 ;;  status          1    3[BANK0 ] unsigned char 
 16292 ;; Return value:  Size  Location     Type
 16293 ;;                  1    wreg      unsigned char 
 16294 ;; Registers used:
 16295 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16296 ;; Tracked objects:
 16297 ;;		On entry : 0/0
 16298 ;;		On exit  : 0/0
 16299 ;;		Unchanged: 0/0
 16300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16302 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16304 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16305 ;;Total ram usage:        2 bytes
 16306 ;; Hardware stack levels used:    1
 16307 ;; Hardware stack levels required when called:    6
 16308 ;; This function calls:
 16309 ;;		_DimmerLightsPointSelect
 16310 ;; This function is called by:
 16311 ;;		_setDimmerLights_ErrorClose
 16312 ;;		_setRFSW_Control
 16313 ;;		_setRFSW_AdjControl
 16314 ;;		_getMain_LightsStatus
 16315 ;; This function uses a non-reentrant model
 16316 ;;
 16317                           
 16318                           
 16319                           ;psect for function _getDimmerLights_Status
 16320  1C45                     _getDimmerLights_Status:	
 16321                           
 16322                           ;incstack = 0
 16323                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16324                           ;getDimmerLights_Status@lights stored from wreg
 16325  1C45  0020               	movlb	0	; select bank0
 16326  1C46  00A2               	movwf	getDimmerLights_Status@lights
 16327                           
 16328                           ;Dimmer_B1.c: 458: DimmerLightsPointSelect(lights);
 16329  1C47  0822               	movf	getDimmerLights_Status@lights,w
 16330  1C48  319C  24F1         	fcall	_DimmerLightsPointSelect
 16331                           
 16332                           ;Dimmer_B1.c: 459: char status = DimmerLights->Status == 1 ? 1 : 0;
 16333  1C4A  0020               	movlb	0	; select bank0
 16334  1C4B  086F               	movf	_DimmerLights,w
 16335  1C4C  0086               	movwf	6
 16336  1C4D  3001               	movlw	1	; select bank2/3
 16337  1C4E  0087               	movwf	7
 16338  1C4F  3000               	movlw	0
 16339  1C50  1A81               	btfsc	1,5
 16340  1C51  3001               	movlw	1
 16341  1C52  00A3               	movwf	getDimmerLights_Status@status
 16342                           
 16343                           ;Dimmer_B1.c: 460: return status;
 16344  1C53  0823               	movf	getDimmerLights_Status@status,w
 16345  1C54  0008               	return
 16346  1C55                     __end_of_getDimmerLights_Status:	
 16347                           
 16348                           	psect	text104
 16349  1CF1                     __ptext104:	
 16350 ;; *************** function _DimmerLightsPointSelect *****************
 16351 ;; Defined at:
 16352 ;;		line 322 in file "../src/Dimmer_B1.c"
 16353 ;; Parameters:    Size  Location     Type
 16354 ;;  lights          1    wreg     unsigned char 
 16355 ;; Auto vars:     Size  Location     Type
 16356 ;;  lights          1    1[BANK0 ] unsigned char 
 16357 ;; Return value:  Size  Location     Type
 16358 ;;		None               void
 16359 ;; Registers used:
 16360 ;;		wreg
 16361 ;; Tracked objects:
 16362 ;;		On entry : 0/0
 16363 ;;		On exit  : 0/0
 16364 ;;		Unchanged: 0/0
 16365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16367 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16368 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16369 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16370 ;;Total ram usage:        2 bytes
 16371 ;; Hardware stack levels used:    1
 16372 ;; Hardware stack levels required when called:    5
 16373 ;; This function calls:
 16374 ;;		Nothing
 16375 ;; This function is called by:
 16376 ;;		_setDimmerLights_Initialization
 16377 ;;		_setDimmerLights_Main
 16378 ;;		_getDimmerLights_Status
 16379 ;;		_setDimmerLights_SwOn
 16380 ;;		_setDimmerLights_SwOff
 16381 ;;		_setDimmerLights_AdjControl
 16382 ;;		_setDimmerLights_ErrorClose
 16383 ;;		_setDimmerLights
 16384 ;;		_setDimmerLights_Adj
 16385 ;;		_setDimmerLights_AdjRF
 16386 ;;		_setDimmerLights_Trigger
 16387 ;;		_setDimmerLights_TriggerAdj
 16388 ;;		_setDimmerLights_Status
 16389 ;;		_setDimmerLights_GO
 16390 ;;		_setDimmerLights_MaxmumValue
 16391 ;; This function uses a non-reentrant model
 16392 ;;
 16393                           
 16394                           
 16395                           ;psect for function _DimmerLightsPointSelect
 16396  1CF1                     _DimmerLightsPointSelect:	
 16397                           
 16398                           ;incstack = 0
 16399                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16400                           ;DimmerLightsPointSelect@lights stored from wreg
 16401  1CF1  0020               	movlb	0	; select bank0
 16402  1CF2  00A1               	movwf	DimmerLightsPointSelect@lights
 16403                           
 16404                           ;Dimmer_B1.c: 324: if (lights == 1) {
 16405  1CF3  0821               	movf	DimmerLightsPointSelect@lights,w
 16406  1CF4  3A01               	xorlw	1
 16407  1CF5  1D03               	skipz
 16408  1CF6  2CFB               	goto	l767
 16409                           
 16410                           ;Dimmer_B1.c: 325: DimmerLights = &DimmerLights1;
 16411  1CF7  30BE               	movlw	_DimmerLights1& (0+255)
 16412  1CF8  00A0               	movwf	??_DimmerLightsPointSelect
 16413  1CF9  0820               	movf	??_DimmerLightsPointSelect,w
 16414  1CFA  00EF               	movwf	_DimmerLights
 16415  1CFB                     l767:	
 16416                           
 16417                           ;Dimmer_B1.c: 326: }
 16418                           ;Dimmer_B1.c: 329: if (lights == 2) {
 16419  1CFB  0821               	movf	DimmerLightsPointSelect@lights,w
 16420  1CFC  3A02               	xorlw	2
 16421  1CFD  1D03               	skipz
 16422  1CFE  0008               	return
 16423                           
 16424                           ;Dimmer_B1.c: 330: DimmerLights = &DimmerLights2;
 16425  1CFF  30CD               	movlw	_DimmerLights2& (0+255)
 16426  1D00  00A0               	movwf	??_DimmerLightsPointSelect
 16427  1D01  0820               	movf	??_DimmerLightsPointSelect,w
 16428  1D02  00EF               	movwf	_DimmerLights
 16429  1D03  0008               	return
 16430  1D04                     __end_of_DimmerLightsPointSelect:	
 16431                           
 16432                           	psect	text105
 16433  1696                     __ptext105:	
 16434 ;; *************** function _setBuz *****************
 16435 ;; Defined at:
 16436 ;;		line 22 in file "../src/Buzzer_B1.c"
 16437 ;; Parameters:    Size  Location     Type
 16438 ;;  count           1    wreg     unsigned char 
 16439 ;;  time            2    9[BANK0 ] int 
 16440 ;; Auto vars:     Size  Location     Type
 16441 ;;  count           1   12[BANK0 ] unsigned char 
 16442 ;; Return value:  Size  Location     Type
 16443 ;;		None               void
 16444 ;; Registers used:
 16445 ;;		wreg, status,2, status,0, pclath, cstack
 16446 ;; Tracked objects:
 16447 ;;		On entry : 0/0
 16448 ;;		On exit  : 0/0
 16449 ;;		Unchanged: 0/0
 16450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16451 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16452 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16453 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16454 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16455 ;;Total ram usage:        4 bytes
 16456 ;; Hardware stack levels used:    1
 16457 ;; Hardware stack levels required when called:    6
 16458 ;; This function calls:
 16459 ;;		___awdiv
 16460 ;; This function is called by:
 16461 ;;		_DlyOff_Main
 16462 ;;		_setDimmerLights_Main
 16463 ;;		_setDimmerLights_SwOn
 16464 ;;		_setTemp_Main
 16465 ;;		_setLog_Code
 16466 ;;		_setControl_Lights_Table
 16467 ;;		_setRFSW_Control
 16468 ;;		_setSw_Main
 16469 ;;		_my_MainTimer
 16470 ;;		_setMain_Exception
 16471 ;; This function uses a non-reentrant model
 16472 ;;
 16473                           
 16474                           
 16475                           ;psect for function _setBuz
 16476  1696                     _setBuz:	
 16477                           
 16478                           ;incstack = 0
 16479                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16480                           ;setBuz@count stored from wreg
 16481  1696  0020               	movlb	0	; select bank0
 16482  1697  00AC               	movwf	setBuz@count
 16483                           
 16484                           ;Buzzer_B1.c: 23: time /= 10;
 16485  1698  300A               	movlw	10
 16486  1699  00A0               	movwf	___awdiv@divisor
 16487  169A  3000               	movlw	0
 16488  169B  00A1               	movwf	___awdiv@divisor+1
 16489  169C  082A               	movf	setBuz@time+1,w
 16490  169D  01A3               	clrf	___awdiv@dividend+1
 16491  169E  07A3               	addwf	___awdiv@dividend+1,f
 16492  169F  0829               	movf	setBuz@time,w
 16493  16A0  01A2               	clrf	___awdiv@dividend
 16494  16A1  07A2               	addwf	___awdiv@dividend,f
 16495  16A2  3195  25EA  3196   	fcall	___awdiv
 16496  16A5  0020               	movlb	0	; select bank0
 16497  16A6  0821               	movf	?___awdiv+1,w
 16498  16A7  01AA               	clrf	setBuz@time+1
 16499  16A8  07AA               	addwf	setBuz@time+1,f
 16500  16A9  0820               	movf	?___awdiv,w
 16501  16AA  01A9               	clrf	setBuz@time
 16502  16AB  07A9               	addwf	setBuz@time,f
 16503                           
 16504                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16505  16AC  0021               	movlb	1	; select bank1
 16506  16AD  1C30               	btfss	_Buz1^(0+128),0
 16507  16AE  0008               	return
 16508                           
 16509                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16510  16AF  18B0               	btfsc	_Buz1^(0+128),1
 16511  16B0  2EC7               	goto	l96
 16512                           
 16513                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16514  16B1  14B0               	bsf	_Buz1^(0+128),1
 16515                           
 16516                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16517  16B2  01B1               	clrf	(_Buz1^(0+128)+1)
 16518  16B3  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 16519                           
 16520                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16521  16B4  0020               	movlb	0	; select bank0
 16522  16B5  082C               	movf	setBuz@count,w
 16523  16B6  00AB               	movwf	??_setBuz
 16524  16B7  082B               	movf	??_setBuz,w
 16525  16B8  0021               	movlb	1	; select bank1
 16526  16B9  00B3               	movwf	(_Buz1^(0+128)+3)
 16527                           
 16528                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16529  16BA  0020               	movlb	0	; select bank0
 16530  16BB  082A               	movf	setBuz@time+1,w
 16531  16BC  0021               	movlb	1	; select bank1
 16532  16BD  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 16533  16BE  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 16534  16BF  0020               	movlb	0	; select bank0
 16535  16C0  0829               	movf	setBuz@time,w
 16536  16C1  0021               	movlb	1	; select bank1
 16537  16C2  01B6               	clrf	(_Buz1^(0+128)+6)
 16538  16C3  07B6               	addwf	(_Buz1^(0+128)+6),f
 16539                           
 16540                           ;Buzzer_B1.c: 30: RB3 = 1;
 16541  16C4  0020               	movlb	0	; select bank0
 16542  16C5  158D               	bsf	13,3	;volatile
 16543                           
 16544                           ;Buzzer_B1.c: 31: } else {
 16545  16C6  0008               	return
 16546  16C7                     l96:	
 16547                           
 16548                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16549  16C7  19B0               	btfsc	_Buz1^(0+128),3
 16550  16C8  2EDB               	goto	l98
 16551                           
 16552                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16553  16C9  15B0               	bsf	_Buz1^(0+128),3
 16554                           
 16555                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16556  16CA  0020               	movlb	0	; select bank0
 16557  16CB  082C               	movf	setBuz@count,w
 16558  16CC  00AB               	movwf	??_setBuz
 16559  16CD  082B               	movf	??_setBuz,w
 16560  16CE  0021               	movlb	1	; select bank1
 16561  16CF  00B4               	movwf	(_Buz1^(0+128)+4)
 16562                           
 16563                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16564  16D0  0020               	movlb	0	; select bank0
 16565  16D1  082A               	movf	setBuz@time+1,w
 16566  16D2  0021               	movlb	1	; select bank1
 16567  16D3  01B9               	clrf	((_Buz1+1)^(0+128)+8)
 16568  16D4  07B9               	addwf	((_Buz1+1)^(0+128)+8),f
 16569  16D5  0020               	movlb	0	; select bank0
 16570  16D6  0829               	movf	setBuz@time,w
 16571  16D7  0021               	movlb	1	; select bank1
 16572  16D8  01B8               	clrf	(_Buz1^(0+128)+8)
 16573  16D9  07B8               	addwf	(_Buz1^(0+128)+8),f
 16574                           
 16575                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16576  16DA  0008               	return
 16577  16DB                     l98:	
 16578  16DB  1A30               	btfsc	_Buz1^(0+128),4
 16579  16DC  0008               	return
 16580                           
 16581                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16582  16DD  1630               	bsf	_Buz1^(0+128),4
 16583                           
 16584                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16585  16DE  0020               	movlb	0	; select bank0
 16586  16DF  082C               	movf	setBuz@count,w
 16587  16E0  00AB               	movwf	??_setBuz
 16588  16E1  082B               	movf	??_setBuz,w
 16589  16E2  0021               	movlb	1	; select bank1
 16590  16E3  00B5               	movwf	(_Buz1^(0+128)+5)
 16591                           
 16592                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16593  16E4  0020               	movlb	0	; select bank0
 16594  16E5  082A               	movf	setBuz@time+1,w
 16595  16E6  0021               	movlb	1	; select bank1
 16596  16E7  01BB               	clrf	((_Buz1+1)^(0+128)+10)
 16597  16E8  07BB               	addwf	((_Buz1+1)^(0+128)+10),f
 16598  16E9  0020               	movlb	0	; select bank0
 16599  16EA  0829               	movf	setBuz@time,w
 16600  16EB  0021               	movlb	1	; select bank1
 16601  16EC  01BA               	clrf	(_Buz1^(0+128)+10)
 16602  16ED  07BA               	addwf	(_Buz1^(0+128)+10),f
 16603  16EE  0008               	return
 16604  16EF                     __end_of_setBuz:	
 16605                           
 16606                           	psect	text106
 16607  15EA                     __ptext106:	
 16608 ;; *************** function ___awdiv *****************
 16609 ;; Defined at:
 16610 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16611 ;; Parameters:    Size  Location     Type
 16612 ;;  divisor         2    0[BANK0 ] int 
 16613 ;;  dividend        2    2[BANK0 ] int 
 16614 ;; Auto vars:     Size  Location     Type
 16615 ;;  quotient        2    7[BANK0 ] int 
 16616 ;;  sign            1    6[BANK0 ] unsigned char 
 16617 ;;  counter         1    5[BANK0 ] unsigned char 
 16618 ;; Return value:  Size  Location     Type
 16619 ;;                  2    0[BANK0 ] int 
 16620 ;; Registers used:
 16621 ;;		wreg, status,2, status,0
 16622 ;; Tracked objects:
 16623 ;;		On entry : 0/0
 16624 ;;		On exit  : 0/0
 16625 ;;		Unchanged: 0/0
 16626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16627 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16628 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16629 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16630 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16631 ;;Total ram usage:        9 bytes
 16632 ;; Hardware stack levels used:    1
 16633 ;; Hardware stack levels required when called:    5
 16634 ;; This function calls:
 16635 ;;		Nothing
 16636 ;; This function is called by:
 16637 ;;		_setBuz
 16638 ;; This function uses a non-reentrant model
 16639 ;;
 16640                           
 16641                           
 16642                           ;psect for function ___awdiv
 16643  15EA                     ___awdiv:	
 16644                           
 16645                           ;incstack = 0
 16646                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16647  15EA  0020               	movlb	0	; select bank0
 16648  15EB  01A6               	clrf	___awdiv@sign
 16649  15EC  1FA1               	btfss	___awdiv@divisor+1,7
 16650  15ED  2DF5               	goto	l6040
 16651  15EE  09A0               	comf	___awdiv@divisor,f
 16652  15EF  09A1               	comf	___awdiv@divisor+1,f
 16653  15F0  0AA0               	incf	___awdiv@divisor,f
 16654  15F1  1903               	skipnz
 16655  15F2  0AA1               	incf	___awdiv@divisor+1,f
 16656  15F3  01A6               	clrf	___awdiv@sign
 16657  15F4  0AA6               	incf	___awdiv@sign,f
 16658  15F5                     l6040:	
 16659  15F5  1FA3               	btfss	___awdiv@dividend+1,7
 16660  15F6  2E00               	goto	l6046
 16661  15F7  09A2               	comf	___awdiv@dividend,f
 16662  15F8  09A3               	comf	___awdiv@dividend+1,f
 16663  15F9  0AA2               	incf	___awdiv@dividend,f
 16664  15FA  1903               	skipnz
 16665  15FB  0AA3               	incf	___awdiv@dividend+1,f
 16666  15FC  3001               	movlw	1
 16667  15FD  00A4               	movwf	??___awdiv
 16668  15FE  0824               	movf	??___awdiv,w
 16669  15FF  06A6               	xorwf	___awdiv@sign,f
 16670  1600                     l6046:	
 16671  1600  01A7               	clrf	___awdiv@quotient
 16672  1601  01A8               	clrf	___awdiv@quotient+1
 16673  1602  0821               	movf	___awdiv@divisor+1,w
 16674  1603  0420               	iorwf	___awdiv@divisor,w
 16675  1604  1903               	skipnz
 16676  1605  2E2F               	goto	l6068
 16677  1606  01A5               	clrf	___awdiv@counter
 16678  1607  0AA5               	incf	___awdiv@counter,f
 16679  1608                     l6056:	
 16680  1608  1BA1               	btfsc	___awdiv@divisor+1,7
 16681  1609  2E14               	goto	l6058
 16682  160A  3001               	movlw	1
 16683  160B                     u4985:	
 16684  160B  35A0               	lslf	___awdiv@divisor,f
 16685  160C  0DA1               	rlf	___awdiv@divisor+1,f
 16686  160D  0B89               	decfsz	9,f
 16687  160E  2E0B               	goto	u4985
 16688  160F  3001               	movlw	1
 16689  1610  00A4               	movwf	??___awdiv
 16690  1611  0824               	movf	??___awdiv,w
 16691  1612  07A5               	addwf	___awdiv@counter,f
 16692  1613  2E08               	goto	l6056
 16693  1614                     l6058:	
 16694  1614  3001               	movlw	1
 16695  1615                     u5005:	
 16696  1615  35A7               	lslf	___awdiv@quotient,f
 16697  1616  0DA8               	rlf	___awdiv@quotient+1,f
 16698  1617  0B89               	decfsz	9,f
 16699  1618  2E15               	goto	u5005
 16700  1619  0821               	movf	___awdiv@divisor+1,w
 16701  161A  0223               	subwf	___awdiv@dividend+1,w
 16702  161B  1D03               	skipz
 16703  161C  2E1F               	goto	u5015
 16704  161D  0820               	movf	___awdiv@divisor,w
 16705  161E  0222               	subwf	___awdiv@dividend,w
 16706  161F                     u5015:	
 16707  161F  1C03               	skipc
 16708  1620  2E26               	goto	l6064
 16709  1621  0820               	movf	___awdiv@divisor,w
 16710  1622  02A2               	subwf	___awdiv@dividend,f
 16711  1623  0821               	movf	___awdiv@divisor+1,w
 16712  1624  3BA3               	subwfb	___awdiv@dividend+1,f
 16713  1625  1427               	bsf	___awdiv@quotient,0
 16714  1626                     l6064:	
 16715  1626  3001               	movlw	1
 16716  1627                     u5025:	
 16717  1627  36A1               	lsrf	___awdiv@divisor+1,f
 16718  1628  0CA0               	rrf	___awdiv@divisor,f
 16719  1629  0B89               	decfsz	9,f
 16720  162A  2E27               	goto	u5025
 16721  162B  3001               	movlw	1
 16722  162C  02A5               	subwf	___awdiv@counter,f
 16723  162D  1D03               	btfss	3,2
 16724  162E  2E14               	goto	l6058
 16725  162F                     l6068:	
 16726  162F  0826               	movf	___awdiv@sign,w
 16727  1630  1903               	btfsc	3,2
 16728  1631  2E37               	goto	l6072
 16729  1632  09A7               	comf	___awdiv@quotient,f
 16730  1633  09A8               	comf	___awdiv@quotient+1,f
 16731  1634  0AA7               	incf	___awdiv@quotient,f
 16732  1635  1903               	skipnz
 16733  1636  0AA8               	incf	___awdiv@quotient+1,f
 16734  1637                     l6072:	
 16735  1637  0828               	movf	___awdiv@quotient+1,w
 16736  1638  01A1               	clrf	?___awdiv+1
 16737  1639  07A1               	addwf	?___awdiv+1,f
 16738  163A  0827               	movf	___awdiv@quotient,w
 16739  163B  01A0               	clrf	?___awdiv
 16740  163C  07A0               	addwf	?___awdiv,f
 16741  163D  0008               	return
 16742  163E                     __end_of___awdiv:	
 16743                           
 16744                           	psect	text107
 16745  1B71                     __ptext107:	
 16746 ;; *************** function _DelayOff_Initialization *****************
 16747 ;; Defined at:
 16748 ;;		line 26 in file "../src/DelayOff_B1.c"
 16749 ;; Parameters:    Size  Location     Type
 16750 ;;		None
 16751 ;; Auto vars:     Size  Location     Type
 16752 ;;		None
 16753 ;; Return value:  Size  Location     Type
 16754 ;;		None               void
 16755 ;; Registers used:
 16756 ;;		wreg, status,2, status,0, pclath, cstack
 16757 ;; Tracked objects:
 16758 ;;		On entry : 0/0
 16759 ;;		On exit  : 0/0
 16760 ;;		Unchanged: 0/0
 16761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16766 ;;Total ram usage:        0 bytes
 16767 ;; Hardware stack levels used:    1
 16768 ;; Hardware stack levels required when called:    7
 16769 ;; This function calls:
 16770 ;;		_DlyOff_Initialization
 16771 ;; This function is called by:
 16772 ;;		_main
 16773 ;; This function uses a non-reentrant model
 16774 ;;
 16775                           
 16776                           
 16777                           ;psect for function _DelayOff_Initialization
 16778  1B71                     _DelayOff_Initialization:	
 16779                           
 16780                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16781                           
 16782                           ;incstack = 0
 16783                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16784  1B71  3001               	movlw	1
 16785  1B72  319B  2350  319B   	fcall	_DlyOff_Initialization
 16786                           
 16787                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 16788  1B75  3002               	movlw	2
 16789  1B76  319B  2350         	fcall	_DlyOff_Initialization
 16790  1B78  0008               	return
 16791  1B79                     __end_of_DelayOff_Initialization:	
 16792                           
 16793                           	psect	text108
 16794  1B50                     __ptext108:	
 16795 ;; *************** function _DlyOff_Initialization *****************
 16796 ;; Defined at:
 16797 ;;		line 56 in file "../src/DelayOff_B1.c"
 16798 ;; Parameters:    Size  Location     Type
 16799 ;;  sw              1    wreg     unsigned char 
 16800 ;; Auto vars:     Size  Location     Type
 16801 ;;  sw              1    2[BANK0 ] unsigned char 
 16802 ;; Return value:  Size  Location     Type
 16803 ;;		None               void
 16804 ;; Registers used:
 16805 ;;		wreg, status,2, status,0, pclath, cstack
 16806 ;; Tracked objects:
 16807 ;;		On entry : 0/0
 16808 ;;		On exit  : 0/0
 16809 ;;		Unchanged: 0/0
 16810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16812 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16814 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16815 ;;Total ram usage:        1 bytes
 16816 ;; Hardware stack levels used:    1
 16817 ;; Hardware stack levels required when called:    6
 16818 ;; This function calls:
 16819 ;;		_DelayOffPointSelect
 16820 ;; This function is called by:
 16821 ;;		_DelayOff_Initialization
 16822 ;; This function uses a non-reentrant model
 16823 ;;
 16824                           
 16825                           
 16826                           ;psect for function _DlyOff_Initialization
 16827  1B50                     _DlyOff_Initialization:	
 16828                           
 16829                           ;incstack = 0
 16830                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16831                           ;DlyOff_Initialization@sw stored from wreg
 16832  1B50  0020               	movlb	0	; select bank0
 16833  1B51  00A2               	movwf	DlyOff_Initialization@sw
 16834                           
 16835                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16836  1B52  0822               	movf	DlyOff_Initialization@sw,w
 16837  1B53  319D  2565         	fcall	_DelayOffPointSelect
 16838  1B55  0008               	return
 16839  1B56                     __end_of_DlyOff_Initialization:	
 16840                           
 16841                           	psect	text109
 16842  1D65                     __ptext109:	
 16843 ;; *************** function _DelayOffPointSelect *****************
 16844 ;; Defined at:
 16845 ;;		line 7 in file "../src/DelayOff_B1.c"
 16846 ;; Parameters:    Size  Location     Type
 16847 ;;  sw              1    wreg     unsigned char 
 16848 ;; Auto vars:     Size  Location     Type
 16849 ;;  sw              1    1[BANK0 ] unsigned char 
 16850 ;; Return value:  Size  Location     Type
 16851 ;;		None               void
 16852 ;; Registers used:
 16853 ;;		wreg
 16854 ;; Tracked objects:
 16855 ;;		On entry : 0/0
 16856 ;;		On exit  : 0/0
 16857 ;;		Unchanged: 0/0
 16858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16860 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16861 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16862 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16863 ;;Total ram usage:        2 bytes
 16864 ;; Hardware stack levels used:    1
 16865 ;; Hardware stack levels required when called:    5
 16866 ;; This function calls:
 16867 ;;		Nothing
 16868 ;; This function is called by:
 16869 ;;		_DlyOff_Initialization
 16870 ;;		_DlyOff_Main
 16871 ;;		_setDelayOff_GO
 16872 ;;		_getDelayOff_GO
 16873 ;; This function uses a non-reentrant model
 16874 ;;
 16875                           
 16876                           
 16877                           ;psect for function _DelayOffPointSelect
 16878  1D65                     _DelayOffPointSelect:	
 16879                           
 16880                           ;incstack = 0
 16881                           ; Regs used in _DelayOffPointSelect: [wreg]
 16882                           ;DelayOffPointSelect@sw stored from wreg
 16883  1D65  0020               	movlb	0	; select bank0
 16884  1D66  00A1               	movwf	DelayOffPointSelect@sw
 16885                           
 16886                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16887  1D67  0821               	movf	DelayOffPointSelect@sw,w
 16888  1D68  3A01               	xorlw	1
 16889  1D69  1D03               	skipz
 16890  1D6A  2D70               	goto	l5998
 16891                           
 16892                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16893  1D6B  3053               	movlw	_DlySw1& (0+255)
 16894  1D6C  00A0               	movwf	??_DelayOffPointSelect
 16895  1D6D  0820               	movf	??_DelayOffPointSelect,w
 16896  1D6E  00F8               	movwf	_DelayOff
 16897                           
 16898                           ;DelayOff_B1.c: 11: }
 16899  1D6F  0008               	return
 16900  1D70                     l5998:	
 16901                           
 16902                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 16903  1D70  0821               	movf	DelayOffPointSelect@sw,w
 16904  1D71  3A02               	xorlw	2
 16905  1D72  1D03               	skipz
 16906  1D73  0008               	return
 16907                           
 16908                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 16909  1D74  3058               	movlw	_DlySw2& (0+255)
 16910  1D75  00A0               	movwf	??_DelayOffPointSelect
 16911  1D76  0820               	movf	??_DelayOffPointSelect,w
 16912  1D77  00F8               	movwf	_DelayOff
 16913  1D78  0008               	return
 16914  1D79                     __end_of_DelayOffPointSelect:	
 16915                           
 16916                           	psect	text110
 16917  1DB6                     __ptext110:	
 16918 ;; *************** function _CC2500_PowerOnInitial *****************
 16919 ;; Defined at:
 16920 ;;		line 122 in file "../src/CC2500_B1.c"
 16921 ;; Parameters:    Size  Location     Type
 16922 ;;		None
 16923 ;; Auto vars:     Size  Location     Type
 16924 ;;		None
 16925 ;; Return value:  Size  Location     Type
 16926 ;;		None               void
 16927 ;; Registers used:
 16928 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16929 ;; Tracked objects:
 16930 ;;		On entry : 0/0
 16931 ;;		On exit  : 0/0
 16932 ;;		Unchanged: 0/0
 16933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16938 ;;Total ram usage:        0 bytes
 16939 ;; Hardware stack levels used:    1
 16940 ;; Hardware stack levels required when called:    8
 16941 ;; This function calls:
 16942 ;;		_CC2500_ClearRXFIFO
 16943 ;;		_CC2500_ClearTXFIFO
 16944 ;;		_CC2500_FrequencyCabr
 16945 ;;		_CC2500_InitPATable
 16946 ;;		_CC2500_InitSetREG
 16947 ;;		_CC2500_PowerRST
 16948 ;;		_CC2500_SIDLEMode
 16949 ;; This function is called by:
 16950 ;;		_main
 16951 ;; This function uses a non-reentrant model
 16952 ;;
 16953                           
 16954                           
 16955                           ;psect for function _CC2500_PowerOnInitial
 16956  1DB6                     _CC2500_PowerOnInitial:	
 16957                           
 16958                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 16959                           
 16960                           ;incstack = 0
 16961                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16962  1DB6  3187  27B9  319D   	fcall	_CC2500_PowerRST
 16963                           
 16964                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 16965  1DB9  3191  210A  319D   	fcall	_CC2500_InitSetREG
 16966                           
 16967                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 16968  1DBC  319E  26DA  319D   	fcall	_CC2500_InitPATable
 16969                           
 16970                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 16971  1DBF  319B  233E  319D   	fcall	_CC2500_ClearTXFIFO
 16972                           
 16973                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 16974  1DC2  319B  233A  319D   	fcall	_CC2500_ClearRXFIFO
 16975                           
 16976                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 16977  1DC5  319B  23B8  319D   	fcall	_CC2500_FrequencyCabr
 16978                           
 16979                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 16980  1DC8  319B  2342         	fcall	_CC2500_SIDLEMode
 16981  1DCA  0008               	return
 16982  1DCB                     __end_of_CC2500_PowerOnInitial:	
 16983                           
 16984                           	psect	text111
 16985  1B42                     __ptext111:	
 16986 ;; *************** function _CC2500_SIDLEMode *****************
 16987 ;; Defined at:
 16988 ;;		line 212 in file "../src/CC2500_B1.c"
 16989 ;; Parameters:    Size  Location     Type
 16990 ;;		None
 16991 ;; Auto vars:     Size  Location     Type
 16992 ;;		None
 16993 ;; Return value:  Size  Location     Type
 16994 ;;		None               void
 16995 ;; Registers used:
 16996 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16997 ;; Tracked objects:
 16998 ;;		On entry : 0/0
 16999 ;;		On exit  : 0/0
 17000 ;;		Unchanged: 0/0
 17001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17006 ;;Total ram usage:        0 bytes
 17007 ;; Hardware stack levels used:    1
 17008 ;; Hardware stack levels required when called:    7
 17009 ;; This function calls:
 17010 ;;		_CC2500_WriteCommand
 17011 ;; This function is called by:
 17012 ;;		_CC2500_PowerOnInitial
 17013 ;; This function uses a non-reentrant model
 17014 ;;
 17015                           
 17016                           
 17017                           ;psect for function _CC2500_SIDLEMode
 17018  1B42                     _CC2500_SIDLEMode:	
 17019                           
 17020                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 17021                           
 17022                           ;incstack = 0
 17023                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17024  1B42  3036               	movlw	54
 17025  1B43  319E  2639         	fcall	_CC2500_WriteCommand
 17026  1B45  0008               	return
 17027  1B46                     __end_of_CC2500_SIDLEMode:	
 17028                           
 17029                           	psect	text112
 17030  07B9                     __ptext112:	
 17031 ;; *************** function _CC2500_PowerRST *****************
 17032 ;; Defined at:
 17033 ;;		line 135 in file "../src/CC2500_B1.c"
 17034 ;; Parameters:    Size  Location     Type
 17035 ;;		None
 17036 ;; Auto vars:     Size  Location     Type
 17037 ;;		None
 17038 ;; Return value:  Size  Location     Type
 17039 ;;		None               void
 17040 ;; Registers used:
 17041 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17042 ;; Tracked objects:
 17043 ;;		On entry : 0/0
 17044 ;;		On exit  : 0/0
 17045 ;;		Unchanged: 0/0
 17046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17049 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17050 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17051 ;;Total ram usage:        1 bytes
 17052 ;; Hardware stack levels used:    1
 17053 ;; Hardware stack levels required when called:    6
 17054 ;; This function calls:
 17055 ;;		_CC2500_WriteByte
 17056 ;;		_DelayTime_1us
 17057 ;;		_Timeout_Counter
 17058 ;;		_set_TimeoutCleared
 17059 ;; This function is called by:
 17060 ;;		_CC2500_PowerOnInitial
 17061 ;; This function uses a non-reentrant model
 17062 ;;
 17063                           
 17064                           
 17065                           ;psect for function _CC2500_PowerRST
 17066  07B9                     _CC2500_PowerRST:	
 17067                           
 17068                           ;CC2500_B1.c: 136: RC1 = 0;
 17069                           
 17070                           ;incstack = 0
 17071                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17072  07B9  0020               	movlb	0	; select bank0
 17073  07BA  108E               	bcf	14,1	;volatile
 17074                           
 17075                           ;CC2500_B1.c: 137: RC0 = 0;
 17076  07BB  100E               	bcf	14,0	;volatile
 17077                           
 17078                           ;CC2500_B1.c: 138: RC4 = 1;
 17079  07BC  160E               	bsf	14,4	;volatile
 17080                           
 17081                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 17082  07BD  300A               	movlw	10
 17083  07BE  00A0               	movwf	DelayTime_1us@count
 17084  07BF  3000               	movlw	0
 17085  07C0  00A1               	movwf	DelayTime_1us@count+1
 17086  07C1  3190  2094  3187   	fcall	_DelayTime_1us
 17087                           
 17088                           ;CC2500_B1.c: 140: RC4 = 0;
 17089  07C4  0020               	movlb	0	; select bank0
 17090  07C5  120E               	bcf	14,4	;volatile
 17091                           
 17092                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 17093  07C6  300A               	movlw	10
 17094  07C7  00A0               	movwf	DelayTime_1us@count
 17095  07C8  3000               	movlw	0
 17096  07C9  00A1               	movwf	DelayTime_1us@count+1
 17097  07CA  3190  2094  3187   	fcall	_DelayTime_1us
 17098                           
 17099                           ;CC2500_B1.c: 142: RC4 = 1;
 17100  07CD  0020               	movlb	0	; select bank0
 17101  07CE  160E               	bsf	14,4	;volatile
 17102                           
 17103                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 17104  07CF  3028               	movlw	40
 17105  07D0  00A0               	movwf	DelayTime_1us@count
 17106  07D1  3000               	movlw	0
 17107  07D2  00A1               	movwf	DelayTime_1us@count+1
 17108  07D3  3190  2094  3187   	fcall	_DelayTime_1us
 17109                           
 17110                           ;CC2500_B1.c: 144: RC4 = 0;
 17111  07D6  0020               	movlb	0	; select bank0
 17112  07D7  120E               	bcf	14,4	;volatile
 17113                           
 17114                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 17115  07D8  3030               	movlw	48
 17116  07D9  00A6               	movwf	??_CC2500_PowerRST
 17117  07DA  0826               	movf	??_CC2500_PowerRST,w
 17118  07DB  00FB               	movwf	_SPI0Buffer
 17119                           
 17120                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 17121  07DC  2FE0               	goto	l7046
 17122  07DD                     l7044:	
 17123                           
 17124                           ;CC2500_B1.c: 147: Timeout_Counter();
 17125  07DD  319D  25A1  3187   	fcall	_Timeout_Counter
 17126  07E0                     l7046:	
 17127  07E0  0020               	movlb	0	; select bank0
 17128  07E1  1D0E               	btfss	14,2	;volatile
 17129  07E2  2FE6               	goto	l7050
 17130  07E3  0021               	movlb	1	; select bank1
 17131  07E4  1D2D               	btfss	(_myMain^(0+128)+13),2
 17132  07E5  2FDD               	goto	l7044
 17133  07E6                     l7050:	
 17134                           
 17135                           ;CC2500_B1.c: 148: };
 17136                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 17137  07E6  319B  2346  3187   	fcall	_set_TimeoutCleared
 17138                           
 17139                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 17140  07E9  319D  2551  3187   	fcall	_CC2500_WriteByte
 17141                           
 17142                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 17143  07EC  2FF0               	goto	l7056
 17144  07ED                     l7054:	
 17145                           
 17146                           ;CC2500_B1.c: 152: Timeout_Counter();
 17147  07ED  319D  25A1  3187   	fcall	_Timeout_Counter
 17148  07F0                     l7056:	
 17149  07F0  0020               	movlb	0	; select bank0
 17150  07F1  1D0E               	btfss	14,2	;volatile
 17151  07F2  2FF6               	goto	l7060
 17152  07F3  0021               	movlb	1	; select bank1
 17153  07F4  1D2D               	btfss	(_myMain^(0+128)+13),2
 17154  07F5  2FED               	goto	l7054
 17155  07F6                     l7060:	
 17156                           
 17157                           ;CC2500_B1.c: 153: };
 17158                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 17159  07F6  319B  2346         	fcall	_set_TimeoutCleared
 17160                           
 17161                           ;CC2500_B1.c: 155: RC0 = 0;
 17162  07F8  0020               	movlb	0	; select bank0
 17163  07F9  100E               	bcf	14,0	;volatile
 17164                           
 17165                           ;CC2500_B1.c: 156: RC4 = 1;
 17166  07FA  160E               	bsf	14,4	;volatile
 17167  07FB  0008               	return
 17168  07FC                     __end_of_CC2500_PowerRST:	
 17169                           
 17170                           	psect	text113
 17171  110A                     __ptext113:	
 17172 ;; *************** function _CC2500_InitSetREG *****************
 17173 ;; Defined at:
 17174 ;;		line 162 in file "../src/CC2500_B1.c"
 17175 ;; Parameters:    Size  Location     Type
 17176 ;;		None
 17177 ;; Auto vars:     Size  Location     Type
 17178 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17179 ;;  temp2           1    7[BANK0 ] unsigned char 
 17180 ;;  temp1           1    6[BANK0 ] unsigned char 
 17181 ;; Return value:  Size  Location     Type
 17182 ;;		None               void
 17183 ;; Registers used:
 17184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17185 ;; Tracked objects:
 17186 ;;		On entry : 0/0
 17187 ;;		On exit  : 0/0
 17188 ;;		Unchanged: 0/0
 17189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17191 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17192 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17193 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17194 ;;Total ram usage:        4 bytes
 17195 ;; Hardware stack levels used:    1
 17196 ;; Hardware stack levels required when called:    7
 17197 ;; This function calls:
 17198 ;;		_CC2500_WriteREG
 17199 ;; This function is called by:
 17200 ;;		_CC2500_PowerOnInitial
 17201 ;; This function uses a non-reentrant model
 17202 ;;
 17203                           
 17204                           
 17205                           ;psect for function _CC2500_InitSetREG
 17206  110A                     _CC2500_InitSetREG:	
 17207                           
 17208                           ;CC2500_B1.c: 163: unsigned char loop_c;
 17209                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 17210                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 17211                           
 17212                           ;incstack = 0
 17213                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17214  110A  0020               	movlb	0	; select bank0
 17215  110B  01A8               	clrf	CC2500_InitSetREG@loop_c
 17216  110C                     L10:	
 17217  110C  302F               	movlw	47
 17218  110D  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17219  110E  1803               	btfsc	3,0
 17220  110F  0008               	return
 17221                           
 17222                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 17223  1110  0828               	movf	CC2500_InitSetREG@loop_c,w
 17224  1111  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17225  1112  0084               	movwf	4
 17226  1113  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17227  1114  1803               	skipnc
 17228  1115  3E01               	addlw	1
 17229  1116  0085               	movwf	5
 17230  1117  0800               	movf	0,w	;code access
 17231  1118  00A5               	movwf	??_CC2500_InitSetREG
 17232  1119  0825               	movf	??_CC2500_InitSetREG,w
 17233  111A  00A6               	movwf	CC2500_InitSetREG@temp1
 17234                           
 17235                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 17236  111B  0828               	movf	CC2500_InitSetREG@loop_c,w
 17237  111C  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17238  111D  0084               	movwf	4
 17239  111E  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17240  111F  1803               	skipnc
 17241  1120  3E01               	addlw	1
 17242  1121  0085               	movwf	5
 17243  1122  0800               	movf	0,w	;code access
 17244  1123  00A5               	movwf	??_CC2500_InitSetREG
 17245  1124  0825               	movf	??_CC2500_InitSetREG,w
 17246  1125  00A7               	movwf	CC2500_InitSetREG@temp2
 17247                           
 17248                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 17249  1126  0827               	movf	CC2500_InitSetREG@temp2,w
 17250  1127  00A5               	movwf	??_CC2500_InitSetREG
 17251  1128  0825               	movf	??_CC2500_InitSetREG,w
 17252  1129  00A2               	movwf	CC2500_WriteREG@value
 17253  112A  0826               	movf	CC2500_InitSetREG@temp1,w
 17254  112B  319F  2778  3191   	fcall	_CC2500_WriteREG
 17255  112E  3001               	movlw	1
 17256  112F  0020               	movlb	0	; select bank0
 17257  1130  00A5               	movwf	??_CC2500_InitSetREG
 17258  1131  0825               	movf	??_CC2500_InitSetREG,w
 17259  1132  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17260  1133  290C               	goto	L10
 17261  1134                     __end_of_CC2500_InitSetREG:	
 17262                           
 17263                           	psect	text114
 17264  1EDA                     __ptext114:	
 17265 ;; *************** function _CC2500_InitPATable *****************
 17266 ;; Defined at:
 17267 ;;		line 177 in file "../src/CC2500_B1.c"
 17268 ;; Parameters:    Size  Location     Type
 17269 ;;		None
 17270 ;; Auto vars:     Size  Location     Type
 17271 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17272 ;;  temp            1    6[BANK0 ] unsigned char 
 17273 ;; Return value:  Size  Location     Type
 17274 ;;		None               void
 17275 ;; Registers used:
 17276 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17277 ;; Tracked objects:
 17278 ;;		On entry : 0/0
 17279 ;;		On exit  : 0/0
 17280 ;;		Unchanged: 0/0
 17281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17283 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17284 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17285 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17286 ;;Total ram usage:        3 bytes
 17287 ;; Hardware stack levels used:    1
 17288 ;; Hardware stack levels required when called:    7
 17289 ;; This function calls:
 17290 ;;		_CC2500_WriteREG
 17291 ;; This function is called by:
 17292 ;;		_CC2500_PowerOnInitial
 17293 ;; This function uses a non-reentrant model
 17294 ;;
 17295                           
 17296                           
 17297                           ;psect for function _CC2500_InitPATable
 17298  1EDA                     _CC2500_InitPATable:	
 17299                           
 17300                           ;CC2500_B1.c: 178: unsigned char loop_d;
 17301                           ;CC2500_B1.c: 179: unsigned char temp;
 17302                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 17303                           
 17304                           ;incstack = 0
 17305                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17306  1EDA  0020               	movlb	0	; select bank0
 17307  1EDB  01A7               	clrf	CC2500_InitPATable@loop_d
 17308  1EDC                     L11:	
 17309  1EDC  3008               	movlw	8
 17310  1EDD  0227               	subwf	CC2500_InitPATable@loop_d,w
 17311  1EDE  1803               	btfsc	3,0
 17312  1EDF  0008               	return
 17313                           
 17314                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 17315  1EE0  0827               	movf	CC2500_InitPATable@loop_d,w
 17316  1EE1  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17317  1EE2  0084               	movwf	4
 17318  1EE3  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17319  1EE4  1803               	skipnc
 17320  1EE5  3E01               	addlw	1
 17321  1EE6  0085               	movwf	5
 17322  1EE7  0800               	movf	0,w	;code access
 17323  1EE8  00A5               	movwf	??_CC2500_InitPATable
 17324  1EE9  0825               	movf	??_CC2500_InitPATable,w
 17325  1EEA  00A6               	movwf	CC2500_InitPATable@temp
 17326                           
 17327                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 17328  1EEB  0826               	movf	CC2500_InitPATable@temp,w
 17329  1EEC  00A5               	movwf	??_CC2500_InitPATable
 17330  1EED  0825               	movf	??_CC2500_InitPATable,w
 17331  1EEE  00A2               	movwf	CC2500_WriteREG@value
 17332  1EEF  303E               	movlw	62
 17333  1EF0  319F  2778  319E   	fcall	_CC2500_WriteREG
 17334  1EF3  3001               	movlw	1
 17335  1EF4  0020               	movlb	0	; select bank0
 17336  1EF5  00A5               	movwf	??_CC2500_InitPATable
 17337  1EF6  0825               	movf	??_CC2500_InitPATable,w
 17338  1EF7  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17339  1EF8  2EDC               	goto	L11
 17340  1EF9                     __end_of_CC2500_InitPATable:	
 17341                           
 17342                           	psect	text115
 17343  1F78                     __ptext115:	
 17344 ;; *************** function _CC2500_WriteREG *****************
 17345 ;; Defined at:
 17346 ;;		line 254 in file "../src/CC2500_B1.c"
 17347 ;; Parameters:    Size  Location     Type
 17348 ;;  w_addr          1    wreg     unsigned char 
 17349 ;;  value           1    2[BANK0 ] unsigned char 
 17350 ;; Auto vars:     Size  Location     Type
 17351 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17352 ;; Return value:  Size  Location     Type
 17353 ;;		None               void
 17354 ;; Registers used:
 17355 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17356 ;; Tracked objects:
 17357 ;;		On entry : 0/0
 17358 ;;		On exit  : 0/0
 17359 ;;		Unchanged: 0/0
 17360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17361 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17362 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17363 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17364 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17365 ;;Total ram usage:        3 bytes
 17366 ;; Hardware stack levels used:    1
 17367 ;; Hardware stack levels required when called:    6
 17368 ;; This function calls:
 17369 ;;		_CC2500_WriteByte
 17370 ;;		_Timeout_Counter
 17371 ;;		_set_TimeoutCleared
 17372 ;; This function is called by:
 17373 ;;		_CC2500_InitSetREG
 17374 ;;		_CC2500_InitPATable
 17375 ;; This function uses a non-reentrant model
 17376 ;;
 17377                           
 17378                           
 17379                           ;psect for function _CC2500_WriteREG
 17380  1F78                     _CC2500_WriteREG:	
 17381                           
 17382                           ;incstack = 0
 17383                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17384                           ;CC2500_WriteREG@w_addr stored from wreg
 17385  1F78  0020               	movlb	0	; select bank0
 17386  1F79  00A4               	movwf	CC2500_WriteREG@w_addr
 17387                           
 17388                           ;CC2500_B1.c: 255: RC4 = 0;
 17389  1F7A  120E               	bcf	14,4	;volatile
 17390                           
 17391                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 17392  1F7B  0824               	movf	CC2500_WriteREG@w_addr,w
 17393  1F7C  00A3               	movwf	??_CC2500_WriteREG
 17394  1F7D  0823               	movf	??_CC2500_WriteREG,w
 17395  1F7E  00FB               	movwf	_SPI0Buffer
 17396                           
 17397                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 17398  1F7F  2F83               	goto	l6718
 17399  1F80                     l6716:	
 17400                           
 17401                           ;CC2500_B1.c: 258: Timeout_Counter();
 17402  1F80  319D  25A1  319F   	fcall	_Timeout_Counter
 17403  1F83                     l6718:	
 17404  1F83  0020               	movlb	0	; select bank0
 17405  1F84  1D0E               	btfss	14,2	;volatile
 17406  1F85  2F89               	goto	l6722
 17407  1F86  0021               	movlb	1	; select bank1
 17408  1F87  1D2D               	btfss	(_myMain^(0+128)+13),2
 17409  1F88  2F80               	goto	l6716
 17410  1F89                     l6722:	
 17411                           
 17412                           ;CC2500_B1.c: 259: };
 17413                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 17414  1F89  319B  2346  319F   	fcall	_set_TimeoutCleared
 17415                           
 17416                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 17417  1F8C  319D  2551  319F   	fcall	_CC2500_WriteByte
 17418                           
 17419                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 17420  1F8F  0020               	movlb	0	; select bank0
 17421  1F90  0822               	movf	CC2500_WriteREG@value,w
 17422  1F91  00A3               	movwf	??_CC2500_WriteREG
 17423  1F92  0823               	movf	??_CC2500_WriteREG,w
 17424  1F93  00FB               	movwf	_SPI0Buffer
 17425                           
 17426                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 17427  1F94  319D  2551         	fcall	_CC2500_WriteByte
 17428                           
 17429                           ;CC2500_B1.c: 265: RC4 = 1;
 17430  1F96  0020               	movlb	0	; select bank0
 17431  1F97  160E               	bsf	14,4	;volatile
 17432  1F98  0008               	return
 17433  1F99                     __end_of_CC2500_WriteREG:	
 17434                           
 17435                           	psect	text116
 17436  1BB8                     __ptext116:	
 17437 ;; *************** function _CC2500_FrequencyCabr *****************
 17438 ;; Defined at:
 17439 ;;		line 204 in file "../src/CC2500_B1.c"
 17440 ;; Parameters:    Size  Location     Type
 17441 ;;		None
 17442 ;; Auto vars:     Size  Location     Type
 17443 ;;		None
 17444 ;; Return value:  Size  Location     Type
 17445 ;;		None               void
 17446 ;; Registers used:
 17447 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17448 ;; Tracked objects:
 17449 ;;		On entry : 0/0
 17450 ;;		On exit  : 0/0
 17451 ;;		Unchanged: 0/0
 17452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17457 ;;Total ram usage:        0 bytes
 17458 ;; Hardware stack levels used:    1
 17459 ;; Hardware stack levels required when called:    7
 17460 ;; This function calls:
 17461 ;;		_CC2500_WriteCommand
 17462 ;;		_DelayTime_1us
 17463 ;; This function is called by:
 17464 ;;		_CC2500_PowerOnInitial
 17465 ;; This function uses a non-reentrant model
 17466 ;;
 17467                           
 17468                           
 17469                           ;psect for function _CC2500_FrequencyCabr
 17470  1BB8                     _CC2500_FrequencyCabr:	
 17471                           
 17472                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 17473                           
 17474                           ;incstack = 0
 17475                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17476  1BB8  3033               	movlw	51
 17477  1BB9  319E  2639  319B   	fcall	_CC2500_WriteCommand
 17478                           
 17479                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 17480  1BBC  30E8               	movlw	232
 17481  1BBD  0020               	movlb	0	; select bank0
 17482  1BBE  00A0               	movwf	DelayTime_1us@count
 17483  1BBF  3003               	movlw	3
 17484  1BC0  00A1               	movwf	DelayTime_1us@count+1
 17485  1BC1  3190  2094         	fcall	_DelayTime_1us
 17486  1BC3  0008               	return
 17487  1BC4                     __end_of_CC2500_FrequencyCabr:	
 17488                           
 17489                           	psect	text117
 17490  1094                     __ptext117:	
 17491 ;; *************** function _DelayTime_1us *****************
 17492 ;; Defined at:
 17493 ;;		line 323 in file "../src/CC2500_B1.c"
 17494 ;; Parameters:    Size  Location     Type
 17495 ;;  count           2    0[BANK0 ] int 
 17496 ;; Auto vars:     Size  Location     Type
 17497 ;;  j               2    4[BANK0 ] unsigned int 
 17498 ;;  i               2    2[BANK0 ] unsigned int 
 17499 ;; Return value:  Size  Location     Type
 17500 ;;		None               void
 17501 ;; Registers used:
 17502 ;;		wreg, status,2
 17503 ;; Tracked objects:
 17504 ;;		On entry : 0/0
 17505 ;;		On exit  : 0/0
 17506 ;;		Unchanged: 0/0
 17507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17508 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17509 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17511 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17512 ;;Total ram usage:        6 bytes
 17513 ;; Hardware stack levels used:    1
 17514 ;; Hardware stack levels required when called:    5
 17515 ;; This function calls:
 17516 ;;		Nothing
 17517 ;; This function is called by:
 17518 ;;		_CC2500_PowerRST
 17519 ;;		_CC2500_FrequencyCabr
 17520 ;; This function uses a non-reentrant model
 17521 ;;
 17522                           
 17523                           
 17524                           ;psect for function _DelayTime_1us
 17525  1094                     _DelayTime_1us:	
 17526                           
 17527                           ;CC2500_B1.c: 324: unsigned int i, j;
 17528                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 17529                           
 17530                           ;incstack = 0
 17531                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17532  1094  3001               	movlw	1
 17533  1095  0020               	movlb	0	; select bank0
 17534  1096  00A2               	movwf	DelayTime_1us@i
 17535  1097  3000               	movlw	0
 17536  1098  00A3               	movwf	DelayTime_1us@i+1
 17537  1099                     l374:	
 17538  1099  0821               	movf	DelayTime_1us@count+1,w
 17539  109A  0223               	subwf	DelayTime_1us@i+1,w
 17540  109B  1D03               	skipz
 17541  109C  289F               	goto	u5905
 17542  109D  0820               	movf	DelayTime_1us@count,w
 17543  109E  0222               	subwf	DelayTime_1us@i,w
 17544  109F                     u5905:	
 17545  109F  1803               	btfsc	3,0
 17546  10A0  0008               	return
 17547                           
 17548                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 17549  10A1  01A4               	clrf	DelayTime_1us@j
 17550  10A2  01A5               	clrf	DelayTime_1us@j+1
 17551  10A3  3000               	movlw	0
 17552  10A4  0225               	subwf	DelayTime_1us@j+1,w
 17553  10A5  3002               	movlw	2
 17554  10A6  1903               	skipnz
 17555  10A7  0224               	subwf	DelayTime_1us@j,w
 17556  10A8  1803               	btfsc	3,0
 17557  10A9  28B5               	goto	l6710
 17558  10AA                     l6708:	
 17559  10AA  3001               	movlw	1
 17560  10AB  07A4               	addwf	DelayTime_1us@j,f
 17561  10AC  3000               	movlw	0
 17562  10AD  3DA5               	addwfc	DelayTime_1us@j+1,f
 17563  10AE  3000               	movlw	0
 17564  10AF  0225               	subwf	DelayTime_1us@j+1,w
 17565  10B0  3002               	movlw	2
 17566  10B1  1903               	skipnz
 17567  10B2  0224               	subwf	DelayTime_1us@j,w
 17568  10B3  1C03               	skipc
 17569  10B4  28AA               	goto	l6708
 17570  10B5                     l6710:	
 17571  10B5  3001               	movlw	1
 17572  10B6  07A2               	addwf	DelayTime_1us@i,f
 17573  10B7  3000               	movlw	0
 17574  10B8  3DA3               	addwfc	DelayTime_1us@i+1,f
 17575  10B9  2899               	goto	l374
 17576  10BA                     __end_of_DelayTime_1us:	
 17577                           
 17578                           	psect	text118
 17579  1B3E                     __ptext118:	
 17580 ;; *************** function _CC2500_ClearTXFIFO *****************
 17581 ;; Defined at:
 17582 ;;		line 190 in file "../src/CC2500_B1.c"
 17583 ;; Parameters:    Size  Location     Type
 17584 ;;		None
 17585 ;; Auto vars:     Size  Location     Type
 17586 ;;		None
 17587 ;; Return value:  Size  Location     Type
 17588 ;;		None               void
 17589 ;; Registers used:
 17590 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17591 ;; Tracked objects:
 17592 ;;		On entry : 0/0
 17593 ;;		On exit  : 0/0
 17594 ;;		Unchanged: 0/0
 17595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17600 ;;Total ram usage:        0 bytes
 17601 ;; Hardware stack levels used:    1
 17602 ;; Hardware stack levels required when called:    7
 17603 ;; This function calls:
 17604 ;;		_CC2500_WriteCommand
 17605 ;; This function is called by:
 17606 ;;		_CC2500_PowerOnInitial
 17607 ;; This function uses a non-reentrant model
 17608 ;;
 17609                           
 17610                           
 17611                           ;psect for function _CC2500_ClearTXFIFO
 17612  1B3E                     _CC2500_ClearTXFIFO:	
 17613                           
 17614                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 17615                           
 17616                           ;incstack = 0
 17617                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17618  1B3E  303B               	movlw	59
 17619  1B3F  319E  2639         	fcall	_CC2500_WriteCommand
 17620  1B41  0008               	return
 17621  1B42                     __end_of_CC2500_ClearTXFIFO:	
 17622                           
 17623                           	psect	text119
 17624  1B3A                     __ptext119:	
 17625 ;; *************** function _CC2500_ClearRXFIFO *****************
 17626 ;; Defined at:
 17627 ;;		line 197 in file "../src/CC2500_B1.c"
 17628 ;; Parameters:    Size  Location     Type
 17629 ;;		None
 17630 ;; Auto vars:     Size  Location     Type
 17631 ;;		None
 17632 ;; Return value:  Size  Location     Type
 17633 ;;		None               void
 17634 ;; Registers used:
 17635 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17636 ;; Tracked objects:
 17637 ;;		On entry : 0/0
 17638 ;;		On exit  : 0/0
 17639 ;;		Unchanged: 0/0
 17640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17645 ;;Total ram usage:        0 bytes
 17646 ;; Hardware stack levels used:    1
 17647 ;; Hardware stack levels required when called:    7
 17648 ;; This function calls:
 17649 ;;		_CC2500_WriteCommand
 17650 ;; This function is called by:
 17651 ;;		_CC2500_PowerOnInitial
 17652 ;; This function uses a non-reentrant model
 17653 ;;
 17654                           
 17655                           
 17656                           ;psect for function _CC2500_ClearRXFIFO
 17657  1B3A                     _CC2500_ClearRXFIFO:	
 17658                           
 17659                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 17660                           
 17661                           ;incstack = 0
 17662                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17663  1B3A  303A               	movlw	58
 17664  1B3B  319E  2639         	fcall	_CC2500_WriteCommand
 17665  1B3D  0008               	return
 17666  1B3E                     __end_of_CC2500_ClearRXFIFO:	
 17667                           
 17668                           	psect	text120
 17669  1E39                     __ptext120:	
 17670 ;; *************** function _CC2500_WriteCommand *****************
 17671 ;; Defined at:
 17672 ;;		line 288 in file "../src/CC2500_B1.c"
 17673 ;; Parameters:    Size  Location     Type
 17674 ;;  command         1    wreg     unsigned char 
 17675 ;; Auto vars:     Size  Location     Type
 17676 ;;  command         1    3[BANK0 ] unsigned char 
 17677 ;; Return value:  Size  Location     Type
 17678 ;;		None               void
 17679 ;; Registers used:
 17680 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17681 ;; Tracked objects:
 17682 ;;		On entry : 0/0
 17683 ;;		On exit  : 0/0
 17684 ;;		Unchanged: 0/0
 17685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17687 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17688 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17689 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17690 ;;Total ram usage:        2 bytes
 17691 ;; Hardware stack levels used:    1
 17692 ;; Hardware stack levels required when called:    6
 17693 ;; This function calls:
 17694 ;;		_CC2500_WriteByte
 17695 ;;		_Timeout_Counter
 17696 ;;		_set_TimeoutCleared
 17697 ;; This function is called by:
 17698 ;;		_CC2500_TxData
 17699 ;;		_CC2500_ClearTXFIFO
 17700 ;;		_CC2500_ClearRXFIFO
 17701 ;;		_CC2500_FrequencyCabr
 17702 ;;		_CC2500_SIDLEMode
 17703 ;;		_setRF_Main
 17704 ;;		_RF_RxDisable
 17705 ;; This function uses a non-reentrant model
 17706 ;;
 17707                           
 17708                           
 17709                           ;psect for function _CC2500_WriteCommand
 17710  1E39                     _CC2500_WriteCommand:	
 17711                           
 17712                           ;incstack = 0
 17713                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17714                           ;CC2500_WriteCommand@command stored from wreg
 17715  1E39  0020               	movlb	0	; select bank0
 17716  1E3A  00A3               	movwf	CC2500_WriteCommand@command
 17717                           
 17718                           ;CC2500_B1.c: 289: RC4 = 0;
 17719  1E3B  120E               	bcf	14,4	;volatile
 17720                           
 17721                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 17722  1E3C  0823               	movf	CC2500_WriteCommand@command,w
 17723  1E3D  00A2               	movwf	??_CC2500_WriteCommand
 17724  1E3E  0822               	movf	??_CC2500_WriteCommand,w
 17725  1E3F  00FB               	movwf	_SPI0Buffer
 17726                           
 17727                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 17728  1E40  2E44               	goto	l6414
 17729  1E41                     l6412:	
 17730                           
 17731                           ;CC2500_B1.c: 293: Timeout_Counter();
 17732  1E41  319D  25A1  319E   	fcall	_Timeout_Counter
 17733  1E44                     l6414:	
 17734  1E44  0020               	movlb	0	; select bank0
 17735  1E45  1D0E               	btfss	14,2	;volatile
 17736  1E46  2E4A               	goto	l6418
 17737  1E47  0021               	movlb	1	; select bank1
 17738  1E48  1D2D               	btfss	(_myMain^(0+128)+13),2
 17739  1E49  2E41               	goto	l6412
 17740  1E4A                     l6418:	
 17741                           
 17742                           ;CC2500_B1.c: 294: };
 17743                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 17744  1E4A  319B  2346  319E   	fcall	_set_TimeoutCleared
 17745                           
 17746                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 17747  1E4D  319D  2551         	fcall	_CC2500_WriteByte
 17748                           
 17749                           ;CC2500_B1.c: 298: RC4 = 1;
 17750  1E4F  0020               	movlb	0	; select bank0
 17751  1E50  160E               	bsf	14,4	;volatile
 17752  1E51  0008               	return
 17753  1E52                     __end_of_CC2500_WriteCommand:	
 17754                           
 17755                           	psect	text121
 17756  1B46                     __ptext121:	
 17757 ;; *************** function _set_TimeoutCleared *****************
 17758 ;; Defined at:
 17759 ;;		line 272 in file "../src/main_B1.c"
 17760 ;; Parameters:    Size  Location     Type
 17761 ;;		None
 17762 ;; Auto vars:     Size  Location     Type
 17763 ;;		None
 17764 ;; Return value:  Size  Location     Type
 17765 ;;		None               void
 17766 ;; Registers used:
 17767 ;;		status,2
 17768 ;; Tracked objects:
 17769 ;;		On entry : 0/0
 17770 ;;		On exit  : 0/0
 17771 ;;		Unchanged: 0/0
 17772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17777 ;;Total ram usage:        0 bytes
 17778 ;; Hardware stack levels used:    1
 17779 ;; Hardware stack levels required when called:    5
 17780 ;; This function calls:
 17781 ;;		Nothing
 17782 ;; This function is called by:
 17783 ;;		_CC2500_TxData
 17784 ;;		_CC2500_RxData
 17785 ;;		_CC2500_PowerRST
 17786 ;;		_CC2500_WriteREG
 17787 ;;		_CC2500_WriteCommand
 17788 ;;		_CC2500_ReadStatus
 17789 ;;		_getAD
 17790 ;;		_TouchPower
 17791 ;;		_CC2500_ReadREG
 17792 ;; This function uses a non-reentrant model
 17793 ;;
 17794                           
 17795                           
 17796                           ;psect for function _set_TimeoutCleared
 17797  1B46                     _set_TimeoutCleared:	
 17798                           
 17799                           ;main_B1.c: 273: myMain.Timeout = 0;
 17800                           
 17801                           ;incstack = 0
 17802                           ; Regs used in _set_TimeoutCleared: [status,2]
 17803  1B46  0021               	movlb	1	; select bank1
 17804  1B47  112D               	bcf	(_myMain^(0+128)+13),2
 17805                           
 17806                           ;main_B1.c: 274: myMain.Timeout_Counter = 0;
 17807  1B48  01AE               	clrf	(_myMain^(0+128)+14)
 17808  1B49  01AF               	clrf	((_myMain+1)^(0+128)+14)
 17809  1B4A  0008               	return
 17810  1B4B                     __end_of_set_TimeoutCleared:	
 17811                           
 17812                           	psect	text122
 17813  1DA1                     __ptext122:	
 17814 ;; *************** function _Timeout_Counter *****************
 17815 ;; Defined at:
 17816 ;;		line 263 in file "../src/main_B1.c"
 17817 ;; Parameters:    Size  Location     Type
 17818 ;;		None
 17819 ;; Auto vars:     Size  Location     Type
 17820 ;;		None
 17821 ;; Return value:  Size  Location     Type
 17822 ;;		None               void
 17823 ;; Registers used:
 17824 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17825 ;; Tracked objects:
 17826 ;;		On entry : 0/0
 17827 ;;		On exit  : 0/0
 17828 ;;		Unchanged: 0/0
 17829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17834 ;;Total ram usage:        0 bytes
 17835 ;; Hardware stack levels used:    1
 17836 ;; Hardware stack levels required when called:    5
 17837 ;; This function calls:
 17838 ;;		Nothing
 17839 ;; This function is called by:
 17840 ;;		_CC2500_TxData
 17841 ;;		_CC2500_RxData
 17842 ;;		_CC2500_PowerRST
 17843 ;;		_CC2500_WriteREG
 17844 ;;		_CC2500_WriteCommand
 17845 ;;		_CC2500_ReadStatus
 17846 ;;		_getAD
 17847 ;;		_TouchPower
 17848 ;;		_CC2500_ReadREG
 17849 ;; This function uses a non-reentrant model
 17850 ;;
 17851                           
 17852                           
 17853                           ;psect for function _Timeout_Counter
 17854  1DA1                     _Timeout_Counter:	
 17855                           
 17856                           ;main_B1.c: 264: myMain.Timeout_Counter++;
 17857                           
 17858                           ;incstack = 0
 17859                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17860  1DA1  3001               	movlw	1
 17861  1DA2  0021               	movlb	1	; select bank1
 17862  1DA3  07AE               	addwf	(_myMain^(0+128)+14),f
 17863  1DA4  3000               	movlw	0
 17864  1DA5  3DAF               	addwfc	((_myMain+1)^(0+128)+14),f
 17865                           
 17866                           ;main_B1.c: 265: if (myMain.Timeout_Counter == 10000) {
 17867  1DA6  300E               	movlw	14
 17868  1DA7  3EA0               	addlw	_myMain& (0+255)
 17869  1DA8  0086               	movwf	6
 17870  1DA9  0187               	clrf	7
 17871  1DAA  3F40               	moviw [0]fsr1
 17872  1DAB  3A10               	xorlw	16
 17873  1DAC  1D03               	skipz
 17874  1DAD  2DB0               	goto	u5255
 17875  1DAE  3F41               	moviw [1]fsr1
 17876  1DAF  3A27               	xorlw	39
 17877  1DB0                     u5255:	
 17878  1DB0  1D03               	skipz
 17879  1DB1  0008               	return
 17880                           
 17881                           ;main_B1.c: 266: myMain.Timeout_Counter = 0;
 17882  1DB2  01AE               	clrf	(_myMain^(0+128)+14)
 17883  1DB3  01AF               	clrf	((_myMain+1)^(0+128)+14)
 17884                           
 17885                           ;main_B1.c: 267: myMain.Timeout = 1;
 17886  1DB4  152D               	bsf	(_myMain^(0+128)+13),2
 17887  1DB5  0008               	return
 17888  1DB6                     __end_of_Timeout_Counter:	
 17889                           
 17890                           	psect	text123
 17891  1D51                     __ptext123:	
 17892 ;; *************** function _CC2500_WriteByte *****************
 17893 ;; Defined at:
 17894 ;;		line 222 in file "../src/CC2500_B1.c"
 17895 ;; Parameters:    Size  Location     Type
 17896 ;;		None
 17897 ;; Auto vars:     Size  Location     Type
 17898 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17899 ;; Return value:  Size  Location     Type
 17900 ;;		None               void
 17901 ;; Registers used:
 17902 ;;		wreg, status,2, status,0
 17903 ;; Tracked objects:
 17904 ;;		On entry : 0/0
 17905 ;;		On exit  : 0/0
 17906 ;;		Unchanged: 0/0
 17907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17909 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17910 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17911 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17912 ;;Total ram usage:        2 bytes
 17913 ;; Hardware stack levels used:    1
 17914 ;; Hardware stack levels required when called:    5
 17915 ;; This function calls:
 17916 ;;		Nothing
 17917 ;; This function is called by:
 17918 ;;		_CC2500_TxData
 17919 ;;		_CC2500_RxData
 17920 ;;		_CC2500_PowerRST
 17921 ;;		_CC2500_WriteREG
 17922 ;;		_CC2500_WriteCommand
 17923 ;;		_CC2500_ReadStatus
 17924 ;;		_CC2500_ReadREG
 17925 ;; This function uses a non-reentrant model
 17926 ;;
 17927                           
 17928                           
 17929                           ;psect for function _CC2500_WriteByte
 17930  1D51                     _CC2500_WriteByte:	
 17931                           
 17932                           ;CC2500_B1.c: 223: unsigned char loop_a;
 17933                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 17934                           
 17935                           ;incstack = 0
 17936                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17937  1D51  0020               	movlb	0	; select bank0
 17938  1D52  01A1               	clrf	CC2500_WriteByte@loop_a
 17939  1D53                     L12:	
 17940  1D53  3008               	movlw	8
 17941  1D54  0221               	subwf	CC2500_WriteByte@loop_a,w
 17942  1D55  1803               	btfsc	3,0
 17943  1D56  0008               	return
 17944                           
 17945                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 17946  1D57  1FFB               	btfss	_SPI0Buffer,7
 17947  1D58  2D5B               	goto	l330
 17948                           
 17949                           ;CC2500_B1.c: 226: RC0 = 1;
 17950  1D59  140E               	bsf	14,0	;volatile
 17951  1D5A  2D5C               	goto	l331
 17952  1D5B                     l330:	
 17953                           
 17954                           ;CC2500_B1.c: 227: else
 17955                           ;CC2500_B1.c: 228: RC0 = 0;
 17956  1D5B  100E               	bcf	14,0	;volatile
 17957  1D5C                     l331:	
 17958                           
 17959                           ;CC2500_B1.c: 229: RC1 = 1;
 17960  1D5C  148E               	bsf	14,1	;volatile
 17961                           
 17962                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 17963  1D5D  1003               	clrc
 17964  1D5E  0DFB               	rlf	_SPI0Buffer,f
 17965                           
 17966                           ;CC2500_B1.c: 231: RC1 = 0;
 17967  1D5F  108E               	bcf	14,1	;volatile
 17968  1D60  3001               	movlw	1
 17969  1D61  00A0               	movwf	??_CC2500_WriteByte
 17970  1D62  0820               	movf	??_CC2500_WriteByte,w
 17971  1D63  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17972  1D64  2D53               	goto	L12
 17973  1D65                     __end_of_CC2500_WriteByte:	
 17974                           
 17975                           	psect	text124
 17976  1465                     __ptext124:	
 17977 ;; *************** function _Buzzer_Main *****************
 17978 ;; Defined at:
 17979 ;;		line 46 in file "../src/Buzzer_B1.c"
 17980 ;; Parameters:    Size  Location     Type
 17981 ;;		None
 17982 ;; Auto vars:     Size  Location     Type
 17983 ;;		None
 17984 ;; Return value:  Size  Location     Type
 17985 ;;		None               void
 17986 ;; Registers used:
 17987 ;;		wreg, status,2, status,0
 17988 ;; Tracked objects:
 17989 ;;		On entry : 0/0
 17990 ;;		On exit  : 0/0
 17991 ;;		Unchanged: 0/0
 17992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17995 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17996 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17997 ;;Total ram usage:        1 bytes
 17998 ;; Hardware stack levels used:    1
 17999 ;; Hardware stack levels required when called:    5
 18000 ;; This function calls:
 18001 ;;		Nothing
 18002 ;; This function is called by:
 18003 ;;		_main
 18004 ;; This function uses a non-reentrant model
 18005 ;;
 18006                           
 18007                           
 18008                           ;psect for function _Buzzer_Main
 18009  1465                     _Buzzer_Main:	
 18010                           
 18011                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18012                           
 18013                           ;incstack = 0
 18014                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18015  1465  0021               	movlb	1	; select bank1
 18016  1466  1CB0               	btfss	_Buz1^(0+128),1
 18017  1467  0008               	return
 18018                           
 18019                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18020  1468  3001               	movlw	1
 18021  1469  07B1               	addwf	(_Buz1^(0+128)+1),f
 18022  146A  3000               	movlw	0
 18023  146B  3DB2               	addwfc	((_Buz1+1)^(0+128)+1),f
 18024                           
 18025                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18026  146C  0837               	movf	((_Buz1+1)^(0+128)+6),w
 18027  146D  0232               	subwf	((_Buz1+1)^(0+128)+1),w
 18028  146E  1D03               	skipz
 18029  146F  2C72               	goto	u7525
 18030  1470  0836               	movf	(_Buz1^(0+128)+6),w
 18031  1471  0231               	subwf	(_Buz1^(0+128)+1),w
 18032  1472                     u7525:	
 18033  1472  1C03               	skipc
 18034  1473  0008               	return
 18035                           
 18036                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18037  1474  01B1               	clrf	(_Buz1^(0+128)+1)
 18038  1475  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 18039                           
 18040                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18041  1476  12B0               	bcf	_Buz1^(0+128),5
 18042  1477  0020               	movlb	0	; select bank0
 18043  1478  1D8D               	btfss	13,3	;volatile
 18044  1479  2C7C               	goto	l7708
 18045  147A  0021               	movlb	1	; select bank1
 18046  147B  16B0               	bsf	_Buz1^(0+128),5
 18047  147C                     l7708:	
 18048                           
 18049                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18050  147C  0021               	movlb	1	; select bank1
 18051  147D  1AB0               	btfsc	_Buz1^(0+128),5
 18052  147E  2CA8               	goto	l106
 18053                           
 18054                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18055  147F  08B3               	movf	(_Buz1^(0+128)+3),f
 18056  1480  1D03               	skipz
 18057  1481  2CA4               	goto	l107
 18058                           
 18059                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18060  1482  1DB0               	btfss	_Buz1^(0+128),3
 18061  1483  2C92               	goto	l108
 18062                           
 18063                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18064  1484  11B0               	bcf	_Buz1^(0+128),3
 18065                           
 18066                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18067  1485  0834               	movf	(_Buz1^(0+128)+4),w
 18068  1486  0020               	movlb	0	; select bank0
 18069  1487  00A0               	movwf	??_Buzzer_Main
 18070  1488  0820               	movf	??_Buzzer_Main,w
 18071  1489  0021               	movlb	1	; select bank1
 18072  148A  00B3               	movwf	(_Buz1^(0+128)+3)
 18073                           
 18074                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18075  148B  0839               	movf	((_Buz1+1)^(0+128)+8),w
 18076  148C  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 18077  148D  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 18078  148E  0838               	movf	(_Buz1^(0+128)+8),w
 18079  148F  01B6               	clrf	(_Buz1^(0+128)+6)
 18080  1490  07B6               	addwf	(_Buz1^(0+128)+6),f
 18081                           
 18082                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18083  1491  0008               	return
 18084  1492                     l108:	
 18085  1492  1E30               	btfss	_Buz1^(0+128),4
 18086  1493  2CA2               	goto	l110
 18087                           
 18088                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18089  1494  1230               	bcf	_Buz1^(0+128),4
 18090                           
 18091                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18092  1495  0835               	movf	(_Buz1^(0+128)+5),w
 18093  1496  0020               	movlb	0	; select bank0
 18094  1497  00A0               	movwf	??_Buzzer_Main
 18095  1498  0820               	movf	??_Buzzer_Main,w
 18096  1499  0021               	movlb	1	; select bank1
 18097  149A  00B3               	movwf	(_Buz1^(0+128)+3)
 18098                           
 18099                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18100  149B  083B               	movf	((_Buz1+1)^(0+128)+10),w
 18101  149C  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 18102  149D  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 18103  149E  083A               	movf	(_Buz1^(0+128)+10),w
 18104  149F  01B6               	clrf	(_Buz1^(0+128)+6)
 18105  14A0  07B6               	addwf	(_Buz1^(0+128)+6),f
 18106                           
 18107                           ;Buzzer_B1.c: 62: } else {
 18108  14A1  0008               	return
 18109  14A2                     l110:	
 18110                           
 18111                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18112  14A2  10B0               	bcf	_Buz1^(0+128),1
 18113                           
 18114                           ;Buzzer_B1.c: 64: }
 18115                           ;Buzzer_B1.c: 65: } else {
 18116  14A3  0008               	return
 18117  14A4                     l107:	
 18118                           
 18119                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18120  14A4  16B0               	bsf	_Buz1^(0+128),5
 18121                           
 18122                           ;Buzzer_B1.c: 68: RB3 = 1;
 18123  14A5  0020               	movlb	0	; select bank0
 18124  14A6  158D               	bsf	13,3	;volatile
 18125                           
 18126                           ;Buzzer_B1.c: 69: }
 18127                           ;Buzzer_B1.c: 70: } else {
 18128  14A7  0008               	return
 18129  14A8                     l106:	
 18130                           
 18131                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18132  14A8  12B0               	bcf	_Buz1^(0+128),5
 18133                           
 18134                           ;Buzzer_B1.c: 73: RB3 = 0;
 18135  14A9  0020               	movlb	0	; select bank0
 18136  14AA  118D               	bcf	13,3	;volatile
 18137                           
 18138                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18139  14AB  3001               	movlw	1
 18140  14AC  0021               	movlb	1	; select bank1
 18141  14AD  02B3               	subwf	(_Buz1^(0+128)+3),f
 18142  14AE  0008               	return
 18143  14AF                     __end_of_Buzzer_Main:	
 18144                           
 18145                           	psect	text125
 18146  1B2B                     __ptext125:	
 18147 ;; *************** function _Buzzer_Initialization *****************
 18148 ;; Defined at:
 18149 ;;		line 11 in file "../src/Buzzer_B1.c"
 18150 ;; Parameters:    Size  Location     Type
 18151 ;;		None
 18152 ;; Auto vars:     Size  Location     Type
 18153 ;;		None
 18154 ;; Return value:  Size  Location     Type
 18155 ;;		None               void
 18156 ;; Registers used:
 18157 ;;		None
 18158 ;; Tracked objects:
 18159 ;;		On entry : 0/0
 18160 ;;		On exit  : 0/0
 18161 ;;		Unchanged: 0/0
 18162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18167 ;;Total ram usage:        0 bytes
 18168 ;; Hardware stack levels used:    1
 18169 ;; Hardware stack levels required when called:    5
 18170 ;; This function calls:
 18171 ;;		Nothing
 18172 ;; This function is called by:
 18173 ;;		_main
 18174 ;; This function uses a non-reentrant model
 18175 ;;
 18176                           
 18177                           
 18178                           ;psect for function _Buzzer_Initialization
 18179  1B2B                     _Buzzer_Initialization:	
 18180                           
 18181                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18182                           
 18183                           ;incstack = 0
 18184                           ; Regs used in _Buzzer_Initialization: []
 18185  1B2B  0021               	movlb	1	; select bank1
 18186  1B2C  1430               	bsf	_Buz1^(0+128),0
 18187  1B2D  0008               	return
 18188  1B2E                     __end_of_Buzzer_Initialization:	
 18189                           
 18190                           	psect	intentry
 18191  0004                     __pintentry:	
 18192 ;; *************** function _ISR *****************
 18193 ;; Defined at:
 18194 ;;		line 107 in file "../src/MCU_B1.c"
 18195 ;; Parameters:    Size  Location     Type
 18196 ;;		None
 18197 ;; Auto vars:     Size  Location     Type
 18198 ;;		None
 18199 ;; Return value:  Size  Location     Type
 18200 ;;		None               void
 18201 ;; Registers used:
 18202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18203 ;; Tracked objects:
 18204 ;;		On entry : 0/0
 18205 ;;		On exit  : 0/0
 18206 ;;		Unchanged: 0/0
 18207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18210 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18211 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18212 ;;Total ram usage:        1 bytes
 18213 ;; Hardware stack levels used:    1
 18214 ;; Hardware stack levels required when called:    4
 18215 ;; This function calls:
 18216 ;;		_IOC_ISR
 18217 ;;		_TMR1_ISR
 18218 ;; This function is called by:
 18219 ;;		Interrupt level 1
 18220 ;; This function uses a non-reentrant model
 18221 ;;
 18222                           
 18223  0004                     _ISR:	
 18224                           
 18225                           ;incstack = 0
 18226                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18227  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18228  0005  3180               	pagesel	$
 18229  0006  0020               	movlb	0	; select bank0
 18230  0007  087F               	movf	127,w
 18231  0008  00F7               	movwf	??_ISR
 18232                           
 18233                           ;MCU_B1.c: 109: IOC_ISR();
 18234  0009  319C  2427  3180   	fcall	_IOC_ISR
 18235                           
 18236                           ;MCU_B1.c: 111: ;;
 18237                           ;MCU_B1.c: 113: TMR1_ISR();
 18238  000C  3190  20E1         	fcall	_TMR1_ISR
 18239  000E  0877               	movf	??_ISR,w
 18240  000F  0020               	movlb	0	; select bank0
 18241  0010  00FF               	movwf	127
 18242  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18243  0012  0009               	retfie
 18244  0013                     __end_of_ISR:	
 18245                           
 18246                           	psect	text127
 18247  10E1                     __ptext127:	
 18248 ;; *************** function _TMR1_ISR *****************
 18249 ;; Defined at:
 18250 ;;		line 209 in file "../src/MCU_B1.c"
 18251 ;; Parameters:    Size  Location     Type
 18252 ;;		None
 18253 ;; Auto vars:     Size  Location     Type
 18254 ;;		None
 18255 ;; Return value:  Size  Location     Type
 18256 ;;		None               void
 18257 ;; Registers used:
 18258 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18259 ;; Tracked objects:
 18260 ;;		On entry : 0/0
 18261 ;;		On exit  : 0/0
 18262 ;;		Unchanged: 0/0
 18263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18268 ;;Total ram usage:        0 bytes
 18269 ;; Hardware stack levels used:    1
 18270 ;; Hardware stack levels required when called:    2
 18271 ;; This function calls:
 18272 ;;		_setDimmerLights_IntrControl
 18273 ;; This function is called by:
 18274 ;;		_ISR
 18275 ;; This function uses a non-reentrant model
 18276 ;;
 18277                           
 18278                           
 18279                           ;psect for function _TMR1_ISR
 18280  10E1                     _TMR1_ISR:	
 18281                           
 18282                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18283                           
 18284                           ;incstack = 0
 18285                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18286  10E1  0021               	movlb	1	; select bank1
 18287  10E2  1C11               	btfss	17,0	;volatile
 18288  10E3  0008               	return
 18289  10E4  0020               	movlb	0	; select bank0
 18290  10E5  1C11               	btfss	17,0	;volatile
 18291  10E6  0008               	return
 18292                           
 18293                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18294  10E7  30FA               	movlw	250
 18295  10E8  0097               	movwf	23	;volatile
 18296                           
 18297                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18298  10E9  3038               	movlw	56
 18299  10EA  0096               	movwf	22	;volatile
 18300                           
 18301                           ;MCU_B1.c: 214: TMR1IF = 0;
 18302  10EB  1011               	bcf	17,0	;volatile
 18303                           
 18304                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18305  10EC  3001               	movlw	1
 18306  10ED  3182  22FE  3190   	fcall	_setDimmerLights_IntrControl
 18307                           
 18308                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18309  10F0  3002               	movlw	2
 18310  10F1  3182  22FE  3190   	fcall	_setDimmerLights_IntrControl
 18311                           
 18312                           ;MCU_B1.c: 234: Timer1.Count++;
 18313  10F4  3001               	movlw	1
 18314  10F5  0022               	movlb	2	; select bank2
 18315  10F6  07A4               	addwf	(_Timer1^(0+256)+1),f
 18316  10F7  3000               	movlw	0
 18317  10F8  3DA5               	addwfc	((_Timer1+1)^(0+256)+1),f
 18318                           
 18319                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 18320  10F9  3001               	movlw	1
 18321  10FA  3E23               	addlw	_Timer1& (0+255)
 18322  10FB  0086               	movwf	6
 18323  10FC  3001               	movlw	1	; select bank2/3
 18324  10FD  0087               	movwf	7
 18325  10FE  3F40               	moviw [0]fsr1
 18326  10FF  3A64               	xorlw	100
 18327  1100  1D03               	skipz
 18328  1101  2904               	goto	u768_25
 18329  1102  3F41               	moviw [1]fsr1
 18330  1103  3A00               	xorlw	0
 18331  1104                     u768_25:	
 18332  1104  1D03               	skipz
 18333  1105  0008               	return
 18334                           
 18335                           ;MCU_B1.c: 236: {
 18336                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18337  1106  01A4               	clrf	(_Timer1^(0+256)+1)
 18338  1107  01A5               	clrf	((_Timer1+1)^(0+256)+1)
 18339                           
 18340                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18341  1108  1423               	bsf	_Timer1^(0+256),0
 18342  1109  0008               	return
 18343  110A                     __end_of_TMR1_ISR:	
 18344                           
 18345                           	psect	text128
 18346  02FE                     __ptext128:	
 18347 ;; *************** function _setDimmerLights_IntrControl *****************
 18348 ;; Defined at:
 18349 ;;		line 92 in file "../src/Dimmer_B1.c"
 18350 ;; Parameters:    Size  Location     Type
 18351 ;;  lights          1    wreg     unsigned char 
 18352 ;; Auto vars:     Size  Location     Type
 18353 ;;  lights          1    6[COMMON] unsigned char 
 18354 ;; Return value:  Size  Location     Type
 18355 ;;		None               void
 18356 ;; Registers used:
 18357 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18358 ;; Tracked objects:
 18359 ;;		On entry : 0/0
 18360 ;;		On exit  : 0/0
 18361 ;;		Unchanged: 0/0
 18362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18364 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18365 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18366 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18367 ;;Total ram usage:        5 bytes
 18368 ;; Hardware stack levels used:    1
 18369 ;; Hardware stack levels required when called:    1
 18370 ;; This function calls:
 18371 ;;		_DimmerIntrPointSelect
 18372 ;; This function is called by:
 18373 ;;		_TMR1_ISR
 18374 ;; This function uses a non-reentrant model
 18375 ;;
 18376                           
 18377                           
 18378                           ;psect for function _setDimmerLights_IntrControl
 18379  02FE                     _setDimmerLights_IntrControl:	
 18380                           
 18381                           ;incstack = 0
 18382                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18383                           ;setDimmerLights_IntrControl@lights stored from wreg
 18384  02FE  00F6               	movwf	setDimmerLights_IntrControl@lights
 18385                           
 18386                           ;Dimmer_B1.c: 228: DimmerIntrPointSelect(lights);
 18387  02FF  0876               	movf	setDimmerLights_IntrControl@lights,w
 18388  0300  319C  24A9  3182   	fcall	_DimmerIntrPointSelect
 18389                           
 18390                           ;Dimmer_B1.c: 229: if (DimmerLightsIntr->GO == 1) {
 18391  0303  0879               	movf	_DimmerLightsIntr,w
 18392  0304  0086               	movwf	6
 18393  0305  3001               	movlw	1	; select bank2/3
 18394  0306  0087               	movwf	7
 18395  0307  1C01               	btfss	1,0
 18396  0308  2B60               	goto	i1l7152
 18397                           
 18398                           ;Dimmer_B1.c: 230: DimmerLightsIntr->Count++;
 18399  0309  3001               	movlw	1
 18400  030A  00F2               	movwf	??_setDimmerLights_IntrControl
 18401  030B  0879               	movf	_DimmerLightsIntr,w
 18402  030C  3E03               	addlw	3
 18403  030D  0086               	movwf	6
 18404  030E  3001               	movlw	1	; select bank2/3
 18405  030F  0087               	movwf	7
 18406  0310  0872               	movf	??_setDimmerLights_IntrControl,w
 18407  0311  0781               	addwf	1,f
 18408                           
 18409                           ;Dimmer_B1.c: 231: if (DimmerLightsIntr->Count
 18410                           ;Dimmer_B1.c: 232: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 18411  0312  0022               	movlb	2	; select bank2
 18412  0313  0822               	movf	(_Dimmer^(0+256)+2),w
 18413  0314  00F2               	movwf	??_setDimmerLights_IntrControl
 18414  0315  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18415  0316  09F2               	comf	??_setDimmerLights_IntrControl,f
 18416  0317  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18417  0318  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18418  0319  1903               	skipnz
 18419  031A  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18420  031B  0879               	movf	_DimmerLightsIntr,w
 18421  031C  3E04               	addlw	4
 18422  031D  0086               	movwf	6
 18423  031E  3001               	movlw	1	; select bank2/3
 18424  031F  0087               	movwf	7
 18425  0320  0801               	movf	1,w
 18426  0321  0772               	addwf	??_setDimmerLights_IntrControl,w
 18427  0322  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18428  0323  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18429  0324  1803               	skipnc
 18430  0325  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18431  0326  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18432  0327  0879               	movf	_DimmerLightsIntr,w
 18433  0328  3E03               	addlw	3
 18434  0329  0086               	movwf	6
 18435  032A  3001               	movlw	1	; select bank2/3
 18436  032B  0087               	movwf	7
 18437  032C  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18438  032D  3A80               	xorlw	128
 18439  032E  3C80               	sublw	128
 18440  032F  1D03               	skipz
 18441  0330  2B33               	goto	u653_25
 18442  0331  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18443  0332  0201               	subwf	1,w
 18444  0333                     u653_25:	
 18445  0333  1C03               	skipc
 18446  0334  0008               	return
 18447                           
 18448                           ;Dimmer_B1.c: 233: DimmerLightsIntr->Count = 0;
 18449  0335  0879               	movf	_DimmerLightsIntr,w
 18450  0336  3E03               	addlw	3
 18451  0337  0086               	movwf	6
 18452  0338  3001               	movlw	1	; select bank2/3
 18453  0339  0087               	movwf	7
 18454  033A  0181               	clrf	1
 18455                           
 18456                           ;Dimmer_B1.c: 234: DimmerLightsIntr->GO = 0;
 18457  033B  0879               	movf	_DimmerLightsIntr,w
 18458  033C  0086               	movwf	6
 18459  033D  3001               	movlw	1	; select bank2/3
 18460  033E  0087               	movwf	7
 18461  033F  1001               	bcf	1,0
 18462                           
 18463                           ;Dimmer_B1.c: 235: DimmerLightsIntr->Flag = 1;
 18464  0340  0879               	movf	_DimmerLightsIntr,w
 18465  0341  3E08               	addlw	8
 18466  0342  0086               	movwf	6
 18467  0343  3001               	movlw	1	; select bank2/3
 18468  0344  0087               	movwf	7
 18469  0345  1401               	bsf	1,0
 18470                           
 18471                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->MOSFET == 1) {
 18472  0346  0879               	movf	_DimmerLightsIntr,w
 18473  0347  3E09               	addlw	9
 18474  0348  0086               	movwf	6
 18475  0349  3001               	movlw	1	; select bank2/3
 18476  034A  0087               	movwf	7
 18477  034B  1E01               	btfss	1,4
 18478  034C  0008               	return
 18479                           
 18480                           ;Dimmer_B1.c: 237: DimmerLightsIntr->MOSFET = 0;
 18481  034D  0879               	movf	_DimmerLightsIntr,w
 18482  034E  3E09               	addlw	9
 18483  034F  0086               	movwf	6
 18484  0350  3001               	movlw	1	; select bank2/3
 18485  0351  0087               	movwf	7
 18486  0352  1201               	bcf	1,4
 18487                           
 18488                           ;Dimmer_B1.c: 239: if (lights == 1) {
 18489  0353  0876               	movf	setDimmerLights_IntrControl@lights,w
 18490  0354  3A01               	xorlw	1
 18491  0355  1D03               	skipz
 18492  0356  2B59               	goto	i1l7148
 18493                           
 18494                           ;Dimmer_B1.c: 240: RA7 = 0;
 18495  0357  0020               	movlb	0	; select bank0
 18496  0358  138C               	bcf	12,7	;volatile
 18497  0359                     i1l7148:	
 18498                           ;Dimmer_B1.c: 241: ;;
 18499                           
 18500                           
 18501                           ;Dimmer_B1.c: 242: }
 18502                           ;Dimmer_B1.c: 245: if (lights == 2) {
 18503  0359  0876               	movf	setDimmerLights_IntrControl@lights,w
 18504  035A  3A02               	xorlw	2
 18505  035B  1D03               	skipz
 18506  035C  0008               	return
 18507                           
 18508                           ;Dimmer_B1.c: 246: RB4 = 0;
 18509  035D  0020               	movlb	0	; select bank0
 18510  035E  120D               	bcf	13,4	;volatile
 18511                           
 18512                           ;Dimmer_B1.c: 247: }
 18513                           ;Dimmer_B1.c: 249: }
 18514                           ;Dimmer_B1.c: 250: }
 18515                           ;Dimmer_B1.c: 251: } else {
 18516  035F  0008               	return
 18517  0360                     i1l7152:	
 18518                           
 18519                           ;Dimmer_B1.c: 252: if (DimmerLightsIntr->Flag == 1) {
 18520  0360  0879               	movf	_DimmerLightsIntr,w
 18521  0361  3E08               	addlw	8
 18522  0362  0086               	movwf	6
 18523  0363  3001               	movlw	1	; select bank2/3
 18524  0364  0087               	movwf	7
 18525  0365  1C01               	btfss	1,0
 18526  0366  2C14               	goto	i1l746
 18527                           
 18528                           ;Dimmer_B1.c: 253: DimmerLightsIntr->Flag = 0;
 18529  0367  0879               	movf	_DimmerLightsIntr,w
 18530  0368  3E08               	addlw	8
 18531  0369  0086               	movwf	6
 18532  036A  3001               	movlw	1	; select bank2/3
 18533  036B  0087               	movwf	7
 18534  036C  1001               	bcf	1,0
 18535                           
 18536                           ;Dimmer_B1.c: 254: if (DimmerLightsIntr->Signal == 1) {
 18537  036D  0879               	movf	_DimmerLightsIntr,w
 18538  036E  0086               	movwf	6
 18539  036F  3001               	movlw	1	; select bank2/3
 18540  0370  0087               	movwf	7
 18541  0371  1C81               	btfss	1,1
 18542  0372  2C14               	goto	i1l746
 18543                           
 18544                           ;Dimmer_B1.c: 255: DimmerLightsIntr->DimmingTime++;
 18545  0373  3001               	movlw	1
 18546  0374  00F2               	movwf	??_setDimmerLights_IntrControl
 18547  0375  0A79               	incf	_DimmerLightsIntr,w
 18548  0376  0086               	movwf	6
 18549  0377  3001               	movlw	1	; select bank2/3
 18550  0378  0087               	movwf	7
 18551  0379  0872               	movf	??_setDimmerLights_IntrControl,w
 18552  037A  0781               	addwf	1,f
 18553                           
 18554                           ;Dimmer_B1.c: 256: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18555  037B  0A79               	incf	_DimmerLightsIntr,w
 18556  037C  0086               	movwf	6
 18557  037D  3001               	movlw	1	; select bank2/3
 18558  037E  0087               	movwf	7
 18559  037F  0879               	movf	_DimmerLightsIntr,w
 18560  0380  3E02               	addlw	2
 18561  0381  0084               	movwf	4
 18562  0382  3001               	movlw	1	; select bank2/3
 18563  0383  0085               	movwf	5
 18564  0384  0800               	movf	0,w
 18565  0385  0201               	subwf	1,w
 18566  0386  1C03               	skipc
 18567  0387  2C14               	goto	i1l746
 18568                           
 18569                           ;Dimmer_B1.c: 257: DimmerLightsIntr->DimmingTime = 0;
 18570  0388  0A79               	incf	_DimmerLightsIntr,w
 18571  0389  0086               	movwf	6
 18572  038A  3001               	movlw	1	; select bank2/3
 18573  038B  0087               	movwf	7
 18574  038C  0181               	clrf	1
 18575                           
 18576                           ;Dimmer_B1.c: 258: if (DimmerLightsIntr->AdjFlag == 1) {
 18577  038D  0879               	movf	_DimmerLightsIntr,w
 18578  038E  0086               	movwf	6
 18579  038F  3001               	movlw	1	; select bank2/3
 18580  0390  0087               	movwf	7
 18581  0391  1D81               	btfss	1,3
 18582  0392  2BC9               	goto	i1l7178
 18583                           
 18584                           ;Dimmer_B1.c: 259: if (DimmerLightsIntr->AdjStatus == 0) {
 18585  0393  0879               	movf	_DimmerLightsIntr,w
 18586  0394  0086               	movwf	6
 18587  0395  3001               	movlw	1	; select bank2/3
 18588  0396  0087               	movwf	7
 18589  0397  1A01               	btfsc	1,4
 18590  0398  2BB2               	goto	i1l7172
 18591                           
 18592                           ;Dimmer_B1.c: 260: if (DimmerLightsIntr->DimmingValue < ((char)(80*0.8))) {
 18593  0399  0879               	movf	_DimmerLightsIntr,w
 18594  039A  3E04               	addlw	4
 18595  039B  0086               	movwf	6
 18596  039C  3001               	movlw	1	; select bank2/3
 18597  039D  0087               	movwf	7
 18598  039E  3040               	movlw	64
 18599  039F  0201               	subwf	1,w
 18600  03A0  1803               	skipnc
 18601  03A1  2BAC               	goto	i1l7170
 18602                           
 18603                           ;Dimmer_B1.c: 261: DimmerLightsIntr->DimmingValue++;
 18604  03A2  3001               	movlw	1
 18605  03A3  00F2               	movwf	??_setDimmerLights_IntrControl
 18606  03A4  0879               	movf	_DimmerLightsIntr,w
 18607  03A5  3E04               	addlw	4
 18608  03A6  0086               	movwf	6
 18609  03A7  3001               	movlw	1	; select bank2/3
 18610  03A8  0087               	movwf	7
 18611  03A9  0872               	movf	??_setDimmerLights_IntrControl,w
 18612  03AA  0781               	addwf	1,f
 18613                           
 18614                           ;Dimmer_B1.c: 262: } else {
 18615  03AB  2C14               	goto	i1l746
 18616  03AC                     i1l7170:	
 18617                           
 18618                           ;Dimmer_B1.c: 263: DimmerLightsIntr->AdjStatus = 1;
 18619  03AC  0879               	movf	_DimmerLightsIntr,w
 18620  03AD  0086               	movwf	6
 18621  03AE  3001               	movlw	1	; select bank2/3
 18622  03AF  0087               	movwf	7
 18623  03B0  1601               	bsf	1,4
 18624                           
 18625                           ;Dimmer_B1.c: 264: }
 18626                           ;Dimmer_B1.c: 265: } else {
 18627  03B1  2C14               	goto	i1l746
 18628  03B2                     i1l7172:	
 18629                           
 18630                           ;Dimmer_B1.c: 266: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18631  03B2  0879               	movf	_DimmerLightsIntr,w
 18632  03B3  3E04               	addlw	4
 18633  03B4  0086               	movwf	6
 18634  03B5  3001               	movlw	1	; select bank2/3
 18635  03B6  0087               	movwf	7
 18636  03B7  300D               	movlw	13
 18637  03B8  0201               	subwf	1,w
 18638  03B9  1C03               	skipc
 18639  03BA  2BC3               	goto	i1l7176
 18640                           
 18641                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingValue--;
 18642  03BB  0879               	movf	_DimmerLightsIntr,w
 18643  03BC  3E04               	addlw	4
 18644  03BD  0086               	movwf	6
 18645  03BE  3001               	movlw	1	; select bank2/3
 18646  03BF  0087               	movwf	7
 18647  03C0  3001               	movlw	1
 18648  03C1  0281               	subwf	1,f
 18649                           
 18650                           ;Dimmer_B1.c: 268: } else {
 18651  03C2  2C14               	goto	i1l746
 18652  03C3                     i1l7176:	
 18653                           
 18654                           ;Dimmer_B1.c: 269: DimmerLightsIntr->AdjStatus = 0;
 18655  03C3  0879               	movf	_DimmerLightsIntr,w
 18656  03C4  0086               	movwf	6
 18657  03C5  3001               	movlw	1	; select bank2/3
 18658  03C6  0087               	movwf	7
 18659  03C7  1201               	bcf	1,4
 18660                           
 18661                           ;Dimmer_B1.c: 270: }
 18662                           ;Dimmer_B1.c: 271: }
 18663                           ;Dimmer_B1.c: 272: } else if (DimmerLightsIntr->AdjRF == 1) {
 18664  03C8  2C14               	goto	i1l746
 18665  03C9                     i1l7178:	
 18666  03C9  0879               	movf	_DimmerLightsIntr,w
 18667  03CA  0086               	movwf	6
 18668  03CB  3001               	movlw	1	; select bank2/3
 18669  03CC  0087               	movwf	7
 18670  03CD  1D01               	btfss	1,2
 18671  03CE  2C14               	goto	i1l746
 18672                           
 18673                           ;Dimmer_B1.c: 273: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18674  03CF  0879               	movf	_DimmerLightsIntr,w
 18675  03D0  3E04               	addlw	4
 18676  03D1  0086               	movwf	6
 18677  03D2  3001               	movlw	1	; select bank2/3
 18678  03D3  0087               	movwf	7
 18679  03D4  0879               	movf	_DimmerLightsIntr,w
 18680  03D5  3E05               	addlw	5
 18681  03D6  0084               	movwf	4
 18682  03D7  3001               	movlw	1	; select bank2/3
 18683  03D8  0085               	movwf	5
 18684  03D9  0800               	movf	0,w
 18685  03DA  0201               	subwf	1,w
 18686  03DB  1803               	skipnc
 18687  03DC  2BE7               	goto	i1l7184
 18688                           
 18689                           ;Dimmer_B1.c: 274: DimmerLightsIntr->DimmingValue++;
 18690  03DD  3001               	movlw	1
 18691  03DE  00F2               	movwf	??_setDimmerLights_IntrControl
 18692  03DF  0879               	movf	_DimmerLightsIntr,w
 18693  03E0  3E04               	addlw	4
 18694  03E1  0086               	movwf	6
 18695  03E2  3001               	movlw	1	; select bank2/3
 18696  03E3  0087               	movwf	7
 18697  03E4  0872               	movf	??_setDimmerLights_IntrControl,w
 18698  03E5  0781               	addwf	1,f
 18699                           
 18700                           ;Dimmer_B1.c: 275: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18701  03E6  2BFC               	goto	i1l7188
 18702  03E7                     i1l7184:	
 18703  03E7  0879               	movf	_DimmerLightsIntr,w
 18704  03E8  3E05               	addlw	5
 18705  03E9  0086               	movwf	6
 18706  03EA  3001               	movlw	1	; select bank2/3
 18707  03EB  0087               	movwf	7
 18708  03EC  0879               	movf	_DimmerLightsIntr,w
 18709  03ED  3E04               	addlw	4
 18710  03EE  0084               	movwf	4
 18711  03EF  3001               	movlw	1	; select bank2/3
 18712  03F0  0085               	movwf	5
 18713  03F1  0800               	movf	0,w
 18714  03F2  0201               	subwf	1,w
 18715  03F3  1803               	skipnc
 18716  03F4  2BFC               	goto	i1l7188
 18717                           
 18718                           ;Dimmer_B1.c: 276: DimmerLightsIntr->DimmingValue--;
 18719  03F5  0879               	movf	_DimmerLightsIntr,w
 18720  03F6  3E04               	addlw	4
 18721  03F7  0086               	movwf	6
 18722  03F8  3001               	movlw	1	; select bank2/3
 18723  03F9  0087               	movwf	7
 18724  03FA  3001               	movlw	1
 18725  03FB  0281               	subwf	1,f
 18726  03FC                     i1l7188:	
 18727                           
 18728                           ;Dimmer_B1.c: 277: }
 18729                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18730  03FC  0879               	movf	_DimmerLightsIntr,w
 18731  03FD  3E05               	addlw	5
 18732  03FE  0086               	movwf	6
 18733  03FF  3001               	movlw	1	; select bank2/3
 18734  0400  0087               	movwf	7
 18735  0401  0879               	movf	_DimmerLightsIntr,w
 18736  0402  3E04               	addlw	4
 18737  0403  0084               	movwf	4
 18738  0404  3001               	movlw	1	; select bank2/3
 18739  0405  0085               	movwf	5
 18740  0406  0800               	movf	0,w
 18741  0407  0601               	xorwf	1,w
 18742  0408  1D03               	skipz
 18743  0409  2C14               	goto	i1l746
 18744                           
 18745                           ;Dimmer_B1.c: 279: DimmerLightsIntr->AdjRF = 0;
 18746  040A  0879               	movf	_DimmerLightsIntr,w
 18747  040B  0086               	movwf	6
 18748  040C  3001               	movlw	1	; select bank2/3
 18749  040D  0087               	movwf	7
 18750  040E  1101               	bcf	1,2
 18751                           
 18752                           ;Dimmer_B1.c: 280: DimmerLightsIntr->Signal = 0;
 18753  040F  0879               	movf	_DimmerLightsIntr,w
 18754  0410  0086               	movwf	6
 18755  0411  3001               	movlw	1	; select bank2/3
 18756  0412  0087               	movwf	7
 18757  0413  1081               	bcf	1,1
 18758  0414                     i1l746:	
 18759                           
 18760                           ;Dimmer_B1.c: 281: }
 18761                           ;Dimmer_B1.c: 282: }
 18762                           ;Dimmer_B1.c: 300: }
 18763                           ;Dimmer_B1.c: 301: }
 18764                           ;Dimmer_B1.c: 302: }
 18765                           ;Dimmer_B1.c: 304: if (DimmerLightsIntr->MosfetSignal == 1) {
 18766  0414  0879               	movf	_DimmerLightsIntr,w
 18767  0415  3E09               	addlw	9
 18768  0416  0086               	movwf	6
 18769  0417  3001               	movlw	1	; select bank2/3
 18770  0418  0087               	movwf	7
 18771  0419  1D81               	btfss	1,3
 18772  041A  0008               	return
 18773                           
 18774                           ;Dimmer_B1.c: 305: DimmerLightsIntr->MosfetSignalCount++;
 18775  041B  3001               	movlw	1
 18776  041C  00F2               	movwf	??_setDimmerLights_IntrControl
 18777  041D  0879               	movf	_DimmerLightsIntr,w
 18778  041E  3E0C               	addlw	12
 18779  041F  0086               	movwf	6
 18780  0420  3001               	movlw	1	; select bank2/3
 18781  0421  0087               	movwf	7
 18782  0422  0872               	movf	??_setDimmerLights_IntrControl,w
 18783  0423  0781               	addwf	1,f
 18784                           
 18785                           ;Dimmer_B1.c: 306: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 18786  0424  0879               	movf	_DimmerLightsIntr,w
 18787  0425  3E0C               	addlw	12
 18788  0426  0086               	movwf	6
 18789  0427  3001               	movlw	1	; select bank2/3
 18790  0428  0087               	movwf	7
 18791  0429  0801               	movf	1,w
 18792  042A  3A05               	xorlw	5
 18793  042B  1D03               	skipz
 18794  042C  0008               	return
 18795                           
 18796                           ;Dimmer_B1.c: 307: DimmerLightsIntr->MosfetSignalCount = 0;
 18797  042D  0879               	movf	_DimmerLightsIntr,w
 18798  042E  3E0C               	addlw	12
 18799  042F  0086               	movwf	6
 18800  0430  3001               	movlw	1	; select bank2/3
 18801  0431  0087               	movwf	7
 18802  0432  0181               	clrf	1
 18803                           
 18804                           ;Dimmer_B1.c: 308: DimmerLightsIntr->MosfetSignal = 0;
 18805  0433  0879               	movf	_DimmerLightsIntr,w
 18806  0434  3E09               	addlw	9
 18807  0435  0086               	movwf	6
 18808  0436  3001               	movlw	1	; select bank2/3
 18809  0437  0087               	movwf	7
 18810  0438  1181               	bcf	1,3
 18811  0439  0008               	return
 18812  043A                     __end_of_setDimmerLights_IntrControl:	
 18813                           
 18814                           	psect	text129
 18815  1CA9                     __ptext129:	
 18816 ;; *************** function _DimmerIntrPointSelect *****************
 18817 ;; Defined at:
 18818 ;;		line 70 in file "../src/Dimmer_B1.c"
 18819 ;; Parameters:    Size  Location     Type
 18820 ;;  lights          1    wreg     unsigned char 
 18821 ;; Auto vars:     Size  Location     Type
 18822 ;;  lights          1    1[COMMON] unsigned char 
 18823 ;; Return value:  Size  Location     Type
 18824 ;;		None               void
 18825 ;; Registers used:
 18826 ;;		wreg
 18827 ;; Tracked objects:
 18828 ;;		On entry : 0/0
 18829 ;;		On exit  : 0/0
 18830 ;;		Unchanged: 0/0
 18831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18833 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18834 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18835 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18836 ;;Total ram usage:        2 bytes
 18837 ;; Hardware stack levels used:    1
 18838 ;; This function calls:
 18839 ;;		Nothing
 18840 ;; This function is called by:
 18841 ;;		_setDimmerLights_IntrControl
 18842 ;; This function uses a non-reentrant model
 18843 ;;
 18844                           
 18845                           
 18846                           ;psect for function _DimmerIntrPointSelect
 18847  1CA9                     _DimmerIntrPointSelect:	
 18848                           
 18849                           ;incstack = 0
 18850                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18851                           ;DimmerIntrPointSelect@lights stored from wreg
 18852  1CA9  00F1               	movwf	DimmerIntrPointSelect@lights
 18853                           
 18854                           ;Dimmer_B1.c: 72: if (lights == 1) {
 18855  1CAA  0871               	movf	DimmerIntrPointSelect@lights,w
 18856  1CAB  3A01               	xorlw	1
 18857  1CAC  1D03               	skipz
 18858  1CAD  2CB2               	goto	i1l735
 18859                           
 18860                           ;Dimmer_B1.c: 73: DimmerLightsIntr = &DimmerLights1;
 18861  1CAE  30BE               	movlw	_DimmerLights1& (0+255)
 18862  1CAF  00F0               	movwf	??_DimmerIntrPointSelect
 18863  1CB0  0870               	movf	??_DimmerIntrPointSelect,w
 18864  1CB1  00F9               	movwf	_DimmerLightsIntr
 18865  1CB2                     i1l735:	
 18866                           
 18867                           ;Dimmer_B1.c: 74: }
 18868                           ;Dimmer_B1.c: 77: if (lights == 2) {
 18869  1CB2  0871               	movf	DimmerIntrPointSelect@lights,w
 18870  1CB3  3A02               	xorlw	2
 18871  1CB4  1D03               	skipz
 18872  1CB5  0008               	return
 18873                           
 18874                           ;Dimmer_B1.c: 78: DimmerLightsIntr = &DimmerLights2;
 18875  1CB6  30CD               	movlw	_DimmerLights2& (0+255)
 18876  1CB7  00F0               	movwf	??_DimmerIntrPointSelect
 18877  1CB8  0870               	movf	??_DimmerIntrPointSelect,w
 18878  1CB9  00F9               	movwf	_DimmerLightsIntr
 18879  1CBA  0008               	return
 18880  1CBB                     __end_of_DimmerIntrPointSelect:	
 18881                           
 18882                           	psect	text130
 18883  1C27                     __ptext130:	
 18884 ;; *************** function _IOC_ISR *****************
 18885 ;; Defined at:
 18886 ;;		line 401 in file "../src/MCU_B1.c"
 18887 ;; Parameters:    Size  Location     Type
 18888 ;;		None
 18889 ;; Auto vars:     Size  Location     Type
 18890 ;;		None
 18891 ;; Return value:  Size  Location     Type
 18892 ;;		None               void
 18893 ;; Registers used:
 18894 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18895 ;; Tracked objects:
 18896 ;;		On entry : 0/0
 18897 ;;		On exit  : 0/0
 18898 ;;		Unchanged: 0/0
 18899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18904 ;;Total ram usage:        0 bytes
 18905 ;; Hardware stack levels used:    1
 18906 ;; Hardware stack levels required when called:    3
 18907 ;; This function calls:
 18908 ;;		_setDimmerReClock
 18909 ;; This function is called by:
 18910 ;;		_ISR
 18911 ;; This function uses a non-reentrant model
 18912 ;;
 18913                           
 18914                           
 18915                           ;psect for function _IOC_ISR
 18916  1C27                     _IOC_ISR:	
 18917                           
 18918                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18919                           
 18920                           ;incstack = 0
 18921                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18922  1C27  1D8B               	btfss	11,3	;volatile
 18923  1C28  0008               	return
 18924  1C29  1C0B               	btfss	11,0	;volatile
 18925  1C2A  0008               	return
 18926  1C2B  0027               	movlb	7	; select bank7
 18927  1C2C  1D16               	btfss	22,2	;volatile
 18928  1C2D  0008               	return
 18929                           
 18930                           ;MCU_B1.c: 403: IOCBF2 = 0;
 18931  1C2E  1116               	bcf	22,2	;volatile
 18932                           
 18933                           ;MCU_B1.c: 404: IOCIF = 0;
 18934  1C2F  100B               	bcf	11,0	;volatile
 18935                           
 18936                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 18937  1C30  0021               	movlb	1	; select bank1
 18938  1C31  1C20               	btfss	_myMain^(0+128),0
 18939  1C32  0008               	return
 18940                           
 18941                           ;MCU_B1.c: 408: setDimmerReClock();
 18942  1C33  319B  2369         	fcall	_setDimmerReClock
 18943  1C35  0008               	return
 18944  1C36                     __end_of_IOC_ISR:	
 18945                           
 18946                           	psect	text131
 18947  1B69                     __ptext131:	
 18948 ;; *************** function _setDimmerReClock *****************
 18949 ;; Defined at:
 18950 ;;		line 244 in file "../src/MCU_B1.c"
 18951 ;; Parameters:    Size  Location     Type
 18952 ;;		None
 18953 ;; Auto vars:     Size  Location     Type
 18954 ;;		None
 18955 ;; Return value:  Size  Location     Type
 18956 ;;		None               void
 18957 ;; Registers used:
 18958 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18959 ;; Tracked objects:
 18960 ;;		On entry : 0/0
 18961 ;;		On exit  : 0/0
 18962 ;;		Unchanged: 0/0
 18963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18968 ;;Total ram usage:        0 bytes
 18969 ;; Hardware stack levels used:    1
 18970 ;; Hardware stack levels required when called:    2
 18971 ;; This function calls:
 18972 ;;		_setDimmerLights_IntrIOC_GO
 18973 ;; This function is called by:
 18974 ;;		_IOC_ISR
 18975 ;; This function uses a non-reentrant model
 18976 ;;
 18977                           
 18978                           
 18979                           ;psect for function _setDimmerReClock
 18980  1B69                     _setDimmerReClock:	
 18981                           
 18982                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 18983                           
 18984                           ;incstack = 0
 18985                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18986  1B69  3001               	movlw	1
 18987  1B6A  3192  22F3  319B   	fcall	_setDimmerLights_IntrIOC_GO
 18988                           
 18989                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 18990  1B6D  3002               	movlw	2
 18991  1B6E  3192  22F3         	fcall	_setDimmerLights_IntrIOC_GO
 18992  1B70  0008               	return
 18993  1B71                     __end_of_setDimmerReClock:	
 18994                           
 18995                           	psect	text132
 18996  12F3                     __ptext132:	
 18997 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18998 ;; Defined at:
 18999 ;;		line 28 in file "../src/Dimmer_B1.c"
 19000 ;; Parameters:    Size  Location     Type
 19001 ;;  lights          1    wreg     unsigned char 
 19002 ;; Auto vars:     Size  Location     Type
 19003 ;;  lights          1    2[COMMON] unsigned char 
 19004 ;; Return value:  Size  Location     Type
 19005 ;;		None               void
 19006 ;; Registers used:
 19007 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19008 ;; Tracked objects:
 19009 ;;		On entry : 0/0
 19010 ;;		On exit  : 0/0
 19011 ;;		Unchanged: 0/0
 19012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19014 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19016 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19017 ;;Total ram usage:        1 bytes
 19018 ;; Hardware stack levels used:    1
 19019 ;; Hardware stack levels required when called:    1
 19020 ;; This function calls:
 19021 ;;		_DimmerIntrIOCPointSelect
 19022 ;; This function is called by:
 19023 ;;		_setDimmerReClock
 19024 ;; This function uses a non-reentrant model
 19025 ;;
 19026                           
 19027                           
 19028                           ;psect for function _setDimmerLights_IntrIOC_GO
 19029  12F3                     _setDimmerLights_IntrIOC_GO:	
 19030                           
 19031                           ;incstack = 0
 19032                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19033                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19034  12F3  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19035                           
 19036                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 19037  12F4  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19038  12F5  319D  253D  3192   	fcall	_DimmerIntrIOCPointSelect
 19039                           
 19040                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0) {
 19041  12F8  0021               	movlb	1	; select bank1
 19042  12F9  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19043  12FA  0086               	movwf	6
 19044  12FB  3001               	movlw	1	; select bank2/3
 19045  12FC  0087               	movwf	7
 19046  12FD  1801               	btfsc	1,0
 19047  12FE  0008               	return
 19048  12FF  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19049  1300  3E09               	addlw	9
 19050  1301  0086               	movwf	6
 19051  1302  3001               	movlw	1	; select bank2/3
 19052  1303  0087               	movwf	7
 19053  1304  1981               	btfsc	1,3
 19054  1305  0008               	return
 19055                           
 19056                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 19057  1306  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19058  1307  0086               	movwf	6
 19059  1308  3001               	movlw	1	; select bank2/3
 19060  1309  0087               	movwf	7
 19061  130A  1401               	bsf	1,0
 19062                           
 19063                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 19064  130B  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19065  130C  3E09               	addlw	9
 19066  130D  0086               	movwf	6
 19067  130E  3001               	movlw	1	; select bank2/3
 19068  130F  0087               	movwf	7
 19069  1310  1581               	bsf	1,3
 19070                           
 19071                           ;Dimmer_B1.c: 48: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 19072  1311  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19073  1312  0086               	movwf	6
 19074  1313  3001               	movlw	1	; select bank2/3
 19075  1314  0087               	movwf	7
 19076  1315  1F01               	btfss	1,6
 19077  1316  0008               	return
 19078                           
 19079                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MOSFET = 1;
 19080  1317  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19081  1318  3E09               	addlw	9
 19082  1319  0086               	movwf	6
 19083  131A  3001               	movlw	1	; select bank2/3
 19084  131B  0087               	movwf	7
 19085  131C  1601               	bsf	1,4
 19086                           
 19087                           ;Dimmer_B1.c: 51: if (lights == 1) {
 19088  131D  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19089  131E  3A01               	xorlw	1
 19090  131F  1D03               	skipz
 19091  1320  2B23               	goto	i1l6744
 19092                           
 19093                           ;Dimmer_B1.c: 52: RA7 = 1;
 19094  1321  0020               	movlb	0	; select bank0
 19095  1322  178C               	bsf	12,7	;volatile
 19096  1323                     i1l6744:	
 19097                           ;Dimmer_B1.c: 53: ;;
 19098                           
 19099                           
 19100                           ;Dimmer_B1.c: 54: }
 19101                           ;Dimmer_B1.c: 57: if (lights == 2) {
 19102  1323  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19103  1324  3A02               	xorlw	2
 19104  1325  1D03               	skipz
 19105  1326  0008               	return
 19106                           
 19107                           ;Dimmer_B1.c: 58: RB4 = 1;
 19108  1327  0020               	movlb	0	; select bank0
 19109  1328  160D               	bsf	13,4	;volatile
 19110  1329  0008               	return
 19111  132A                     __end_of_setDimmerLights_IntrIOC_GO:	
 19112                           
 19113                           	psect	text133
 19114  1D3D                     __ptext133:	
 19115 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19116 ;; Defined at:
 19117 ;;		line 8 in file "../src/Dimmer_B1.c"
 19118 ;; Parameters:    Size  Location     Type
 19119 ;;  lights          1    wreg     unsigned char 
 19120 ;; Auto vars:     Size  Location     Type
 19121 ;;  lights          1    1[COMMON] unsigned char 
 19122 ;; Return value:  Size  Location     Type
 19123 ;;		None               void
 19124 ;; Registers used:
 19125 ;;		wreg
 19126 ;; Tracked objects:
 19127 ;;		On entry : 0/0
 19128 ;;		On exit  : 0/0
 19129 ;;		Unchanged: 0/0
 19130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19132 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19133 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19134 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19135 ;;Total ram usage:        2 bytes
 19136 ;; Hardware stack levels used:    1
 19137 ;; This function calls:
 19138 ;;		Nothing
 19139 ;; This function is called by:
 19140 ;;		_setDimmerLights_IntrIOC_GO
 19141 ;; This function uses a non-reentrant model
 19142 ;;
 19143                           
 19144                           
 19145                           ;psect for function _DimmerIntrIOCPointSelect
 19146  1D3D                     _DimmerIntrIOCPointSelect:	
 19147                           
 19148                           ;incstack = 0
 19149                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19150                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19151  1D3D  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19152                           
 19153                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19154  1D3E  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19155  1D3F  3A01               	xorlw	1
 19156  1D40  1D03               	skipz
 19157  1D41  2D47               	goto	i1l723
 19158                           
 19159                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19160  1D42  30BE               	movlw	_DimmerLights1& (0+255)
 19161  1D43  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19162  1D44  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19163  1D45  0021               	movlb	1	; select bank1
 19164  1D46  00CF               	movwf	_DimmerLightsIntrIOC^(0+128)
 19165  1D47                     i1l723:	
 19166                           
 19167                           ;Dimmer_B1.c: 12: }
 19168                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19169  1D47  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19170  1D48  3A02               	xorlw	2
 19171  1D49  1D03               	skipz
 19172  1D4A  0008               	return
 19173                           
 19174                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19175  1D4B  30CD               	movlw	_DimmerLights2& (0+255)
 19176  1D4C  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19177  1D4D  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19178  1D4E  0021               	movlb	1	; select bank1
 19179  1D4F  00CF               	movwf	_DimmerLightsIntrIOC^(0+128)
 19180  1D50  0008               	return
 19181  1D51                     __end_of_DimmerIntrIOCPointSelect:	
 19182  007E                     btemp	set	126	;btemp
 19183  007E                     pic14e$flags	set	126
 19184  007E                     wtemp	set	126
 19185  007E                     wtemp0	set	126
 19186  0080                     wtemp1	set	128
 19187  0082                     wtemp2	set	130
 19188  0084                     wtemp3	set	132
 19189  0086                     wtemp4	set	134
 19190  0088                     wtemp5	set	136
 19191  007F                     wtemp6	set	127
 19192  007E                     ttemp	set	126
 19193  007E                     ttemp0	set	126
 19194  0081                     ttemp1	set	129
 19195  0084                     ttemp2	set	132
 19196  0087                     ttemp3	set	135
 19197  007F                     ttemp4	set	127
 19198  007E                     ltemp	set	126
 19199  007E                     ltemp0	set	126
 19200  0082                     ltemp1	set	130
 19201  0086                     ltemp2	set	134
 19202  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         267
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     78      80
    BANK1            80      7      80
    BANK2            80      0      73
    BANK3            80      0      78
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK2[5]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setPercentValue
    _setDimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   97264
                                              3 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1612
                             _setBuz
                          _setTxData
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     244
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     495
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1773
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0    1773
                                             13 BANK0      2     2      0
           _getMain_All_Error_Status
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   11671
                                             29 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    6308
                                             17 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     450
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    5135
                                             22 BANK0      7     7      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29516
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   29516
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28687
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1656
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   26847
                             _setBuz
         _setDimmerLights_ErrorClose
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0    7483
                                             17 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    2038
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   15503
                                             71 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15280
                                             68 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   15214
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     252
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0     808
                                              9 BANK0      7     7      0
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      73
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1368
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12979
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   28548
                                             71 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   28136
                                             70 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  4     3      1   12665
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      4     3      1   13705
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1     423
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     204
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    3949
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    3949
                                             22 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0    2249
                                             17 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    1915
                                             15 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     266
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     266
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1139
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     319
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     181
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0      89
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1612
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     494
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     404
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     359
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     268
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     110
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
             _setRF_DimmerLights
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv
     _setTxData

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      49       9       91.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4E      11       97.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     18A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     18A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Nov 21 16:16:18 2014

                   __size_of_Switch_Main 0024                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l96 16C7                                       l98 16DB  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1F99  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 007C                     _getDimmerLights_Line 1D2A  
                 __end_of_setDelayOff_GO 08B7                             ___ftadd@exp1 004D  
                           ___ftadd@exp2 004C                setDimmerLights_Adj@lights 0065  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 16EF  
                   _setDimmerLights_Line 1DCB                             ___ftadd@sign 004B  
                                    l110 14A2                                      l106 14A8  
                                    l107 14A4                                      l108 1492  
                                    l330 1D5B                                      l331 1D5C  
                   _setDimmerLights_SwOn 1361                                      l255 0A13  
                                    l280 0B9A                                      l281 0BDD  
                                    l374 1099                                      l767 1CFB  
                                    l778 1248                                      l866 1D33  
                                    l867 1D3A                                      _GIE 005F  
                                    _CRC 00CC                                      l998 1E8F  
                                    l999 1E97                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0017  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RA4 0064  
                                    _LED 007A                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00BC  
                                    _ISR 0004                                      _WDT 00CA  
           getDimmerLights_Status@lights 0022                                      _Sw1 01DC  
                                    _Sw2 01E5                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1D65                    _Buzzer_Initialization 1B2B  
                        __end_of_ADC_Set 1B69                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
           getDimmerLights_Status@status 0023                          _setDimmerLights 0D5F  
                 _setMain_Exception$7066 0039                        ??_getSw_KeyStatus 0020  
                  _setDimmerLights_AdjRF 1FDD                                     ?_ISR 0070  
        setDimmerLights_ErrorClose@count 0032                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1C36                               Load_Main@i 002F  
                             Load_Main@j 002B                             ___ftdiv@sign 003D  
                                   l1033 13D5                                     l1301 12B7  
                                   l2021 0BFE                                     l2031 0C54  
                                   l1315 11B2                                     l2051 0B71  
                                   l1324 14F5                                     l2037 12EF  
                                   l2063 1407                 ?_DimmerLightsPointSelect 0070  
                                   l1460 02F8                                     l1463 01F1  
                                   l1464 02C8                                     l1465 02C6  
                                   l1617 0FFC                          __end_of_IOC_Set 1C00  
                                   l2369 1DE7                                     l2385 1080  
                                   l2730 1218                                     l2395 01B1  
                                   l2725 1201                                     l2397 008A  
                                   l6014 115C                                     l2726 121C  
                                   l2902 0947                                     l6040 15F5  
                                   l6120 0892                                     l2681 1535  
                                   l6122 089F                                     l1970 061C  
                                   l7002 1D84                                     l2931 04D9  
                                   l6124 08A8                                     l6116 088C  
                                   l6212 1450                                     l2908 095E  
                                   l1980 0597                                     l1972 0559  
                                   l1973 055B                                     l6046 1600  
                                   l6230 1794                                     l1982 05D4  
                                   l1974 0563                           _Load_Main$3849 002D  
                                   l6072 1637                                     l6064 1626  
                                   l6056 1608                                     l8000 0284  
                                   l7016 1F06                                     l7050 07E6  
                                   l6058 1614                                     l6146 1C80  
                                   l6330 1E2F                                     l7026 1F12  
                                   l7018 1F08                                     l1979 059B  
                                   l6412 1E41                                     l7060 07F6  
                                   l7044 07DD                                     l6068 162F  
                                   l6332 1E33                                     l6404 13F5  
                                   l7028 1F16                                     l6414 1E44  
                                   l7054 07ED                                     l7046 07E0  
                                   l6350 0837                                     l8006 0291  
                                   l6430 1FC7                                     l7056 07F0  
                                   l6352 080C                                     l6512 15D8  
                                   l6520 15E0                                     l6504 15C2  
                                   l7224 1714                                     l8008 0297  
                                   l6600 09E4                                     l7320 1F46  
                                   l6418 1E4A                                     l6354 083D  
                                   l6530 1DD8                                     l5730 092E  
                                   l7226 171A                                     l8018 02AC  
                                   l6434 1FCD                                     l6282 11C6  
                                   l6460 11FC                                     l6516 15DC  
                                   l5740 0954                                     l5732 0933  
                                   l5724 091D                                     l5820 04B8  
                                   l7236 1742                                     l6428 1FC4  
                                   l6604 09EA                                     l6196 1397  
                                   l8116 1089                                     l7324 1F4B  
                                   l8140 151F                    _setDimmerLights_SwOff 141C  
                                   l6710 10B5                                     l6470 1213  
                                   l6462 1205                                     l5814 04A5  
                                   l7342 14CB                                     l6630 0A26  
                                   l6622 0A19                                     l6390 158D  
                                   l7318 1F43                                     l8150 1536  
                                   l5752 1CBE                                     l5728 0924  
                                   l5832 04EB                                     l5816 04AF  
                                   l5808 0492                                     l7336 14B6  
                                   l6632 0A29                                     l6624 0A1C  
                                   l5920 0F01                                     l5904 0EBE  
                                   l7440 0FCA                                     l6722 1F89  
                                   l6482 15A9                                     l6490 15B1  
                                   l5738 094C                                     l5826 04CB  
                                   l5818 04B4                                     l6802 0DD4  
                                   l6810 0ABA                                     l8066 02E6  
                                   l6650 0B76                                     l6618 09FB  
                                   l6386 157E                                     l6562 0B0B  
                                   l7426 0FB2                                     l6708 10AA  
                                   l6716 1F80                                     l5756 1CC4  
                                   l5836 04FD                                     l5828 04D5  
                                   l6900 119A                                     l6652 0B79  
                                   l6636 0A2F                                     l6628 0A22  
                                   l5932 0F1D                                     l5916 0EF9  
                                   l6580 0B4A                                     l7516 05B9  
                                   l7604 17F1                                     l7428 0FB4  
                                   l6718 1F83                                     l5774 1FA4  
                                   l5846 0518                                     l5790 0469  
                                   l5862 0E15                                     l6670 0B91  
                                   l6582 0B4E                                     l6574 0B30  
                                   l7518 05BB                                     l7534 05E9  
                                   l7606 17FA                                     l7438 0FC9  
                                   l6496 15BA                                     l5856 0DFF  
                                   l6656 0B7F                                     l5928 0F15  
                                   l6584 0B52                                     l8088 1352  
                                   l8280 1662                                     l5786 0462  
                                   l6658 0B82                                     l6578 0B46  
                                   l7546 060A                                     l7482 057A  
                                   l7570 1DF2                                     l6834 1267  
                                   l7634 00B8                                     l7618 0075  
                                   l7708 147C                                     l6764 1182  
                                   l5796 0478                                     l5884 0E6F  
                                   l5876 0E56                                     l5956 0CF1  
                                   l6684 0BAB                                     l6668 0B97  
                                   l6588 0B56                                     l7580 17B0  
                                   l7644 00EA                                     l7396 0F59  
                                   l8284 166D                                     l6766 1166  
                                   l5990 0D56                                     l5982 0D3C  
                                   l5974 0D21                                     l6790 0DAD  
                                   l6686 0BC3                                     l6598 09E1  
                                   l7566 1DEC                                     l7910 0CA5  
                                   l6768 1187                                     l5984 0D45  
                                   l5976 0D2F                                     l7760 124A  
                                   l6944 1CA3                                     l5986 0D48  
                                   l7818 0692                                     l6698 0BDF  
                                   l5898 0EA8                                     l7594 17D1  
                                   l7658 0128                                     l7906 0C9D  
                                   l7756 123F                                     l6964 0C01  
                                   l7588 17C3                                     l7668 015A  
                  _myMain_Initialization 1C36                                     l5998 1D70  
                                   l7758 1242                                     l7950 01E0  
                                   l7598 17E1                                     l7694 01AD  
                                   l7926 0CD2                                     l6992 0C4A  
                                   l6976 0C19                                     l7970 020B  
                                   l6986 0C3F                                     l7976 0235  
                                   _CFGS 0CAE                                     l7898 0C78  
                           __CFG_WDTE$ON 0000                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     u5005 1615  
                                   u5015 161F                                     u5025 1627  
                                   u4305 0965                                     u5210 1752  
                                   u4235 0929                                     u6015 116F  
                                   u4255 0942                                     u5215 1750  
                                   u4505 04B9                                     u4275 094F  
                                   _PEIE 005E                                     u4445 0493  
                                   u4605 0E27                                     u5255 1DB0  
                                   u4535 04CC                                     u4615 0E37  
                                   u5345 0815                                     u4625 0E57  
                                   u4475 04A6                                     u4635 0E66  
                                   u4715 0F02                                     u4645 0E70  
                                   u4805 0CF8                                     u8005 0237  
                                   u4725 0F08                                     u7205 05FA  
                                   u8015 023C                                     u8025 024A  
                                   u4835 0D22                                     u4755 0F1E  
                                   u7075 0574                                     u4925 1148  
                                   u4765 0F24                                     u4685 0ECA  
                                   u8205 1358                                     u4695 0EDA  
                                   u5905 109F                                     u4865 0D3D  
                                   u7525 1472                                     u8085 029D  
                                   u8255 150E                                     u4985 160B  
                                   u8265 152D                                     u8195 1349  
                                   u8285 1544                                     u7815 0C8B  
                                   u7755 12AE                                     u6955 0F9A  
                                   u6975 0FBA                                     u7865 0CBF  
                                   _LWLO 0CAD                                     _RSSI 00D0  
                                   _WREN 0CAA                                     _Buz1 00B0  
                                   _Load 0126                                     _Temp 00D7  
                                   _main 163E                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 0914                          __end_of_RF_Main 1B34  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0020  
                                   btemp 007E                          __end_of_WDT_Set 1BAD  
                                   ltemp 007E            __size_of_setRF_Initialization 000B  
                       _setDimmerReClock 1B69                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 141C  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                      ?_getDimmer_LoadOK 0070                                    ??_ISR 0077  
                           ___fttol@exp1 005B                             ___fttol@lval 0057  
                 _getDimmerLights_Status 1C45                       ??_getDimmer_LoadOK 0020  
         __size_of_DimmerIntrPointSelect 0012                         __end_of_LED_Main 1BF4  
       setDimmerLights_ErrorClose@lights 0033            __end_of_DimmerIntrPointSelect 1CBB  
                  ?_getDimmerLights_Line 0070                    ?_setDimmerLights_Main 0070  
                  ?_setDimmerLights_Line 0070                          ?_setDelayOff_GO 002A  
                  ?_setDimmerLights_SwOn 0070                                    ?_main 00EC  
                        __end_of___awdiv 163E                          __end_of___ftadd 0530  
                        __end_of___ftdiv 0E91                          __end_of___ftneg 1BA2  
                        __end_of___ftmul 0F45                          ___awdiv@divisor 0020  
                                  _T1CON 0018                          __end_of___fttol 0D5F  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l723 1D47  
                                  i1l735 1CB2                                    i1l746 0414  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0021                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                   setMain_Exception@buz 0038                  __end_of_Timeout_Counter 1DB6  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 132A  
             _setDimmerLights_IntrIOC_GO 12F3                         __end_of_TMR1_ISR 110A  
           __size_of_CC2500_WriteCommand 0019       __end_of_setDimmerLights_ErrorClose 085A  
             _setDimmerLights_ErrorClose 0800                         __end_of_TMR1_Set 1C0C  
                                  _getAD 1F38                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1CF1              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E8  
                         __CFG_BOREN$OFF 0000             __end_of_getMain_Lights_Count 1E0B  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011             __end_of_getMain_LightsStatus 118A  
          __end_of_setLED_Initialization 1C76                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 1748  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003         __size_of_DelayOff_Initialization 0008  
                 ?_setLoad_AH_AL_Restore 0070                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 0A3F                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0070  
                      ?_setMemory_Modify 0070                  __size_of_getDelayOff_GO 0010  
                      ??_setPercentValue 005C                             __end_of_main 1696  
                    ?_setRF_DimmerLights 0020                         __end_of_Fosc_Set 0800  
                     ??_setMemory_Modify 0020                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0DE8  
                   _setSw_Initialization 1B91                                   ??_main 006E  
                          ___fttol@sign1 0056                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0B0A                           _setMemory_Data 1BC4  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 0014  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E8  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1D04  
                 ?_setDimmerLights_AdjRF 0070                 __size_of_setRFSW_Control 004F  
                ??_Switch_Initialization 0025                     ??_setRF_DimmerLights 0021  
                                 ?_getAD 0020             setDimmerLights_AdjControl@sw 0028  
                      ??_getRF_KeyStatus 0020                   ?_setDimmerLights_SwOff 0070  
                            _DlyOff_Main 08B7                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006E                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 1FBB  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 0975  
               _getMain_All_Error_Status 11EB                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1EBC                                   i1l7152 0360  
                                 i1l7170 03AC                                   i1l7172 03B2  
                                 i1l7148 0359                                   i1l7184 03E7  
                                 i1l7176 03C3                                   i1l7178 03C9  
                                 i1l7188 03FC                                   i1l6744 1323  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                                   u653_25 0333  
                     __size_of_Load_Main 0144                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   _IO_Set 1E52  
                                 u768_25 1104                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1B2A  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1DCB  
                                 _Dimmer 0120                                   _DlySw1 0153  
                                 _DlySw2 0158               __end_of_Mcu_Initialization 1CDF  
                    __end_of_Buzzer_Main 14AF                                   _Memory 0220  
                                 _Timer1 0123       __end_of_setDimmerLights_TriggerAdj 1F38  
             _setDimmerLights_TriggerAdj 1F18                                   ___bmul 1CBB  
                              ??___awdiv 0024                                ??___ftadd 0047  
           __size_of_DelayOffPointSelect 0014                                ??___ftdiv 0034  
                              ??___ftneg 0041                    setDimmerLights@lights 0065  
                              ??___ftmul 0034                                ??___fttol 0052  
           ?_Flash_Memory_Initialization 0070                   ??_getDimmerLights_Line 0020  
            setDimmerLights_AdjRF@lights 0063                   ??_setDimmerLights_Main 0066  
                 ??_setDimmerLights_Line 0020                                   _r_data 00D5  
                                 _s_data 00D6                   ??_setDimmerLights_SwOn 002D  
                                 _setLED 159A                                   _myMain 00A0  
                 __end_of_setMemory_Data 1BD0                         _DimmerLightsIntr 0079  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0062  
                       ___awdiv@quotient 0027                                   _setBuz 1696  
                     __size_of_Temp_Main 0003              __end_of_Load_Initialization 1B50  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039              ?_setDimmerLights_AdjControl 0070  
    __end_of_setDimmerLights_IntrControl 043A              _setDimmerLights_IntrControl 02FE  
               Flash_Memory_Read@address 0022                         ?_Timeout_Counter 0070  
             __end_of_setMemory_LoopSave 1D2A              getMain_Lights_Count@status1 0022  
            getMain_Lights_Count@status2 0023              getMain_Lights_Count@status3 0021  
                  __end_of_SwPointSelect 1D8D             __size_of_Flash_Memory_Modify 004E  
      setDimmerLights_IntrControl@lights 0076                  __size_of_LedPointSelect 001B  
                __size_of_getMain_LoadOK 000E                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009               getMain_LightsStatus@status 0028  
                             _TouchPower 1DE0               ?_getAll_DimmerLights_AdjGO 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 0AA4         __end_of_CC2500_registers_address 102F  
                __end_of__initialization 0047                                ?_LED_Main 0070  
                             ___ftadd@f1 0041                               ___ftadd@f2 0044  
                   _getRF_KeyStatus$5256 0022                            ?_my_MainTimer 0070  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                               ___ftneg@f1 003E  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004E  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                           __pidataBANK4 1F58                            __end_of_getAD 1F58  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
                 setLoad_AH_AL_Restore@i 0021                setMemory_LoopSave@command 0021  
           __size_of_setDimmerLights_Adj 0066                       _LED_Initialization 1BDC  
                        _getSw_KeyStatus 1EF9                ??_setControl_Lights_Table 006B  
                     getRF_KeyStatus@key 0021                         ??_DelayTimejudge 0024  
                        ?_setMemory_Data 0020            ??_Flash_Memory_Initialization 0062  
                       ?_setDimmerLights 0062                     _getMain_Lights_Count 1DF5  
                              ?_WDT_Main 0070                        __end_of_Load_Main 02FE  
                     __size_of_getBuz_GO 0011                     _getMain_LightsStatus 115E  
             __end_of_set_TimeoutCleared 1B4B                 __end_of_setDimmerReClock 1B71  
                     __size_of_getRxData 0074                      ?_LED_Initialization 0070  
                  getMain_LightsStatus@i 0026                        ?_CC2500_WriteByte 0070  
                         _DimmerLights11 00CD                           _DimmerLights22 00CE  
                   __size_of_setLED_Main 003E                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 1B34  
                     ??_CC2500_WriteByte 0020                               __pbssBANK0 006F  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                               __pbssBANK4 0220  
                              ?_Fosc_Set 0070                              _Buzzer_Main 1465  
                      ??_setRFSW_Control 0031                        __end_of_Temp_Main 1B3A  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                         ??_my_MainTimer 002D                               ??_LED_Main 0025  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1B71  
              getMain_LightsStatus@count 0025                            ??_Switch_Main 003D  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 006F  
                      LedPointSelect@led 0021                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 0014                              setBuz@count 002C  
                ?_getDimmerLights_Status 0070                               __pmaintext 163E  
                         _getDelayOff_GO 1C55                      _CC2500_WriteCommand 1E39  
                   ?_Temp_Initialization 0070                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 0013                         ??_setDelayOff_GO 002C  
          ??_DimmerLights_Initialization 0024                               ??_TMR1_ISR 0077  
                          ?_setTemp_Main 0070                               _getLoad_AD 0C57  
                             ??_TMR1_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                               _getLoad_OK 1B81  
                     __size_of_setTxData 00BD                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                    ?_getMain_Lights_Count 0070  
                                _ADC_Set 1B62                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 132A                               ??_WDT_Main 0020  
                  ?_getMain_LightsStatus 0070             __end_of_setRF_Initialization 1BB8  
                     _setRFSW_AdjControl 13DC                                  _IOC_ISR 1C27  
                                _IOC_Set 1BF4                     __size_of_setLog_Code 0036  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 1287  
              __size_of_getDimmer_LoadOK 0008                        _Flash_Memory_Read 1E6B  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 0071  
                 __size_of_CC2500_TxData 0065              ?_setDimmerLights_ErrorClose 0070  
                    ?_setRFSW_AdjControl 0070                                  _RF_Data 01A0  
                                _RF_Main 1B31                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1BA2  
        __end_of_setControl_Lights_Table 0B72                          setRF_Main@error 00EB  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _setPercentValue 0975                  ??_setLoad_AH_AL_Restore 0020  
                       ?_getPercentValue 0070             __end_of_CC2500_FrequencyCabr 1BC4  
                        __size_of_IO_Set 0019                        __end_of_getBuz_GO 1C98  
                    ??_Flash_Memory_Main 0029                      ??_Flash_Memory_Read 0020  
                 __end_of_getDelayOff_GO 1C65                                  _VarLED1 0161  
                                _VarLED2 0165           __end_of_getDimmerLights_Status 1C55  
                      __end_of_getRxData 0C57                  __end_of_getSw_KeyStatus 1F18  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1D51  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1EDA  
                   ??_setRFSW_AdjControl 0067                           ??_setTemp_Main 002D  
                        __size_of___bmul 0012                                  ___awdiv 15EA  
                                ___ftadd 043A                                  ___ftdiv 0DE8  
                                ___ftneg 1B99                                  ___ftmul 0E91  
                                ___fttol 0CD8                      __end_of_Switch_Main 1094  
                ??_Buzzer_Initialization 0020                          _getRF_KeyStatus 1C98  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0050                     setRFSW_AdjControl@sw 006A  
                        __size_of_setBuz 0059                                  __ptext1 14FD  
                                __ptext2 1C36                                  __ptext3 132A  
                                __ptext4 0C57                                  __ptext5 1F38  
                                __ptext6 1CDF                                  __ptext7 0002  
                                __ptext8 1B37                                  __ptext9 0F45  
                ??_setDimmerLights_AdjRF 0062                __size_of_CC2500_SIDLEMode 0004  
                  _DimmerIntrPointSelect 1CA9                             __size_of_ISR 000F  
             ??_getMain_All_Error_Status 0020                __end_of_Flash_Memory_Main 12BD  
              __end_of_Flash_Memory_Read 1E85                  ??_setDimmerLights_SwOff 002F  
                             _setRF_Main 0530                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1B79                        _DimmerLights_Main 121E  
         __size_of_DlyOff_Initialization 0006                    ??_CC2500_WriteCommand 0022  
              __size_of_setMemory_Modify 0013            __end_of_DlyOff_Initialization 1B56  
             __end_of_CC2500_ClearRXFIFO 1B3E                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1B42            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006E                           _LedPointSelect 1E85  
                    _DelayOffPointSelect 1D65                           _getMain_LoadOK 1C19  
                                clrloop0 1B5D           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 1C19                     end_of_initialization 0047  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 110A  
                          _DelayTime_1us 1094                        __end_of_setTxData 07B9  
             __end_of_Flash_Memory_Write 11B9                                  init_ram 1B56  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 1B57  
                             _setSw_Main 004B                    CC2500_ReadByte@loop_b 0021  
                 setDimmerLights_SwOn@sw 002F                        _CC2500_ReadStatus 1FBB  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1C65  
                        ?_getDelayOff_GO 0070                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                 __size_of_CC2500_ReadByte 0017  
                          _CC2500_RxData 0B72                            _CC2500_TxData 09DA  
                    ??_CC2500_InitSetREG 0025              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 14AF                              ?_getLoad_AD 0070  
                            ?_getLoad_OK 0070                   ??_getMain_Lights_Count 0020  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1067  
                    ??_CC2500_ReadStatus 0022                   ??_getMain_LightsStatus 0024  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
                    __size_of_TouchPower 0015                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 1252  
                     _Mcu_Initialization 1CCD                 __size_of_CC2500_PowerRST 0043  
                   __end_of_my_MainTimer 154B                           ?_DelayOff_Main 0070  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1EA0  
                __end_of_setPercentValue 09DA                   __end_of_getMain_LoadOK 1C27  
               __size_of_CC2500_WriteREG 0021                __end_of_CC2500_InitSetREG 1134  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 005C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 0AA4                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 1FDD              ??_getAll_DimmerLights_AdjGO 0020  
        getMain_All_Error_Status@command 0025                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1E6B                     _setRF_Initialization 1BAD  
                     _setMemory_LoopSave 1D17                              _Switch_Main 1070  
                      __size_of_LED_Main 000C                         ?_getSw_KeyStatus 0070  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1CF1                  __end_of_getRF_KeyStatus 1CA9  
                      _setMain_Exception 17A4                         ??_setMemory_Data 0021  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1DB6  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                       ?_setMain_Exception 0070  
                    ?_setMemory_LoopSave 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1CCD                 setMain_Exception@command 003C  
                   setRF_DimmerLights@on 0020                 _DimmerIntrIOCPointSelect 1D3D  
        _setDimmerLights_AdjControl$2577 0027                        getSw_KeyStatus@sw 0024  
                      __size_of_TMR1_ISR 0029            __size_of_getDimmerLights_Line 0013  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR1_Set 000C  
          __size_of_setDimmerLights_Main 0059                           __end_of_setLED 15EA  
          __size_of_setDimmerLights_Line 0015            __size_of_setDimmerLights_SwOn 003D  
                         __end_of_setBuz 16EF                      ??_setMain_Exception 0036  
                   _CC2500_FrequencyCabr 1BB8               __size_of_Flash_Memory_Main 0036  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 154B                        __size_of_WDT_Main 0012  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 11B9                          ?_LedPointSelect 0070  
                              _Load_Main 01BA                              __end_of_ISR 0013  
                        ?_getMain_LoadOK 0070                         _getDimmer_LoadOK 1B89  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 0005  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 1EF9          __size_of_setTemp_Initialization 0001  
                   ??_setMemory_LoopSave 0020                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 1000  
                    __size_of_getLoad_AD 0081                             ?_Buzzer_Main 0070  
                    __size_of_getLoad_OK 0008                       _set_TimeoutCleared 1B46  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0015  
                              _VarErrLED 015D                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0064                      __size_of_getTemp_AD 0037  
                 ?_setLED_Initialization 0070                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                __end_of_setMain_Exception 1800  
              __size_of_CC2500_WriteByte 0014                                _Temp_Main 1B37  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D1                  setRF_DimmerValue@lights 0066  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00D3  
                            __pdataBANK4 0245                _getAll_DimmerLights_AdjGO 1C76  
                               ??_setLED 0023                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0039  
                      ??_CC2500_ReadByte 0020         __end_of_getMain_All_Error_Status 121E  
                       _CC2500_SIDLEMode 1B42               __size_of_DimmerLights_Main 0034  
              __end_of_setRF_DimmerValue 11EB                       setMemory_Data@data 0020  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070           _getAll_DimmerLights_AdjGO$2556 0022  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                         _setMemory_Modify 1D04  
                             ?_Load_Main 0070                            __pcstackBANK0 0020  
                          __pcstackBANK1 00E9                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0089  
                          DlyOff_Main@sw 0038                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 005D  
             __size_of_CC2500_ReadStatus 0022                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 01BE  
                          _DimmerLights2 01CD                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 001C                          ??_CC2500_RxData 0024  
          __end_of_setLoad_AH_AL_Restore 1EBC                 setRFSW_AdjControl@status 0069  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006E  
                         getRxData@error 006C              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                               ?_Temp_Main 0070  
                    __size_of_setRF_Main 00F0                           Load_Main@adjgo 002C  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                       ?_getRF_KeyStatus 0070                           Load_Main@error 002E  
                 _setTemp_Initialization 1066                                _getBuz_GO 1C87  
    __end_of_Flash_Memory_Initialization 06FC              _Flash_Memory_Initialization 0620  
                               ?___awdiv 0020                                __ptext100 1134  
                              __ptext101 1CBB                                __ptext110 1DB6  
                              __ptext102 1C55                                __ptext111 1B42  
                              __ptext103 1C45                                __ptext120 1E39  
                              __ptext112 07B9                                __ptext104 1CF1  
                              __ptext121 1B46                                __ptext113 110A  
                              __ptext105 1696                                __ptext130 1C27  
                              __ptext122 1DA1                                __ptext114 1EDA  
                              __ptext106 15EA                                __ptext131 1B69  
                              __ptext123 1D51                                __ptext115 1F78  
                              __ptext107 1B71                                __ptext132 12F3  
                              __ptext124 1465                                __ptext116 1BB8  
                              __ptext108 1B50                                __ptext133 1D3D  
                              __ptext125 1B2B                                __ptext117 1094  
                              __ptext109 1D65                                 ?___ftadd 0041  
                              __ptext118 1B3E                                __ptext127 10E1  
                              __ptext119 1B3A                                __ptext128 02FE  
                              __ptext129 1CA9                                _getRxData 0BE3  
                               ?___ftdiv 002E                                 ?___ftneg 003E  
                               ?___ftmul 002E                                 ?___fttol 004E  
                  __size_of_my_MainTimer 004E                  __end_of_setRFSW_Control 159A  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
                       getMain_LoadOK@ok 0022            __end_of_Buzzer_Initialization 1B2E  
                       getPercentValue@i 005F                         setPercentValue@i 005F  
                          ??_setLog_Code 002D                 getDimmerLights_Line@line 0021  
                     __end_of_TouchPower 1DF5                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 016F  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
          __end_of_setDimmerLights_AdjRF 2000                   CC2500_WriteByte@loop_a 0021  
                 _DimmerLights_Main$2494 0069                                _r_address 00D4  
         __size_of_setDimmerLights_SwOff 0049           __size_of_myMain_Initialization 000F  
          __end_of_setDimmerLights_SwOff 1465             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1C45                           __size_of_getAD 0020  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1D79  
                    __end_of_setLED_Main 13DC                         ??_getDelayOff_GO 0022  
                    _DimmerLightsIntrIOC 00CF                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 1B37             setDimmerLights_SwOff@command 002F  
                      _CC2500_rfSettings 102F                                 _LED_Main 1BE8  
                        SwPointSelect@sw 0021                                clear_ram0 1B5C  
               CC2500_InitPATable@loop_d 0027               __size_of_setMain_Exception 005C  
                           _my_MainTimer 14FD                                _setTxData 06FC  
    __end_of_DimmerLights_Initialization 1E22              _DimmerLights_Initialization 1E0B  
                     _CC2500_ClearRXFIFO 1B3A                       _CC2500_ClearTXFIFO 1B3E  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0024  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1DA1  
                      ??_Timeout_Counter 0020                               ?_getBuz_GO 0020  
               __size_of_getPercentValue 0065                 setRF_DimmerLights@status 0023  
            __size_of_setRFSW_AdjControl 0040                       _Flash_Memory_Write 118A  
                             ?_getRxData 0070                             ??_getLoad_AD 0024  
                               _TMR1_ISR 10E1                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                             ??_getLoad_OK 0020  
                               _TMR1_Set 1C00                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00C8                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 1E52                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 1CDF                  DlyOff_Initialization@sw 0022  
                  getSw_KeyStatus@status 0023                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0032                      ?_Flash_Memory_Write 0070  
                       setRF_Main@loop_f 00E9                    __size_of_setTemp_Main 00BB  
                __size_of_setDelayOff_GO 005D             ??_setDimmerLights_AdjControl 0025  
                               _DelayOff 0078                             setSw_Main@sw 0033  
       setDimmerLights_IntrIOC_GO@lights 0072                              ??_Load_Main 0029  
                       __size_of_IOC_ISR 000F             ?_setDimmerLights_IntrControl 0070  
         getMain_All_Error_Status@status 0026                         __size_of_IOC_Set 000C  
           __end_of_Flash_Memory_Erasing 1BDC                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                         setLED_Main@led 0024                     __end_of_WDT_Clearing 0004  
                    __end_of_setLog_Code 12F3                    _DlyOff_Initialization 1B50  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 07FC                         __size_of_WDT_Set 000B  
                  setRFSW_Control@status 0032                  setMain_Exception@status 003B  
                     __end_of_getLoad_AD 0CD8                       __end_of_getLoad_OK 1B89  
                  _Switch_Initialization 1C0C        __size_of_getMain_All_Error_Status 0033  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0063  
              ?_getMain_All_Error_Status 0070                     __size_of_Buzzer_Main 004A  
                     __end_of_getTemp_AD 1361                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1D51                        getLoad_AD@channel 0026  
           Flash_Memory_Initialization@i 0063                                 _SwDetect 00D2  
                            ??_Temp_Main 002F                        setRFSW_Control@sw 0033  
          _getMain_All_Error_Status$7076 0021            _getMain_All_Error_Status$7077 0023  
               __end_of_getDimmer_LoadOK 1B91                      _Load_Initialization 1B4B  
                              setLED@led 0023                  ??_DimmerIntrPointSelect 0070  
    __size_of_setDimmerLights_AdjControl 0035                             _setTemp_Main 0F45  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                       __size_of___ftneg 0009                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                 setDimmerLights_SwOn@idle 002E  
                               ___awtoft 1F99                         ??_LedPointSelect 0020  
                               ___ftpack 0914            __size_of_getMain_Lights_Count 0016  
                       ??_getMain_LoadOK 0021            __size_of_getMain_LightsStatus 002C  
                      getTemp_AD@channel 0025                             ??_setRF_Main 006D  
                   CC2500_WriteREG@value 0022                              _setLED_Main 139E  
             __end_of_setRF_DimmerLights 17A4                 ?_DelayOff_Initialization 0070  
                       getDelayOff_GO@go 0023                         getDelayOff_GO@sw 0022  
                       setDelayOff_GO@sw 002E       __size_of_getAll_DimmerLights_AdjGO 0011  
                   ?_Load_Initialization 0070                                 __ptext10 1B34  
                               __ptext11 1066                                 __ptext20 1C0C  
                               __ptext12 1070                                 __ptext21 1B91  
                               __ptext13 004B                                 __ptext30 1361  
                               __ptext22 1DE0                                 __ptext14 1D8D  
                               __ptext31 13DC                                 __ptext23 1B31  
                               __ptext15 1252                                 __ptext40 0B72  
                               __ptext32 11B9                                 __ptext24 0530  
                               __ptext16 1EF9                                 __ptext41 1FBB  
                               __ptext33 1FDD                                 __ptext25 0BE3  
                               __ptext17 1D79                                 __ptext50 07FC  
                               __ptext42 1E22                                 __ptext34 0A3F  
                               __ptext26 12BD                                 __ptext18 17A4  
                               __ptext51 1B62                                 __ptext43 1B2E  
                               __ptext35 0E91                                 __ptext27 1D17  
                               __ptext19 1D2A                                 __ptext60 139E  
                               __ptext52 01BA                                 __ptext44 1BAD  
                               __ptext36 1D04                                 __ptext28 0B0A  
                               __ptext61 1BDC                                 __ptext53 1C19  
                               __ptext45 1CCD                                 __ptext37 1C98  
                               __ptext29 154B                                 __ptext70 1E6B  
                               __ptext62 1C65                                 __ptext54 1B89  
                               __ptext46 1BA2                                 __ptext38 1C87  
                               __ptext71 121E                                 __ptext63 1287  
                               __ptext55 1DF5                                 __ptext47 1C00  
                               __ptext39 09DA                                 __ptext80 0DE8  
                               __ptext72 16EF                                 __ptext64 14AF  
                               __ptext56 1C76                                 __ptext48 1E52  
                               __ptext81 043A                                 __ptext73 0AA4  
                               __ptext65 1BD0                                 __ptext57 1B4B  
                               __ptext49 1BF4                                 __ptext90 1E0B  
                               __ptext82 1F99                                 __ptext74 0D5F  
                               __ptext66 0620                                 __ptext58 1EA0  
                               __ptext91 10BA                                 __ptext83 0914  
                               __ptext75 06FC                                 __ptext67 1BC4  
                               __ptext59 1BE8                                 __ptext92 1B2A  
                               __ptext84 159A                                 __ptext76 1748  
                               __ptext68 118A                                 __ptext93 1B79  
                               __ptext85 1E85                                 __ptext77 0975  
                               __ptext69 1067                                 __ptext94 08B7  
                               __ptext86 1DCB                                 __ptext78 0CD8  
                               __ptext95 0800                                 __ptext87 11EB  
                               __ptext79 1B99                                 __ptext96 141C  
                               __ptext88 115E                                 __ptext97 1F18  
                               __ptext89 1B81                                 __ptext98 1EBC  
                               __ptext99 085A                                 __product 0245  
          ??_setDimmerLights_IntrControl 0072                  ??_setLED_Initialization 0024  
               ??_getDimmerLights_Status 0022           __size_of_Dimmer_Initialization 0001  
           __end_of_getDimmerLights_Line 1D3D            __end_of_Dimmer_Initialization 1B2B  
           __end_of_setDimmerLights_Main 1748             __end_of_setDimmerLights_Line 1DE0  
                       Switch_Main@error 003E             __end_of_setDimmerLights_SwOn 139E  
                 getDimmer_LoadOK@status 0020                             ??_setSw_Main 0031  
                          setLED@command 0022                            __size_of_main 0058  
                            _setRF_Learn 1D8D                 __end_of_CC2500_SIDLEMode 1B46  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 1D79  
             CC2500_WriteCommand@command 0023                     setRF_Main@Receive_OK 00EA  
              __size_of_setDimmerReClock 0008           setDimmerLights_AdjControl@idle 0026  
                        _CC2500_ReadByte 1E22                       _CC2500_InitPATable 1EDA  
               __end_of_setMemory_Modify 1D17            setDimmerLights_Trigger@lights 0024  
                     __end_of_setRF_Main 0620                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012              setDimmerLights_ErrorClose@i 0034  
                   _CC2500_patable_vaule 105E                              ??_getRxData 006B  
                           getLoad_OK@ok 0020         setDimmerLights_TriggerAdj@lights 0024  
                               main@argc 00EC                                 main@argv 00EE  
                    ?_CC2500_InitPATable 0070                     _getSw_KeyStatus$6330 0021  
                   _getSw_KeyStatus$6331 0022                          _CC2500_PowerRST 07B9  
               __size_of_getSw_KeyStatus 001F              __end_of_Flash_Memory_Modify 14FD  
                      ??_getPercentValue 005C                              _setLog_Code 12BD  
            __end_of_Flash_Memory_Unlock 1070                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1F78                       __end_of_setSw_Main 01BA  
                  ??_Load_Initialization 0022                            _Transceive_OK 03E9  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 1134  
                            pic14e$flags 007E             ??_setDimmerLights_IntrIOC_GO 0072  
             setDimmerLights_Line@lights 0020             ??_setDimmerLights_ErrorClose 0031  
                setDimmerLights_SwOff@sw 0030        __end_of_getAll_DimmerLights_AdjGO 1C87  
            __size_of_setMemory_LoopSave 0013                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 10E1  
__size_of_setDimmerLights_Initialization 0027           _setDimmerLights_Initialization 10BA  
            __end_of_setDimmerLights_Adj 0B0A                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                      _RF_Initialization 1B2E     __size_of_setDimmerLights_IntrControl 013C  
                            getLoad_AD@i 0029                              getLoad_AD@j 0028  
                            getLoad_AD@k 0027                     _Flash_Memory_Erasing 1BD0  
                     ?_RF_Initialization 0070                               _SPI0Buffer 007B  
        __end_of_DelayOff_Initialization 1B79      __size_of_setDimmerLights_IntrIOC_GO 0037  
    __size_of_setDimmerLights_ErrorClose 005A                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1B81       __end_of_setDimmerLights_AdjControl 1287  
             _setDimmerLights_AdjControl 1252                      ??_RF_Initialization 0021  
                __size_of_setMemory_Data 000C                           _setDelayOff_GO 085A  
       __size_of_setControl_Lights_Table 0068                   __end_of_DelayTimejudge 115E  
   __size_of_Flash_Memory_Initialization 00DC              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0036                    setMemory_Data@address 0022  
                  __end_of_DelayTime_1us 10BA                  __end_of_CC2500_ReadByte 1E39  
           __end_of_setSw_Initialization 1B99                          _Timeout_Counter 1DA1  
        __size_of_getDimmerLights_Status 0010                     getPercentValue@value 005E  
             __end_of_LED_Initialization 1BE8         __size_of_setDimmerLights_Trigger 001E  
         __end_of_setTemp_Initialization 1067                 __size_of_setPercentValue 0065  
                setMemory_Modify@command 0021                     setPercentValue@value 005E  
              __end_of_RF_Initialization 1B31                    __end_of_CC2500_RxData 0BE3  
                  __end_of_CC2500_TxData 0A3F                    _setLoad_AH_AL_Restore 1EA0  
                __end_of_CC2500_PowerRST 07FC           getAll_DimmerLights_AdjGO@adjgo 0021  
