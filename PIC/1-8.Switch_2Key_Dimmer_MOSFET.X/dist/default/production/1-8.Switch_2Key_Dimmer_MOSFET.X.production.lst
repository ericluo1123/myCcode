

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Nov 19 16:32:20 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,inline,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	intentry,global,class=CODE,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   154                           	dabs	1,0x7E,2
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0008                     	;# 
   164  0009                     	;# 
   165  000A                     	;# 
   166  000B                     	;# 
   167  000C                     	;# 
   168  000D                     	;# 
   169  000E                     	;# 
   170  0010                     	;# 
   171  0011                     	;# 
   172  0012                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0016                     	;# 
   176  0017                     	;# 
   177  0018                     	;# 
   178  0019                     	;# 
   179  001A                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  008C                     	;# 
   183  008D                     	;# 
   184  008E                     	;# 
   185  0090                     	;# 
   186  0091                     	;# 
   187  0092                     	;# 
   188  0095                     	;# 
   189  0096                     	;# 
   190  0097                     	;# 
   191  0099                     	;# 
   192  009A                     	;# 
   193  009B                     	;# 
   194  009B                     	;# 
   195  009C                     	;# 
   196  009D                     	;# 
   197  009E                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  0116                     	;# 
   202  0117                     	;# 
   203  011D                     	;# 
   204  018C                     	;# 
   205  018D                     	;# 
   206  018E                     	;# 
   207  0191                     	;# 
   208  0191                     	;# 
   209  0192                     	;# 
   210  0193                     	;# 
   211  0193                     	;# 
   212  0194                     	;# 
   213  0195                     	;# 
   214  0196                     	;# 
   215  0197                     	;# 
   216  0199                     	;# 
   217  019A                     	;# 
   218  019B                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019C                     	;# 
   223  019C                     	;# 
   224  019D                     	;# 
   225  019E                     	;# 
   226  019F                     	;# 
   227  020D                     	;# 
   228  0210                     	;# 
   229  0211                     	;# 
   230  0211                     	;# 
   231  0212                     	;# 
   232  0212                     	;# 
   233  0213                     	;# 
   234  0213                     	;# 
   235  0214                     	;# 
   236  0214                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0216                     	;# 
   241  0216                     	;# 
   242  0217                     	;# 
   243  0217                     	;# 
   244  0291                     	;# 
   245  0291                     	;# 
   246  0292                     	;# 
   247  0293                     	;# 
   248  0298                     	;# 
   249  0298                     	;# 
   250  0299                     	;# 
   251  029A                     	;# 
   252  0394                     	;# 
   253  0395                     	;# 
   254  0396                     	;# 
   255  0FE4                     	;# 
   256  0FE5                     	;# 
   257  0FE6                     	;# 
   258  0FE7                     	;# 
   259  0FE8                     	;# 
   260  0FE9                     	;# 
   261  0FEA                     	;# 
   262  0FEB                     	;# 
   263  0FED                     	;# 
   264  0FEE                     	;# 
   265  0FEF                     	;# 
   266  0000                     	;# 
   267  0001                     	;# 
   268  0002                     	;# 
   269  0003                     	;# 
   270  0004                     	;# 
   271  0005                     	;# 
   272  0006                     	;# 
   273  0007                     	;# 
   274  0008                     	;# 
   275  0009                     	;# 
   276  000A                     	;# 
   277  000B                     	;# 
   278  000C                     	;# 
   279  000D                     	;# 
   280  000E                     	;# 
   281  0010                     	;# 
   282  0011                     	;# 
   283  0012                     	;# 
   284  0015                     	;# 
   285  0016                     	;# 
   286  0016                     	;# 
   287  0017                     	;# 
   288  0018                     	;# 
   289  0019                     	;# 
   290  001A                     	;# 
   291  001B                     	;# 
   292  001C                     	;# 
   293  008C                     	;# 
   294  008D                     	;# 
   295  008E                     	;# 
   296  0090                     	;# 
   297  0091                     	;# 
   298  0092                     	;# 
   299  0095                     	;# 
   300  0096                     	;# 
   301  0097                     	;# 
   302  0099                     	;# 
   303  009A                     	;# 
   304  009B                     	;# 
   305  009B                     	;# 
   306  009C                     	;# 
   307  009D                     	;# 
   308  009E                     	;# 
   309  010C                     	;# 
   310  010D                     	;# 
   311  010E                     	;# 
   312  0116                     	;# 
   313  0117                     	;# 
   314  011D                     	;# 
   315  018C                     	;# 
   316  018D                     	;# 
   317  018E                     	;# 
   318  0191                     	;# 
   319  0191                     	;# 
   320  0192                     	;# 
   321  0193                     	;# 
   322  0193                     	;# 
   323  0194                     	;# 
   324  0195                     	;# 
   325  0196                     	;# 
   326  0197                     	;# 
   327  0199                     	;# 
   328  019A                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019C                     	;# 
   334  019C                     	;# 
   335  019D                     	;# 
   336  019E                     	;# 
   337  019F                     	;# 
   338  020D                     	;# 
   339  0210                     	;# 
   340  0211                     	;# 
   341  0211                     	;# 
   342  0212                     	;# 
   343  0212                     	;# 
   344  0213                     	;# 
   345  0213                     	;# 
   346  0214                     	;# 
   347  0214                     	;# 
   348  0215                     	;# 
   349  0215                     	;# 
   350  0215                     	;# 
   351  0216                     	;# 
   352  0216                     	;# 
   353  0217                     	;# 
   354  0217                     	;# 
   355  0291                     	;# 
   356  0291                     	;# 
   357  0292                     	;# 
   358  0293                     	;# 
   359  0298                     	;# 
   360  0298                     	;# 
   361  0299                     	;# 
   362  029A                     	;# 
   363  0394                     	;# 
   364  0395                     	;# 
   365  0396                     	;# 
   366  0FE4                     	;# 
   367  0FE5                     	;# 
   368  0FE6                     	;# 
   369  0FE7                     	;# 
   370  0FE8                     	;# 
   371  0FE9                     	;# 
   372  0FEA                     	;# 
   373  0FEB                     	;# 
   374  0FED                     	;# 
   375  0FEE                     	;# 
   376  0FEF                     	;# 
   377  0000                     	;# 
   378  0001                     	;# 
   379  0002                     	;# 
   380  0003                     	;# 
   381  0004                     	;# 
   382  0005                     	;# 
   383  0006                     	;# 
   384  0007                     	;# 
   385  0008                     	;# 
   386  0009                     	;# 
   387  000A                     	;# 
   388  000B                     	;# 
   389  000C                     	;# 
   390  000D                     	;# 
   391  000E                     	;# 
   392  0010                     	;# 
   393  0011                     	;# 
   394  0012                     	;# 
   395  0015                     	;# 
   396  0016                     	;# 
   397  0016                     	;# 
   398  0017                     	;# 
   399  0018                     	;# 
   400  0019                     	;# 
   401  001A                     	;# 
   402  001B                     	;# 
   403  001C                     	;# 
   404  008C                     	;# 
   405  008D                     	;# 
   406  008E                     	;# 
   407  0090                     	;# 
   408  0091                     	;# 
   409  0092                     	;# 
   410  0095                     	;# 
   411  0096                     	;# 
   412  0097                     	;# 
   413  0099                     	;# 
   414  009A                     	;# 
   415  009B                     	;# 
   416  009B                     	;# 
   417  009C                     	;# 
   418  009D                     	;# 
   419  009E                     	;# 
   420  010C                     	;# 
   421  010D                     	;# 
   422  010E                     	;# 
   423  0116                     	;# 
   424  0117                     	;# 
   425  011D                     	;# 
   426  018C                     	;# 
   427  018D                     	;# 
   428  018E                     	;# 
   429  0191                     	;# 
   430  0191                     	;# 
   431  0192                     	;# 
   432  0193                     	;# 
   433  0193                     	;# 
   434  0194                     	;# 
   435  0195                     	;# 
   436  0196                     	;# 
   437  0197                     	;# 
   438  0199                     	;# 
   439  019A                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019C                     	;# 
   445  019C                     	;# 
   446  019D                     	;# 
   447  019E                     	;# 
   448  019F                     	;# 
   449  020D                     	;# 
   450  0210                     	;# 
   451  0211                     	;# 
   452  0211                     	;# 
   453  0212                     	;# 
   454  0212                     	;# 
   455  0213                     	;# 
   456  0213                     	;# 
   457  0214                     	;# 
   458  0214                     	;# 
   459  0215                     	;# 
   460  0215                     	;# 
   461  0215                     	;# 
   462  0216                     	;# 
   463  0216                     	;# 
   464  0217                     	;# 
   465  0217                     	;# 
   466  0291                     	;# 
   467  0291                     	;# 
   468  0292                     	;# 
   469  0293                     	;# 
   470  0298                     	;# 
   471  0298                     	;# 
   472  0299                     	;# 
   473  029A                     	;# 
   474  0394                     	;# 
   475  0395                     	;# 
   476  0396                     	;# 
   477  0FE4                     	;# 
   478  0FE5                     	;# 
   479  0FE6                     	;# 
   480  0FE7                     	;# 
   481  0FE8                     	;# 
   482  0FE9                     	;# 
   483  0FEA                     	;# 
   484  0FEB                     	;# 
   485  0FED                     	;# 
   486  0FEE                     	;# 
   487  0FEF                     	;# 
   488  0000                     	;# 
   489  0001                     	;# 
   490  0002                     	;# 
   491  0003                     	;# 
   492  0004                     	;# 
   493  0005                     	;# 
   494  0006                     	;# 
   495  0007                     	;# 
   496  0008                     	;# 
   497  0009                     	;# 
   498  000A                     	;# 
   499  000B                     	;# 
   500  000C                     	;# 
   501  000D                     	;# 
   502  000E                     	;# 
   503  0010                     	;# 
   504  0011                     	;# 
   505  0012                     	;# 
   506  0015                     	;# 
   507  0016                     	;# 
   508  0016                     	;# 
   509  0017                     	;# 
   510  0018                     	;# 
   511  0019                     	;# 
   512  001A                     	;# 
   513  001B                     	;# 
   514  001C                     	;# 
   515  008C                     	;# 
   516  008D                     	;# 
   517  008E                     	;# 
   518  0090                     	;# 
   519  0091                     	;# 
   520  0092                     	;# 
   521  0095                     	;# 
   522  0096                     	;# 
   523  0097                     	;# 
   524  0099                     	;# 
   525  009A                     	;# 
   526  009B                     	;# 
   527  009B                     	;# 
   528  009C                     	;# 
   529  009D                     	;# 
   530  009E                     	;# 
   531  010C                     	;# 
   532  010D                     	;# 
   533  010E                     	;# 
   534  0116                     	;# 
   535  0117                     	;# 
   536  011D                     	;# 
   537  018C                     	;# 
   538  018D                     	;# 
   539  018E                     	;# 
   540  0191                     	;# 
   541  0191                     	;# 
   542  0192                     	;# 
   543  0193                     	;# 
   544  0193                     	;# 
   545  0194                     	;# 
   546  0195                     	;# 
   547  0196                     	;# 
   548  0197                     	;# 
   549  0199                     	;# 
   550  019A                     	;# 
   551  019B                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019B                     	;# 
   555  019C                     	;# 
   556  019C                     	;# 
   557  019D                     	;# 
   558  019E                     	;# 
   559  019F                     	;# 
   560  020D                     	;# 
   561  0210                     	;# 
   562  0211                     	;# 
   563  0211                     	;# 
   564  0212                     	;# 
   565  0212                     	;# 
   566  0213                     	;# 
   567  0213                     	;# 
   568  0214                     	;# 
   569  0214                     	;# 
   570  0215                     	;# 
   571  0215                     	;# 
   572  0215                     	;# 
   573  0216                     	;# 
   574  0216                     	;# 
   575  0217                     	;# 
   576  0217                     	;# 
   577  0291                     	;# 
   578  0291                     	;# 
   579  0292                     	;# 
   580  0293                     	;# 
   581  0298                     	;# 
   582  0298                     	;# 
   583  0299                     	;# 
   584  029A                     	;# 
   585  0394                     	;# 
   586  0395                     	;# 
   587  0396                     	;# 
   588  0FE4                     	;# 
   589  0FE5                     	;# 
   590  0FE6                     	;# 
   591  0FE7                     	;# 
   592  0FE8                     	;# 
   593  0FE9                     	;# 
   594  0FEA                     	;# 
   595  0FEB                     	;# 
   596  0FED                     	;# 
   597  0FEE                     	;# 
   598  0FEF                     	;# 
   599  0000                     	;# 
   600  0001                     	;# 
   601  0002                     	;# 
   602  0003                     	;# 
   603  0004                     	;# 
   604  0005                     	;# 
   605  0006                     	;# 
   606  0007                     	;# 
   607  0008                     	;# 
   608  0009                     	;# 
   609  000A                     	;# 
   610  000B                     	;# 
   611  000C                     	;# 
   612  000D                     	;# 
   613  000E                     	;# 
   614  0010                     	;# 
   615  0011                     	;# 
   616  0012                     	;# 
   617  0015                     	;# 
   618  0016                     	;# 
   619  0016                     	;# 
   620  0017                     	;# 
   621  0018                     	;# 
   622  0019                     	;# 
   623  001A                     	;# 
   624  001B                     	;# 
   625  001C                     	;# 
   626  008C                     	;# 
   627  008D                     	;# 
   628  008E                     	;# 
   629  0090                     	;# 
   630  0091                     	;# 
   631  0092                     	;# 
   632  0095                     	;# 
   633  0096                     	;# 
   634  0097                     	;# 
   635  0099                     	;# 
   636  009A                     	;# 
   637  009B                     	;# 
   638  009B                     	;# 
   639  009C                     	;# 
   640  009D                     	;# 
   641  009E                     	;# 
   642  010C                     	;# 
   643  010D                     	;# 
   644  010E                     	;# 
   645  0116                     	;# 
   646  0117                     	;# 
   647  011D                     	;# 
   648  018C                     	;# 
   649  018D                     	;# 
   650  018E                     	;# 
   651  0191                     	;# 
   652  0191                     	;# 
   653  0192                     	;# 
   654  0193                     	;# 
   655  0193                     	;# 
   656  0194                     	;# 
   657  0195                     	;# 
   658  0196                     	;# 
   659  0197                     	;# 
   660  0199                     	;# 
   661  019A                     	;# 
   662  019B                     	;# 
   663  019B                     	;# 
   664  019B                     	;# 
   665  019B                     	;# 
   666  019C                     	;# 
   667  019C                     	;# 
   668  019D                     	;# 
   669  019E                     	;# 
   670  019F                     	;# 
   671  020D                     	;# 
   672  0210                     	;# 
   673  0211                     	;# 
   674  0211                     	;# 
   675  0212                     	;# 
   676  0212                     	;# 
   677  0213                     	;# 
   678  0213                     	;# 
   679  0214                     	;# 
   680  0214                     	;# 
   681  0215                     	;# 
   682  0215                     	;# 
   683  0215                     	;# 
   684  0216                     	;# 
   685  0216                     	;# 
   686  0217                     	;# 
   687  0217                     	;# 
   688  0291                     	;# 
   689  0291                     	;# 
   690  0292                     	;# 
   691  0293                     	;# 
   692  0298                     	;# 
   693  0298                     	;# 
   694  0299                     	;# 
   695  029A                     	;# 
   696  0394                     	;# 
   697  0395                     	;# 
   698  0396                     	;# 
   699  0FE4                     	;# 
   700  0FE5                     	;# 
   701  0FE6                     	;# 
   702  0FE7                     	;# 
   703  0FE8                     	;# 
   704  0FE9                     	;# 
   705  0FEA                     	;# 
   706  0FEB                     	;# 
   707  0FED                     	;# 
   708  0FEE                     	;# 
   709  0FEF                     	;# 
   710  0000                     	;# 
   711  0001                     	;# 
   712  0002                     	;# 
   713  0003                     	;# 
   714  0004                     	;# 
   715  0005                     	;# 
   716  0006                     	;# 
   717  0007                     	;# 
   718  0008                     	;# 
   719  0009                     	;# 
   720  000A                     	;# 
   721  000B                     	;# 
   722  000C                     	;# 
   723  000D                     	;# 
   724  000E                     	;# 
   725  0010                     	;# 
   726  0011                     	;# 
   727  0012                     	;# 
   728  0015                     	;# 
   729  0016                     	;# 
   730  0016                     	;# 
   731  0017                     	;# 
   732  0018                     	;# 
   733  0019                     	;# 
   734  001A                     	;# 
   735  001B                     	;# 
   736  001C                     	;# 
   737  008C                     	;# 
   738  008D                     	;# 
   739  008E                     	;# 
   740  0090                     	;# 
   741  0091                     	;# 
   742  0092                     	;# 
   743  0095                     	;# 
   744  0096                     	;# 
   745  0097                     	;# 
   746  0099                     	;# 
   747  009A                     	;# 
   748  009B                     	;# 
   749  009B                     	;# 
   750  009C                     	;# 
   751  009D                     	;# 
   752  009E                     	;# 
   753  010C                     	;# 
   754  010D                     	;# 
   755  010E                     	;# 
   756  0116                     	;# 
   757  0117                     	;# 
   758  011D                     	;# 
   759  018C                     	;# 
   760  018D                     	;# 
   761  018E                     	;# 
   762  0191                     	;# 
   763  0191                     	;# 
   764  0192                     	;# 
   765  0193                     	;# 
   766  0193                     	;# 
   767  0194                     	;# 
   768  0195                     	;# 
   769  0196                     	;# 
   770  0197                     	;# 
   771  0199                     	;# 
   772  019A                     	;# 
   773  019B                     	;# 
   774  019B                     	;# 
   775  019B                     	;# 
   776  019B                     	;# 
   777  019C                     	;# 
   778  019C                     	;# 
   779  019D                     	;# 
   780  019E                     	;# 
   781  019F                     	;# 
   782  020D                     	;# 
   783  0210                     	;# 
   784  0211                     	;# 
   785  0211                     	;# 
   786  0212                     	;# 
   787  0212                     	;# 
   788  0213                     	;# 
   789  0213                     	;# 
   790  0214                     	;# 
   791  0214                     	;# 
   792  0215                     	;# 
   793  0215                     	;# 
   794  0215                     	;# 
   795  0216                     	;# 
   796  0216                     	;# 
   797  0217                     	;# 
   798  0217                     	;# 
   799  0291                     	;# 
   800  0291                     	;# 
   801  0292                     	;# 
   802  0293                     	;# 
   803  0298                     	;# 
   804  0298                     	;# 
   805  0299                     	;# 
   806  029A                     	;# 
   807  0394                     	;# 
   808  0395                     	;# 
   809  0396                     	;# 
   810  0FE4                     	;# 
   811  0FE5                     	;# 
   812  0FE6                     	;# 
   813  0FE7                     	;# 
   814  0FE8                     	;# 
   815  0FE9                     	;# 
   816  0FEA                     	;# 
   817  0FEB                     	;# 
   818  0FED                     	;# 
   819  0FEE                     	;# 
   820  0FEF                     	;# 
   821  0000                     	;# 
   822  0001                     	;# 
   823  0002                     	;# 
   824  0003                     	;# 
   825  0004                     	;# 
   826  0005                     	;# 
   827  0006                     	;# 
   828  0007                     	;# 
   829  0008                     	;# 
   830  0009                     	;# 
   831  000A                     	;# 
   832  000B                     	;# 
   833  000C                     	;# 
   834  000D                     	;# 
   835  000E                     	;# 
   836  0010                     	;# 
   837  0011                     	;# 
   838  0012                     	;# 
   839  0015                     	;# 
   840  0016                     	;# 
   841  0016                     	;# 
   842  0017                     	;# 
   843  0018                     	;# 
   844  0019                     	;# 
   845  001A                     	;# 
   846  001B                     	;# 
   847  001C                     	;# 
   848  008C                     	;# 
   849  008D                     	;# 
   850  008E                     	;# 
   851  0090                     	;# 
   852  0091                     	;# 
   853  0092                     	;# 
   854  0095                     	;# 
   855  0096                     	;# 
   856  0097                     	;# 
   857  0099                     	;# 
   858  009A                     	;# 
   859  009B                     	;# 
   860  009B                     	;# 
   861  009C                     	;# 
   862  009D                     	;# 
   863  009E                     	;# 
   864  010C                     	;# 
   865  010D                     	;# 
   866  010E                     	;# 
   867  0116                     	;# 
   868  0117                     	;# 
   869  011D                     	;# 
   870  018C                     	;# 
   871  018D                     	;# 
   872  018E                     	;# 
   873  0191                     	;# 
   874  0191                     	;# 
   875  0192                     	;# 
   876  0193                     	;# 
   877  0193                     	;# 
   878  0194                     	;# 
   879  0195                     	;# 
   880  0196                     	;# 
   881  0197                     	;# 
   882  0199                     	;# 
   883  019A                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019C                     	;# 
   889  019C                     	;# 
   890  019D                     	;# 
   891  019E                     	;# 
   892  019F                     	;# 
   893  020D                     	;# 
   894  0210                     	;# 
   895  0211                     	;# 
   896  0211                     	;# 
   897  0212                     	;# 
   898  0212                     	;# 
   899  0213                     	;# 
   900  0213                     	;# 
   901  0214                     	;# 
   902  0214                     	;# 
   903  0215                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0216                     	;# 
   907  0216                     	;# 
   908  0217                     	;# 
   909  0217                     	;# 
   910  0291                     	;# 
   911  0291                     	;# 
   912  0292                     	;# 
   913  0293                     	;# 
   914  0298                     	;# 
   915  0298                     	;# 
   916  0299                     	;# 
   917  029A                     	;# 
   918  0394                     	;# 
   919  0395                     	;# 
   920  0396                     	;# 
   921  0FE4                     	;# 
   922  0FE5                     	;# 
   923  0FE6                     	;# 
   924  0FE7                     	;# 
   925  0FE8                     	;# 
   926  0FE9                     	;# 
   927  0FEA                     	;# 
   928  0FEB                     	;# 
   929  0FED                     	;# 
   930  0FEE                     	;# 
   931  0FEF                     	;# 
   932  0000                     	;# 
   933  0001                     	;# 
   934  0002                     	;# 
   935  0003                     	;# 
   936  0004                     	;# 
   937  0005                     	;# 
   938  0006                     	;# 
   939  0007                     	;# 
   940  0008                     	;# 
   941  0009                     	;# 
   942  000A                     	;# 
   943  000B                     	;# 
   944  000C                     	;# 
   945  000D                     	;# 
   946  000E                     	;# 
   947  0010                     	;# 
   948  0011                     	;# 
   949  0012                     	;# 
   950  0015                     	;# 
   951  0016                     	;# 
   952  0016                     	;# 
   953  0017                     	;# 
   954  0018                     	;# 
   955  0019                     	;# 
   956  001A                     	;# 
   957  001B                     	;# 
   958  001C                     	;# 
   959  008C                     	;# 
   960  008D                     	;# 
   961  008E                     	;# 
   962  0090                     	;# 
   963  0091                     	;# 
   964  0092                     	;# 
   965  0095                     	;# 
   966  0096                     	;# 
   967  0097                     	;# 
   968  0099                     	;# 
   969  009A                     	;# 
   970  009B                     	;# 
   971  009B                     	;# 
   972  009C                     	;# 
   973  009D                     	;# 
   974  009E                     	;# 
   975  010C                     	;# 
   976  010D                     	;# 
   977  010E                     	;# 
   978  0116                     	;# 
   979  0117                     	;# 
   980  011D                     	;# 
   981  018C                     	;# 
   982  018D                     	;# 
   983  018E                     	;# 
   984  0191                     	;# 
   985  0191                     	;# 
   986  0192                     	;# 
   987  0193                     	;# 
   988  0193                     	;# 
   989  0194                     	;# 
   990  0195                     	;# 
   991  0196                     	;# 
   992  0197                     	;# 
   993  0199                     	;# 
   994  019A                     	;# 
   995  019B                     	;# 
   996  019B                     	;# 
   997  019B                     	;# 
   998  019B                     	;# 
   999  019C                     	;# 
  1000  019C                     	;# 
  1001  019D                     	;# 
  1002  019E                     	;# 
  1003  019F                     	;# 
  1004  020D                     	;# 
  1005  0210                     	;# 
  1006  0211                     	;# 
  1007  0211                     	;# 
  1008  0212                     	;# 
  1009  0212                     	;# 
  1010  0213                     	;# 
  1011  0213                     	;# 
  1012  0214                     	;# 
  1013  0214                     	;# 
  1014  0215                     	;# 
  1015  0215                     	;# 
  1016  0215                     	;# 
  1017  0216                     	;# 
  1018  0216                     	;# 
  1019  0217                     	;# 
  1020  0217                     	;# 
  1021  0291                     	;# 
  1022  0291                     	;# 
  1023  0292                     	;# 
  1024  0293                     	;# 
  1025  0298                     	;# 
  1026  0298                     	;# 
  1027  0299                     	;# 
  1028  029A                     	;# 
  1029  0394                     	;# 
  1030  0395                     	;# 
  1031  0396                     	;# 
  1032  0FE4                     	;# 
  1033  0FE5                     	;# 
  1034  0FE6                     	;# 
  1035  0FE7                     	;# 
  1036  0FE8                     	;# 
  1037  0FE9                     	;# 
  1038  0FEA                     	;# 
  1039  0FEB                     	;# 
  1040  0FED                     	;# 
  1041  0FEE                     	;# 
  1042  0FEF                     	;# 
  1043  0000                     	;# 
  1044  0001                     	;# 
  1045  0002                     	;# 
  1046  0003                     	;# 
  1047  0004                     	;# 
  1048  0005                     	;# 
  1049  0006                     	;# 
  1050  0007                     	;# 
  1051  0008                     	;# 
  1052  0009                     	;# 
  1053  000A                     	;# 
  1054  000B                     	;# 
  1055  000C                     	;# 
  1056  000D                     	;# 
  1057  000E                     	;# 
  1058  0010                     	;# 
  1059  0011                     	;# 
  1060  0012                     	;# 
  1061  0015                     	;# 
  1062  0016                     	;# 
  1063  0016                     	;# 
  1064  0017                     	;# 
  1065  0018                     	;# 
  1066  0019                     	;# 
  1067  001A                     	;# 
  1068  001B                     	;# 
  1069  001C                     	;# 
  1070  008C                     	;# 
  1071  008D                     	;# 
  1072  008E                     	;# 
  1073  0090                     	;# 
  1074  0091                     	;# 
  1075  0092                     	;# 
  1076  0095                     	;# 
  1077  0096                     	;# 
  1078  0097                     	;# 
  1079  0099                     	;# 
  1080  009A                     	;# 
  1081  009B                     	;# 
  1082  009B                     	;# 
  1083  009C                     	;# 
  1084  009D                     	;# 
  1085  009E                     	;# 
  1086  010C                     	;# 
  1087  010D                     	;# 
  1088  010E                     	;# 
  1089  0116                     	;# 
  1090  0117                     	;# 
  1091  011D                     	;# 
  1092  018C                     	;# 
  1093  018D                     	;# 
  1094  018E                     	;# 
  1095  0191                     	;# 
  1096  0191                     	;# 
  1097  0192                     	;# 
  1098  0193                     	;# 
  1099  0193                     	;# 
  1100  0194                     	;# 
  1101  0195                     	;# 
  1102  0196                     	;# 
  1103  0197                     	;# 
  1104  0199                     	;# 
  1105  019A                     	;# 
  1106  019B                     	;# 
  1107  019B                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019C                     	;# 
  1111  019C                     	;# 
  1112  019D                     	;# 
  1113  019E                     	;# 
  1114  019F                     	;# 
  1115  020D                     	;# 
  1116  0210                     	;# 
  1117  0211                     	;# 
  1118  0211                     	;# 
  1119  0212                     	;# 
  1120  0212                     	;# 
  1121  0213                     	;# 
  1122  0213                     	;# 
  1123  0214                     	;# 
  1124  0214                     	;# 
  1125  0215                     	;# 
  1126  0215                     	;# 
  1127  0215                     	;# 
  1128  0216                     	;# 
  1129  0216                     	;# 
  1130  0217                     	;# 
  1131  0217                     	;# 
  1132  0291                     	;# 
  1133  0291                     	;# 
  1134  0292                     	;# 
  1135  0293                     	;# 
  1136  0298                     	;# 
  1137  0298                     	;# 
  1138  0299                     	;# 
  1139  029A                     	;# 
  1140  0394                     	;# 
  1141  0395                     	;# 
  1142  0396                     	;# 
  1143  0FE4                     	;# 
  1144  0FE5                     	;# 
  1145  0FE6                     	;# 
  1146  0FE7                     	;# 
  1147  0FE8                     	;# 
  1148  0FE9                     	;# 
  1149  0FEA                     	;# 
  1150  0FEB                     	;# 
  1151  0FED                     	;# 
  1152  0FEE                     	;# 
  1153  0FEF                     	;# 
  1154  0000                     	;# 
  1155  0001                     	;# 
  1156  0002                     	;# 
  1157  0003                     	;# 
  1158  0004                     	;# 
  1159  0005                     	;# 
  1160  0006                     	;# 
  1161  0007                     	;# 
  1162  0008                     	;# 
  1163  0009                     	;# 
  1164  000A                     	;# 
  1165  000B                     	;# 
  1166  000C                     	;# 
  1167  000D                     	;# 
  1168  000E                     	;# 
  1169  0010                     	;# 
  1170  0011                     	;# 
  1171  0012                     	;# 
  1172  0015                     	;# 
  1173  0016                     	;# 
  1174  0016                     	;# 
  1175  0017                     	;# 
  1176  0018                     	;# 
  1177  0019                     	;# 
  1178  001A                     	;# 
  1179  001B                     	;# 
  1180  001C                     	;# 
  1181  008C                     	;# 
  1182  008D                     	;# 
  1183  008E                     	;# 
  1184  0090                     	;# 
  1185  0091                     	;# 
  1186  0092                     	;# 
  1187  0095                     	;# 
  1188  0096                     	;# 
  1189  0097                     	;# 
  1190  0099                     	;# 
  1191  009A                     	;# 
  1192  009B                     	;# 
  1193  009B                     	;# 
  1194  009C                     	;# 
  1195  009D                     	;# 
  1196  009E                     	;# 
  1197  010C                     	;# 
  1198  010D                     	;# 
  1199  010E                     	;# 
  1200  0116                     	;# 
  1201  0117                     	;# 
  1202  011D                     	;# 
  1203  018C                     	;# 
  1204  018D                     	;# 
  1205  018E                     	;# 
  1206  0191                     	;# 
  1207  0191                     	;# 
  1208  0192                     	;# 
  1209  0193                     	;# 
  1210  0193                     	;# 
  1211  0194                     	;# 
  1212  0195                     	;# 
  1213  0196                     	;# 
  1214  0197                     	;# 
  1215  0199                     	;# 
  1216  019A                     	;# 
  1217  019B                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019C                     	;# 
  1222  019C                     	;# 
  1223  019D                     	;# 
  1224  019E                     	;# 
  1225  019F                     	;# 
  1226  020D                     	;# 
  1227  0210                     	;# 
  1228  0211                     	;# 
  1229  0211                     	;# 
  1230  0212                     	;# 
  1231  0212                     	;# 
  1232  0213                     	;# 
  1233  0213                     	;# 
  1234  0214                     	;# 
  1235  0214                     	;# 
  1236  0215                     	;# 
  1237  0215                     	;# 
  1238  0215                     	;# 
  1239  0216                     	;# 
  1240  0216                     	;# 
  1241  0217                     	;# 
  1242  0217                     	;# 
  1243  0291                     	;# 
  1244  0291                     	;# 
  1245  0292                     	;# 
  1246  0293                     	;# 
  1247  0298                     	;# 
  1248  0298                     	;# 
  1249  0299                     	;# 
  1250  029A                     	;# 
  1251  0394                     	;# 
  1252  0395                     	;# 
  1253  0396                     	;# 
  1254  0FE4                     	;# 
  1255  0FE5                     	;# 
  1256  0FE6                     	;# 
  1257  0FE7                     	;# 
  1258  0FE8                     	;# 
  1259  0FE9                     	;# 
  1260  0FEA                     	;# 
  1261  0FEB                     	;# 
  1262  0FED                     	;# 
  1263  0FEE                     	;# 
  1264  0FEF                     	;# 
  1265  0000                     	;# 
  1266  0001                     	;# 
  1267  0002                     	;# 
  1268  0003                     	;# 
  1269  0004                     	;# 
  1270  0005                     	;# 
  1271  0006                     	;# 
  1272  0007                     	;# 
  1273  0008                     	;# 
  1274  0009                     	;# 
  1275  000A                     	;# 
  1276  000B                     	;# 
  1277  000C                     	;# 
  1278  000D                     	;# 
  1279  000E                     	;# 
  1280  0010                     	;# 
  1281  0011                     	;# 
  1282  0012                     	;# 
  1283  0015                     	;# 
  1284  0016                     	;# 
  1285  0016                     	;# 
  1286  0017                     	;# 
  1287  0018                     	;# 
  1288  0019                     	;# 
  1289  001A                     	;# 
  1290  001B                     	;# 
  1291  001C                     	;# 
  1292  008C                     	;# 
  1293  008D                     	;# 
  1294  008E                     	;# 
  1295  0090                     	;# 
  1296  0091                     	;# 
  1297  0092                     	;# 
  1298  0095                     	;# 
  1299  0096                     	;# 
  1300  0097                     	;# 
  1301  0099                     	;# 
  1302  009A                     	;# 
  1303  009B                     	;# 
  1304  009B                     	;# 
  1305  009C                     	;# 
  1306  009D                     	;# 
  1307  009E                     	;# 
  1308  010C                     	;# 
  1309  010D                     	;# 
  1310  010E                     	;# 
  1311  0116                     	;# 
  1312  0117                     	;# 
  1313  011D                     	;# 
  1314  018C                     	;# 
  1315  018D                     	;# 
  1316  018E                     	;# 
  1317  0191                     	;# 
  1318  0191                     	;# 
  1319  0192                     	;# 
  1320  0193                     	;# 
  1321  0193                     	;# 
  1322  0194                     	;# 
  1323  0195                     	;# 
  1324  0196                     	;# 
  1325  0197                     	;# 
  1326  0199                     	;# 
  1327  019A                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019C                     	;# 
  1333  019C                     	;# 
  1334  019D                     	;# 
  1335  019E                     	;# 
  1336  019F                     	;# 
  1337  020D                     	;# 
  1338  0210                     	;# 
  1339  0211                     	;# 
  1340  0211                     	;# 
  1341  0212                     	;# 
  1342  0212                     	;# 
  1343  0213                     	;# 
  1344  0213                     	;# 
  1345  0214                     	;# 
  1346  0214                     	;# 
  1347  0215                     	;# 
  1348  0215                     	;# 
  1349  0215                     	;# 
  1350  0216                     	;# 
  1351  0216                     	;# 
  1352  0217                     	;# 
  1353  0217                     	;# 
  1354  0291                     	;# 
  1355  0291                     	;# 
  1356  0292                     	;# 
  1357  0293                     	;# 
  1358  0298                     	;# 
  1359  0298                     	;# 
  1360  0299                     	;# 
  1361  029A                     	;# 
  1362  0394                     	;# 
  1363  0395                     	;# 
  1364  0396                     	;# 
  1365  0FE4                     	;# 
  1366  0FE5                     	;# 
  1367  0FE6                     	;# 
  1368  0FE7                     	;# 
  1369  0FE8                     	;# 
  1370  0FE9                     	;# 
  1371  0FEA                     	;# 
  1372  0FEB                     	;# 
  1373  0FED                     	;# 
  1374  0FEE                     	;# 
  1375  0FEF                     	;# 
  1376  0000                     	;# 
  1377  0001                     	;# 
  1378  0002                     	;# 
  1379  0003                     	;# 
  1380  0004                     	;# 
  1381  0005                     	;# 
  1382  0006                     	;# 
  1383  0007                     	;# 
  1384  0008                     	;# 
  1385  0009                     	;# 
  1386  000A                     	;# 
  1387  000B                     	;# 
  1388  000C                     	;# 
  1389  000D                     	;# 
  1390  000E                     	;# 
  1391  0010                     	;# 
  1392  0011                     	;# 
  1393  0012                     	;# 
  1394  0015                     	;# 
  1395  0016                     	;# 
  1396  0016                     	;# 
  1397  0017                     	;# 
  1398  0018                     	;# 
  1399  0019                     	;# 
  1400  001A                     	;# 
  1401  001B                     	;# 
  1402  001C                     	;# 
  1403  008C                     	;# 
  1404  008D                     	;# 
  1405  008E                     	;# 
  1406  0090                     	;# 
  1407  0091                     	;# 
  1408  0092                     	;# 
  1409  0095                     	;# 
  1410  0096                     	;# 
  1411  0097                     	;# 
  1412  0099                     	;# 
  1413  009A                     	;# 
  1414  009B                     	;# 
  1415  009B                     	;# 
  1416  009C                     	;# 
  1417  009D                     	;# 
  1418  009E                     	;# 
  1419  010C                     	;# 
  1420  010D                     	;# 
  1421  010E                     	;# 
  1422  0116                     	;# 
  1423  0117                     	;# 
  1424  011D                     	;# 
  1425  018C                     	;# 
  1426  018D                     	;# 
  1427  018E                     	;# 
  1428  0191                     	;# 
  1429  0191                     	;# 
  1430  0192                     	;# 
  1431  0193                     	;# 
  1432  0193                     	;# 
  1433  0194                     	;# 
  1434  0195                     	;# 
  1435  0196                     	;# 
  1436  0197                     	;# 
  1437  0199                     	;# 
  1438  019A                     	;# 
  1439  019B                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019C                     	;# 
  1444  019C                     	;# 
  1445  019D                     	;# 
  1446  019E                     	;# 
  1447  019F                     	;# 
  1448  020D                     	;# 
  1449  0210                     	;# 
  1450  0211                     	;# 
  1451  0211                     	;# 
  1452  0212                     	;# 
  1453  0212                     	;# 
  1454  0213                     	;# 
  1455  0213                     	;# 
  1456  0214                     	;# 
  1457  0214                     	;# 
  1458  0215                     	;# 
  1459  0215                     	;# 
  1460  0215                     	;# 
  1461  0216                     	;# 
  1462  0216                     	;# 
  1463  0217                     	;# 
  1464  0217                     	;# 
  1465  0291                     	;# 
  1466  0291                     	;# 
  1467  0292                     	;# 
  1468  0293                     	;# 
  1469  0298                     	;# 
  1470  0298                     	;# 
  1471  0299                     	;# 
  1472  029A                     	;# 
  1473  0394                     	;# 
  1474  0395                     	;# 
  1475  0396                     	;# 
  1476  0FE4                     	;# 
  1477  0FE5                     	;# 
  1478  0FE6                     	;# 
  1479  0FE7                     	;# 
  1480  0FE8                     	;# 
  1481  0FE9                     	;# 
  1482  0FEA                     	;# 
  1483  0FEB                     	;# 
  1484  0FED                     	;# 
  1485  0FEE                     	;# 
  1486  0FEF                     	;# 
  1487  0000                     	;# 
  1488  0001                     	;# 
  1489  0002                     	;# 
  1490  0003                     	;# 
  1491  0004                     	;# 
  1492  0005                     	;# 
  1493  0006                     	;# 
  1494  0007                     	;# 
  1495  0008                     	;# 
  1496  0009                     	;# 
  1497  000A                     	;# 
  1498  000B                     	;# 
  1499  000C                     	;# 
  1500  000D                     	;# 
  1501  000E                     	;# 
  1502  0010                     	;# 
  1503  0011                     	;# 
  1504  0012                     	;# 
  1505  0015                     	;# 
  1506  0016                     	;# 
  1507  0016                     	;# 
  1508  0017                     	;# 
  1509  0018                     	;# 
  1510  0019                     	;# 
  1511  001A                     	;# 
  1512  001B                     	;# 
  1513  001C                     	;# 
  1514  008C                     	;# 
  1515  008D                     	;# 
  1516  008E                     	;# 
  1517  0090                     	;# 
  1518  0091                     	;# 
  1519  0092                     	;# 
  1520  0095                     	;# 
  1521  0096                     	;# 
  1522  0097                     	;# 
  1523  0099                     	;# 
  1524  009A                     	;# 
  1525  009B                     	;# 
  1526  009B                     	;# 
  1527  009C                     	;# 
  1528  009D                     	;# 
  1529  009E                     	;# 
  1530  010C                     	;# 
  1531  010D                     	;# 
  1532  010E                     	;# 
  1533  0116                     	;# 
  1534  0117                     	;# 
  1535  011D                     	;# 
  1536  018C                     	;# 
  1537  018D                     	;# 
  1538  018E                     	;# 
  1539  0191                     	;# 
  1540  0191                     	;# 
  1541  0192                     	;# 
  1542  0193                     	;# 
  1543  0193                     	;# 
  1544  0194                     	;# 
  1545  0195                     	;# 
  1546  0196                     	;# 
  1547  0197                     	;# 
  1548  0199                     	;# 
  1549  019A                     	;# 
  1550  019B                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019C                     	;# 
  1555  019C                     	;# 
  1556  019D                     	;# 
  1557  019E                     	;# 
  1558  019F                     	;# 
  1559  020D                     	;# 
  1560  0210                     	;# 
  1561  0211                     	;# 
  1562  0211                     	;# 
  1563  0212                     	;# 
  1564  0212                     	;# 
  1565  0213                     	;# 
  1566  0213                     	;# 
  1567  0214                     	;# 
  1568  0214                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0216                     	;# 
  1573  0216                     	;# 
  1574  0217                     	;# 
  1575  0217                     	;# 
  1576  0291                     	;# 
  1577  0291                     	;# 
  1578  0292                     	;# 
  1579  0293                     	;# 
  1580  0298                     	;# 
  1581  0298                     	;# 
  1582  0299                     	;# 
  1583  029A                     	;# 
  1584  0394                     	;# 
  1585  0395                     	;# 
  1586  0396                     	;# 
  1587  0FE4                     	;# 
  1588  0FE5                     	;# 
  1589  0FE6                     	;# 
  1590  0FE7                     	;# 
  1591  0FE8                     	;# 
  1592  0FE9                     	;# 
  1593  0FEA                     	;# 
  1594  0FEB                     	;# 
  1595  0FED                     	;# 
  1596  0FEE                     	;# 
  1597  0FEF                     	;# 
  1598  0000                     	;# 
  1599  0001                     	;# 
  1600  0002                     	;# 
  1601  0003                     	;# 
  1602  0004                     	;# 
  1603  0005                     	;# 
  1604  0006                     	;# 
  1605  0007                     	;# 
  1606  0008                     	;# 
  1607  0009                     	;# 
  1608  000A                     	;# 
  1609  000B                     	;# 
  1610  000C                     	;# 
  1611  000D                     	;# 
  1612  000E                     	;# 
  1613  0010                     	;# 
  1614  0011                     	;# 
  1615  0012                     	;# 
  1616  0015                     	;# 
  1617  0016                     	;# 
  1618  0016                     	;# 
  1619  0017                     	;# 
  1620  0018                     	;# 
  1621  0019                     	;# 
  1622  001A                     	;# 
  1623  001B                     	;# 
  1624  001C                     	;# 
  1625  008C                     	;# 
  1626  008D                     	;# 
  1627  008E                     	;# 
  1628  0090                     	;# 
  1629  0091                     	;# 
  1630  0092                     	;# 
  1631  0095                     	;# 
  1632  0096                     	;# 
  1633  0097                     	;# 
  1634  0099                     	;# 
  1635  009A                     	;# 
  1636  009B                     	;# 
  1637  009B                     	;# 
  1638  009C                     	;# 
  1639  009D                     	;# 
  1640  009E                     	;# 
  1641  010C                     	;# 
  1642  010D                     	;# 
  1643  010E                     	;# 
  1644  0116                     	;# 
  1645  0117                     	;# 
  1646  011D                     	;# 
  1647  018C                     	;# 
  1648  018D                     	;# 
  1649  018E                     	;# 
  1650  0191                     	;# 
  1651  0191                     	;# 
  1652  0192                     	;# 
  1653  0193                     	;# 
  1654  0193                     	;# 
  1655  0194                     	;# 
  1656  0195                     	;# 
  1657  0196                     	;# 
  1658  0197                     	;# 
  1659  0199                     	;# 
  1660  019A                     	;# 
  1661  019B                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019C                     	;# 
  1666  019C                     	;# 
  1667  019D                     	;# 
  1668  019E                     	;# 
  1669  019F                     	;# 
  1670  020D                     	;# 
  1671  0210                     	;# 
  1672  0211                     	;# 
  1673  0211                     	;# 
  1674  0212                     	;# 
  1675  0212                     	;# 
  1676  0213                     	;# 
  1677  0213                     	;# 
  1678  0214                     	;# 
  1679  0214                     	;# 
  1680  0215                     	;# 
  1681  0215                     	;# 
  1682  0215                     	;# 
  1683  0216                     	;# 
  1684  0216                     	;# 
  1685  0217                     	;# 
  1686  0217                     	;# 
  1687  0291                     	;# 
  1688  0291                     	;# 
  1689  0292                     	;# 
  1690  0293                     	;# 
  1691  0298                     	;# 
  1692  0298                     	;# 
  1693  0299                     	;# 
  1694  029A                     	;# 
  1695  0394                     	;# 
  1696  0395                     	;# 
  1697  0396                     	;# 
  1698  0FE4                     	;# 
  1699  0FE5                     	;# 
  1700  0FE6                     	;# 
  1701  0FE7                     	;# 
  1702  0FE8                     	;# 
  1703  0FE9                     	;# 
  1704  0FEA                     	;# 
  1705  0FEB                     	;# 
  1706  0FED                     	;# 
  1707  0FEE                     	;# 
  1708  0FEF                     	;# 
  1709  0000                     	;# 
  1710  0001                     	;# 
  1711  0002                     	;# 
  1712  0003                     	;# 
  1713  0004                     	;# 
  1714  0005                     	;# 
  1715  0006                     	;# 
  1716  0007                     	;# 
  1717  0008                     	;# 
  1718  0009                     	;# 
  1719  000A                     	;# 
  1720  000B                     	;# 
  1721  000C                     	;# 
  1722  000D                     	;# 
  1723  000E                     	;# 
  1724  0010                     	;# 
  1725  0011                     	;# 
  1726  0012                     	;# 
  1727  0015                     	;# 
  1728  0016                     	;# 
  1729  0016                     	;# 
  1730  0017                     	;# 
  1731  0018                     	;# 
  1732  0019                     	;# 
  1733  001A                     	;# 
  1734  001B                     	;# 
  1735  001C                     	;# 
  1736  008C                     	;# 
  1737  008D                     	;# 
  1738  008E                     	;# 
  1739  0090                     	;# 
  1740  0091                     	;# 
  1741  0092                     	;# 
  1742  0095                     	;# 
  1743  0096                     	;# 
  1744  0097                     	;# 
  1745  0099                     	;# 
  1746  009A                     	;# 
  1747  009B                     	;# 
  1748  009B                     	;# 
  1749  009C                     	;# 
  1750  009D                     	;# 
  1751  009E                     	;# 
  1752  010C                     	;# 
  1753  010D                     	;# 
  1754  010E                     	;# 
  1755  0116                     	;# 
  1756  0117                     	;# 
  1757  011D                     	;# 
  1758  018C                     	;# 
  1759  018D                     	;# 
  1760  018E                     	;# 
  1761  0191                     	;# 
  1762  0191                     	;# 
  1763  0192                     	;# 
  1764  0193                     	;# 
  1765  0193                     	;# 
  1766  0194                     	;# 
  1767  0195                     	;# 
  1768  0196                     	;# 
  1769  0197                     	;# 
  1770  0199                     	;# 
  1771  019A                     	;# 
  1772  019B                     	;# 
  1773  019B                     	;# 
  1774  019B                     	;# 
  1775  019B                     	;# 
  1776  019C                     	;# 
  1777  019C                     	;# 
  1778  019D                     	;# 
  1779  019E                     	;# 
  1780  019F                     	;# 
  1781  020D                     	;# 
  1782  0210                     	;# 
  1783  0211                     	;# 
  1784  0211                     	;# 
  1785  0212                     	;# 
  1786  0212                     	;# 
  1787  0213                     	;# 
  1788  0213                     	;# 
  1789  0214                     	;# 
  1790  0214                     	;# 
  1791  0215                     	;# 
  1792  0215                     	;# 
  1793  0215                     	;# 
  1794  0216                     	;# 
  1795  0216                     	;# 
  1796  0217                     	;# 
  1797  0217                     	;# 
  1798  0291                     	;# 
  1799  0291                     	;# 
  1800  0292                     	;# 
  1801  0293                     	;# 
  1802  0298                     	;# 
  1803  0298                     	;# 
  1804  0299                     	;# 
  1805  029A                     	;# 
  1806  0394                     	;# 
  1807  0395                     	;# 
  1808  0396                     	;# 
  1809  0FE4                     	;# 
  1810  0FE5                     	;# 
  1811  0FE6                     	;# 
  1812  0FE7                     	;# 
  1813  0FE8                     	;# 
  1814  0FE9                     	;# 
  1815  0FEA                     	;# 
  1816  0FEB                     	;# 
  1817  0FED                     	;# 
  1818  0FEE                     	;# 
  1819  0FEF                     	;# 
  1820  0000                     	;# 
  1821  0001                     	;# 
  1822  0002                     	;# 
  1823  0003                     	;# 
  1824  0004                     	;# 
  1825  0005                     	;# 
  1826  0006                     	;# 
  1827  0007                     	;# 
  1828  0008                     	;# 
  1829  0009                     	;# 
  1830  000A                     	;# 
  1831  000B                     	;# 
  1832  000C                     	;# 
  1833  000D                     	;# 
  1834  000E                     	;# 
  1835  0010                     	;# 
  1836  0011                     	;# 
  1837  0012                     	;# 
  1838  0015                     	;# 
  1839  0016                     	;# 
  1840  0016                     	;# 
  1841  0017                     	;# 
  1842  0018                     	;# 
  1843  0019                     	;# 
  1844  001A                     	;# 
  1845  001B                     	;# 
  1846  001C                     	;# 
  1847  008C                     	;# 
  1848  008D                     	;# 
  1849  008E                     	;# 
  1850  0090                     	;# 
  1851  0091                     	;# 
  1852  0092                     	;# 
  1853  0095                     	;# 
  1854  0096                     	;# 
  1855  0097                     	;# 
  1856  0099                     	;# 
  1857  009A                     	;# 
  1858  009B                     	;# 
  1859  009B                     	;# 
  1860  009C                     	;# 
  1861  009D                     	;# 
  1862  009E                     	;# 
  1863  010C                     	;# 
  1864  010D                     	;# 
  1865  010E                     	;# 
  1866  0116                     	;# 
  1867  0117                     	;# 
  1868  011D                     	;# 
  1869  018C                     	;# 
  1870  018D                     	;# 
  1871  018E                     	;# 
  1872  0191                     	;# 
  1873  0191                     	;# 
  1874  0192                     	;# 
  1875  0193                     	;# 
  1876  0193                     	;# 
  1877  0194                     	;# 
  1878  0195                     	;# 
  1879  0196                     	;# 
  1880  0197                     	;# 
  1881  0199                     	;# 
  1882  019A                     	;# 
  1883  019B                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019B                     	;# 
  1887  019C                     	;# 
  1888  019C                     	;# 
  1889  019D                     	;# 
  1890  019E                     	;# 
  1891  019F                     	;# 
  1892  020D                     	;# 
  1893  0210                     	;# 
  1894  0211                     	;# 
  1895  0211                     	;# 
  1896  0212                     	;# 
  1897  0212                     	;# 
  1898  0213                     	;# 
  1899  0213                     	;# 
  1900  0214                     	;# 
  1901  0214                     	;# 
  1902  0215                     	;# 
  1903  0215                     	;# 
  1904  0215                     	;# 
  1905  0216                     	;# 
  1906  0216                     	;# 
  1907  0217                     	;# 
  1908  0217                     	;# 
  1909  0291                     	;# 
  1910  0291                     	;# 
  1911  0292                     	;# 
  1912  0293                     	;# 
  1913  0298                     	;# 
  1914  0298                     	;# 
  1915  0299                     	;# 
  1916  029A                     	;# 
  1917  0394                     	;# 
  1918  0395                     	;# 
  1919  0396                     	;# 
  1920  0FE4                     	;# 
  1921  0FE5                     	;# 
  1922  0FE6                     	;# 
  1923  0FE7                     	;# 
  1924  0FE8                     	;# 
  1925  0FE9                     	;# 
  1926  0FEA                     	;# 
  1927  0FEB                     	;# 
  1928  0FED                     	;# 
  1929  0FEE                     	;# 
  1930  0FEF                     	;# 
  1931  0000                     	;# 
  1932  0001                     	;# 
  1933  0002                     	;# 
  1934  0003                     	;# 
  1935  0004                     	;# 
  1936  0005                     	;# 
  1937  0006                     	;# 
  1938  0007                     	;# 
  1939  0008                     	;# 
  1940  0009                     	;# 
  1941  000A                     	;# 
  1942  000B                     	;# 
  1943  000C                     	;# 
  1944  000D                     	;# 
  1945  000E                     	;# 
  1946  0010                     	;# 
  1947  0011                     	;# 
  1948  0012                     	;# 
  1949  0015                     	;# 
  1950  0016                     	;# 
  1951  0016                     	;# 
  1952  0017                     	;# 
  1953  0018                     	;# 
  1954  0019                     	;# 
  1955  001A                     	;# 
  1956  001B                     	;# 
  1957  001C                     	;# 
  1958  008C                     	;# 
  1959  008D                     	;# 
  1960  008E                     	;# 
  1961  0090                     	;# 
  1962  0091                     	;# 
  1963  0092                     	;# 
  1964  0095                     	;# 
  1965  0096                     	;# 
  1966  0097                     	;# 
  1967  0099                     	;# 
  1968  009A                     	;# 
  1969  009B                     	;# 
  1970  009B                     	;# 
  1971  009C                     	;# 
  1972  009D                     	;# 
  1973  009E                     	;# 
  1974  010C                     	;# 
  1975  010D                     	;# 
  1976  010E                     	;# 
  1977  0116                     	;# 
  1978  0117                     	;# 
  1979  011D                     	;# 
  1980  018C                     	;# 
  1981  018D                     	;# 
  1982  018E                     	;# 
  1983  0191                     	;# 
  1984  0191                     	;# 
  1985  0192                     	;# 
  1986  0193                     	;# 
  1987  0193                     	;# 
  1988  0194                     	;# 
  1989  0195                     	;# 
  1990  0196                     	;# 
  1991  0197                     	;# 
  1992  0199                     	;# 
  1993  019A                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019C                     	;# 
  1999  019C                     	;# 
  2000  019D                     	;# 
  2001  019E                     	;# 
  2002  019F                     	;# 
  2003  020D                     	;# 
  2004  0210                     	;# 
  2005  0211                     	;# 
  2006  0211                     	;# 
  2007  0212                     	;# 
  2008  0212                     	;# 
  2009  0213                     	;# 
  2010  0213                     	;# 
  2011  0214                     	;# 
  2012  0214                     	;# 
  2013  0215                     	;# 
  2014  0215                     	;# 
  2015  0215                     	;# 
  2016  0216                     	;# 
  2017  0216                     	;# 
  2018  0217                     	;# 
  2019  0217                     	;# 
  2020  0291                     	;# 
  2021  0291                     	;# 
  2022  0292                     	;# 
  2023  0293                     	;# 
  2024  0298                     	;# 
  2025  0298                     	;# 
  2026  0299                     	;# 
  2027  029A                     	;# 
  2028  0394                     	;# 
  2029  0395                     	;# 
  2030  0396                     	;# 
  2031  0FE4                     	;# 
  2032  0FE5                     	;# 
  2033  0FE6                     	;# 
  2034  0FE7                     	;# 
  2035  0FE8                     	;# 
  2036  0FE9                     	;# 
  2037  0FEA                     	;# 
  2038  0FEB                     	;# 
  2039  0FED                     	;# 
  2040  0FEE                     	;# 
  2041  0FEF                     	;# 
  2042                           
  2043                           	psect	idataBANK4
  2044  1F54                     __pidataBANK4:	
  2045                           
  2046                           ;initializer for __product
  2047  1F54  3463               	retlw	99
  2048  1F55  3402               	retlw	2
  2049  1F56  3400               	retlw	0
  2050  1F57  3400               	retlw	0
  2051  1F58  3400               	retlw	0
  2052  1F59  3400               	retlw	0
  2053  1F5A  3400               	retlw	0
  2054  1F5B  3400               	retlw	0
  2055  1F5C  3400               	retlw	0
  2056  1F5D  3400               	retlw	0
  2057  1F5E  3400               	retlw	0
  2058  1F5F  3400               	retlw	0
  2059  1F60  34FF               	retlw	255
  2060  1F61  34FF               	retlw	255
  2061  1F62  34FF               	retlw	255
  2062  1F63  3400               	retlw	0
  2063  1F64  3400               	retlw	0
  2064  1F65  3400               	retlw	0
  2065  1F66  3400               	retlw	0
  2066  1F67  3400               	retlw	0
  2067  1F68  3400               	retlw	0
  2068  1F69  3400               	retlw	0
  2069  1F6A  3400               	retlw	0
  2070  1F6B  3400               	retlw	0
  2071  1F6C  3400               	retlw	0
  2072  1F6D  3400               	retlw	0
  2073  1F6E  3400               	retlw	0
  2074  1F6F  3400               	retlw	0
  2075  1F70  3400               	retlw	0
  2076  1F71  3400               	retlw	0
  2077  1F72  3400               	retlw	0
  2078  1F73  3400               	retlw	0
  2079                           
  2080                           	psect	stringtext
  2081  1000                     __pstringtext:	
  2082  1000                     _CC2500_registers_address:	
  2083  1000  3403               	retlw	3
  2084  1001  3416               	retlw	22
  2085  1002  3417               	retlw	23
  2086  1003  341E               	retlw	30
  2087  1004  341F               	retlw	31
  2088  1005  3420               	retlw	32
  2089  1006  342A               	retlw	42
  2090  1007  342B               	retlw	43
  2091  1008  340B               	retlw	11
  2092  1009  340C               	retlw	12
  2093  100A  340D               	retlw	13
  2094  100B  340E               	retlw	14
  2095  100C  340F               	retlw	15
  2096  100D  3410               	retlw	16
  2097  100E  3411               	retlw	17
  2098  100F  3412               	retlw	18
  2099  1010  3413               	retlw	19
  2100  1011  3414               	retlw	20
  2101  1012  340A               	retlw	10
  2102  1013  3415               	retlw	21
  2103  1014  3421               	retlw	33
  2104  1015  3422               	retlw	34
  2105  1016  3418               	retlw	24
  2106  1017  3419               	retlw	25
  2107  1018  341A               	retlw	26
  2108  1019  341B               	retlw	27
  2109  101A  341C               	retlw	28
  2110  101B  341D               	retlw	29
  2111  101C  3423               	retlw	35
  2112  101D  3424               	retlw	36
  2113  101E  3425               	retlw	37
  2114  101F  3426               	retlw	38
  2115  1020  3429               	retlw	41
  2116  1021  342C               	retlw	44
  2117  1022  342D               	retlw	45
  2118  1023  342E               	retlw	46
  2119  1024  3400               	retlw	0
  2120  1025  3401               	retlw	1
  2121  1026  3402               	retlw	2
  2122  1027  3407               	retlw	7
  2123  1028  3408               	retlw	8
  2124  1029  3409               	retlw	9
  2125  102A  3406               	retlw	6
  2126  102B  3404               	retlw	4
  2127  102C  3405               	retlw	5
  2128  102D  3427               	retlw	39
  2129  102E  3428               	retlw	40
  2130  102F                     __end_of_CC2500_registers_address:	
  2131  102F                     _CC2500_rfSettings:	
  2132  102F  3407               	retlw	7
  2133  1030  3407               	retlw	7
  2134  1031  3430               	retlw	48
  2135  1032  3487               	retlw	135
  2136  1033  346B               	retlw	107
  2137  1034  34F8               	retlw	248
  2138  1035  347F               	retlw	127
  2139  1036  343F               	retlw	63
  2140  1037  3409               	retlw	9
  2141  1038  3400               	retlw	0
  2142  1039  345C               	retlw	92
  2143  103A  34A7               	retlw	167
  2144  103B  3462               	retlw	98
  2145  103C  3486               	retlw	134
  2146  103D  3483               	retlw	131
  2147  103E  3403               	retlw	3
  2148  103F  3422               	retlw	34
  2149  1040  34F8               	retlw	248
  2150  1041  3400               	retlw	0
  2151  1042  3444               	retlw	68
  2152  1043  34B6               	retlw	182
  2153  1044  3410               	retlw	16
  2154  1045  3418               	retlw	24
  2155  1046  341D               	retlw	29
  2156  1047  341C               	retlw	28
  2157  1048  34C7               	retlw	199
  2158  1049  3400               	retlw	0
  2159  104A  34B2               	retlw	178
  2160  104B  34EA               	retlw	234
  2161  104C  340A               	retlw	10
  2162  104D  3400               	retlw	0
  2163  104E  3411               	retlw	17
  2164  104F  3459               	retlw	89
  2165  1050  3488               	retlw	136
  2166  1051  3431               	retlw	49
  2167  1052  340B               	retlw	11
  2168  1053  342F               	retlw	47
  2169  1054  342E               	retlw	46
  2170  1055  3406               	retlw	6
  2171  1056  3404               	retlw	4
  2172  1057  3405               	retlw	5
  2173  1058  3400               	retlw	0
  2174  1059  3430               	retlw	48
  2175  105A  34D3               	retlw	211
  2176  105B  3491               	retlw	145
  2177  105C  3441               	retlw	65
  2178  105D  3400               	retlw	0
  2179  105E                     __end_of_CC2500_rfSettings:	
  2180  105E                     _CC2500_patable_vaule:	
  2181  105E  34FE               	retlw	254
  2182  105F  34FE               	retlw	254
  2183  1060  34FE               	retlw	254
  2184  1061  34FE               	retlw	254
  2185  1062  34FE               	retlw	254
  2186  1063  34FE               	retlw	254
  2187  1064  34FE               	retlw	254
  2188  1065  34FE               	retlw	254
  2189  1066                     __end_of_CC2500_patable_vaule:	
  2190                           
  2191                           	psect	nvBANK0
  2192  006E                     __pnvBANK0:	
  2193  006E                     _product:	
  2194  006E                     	ds	1
  2195  000C                     _PORTA	set	12
  2196  000D                     _PORTB	set	13
  2197  000E                     _PORTC	set	14
  2198  0018                     _T1CON	set	24
  2199  0017                     _TMR1H	set	23
  2200  0016                     _TMR1L	set	22
  2201  005F                     _GIE	set	95
  2202  005B                     _IOCIE	set	91
  2203  0058                     _IOCIF	set	88
  2204  005E                     _PEIE	set	94
  2205  0060                     _RA0	set	96
  2206  0063                     _RA3	set	99
  2207  0064                     _RA4	set	100
  2208  0066                     _RA6	set	102
  2209  0067                     _RA7	set	103
  2210  0068                     _RB0	set	104
  2211  0069                     _RB1	set	105
  2212  006B                     _RB3	set	107
  2213  006C                     _RB4	set	108
  2214  006D                     _RB5	set	109
  2215  0070                     _RC0	set	112
  2216  0071                     _RC1	set	113
  2217  0072                     _RC2	set	114
  2218  0074                     _RC4	set	116
  2219  0075                     _RC5	set	117
  2220  0077                     _RC7	set	119
  2221  0088                     _TMR1IF	set	136
  2222  009D                     _ADCON0	set	157
  2223  009E                     _ADCON1	set	158
  2224  009C                     _ADRESH	set	156
  2225  009B                     _ADRESL	set	155
  2226  0099                     _OSCCON	set	153
  2227  008C                     _TRISA	set	140
  2228  008D                     _TRISB	set	141
  2229  008E                     _TRISC	set	142
  2230  0097                     _WDTCON	set	151
  2231  04E9                     _GO_nDONE	set	1257
  2232  0488                     _TMR1IE	set	1160
  2233  0117                     _FVRCON	set	279
  2234  010C                     _LATA	set	268
  2235  010D                     _LATB	set	269
  2236  010E                     _LATC	set	270
  2237  018C                     _ANSELA	set	396
  2238  018D                     _ANSELB	set	397
  2239  018E                     _ANSELC	set	398
  2240  0192                     _PMADRH	set	402
  2241  0191                     _PMADRL	set	401
  2242  0196                     _PMCON2	set	406
  2243  0194                     _PMDATH	set	404
  2244  0193                     _PMDATL	set	403
  2245  0CAE                     _CFGS	set	3246
  2246  0CAC                     _FREE	set	3244
  2247  0CAD                     _LWLO	set	3245
  2248  0CA8                     _RD	set	3240
  2249  0CA9                     _WR	set	3241
  2250  0CAA                     _WREN	set	3242
  2251  1069                     _WPUB1	set	4201
  2252  106A                     _WPUB2	set	4202
  2253  0396                     _IOCBF	set	918
  2254  0395                     _IOCBN	set	917
  2255  0394                     _IOCBP	set	916
  2256  1CB2                     _IOCBF2	set	7346
  2257                           
  2258                           ; #config settings
  2259  0000                     
  2260                           	psect	cinit
  2261  0015                     start_initialization:	
  2262  0015                     __initialization:	
  2263                           
  2264                           ; Clear objects allocated to BITCOMMON
  2265  0015  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2266                           
  2267                           ; Clear objects allocated to COMMON
  2268  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2269  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2270  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2271  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2272                           
  2273                           ; Clear objects allocated to BANK0
  2274  001A  01EF               	clrf	__pbssBANK0& (0+127)
  2275                           
  2276                           ; Clear objects allocated to BANK1
  2277  001B  30A0               	movlw	low __pbssBANK1
  2278  001C  0084               	movwf	4
  2279  001D  3000               	movlw	high __pbssBANK1
  2280  001E  0085               	movwf	5
  2281  001F  3048               	movlw	72
  2282  0020  319B  2377  3180   	fcall	clear_ram0
  2283                           
  2284                           ; Clear objects allocated to BANK2
  2285  0023  3020               	movlw	low __pbssBANK2
  2286  0024  0084               	movwf	4
  2287  0025  3001               	movlw	high __pbssBANK2
  2288  0026  0085               	movwf	5
  2289  0027  304E               	movlw	78
  2290  0028  319B  2377  3180   	fcall	clear_ram0
  2291                           
  2292                           ; Clear objects allocated to BANK3
  2293  002B  30A0               	movlw	low __pbssBANK3
  2294  002C  0084               	movwf	4
  2295  002D  3001               	movlw	high __pbssBANK3
  2296  002E  0085               	movwf	5
  2297  002F  3045               	movlw	69
  2298  0030  319B  2377  3180   	fcall	clear_ram0
  2299                           
  2300                           ; Clear objects allocated to BANK4
  2301  0033  3020               	movlw	low __pbssBANK4
  2302  0034  0084               	movwf	4
  2303  0035  3002               	movlw	high __pbssBANK4
  2304  0036  0085               	movwf	5
  2305  0037  3025               	movlw	37
  2306  0038  319B  2377  3180   	fcall	clear_ram0
  2307                           
  2308                           ; Initialize objects allocated to BANK4
  2309  003B  3054               	movlw	low __pidataBANK4
  2310  003C  0084               	movwf	4
  2311  003D  309F               	movlw	(high __pidataBANK4)| (0+128)
  2312  003E  0085               	movwf	5
  2313  003F  3045               	movlw	low __pdataBANK4
  2314  0040  0086               	movwf	6
  2315  0041  3002               	movlw	high __pdataBANK4
  2316  0042  0087               	movwf	7
  2317  0043  3020               	movlw	32
  2318  0044  319B  2371         	fcall	init_ram
  2319  0046                     end_of_initialization:	
  2320                           ;End of C runtime variable initialization code
  2321                           
  2322  0046                     __end_of__initialization:	
  2323  0046  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2324  0047  0020               	movlb	0
  2325  0048  3196  2E41         	ljmp	_main	;jump to C main() function
  2326                           
  2327                           	psect	bitbssCOMMON
  2328  03E0                     __pbitbssCOMMON:	
  2329  03E0                     _Receive_OK:	
  2330  03E0                     	ds	1
  2331  03E1                     _Transceive_OK:	
  2332  03E1                     	ds	1
  2333                           
  2334                           	psect	bssCOMMON
  2335  0078                     __pbssCOMMON:	
  2336  0078                     _DelayOff:	
  2337  0078                     	ds	1
  2338  0079                     _DimmerLightsIntr:	
  2339  0079                     	ds	1
  2340  007A                     _LED:	
  2341  007A                     	ds	1
  2342  007B                     _Sw:	
  2343  007B                     	ds	1
  2344                           
  2345                           	psect	bssBANK0
  2346  006F                     __pbssBANK0:	
  2347  006F                     _DimmerLights:	
  2348  006F                     	ds	1
  2349                           
  2350                           	psect	bssBANK1
  2351  00A0                     __pbssBANK1:	
  2352  00A0                     _myMain:	
  2353  00A0                     	ds	16
  2354  00B0                     _Buz1:	
  2355  00B0                     	ds	12
  2356  00BC                     _RF1:	
  2357  00BC                     	ds	12
  2358  00C8                     _WDT:	
  2359  00C8                     	ds	2
  2360  00CA                     _CRC:	
  2361  00CA                     	ds	1
  2362  00CB                     _DimmerLights11:	
  2363  00CB                     	ds	1
  2364  00CC                     _DimmerLights22:	
  2365  00CC                     	ds	1
  2366  00CD                     _DimmerLightsIntrIOC:	
  2367  00CD                     	ds	1
  2368  00CE                     _RSSI:	
  2369  00CE                     	ds	1
  2370  00CF                     _Rx_Length:	
  2371  00CF                     	ds	1
  2372  00D0                     _SPI0Buffer:	
  2373  00D0                     	ds	1
  2374  00D1                     _SwDetect:	
  2375  00D1                     	ds	1
  2376  00D2                     _Tx_Length:	
  2377  00D2                     	ds	1
  2378  00D3                     _r_address:	
  2379  00D3                     	ds	1
  2380  00D4                     _r_data:	
  2381  00D4                     	ds	1
  2382  00D5                     _s_data:	
  2383  00D5                     	ds	1
  2384  00D6                     _Temp:	
  2385  00D6                     	ds	18
  2386                           
  2387                           	psect	bssBANK2
  2388  0120                     __pbssBANK2:	
  2389  0120                     _Dimmer:	
  2390  0120                     	ds	3
  2391  0123                     _Timer1:	
  2392  0123                     	ds	3
  2393  0126                     _RF_Count:	
  2394  0126                     	ds	2
  2395  0128                     _Load:	
  2396  0128                     	ds	45
  2397  0155                     _Sw1:	
  2398  0155                     	ds	9
  2399  015E                     _VarErrLED:	
  2400  015E                     	ds	4
  2401  0162                     _VarLED1:	
  2402  0162                     	ds	4
  2403  0166                     _VarLED2:	
  2404  0166                     	ds	4
  2405  016A                     _DlySw1:	
  2406  016A                     	ds	2
  2407  016C                     _DlySw2:	
  2408  016C                     	ds	2
  2409                           
  2410                           	psect	bssBANK3
  2411  01A0                     __pbssBANK3:	
  2412  01A0                     _RF_Data:	
  2413  01A0                     	ds	30
  2414  01BE                     _DimmerLights1:	
  2415  01BE                     	ds	15
  2416  01CD                     _DimmerLights2:	
  2417  01CD                     	ds	15
  2418  01DC                     _Sw2:	
  2419  01DC                     	ds	9
  2420                           
  2421                           	psect	bssBANK4
  2422  0220                     __pbssBANK4:	
  2423  0220                     _Memory:	
  2424  0220                     	ds	37
  2425                           
  2426                           	psect	dataBANK4
  2427  0245                     __pdataBANK4:	
  2428  0245                     __product:	
  2429  0245                     	ds	32
  2430                           
  2431                           	psect	clrtext
  2432  1B77                     clear_ram0:	
  2433                           ;	Called with FSR0 containing the base address, and
  2434                           ;	WREG with the size to clear
  2435                           
  2436  1B77  0064               	clrwdt	;clear the watchdog before getting into this loop
  2437  1B78                     clrloop0:	
  2438  1B78  0180               	clrf	0	;clear RAM location pointed to by FSR
  2439  1B79  3101               	addfsr 0,1
  2440  1B7A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2441  1B7B  2B78               	goto	clrloop0	;have we reached the end yet?
  2442  1B7C  3400               	retlw	0	;all done for this memory range, return
  2443                           
  2444                           	psect	inittext
  2445  1B71                     init_ram:	
  2446  1B71  00FE               	movwf	126
  2447  1B72                     initloop:	
  2448  1B72  0012               	moviw fsr0++
  2449  1B73  001E               	movwi fsr1++
  2450  1B74  0BFE               	decfsz	126,f
  2451  1B75  2B72               	goto	initloop
  2452  1B76  3400               	retlw	0
  2453                           
  2454                           	psect	cstackBANK1
  2455  00E8                     __pcstackBANK1:	
  2456  00E8                     setRF_Main@loop_f:	
  2457                           
  2458                           ; 1 bytes @ 0x0
  2459  00E8                     	ds	1
  2460  00E9                     setRF_Main@Receive_OK:	
  2461                           
  2462                           ; 1 bytes @ 0x1
  2463  00E9                     	ds	1
  2464  00EA                     setRF_Main@error:	
  2465                           
  2466                           ; 1 bytes @ 0x2
  2467  00EA                     	ds	1
  2468  00EB                     ?_main:	
  2469  00EB                     main@argc:	
  2470                           ; 2 bytes @ 0x3
  2471                           
  2472                           
  2473                           ; 2 bytes @ 0x3
  2474  00EB                     	ds	2
  2475  00ED                     main@argv:	
  2476                           
  2477                           ; 2 bytes @ 0x5
  2478  00ED                     	ds	2
  2479                           
  2480                           	psect	cstackCOMMON
  2481  0070                     __pcstackCOMMON:	
  2482  0070                     ?_Timeout_Counter:	
  2483  0070                     ?_set_TimeoutCleared:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0070                     ?_CC2500_WriteByte:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0070                     ?_CC2500_WriteCommand:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0070                     ?_CC2500_ReadStatus:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0070                     ?_CC2500_ReadByte:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0070                     ?_CC2500_PowerRST:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0070                     ?_CC2500_InitSetREG:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0070                     ?_CC2500_InitPATable:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0070                     ?_CC2500_ClearTXFIFO:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0070                     ?_CC2500_ClearRXFIFO:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0070                     ?_CC2500_FrequencyCabr:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0070                     ?_CC2500_SIDLEMode:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0070                     ?_DlyOff_Initialization:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0070                     ?_DlyOff_Main:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0070                     ?_setDimmerLights_SwOn:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0070                     ?_setDimmerLights_SwOff:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0070                     ?_setDimmerLights_Initialization:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0070                     ?_Dimmer_Initialization:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0070                     ?_setDimmerLights_Main:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0070                     ?_setDimmerLights_Line:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0070                     ?_setTxData:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0070                     ?_setLED_Initialization:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0070                     ?_setLED_Main:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0070                     ?_Fosc_Set:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0070                     ?_IO_Set:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0070                     ?_TMR1_Set:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0070                     ?_ADC_Set:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0070                     ?_IOC_Set:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0070                     ?_WDT_Set:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0070                     ?_IOC_ISR:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0070                     ?_TMR1_ISR:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_Flash_Memory_Write:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_Flash_Memory_Modify:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_WDT_Clearing:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_setLoad_AH_AL_Restore:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_setTemp_Initialization:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_setTemp_Main:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_setRF_Initialization:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_setRF_Main:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_getRxData:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_setLog_Code:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_setControl_Lights_Table:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_setRFSW_Control:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_setRFSW_AdjControl:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_setRF_DimmerValue:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_setSw_Initialization:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_setMain_Exception:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_setSw_Main:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_myMain_Initialization:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_my_MainTimer:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_Buzzer_Initialization:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_Buzzer_Main:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_CC2500_TxData:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_CC2500_RxData:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_CC2500_PowerOnInitial:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_DelayOffPointSelect:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_DelayOff_Initialization:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_DelayOff_Main:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_DimmerIntrIOCPointSelect:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ??_DimmerIntrIOCPointSelect:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_DimmerIntrPointSelect:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ??_DimmerIntrPointSelect:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_setDimmerLights_IntrControl:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_DimmerLightsPointSelect:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_DimmerLights_Initialization:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_DimmerLights_Main:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_setDimmerLights_AdjControl:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_setDimmerLights_ErrorClose:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_setDimmerLights_AdjRF:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_LedPointSelect:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_LED_Initialization:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_LED_Main:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_Mcu_Initialization:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_ISR:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_setDimmerReClock:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_Flash_Memory_Initialization:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_Flash_Memory_Main:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_Flash_Memory_Unlock:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_Flash_Memory_Erasing:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_setMemory_Modify:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_setMemory_LoopSave:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_WDT_Main:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_Load_Initialization:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_getLoad_AD:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_Load_Main:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_Temp_Initialization:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_getTemp_AD:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_Temp_Main:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_RF_Initialization:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_RF_Main:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_setRF_Learn:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_TouchPower:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_SwPointSelect:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_Switch_Initialization:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_Switch_Main:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_getDimmerLights_Status:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_DelayTimejudge:	
  2775                           ; 1 bytes @ 0x0
  2776                           
  2777  0070                     ?_getMain_All_Error_Status:	
  2778                           ; 1 bytes @ 0x0
  2779                           
  2780  0070                     ?_getLoad_OK:	
  2781                           ; 1 bytes @ 0x0
  2782                           
  2783  0070                     ?_getMain_LightsStatus:	
  2784                           ; 1 bytes @ 0x0
  2785                           
  2786  0070                     ?_setPercentValue:	
  2787                           ; 1 bytes @ 0x0
  2788                           
  2789  0070                     ?_getPercentValue:	
  2790                           ; 1 bytes @ 0x0
  2791                           
  2792  0070                     ?_Flash_Memory_Read:	
  2793                           ; 1 bytes @ 0x0
  2794                           
  2795  0070                     ?_getMain_LoadOK:	
  2796                           ; 1 bytes @ 0x0
  2797                           
  2798  0070                     ?_getMain_Lights_Count:	
  2799                           ; 1 bytes @ 0x0
  2800                           
  2801  0070                     ?_getRF_KeyStatus:	
  2802                           ; 1 bytes @ 0x0
  2803                           
  2804  0070                     ?_getSw_KeyStatus:	
  2805                           ; 1 bytes @ 0x0
  2806                           
  2807  0070                     ?_getAll_DimmerLights_AdjGO:	
  2808                           ; 1 bytes @ 0x0
  2809                           
  2810  0070                     ?_getDimmer_LoadOK:	
  2811                           ; 1 bytes @ 0x0
  2812                           
  2813  0070                     ?_getDimmerLights_Line:	
  2814                           ; 1 bytes @ 0x0
  2815                           
  2816                           
  2817                           ; 1 bytes @ 0x0
  2818  0070                     	ds	1
  2819  0071                     DimmerIntrIOCPointSelect@lights:	
  2820  0071                     DimmerIntrPointSelect@lights:	
  2821                           ; 1 bytes @ 0x1
  2822                           
  2823                           
  2824                           ; 1 bytes @ 0x1
  2825  0071                     	ds	1
  2826  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2827  0072                     ??_setDimmerLights_IntrControl:	
  2828                           ; 0 bytes @ 0x2
  2829                           
  2830  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2831                           ; 0 bytes @ 0x2
  2832                           
  2833                           
  2834                           ; 1 bytes @ 0x2
  2835  0072                     	ds	1
  2836  0073                     ??_IOC_ISR:	
  2837  0073                     ??_setDimmerReClock:	
  2838                           ; 0 bytes @ 0x3
  2839                           
  2840                           
  2841                           ; 0 bytes @ 0x3
  2842  0073                     	ds	3
  2843  0076                     setDimmerLights_IntrControl@lights:	
  2844                           
  2845                           ; 1 bytes @ 0x6
  2846  0076                     	ds	1
  2847  0077                     ??_TMR1_ISR:	
  2848  0077                     ??_ISR:	
  2849                           ; 0 bytes @ 0x7
  2850                           
  2851                           
  2852                           ; 0 bytes @ 0x7
  2853  0077                     	ds	1
  2854                           
  2855                           	psect	cstackBANK0
  2856  0020                     __pcstackBANK0:	
  2857  0020                     ??_Timeout_Counter:	
  2858  0020                     ??_set_TimeoutCleared:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0020                     ??_CC2500_WriteByte:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0020                     ??_CC2500_ReadByte:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0020                     ?_DelayTime_1us:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0020                     ?_setRF_DimmerLights:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0020                     ??_Dimmer_Initialization:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0020                     ??_getMain_All_Error_Status:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0020                     ??_getLoad_OK:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0020                     ??_setDimmerLights_Line:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0020                     ??_setTxData:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0020                     ??_Fosc_Set:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0020                     ??_IO_Set:	
  2892                           ; 0 bytes @ 0x0
  2893                           
  2894  0020                     ??_TMR1_Set:	
  2895                           ; 0 bytes @ 0x0
  2896                           
  2897  0020                     ??_ADC_Set:	
  2898                           ; 0 bytes @ 0x0
  2899                           
  2900  0020                     ??_IOC_Set:	
  2901                           ; 0 bytes @ 0x0
  2902                           
  2903  0020                     ??_WDT_Set:	
  2904                           ; 0 bytes @ 0x0
  2905                           
  2906  0020                     ??_Flash_Memory_Read:	
  2907                           ; 0 bytes @ 0x0
  2908                           
  2909  0020                     ?_setMemory_Data:	
  2910                           ; 0 bytes @ 0x0
  2911                           
  2912  0020                     ??_Flash_Memory_Write:	
  2913                           ; 0 bytes @ 0x0
  2914                           
  2915  0020                     ??_WDT_Clearing:	
  2916                           ; 0 bytes @ 0x0
  2917                           
  2918  0020                     ??_setLoad_AH_AL_Restore:	
  2919                           ; 0 bytes @ 0x0
  2920                           
  2921  0020                     ??_getMain_Lights_Count:	
  2922                           ; 0 bytes @ 0x0
  2923                           
  2924  0020                     ??_setTemp_Initialization:	
  2925                           ; 0 bytes @ 0x0
  2926                           
  2927  0020                     ??_setRF_Initialization:	
  2928                           ; 0 bytes @ 0x0
  2929                           
  2930  0020                     ??_getRF_KeyStatus:	
  2931                           ; 0 bytes @ 0x0
  2932                           
  2933  0020                     ??_getSw_KeyStatus:	
  2934                           ; 0 bytes @ 0x0
  2935                           
  2936  0020                     ??_myMain_Initialization:	
  2937                           ; 0 bytes @ 0x0
  2938                           
  2939  0020                     ??_Buzzer_Initialization:	
  2940                           ; 0 bytes @ 0x0
  2941                           
  2942  0020                     ??_Buzzer_Main:	
  2943                           ; 0 bytes @ 0x0
  2944                           
  2945  0020                     ??_DelayOffPointSelect:	
  2946                           ; 0 bytes @ 0x0
  2947                           
  2948  0020                     ??_DimmerLightsPointSelect:	
  2949                           ; 0 bytes @ 0x0
  2950                           
  2951  0020                     ??_getAll_DimmerLights_AdjGO:	
  2952                           ; 0 bytes @ 0x0
  2953                           
  2954  0020                     ??_getDimmer_LoadOK:	
  2955                           ; 0 bytes @ 0x0
  2956                           
  2957  0020                     ??_getDimmerLights_Line:	
  2958                           ; 0 bytes @ 0x0
  2959                           
  2960  0020                     ??_LedPointSelect:	
  2961                           ; 0 bytes @ 0x0
  2962                           
  2963  0020                     ??_Flash_Memory_Unlock:	
  2964                           ; 0 bytes @ 0x0
  2965                           
  2966  0020                     ??_Flash_Memory_Erasing:	
  2967                           ; 0 bytes @ 0x0
  2968                           
  2969  0020                     ??_setMemory_Modify:	
  2970                           ; 0 bytes @ 0x0
  2971                           
  2972  0020                     ??_setMemory_LoopSave:	
  2973                           ; 0 bytes @ 0x0
  2974                           
  2975  0020                     ??_WDT_Main:	
  2976                           ; 0 bytes @ 0x0
  2977                           
  2978  0020                     ??_Temp_Initialization:	
  2979                           ; 0 bytes @ 0x0
  2980                           
  2981  0020                     ??_setRF_Learn:	
  2982                           ; 0 bytes @ 0x0
  2983                           
  2984  0020                     ??_TouchPower:	
  2985                           ; 0 bytes @ 0x0
  2986                           
  2987  0020                     ??_SwPointSelect:	
  2988                           ; 0 bytes @ 0x0
  2989                           
  2990  0020                     ?___bmul:	
  2991                           ; 0 bytes @ 0x0
  2992                           
  2993  0020                     ?_getBuz_GO:	
  2994                           ; 1 bytes @ 0x0
  2995                           
  2996  0020                     ?_getAD:	
  2997                           ; 2 bytes @ 0x0
  2998                           
  2999  0020                     ?___awdiv:	
  3000                           ; 2 bytes @ 0x0
  3001                           
  3002  0020                     ?___ftpack:	
  3003                           ; 2 bytes @ 0x0
  3004                           
  3005  0020                     getDimmer_LoadOK@status:	
  3006                           ; 3 bytes @ 0x0
  3007                           
  3008  0020                     setDimmerLights_Line@lights:	
  3009                           ; 1 bytes @ 0x0
  3010                           
  3011  0020                     getAD@adcon1:	
  3012                           ; 1 bytes @ 0x0
  3013                           
  3014  0020                     setMemory_Data@data:	
  3015                           ; 1 bytes @ 0x0
  3016                           
  3017  0020                     getLoad_OK@ok:	
  3018                           ; 1 bytes @ 0x0
  3019                           
  3020  0020                     setRF_DimmerLights@on:	
  3021                           ; 1 bytes @ 0x0
  3022                           
  3023  0020                     getMain_Lights_Count@count:	
  3024                           ; 1 bytes @ 0x0
  3025                           
  3026  0020                     ___bmul@multiplicand:	
  3027                           ; 1 bytes @ 0x0
  3028                           
  3029  0020                     DelayTime_1us@count:	
  3030                           ; 1 bytes @ 0x0
  3031                           
  3032  0020                     ___awdiv@divisor:	
  3033                           ; 2 bytes @ 0x0
  3034                           
  3035  0020                     ___ftpack@arg:	
  3036                           ; 2 bytes @ 0x0
  3037                           
  3038                           
  3039                           ; 3 bytes @ 0x0
  3040  0020                     	ds	1
  3041  0021                     ??_setRF_DimmerLights:	
  3042  0021                     ??_setMemory_Data:	
  3043                           ; 0 bytes @ 0x1
  3044                           
  3045  0021                     ??_getMain_LoadOK:	
  3046                           ; 0 bytes @ 0x1
  3047                           
  3048  0021                     ??_Mcu_Initialization:	
  3049                           ; 0 bytes @ 0x1
  3050                           
  3051  0021                     ??_RF_Initialization:	
  3052                           ; 0 bytes @ 0x1
  3053                           
  3054  0021                     ??___bmul:	
  3055                           ; 0 bytes @ 0x1
  3056                           
  3057  0021                     CC2500_WriteByte@loop_a:	
  3058                           ; 0 bytes @ 0x1
  3059                           
  3060  0021                     CC2500_ReadByte@loop_b:	
  3061                           ; 1 bytes @ 0x1
  3062                           
  3063  0021                     DelayOffPointSelect@sw:	
  3064                           ; 1 bytes @ 0x1
  3065                           
  3066  0021                     DimmerLightsPointSelect@lights:	
  3067                           ; 1 bytes @ 0x1
  3068                           
  3069  0021                     getAll_DimmerLights_AdjGO@adjgo:	
  3070                           ; 1 bytes @ 0x1
  3071                           
  3072  0021                     getDimmerLights_Line@line:	
  3073                           ; 1 bytes @ 0x1
  3074                           
  3075  0021                     LedPointSelect@led:	
  3076                           ; 1 bytes @ 0x1
  3077                           
  3078  0021                     Flash_Memory_Read@i:	
  3079                           ; 1 bytes @ 0x1
  3080                           
  3081  0021                     Flash_Memory_Write@i:	
  3082                           ; 1 bytes @ 0x1
  3083                           
  3084  0021                     setMemory_Modify@command:	
  3085                           ; 1 bytes @ 0x1
  3086                           
  3087  0021                     setMemory_LoopSave@command:	
  3088                           ; 1 bytes @ 0x1
  3089                           
  3090  0021                     setLoad_AH_AL_Restore@i:	
  3091                           ; 1 bytes @ 0x1
  3092                           
  3093  0021                     setRF_Learn@command:	
  3094                           ; 1 bytes @ 0x1
  3095                           
  3096  0021                     getRF_KeyStatus@key:	
  3097                           ; 1 bytes @ 0x1
  3098                           
  3099  0021                     SwPointSelect@sw:	
  3100                           ; 1 bytes @ 0x1
  3101                           
  3102  0021                     _getSw_KeyStatus$6329:	
  3103                           ; 1 bytes @ 0x1
  3104                           
  3105  0021                     getMain_Lights_Count@status3:	
  3106                           ; 1 bytes @ 0x1
  3107                           
  3108  0021                     _getMain_All_Error_Status$7075:	
  3109                           ; 1 bytes @ 0x1
  3110                           
  3111                           
  3112                           ; 2 bytes @ 0x1
  3113  0021                     	ds	1
  3114  0022                     ??_CC2500_WriteCommand:	
  3115  0022                     ??_CC2500_ReadStatus:	
  3116                           ; 0 bytes @ 0x2
  3117                           
  3118  0022                     ??_DelayTime_1us:	
  3119                           ; 0 bytes @ 0x2
  3120                           
  3121  0022                     ?_CC2500_WriteREG:	
  3122                           ; 0 bytes @ 0x2
  3123                           
  3124  0022                     ??_DlyOff_Initialization:	
  3125                           ; 0 bytes @ 0x2
  3126                           
  3127  0022                     ??_getDimmerLights_Status:	
  3128                           ; 0 bytes @ 0x2
  3129                           
  3130  0022                     ??_setDimmerLights_Initialization:	
  3131                           ; 0 bytes @ 0x2
  3132                           
  3133  0022                     ?_setDimmerLights_Trigger:	
  3134                           ; 0 bytes @ 0x2
  3135                           
  3136  0022                     ?_setDimmerLights_TriggerAdj:	
  3137                           ; 0 bytes @ 0x2
  3138                           
  3139  0022                     ?_setLED:	
  3140                           ; 0 bytes @ 0x2
  3141                           
  3142  0022                     ??_setLED_Main:	
  3143                           ; 0 bytes @ 0x2
  3144                           
  3145  0022                     ??_getBuz_GO:	
  3146                           ; 0 bytes @ 0x2
  3147                           
  3148  0022                     ??_Load_Initialization:	
  3149                           ; 0 bytes @ 0x2
  3150                           
  3151  0022                     CC2500_WriteREG@value:	
  3152                           ; 0 bytes @ 0x2
  3153                           
  3154  0022                     DlyOff_Initialization@sw:	
  3155                           ; 1 bytes @ 0x2
  3156                           
  3157  0022                     getDimmerLights_Status@lights:	
  3158                           ; 1 bytes @ 0x2
  3159                           
  3160  0022                     _getAll_DimmerLights_AdjGO$2562:	
  3161                           ; 1 bytes @ 0x2
  3162                           
  3163  0022                     setDimmerLights_Trigger@command:	
  3164                           ; 1 bytes @ 0x2
  3165                           
  3166  0022                     setDimmerLights_TriggerAdj@command:	
  3167                           ; 1 bytes @ 0x2
  3168                           
  3169  0022                     setLED@command:	
  3170                           ; 1 bytes @ 0x2
  3171                           
  3172  0022                     Flash_Memory_Read@address:	
  3173                           ; 1 bytes @ 0x2
  3174                           
  3175  0022                     setMemory_Data@address:	
  3176                           ; 1 bytes @ 0x2
  3177                           
  3178  0022                     _getRF_KeyStatus$5256:	
  3179                           ; 1 bytes @ 0x2
  3180                           
  3181  0022                     _getSw_KeyStatus$6330:	
  3182                           ; 1 bytes @ 0x2
  3183                           
  3184  0022                     getMain_Lights_Count@status1:	
  3185                           ; 1 bytes @ 0x2
  3186                           
  3187  0022                     getMain_LoadOK@ok:	
  3188                           ; 1 bytes @ 0x2
  3189                           
  3190  0022                     ___bmul@product:	
  3191                           ; 1 bytes @ 0x2
  3192                           
  3193  0022                     DelayTime_1us@i:	
  3194                           ; 1 bytes @ 0x2
  3195                           
  3196  0022                     ___awdiv@dividend:	
  3197                           ; 2 bytes @ 0x2
  3198                           
  3199                           
  3200                           ; 2 bytes @ 0x2
  3201  0022                     	ds	1
  3202  0023                     ??_CC2500_WriteREG:	
  3203  0023                     ??_setDimmerLights_Trigger:	
  3204                           ; 0 bytes @ 0x3
  3205                           
  3206  0023                     ??_setDimmerLights_TriggerAdj:	
  3207                           ; 0 bytes @ 0x3
  3208                           
  3209  0023                     ??_setLED:	
  3210                           ; 0 bytes @ 0x3
  3211                           
  3212  0023                     ??_DelayOff_Initialization:	
  3213                           ; 0 bytes @ 0x3
  3214                           
  3215  0023                     ??_getAD:	
  3216                           ; 0 bytes @ 0x3
  3217                           
  3218  0023                     CC2500_WriteCommand@command:	
  3219                           ; 0 bytes @ 0x3
  3220                           
  3221  0023                     CC2500_ReadStatus@status_addr:	
  3222                           ; 1 bytes @ 0x3
  3223                           
  3224  0023                     setDimmerLights_Initialization@lights:	
  3225                           ; 1 bytes @ 0x3
  3226                           
  3227  0023                     getDimmerLights_Status@status:	
  3228                           ; 1 bytes @ 0x3
  3229                           
  3230  0023                     setLED@led:	
  3231                           ; 1 bytes @ 0x3
  3232                           
  3233  0023                     getAD@adcon0:	
  3234                           ; 1 bytes @ 0x3
  3235                           
  3236  0023                     Flash_Memory_Read@ret:	
  3237                           ; 1 bytes @ 0x3
  3238                           
  3239  0023                     setRF_DimmerLights@status:	
  3240                           ; 1 bytes @ 0x3
  3241                           
  3242  0023                     getSw_KeyStatus@status:	
  3243                           ; 1 bytes @ 0x3
  3244                           
  3245  0023                     getMain_Lights_Count@status2:	
  3246                           ; 1 bytes @ 0x3
  3247                           
  3248  0023                     ___bmul@multiplier:	
  3249                           ; 1 bytes @ 0x3
  3250                           
  3251  0023                     ___ftpack@exp:	
  3252                           ; 1 bytes @ 0x3
  3253                           
  3254  0023                     _getMain_All_Error_Status$7076:	
  3255                           ; 1 bytes @ 0x3
  3256                           
  3257                           
  3258                           ; 2 bytes @ 0x3
  3259  0023                     	ds	1
  3260  0024                     ??_CC2500_ClearTXFIFO:	
  3261  0024                     ??_CC2500_ClearRXFIFO:	
  3262                           ; 0 bytes @ 0x4
  3263                           
  3264  0024                     ??_CC2500_SIDLEMode:	
  3265                           ; 0 bytes @ 0x4
  3266                           
  3267  0024                     ??_DelayTimejudge:	
  3268                           ; 0 bytes @ 0x4
  3269                           
  3270  0024                     ??_getMain_LightsStatus:	
  3271                           ; 0 bytes @ 0x4
  3272                           
  3273  0024                     ??_setLED_Initialization:	
  3274                           ; 0 bytes @ 0x4
  3275                           
  3276  0024                     ??_Flash_Memory_Modify:	
  3277                           ; 0 bytes @ 0x4
  3278                           
  3279  0024                     ??_setSw_Initialization:	
  3280                           ; 0 bytes @ 0x4
  3281                           
  3282  0024                     ??_CC2500_TxData:	
  3283                           ; 0 bytes @ 0x4
  3284                           
  3285  0024                     ??_CC2500_RxData:	
  3286                           ; 0 bytes @ 0x4
  3287                           
  3288  0024                     ??_DimmerLights_Initialization:	
  3289                           ; 0 bytes @ 0x4
  3290                           
  3291  0024                     ??_getLoad_AD:	
  3292                           ; 0 bytes @ 0x4
  3293                           
  3294  0024                     ??_getTemp_AD:	
  3295                           ; 0 bytes @ 0x4
  3296                           
  3297  0024                     ??___awdiv:	
  3298                           ; 0 bytes @ 0x4
  3299                           
  3300  0024                     CC2500_WriteREG@w_addr:	
  3301                           ; 0 bytes @ 0x4
  3302                           
  3303  0024                     setDimmerLights_Trigger@lights:	
  3304                           ; 1 bytes @ 0x4
  3305                           
  3306  0024                     setDimmerLights_TriggerAdj@lights:	
  3307                           ; 1 bytes @ 0x4
  3308                           
  3309  0024                     setLED_Initialization@led:	
  3310                           ; 1 bytes @ 0x4
  3311                           
  3312  0024                     setLED_Main@led:	
  3313                           ; 1 bytes @ 0x4
  3314                           
  3315  0024                     setRF_DimmerLights@lights:	
  3316                           ; 1 bytes @ 0x4
  3317                           
  3318  0024                     setSw_Initialization@sw:	
  3319                           ; 1 bytes @ 0x4
  3320                           
  3321  0024                     getSw_KeyStatus@sw:	
  3322                           ; 1 bytes @ 0x4
  3323                           
  3324  0024                     ___ftpack@sign:	
  3325                           ; 1 bytes @ 0x4
  3326                           
  3327  0024                     getBuz_GO@i:	
  3328                           ; 1 bytes @ 0x4
  3329                           
  3330  0024                     DelayTime_1us@j:	
  3331                           ; 2 bytes @ 0x4
  3332                           
  3333                           
  3334                           ; 2 bytes @ 0x4
  3335  0024                     	ds	1
  3336  0025                     ??_CC2500_InitSetREG:	
  3337  0025                     ??_CC2500_InitPATable:	
  3338                           ; 0 bytes @ 0x5
  3339                           
  3340  0025                     ??___ftpack:	
  3341                           ; 0 bytes @ 0x5
  3342                           
  3343  0025                     ??_setDimmerLights_AdjControl:	
  3344                           ; 0 bytes @ 0x5
  3345                           
  3346  0025                     ??_LED_Initialization:	
  3347                           ; 0 bytes @ 0x5
  3348                           
  3349  0025                     ??_LED_Main:	
  3350                           ; 0 bytes @ 0x5
  3351                           
  3352  0025                     ??_Switch_Initialization:	
  3353                           ; 0 bytes @ 0x5
  3354                           
  3355  0025                     CC2500_TxData@loop_e:	
  3356                           ; 0 bytes @ 0x5
  3357                           
  3358  0025                     CC2500_RxData@loop_f:	
  3359                           ; 1 bytes @ 0x5
  3360                           
  3361  0025                     Flash_Memory_Modify@i:	
  3362                           ; 1 bytes @ 0x5
  3363                           
  3364  0025                     getTemp_AD@channel:	
  3365                           ; 1 bytes @ 0x5
  3366                           
  3367  0025                     getMain_LightsStatus@count:	
  3368                           ; 1 bytes @ 0x5
  3369                           
  3370  0025                     getMain_All_Error_Status@command:	
  3371                           ; 1 bytes @ 0x5
  3372                           
  3373  0025                     ___awdiv@counter:	
  3374                           ; 1 bytes @ 0x5
  3375                           
  3376                           
  3377                           ; 1 bytes @ 0x5
  3378  0025                     	ds	1
  3379  0026                     ??_CC2500_PowerRST:	
  3380  0026                     ??_CC2500_FrequencyCabr:	
  3381                           ; 0 bytes @ 0x6
  3382                           
  3383  0026                     CC2500_InitSetREG@temp1:	
  3384                           ; 0 bytes @ 0x6
  3385                           
  3386  0026                     CC2500_InitPATable@temp:	
  3387                           ; 1 bytes @ 0x6
  3388                           
  3389  0026                     DelayTimejudge@i:	
  3390                           ; 1 bytes @ 0x6
  3391                           
  3392  0026                     setDimmerLights_AdjControl@idle:	
  3393                           ; 1 bytes @ 0x6
  3394                           
  3395  0026                     getLoad_AD@channel:	
  3396                           ; 1 bytes @ 0x6
  3397                           
  3398  0026                     getMain_All_Error_Status@status:	
  3399                           ; 1 bytes @ 0x6
  3400                           
  3401  0026                     ___awdiv@sign:	
  3402                           ; 1 bytes @ 0x6
  3403                           
  3404  0026                     getMain_LightsStatus@i:	
  3405                           ; 1 bytes @ 0x6
  3406                           
  3407                           
  3408                           ; 2 bytes @ 0x6
  3409  0026                     	ds	1
  3410  0027                     ??_setTemp_Main:	
  3411  0027                     CC2500_InitSetREG@temp2:	
  3412                           ; 0 bytes @ 0x7
  3413                           
  3414  0027                     CC2500_InitPATable@loop_d:	
  3415                           ; 1 bytes @ 0x7
  3416                           
  3417  0027                     DelayTimejudge@j:	
  3418                           ; 1 bytes @ 0x7
  3419                           
  3420  0027                     _setDimmerLights_AdjControl$2582:	
  3421                           ; 1 bytes @ 0x7
  3422                           
  3423  0027                     getLoad_AD@k:	
  3424                           ; 1 bytes @ 0x7
  3425                           
  3426  0027                     ___awdiv@quotient:	
  3427                           ; 1 bytes @ 0x7
  3428                           
  3429                           
  3430                           ; 2 bytes @ 0x7
  3431  0027                     	ds	1
  3432  0028                     ?___awtoft:	
  3433  0028                     CC2500_InitSetREG@loop_c:	
  3434                           ; 3 bytes @ 0x8
  3435                           
  3436  0028                     DelayTimejudge@k:	
  3437                           ; 1 bytes @ 0x8
  3438                           
  3439  0028                     setDimmerLights_AdjControl@sw:	
  3440                           ; 1 bytes @ 0x8
  3441                           
  3442  0028                     getLoad_AD@j:	
  3443                           ; 1 bytes @ 0x8
  3444                           
  3445  0028                     getMain_LightsStatus@status:	
  3446                           ; 1 bytes @ 0x8
  3447                           
  3448  0028                     ___awtoft@c:	
  3449                           ; 1 bytes @ 0x8
  3450                           
  3451                           
  3452                           ; 2 bytes @ 0x8
  3453  0028                     	ds	1
  3454  0029                     ?_setBuz:	
  3455  0029                     ??_CC2500_PowerOnInitial:	
  3456                           ; 0 bytes @ 0x9
  3457                           
  3458  0029                     ??_Flash_Memory_Main:	
  3459                           ; 0 bytes @ 0x9
  3460                           
  3461  0029                     ??_Load_Main:	
  3462                           ; 0 bytes @ 0x9
  3463                           
  3464  0029                     ??_Temp_Main:	
  3465                           ; 0 bytes @ 0x9
  3466                           
  3467  0029                     DelayTimejudge@value:	
  3468                           ; 0 bytes @ 0x9
  3469                           
  3470  0029                     getLoad_AD@i:	
  3471                           ; 1 bytes @ 0x9
  3472                           
  3473  0029                     setBuz@time:	
  3474                           ; 1 bytes @ 0x9
  3475                           
  3476                           
  3477                           ; 2 bytes @ 0x9
  3478  0029                     	ds	1
  3479  002A                     ?_setDelayOff_GO:	
  3480  002A                     setDelayOff_GO@command:	
  3481                           ; 0 bytes @ 0xA
  3482                           
  3483                           
  3484                           ; 1 bytes @ 0xA
  3485  002A                     	ds	1
  3486  002B                     ??_setBuz:	
  3487  002B                     ??___awtoft:	
  3488                           ; 0 bytes @ 0xB
  3489                           
  3490  002B                     setDelayOff_GO@value:	
  3491                           ; 0 bytes @ 0xB
  3492                           
  3493  002B                     Load_Main@j:	
  3494                           ; 1 bytes @ 0xB
  3495                           
  3496                           
  3497                           ; 1 bytes @ 0xB
  3498  002B                     	ds	1
  3499  002C                     ??_setDelayOff_GO:	
  3500  002C                     setBuz@count:	
  3501                           ; 0 bytes @ 0xC
  3502                           
  3503  002C                     Load_Main@adjgo:	
  3504                           ; 1 bytes @ 0xC
  3505                           
  3506                           
  3507                           ; 1 bytes @ 0xC
  3508  002C                     	ds	1
  3509  002D                     ??_setDimmerLights_SwOn:	
  3510  002D                     ??_setLog_Code:	
  3511                           ; 0 bytes @ 0xD
  3512                           
  3513  002D                     ??_my_MainTimer:	
  3514                           ; 0 bytes @ 0xD
  3515                           
  3516  002D                     _Load_Main$3852:	
  3517                           ; 0 bytes @ 0xD
  3518                           
  3519  002D                     ___awtoft@sign:	
  3520                           ; 1 bytes @ 0xD
  3521                           
  3522                           
  3523                           ; 1 bytes @ 0xD
  3524  002D                     	ds	1
  3525  002E                     ?___ftdiv:	
  3526  002E                     ?___ftmul:	
  3527                           ; 3 bytes @ 0xE
  3528                           
  3529  002E                     setDelayOff_GO@sw:	
  3530                           ; 3 bytes @ 0xE
  3531                           
  3532  002E                     setDimmerLights_SwOn@idle:	
  3533                           ; 1 bytes @ 0xE
  3534                           
  3535  002E                     Load_Main@error:	
  3536                           ; 1 bytes @ 0xE
  3537                           
  3538  002E                     ___ftdiv@f2:	
  3539                           ; 1 bytes @ 0xE
  3540                           
  3541  002E                     ___ftmul@f1:	
  3542                           ; 3 bytes @ 0xE
  3543                           
  3544                           
  3545                           ; 3 bytes @ 0xE
  3546  002E                     	ds	1
  3547  002F                     ??_setDimmerLights_SwOff:	
  3548  002F                     setDimmerLights_SwOn@sw:	
  3549                           ; 0 bytes @ 0xF
  3550                           
  3551  002F                     setDimmerLights_SwOff@command:	
  3552                           ; 1 bytes @ 0xF
  3553                           
  3554  002F                     Load_Main@i:	
  3555                           ; 1 bytes @ 0xF
  3556                           
  3557                           
  3558                           ; 1 bytes @ 0xF
  3559  002F                     	ds	1
  3560  0030                     setDimmerLights_SwOff@sw:	
  3561                           
  3562                           ; 1 bytes @ 0x10
  3563  0030                     	ds	1
  3564  0031                     ??_DlyOff_Main:	
  3565  0031                     ??_setRFSW_Control:	
  3566                           ; 0 bytes @ 0x11
  3567                           
  3568  0031                     ??_setSw_Main:	
  3569                           ; 0 bytes @ 0x11
  3570                           
  3571  0031                     ??_setDimmerLights_ErrorClose:	
  3572                           ; 0 bytes @ 0x11
  3573                           
  3574  0031                     ___ftdiv@f1:	
  3575                           ; 0 bytes @ 0x11
  3576                           
  3577  0031                     ___ftmul@f2:	
  3578                           ; 3 bytes @ 0x11
  3579                           
  3580                           
  3581                           ; 3 bytes @ 0x11
  3582  0031                     	ds	1
  3583  0032                     setDimmerLights_ErrorClose@count:	
  3584  0032                     setRFSW_Control@status:	
  3585                           ; 1 bytes @ 0x12
  3586                           
  3587                           
  3588                           ; 1 bytes @ 0x12
  3589  0032                     	ds	1
  3590  0033                     DlyOff_Main@sw:	
  3591  0033                     setDimmerLights_ErrorClose@lights:	
  3592                           ; 1 bytes @ 0x13
  3593                           
  3594  0033                     setRFSW_Control@sw:	
  3595                           ; 1 bytes @ 0x13
  3596                           
  3597  0033                     setSw_Main@sw:	
  3598                           ; 1 bytes @ 0x13
  3599                           
  3600                           
  3601                           ; 1 bytes @ 0x13
  3602  0033                     	ds	1
  3603  0034                     ??_DelayOff_Main:	
  3604  0034                     ??___ftdiv:	
  3605                           ; 0 bytes @ 0x14
  3606                           
  3607  0034                     ??___ftmul:	
  3608                           ; 0 bytes @ 0x14
  3609                           
  3610  0034                     setDimmerLights_ErrorClose@i:	
  3611                           ; 0 bytes @ 0x14
  3612                           
  3613                           
  3614                           ; 2 bytes @ 0x14
  3615  0034                     	ds	2
  3616  0036                     ??_setMain_Exception:	
  3617                           
  3618                           ; 0 bytes @ 0x16
  3619  0036                     	ds	2
  3620  0038                     setMain_Exception@buz:	
  3621  0038                     ___ftdiv@cntr:	
  3622                           ; 1 bytes @ 0x18
  3623                           
  3624  0038                     ___ftmul@exp:	
  3625                           ; 1 bytes @ 0x18
  3626                           
  3627                           
  3628                           ; 1 bytes @ 0x18
  3629  0038                     	ds	1
  3630  0039                     _setMain_Exception$7064:	
  3631  0039                     ___ftdiv@f3:	
  3632                           ; 2 bytes @ 0x19
  3633                           
  3634  0039                     ___ftmul@f3_as_product:	
  3635                           ; 3 bytes @ 0x19
  3636                           
  3637                           
  3638                           ; 3 bytes @ 0x19
  3639  0039                     	ds	2
  3640  003B                     setMain_Exception@status:	
  3641                           
  3642                           ; 1 bytes @ 0x1B
  3643  003B                     	ds	1
  3644  003C                     setMain_Exception@command:	
  3645  003C                     ___ftdiv@exp:	
  3646                           ; 1 bytes @ 0x1C
  3647                           
  3648  003C                     ___ftmul@cntr:	
  3649                           ; 1 bytes @ 0x1C
  3650                           
  3651                           
  3652                           ; 1 bytes @ 0x1C
  3653  003C                     	ds	1
  3654  003D                     ??_Switch_Main:	
  3655  003D                     ___ftdiv@sign:	
  3656                           ; 0 bytes @ 0x1D
  3657                           
  3658  003D                     ___ftmul@sign:	
  3659                           ; 1 bytes @ 0x1D
  3660                           
  3661                           
  3662                           ; 1 bytes @ 0x1D
  3663  003D                     	ds	1
  3664  003E                     ?___ftneg:	
  3665  003E                     Switch_Main@error:	
  3666                           ; 3 bytes @ 0x1E
  3667                           
  3668  003E                     ___ftneg@f1:	
  3669                           ; 1 bytes @ 0x1E
  3670                           
  3671                           
  3672                           ; 3 bytes @ 0x1E
  3673  003E                     	ds	3
  3674  0041                     ??___ftneg:	
  3675  0041                     ?___ftadd:	
  3676                           ; 0 bytes @ 0x21
  3677                           
  3678  0041                     ___ftadd@f1:	
  3679                           ; 3 bytes @ 0x21
  3680                           
  3681                           
  3682                           ; 3 bytes @ 0x21
  3683  0041                     	ds	3
  3684  0044                     ___ftadd@f2:	
  3685                           
  3686                           ; 3 bytes @ 0x24
  3687  0044                     	ds	3
  3688  0047                     ??___ftadd:	
  3689                           
  3690                           ; 0 bytes @ 0x27
  3691  0047                     	ds	4
  3692  004B                     ___ftadd@sign:	
  3693                           
  3694                           ; 1 bytes @ 0x2B
  3695  004B                     	ds	1
  3696  004C                     ___ftadd@exp2:	
  3697                           
  3698                           ; 1 bytes @ 0x2C
  3699  004C                     	ds	1
  3700  004D                     ___ftadd@exp1:	
  3701                           
  3702                           ; 1 bytes @ 0x2D
  3703  004D                     	ds	1
  3704  004E                     ?___fttol:	
  3705  004E                     ___fttol@f1:	
  3706                           ; 4 bytes @ 0x2E
  3707                           
  3708                           
  3709                           ; 3 bytes @ 0x2E
  3710  004E                     	ds	4
  3711  0052                     ??___fttol:	
  3712                           
  3713                           ; 0 bytes @ 0x32
  3714  0052                     	ds	4
  3715  0056                     ___fttol@sign1:	
  3716                           
  3717                           ; 1 bytes @ 0x36
  3718  0056                     	ds	1
  3719  0057                     ___fttol@lval:	
  3720                           
  3721                           ; 4 bytes @ 0x37
  3722  0057                     	ds	4
  3723  005B                     ___fttol@exp1:	
  3724                           
  3725                           ; 1 bytes @ 0x3B
  3726  005B                     	ds	1
  3727  005C                     ??_setPercentValue:	
  3728  005C                     ??_getPercentValue:	
  3729                           ; 0 bytes @ 0x3C
  3730                           
  3731                           
  3732                           ; 0 bytes @ 0x3C
  3733  005C                     	ds	2
  3734  005E                     getPercentValue@value:	
  3735  005E                     setPercentValue@value:	
  3736                           ; 1 bytes @ 0x3E
  3737                           
  3738                           
  3739                           ; 1 bytes @ 0x3E
  3740  005E                     	ds	1
  3741  005F                     getPercentValue@i:	
  3742  005F                     setPercentValue@i:	
  3743                           ; 3 bytes @ 0x3F
  3744                           
  3745                           
  3746                           ; 3 bytes @ 0x3F
  3747  005F                     	ds	3
  3748  0062                     ?_setDimmerLights:	
  3749  0062                     ?_setDimmerLights_Adj:	
  3750                           ; 0 bytes @ 0x42
  3751                           
  3752  0062                     ??_setDimmerLights_AdjRF:	
  3753                           ; 0 bytes @ 0x42
  3754                           
  3755  0062                     ??_Flash_Memory_Initialization:	
  3756                           ; 0 bytes @ 0x42
  3757                           
  3758  0062                     setDimmerLights@status:	
  3759                           ; 0 bytes @ 0x42
  3760                           
  3761  0062                     setDimmerLights_Adj@status:	
  3762                           ; 1 bytes @ 0x42
  3763                           
  3764                           
  3765                           ; 1 bytes @ 0x42
  3766  0062                     	ds	1
  3767  0063                     ??_setDimmerLights:	
  3768  0063                     ??_setDimmerLights_Adj:	
  3769                           ; 0 bytes @ 0x43
  3770                           
  3771  0063                     setDimmerLights_AdjRF@lights:	
  3772                           ; 0 bytes @ 0x43
  3773                           
  3774  0063                     Flash_Memory_Initialization@i:	
  3775                           ; 1 bytes @ 0x43
  3776                           
  3777                           
  3778                           ; 1 bytes @ 0x43
  3779  0063                     	ds	1
  3780  0064                     ??_setRF_DimmerValue:	
  3781                           
  3782                           ; 0 bytes @ 0x44
  3783  0064                     	ds	1
  3784  0065                     setDimmerLights@lights:	
  3785  0065                     setDimmerLights_Adj@lights:	
  3786                           ; 1 bytes @ 0x45
  3787                           
  3788                           
  3789                           ; 1 bytes @ 0x45
  3790  0065                     	ds	1
  3791  0066                     ??_setDimmerLights_Main:	
  3792  0066                     setDimmerLights_Main@lights:	
  3793                           ; 0 bytes @ 0x46
  3794                           
  3795  0066                     setRF_DimmerValue@lights:	
  3796                           ; 1 bytes @ 0x46
  3797                           
  3798                           
  3799                           ; 1 bytes @ 0x46
  3800  0066                     	ds	1
  3801  0067                     ??_setRFSW_AdjControl:	
  3802  0067                     ??_DimmerLights_Main:	
  3803                           ; 0 bytes @ 0x47
  3804                           
  3805                           
  3806                           ; 0 bytes @ 0x47
  3807  0067                     	ds	2
  3808  0069                     setRFSW_AdjControl@status:	
  3809  0069                     _DimmerLights_Main$2499:	
  3810                           ; 1 bytes @ 0x49
  3811                           
  3812                           
  3813                           ; 2 bytes @ 0x49
  3814  0069                     	ds	1
  3815  006A                     setRFSW_AdjControl@sw:	
  3816                           
  3817                           ; 1 bytes @ 0x4A
  3818  006A                     	ds	1
  3819  006B                     ??_getRxData:	
  3820  006B                     ??_setControl_Lights_Table:	
  3821                           ; 0 bytes @ 0x4B
  3822                           
  3823                           
  3824                           ; 0 bytes @ 0x4B
  3825  006B                     	ds	1
  3826  006C                     getRxData@error:	
  3827                           
  3828                           ; 1 bytes @ 0x4C
  3829  006C                     	ds	1
  3830  006D                     ??_setRF_Main:	
  3831                           
  3832                           ; 0 bytes @ 0x4D
  3833  006D                     	ds	1
  3834  006E                     ??_RF_Main:	
  3835  006E                     ??_main:	
  3836                           ; 0 bytes @ 0x4E
  3837                           
  3838                           
  3839                           	psect	maintext
  3840  1641                     __pmaintext:	
  3841                           ; 0 bytes @ 0x4E
  3842 ;;
  3843 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3844 ;;
  3845 ;; *************** function _main *****************
  3846 ;; Defined at:
  3847 ;;		line 7 in file "../src/main_B1.c"
  3848 ;; Parameters:    Size  Location     Type
  3849 ;;  argc            2    3[BANK1 ] int 
  3850 ;;  argv            2    5[BANK1 ] PTR PTR unsigned char 
  3851 ;; Auto vars:     Size  Location     Type
  3852 ;;		None
  3853 ;; Return value:  Size  Location     Type
  3854 ;;                  2    3[BANK1 ] int 
  3855 ;; Registers used:
  3856 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3857 ;; Tracked objects:
  3858 ;;		On entry : 17F/0
  3859 ;;		On exit  : 0/0
  3860 ;;		Unchanged: 0/0
  3861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3862 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3865 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3866 ;;Total ram usage:        4 bytes
  3867 ;; Hardware stack levels required when called:   15
  3868 ;; This function calls:
  3869 ;;		_Buzzer_Initialization
  3870 ;;		_Buzzer_Main
  3871 ;;		_CC2500_PowerOnInitial
  3872 ;;		_DelayOff_Initialization
  3873 ;;		_DelayOff_Main
  3874 ;;		_DimmerLights_Initialization
  3875 ;;		_DimmerLights_Main
  3876 ;;		_Flash_Memory_Initialization
  3877 ;;		_Flash_Memory_Main
  3878 ;;		_LED_Initialization
  3879 ;;		_LED_Main
  3880 ;;		_Load_Initialization
  3881 ;;		_Load_Main
  3882 ;;		_Mcu_Initialization
  3883 ;;		_RF_Initialization
  3884 ;;		_RF_Main
  3885 ;;		_Switch_Initialization
  3886 ;;		_Switch_Main
  3887 ;;		_Temp_Initialization
  3888 ;;		_Temp_Main
  3889 ;;		_WDT_Main
  3890 ;;		_getLoad_AD
  3891 ;;		_getTemp_AD
  3892 ;;		_myMain_Initialization
  3893 ;;		_my_MainTimer
  3894 ;; This function is called by:
  3895 ;;		Startup code after reset
  3896 ;; This function uses a non-reentrant model
  3897 ;;
  3898                           
  3899                           
  3900                           ;psect for function _main
  3901  1641                     _main:	
  3902                           
  3903                           ;main_B1.c: 8: myMain_Initialization();
  3904                           
  3905                           ;incstack = 0
  3906                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3907  1641  319C  2465  3196   	fcall	_myMain_Initialization
  3908                           
  3909                           ;main_B1.c: 9: Mcu_Initialization();
  3910  1644  319C  24EC  3196   	fcall	_Mcu_Initialization
  3911                           
  3912                           ;main_B1.c: 10: Flash_Memory_Initialization();
  3913  1647  3186  261F  3196   	fcall	_Flash_Memory_Initialization
  3914                           
  3915                           ;main_B1.c: 11: LED_Initialization();
  3916  164A  319C  240B  3196   	fcall	_LED_Initialization
  3917                           
  3918                           ;main_B1.c: 12: Buzzer_Initialization();
  3919  164D  319B  234C  3196   	fcall	_Buzzer_Initialization
  3920                           
  3921                           ;main_B1.c: 14: ;;
  3922                           ;main_B1.c: 15: Temp_Initialization();
  3923  1650  319B  2355  3196   	fcall	_Temp_Initialization
  3924                           
  3925                           ;main_B1.c: 16: Load_Initialization();
  3926  1653  319B  236C  3196   	fcall	_Load_Initialization
  3927                           
  3928                           ;main_B1.c: 17: ;;
  3929                           ;main_B1.c: 18: DelayOff_Initialization();
  3930  1656  319B  238C  3196   	fcall	_DelayOff_Initialization
  3931                           
  3932                           ;main_B1.c: 20: DimmerLights_Initialization();
  3933  1659  319E  2604  3196   	fcall	_DimmerLights_Initialization
  3934                           
  3935                           ;main_B1.c: 21: ;;
  3936                           ;main_B1.c: 22: ;;
  3937                           ;main_B1.c: 23: ;;
  3938                           ;main_B1.c: 24: Switch_Initialization();
  3939  165C  319C  243B  3196   	fcall	_Switch_Initialization
  3940                           
  3941                           ;main_B1.c: 25: RF_Initialization();
  3942  165F  319B  234F  3196   	fcall	_RF_Initialization
  3943                           
  3944                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  3945  1662  319D  25AF  3196   	fcall	_CC2500_PowerOnInitial
  3946  1665                     l9739:	
  3947                           ;main_B1.c: 27: ;;
  3948                           ;main_B1.c: 29: while (1) {
  3949                           
  3950                           
  3951                           ;main_B1.c: 31: if (myMain.PowerON == 1) {
  3952  1665  0021               	movlb	1	; select bank1
  3953  1666  1C20               	btfss	_myMain^(0+128),0
  3954  1667  2E70               	goto	l9743
  3955                           
  3956                           ;main_B1.c: 37: getLoad_AD(0x05);
  3957  1668  3005               	movlw	5
  3958  1669  318C  2479  3196   	fcall	_getLoad_AD
  3959                           
  3960                           ;main_B1.c: 41: getTemp_AD(0x09);
  3961  166C  3009               	movlw	9
  3962  166D  3193  2341  3196   	fcall	_getTemp_AD
  3963  1670                     l9743:	
  3964                           
  3965                           ;main_B1.c: 56: }
  3966                           ;main_B1.c: 92: if (Timer1.Timeout == 1) {
  3967  1670  0022               	movlb	2	; select bank2
  3968  1671  1C23               	btfss	_Timer1^(0+256),0
  3969  1672  2E65               	goto	l9739
  3970                           
  3971                           ;main_B1.c: 93: Timer1.Timeout = 0;
  3972  1673  1023               	bcf	_Timer1^(0+256),0
  3973                           
  3974                           ;main_B1.c: 94: my_MainTimer();
  3975  1674  3193  2378  3196   	fcall	_my_MainTimer
  3976                           
  3977                           ;main_B1.c: 95: WDT_Main();
  3978  1677  3188  2000  3196   	fcall	_WDT_Main
  3979                           
  3980                           ;main_B1.c: 96: ;;
  3981                           ;main_B1.c: 97: ;;
  3982                           ;main_B1.c: 98: if (myMain.PowerON == 1) {
  3983  167A  0021               	movlb	1	; select bank1
  3984  167B  1C20               	btfss	_myMain^(0+128),0
  3985  167C  2E65               	goto	l9739
  3986                           
  3987                           ;main_B1.c: 99: Flash_Memory_Main();
  3988  167D  3192  229E  3196   	fcall	_Flash_Memory_Main
  3989                           
  3990                           ;main_B1.c: 101: LED_Main();
  3991  1680  319C  2417  3196   	fcall	_LED_Main
  3992                           
  3993                           ;main_B1.c: 102: Buzzer_Main();
  3994  1683  3194  24AD  3196   	fcall	_Buzzer_Main
  3995                           
  3996                           ;main_B1.c: 104: ;;
  3997                           ;main_B1.c: 105: Temp_Main();
  3998  1686  319B  2358  3196   	fcall	_Temp_Main
  3999                           
  4000                           ;main_B1.c: 106: Load_Main();
  4001  1689  3181  21B9  3196   	fcall	_Load_Main
  4002                           
  4003                           ;main_B1.c: 107: ;;
  4004                           ;main_B1.c: 109: ;;
  4005                           ;main_B1.c: 110: DimmerLights_Main();
  4006  168C  3192  2200  3196   	fcall	_DimmerLights_Main
  4007                           
  4008                           ;main_B1.c: 111: Switch_Main();
  4009  168F  319F  27DC  3196   	fcall	_Switch_Main
  4010                           
  4011                           ;main_B1.c: 112: ;;
  4012                           ;main_B1.c: 113: ;;
  4013                           ;main_B1.c: 115: RF_Main();
  4014  1692  319B  2352  3196   	fcall	_RF_Main
  4015                           
  4016                           ;main_B1.c: 116: DelayOff_Main();
  4017  1695  319B  2394  3196   	fcall	_DelayOff_Main
  4018                           
  4019                           ;main_B1.c: 117: ;;
  4020  1698  2E65               	goto	l9739
  4021  1699                     __end_of_main:	
  4022                           ;main_B1.c: 125: }
  4023                           ;main_B1.c: 126: }
  4024                           ;main_B1.c: 160: }
  4025                           ;main_B1.c: 161: return (0);
  4026                           ;	Return value of _main is never used
  4027                           
  4028                           
  4029                           	psect	text1
  4030  1378                     __ptext1:	
  4031 ;; *************** function _my_MainTimer *****************
  4032 ;; Defined at:
  4033 ;;		line 180 in file "../src/main_B1.c"
  4034 ;; Parameters:    Size  Location     Type
  4035 ;;		None
  4036 ;; Auto vars:     Size  Location     Type
  4037 ;;		None
  4038 ;; Return value:  Size  Location     Type
  4039 ;;		None               void
  4040 ;; Registers used:
  4041 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4042 ;; Tracked objects:
  4043 ;;		On entry : 0/0
  4044 ;;		On exit  : 0/0
  4045 ;;		Unchanged: 0/0
  4046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4051 ;;Total ram usage:        0 bytes
  4052 ;; Hardware stack levels used:    1
  4053 ;; Hardware stack levels required when called:    7
  4054 ;; This function calls:
  4055 ;;		_setBuz
  4056 ;; This function is called by:
  4057 ;;		_main
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           
  4062                           ;psect for function _my_MainTimer
  4063  1378                     _my_MainTimer:	
  4064                           
  4065                           ;main_B1.c: 182: if (myMain.PowerON == 0) {
  4066                           
  4067                           ;incstack = 0
  4068                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4069  1378  0021               	movlb	1	; select bank1
  4070  1379  1820               	btfsc	_myMain^(0+128),0
  4071  137A  2B99               	goto	l9667
  4072                           
  4073                           ;main_B1.c: 183: myMain.PowerCount++;
  4074  137B  3001               	movlw	1
  4075  137C  07A2               	addwf	(_myMain^(0+128)+2),f
  4076  137D  3000               	movlw	0
  4077  137E  3DA3               	addwfc	((_myMain+1)^(0+128)+2),f
  4078                           
  4079                           ;main_B1.c: 184: if (myMain.PowerCount == 150)
  4080  137F  3002               	movlw	2
  4081  1380  3EA0               	addlw	_myMain& (0+255)
  4082  1381  0086               	movwf	6
  4083  1382  0187               	clrf	7
  4084  1383  3F40               	moviw [0]fsr1
  4085  1384  3A96               	xorlw	150
  4086  1385  1D03               	skipz
  4087  1386  2B89               	goto	u10675
  4088  1387  3F41               	moviw [1]fsr1
  4089  1388  3A00               	xorlw	0
  4090  1389                     u10675:	
  4091  1389  1D03               	skipz
  4092  138A  0008               	return
  4093                           
  4094                           ;main_B1.c: 185: {
  4095                           ;main_B1.c: 186: myMain.PowerCount = 0;
  4096  138B  01A2               	clrf	(_myMain^(0+128)+2)
  4097  138C  01A3               	clrf	((_myMain+1)^(0+128)+2)
  4098                           
  4099                           ;main_B1.c: 187: myMain.PowerON = 1;
  4100  138D  1420               	bsf	_myMain^(0+128),0
  4101                           
  4102                           ;main_B1.c: 193: setBuz(3, 50);
  4103  138E  3032               	movlw	50
  4104  138F  0020               	movlb	0	; select bank0
  4105  1390  00A9               	movwf	setBuz@time
  4106  1391  3000               	movlw	0
  4107  1392  00AA               	movwf	setBuz@time+1
  4108  1393  3003               	movlw	3
  4109  1394  3196  2699         	fcall	_setBuz
  4110                           
  4111                           ;main_B1.c: 194: myMain.SelfTest = 1;
  4112  1396  0021               	movlb	1	; select bank1
  4113  1397  1620               	bsf	_myMain^(0+128),4
  4114                           
  4115                           ;main_B1.c: 203: }
  4116                           ;main_B1.c: 204: } else {
  4117  1398  0008               	return
  4118  1399                     l9667:	
  4119                           
  4120                           ;main_B1.c: 212: myMain.Count1++;
  4121  1399  3001               	movlw	1
  4122  139A  07A6               	addwf	(_myMain^(0+128)+6),f
  4123  139B  3000               	movlw	0
  4124  139C  3DA7               	addwfc	((_myMain+1)^(0+128)+6),f
  4125                           
  4126                           ;main_B1.c: 213: if (myMain.Count1 == 100)
  4127  139D  3006               	movlw	6
  4128  139E  3EA0               	addlw	_myMain& (0+255)
  4129  139F  0086               	movwf	6
  4130  13A0  0187               	clrf	7
  4131  13A1  3F40               	moviw [0]fsr1
  4132  13A2  3A64               	xorlw	100
  4133  13A3  1D03               	skipz
  4134  13A4  2BA7               	goto	u10685
  4135  13A5  3F41               	moviw [1]fsr1
  4136  13A6  3A00               	xorlw	0
  4137  13A7                     u10685:	
  4138  13A7  1D03               	skipz
  4139  13A8  0008               	return
  4140                           
  4141                           ;main_B1.c: 214: {
  4142                           ;main_B1.c: 215: myMain.Count1 = 0;
  4143  13A9  01A6               	clrf	(_myMain^(0+128)+6)
  4144  13AA  01A7               	clrf	((_myMain+1)^(0+128)+6)
  4145                           
  4146                           ;main_B1.c: 227: if (myMain.Flag) {
  4147  13AB  1CA0               	btfss	_myMain^(0+128),1
  4148  13AC  2BAF               	goto	l2673
  4149                           
  4150                           ;main_B1.c: 228: myMain.Flag = 0;
  4151  13AD  10A0               	bcf	_myMain^(0+128),1
  4152                           
  4153                           ;main_B1.c: 237: } else {
  4154  13AE  0008               	return
  4155  13AF                     l2673:	
  4156                           
  4157                           ;main_B1.c: 238: myMain.Flag = 1;
  4158  13AF  14A0               	bsf	_myMain^(0+128),1
  4159  13B0  0008               	return
  4160  13B1                     __end_of_my_MainTimer:	
  4161                           
  4162                           	psect	text2
  4163  1C65                     __ptext2:	
  4164 ;; *************** function _myMain_Initialization *****************
  4165 ;; Defined at:
  4166 ;;		line 167 in file "../src/main_B1.c"
  4167 ;; Parameters:    Size  Location     Type
  4168 ;;		None
  4169 ;; Auto vars:     Size  Location     Type
  4170 ;;		None
  4171 ;; Return value:  Size  Location     Type
  4172 ;;		None               void
  4173 ;; Registers used:
  4174 ;;		wreg, fsr1l, fsr1h
  4175 ;; Tracked objects:
  4176 ;;		On entry : 0/0
  4177 ;;		On exit  : 0/0
  4178 ;;		Unchanged: 0/0
  4179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4182 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4183 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4184 ;;Total ram usage:        1 bytes
  4185 ;; Hardware stack levels used:    1
  4186 ;; Hardware stack levels required when called:    5
  4187 ;; This function calls:
  4188 ;;		Nothing
  4189 ;; This function is called by:
  4190 ;;		_main
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           
  4195                           ;psect for function _myMain_Initialization
  4196  1C65                     _myMain_Initialization:	
  4197                           
  4198                           ;main_B1.c: 169: product = &_product;
  4199                           
  4200                           ;incstack = 0
  4201                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4202  1C65  3045               	movlw	__product& (0+255)
  4203  1C66  0020               	movlb	0	; select bank0
  4204  1C67  00A0               	movwf	??_myMain_Initialization
  4205  1C68  0820               	movf	??_myMain_Initialization,w
  4206  1C69  00EE               	movwf	_product
  4207                           
  4208                           ;main_B1.c: 170: product->Data[20] = 210;
  4209  1C6A  30D2               	movlw	210
  4210  1C6B  00A0               	movwf	??_myMain_Initialization
  4211  1C6C  086E               	movf	_product,w
  4212  1C6D  3E14               	addlw	20
  4213  1C6E  0086               	movwf	6
  4214  1C6F  3002               	movlw	2	; select bank4/5
  4215  1C70  0087               	movwf	7
  4216  1C71  0820               	movf	??_myMain_Initialization,w
  4217  1C72  0081               	movwf	1
  4218  1C73  0008               	return
  4219  1C74                     __end_of_myMain_Initialization:	
  4220                           
  4221                           	psect	text3
  4222  1341                     __ptext3:	
  4223 ;; *************** function _getTemp_AD *****************
  4224 ;; Defined at:
  4225 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4226 ;; Parameters:    Size  Location     Type
  4227 ;;  channel         1    wreg     unsigned char 
  4228 ;; Auto vars:     Size  Location     Type
  4229 ;;  channel         1    5[BANK0 ] unsigned char 
  4230 ;; Return value:  Size  Location     Type
  4231 ;;		None               void
  4232 ;; Registers used:
  4233 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4234 ;; Tracked objects:
  4235 ;;		On entry : 0/0
  4236 ;;		On exit  : 0/0
  4237 ;;		Unchanged: 0/0
  4238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4240 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4241 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4242 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4243 ;;Total ram usage:        2 bytes
  4244 ;; Hardware stack levels used:    1
  4245 ;; Hardware stack levels required when called:    7
  4246 ;; This function calls:
  4247 ;;		_getAD
  4248 ;; This function is called by:
  4249 ;;		_main
  4250 ;; This function uses a non-reentrant model
  4251 ;;
  4252                           
  4253                           
  4254                           ;psect for function _getTemp_AD
  4255  1341                     _getTemp_AD:	
  4256                           
  4257                           ;incstack = 0
  4258                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4259                           ;getTemp_AD@channel stored from wreg
  4260  1341  0020               	movlb	0	; select bank0
  4261  1342  00A5               	movwf	getTemp_AD@channel
  4262                           
  4263                           ;OverTemperature_B1.c: 33: if (Temp.ADtoGO == 1) {
  4264  1343  0021               	movlb	1	; select bank1
  4265  1344  1D56               	btfss	_Temp^(0+128),2
  4266  1345  0008               	return
  4267                           
  4268                           ;OverTemperature_B1.c: 34: Temp.GO = 1;
  4269  1346  1656               	bsf	_Temp^(0+128),4
  4270                           
  4271                           ;OverTemperature_B1.c: 35: Temp.ADRES = getAD(channel, 0xf0);
  4272  1347  30F0               	movlw	240
  4273  1348  0020               	movlb	0	; select bank0
  4274  1349  00A4               	movwf	??_getTemp_AD
  4275  134A  0824               	movf	??_getTemp_AD,w
  4276  134B  00A0               	movwf	getAD@adcon1
  4277  134C  0825               	movf	getTemp_AD@channel,w
  4278  134D  319F  2734  3193   	fcall	_getAD
  4279  1350  0020               	movlb	0	; select bank0
  4280  1351  0821               	movf	?_getAD+1,w
  4281  1352  0021               	movlb	1	; select bank1
  4282  1353  01E3               	clrf	((_Temp+1)^(0+128)+12)
  4283  1354  07E3               	addwf	((_Temp+1)^(0+128)+12),f
  4284  1355  0020               	movlb	0	; select bank0
  4285  1356  0820               	movf	?_getAD,w
  4286  1357  0021               	movlb	1	; select bank1
  4287  1358  01E2               	clrf	(_Temp^(0+128)+12)
  4288  1359  07E2               	addwf	(_Temp^(0+128)+12),f
  4289                           
  4290                           ;OverTemperature_B1.c: 36: if (Temp.ADH[0] < Temp.ADRES) {
  4291  135A  0863               	movf	((_Temp+1)^(0+128)+12),w
  4292  135B  025F               	subwf	((_Temp+1)^(0+128)+8),w
  4293  135C  1D03               	skipz
  4294  135D  2B60               	goto	u10615
  4295  135E  0862               	movf	(_Temp^(0+128)+12),w
  4296  135F  025E               	subwf	(_Temp^(0+128)+8),w
  4297  1360                     u10615:	
  4298  1360  1803               	skipnc
  4299  1361  2B69               	goto	l9623
  4300                           
  4301                           ;OverTemperature_B1.c: 37: Temp.ADH[0] = Temp.ADRES;
  4302  1362  0863               	movf	((_Temp+1)^(0+128)+12),w
  4303  1363  01DF               	clrf	((_Temp+1)^(0+128)+8)
  4304  1364  07DF               	addwf	((_Temp+1)^(0+128)+8),f
  4305  1365  0862               	movf	(_Temp^(0+128)+12),w
  4306  1366  01DE               	clrf	(_Temp^(0+128)+8)
  4307  1367  07DE               	addwf	(_Temp^(0+128)+8),f
  4308                           
  4309                           ;OverTemperature_B1.c: 38: } else if (Temp.ADH[1] < Temp.ADRES) {
  4310  1368  0008               	return
  4311  1369                     l9623:	
  4312  1369  0863               	movf	((_Temp+1)^(0+128)+12),w
  4313  136A  0261               	subwf	((_Temp+1)^(0+128)+10),w
  4314  136B  1D03               	skipz
  4315  136C  2B6F               	goto	u10625
  4316  136D  0862               	movf	(_Temp^(0+128)+12),w
  4317  136E  0260               	subwf	(_Temp^(0+128)+10),w
  4318  136F                     u10625:	
  4319  136F  1803               	skipnc
  4320  1370  0008               	return
  4321                           
  4322                           ;OverTemperature_B1.c: 39: Temp.ADH[1] = Temp.ADRES;
  4323  1371  0863               	movf	((_Temp+1)^(0+128)+12),w
  4324  1372  01E1               	clrf	((_Temp+1)^(0+128)+10)
  4325  1373  07E1               	addwf	((_Temp+1)^(0+128)+10),f
  4326  1374  0862               	movf	(_Temp^(0+128)+12),w
  4327  1375  01E0               	clrf	(_Temp^(0+128)+10)
  4328  1376  07E0               	addwf	(_Temp^(0+128)+10),f
  4329  1377  0008               	return
  4330  1378                     __end_of_getTemp_AD:	
  4331                           
  4332                           	psect	text4
  4333  0C79                     __ptext4:	
  4334 ;; *************** function _getLoad_AD *****************
  4335 ;; Defined at:
  4336 ;;		line 15 in file "../src/OverLoad_B1.c"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;  channel         1    wreg     unsigned char 
  4339 ;; Auto vars:     Size  Location     Type
  4340 ;;  channel         1    6[BANK0 ] unsigned char 
  4341 ;;  i               1    9[BANK0 ] unsigned char 
  4342 ;;  j               1    8[BANK0 ] unsigned char 
  4343 ;;  k               1    7[BANK0 ] unsigned char 
  4344 ;; Return value:  Size  Location     Type
  4345 ;;		None               void
  4346 ;; Registers used:
  4347 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4348 ;; Tracked objects:
  4349 ;;		On entry : 0/0
  4350 ;;		On exit  : 0/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4354 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4355 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4356 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4357 ;;Total ram usage:        6 bytes
  4358 ;; Hardware stack levels used:    1
  4359 ;; Hardware stack levels required when called:    7
  4360 ;; This function calls:
  4361 ;;		_getAD
  4362 ;; This function is called by:
  4363 ;;		_main
  4364 ;; This function uses a non-reentrant model
  4365 ;;
  4366                           
  4367                           
  4368                           ;psect for function _getLoad_AD
  4369  0C79                     _getLoad_AD:	
  4370                           
  4371                           ;incstack = 0
  4372                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4373                           ;getLoad_AD@channel stored from wreg
  4374  0C79  0020               	movlb	0	; select bank0
  4375  0C7A  00A6               	movwf	getLoad_AD@channel
  4376                           
  4377                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4378  0C7B  01A9               	clrf	getLoad_AD@i
  4379  0C7C  01A8               	clrf	getLoad_AD@j
  4380  0C7D  01A7               	clrf	getLoad_AD@k
  4381                           
  4382                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4383  0C7E  0022               	movlb	2	; select bank2
  4384  0C7F  1E28               	btfss	_Load^(0+256),4
  4385  0C80  0008               	return
  4386                           
  4387                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4388  0C81  30F3               	movlw	243
  4389  0C82  0020               	movlb	0	; select bank0
  4390  0C83  00A4               	movwf	??_getLoad_AD
  4391  0C84  0824               	movf	??_getLoad_AD,w
  4392  0C85  00A0               	movwf	getAD@adcon1
  4393  0C86  0826               	movf	getLoad_AD@channel,w
  4394  0C87  319F  2734  318C   	fcall	_getAD
  4395  0C8A  0020               	movlb	0	; select bank0
  4396  0C8B  0821               	movf	?_getAD+1,w
  4397  0C8C  0022               	movlb	2	; select bank2
  4398  0C8D  01CA               	clrf	((_Load+1)^(0+256)+33)
  4399  0C8E  07CA               	addwf	((_Load+1)^(0+256)+33),f
  4400  0C8F  0020               	movlb	0	; select bank0
  4401  0C90  0820               	movf	?_getAD,w
  4402  0C91  0022               	movlb	2	; select bank2
  4403  0C92  01C9               	clrf	(_Load^(0+256)+33)
  4404  0C93  07C9               	addwf	(_Load^(0+256)+33),f
  4405                           
  4406                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4407  0C94  0020               	movlb	0	; select bank0
  4408  0C95  01A9               	clrf	getLoad_AD@i
  4409  0C96  3004               	movlw	4
  4410  0C97  0229               	subwf	getLoad_AD@i,w
  4411  0C98  1803               	btfsc	3,0
  4412  0C99  2CC7               	goto	l9447
  4413  0C9A                     l9435:	
  4414                           
  4415                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4416  0C9A  3529               	lslf	getLoad_AD@i,w
  4417  0C9B  3E33               	addlw	(_Load+11)& (0+255)
  4418  0C9C  0086               	movwf	6
  4419  0C9D  3001               	movlw	1	; select bank2/3
  4420  0C9E  0087               	movwf	7
  4421  0C9F  3F40               	moviw [0]fsr1
  4422  0CA0  00A4               	movwf	??_getLoad_AD
  4423  0CA1  3F41               	moviw [1]fsr1
  4424  0CA2  00A5               	movwf	??_getLoad_AD+1
  4425  0CA3  0022               	movlb	2	; select bank2
  4426  0CA4  084A               	movf	((_Load+1)^(0+256)+33),w
  4427  0CA5  0020               	movlb	0	; select bank0
  4428  0CA6  0225               	subwf	??_getLoad_AD+1,w
  4429  0CA7  1D03               	skipz
  4430  0CA8  2CAD               	goto	u10235
  4431  0CA9  0022               	movlb	2	; select bank2
  4432  0CAA  0849               	movf	(_Load^(0+256)+33),w
  4433  0CAB  0020               	movlb	0	; select bank0
  4434  0CAC  0224               	subwf	??_getLoad_AD,w
  4435  0CAD                     u10235:	
  4436  0CAD  1803               	skipnc
  4437  0CAE  2CBF               	goto	l9443
  4438  0CAF  08A8               	movf	getLoad_AD@j,f
  4439  0CB0  1D03               	skipz
  4440  0CB1  2CBF               	goto	l9443
  4441                           
  4442                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4443  0CB2  3529               	lslf	getLoad_AD@i,w
  4444  0CB3  3E33               	addlw	(_Load+11)& (0+255)
  4445  0CB4  0086               	movwf	6
  4446  0CB5  3001               	movlw	1	; select bank2/3
  4447  0CB6  0087               	movwf	7
  4448  0CB7  0022               	movlb	2	; select bank2
  4449  0CB8  0849               	movf	(_Load^(0+256)+33),w
  4450  0CB9  3FC0               	movwi [0]fsr1
  4451  0CBA  084A               	movf	((_Load+1)^(0+256)+33),w
  4452  0CBB  3FC1               	movwi [1]fsr1
  4453                           
  4454                           ;OverLoad_B1.c: 24: j = 1;
  4455  0CBC  0020               	movlb	0	; select bank0
  4456  0CBD  01A8               	clrf	getLoad_AD@j
  4457  0CBE  0AA8               	incf	getLoad_AD@j,f
  4458  0CBF                     l9443:	
  4459  0CBF  3001               	movlw	1
  4460  0CC0  00A4               	movwf	??_getLoad_AD
  4461  0CC1  0824               	movf	??_getLoad_AD,w
  4462  0CC2  07A9               	addwf	getLoad_AD@i,f
  4463  0CC3  3004               	movlw	4
  4464  0CC4  0229               	subwf	getLoad_AD@i,w
  4465  0CC5  1C03               	skipc
  4466  0CC6  2C9A               	goto	l9435
  4467  0CC7                     l9447:	
  4468                           
  4469                           ;OverLoad_B1.c: 25: }
  4470                           ;OverLoad_B1.c: 26: }
  4471                           ;OverLoad_B1.c: 27: if (j == 0) {
  4472  0CC7  08A8               	movf	getLoad_AD@j,f
  4473  0CC8  1D03               	skipz
  4474  0CC9  0008               	return
  4475                           
  4476                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4477  0CCA  01A9               	clrf	getLoad_AD@i
  4478  0CCB                     L1:	
  4479  0CCB  3004               	movlw	4
  4480  0CCC  0229               	subwf	getLoad_AD@i,w
  4481  0CCD  1803               	btfsc	3,0
  4482  0CCE  0008               	return
  4483                           
  4484                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4485  0CCF  3529               	lslf	getLoad_AD@i,w
  4486  0CD0  3E3D               	addlw	(_Load+21)& (0+255)
  4487  0CD1  0086               	movwf	6
  4488  0CD2  3001               	movlw	1	; select bank2/3
  4489  0CD3  0087               	movwf	7
  4490  0CD4  3F40               	moviw [0]fsr1
  4491  0CD5  00A4               	movwf	??_getLoad_AD
  4492  0CD6  3F41               	moviw [1]fsr1
  4493  0CD7  00A5               	movwf	??_getLoad_AD+1
  4494  0CD8  0825               	movf	??_getLoad_AD+1,w
  4495  0CD9  0022               	movlb	2	; select bank2
  4496  0CDA  024A               	subwf	((_Load+1)^(0+256)+33),w
  4497  0CDB  1D03               	skipz
  4498  0CDC  2CE1               	goto	u10285
  4499  0CDD  0020               	movlb	0	; select bank0
  4500  0CDE  0824               	movf	??_getLoad_AD,w
  4501  0CDF  0022               	movlb	2	; select bank2
  4502  0CE0  0249               	subwf	(_Load^(0+256)+33),w
  4503  0CE1                     u10285:	
  4504  0CE1  1803               	skipnc
  4505  0CE2  2CF4               	goto	l9463
  4506  0CE3  0020               	movlb	0	; select bank0
  4507  0CE4  08A7               	movf	getLoad_AD@k,f
  4508  0CE5  1D03               	skipz
  4509  0CE6  2CF4               	goto	l9463
  4510                           
  4511                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4512  0CE7  3529               	lslf	getLoad_AD@i,w
  4513  0CE8  3E3D               	addlw	(_Load+21)& (0+255)
  4514  0CE9  0086               	movwf	6
  4515  0CEA  3001               	movlw	1	; select bank2/3
  4516  0CEB  0087               	movwf	7
  4517  0CEC  0022               	movlb	2	; select bank2
  4518  0CED  0849               	movf	(_Load^(0+256)+33),w
  4519  0CEE  3FC0               	movwi [0]fsr1
  4520  0CEF  084A               	movf	((_Load+1)^(0+256)+33),w
  4521  0CF0  3FC1               	movwi [1]fsr1
  4522                           
  4523                           ;OverLoad_B1.c: 31: k = 1;
  4524  0CF1  0020               	movlb	0	; select bank0
  4525  0CF2  01A7               	clrf	getLoad_AD@k
  4526  0CF3  0AA7               	incf	getLoad_AD@k,f
  4527  0CF4                     l9463:	
  4528  0CF4  3001               	movlw	1
  4529  0CF5  0020               	movlb	0	; select bank0
  4530  0CF6  00A4               	movwf	??_getLoad_AD
  4531  0CF7  0824               	movf	??_getLoad_AD,w
  4532  0CF8  07A9               	addwf	getLoad_AD@i,f
  4533  0CF9  2CCB               	goto	L1
  4534  0CFA                     __end_of_getLoad_AD:	
  4535                           
  4536                           	psect	text5
  4537  1F34                     __ptext5:	
  4538 ;; *************** function _getAD *****************
  4539 ;; Defined at:
  4540 ;;		line 454 in file "../src/MCU_B1.c"
  4541 ;; Parameters:    Size  Location     Type
  4542 ;;  adcon0          1    wreg     unsigned char 
  4543 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4546 ;; Return value:  Size  Location     Type
  4547 ;;                  2    0[BANK0 ] int 
  4548 ;; Registers used:
  4549 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4550 ;; Tracked objects:
  4551 ;;		On entry : 0/0
  4552 ;;		On exit  : 0/0
  4553 ;;		Unchanged: 0/0
  4554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4555 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4556 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4558 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4559 ;;Total ram usage:        4 bytes
  4560 ;; Hardware stack levels used:    1
  4561 ;; Hardware stack levels required when called:    6
  4562 ;; This function calls:
  4563 ;;		_Timeout_Counter
  4564 ;;		_set_TimeoutCleared
  4565 ;; This function is called by:
  4566 ;;		_getLoad_AD
  4567 ;;		_getTemp_AD
  4568 ;; This function uses a non-reentrant model
  4569 ;;
  4570                           
  4571                           
  4572                           ;psect for function _getAD
  4573  1F34                     _getAD:	
  4574                           
  4575                           ;incstack = 0
  4576                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4577                           ;getAD@adcon0 stored from wreg
  4578  1F34  0020               	movlb	0	; select bank0
  4579  1F35  00A3               	movwf	getAD@adcon0
  4580                           
  4581                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4582  1F36  0823               	movf	getAD@adcon0,w
  4583  1F37  0021               	movlb	1	; select bank1
  4584  1F38  009D               	movwf	29	;volatile
  4585                           
  4586                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4587  1F39  0020               	movlb	0	; select bank0
  4588  1F3A  0820               	movf	getAD@adcon1,w
  4589  1F3B  0021               	movlb	1	; select bank1
  4590  1F3C  009E               	movwf	30	;volatile
  4591                           
  4592                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4593  1F3D  149D               	bsf	29,1	;volatile
  4594                           
  4595                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4596  1F3E  2F42               	goto	l9113
  4597  1F3F                     l9111:	
  4598                           
  4599                           ;MCU_B1.c: 459: Timeout_Counter();
  4600  1F3F  319D  259A  319F   	fcall	_Timeout_Counter
  4601  1F42                     l9113:	
  4602  1F42  0021               	movlb	1	; select bank1
  4603  1F43  1C9D               	btfss	29,1	;volatile
  4604  1F44  2F47               	goto	l9117
  4605  1F45  1D2D               	btfss	(_myMain^(0+128)+13),2
  4606  1F46  2F3F               	goto	l9111
  4607  1F47                     l9117:	
  4608                           
  4609                           ;MCU_B1.c: 460: };
  4610                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4611  1F47  319B  2367         	fcall	_set_TimeoutCleared
  4612                           
  4613                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4614  1F49  0021               	movlb	1	; select bank1
  4615  1F4A  081C               	movf	28,w	;volatile
  4616  1F4B  0020               	movlb	0	; select bank0
  4617  1F4C  01A1               	clrf	?_getAD+1
  4618  1F4D  07A1               	addwf	?_getAD+1,f
  4619  1F4E  0021               	movlb	1	; select bank1
  4620  1F4F  081B               	movf	27,w	;volatile
  4621  1F50  0020               	movlb	0	; select bank0
  4622  1F51  01A0               	clrf	?_getAD
  4623  1F52  07A0               	addwf	?_getAD,f
  4624  1F53  0008               	return
  4625  1F54                     __end_of_getAD:	
  4626                           
  4627                           	psect	text6
  4628  0800                     __ptext6:	
  4629 ;; *************** function _WDT_Main *****************
  4630 ;; Defined at:
  4631 ;;		line 1033 in file "../src/MCU_B1.c"
  4632 ;; Parameters:    Size  Location     Type
  4633 ;;		None
  4634 ;; Auto vars:     Size  Location     Type
  4635 ;;		None
  4636 ;; Return value:  Size  Location     Type
  4637 ;;		None               void
  4638 ;; Registers used:
  4639 ;;		wreg, status,2, status,0, pclath, cstack
  4640 ;; Tracked objects:
  4641 ;;		On entry : 0/0
  4642 ;;		On exit  : 0/0
  4643 ;;		Unchanged: 0/0
  4644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4647 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4648 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4649 ;;Total ram usage:        1 bytes
  4650 ;; Hardware stack levels used:    1
  4651 ;; Hardware stack levels required when called:    6
  4652 ;; This function calls:
  4653 ;;		_WDT_Clearing
  4654 ;; This function is called by:
  4655 ;;		_main
  4656 ;; This function uses a non-reentrant model
  4657 ;;
  4658                           
  4659                           
  4660                           ;psect for function _WDT_Main
  4661  0800                     _WDT_Main:	
  4662                           
  4663                           ;MCU_B1.c: 1034: if (WDT.Enable == 1) {
  4664                           
  4665                           ;incstack = 0
  4666                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4667  0800  0021               	movlb	1	; select bank1
  4668  0801  1C48               	btfss	_WDT^(0+128),0
  4669  0802  0008               	return
  4670                           
  4671                           ;MCU_B1.c: 1035: if (WDT.Timer-- > 0) {
  4672  0803  3001               	movlw	1
  4673  0804  02C9               	subwf	(_WDT^(0+128)+1),f
  4674  0805  0849               	movf	(_WDT^(0+128)+1),w
  4675  0806  3AFF               	xorlw	255
  4676  0807  1903               	skipnz
  4677  0808  0008               	return
  4678                           
  4679                           ;MCU_B1.c: 1036: WDT.Timer = 100;
  4680  0809  3064               	movlw	100
  4681  080A  0020               	movlb	0	; select bank0
  4682  080B  00A0               	movwf	??_WDT_Main
  4683  080C  0820               	movf	??_WDT_Main,w
  4684  080D  0021               	movlb	1	; select bank1
  4685  080E  00C9               	movwf	(_WDT^(0+128)+1)
  4686                           
  4687                           ;MCU_B1.c: 1037: WDT_Clearing();
  4688  080F  3180  2002         	fcall	_WDT_Clearing
  4689  0811  0008               	return
  4690  0812                     __end_of_WDT_Main:	
  4691                           
  4692                           	psect	text7
  4693  0002                     __ptext7:	
  4694 ;; *************** function _WDT_Clearing *****************
  4695 ;; Defined at:
  4696 ;;		line 1043 in file "../src/MCU_B1.c"
  4697 ;; Parameters:    Size  Location     Type
  4698 ;;		None
  4699 ;; Auto vars:     Size  Location     Type
  4700 ;;		None
  4701 ;; Return value:  Size  Location     Type
  4702 ;;		None               void
  4703 ;; Registers used:
  4704 ;;		None
  4705 ;; Tracked objects:
  4706 ;;		On entry : 0/0
  4707 ;;		On exit  : 0/0
  4708 ;;		Unchanged: 0/0
  4709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4714 ;;Total ram usage:        0 bytes
  4715 ;; Hardware stack levels used:    1
  4716 ;; Hardware stack levels required when called:    5
  4717 ;; This function calls:
  4718 ;;		Nothing
  4719 ;; This function is called by:
  4720 ;;		_WDT_Main
  4721 ;; This function uses a non-reentrant model
  4722 ;;
  4723                           
  4724                           
  4725                           ;psect for function _WDT_Clearing
  4726  0002                     _WDT_Clearing:	
  4727                           
  4728                           ;incstack = 0
  4729                           ; Regs used in _WDT_Clearing: []
  4730  0002  0064               	clrwdt	;# 
  4731  0003  0008               	return
  4732  0004                     __end_of_WDT_Clearing:	
  4733                           
  4734                           	psect	text8
  4735  1B58                     __ptext8:	
  4736 ;; *************** function _Temp_Main *****************
  4737 ;; Defined at:
  4738 ;;		line 51 in file "../src/OverTemperature_B1.c"
  4739 ;; Parameters:    Size  Location     Type
  4740 ;;		None
  4741 ;; Auto vars:     Size  Location     Type
  4742 ;;		None
  4743 ;; Return value:  Size  Location     Type
  4744 ;;		None               void
  4745 ;; Registers used:
  4746 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/0
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4756 ;;Total ram usage:        0 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; Hardware stack levels required when called:    7
  4759 ;; This function calls:
  4760 ;;		_setTemp_Main
  4761 ;; This function is called by:
  4762 ;;		_main
  4763 ;; This function uses a non-reentrant model
  4764 ;;
  4765                           
  4766                           
  4767                           ;psect for function _Temp_Main
  4768  1B58                     _Temp_Main:	
  4769                           
  4770                           ;OverTemperature_B1.c: 53: setTemp_Main();
  4771                           
  4772                           ;incstack = 0
  4773                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4774  1B58  318E  260A         	fcall	_setTemp_Main
  4775  1B5A  0008               	return
  4776  1B5B                     __end_of_Temp_Main:	
  4777                           
  4778                           	psect	text9
  4779  0E0A                     __ptext9:	
  4780 ;; *************** function _setTemp_Main *****************
  4781 ;; Defined at:
  4782 ;;		line 58 in file "../src/OverTemperature_B1.c"
  4783 ;; Parameters:    Size  Location     Type
  4784 ;;		None
  4785 ;; Auto vars:     Size  Location     Type
  4786 ;;		None
  4787 ;; Return value:  Size  Location     Type
  4788 ;;		None               void
  4789 ;; Registers used:
  4790 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4791 ;; Tracked objects:
  4792 ;;		On entry : 0/0
  4793 ;;		On exit  : 0/0
  4794 ;;		Unchanged: 0/0
  4795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4798 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4799 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4800 ;;Total ram usage:        2 bytes
  4801 ;; Hardware stack levels used:    1
  4802 ;; Hardware stack levels required when called:    6
  4803 ;; This function calls:
  4804 ;;		_getMain_All_Error_Status
  4805 ;; This function is called by:
  4806 ;;		_Temp_Main
  4807 ;; This function uses a non-reentrant model
  4808 ;;
  4809                           
  4810                           
  4811                           ;psect for function _setTemp_Main
  4812  0E0A                     _setTemp_Main:	
  4813                           
  4814                           ;OverTemperature_B1.c: 59: if (Temp.Enable == 1) {
  4815                           
  4816                           ;incstack = 0
  4817                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4818  0E0A  0021               	movlb	1	; select bank1
  4819  0E0B  1C56               	btfss	_Temp^(0+128),0
  4820  0E0C  2E9F               	goto	l1615
  4821                           
  4822                           ;OverTemperature_B1.c: 60: if (Temp.ADtoGO == 0) {
  4823  0E0D  1956               	btfsc	_Temp^(0+128),2
  4824  0E0E  2E1E               	goto	l7365
  4825                           
  4826                           ;OverTemperature_B1.c: 61: Temp.Time++;
  4827  0E0F  3001               	movlw	1
  4828  0E10  07D7               	addwf	(_Temp^(0+128)+1),f
  4829  0E11  3000               	movlw	0
  4830  0E12  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  4831                           
  4832                           ;OverTemperature_B1.c: 62: if (Temp.Time >= 500) {
  4833  0E13  3001               	movlw	1
  4834  0E14  0258               	subwf	((_Temp+1)^(0+128)+1),w
  4835  0E15  30F4               	movlw	244
  4836  0E16  1903               	skipnz
  4837  0E17  0257               	subwf	(_Temp^(0+128)+1),w
  4838  0E18  1C03               	skipc
  4839  0E19  0008               	return
  4840                           
  4841                           ;OverTemperature_B1.c: 63: Temp.Time = 0;
  4842  0E1A  01D7               	clrf	(_Temp^(0+128)+1)
  4843  0E1B  01D8               	clrf	((_Temp+1)^(0+128)+1)
  4844                           
  4845                           ;OverTemperature_B1.c: 64: Temp.ADtoGO = 1;
  4846  0E1C  1556               	bsf	_Temp^(0+128),2
  4847                           
  4848                           ;OverTemperature_B1.c: 65: }
  4849                           ;OverTemperature_B1.c: 66: } else {
  4850  0E1D  0008               	return
  4851  0E1E                     l7365:	
  4852                           
  4853                           ;OverTemperature_B1.c: 67: if (getMain_All_Error_Status(2) == 0) {
  4854  0E1E  3002               	movlw	2
  4855  0E1F  3191  21CD  318E   	fcall	_getMain_All_Error_Status
  4856  0E22  3800               	iorlw	0
  4857  0E23  1D03               	skipz
  4858  0E24  0008               	return
  4859                           
  4860                           ;OverTemperature_B1.c: 68: Temp.Time++;
  4861  0E25  3001               	movlw	1
  4862  0E26  0021               	movlb	1	; select bank1
  4863  0E27  07D7               	addwf	(_Temp^(0+128)+1),f
  4864  0E28  3000               	movlw	0
  4865  0E29  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  4866                           
  4867                           ;OverTemperature_B1.c: 69: if (Temp.Time >= 5) {
  4868  0E2A  3000               	movlw	0
  4869  0E2B  0258               	subwf	((_Temp+1)^(0+128)+1),w
  4870  0E2C  3005               	movlw	5
  4871  0E2D  1903               	skipnz
  4872  0E2E  0257               	subwf	(_Temp^(0+128)+1),w
  4873  0E2F  1C03               	skipc
  4874  0E30  0008               	return
  4875                           
  4876                           ;OverTemperature_B1.c: 70: Temp.Time = 0;
  4877  0E31  01D7               	clrf	(_Temp^(0+128)+1)
  4878  0E32  01D8               	clrf	((_Temp+1)^(0+128)+1)
  4879                           
  4880                           ;OverTemperature_B1.c: 71: if (Temp.GO == 1) {
  4881  0E33  1E56               	btfss	_Temp^(0+128),4
  4882  0E34  0008               	return
  4883                           
  4884                           ;OverTemperature_B1.c: 72: Temp.ADtoGO = 0;
  4885  0E35  1156               	bcf	_Temp^(0+128),2
  4886                           
  4887                           ;OverTemperature_B1.c: 73: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  4888  0E36  300A               	movlw	10
  4889  0E37  3ED6               	addlw	_Temp& (0+255)
  4890  0E38  0086               	movwf	6
  4891  0E39  0187               	clrf	7
  4892  0E3A  3008               	movlw	8
  4893  0E3B  3ED6               	addlw	_Temp& (0+255)
  4894  0E3C  0084               	movwf	4
  4895  0E3D  0185               	clrf	5
  4896  0E3E  3F40               	moviw [0]fsr1
  4897  0E3F  0700               	addwf	0,w
  4898  0E40  0020               	movlb	0	; select bank0
  4899  0E41  00A7               	movwf	??_setTemp_Main
  4900  0E42  3101               	addfsr 0,1
  4901  0E43  3F41               	moviw [1]fsr1
  4902  0E44  3D00               	addwfc	0,w
  4903  0E45  00A8               	movwf	??_setTemp_Main+1
  4904  0E46  36A8               	lsrf	??_setTemp_Main+1,f
  4905  0E47  0CA7               	rrf	??_setTemp_Main,f
  4906  0E48  0827               	movf	??_setTemp_Main,w
  4907  0E49  0021               	movlb	1	; select bank1
  4908  0E4A  00DC               	movwf	(_Temp^(0+128)+6)
  4909  0E4B  0020               	movlb	0	; select bank0
  4910  0E4C  0828               	movf	??_setTemp_Main+1,w
  4911  0E4D  0021               	movlb	1	; select bank1
  4912  0E4E  00DD               	movwf	((_Temp+1)^(0+128)+6)
  4913                           
  4914                           ;OverTemperature_B1.c: 83: Temp.SafeValue = 600;
  4915  0E4F  3058               	movlw	88
  4916  0E50  00E4               	movwf	(_Temp^(0+128)+14)
  4917  0E51  3002               	movlw	2
  4918  0E52  00E5               	movwf	(_Temp^(0+128)+15)
  4919                           
  4920                           ;OverTemperature_B1.c: 84: Temp.DangerValue = 550;
  4921  0E53  3026               	movlw	38
  4922  0E54  00E6               	movwf	(_Temp^(0+128)+16)
  4923  0E55  3002               	movlw	2
  4924  0E56  00E7               	movwf	(_Temp^(0+128)+17)
  4925                           
  4926                           ;OverTemperature_B1.c: 90: if (Temp.ERROR == 1) {
  4927  0E57  1CD6               	btfss	_Temp^(0+128),1
  4928  0E58  2E6E               	goto	l7395
  4929                           
  4930                           ;OverTemperature_B1.c: 91: if (Temp.AD >= Temp.SafeValue) {
  4931  0E59  0865               	movf	((_Temp+1)^(0+128)+14),w
  4932  0E5A  025D               	subwf	((_Temp+1)^(0+128)+6),w
  4933  0E5B  1D03               	skipz
  4934  0E5C  2E5F               	goto	u6945
  4935  0E5D  0864               	movf	(_Temp^(0+128)+14),w
  4936  0E5E  025C               	subwf	(_Temp^(0+128)+6),w
  4937  0E5F                     u6945:	
  4938  0E5F  1C03               	skipc
  4939  0E60  2E83               	goto	l7405
  4940                           
  4941                           ;OverTemperature_B1.c: 92: Temp.Count++;
  4942  0E61  3001               	movlw	1
  4943  0E62  0020               	movlb	0	; select bank0
  4944  0E63  00A7               	movwf	??_setTemp_Main
  4945  0E64  0827               	movf	??_setTemp_Main,w
  4946  0E65  0021               	movlb	1	; select bank1
  4947  0E66  07D9               	addwf	(_Temp^(0+128)+3),f
  4948                           
  4949                           ;OverTemperature_B1.c: 93: if (Temp.Count >= 3) {
  4950  0E67  3003               	movlw	3
  4951  0E68  0259               	subwf	(_Temp^(0+128)+3),w
  4952  0E69  1C03               	skipc
  4953  0E6A  2E84               	goto	l7407
  4954                           
  4955                           ;OverTemperature_B1.c: 94: Temp.Count = 0;
  4956  0E6B  01D9               	clrf	(_Temp^(0+128)+3)
  4957                           
  4958                           ;OverTemperature_B1.c: 95: Temp.ERROR = 0;
  4959  0E6C  10D6               	bcf	_Temp^(0+128),1
  4960                           
  4961                           ;OverTemperature_B1.c: 96: }
  4962                           ;OverTemperature_B1.c: 97: } else {
  4963  0E6D  2E84               	goto	l7407
  4964  0E6E                     l7395:	
  4965                           ;OverTemperature_B1.c: 99: }
  4966                           ;OverTemperature_B1.c: 100: } else {
  4967                           
  4968                           ;OverTemperature_B1.c: 98: Temp.Count = 0;
  4969                           
  4970                           
  4971                           ;OverTemperature_B1.c: 101: if (Temp.AD <= Temp.DangerValue) {
  4972  0E6E  085D               	movf	((_Temp+1)^(0+128)+6),w
  4973  0E6F  0267               	subwf	((_Temp+1)^(0+128)+16),w
  4974  0E70  1D03               	skipz
  4975  0E71  2E74               	goto	u6965
  4976  0E72  085C               	movf	(_Temp^(0+128)+6),w
  4977  0E73  0266               	subwf	(_Temp^(0+128)+16),w
  4978  0E74                     u6965:	
  4979  0E74  1C03               	skipc
  4980  0E75  2E83               	goto	l7405
  4981                           
  4982                           ;OverTemperature_B1.c: 102: Temp.Count++;
  4983  0E76  3001               	movlw	1
  4984  0E77  0020               	movlb	0	; select bank0
  4985  0E78  00A7               	movwf	??_setTemp_Main
  4986  0E79  0827               	movf	??_setTemp_Main,w
  4987  0E7A  0021               	movlb	1	; select bank1
  4988  0E7B  07D9               	addwf	(_Temp^(0+128)+3),f
  4989                           
  4990                           ;OverTemperature_B1.c: 103: if (Temp.Count >= 3) {
  4991  0E7C  3003               	movlw	3
  4992  0E7D  0259               	subwf	(_Temp^(0+128)+3),w
  4993  0E7E  1C03               	skipc
  4994  0E7F  2E84               	goto	l7407
  4995                           
  4996                           ;OverTemperature_B1.c: 104: Temp.Count = 0;
  4997  0E80  01D9               	clrf	(_Temp^(0+128)+3)
  4998                           
  4999                           ;OverTemperature_B1.c: 105: Temp.ERROR = 1;
  5000  0E81  14D6               	bsf	_Temp^(0+128),1
  5001                           
  5002                           ;OverTemperature_B1.c: 106: }
  5003                           ;OverTemperature_B1.c: 107: } else {
  5004  0E82  2E84               	goto	l7407
  5005  0E83                     l7405:	
  5006                           
  5007                           ;OverTemperature_B1.c: 108: Temp.Count = 0;
  5008  0E83  01D9               	clrf	(_Temp^(0+128)+3)
  5009  0E84                     l7407:	
  5010                           
  5011                           ;OverTemperature_B1.c: 109: }
  5012                           ;OverTemperature_B1.c: 110: }
  5013                           ;OverTemperature_B1.c: 111: product->Data[24]=Temp.AD >> 8;
  5014  0E84  085D               	movf	((_Temp+1)^(0+128)+6),w
  5015  0E85  0020               	movlb	0	; select bank0
  5016  0E86  00A7               	movwf	??_setTemp_Main
  5017  0E87  086E               	movf	_product,w
  5018  0E88  3E18               	addlw	24
  5019  0E89  0086               	movwf	6
  5020  0E8A  3002               	movlw	2	; select bank4/5
  5021  0E8B  0087               	movwf	7
  5022  0E8C  0827               	movf	??_setTemp_Main,w
  5023  0E8D  0081               	movwf	1
  5024                           
  5025                           ;OverTemperature_B1.c: 112: product->Data[25]=Temp.AD;
  5026  0E8E  0021               	movlb	1	; select bank1
  5027  0E8F  085C               	movf	(_Temp^(0+128)+6),w
  5028  0E90  0020               	movlb	0	; select bank0
  5029  0E91  00A7               	movwf	??_setTemp_Main
  5030  0E92  086E               	movf	_product,w
  5031  0E93  3E19               	addlw	25
  5032  0E94  0086               	movwf	6
  5033  0E95  3002               	movlw	2	; select bank4/5
  5034  0E96  0087               	movwf	7
  5035  0E97  0827               	movf	??_setTemp_Main,w
  5036  0E98  0081               	movwf	1
  5037                           
  5038                           ;OverTemperature_B1.c: 115: Temp.ADH[0] = 0;
  5039  0E99  0021               	movlb	1	; select bank1
  5040  0E9A  01DE               	clrf	(_Temp^(0+128)+8)
  5041  0E9B  01DF               	clrf	((_Temp+1)^(0+128)+8)
  5042                           
  5043                           ;OverTemperature_B1.c: 116: Temp.ADH[1] = 0;
  5044  0E9C  01E0               	clrf	(_Temp^(0+128)+10)
  5045  0E9D  01E1               	clrf	((_Temp+1)^(0+128)+10)
  5046                           
  5047                           ;OverTemperature_B1.c: 117: }
  5048                           ;OverTemperature_B1.c: 118: }
  5049                           ;OverTemperature_B1.c: 119: }
  5050                           ;OverTemperature_B1.c: 120: }
  5051                           ;OverTemperature_B1.c: 121: } else {
  5052  0E9E  0008               	return
  5053  0E9F                     l1615:	
  5054                           
  5055                           ;OverTemperature_B1.c: 122: if (myMain.PowerON == 1) {
  5056  0E9F  1C20               	btfss	_myMain^(0+128),0
  5057  0EA0  0008               	return
  5058                           
  5059                           ;OverTemperature_B1.c: 123: Temp.Enable = 1;
  5060  0EA1  1456               	bsf	_Temp^(0+128),0
  5061  0EA2  0008               	return
  5062  0EA3                     __end_of_setTemp_Main:	
  5063                           
  5064                           	psect	text10
  5065  1B55                     __ptext10:	
  5066 ;; *************** function _Temp_Initialization *****************
  5067 ;; Defined at:
  5068 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5069 ;; Parameters:    Size  Location     Type
  5070 ;;		None
  5071 ;; Auto vars:     Size  Location     Type
  5072 ;;		None
  5073 ;; Return value:  Size  Location     Type
  5074 ;;		None               void
  5075 ;; Registers used:
  5076 ;;		status,2, status,0, pclath, cstack
  5077 ;; Tracked objects:
  5078 ;;		On entry : 0/0
  5079 ;;		On exit  : 0/0
  5080 ;;		Unchanged: 0/0
  5081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5086 ;;Total ram usage:        0 bytes
  5087 ;; Hardware stack levels used:    1
  5088 ;; Hardware stack levels required when called:    6
  5089 ;; This function calls:
  5090 ;;		_setTemp_Initialization
  5091 ;; This function is called by:
  5092 ;;		_main
  5093 ;; This function uses a non-reentrant model
  5094 ;;
  5095                           
  5096                           
  5097                           ;psect for function _Temp_Initialization
  5098  1B55                     _Temp_Initialization:	
  5099                           
  5100                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5101                           
  5102                           ;incstack = 0
  5103                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5104  1B55  319B  234B         	fcall	_setTemp_Initialization
  5105  1B57  0008               	return
  5106  1B58                     __end_of_Temp_Initialization:	
  5107                           
  5108                           	psect	text11
  5109  1B4B                     __ptext11:	
  5110 ;; *************** function _setTemp_Initialization *****************
  5111 ;; Defined at:
  5112 ;;		line 46 in file "../src/OverTemperature_B1.c"
  5113 ;; Parameters:    Size  Location     Type
  5114 ;;		None
  5115 ;; Auto vars:     Size  Location     Type
  5116 ;;		None
  5117 ;; Return value:  Size  Location     Type
  5118 ;;		None               void
  5119 ;; Registers used:
  5120 ;;		None
  5121 ;; Tracked objects:
  5122 ;;		On entry : 0/0
  5123 ;;		On exit  : 0/0
  5124 ;;		Unchanged: 0/0
  5125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5130 ;;Total ram usage:        0 bytes
  5131 ;; Hardware stack levels used:    1
  5132 ;; Hardware stack levels required when called:    5
  5133 ;; This function calls:
  5134 ;;		Nothing
  5135 ;; This function is called by:
  5136 ;;		_Temp_Initialization
  5137 ;; This function uses a non-reentrant model
  5138 ;;
  5139                           
  5140                           
  5141                           ;psect for function _setTemp_Initialization
  5142  1B4B                     _setTemp_Initialization:	
  5143                           
  5144                           ;incstack = 0
  5145                           ; Regs used in _setTemp_Initialization: []
  5146  1B4B  0008               	return
  5147  1B4C                     __end_of_setTemp_Initialization:	
  5148                           
  5149                           	psect	text12
  5150  1FDC                     __ptext12:	
  5151 ;; *************** function _Switch_Main *****************
  5152 ;; Defined at:
  5153 ;;		line 72 in file "../src/Switch_B1.c"
  5154 ;; Parameters:    Size  Location     Type
  5155 ;;		None
  5156 ;; Auto vars:     Size  Location     Type
  5157 ;;  error           1   30[BANK0 ] unsigned char 
  5158 ;; Return value:  Size  Location     Type
  5159 ;;		None               void
  5160 ;; Registers used:
  5161 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5162 ;; Tracked objects:
  5163 ;;		On entry : 0/0
  5164 ;;		On exit  : 0/0
  5165 ;;		Unchanged: 0/0
  5166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5168 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5169 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5170 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5171 ;;Total ram usage:        2 bytes
  5172 ;; Hardware stack levels used:    1
  5173 ;; Hardware stack levels required when called:   11
  5174 ;; This function calls:
  5175 ;;		_TouchPower
  5176 ;;		_getMain_All_Error_Status
  5177 ;;		_setMain_Exception
  5178 ;;		_setSw_Main
  5179 ;; This function is called by:
  5180 ;;		_main
  5181 ;; This function uses a non-reentrant model
  5182 ;;
  5183                           
  5184                           
  5185                           ;psect for function _Switch_Main
  5186  1FDC                     _Switch_Main:	
  5187                           
  5188                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5189                           
  5190                           ;incstack = 0
  5191                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5192  1FDC  3000               	movlw	0
  5193  1FDD  3191  21CD  319F   	fcall	_getMain_All_Error_Status
  5194  1FE0  0020               	movlb	0	; select bank0
  5195  1FE1  00BD               	movwf	??_Switch_Main
  5196  1FE2  083D               	movf	??_Switch_Main,w
  5197  1FE3  00BE               	movwf	Switch_Main@error
  5198                           
  5199                           ;Switch_B1.c: 74: if (error != 0) {
  5200  1FE4  083E               	movf	Switch_Main@error,w
  5201  1FE5  1903               	btfsc	3,2
  5202  1FE6  2FEC               	goto	l2379
  5203                           
  5204                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5205  1FE7  0021               	movlb	1	; select bank1
  5206  1FE8  1851               	btfsc	_SwDetect^(0+128),0
  5207  1FE9  2FF5               	goto	l9647
  5208                           
  5209                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5210  1FEA  1451               	bsf	_SwDetect^(0+128),0
  5211  1FEB  2FF0               	goto	L2
  5212  1FEC                     l2379:	
  5213                           ;Switch_B1.c: 80: }
  5214                           ;Switch_B1.c: 81: } else {
  5215                           
  5216                           ;Switch_B1.c: 78: setMain_Exception(error);
  5217                           
  5218                           
  5219                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5220  1FEC  0021               	movlb	1	; select bank1
  5221  1FED  1C51               	btfss	_SwDetect^(0+128),0
  5222  1FEE  2FF5               	goto	l9647
  5223                           
  5224                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5225  1FEF  1051               	bcf	_SwDetect^(0+128),0
  5226  1FF0                     L2:	
  5227                           
  5228                           ;Switch_B1.c: 85: setMain_Exception(error);
  5229  1FF0  0020               	movlb	0	; select bank0
  5230  1FF1  083E               	movf	Switch_Main@error,w
  5231  1FF2  3188  206E  319F   	fcall	_setMain_Exception
  5232  1FF5                     l9647:	
  5233                           
  5234                           ;Switch_B1.c: 87: }
  5235                           ;Switch_B1.c: 88: }
  5236                           ;Switch_B1.c: 91: setSw_Main(1);
  5237  1FF5  3001               	movlw	1
  5238  1FF6  3180  204A  319F   	fcall	_setSw_Main
  5239                           
  5240                           ;Switch_B1.c: 95: setSw_Main(2);
  5241  1FF9  3002               	movlw	2
  5242  1FFA  3180  204A  319F   	fcall	_setSw_Main
  5243                           
  5244                           ;Switch_B1.c: 103: TouchPower();
  5245  1FFD  319D  25D9         	fcall	_TouchPower
  5246  1FFF  0008               	return
  5247  2000                     __end_of_Switch_Main:	
  5248                           
  5249                           	psect	text13
  5250  004A                     __ptext13:	
  5251 ;; *************** function _setSw_Main *****************
  5252 ;; Defined at:
  5253 ;;		line 137 in file "../src/Switch_B1.c"
  5254 ;; Parameters:    Size  Location     Type
  5255 ;;  sw              1    wreg     unsigned char 
  5256 ;; Auto vars:     Size  Location     Type
  5257 ;;  sw              1   19[BANK0 ] unsigned char 
  5258 ;; Return value:  Size  Location     Type
  5259 ;;		None               void
  5260 ;; Registers used:
  5261 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5262 ;; Tracked objects:
  5263 ;;		On entry : 0/0
  5264 ;;		On exit  : 0/0
  5265 ;;		Unchanged: 0/0
  5266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5269 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5270 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5271 ;;Total ram usage:        3 bytes
  5272 ;; Hardware stack levels used:    1
  5273 ;; Hardware stack levels required when called:    9
  5274 ;; This function calls:
  5275 ;;		_SwPointSelect
  5276 ;;		_getSw_KeyStatus
  5277 ;;		_setBuz
  5278 ;;		_setDimmerLights_AdjControl
  5279 ;;		_setDimmerLights_SwOff
  5280 ;;		_setDimmerLights_SwOn
  5281 ;;		_setRF_Learn
  5282 ;; This function is called by:
  5283 ;;		_Switch_Main
  5284 ;; This function uses a non-reentrant model
  5285 ;;
  5286                           
  5287                           
  5288                           ;psect for function _setSw_Main
  5289  004A                     _setSw_Main:	
  5290                           
  5291                           ;incstack = 0
  5292                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5293                           ;setSw_Main@sw stored from wreg
  5294  004A  0020               	movlb	0	; select bank0
  5295  004B  00B3               	movwf	setSw_Main@sw
  5296                           
  5297                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5298  004C  0833               	movf	setSw_Main@sw,w
  5299  004D  319D  2572  3180   	fcall	_SwPointSelect
  5300                           
  5301                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5302  0050  087B               	movf	_Sw,w
  5303  0051  0086               	movwf	6
  5304  0052  3001               	movlw	1	; select bank2/3
  5305  0053  0087               	movwf	7
  5306  0054  1C01               	btfss	1,0
  5307  0055  29B0               	goto	l2389
  5308                           
  5309                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5310  0056  0021               	movlb	1	; select bank1
  5311  0057  1851               	btfsc	_SwDetect^(0+128),0
  5312  0058  2874               	goto	l9285
  5313                           
  5314                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5315  0059  0A7B               	incf	_Sw,w
  5316  005A  0086               	movwf	6
  5317  005B  3001               	movlw	1	; select bank2/3
  5318  005C  0087               	movwf	7
  5319  005D  1081               	bcf	1,1
  5320                           
  5321                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5322  005E  0020               	movlb	0	; select bank0
  5323  005F  0833               	movf	setSw_Main@sw,w
  5324  0060  319E  26F5  3180   	fcall	_getSw_KeyStatus
  5325  0063  3A01               	xorlw	1
  5326  0064  3000               	movlw	0
  5327  0065  1903               	skipnz
  5328  0066  3001               	movlw	1
  5329  0067  0020               	movlb	0	; select bank0
  5330  0068  00B1               	movwf	??_setSw_Main
  5331  0069  087B               	movf	_Sw,w
  5332  006A  0086               	movwf	6
  5333  006B  3001               	movlw	1	; select bank2/3
  5334  006C  0087               	movwf	7
  5335  006D  0DB1               	rlf	??_setSw_Main,f
  5336  006E  0801               	movf	1,w
  5337  006F  0631               	xorwf	??_setSw_Main,w
  5338  0070  39FD               	andlw	-3
  5339  0071  0631               	xorwf	??_setSw_Main,w
  5340  0072  0081               	movwf	1
  5341                           
  5342                           ;Switch_B1.c: 143: } else {
  5343  0073  2889               	goto	l2391
  5344  0074                     l9285:	
  5345                           
  5346                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5347  0074  0A7B               	incf	_Sw,w
  5348  0075  0086               	movwf	6
  5349  0076  3001               	movlw	1	; select bank2/3
  5350  0077  0087               	movwf	7
  5351  0078  1881               	btfsc	1,1
  5352  0079  2889               	goto	l2391
  5353                           
  5354                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5355  007A  0A7B               	incf	_Sw,w
  5356  007B  0086               	movwf	6
  5357  007C  3001               	movlw	1	; select bank2/3
  5358  007D  0087               	movwf	7
  5359  007E  1481               	bsf	1,1
  5360                           
  5361                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5362  007F  087B               	movf	_Sw,w
  5363  0080  0086               	movwf	6
  5364  0081  3001               	movlw	1	; select bank2/3
  5365  0082  0087               	movwf	7
  5366  0083  1081               	bcf	1,1
  5367                           
  5368                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5369  0084  087B               	movf	_Sw,w
  5370  0085  0086               	movwf	6
  5371  0086  3001               	movlw	1	; select bank2/3
  5372  0087  0087               	movwf	7
  5373  0088  1501               	bsf	1,2
  5374  0089                     l2391:	
  5375                           
  5376                           ;Switch_B1.c: 148: }
  5377                           ;Switch_B1.c: 149: }
  5378                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5379  0089  087B               	movf	_Sw,w
  5380  008A  0086               	movwf	6
  5381  008B  3001               	movlw	1	; select bank2/3
  5382  008C  0087               	movwf	7
  5383  008D  1C81               	btfss	1,1
  5384  008E  2959               	goto	l9335
  5385                           
  5386                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5387  008F  087B               	movf	_Sw,w
  5388  0090  0086               	movwf	6
  5389  0091  3001               	movlw	1	; select bank2/3
  5390  0092  0087               	movwf	7
  5391  0093  1901               	btfsc	1,2
  5392  0094  28B7               	goto	l9301
  5393                           
  5394                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5395  0095  3001               	movlw	1
  5396  0096  0020               	movlb	0	; select bank0
  5397  0097  00B1               	movwf	??_setSw_Main
  5398  0098  087B               	movf	_Sw,w
  5399  0099  3E02               	addlw	2
  5400  009A  0086               	movwf	6
  5401  009B  3001               	movlw	1	; select bank2/3
  5402  009C  0087               	movwf	7
  5403  009D  0831               	movf	??_setSw_Main,w
  5404  009E  0781               	addwf	1,f
  5405                           
  5406                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5407  009F  087B               	movf	_Sw,w
  5408  00A0  3E02               	addlw	2
  5409  00A1  0086               	movwf	6
  5410  00A2  3001               	movlw	1	; select bank2/3
  5411  00A3  0087               	movwf	7
  5412  00A4  3005               	movlw	5
  5413  00A5  0201               	subwf	1,w
  5414  00A6  1C03               	skipc
  5415  00A7  0008               	return
  5416                           
  5417                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5418  00A8  087B               	movf	_Sw,w
  5419  00A9  3E02               	addlw	2
  5420  00AA  0086               	movwf	6
  5421  00AB  3001               	movlw	1	; select bank2/3
  5422  00AC  0087               	movwf	7
  5423  00AD  0181               	clrf	1
  5424                           
  5425                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5426  00AE  087B               	movf	_Sw,w
  5427  00AF  0086               	movwf	6
  5428  00B0  3001               	movlw	1	; select bank2/3
  5429  00B1  0087               	movwf	7
  5430  00B2  1501               	bsf	1,2
  5431                           
  5432                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5433  00B3  0833               	movf	setSw_Main@sw,w
  5434  00B4  3193  23B1         	fcall	_setDimmerLights_SwOn
  5435                           
  5436                           ;Switch_B1.c: 162: }
  5437                           ;Switch_B1.c: 163: } else {
  5438  00B6  0008               	return
  5439  00B7                     l9301:	
  5440                           
  5441                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5442  00B7  087B               	movf	_Sw,w
  5443  00B8  0086               	movwf	6
  5444  00B9  3001               	movlw	1	; select bank2/3
  5445  00BA  0087               	movwf	7
  5446  00BB  1981               	btfsc	1,3
  5447  00BC  28E9               	goto	l9311
  5448                           
  5449                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5450  00BD  087B               	movf	_Sw,w
  5451  00BE  3E03               	addlw	3
  5452  00BF  0086               	movwf	6
  5453  00C0  3001               	movlw	1	; select bank2/3
  5454  00C1  0087               	movwf	7
  5455  00C2  3001               	movlw	1
  5456  00C3  0781               	addwf	1,f
  5457  00C4  3141               	addfsr 1,1
  5458  00C5  1803               	skipnc
  5459  00C6  0A81               	incf	1,f
  5460                           
  5461                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5462  00C7  087B               	movf	_Sw,w
  5463  00C8  3E03               	addlw	3
  5464  00C9  0086               	movwf	6
  5465  00CA  3001               	movlw	1	; select bank2/3
  5466  00CB  0087               	movwf	7
  5467  00CC  3F40               	moviw [0]fsr1
  5468  00CD  0020               	movlb	0	; select bank0
  5469  00CE  00B1               	movwf	??_setSw_Main
  5470  00CF  3F41               	moviw [1]fsr1
  5471  00D0  00B2               	movwf	??_setSw_Main+1
  5472  00D1  3000               	movlw	0
  5473  00D2  0232               	subwf	??_setSw_Main+1,w
  5474  00D3  3096               	movlw	150
  5475  00D4  1903               	skipnz
  5476  00D5  0231               	subwf	??_setSw_Main,w
  5477  00D6  1C03               	skipc
  5478  00D7  0008               	return
  5479                           
  5480                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5481  00D8  087B               	movf	_Sw,w
  5482  00D9  3E03               	addlw	3
  5483  00DA  0086               	movwf	6
  5484  00DB  3001               	movlw	1	; select bank2/3
  5485  00DC  0087               	movwf	7
  5486  00DD  3000               	movlw	0
  5487  00DE  3FC0               	movwi [0]fsr1
  5488  00DF  3FC1               	movwi [1]fsr1
  5489                           
  5490                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5491  00E0  087B               	movf	_Sw,w
  5492  00E1  0086               	movwf	6
  5493  00E2  3001               	movlw	1	; select bank2/3
  5494  00E3  0087               	movwf	7
  5495  00E4  1581               	bsf	1,3
  5496                           
  5497                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5498  00E5  0833               	movf	setSw_Main@sw,w
  5499  00E6  3192  2269         	fcall	_setDimmerLights_AdjControl
  5500                           
  5501                           ;Switch_B1.c: 174: }
  5502                           ;Switch_B1.c: 175: } else {
  5503  00E8  0008               	return
  5504  00E9                     l9311:	
  5505                           
  5506                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5507  00E9  087B               	movf	_Sw,w
  5508  00EA  0086               	movwf	6
  5509  00EB  3001               	movlw	1	; select bank2/3
  5510  00EC  0087               	movwf	7
  5511  00ED  1A01               	btfsc	1,4
  5512  00EE  2927               	goto	l9325
  5513                           
  5514                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5515  00EF  087B               	movf	_Sw,w
  5516  00F0  3E05               	addlw	5
  5517  00F1  0086               	movwf	6
  5518  00F2  3001               	movlw	1	; select bank2/3
  5519  00F3  0087               	movwf	7
  5520  00F4  3001               	movlw	1
  5521  00F5  0781               	addwf	1,f
  5522  00F6  3141               	addfsr 1,1
  5523  00F7  1803               	skipnc
  5524  00F8  0A81               	incf	1,f
  5525                           
  5526                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5527  00F9  087B               	movf	_Sw,w
  5528  00FA  3E05               	addlw	5
  5529  00FB  0086               	movwf	6
  5530  00FC  3001               	movlw	1	; select bank2/3
  5531  00FD  0087               	movwf	7
  5532  00FE  3F40               	moviw [0]fsr1
  5533  00FF  0020               	movlb	0	; select bank0
  5534  0100  00B1               	movwf	??_setSw_Main
  5535  0101  3F41               	moviw [1]fsr1
  5536  0102  00B2               	movwf	??_setSw_Main+1
  5537  0103  3000               	movlw	0
  5538  0104  0232               	subwf	??_setSw_Main+1,w
  5539  0105  3096               	movlw	150
  5540  0106  1903               	skipnz
  5541  0107  0231               	subwf	??_setSw_Main,w
  5542  0108  1C03               	skipc
  5543  0109  0008               	return
  5544                           
  5545                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5546  010A  087B               	movf	_Sw,w
  5547  010B  3E05               	addlw	5
  5548  010C  0086               	movwf	6
  5549  010D  3001               	movlw	1	; select bank2/3
  5550  010E  0087               	movwf	7
  5551  010F  3000               	movlw	0
  5552  0110  3FC0               	movwi [0]fsr1
  5553  0111  3FC1               	movwi [1]fsr1
  5554                           
  5555                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5556  0112  087B               	movf	_Sw,w
  5557  0113  0086               	movwf	6
  5558  0114  3001               	movlw	1	; select bank2/3
  5559  0115  0087               	movwf	7
  5560  0116  1601               	bsf	1,4
  5561                           
  5562                           ;Switch_B1.c: 183: setRF_Learn(1);
  5563  0117  3001               	movlw	1
  5564  0118  319D  2586  3180   	fcall	_setRF_Learn
  5565                           
  5566                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5567  011B  0021               	movlb	1	; select bank1
  5568  011C  1EA0               	btfss	_myMain^(0+128),5
  5569  011D  0008               	return
  5570                           
  5571                           ;Switch_B1.c: 186: setBuz(2, 100);
  5572  011E  3064               	movlw	100
  5573  011F  0020               	movlb	0	; select bank0
  5574  0120  00A9               	movwf	setBuz@time
  5575  0121  3000               	movlw	0
  5576  0122  00AA               	movwf	setBuz@time+1
  5577  0123  3002               	movlw	2
  5578  0124  3196  2699         	fcall	_setBuz
  5579                           
  5580                           ;Switch_B1.c: 187: }
  5581                           ;Switch_B1.c: 189: }
  5582                           ;Switch_B1.c: 190: } else {
  5583  0126  0008               	return
  5584  0127                     l9325:	
  5585                           
  5586                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5587  0127  087B               	movf	_Sw,w
  5588  0128  0086               	movwf	6
  5589  0129  3001               	movlw	1	; select bank2/3
  5590  012A  0087               	movwf	7
  5591  012B  1A81               	btfsc	1,5
  5592  012C  0008               	return
  5593                           
  5594                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5595  012D  087B               	movf	_Sw,w
  5596  012E  3E07               	addlw	7
  5597  012F  0086               	movwf	6
  5598  0130  3001               	movlw	1	; select bank2/3
  5599  0131  0087               	movwf	7
  5600  0132  3001               	movlw	1
  5601  0133  0781               	addwf	1,f
  5602  0134  3141               	addfsr 1,1
  5603  0135  1803               	skipnc
  5604  0136  0A81               	incf	1,f
  5605                           
  5606                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5607  0137  087B               	movf	_Sw,w
  5608  0138  3E07               	addlw	7
  5609  0139  0086               	movwf	6
  5610  013A  3001               	movlw	1	; select bank2/3
  5611  013B  0087               	movwf	7
  5612  013C  3F40               	moviw [0]fsr1
  5613  013D  0020               	movlb	0	; select bank0
  5614  013E  00B1               	movwf	??_setSw_Main
  5615  013F  3F41               	moviw [1]fsr1
  5616  0140  00B2               	movwf	??_setSw_Main+1
  5617  0141  3001               	movlw	1
  5618  0142  0232               	subwf	??_setSw_Main+1,w
  5619  0143  302C               	movlw	44
  5620  0144  1903               	skipnz
  5621  0145  0231               	subwf	??_setSw_Main,w
  5622  0146  1C03               	skipc
  5623  0147  0008               	return
  5624                           
  5625                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5626  0148  087B               	movf	_Sw,w
  5627  0149  3E07               	addlw	7
  5628  014A  0086               	movwf	6
  5629  014B  3001               	movlw	1	; select bank2/3
  5630  014C  0087               	movwf	7
  5631  014D  3000               	movlw	0
  5632  014E  3FC0               	movwi [0]fsr1
  5633  014F  3FC1               	movwi [1]fsr1
  5634                           
  5635                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5636  0150  087B               	movf	_Sw,w
  5637  0151  0086               	movwf	6
  5638  0152  3001               	movlw	1	; select bank2/3
  5639  0153  0087               	movwf	7
  5640  0154  1681               	bsf	1,5
  5641                           
  5642                           ;Switch_B1.c: 198: setRF_Learn(0);
  5643  0155  3000               	movlw	0
  5644  0156  319D  2586         	fcall	_setRF_Learn
  5645                           
  5646                           ;Switch_B1.c: 201: }
  5647                           ;Switch_B1.c: 202: }
  5648                           ;Switch_B1.c: 203: }
  5649                           ;Switch_B1.c: 204: }
  5650                           ;Switch_B1.c: 205: }
  5651                           ;Switch_B1.c: 206: } else {
  5652  0158  0008               	return
  5653  0159                     l9335:	
  5654                           
  5655                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5656  0159  087B               	movf	_Sw,w
  5657  015A  0086               	movwf	6
  5658  015B  3001               	movlw	1	; select bank2/3
  5659  015C  0087               	movwf	7
  5660  015D  1D01               	btfss	1,2
  5661  015E  0008               	return
  5662                           
  5663                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5664  015F  3001               	movlw	1
  5665  0160  0020               	movlb	0	; select bank0
  5666  0161  00B1               	movwf	??_setSw_Main
  5667  0162  087B               	movf	_Sw,w
  5668  0163  3E02               	addlw	2
  5669  0164  0086               	movwf	6
  5670  0165  3001               	movlw	1	; select bank2/3
  5671  0166  0087               	movwf	7
  5672  0167  0831               	movf	??_setSw_Main,w
  5673  0168  0781               	addwf	1,f
  5674                           
  5675                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5676  0169  087B               	movf	_Sw,w
  5677  016A  3E02               	addlw	2
  5678  016B  0086               	movwf	6
  5679  016C  3001               	movlw	1	; select bank2/3
  5680  016D  0087               	movwf	7
  5681  016E  3005               	movlw	5
  5682  016F  0201               	subwf	1,w
  5683  0170  1C03               	skipc
  5684  0171  0008               	return
  5685                           
  5686                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5687  0172  087B               	movf	_Sw,w
  5688  0173  3E02               	addlw	2
  5689  0174  0086               	movwf	6
  5690  0175  3001               	movlw	1	; select bank2/3
  5691  0176  0087               	movwf	7
  5692  0177  0181               	clrf	1
  5693                           
  5694                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5695  0178  087B               	movf	_Sw,w
  5696  0179  0086               	movwf	6
  5697  017A  3001               	movlw	1	; select bank2/3
  5698  017B  0087               	movwf	7
  5699  017C  1101               	bcf	1,2
  5700                           
  5701                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5702  017D  087B               	movf	_Sw,w
  5703  017E  3E03               	addlw	3
  5704  017F  0086               	movwf	6
  5705  0180  3001               	movlw	1	; select bank2/3
  5706  0181  0087               	movwf	7
  5707  0182  3000               	movlw	0
  5708  0183  3FC0               	movwi [0]fsr1
  5709  0184  3FC1               	movwi [1]fsr1
  5710                           
  5711                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5712  0185  087B               	movf	_Sw,w
  5713  0186  0086               	movwf	6
  5714  0187  3001               	movlw	1	; select bank2/3
  5715  0188  0087               	movwf	7
  5716  0189  1181               	bcf	1,3
  5717                           
  5718                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5719  018A  087B               	movf	_Sw,w
  5720  018B  3E05               	addlw	5
  5721  018C  0086               	movwf	6
  5722  018D  3001               	movlw	1	; select bank2/3
  5723  018E  0087               	movwf	7
  5724  018F  3000               	movlw	0
  5725  0190  3FC0               	movwi [0]fsr1
  5726  0191  3FC1               	movwi [1]fsr1
  5727                           
  5728                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5729  0192  087B               	movf	_Sw,w
  5730  0193  0086               	movwf	6
  5731  0194  3001               	movlw	1	; select bank2/3
  5732  0195  0087               	movwf	7
  5733  0196  1201               	bcf	1,4
  5734                           
  5735                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5736  0197  087B               	movf	_Sw,w
  5737  0198  3E07               	addlw	7
  5738  0199  0086               	movwf	6
  5739  019A  3001               	movlw	1	; select bank2/3
  5740  019B  0087               	movwf	7
  5741  019C  3000               	movlw	0
  5742  019D  3FC0               	movwi [0]fsr1
  5743  019E  3FC1               	movwi [1]fsr1
  5744                           
  5745                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5746  019F  087B               	movf	_Sw,w
  5747  01A0  0086               	movwf	6
  5748  01A1  3001               	movlw	1	; select bank2/3
  5749  01A2  0087               	movwf	7
  5750  01A3  1281               	bcf	1,5
  5751                           
  5752                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5753  01A4  0021               	movlb	1	; select bank1
  5754  01A5  1851               	btfsc	_SwDetect^(0+128),0
  5755  01A6  29AC               	goto	l9361
  5756                           
  5757                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5758  01A7  0020               	movlb	0	; select bank0
  5759  01A8  0833               	movf	setSw_Main@sw,w
  5760  01A9  3194  246C  3180   	fcall	_setDimmerLights_SwOff
  5761  01AC                     l9361:	
  5762                           
  5763                           ;Switch_B1.c: 221: }
  5764                           ;Switch_B1.c: 224: setRF_Learn(0);
  5765  01AC  3000               	movlw	0
  5766  01AD  319D  2586         	fcall	_setRF_Learn
  5767                           
  5768                           ;Switch_B1.c: 226: }
  5769                           ;Switch_B1.c: 227: }
  5770                           ;Switch_B1.c: 228: }
  5771                           ;Switch_B1.c: 229: } else {
  5772  01AF  0008               	return
  5773  01B0                     l2389:	
  5774                           
  5775                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5776  01B0  0021               	movlb	1	; select bank1
  5777  01B1  1C20               	btfss	_myMain^(0+128),0
  5778  01B2  0008               	return
  5779                           
  5780                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5781  01B3  087B               	movf	_Sw,w
  5782  01B4  0086               	movwf	6
  5783  01B5  3001               	movlw	1	; select bank2/3
  5784  01B6  0087               	movwf	7
  5785  01B7  1401               	bsf	1,0
  5786  01B8  0008               	return
  5787  01B9                     __end_of_setSw_Main:	
  5788                           
  5789                           	psect	text14
  5790  1D86                     __ptext14:	
  5791 ;; *************** function _setRF_Learn *****************
  5792 ;; Defined at:
  5793 ;;		line 23 in file "../src/RF_Control_B1.c"
  5794 ;; Parameters:    Size  Location     Type
  5795 ;;  command         1    wreg     unsigned char 
  5796 ;; Auto vars:     Size  Location     Type
  5797 ;;  command         1    1[BANK0 ] unsigned char 
  5798 ;; Return value:  Size  Location     Type
  5799 ;;		None               void
  5800 ;; Registers used:
  5801 ;;		wreg, status,2, status,0
  5802 ;; Tracked objects:
  5803 ;;		On entry : 0/0
  5804 ;;		On exit  : 0/0
  5805 ;;		Unchanged: 0/0
  5806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5808 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5809 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5810 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5811 ;;Total ram usage:        2 bytes
  5812 ;; Hardware stack levels used:    1
  5813 ;; Hardware stack levels required when called:    5
  5814 ;; This function calls:
  5815 ;;		Nothing
  5816 ;; This function is called by:
  5817 ;;		_setSw_Main
  5818 ;; This function uses a non-reentrant model
  5819 ;;
  5820                           
  5821                           
  5822                           ;psect for function _setRF_Learn
  5823  1D86                     _setRF_Learn:	
  5824                           
  5825                           ;incstack = 0
  5826                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5827                           ;setRF_Learn@command stored from wreg
  5828  1D86  0020               	movlb	0	; select bank0
  5829  1D87  00A1               	movwf	setRF_Learn@command
  5830                           
  5831                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5832  1D88  0821               	movf	setRF_Learn@command,w
  5833  1D89  3A01               	xorlw	1
  5834  1D8A  3000               	movlw	0
  5835  1D8B  1903               	skipnz
  5836  1D8C  3001               	movlw	1
  5837  1D8D  00A0               	movwf	??_setRF_Learn
  5838  1D8E  0EA0               	swapf	??_setRF_Learn,f
  5839  1D8F  0DA0               	rlf	??_setRF_Learn,f
  5840  1D90  0DA0               	rlf	??_setRF_Learn,f
  5841  1D91  0021               	movlb	1	; select bank1
  5842  1D92  083C               	movf	_RF1^(0+128),w
  5843  1D93  0020               	movlb	0	; select bank0
  5844  1D94  0620               	xorwf	??_setRF_Learn,w
  5845  1D95  39BF               	andlw	-65
  5846  1D96  0620               	xorwf	??_setRF_Learn,w
  5847  1D97  0021               	movlb	1	; select bank1
  5848  1D98  00BC               	movwf	_RF1^(0+128)
  5849  1D99  0008               	return
  5850  1D9A                     __end_of_setRF_Learn:	
  5851                           
  5852                           	psect	text15
  5853  1269                     __ptext15:	
  5854 ;; *************** function _setDimmerLights_AdjControl *****************
  5855 ;; Defined at:
  5856 ;;		line 561 in file "../src/Dimmer_B1.c"
  5857 ;; Parameters:    Size  Location     Type
  5858 ;;  sw              1    wreg     unsigned char 
  5859 ;; Auto vars:     Size  Location     Type
  5860 ;;  sw              1    8[BANK0 ] unsigned char 
  5861 ;;  idle            1    6[BANK0 ] unsigned char 
  5862 ;; Return value:  Size  Location     Type
  5863 ;;		None               void
  5864 ;; Registers used:
  5865 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5866 ;; Tracked objects:
  5867 ;;		On entry : 0/0
  5868 ;;		On exit  : 0/0
  5869 ;;		Unchanged: 0/0
  5870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5872 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5873 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5874 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5875 ;;Total ram usage:        4 bytes
  5876 ;; Hardware stack levels used:    1
  5877 ;; Hardware stack levels required when called:    7
  5878 ;; This function calls:
  5879 ;;		_DimmerLightsPointSelect
  5880 ;;		_getAll_DimmerLights_AdjGO
  5881 ;;		_setDimmerLights_TriggerAdj
  5882 ;; This function is called by:
  5883 ;;		_setSw_Main
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           
  5888                           ;psect for function _setDimmerLights_AdjControl
  5889  1269                     _setDimmerLights_AdjControl:	
  5890                           
  5891                           ;incstack = 0
  5892                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5893                           ;setDimmerLights_AdjControl@sw stored from wreg
  5894  1269  0020               	movlb	0	; select bank0
  5895  126A  00A8               	movwf	setDimmerLights_AdjControl@sw
  5896                           
  5897                           ;Dimmer_B1.c: 562: DimmerLightsPointSelect(sw);
  5898  126B  0828               	movf	setDimmerLights_AdjControl@sw,w
  5899  126C  319C  24FE  3192   	fcall	_DimmerLightsPointSelect
  5900                           
  5901                           ;Dimmer_B1.c: 563: char idle = 0;
  5902  126F  0020               	movlb	0	; select bank0
  5903  1270  01A6               	clrf	setDimmerLights_AdjControl@idle
  5904                           
  5905                           ;Dimmer_B1.c: 565: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  5906  1271  01A7               	clrf	_setDimmerLights_AdjControl$2582
  5907  1272  319C  2484  3192   	fcall	_getAll_DimmerLights_AdjGO
  5908  1275  3A01               	xorlw	1
  5909  1276  1D03               	skipz
  5910  1277  2A7E               	goto	l8891
  5911  1278  0022               	movlb	2	; select bank2
  5912  1279  1CA0               	btfss	_Dimmer^(0+256),1
  5913  127A  2A7E               	goto	l8891
  5914  127B  0020               	movlb	0	; select bank0
  5915  127C  01A7               	clrf	_setDimmerLights_AdjControl$2582
  5916  127D  0AA7               	incf	_setDimmerLights_AdjControl$2582,f
  5917  127E                     l8891:	
  5918  127E  0020               	movlb	0	; select bank0
  5919  127F  0827               	movf	_setDimmerLights_AdjControl$2582,w
  5920  1280  00A5               	movwf	??_setDimmerLights_AdjControl
  5921  1281  0825               	movf	??_setDimmerLights_AdjControl,w
  5922  1282  00A6               	movwf	setDimmerLights_AdjControl@idle
  5923                           
  5924                           ;Dimmer_B1.c: 567: if (idle == 0) {
  5925  1283  08A6               	movf	setDimmerLights_AdjControl@idle,f
  5926  1284  1D03               	skipz
  5927  1285  0008               	return
  5928                           
  5929                           ;Dimmer_B1.c: 568: if (DimmerLights->SwFlag == 1) {
  5930  1286  086F               	movf	_DimmerLights,w
  5931  1287  3E09               	addlw	9
  5932  1288  0086               	movwf	6
  5933  1289  3001               	movlw	1	; select bank2/3
  5934  128A  0087               	movwf	7
  5935  128B  1F01               	btfss	1,6
  5936  128C  0008               	return
  5937                           
  5938                           ;Dimmer_B1.c: 569: DimmerLights->SwAdj = 1;
  5939  128D  086F               	movf	_DimmerLights,w
  5940  128E  3E09               	addlw	9
  5941  128F  0086               	movwf	6
  5942  1290  3001               	movlw	1	; select bank2/3
  5943  1291  0087               	movwf	7
  5944  1292  1781               	bsf	1,7
  5945                           
  5946                           ;Dimmer_B1.c: 570: DimmerLights->Status = 1;
  5947  1293  086F               	movf	_DimmerLights,w
  5948  1294  0086               	movwf	6
  5949  1295  3001               	movlw	1	; select bank2/3
  5950  1296  0087               	movwf	7
  5951  1297  1681               	bsf	1,5
  5952                           
  5953                           ;Dimmer_B1.c: 571: setDimmerLights_TriggerAdj(sw, 1);
  5954  1298  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5955  1299  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5956  129A  0828               	movf	setDimmerLights_AdjControl@sw,w
  5957  129B  319F  2714         	fcall	_setDimmerLights_TriggerAdj
  5958  129D  0008               	return
  5959  129E                     __end_of_setDimmerLights_AdjControl:	
  5960                           
  5961                           	psect	text16
  5962  1EF5                     __ptext16:	
  5963 ;; *************** function _getSw_KeyStatus *****************
  5964 ;; Defined at:
  5965 ;;		line 237 in file "../src/Switch_B1.c"
  5966 ;; Parameters:    Size  Location     Type
  5967 ;;  sw              1    wreg     unsigned char 
  5968 ;; Auto vars:     Size  Location     Type
  5969 ;;  sw              1    4[BANK0 ] unsigned char 
  5970 ;;  status          1    3[BANK0 ] unsigned char 
  5971 ;; Return value:  Size  Location     Type
  5972 ;;                  1    wreg      unsigned char 
  5973 ;; Registers used:
  5974 ;;		wreg, status,2
  5975 ;; Tracked objects:
  5976 ;;		On entry : 0/0
  5977 ;;		On exit  : 0/0
  5978 ;;		Unchanged: 0/0
  5979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5981 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5982 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5983 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5984 ;;Total ram usage:        5 bytes
  5985 ;; Hardware stack levels used:    1
  5986 ;; Hardware stack levels required when called:    5
  5987 ;; This function calls:
  5988 ;;		Nothing
  5989 ;; This function is called by:
  5990 ;;		_setSw_Main
  5991 ;; This function uses a non-reentrant model
  5992 ;;
  5993                           
  5994                           
  5995                           ;psect for function _getSw_KeyStatus
  5996  1EF5                     _getSw_KeyStatus:	
  5997                           
  5998                           ;incstack = 0
  5999                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6000                           ;getSw_KeyStatus@sw stored from wreg
  6001  1EF5  0020               	movlb	0	; select bank0
  6002  1EF6  00A4               	movwf	getSw_KeyStatus@sw
  6003                           
  6004                           ;Switch_B1.c: 238: char status = 0;
  6005  1EF7  01A3               	clrf	getSw_KeyStatus@status
  6006                           
  6007                           ;Switch_B1.c: 250: if (sw == 1) {
  6008  1EF8  0824               	movf	getSw_KeyStatus@sw,w
  6009  1EF9  3A01               	xorlw	1
  6010  1EFA  1D03               	skipz
  6011  1EFB  2F04               	goto	l6983
  6012                           
  6013                           ;Switch_B1.c: 251: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6014  1EFC  01A1               	clrf	_getSw_KeyStatus$6329
  6015  1EFD  0AA1               	incf	_getSw_KeyStatus$6329,f
  6016  1EFE  1F0C               	btfss	12,6	;volatile
  6017  1EFF  1A0C               	btfsc	12,4	;volatile
  6018  1F00  2F02               	goto	l6981
  6019  1F01  01A1               	clrf	_getSw_KeyStatus$6329
  6020  1F02                     l6981:	
  6021  1F02  0821               	movf	_getSw_KeyStatus$6329,w
  6022  1F03  2F0F               	goto	L3
  6023  1F04                     l6983:	
  6024                           ;Switch_B1.c: 252: } else if (sw == 2) {
  6025                           
  6026  1F04  0824               	movf	getSw_KeyStatus@sw,w
  6027  1F05  3A02               	xorlw	2
  6028  1F06  1D03               	skipz
  6029  1F07  2F12               	goto	l6993
  6030                           
  6031                           ;Switch_B1.c: 253: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6032  1F08  01A2               	clrf	_getSw_KeyStatus$6330
  6033  1F09  0AA2               	incf	_getSw_KeyStatus$6330,f
  6034  1F0A  1C0C               	btfss	12,0	;volatile
  6035  1F0B  188D               	btfsc	13,1	;volatile
  6036  1F0C  2F0E               	goto	l6991
  6037  1F0D  01A2               	clrf	_getSw_KeyStatus$6330
  6038  1F0E                     l6991:	
  6039  1F0E  0822               	movf	_getSw_KeyStatus$6330,w
  6040  1F0F                     L3:	
  6041  1F0F  00A0               	movwf	??_getSw_KeyStatus
  6042  1F10  0820               	movf	??_getSw_KeyStatus,w
  6043  1F11  00A3               	movwf	getSw_KeyStatus@status
  6044  1F12                     l6993:	
  6045                           
  6046                           ;Switch_B1.c: 254: }
  6047                           ;Switch_B1.c: 261: return status;
  6048  1F12  0823               	movf	getSw_KeyStatus@status,w
  6049  1F13  0008               	return
  6050  1F14                     __end_of_getSw_KeyStatus:	
  6051                           
  6052                           	psect	text17
  6053  1D72                     __ptext17:	
  6054 ;; *************** function _SwPointSelect *****************
  6055 ;; Defined at:
  6056 ;;		line 25 in file "../src/Switch_B1.c"
  6057 ;; Parameters:    Size  Location     Type
  6058 ;;  sw              1    wreg     unsigned char 
  6059 ;; Auto vars:     Size  Location     Type
  6060 ;;  sw              1    1[BANK0 ] unsigned char 
  6061 ;; Return value:  Size  Location     Type
  6062 ;;		None               void
  6063 ;; Registers used:
  6064 ;;		wreg
  6065 ;; Tracked objects:
  6066 ;;		On entry : 0/0
  6067 ;;		On exit  : 0/0
  6068 ;;		Unchanged: 0/0
  6069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6071 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6072 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6073 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6074 ;;Total ram usage:        2 bytes
  6075 ;; Hardware stack levels used:    1
  6076 ;; Hardware stack levels required when called:    5
  6077 ;; This function calls:
  6078 ;;		Nothing
  6079 ;; This function is called by:
  6080 ;;		_setSw_Main
  6081 ;; This function uses a non-reentrant model
  6082 ;;
  6083                           
  6084                           
  6085                           ;psect for function _SwPointSelect
  6086  1D72                     _SwPointSelect:	
  6087                           
  6088                           ;incstack = 0
  6089                           ; Regs used in _SwPointSelect: [wreg]
  6090                           ;SwPointSelect@sw stored from wreg
  6091  1D72  0020               	movlb	0	; select bank0
  6092  1D73  00A1               	movwf	SwPointSelect@sw
  6093                           
  6094                           ;Switch_B1.c: 28: if (sw == 1) {
  6095  1D74  0821               	movf	SwPointSelect@sw,w
  6096  1D75  3A01               	xorlw	1
  6097  1D76  1D03               	skipz
  6098  1D77  2D7D               	goto	l6967
  6099                           
  6100                           ;Switch_B1.c: 29: Sw = &Sw1;
  6101  1D78  3055               	movlw	_Sw1& (0+255)
  6102  1D79  00A0               	movwf	??_SwPointSelect
  6103  1D7A  0820               	movf	??_SwPointSelect,w
  6104  1D7B  00FB               	movwf	_Sw
  6105                           
  6106                           ;Switch_B1.c: 30: }
  6107  1D7C  0008               	return
  6108  1D7D                     l6967:	
  6109                           
  6110                           ;Switch_B1.c: 33: else if (sw == 2) {
  6111  1D7D  0821               	movf	SwPointSelect@sw,w
  6112  1D7E  3A02               	xorlw	2
  6113  1D7F  1D03               	skipz
  6114  1D80  0008               	return
  6115                           
  6116                           ;Switch_B1.c: 34: Sw = &Sw2;
  6117  1D81  30DC               	movlw	_Sw2& (0+255)
  6118  1D82  00A0               	movwf	??_SwPointSelect
  6119  1D83  0820               	movf	??_SwPointSelect,w
  6120  1D84  00FB               	movwf	_Sw
  6121  1D85  0008               	return
  6122  1D86                     __end_of_SwPointSelect:	
  6123                           
  6124                           	psect	text18
  6125  086E                     __ptext18:	
  6126 ;; *************** function _setMain_Exception *****************
  6127 ;; Defined at:
  6128 ;;		line 276 in file "../src/main_B1.c"
  6129 ;; Parameters:    Size  Location     Type
  6130 ;;  command         1    wreg     unsigned char 
  6131 ;; Auto vars:     Size  Location     Type
  6132 ;;  command         1   28[BANK0 ] unsigned char 
  6133 ;;  status          1   27[BANK0 ] unsigned char 
  6134 ;;  buz             1   24[BANK0 ] unsigned char 
  6135 ;; Return value:  Size  Location     Type
  6136 ;;		None               void
  6137 ;; Registers used:
  6138 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6139 ;; Tracked objects:
  6140 ;;		On entry : 0/0
  6141 ;;		On exit  : 0/0
  6142 ;;		Unchanged: 0/0
  6143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6145 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6146 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6147 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6148 ;;Total ram usage:        7 bytes
  6149 ;; Hardware stack levels used:    1
  6150 ;; Hardware stack levels required when called:   10
  6151 ;; This function calls:
  6152 ;;		_getDimmerLights_Line
  6153 ;;		_getMain_LightsStatus
  6154 ;;		_setBuz
  6155 ;;		_setDimmerLights_ErrorClose
  6156 ;;		_setLED
  6157 ;; This function is called by:
  6158 ;;		_Switch_Main
  6159 ;; This function uses a non-reentrant model
  6160 ;;
  6161                           
  6162                           
  6163                           ;psect for function _setMain_Exception
  6164  086E                     _setMain_Exception:	
  6165                           
  6166                           ;incstack = 0
  6167                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6168                           ;setMain_Exception@command stored from wreg
  6169  086E  0020               	movlb	0	; select bank0
  6170  086F  00BC               	movwf	setMain_Exception@command
  6171                           
  6172                           ;main_B1.c: 277: char status = 0, buz = 0;
  6173  0870  01BB               	clrf	setMain_Exception@status
  6174  0871  01B8               	clrf	setMain_Exception@buz
  6175                           
  6176                           ;main_B1.c: 292: status = command == 3 ? getDimmerLights_Line() : 255;
  6177  0872  083C               	movf	setMain_Exception@command,w
  6178  0873  3A03               	xorlw	3
  6179  0874  1903               	skipnz
  6180  0875  287A               	goto	l9247
  6181  0876  30FF               	movlw	255
  6182  0877  00B9               	movwf	_setMain_Exception$7064
  6183  0878  3000               	movlw	0
  6184  0879  2883               	goto	L4
  6185  087A                     l9247:	
  6186  087A  319D  2537  3188   	fcall	_getDimmerLights_Line
  6187  087D  0020               	movlb	0	; select bank0
  6188  087E  00B6               	movwf	??_setMain_Exception
  6189  087F  01B7               	clrf	??_setMain_Exception+1
  6190  0880  0836               	movf	??_setMain_Exception,w
  6191  0881  00B9               	movwf	_setMain_Exception$7064
  6192  0882  0837               	movf	??_setMain_Exception+1,w
  6193  0883                     L4:	
  6194  0883  00BA               	movwf	_setMain_Exception$7064+1
  6195  0884  0839               	movf	_setMain_Exception$7064,w
  6196  0885  00B6               	movwf	??_setMain_Exception
  6197  0886  0836               	movf	??_setMain_Exception,w
  6198  0887  00BB               	movwf	setMain_Exception@status
  6199                           
  6200                           ;main_B1.c: 294: if (command == 0) {
  6201  0888  08BC               	movf	setMain_Exception@command,f
  6202  0889  1D03               	skipz
  6203  088A  288D               	goto	l9255
  6204                           
  6205                           ;main_B1.c: 295: setLED(99, 10);
  6206  088B  300A               	movlw	10
  6207  088C  288F               	goto	L5
  6208  088D                     l9255:	
  6209                           ;main_B1.c: 296: } else {
  6210                           
  6211                           
  6212                           ;main_B1.c: 297: setLED(99, 11);
  6213  088D  300B               	movlw	11
  6214  088E  0020               	movlb	0	; select bank0
  6215  088F                     L5:	
  6216  088F  00B6               	movwf	??_setMain_Exception
  6217  0890  0836               	movf	??_setMain_Exception,w
  6218  0891  00A2               	movwf	setLED@command
  6219  0892  3063               	movlw	99
  6220  0893  3195  2545  3188   	fcall	_setLED
  6221                           
  6222                           ;main_B1.c: 298: }
  6223                           ;main_B1.c: 300: if (command != 0) {
  6224  0896  0020               	movlb	0	; select bank0
  6225  0897  083C               	movf	setMain_Exception@command,w
  6226  0898  1903               	btfsc	3,2
  6227  0899  0008               	return
  6228                           
  6229                           ;main_B1.c: 301: switch (command) {
  6230  089A  28BB               	goto	l9271
  6231  089B                     l9261:	
  6232                           ;main_B1.c: 302: case 2:
  6233                           
  6234                           
  6235                           ;main_B1.c: 303: if (getMain_LightsStatus() == 1) {
  6236  089B  3191  2172  3188   	fcall	_getMain_LightsStatus
  6237  089E  3A01               	xorlw	1
  6238  089F  1D03               	skipz
  6239  08A0  28C4               	goto	l9273
  6240                           
  6241                           ;main_B1.c: 304: setBuz(10, 300);
  6242  08A1  302C               	movlw	44
  6243  08A2  0020               	movlb	0	; select bank0
  6244  08A3  00A9               	movwf	setBuz@time
  6245  08A4  3001               	movlw	1
  6246  08A5  00AA               	movwf	setBuz@time+1
  6247  08A6  300A               	movlw	10
  6248  08A7  3196  2699  3188   	fcall	_setBuz
  6249                           
  6250                           ;main_B1.c: 305: }
  6251                           ;main_B1.c: 306: break;
  6252  08AA  28C4               	goto	l9273
  6253  08AB                     l9265:	
  6254                           ;main_B1.c: 307: case 3:
  6255                           
  6256                           
  6257                           ;main_B1.c: 308: if (getMain_LightsStatus() == 1) {
  6258  08AB  3191  2172  3188   	fcall	_getMain_LightsStatus
  6259  08AE  3A01               	xorlw	1
  6260  08AF  1D03               	skipz
  6261  08B0  28C4               	goto	l9273
  6262                           
  6263                           ;main_B1.c: 309: setBuz(5, 300);
  6264  08B1  302C               	movlw	44
  6265  08B2  0020               	movlb	0	; select bank0
  6266  08B3  00A9               	movwf	setBuz@time
  6267  08B4  3001               	movlw	1
  6268  08B5  00AA               	movwf	setBuz@time+1
  6269  08B6  3005               	movlw	5
  6270  08B7  3196  2699  3188   	fcall	_setBuz
  6271                           
  6272                           ;main_B1.c: 312: }
  6273                           
  6274                           ;main_B1.c: 310: }
  6275                           ;main_B1.c: 311: break;
  6276  08BA  28C4               	goto	l9273
  6277  08BB                     l9271:	
  6278  08BB  0020               	movlb	0	; select bank0
  6279  08BC  083C               	movf	setMain_Exception@command,w
  6280                           
  6281                           ; Switch size 1, requested type "space"
  6282                           ; Number of cases is 2, Range of values is 2 to 3
  6283                           ; switch strategies available:
  6284                           ; Name         Instructions Cycles
  6285                           ; simple_byte            7     4 (average)
  6286                           ; direct_byte           13     9 (fixed)
  6287                           ; jumptable            263     9 (fixed)
  6288                           ;	Chosen strategy is simple_byte
  6289  08BD  3A02               	xorlw	2	; case 2
  6290  08BE  1903               	skipnz
  6291  08BF  289B               	goto	l9261
  6292  08C0  3A01               	xorlw	1	; case 3
  6293  08C1  1903               	skipnz
  6294  08C2  28AB               	goto	l9265
  6295  08C3  28C4               	goto	l9273
  6296  08C4                     l9273:	
  6297                           
  6298                           ;main_B1.c: 313: setDimmerLights_ErrorClose(status);
  6299  08C4  0020               	movlb	0	; select bank0
  6300  08C5  083B               	movf	setMain_Exception@status,w
  6301  08C6  3197  274B         	fcall	_setDimmerLights_ErrorClose
  6302  08C8  0020               	movlb	0	; select bank0
  6303  08C9  0008               	return
  6304  08CA                     __end_of_setMain_Exception:	
  6305                           
  6306                           	psect	text19
  6307  174B                     __ptext19:	
  6308 ;; *************** function _setDimmerLights_ErrorClose *****************
  6309 ;; Defined at:
  6310 ;;		line 577 in file "../src/Dimmer_B1.c"
  6311 ;; Parameters:    Size  Location     Type
  6312 ;;  lights          1    wreg     unsigned char 
  6313 ;; Auto vars:     Size  Location     Type
  6314 ;;  lights          1   19[BANK0 ] unsigned char 
  6315 ;;  i               2   20[BANK0 ] int 
  6316 ;;  count           1   18[BANK0 ] unsigned char 
  6317 ;; Return value:  Size  Location     Type
  6318 ;;		None               void
  6319 ;; Registers used:
  6320 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6321 ;; Tracked objects:
  6322 ;;		On entry : 0/0
  6323 ;;		On exit  : 0/0
  6324 ;;		Unchanged: 0/0
  6325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6327 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6328 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6329 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6330 ;;Total ram usage:        5 bytes
  6331 ;; Hardware stack levels used:    1
  6332 ;; Hardware stack levels required when called:    9
  6333 ;; This function calls:
  6334 ;;		_DimmerLightsPointSelect
  6335 ;;		_getDimmerLights_Status
  6336 ;;		_setDimmerLights_SwOff
  6337 ;; This function is called by:
  6338 ;;		_setMain_Exception
  6339 ;; This function uses a non-reentrant model
  6340 ;;
  6341                           
  6342                           
  6343                           ;psect for function _setDimmerLights_ErrorClose
  6344  174B                     _setDimmerLights_ErrorClose:	
  6345                           
  6346                           ;incstack = 0
  6347                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6348                           ;setDimmerLights_ErrorClose@lights stored from wreg
  6349  174B  0020               	movlb	0	; select bank0
  6350  174C  00B3               	movwf	setDimmerLights_ErrorClose@lights
  6351                           
  6352                           ;Dimmer_B1.c: 578: if (lights == 255) {
  6353  174D  0833               	movf	setDimmerLights_ErrorClose@lights,w
  6354  174E  3AFF               	xorlw	255
  6355  174F  1D03               	skipz
  6356  1750  2F88               	goto	l8919
  6357                           
  6358                           ;Dimmer_B1.c: 583: char count = 2;
  6359  1751  3002               	movlw	2
  6360  1752  00B1               	movwf	??_setDimmerLights_ErrorClose
  6361  1753  0831               	movf	??_setDimmerLights_ErrorClose,w
  6362  1754  00B2               	movwf	setDimmerLights_ErrorClose@count
  6363                           
  6364                           ;Dimmer_B1.c: 588: for (int i = 0; i < count; i++) {
  6365  1755  01B4               	clrf	setDimmerLights_ErrorClose@i
  6366  1756  01B5               	clrf	setDimmerLights_ErrorClose@i+1
  6367  1757                     l8917:	
  6368  1757  0835               	movf	setDimmerLights_ErrorClose@i+1,w
  6369  1758  3A80               	xorlw	128
  6370  1759  00B1               	movwf	??_setDimmerLights_ErrorClose
  6371  175A  3080               	movlw	128
  6372  175B  0231               	subwf	??_setDimmerLights_ErrorClose,w
  6373  175C  1D03               	skipz
  6374  175D  2F60               	goto	u9245
  6375  175E  0832               	movf	setDimmerLights_ErrorClose@count,w
  6376  175F  0234               	subwf	setDimmerLights_ErrorClose@i,w
  6377  1760                     u9245:	
  6378  1760  1803               	btfsc	3,0
  6379  1761  0008               	return
  6380                           
  6381                           ;Dimmer_B1.c: 589: DimmerLightsPointSelect(i + 1);
  6382  1762  0020               	movlb	0	; select bank0
  6383  1763  0834               	movf	setDimmerLights_ErrorClose@i,w
  6384  1764  3E01               	addlw	1
  6385  1765  319C  24FE  3197   	fcall	_DimmerLightsPointSelect
  6386                           
  6387                           ;Dimmer_B1.c: 590: if (getDimmerLights_Status(i + 1) == 1) {
  6388  1768  0020               	movlb	0	; select bank0
  6389  1769  0834               	movf	setDimmerLights_ErrorClose@i,w
  6390  176A  3E01               	addlw	1
  6391  176B  319C  2474  3197   	fcall	_getDimmerLights_Status
  6392  176E  3A01               	xorlw	1
  6393  176F  1D03               	skipz
  6394  1770  2F82               	goto	l8915
  6395                           
  6396                           ;Dimmer_B1.c: 591: DimmerLights->SwFlag = 1;
  6397  1771  0020               	movlb	0	; select bank0
  6398  1772  086F               	movf	_DimmerLights,w
  6399  1773  3E09               	addlw	9
  6400  1774  0086               	movwf	6
  6401  1775  3001               	movlw	1	; select bank2/3
  6402  1776  0087               	movwf	7
  6403  1777  1701               	bsf	1,6
  6404                           
  6405                           ;Dimmer_B1.c: 592: DimmerLights->Status = 0;
  6406  1778  086F               	movf	_DimmerLights,w
  6407  1779  0086               	movwf	6
  6408  177A  3001               	movlw	1	; select bank2/3
  6409  177B  0087               	movwf	7
  6410  177C  1281               	bcf	1,5
  6411                           
  6412                           ;Dimmer_B1.c: 593: setDimmerLights_SwOff(i + 1);
  6413  177D  0834               	movf	setDimmerLights_ErrorClose@i,w
  6414  177E  3E01               	addlw	1
  6415  177F  3194  246C  3197   	fcall	_setDimmerLights_SwOff
  6416  1782                     l8915:	
  6417  1782  3001               	movlw	1
  6418  1783  0020               	movlb	0	; select bank0
  6419  1784  07B4               	addwf	setDimmerLights_ErrorClose@i,f
  6420  1785  3000               	movlw	0
  6421  1786  3DB5               	addwfc	setDimmerLights_ErrorClose@i+1,f
  6422  1787  2F57               	goto	l8917
  6423  1788                     l8919:	
  6424                           ;Dimmer_B1.c: 594: }
  6425                           ;Dimmer_B1.c: 595: }
  6426                           ;Dimmer_B1.c: 596: } else {
  6427                           
  6428                           
  6429                           ;Dimmer_B1.c: 597: DimmerLightsPointSelect(lights);
  6430  1788  0020               	movlb	0	; select bank0
  6431  1789  0833               	movf	setDimmerLights_ErrorClose@lights,w
  6432  178A  319C  24FE  3197   	fcall	_DimmerLightsPointSelect
  6433                           
  6434                           ;Dimmer_B1.c: 598: if (getDimmerLights_Status(lights) == 1) {
  6435  178D  0020               	movlb	0	; select bank0
  6436  178E  0833               	movf	setDimmerLights_ErrorClose@lights,w
  6437  178F  319C  2474  3197   	fcall	_getDimmerLights_Status
  6438  1792  3A01               	xorlw	1
  6439  1793  1D03               	skipz
  6440  1794  0008               	return
  6441                           
  6442                           ;Dimmer_B1.c: 599: DimmerLights->SwFlag = 1;
  6443  1795  0020               	movlb	0	; select bank0
  6444  1796  086F               	movf	_DimmerLights,w
  6445  1797  3E09               	addlw	9
  6446  1798  0086               	movwf	6
  6447  1799  3001               	movlw	1	; select bank2/3
  6448  179A  0087               	movwf	7
  6449  179B  1701               	bsf	1,6
  6450                           
  6451                           ;Dimmer_B1.c: 600: DimmerLights->Status = 0;
  6452  179C  086F               	movf	_DimmerLights,w
  6453  179D  0086               	movwf	6
  6454  179E  3001               	movlw	1	; select bank2/3
  6455  179F  0087               	movwf	7
  6456  17A0  1281               	bcf	1,5
  6457                           
  6458                           ;Dimmer_B1.c: 601: setDimmerLights_SwOff(lights);
  6459  17A1  0833               	movf	setDimmerLights_ErrorClose@lights,w
  6460  17A2  3194  246C         	fcall	_setDimmerLights_SwOff
  6461  17A4  0008               	return
  6462  17A5                     __end_of_setDimmerLights_ErrorClose:	
  6463                           
  6464                           	psect	text20
  6465  1D37                     __ptext20:	
  6466 ;; *************** function _getDimmerLights_Line *****************
  6467 ;; Defined at:
  6468 ;;		line 710 in file "../src/Dimmer_B1.c"
  6469 ;; Parameters:    Size  Location     Type
  6470 ;;		None
  6471 ;; Auto vars:     Size  Location     Type
  6472 ;;  line            1    1[BANK0 ] unsigned char 
  6473 ;; Return value:  Size  Location     Type
  6474 ;;                  1    wreg      unsigned char 
  6475 ;; Registers used:
  6476 ;;		wreg, status,2
  6477 ;; Tracked objects:
  6478 ;;		On entry : 0/0
  6479 ;;		On exit  : 0/0
  6480 ;;		Unchanged: 0/0
  6481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6483 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6484 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6485 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6486 ;;Total ram usage:        2 bytes
  6487 ;; Hardware stack levels used:    1
  6488 ;; Hardware stack levels required when called:    5
  6489 ;; This function calls:
  6490 ;;		Nothing
  6491 ;; This function is called by:
  6492 ;;		_setMain_Exception
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           
  6497                           ;psect for function _getDimmerLights_Line
  6498  1D37                     _getDimmerLights_Line:	
  6499                           
  6500                           ;Dimmer_B1.c: 711: char line = 0;
  6501                           
  6502                           ;incstack = 0
  6503                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6504  1D37  0020               	movlb	0	; select bank0
  6505  1D38  01A1               	clrf	getDimmerLights_Line@line
  6506                           
  6507                           ;Dimmer_B1.c: 713: if (DimmerLights1.Line == 1) {
  6508  1D39  0023               	movlb	3	; select bank3
  6509  1D3A  1C47               	btfss	(_DimmerLights1^(0+384)+9),0
  6510  1D3B  2D40               	goto	l866
  6511                           
  6512                           ;Dimmer_B1.c: 714: line = 1;
  6513  1D3C  0020               	movlb	0	; select bank0
  6514  1D3D  01A1               	clrf	getDimmerLights_Line@line
  6515  1D3E  0AA1               	incf	getDimmerLights_Line@line,f
  6516                           
  6517                           ;Dimmer_B1.c: 715: }
  6518  1D3F  2D47               	goto	l867
  6519  1D40                     l866:	
  6520                           
  6521                           ;Dimmer_B1.c: 718: else if (DimmerLights2.Line == 1) {
  6522  1D40  1C56               	btfss	(_DimmerLights2^(0+384)+9),0
  6523  1D41  2D47               	goto	l867
  6524                           
  6525                           ;Dimmer_B1.c: 719: line = 2;
  6526  1D42  3002               	movlw	2
  6527  1D43  0020               	movlb	0	; select bank0
  6528  1D44  00A0               	movwf	??_getDimmerLights_Line
  6529  1D45  0820               	movf	??_getDimmerLights_Line,w
  6530  1D46  00A1               	movwf	getDimmerLights_Line@line
  6531  1D47                     l867:	
  6532                           
  6533                           ;Dimmer_B1.c: 720: }
  6534                           ;Dimmer_B1.c: 727: return line;
  6535  1D47  0020               	movlb	0	; select bank0
  6536  1D48  0821               	movf	getDimmerLights_Line@line,w
  6537  1D49  0008               	return
  6538  1D4A                     __end_of_getDimmerLights_Line:	
  6539                           
  6540                           	psect	text21
  6541  1C3B                     __ptext21:	
  6542 ;; *************** function _Switch_Initialization *****************
  6543 ;; Defined at:
  6544 ;;		line 46 in file "../src/Switch_B1.c"
  6545 ;; Parameters:    Size  Location     Type
  6546 ;;		None
  6547 ;; Auto vars:     Size  Location     Type
  6548 ;;		None
  6549 ;; Return value:  Size  Location     Type
  6550 ;;		None               void
  6551 ;; Registers used:
  6552 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6553 ;; Tracked objects:
  6554 ;;		On entry : 0/0
  6555 ;;		On exit  : 0/0
  6556 ;;		Unchanged: 0/0
  6557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6562 ;;Total ram usage:        0 bytes
  6563 ;; Hardware stack levels used:    1
  6564 ;; Hardware stack levels required when called:    8
  6565 ;; This function calls:
  6566 ;;		_TouchPower
  6567 ;;		_setSw_Initialization
  6568 ;; This function is called by:
  6569 ;;		_main
  6570 ;; This function uses a non-reentrant model
  6571 ;;
  6572                           
  6573                           
  6574                           ;psect for function _Switch_Initialization
  6575  1C3B                     _Switch_Initialization:	
  6576                           
  6577                           ;Switch_B1.c: 47: TouchPower();
  6578                           
  6579                           ;incstack = 0
  6580                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6581  1C3B  319D  25D9  319C   	fcall	_TouchPower
  6582                           
  6583                           ;Switch_B1.c: 49: WPUB1 = 0;
  6584  1C3E  0024               	movlb	4	; select bank4
  6585  1C3F  108D               	bcf	13,1	;volatile
  6586                           
  6587                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6588  1C40  3001               	movlw	1
  6589  1C41  319B  23AC  319C   	fcall	_setSw_Initialization
  6590                           
  6591                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6592  1C44  3002               	movlw	2
  6593  1C45  319B  23AC         	fcall	_setSw_Initialization
  6594  1C47  0008               	return
  6595  1C48                     __end_of_Switch_Initialization:	
  6596                           
  6597                           	psect	text22
  6598  1BAC                     __ptext22:	
  6599 ;; *************** function _setSw_Initialization *****************
  6600 ;; Defined at:
  6601 ;;		line 109 in file "../src/Switch_B1.c"
  6602 ;; Parameters:    Size  Location     Type
  6603 ;;  sw              1    wreg     unsigned char 
  6604 ;; Auto vars:     Size  Location     Type
  6605 ;;  sw              1    4[BANK0 ] unsigned char 
  6606 ;; Return value:  Size  Location     Type
  6607 ;;		None               void
  6608 ;; Registers used:
  6609 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6610 ;; Tracked objects:
  6611 ;;		On entry : 0/0
  6612 ;;		On exit  : 0/0
  6613 ;;		Unchanged: 0/0
  6614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6618 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6619 ;;Total ram usage:        1 bytes
  6620 ;; Hardware stack levels used:    1
  6621 ;; Hardware stack levels required when called:    7
  6622 ;; This function calls:
  6623 ;;		_setLED
  6624 ;; This function is called by:
  6625 ;;		_Switch_Initialization
  6626 ;; This function uses a non-reentrant model
  6627 ;;
  6628                           
  6629                           
  6630                           ;psect for function _setSw_Initialization
  6631  1BAC                     _setSw_Initialization:	
  6632                           
  6633                           ;incstack = 0
  6634                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6635                           ;setSw_Initialization@sw stored from wreg
  6636  1BAC  0020               	movlb	0	; select bank0
  6637  1BAD  00A4               	movwf	setSw_Initialization@sw
  6638                           
  6639                           ;Switch_B1.c: 110: setLED(sw, 1);
  6640  1BAE  01A2               	clrf	setLED@command
  6641  1BAF  0AA2               	incf	setLED@command,f
  6642  1BB0  0824               	movf	setSw_Initialization@sw,w
  6643  1BB1  3195  2545         	fcall	_setLED
  6644  1BB3  0008               	return
  6645  1BB4                     __end_of_setSw_Initialization:	
  6646                           
  6647                           	psect	text23
  6648  1DD9                     __ptext23:	
  6649 ;; *************** function _TouchPower *****************
  6650 ;; Defined at:
  6651 ;;		line 10 in file "../src/Switch_B1.c"
  6652 ;; Parameters:    Size  Location     Type
  6653 ;;		None
  6654 ;; Auto vars:     Size  Location     Type
  6655 ;;		None
  6656 ;; Return value:  Size  Location     Type
  6657 ;;		None               void
  6658 ;; Registers used:
  6659 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6660 ;; Tracked objects:
  6661 ;;		On entry : 0/0
  6662 ;;		On exit  : 0/0
  6663 ;;		Unchanged: 0/0
  6664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6669 ;;Total ram usage:        0 bytes
  6670 ;; Hardware stack levels used:    1
  6671 ;; Hardware stack levels required when called:    6
  6672 ;; This function calls:
  6673 ;;		_Timeout_Counter
  6674 ;;		_set_TimeoutCleared
  6675 ;; This function is called by:
  6676 ;;		_Switch_Initialization
  6677 ;;		_Switch_Main
  6678 ;; This function uses a non-reentrant model
  6679 ;;
  6680                           
  6681                           
  6682                           ;psect for function _TouchPower
  6683  1DD9                     _TouchPower:	
  6684                           
  6685                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6686                           
  6687                           ;incstack = 0
  6688                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6689  1DD9  0020               	movlb	0	; select bank0
  6690  1DDA  1A8E               	btfsc	14,5	;volatile
  6691  1DDB  0008               	return
  6692                           
  6693                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6694  1DDC  0021               	movlb	1	; select bank1
  6695  1DDD  1C20               	btfss	_myMain^(0+128),0
  6696  1DDE  0008               	return
  6697  1DDF  2DE5               	goto	l9235
  6698  1DE0                     l2363:	
  6699                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6700                           
  6701                           
  6702                           ;Switch_B1.c: 14: RC5 = 1;
  6703  1DE0  0020               	movlb	0	; select bank0
  6704  1DE1  168E               	bsf	14,5	;volatile
  6705                           
  6706                           ;Switch_B1.c: 15: Timeout_Counter();
  6707  1DE2  319D  259A  319D   	fcall	_Timeout_Counter
  6708  1DE5                     l9235:	
  6709  1DE5  0020               	movlb	0	; select bank0
  6710  1DE6  1A8E               	btfsc	14,5	;volatile
  6711  1DE7  2DEB               	goto	l9239
  6712  1DE8  0021               	movlb	1	; select bank1
  6713  1DE9  1D2D               	btfss	(_myMain^(0+128)+13),2
  6714  1DEA  2DE0               	goto	l2363
  6715  1DEB                     l9239:	
  6716                           
  6717                           ;Switch_B1.c: 16: }
  6718                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6719  1DEB  319B  2367         	fcall	_set_TimeoutCleared
  6720  1DED  0008               	return
  6721  1DEE                     __end_of_TouchPower:	
  6722                           
  6723                           	psect	text24
  6724  1B52                     __ptext24:	
  6725 ;; *************** function _RF_Main *****************
  6726 ;; Defined at:
  6727 ;;		line 16 in file "../src/RF_Control_B1.c"
  6728 ;; Parameters:    Size  Location     Type
  6729 ;;		None
  6730 ;; Auto vars:     Size  Location     Type
  6731 ;;		None
  6732 ;; Return value:  Size  Location     Type
  6733 ;;		None               void
  6734 ;; Registers used:
  6735 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6736 ;; Tracked objects:
  6737 ;;		On entry : 0/0
  6738 ;;		On exit  : 0/0
  6739 ;;		Unchanged: 0/0
  6740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6745 ;;Total ram usage:        0 bytes
  6746 ;; Hardware stack levels used:    1
  6747 ;; Hardware stack levels required when called:   14
  6748 ;; This function calls:
  6749 ;;		_setRF_Main
  6750 ;; This function is called by:
  6751 ;;		_main
  6752 ;; This function uses a non-reentrant model
  6753 ;;
  6754                           
  6755                           
  6756                           ;psect for function _RF_Main
  6757  1B52                     _RF_Main:	
  6758                           
  6759                           ;RF_Control_B1.c: 18: setRF_Main();
  6760                           
  6761                           ;incstack = 0
  6762                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6763  1B52  3185  252F         	fcall	_setRF_Main
  6764  1B54  0008               	return
  6765  1B55                     __end_of_RF_Main:	
  6766                           
  6767                           	psect	text25
  6768  052F                     __ptext25:	
  6769 ;; *************** function _setRF_Main *****************
  6770 ;; Defined at:
  6771 ;;		line 52 in file "../src/RF_Control_B1.c"
  6772 ;; Parameters:    Size  Location     Type
  6773 ;;		None
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;  error           1    2[BANK1 ] unsigned char 
  6776 ;;  Receive_OK      1    1[BANK1 ] unsigned char 
  6777 ;;  loop_f          1    0[BANK1 ] unsigned char 
  6778 ;; Return value:  Size  Location     Type
  6779 ;;		None               void
  6780 ;; Registers used:
  6781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6782 ;; Tracked objects:
  6783 ;;		On entry : 0/0
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6788 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6789 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6790 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6791 ;;Total ram usage:        4 bytes
  6792 ;; Hardware stack levels used:    1
  6793 ;; Hardware stack levels required when called:   13
  6794 ;; This function calls:
  6795 ;;		_CC2500_ReadStatus
  6796 ;;		_CC2500_RxData
  6797 ;;		_CC2500_TxData
  6798 ;;		_CC2500_WriteCommand
  6799 ;;		_getBuz_GO
  6800 ;;		_getMain_All_Error_Status
  6801 ;;		_getRF_KeyStatus
  6802 ;;		_getRxData
  6803 ;; This function is called by:
  6804 ;;		_RF_Main
  6805 ;; This function uses a non-reentrant model
  6806 ;;
  6807                           
  6808                           
  6809                           ;psect for function _setRF_Main
  6810  052F                     _setRF_Main:	
  6811                           
  6812                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6813                           
  6814                           ;incstack = 0
  6815                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6816  052F  0021               	movlb	1	; select bank1
  6817  0530  01E8               	clrf	setRF_Main@loop_f^(0+128)
  6818  0531  01E9               	clrf	setRF_Main@Receive_OK^(0+128)
  6819  0532  01EA               	clrf	setRF_Main@error^(0+128)
  6820                           
  6821                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6822  0533  1C3C               	btfss	_RF1^(0+128),0
  6823  0534  2E1B               	goto	l1964
  6824                           
  6825                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6826  0535  319C  24A6  3185   	fcall	_getBuz_GO
  6827  0538  0020               	movlb	0	; select bank0
  6828  0539  0821               	movf	?_getBuz_GO+1,w
  6829  053A  0420               	iorwf	?_getBuz_GO,w
  6830  053B  1D03               	skipz
  6831  053C  0008               	return
  6832                           
  6833                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6834  053D  3000               	movlw	0
  6835  053E  3191  21CD  3185   	fcall	_getMain_All_Error_Status
  6836  0541  3800               	iorlw	0
  6837  0542  1D03               	skipz
  6838  0543  2D58               	goto	l1966
  6839                           
  6840                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6841  0544  319C  24B7  3185   	fcall	_getRF_KeyStatus
  6842  0547  3A01               	xorlw	1
  6843  0548  3000               	movlw	0
  6844  0549  1903               	skipnz
  6845  054A  3001               	movlw	1
  6846  054B  0020               	movlb	0	; select bank0
  6847  054C  00ED               	movwf	??_setRF_Main
  6848  054D  0CED               	rrf	??_setRF_Main,f
  6849  054E  0CED               	rrf	??_setRF_Main,f
  6850  054F  0021               	movlb	1	; select bank1
  6851  0550  083C               	movf	_RF1^(0+128),w
  6852  0551  0020               	movlb	0	; select bank0
  6853  0552  066D               	xorwf	??_setRF_Main,w
  6854  0553  397F               	andlw	-129
  6855  0554  066D               	xorwf	??_setRF_Main,w
  6856  0555  0021               	movlb	1	; select bank1
  6857  0556  00BC               	movwf	_RF1^(0+128)
  6858                           
  6859                           ;RF_Control_B1.c: 65: } else {
  6860  0557  2D5A               	goto	l1967
  6861  0558                     l1966:	
  6862                           
  6863                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6864  0558  0021               	movlb	1	; select bank1
  6865  0559  13BC               	bcf	_RF1^(0+128),7
  6866  055A                     l1967:	
  6867                           
  6868                           ;RF_Control_B1.c: 70: }
  6869                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  6870  055A  1BBC               	btfsc	_RF1^(0+128),7
  6871  055B  1B3C               	btfsc	_RF1^(0+128),6
  6872  055C  2D62               	goto	l1968
  6873                           
  6874                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  6875  055D  01BE               	clrf	(_RF1^(0+128)+2)
  6876  055E  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6877                           
  6878                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  6879  055F  14BD               	bsf	(_RF1^(0+128)+1),1
  6880                           
  6881                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  6882  0560  11BC               	bcf	_RF1^(0+128),3
  6883                           
  6884                           ;RF_Control_B1.c: 76: } else {
  6885  0561  0008               	return
  6886  0562                     l1968:	
  6887                           
  6888                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6889  0562  18BD               	btfsc	(_RF1^(0+128)+1),1
  6890  0563  1B3C               	btfsc	_RF1^(0+128),6
  6891  0564  2D79               	goto	l9151
  6892                           
  6893                           ;RF_Control_B1.c: 78: RF1.Count++;
  6894  0565  3001               	movlw	1
  6895  0566  07BE               	addwf	(_RF1^(0+128)+2),f
  6896  0567  3000               	movlw	0
  6897  0568  3DBF               	addwfc	((_RF1+1)^(0+128)+2),f
  6898                           
  6899                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6900  0569  3002               	movlw	2
  6901  056A  3EBC               	addlw	_RF1& (0+255)
  6902  056B  0086               	movwf	6
  6903  056C  0187               	clrf	7
  6904  056D  3F40               	moviw [0]fsr1
  6905  056E  0643               	xorwf	(_RF1^(0+128)+7),w
  6906  056F  1D03               	skipz
  6907  0570  2D73               	goto	u9695
  6908  0571  3F41               	moviw [1]fsr1
  6909  0572  0644               	xorwf	((_RF1+1)^(0+128)+7),w
  6910  0573                     u9695:	
  6911  0573  1D03               	skipz
  6912  0574  2DE8               	goto	l9203
  6913                           
  6914                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6915  0575  01BE               	clrf	(_RF1^(0+128)+2)
  6916  0576  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6917                           
  6918                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6919  0577  10BD               	bcf	(_RF1^(0+128)+1),1
  6920                           
  6921                           ;RF_Control_B1.c: 82: }
  6922                           ;RF_Control_B1.c: 83: } else {
  6923  0578  2DE8               	goto	l9203
  6924  0579                     l9151:	
  6925                           
  6926                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6927  0579  01BE               	clrf	(_RF1^(0+128)+2)
  6928  057A  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6929                           
  6930                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6931  057B  10BD               	bcf	(_RF1^(0+128)+1),1
  6932                           
  6933                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6934  057C  193C               	btfsc	_RF1^(0+128),2
  6935  057D  1B3C               	btfsc	_RF1^(0+128),6
  6936  057E  2D9A               	goto	l1973
  6937                           
  6938                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6939  057F  113C               	bcf	_RF1^(0+128),2
  6940                           
  6941                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6942  0580  11BC               	bcf	_RF1^(0+128),3
  6943                           
  6944                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6945  0581  10BC               	bcf	_RF1^(0+128),1
  6946                           
  6947                           ;RF_Control_B1.c: 92: CC2500_ReadStatus(0x3B);
  6948  0582  303B               	movlw	59
  6949  0583  3190  2083  3185   	fcall	_CC2500_ReadStatus
  6950                           
  6951                           ;RF_Control_B1.c: 93: if (s_data != 0) {
  6952  0586  0021               	movlb	1	; select bank1
  6953  0587  0855               	movf	_s_data^(0+128),w
  6954  0588  1903               	btfsc	3,2
  6955  0589  2D96               	goto	l1974
  6956                           
  6957                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  6958  058A  3036               	movlw	54
  6959  058B  319E  264D  3185   	fcall	_CC2500_WriteCommand
  6960                           
  6961                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x3B);
  6962  058E  303B               	movlw	59
  6963  058F  319E  264D  3185   	fcall	_CC2500_WriteCommand
  6964                           
  6965                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x3A);
  6966  0592  303A               	movlw	58
  6967  0593  319E  264D  3185   	fcall	_CC2500_WriteCommand
  6968  0596                     l1974:	
  6969                           
  6970                           ;RF_Control_B1.c: 97: }
  6971                           ;RF_Control_B1.c: 98: CC2500_TxData();
  6972  0596  318A  22B8  3185   	fcall	_CC2500_TxData
  6973                           
  6974                           ;RF_Control_B1.c: 100: } else {
  6975  0599  2DE8               	goto	l9203
  6976  059A                     l1973:	
  6977                           
  6978                           ;RF_Control_B1.c: 102: if (RF1.RxStatus == 1) {
  6979  059A  1DBC               	btfss	_RF1^(0+128),3
  6980  059B  2DD3               	goto	l1976
  6981                           
  6982                           ;RF_Control_B1.c: 104: CC2500_RxData();
  6983  059C  318C  2403  3185   	fcall	_CC2500_RxData
  6984                           
  6985                           ;RF_Control_B1.c: 105: if (RF1.ReceiveGO == 1) {
  6986  059F  0021               	movlb	1	; select bank1
  6987  05A0  1CBC               	btfss	_RF1^(0+128),1
  6988  05A1  2DE8               	goto	l9203
  6989                           
  6990                           ;RF_Control_B1.c: 106: RF1.ReceiveGO = 0;
  6991  05A2  10BC               	bcf	_RF1^(0+128),1
  6992                           
  6993                           ;RF_Control_B1.c: 107: RF1.Correction = 0;
  6994  05A3  12BD               	bcf	(_RF1^(0+128)+1),5
  6995                           
  6996                           ;RF_Control_B1.c: 108: RF1.CorrectionCounter = 0;
  6997  05A4  01C6               	clrf	(_RF1^(0+128)+10)
  6998  05A5  01C7               	clrf	((_RF1+1)^(0+128)+10)
  6999                           
  7000                           ;RF_Control_B1.c: 117: getRxData();
  7001  05A6  318B  238F  3185   	fcall	_getRxData
  7002                           
  7003                           ;RF_Control_B1.c: 120: RF1.Run = 1;
  7004  05A9  0021               	movlb	1	; select bank1
  7005  05AA  14BD               	bsf	(_RF1^(0+128)+1),1
  7006                           
  7007                           ;RF_Control_B1.c: 122: if (RF1.Checked == 1) {
  7008  05AB  1DBD               	btfss	(_RF1^(0+128)+1),3
  7009  05AC  2DBA               	goto	l9187
  7010                           
  7011                           ;RF_Control_B1.c: 123: if (RF1.RunTime > 10) {
  7012  05AD  3000               	movlw	0
  7013  05AE  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7014  05AF  300B               	movlw	11
  7015  05B0  1903               	skipnz
  7016  05B1  0243               	subwf	(_RF1^(0+128)+7),w
  7017  05B2  1C03               	skipc
  7018  05B3  2DB8               	goto	l9185
  7019                           
  7020                           ;RF_Control_B1.c: 124: RF1.RunTime = 10;
  7021  05B4  300A               	movlw	10
  7022  05B5  00C3               	movwf	(_RF1^(0+128)+7)
  7023  05B6  3000               	movlw	0
  7024  05B7  00C4               	movwf	(_RF1^(0+128)+8)
  7025  05B8                     l9185:	
  7026                           
  7027                           ;RF_Control_B1.c: 125: }
  7028                           ;RF_Control_B1.c: 126: RF1.CheckCount = 0;
  7029  05B8  01C0               	clrf	(_RF1^(0+128)+4)
  7030                           
  7031                           ;RF_Control_B1.c: 127: } else {
  7032  05B9  2DE8               	goto	l9203
  7033  05BA                     l9187:	
  7034                           
  7035                           ;RF_Control_B1.c: 128: RF1.CheckCount++;
  7036  05BA  3001               	movlw	1
  7037  05BB  0020               	movlb	0	; select bank0
  7038  05BC  00ED               	movwf	??_setRF_Main
  7039  05BD  086D               	movf	??_setRF_Main,w
  7040  05BE  0021               	movlb	1	; select bank1
  7041  05BF  07C0               	addwf	(_RF1^(0+128)+4),f
  7042                           
  7043                           ;RF_Control_B1.c: 129: if (RF1.CheckCount == 2) {
  7044  05C0  0840               	movf	(_RF1^(0+128)+4),w
  7045  05C1  3A02               	xorlw	2
  7046  05C2  1D03               	skipz
  7047  05C3  2DE8               	goto	l9203
  7048                           
  7049                           ;RF_Control_B1.c: 130: RF1.CheckCount = 0;
  7050  05C4  01C0               	clrf	(_RF1^(0+128)+4)
  7051                           
  7052                           ;RF_Control_B1.c: 131: RF1.CheckedCounter = 0;
  7053  05C5  01C1               	clrf	(_RF1^(0+128)+5)
  7054  05C6  01C2               	clrf	((_RF1+1)^(0+128)+5)
  7055                           
  7056                           ;RF_Control_B1.c: 132: if (RF1.RunTime < 200) {
  7057  05C7  3000               	movlw	0
  7058  05C8  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7059  05C9  30C8               	movlw	200
  7060  05CA  1903               	skipnz
  7061  05CB  0243               	subwf	(_RF1^(0+128)+7),w
  7062  05CC  1803               	skipnc
  7063  05CD  2DE8               	goto	l9203
  7064                           
  7065                           ;RF_Control_B1.c: 133: RF1.RunTime += 10;
  7066  05CE  300A               	movlw	10
  7067  05CF  07C3               	addwf	(_RF1^(0+128)+7),f
  7068  05D0  3000               	movlw	0
  7069  05D1  3DC4               	addwfc	((_RF1+1)^(0+128)+7),f
  7070                           
  7071                           ;RF_Control_B1.c: 134: }
  7072                           ;RF_Control_B1.c: 135: }
  7073                           ;RF_Control_B1.c: 136: }
  7074                           ;RF_Control_B1.c: 137: }
  7075                           ;RF_Control_B1.c: 138: } else {
  7076  05D2  2DE8               	goto	l9203
  7077  05D3                     l1976:	
  7078                           
  7079                           ;RF_Control_B1.c: 140: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7080  05D3  1DBC               	btfss	_RF1^(0+128),3
  7081  05D4  18BC               	btfsc	_RF1^(0+128),1
  7082  05D5  2DE8               	goto	l9203
  7083                           
  7084                           ;RF_Control_B1.c: 141: RF1.RxStatus = 1;
  7085  05D6  15BC               	bsf	_RF1^(0+128),3
  7086                           
  7087                           ;RF_Control_B1.c: 142: RF1.Correction = 1;
  7088  05D7  16BD               	bsf	(_RF1^(0+128)+1),5
  7089                           
  7090                           ;RF_Control_B1.c: 144: CC2500_WriteCommand(0x36);
  7091  05D8  3036               	movlw	54
  7092  05D9  319E  264D  3185   	fcall	_CC2500_WriteCommand
  7093                           
  7094                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x3B);
  7095  05DC  303B               	movlw	59
  7096  05DD  319E  264D  3185   	fcall	_CC2500_WriteCommand
  7097                           
  7098                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x3A);
  7099  05E0  303A               	movlw	58
  7100  05E1  319E  264D  3185   	fcall	_CC2500_WriteCommand
  7101                           
  7102                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x34);
  7103  05E4  3034               	movlw	52
  7104  05E5  319E  264D  3185   	fcall	_CC2500_WriteCommand
  7105  05E8                     l9203:	
  7106                           
  7107                           ;RF_Control_B1.c: 148: }
  7108                           ;RF_Control_B1.c: 150: }
  7109                           ;RF_Control_B1.c: 151: }
  7110                           ;RF_Control_B1.c: 152: }
  7111                           ;RF_Control_B1.c: 153: if (RF1.RxStatus == 1) {
  7112  05E8  0021               	movlb	1	; select bank1
  7113  05E9  1DBC               	btfss	_RF1^(0+128),3
  7114  05EA  2E09               	goto	l9215
  7115                           
  7116                           ;RF_Control_B1.c: 154: RF1.CheckedCounter++;
  7117  05EB  3001               	movlw	1
  7118  05EC  07C1               	addwf	(_RF1^(0+128)+5),f
  7119  05ED  3000               	movlw	0
  7120  05EE  3DC2               	addwfc	((_RF1+1)^(0+128)+5),f
  7121                           
  7122                           ;RF_Control_B1.c: 155: if (RF1.CheckedCounter == 100) {
  7123  05EF  3005               	movlw	5
  7124  05F0  3EBC               	addlw	_RF1& (0+255)
  7125  05F1  0086               	movwf	6
  7126  05F2  0187               	clrf	7
  7127  05F3  3F40               	moviw [0]fsr1
  7128  05F4  3A64               	xorlw	100
  7129  05F5  1D03               	skipz
  7130  05F6  2DF9               	goto	u9825
  7131  05F7  3F41               	moviw [1]fsr1
  7132  05F8  3A00               	xorlw	0
  7133  05F9                     u9825:	
  7134  05F9  1D03               	skipz
  7135  05FA  2E09               	goto	l9215
  7136                           
  7137                           ;RF_Control_B1.c: 156: RF1.CheckedCounter = 0;
  7138  05FB  01C1               	clrf	(_RF1^(0+128)+5)
  7139  05FC  01C2               	clrf	((_RF1+1)^(0+128)+5)
  7140                           
  7141                           ;RF_Control_B1.c: 157: RF1.CheckCount = 0;
  7142  05FD  01C0               	clrf	(_RF1^(0+128)+4)
  7143                           
  7144                           ;RF_Control_B1.c: 158: if (RF1.RunTime > 10) {
  7145  05FE  3000               	movlw	0
  7146  05FF  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7147  0600  300B               	movlw	11
  7148  0601  1903               	skipnz
  7149  0602  0243               	subwf	(_RF1^(0+128)+7),w
  7150  0603  1C03               	skipc
  7151  0604  2E09               	goto	l9215
  7152                           
  7153                           ;RF_Control_B1.c: 159: RF1.RunTime -= 10;
  7154  0605  300A               	movlw	10
  7155  0606  02C3               	subwf	(_RF1^(0+128)+7),f
  7156  0607  3000               	movlw	0
  7157  0608  3BC4               	subwfb	((_RF1+1)^(0+128)+7),f
  7158  0609                     l9215:	
  7159                           
  7160                           ;RF_Control_B1.c: 160: }
  7161                           ;RF_Control_B1.c: 161: }
  7162                           ;RF_Control_B1.c: 162: }
  7163                           ;RF_Control_B1.c: 163: if (RF1.Correction == 1) {
  7164  0609  1EBD               	btfss	(_RF1^(0+128)+1),5
  7165  060A  0008               	return
  7166                           
  7167                           ;RF_Control_B1.c: 164: RF1.CorrectionCounter++;
  7168  060B  3001               	movlw	1
  7169  060C  07C6               	addwf	(_RF1^(0+128)+10),f
  7170  060D  3000               	movlw	0
  7171  060E  3DC7               	addwfc	((_RF1+1)^(0+128)+10),f
  7172                           
  7173                           ;RF_Control_B1.c: 165: if (RF1.CorrectionCounter >= 30000) {
  7174  060F  3075               	movlw	117
  7175  0610  0247               	subwf	((_RF1+1)^(0+128)+10),w
  7176  0611  3030               	movlw	48
  7177  0612  1903               	skipnz
  7178  0613  0246               	subwf	(_RF1^(0+128)+10),w
  7179  0614  1C03               	skipc
  7180  0615  0008               	return
  7181                           
  7182                           ;RF_Control_B1.c: 166: RF1.CorrectionCounter = 0;
  7183  0616  01C6               	clrf	(_RF1^(0+128)+10)
  7184  0617  01C7               	clrf	((_RF1+1)^(0+128)+10)
  7185                           
  7186                           ;RF_Control_B1.c: 167: RF1.RxStatus = 0;
  7187  0618  11BC               	bcf	_RF1^(0+128),3
  7188                           
  7189                           ;RF_Control_B1.c: 168: RF1.ReceiveGO = 0;
  7190  0619  10BC               	bcf	_RF1^(0+128),1
  7191                           
  7192                           ;RF_Control_B1.c: 169: }
  7193                           ;RF_Control_B1.c: 170: }
  7194                           ;RF_Control_B1.c: 171: }
  7195                           ;RF_Control_B1.c: 172: }
  7196                           ;RF_Control_B1.c: 179: } else {
  7197  061A  0008               	return
  7198  061B                     l1964:	
  7199                           
  7200                           ;RF_Control_B1.c: 180: if (myMain.PowerON == 1) {
  7201  061B  1C20               	btfss	_myMain^(0+128),0
  7202  061C  0008               	return
  7203                           
  7204                           ;RF_Control_B1.c: 181: RF1.Enable = 1;
  7205  061D  143C               	bsf	_RF1^(0+128),0
  7206  061E  0008               	return
  7207  061F                     __end_of_setRF_Main:	
  7208                           
  7209                           	psect	text26
  7210  0B8F                     __ptext26:	
  7211 ;; *************** function _getRxData *****************
  7212 ;; Defined at:
  7213 ;;		line 269 in file "../src/RF_Control_B1.c"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;		None
  7216 ;; Auto vars:     Size  Location     Type
  7217 ;;  error           1   76[BANK0 ] unsigned char 
  7218 ;; Return value:  Size  Location     Type
  7219 ;;		None               void
  7220 ;; Registers used:
  7221 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7222 ;; Tracked objects:
  7223 ;;		On entry : 0/0
  7224 ;;		On exit  : 0/0
  7225 ;;		Unchanged: 0/0
  7226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7228 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7229 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7230 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7231 ;;Total ram usage:        2 bytes
  7232 ;; Hardware stack levels used:    1
  7233 ;; Hardware stack levels required when called:   12
  7234 ;; This function calls:
  7235 ;;		_getMain_All_Error_Status
  7236 ;;		_setControl_Lights_Table
  7237 ;;		_setLog_Code
  7238 ;; This function is called by:
  7239 ;;		_setRF_Main
  7240 ;; This function uses a non-reentrant model
  7241 ;;
  7242                           
  7243                           
  7244                           ;psect for function _getRxData
  7245  0B8F                     _getRxData:	
  7246                           
  7247                           ;RF_Control_B1.c: 270: char error = getMain_All_Error_Status(0);
  7248                           
  7249                           ;incstack = 0
  7250                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7251  0B8F  3000               	movlw	0
  7252  0B90  3191  21CD  318B   	fcall	_getMain_All_Error_Status
  7253  0B93  0020               	movlb	0	; select bank0
  7254  0B94  00EB               	movwf	??_getRxData
  7255  0B95  086B               	movf	??_getRxData,w
  7256  0B96  00EC               	movwf	getRxData@error
  7257                           
  7258                           ;RF_Control_B1.c: 271: if (error == 0) {
  7259  0B97  08EC               	movf	getRxData@error,f
  7260  0B98  1D03               	skipz
  7261  0B99  0008               	return
  7262                           
  7263                           ;RF_Control_B1.c: 272: if (RF1.Learn == 1) {
  7264  0B9A  0021               	movlb	1	; select bank1
  7265  0B9B  1F3C               	btfss	_RF1^(0+128),6
  7266  0B9C  2BAD               	goto	l8941
  7267                           
  7268                           ;RF_Control_B1.c: 273: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7269  0B9D  0023               	movlb	3	; select bank3
  7270  0B9E  08A0               	movf	_RF_Data^(0+384),f
  7271  0B9F  1D03               	skipz
  7272  0BA0  2BAA               	goto	l2015
  7273  0BA1  0821               	movf	(_RF_Data^(0+384)+1),w
  7274  0BA2  3A64               	xorlw	100
  7275  0BA3  1D03               	skipz
  7276  0BA4  2BAA               	goto	l2015
  7277                           
  7278                           ;RF_Control_B1.c: 274: setLog_Code();
  7279  0BA5  3192  22D4         	fcall	_setLog_Code
  7280                           
  7281                           ;RF_Control_B1.c: 275: RF1.Checked = 1;
  7282  0BA7  0021               	movlb	1	; select bank1
  7283  0BA8  15BD               	bsf	(_RF1^(0+128)+1),3
  7284                           
  7285                           ;RF_Control_B1.c: 276: } else {
  7286  0BA9  0008               	return
  7287  0BAA                     l2015:	
  7288                           
  7289                           ;RF_Control_B1.c: 277: RF1.Checked = 0;
  7290  0BAA  0021               	movlb	1	; select bank1
  7291  0BAB  11BD               	bcf	(_RF1^(0+128)+1),3
  7292                           
  7293                           ;RF_Control_B1.c: 278: }
  7294                           ;RF_Control_B1.c: 279: } else {
  7295  0BAC  0008               	return
  7296  0BAD                     l8941:	
  7297                           
  7298                           ;RF_Control_B1.c: 280: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7299  0BAD  0023               	movlb	3	; select bank3
  7300  0BAE  08A0               	movf	_RF_Data^(0+384),f
  7301  0BAF  1D03               	skipz
  7302  0BB0  2BEB               	goto	l8963
  7303  0BB1  0821               	movf	(_RF_Data^(0+384)+1),w
  7304  0BB2  3A02               	xorlw	2
  7305  0BB3  1D03               	skipz
  7306  0BB4  2BEB               	goto	l8963
  7307                           
  7308                           ;RF_Control_B1.c: 282: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7309  0BB5  082C               	movf	(_RF_Data^(0+384)+12),w
  7310  0BB6  3AFF               	xorlw	255
  7311  0BB7  1D03               	skipz
  7312  0BB8  2BC5               	goto	l8953
  7313  0BB9  082D               	movf	(_RF_Data^(0+384)+13),w
  7314  0BBA  3AFF               	xorlw	255
  7315  0BBB  1D03               	skipz
  7316  0BBC  2BC5               	goto	l8953
  7317  0BBD  082E               	movf	(_RF_Data^(0+384)+14),w
  7318  0BBE  3AFF               	xorlw	255
  7319  0BBF  1D03               	skipz
  7320  0BC0  2BC5               	goto	l8953
  7321                           
  7322                           ;RF_Control_B1.c: 283: __nop();
  7323  0BC1  0000               	nop
  7324                           
  7325                           ;RF_Control_B1.c: 284: RF1.Checked = 0;
  7326  0BC2  0021               	movlb	1	; select bank1
  7327  0BC3  11BD               	bcf	(_RF1^(0+128)+1),3
  7328                           
  7329                           ;RF_Control_B1.c: 285: } else {
  7330  0BC4  0008               	return
  7331  0BC5                     l8953:	
  7332                           
  7333                           ;RF_Control_B1.c: 286: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7334  0BC5  0020               	movlb	0	; select bank0
  7335  0BC6  086E               	movf	_product,w
  7336  0BC7  3E0C               	addlw	12
  7337  0BC8  0086               	movwf	6
  7338  0BC9  3002               	movlw	2	; select bank4/5
  7339  0BCA  0087               	movwf	7
  7340  0BCB  0023               	movlb	3	; select bank3
  7341  0BCC  082C               	movf	(_RF_Data^(0+384)+12),w
  7342  0BCD  0601               	xorwf	1,w
  7343  0BCE  1D03               	skipz
  7344  0BCF  0008               	return
  7345  0BD0  0020               	movlb	0	; select bank0
  7346  0BD1  086E               	movf	_product,w
  7347  0BD2  3E0D               	addlw	13
  7348  0BD3  0086               	movwf	6
  7349  0BD4  3002               	movlw	2	; select bank4/5
  7350  0BD5  0087               	movwf	7
  7351  0BD6  0023               	movlb	3	; select bank3
  7352  0BD7  082D               	movf	(_RF_Data^(0+384)+13),w
  7353  0BD8  0601               	xorwf	1,w
  7354  0BD9  1D03               	skipz
  7355  0BDA  0008               	return
  7356  0BDB  0020               	movlb	0	; select bank0
  7357  0BDC  086E               	movf	_product,w
  7358  0BDD  3E0E               	addlw	14
  7359  0BDE  0086               	movwf	6
  7360  0BDF  3002               	movlw	2	; select bank4/5
  7361  0BE0  0087               	movwf	7
  7362  0BE1  0023               	movlb	3	; select bank3
  7363  0BE2  082E               	movf	(_RF_Data^(0+384)+14),w
  7364  0BE3  0601               	xorwf	1,w
  7365  0BE4  1D03               	skipz
  7366  0BE5  0008               	return
  7367                           
  7368                           ;RF_Control_B1.c: 287: setControl_Lights_Table();
  7369  0BE6  318B  2320         	fcall	_setControl_Lights_Table
  7370                           
  7371                           ;RF_Control_B1.c: 288: RF1.Checked = 1;
  7372  0BE8  0021               	movlb	1	; select bank1
  7373  0BE9  15BD               	bsf	(_RF1^(0+128)+1),3
  7374                           
  7375                           ;RF_Control_B1.c: 289: }
  7376                           ;RF_Control_B1.c: 290: }
  7377                           ;RF_Control_B1.c: 291: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7378  0BEA  0008               	return
  7379  0BEB                     l8963:	
  7380  0BEB  0023               	movlb	3	; select bank3
  7381  0BEC  0820               	movf	_RF_Data^(0+384),w
  7382  0BED  3AFF               	xorlw	255
  7383  0BEE  1D03               	skipz
  7384  0BEF  2BF6               	goto	l8969
  7385  0BF0  0821               	movf	(_RF_Data^(0+384)+1),w
  7386  0BF1  3A02               	xorlw	2
  7387  0BF2  1D03               	skipz
  7388  0BF3  2BF6               	goto	l8969
  7389                           
  7390                           ;RF_Control_B1.c: 292: __nop();
  7391  0BF4  0000               	nop
  7392                           
  7393                           ;RF_Control_B1.c: 293: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7394  0BF5  0008               	return
  7395  0BF6                     l8969:	
  7396  0BF6  0023               	movlb	3	; select bank3
  7397  0BF7  08A0               	movf	_RF_Data^(0+384),f
  7398  0BF8  1D03               	skipz
  7399  0BF9  2C00               	goto	l2025
  7400  0BFA  0821               	movf	(_RF_Data^(0+384)+1),w
  7401  0BFB  3A65               	xorlw	101
  7402  0BFC  1D03               	skipz
  7403  0BFD  2C00               	goto	l2025
  7404                           
  7405                           ;RF_Control_B1.c: 294: __nop();
  7406  0BFE  0000               	nop
  7407                           
  7408                           ;RF_Control_B1.c: 295: } else {
  7409  0BFF  0008               	return
  7410  0C00                     l2025:	
  7411                           
  7412                           ;RF_Control_B1.c: 296: RF1.Checked = 0;
  7413  0C00  0021               	movlb	1	; select bank1
  7414  0C01  11BD               	bcf	(_RF1^(0+128)+1),3
  7415                           
  7416                           ;RF_Control_B1.c: 297: }
  7417                           ;RF_Control_B1.c: 302: }
  7418                           ;RF_Control_B1.c: 303: } else {
  7419  0C02  0008               	return
  7420  0C03                     __end_of_getRxData:	
  7421                           ;RF_Control_B1.c: 304: ;
  7422                           
  7423                           
  7424                           	psect	text27
  7425  12D4                     __ptext27:	
  7426 ;; *************** function _setLog_Code *****************
  7427 ;; Defined at:
  7428 ;;		line 309 in file "../src/RF_Control_B1.c"
  7429 ;; Parameters:    Size  Location     Type
  7430 ;;		None
  7431 ;; Auto vars:     Size  Location     Type
  7432 ;;		None
  7433 ;; Return value:  Size  Location     Type
  7434 ;;		None               void
  7435 ;; Registers used:
  7436 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7437 ;; Tracked objects:
  7438 ;;		On entry : 0/0
  7439 ;;		On exit  : 0/0
  7440 ;;		Unchanged: 0/0
  7441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7444 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7445 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7446 ;;Total ram usage:        1 bytes
  7447 ;; Hardware stack levels used:    1
  7448 ;; Hardware stack levels required when called:    7
  7449 ;; This function calls:
  7450 ;;		_setBuz
  7451 ;;		_setMemory_LoopSave
  7452 ;;		_setMemory_Modify
  7453 ;; This function is called by:
  7454 ;;		_getRxData
  7455 ;; This function uses a non-reentrant model
  7456 ;;
  7457                           
  7458                           
  7459                           ;psect for function _setLog_Code
  7460  12D4                     _setLog_Code:	
  7461                           
  7462                           ;RF_Control_B1.c: 310: RF1.Learn = 0;
  7463                           
  7464                           ;incstack = 0
  7465                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7466  12D4  0021               	movlb	1	; select bank1
  7467  12D5  133C               	bcf	_RF1^(0+128),6
  7468                           
  7469                           ;RF_Control_B1.c: 311: product->Data[12]=RF_Data[12];
  7470  12D6  0023               	movlb	3	; select bank3
  7471  12D7  082C               	movf	(_RF_Data^(0+384)+12),w
  7472  12D8  0020               	movlb	0	; select bank0
  7473  12D9  00AD               	movwf	??_setLog_Code
  7474  12DA  086E               	movf	_product,w
  7475  12DB  3E0C               	addlw	12
  7476  12DC  0086               	movwf	6
  7477  12DD  3002               	movlw	2	; select bank4/5
  7478  12DE  0087               	movwf	7
  7479  12DF  082D               	movf	??_setLog_Code,w
  7480  12E0  0081               	movwf	1
  7481                           
  7482                           ;RF_Control_B1.c: 312: product->Data[13]=RF_Data[13];
  7483  12E1  0023               	movlb	3	; select bank3
  7484  12E2  082D               	movf	(_RF_Data^(0+384)+13),w
  7485  12E3  0020               	movlb	0	; select bank0
  7486  12E4  00AD               	movwf	??_setLog_Code
  7487  12E5  086E               	movf	_product,w
  7488  12E6  3E0D               	addlw	13
  7489  12E7  0086               	movwf	6
  7490  12E8  3002               	movlw	2	; select bank4/5
  7491  12E9  0087               	movwf	7
  7492  12EA  082D               	movf	??_setLog_Code,w
  7493  12EB  0081               	movwf	1
  7494                           
  7495                           ;RF_Control_B1.c: 313: product->Data[14]=RF_Data[14];
  7496  12EC  0023               	movlb	3	; select bank3
  7497  12ED  082E               	movf	(_RF_Data^(0+384)+14),w
  7498  12EE  0020               	movlb	0	; select bank0
  7499  12EF  00AD               	movwf	??_setLog_Code
  7500  12F0  086E               	movf	_product,w
  7501  12F1  3E0E               	addlw	14
  7502  12F2  0086               	movwf	6
  7503  12F3  3002               	movlw	2	; select bank4/5
  7504  12F4  0087               	movwf	7
  7505  12F5  082D               	movf	??_setLog_Code,w
  7506  12F6  0081               	movwf	1
  7507                           
  7508                           ;RF_Control_B1.c: 314: setBuz(1, 100);
  7509  12F7  3064               	movlw	100
  7510  12F8  00A9               	movwf	setBuz@time
  7511  12F9  3000               	movlw	0
  7512  12FA  00AA               	movwf	setBuz@time+1
  7513  12FB  3001               	movlw	1
  7514  12FC  3196  2699  3192   	fcall	_setBuz
  7515                           
  7516                           ;RF_Control_B1.c: 315: if (myMain.First == 1) {
  7517  12FF  0021               	movlb	1	; select bank1
  7518  1300  1EA0               	btfss	_myMain^(0+128),5
  7519  1301  2B06               	goto	l2031
  7520                           
  7521                           ;RF_Control_B1.c: 316: setMemory_LoopSave(1);
  7522  1302  3001               	movlw	1
  7523  1303  319D  2524  3192   	fcall	_setMemory_LoopSave
  7524  1306                     l2031:	
  7525                           
  7526                           ;RF_Control_B1.c: 317: }
  7527                           ;RF_Control_B1.c: 318: setMemory_Modify(1);
  7528  1306  3001               	movlw	1
  7529  1307  319D  2511         	fcall	_setMemory_Modify
  7530  1309  0008               	return
  7531  130A                     __end_of_setLog_Code:	
  7532                           
  7533                           	psect	text28
  7534  1D24                     __ptext28:	
  7535 ;; *************** function _setMemory_LoopSave *****************
  7536 ;; Defined at:
  7537 ;;		line 1006 in file "../src/MCU_B1.c"
  7538 ;; Parameters:    Size  Location     Type
  7539 ;;  command         1    wreg     unsigned char 
  7540 ;; Auto vars:     Size  Location     Type
  7541 ;;  command         1    1[BANK0 ] unsigned char 
  7542 ;; Return value:  Size  Location     Type
  7543 ;;		None               void
  7544 ;; Registers used:
  7545 ;;		wreg, status,2, status,0
  7546 ;; Tracked objects:
  7547 ;;		On entry : 0/0
  7548 ;;		On exit  : 0/0
  7549 ;;		Unchanged: 0/0
  7550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7552 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7553 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7554 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7555 ;;Total ram usage:        2 bytes
  7556 ;; Hardware stack levels used:    1
  7557 ;; Hardware stack levels required when called:    5
  7558 ;; This function calls:
  7559 ;;		Nothing
  7560 ;; This function is called by:
  7561 ;;		_setLog_Code
  7562 ;; This function uses a non-reentrant model
  7563 ;;
  7564                           
  7565                           
  7566                           ;psect for function _setMemory_LoopSave
  7567  1D24                     _setMemory_LoopSave:	
  7568                           
  7569                           ;incstack = 0
  7570                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7571                           ;setMemory_LoopSave@command stored from wreg
  7572  1D24  0020               	movlb	0	; select bank0
  7573  1D25  00A1               	movwf	setMemory_LoopSave@command
  7574                           
  7575                           ;MCU_B1.c: 1007: Memory.LoopSave = command == 1 ? 1 : 0;
  7576  1D26  0821               	movf	setMemory_LoopSave@command,w
  7577  1D27  3A01               	xorlw	1
  7578  1D28  3000               	movlw	0
  7579  1D29  1903               	skipnz
  7580  1D2A  3001               	movlw	1
  7581  1D2B  00A0               	movwf	??_setMemory_LoopSave
  7582  1D2C  0DA0               	rlf	??_setMemory_LoopSave,f
  7583  1D2D  0DA0               	rlf	??_setMemory_LoopSave,f
  7584  1D2E  0024               	movlb	4	; select bank4
  7585  1D2F  0844               	movf	(_Memory^(0+512)+36),w
  7586  1D30  0020               	movlb	0	; select bank0
  7587  1D31  0620               	xorwf	??_setMemory_LoopSave,w
  7588  1D32  39FB               	andlw	-5
  7589  1D33  0620               	xorwf	??_setMemory_LoopSave,w
  7590  1D34  0024               	movlb	4	; select bank4
  7591  1D35  00C4               	movwf	(_Memory^(0+512)+36)
  7592  1D36  0008               	return
  7593  1D37                     __end_of_setMemory_LoopSave:	
  7594                           
  7595                           	psect	text29
  7596  0B20                     __ptext29:	
  7597 ;; *************** function _setControl_Lights_Table *****************
  7598 ;; Defined at:
  7599 ;;		line 322 in file "../src/RF_Control_B1.c"
  7600 ;; Parameters:    Size  Location     Type
  7601 ;;		None
  7602 ;; Auto vars:     Size  Location     Type
  7603 ;;		None
  7604 ;; Return value:  Size  Location     Type
  7605 ;;		None               void
  7606 ;; Registers used:
  7607 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7608 ;; Tracked objects:
  7609 ;;		On entry : 0/0
  7610 ;;		On exit  : 0/0
  7611 ;;		Unchanged: 0/0
  7612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7617 ;;Total ram usage:        0 bytes
  7618 ;; Hardware stack levels used:    1
  7619 ;; Hardware stack levels required when called:   11
  7620 ;; This function calls:
  7621 ;;		_setBuz
  7622 ;;		_setRFSW_AdjControl
  7623 ;;		_setRFSW_Control
  7624 ;;		_setTxData
  7625 ;; This function is called by:
  7626 ;;		_getRxData
  7627 ;; This function uses a non-reentrant model
  7628 ;;
  7629                           
  7630                           
  7631                           ;psect for function _setControl_Lights_Table
  7632  0B20                     _setControl_Lights_Table:	
  7633                           
  7634                           ;RF_Control_B1.c: 323: switch (RF_Data[15]) {
  7635                           
  7636                           ;incstack = 0
  7637                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7638  0B20  2B73               	goto	l8673
  7639  0B21                     l8645:	
  7640                           ;RF_Control_B1.c: 324: case 0x00:
  7641                           
  7642                           
  7643                           ;RF_Control_B1.c: 327: setRFSW_Control(1);
  7644  0B21  3001               	movlw	1
  7645  0B22  3195  25E9  318B   	fcall	_setRFSW_Control
  7646                           
  7647                           ;RF_Control_B1.c: 333: setRFSW_Control(2);
  7648  0B25  3002               	movlw	2
  7649  0B26  3195  25E9  318B   	fcall	_setRFSW_Control
  7650                           
  7651                           ;RF_Control_B1.c: 341: product->Data[9]=0;
  7652  0B29  0020               	movlb	0	; select bank0
  7653  0B2A  086E               	movf	_product,w
  7654  0B2B  3E09               	addlw	9
  7655  0B2C  0086               	movwf	6
  7656  0B2D  3002               	movlw	2	; select bank4/5
  7657  0B2E  0087               	movwf	7
  7658  0B2F  0181               	clrf	1
  7659                           
  7660                           ;RF_Control_B1.c: 342: product->Data[11]=0;
  7661  0B30  086E               	movf	_product,w
  7662  0B31  3E0B               	addlw	11
  7663  0B32  0086               	movwf	6
  7664  0B33  3002               	movlw	2	; select bank4/5
  7665  0B34  0087               	movwf	7
  7666  0B35  0181               	clrf	1
  7667                           
  7668                           ;RF_Control_B1.c: 343: product->Data[15]=0;
  7669  0B36  086E               	movf	_product,w
  7670  0B37  3E0F               	addlw	15
  7671  0B38  0086               	movwf	6
  7672  0B39  3002               	movlw	2	; select bank4/5
  7673  0B3A  0087               	movwf	7
  7674  0B3B  0181               	clrf	1
  7675                           
  7676                           ;RF_Control_B1.c: 344: product->Data[17]=0;
  7677  0B3C  086E               	movf	_product,w
  7678  0B3D  3E11               	addlw	17
  7679  0B3E  0086               	movwf	6
  7680  0B3F  3002               	movlw	2	; select bank4/5
  7681  0B40  0087               	movwf	7
  7682  0B41  0181               	clrf	1
  7683                           
  7684                           ;RF_Control_B1.c: 345: setBuz(1, 100);
  7685  0B42  3064               	movlw	100
  7686  0B43  00A9               	movwf	setBuz@time
  7687  0B44  3000               	movlw	0
  7688  0B45  00AA               	movwf	setBuz@time+1
  7689  0B46  3001               	movlw	1
  7690  0B47  3196  2699  318B   	fcall	_setBuz
  7691                           
  7692                           ;RF_Control_B1.c: 346: setTxData();
  7693  0B4A  3186  26FB         	fcall	_setTxData
  7694                           
  7695                           ;RF_Control_B1.c: 347: break;
  7696  0B4C  0008               	return
  7697  0B4D                     l8659:	
  7698                           ;RF_Control_B1.c: 348: case 0x20:
  7699                           
  7700                           
  7701                           ;RF_Control_B1.c: 349: product->Data[9]=0;
  7702  0B4D  0020               	movlb	0	; select bank0
  7703  0B4E  086E               	movf	_product,w
  7704  0B4F  3E09               	addlw	9
  7705  0B50  0086               	movwf	6
  7706  0B51  3002               	movlw	2	; select bank4/5
  7707  0B52  0087               	movwf	7
  7708  0B53  0181               	clrf	1
  7709                           
  7710                           ;RF_Control_B1.c: 350: product->Data[11]=0;
  7711  0B54  086E               	movf	_product,w
  7712  0B55  3E0B               	addlw	11
  7713  0B56  0086               	movwf	6
  7714  0B57  3002               	movlw	2	; select bank4/5
  7715  0B58  0087               	movwf	7
  7716  0B59  0181               	clrf	1
  7717                           
  7718                           ;RF_Control_B1.c: 351: product->Data[17]=0;
  7719  0B5A  086E               	movf	_product,w
  7720  0B5B  3E11               	addlw	17
  7721  0B5C  0086               	movwf	6
  7722  0B5D  3002               	movlw	2	; select bank4/5
  7723  0B5E  0087               	movwf	7
  7724  0B5F  0181               	clrf	1
  7725                           
  7726                           ;RF_Control_B1.c: 352: setTxData();
  7727  0B60  3186  26FB         	fcall	_setTxData
  7728                           
  7729                           ;RF_Control_B1.c: 353: break;
  7730  0B62  0008               	return
  7731  0B63                     l8663:	
  7732                           ;RF_Control_B1.c: 354: case 0x01:
  7733                           
  7734                           
  7735                           ;RF_Control_B1.c: 356: setRFSW_Control(1);
  7736  0B63  3001               	movlw	1
  7737  0B64  3195  25E9         	fcall	_setRFSW_Control
  7738                           
  7739                           ;RF_Control_B1.c: 358: break;
  7740  0B66  0008               	return
  7741  0B67                     l8665:	
  7742                           ;RF_Control_B1.c: 359: case 0x02:
  7743                           
  7744                           
  7745                           ;RF_Control_B1.c: 361: setRFSW_Control(2);
  7746  0B67  3002               	movlw	2
  7747  0B68  3195  25E9         	fcall	_setRFSW_Control
  7748                           
  7749                           ;RF_Control_B1.c: 368: break;
  7750                           
  7751                           ;RF_Control_B1.c: 364: case 0x03:
  7752                           
  7753                           ;RF_Control_B1.c: 363: break;
  7754  0B6A  0008               	return
  7755  0B6B                     l8667:	
  7756                           ;RF_Control_B1.c: 369: case 0x11:
  7757                           
  7758                           
  7759                           ;RF_Control_B1.c: 372: setRFSW_AdjControl(1);
  7760  0B6B  3001               	movlw	1
  7761  0B6C  3194  242C         	fcall	_setRFSW_AdjControl
  7762                           
  7763                           ;RF_Control_B1.c: 375: break;
  7764  0B6E  0008               	return
  7765  0B6F                     l8669:	
  7766                           ;RF_Control_B1.c: 376: case 0x21:
  7767                           
  7768                           
  7769                           ;RF_Control_B1.c: 379: setRFSW_AdjControl(2);
  7770  0B6F  3002               	movlw	2
  7771  0B70  3194  242C         	fcall	_setRFSW_AdjControl
  7772                           
  7773                           ;RF_Control_B1.c: 390: }
  7774                           
  7775                           ;RF_Control_B1.c: 389: break;
  7776                           
  7777                           ;RF_Control_B1.c: 383: case 0x31:
  7778                           
  7779                           ;RF_Control_B1.c: 382: break;
  7780  0B72  0008               	return
  7781  0B73                     l8673:	
  7782  0B73  0023               	movlb	3	; select bank3
  7783  0B74  082F               	movf	(_RF_Data^(0+384)+15),w
  7784                           
  7785                           ; Switch size 1, requested type "space"
  7786                           ; Number of cases is 8, Range of values is 0 to 49
  7787                           ; switch strategies available:
  7788                           ; Name         Instructions Cycles
  7789                           ; simple_byte           25    13 (average)
  7790                           ; direct_byte          106     6 (fixed)
  7791                           ; jumptable            260     6 (fixed)
  7792                           ;	Chosen strategy is simple_byte
  7793  0B75  3A00               	xorlw	0	; case 0
  7794  0B76  1903               	skipnz
  7795  0B77  2B21               	goto	l8645
  7796  0B78  3A01               	xorlw	1	; case 1
  7797  0B79  1903               	skipnz
  7798  0B7A  2B63               	goto	l8663
  7799  0B7B  3A03               	xorlw	3	; case 2
  7800  0B7C  1903               	skipnz
  7801  0B7D  2B67               	goto	l8665
  7802  0B7E  3A01               	xorlw	1	; case 3
  7803  0B7F  1903               	skipnz
  7804  0B80  2B8E               	goto	l2045
  7805  0B81  3A12               	xorlw	18	; case 17
  7806  0B82  1903               	skipnz
  7807  0B83  2B6B               	goto	l8667
  7808  0B84  3A31               	xorlw	49	; case 32
  7809  0B85  1903               	skipnz
  7810  0B86  2B4D               	goto	l8659
  7811  0B87  3A01               	xorlw	1	; case 33
  7812  0B88  1903               	skipnz
  7813  0B89  2B6F               	goto	l8669
  7814  0B8A  3A10               	xorlw	16	; case 49
  7815  0B8B  1903               	skipnz
  7816  0B8C  2B8E               	goto	l2045
  7817  0B8D  2B8E               	goto	l2045
  7818  0B8E                     l2045:	
  7819  0B8E  0008               	return
  7820  0B8F                     __end_of_setControl_Lights_Table:	
  7821                           
  7822                           	psect	text30
  7823  15E9                     __ptext30:	
  7824 ;; *************** function _setRFSW_Control *****************
  7825 ;; Defined at:
  7826 ;;		line 473 in file "../src/RF_Control_B1.c"
  7827 ;; Parameters:    Size  Location     Type
  7828 ;;  sw              1    wreg     unsigned char 
  7829 ;; Auto vars:     Size  Location     Type
  7830 ;;  sw              1   19[BANK0 ] unsigned char 
  7831 ;;  status          1   18[BANK0 ] unsigned char 
  7832 ;; Return value:  Size  Location     Type
  7833 ;;		None               void
  7834 ;; Registers used:
  7835 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7836 ;; Tracked objects:
  7837 ;;		On entry : 0/0
  7838 ;;		On exit  : 0/0
  7839 ;;		Unchanged: 0/0
  7840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7842 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7843 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7844 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7845 ;;Total ram usage:        3 bytes
  7846 ;; Hardware stack levels used:    1
  7847 ;; Hardware stack levels required when called:    9
  7848 ;; This function calls:
  7849 ;;		_getDimmerLights_Status
  7850 ;;		_setDelayOff_GO
  7851 ;;		_setDimmerLights_SwOff
  7852 ;;		_setDimmerLights_SwOn
  7853 ;;		_setRF_DimmerLights
  7854 ;; This function is called by:
  7855 ;;		_setControl_Lights_Table
  7856 ;; This function uses a non-reentrant model
  7857 ;;
  7858                           
  7859                           
  7860                           ;psect for function _setRFSW_Control
  7861  15E9                     _setRFSW_Control:	
  7862                           
  7863                           ;incstack = 0
  7864                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7865                           ;setRFSW_Control@sw stored from wreg
  7866  15E9  0020               	movlb	0	; select bank0
  7867  15EA  00B3               	movwf	setRFSW_Control@sw
  7868                           
  7869                           ;RF_Control_B1.c: 474: char status = 0;
  7870  15EB  01B2               	clrf	setRFSW_Control@status
  7871                           
  7872                           ;RF_Control_B1.c: 478: setDimmerLights_SwOn(sw);
  7873  15EC  0833               	movf	setRFSW_Control@sw,w
  7874  15ED  3193  23B1  3195   	fcall	_setDimmerLights_SwOn
  7875                           
  7876                           ;RF_Control_B1.c: 479: status = getDimmerLights_Status(sw);
  7877  15F0  0020               	movlb	0	; select bank0
  7878  15F1  0833               	movf	setRFSW_Control@sw,w
  7879  15F2  319C  2474  3195   	fcall	_getDimmerLights_Status
  7880  15F5  0020               	movlb	0	; select bank0
  7881  15F6  00B1               	movwf	??_setRFSW_Control
  7882  15F7  0831               	movf	??_setRFSW_Control,w
  7883  15F8  00B2               	movwf	setRFSW_Control@status
  7884                           
  7885                           ;RF_Control_B1.c: 481: if (status == 1) {
  7886  15F9  0832               	movf	setRFSW_Control@status,w
  7887  15FA  3A01               	xorlw	1
  7888  15FB  1D03               	skipz
  7889  15FC  2E16               	goto	l8577
  7890                           
  7891                           ;RF_Control_B1.c: 482: if (RF_Data[16] == 0x80) {
  7892  15FD  0023               	movlb	3	; select bank3
  7893  15FE  0830               	movf	(_RF_Data^(0+384)+16),w
  7894  15FF  3A80               	xorlw	128
  7895  1600  1D03               	skipz
  7896  1601  2E0F               	goto	l2049
  7897                           
  7898                           ;RF_Control_B1.c: 483: setDelayOff_GO(sw, 1, RF_Data[17]);
  7899  1602  0020               	movlb	0	; select bank0
  7900  1603  01AA               	clrf	setDelayOff_GO@command
  7901  1604  0AAA               	incf	setDelayOff_GO@command,f
  7902  1605  0023               	movlb	3	; select bank3
  7903  1606  0831               	movf	(_RF_Data^(0+384)+17),w
  7904  1607  0020               	movlb	0	; select bank0
  7905  1608  00B1               	movwf	??_setRFSW_Control
  7906  1609  0831               	movf	??_setRFSW_Control,w
  7907  160A  00AB               	movwf	setDelayOff_GO@value
  7908  160B  0833               	movf	setRFSW_Control@sw,w
  7909  160C  3188  20CA  3195   	fcall	_setDelayOff_GO
  7910  160F                     l2049:	
  7911                           
  7912                           ;RF_Control_B1.c: 484: }
  7913                           ;RF_Control_B1.c: 486: setRF_DimmerLights(sw, 1);
  7914  160F  0020               	movlb	0	; select bank0
  7915  1610  01A0               	clrf	setRF_DimmerLights@on
  7916  1611  0AA0               	incf	setRF_DimmerLights@on,f
  7917  1612  0833               	movf	setRFSW_Control@sw,w
  7918  1613  3188  2012         	fcall	_setRF_DimmerLights
  7919                           
  7920                           ;RF_Control_B1.c: 488: } else {
  7921  1615  0008               	return
  7922  1616                     l8577:	
  7923                           
  7924                           ;RF_Control_B1.c: 489: if (RF_Data[16] == 0x80) {
  7925  1616  0023               	movlb	3	; select bank3
  7926  1617  0830               	movf	(_RF_Data^(0+384)+16),w
  7927  1618  3A80               	xorlw	128
  7928  1619  1D03               	skipz
  7929  161A  2E2F               	goto	l8581
  7930                           
  7931                           ;RF_Control_B1.c: 490: setDelayOff_GO(sw, 1, RF_Data[17]);
  7932  161B  0020               	movlb	0	; select bank0
  7933  161C  01AA               	clrf	setDelayOff_GO@command
  7934  161D  0AAA               	incf	setDelayOff_GO@command,f
  7935  161E  0023               	movlb	3	; select bank3
  7936  161F  0831               	movf	(_RF_Data^(0+384)+17),w
  7937  1620  0020               	movlb	0	; select bank0
  7938  1621  00B1               	movwf	??_setRFSW_Control
  7939  1622  0831               	movf	??_setRFSW_Control,w
  7940  1623  00AB               	movwf	setDelayOff_GO@value
  7941  1624  0833               	movf	setRFSW_Control@sw,w
  7942  1625  3188  20CA  3195   	fcall	_setDelayOff_GO
  7943                           
  7944                           ;RF_Control_B1.c: 491: setRF_DimmerLights(sw, 1);
  7945  1628  0020               	movlb	0	; select bank0
  7946  1629  01A0               	clrf	setRF_DimmerLights@on
  7947  162A  0AA0               	incf	setRF_DimmerLights@on,f
  7948  162B  0833               	movf	setRFSW_Control@sw,w
  7949  162C  3188  2012         	fcall	_setRF_DimmerLights
  7950                           
  7951                           ;RF_Control_B1.c: 492: } else {
  7952  162E  0008               	return
  7953  162F                     l8581:	
  7954                           
  7955                           ;RF_Control_B1.c: 494: setDimmerLights_SwOff(sw);
  7956  162F  0020               	movlb	0	; select bank0
  7957  1630  0833               	movf	setRFSW_Control@sw,w
  7958  1631  3194  246C  3195   	fcall	_setDimmerLights_SwOff
  7959                           
  7960                           ;RF_Control_B1.c: 495: setRF_DimmerLights(sw, 0);
  7961  1634  0020               	movlb	0	; select bank0
  7962  1635  01A0               	clrf	setRF_DimmerLights@on
  7963  1636  0833               	movf	setRFSW_Control@sw,w
  7964  1637  3188  2012  3195   	fcall	_setRF_DimmerLights
  7965                           
  7966                           ;RF_Control_B1.c: 497: setDelayOff_GO(sw, 0, 0);
  7967  163A  0020               	movlb	0	; select bank0
  7968  163B  01AA               	clrf	setDelayOff_GO@command
  7969  163C  01AB               	clrf	setDelayOff_GO@value
  7970  163D  0833               	movf	setRFSW_Control@sw,w
  7971  163E  3188  20CA         	fcall	_setDelayOff_GO
  7972  1640  0008               	return
  7973  1641                     __end_of_setRFSW_Control:	
  7974                           
  7975                           	psect	text31
  7976  142C                     __ptext31:	
  7977 ;; *************** function _setRFSW_AdjControl *****************
  7978 ;; Defined at:
  7979 ;;		line 503 in file "../src/RF_Control_B1.c"
  7980 ;; Parameters:    Size  Location     Type
  7981 ;;  sw              1    wreg     unsigned char 
  7982 ;; Auto vars:     Size  Location     Type
  7983 ;;  sw              1   74[BANK0 ] unsigned char 
  7984 ;;  status          1   73[BANK0 ] unsigned char 
  7985 ;; Return value:  Size  Location     Type
  7986 ;;		None               void
  7987 ;; Registers used:
  7988 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7989 ;; Tracked objects:
  7990 ;;		On entry : 0/0
  7991 ;;		On exit  : 0/0
  7992 ;;		Unchanged: 0/0
  7993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7995 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7996 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7997 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7998 ;;Total ram usage:        4 bytes
  7999 ;; Hardware stack levels used:    1
  8000 ;; Hardware stack levels required when called:   10
  8001 ;; This function calls:
  8002 ;;		_getDimmerLights_Status
  8003 ;;		_setMemory_Modify
  8004 ;;		_setRF_DimmerValue
  8005 ;;		_setTxData
  8006 ;; This function is called by:
  8007 ;;		_setControl_Lights_Table
  8008 ;; This function uses a non-reentrant model
  8009 ;;
  8010                           
  8011                           
  8012                           ;psect for function _setRFSW_AdjControl
  8013  142C                     _setRFSW_AdjControl:	
  8014                           
  8015                           ;incstack = 0
  8016                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8017                           ;setRFSW_AdjControl@sw stored from wreg
  8018  142C  0020               	movlb	0	; select bank0
  8019  142D  00EA               	movwf	setRFSW_AdjControl@sw
  8020                           
  8021                           ;RF_Control_B1.c: 504: char status = 0;
  8022  142E  01E9               	clrf	setRFSW_AdjControl@status
  8023                           
  8024                           ;RF_Control_B1.c: 506: status = getDimmerLights_Status(sw);
  8025  142F  086A               	movf	setRFSW_AdjControl@sw,w
  8026  1430  319C  2474  3194   	fcall	_getDimmerLights_Status
  8027  1433  0020               	movlb	0	; select bank0
  8028  1434  00E7               	movwf	??_setRFSW_AdjControl
  8029  1435  0867               	movf	??_setRFSW_AdjControl,w
  8030  1436  00E9               	movwf	setRFSW_AdjControl@status
  8031                           
  8032                           ;RF_Control_B1.c: 509: if (status == 1) {
  8033  1437  0869               	movf	setRFSW_AdjControl@status,w
  8034  1438  3A01               	xorlw	1
  8035  1439  1D03               	skipz
  8036  143A  2C45               	goto	l8593
  8037                           
  8038                           ;RF_Control_B1.c: 510: setMemory_Modify(1);
  8039  143B  3001               	movlw	1
  8040  143C  319D  2511  3194   	fcall	_setMemory_Modify
  8041                           
  8042                           ;RF_Control_B1.c: 511: setRF_DimmerValue(sw);
  8043  143F  0020               	movlb	0	; select bank0
  8044  1440  086A               	movf	setRFSW_AdjControl@sw,w
  8045  1441  3192  2234  3194   	fcall	_setRF_DimmerValue
  8046                           
  8047                           ;RF_Control_B1.c: 512: } else {
  8048  1444  2C57               	goto	l2057
  8049  1445                     l8593:	
  8050                           
  8051                           ;RF_Control_B1.c: 513: product->Data[9]=product->Data[20 + sw];
  8052  1445  0020               	movlb	0	; select bank0
  8053  1446  086A               	movf	setRFSW_AdjControl@sw,w
  8054  1447  3E14               	addlw	20
  8055  1448  076E               	addwf	_product,w
  8056  1449  00E7               	movwf	??_setRFSW_AdjControl
  8057  144A  0867               	movf	??_setRFSW_AdjControl,w
  8058  144B  0086               	movwf	6
  8059  144C  3002               	movlw	2	; select bank4/5
  8060  144D  0087               	movwf	7
  8061  144E  0801               	movf	1,w
  8062  144F  00E8               	movwf	??_setRFSW_AdjControl+1
  8063  1450  086E               	movf	_product,w
  8064  1451  3E09               	addlw	9
  8065  1452  0086               	movwf	6
  8066  1453  3002               	movlw	2	; select bank4/5
  8067  1454  0087               	movwf	7
  8068  1455  0868               	movf	??_setRFSW_AdjControl+1,w
  8069  1456  0081               	movwf	1
  8070  1457                     l2057:	
  8071                           
  8072                           ;RF_Control_B1.c: 514: }
  8073                           ;RF_Control_B1.c: 515: product->Data[17]=product->Data[26 + sw];
  8074  1457  0020               	movlb	0	; select bank0
  8075  1458  086A               	movf	setRFSW_AdjControl@sw,w
  8076  1459  3E1A               	addlw	26
  8077  145A  076E               	addwf	_product,w
  8078  145B  00E7               	movwf	??_setRFSW_AdjControl
  8079  145C  0867               	movf	??_setRFSW_AdjControl,w
  8080  145D  0086               	movwf	6
  8081  145E  3002               	movlw	2	; select bank4/5
  8082  145F  0087               	movwf	7
  8083  1460  0801               	movf	1,w
  8084  1461  00E8               	movwf	??_setRFSW_AdjControl+1
  8085  1462  086E               	movf	_product,w
  8086  1463  3E11               	addlw	17
  8087  1464  0086               	movwf	6
  8088  1465  3002               	movlw	2	; select bank4/5
  8089  1466  0087               	movwf	7
  8090  1467  0868               	movf	??_setRFSW_AdjControl+1,w
  8091  1468  0081               	movwf	1
  8092                           
  8093                           ;RF_Control_B1.c: 516: setTxData();
  8094  1469  3186  26FB         	fcall	_setTxData
  8095  146B  0008               	return
  8096  146C                     __end_of_setRFSW_AdjControl:	
  8097                           
  8098                           	psect	text32
  8099  1234                     __ptext32:	
  8100 ;; *************** function _setRF_DimmerValue *****************
  8101 ;; Defined at:
  8102 ;;		line 521 in file "../src/RF_Control_B1.c"
  8103 ;; Parameters:    Size  Location     Type
  8104 ;;  lights          1    wreg     unsigned char 
  8105 ;; Auto vars:     Size  Location     Type
  8106 ;;  lights          1   70[BANK0 ] unsigned char 
  8107 ;; Return value:  Size  Location     Type
  8108 ;;		None               void
  8109 ;; Registers used:
  8110 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8111 ;; Tracked objects:
  8112 ;;		On entry : 0/0
  8113 ;;		On exit  : 0/0
  8114 ;;		Unchanged: 0/0
  8115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8117 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8118 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8119 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8120 ;;Total ram usage:        3 bytes
  8121 ;; Hardware stack levels used:    1
  8122 ;; Hardware stack levels required when called:    9
  8123 ;; This function calls:
  8124 ;;		_setDimmerLights_AdjRF
  8125 ;; This function is called by:
  8126 ;;		_setRFSW_AdjControl
  8127 ;; This function uses a non-reentrant model
  8128 ;;
  8129                           
  8130                           
  8131                           ;psect for function _setRF_DimmerValue
  8132  1234                     _setRF_DimmerValue:	
  8133                           
  8134                           ;incstack = 0
  8135                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8136                           ;setRF_DimmerValue@lights stored from wreg
  8137  1234  0020               	movlb	0	; select bank0
  8138  1235  00E6               	movwf	setRF_DimmerValue@lights
  8139                           
  8140                           ;RF_Control_B1.c: 522: if (RF_Data[9] > 0x64) {
  8141  1236  3065               	movlw	101
  8142  1237  0023               	movlb	3	; select bank3
  8143  1238  0229               	subwf	(_RF_Data^(0+384)+9),w
  8144  1239  1C03               	skipc
  8145  123A  2A41               	goto	l8511
  8146                           
  8147                           ;RF_Control_B1.c: 523: RF_Data[9] = 0x64;
  8148  123B  3064               	movlw	100
  8149  123C  0020               	movlb	0	; select bank0
  8150  123D  00E4               	movwf	??_setRF_DimmerValue
  8151  123E  0864               	movf	??_setRF_DimmerValue,w
  8152  123F  0023               	movlb	3	; select bank3
  8153  1240  00A9               	movwf	(_RF_Data^(0+384)+9)
  8154  1241                     l8511:	
  8155                           
  8156                           ;RF_Control_B1.c: 524: }
  8157                           ;RF_Control_B1.c: 525: product->Data[9]=RF_Data[9];
  8158  1241  0829               	movf	(_RF_Data^(0+384)+9),w
  8159  1242  0020               	movlb	0	; select bank0
  8160  1243  00E4               	movwf	??_setRF_DimmerValue
  8161  1244  086E               	movf	_product,w
  8162  1245  3E09               	addlw	9
  8163  1246  0086               	movwf	6
  8164  1247  3002               	movlw	2	; select bank4/5
  8165  1248  0087               	movwf	7
  8166  1249  0864               	movf	??_setRF_DimmerValue,w
  8167  124A  0081               	movwf	1
  8168                           
  8169                           ;RF_Control_B1.c: 526: product->Data[11]=lights;
  8170  124B  0866               	movf	setRF_DimmerValue@lights,w
  8171  124C  00E4               	movwf	??_setRF_DimmerValue
  8172  124D  086E               	movf	_product,w
  8173  124E  3E0B               	addlw	11
  8174  124F  0086               	movwf	6
  8175  1250  3002               	movlw	2	; select bank4/5
  8176  1251  0087               	movwf	7
  8177  1252  0864               	movf	??_setRF_DimmerValue,w
  8178  1253  0081               	movwf	1
  8179                           
  8180                           ;RF_Control_B1.c: 527: product->Data[(20 + lights)]=product->Data[9];
  8181  1254  086E               	movf	_product,w
  8182  1255  3E09               	addlw	9
  8183  1256  0086               	movwf	6
  8184  1257  3002               	movlw	2	; select bank4/5
  8185  1258  0087               	movwf	7
  8186  1259  0801               	movf	1,w
  8187  125A  00E4               	movwf	??_setRF_DimmerValue
  8188  125B  0866               	movf	setRF_DimmerValue@lights,w
  8189  125C  3E14               	addlw	20
  8190  125D  076E               	addwf	_product,w
  8191  125E  00E5               	movwf	??_setRF_DimmerValue+1
  8192  125F  0865               	movf	??_setRF_DimmerValue+1,w
  8193  1260  0086               	movwf	6
  8194  1261  3002               	movlw	2	; select bank4/5
  8195  1262  0087               	movwf	7
  8196  1263  0864               	movf	??_setRF_DimmerValue,w
  8197  1264  0081               	movwf	1
  8198                           
  8199                           ;RF_Control_B1.c: 528: setDimmerLights_AdjRF(lights);
  8200  1265  0866               	movf	setRF_DimmerValue@lights,w
  8201  1266  319F  27B9         	fcall	_setDimmerLights_AdjRF
  8202  1268  0008               	return
  8203  1269                     __end_of_setRF_DimmerValue:	
  8204                           
  8205                           	psect	text33
  8206  1FB9                     __ptext33:	
  8207 ;; *************** function _setDimmerLights_AdjRF *****************
  8208 ;; Defined at:
  8209 ;;		line 761 in file "../src/Dimmer_B1.c"
  8210 ;; Parameters:    Size  Location     Type
  8211 ;;  lights          1    wreg     unsigned char 
  8212 ;; Auto vars:     Size  Location     Type
  8213 ;;  lights          1   67[BANK0 ] unsigned char 
  8214 ;; Return value:  Size  Location     Type
  8215 ;;		None               void
  8216 ;; Registers used:
  8217 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8218 ;; Tracked objects:
  8219 ;;		On entry : 0/0
  8220 ;;		On exit  : 0/0
  8221 ;;		Unchanged: 0/0
  8222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8224 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8225 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;Total ram usage:        2 bytes
  8228 ;; Hardware stack levels used:    1
  8229 ;; Hardware stack levels required when called:    8
  8230 ;; This function calls:
  8231 ;;		_DimmerLightsPointSelect
  8232 ;;		_getPercentValue
  8233 ;; This function is called by:
  8234 ;;		_setRF_DimmerValue
  8235 ;; This function uses a non-reentrant model
  8236 ;;
  8237                           
  8238                           
  8239                           ;psect for function _setDimmerLights_AdjRF
  8240  1FB9                     _setDimmerLights_AdjRF:	
  8241                           
  8242                           ;incstack = 0
  8243                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8244                           ;setDimmerLights_AdjRF@lights stored from wreg
  8245  1FB9  0020               	movlb	0	; select bank0
  8246  1FBA  00E3               	movwf	setDimmerLights_AdjRF@lights
  8247                           
  8248                           ;Dimmer_B1.c: 762: DimmerLightsPointSelect(lights);
  8249  1FBB  0863               	movf	setDimmerLights_AdjRF@lights,w
  8250  1FBC  319C  24FE  319F   	fcall	_DimmerLightsPointSelect
  8251                           
  8252                           ;Dimmer_B1.c: 763: DimmerLights->AdjRF = 1;
  8253  1FBF  0020               	movlb	0	; select bank0
  8254  1FC0  086F               	movf	_DimmerLights,w
  8255  1FC1  0086               	movwf	6
  8256  1FC2  3001               	movlw	1	; select bank2/3
  8257  1FC3  0087               	movwf	7
  8258  1FC4  1501               	bsf	1,2
  8259                           
  8260                           ;Dimmer_B1.c: 764: DimmerLights->Signal = 1;
  8261  1FC5  086F               	movf	_DimmerLights,w
  8262  1FC6  0086               	movwf	6
  8263  1FC7  3001               	movlw	1	; select bank2/3
  8264  1FC8  0087               	movwf	7
  8265  1FC9  1481               	bsf	1,1
  8266                           
  8267                           ;Dimmer_B1.c: 765: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8268  1FCA  086E               	movf	_product,w
  8269  1FCB  3E09               	addlw	9
  8270  1FCC  0086               	movwf	6
  8271  1FCD  3002               	movlw	2	; select bank4/5
  8272  1FCE  0087               	movwf	7
  8273  1FCF  0801               	movf	1,w
  8274  1FD0  3197  27A5         	fcall	_getPercentValue
  8275  1FD2  0020               	movlb	0	; select bank0
  8276  1FD3  00E2               	movwf	??_setDimmerLights_AdjRF
  8277  1FD4  086F               	movf	_DimmerLights,w
  8278  1FD5  3E05               	addlw	5
  8279  1FD6  0086               	movwf	6
  8280  1FD7  3001               	movlw	1	; select bank2/3
  8281  1FD8  0087               	movwf	7
  8282  1FD9  0862               	movf	??_setDimmerLights_AdjRF,w
  8283  1FDA  0081               	movwf	1
  8284  1FDB  0008               	return
  8285  1FDC                     __end_of_setDimmerLights_AdjRF:	
  8286                           
  8287                           	psect	text34
  8288  17A5                     __ptext34:	
  8289 ;; *************** function _getPercentValue *****************
  8290 ;; Defined at:
  8291 ;;		line 873 in file "../src/Dimmer_B1.c"
  8292 ;; Parameters:    Size  Location     Type
  8293 ;;  value           1    wreg     unsigned char 
  8294 ;; Auto vars:     Size  Location     Type
  8295 ;;  value           1   62[BANK0 ] unsigned char 
  8296 ;;  i               3   63[BANK0 ] float 
  8297 ;; Return value:  Size  Location     Type
  8298 ;;                  1    wreg      unsigned char 
  8299 ;; Registers used:
  8300 ;;		wreg, status,2, status,0, pclath, cstack
  8301 ;; Tracked objects:
  8302 ;;		On entry : 0/0
  8303 ;;		On exit  : 0/0
  8304 ;;		Unchanged: 0/0
  8305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8307 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8308 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8309 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8310 ;;Total ram usage:        6 bytes
  8311 ;; Hardware stack levels used:    1
  8312 ;; Hardware stack levels required when called:    7
  8313 ;; This function calls:
  8314 ;;		___awtoft
  8315 ;;		___ftadd
  8316 ;;		___ftdiv
  8317 ;;		___ftmul
  8318 ;;		___fttol
  8319 ;; This function is called by:
  8320 ;;		_setDimmerLights_AdjRF
  8321 ;; This function uses a non-reentrant model
  8322 ;;
  8323                           
  8324                           
  8325                           ;psect for function _getPercentValue
  8326  17A5                     _getPercentValue:	
  8327                           
  8328                           ;incstack = 0
  8329                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8330                           ;getPercentValue@value stored from wreg
  8331  17A5  0020               	movlb	0	; select bank0
  8332  17A6  00DE               	movwf	getPercentValue@value
  8333                           
  8334                           ;Dimmer_B1.c: 881: float i = ((char)(80*0.8)) - ((char)(15*0.8));
  8335  17A7  3000               	movlw	0
  8336  17A8  00DF               	movwf	getPercentValue@i
  8337  17A9  3050               	movlw	80
  8338  17AA  00E0               	movwf	getPercentValue@i+1
  8339  17AB  3042               	movlw	66
  8340  17AC  00E1               	movwf	getPercentValue@i+2
  8341                           
  8342                           ;Dimmer_B1.c: 882: i /= 100;
  8343  17AD  3000               	movlw	0
  8344  17AE  00AE               	movwf	___ftdiv@f2
  8345  17AF  30C8               	movlw	200
  8346  17B0  00AF               	movwf	___ftdiv@f2+1
  8347  17B1  3042               	movlw	66
  8348  17B2  00B0               	movwf	___ftdiv@f2+2
  8349  17B3  085F               	movf	getPercentValue@i,w
  8350  17B4  00B1               	movwf	___ftdiv@f1
  8351  17B5  0860               	movf	getPercentValue@i+1,w
  8352  17B6  00B2               	movwf	___ftdiv@f1+1
  8353  17B7  0861               	movf	getPercentValue@i+2,w
  8354  17B8  00B3               	movwf	___ftdiv@f1+2
  8355  17B9  318E  26A3  3197   	fcall	___ftdiv
  8356  17BC  0020               	movlb	0	; select bank0
  8357  17BD  082E               	movf	?___ftdiv,w
  8358  17BE  00DF               	movwf	getPercentValue@i
  8359  17BF  082F               	movf	?___ftdiv+1,w
  8360  17C0  00E0               	movwf	getPercentValue@i+1
  8361  17C1  0830               	movf	?___ftdiv+2,w
  8362  17C2  00E1               	movwf	getPercentValue@i+2
  8363                           
  8364                           ;Dimmer_B1.c: 884: return (char) (((100 - value) * i) + ((char)(80*0.8)));
  8365  17C3  085E               	movf	getPercentValue@value,w
  8366  17C4  00DC               	movwf	??_getPercentValue
  8367  17C5  01DD               	clrf	??_getPercentValue+1
  8368  17C6  09DC               	comf	??_getPercentValue,f
  8369  17C7  09DD               	comf	??_getPercentValue+1,f
  8370  17C8  0ADC               	incf	??_getPercentValue,f
  8371  17C9  1903               	skipnz
  8372  17CA  0ADD               	incf	??_getPercentValue+1,f
  8373  17CB  085C               	movf	??_getPercentValue,w
  8374  17CC  3E64               	addlw	100
  8375  17CD  00A8               	movwf	___awtoft@c
  8376  17CE  3000               	movlw	0
  8377  17CF  3D5D               	addwfc	??_getPercentValue+1,w
  8378  17D0  00A9               	movwf	___awtoft@c+1
  8379  17D1  319F  2774  3197   	fcall	___awtoft
  8380  17D4  0020               	movlb	0	; select bank0
  8381  17D5  0828               	movf	?___awtoft,w
  8382  17D6  00B1               	movwf	___ftmul@f2
  8383  17D7  0829               	movf	?___awtoft+1,w
  8384  17D8  00B2               	movwf	___ftmul@f2+1
  8385  17D9  082A               	movf	?___awtoft+2,w
  8386  17DA  00B3               	movwf	___ftmul@f2+2
  8387  17DB  085F               	movf	getPercentValue@i,w
  8388  17DC  00AE               	movwf	___ftmul@f1
  8389  17DD  0860               	movf	getPercentValue@i+1,w
  8390  17DE  00AF               	movwf	___ftmul@f1+1
  8391  17DF  0861               	movf	getPercentValue@i+2,w
  8392  17E0  00B0               	movwf	___ftmul@f1+2
  8393  17E1  318F  274C  3197   	fcall	___ftmul
  8394  17E4  0020               	movlb	0	; select bank0
  8395  17E5  082E               	movf	?___ftmul,w
  8396  17E6  00C4               	movwf	___ftadd@f2
  8397  17E7  082F               	movf	?___ftmul+1,w
  8398  17E8  00C5               	movwf	___ftadd@f2+1
  8399  17E9  0830               	movf	?___ftmul+2,w
  8400  17EA  00C6               	movwf	___ftadd@f2+2
  8401  17EB  3000               	movlw	0
  8402  17EC  00C1               	movwf	___ftadd@f1
  8403  17ED  3080               	movlw	128
  8404  17EE  00C2               	movwf	___ftadd@f1+1
  8405  17EF  3042               	movlw	66
  8406  17F0  00C3               	movwf	___ftadd@f1+2
  8407  17F1  3184  2439  3197   	fcall	___ftadd
  8408  17F4  0020               	movlb	0	; select bank0
  8409  17F5  0841               	movf	?___ftadd,w
  8410  17F6  00CE               	movwf	___fttol@f1
  8411  17F7  0842               	movf	?___ftadd+1,w
  8412  17F8  00CF               	movwf	___fttol@f1+1
  8413  17F9  0843               	movf	?___ftadd+2,w
  8414  17FA  00D0               	movwf	___fttol@f1+2
  8415  17FB  318C  24FA         	fcall	___fttol
  8416  17FD  0020               	movlb	0	; select bank0
  8417  17FE  084E               	movf	?___fttol,w
  8418  17FF  0008               	return
  8419  1800                     __end_of_getPercentValue:	
  8420                           
  8421                           	psect	text35
  8422  0F4C                     __ptext35:	
  8423 ;; *************** function ___ftmul *****************
  8424 ;; Defined at:
  8425 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8426 ;; Parameters:    Size  Location     Type
  8427 ;;  f1              3   14[BANK0 ] float 
  8428 ;;  f2              3   17[BANK0 ] float 
  8429 ;; Auto vars:     Size  Location     Type
  8430 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8431 ;;  sign            1   29[BANK0 ] unsigned char 
  8432 ;;  cntr            1   28[BANK0 ] unsigned char 
  8433 ;;  exp             1   24[BANK0 ] unsigned char 
  8434 ;; Return value:  Size  Location     Type
  8435 ;;                  3   14[BANK0 ] float 
  8436 ;; Registers used:
  8437 ;;		wreg, status,2, status,0, pclath, cstack
  8438 ;; Tracked objects:
  8439 ;;		On entry : 0/0
  8440 ;;		On exit  : 0/0
  8441 ;;		Unchanged: 0/0
  8442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8443 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8444 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8445 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8446 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8447 ;;Total ram usage:       16 bytes
  8448 ;; Hardware stack levels used:    1
  8449 ;; Hardware stack levels required when called:    6
  8450 ;; This function calls:
  8451 ;;		___ftpack
  8452 ;; This function is called by:
  8453 ;;		_getPercentValue
  8454 ;; This function uses a non-reentrant model
  8455 ;;
  8456                           
  8457                           
  8458                           ;psect for function ___ftmul
  8459  0F4C                     ___ftmul:	
  8460                           
  8461                           ;incstack = 0
  8462                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8463  0F4C  0020               	movlb	0	; select bank0
  8464  0F4D  082E               	movf	___ftmul@f1,w
  8465  0F4E  00B4               	movwf	??___ftmul
  8466  0F4F  082F               	movf	___ftmul@f1+1,w
  8467  0F50  00B5               	movwf	??___ftmul+1
  8468  0F51  0830               	movf	___ftmul@f1+2,w
  8469  0F52  00B6               	movwf	??___ftmul+2
  8470  0F53  1003               	clrc
  8471  0F54  0D35               	rlf	??___ftmul+1,w
  8472  0F55  0D36               	rlf	??___ftmul+2,w
  8473  0F56  00B7               	movwf	??___ftmul+3
  8474  0F57  0837               	movf	??___ftmul+3,w
  8475  0F58  00B8               	movwf	___ftmul@exp
  8476  0F59  08B8               	movf	___ftmul@exp,f
  8477  0F5A  1D03               	skipz
  8478  0F5B  2F63               	goto	l5873
  8479  0F5C  3000               	movlw	0
  8480  0F5D  00AE               	movwf	?___ftmul
  8481  0F5E  3000               	movlw	0
  8482  0F5F  00AF               	movwf	?___ftmul+1
  8483  0F60  3000               	movlw	0
  8484  0F61  00B0               	movwf	?___ftmul+2
  8485  0F62  0008               	return
  8486  0F63                     l5873:	
  8487  0F63  0831               	movf	___ftmul@f2,w
  8488  0F64  00B4               	movwf	??___ftmul
  8489  0F65  0832               	movf	___ftmul@f2+1,w
  8490  0F66  00B5               	movwf	??___ftmul+1
  8491  0F67  0833               	movf	___ftmul@f2+2,w
  8492  0F68  00B6               	movwf	??___ftmul+2
  8493  0F69  1003               	clrc
  8494  0F6A  0D35               	rlf	??___ftmul+1,w
  8495  0F6B  0D36               	rlf	??___ftmul+2,w
  8496  0F6C  00B7               	movwf	??___ftmul+3
  8497  0F6D  0837               	movf	??___ftmul+3,w
  8498  0F6E  00BD               	movwf	___ftmul@sign
  8499  0F6F  08BD               	movf	___ftmul@sign,f
  8500  0F70  1D03               	skipz
  8501  0F71  2F79               	goto	l5879
  8502  0F72  3000               	movlw	0
  8503  0F73  00AE               	movwf	?___ftmul
  8504  0F74  3000               	movlw	0
  8505  0F75  00AF               	movwf	?___ftmul+1
  8506  0F76  3000               	movlw	0
  8507  0F77  00B0               	movwf	?___ftmul+2
  8508  0F78  0008               	return
  8509  0F79                     l5879:	
  8510  0F79  083D               	movf	___ftmul@sign,w
  8511  0F7A  3E7B               	addlw	123
  8512  0F7B  00B4               	movwf	??___ftmul
  8513  0F7C  0834               	movf	??___ftmul,w
  8514  0F7D  07B8               	addwf	___ftmul@exp,f
  8515  0F7E  082E               	movf	___ftmul@f1,w
  8516  0F7F  00B4               	movwf	??___ftmul
  8517  0F80  082F               	movf	___ftmul@f1+1,w
  8518  0F81  00B5               	movwf	??___ftmul+1
  8519  0F82  0830               	movf	___ftmul@f1+2,w
  8520  0F83  00B6               	movwf	??___ftmul+2
  8521  0F84  3010               	movlw	16
  8522  0F85                     u4675:	
  8523  0F85  36B6               	lsrf	??___ftmul+2,f
  8524  0F86  0CB5               	rrf	??___ftmul+1,f
  8525  0F87  0CB4               	rrf	??___ftmul,f
  8526  0F88  0B89               	decfsz	9,f
  8527  0F89  2F85               	goto	u4675
  8528  0F8A  0834               	movf	??___ftmul,w
  8529  0F8B  00B7               	movwf	??___ftmul+3
  8530  0F8C  0837               	movf	??___ftmul+3,w
  8531  0F8D  00BD               	movwf	___ftmul@sign
  8532  0F8E  0831               	movf	___ftmul@f2,w
  8533  0F8F  00B4               	movwf	??___ftmul
  8534  0F90  0832               	movf	___ftmul@f2+1,w
  8535  0F91  00B5               	movwf	??___ftmul+1
  8536  0F92  0833               	movf	___ftmul@f2+2,w
  8537  0F93  00B6               	movwf	??___ftmul+2
  8538  0F94  3010               	movlw	16
  8539  0F95                     u4685:	
  8540  0F95  36B6               	lsrf	??___ftmul+2,f
  8541  0F96  0CB5               	rrf	??___ftmul+1,f
  8542  0F97  0CB4               	rrf	??___ftmul,f
  8543  0F98  0B89               	decfsz	9,f
  8544  0F99  2F95               	goto	u4685
  8545  0F9A  0834               	movf	??___ftmul,w
  8546  0F9B  00B7               	movwf	??___ftmul+3
  8547  0F9C  0837               	movf	??___ftmul+3,w
  8548  0F9D  06BD               	xorwf	___ftmul@sign,f
  8549  0F9E  3080               	movlw	128
  8550  0F9F  00B4               	movwf	??___ftmul
  8551  0FA0  0834               	movf	??___ftmul,w
  8552  0FA1  05BD               	andwf	___ftmul@sign,f
  8553  0FA2  17AF               	bsf	___ftmul@f1+1,7
  8554  0FA3  17B2               	bsf	___ftmul@f2+1,7
  8555  0FA4  30FF               	movlw	255
  8556  0FA5  05B1               	andwf	___ftmul@f2,f
  8557  0FA6  30FF               	movlw	255
  8558  0FA7  05B2               	andwf	___ftmul@f2+1,f
  8559  0FA8  3000               	movlw	0
  8560  0FA9  05B3               	andwf	___ftmul@f2+2,f
  8561  0FAA  3000               	movlw	0
  8562  0FAB  00B9               	movwf	___ftmul@f3_as_product
  8563  0FAC  3000               	movlw	0
  8564  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  8565  0FAE  3000               	movlw	0
  8566  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  8567  0FB0  3007               	movlw	7
  8568  0FB1  00B4               	movwf	??___ftmul
  8569  0FB2  0834               	movf	??___ftmul,w
  8570  0FB3  00BC               	movwf	___ftmul@cntr
  8571  0FB4                     l5891:	
  8572  0FB4  1C2E               	btfss	___ftmul@f1,0
  8573  0FB5  2FBC               	goto	l5895
  8574  0FB6  0831               	movf	___ftmul@f2,w
  8575  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  8576  0FB8  0832               	movf	___ftmul@f2+1,w
  8577  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8578  0FBA  0833               	movf	___ftmul@f2+2,w
  8579  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8580  0FBC                     l5895:	
  8581  0FBC  3001               	movlw	1
  8582  0FBD                     u4705:	
  8583  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  8584  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  8585  0FBF  0CAE               	rrf	___ftmul@f1,f
  8586  0FC0  0B89               	decfsz	9,f
  8587  0FC1  2FBD               	goto	u4705
  8588  0FC2  3001               	movlw	1
  8589  0FC3                     u4715:	
  8590  0FC3  35B1               	lslf	___ftmul@f2,f
  8591  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  8592  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  8593  0FC6  0B89               	decfsz	9,f
  8594  0FC7  2FC3               	goto	u4715
  8595  0FC8  3001               	movlw	1
  8596  0FC9  02BC               	subwf	___ftmul@cntr,f
  8597  0FCA  1D03               	btfss	3,2
  8598  0FCB  2FB4               	goto	l5891
  8599  0FCC  3009               	movlw	9
  8600  0FCD  00B4               	movwf	??___ftmul
  8601  0FCE  0834               	movf	??___ftmul,w
  8602  0FCF  00BC               	movwf	___ftmul@cntr
  8603  0FD0                     l5903:	
  8604  0FD0  1C2E               	btfss	___ftmul@f1,0
  8605  0FD1  2FD8               	goto	l5907
  8606  0FD2  0831               	movf	___ftmul@f2,w
  8607  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  8608  0FD4  0832               	movf	___ftmul@f2+1,w
  8609  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8610  0FD6  0833               	movf	___ftmul@f2+2,w
  8611  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8612  0FD8                     l5907:	
  8613  0FD8  3001               	movlw	1
  8614  0FD9                     u4745:	
  8615  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  8616  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  8617  0FDB  0CAE               	rrf	___ftmul@f1,f
  8618  0FDC  0B89               	decfsz	9,f
  8619  0FDD  2FD9               	goto	u4745
  8620  0FDE  3001               	movlw	1
  8621  0FDF                     u4755:	
  8622  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8623  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8624  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  8625  0FE2  0B89               	decfsz	9,f
  8626  0FE3  2FDF               	goto	u4755
  8627  0FE4  3001               	movlw	1
  8628  0FE5  02BC               	subwf	___ftmul@cntr,f
  8629  0FE6  1D03               	btfss	3,2
  8630  0FE7  2FD0               	goto	l5903
  8631  0FE8  0839               	movf	___ftmul@f3_as_product,w
  8632  0FE9  00A0               	movwf	___ftpack@arg
  8633  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  8634  0FEB  00A1               	movwf	___ftpack@arg+1
  8635  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  8636  0FED  00A2               	movwf	___ftpack@arg+2
  8637  0FEE  0838               	movf	___ftmul@exp,w
  8638  0FEF  00B4               	movwf	??___ftmul
  8639  0FF0  0834               	movf	??___ftmul,w
  8640  0FF1  00A3               	movwf	___ftpack@exp
  8641  0FF2  083D               	movf	___ftmul@sign,w
  8642  0FF3  00B5               	movwf	??___ftmul+1
  8643  0FF4  0835               	movf	??___ftmul+1,w
  8644  0FF5  00A4               	movwf	___ftpack@sign
  8645  0FF6  3189  218C         	fcall	___ftpack
  8646  0FF8  0020               	movlb	0	; select bank0
  8647  0FF9  0820               	movf	?___ftpack,w
  8648  0FFA  00AE               	movwf	?___ftmul
  8649  0FFB  0821               	movf	?___ftpack+1,w
  8650  0FFC  00AF               	movwf	?___ftmul+1
  8651  0FFD  0822               	movf	?___ftpack+2,w
  8652  0FFE  00B0               	movwf	?___ftmul+2
  8653  0FFF  0008               	return
  8654  1000                     __end_of___ftmul:	
  8655                           
  8656                           	psect	text36
  8657  1D11                     __ptext36:	
  8658 ;; *************** function _setMemory_Modify *****************
  8659 ;; Defined at:
  8660 ;;		line 1000 in file "../src/MCU_B1.c"
  8661 ;; Parameters:    Size  Location     Type
  8662 ;;  command         1    wreg     unsigned char 
  8663 ;; Auto vars:     Size  Location     Type
  8664 ;;  command         1    1[BANK0 ] unsigned char 
  8665 ;; Return value:  Size  Location     Type
  8666 ;;		None               void
  8667 ;; Registers used:
  8668 ;;		wreg, status,2, status,0
  8669 ;; Tracked objects:
  8670 ;;		On entry : 0/0
  8671 ;;		On exit  : 0/0
  8672 ;;		Unchanged: 0/0
  8673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8675 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8676 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8677 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8678 ;;Total ram usage:        2 bytes
  8679 ;; Hardware stack levels used:    1
  8680 ;; Hardware stack levels required when called:    5
  8681 ;; This function calls:
  8682 ;;		Nothing
  8683 ;; This function is called by:
  8684 ;;		_setLog_Code
  8685 ;;		_setRFSW_AdjControl
  8686 ;; This function uses a non-reentrant model
  8687 ;;
  8688                           
  8689                           
  8690                           ;psect for function _setMemory_Modify
  8691  1D11                     _setMemory_Modify:	
  8692                           
  8693                           ;incstack = 0
  8694                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8695                           ;setMemory_Modify@command stored from wreg
  8696  1D11  0020               	movlb	0	; select bank0
  8697  1D12  00A1               	movwf	setMemory_Modify@command
  8698                           
  8699                           ;MCU_B1.c: 1001: Memory.Modify = command == 1 ? 1 : 0;
  8700  1D13  0821               	movf	setMemory_Modify@command,w
  8701  1D14  3A01               	xorlw	1
  8702  1D15  3000               	movlw	0
  8703  1D16  1903               	skipnz
  8704  1D17  3001               	movlw	1
  8705  1D18  00A0               	movwf	??_setMemory_Modify
  8706  1D19  0024               	movlb	4	; select bank4
  8707  1D1A  0844               	movf	(_Memory^(0+512)+36),w
  8708  1D1B  0020               	movlb	0	; select bank0
  8709  1D1C  0620               	xorwf	??_setMemory_Modify,w
  8710  1D1D  39FE               	andlw	-2
  8711  1D1E  0620               	xorwf	??_setMemory_Modify,w
  8712  1D1F  0024               	movlb	4	; select bank4
  8713  1D20  00C4               	movwf	(_Memory^(0+512)+36)
  8714                           
  8715                           ;MCU_B1.c: 1002: Memory.Time = 0;
  8716  1D21  01C2               	clrf	(_Memory^(0+512)+34)
  8717  1D22  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8718  1D23  0008               	return
  8719  1D24                     __end_of_setMemory_Modify:	
  8720                           
  8721                           	psect	text37
  8722  1CB7                     __ptext37:	
  8723 ;; *************** function _getRF_KeyStatus *****************
  8724 ;; Defined at:
  8725 ;;		line 187 in file "../src/RF_Control_B1.c"
  8726 ;; Parameters:    Size  Location     Type
  8727 ;;		None
  8728 ;; Auto vars:     Size  Location     Type
  8729 ;;  key             1    1[BANK0 ] unsigned char 
  8730 ;; Return value:  Size  Location     Type
  8731 ;;                  1    wreg      unsigned char 
  8732 ;; Registers used:
  8733 ;;		wreg, status,2
  8734 ;; Tracked objects:
  8735 ;;		On entry : 0/0
  8736 ;;		On exit  : 0/0
  8737 ;;		Unchanged: 0/0
  8738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8740 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8741 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8742 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8743 ;;Total ram usage:        3 bytes
  8744 ;; Hardware stack levels used:    1
  8745 ;; Hardware stack levels required when called:    5
  8746 ;; This function calls:
  8747 ;;		Nothing
  8748 ;; This function is called by:
  8749 ;;		_setRF_Main
  8750 ;; This function uses a non-reentrant model
  8751 ;;
  8752                           
  8753                           
  8754                           ;psect for function _getRF_KeyStatus
  8755  1CB7                     _getRF_KeyStatus:	
  8756                           
  8757                           ;RF_Control_B1.c: 188: char key = 0;
  8758                           
  8759                           ;incstack = 0
  8760                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8761  1CB7  0020               	movlb	0	; select bank0
  8762  1CB8  01A1               	clrf	getRF_KeyStatus@key
  8763                           
  8764                           ;RF_Control_B1.c: 194: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8765  1CB9  01A2               	clrf	_getRF_KeyStatus$5256
  8766  1CBA  0AA2               	incf	_getRF_KeyStatus$5256,f
  8767  1CBB  1F0C               	btfss	12,6	;volatile
  8768  1CBC  1A0C               	btfsc	12,4	;volatile
  8769  1CBD  2CC2               	goto	l6909
  8770  1CBE  1C0C               	btfss	12,0	;volatile
  8771  1CBF  188D               	btfsc	13,1	;volatile
  8772  1CC0  2CC2               	goto	l6909
  8773  1CC1  01A2               	clrf	_getRF_KeyStatus$5256
  8774  1CC2                     l6909:	
  8775  1CC2  0822               	movf	_getRF_KeyStatus$5256,w
  8776  1CC3  00A0               	movwf	??_getRF_KeyStatus
  8777  1CC4  0820               	movf	??_getRF_KeyStatus,w
  8778  1CC5  00A1               	movwf	getRF_KeyStatus@key
  8779                           
  8780                           ;RF_Control_B1.c: 200: return key;
  8781  1CC6  0821               	movf	getRF_KeyStatus@key,w
  8782  1CC7  0008               	return
  8783  1CC8                     __end_of_getRF_KeyStatus:	
  8784                           
  8785                           	psect	text38
  8786  1CA6                     __ptext38:	
  8787 ;; *************** function _getBuz_GO *****************
  8788 ;; Defined at:
  8789 ;;		line 82 in file "../src/Buzzer_B1.c"
  8790 ;; Parameters:    Size  Location     Type
  8791 ;;		None
  8792 ;; Auto vars:     Size  Location     Type
  8793 ;;  i               2    4[BANK0 ] int 
  8794 ;; Return value:  Size  Location     Type
  8795 ;;                  2    0[BANK0 ] int 
  8796 ;; Registers used:
  8797 ;;		wreg, status,2, status,0
  8798 ;; Tracked objects:
  8799 ;;		On entry : 0/0
  8800 ;;		On exit  : 0/0
  8801 ;;		Unchanged: 0/0
  8802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8803 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8806 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8807 ;;Total ram usage:        6 bytes
  8808 ;; Hardware stack levels used:    1
  8809 ;; Hardware stack levels required when called:    5
  8810 ;; This function calls:
  8811 ;;		Nothing
  8812 ;; This function is called by:
  8813 ;;		_setRF_Main
  8814 ;; This function uses a non-reentrant model
  8815 ;;
  8816                           
  8817                           
  8818                           ;psect for function _getBuz_GO
  8819  1CA6                     _getBuz_GO:	
  8820                           
  8821                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8822                           
  8823                           ;incstack = 0
  8824                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8825  1CA6  0021               	movlb	1	; select bank1
  8826  1CA7  0C30               	rrf	_Buz1^(0+128),w
  8827  1CA8  3901               	andlw	1
  8828  1CA9  0020               	movlb	0	; select bank0
  8829  1CAA  00A2               	movwf	??_getBuz_GO
  8830  1CAB  01A3               	clrf	??_getBuz_GO+1
  8831  1CAC  0822               	movf	??_getBuz_GO,w
  8832  1CAD  00A4               	movwf	getBuz_GO@i
  8833  1CAE  0823               	movf	??_getBuz_GO+1,w
  8834  1CAF  00A5               	movwf	getBuz_GO@i+1
  8835                           
  8836                           ;Buzzer_B1.c: 84: return i;
  8837  1CB0  0825               	movf	getBuz_GO@i+1,w
  8838  1CB1  01A1               	clrf	?_getBuz_GO+1
  8839  1CB2  07A1               	addwf	?_getBuz_GO+1,f
  8840  1CB3  0824               	movf	getBuz_GO@i,w
  8841  1CB4  01A0               	clrf	?_getBuz_GO
  8842  1CB5  07A0               	addwf	?_getBuz_GO,f
  8843  1CB6  0008               	return
  8844  1CB7                     __end_of_getBuz_GO:	
  8845                           
  8846                           	psect	text39
  8847  0AB8                     __ptext39:	
  8848 ;; *************** function _CC2500_TxData *****************
  8849 ;; Defined at:
  8850 ;;		line 32 in file "../src/CC2500_B1.c"
  8851 ;; Parameters:    Size  Location     Type
  8852 ;;		None
  8853 ;; Auto vars:     Size  Location     Type
  8854 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8855 ;; Return value:  Size  Location     Type
  8856 ;;		None               void
  8857 ;; Registers used:
  8858 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8859 ;; Tracked objects:
  8860 ;;		On entry : 0/0
  8861 ;;		On exit  : 0/0
  8862 ;;		Unchanged: 0/0
  8863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8865 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8866 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8868 ;;Total ram usage:        2 bytes
  8869 ;; Hardware stack levels used:    1
  8870 ;; Hardware stack levels required when called:    7
  8871 ;; This function calls:
  8872 ;;		_CC2500_WriteByte
  8873 ;;		_CC2500_WriteCommand
  8874 ;;		_Timeout_Counter
  8875 ;;		_set_TimeoutCleared
  8876 ;; This function is called by:
  8877 ;;		_setRF_Main
  8878 ;; This function uses a non-reentrant model
  8879 ;;
  8880                           
  8881                           
  8882                           ;psect for function _CC2500_TxData
  8883  0AB8                     _CC2500_TxData:	
  8884                           
  8885                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8886                           ;CC2500_B1.c: 35: RC4 = 0;
  8887                           
  8888                           ;incstack = 0
  8889                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8890  0AB8  0020               	movlb	0	; select bank0
  8891  0AB9  120E               	bcf	14,4	;volatile
  8892                           
  8893                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8894  0ABA  307F               	movlw	127
  8895  0ABB  00A4               	movwf	??_CC2500_TxData
  8896  0ABC  0824               	movf	??_CC2500_TxData,w
  8897  0ABD  0021               	movlb	1	; select bank1
  8898  0ABE  00D0               	movwf	_SPI0Buffer^(0+128)
  8899                           
  8900                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8901  0ABF  2AC3               	goto	l8681
  8902  0AC0                     l8679:	
  8903                           
  8904                           ;CC2500_B1.c: 38: Timeout_Counter();
  8905  0AC0  319D  259A  318A   	fcall	_Timeout_Counter
  8906  0AC3                     l8681:	
  8907  0AC3  0020               	movlb	0	; select bank0
  8908  0AC4  1D0E               	btfss	14,2	;volatile
  8909  0AC5  2AC9               	goto	l8685
  8910  0AC6  0021               	movlb	1	; select bank1
  8911  0AC7  1D2D               	btfss	(_myMain^(0+128)+13),2
  8912  0AC8  2AC0               	goto	l8679
  8913  0AC9                     l8685:	
  8914                           
  8915                           ;CC2500_B1.c: 39: };
  8916                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8917  0AC9  319B  2367  318A   	fcall	_set_TimeoutCleared
  8918                           
  8919                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8920  0ACC  319E  261B  318A   	fcall	_CC2500_WriteByte
  8921                           
  8922                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8923  0ACF  0021               	movlb	1	; select bank1
  8924  0AD0  0852               	movf	_Tx_Length^(0+128),w
  8925  0AD1  0020               	movlb	0	; select bank0
  8926  0AD2  00A4               	movwf	??_CC2500_TxData
  8927  0AD3  0824               	movf	??_CC2500_TxData,w
  8928  0AD4  0021               	movlb	1	; select bank1
  8929  0AD5  00D0               	movwf	_SPI0Buffer^(0+128)
  8930                           
  8931                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8932  0AD6  319E  261B  318A   	fcall	_CC2500_WriteByte
  8933                           
  8934                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8935  0AD9  0020               	movlb	0	; select bank0
  8936  0ADA  01A5               	clrf	CC2500_TxData@loop_e
  8937  0ADB                     l8699:	
  8938  0ADB  0021               	movlb	1	; select bank1
  8939  0ADC  0852               	movf	_Tx_Length^(0+128),w
  8940  0ADD  0020               	movlb	0	; select bank0
  8941  0ADE  0225               	subwf	CC2500_TxData@loop_e,w
  8942  0ADF  1803               	btfsc	3,0
  8943  0AE0  2AF4               	goto	l255
  8944                           
  8945                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8946  0AE1  0825               	movf	CC2500_TxData@loop_e,w
  8947  0AE2  3EA0               	addlw	_RF_Data& (0+255)
  8948  0AE3  0086               	movwf	6
  8949  0AE4  3001               	movlw	1	; select bank3/4
  8950  0AE5  0087               	movwf	7
  8951  0AE6  0801               	movf	1,w
  8952  0AE7  00A4               	movwf	??_CC2500_TxData
  8953  0AE8  0824               	movf	??_CC2500_TxData,w
  8954  0AE9  0021               	movlb	1	; select bank1
  8955  0AEA  00D0               	movwf	_SPI0Buffer^(0+128)
  8956                           
  8957                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8958  0AEB  319E  261B  318A   	fcall	_CC2500_WriteByte
  8959  0AEE  3001               	movlw	1
  8960  0AEF  0020               	movlb	0	; select bank0
  8961  0AF0  00A4               	movwf	??_CC2500_TxData
  8962  0AF1  0824               	movf	??_CC2500_TxData,w
  8963  0AF2  07A5               	addwf	CC2500_TxData@loop_e,f
  8964  0AF3  2ADB               	goto	l8699
  8965  0AF4                     l255:	
  8966                           
  8967                           ;CC2500_B1.c: 48: }
  8968                           ;CC2500_B1.c: 49: RC4 = 1;
  8969  0AF4  160E               	bsf	14,4	;volatile
  8970                           
  8971                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8972  0AF5  3035               	movlw	53
  8973  0AF6  319E  264D  318A   	fcall	_CC2500_WriteCommand
  8974                           
  8975                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  8976  0AF9  2AFD               	goto	l8705
  8977  0AFA                     l8703:	
  8978                           
  8979                           ;CC2500_B1.c: 52: Timeout_Counter();
  8980  0AFA  319D  259A  318A   	fcall	_Timeout_Counter
  8981  0AFD                     l8705:	
  8982  0AFD  0020               	movlb	0	; select bank0
  8983  0AFE  180D               	btfsc	13,0	;volatile
  8984  0AFF  2B03               	goto	l8709
  8985  0B00  0021               	movlb	1	; select bank1
  8986  0B01  1D2D               	btfss	(_myMain^(0+128)+13),2
  8987  0B02  2AFA               	goto	l8703
  8988  0B03                     l8709:	
  8989                           
  8990                           ;CC2500_B1.c: 53: };
  8991                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8992  0B03  319B  2367  318A   	fcall	_set_TimeoutCleared
  8993                           
  8994                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  8995  0B06  2B0A               	goto	l8713
  8996  0B07                     l8711:	
  8997                           
  8998                           ;CC2500_B1.c: 57: Timeout_Counter();
  8999  0B07  319D  259A  318A   	fcall	_Timeout_Counter
  9000  0B0A                     l8713:	
  9001  0B0A  0020               	movlb	0	; select bank0
  9002  0B0B  1C0D               	btfss	13,0	;volatile
  9003  0B0C  2B10               	goto	l8717
  9004  0B0D  0021               	movlb	1	; select bank1
  9005  0B0E  1D2D               	btfss	(_myMain^(0+128)+13),2
  9006  0B0F  2B07               	goto	l8711
  9007  0B10                     l8717:	
  9008                           
  9009                           ;CC2500_B1.c: 58: };
  9010                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9011  0B10  319B  2367  318A   	fcall	_set_TimeoutCleared
  9012                           
  9013                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9014  0B13  3036               	movlw	54
  9015  0B14  319E  264D  318A   	fcall	_CC2500_WriteCommand
  9016                           
  9017                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9018  0B17  303B               	movlw	59
  9019  0B18  319E  264D  318A   	fcall	_CC2500_WriteCommand
  9020                           
  9021                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  9022  0B1B  303A               	movlw	58
  9023  0B1C  319E  264D         	fcall	_CC2500_WriteCommand
  9024                           
  9025                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9026  0B1E  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9027  0B1F  0008               	return
  9028  0B20                     __end_of_CC2500_TxData:	
  9029                           
  9030                           	psect	text40
  9031  0C03                     __ptext40:	
  9032 ;; *************** function _CC2500_RxData *****************
  9033 ;; Defined at:
  9034 ;;		line 70 in file "../src/CC2500_B1.c"
  9035 ;; Parameters:    Size  Location     Type
  9036 ;;		None
  9037 ;; Auto vars:     Size  Location     Type
  9038 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9039 ;; Return value:  Size  Location     Type
  9040 ;;		None               void
  9041 ;; Registers used:
  9042 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9043 ;; Tracked objects:
  9044 ;;		On entry : 0/0
  9045 ;;		On exit  : 0/0
  9046 ;;		Unchanged: 0/0
  9047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9049 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9050 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9051 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9052 ;;Total ram usage:        2 bytes
  9053 ;; Hardware stack levels used:    1
  9054 ;; Hardware stack levels required when called:    7
  9055 ;; This function calls:
  9056 ;;		_CC2500_ReadByte
  9057 ;;		_CC2500_ReadStatus
  9058 ;;		_CC2500_WriteByte
  9059 ;;		_Timeout_Counter
  9060 ;;		_set_TimeoutCleared
  9061 ;; This function is called by:
  9062 ;;		_setRF_Main
  9063 ;; This function uses a non-reentrant model
  9064 ;;
  9065                           
  9066                           
  9067                           ;psect for function _CC2500_RxData
  9068  0C03                     _CC2500_RxData:	
  9069                           
  9070                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9071                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9072                           
  9073                           ;incstack = 0
  9074                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9075  0C03  0020               	movlb	0	; select bank0
  9076  0C04  180D               	btfsc	13,0	;volatile
  9077  0C05  2C0A               	goto	l8733
  9078  0C06  2C13               	goto	l8739
  9079  0C07                     l8731:	
  9080                           ;CC2500_B1.c: 76: {
  9081                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9082                           
  9083                           
  9084                           ;CC2500_B1.c: 78: Timeout_Counter();
  9085  0C07  319D  259A  318C   	fcall	_Timeout_Counter
  9086  0C0A                     l8733:	
  9087  0C0A  0020               	movlb	0	; select bank0
  9088  0C0B  1C0D               	btfss	13,0	;volatile
  9089  0C0C  2C10               	goto	l8737
  9090  0C0D  0021               	movlb	1	; select bank1
  9091  0C0E  1D2D               	btfss	(_myMain^(0+128)+13),2
  9092  0C0F  2C07               	goto	l8731
  9093  0C10                     l8737:	
  9094                           
  9095                           ;CC2500_B1.c: 79: };
  9096                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9097  0C10  319B  2367  318C   	fcall	_set_TimeoutCleared
  9098  0C13                     l8739:	
  9099                           
  9100                           ;CC2500_B1.c: 81: }
  9101                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9102  0C13  303B               	movlw	59
  9103  0C14  3190  2083  318C   	fcall	_CC2500_ReadStatus
  9104                           
  9105                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9106  0C17  0021               	movlb	1	; select bank1
  9107  0C18  0855               	movf	_s_data^(0+128),w
  9108  0C19  1903               	btfsc	3,2
  9109  0C1A  0008               	return
  9110                           
  9111                           ;CC2500_B1.c: 86: RC4 = 0;
  9112  0C1B  0020               	movlb	0	; select bank0
  9113  0C1C  120E               	bcf	14,4	;volatile
  9114                           
  9115                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9116  0C1D  30FF               	movlw	255
  9117  0C1E  00A4               	movwf	??_CC2500_RxData
  9118  0C1F  0824               	movf	??_CC2500_RxData,w
  9119  0C20  0021               	movlb	1	; select bank1
  9120  0C21  00D0               	movwf	_SPI0Buffer^(0+128)
  9121                           
  9122                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9123  0C22  2C29               	goto	l8749
  9124  0C23                     l8751:	
  9125  0C23  0021               	movlb	1	; select bank1
  9126  0C24  192D               	btfsc	(_myMain^(0+128)+13),2
  9127  0C25  2C2C               	goto	l280
  9128                           
  9129                           ;CC2500_B1.c: 89: Timeout_Counter();
  9130  0C26  319D  259A  318C   	fcall	_Timeout_Counter
  9131  0C29                     l8749:	
  9132  0C29  0020               	movlb	0	; select bank0
  9133  0C2A  190E               	btfsc	14,2	;volatile
  9134  0C2B  2C23               	goto	l8751
  9135  0C2C                     l280:	
  9136                           
  9137                           ;CC2500_B1.c: 90: };
  9138                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  9139  0C2C  0021               	movlb	1	; select bank1
  9140  0C2D  192D               	btfsc	(_myMain^(0+128)+13),2
  9141  0C2E  2C73               	goto	l281
  9142                           
  9143                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9144  0C2F  319E  261B  318C   	fcall	_CC2500_WriteByte
  9145                           
  9146                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9147  0C32  3190  2066  318C   	fcall	_CC2500_ReadByte
  9148                           
  9149                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9150  0C35  0021               	movlb	1	; select bank1
  9151  0C36  0850               	movf	_SPI0Buffer^(0+128),w
  9152  0C37  0020               	movlb	0	; select bank0
  9153  0C38  00A4               	movwf	??_CC2500_RxData
  9154  0C39  0824               	movf	??_CC2500_RxData,w
  9155  0C3A  0021               	movlb	1	; select bank1
  9156  0C3B  00CF               	movwf	_Rx_Length^(0+128)
  9157                           
  9158                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9159  0C3C  0020               	movlb	0	; select bank0
  9160  0C3D  01A5               	clrf	CC2500_RxData@loop_f
  9161  0C3E                     l8765:	
  9162  0C3E  0021               	movlb	1	; select bank1
  9163  0C3F  084F               	movf	_Rx_Length^(0+128),w
  9164  0C40  0020               	movlb	0	; select bank0
  9165  0C41  0225               	subwf	CC2500_RxData@loop_f,w
  9166  0C42  1803               	btfsc	3,0
  9167  0C43  2C57               	goto	l8767
  9168                           
  9169                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9170  0C44  3190  2066  318C   	fcall	_CC2500_ReadByte
  9171                           
  9172                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9173  0C47  0021               	movlb	1	; select bank1
  9174  0C48  0850               	movf	_SPI0Buffer^(0+128),w
  9175  0C49  0020               	movlb	0	; select bank0
  9176  0C4A  00A4               	movwf	??_CC2500_RxData
  9177  0C4B  0825               	movf	CC2500_RxData@loop_f,w
  9178  0C4C  3EA0               	addlw	_RF_Data& (0+255)
  9179  0C4D  0086               	movwf	6
  9180  0C4E  3001               	movlw	1	; select bank3/4
  9181  0C4F  0087               	movwf	7
  9182  0C50  0824               	movf	??_CC2500_RxData,w
  9183  0C51  0081               	movwf	1
  9184  0C52  3001               	movlw	1
  9185  0C53  00A4               	movwf	??_CC2500_RxData
  9186  0C54  0824               	movf	??_CC2500_RxData,w
  9187  0C55  07A5               	addwf	CC2500_RxData@loop_f,f
  9188  0C56  2C3E               	goto	l8765
  9189  0C57                     l8767:	
  9190                           
  9191                           ;CC2500_B1.c: 99: }
  9192                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9193  0C57  3190  2066  318C   	fcall	_CC2500_ReadByte
  9194                           
  9195                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9196  0C5A  0021               	movlb	1	; select bank1
  9197  0C5B  0850               	movf	_SPI0Buffer^(0+128),w
  9198  0C5C  0020               	movlb	0	; select bank0
  9199  0C5D  00A4               	movwf	??_CC2500_RxData
  9200  0C5E  0824               	movf	??_CC2500_RxData,w
  9201  0C5F  0021               	movlb	1	; select bank1
  9202  0C60  00CE               	movwf	_RSSI^(0+128)
  9203                           
  9204                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9205  0C61  3190  2066  318C   	fcall	_CC2500_ReadByte
  9206                           
  9207                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9208  0C64  0021               	movlb	1	; select bank1
  9209  0C65  0850               	movf	_SPI0Buffer^(0+128),w
  9210  0C66  0020               	movlb	0	; select bank0
  9211  0C67  00A4               	movwf	??_CC2500_RxData
  9212  0C68  0824               	movf	??_CC2500_RxData,w
  9213  0C69  0021               	movlb	1	; select bank1
  9214  0C6A  00CA               	movwf	_CRC^(0+128)
  9215                           
  9216                           ;CC2500_B1.c: 104: RC4 = 1;
  9217  0C6B  0020               	movlb	0	; select bank0
  9218  0C6C  160E               	bsf	14,4	;volatile
  9219                           
  9220                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9221  0C6D  0021               	movlb	1	; select bank1
  9222  0C6E  1BCA               	btfsc	_CRC^(0+128),7
  9223                           
  9224                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9225  0C6F  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9226                           
  9227                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9228  0C70  11BC               	bcf	_RF1^(0+128),3
  9229                           
  9230                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9231  0C71  14BC               	bsf	_RF1^(0+128),1
  9232                           
  9233                           ;CC2500_B1.c: 110: } else {
  9234  0C72  2C75               	goto	l8779
  9235  0C73                     l281:	
  9236                           
  9237                           ;CC2500_B1.c: 111: RC4 = 1;
  9238  0C73  0020               	movlb	0	; select bank0
  9239  0C74  160E               	bsf	14,4	;volatile
  9240  0C75                     l8779:	
  9241                           
  9242                           ;CC2500_B1.c: 112: }
  9243                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  9244  0C75  319B  2367         	fcall	_set_TimeoutCleared
  9245  0C77  0021               	movlb	1	; select bank1
  9246  0C78  0008               	return
  9247  0C79                     __end_of_CC2500_RxData:	
  9248                           
  9249                           	psect	text41
  9250  1083                     __ptext41:	
  9251 ;; *************** function _CC2500_ReadStatus *****************
  9252 ;; Defined at:
  9253 ;;		line 304 in file "../src/CC2500_B1.c"
  9254 ;; Parameters:    Size  Location     Type
  9255 ;;  status_addr     1    wreg     unsigned char 
  9256 ;; Auto vars:     Size  Location     Type
  9257 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9258 ;; Return value:  Size  Location     Type
  9259 ;;		None               void
  9260 ;; Registers used:
  9261 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9262 ;; Tracked objects:
  9263 ;;		On entry : 0/0
  9264 ;;		On exit  : 0/0
  9265 ;;		Unchanged: 0/0
  9266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9269 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9270 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9271 ;;Total ram usage:        2 bytes
  9272 ;; Hardware stack levels used:    1
  9273 ;; Hardware stack levels required when called:    6
  9274 ;; This function calls:
  9275 ;;		_CC2500_ReadByte
  9276 ;;		_CC2500_WriteByte
  9277 ;;		_Timeout_Counter
  9278 ;;		_set_TimeoutCleared
  9279 ;; This function is called by:
  9280 ;;		_CC2500_RxData
  9281 ;;		_setRF_Main
  9282 ;; This function uses a non-reentrant model
  9283 ;;
  9284                           
  9285                           
  9286                           ;psect for function _CC2500_ReadStatus
  9287  1083                     _CC2500_ReadStatus:	
  9288                           
  9289                           ;incstack = 0
  9290                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9291                           ;CC2500_ReadStatus@status_addr stored from wreg
  9292  1083  0020               	movlb	0	; select bank0
  9293  1084  00A3               	movwf	CC2500_ReadStatus@status_addr
  9294                           
  9295                           ;CC2500_B1.c: 305: RC4 = 0;
  9296  1085  120E               	bcf	14,4	;volatile
  9297                           
  9298                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  9299  1086  0823               	movf	CC2500_ReadStatus@status_addr,w
  9300  1087  3EC0               	addlw	192
  9301  1088  00A2               	movwf	??_CC2500_ReadStatus
  9302  1089  0822               	movf	??_CC2500_ReadStatus,w
  9303  108A  0021               	movlb	1	; select bank1
  9304  108B  00D0               	movwf	_SPI0Buffer^(0+128)
  9305                           
  9306                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  9307  108C  2890               	goto	l8619
  9308  108D                     l8617:	
  9309                           
  9310                           ;CC2500_B1.c: 309: Timeout_Counter();
  9311  108D  319D  259A  3190   	fcall	_Timeout_Counter
  9312  1090                     l8619:	
  9313  1090  0020               	movlb	0	; select bank0
  9314  1091  1D0E               	btfss	14,2	;volatile
  9315  1092  2896               	goto	l8623
  9316  1093  0021               	movlb	1	; select bank1
  9317  1094  1D2D               	btfss	(_myMain^(0+128)+13),2
  9318  1095  288D               	goto	l8617
  9319  1096                     l8623:	
  9320                           
  9321                           ;CC2500_B1.c: 310: };
  9322                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  9323  1096  319B  2367  3190   	fcall	_set_TimeoutCleared
  9324                           
  9325                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  9326  1099  319E  261B  3190   	fcall	_CC2500_WriteByte
  9327                           
  9328                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  9329  109C  3190  2066         	fcall	_CC2500_ReadByte
  9330                           
  9331                           ;CC2500_B1.c: 315: RC4 = 1;
  9332  109E  0020               	movlb	0	; select bank0
  9333  109F  160E               	bsf	14,4	;volatile
  9334                           
  9335                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  9336  10A0  0021               	movlb	1	; select bank1
  9337  10A1  0850               	movf	_SPI0Buffer^(0+128),w
  9338  10A2  0020               	movlb	0	; select bank0
  9339  10A3  00A2               	movwf	??_CC2500_ReadStatus
  9340  10A4  0822               	movf	??_CC2500_ReadStatus,w
  9341  10A5  0021               	movlb	1	; select bank1
  9342  10A6  00D5               	movwf	_s_data^(0+128)
  9343  10A7  0008               	return
  9344  10A8                     __end_of_CC2500_ReadStatus:	
  9345                           
  9346                           	psect	text42
  9347  1066                     __ptext42:	
  9348 ;; *************** function _CC2500_ReadByte *****************
  9349 ;; Defined at:
  9350 ;;		line 238 in file "../src/CC2500_B1.c"
  9351 ;; Parameters:    Size  Location     Type
  9352 ;;		None
  9353 ;; Auto vars:     Size  Location     Type
  9354 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9355 ;; Return value:  Size  Location     Type
  9356 ;;		None               void
  9357 ;; Registers used:
  9358 ;;		wreg, status,2, status,0
  9359 ;; Tracked objects:
  9360 ;;		On entry : 0/0
  9361 ;;		On exit  : 0/0
  9362 ;;		Unchanged: 0/0
  9363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9365 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9366 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9367 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9368 ;;Total ram usage:        2 bytes
  9369 ;; Hardware stack levels used:    1
  9370 ;; Hardware stack levels required when called:    5
  9371 ;; This function calls:
  9372 ;;		Nothing
  9373 ;; This function is called by:
  9374 ;;		_CC2500_RxData
  9375 ;;		_CC2500_ReadStatus
  9376 ;;		_CC2500_ReadREG
  9377 ;; This function uses a non-reentrant model
  9378 ;;
  9379                           
  9380                           
  9381                           ;psect for function _CC2500_ReadByte
  9382  1066                     _CC2500_ReadByte:	
  9383                           
  9384                           ;CC2500_B1.c: 239: unsigned char loop_b;
  9385                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  9386                           
  9387                           ;incstack = 0
  9388                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9389  1066  0020               	movlb	0	; select bank0
  9390  1067  01A1               	clrf	CC2500_ReadByte@loop_b
  9391  1068                     L6:	
  9392  1068  3008               	movlw	8
  9393  1069  0221               	subwf	CC2500_ReadByte@loop_b,w
  9394  106A  1803               	btfsc	3,0
  9395  106B  0008               	return
  9396                           
  9397                           ;CC2500_B1.c: 241: RC1 = 1;
  9398  106C  148E               	bsf	14,1	;volatile
  9399                           
  9400                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  9401  106D  1003               	clrc
  9402  106E  0021               	movlb	1	; select bank1
  9403  106F  0DD0               	rlf	_SPI0Buffer^(0+128),f
  9404                           
  9405                           ;CC2500_B1.c: 243: if (RC2 == 1)
  9406  1070  0020               	movlb	0	; select bank0
  9407  1071  1D0E               	btfss	14,2	;volatile
  9408  1072  2876               	goto	l8559
  9409                           
  9410                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  9411  1073  0021               	movlb	1	; select bank1
  9412  1074  1450               	bsf	_SPI0Buffer^(0+128),0
  9413  1075  287C               	goto	l8561
  9414  1076                     l8559:	
  9415                           
  9416                           ;CC2500_B1.c: 245: else
  9417                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  9418  1076  30FE               	movlw	254
  9419  1077  0020               	movlb	0	; select bank0
  9420  1078  00A0               	movwf	??_CC2500_ReadByte
  9421  1079  0820               	movf	??_CC2500_ReadByte,w
  9422  107A  0021               	movlb	1	; select bank1
  9423  107B  05D0               	andwf	_SPI0Buffer^(0+128),f
  9424  107C                     l8561:	
  9425                           
  9426                           ;CC2500_B1.c: 247: RC1 = 0;
  9427  107C  0020               	movlb	0	; select bank0
  9428  107D  108E               	bcf	14,1	;volatile
  9429  107E  3001               	movlw	1
  9430  107F  00A0               	movwf	??_CC2500_ReadByte
  9431  1080  0820               	movf	??_CC2500_ReadByte,w
  9432  1081  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9433  1082  2868               	goto	L6
  9434  1083                     __end_of_CC2500_ReadByte:	
  9435                           
  9436                           	psect	text43
  9437  1B4F                     __ptext43:	
  9438 ;; *************** function _RF_Initialization *****************
  9439 ;; Defined at:
  9440 ;;		line 9 in file "../src/RF_Control_B1.c"
  9441 ;; Parameters:    Size  Location     Type
  9442 ;;		None
  9443 ;; Auto vars:     Size  Location     Type
  9444 ;;		None
  9445 ;; Return value:  Size  Location     Type
  9446 ;;		None               void
  9447 ;; Registers used:
  9448 ;;		wreg, status,2, status,0, pclath, cstack
  9449 ;; Tracked objects:
  9450 ;;		On entry : 0/0
  9451 ;;		On exit  : 0/0
  9452 ;;		Unchanged: 0/0
  9453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9458 ;;Total ram usage:        0 bytes
  9459 ;; Hardware stack levels used:    1
  9460 ;; Hardware stack levels required when called:    6
  9461 ;; This function calls:
  9462 ;;		_setRF_Initialization
  9463 ;; This function is called by:
  9464 ;;		_main
  9465 ;; This function uses a non-reentrant model
  9466 ;;
  9467                           
  9468                           
  9469                           ;psect for function _RF_Initialization
  9470  1B4F                     _RF_Initialization:	
  9471                           
  9472                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9473                           
  9474                           ;incstack = 0
  9475                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9476  1B4F  319B  23DC         	fcall	_setRF_Initialization
  9477  1B51  0008               	return
  9478  1B52                     __end_of_RF_Initialization:	
  9479                           
  9480                           	psect	text44
  9481  1BDC                     __ptext44:	
  9482 ;; *************** function _setRF_Initialization *****************
  9483 ;; Defined at:
  9484 ;;		line 43 in file "../src/RF_Control_B1.c"
  9485 ;; Parameters:    Size  Location     Type
  9486 ;;		None
  9487 ;; Auto vars:     Size  Location     Type
  9488 ;;		None
  9489 ;; Return value:  Size  Location     Type
  9490 ;;		None               void
  9491 ;; Registers used:
  9492 ;;		wreg
  9493 ;; Tracked objects:
  9494 ;;		On entry : 0/0
  9495 ;;		On exit  : 0/0
  9496 ;;		Unchanged: 0/0
  9497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9500 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9501 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9502 ;;Total ram usage:        1 bytes
  9503 ;; Hardware stack levels used:    1
  9504 ;; Hardware stack levels required when called:    5
  9505 ;; This function calls:
  9506 ;;		Nothing
  9507 ;; This function is called by:
  9508 ;;		_RF_Initialization
  9509 ;; This function uses a non-reentrant model
  9510 ;;
  9511                           
  9512                           
  9513                           ;psect for function _setRF_Initialization
  9514  1BDC                     _setRF_Initialization:	
  9515                           
  9516                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9517                           
  9518                           ;incstack = 0
  9519                           ; Regs used in _setRF_Initialization: [wreg]
  9520  1BDC  3015               	movlw	21
  9521  1BDD  0020               	movlb	0	; select bank0
  9522  1BDE  00A0               	movwf	??_setRF_Initialization
  9523  1BDF  0820               	movf	??_setRF_Initialization,w
  9524  1BE0  0021               	movlb	1	; select bank1
  9525  1BE1  00D2               	movwf	_Tx_Length^(0+128)
  9526                           
  9527                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9528  1BE2  300A               	movlw	10
  9529  1BE3  00C3               	movwf	(_RF1^(0+128)+7)
  9530  1BE4  3000               	movlw	0
  9531  1BE5  00C4               	movwf	(_RF1^(0+128)+8)
  9532  1BE6  0008               	return
  9533  1BE7                     __end_of_setRF_Initialization:	
  9534                           
  9535                           	psect	text45
  9536  1CEC                     __ptext45:	
  9537 ;; *************** function _Mcu_Initialization *****************
  9538 ;; Defined at:
  9539 ;;		line 30 in file "../src/MCU_B1.c"
  9540 ;; Parameters:    Size  Location     Type
  9541 ;;		None
  9542 ;; Auto vars:     Size  Location     Type
  9543 ;;		None
  9544 ;; Return value:  Size  Location     Type
  9545 ;;		None               void
  9546 ;; Registers used:
  9547 ;;		wreg, status,2, status,0, pclath, cstack
  9548 ;; Tracked objects:
  9549 ;;		On entry : 0/0
  9550 ;;		On exit  : 0/0
  9551 ;;		Unchanged: 0/0
  9552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9557 ;;Total ram usage:        0 bytes
  9558 ;; Hardware stack levels used:    1
  9559 ;; Hardware stack levels required when called:    6
  9560 ;; This function calls:
  9561 ;;		_ADC_Set
  9562 ;;		_Fosc_Set
  9563 ;;		_IOC_Set
  9564 ;;		_IO_Set
  9565 ;;		_TMR1_Set
  9566 ;;		_WDT_Set
  9567 ;; This function is called by:
  9568 ;;		_main
  9569 ;; This function uses a non-reentrant model
  9570 ;;
  9571                           
  9572                           
  9573                           ;psect for function _Mcu_Initialization
  9574  1CEC                     _Mcu_Initialization:	
  9575                           
  9576                           ;MCU_B1.c: 32: Fosc_Set();
  9577                           
  9578                           ;incstack = 0
  9579                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9580  1CEC  3187  27FC  319C   	fcall	_Fosc_Set
  9581                           
  9582                           ;MCU_B1.c: 34: IO_Set();
  9583  1CEF  319E  2634  319C   	fcall	_IO_Set
  9584                           
  9585                           ;MCU_B1.c: 36: ;;
  9586                           ;MCU_B1.c: 38: TMR1_Set();
  9587  1CF2  319C  242F  319C   	fcall	_TMR1_Set
  9588                           
  9589                           ;MCU_B1.c: 40: ADC_Set();
  9590  1CF5  319B  237D  319C   	fcall	_ADC_Set
  9591                           
  9592                           ;MCU_B1.c: 42: ;;
  9593                           ;MCU_B1.c: 44: ;;
  9594                           ;MCU_B1.c: 46: IOC_Set();
  9595  1CF8  319C  2423  319C   	fcall	_IOC_Set
  9596                           
  9597                           ;MCU_B1.c: 48: ;;
  9598                           ;MCU_B1.c: 50: ;;
  9599                           ;MCU_B1.c: 52: WDT_Set();
  9600  1CFB  319B  23D1         	fcall	_WDT_Set
  9601  1CFD  0008               	return
  9602  1CFE                     __end_of_Mcu_Initialization:	
  9603                           
  9604                           	psect	text46
  9605  1BD1                     __ptext46:	
  9606 ;; *************** function _WDT_Set *****************
  9607 ;; Defined at:
  9608 ;;		line 1019 in file "../src/MCU_B1.c"
  9609 ;; Parameters:    Size  Location     Type
  9610 ;;		None
  9611 ;; Auto vars:     Size  Location     Type
  9612 ;;		None
  9613 ;; Return value:  Size  Location     Type
  9614 ;;		None               void
  9615 ;; Registers used:
  9616 ;;		wreg
  9617 ;; Tracked objects:
  9618 ;;		On entry : 0/0
  9619 ;;		On exit  : 0/0
  9620 ;;		Unchanged: 0/0
  9621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9624 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9625 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9626 ;;Total ram usage:        1 bytes
  9627 ;; Hardware stack levels used:    1
  9628 ;; Hardware stack levels required when called:    5
  9629 ;; This function calls:
  9630 ;;		Nothing
  9631 ;; This function is called by:
  9632 ;;		_Mcu_Initialization
  9633 ;; This function uses a non-reentrant model
  9634 ;;
  9635                           
  9636                           
  9637                           ;psect for function _WDT_Set
  9638  1BD1                     _WDT_Set:	
  9639                           
  9640                           ;MCU_B1.c: 1026: WDTCON = 0b00010111;;
  9641                           
  9642                           ;incstack = 0
  9643                           ; Regs used in _WDT_Set: [wreg]
  9644  1BD1  3017               	movlw	23
  9645  1BD2  0021               	movlb	1	; select bank1
  9646  1BD3  0097               	movwf	23	;volatile
  9647                           
  9648                           ;MCU_B1.c: 1028: WDT.Enable = 1;
  9649  1BD4  1448               	bsf	_WDT^(0+128),0
  9650                           
  9651                           ;MCU_B1.c: 1029: WDT.Timer = 10;
  9652  1BD5  300A               	movlw	10
  9653  1BD6  0020               	movlb	0	; select bank0
  9654  1BD7  00A0               	movwf	??_WDT_Set
  9655  1BD8  0820               	movf	??_WDT_Set,w
  9656  1BD9  0021               	movlb	1	; select bank1
  9657  1BDA  00C9               	movwf	(_WDT^(0+128)+1)
  9658  1BDB  0008               	return
  9659  1BDC                     __end_of_WDT_Set:	
  9660                           
  9661                           	psect	text47
  9662  1C2F                     __ptext47:	
  9663 ;; *************** function _TMR1_Set *****************
  9664 ;; Defined at:
  9665 ;;		line 199 in file "../src/MCU_B1.c"
  9666 ;; Parameters:    Size  Location     Type
  9667 ;;		None
  9668 ;; Auto vars:     Size  Location     Type
  9669 ;;		None
  9670 ;; Return value:  Size  Location     Type
  9671 ;;		None               void
  9672 ;; Registers used:
  9673 ;;		wreg
  9674 ;; Tracked objects:
  9675 ;;		On entry : 0/0
  9676 ;;		On exit  : 0/0
  9677 ;;		Unchanged: 0/0
  9678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9683 ;;Total ram usage:        0 bytes
  9684 ;; Hardware stack levels used:    1
  9685 ;; Hardware stack levels required when called:    5
  9686 ;; This function calls:
  9687 ;;		Nothing
  9688 ;; This function is called by:
  9689 ;;		_Mcu_Initialization
  9690 ;; This function uses a non-reentrant model
  9691 ;;
  9692                           
  9693                           
  9694                           ;psect for function _TMR1_Set
  9695  1C2F                     _TMR1_Set:	
  9696                           
  9697                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9698                           
  9699                           ;incstack = 0
  9700                           ; Regs used in _TMR1_Set: [wreg]
  9701  1C2F  3041               	movlw	65
  9702  1C30  0020               	movlb	0	; select bank0
  9703  1C31  0098               	movwf	24	;volatile
  9704                           
  9705                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9706  1C32  30FA               	movlw	250
  9707  1C33  0097               	movwf	23	;volatile
  9708                           
  9709                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9710  1C34  3038               	movlw	56
  9711  1C35  0096               	movwf	22	;volatile
  9712                           
  9713                           ;MCU_B1.c: 203: TMR1IE = 1;
  9714  1C36  0021               	movlb	1	; select bank1
  9715  1C37  1411               	bsf	17,0	;volatile
  9716                           
  9717                           ;MCU_B1.c: 204: PEIE = 1;
  9718  1C38  170B               	bsf	11,6	;volatile
  9719                           
  9720                           ;MCU_B1.c: 205: GIE = 1;
  9721  1C39  178B               	bsf	11,7	;volatile
  9722  1C3A  0008               	return
  9723  1C3B                     __end_of_TMR1_Set:	
  9724                           
  9725                           	psect	text48
  9726  1E34                     __ptext48:	
  9727 ;; *************** function _IO_Set *****************
  9728 ;; Defined at:
  9729 ;;		line 60 in file "../src/MCU_B1.c"
  9730 ;; Parameters:    Size  Location     Type
  9731 ;;		None
  9732 ;; Auto vars:     Size  Location     Type
  9733 ;;		None
  9734 ;; Return value:  Size  Location     Type
  9735 ;;		None               void
  9736 ;; Registers used:
  9737 ;;		wreg, status,2
  9738 ;; Tracked objects:
  9739 ;;		On entry : 0/0
  9740 ;;		On exit  : 0/0
  9741 ;;		Unchanged: 0/0
  9742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;Total ram usage:        0 bytes
  9748 ;; Hardware stack levels used:    1
  9749 ;; Hardware stack levels required when called:    5
  9750 ;; This function calls:
  9751 ;;		Nothing
  9752 ;; This function is called by:
  9753 ;;		_Mcu_Initialization
  9754 ;; This function uses a non-reentrant model
  9755 ;;
  9756                           
  9757                           
  9758                           ;psect for function _IO_Set
  9759  1E34                     _IO_Set:	
  9760                           
  9761                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9762                           
  9763                           ;incstack = 0
  9764                           ; Regs used in _IO_Set: [wreg+status,2]
  9765  1E34  3077               	movlw	119
  9766  1E35  0021               	movlb	1	; select bank1
  9767  1E36  008C               	movwf	12	;volatile
  9768                           
  9769                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9770  1E37  3007               	movlw	7
  9771  1E38  008D               	movwf	13	;volatile
  9772                           
  9773                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9774  1E39  300C               	movlw	12
  9775  1E3A  008E               	movwf	14	;volatile
  9776                           
  9777                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9778  1E3B  0022               	movlb	2	; select bank2
  9779  1E3C  018C               	clrf	12	;volatile
  9780                           
  9781                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9782  1E3D  3002               	movlw	2
  9783  1E3E  008D               	movwf	13	;volatile
  9784                           
  9785                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9786  1E3F  018E               	clrf	14	;volatile
  9787                           
  9788                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9789  1E40  3022               	movlw	34
  9790  1E41  0023               	movlb	3	; select bank3
  9791  1E42  008C               	movwf	12	;volatile
  9792                           
  9793                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9794  1E43  018D               	clrf	13	;volatile
  9795                           
  9796                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9797  1E44  018E               	clrf	14	;volatile
  9798                           
  9799                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9800  1E45  3077               	movlw	119
  9801  1E46  0020               	movlb	0	; select bank0
  9802  1E47  008C               	movwf	12	;volatile
  9803                           
  9804                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  9805  1E48  3007               	movlw	7
  9806  1E49  008D               	movwf	13	;volatile
  9807                           
  9808                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9809  1E4A  300C               	movlw	12
  9810  1E4B  008E               	movwf	14	;volatile
  9811  1E4C  0008               	return
  9812  1E4D                     __end_of_IO_Set:	
  9813                           
  9814                           	psect	text49
  9815  1C23                     __ptext49:	
  9816 ;; *************** function _IOC_Set *****************
  9817 ;; Defined at:
  9818 ;;		line 366 in file "../src/MCU_B1.c"
  9819 ;; Parameters:    Size  Location     Type
  9820 ;;		None
  9821 ;; Auto vars:     Size  Location     Type
  9822 ;;		None
  9823 ;; Return value:  Size  Location     Type
  9824 ;;		None               void
  9825 ;; Registers used:
  9826 ;;		wreg, status,2
  9827 ;; Tracked objects:
  9828 ;;		On entry : 0/0
  9829 ;;		On exit  : 0/0
  9830 ;;		Unchanged: 0/0
  9831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9836 ;;Total ram usage:        0 bytes
  9837 ;; Hardware stack levels used:    1
  9838 ;; Hardware stack levels required when called:    5
  9839 ;; This function calls:
  9840 ;;		Nothing
  9841 ;; This function is called by:
  9842 ;;		_Mcu_Initialization
  9843 ;; This function uses a non-reentrant model
  9844 ;;
  9845                           
  9846                           
  9847                           ;psect for function _IOC_Set
  9848  1C23                     _IOC_Set:	
  9849                           
  9850                           ;MCU_B1.c: 367: WPUB2 = 0;
  9851                           
  9852                           ;incstack = 0
  9853                           ; Regs used in _IOC_Set: [wreg+status,2]
  9854  1C23  0024               	movlb	4	; select bank4
  9855  1C24  110D               	bcf	13,2	;volatile
  9856                           
  9857                           ;MCU_B1.c: 387: IOCBP = 0b00000000;
  9858  1C25  0027               	movlb	7	; select bank7
  9859  1C26  0194               	clrf	20	;volatile
  9860                           
  9861                           ;MCU_B1.c: 388: IOCBN = 0b00000100;
  9862  1C27  3004               	movlw	4
  9863  1C28  0095               	movwf	21	;volatile
  9864                           
  9865                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
  9866  1C29  0196               	clrf	22	;volatile
  9867                           
  9868                           ;MCU_B1.c: 394: IOCIE = 1;
  9869  1C2A  158B               	bsf	11,3	;volatile
  9870                           
  9871                           ;MCU_B1.c: 395: IOCIF = 0;
  9872  1C2B  100B               	bcf	11,0	;volatile
  9873                           
  9874                           ;MCU_B1.c: 396: PEIE = 1;
  9875  1C2C  170B               	bsf	11,6	;volatile
  9876                           
  9877                           ;MCU_B1.c: 397: GIE = 1;
  9878  1C2D  178B               	bsf	11,7	;volatile
  9879  1C2E  0008               	return
  9880  1C2F                     __end_of_IOC_Set:	
  9881                           
  9882                           	psect	text50
  9883  07FC                     __ptext50:	
  9884 ;; *************** function _Fosc_Set *****************
  9885 ;; Defined at:
  9886 ;;		line 56 in file "../src/MCU_B1.c"
  9887 ;; Parameters:    Size  Location     Type
  9888 ;;		None
  9889 ;; Auto vars:     Size  Location     Type
  9890 ;;		None
  9891 ;; Return value:  Size  Location     Type
  9892 ;;		None               void
  9893 ;; Registers used:
  9894 ;;		wreg
  9895 ;; Tracked objects:
  9896 ;;		On entry : 0/0
  9897 ;;		On exit  : 0/0
  9898 ;;		Unchanged: 0/0
  9899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9904 ;;Total ram usage:        0 bytes
  9905 ;; Hardware stack levels used:    1
  9906 ;; Hardware stack levels required when called:    5
  9907 ;; This function calls:
  9908 ;;		Nothing
  9909 ;; This function is called by:
  9910 ;;		_Mcu_Initialization
  9911 ;; This function uses a non-reentrant model
  9912 ;;
  9913                           
  9914                           
  9915                           ;psect for function _Fosc_Set
  9916  07FC                     _Fosc_Set:	
  9917                           
  9918                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9919                           
  9920                           ;incstack = 0
  9921                           ; Regs used in _Fosc_Set: [wreg]
  9922  07FC  3078               	movlw	120
  9923  07FD  0021               	movlb	1	; select bank1
  9924  07FE  0099               	movwf	25	;volatile
  9925  07FF  0008               	return
  9926  0800                     __end_of_Fosc_Set:	
  9927                           
  9928                           	psect	text51
  9929  1B7D                     __ptext51:	
  9930 ;; *************** function _ADC_Set *****************
  9931 ;; Defined at:
  9932 ;;		line 420 in file "../src/MCU_B1.c"
  9933 ;; Parameters:    Size  Location     Type
  9934 ;;		None
  9935 ;; Auto vars:     Size  Location     Type
  9936 ;;		None
  9937 ;; Return value:  Size  Location     Type
  9938 ;;		None               void
  9939 ;; Registers used:
  9940 ;;		wreg
  9941 ;; Tracked objects:
  9942 ;;		On entry : 0/0
  9943 ;;		On exit  : 0/0
  9944 ;;		Unchanged: 0/0
  9945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9950 ;;Total ram usage:        0 bytes
  9951 ;; Hardware stack levels used:    1
  9952 ;; Hardware stack levels required when called:    5
  9953 ;; This function calls:
  9954 ;;		Nothing
  9955 ;; This function is called by:
  9956 ;;		_Mcu_Initialization
  9957 ;; This function uses a non-reentrant model
  9958 ;;
  9959                           
  9960                           
  9961                           ;psect for function _ADC_Set
  9962  1B7D                     _ADC_Set:	
  9963                           
  9964                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
  9965                           
  9966                           ;incstack = 0
  9967                           ; Regs used in _ADC_Set: [wreg]
  9968  1B7D  30F3               	movlw	243
  9969  1B7E  0021               	movlb	1	; select bank1
  9970  1B7F  009E               	movwf	30	;volatile
  9971                           
  9972                           ;MCU_B1.c: 422: FVRCON = 0xc1;
  9973  1B80  30C1               	movlw	193
  9974  1B81  0022               	movlb	2	; select bank2
  9975  1B82  0097               	movwf	23	;volatile
  9976  1B83  0008               	return
  9977  1B84                     __end_of_ADC_Set:	
  9978                           
  9979                           	psect	text52
  9980  01B9                     __ptext52:	
  9981 ;; *************** function _Load_Main *****************
  9982 ;; Defined at:
  9983 ;;		line 39 in file "../src/OverLoad_B1.c"
  9984 ;; Parameters:    Size  Location     Type
  9985 ;;		None
  9986 ;; Auto vars:     Size  Location     Type
  9987 ;;  i               1   15[BANK0 ] unsigned char 
  9988 ;;  error           1   14[BANK0 ] unsigned char 
  9989 ;;  adjgo           1   12[BANK0 ] unsigned char 
  9990 ;;  j               1   11[BANK0 ] unsigned char 
  9991 ;; Return value:  Size  Location     Type
  9992 ;;		None               void
  9993 ;; Registers used:
  9994 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9995 ;; Tracked objects:
  9996 ;;		On entry : 0/0
  9997 ;;		On exit  : 0/0
  9998 ;;		Unchanged: 0/0
  9999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10001 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10002 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10003 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10004 ;;Total ram usage:        7 bytes
 10005 ;; Hardware stack levels used:    1
 10006 ;; Hardware stack levels required when called:    8
 10007 ;; This function calls:
 10008 ;;		_getAll_DimmerLights_AdjGO
 10009 ;;		_getMain_All_Error_Status
 10010 ;;		_getMain_LightsStatus
 10011 ;;		_getMain_Lights_Count
 10012 ;;		_getMain_LoadOK
 10013 ;;		_setLoad_AH_AL_Restore
 10014 ;; This function is called by:
 10015 ;;		_main
 10016 ;; This function uses a non-reentrant model
 10017 ;;
 10018                           
 10019                           
 10020                           ;psect for function _Load_Main
 10021  01B9                     _Load_Main:	
 10022                           
 10023                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
 10024                           
 10025                           ;incstack = 0
 10026                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10027  01B9  0020               	movlb	0	; select bank0
 10028  01BA  01AF               	clrf	Load_Main@i
 10029  01BB  01AB               	clrf	Load_Main@j
 10030  01BC  3000               	movlw	0
 10031  01BD  3191  21CD  3181   	fcall	_getMain_All_Error_Status
 10032  01C0  0020               	movlb	0	; select bank0
 10033  01C1  00A9               	movwf	??_Load_Main
 10034  01C2  0829               	movf	??_Load_Main,w
 10035  01C3  00AE               	movwf	Load_Main@error
 10036  01C4  01AC               	clrf	Load_Main@adjgo
 10037                           
 10038                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10039  01C5  0022               	movlb	2	; select bank2
 10040  01C6  1C28               	btfss	_Load^(0+256),0
 10041  01C7  2AF7               	goto	l1460
 10042                           
 10043                           ;OverLoad_B1.c: 44: adjgo = getAll_DimmerLights_AdjGO();
 10044  01C8  319C  2484  3181   	fcall	_getAll_DimmerLights_AdjGO
 10045  01CB  0020               	movlb	0	; select bank0
 10046  01CC  00A9               	movwf	??_Load_Main
 10047  01CD  0829               	movf	??_Load_Main,w
 10048  01CE  00AC               	movwf	Load_Main@adjgo
 10049                           
 10050                           ;OverLoad_B1.c: 46: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
 10051  01CF  01AD               	clrf	_Load_Main$3852
 10052  01D0  3191  2172  3181   	fcall	_getMain_LightsStatus
 10053  01D3  3A01               	xorlw	1
 10054  01D4  1D03               	skipz
 10055  01D5  29DF               	goto	l9487
 10056  01D6  0020               	movlb	0	; select bank0
 10057  01D7  08AE               	movf	Load_Main@error,f
 10058  01D8  1D03               	skipz
 10059  01D9  29DF               	goto	l9487
 10060  01DA  08AC               	movf	Load_Main@adjgo,f
 10061  01DB  1D03               	skipz
 10062  01DC  29DF               	goto	l9487
 10063  01DD  01AD               	clrf	_Load_Main$3852
 10064  01DE  0AAD               	incf	_Load_Main$3852,f
 10065  01DF                     l9487:	
 10066  01DF  0020               	movlb	0	; select bank0
 10067  01E0  082D               	movf	_Load_Main$3852,w
 10068  01E1  0022               	movlb	2	; select bank2
 10069  01E2  10A8               	bcf	_Load^(0+256),1
 10070  01E3  1D03               	skipz
 10071  01E4  14A8               	bsf	_Load^(0+256),1
 10072                           
 10073                           ;OverLoad_B1.c: 47: if (getMain_LoadOK() == 1 && Load.Run == 0) {
 10074  01E5  319C  2448  3181   	fcall	_getMain_LoadOK
 10075  01E8  3A01               	xorlw	1
 10076  01E9  1D03               	skipz
 10077  01EA  29F0               	goto	l1463
 10078  01EB  0022               	movlb	2	; select bank2
 10079  01EC  19A8               	btfsc	_Load^(0+256),3
 10080  01ED  29F0               	goto	l1463
 10081                           
 10082                           ;OverLoad_B1.c: 48: Load.Run = 1;
 10083  01EE  15A8               	bsf	_Load^(0+256),3
 10084                           
 10085                           ;OverLoad_B1.c: 49: Load.OK = 0;
 10086  01EF  13A8               	bcf	_Load^(0+256),7
 10087  01F0                     l1463:	
 10088                           
 10089                           ;OverLoad_B1.c: 50: }
 10090                           ;OverLoad_B1.c: 53: if (Load.GO == 1) {
 10091  01F0  0022               	movlb	2	; select bank2
 10092  01F1  1CA8               	btfss	_Load^(0+256),1
 10093  01F2  2AC7               	goto	l1464
 10094                           
 10095                           ;OverLoad_B1.c: 54: Load.LightsON = 1;
 10096  01F3  1528               	bsf	_Load^(0+256),2
 10097                           
 10098                           ;OverLoad_B1.c: 56: if (Load.ADtoGO == 1) {
 10099  01F4  1E28               	btfss	_Load^(0+256),4
 10100  01F5  2AC5               	goto	l1465
 10101                           
 10102                           ;OverLoad_B1.c: 57: Load.Time++;
 10103  01F6  3001               	movlw	1
 10104  01F7  07A9               	addwf	(_Load^(0+256)+1),f
 10105  01F8  3000               	movlw	0
 10106  01F9  3DAA               	addwfc	((_Load+1)^(0+256)+1),f
 10107                           
 10108                           ;OverLoad_B1.c: 58: if (Load.Time >= 5) {
 10109  01FA  3000               	movlw	0
 10110  01FB  022A               	subwf	((_Load+1)^(0+256)+1),w
 10111  01FC  3005               	movlw	5
 10112  01FD  1903               	skipnz
 10113  01FE  0229               	subwf	(_Load^(0+256)+1),w
 10114  01FF  1C03               	skipc
 10115  0200  0008               	return
 10116                           
 10117                           ;OverLoad_B1.c: 59: Load.Time = 0;
 10118  0201  01A9               	clrf	(_Load^(0+256)+1)
 10119  0202  01AA               	clrf	((_Load+1)^(0+256)+1)
 10120                           
 10121                           ;OverLoad_B1.c: 60: Load.ADtoGO = 0;
 10122  0203  1228               	bcf	_Load^(0+256),4
 10123                           
 10124                           ;OverLoad_B1.c: 62: for (i = 0; i < 4; i++) {
 10125  0204  0020               	movlb	0	; select bank0
 10126  0205  01AF               	clrf	Load_Main@i
 10127  0206  3004               	movlw	4
 10128  0207  022F               	subwf	Load_Main@i,w
 10129  0208  1803               	btfsc	3,0
 10130  0209  2A34               	goto	l9513
 10131  020A                     l9507:	
 10132                           
 10133                           ;OverLoad_B1.c: 63: Load.ADH += Load.AH[i];
 10134  020A  352F               	lslf	Load_Main@i,w
 10135  020B  3E33               	addlw	(_Load+11)& (0+255)
 10136  020C  0086               	movwf	6
 10137  020D  3001               	movlw	1	; select bank2/3
 10138  020E  0087               	movwf	7
 10139  020F  3F40               	moviw [0]fsr1
 10140  0210  00A9               	movwf	??_Load_Main
 10141  0211  3F41               	moviw [1]fsr1
 10142  0212  00AA               	movwf	??_Load_Main+1
 10143  0213  0829               	movf	??_Load_Main,w
 10144  0214  0022               	movlb	2	; select bank2
 10145  0215  07AD               	addwf	(_Load^(0+256)+5),f
 10146  0216  0020               	movlb	0	; select bank0
 10147  0217  082A               	movf	??_Load_Main+1,w
 10148  0218  0022               	movlb	2	; select bank2
 10149  0219  3DAE               	addwfc	((_Load+1)^(0+256)+5),f
 10150                           
 10151                           ;OverLoad_B1.c: 64: Load.ADL += Load.AL[i];
 10152  021A  0020               	movlb	0	; select bank0
 10153  021B  352F               	lslf	Load_Main@i,w
 10154  021C  3E3D               	addlw	(_Load+21)& (0+255)
 10155  021D  0086               	movwf	6
 10156  021E  3001               	movlw	1	; select bank2/3
 10157  021F  0087               	movwf	7
 10158  0220  3F40               	moviw [0]fsr1
 10159  0221  00A9               	movwf	??_Load_Main
 10160  0222  3F41               	moviw [1]fsr1
 10161  0223  00AA               	movwf	??_Load_Main+1
 10162  0224  0829               	movf	??_Load_Main,w
 10163  0225  0022               	movlb	2	; select bank2
 10164  0226  07AF               	addwf	(_Load^(0+256)+7),f
 10165  0227  0020               	movlb	0	; select bank0
 10166  0228  082A               	movf	??_Load_Main+1,w
 10167  0229  0022               	movlb	2	; select bank2
 10168  022A  3DB0               	addwfc	((_Load+1)^(0+256)+7),f
 10169  022B  3001               	movlw	1
 10170  022C  0020               	movlb	0	; select bank0
 10171  022D  00A9               	movwf	??_Load_Main
 10172  022E  0829               	movf	??_Load_Main,w
 10173  022F  07AF               	addwf	Load_Main@i,f
 10174  0230  3004               	movlw	4
 10175  0231  022F               	subwf	Load_Main@i,w
 10176  0232  1C03               	skipc
 10177  0233  2A0A               	goto	l9507
 10178  0234                     l9513:	
 10179                           
 10180                           ;OverLoad_B1.c: 65: }
 10181                           ;OverLoad_B1.c: 66: Load.ADH /= 4;
 10182  0234  3002               	movlw	2
 10183  0235  0022               	movlb	2	; select bank2
 10184  0236                     u10425:	
 10185  0236  36AE               	lsrf	((_Load+1)^(0+256)+5),f
 10186  0237  0CAD               	rrf	(_Load^(0+256)+5),f
 10187  0238  0B89               	decfsz	9,f
 10188  0239  2A36               	goto	u10425
 10189                           
 10190                           ;OverLoad_B1.c: 67: Load.ADL /= 4;
 10191  023A  3002               	movlw	2
 10192  023B                     u10435:	
 10193  023B  36B0               	lsrf	((_Load+1)^(0+256)+7),f
 10194  023C  0CAF               	rrf	(_Load^(0+256)+7),f
 10195  023D  0B89               	decfsz	9,f
 10196  023E  2A3B               	goto	u10435
 10197                           
 10198                           ;OverLoad_B1.c: 68: setLoad_AH_AL_Restore();
 10199  023F  319E  269C  3181   	fcall	_setLoad_AH_AL_Restore
 10200                           
 10201                           ;OverLoad_B1.c: 69: if (Load.ADH > Load.ADL) {
 10202  0242  0022               	movlb	2	; select bank2
 10203  0243  082E               	movf	((_Load+1)^(0+256)+5),w
 10204  0244  0230               	subwf	((_Load+1)^(0+256)+7),w
 10205  0245  1D03               	skipz
 10206  0246  2A49               	goto	u10445
 10207  0247  082D               	movf	(_Load^(0+256)+5),w
 10208  0248  022F               	subwf	(_Load^(0+256)+7),w
 10209  0249                     u10445:	
 10210  0249  1803               	skipnc
 10211  024A  0008               	return
 10212                           
 10213                           ;OverLoad_B1.c: 70: Load.AD = Load.ADH - Load.ADL;
 10214  024B  3005               	movlw	5
 10215  024C  3E28               	addlw	_Load& (0+255)
 10216  024D  0086               	movwf	6
 10217  024E  3001               	movlw	1	; select bank2/3
 10218  024F  0087               	movwf	7
 10219  0250  092F               	comf	(_Load^(0+256)+7),w
 10220  0251  0020               	movlb	0	; select bank0
 10221  0252  00A9               	movwf	??_Load_Main
 10222  0253  0022               	movlb	2	; select bank2
 10223  0254  0930               	comf	((_Load+1)^(0+256)+7),w
 10224  0255  0020               	movlb	0	; select bank0
 10225  0256  00AA               	movwf	??_Load_Main+1
 10226  0257  0AA9               	incf	??_Load_Main,f
 10227  0258  1903               	skipnz
 10228  0259  0AAA               	incf	??_Load_Main+1,f
 10229  025A  3F40               	moviw [0]fsr1
 10230  025B  0729               	addwf	??_Load_Main,w
 10231  025C  0022               	movlb	2	; select bank2
 10232  025D  00C7               	movwf	(_Load^(0+256)+31)
 10233  025E  3F41               	moviw [1]fsr1
 10234  025F  0020               	movlb	0	; select bank0
 10235  0260  3D2A               	addwfc	??_Load_Main+1,w
 10236  0261  0022               	movlb	2	; select bank2
 10237  0262  00C8               	movwf	(_Load^(0+256)+32)
 10238                           
 10239                           ;OverLoad_B1.c: 71: Load.ADH = 0;
 10240  0263  01AD               	clrf	(_Load^(0+256)+5)
 10241  0264  01AE               	clrf	((_Load+1)^(0+256)+5)
 10242                           
 10243                           ;OverLoad_B1.c: 72: Load.ADL = 0;
 10244  0265  01AF               	clrf	(_Load^(0+256)+7)
 10245  0266  01B0               	clrf	((_Load+1)^(0+256)+7)
 10246                           
 10247                           ;OverLoad_B1.c: 73: Load.LightsCount = getMain_Lights_Count();
 10248  0267  319D  25EE  3181   	fcall	_getMain_Lights_Count
 10249  026A  0020               	movlb	0	; select bank0
 10250  026B  00A9               	movwf	??_Load_Main
 10251  026C  0829               	movf	??_Load_Main,w
 10252  026D  0022               	movlb	2	; select bank2
 10253  026E  00D3               	movwf	(_Load^(0+256)+43)
 10254                           
 10255                           ;OverLoad_B1.c: 75: if (Load.Run == 1) {
 10256  026F  1DA8               	btfss	_Load^(0+256),3
 10257  0270  2A96               	goto	l9545
 10258                           
 10259                           ;OverLoad_B1.c: 76: if (Load.Count < 2) {
 10260  0271  3002               	movlw	2
 10261  0272  0251               	subwf	(_Load^(0+256)+41),w
 10262  0273  1803               	skipnc
 10263  0274  2A96               	goto	l9545
 10264                           
 10265                           ;OverLoad_B1.c: 77: Load.Count++;
 10266  0275  3001               	movlw	1
 10267  0276  0020               	movlb	0	; select bank0
 10268  0277  00A9               	movwf	??_Load_Main
 10269  0278  0829               	movf	??_Load_Main,w
 10270  0279  0022               	movlb	2	; select bank2
 10271  027A  07D1               	addwf	(_Load^(0+256)+41),f
 10272                           
 10273                           ;OverLoad_B1.c: 78: if (Load.Count == 1) {
 10274  027B  0851               	movf	(_Load^(0+256)+41),w
 10275  027C  3A01               	xorlw	1
 10276  027D  1D03               	skipz
 10277  027E  2A83               	goto	l9537
 10278                           
 10279                           ;OverLoad_B1.c: 79: Load.JudgeValue = (20*55);
 10280  027F  304C               	movlw	76
 10281  0280  00CD               	movwf	(_Load^(0+256)+37)
 10282  0281  3004               	movlw	4
 10283  0282  2A8E               	goto	L7
 10284  0283                     l9537:	
 10285                           ;OverLoad_B1.c: 80: } else if (Load.Count == 2) {
 10286                           
 10287  0283  0851               	movf	(_Load^(0+256)+41),w
 10288  0284  3A02               	xorlw	2
 10289  0285  1D03               	skipz
 10290  0286  2A96               	goto	l9545
 10291                           
 10292                           ;OverLoad_B1.c: 81: if (Load.LightsCount == 1) {
 10293  0287  0853               	movf	(_Load^(0+256)+43),w
 10294  0288  3A01               	xorlw	1
 10295  0289  1D03               	skipz
 10296  028A  2A90               	goto	l9543
 10297                           
 10298                           ;OverLoad_B1.c: 82: Load.JudgeValue = (int)(1.8*55);
 10299  028B  3063               	movlw	99
 10300  028C  00CD               	movwf	(_Load^(0+256)+37)
 10301  028D  3000               	movlw	0
 10302  028E                     L7:	
 10303  028E  00CE               	movwf	(_Load^(0+256)+38)
 10304                           
 10305                           ;OverLoad_B1.c: 83: } else {
 10306  028F  2A96               	goto	l9545
 10307  0290                     l9543:	
 10308                           
 10309                           ;OverLoad_B1.c: 84: Load.JudgeValue = (int)(1.8*55) + Load.TotalLoad;
 10310  0290  0831               	movf	(_Load^(0+256)+9),w
 10311  0291  3E63               	addlw	99
 10312  0292  00CD               	movwf	(_Load^(0+256)+37)
 10313  0293  3000               	movlw	0
 10314  0294  3D32               	addwfc	((_Load+1)^(0+256)+9),w
 10315  0295  00CE               	movwf	((_Load+1)^(0+256)+37)
 10316  0296                     l9545:	
 10317                           
 10318                           ;OverLoad_B1.c: 85: }
 10319                           ;OverLoad_B1.c: 86: }
 10320                           ;OverLoad_B1.c: 87: }
 10321                           ;OverLoad_B1.c: 88: }
 10322                           ;OverLoad_B1.c: 90: if (Load.AD >= Load.JudgeValue) {
 10323  0296  084E               	movf	((_Load+1)^(0+256)+37),w
 10324  0297  0248               	subwf	((_Load+1)^(0+256)+31),w
 10325  0298  1D03               	skipz
 10326  0299  2A9C               	goto	u10505
 10327  029A  084D               	movf	(_Load^(0+256)+37),w
 10328  029B  0247               	subwf	(_Load^(0+256)+31),w
 10329  029C                     u10505:	
 10330  029C  1C03               	skipc
 10331  029D  2AAB               	goto	l9555
 10332                           
 10333                           ;OverLoad_B1.c: 91: Load.ErrorCount++;
 10334  029E  3001               	movlw	1
 10335  029F  0020               	movlb	0	; select bank0
 10336  02A0  00A9               	movwf	??_Load_Main
 10337  02A1  0829               	movf	??_Load_Main,w
 10338  02A2  0022               	movlb	2	; select bank2
 10339  02A3  07D2               	addwf	(_Load^(0+256)+42),f
 10340                           
 10341                           ;OverLoad_B1.c: 92: if (Load.ErrorCount > 2) {
 10342  02A4  3003               	movlw	3
 10343  02A5  0252               	subwf	(_Load^(0+256)+42),w
 10344  02A6  1C03               	skipc
 10345  02A7  0008               	return
 10346                           
 10347                           ;OverLoad_B1.c: 93: Load.ErrorCount = 0;
 10348  02A8  01D2               	clrf	(_Load^(0+256)+42)
 10349                           
 10350                           ;OverLoad_B1.c: 94: Load.ERROR = 1;
 10351  02A9  16A8               	bsf	_Load^(0+256),5
 10352                           
 10353                           ;OverLoad_B1.c: 107: }
 10354                           ;OverLoad_B1.c: 108: } else {
 10355  02AA  0008               	return
 10356  02AB                     l9555:	
 10357                           
 10358                           ;OverLoad_B1.c: 109: Load.ErrorCount = 0;
 10359  02AB  01D2               	clrf	(_Load^(0+256)+42)
 10360                           
 10361                           ;OverLoad_B1.c: 110: if (Load.Run == 1) {
 10362  02AC  1DA8               	btfss	_Load^(0+256),3
 10363  02AD  0008               	return
 10364                           
 10365                           ;OverLoad_B1.c: 111: if (Load.OK == 0) {
 10366  02AE  1BA8               	btfsc	_Load^(0+256),7
 10367  02AF  0008               	return
 10368                           
 10369                           ;OverLoad_B1.c: 112: Load.SafeCount++;
 10370  02B0  3001               	movlw	1
 10371  02B1  0020               	movlb	0	; select bank0
 10372  02B2  00A9               	movwf	??_Load_Main
 10373  02B3  0829               	movf	??_Load_Main,w
 10374  02B4  0022               	movlb	2	; select bank2
 10375  02B5  07D4               	addwf	(_Load^(0+256)+44),f
 10376                           
 10377                           ;OverLoad_B1.c: 113: if (Load.SafeCount >= 3) {
 10378  02B6  3003               	movlw	3
 10379  02B7  0254               	subwf	(_Load^(0+256)+44),w
 10380  02B8  1C03               	skipc
 10381  02B9  0008               	return
 10382                           
 10383                           ;OverLoad_B1.c: 114: Load.SafeCount = 0;
 10384  02BA  01D4               	clrf	(_Load^(0+256)+44)
 10385                           
 10386                           ;OverLoad_B1.c: 115: Load.OK = 1;
 10387  02BB  17A8               	bsf	_Load^(0+256),7
 10388                           
 10389                           ;OverLoad_B1.c: 116: Load.Run = 0;
 10390  02BC  11A8               	bcf	_Load^(0+256),3
 10391                           
 10392                           ;OverLoad_B1.c: 117: Load.Count = 0;
 10393  02BD  01D1               	clrf	(_Load^(0+256)+41)
 10394                           
 10395                           ;OverLoad_B1.c: 118: Load.TotalLoad = Load.AD;
 10396  02BE  0848               	movf	((_Load+1)^(0+256)+31),w
 10397  02BF  01B2               	clrf	((_Load+1)^(0+256)+9)
 10398  02C0  07B2               	addwf	((_Load+1)^(0+256)+9),f
 10399  02C1  0847               	movf	(_Load^(0+256)+31),w
 10400  02C2  01B1               	clrf	(_Load^(0+256)+9)
 10401  02C3  07B1               	addwf	(_Load^(0+256)+9),f
 10402                           
 10403                           ;OverLoad_B1.c: 127: }
 10404                           ;OverLoad_B1.c: 128: }
 10405                           ;OverLoad_B1.c: 129: }
 10406                           ;OverLoad_B1.c: 130: }
 10407                           ;OverLoad_B1.c: 131: }
 10408                           ;OverLoad_B1.c: 132: }
 10409                           ;OverLoad_B1.c: 133: } else {
 10410  02C4  0008               	return
 10411  02C5                     l1465:	
 10412                           
 10413                           ;OverLoad_B1.c: 134: Load.ADtoGO = 1;
 10414  02C5  1628               	bsf	_Load^(0+256),4
 10415                           
 10416                           ;OverLoad_B1.c: 135: }
 10417                           ;OverLoad_B1.c: 136: } else {
 10418  02C6  0008               	return
 10419  02C7                     l1464:	
 10420                           
 10421                           ;OverLoad_B1.c: 137: if (Load.LightsON == 1 && error != 3) {
 10422  02C7  1D28               	btfss	_Load^(0+256),2
 10423  02C8  2AE5               	goto	l9603
 10424  02C9  0020               	movlb	0	; select bank0
 10425  02CA  082E               	movf	Load_Main@error,w
 10426  02CB  3A03               	xorlw	3
 10427  02CC  1903               	skipnz
 10428  02CD  2AE5               	goto	l9603
 10429                           
 10430                           ;OverLoad_B1.c: 138: Load.LightsON = 0;
 10431  02CE  0022               	movlb	2	; select bank2
 10432  02CF  1128               	bcf	_Load^(0+256),2
 10433                           
 10434                           ;OverLoad_B1.c: 140: Load.Time = 0;
 10435  02D0  01A9               	clrf	(_Load^(0+256)+1)
 10436  02D1  01AA               	clrf	((_Load+1)^(0+256)+1)
 10437                           
 10438                           ;OverLoad_B1.c: 141: Load.ADtoGO = 0;
 10439  02D2  1228               	bcf	_Load^(0+256),4
 10440                           
 10441                           ;OverLoad_B1.c: 142: setLoad_AH_AL_Restore();
 10442  02D3  319E  269C  3181   	fcall	_setLoad_AH_AL_Restore
 10443                           
 10444                           ;OverLoad_B1.c: 143: Load.Count = 0;
 10445  02D6  0022               	movlb	2	; select bank2
 10446  02D7  01D1               	clrf	(_Load^(0+256)+41)
 10447                           
 10448                           ;OverLoad_B1.c: 144: Load.ErrorCount = 0;
 10449  02D8  01D2               	clrf	(_Load^(0+256)+42)
 10450                           
 10451                           ;OverLoad_B1.c: 145: Load.SafeCount = 0;
 10452  02D9  01D4               	clrf	(_Load^(0+256)+44)
 10453                           
 10454                           ;OverLoad_B1.c: 147: Load.ADH = 0;
 10455  02DA  01AD               	clrf	(_Load^(0+256)+5)
 10456  02DB  01AE               	clrf	((_Load+1)^(0+256)+5)
 10457                           
 10458                           ;OverLoad_B1.c: 148: Load.ADL = 0;
 10459  02DC  01AF               	clrf	(_Load^(0+256)+7)
 10460  02DD  01B0               	clrf	((_Load+1)^(0+256)+7)
 10461                           
 10462                           ;OverLoad_B1.c: 149: Load.AD = 0;
 10463  02DE  01C7               	clrf	(_Load^(0+256)+31)
 10464  02DF  01C8               	clrf	((_Load+1)^(0+256)+31)
 10465                           
 10466                           ;OverLoad_B1.c: 150: Load.JudgeValue = 0;
 10467  02E0  01CD               	clrf	(_Load^(0+256)+37)
 10468  02E1  01CE               	clrf	((_Load+1)^(0+256)+37)
 10469                           
 10470                           ;OverLoad_B1.c: 151: Load.LightsCount = 0;
 10471  02E2  01D3               	clrf	(_Load^(0+256)+43)
 10472                           
 10473                           ;OverLoad_B1.c: 152: Load.Run = 0;
 10474  02E3  11A8               	bcf	_Load^(0+256),3
 10475                           
 10476                           ;OverLoad_B1.c: 153: Load.OK = 1;
 10477  02E4  17A8               	bsf	_Load^(0+256),7
 10478  02E5                     l9603:	
 10479                           
 10480                           ;OverLoad_B1.c: 161: }
 10481                           ;OverLoad_B1.c: 162: if (Load.ERROR == 1) {
 10482  02E5  0022               	movlb	2	; select bank2
 10483  02E6  1EA8               	btfss	_Load^(0+256),5
 10484  02E7  0008               	return
 10485                           
 10486                           ;OverLoad_B1.c: 163: Load.ErrorTime++;
 10487  02E8  3001               	movlw	1
 10488  02E9  07AB               	addwf	(_Load^(0+256)+3),f
 10489  02EA  3000               	movlw	0
 10490  02EB  3DAC               	addwfc	((_Load+1)^(0+256)+3),f
 10491                           
 10492                           ;OverLoad_B1.c: 164: if (Load.ErrorTime >= 1000) {
 10493  02EC  3003               	movlw	3
 10494  02ED  022C               	subwf	((_Load+1)^(0+256)+3),w
 10495  02EE  30E8               	movlw	232
 10496  02EF  1903               	skipnz
 10497  02F0  022B               	subwf	(_Load^(0+256)+3),w
 10498  02F1  1C03               	skipc
 10499  02F2  0008               	return
 10500                           
 10501                           ;OverLoad_B1.c: 165: Load.ErrorTime = 0;
 10502  02F3  01AB               	clrf	(_Load^(0+256)+3)
 10503  02F4  01AC               	clrf	((_Load+1)^(0+256)+3)
 10504                           
 10505                           ;OverLoad_B1.c: 172: Load.ERROR = 0;
 10506  02F5  12A8               	bcf	_Load^(0+256),5
 10507                           
 10508                           ;OverLoad_B1.c: 173: }
 10509                           ;OverLoad_B1.c: 174: }
 10510                           ;OverLoad_B1.c: 175: }
 10511                           ;OverLoad_B1.c: 176: } else {
 10512  02F6  0008               	return
 10513  02F7                     l1460:	
 10514                           
 10515                           ;OverLoad_B1.c: 177: if (myMain.PowerON == 1) {
 10516  02F7  0021               	movlb	1	; select bank1
 10517  02F8  1C20               	btfss	_myMain^(0+128),0
 10518  02F9  0008               	return
 10519                           
 10520                           ;OverLoad_B1.c: 178: Load.Enable = 1;
 10521  02FA  0022               	movlb	2	; select bank2
 10522  02FB  1428               	bsf	_Load^(0+256),0
 10523  02FC  0008               	return
 10524  02FD                     __end_of_Load_Main:	
 10525                           
 10526                           	psect	text53
 10527  1C48                     __ptext53:	
 10528 ;; *************** function _getMain_LoadOK *****************
 10529 ;; Defined at:
 10530 ;;		line 432 in file "../src/main_B1.c"
 10531 ;; Parameters:    Size  Location     Type
 10532 ;;		None
 10533 ;; Auto vars:     Size  Location     Type
 10534 ;;  ok              1    2[BANK0 ] unsigned char 
 10535 ;; Return value:  Size  Location     Type
 10536 ;;                  1    wreg      unsigned char 
 10537 ;; Registers used:
 10538 ;;		wreg, status,2, pclath, cstack
 10539 ;; Tracked objects:
 10540 ;;		On entry : 0/0
 10541 ;;		On exit  : 0/0
 10542 ;;		Unchanged: 0/0
 10543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10545 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10546 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10547 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10548 ;;Total ram usage:        2 bytes
 10549 ;; Hardware stack levels used:    1
 10550 ;; Hardware stack levels required when called:    6
 10551 ;; This function calls:
 10552 ;;		_getDimmer_LoadOK
 10553 ;; This function is called by:
 10554 ;;		_Load_Main
 10555 ;; This function uses a non-reentrant model
 10556 ;;
 10557                           
 10558                           
 10559                           ;psect for function _getMain_LoadOK
 10560  1C48                     _getMain_LoadOK:	
 10561                           
 10562                           ;main_B1.c: 433: char ok = 0;
 10563                           
 10564                           ;incstack = 0
 10565                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10566  1C48  0020               	movlb	0	; select bank0
 10567  1C49  01A2               	clrf	getMain_LoadOK@ok
 10568                           
 10569                           ;main_B1.c: 439: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10570  1C4A  319B  23A4         	fcall	_getDimmer_LoadOK
 10571  1C4C  3A01               	xorlw	1
 10572  1C4D  3000               	movlw	0
 10573  1C4E  1903               	skipnz
 10574  1C4F  3001               	movlw	1
 10575  1C50  0020               	movlb	0	; select bank0
 10576  1C51  00A1               	movwf	??_getMain_LoadOK
 10577  1C52  0821               	movf	??_getMain_LoadOK,w
 10578  1C53  00A2               	movwf	getMain_LoadOK@ok
 10579                           
 10580                           ;main_B1.c: 441: return ok;
 10581  1C54  0822               	movf	getMain_LoadOK@ok,w
 10582  1C55  0008               	return
 10583  1C56                     __end_of_getMain_LoadOK:	
 10584                           
 10585                           	psect	text54
 10586  1BA4                     __ptext54:	
 10587 ;; *************** function _getDimmer_LoadOK *****************
 10588 ;; Defined at:
 10589 ;;		line 614 in file "../src/Dimmer_B1.c"
 10590 ;; Parameters:    Size  Location     Type
 10591 ;;		None
 10592 ;; Auto vars:     Size  Location     Type
 10593 ;;  status          1    0[BANK0 ] unsigned char 
 10594 ;; Return value:  Size  Location     Type
 10595 ;;                  1    wreg      unsigned char 
 10596 ;; Registers used:
 10597 ;;		wreg, status,2
 10598 ;; Tracked objects:
 10599 ;;		On entry : 0/0
 10600 ;;		On exit  : 0/0
 10601 ;;		Unchanged: 0/0
 10602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10604 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10606 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10607 ;;Total ram usage:        1 bytes
 10608 ;; Hardware stack levels used:    1
 10609 ;; Hardware stack levels required when called:    5
 10610 ;; This function calls:
 10611 ;;		Nothing
 10612 ;; This function is called by:
 10613 ;;		_getMain_LoadOK
 10614 ;; This function uses a non-reentrant model
 10615 ;;
 10616                           
 10617                           
 10618                           ;psect for function _getDimmer_LoadOK
 10619  1BA4                     _getDimmer_LoadOK:	
 10620                           
 10621                           ;Dimmer_B1.c: 615: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10622                           
 10623                           ;incstack = 0
 10624                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10625  1BA4  3000               	movlw	0
 10626  1BA5  0022               	movlb	2	; select bank2
 10627  1BA6  18A0               	btfsc	_Dimmer^(0+256),1
 10628  1BA7  3001               	movlw	1
 10629  1BA8  0020               	movlb	0	; select bank0
 10630  1BA9  00A0               	movwf	getDimmer_LoadOK@status
 10631                           
 10632                           ;Dimmer_B1.c: 616: return status;
 10633  1BAA  0820               	movf	getDimmer_LoadOK@status,w
 10634  1BAB  0008               	return
 10635  1BAC                     __end_of_getDimmer_LoadOK:	
 10636                           
 10637                           	psect	text55
 10638  1DEE                     __ptext55:	
 10639 ;; *************** function _getMain_Lights_Count *****************
 10640 ;; Defined at:
 10641 ;;		line 402 in file "../src/main_B1.c"
 10642 ;; Parameters:    Size  Location     Type
 10643 ;;		None
 10644 ;; Auto vars:     Size  Location     Type
 10645 ;;  status2         1    3[BANK0 ] unsigned char 
 10646 ;;  status1         1    2[BANK0 ] unsigned char 
 10647 ;;  status3         1    1[BANK0 ] unsigned char 
 10648 ;;  count           1    0[BANK0 ] unsigned char 
 10649 ;; Return value:  Size  Location     Type
 10650 ;;                  1    wreg      unsigned char 
 10651 ;; Registers used:
 10652 ;;		wreg, status,2, status,0
 10653 ;; Tracked objects:
 10654 ;;		On entry : 0/0
 10655 ;;		On exit  : 0/0
 10656 ;;		Unchanged: 0/0
 10657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10659 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10661 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10662 ;;Total ram usage:        4 bytes
 10663 ;; Hardware stack levels used:    1
 10664 ;; Hardware stack levels required when called:    5
 10665 ;; This function calls:
 10666 ;;		Nothing
 10667 ;; This function is called by:
 10668 ;;		_Load_Main
 10669 ;; This function uses a non-reentrant model
 10670 ;;
 10671                           
 10672                           
 10673                           ;psect for function _getMain_Lights_Count
 10674  1DEE                     _getMain_Lights_Count:	
 10675                           
 10676                           ;main_B1.c: 403: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10677                           
 10678                           ;incstack = 0
 10679                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10680  1DEE  0020               	movlb	0	; select bank0
 10681  1DEF  01A2               	clrf	getMain_Lights_Count@status1
 10682  1DF0  01A3               	clrf	getMain_Lights_Count@status2
 10683  1DF1  01A1               	clrf	getMain_Lights_Count@status3
 10684  1DF2  01A0               	clrf	getMain_Lights_Count@count
 10685                           
 10686                           ;main_B1.c: 407: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10687  1DF3  3000               	movlw	0
 10688  1DF4  0023               	movlb	3	; select bank3
 10689  1DF5  18C7               	btfsc	(_DimmerLights1^(0+384)+9),1
 10690  1DF6  3001               	movlw	1
 10691  1DF7  0020               	movlb	0	; select bank0
 10692  1DF8  00A2               	movwf	getMain_Lights_Count@status1
 10693                           
 10694                           ;main_B1.c: 410: status2 = DimmerLights2.Loop == 1 ? 1 : 0;
 10695  1DF9  3000               	movlw	0
 10696  1DFA  0023               	movlb	3	; select bank3
 10697  1DFB  18D6               	btfsc	(_DimmerLights2^(0+384)+9),1
 10698  1DFC  3001               	movlw	1
 10699  1DFD  0020               	movlb	0	; select bank0
 10700  1DFE  00A3               	movwf	getMain_Lights_Count@status2
 10701                           
 10702                           ;main_B1.c: 428: return count = (status1 + status2 + status3);
 10703  1DFF  0822               	movf	getMain_Lights_Count@status1,w
 10704  1E00  0723               	addwf	getMain_Lights_Count@status2,w
 10705  1E01  0721               	addwf	getMain_Lights_Count@status3,w
 10706  1E02  00A0               	movwf	getMain_Lights_Count@count
 10707  1E03  0008               	return
 10708  1E04                     __end_of_getMain_Lights_Count:	
 10709                           
 10710                           	psect	text56
 10711  1B6C                     __ptext56:	
 10712 ;; *************** function _Load_Initialization *****************
 10713 ;; Defined at:
 10714 ;;		line 9 in file "../src/OverLoad_B1.c"
 10715 ;; Parameters:    Size  Location     Type
 10716 ;;		None
 10717 ;; Auto vars:     Size  Location     Type
 10718 ;;		None
 10719 ;; Return value:  Size  Location     Type
 10720 ;;		None               void
 10721 ;; Registers used:
 10722 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10723 ;; Tracked objects:
 10724 ;;		On entry : 0/0
 10725 ;;		On exit  : 0/0
 10726 ;;		Unchanged: 0/0
 10727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10732 ;;Total ram usage:        0 bytes
 10733 ;; Hardware stack levels used:    1
 10734 ;; Hardware stack levels required when called:    6
 10735 ;; This function calls:
 10736 ;;		_setLoad_AH_AL_Restore
 10737 ;; This function is called by:
 10738 ;;		_main
 10739 ;; This function uses a non-reentrant model
 10740 ;;
 10741                           
 10742                           
 10743                           ;psect for function _Load_Initialization
 10744  1B6C                     _Load_Initialization:	
 10745                           
 10746                           ;OverLoad_B1.c: 10: Load.OK = 1;
 10747                           
 10748                           ;incstack = 0
 10749                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10750  1B6C  0022               	movlb	2	; select bank2
 10751  1B6D  17A8               	bsf	_Load^(0+256),7
 10752                           
 10753                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10754  1B6E  319E  269C         	fcall	_setLoad_AH_AL_Restore
 10755  1B70  0008               	return
 10756  1B71                     __end_of_Load_Initialization:	
 10757                           
 10758                           	psect	text57
 10759  1E9C                     __ptext57:	
 10760 ;; *************** function _setLoad_AH_AL_Restore *****************
 10761 ;; Defined at:
 10762 ;;		line 284 in file "../src/OverLoad_B1.c"
 10763 ;; Parameters:    Size  Location     Type
 10764 ;;		None
 10765 ;; Auto vars:     Size  Location     Type
 10766 ;;  i               1    1[BANK0 ] unsigned char 
 10767 ;; Return value:  Size  Location     Type
 10768 ;;		None               void
 10769 ;; Registers used:
 10770 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10771 ;; Tracked objects:
 10772 ;;		On entry : 0/0
 10773 ;;		On exit  : 0/0
 10774 ;;		Unchanged: 0/0
 10775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10779 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10780 ;;Total ram usage:        2 bytes
 10781 ;; Hardware stack levels used:    1
 10782 ;; Hardware stack levels required when called:    5
 10783 ;; This function calls:
 10784 ;;		Nothing
 10785 ;; This function is called by:
 10786 ;;		_Load_Initialization
 10787 ;;		_Load_Main
 10788 ;; This function uses a non-reentrant model
 10789 ;;
 10790                           
 10791                           
 10792                           ;psect for function _setLoad_AH_AL_Restore
 10793  1E9C                     _setLoad_AH_AL_Restore:	
 10794                           
 10795                           ;OverLoad_B1.c: 285: char i;
 10796                           ;OverLoad_B1.c: 286: for (i = 0; i < 5; i++) {
 10797                           
 10798                           ;incstack = 0
 10799                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 10800  1E9C  0020               	movlb	0	; select bank0
 10801  1E9D  01A1               	clrf	setLoad_AH_AL_Restore@i
 10802  1E9E                     L8:	
 10803  1E9E  3005               	movlw	5
 10804  1E9F  0221               	subwf	setLoad_AH_AL_Restore@i,w
 10805  1EA0  1803               	btfsc	3,0
 10806  1EA1  0008               	return
 10807                           
 10808                           ;OverLoad_B1.c: 287: Load.AH[i] = 0;
 10809  1EA2  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10810  1EA3  3E33               	addlw	(_Load+11)& (0+255)
 10811  1EA4  0086               	movwf	6
 10812  1EA5  3001               	movlw	1	; select bank2/3
 10813  1EA6  0087               	movwf	7
 10814  1EA7  3000               	movlw	0
 10815  1EA8  3FC0               	movwi [0]fsr1
 10816  1EA9  3FC1               	movwi [1]fsr1
 10817                           
 10818                           ;OverLoad_B1.c: 288: Load.AL[i] = 0xffff;
 10819  1EAA  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10820  1EAB  3E3D               	addlw	(_Load+21)& (0+255)
 10821  1EAC  0086               	movwf	6
 10822  1EAD  3001               	movlw	1	; select bank2/3
 10823  1EAE  0087               	movwf	7
 10824  1EAF  30FF               	movlw	255
 10825  1EB0  3FC0               	movwi [0]fsr1
 10826  1EB1  30FF               	movlw	255
 10827  1EB2  3FC1               	movwi [1]fsr1
 10828  1EB3  3001               	movlw	1
 10829  1EB4  00A0               	movwf	??_setLoad_AH_AL_Restore
 10830  1EB5  0820               	movf	??_setLoad_AH_AL_Restore,w
 10831  1EB6  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 10832  1EB7  2E9E               	goto	L8
 10833  1EB8                     __end_of_setLoad_AH_AL_Restore:	
 10834                           
 10835                           	psect	text58
 10836  1C17                     __ptext58:	
 10837 ;; *************** function _LED_Main *****************
 10838 ;; Defined at:
 10839 ;;		line 47 in file "../src/LED_B1.c"
 10840 ;; Parameters:    Size  Location     Type
 10841 ;;		None
 10842 ;; Auto vars:     Size  Location     Type
 10843 ;;		None
 10844 ;; Return value:  Size  Location     Type
 10845 ;;		None               void
 10846 ;; Registers used:
 10847 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10848 ;; Tracked objects:
 10849 ;;		On entry : 0/0
 10850 ;;		On exit  : 0/0
 10851 ;;		Unchanged: 0/0
 10852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10857 ;;Total ram usage:        0 bytes
 10858 ;; Hardware stack levels used:    1
 10859 ;; Hardware stack levels required when called:    7
 10860 ;; This function calls:
 10861 ;;		_setLED_Main
 10862 ;; This function is called by:
 10863 ;;		_main
 10864 ;; This function uses a non-reentrant model
 10865 ;;
 10866                           
 10867                           
 10868                           ;psect for function _LED_Main
 10869  1C17                     _LED_Main:	
 10870                           
 10871                           ;LED_B1.c: 49: setLED_Main(1);
 10872                           
 10873                           ;incstack = 0
 10874                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10875  1C17  3001               	movlw	1
 10876  1C18  3193  23EE  319C   	fcall	_setLED_Main
 10877                           
 10878                           ;LED_B1.c: 52: setLED_Main(2);
 10879  1C1B  3002               	movlw	2
 10880  1C1C  3193  23EE  319C   	fcall	_setLED_Main
 10881                           
 10882                           ;LED_B1.c: 58: setLED_Main(99);
 10883  1C1F  3063               	movlw	99
 10884  1C20  3193  23EE         	fcall	_setLED_Main
 10885  1C22  0008               	return
 10886  1C23                     __end_of_LED_Main:	
 10887                           
 10888                           	psect	text59
 10889  13EE                     __ptext59:	
 10890 ;; *************** function _setLED_Main *****************
 10891 ;; Defined at:
 10892 ;;		line 216 in file "../src/LED_B1.c"
 10893 ;; Parameters:    Size  Location     Type
 10894 ;;  led             1    wreg     unsigned char 
 10895 ;; Auto vars:     Size  Location     Type
 10896 ;;  led             1    4[BANK0 ] unsigned char 
 10897 ;; Return value:  Size  Location     Type
 10898 ;;		None               void
 10899 ;; Registers used:
 10900 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10901 ;; Tracked objects:
 10902 ;;		On entry : 0/0
 10903 ;;		On exit  : 0/0
 10904 ;;		Unchanged: 0/0
 10905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10907 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10908 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10909 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10910 ;;Total ram usage:        3 bytes
 10911 ;; Hardware stack levels used:    1
 10912 ;; Hardware stack levels required when called:    6
 10913 ;; This function calls:
 10914 ;;		_LedPointSelect
 10915 ;; This function is called by:
 10916 ;;		_LED_Main
 10917 ;; This function uses a non-reentrant model
 10918 ;;
 10919                           
 10920                           
 10921                           ;psect for function _setLED_Main
 10922  13EE                     _setLED_Main:	
 10923                           
 10924                           ;incstack = 0
 10925                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10926                           ;setLED_Main@led stored from wreg
 10927  13EE  0020               	movlb	0	; select bank0
 10928  13EF  00A4               	movwf	setLED_Main@led
 10929                           
 10930                           ;LED_B1.c: 217: LedPointSelect(led);
 10931  13F0  0824               	movf	setLED_Main@led,w
 10932  13F1  319E  2681  3193   	fcall	_LedPointSelect
 10933                           
 10934                           ;LED_B1.c: 218: if (LED->GO == 1) {
 10935  13F4  087A               	movf	_LED,w
 10936  13F5  0086               	movwf	6
 10937  13F6  3001               	movlw	1	; select bank2/3
 10938  13F7  0087               	movwf	7
 10939  13F8  1C81               	btfss	1,1
 10940  13F9  0008               	return
 10941                           
 10942                           ;LED_B1.c: 219: LED->Time++;
 10943  13FA  0A7A               	incf	_LED,w
 10944  13FB  0086               	movwf	6
 10945  13FC  3001               	movlw	1	; select bank2/3
 10946  13FD  0087               	movwf	7
 10947  13FE  3001               	movlw	1
 10948  13FF  0781               	addwf	1,f
 10949  1400  3141               	addfsr 1,1
 10950  1401  1803               	skipnc
 10951  1402  0A81               	incf	1,f
 10952                           
 10953                           ;LED_B1.c: 220: if (LED->Time >= 500 / 10) {
 10954  1403  0A7A               	incf	_LED,w
 10955  1404  0086               	movwf	6
 10956  1405  3001               	movlw	1	; select bank2/3
 10957  1406  0087               	movwf	7
 10958  1407  3F40               	moviw [0]fsr1
 10959  1408  0020               	movlb	0	; select bank0
 10960  1409  00A2               	movwf	??_setLED_Main
 10961  140A  3F41               	moviw [1]fsr1
 10962  140B  00A3               	movwf	??_setLED_Main+1
 10963  140C  3000               	movlw	0
 10964  140D  0223               	subwf	??_setLED_Main+1,w
 10965  140E  3032               	movlw	50
 10966  140F  1903               	skipnz
 10967  1410  0222               	subwf	??_setLED_Main,w
 10968  1411  1C03               	skipc
 10969  1412  0008               	return
 10970                           
 10971                           ;LED_B1.c: 221: LED->Time = 0;
 10972  1413  0A7A               	incf	_LED,w
 10973  1414  0086               	movwf	6
 10974  1415  3001               	movlw	1	; select bank2/3
 10975  1416  0087               	movwf	7
 10976  1417  3000               	movlw	0
 10977  1418  3FC0               	movwi [0]fsr1
 10978  1419  3FC1               	movwi [1]fsr1
 10979                           
 10980                           ;LED_B1.c: 223: if (led == 1) {
 10981  141A  0824               	movf	setLED_Main@led,w
 10982  141B  3A01               	xorlw	1
 10983                           
 10984                           ;LED_B1.c: 224: RA3 = RA3 == 1 ? 0 : 1;
 10985  141C  3008               	movlw	8
 10986  141D  1903               	btfsc	3,2
 10987  141E  068C               	xorwf	12,f
 10988                           
 10989                           ;LED_B1.c: 225: }
 10990                           ;LED_B1.c: 228: if (led == 2) {
 10991  141F  0824               	movf	setLED_Main@led,w
 10992  1420  3A02               	xorlw	2
 10993  1421  1D03               	skipz
 10994  1422  2C25               	goto	l1033
 10995                           
 10996                           ;LED_B1.c: 229: RC7 = RC7 == 1 ? 0 : 1;
 10997  1423  3080               	movlw	128
 10998  1424  068E               	xorwf	14,f
 10999  1425                     l1033:	
 11000                           
 11001                           ;LED_B1.c: 230: }
 11002                           ;LED_B1.c: 238: if (led == 99) {
 11003  1425  0824               	movf	setLED_Main@led,w
 11004  1426  3A63               	xorlw	99
 11005  1427  1D03               	skipz
 11006  1428  0008               	return
 11007                           
 11008                           ;LED_B1.c: 239: RB5 = RB5 == 1 ? 0 : 1;
 11009  1429  3020               	movlw	32
 11010  142A  068D               	xorwf	13,f
 11011  142B  0008               	return
 11012  142C                     __end_of_setLED_Main:	
 11013                           
 11014                           	psect	text60
 11015  1C0B                     __ptext60:	
 11016 ;; *************** function _LED_Initialization *****************
 11017 ;; Defined at:
 11018 ;;		line 31 in file "../src/LED_B1.c"
 11019 ;; Parameters:    Size  Location     Type
 11020 ;;		None
 11021 ;; Auto vars:     Size  Location     Type
 11022 ;;		None
 11023 ;; Return value:  Size  Location     Type
 11024 ;;		None               void
 11025 ;; Registers used:
 11026 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11027 ;; Tracked objects:
 11028 ;;		On entry : 0/0
 11029 ;;		On exit  : 0/0
 11030 ;;		Unchanged: 0/0
 11031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11036 ;;Total ram usage:        0 bytes
 11037 ;; Hardware stack levels used:    1
 11038 ;; Hardware stack levels required when called:    8
 11039 ;; This function calls:
 11040 ;;		_setLED_Initialization
 11041 ;; This function is called by:
 11042 ;;		_main
 11043 ;; This function uses a non-reentrant model
 11044 ;;
 11045                           
 11046                           
 11047                           ;psect for function _LED_Initialization
 11048  1C0B                     _LED_Initialization:	
 11049                           
 11050                           ;LED_B1.c: 33: setLED_Initialization(1);
 11051                           
 11052                           ;incstack = 0
 11053                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11054  1C0B  3001               	movlw	1
 11055  1C0C  319C  2495  319C   	fcall	_setLED_Initialization
 11056                           
 11057                           ;LED_B1.c: 36: setLED_Initialization(2);
 11058  1C0F  3002               	movlw	2
 11059  1C10  319C  2495  319C   	fcall	_setLED_Initialization
 11060                           
 11061                           ;LED_B1.c: 42: setLED_Initialization(99);
 11062  1C13  3063               	movlw	99
 11063  1C14  319C  2495         	fcall	_setLED_Initialization
 11064  1C16  0008               	return
 11065  1C17                     __end_of_LED_Initialization:	
 11066                           
 11067                           	psect	text61
 11068  1C95                     __ptext61:	
 11069 ;; *************** function _setLED_Initialization *****************
 11070 ;; Defined at:
 11071 ;;		line 66 in file "../src/LED_B1.c"
 11072 ;; Parameters:    Size  Location     Type
 11073 ;;  led             1    wreg     unsigned char 
 11074 ;; Auto vars:     Size  Location     Type
 11075 ;;  led             1    4[BANK0 ] unsigned char 
 11076 ;; Return value:  Size  Location     Type
 11077 ;;		None               void
 11078 ;; Registers used:
 11079 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11080 ;; Tracked objects:
 11081 ;;		On entry : 0/0
 11082 ;;		On exit  : 0/0
 11083 ;;		Unchanged: 0/0
 11084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11086 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11088 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11089 ;;Total ram usage:        1 bytes
 11090 ;; Hardware stack levels used:    1
 11091 ;; Hardware stack levels required when called:    7
 11092 ;; This function calls:
 11093 ;;		_LedPointSelect
 11094 ;;		_setLED
 11095 ;; This function is called by:
 11096 ;;		_LED_Initialization
 11097 ;; This function uses a non-reentrant model
 11098 ;;
 11099                           
 11100                           
 11101                           ;psect for function _setLED_Initialization
 11102  1C95                     _setLED_Initialization:	
 11103                           
 11104                           ;incstack = 0
 11105                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11106                           ;setLED_Initialization@led stored from wreg
 11107  1C95  0020               	movlb	0	; select bank0
 11108  1C96  00A4               	movwf	setLED_Initialization@led
 11109                           
 11110                           ;LED_B1.c: 67: LedPointSelect(led);
 11111  1C97  0824               	movf	setLED_Initialization@led,w
 11112  1C98  319E  2681  319C   	fcall	_LedPointSelect
 11113                           
 11114                           ;LED_B1.c: 68: LED->Enable = 1;
 11115  1C9B  087A               	movf	_LED,w
 11116  1C9C  0086               	movwf	6
 11117  1C9D  3001               	movlw	1	; select bank2/3
 11118  1C9E  0087               	movwf	7
 11119  1C9F  1401               	bsf	1,0
 11120                           
 11121                           ;LED_B1.c: 69: setLED(led, 0);
 11122  1CA0  0020               	movlb	0	; select bank0
 11123  1CA1  01A2               	clrf	setLED@command
 11124  1CA2  0824               	movf	setLED_Initialization@led,w
 11125  1CA3  3195  2545         	fcall	_setLED
 11126  1CA5  0008               	return
 11127  1CA6                     __end_of_setLED_Initialization:	
 11128                           
 11129                           	psect	text62
 11130  129E                     __ptext62:	
 11131 ;; *************** function _Flash_Memory_Main *****************
 11132 ;; Defined at:
 11133 ;;		line 901 in file "../src/MCU_B1.c"
 11134 ;; Parameters:    Size  Location     Type
 11135 ;;		None
 11136 ;; Auto vars:     Size  Location     Type
 11137 ;;		None
 11138 ;; Return value:  Size  Location     Type
 11139 ;;		None               void
 11140 ;; Registers used:
 11141 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11142 ;; Tracked objects:
 11143 ;;		On entry : 0/0
 11144 ;;		On exit  : 0/0
 11145 ;;		Unchanged: 0/0
 11146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11149 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11150 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11151 ;;Total ram usage:        1 bytes
 11152 ;; Hardware stack levels used:    1
 11153 ;; Hardware stack levels required when called:    8
 11154 ;; This function calls:
 11155 ;;		_Flash_Memory_Modify
 11156 ;;		_getMain_LightsStatus
 11157 ;; This function is called by:
 11158 ;;		_main
 11159 ;; This function uses a non-reentrant model
 11160 ;;
 11161                           
 11162                           
 11163                           ;psect for function _Flash_Memory_Main
 11164  129E                     _Flash_Memory_Main:	
 11165                           
 11166                           ;MCU_B1.c: 902: if (Memory.Modify == 1) {
 11167                           
 11168                           ;incstack = 0
 11169                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11170  129E  0024               	movlb	4	; select bank4
 11171  129F  1C44               	btfss	(_Memory^(0+512)+36),0
 11172  12A0  0008               	return
 11173                           
 11174                           ;MCU_B1.c: 903: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11175  12A1  3191  2172  3192   	fcall	_getMain_LightsStatus
 11176  12A4  3A00               	xorlw	0
 11177  12A5  3000               	movlw	0
 11178  12A6  1903               	skipnz
 11179  12A7  3001               	movlw	1
 11180  12A8  0020               	movlb	0	; select bank0
 11181  12A9  00A9               	movwf	??_Flash_Memory_Main
 11182  12AA  0DA9               	rlf	??_Flash_Memory_Main,f
 11183  12AB  0024               	movlb	4	; select bank4
 11184  12AC  0844               	movf	(_Memory^(0+512)+36),w
 11185  12AD  0020               	movlb	0	; select bank0
 11186  12AE  0629               	xorwf	??_Flash_Memory_Main,w
 11187  12AF  39FD               	andlw	-3
 11188  12B0  0629               	xorwf	??_Flash_Memory_Main,w
 11189  12B1  0024               	movlb	4	; select bank4
 11190  12B2  00C4               	movwf	(_Memory^(0+512)+36)
 11191                           
 11192                           ;MCU_B1.c: 904: if (Memory.GO == 1) {
 11193  12B3  1CC4               	btfss	(_Memory^(0+512)+36),1
 11194  12B4  2ACE               	goto	l1301
 11195                           
 11196                           ;MCU_B1.c: 905: Memory.Runtime = 1;
 11197  12B5  15C4               	bsf	(_Memory^(0+512)+36),3
 11198                           
 11199                           ;MCU_B1.c: 906: Memory.Time++;
 11200  12B6  3001               	movlw	1
 11201  12B7  07C2               	addwf	(_Memory^(0+512)+34),f
 11202  12B8  3000               	movlw	0
 11203  12B9  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11204                           
 11205                           ;MCU_B1.c: 907: if (Memory.Time == 25) {
 11206  12BA  3022               	movlw	34
 11207  12BB  3E20               	addlw	_Memory& (0+255)
 11208  12BC  0086               	movwf	6
 11209  12BD  3002               	movlw	2	; select bank4/5
 11210  12BE  0087               	movwf	7
 11211  12BF  3F40               	moviw [0]fsr1
 11212  12C0  3A19               	xorlw	25
 11213  12C1  1D03               	skipz
 11214  12C2  2AC5               	goto	u10195
 11215  12C3  3F41               	moviw [1]fsr1
 11216  12C4  3A00               	xorlw	0
 11217  12C5                     u10195:	
 11218  12C5  1D03               	skipz
 11219  12C6  0008               	return
 11220                           
 11221                           ;MCU_B1.c: 908: Memory.Time = 0;
 11222  12C7  01C2               	clrf	(_Memory^(0+512)+34)
 11223  12C8  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11224                           
 11225                           ;MCU_B1.c: 909: Memory.Modify = 0;
 11226  12C9  1044               	bcf	(_Memory^(0+512)+36),0
 11227                           
 11228                           ;MCU_B1.c: 910: Memory.GO = 0;
 11229  12CA  10C4               	bcf	(_Memory^(0+512)+36),1
 11230                           
 11231                           ;MCU_B1.c: 911: Flash_Memory_Modify();
 11232  12CB  3194  24F7         	fcall	_Flash_Memory_Modify
 11233                           
 11234                           ;MCU_B1.c: 912: }
 11235                           ;MCU_B1.c: 913: } else {
 11236  12CD  0008               	return
 11237  12CE                     l1301:	
 11238                           
 11239                           ;MCU_B1.c: 914: if (Memory.Runtime == 1) {
 11240  12CE  1DC4               	btfss	(_Memory^(0+512)+36),3
 11241  12CF  0008               	return
 11242                           
 11243                           ;MCU_B1.c: 915: Memory.Runtime = 0;
 11244  12D0  11C4               	bcf	(_Memory^(0+512)+36),3
 11245                           
 11246                           ;MCU_B1.c: 916: Memory.Time = 0;
 11247  12D1  01C2               	clrf	(_Memory^(0+512)+34)
 11248  12D2  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11249  12D3  0008               	return
 11250  12D4                     __end_of_Flash_Memory_Main:	
 11251                           
 11252                           	psect	text63
 11253  14F7                     __ptext63:	
 11254 ;; *************** function _Flash_Memory_Modify *****************
 11255 ;; Defined at:
 11256 ;;		line 974 in file "../src/MCU_B1.c"
 11257 ;; Parameters:    Size  Location     Type
 11258 ;;		None
 11259 ;; Auto vars:     Size  Location     Type
 11260 ;;  i               1    5[BANK0 ] unsigned char 
 11261 ;; Return value:  Size  Location     Type
 11262 ;;		None               void
 11263 ;; Registers used:
 11264 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11265 ;; Tracked objects:
 11266 ;;		On entry : 0/0
 11267 ;;		On exit  : 0/0
 11268 ;;		Unchanged: 0/0
 11269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11271 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11272 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11273 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11274 ;;Total ram usage:        2 bytes
 11275 ;; Hardware stack levels used:    1
 11276 ;; Hardware stack levels required when called:    7
 11277 ;; This function calls:
 11278 ;;		_Flash_Memory_Erasing
 11279 ;;		_Flash_Memory_Read
 11280 ;;		_Flash_Memory_Write
 11281 ;;		_setMemory_Data
 11282 ;; This function is called by:
 11283 ;;		_Flash_Memory_Main
 11284 ;; This function uses a non-reentrant model
 11285 ;;
 11286                           
 11287                           
 11288                           ;psect for function _Flash_Memory_Modify
 11289  14F7                     _Flash_Memory_Modify:	
 11290                           
 11291                           ;MCU_B1.c: 975: char i = 0;
 11292                           
 11293                           ;incstack = 0
 11294                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11295  14F7  0020               	movlb	0	; select bank0
 11296  14F8  01A5               	clrf	Flash_Memory_Modify@i
 11297                           
 11298                           ;MCU_B1.c: 976: for (i = 0; i < 32; i++) {
 11299  14F9  01A5               	clrf	Flash_Memory_Modify@i
 11300  14FA  3020               	movlw	32
 11301  14FB  0225               	subwf	Flash_Memory_Modify@i,w
 11302  14FC  1803               	btfsc	3,0
 11303  14FD  2D13               	goto	l7311
 11304  14FE                     l7305:	
 11305                           
 11306                           ;MCU_B1.c: 977: Memory.Data[i] = Flash_Memory_Read(i);
 11307  14FE  0825               	movf	Flash_Memory_Modify@i,w
 11308  14FF  319E  2667  3194   	fcall	_Flash_Memory_Read
 11309  1502  0020               	movlb	0	; select bank0
 11310  1503  00A4               	movwf	??_Flash_Memory_Modify
 11311  1504  0825               	movf	Flash_Memory_Modify@i,w
 11312  1505  3E20               	addlw	_Memory& (0+255)
 11313  1506  0086               	movwf	6
 11314  1507  3002               	movlw	2	; select bank4/5
 11315  1508  0087               	movwf	7
 11316  1509  0824               	movf	??_Flash_Memory_Modify,w
 11317  150A  0081               	movwf	1
 11318  150B  3001               	movlw	1
 11319  150C  00A4               	movwf	??_Flash_Memory_Modify
 11320  150D  0824               	movf	??_Flash_Memory_Modify,w
 11321  150E  07A5               	addwf	Flash_Memory_Modify@i,f
 11322  150F  3020               	movlw	32
 11323  1510  0225               	subwf	Flash_Memory_Modify@i,w
 11324  1511  1C03               	skipc
 11325  1512  2CFE               	goto	l7305
 11326  1513                     l7311:	
 11327                           
 11328                           ;MCU_B1.c: 978: }
 11329                           ;MCU_B1.c: 979: setMemory_Data(0, product->Data[12]);
 11330  1513  086E               	movf	_product,w
 11331  1514  0086               	movwf	6
 11332  1515  3002               	movlw	2	; select bank4/5
 11333  1516  0087               	movwf	7
 11334  1517  3002               	movlw	2	; select bank4/5
 11335  1518  3F4C               	moviw [12]fsr1
 11336  1519  00A0               	movwf	setMemory_Data@data
 11337  151A  3000               	movlw	0
 11338  151B  319B  23F3  3194   	fcall	_setMemory_Data
 11339                           
 11340                           ;MCU_B1.c: 980: setMemory_Data(1, product->Data[13]);
 11341  151E  0020               	movlb	0	; select bank0
 11342  151F  086E               	movf	_product,w
 11343  1520  0086               	movwf	6
 11344  1521  3002               	movlw	2	; select bank4/5
 11345  1522  0087               	movwf	7
 11346  1523  3002               	movlw	2	; select bank4/5
 11347  1524  3F4D               	moviw [13]fsr1
 11348  1525  00A0               	movwf	setMemory_Data@data
 11349  1526  3001               	movlw	1
 11350  1527  319B  23F3  3194   	fcall	_setMemory_Data
 11351                           
 11352                           ;MCU_B1.c: 981: setMemory_Data(2, product->Data[14]);
 11353  152A  0020               	movlb	0	; select bank0
 11354  152B  086E               	movf	_product,w
 11355  152C  0086               	movwf	6
 11356  152D  3002               	movlw	2	; select bank4/5
 11357  152E  0087               	movwf	7
 11358  152F  3002               	movlw	2	; select bank4/5
 11359  1530  3F4E               	moviw [14]fsr1
 11360  1531  00A0               	movwf	setMemory_Data@data
 11361  1532  3002               	movlw	2
 11362  1533  319B  23F3  3194   	fcall	_setMemory_Data
 11363                           
 11364                           ;MCU_B1.c: 987: if (Memory.LoopSave == 1) {
 11365  1536  0024               	movlb	4	; select bank4
 11366  1537  1D44               	btfss	(_Memory^(0+512)+36),2
 11367  1538  2D3D               	goto	l1324
 11368                           
 11369                           ;MCU_B1.c: 988: Memory.LoopSave = 0;
 11370  1539  1144               	bcf	(_Memory^(0+512)+36),2
 11371                           
 11372                           ;MCU_B1.c: 989: myMain.FirstOpen = 0;
 11373  153A  0021               	movlb	1	; select bank1
 11374  153B  11A0               	bcf	_myMain^(0+128),3
 11375                           
 11376                           ;MCU_B1.c: 990: myMain.First = 0;
 11377  153C  12A0               	bcf	_myMain^(0+128),5
 11378  153D                     l1324:	
 11379                           
 11380                           ;MCU_B1.c: 992: }
 11381                           ;MCU_B1.c: 993: GIE = 0;
 11382  153D  138B               	bcf	11,7	;volatile
 11383                           
 11384                           ;MCU_B1.c: 994: Flash_Memory_Erasing();
 11385  153E  319B  23FF  3194   	fcall	_Flash_Memory_Erasing
 11386                           
 11387                           ;MCU_B1.c: 995: Flash_Memory_Write();
 11388  1541  3191  219E         	fcall	_Flash_Memory_Write
 11389                           
 11390                           ;MCU_B1.c: 996: GIE = 1;
 11391  1543  178B               	bsf	11,7	;volatile
 11392  1544  0008               	return
 11393  1545                     __end_of_Flash_Memory_Modify:	
 11394                           
 11395                           	psect	text64
 11396  1BFF                     __ptext64:	
 11397 ;; *************** function _Flash_Memory_Erasing *****************
 11398 ;; Defined at:
 11399 ;;		line 963 in file "../src/MCU_B1.c"
 11400 ;; Parameters:    Size  Location     Type
 11401 ;;		None
 11402 ;; Auto vars:     Size  Location     Type
 11403 ;;		None
 11404 ;; Return value:  Size  Location     Type
 11405 ;;		None               void
 11406 ;; Registers used:
 11407 ;;		wreg, status,2, status,0, pclath, cstack
 11408 ;; Tracked objects:
 11409 ;;		On entry : 0/0
 11410 ;;		On exit  : 0/0
 11411 ;;		Unchanged: 0/0
 11412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11417 ;;Total ram usage:        0 bytes
 11418 ;; Hardware stack levels used:    1
 11419 ;; Hardware stack levels required when called:    6
 11420 ;; This function calls:
 11421 ;;		_Flash_Memory_Unlock
 11422 ;; This function is called by:
 11423 ;;		_Flash_Memory_Modify
 11424 ;; This function uses a non-reentrant model
 11425 ;;
 11426                           
 11427                           
 11428                           ;psect for function _Flash_Memory_Erasing
 11429  1BFF                     _Flash_Memory_Erasing:	
 11430                           
 11431                           ;MCU_B1.c: 964: CFGS = 0;
 11432                           
 11433                           ;incstack = 0
 11434                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11435  1BFF  0023               	movlb	3	; select bank3
 11436  1C00  1315               	bcf	21,6	;volatile
 11437                           
 11438                           ;MCU_B1.c: 965: PMADRH = 0x30;
 11439  1C01  3030               	movlw	48
 11440  1C02  0092               	movwf	18	;volatile
 11441                           
 11442                           ;MCU_B1.c: 966: PMADRL = 0x00;
 11443  1C03  0191               	clrf	17	;volatile
 11444                           
 11445                           ;MCU_B1.c: 967: FREE = 1;
 11446  1C04  1615               	bsf	21,4	;volatile
 11447                           
 11448                           ;MCU_B1.c: 968: WREN = 1;
 11449  1C05  1515               	bsf	21,2	;volatile
 11450                           
 11451                           ;MCU_B1.c: 969: Flash_Memory_Unlock();
 11452  1C06  319B  23BD         	fcall	_Flash_Memory_Unlock
 11453                           
 11454                           ;MCU_B1.c: 970: WREN = 0;
 11455  1C08  0023               	movlb	3	; select bank3
 11456  1C09  1115               	bcf	21,2	;volatile
 11457  1C0A  0008               	return
 11458  1C0B                     __end_of_Flash_Memory_Erasing:	
 11459                           
 11460                           	psect	text65
 11461  061F                     __ptext65:	
 11462 ;; *************** function _Flash_Memory_Initialization *****************
 11463 ;; Defined at:
 11464 ;;		line 860 in file "../src/MCU_B1.c"
 11465 ;; Parameters:    Size  Location     Type
 11466 ;;		None
 11467 ;; Auto vars:     Size  Location     Type
 11468 ;;  i               1   67[BANK0 ] unsigned char 
 11469 ;; Return value:  Size  Location     Type
 11470 ;;		None               void
 11471 ;; Registers used:
 11472 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11473 ;; Tracked objects:
 11474 ;;		On entry : 0/0
 11475 ;;		On exit  : 0/0
 11476 ;;		Unchanged: 0/0
 11477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11479 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11480 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11481 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11482 ;;Total ram usage:        2 bytes
 11483 ;; Hardware stack levels used:    1
 11484 ;; Hardware stack levels required when called:    8
 11485 ;; This function calls:
 11486 ;;		_Flash_Memory_Read
 11487 ;;		_Flash_Memory_Write
 11488 ;;		_setMemory_Data
 11489 ;;		_setPercentValue
 11490 ;; This function is called by:
 11491 ;;		_main
 11492 ;; This function uses a non-reentrant model
 11493 ;;
 11494                           
 11495                           
 11496                           ;psect for function _Flash_Memory_Initialization
 11497  061F                     _Flash_Memory_Initialization:	
 11498                           
 11499                           ;MCU_B1.c: 861: char i = 0;
 11500                           
 11501                           ;incstack = 0
 11502                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11503  061F  0020               	movlb	0	; select bank0
 11504  0620  01E3               	clrf	Flash_Memory_Initialization@i
 11505                           
 11506                           ;MCU_B1.c: 862: if (Flash_Memory_Read(31) == 0xaa) {
 11507  0621  301F               	movlw	31
 11508  0622  319E  2667  3186   	fcall	_Flash_Memory_Read
 11509  0625  3AAA               	xorlw	170
 11510  0626  1D03               	skipz
 11511  0627  2E91               	goto	l7781
 11512                           
 11513                           ;MCU_B1.c: 863: product->Data[12] = Flash_Memory_Read(0);
 11514  0628  3000               	movlw	0
 11515  0629  319E  2667  3186   	fcall	_Flash_Memory_Read
 11516  062C  0020               	movlb	0	; select bank0
 11517  062D  00E2               	movwf	??_Flash_Memory_Initialization
 11518  062E  086E               	movf	_product,w
 11519  062F  3E0C               	addlw	12
 11520  0630  0086               	movwf	6
 11521  0631  3002               	movlw	2	; select bank4/5
 11522  0632  0087               	movwf	7
 11523  0633  0862               	movf	??_Flash_Memory_Initialization,w
 11524  0634  0081               	movwf	1
 11525                           
 11526                           ;MCU_B1.c: 864: product->Data[13] = Flash_Memory_Read(1);
 11527  0635  3001               	movlw	1
 11528  0636  319E  2667  3186   	fcall	_Flash_Memory_Read
 11529  0639  0020               	movlb	0	; select bank0
 11530  063A  00E2               	movwf	??_Flash_Memory_Initialization
 11531  063B  086E               	movf	_product,w
 11532  063C  3E0D               	addlw	13
 11533  063D  0086               	movwf	6
 11534  063E  3002               	movlw	2	; select bank4/5
 11535  063F  0087               	movwf	7
 11536  0640  0862               	movf	??_Flash_Memory_Initialization,w
 11537  0641  0081               	movwf	1
 11538                           
 11539                           ;MCU_B1.c: 865: product->Data[14] = Flash_Memory_Read(2);
 11540  0642  3002               	movlw	2
 11541  0643  319E  2667  3186   	fcall	_Flash_Memory_Read
 11542  0646  0020               	movlb	0	; select bank0
 11543  0647  00E2               	movwf	??_Flash_Memory_Initialization
 11544  0648  086E               	movf	_product,w
 11545  0649  3E0E               	addlw	14
 11546  064A  0086               	movwf	6
 11547  064B  3002               	movlw	2	; select bank4/5
 11548  064C  0087               	movwf	7
 11549  064D  0862               	movf	??_Flash_Memory_Initialization,w
 11550  064E  0081               	movwf	1
 11551                           
 11552                           ;MCU_B1.c: 871: i = setPercentValue(((char)(80*0.8)));
 11553  064F  3040               	movlw	64
 11554  0650  3189  21ED  3186   	fcall	_setPercentValue
 11555  0653  0020               	movlb	0	; select bank0
 11556  0654  00E2               	movwf	??_Flash_Memory_Initialization
 11557  0655  0862               	movf	??_Flash_Memory_Initialization,w
 11558  0656  00E3               	movwf	Flash_Memory_Initialization@i
 11559                           
 11560                           ;MCU_B1.c: 872: product->Data[21] = i;
 11561  0657  0863               	movf	Flash_Memory_Initialization@i,w
 11562  0658  00E2               	movwf	??_Flash_Memory_Initialization
 11563  0659  086E               	movf	_product,w
 11564  065A  3E15               	addlw	21
 11565  065B  0086               	movwf	6
 11566  065C  3002               	movlw	2	; select bank4/5
 11567  065D  0087               	movwf	7
 11568  065E  0862               	movf	??_Flash_Memory_Initialization,w
 11569  065F  0081               	movwf	1
 11570                           
 11571                           ;MCU_B1.c: 873: product->Data[22] = i;
 11572  0660  0863               	movf	Flash_Memory_Initialization@i,w
 11573  0661  00E2               	movwf	??_Flash_Memory_Initialization
 11574  0662  086E               	movf	_product,w
 11575  0663  3E16               	addlw	22
 11576  0664  0086               	movwf	6
 11577  0665  3002               	movlw	2	; select bank4/5
 11578  0666  0087               	movwf	7
 11579  0667  0862               	movf	??_Flash_Memory_Initialization,w
 11580  0668  0081               	movwf	1
 11581                           
 11582                           ;MCU_B1.c: 874: product->Data[23] = i;
 11583  0669  0863               	movf	Flash_Memory_Initialization@i,w
 11584  066A  00E2               	movwf	??_Flash_Memory_Initialization
 11585  066B  086E               	movf	_product,w
 11586  066C  3E17               	addlw	23
 11587  066D  0086               	movwf	6
 11588  066E  3002               	movlw	2	; select bank4/5
 11589  066F  0087               	movwf	7
 11590  0670  0862               	movf	??_Flash_Memory_Initialization,w
 11591  0671  0081               	movwf	1
 11592                           
 11593                           ;MCU_B1.c: 876: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11594  0672  086E               	movf	_product,w
 11595  0673  3E0C               	addlw	12
 11596  0674  0086               	movwf	6
 11597  0675  3002               	movlw	2	; select bank4/5
 11598  0676  0087               	movwf	7
 11599  0677  0801               	movf	1,w
 11600  0678  3AFF               	xorlw	255
 11601  0679  1D03               	skipz
 11602  067A  0008               	return
 11603  067B  086E               	movf	_product,w
 11604  067C  3E0D               	addlw	13
 11605  067D  0086               	movwf	6
 11606  067E  3002               	movlw	2	; select bank4/5
 11607  067F  0087               	movwf	7
 11608  0680  0801               	movf	1,w
 11609  0681  3AFF               	xorlw	255
 11610  0682  1D03               	skipz
 11611  0683  0008               	return
 11612  0684  086E               	movf	_product,w
 11613  0685  3E0E               	addlw	14
 11614  0686  0086               	movwf	6
 11615  0687  3002               	movlw	2	; select bank4/5
 11616  0688  0087               	movwf	7
 11617  0689  0801               	movf	1,w
 11618  068A  3AFF               	xorlw	255
 11619  068B  1D03               	skipz
 11620  068C  0008               	return
 11621                           
 11622                           ;MCU_B1.c: 877: myMain.FirstOpen = 1;
 11623  068D  0021               	movlb	1	; select bank1
 11624  068E  15A0               	bsf	_myMain^(0+128),3
 11625                           
 11626                           ;MCU_B1.c: 878: myMain.First = 1;
 11627  068F  16A0               	bsf	_myMain^(0+128),5
 11628                           
 11629                           ;MCU_B1.c: 879: }
 11630                           ;MCU_B1.c: 880: } else {
 11631  0690  0008               	return
 11632  0691                     l7781:	
 11633                           
 11634                           ;MCU_B1.c: 881: i = setPercentValue(((char)(80*0.8)));
 11635  0691  3040               	movlw	64
 11636  0692  3189  21ED  3186   	fcall	_setPercentValue
 11637  0695  0020               	movlb	0	; select bank0
 11638  0696  00E2               	movwf	??_Flash_Memory_Initialization
 11639  0697  0862               	movf	??_Flash_Memory_Initialization,w
 11640  0698  00E3               	movwf	Flash_Memory_Initialization@i
 11641                           
 11642                           ;MCU_B1.c: 882: setMemory_Data(0, 0xff);
 11643  0699  30FF               	movlw	255
 11644  069A  00E2               	movwf	??_Flash_Memory_Initialization
 11645  069B  0862               	movf	??_Flash_Memory_Initialization,w
 11646  069C  00A0               	movwf	setMemory_Data@data
 11647  069D  3000               	movlw	0
 11648  069E  319B  23F3  3186   	fcall	_setMemory_Data
 11649                           
 11650                           ;MCU_B1.c: 883: setMemory_Data(1, 0xff);
 11651  06A1  30FF               	movlw	255
 11652  06A2  0020               	movlb	0	; select bank0
 11653  06A3  00E2               	movwf	??_Flash_Memory_Initialization
 11654  06A4  0862               	movf	??_Flash_Memory_Initialization,w
 11655  06A5  00A0               	movwf	setMemory_Data@data
 11656  06A6  3001               	movlw	1
 11657  06A7  319B  23F3  3186   	fcall	_setMemory_Data
 11658                           
 11659                           ;MCU_B1.c: 884: setMemory_Data(2, 0xff);
 11660  06AA  30FF               	movlw	255
 11661  06AB  0020               	movlb	0	; select bank0
 11662  06AC  00E2               	movwf	??_Flash_Memory_Initialization
 11663  06AD  0862               	movf	??_Flash_Memory_Initialization,w
 11664  06AE  00A0               	movwf	setMemory_Data@data
 11665  06AF  3002               	movlw	2
 11666  06B0  319B  23F3  3186   	fcall	_setMemory_Data
 11667                           
 11668                           ;MCU_B1.c: 885: setMemory_Data(3, 0xff);
 11669  06B3  30FF               	movlw	255
 11670  06B4  0020               	movlb	0	; select bank0
 11671  06B5  00E2               	movwf	??_Flash_Memory_Initialization
 11672  06B6  0862               	movf	??_Flash_Memory_Initialization,w
 11673  06B7  00A0               	movwf	setMemory_Data@data
 11674  06B8  3003               	movlw	3
 11675  06B9  319B  23F3  3186   	fcall	_setMemory_Data
 11676                           
 11677                           ;MCU_B1.c: 886: setMemory_Data(4, 0xff);
 11678  06BC  30FF               	movlw	255
 11679  06BD  0020               	movlb	0	; select bank0
 11680  06BE  00E2               	movwf	??_Flash_Memory_Initialization
 11681  06BF  0862               	movf	??_Flash_Memory_Initialization,w
 11682  06C0  00A0               	movwf	setMemory_Data@data
 11683  06C1  3004               	movlw	4
 11684  06C2  319B  23F3  3186   	fcall	_setMemory_Data
 11685                           
 11686                           ;MCU_B1.c: 887: setMemory_Data(5, 0xff);
 11687  06C5  30FF               	movlw	255
 11688  06C6  0020               	movlb	0	; select bank0
 11689  06C7  00E2               	movwf	??_Flash_Memory_Initialization
 11690  06C8  0862               	movf	??_Flash_Memory_Initialization,w
 11691  06C9  00A0               	movwf	setMemory_Data@data
 11692  06CA  3005               	movlw	5
 11693  06CB  319B  23F3  3186   	fcall	_setMemory_Data
 11694                           
 11695                           ;MCU_B1.c: 888: setMemory_Data(31, 0xaa);
 11696  06CE  30AA               	movlw	170
 11697  06CF  0020               	movlb	0	; select bank0
 11698  06D0  00E2               	movwf	??_Flash_Memory_Initialization
 11699  06D1  0862               	movf	??_Flash_Memory_Initialization,w
 11700  06D2  00A0               	movwf	setMemory_Data@data
 11701  06D3  301F               	movlw	31
 11702  06D4  319B  23F3  3186   	fcall	_setMemory_Data
 11703                           
 11704                           ;MCU_B1.c: 889: product->Data[21] = i;
 11705  06D7  0020               	movlb	0	; select bank0
 11706  06D8  0863               	movf	Flash_Memory_Initialization@i,w
 11707  06D9  00E2               	movwf	??_Flash_Memory_Initialization
 11708  06DA  086E               	movf	_product,w
 11709  06DB  3E15               	addlw	21
 11710  06DC  0086               	movwf	6
 11711  06DD  3002               	movlw	2	; select bank4/5
 11712  06DE  0087               	movwf	7
 11713  06DF  0862               	movf	??_Flash_Memory_Initialization,w
 11714  06E0  0081               	movwf	1
 11715                           
 11716                           ;MCU_B1.c: 890: product->Data[22] = i;
 11717  06E1  0863               	movf	Flash_Memory_Initialization@i,w
 11718  06E2  00E2               	movwf	??_Flash_Memory_Initialization
 11719  06E3  086E               	movf	_product,w
 11720  06E4  3E16               	addlw	22
 11721  06E5  0086               	movwf	6
 11722  06E6  3002               	movlw	2	; select bank4/5
 11723  06E7  0087               	movwf	7
 11724  06E8  0862               	movf	??_Flash_Memory_Initialization,w
 11725  06E9  0081               	movwf	1
 11726                           
 11727                           ;MCU_B1.c: 891: product->Data[23] = i;
 11728  06EA  0863               	movf	Flash_Memory_Initialization@i,w
 11729  06EB  00E2               	movwf	??_Flash_Memory_Initialization
 11730  06EC  086E               	movf	_product,w
 11731  06ED  3E17               	addlw	23
 11732  06EE  0086               	movwf	6
 11733  06EF  3002               	movlw	2	; select bank4/5
 11734  06F0  0087               	movwf	7
 11735  06F1  0862               	movf	??_Flash_Memory_Initialization,w
 11736  06F2  0081               	movwf	1
 11737                           
 11738                           ;MCU_B1.c: 892: GIE = 0;
 11739  06F3  138B               	bcf	11,7	;volatile
 11740                           
 11741                           ;MCU_B1.c: 893: Flash_Memory_Write();
 11742  06F4  3191  219E         	fcall	_Flash_Memory_Write
 11743                           
 11744                           ;MCU_B1.c: 894: GIE = 1;
 11745  06F6  178B               	bsf	11,7	;volatile
 11746                           
 11747                           ;MCU_B1.c: 895: myMain.FirstOpen = 1;
 11748  06F7  0021               	movlb	1	; select bank1
 11749  06F8  15A0               	bsf	_myMain^(0+128),3
 11750                           
 11751                           ;MCU_B1.c: 896: myMain.First = 1;
 11752  06F9  16A0               	bsf	_myMain^(0+128),5
 11753  06FA  0008               	return
 11754  06FB                     __end_of_Flash_Memory_Initialization:	
 11755                           
 11756                           	psect	text66
 11757  1BF3                     __ptext66:	
 11758 ;; *************** function _setMemory_Data *****************
 11759 ;; Defined at:
 11760 ;;		line 1011 in file "../src/MCU_B1.c"
 11761 ;; Parameters:    Size  Location     Type
 11762 ;;  address         1    wreg     unsigned char 
 11763 ;;  data            1    0[BANK0 ] unsigned char 
 11764 ;; Auto vars:     Size  Location     Type
 11765 ;;  address         1    2[BANK0 ] unsigned char 
 11766 ;; Return value:  Size  Location     Type
 11767 ;;		None               void
 11768 ;; Registers used:
 11769 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11770 ;; Tracked objects:
 11771 ;;		On entry : 0/0
 11772 ;;		On exit  : 0/0
 11773 ;;		Unchanged: 0/0
 11774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11775 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11776 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11777 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11778 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11779 ;;Total ram usage:        3 bytes
 11780 ;; Hardware stack levels used:    1
 11781 ;; Hardware stack levels required when called:    5
 11782 ;; This function calls:
 11783 ;;		Nothing
 11784 ;; This function is called by:
 11785 ;;		_Flash_Memory_Initialization
 11786 ;;		_Flash_Memory_Modify
 11787 ;; This function uses a non-reentrant model
 11788 ;;
 11789                           
 11790                           
 11791                           ;psect for function _setMemory_Data
 11792  1BF3                     _setMemory_Data:	
 11793                           
 11794                           ;incstack = 0
 11795                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 11796                           ;setMemory_Data@address stored from wreg
 11797  1BF3  0020               	movlb	0	; select bank0
 11798  1BF4  00A2               	movwf	setMemory_Data@address
 11799                           
 11800                           ;MCU_B1.c: 1012: Memory.Data[address] = data;
 11801  1BF5  0820               	movf	setMemory_Data@data,w
 11802  1BF6  00A1               	movwf	??_setMemory_Data
 11803  1BF7  0822               	movf	setMemory_Data@address,w
 11804  1BF8  3E20               	addlw	_Memory& (0+255)
 11805  1BF9  0086               	movwf	6
 11806  1BFA  3002               	movlw	2	; select bank4/5
 11807  1BFB  0087               	movwf	7
 11808  1BFC  0821               	movf	??_setMemory_Data,w
 11809  1BFD  0081               	movwf	1
 11810  1BFE  0008               	return
 11811  1BFF                     __end_of_setMemory_Data:	
 11812                           
 11813                           	psect	text67
 11814  119E                     __ptext67:	
 11815 ;; *************** function _Flash_Memory_Write *****************
 11816 ;; Defined at:
 11817 ;;		line 944 in file "../src/MCU_B1.c"
 11818 ;; Parameters:    Size  Location     Type
 11819 ;;		None
 11820 ;; Auto vars:     Size  Location     Type
 11821 ;;  i               1    1[BANK0 ] unsigned char 
 11822 ;; Return value:  Size  Location     Type
 11823 ;;		None               void
 11824 ;; Registers used:
 11825 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11826 ;; Tracked objects:
 11827 ;;		On entry : 0/0
 11828 ;;		On exit  : 0/0
 11829 ;;		Unchanged: 0/0
 11830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11832 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11833 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11834 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11835 ;;Total ram usage:        2 bytes
 11836 ;; Hardware stack levels used:    1
 11837 ;; Hardware stack levels required when called:    6
 11838 ;; This function calls:
 11839 ;;		_Flash_Memory_Unlock
 11840 ;; This function is called by:
 11841 ;;		_Flash_Memory_Initialization
 11842 ;;		_Flash_Memory_Modify
 11843 ;; This function uses a non-reentrant model
 11844 ;;
 11845                           
 11846                           
 11847                           ;psect for function _Flash_Memory_Write
 11848  119E                     _Flash_Memory_Write:	
 11849                           
 11850                           ;MCU_B1.c: 945: char i = 0;
 11851                           
 11852                           ;incstack = 0
 11853                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11854  119E  0020               	movlb	0	; select bank0
 11855  119F  01A1               	clrf	Flash_Memory_Write@i
 11856                           
 11857                           ;MCU_B1.c: 946: CFGS = 0;
 11858  11A0  0023               	movlb	3	; select bank3
 11859  11A1  1315               	bcf	21,6	;volatile
 11860                           
 11861                           ;MCU_B1.c: 947: PMADRH = 0x30;
 11862  11A2  3030               	movlw	48
 11863  11A3  0092               	movwf	18	;volatile
 11864                           
 11865                           ;MCU_B1.c: 948: PMDATH = 0;
 11866  11A4  0194               	clrf	20	;volatile
 11867                           
 11868                           ;MCU_B1.c: 949: FREE = 0;
 11869  11A5  1215               	bcf	21,4	;volatile
 11870                           
 11871                           ;MCU_B1.c: 950: LWLO = 1;
 11872  11A6  1695               	bsf	21,5	;volatile
 11873                           
 11874                           ;MCU_B1.c: 951: WREN = 1;
 11875  11A7  1515               	bsf	21,2	;volatile
 11876                           
 11877                           ;MCU_B1.c: 952: for (i = 0; i < 32; i++) {
 11878  11A8  0020               	movlb	0	; select bank0
 11879  11A9  01A1               	clrf	Flash_Memory_Write@i
 11880  11AA  3020               	movlw	32
 11881  11AB  0221               	subwf	Flash_Memory_Write@i,w
 11882  11AC  1803               	btfsc	3,0
 11883  11AD  29C6               	goto	l1315
 11884  11AE                     l6865:	
 11885                           
 11886                           ;MCU_B1.c: 953: PMADRL = i;
 11887  11AE  0821               	movf	Flash_Memory_Write@i,w
 11888  11AF  0023               	movlb	3	; select bank3
 11889  11B0  0091               	movwf	17	;volatile
 11890                           
 11891                           ;MCU_B1.c: 954: PMDATL = Memory.Data[i];
 11892  11B1  0020               	movlb	0	; select bank0
 11893  11B2  0821               	movf	Flash_Memory_Write@i,w
 11894  11B3  3E20               	addlw	_Memory& (0+255)
 11895  11B4  0086               	movwf	6
 11896  11B5  3002               	movlw	2	; select bank4/5
 11897  11B6  0087               	movwf	7
 11898  11B7  0801               	movf	1,w
 11899  11B8  0023               	movlb	3	; select bank3
 11900  11B9  0093               	movwf	19	;volatile
 11901                           
 11902                           ;MCU_B1.c: 955: Flash_Memory_Unlock();
 11903  11BA  319B  23BD  3191   	fcall	_Flash_Memory_Unlock
 11904  11BD  3001               	movlw	1
 11905  11BE  0020               	movlb	0	; select bank0
 11906  11BF  00A0               	movwf	??_Flash_Memory_Write
 11907  11C0  0820               	movf	??_Flash_Memory_Write,w
 11908  11C1  07A1               	addwf	Flash_Memory_Write@i,f
 11909  11C2  3020               	movlw	32
 11910  11C3  0221               	subwf	Flash_Memory_Write@i,w
 11911  11C4  1C03               	skipc
 11912  11C5  29AE               	goto	l6865
 11913  11C6                     l1315:	
 11914                           
 11915                           ;MCU_B1.c: 956: }
 11916                           ;MCU_B1.c: 957: LWLO = 0;
 11917  11C6  0023               	movlb	3	; select bank3
 11918  11C7  1295               	bcf	21,5	;volatile
 11919                           
 11920                           ;MCU_B1.c: 958: Flash_Memory_Unlock();
 11921  11C8  319B  23BD         	fcall	_Flash_Memory_Unlock
 11922                           
 11923                           ;MCU_B1.c: 959: WREN = 0;
 11924  11CA  0023               	movlb	3	; select bank3
 11925  11CB  1115               	bcf	21,2	;volatile
 11926  11CC  0008               	return
 11927  11CD                     __end_of_Flash_Memory_Write:	
 11928                           
 11929                           	psect	text68
 11930  1BBD                     __ptext68:	
 11931 ;; *************** function _Flash_Memory_Unlock *****************
 11932 ;; Defined at:
 11933 ;;		line 923 in file "../src/MCU_B1.c"
 11934 ;; Parameters:    Size  Location     Type
 11935 ;;		None
 11936 ;; Auto vars:     Size  Location     Type
 11937 ;;		None
 11938 ;; Return value:  Size  Location     Type
 11939 ;;		None               void
 11940 ;; Registers used:
 11941 ;;		wreg
 11942 ;; Tracked objects:
 11943 ;;		On entry : 0/0
 11944 ;;		On exit  : 0/0
 11945 ;;		Unchanged: 0/0
 11946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11951 ;;Total ram usage:        0 bytes
 11952 ;; Hardware stack levels used:    1
 11953 ;; Hardware stack levels required when called:    5
 11954 ;; This function calls:
 11955 ;;		Nothing
 11956 ;; This function is called by:
 11957 ;;		_Flash_Memory_Write
 11958 ;;		_Flash_Memory_Erasing
 11959 ;; This function uses a non-reentrant model
 11960 ;;
 11961                           
 11962                           
 11963                           ;psect for function _Flash_Memory_Unlock
 11964  1BBD                     _Flash_Memory_Unlock:	
 11965                           
 11966                           ;MCU_B1.c: 924: PMCON2 = 0x55;
 11967                           
 11968                           ;incstack = 0
 11969                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11970  1BBD  3055               	movlw	85
 11971  1BBE  0023               	movlb	3	; select bank3
 11972  1BBF  0096               	movwf	22	;volatile
 11973                           
 11974                           ;MCU_B1.c: 925: PMCON2 = 0xaa;
 11975  1BC0  30AA               	movlw	170
 11976  1BC1  0096               	movwf	22	;volatile
 11977                           
 11978                           ;MCU_B1.c: 926: WR = 1;
 11979  1BC2  1495               	bsf	21,1	;volatile
 11980                           
 11981                           ;MCU_B1.c: 927: __nop();
 11982  1BC3  0000               	nop
 11983                           
 11984                           ;MCU_B1.c: 928: __nop();
 11985  1BC4  0000               	nop
 11986  1BC5  0008               	return
 11987  1BC6                     __end_of_Flash_Memory_Unlock:	
 11988                           
 11989                           	psect	text69
 11990  1E67                     __ptext69:	
 11991 ;; *************** function _Flash_Memory_Read *****************
 11992 ;; Defined at:
 11993 ;;		line 932 in file "../src/MCU_B1.c"
 11994 ;; Parameters:    Size  Location     Type
 11995 ;;  address         1    wreg     unsigned char 
 11996 ;; Auto vars:     Size  Location     Type
 11997 ;;  address         1    2[BANK0 ] unsigned char 
 11998 ;;  ret             1    3[BANK0 ] unsigned char 
 11999 ;;  i               1    1[BANK0 ] unsigned char 
 12000 ;; Return value:  Size  Location     Type
 12001 ;;                  1    wreg      unsigned char 
 12002 ;; Registers used:
 12003 ;;		wreg, status,2
 12004 ;; Tracked objects:
 12005 ;;		On entry : 0/0
 12006 ;;		On exit  : 0/0
 12007 ;;		Unchanged: 0/0
 12008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12010 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12011 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12012 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12013 ;;Total ram usage:        4 bytes
 12014 ;; Hardware stack levels used:    1
 12015 ;; Hardware stack levels required when called:    5
 12016 ;; This function calls:
 12017 ;;		Nothing
 12018 ;; This function is called by:
 12019 ;;		_Flash_Memory_Initialization
 12020 ;;		_Flash_Memory_Modify
 12021 ;; This function uses a non-reentrant model
 12022 ;;
 12023                           
 12024                           
 12025                           ;psect for function _Flash_Memory_Read
 12026  1E67                     _Flash_Memory_Read:	
 12027                           
 12028                           ;incstack = 0
 12029                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12030                           ;Flash_Memory_Read@address stored from wreg
 12031  1E67  0020               	movlb	0	; select bank0
 12032  1E68  00A2               	movwf	Flash_Memory_Read@address
 12033                           
 12034                           ;MCU_B1.c: 933: char i = 0, ret = 0;
 12035  1E69  01A1               	clrf	Flash_Memory_Read@i
 12036  1E6A  01A3               	clrf	Flash_Memory_Read@ret
 12037                           
 12038                           ;MCU_B1.c: 934: PMADRH = 0x30;
 12039  1E6B  3030               	movlw	48
 12040  1E6C  0023               	movlb	3	; select bank3
 12041  1E6D  0092               	movwf	18	;volatile
 12042                           
 12043                           ;MCU_B1.c: 935: PMADRL = address;
 12044  1E6E  0020               	movlb	0	; select bank0
 12045  1E6F  0822               	movf	Flash_Memory_Read@address,w
 12046  1E70  0023               	movlb	3	; select bank3
 12047  1E71  0091               	movwf	17	;volatile
 12048                           
 12049                           ;MCU_B1.c: 936: CFGS = 0;
 12050  1E72  1315               	bcf	21,6	;volatile
 12051                           
 12052                           ;MCU_B1.c: 937: RD = 1;
 12053  1E73  1415               	bsf	21,0	;volatile
 12054                           
 12055                           ;MCU_B1.c: 938: i = PMDATH;
 12056  1E74  0814               	movf	20,w	;volatile
 12057  1E75  0020               	movlb	0	; select bank0
 12058  1E76  00A0               	movwf	??_Flash_Memory_Read
 12059  1E77  0820               	movf	??_Flash_Memory_Read,w
 12060  1E78  00A1               	movwf	Flash_Memory_Read@i
 12061                           
 12062                           ;MCU_B1.c: 939: ret = PMDATL;
 12063  1E79  0023               	movlb	3	; select bank3
 12064  1E7A  0813               	movf	19,w	;volatile
 12065  1E7B  0020               	movlb	0	; select bank0
 12066  1E7C  00A0               	movwf	??_Flash_Memory_Read
 12067  1E7D  0820               	movf	??_Flash_Memory_Read,w
 12068  1E7E  00A3               	movwf	Flash_Memory_Read@ret
 12069                           
 12070                           ;MCU_B1.c: 940: return ret;
 12071  1E7F  0823               	movf	Flash_Memory_Read@ret,w
 12072  1E80  0008               	return
 12073  1E81                     __end_of_Flash_Memory_Read:	
 12074                           
 12075                           	psect	text70
 12076  1200                     __ptext70:	
 12077 ;; *************** function _DimmerLights_Main *****************
 12078 ;; Defined at:
 12079 ;;		line 402 in file "../src/Dimmer_B1.c"
 12080 ;; Parameters:    Size  Location     Type
 12081 ;;		None
 12082 ;; Auto vars:     Size  Location     Type
 12083 ;;		None
 12084 ;; Return value:  Size  Location     Type
 12085 ;;		None               void
 12086 ;; Registers used:
 12087 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12088 ;; Tracked objects:
 12089 ;;		On entry : 0/0
 12090 ;;		On exit  : 0/0
 12091 ;;		Unchanged: 0/0
 12092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12094 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12095 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12096 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12097 ;;Total ram usage:        4 bytes
 12098 ;; Hardware stack levels used:    1
 12099 ;; Hardware stack levels required when called:   10
 12100 ;; This function calls:
 12101 ;;		_getLoad_OK
 12102 ;;		_getMain_All_Error_Status
 12103 ;;		_getMain_LightsStatus
 12104 ;;		_setDimmerLights_Main
 12105 ;; This function is called by:
 12106 ;;		_main
 12107 ;; This function uses a non-reentrant model
 12108 ;;
 12109                           
 12110                           
 12111                           ;psect for function _DimmerLights_Main
 12112  1200                     _DimmerLights_Main:	
 12113                           
 12114                           ;Dimmer_B1.c: 404: if (getMain_All_Error_Status(0) == 0) {
 12115                           
 12116                           ;incstack = 0
 12117                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12118  1200  3000               	movlw	0
 12119  1201  3191  21CD  3192   	fcall	_getMain_All_Error_Status
 12120  1204  3800               	iorlw	0
 12121  1205  1D03               	skipz
 12122  1206  2A2A               	goto	l779
 12123                           
 12124                           ;Dimmer_B1.c: 405: if (Dimmer.LoadOK == 1) {
 12125  1207  0022               	movlb	2	; select bank2
 12126  1208  1CA0               	btfss	_Dimmer^(0+256),1
 12127  1209  2A2C               	goto	l9397
 12128                           
 12129                           ;Dimmer_B1.c: 406: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 12130  120A  319B  239C  3192   	fcall	_getLoad_OK
 12131  120D  3A01               	xorlw	1
 12132  120E  1903               	skipnz
 12133  120F  2A21               	goto	l9393
 12134  1210  3191  2172  3192   	fcall	_getMain_LightsStatus
 12135  1213  3A00               	xorlw	0
 12136  1214  1903               	skipnz
 12137  1215  2A21               	goto	l9393
 12138  1216  0022               	movlb	2	; select bank2
 12139  1217  0C20               	rrf	_Dimmer^(0+256),w
 12140  1218  3901               	andlw	1
 12141  1219  0020               	movlb	0	; select bank0
 12142  121A  00E7               	movwf	??_DimmerLights_Main
 12143  121B  01E8               	clrf	??_DimmerLights_Main+1
 12144  121C  0867               	movf	??_DimmerLights_Main,w
 12145  121D  00E9               	movwf	_DimmerLights_Main$2499
 12146  121E  0868               	movf	??_DimmerLights_Main+1,w
 12147  121F  00EA               	movwf	_DimmerLights_Main$2499+1
 12148  1220  2A24               	goto	l9395
 12149  1221                     l9393:	
 12150  1221  0020               	movlb	0	; select bank0
 12151  1222  01E9               	clrf	_DimmerLights_Main$2499
 12152  1223  01EA               	clrf	_DimmerLights_Main$2499+1
 12153  1224                     l9395:	
 12154  1224  0869               	movf	_DimmerLights_Main$2499,w
 12155  1225  0022               	movlb	2	; select bank2
 12156  1226  10A0               	bcf	_Dimmer^(0+256),1
 12157  1227  1D03               	skipz
 12158  1228  14A0               	bsf	_Dimmer^(0+256),1
 12159                           
 12160                           ;Dimmer_B1.c: 407: }
 12161                           ;Dimmer_B1.c: 408: } else {
 12162  1229  2A2C               	goto	l9397
 12163  122A                     l779:	
 12164                           
 12165                           ;Dimmer_B1.c: 409: Dimmer.LoadOK = 0;
 12166  122A  0022               	movlb	2	; select bank2
 12167  122B  10A0               	bcf	_Dimmer^(0+256),1
 12168  122C                     l9397:	
 12169                           
 12170                           ;Dimmer_B1.c: 410: }
 12171                           ;Dimmer_B1.c: 414: setDimmerLights_Main(1);
 12172  122C  3001               	movlw	1
 12173  122D  3196  26F2  3192   	fcall	_setDimmerLights_Main
 12174                           
 12175                           ;Dimmer_B1.c: 418: setDimmerLights_Main(2);
 12176  1230  3002               	movlw	2
 12177  1231  3196  26F2         	fcall	_setDimmerLights_Main
 12178  1233  0008               	return
 12179  1234                     __end_of_DimmerLights_Main:	
 12180                           
 12181                           	psect	text71
 12182  16F2                     __ptext71:	
 12183 ;; *************** function _setDimmerLights_Main *****************
 12184 ;; Defined at:
 12185 ;;		line 428 in file "../src/Dimmer_B1.c"
 12186 ;; Parameters:    Size  Location     Type
 12187 ;;  lights          1    wreg     unsigned char 
 12188 ;; Auto vars:     Size  Location     Type
 12189 ;;  lights          1   70[BANK0 ] unsigned char 
 12190 ;; Return value:  Size  Location     Type
 12191 ;;		None               void
 12192 ;; Registers used:
 12193 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12194 ;; Tracked objects:
 12195 ;;		On entry : 0/0
 12196 ;;		On exit  : 0/0
 12197 ;;		Unchanged: 0/0
 12198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12200 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12202 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12203 ;;Total ram usage:        1 bytes
 12204 ;; Hardware stack levels used:    1
 12205 ;; Hardware stack levels required when called:    9
 12206 ;; This function calls:
 12207 ;;		_DimmerLightsPointSelect
 12208 ;;		_setBuz
 12209 ;;		_setDimmerLights
 12210 ;;		_setDimmerLights_Adj
 12211 ;; This function is called by:
 12212 ;;		_DimmerLights_Main
 12213 ;; This function uses a non-reentrant model
 12214 ;;
 12215                           
 12216                           
 12217                           ;psect for function _setDimmerLights_Main
 12218  16F2                     _setDimmerLights_Main:	
 12219                           
 12220                           ;incstack = 0
 12221                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12222                           ;setDimmerLights_Main@lights stored from wreg
 12223  16F2  0020               	movlb	0	; select bank0
 12224  16F3  00E6               	movwf	setDimmerLights_Main@lights
 12225                           
 12226                           ;Dimmer_B1.c: 429: DimmerLightsPointSelect(lights);
 12227  16F4  0866               	movf	setDimmerLights_Main@lights,w
 12228  16F5  319C  24FE  3196   	fcall	_DimmerLightsPointSelect
 12229                           
 12230                           ;Dimmer_B1.c: 430: if (DimmerLights->Trigger == 1) {
 12231  16F8  0020               	movlb	0	; select bank0
 12232  16F9  086F               	movf	_DimmerLights,w
 12233  16FA  3E08               	addlw	8
 12234  16FB  0086               	movwf	6
 12235  16FC  3001               	movlw	1	; select bank2/3
 12236  16FD  0087               	movwf	7
 12237  16FE  1D01               	btfss	1,2
 12238  16FF  2F1D               	goto	l9095
 12239                           
 12240                           ;Dimmer_B1.c: 432: if (Dimmer.LoadOK == 0) {
 12241  1700  0022               	movlb	2	; select bank2
 12242  1701  18A0               	btfsc	_Dimmer^(0+256),1
 12243  1702  0008               	return
 12244                           
 12245                           ;Dimmer_B1.c: 433: DimmerLights->Trigger = 0;
 12246  1703  0020               	movlb	0	; select bank0
 12247  1704  086F               	movf	_DimmerLights,w
 12248  1705  3E08               	addlw	8
 12249  1706  0086               	movwf	6
 12250  1707  3001               	movlw	1	; select bank2/3
 12251  1708  0087               	movwf	7
 12252  1709  1101               	bcf	1,2
 12253                           
 12254                           ;Dimmer_B1.c: 435: if (DimmerLights->Switch == 1) {
 12255  170A  086F               	movf	_DimmerLights,w
 12256  170B  3E08               	addlw	8
 12257  170C  0086               	movwf	6
 12258  170D  3001               	movlw	1	; select bank2/3
 12259  170E  0087               	movwf	7
 12260  170F  1C81               	btfss	1,1
 12261  1710  2F17               	goto	l9093
 12262                           
 12263                           ;Dimmer_B1.c: 436: setDimmerLights(lights, 1);
 12264  1711  01E2               	clrf	setDimmerLights@status
 12265  1712  0AE2               	incf	setDimmerLights@status,f
 12266  1713  0866               	movf	setDimmerLights_Main@lights,w
 12267  1714  318D  2581         	fcall	_setDimmerLights
 12268                           
 12269                           ;Dimmer_B1.c: 437: } else {
 12270  1716  0008               	return
 12271  1717                     l9093:	
 12272                           
 12273                           ;Dimmer_B1.c: 438: setDimmerLights(lights, 0);
 12274  1717  0020               	movlb	0	; select bank0
 12275  1718  01E2               	clrf	setDimmerLights@status
 12276  1719  0866               	movf	setDimmerLights_Main@lights,w
 12277  171A  318D  2581         	fcall	_setDimmerLights
 12278                           
 12279                           ;Dimmer_B1.c: 439: }
 12280                           ;Dimmer_B1.c: 440: }
 12281                           ;Dimmer_B1.c: 441: } else {
 12282  171C  0008               	return
 12283  171D                     l9095:	
 12284                           
 12285                           ;Dimmer_B1.c: 442: if (DimmerLights->TriggerAdj == 1) {
 12286  171D  0020               	movlb	0	; select bank0
 12287  171E  086F               	movf	_DimmerLights,w
 12288  171F  3E08               	addlw	8
 12289  1720  0086               	movwf	6
 12290  1721  3001               	movlw	1	; select bank2/3
 12291  1722  0087               	movwf	7
 12292  1723  1E01               	btfss	1,4
 12293  1724  0008               	return
 12294                           
 12295                           ;Dimmer_B1.c: 443: if (Dimmer.LoadOK == 0) {
 12296  1725  0022               	movlb	2	; select bank2
 12297  1726  18A0               	btfsc	_Dimmer^(0+256),1
 12298  1727  0008               	return
 12299                           
 12300                           ;Dimmer_B1.c: 444: DimmerLights->TriggerAdj = 0;
 12301  1728  0020               	movlb	0	; select bank0
 12302  1729  086F               	movf	_DimmerLights,w
 12303  172A  3E08               	addlw	8
 12304  172B  0086               	movwf	6
 12305  172C  3001               	movlw	1	; select bank2/3
 12306  172D  0087               	movwf	7
 12307  172E  1201               	bcf	1,4
 12308                           
 12309                           ;Dimmer_B1.c: 445: if (DimmerLights->AdjGo == 1) {
 12310  172F  086F               	movf	_DimmerLights,w
 12311  1730  3E08               	addlw	8
 12312  1731  0086               	movwf	6
 12313  1732  3001               	movlw	1	; select bank2/3
 12314  1733  0087               	movwf	7
 12315  1734  1D81               	btfss	1,3
 12316  1735  2F45               	goto	l9105
 12317                           
 12318                           ;Dimmer_B1.c: 446: setDimmerLights_Adj(lights, 1);
 12319  1736  01E2               	clrf	setDimmerLights_Adj@status
 12320  1737  0AE2               	incf	setDimmerLights_Adj@status,f
 12321  1738  0866               	movf	setDimmerLights_Main@lights,w
 12322  1739  318A  2252  3196   	fcall	_setDimmerLights_Adj
 12323                           
 12324                           ;Dimmer_B1.c: 447: setBuz(1, 100);
 12325  173C  3064               	movlw	100
 12326  173D  0020               	movlb	0	; select bank0
 12327  173E  00A9               	movwf	setBuz@time
 12328  173F  3000               	movlw	0
 12329  1740  00AA               	movwf	setBuz@time+1
 12330  1741  3001               	movlw	1
 12331  1742  3196  2699         	fcall	_setBuz
 12332                           
 12333                           ;Dimmer_B1.c: 448: } else {
 12334  1744  0008               	return
 12335  1745                     l9105:	
 12336                           
 12337                           ;Dimmer_B1.c: 449: setDimmerLights_Adj(lights, 0);
 12338  1745  0020               	movlb	0	; select bank0
 12339  1746  01E2               	clrf	setDimmerLights_Adj@status
 12340  1747  0866               	movf	setDimmerLights_Main@lights,w
 12341  1748  318A  2252         	fcall	_setDimmerLights_Adj
 12342  174A  0008               	return
 12343  174B                     __end_of_setDimmerLights_Main:	
 12344                           
 12345                           	psect	text72
 12346  0A52                     __ptext72:	
 12347 ;; *************** function _setDimmerLights_Adj *****************
 12348 ;; Defined at:
 12349 ;;		line 731 in file "../src/Dimmer_B1.c"
 12350 ;; Parameters:    Size  Location     Type
 12351 ;;  lights          1    wreg     unsigned char 
 12352 ;;  status          1   66[BANK0 ] unsigned char 
 12353 ;; Auto vars:     Size  Location     Type
 12354 ;;  lights          1   69[BANK0 ] unsigned char 
 12355 ;; Return value:  Size  Location     Type
 12356 ;;		None               void
 12357 ;; Registers used:
 12358 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12359 ;; Tracked objects:
 12360 ;;		On entry : 0/0
 12361 ;;		On exit  : 0/0
 12362 ;;		Unchanged: 0/0
 12363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12364 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12365 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12366 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12367 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12368 ;;Total ram usage:        4 bytes
 12369 ;; Hardware stack levels used:    1
 12370 ;; Hardware stack levels required when called:    8
 12371 ;; This function calls:
 12372 ;;		_DimmerLightsPointSelect
 12373 ;;		_getMain_All_Error_Status
 12374 ;;		_setPercentValue
 12375 ;;		_setRF_DimmerLights
 12376 ;;		_setTxData
 12377 ;; This function is called by:
 12378 ;;		_setDimmerLights_Main
 12379 ;; This function uses a non-reentrant model
 12380 ;;
 12381                           
 12382                           
 12383                           ;psect for function _setDimmerLights_Adj
 12384  0A52                     _setDimmerLights_Adj:	
 12385                           
 12386                           ;incstack = 0
 12387                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12388                           ;setDimmerLights_Adj@lights stored from wreg
 12389  0A52  0020               	movlb	0	; select bank0
 12390  0A53  00E5               	movwf	setDimmerLights_Adj@lights
 12391                           
 12392                           ;Dimmer_B1.c: 732: DimmerLightsPointSelect(lights);
 12393  0A54  0865               	movf	setDimmerLights_Adj@lights,w
 12394  0A55  319C  24FE  318A   	fcall	_DimmerLightsPointSelect
 12395                           
 12396                           ;Dimmer_B1.c: 733: if (status == 1) {
 12397  0A58  0020               	movlb	0	; select bank0
 12398  0A59  0862               	movf	setDimmerLights_Adj@status,w
 12399  0A5A  3A01               	xorlw	1
 12400  0A5B  1D03               	skipz
 12401  0A5C  2A68               	goto	l8867
 12402                           
 12403                           ;Dimmer_B1.c: 734: DimmerLights->AdjFlag = 1;
 12404  0A5D  086F               	movf	_DimmerLights,w
 12405  0A5E  0086               	movwf	6
 12406  0A5F  3001               	movlw	1	; select bank2/3
 12407  0A60  0087               	movwf	7
 12408  0A61  1581               	bsf	1,3
 12409                           
 12410                           ;Dimmer_B1.c: 735: DimmerLights->Signal = 1;
 12411  0A62  086F               	movf	_DimmerLights,w
 12412  0A63  0086               	movwf	6
 12413  0A64  3001               	movlw	1	; select bank2/3
 12414  0A65  0087               	movwf	7
 12415  0A66  1481               	bsf	1,1
 12416                           
 12417                           ;Dimmer_B1.c: 736: } else {
 12418  0A67  0008               	return
 12419  0A68                     l8867:	
 12420                           
 12421                           ;Dimmer_B1.c: 737: if (DimmerLights->AdjFlag == 1) {
 12422  0A68  086F               	movf	_DimmerLights,w
 12423  0A69  0086               	movwf	6
 12424  0A6A  3001               	movlw	1	; select bank2/3
 12425  0A6B  0087               	movwf	7
 12426  0A6C  1D81               	btfss	1,3
 12427  0A6D  0008               	return
 12428                           
 12429                           ;Dimmer_B1.c: 738: DimmerLights->Signal = 0;
 12430  0A6E  086F               	movf	_DimmerLights,w
 12431  0A6F  0086               	movwf	6
 12432  0A70  3001               	movlw	1	; select bank2/3
 12433  0A71  0087               	movwf	7
 12434  0A72  1081               	bcf	1,1
 12435                           
 12436                           ;Dimmer_B1.c: 739: DimmerLights->AdjFlag = 0;
 12437  0A73  086F               	movf	_DimmerLights,w
 12438  0A74  0086               	movwf	6
 12439  0A75  3001               	movlw	1	; select bank2/3
 12440  0A76  0087               	movwf	7
 12441  0A77  1181               	bcf	1,3
 12442                           
 12443                           ;Dimmer_B1.c: 740: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12444  0A78  086F               	movf	_DimmerLights,w
 12445  0A79  3E04               	addlw	4
 12446  0A7A  0086               	movwf	6
 12447  0A7B  3001               	movlw	1	; select bank2/3
 12448  0A7C  0087               	movwf	7
 12449  0A7D  0801               	movf	1,w
 12450  0A7E  00E3               	movwf	??_setDimmerLights_Adj
 12451  0A7F  086F               	movf	_DimmerLights,w
 12452  0A80  3E05               	addlw	5
 12453  0A81  0086               	movwf	6
 12454  0A82  3001               	movlw	1	; select bank2/3
 12455  0A83  0087               	movwf	7
 12456  0A84  0863               	movf	??_setDimmerLights_Adj,w
 12457  0A85  0081               	movwf	1
 12458                           
 12459                           ;Dimmer_B1.c: 741: product->Data[(20 + lights)]=setPercentValue(DimmerLights->DimmingVal
      +                          ue);
 12460  0A86  086F               	movf	_DimmerLights,w
 12461  0A87  3E04               	addlw	4
 12462  0A88  0086               	movwf	6
 12463  0A89  3001               	movlw	1	; select bank2/3
 12464  0A8A  0087               	movwf	7
 12465  0A8B  0801               	movf	1,w
 12466  0A8C  3189  21ED  318A   	fcall	_setPercentValue
 12467  0A8F  0020               	movlb	0	; select bank0
 12468  0A90  00E3               	movwf	??_setDimmerLights_Adj
 12469  0A91  0865               	movf	setDimmerLights_Adj@lights,w
 12470  0A92  3E14               	addlw	20
 12471  0A93  076E               	addwf	_product,w
 12472  0A94  00E4               	movwf	??_setDimmerLights_Adj+1
 12473  0A95  0864               	movf	??_setDimmerLights_Adj+1,w
 12474  0A96  0086               	movwf	6
 12475  0A97  3002               	movlw	2	; select bank4/5
 12476  0A98  0087               	movwf	7
 12477  0A99  0863               	movf	??_setDimmerLights_Adj,w
 12478  0A9A  0081               	movwf	1
 12479                           
 12480                           ;Dimmer_B1.c: 751: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12481  0A9B  3000               	movlw	0
 12482  0A9C  3191  21CD  318A   	fcall	_getMain_All_Error_Status
 12483  0A9F  3A00               	xorlw	0
 12484  0AA0  3000               	movlw	0
 12485  0AA1  1903               	skipnz
 12486  0AA2  3001               	movlw	1
 12487  0AA3  0020               	movlb	0	; select bank0
 12488  0AA4  00E3               	movwf	??_setDimmerLights_Adj
 12489  0AA5  0DE3               	rlf	??_setDimmerLights_Adj,f
 12490  0AA6  0022               	movlb	2	; select bank2
 12491  0AA7  0820               	movf	_Dimmer^(0+256),w
 12492  0AA8  0020               	movlb	0	; select bank0
 12493  0AA9  0663               	xorwf	??_setDimmerLights_Adj,w
 12494  0AAA  39FD               	andlw	-3
 12495  0AAB  0663               	xorwf	??_setDimmerLights_Adj,w
 12496  0AAC  0022               	movlb	2	; select bank2
 12497  0AAD  00A0               	movwf	_Dimmer^(0+256)
 12498                           
 12499                           ;Dimmer_B1.c: 754: setRF_DimmerLights(lights, 1);
 12500  0AAE  0020               	movlb	0	; select bank0
 12501  0AAF  01A0               	clrf	setRF_DimmerLights@on
 12502  0AB0  0AA0               	incf	setRF_DimmerLights@on,f
 12503  0AB1  0865               	movf	setDimmerLights_Adj@lights,w
 12504  0AB2  3188  2012  318A   	fcall	_setRF_DimmerLights
 12505                           
 12506                           ;Dimmer_B1.c: 755: setTxData();
 12507  0AB5  3186  26FB         	fcall	_setTxData
 12508  0AB7  0008               	return
 12509  0AB8                     __end_of_setDimmerLights_Adj:	
 12510                           
 12511                           	psect	text73
 12512  0D81                     __ptext73:	
 12513 ;; *************** function _setDimmerLights *****************
 12514 ;; Defined at:
 12515 ;;		line 626 in file "../src/Dimmer_B1.c"
 12516 ;; Parameters:    Size  Location     Type
 12517 ;;  lights          1    wreg     unsigned char 
 12518 ;;  status          1   66[BANK0 ] unsigned char 
 12519 ;; Auto vars:     Size  Location     Type
 12520 ;;  lights          1   69[BANK0 ] unsigned char 
 12521 ;; Return value:  Size  Location     Type
 12522 ;;		None               void
 12523 ;; Registers used:
 12524 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12525 ;; Tracked objects:
 12526 ;;		On entry : 0/0
 12527 ;;		On exit  : 0/0
 12528 ;;		Unchanged: 0/0
 12529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12530 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12531 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12532 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12533 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12534 ;;Total ram usage:        4 bytes
 12535 ;; Hardware stack levels used:    1
 12536 ;; Hardware stack levels required when called:    8
 12537 ;; This function calls:
 12538 ;;		_DimmerLightsPointSelect
 12539 ;;		_getMain_All_Error_Status
 12540 ;;		_setDimmerLights_Line
 12541 ;;		_setLED
 12542 ;;		_setPercentValue
 12543 ;;		_setRF_DimmerLights
 12544 ;;		_setTxData
 12545 ;; This function is called by:
 12546 ;;		_setDimmerLights_Main
 12547 ;; This function uses a non-reentrant model
 12548 ;;
 12549                           
 12550                           
 12551                           ;psect for function _setDimmerLights
 12552  0D81                     _setDimmerLights:	
 12553                           
 12554                           ;incstack = 0
 12555                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12556                           ;setDimmerLights@lights stored from wreg
 12557  0D81  0020               	movlb	0	; select bank0
 12558  0D82  00E5               	movwf	setDimmerLights@lights
 12559                           
 12560                           ;Dimmer_B1.c: 627: DimmerLightsPointSelect(lights);
 12561  0D83  0865               	movf	setDimmerLights@lights,w
 12562  0D84  319C  24FE  318D   	fcall	_DimmerLightsPointSelect
 12563                           
 12564                           ;Dimmer_B1.c: 630: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12565  0D87  3000               	movlw	0
 12566  0D88  3191  21CD  318D   	fcall	_getMain_All_Error_Status
 12567  0D8B  3A00               	xorlw	0
 12568  0D8C  3000               	movlw	0
 12569  0D8D  1903               	skipnz
 12570  0D8E  3001               	movlw	1
 12571  0D8F  0020               	movlb	0	; select bank0
 12572  0D90  00E3               	movwf	??_setDimmerLights
 12573  0D91  0DE3               	rlf	??_setDimmerLights,f
 12574  0D92  0022               	movlb	2	; select bank2
 12575  0D93  0820               	movf	_Dimmer^(0+256),w
 12576  0D94  0020               	movlb	0	; select bank0
 12577  0D95  0663               	xorwf	??_setDimmerLights,w
 12578  0D96  39FD               	andlw	-3
 12579  0D97  0663               	xorwf	??_setDimmerLights,w
 12580  0D98  0022               	movlb	2	; select bank2
 12581  0D99  00A0               	movwf	_Dimmer^(0+256)
 12582                           
 12583                           ;Dimmer_B1.c: 634: if (status == 1) {
 12584  0D9A  0020               	movlb	0	; select bank0
 12585  0D9B  0862               	movf	setDimmerLights@status,w
 12586  0D9C  3A01               	xorlw	1
 12587  0D9D  1D03               	skipz
 12588  0D9E  2DCF               	goto	l8847
 12589                           
 12590                           ;Dimmer_B1.c: 635: DimmerLights->Loop = 1;
 12591  0D9F  086F               	movf	_DimmerLights,w
 12592  0DA0  3E09               	addlw	9
 12593  0DA1  0086               	movwf	6
 12594  0DA2  3001               	movlw	1	; select bank2/3
 12595  0DA3  0087               	movwf	7
 12596  0DA4  1481               	bsf	1,1
 12597                           
 12598                           ;Dimmer_B1.c: 636: setLED(lights, 0);
 12599  0DA5  01A2               	clrf	setLED@command
 12600  0DA6  0865               	movf	setDimmerLights@lights,w
 12601  0DA7  3195  2545  318D   	fcall	_setLED
 12602                           
 12603                           ;Dimmer_B1.c: 638: setDimmerLights_Line(lights);
 12604  0DAA  0020               	movlb	0	; select bank0
 12605  0DAB  0865               	movf	setDimmerLights@lights,w
 12606  0DAC  319D  25C4  318D   	fcall	_setDimmerLights_Line
 12607                           
 12608                           ;Dimmer_B1.c: 639: DimmerLights->StatusFlag = 1;
 12609  0DAF  0020               	movlb	0	; select bank0
 12610  0DB0  086F               	movf	_DimmerLights,w
 12611  0DB1  0086               	movwf	6
 12612  0DB2  3001               	movlw	1	; select bank2/3
 12613  0DB3  0087               	movwf	7
 12614  0DB4  1701               	bsf	1,6
 12615                           
 12616                           ;Dimmer_B1.c: 646: DimmerLights->DimmingValue = ((char)(80*0.8));
 12617  0DB5  3040               	movlw	64
 12618  0DB6  00E3               	movwf	??_setDimmerLights
 12619  0DB7  086F               	movf	_DimmerLights,w
 12620  0DB8  3E04               	addlw	4
 12621  0DB9  0086               	movwf	6
 12622  0DBA  3001               	movlw	1	; select bank2/3
 12623  0DBB  0087               	movwf	7
 12624  0DBC  0863               	movf	??_setDimmerLights,w
 12625  0DBD  0081               	movwf	1
 12626                           
 12627                           ;Dimmer_B1.c: 647: product->Data[(20 + lights)]=setPercentValue(((char)(80*0.8)));
 12628  0DBE  3040               	movlw	64
 12629  0DBF  3189  21ED  318D   	fcall	_setPercentValue
 12630  0DC2  0020               	movlb	0	; select bank0
 12631  0DC3  00E3               	movwf	??_setDimmerLights
 12632  0DC4  0865               	movf	setDimmerLights@lights,w
 12633  0DC5  3E14               	addlw	20
 12634  0DC6  076E               	addwf	_product,w
 12635  0DC7  00E4               	movwf	??_setDimmerLights+1
 12636  0DC8  0864               	movf	??_setDimmerLights+1,w
 12637  0DC9  0086               	movwf	6
 12638  0DCA  3002               	movlw	2	; select bank4/5
 12639  0DCB  0087               	movwf	7
 12640  0DCC  0863               	movf	??_setDimmerLights,w
 12641  0DCD  0081               	movwf	1
 12642  0DCE  2DF6               	goto	l8859
 12643  0DCF                     l8847:	
 12644                           ;Dimmer_B1.c: 657: } else {
 12645                           
 12646                           ;Dimmer_B1.c: 655: DimmerLights->DimmingTimeValue = 7;
 12647                           
 12648                           
 12649                           ;Dimmer_B1.c: 658: DimmerLights->StatusFlag = 0;
 12650  0DCF  086F               	movf	_DimmerLights,w
 12651  0DD0  0086               	movwf	6
 12652  0DD1  3001               	movlw	1	; select bank2/3
 12653  0DD2  0087               	movwf	7
 12654  0DD3  1301               	bcf	1,6
 12655                           
 12656                           ;Dimmer_B1.c: 659: DimmerLights->Loop = 0;
 12657  0DD4  086F               	movf	_DimmerLights,w
 12658  0DD5  3E09               	addlw	9
 12659  0DD6  0086               	movwf	6
 12660  0DD7  3001               	movlw	1	; select bank2/3
 12661  0DD8  0087               	movwf	7
 12662  0DD9  1081               	bcf	1,1
 12663                           
 12664                           ;Dimmer_B1.c: 660: setLED(lights, 1);
 12665  0DDA  01A2               	clrf	setLED@command
 12666  0DDB  0AA2               	incf	setLED@command,f
 12667  0DDC  0865               	movf	setDimmerLights@lights,w
 12668  0DDD  3195  2545  318D   	fcall	_setLED
 12669                           
 12670                           ;Dimmer_B1.c: 668: DimmerLights->MosfetClose = 1;
 12671  0DE0  0020               	movlb	0	; select bank0
 12672  0DE1  086F               	movf	_DimmerLights,w
 12673  0DE2  3E08               	addlw	8
 12674  0DE3  0086               	movwf	6
 12675  0DE4  3001               	movlw	1	; select bank2/3
 12676  0DE5  0087               	movwf	7
 12677  0DE6  1781               	bsf	1,7
 12678                           
 12679                           ;Dimmer_B1.c: 671: DimmerLights->AdjFlag = 0;
 12680  0DE7  086F               	movf	_DimmerLights,w
 12681  0DE8  0086               	movwf	6
 12682  0DE9  3001               	movlw	1	; select bank2/3
 12683  0DEA  0087               	movwf	7
 12684  0DEB  1181               	bcf	1,3
 12685                           
 12686                           ;Dimmer_B1.c: 672: DimmerLights->AdjStatus = 0;
 12687  0DEC  086F               	movf	_DimmerLights,w
 12688  0DED  0086               	movwf	6
 12689  0DEE  3001               	movlw	1	; select bank2/3
 12690  0DEF  0087               	movwf	7
 12691  0DF0  1201               	bcf	1,4
 12692                           
 12693                           ;Dimmer_B1.c: 673: DimmerLights->AdjRF = 0;
 12694  0DF1  086F               	movf	_DimmerLights,w
 12695  0DF2  0086               	movwf	6
 12696  0DF3  3001               	movlw	1	; select bank2/3
 12697  0DF4  0087               	movwf	7
 12698  0DF5  1101               	bcf	1,2
 12699  0DF6                     l8859:	
 12700                           
 12701                           ;Dimmer_B1.c: 674: DimmerLights->DimmingTimeValue = 7;
 12702  0DF6  3007               	movlw	7
 12703  0DF7  00E3               	movwf	??_setDimmerLights
 12704  0DF8  086F               	movf	_DimmerLights,w
 12705  0DF9  3E02               	addlw	2
 12706  0DFA  0086               	movwf	6
 12707  0DFB  3001               	movlw	1	; select bank2/3
 12708  0DFC  0087               	movwf	7
 12709  0DFD  0863               	movf	??_setDimmerLights,w
 12710  0DFE  0081               	movwf	1
 12711                           
 12712                           ;Dimmer_B1.c: 676: }
 12713                           ;Dimmer_B1.c: 677: setRF_DimmerLights(lights, status);
 12714  0DFF  0862               	movf	setDimmerLights@status,w
 12715  0E00  00E3               	movwf	??_setDimmerLights
 12716  0E01  0863               	movf	??_setDimmerLights,w
 12717  0E02  00A0               	movwf	setRF_DimmerLights@on
 12718  0E03  0865               	movf	setDimmerLights@lights,w
 12719  0E04  3188  2012  318D   	fcall	_setRF_DimmerLights
 12720                           
 12721                           ;Dimmer_B1.c: 678: setTxData();
 12722  0E07  3186  26FB         	fcall	_setTxData
 12723  0E09  0008               	return
 12724  0E0A                     __end_of_setDimmerLights:	
 12725                           
 12726                           	psect	text74
 12727  06FB                     __ptext74:	
 12728 ;; *************** function _setTxData *****************
 12729 ;; Defined at:
 12730 ;;		line 204 in file "../src/RF_Control_B1.c"
 12731 ;; Parameters:    Size  Location     Type
 12732 ;;		None
 12733 ;; Auto vars:     Size  Location     Type
 12734 ;;  i               1    0        unsigned char 
 12735 ;; Return value:  Size  Location     Type
 12736 ;;		None               void
 12737 ;; Registers used:
 12738 ;;		wreg, fsr1l, fsr1h
 12739 ;; Tracked objects:
 12740 ;;		On entry : 0/0
 12741 ;;		On exit  : 0/0
 12742 ;;		Unchanged: 0/0
 12743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12746 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12747 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12748 ;;Total ram usage:        1 bytes
 12749 ;; Hardware stack levels used:    1
 12750 ;; Hardware stack levels required when called:    5
 12751 ;; This function calls:
 12752 ;;		Nothing
 12753 ;; This function is called by:
 12754 ;;		_setDimmerLights
 12755 ;;		_setDimmerLights_Adj
 12756 ;;		_setControl_Lights_Table
 12757 ;;		_setRFSW_AdjControl
 12758 ;; This function uses a non-reentrant model
 12759 ;;
 12760                           
 12761                           
 12762                           ;psect for function _setTxData
 12763  06FB                     _setTxData:	
 12764                           
 12765                           ;RF_Control_B1.c: 205: char i;
 12766                           ;RF_Control_B1.c: 206: if (RF1.Enable == 1) {
 12767                           
 12768                           ;incstack = 0
 12769                           ; Regs used in _setTxData: [wregfsr1]
 12770  06FB  0021               	movlb	1	; select bank1
 12771  06FC  1C3C               	btfss	_RF1^(0+128),0
 12772  06FD  0008               	return
 12773                           
 12774                           ;RF_Control_B1.c: 208: RF1.TransceiveGO = 1;
 12775  06FE  153C               	bsf	_RF1^(0+128),2
 12776                           
 12777                           ;RF_Control_B1.c: 209: RF1.RunTime = 20;
 12778  06FF  3014               	movlw	20
 12779  0700  00C3               	movwf	(_RF1^(0+128)+7)
 12780  0701  3000               	movlw	0
 12781  0702  00C4               	movwf	(_RF1^(0+128)+8)
 12782                           
 12783                           ;RF_Control_B1.c: 218: RF_Data[0] = 0x63;
 12784  0703  3063               	movlw	99
 12785  0704  0020               	movlb	0	; select bank0
 12786  0705  00A0               	movwf	??_setTxData
 12787  0706  0820               	movf	??_setTxData,w
 12788  0707  0023               	movlb	3	; select bank3
 12789  0708  00A0               	movwf	_RF_Data^(0+384)
 12790                           
 12791                           ;RF_Control_B1.c: 219: RF_Data[1] = 0x02;
 12792  0709  3002               	movlw	2
 12793  070A  0020               	movlb	0	; select bank0
 12794  070B  00A0               	movwf	??_setTxData
 12795  070C  0820               	movf	??_setTxData,w
 12796  070D  0023               	movlb	3	; select bank3
 12797  070E  00A1               	movwf	(_RF_Data^(0+384)+1)
 12798                           
 12799                           ;RF_Control_B1.c: 220: RF_Data[2] = product->Data[2];
 12800  070F  0020               	movlb	0	; select bank0
 12801  0710  086E               	movf	_product,w
 12802  0711  0086               	movwf	6
 12803  0712  3002               	movlw	2	; select bank4/5
 12804  0713  0087               	movwf	7
 12805  0714  3002               	movlw	2	; select bank4/5
 12806  0715  3F42               	moviw [2]fsr1
 12807  0716  0023               	movlb	3	; select bank3
 12808  0717  00A2               	movwf	(_RF_Data^(0+384)+2)
 12809                           
 12810                           ;RF_Control_B1.c: 221: RF_Data[3] = product->Data[3];
 12811  0718  0020               	movlb	0	; select bank0
 12812  0719  086E               	movf	_product,w
 12813  071A  0086               	movwf	6
 12814  071B  3002               	movlw	2	; select bank4/5
 12815  071C  0087               	movwf	7
 12816  071D  3002               	movlw	2	; select bank4/5
 12817  071E  3F43               	moviw [3]fsr1
 12818  071F  0023               	movlb	3	; select bank3
 12819  0720  00A3               	movwf	(_RF_Data^(0+384)+3)
 12820                           
 12821                           ;RF_Control_B1.c: 222: RF_Data[4] = product->Data[4];
 12822  0721  0020               	movlb	0	; select bank0
 12823  0722  086E               	movf	_product,w
 12824  0723  0086               	movwf	6
 12825  0724  3002               	movlw	2	; select bank4/5
 12826  0725  0087               	movwf	7
 12827  0726  3002               	movlw	2	; select bank4/5
 12828  0727  3F44               	moviw [4]fsr1
 12829  0728  0023               	movlb	3	; select bank3
 12830  0729  00A4               	movwf	(_RF_Data^(0+384)+4)
 12831                           
 12832                           ;RF_Control_B1.c: 223: RF_Data[5] = product->Data[5];
 12833  072A  0020               	movlb	0	; select bank0
 12834  072B  086E               	movf	_product,w
 12835  072C  0086               	movwf	6
 12836  072D  3002               	movlw	2	; select bank4/5
 12837  072E  0087               	movwf	7
 12838  072F  3002               	movlw	2	; select bank4/5
 12839  0730  3F45               	moviw [5]fsr1
 12840  0731  0023               	movlb	3	; select bank3
 12841  0732  00A5               	movwf	(_RF_Data^(0+384)+5)
 12842                           
 12843                           ;RF_Control_B1.c: 224: RF_Data[6] = product->Data[6];
 12844  0733  0020               	movlb	0	; select bank0
 12845  0734  086E               	movf	_product,w
 12846  0735  0086               	movwf	6
 12847  0736  3002               	movlw	2	; select bank4/5
 12848  0737  0087               	movwf	7
 12849  0738  3002               	movlw	2	; select bank4/5
 12850  0739  3F46               	moviw [6]fsr1
 12851  073A  0023               	movlb	3	; select bank3
 12852  073B  00A6               	movwf	(_RF_Data^(0+384)+6)
 12853                           
 12854                           ;RF_Control_B1.c: 225: RF_Data[7] = product->Data[7];
 12855  073C  0020               	movlb	0	; select bank0
 12856  073D  086E               	movf	_product,w
 12857  073E  0086               	movwf	6
 12858  073F  3002               	movlw	2	; select bank4/5
 12859  0740  0087               	movwf	7
 12860  0741  3002               	movlw	2	; select bank4/5
 12861  0742  3F47               	moviw [7]fsr1
 12862  0743  0023               	movlb	3	; select bank3
 12863  0744  00A7               	movwf	(_RF_Data^(0+384)+7)
 12864                           
 12865                           ;RF_Control_B1.c: 226: RF_Data[8] = product->Data[8];
 12866  0745  0020               	movlb	0	; select bank0
 12867  0746  086E               	movf	_product,w
 12868  0747  0086               	movwf	6
 12869  0748  3002               	movlw	2	; select bank4/5
 12870  0749  0087               	movwf	7
 12871  074A  3002               	movlw	2	; select bank4/5
 12872  074B  3F48               	moviw [8]fsr1
 12873  074C  0023               	movlb	3	; select bank3
 12874  074D  00A8               	movwf	(_RF_Data^(0+384)+8)
 12875                           
 12876                           ;RF_Control_B1.c: 227: RF_Data[9] = product->Data[9];
 12877  074E  0020               	movlb	0	; select bank0
 12878  074F  086E               	movf	_product,w
 12879  0750  0086               	movwf	6
 12880  0751  3002               	movlw	2	; select bank4/5
 12881  0752  0087               	movwf	7
 12882  0753  3002               	movlw	2	; select bank4/5
 12883  0754  3F49               	moviw [9]fsr1
 12884  0755  0023               	movlb	3	; select bank3
 12885  0756  00A9               	movwf	(_RF_Data^(0+384)+9)
 12886                           
 12887                           ;RF_Control_B1.c: 228: RF_Data[10] = product->Data[10];
 12888  0757  0020               	movlb	0	; select bank0
 12889  0758  086E               	movf	_product,w
 12890  0759  0086               	movwf	6
 12891  075A  3002               	movlw	2	; select bank4/5
 12892  075B  0087               	movwf	7
 12893  075C  3002               	movlw	2	; select bank4/5
 12894  075D  3F4A               	moviw [10]fsr1
 12895  075E  0023               	movlb	3	; select bank3
 12896  075F  00AA               	movwf	(_RF_Data^(0+384)+10)
 12897                           
 12898                           ;RF_Control_B1.c: 229: RF_Data[11] = product->Data[11];
 12899  0760  0020               	movlb	0	; select bank0
 12900  0761  086E               	movf	_product,w
 12901  0762  0086               	movwf	6
 12902  0763  3002               	movlw	2	; select bank4/5
 12903  0764  0087               	movwf	7
 12904  0765  3002               	movlw	2	; select bank4/5
 12905  0766  3F4B               	moviw [11]fsr1
 12906  0767  0023               	movlb	3	; select bank3
 12907  0768  00AB               	movwf	(_RF_Data^(0+384)+11)
 12908                           
 12909                           ;RF_Control_B1.c: 230: RF_Data[12] = product->Data[12];
 12910  0769  0020               	movlb	0	; select bank0
 12911  076A  086E               	movf	_product,w
 12912  076B  0086               	movwf	6
 12913  076C  3002               	movlw	2	; select bank4/5
 12914  076D  0087               	movwf	7
 12915  076E  3002               	movlw	2	; select bank4/5
 12916  076F  3F4C               	moviw [12]fsr1
 12917  0770  0023               	movlb	3	; select bank3
 12918  0771  00AC               	movwf	(_RF_Data^(0+384)+12)
 12919                           
 12920                           ;RF_Control_B1.c: 231: RF_Data[13] = product->Data[13];
 12921  0772  0020               	movlb	0	; select bank0
 12922  0773  086E               	movf	_product,w
 12923  0774  0086               	movwf	6
 12924  0775  3002               	movlw	2	; select bank4/5
 12925  0776  0087               	movwf	7
 12926  0777  3002               	movlw	2	; select bank4/5
 12927  0778  3F4D               	moviw [13]fsr1
 12928  0779  0023               	movlb	3	; select bank3
 12929  077A  00AD               	movwf	(_RF_Data^(0+384)+13)
 12930                           
 12931                           ;RF_Control_B1.c: 232: RF_Data[14] = product->Data[14];
 12932  077B  0020               	movlb	0	; select bank0
 12933  077C  086E               	movf	_product,w
 12934  077D  0086               	movwf	6
 12935  077E  3002               	movlw	2	; select bank4/5
 12936  077F  0087               	movwf	7
 12937  0780  3002               	movlw	2	; select bank4/5
 12938  0781  3F4E               	moviw [14]fsr1
 12939  0782  0023               	movlb	3	; select bank3
 12940  0783  00AE               	movwf	(_RF_Data^(0+384)+14)
 12941                           
 12942                           ;RF_Control_B1.c: 233: RF_Data[15] = product->Data[15];
 12943  0784  0020               	movlb	0	; select bank0
 12944  0785  086E               	movf	_product,w
 12945  0786  0086               	movwf	6
 12946  0787  3002               	movlw	2	; select bank4/5
 12947  0788  0087               	movwf	7
 12948  0789  3002               	movlw	2	; select bank4/5
 12949  078A  3F4F               	moviw [15]fsr1
 12950  078B  0023               	movlb	3	; select bank3
 12951  078C  00AF               	movwf	(_RF_Data^(0+384)+15)
 12952                           
 12953                           ;RF_Control_B1.c: 234: RF_Data[16] = product->Data[16];
 12954  078D  0020               	movlb	0	; select bank0
 12955  078E  086E               	movf	_product,w
 12956  078F  0086               	movwf	6
 12957  0790  3002               	movlw	2	; select bank4/5
 12958  0791  0087               	movwf	7
 12959  0792  3002               	movlw	2	; select bank4/5
 12960  0793  3F50               	moviw [16]fsr1
 12961  0794  0023               	movlb	3	; select bank3
 12962  0795  00B0               	movwf	(_RF_Data^(0+384)+16)
 12963                           
 12964                           ;RF_Control_B1.c: 235: RF_Data[17] = product->Data[17];
 12965  0796  0020               	movlb	0	; select bank0
 12966  0797  086E               	movf	_product,w
 12967  0798  0086               	movwf	6
 12968  0799  3002               	movlw	2	; select bank4/5
 12969  079A  0087               	movwf	7
 12970  079B  3002               	movlw	2	; select bank4/5
 12971  079C  3F51               	moviw [17]fsr1
 12972  079D  0023               	movlb	3	; select bank3
 12973  079E  00B1               	movwf	(_RF_Data^(0+384)+17)
 12974                           
 12975                           ;RF_Control_B1.c: 236: RF_Data[18] = product->Data[18];
 12976  079F  0020               	movlb	0	; select bank0
 12977  07A0  086E               	movf	_product,w
 12978  07A1  0086               	movwf	6
 12979  07A2  3002               	movlw	2	; select bank4/5
 12980  07A3  0087               	movwf	7
 12981  07A4  3002               	movlw	2	; select bank4/5
 12982  07A5  3F52               	moviw [18]fsr1
 12983  07A6  0023               	movlb	3	; select bank3
 12984  07A7  00B2               	movwf	(_RF_Data^(0+384)+18)
 12985                           
 12986                           ;RF_Control_B1.c: 237: RF_Data[19] = product->Data[19];
 12987  07A8  0020               	movlb	0	; select bank0
 12988  07A9  086E               	movf	_product,w
 12989  07AA  0086               	movwf	6
 12990  07AB  3002               	movlw	2	; select bank4/5
 12991  07AC  0087               	movwf	7
 12992  07AD  3002               	movlw	2	; select bank4/5
 12993  07AE  3F53               	moviw [19]fsr1
 12994  07AF  0023               	movlb	3	; select bank3
 12995  07B0  00B3               	movwf	(_RF_Data^(0+384)+19)
 12996                           
 12997                           ;RF_Control_B1.c: 238: RF_Data[20] = 210;
 12998  07B1  30D2               	movlw	210
 12999  07B2  0020               	movlb	0	; select bank0
 13000  07B3  00A0               	movwf	??_setTxData
 13001  07B4  0820               	movf	??_setTxData,w
 13002  07B5  0023               	movlb	3	; select bank3
 13003  07B6  00B4               	movwf	(_RF_Data^(0+384)+20)
 13004  07B7  0008               	return
 13005  07B8                     __end_of_setTxData:	
 13006                           
 13007                           	psect	text75
 13008  09ED                     __ptext75:	
 13009 ;; *************** function _setPercentValue *****************
 13010 ;; Defined at:
 13011 ;;		line 889 in file "../src/Dimmer_B1.c"
 13012 ;; Parameters:    Size  Location     Type
 13013 ;;  value           1    wreg     unsigned char 
 13014 ;; Auto vars:     Size  Location     Type
 13015 ;;  value           1   62[BANK0 ] unsigned char 
 13016 ;;  i               3   63[BANK0 ] float 
 13017 ;; Return value:  Size  Location     Type
 13018 ;;                  1    wreg      unsigned char 
 13019 ;; Registers used:
 13020 ;;		wreg, status,2, status,0, pclath, cstack
 13021 ;; Tracked objects:
 13022 ;;		On entry : 0/0
 13023 ;;		On exit  : 0/0
 13024 ;;		Unchanged: 0/0
 13025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13027 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13028 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13029 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13030 ;;Total ram usage:        6 bytes
 13031 ;; Hardware stack levels used:    1
 13032 ;; Hardware stack levels required when called:    7
 13033 ;; This function calls:
 13034 ;;		___awtoft
 13035 ;;		___ftadd
 13036 ;;		___ftdiv
 13037 ;;		___ftneg
 13038 ;;		___fttol
 13039 ;; This function is called by:
 13040 ;;		_setDimmerLights
 13041 ;;		_setDimmerLights_Adj
 13042 ;;		_Flash_Memory_Initialization
 13043 ;; This function uses a non-reentrant model
 13044 ;;
 13045                           
 13046                           
 13047                           ;psect for function _setPercentValue
 13048  09ED                     _setPercentValue:	
 13049                           
 13050                           ;incstack = 0
 13051                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13052                           ;setPercentValue@value stored from wreg
 13053  09ED  0020               	movlb	0	; select bank0
 13054  09EE  00DE               	movwf	setPercentValue@value
 13055                           
 13056                           ;Dimmer_B1.c: 897: float i = ((char)(80*0.8)) - ((char)(15*0.8));
 13057  09EF  3000               	movlw	0
 13058  09F0  00DF               	movwf	setPercentValue@i
 13059  09F1  3050               	movlw	80
 13060  09F2  00E0               	movwf	setPercentValue@i+1
 13061  09F3  3042               	movlw	66
 13062  09F4  00E1               	movwf	setPercentValue@i+2
 13063                           
 13064                           ;Dimmer_B1.c: 898: i /= 100;
 13065  09F5  3000               	movlw	0
 13066  09F6  00AE               	movwf	___ftdiv@f2
 13067  09F7  30C8               	movlw	200
 13068  09F8  00AF               	movwf	___ftdiv@f2+1
 13069  09F9  3042               	movlw	66
 13070  09FA  00B0               	movwf	___ftdiv@f2+2
 13071  09FB  085F               	movf	setPercentValue@i,w
 13072  09FC  00B1               	movwf	___ftdiv@f1
 13073  09FD  0860               	movf	setPercentValue@i+1,w
 13074  09FE  00B2               	movwf	___ftdiv@f1+1
 13075  09FF  0861               	movf	setPercentValue@i+2,w
 13076  0A00  00B3               	movwf	___ftdiv@f1+2
 13077  0A01  318E  26A3  3189   	fcall	___ftdiv
 13078  0A04  0020               	movlb	0	; select bank0
 13079  0A05  082E               	movf	?___ftdiv,w
 13080  0A06  00DF               	movwf	setPercentValue@i
 13081  0A07  082F               	movf	?___ftdiv+1,w
 13082  0A08  00E0               	movwf	setPercentValue@i+1
 13083  0A09  0830               	movf	?___ftdiv+2,w
 13084  0A0A  00E1               	movwf	setPercentValue@i+2
 13085                           
 13086                           ;Dimmer_B1.c: 900: return (char) (100 - ((((char)(80*0.8)) - value) / i));
 13087  0A0B  085E               	movf	setPercentValue@value,w
 13088  0A0C  00DC               	movwf	??_setPercentValue
 13089  0A0D  01DD               	clrf	??_setPercentValue+1
 13090  0A0E  09DC               	comf	??_setPercentValue,f
 13091  0A0F  09DD               	comf	??_setPercentValue+1,f
 13092  0A10  0ADC               	incf	??_setPercentValue,f
 13093  0A11  1903               	skipnz
 13094  0A12  0ADD               	incf	??_setPercentValue+1,f
 13095  0A13  085C               	movf	??_setPercentValue,w
 13096  0A14  3E40               	addlw	64
 13097  0A15  00A8               	movwf	___awtoft@c
 13098  0A16  3000               	movlw	0
 13099  0A17  3D5D               	addwfc	??_setPercentValue+1,w
 13100  0A18  00A9               	movwf	___awtoft@c+1
 13101  0A19  319F  2774  3189   	fcall	___awtoft
 13102  0A1C  0020               	movlb	0	; select bank0
 13103  0A1D  0828               	movf	?___awtoft,w
 13104  0A1E  00B1               	movwf	___ftdiv@f1
 13105  0A1F  0829               	movf	?___awtoft+1,w
 13106  0A20  00B2               	movwf	___ftdiv@f1+1
 13107  0A21  082A               	movf	?___awtoft+2,w
 13108  0A22  00B3               	movwf	___ftdiv@f1+2
 13109  0A23  085F               	movf	setPercentValue@i,w
 13110  0A24  00AE               	movwf	___ftdiv@f2
 13111  0A25  0860               	movf	setPercentValue@i+1,w
 13112  0A26  00AF               	movwf	___ftdiv@f2+1
 13113  0A27  0861               	movf	setPercentValue@i+2,w
 13114  0A28  00B0               	movwf	___ftdiv@f2+2
 13115  0A29  318E  26A3  3189   	fcall	___ftdiv
 13116  0A2C  0020               	movlb	0	; select bank0
 13117  0A2D  082E               	movf	?___ftdiv,w
 13118  0A2E  00BE               	movwf	___ftneg@f1
 13119  0A2F  082F               	movf	?___ftdiv+1,w
 13120  0A30  00BF               	movwf	___ftneg@f1+1
 13121  0A31  0830               	movf	?___ftdiv+2,w
 13122  0A32  00C0               	movwf	___ftneg@f1+2
 13123  0A33  319B  23B4  3189   	fcall	___ftneg
 13124  0A36  0020               	movlb	0	; select bank0
 13125  0A37  083E               	movf	?___ftneg,w
 13126  0A38  00C4               	movwf	___ftadd@f2
 13127  0A39  083F               	movf	?___ftneg+1,w
 13128  0A3A  00C5               	movwf	___ftadd@f2+1
 13129  0A3B  0840               	movf	?___ftneg+2,w
 13130  0A3C  00C6               	movwf	___ftadd@f2+2
 13131  0A3D  3000               	movlw	0
 13132  0A3E  00C1               	movwf	___ftadd@f1
 13133  0A3F  30C8               	movlw	200
 13134  0A40  00C2               	movwf	___ftadd@f1+1
 13135  0A41  3042               	movlw	66
 13136  0A42  00C3               	movwf	___ftadd@f1+2
 13137  0A43  3184  2439  3189   	fcall	___ftadd
 13138  0A46  0020               	movlb	0	; select bank0
 13139  0A47  0841               	movf	?___ftadd,w
 13140  0A48  00CE               	movwf	___fttol@f1
 13141  0A49  0842               	movf	?___ftadd+1,w
 13142  0A4A  00CF               	movwf	___fttol@f1+1
 13143  0A4B  0843               	movf	?___ftadd+2,w
 13144  0A4C  00D0               	movwf	___fttol@f1+2
 13145  0A4D  318C  24FA         	fcall	___fttol
 13146  0A4F  0020               	movlb	0	; select bank0
 13147  0A50  084E               	movf	?___fttol,w
 13148  0A51  0008               	return
 13149  0A52                     __end_of_setPercentValue:	
 13150                           
 13151                           	psect	text76
 13152  0CFA                     __ptext76:	
 13153 ;; *************** function ___fttol *****************
 13154 ;; Defined at:
 13155 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13156 ;; Parameters:    Size  Location     Type
 13157 ;;  f1              3   46[BANK0 ] float 
 13158 ;; Auto vars:     Size  Location     Type
 13159 ;;  lval            4   55[BANK0 ] unsigned long 
 13160 ;;  exp1            1   59[BANK0 ] unsigned char 
 13161 ;;  sign1           1   54[BANK0 ] unsigned char 
 13162 ;; Return value:  Size  Location     Type
 13163 ;;                  4   46[BANK0 ] long 
 13164 ;; Registers used:
 13165 ;;		wreg, status,2, status,0
 13166 ;; Tracked objects:
 13167 ;;		On entry : 0/0
 13168 ;;		On exit  : 0/0
 13169 ;;		Unchanged: 0/0
 13170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13171 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13172 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13173 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13174 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13175 ;;Total ram usage:       14 bytes
 13176 ;; Hardware stack levels used:    1
 13177 ;; Hardware stack levels required when called:    5
 13178 ;; This function calls:
 13179 ;;		Nothing
 13180 ;; This function is called by:
 13181 ;;		_getPercentValue
 13182 ;;		_setPercentValue
 13183 ;; This function uses a non-reentrant model
 13184 ;;
 13185                           
 13186                           
 13187                           ;psect for function ___fttol
 13188  0CFA                     ___fttol:	
 13189                           
 13190                           ;incstack = 0
 13191                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13192  0CFA  0020               	movlb	0	; select bank0
 13193  0CFB  084E               	movf	___fttol@f1,w
 13194  0CFC  00D2               	movwf	??___fttol
 13195  0CFD  084F               	movf	___fttol@f1+1,w
 13196  0CFE  00D3               	movwf	??___fttol+1
 13197  0CFF  0850               	movf	___fttol@f1+2,w
 13198  0D00  00D4               	movwf	??___fttol+2
 13199  0D01  1003               	clrc
 13200  0D02  0D53               	rlf	??___fttol+1,w
 13201  0D03  0D54               	rlf	??___fttol+2,w
 13202  0D04  00D5               	movwf	??___fttol+3
 13203  0D05  0855               	movf	??___fttol+3,w
 13204  0D06  00DB               	movwf	___fttol@exp1
 13205  0D07  08DB               	movf	___fttol@exp1,f
 13206  0D08  1D03               	skipz
 13207  0D09  2D13               	goto	l5923
 13208  0D0A  3000               	movlw	0
 13209  0D0B  00D1               	movwf	?___fttol+3
 13210  0D0C  3000               	movlw	0
 13211  0D0D  00D0               	movwf	?___fttol+2
 13212  0D0E  3000               	movlw	0
 13213  0D0F  00CF               	movwf	?___fttol+1
 13214  0D10  3000               	movlw	0
 13215  0D11  00CE               	movwf	?___fttol
 13216  0D12  0008               	return
 13217  0D13                     l5923:	
 13218  0D13  084E               	movf	___fttol@f1,w
 13219  0D14  00D2               	movwf	??___fttol
 13220  0D15  084F               	movf	___fttol@f1+1,w
 13221  0D16  00D3               	movwf	??___fttol+1
 13222  0D17  0850               	movf	___fttol@f1+2,w
 13223  0D18  00D4               	movwf	??___fttol+2
 13224  0D19  3017               	movlw	23
 13225  0D1A                     u4785:	
 13226  0D1A  36D4               	lsrf	??___fttol+2,f
 13227  0D1B  0CD3               	rrf	??___fttol+1,f
 13228  0D1C  0CD2               	rrf	??___fttol,f
 13229  0D1D  0B89               	decfsz	9,f
 13230  0D1E  2D1A               	goto	u4785
 13231  0D1F  0852               	movf	??___fttol,w
 13232  0D20  00D5               	movwf	??___fttol+3
 13233  0D21  0855               	movf	??___fttol+3,w
 13234  0D22  00D6               	movwf	___fttol@sign1
 13235  0D23  17CF               	bsf	___fttol@f1+1,7
 13236  0D24  30FF               	movlw	255
 13237  0D25  05CE               	andwf	___fttol@f1,f
 13238  0D26  30FF               	movlw	255
 13239  0D27  05CF               	andwf	___fttol@f1+1,f
 13240  0D28  3000               	movlw	0
 13241  0D29  05D0               	andwf	___fttol@f1+2,f
 13242  0D2A  084E               	movf	___fttol@f1,w
 13243  0D2B  00D7               	movwf	___fttol@lval
 13244  0D2C  084F               	movf	___fttol@f1+1,w
 13245  0D2D  00D8               	movwf	___fttol@lval+1
 13246  0D2E  0850               	movf	___fttol@f1+2,w
 13247  0D2F  00D9               	movwf	___fttol@lval+2
 13248  0D30  01DA               	clrf	___fttol@lval+3
 13249  0D31  308E               	movlw	142
 13250  0D32  02DB               	subwf	___fttol@exp1,f
 13251  0D33  1FDB               	btfss	___fttol@exp1,7
 13252  0D34  2D51               	goto	l5943
 13253  0D35  085B               	movf	___fttol@exp1,w
 13254  0D36  3A80               	xorlw	128
 13255  0D37  3E8F               	addlw	143
 13256  0D38  1803               	skipnc
 13257  0D39  2D43               	goto	l5941
 13258  0D3A  3000               	movlw	0
 13259  0D3B  00D1               	movwf	?___fttol+3
 13260  0D3C  3000               	movlw	0
 13261  0D3D  00D0               	movwf	?___fttol+2
 13262  0D3E  3000               	movlw	0
 13263  0D3F  00CF               	movwf	?___fttol+1
 13264  0D40  3000               	movlw	0
 13265  0D41  00CE               	movwf	?___fttol
 13266  0D42  0008               	return
 13267  0D43                     l5941:	
 13268  0D43  3001               	movlw	1
 13269  0D44                     u4815:	
 13270  0D44  36DA               	lsrf	___fttol@lval+3,f
 13271  0D45  0CD9               	rrf	___fttol@lval+2,f
 13272  0D46  0CD8               	rrf	___fttol@lval+1,f
 13273  0D47  0CD7               	rrf	___fttol@lval,f
 13274  0D48  0B89               	decfsz	9,f
 13275  0D49  2D44               	goto	u4815
 13276  0D4A  3001               	movlw	1
 13277  0D4B  00D2               	movwf	??___fttol
 13278  0D4C  0852               	movf	??___fttol,w
 13279  0D4D  07DB               	addwf	___fttol@exp1,f
 13280  0D4E  1903               	btfsc	3,2
 13281  0D4F  2D6A               	goto	l5953
 13282  0D50  2D43               	goto	l5941
 13283  0D51                     l5943:	
 13284  0D51  3018               	movlw	24
 13285  0D52  025B               	subwf	___fttol@exp1,w
 13286  0D53  1C03               	skipc
 13287  0D54  2D67               	goto	l5951
 13288  0D55  3000               	movlw	0
 13289  0D56  00D1               	movwf	?___fttol+3
 13290  0D57  3000               	movlw	0
 13291  0D58  00D0               	movwf	?___fttol+2
 13292  0D59  3000               	movlw	0
 13293  0D5A  00CF               	movwf	?___fttol+1
 13294  0D5B  3000               	movlw	0
 13295  0D5C  00CE               	movwf	?___fttol
 13296  0D5D  0008               	return
 13297  0D5E                     l5949:	
 13298  0D5E  3001               	movlw	1
 13299  0D5F                     u4845:	
 13300  0D5F  35D7               	lslf	___fttol@lval,f
 13301  0D60  0DD8               	rlf	___fttol@lval+1,f
 13302  0D61  0DD9               	rlf	___fttol@lval+2,f
 13303  0D62  0DDA               	rlf	___fttol@lval+3,f
 13304  0D63  0B89               	decfsz	9,f
 13305  0D64  2D5F               	goto	u4845
 13306  0D65  3001               	movlw	1
 13307  0D66  02DB               	subwf	___fttol@exp1,f
 13308  0D67                     l5951:	
 13309  0D67  08DB               	movf	___fttol@exp1,f
 13310  0D68  1D03               	skipz
 13311  0D69  2D5E               	goto	l5949
 13312  0D6A                     l5953:	
 13313  0D6A  0856               	movf	___fttol@sign1,w
 13314  0D6B  1903               	btfsc	3,2
 13315  0D6C  2D78               	goto	l5957
 13316  0D6D  09D7               	comf	___fttol@lval,f
 13317  0D6E  09D8               	comf	___fttol@lval+1,f
 13318  0D6F  09D9               	comf	___fttol@lval+2,f
 13319  0D70  09DA               	comf	___fttol@lval+3,f
 13320  0D71  0AD7               	incf	___fttol@lval,f
 13321  0D72  1903               	skipnz
 13322  0D73  0AD8               	incf	___fttol@lval+1,f
 13323  0D74  1903               	skipnz
 13324  0D75  0AD9               	incf	___fttol@lval+2,f
 13325  0D76  1903               	skipnz
 13326  0D77  0ADA               	incf	___fttol@lval+3,f
 13327  0D78                     l5957:	
 13328  0D78  085A               	movf	___fttol@lval+3,w
 13329  0D79  00D1               	movwf	?___fttol+3
 13330  0D7A  0859               	movf	___fttol@lval+2,w
 13331  0D7B  00D0               	movwf	?___fttol+2
 13332  0D7C  0858               	movf	___fttol@lval+1,w
 13333  0D7D  00CF               	movwf	?___fttol+1
 13334  0D7E  0857               	movf	___fttol@lval,w
 13335  0D7F  00CE               	movwf	?___fttol
 13336  0D80  0008               	return
 13337  0D81                     __end_of___fttol:	
 13338                           
 13339                           	psect	text77
 13340  1BB4                     __ptext77:	
 13341 ;; *************** function ___ftneg *****************
 13342 ;; Defined at:
 13343 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13344 ;; Parameters:    Size  Location     Type
 13345 ;;  f1              3   30[BANK0 ] float 
 13346 ;; Auto vars:     Size  Location     Type
 13347 ;;		None
 13348 ;; Return value:  Size  Location     Type
 13349 ;;                  3   30[BANK0 ] float 
 13350 ;; Registers used:
 13351 ;;		wreg
 13352 ;; Tracked objects:
 13353 ;;		On entry : 0/0
 13354 ;;		On exit  : 0/0
 13355 ;;		Unchanged: 0/0
 13356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13357 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13360 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13361 ;;Total ram usage:        3 bytes
 13362 ;; Hardware stack levels used:    1
 13363 ;; Hardware stack levels required when called:    5
 13364 ;; This function calls:
 13365 ;;		Nothing
 13366 ;; This function is called by:
 13367 ;;		_setPercentValue
 13368 ;; This function uses a non-reentrant model
 13369 ;;
 13370                           
 13371                           
 13372                           ;psect for function ___ftneg
 13373  1BB4                     ___ftneg:	
 13374                           
 13375                           ;incstack = 0
 13376                           ; Regs used in ___ftneg: [wreg]
 13377  1BB4  0020               	movlb	0	; select bank0
 13378  1BB5  0840               	movf	___ftneg@f1+2,w
 13379  1BB6  043F               	iorwf	___ftneg@f1+1,w
 13380  1BB7  043E               	iorwf	___ftneg@f1,w
 13381  1BB8  1903               	skipnz
 13382  1BB9  0008               	return
 13383  1BBA  3080               	movlw	128
 13384  1BBB  06C0               	xorwf	___ftneg@f1+2,f
 13385  1BBC  0008               	return
 13386  1BBD                     __end_of___ftneg:	
 13387                           
 13388                           	psect	text78
 13389  0EA3                     __ptext78:	
 13390 ;; *************** function ___ftdiv *****************
 13391 ;; Defined at:
 13392 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13393 ;; Parameters:    Size  Location     Type
 13394 ;;  f2              3   14[BANK0 ] float 
 13395 ;;  f1              3   17[BANK0 ] float 
 13396 ;; Auto vars:     Size  Location     Type
 13397 ;;  f3              3   25[BANK0 ] float 
 13398 ;;  sign            1   29[BANK0 ] unsigned char 
 13399 ;;  exp             1   28[BANK0 ] unsigned char 
 13400 ;;  cntr            1   24[BANK0 ] unsigned char 
 13401 ;; Return value:  Size  Location     Type
 13402 ;;                  3   14[BANK0 ] float 
 13403 ;; Registers used:
 13404 ;;		wreg, status,2, status,0, pclath, cstack
 13405 ;; Tracked objects:
 13406 ;;		On entry : 0/0
 13407 ;;		On exit  : 0/0
 13408 ;;		Unchanged: 0/0
 13409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13410 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13411 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13412 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13413 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13414 ;;Total ram usage:       16 bytes
 13415 ;; Hardware stack levels used:    1
 13416 ;; Hardware stack levels required when called:    6
 13417 ;; This function calls:
 13418 ;;		___ftpack
 13419 ;; This function is called by:
 13420 ;;		_getPercentValue
 13421 ;;		_setPercentValue
 13422 ;; This function uses a non-reentrant model
 13423 ;;
 13424                           
 13425                           
 13426                           ;psect for function ___ftdiv
 13427  0EA3                     ___ftdiv:	
 13428                           
 13429                           ;incstack = 0
 13430                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13431  0EA3  0020               	movlb	0	; select bank0
 13432  0EA4  0831               	movf	___ftdiv@f1,w
 13433  0EA5  00B4               	movwf	??___ftdiv
 13434  0EA6  0832               	movf	___ftdiv@f1+1,w
 13435  0EA7  00B5               	movwf	??___ftdiv+1
 13436  0EA8  0833               	movf	___ftdiv@f1+2,w
 13437  0EA9  00B6               	movwf	??___ftdiv+2
 13438  0EAA  1003               	clrc
 13439  0EAB  0D35               	rlf	??___ftdiv+1,w
 13440  0EAC  0D36               	rlf	??___ftdiv+2,w
 13441  0EAD  00B7               	movwf	??___ftdiv+3
 13442  0EAE  0837               	movf	??___ftdiv+3,w
 13443  0EAF  00BC               	movwf	___ftdiv@exp
 13444  0EB0  08BC               	movf	___ftdiv@exp,f
 13445  0EB1  1D03               	skipz
 13446  0EB2  2EBA               	goto	l5831
 13447  0EB3  3000               	movlw	0
 13448  0EB4  00AE               	movwf	?___ftdiv
 13449  0EB5  3000               	movlw	0
 13450  0EB6  00AF               	movwf	?___ftdiv+1
 13451  0EB7  3000               	movlw	0
 13452  0EB8  00B0               	movwf	?___ftdiv+2
 13453  0EB9  0008               	return
 13454  0EBA                     l5831:	
 13455  0EBA  082E               	movf	___ftdiv@f2,w
 13456  0EBB  00B4               	movwf	??___ftdiv
 13457  0EBC  082F               	movf	___ftdiv@f2+1,w
 13458  0EBD  00B5               	movwf	??___ftdiv+1
 13459  0EBE  0830               	movf	___ftdiv@f2+2,w
 13460  0EBF  00B6               	movwf	??___ftdiv+2
 13461  0EC0  1003               	clrc
 13462  0EC1  0D35               	rlf	??___ftdiv+1,w
 13463  0EC2  0D36               	rlf	??___ftdiv+2,w
 13464  0EC3  00B7               	movwf	??___ftdiv+3
 13465  0EC4  0837               	movf	??___ftdiv+3,w
 13466  0EC5  00BD               	movwf	___ftdiv@sign
 13467  0EC6  08BD               	movf	___ftdiv@sign,f
 13468  0EC7  1D03               	skipz
 13469  0EC8  2ED0               	goto	l5837
 13470  0EC9  3000               	movlw	0
 13471  0ECA  00AE               	movwf	?___ftdiv
 13472  0ECB  3000               	movlw	0
 13473  0ECC  00AF               	movwf	?___ftdiv+1
 13474  0ECD  3000               	movlw	0
 13475  0ECE  00B0               	movwf	?___ftdiv+2
 13476  0ECF  0008               	return
 13477  0ED0                     l5837:	
 13478  0ED0  3000               	movlw	0
 13479  0ED1  00B9               	movwf	___ftdiv@f3
 13480  0ED2  3000               	movlw	0
 13481  0ED3  00BA               	movwf	___ftdiv@f3+1
 13482  0ED4  3000               	movlw	0
 13483  0ED5  00BB               	movwf	___ftdiv@f3+2
 13484  0ED6  3089               	movlw	137
 13485  0ED7  073D               	addwf	___ftdiv@sign,w
 13486  0ED8  00B4               	movwf	??___ftdiv
 13487  0ED9  0834               	movf	??___ftdiv,w
 13488  0EDA  02BC               	subwf	___ftdiv@exp,f
 13489  0EDB  0831               	movf	___ftdiv@f1,w
 13490  0EDC  00B4               	movwf	??___ftdiv
 13491  0EDD  0832               	movf	___ftdiv@f1+1,w
 13492  0EDE  00B5               	movwf	??___ftdiv+1
 13493  0EDF  0833               	movf	___ftdiv@f1+2,w
 13494  0EE0  00B6               	movwf	??___ftdiv+2
 13495  0EE1  3010               	movlw	16
 13496  0EE2                     u4595:	
 13497  0EE2  36B6               	lsrf	??___ftdiv+2,f
 13498  0EE3  0CB5               	rrf	??___ftdiv+1,f
 13499  0EE4  0CB4               	rrf	??___ftdiv,f
 13500  0EE5  0B89               	decfsz	9,f
 13501  0EE6  2EE2               	goto	u4595
 13502  0EE7  0834               	movf	??___ftdiv,w
 13503  0EE8  00B7               	movwf	??___ftdiv+3
 13504  0EE9  0837               	movf	??___ftdiv+3,w
 13505  0EEA  00BD               	movwf	___ftdiv@sign
 13506  0EEB  082E               	movf	___ftdiv@f2,w
 13507  0EEC  00B4               	movwf	??___ftdiv
 13508  0EED  082F               	movf	___ftdiv@f2+1,w
 13509  0EEE  00B5               	movwf	??___ftdiv+1
 13510  0EEF  0830               	movf	___ftdiv@f2+2,w
 13511  0EF0  00B6               	movwf	??___ftdiv+2
 13512  0EF1  3010               	movlw	16
 13513  0EF2                     u4605:	
 13514  0EF2  36B6               	lsrf	??___ftdiv+2,f
 13515  0EF3  0CB5               	rrf	??___ftdiv+1,f
 13516  0EF4  0CB4               	rrf	??___ftdiv,f
 13517  0EF5  0B89               	decfsz	9,f
 13518  0EF6  2EF2               	goto	u4605
 13519  0EF7  0834               	movf	??___ftdiv,w
 13520  0EF8  00B7               	movwf	??___ftdiv+3
 13521  0EF9  0837               	movf	??___ftdiv+3,w
 13522  0EFA  06BD               	xorwf	___ftdiv@sign,f
 13523  0EFB  3080               	movlw	128
 13524  0EFC  00B4               	movwf	??___ftdiv
 13525  0EFD  0834               	movf	??___ftdiv,w
 13526  0EFE  05BD               	andwf	___ftdiv@sign,f
 13527  0EFF  17B2               	bsf	___ftdiv@f1+1,7
 13528  0F00  30FF               	movlw	255
 13529  0F01  05B1               	andwf	___ftdiv@f1,f
 13530  0F02  30FF               	movlw	255
 13531  0F03  05B2               	andwf	___ftdiv@f1+1,f
 13532  0F04  3000               	movlw	0
 13533  0F05  05B3               	andwf	___ftdiv@f1+2,f
 13534  0F06  17AF               	bsf	___ftdiv@f2+1,7
 13535  0F07  30FF               	movlw	255
 13536  0F08  05AE               	andwf	___ftdiv@f2,f
 13537  0F09  30FF               	movlw	255
 13538  0F0A  05AF               	andwf	___ftdiv@f2+1,f
 13539  0F0B  3000               	movlw	0
 13540  0F0C  05B0               	andwf	___ftdiv@f2+2,f
 13541  0F0D  3018               	movlw	24
 13542  0F0E  00B4               	movwf	??___ftdiv
 13543  0F0F  0834               	movf	??___ftdiv,w
 13544  0F10  00B8               	movwf	___ftdiv@cntr
 13545  0F11                     l5851:	
 13546  0F11  3001               	movlw	1
 13547  0F12                     u4615:	
 13548  0F12  35B9               	lslf	___ftdiv@f3,f
 13549  0F13  0DBA               	rlf	___ftdiv@f3+1,f
 13550  0F14  0DBB               	rlf	___ftdiv@f3+2,f
 13551  0F15  0B89               	decfsz	9,f
 13552  0F16  2F12               	goto	u4615
 13553  0F17  0830               	movf	___ftdiv@f2+2,w
 13554  0F18  0233               	subwf	___ftdiv@f1+2,w
 13555  0F19  1D03               	skipz
 13556  0F1A  2F21               	goto	u4625
 13557  0F1B  082F               	movf	___ftdiv@f2+1,w
 13558  0F1C  0232               	subwf	___ftdiv@f1+1,w
 13559  0F1D  1D03               	skipz
 13560  0F1E  2F21               	goto	u4625
 13561  0F1F  082E               	movf	___ftdiv@f2,w
 13562  0F20  0231               	subwf	___ftdiv@f1,w
 13563  0F21                     u4625:	
 13564  0F21  1C03               	skipc
 13565  0F22  2F2A               	goto	l5859
 13566  0F23  082E               	movf	___ftdiv@f2,w
 13567  0F24  02B1               	subwf	___ftdiv@f1,f
 13568  0F25  082F               	movf	___ftdiv@f2+1,w
 13569  0F26  3BB2               	subwfb	___ftdiv@f1+1,f
 13570  0F27  0830               	movf	___ftdiv@f2+2,w
 13571  0F28  3BB3               	subwfb	___ftdiv@f1+2,f
 13572  0F29  1439               	bsf	___ftdiv@f3,0
 13573  0F2A                     l5859:	
 13574  0F2A  3001               	movlw	1
 13575  0F2B                     u4635:	
 13576  0F2B  35B1               	lslf	___ftdiv@f1,f
 13577  0F2C  0DB2               	rlf	___ftdiv@f1+1,f
 13578  0F2D  0DB3               	rlf	___ftdiv@f1+2,f
 13579  0F2E  0B89               	decfsz	9,f
 13580  0F2F  2F2B               	goto	u4635
 13581  0F30  3001               	movlw	1
 13582  0F31  02B8               	subwf	___ftdiv@cntr,f
 13583  0F32  1D03               	btfss	3,2
 13584  0F33  2F11               	goto	l5851
 13585  0F34  0839               	movf	___ftdiv@f3,w
 13586  0F35  00A0               	movwf	___ftpack@arg
 13587  0F36  083A               	movf	___ftdiv@f3+1,w
 13588  0F37  00A1               	movwf	___ftpack@arg+1
 13589  0F38  083B               	movf	___ftdiv@f3+2,w
 13590  0F39  00A2               	movwf	___ftpack@arg+2
 13591  0F3A  083C               	movf	___ftdiv@exp,w
 13592  0F3B  00B4               	movwf	??___ftdiv
 13593  0F3C  0834               	movf	??___ftdiv,w
 13594  0F3D  00A3               	movwf	___ftpack@exp
 13595  0F3E  083D               	movf	___ftdiv@sign,w
 13596  0F3F  00B5               	movwf	??___ftdiv+1
 13597  0F40  0835               	movf	??___ftdiv+1,w
 13598  0F41  00A4               	movwf	___ftpack@sign
 13599  0F42  3189  218C         	fcall	___ftpack
 13600  0F44  0020               	movlb	0	; select bank0
 13601  0F45  0820               	movf	?___ftpack,w
 13602  0F46  00AE               	movwf	?___ftdiv
 13603  0F47  0821               	movf	?___ftpack+1,w
 13604  0F48  00AF               	movwf	?___ftdiv+1
 13605  0F49  0822               	movf	?___ftpack+2,w
 13606  0F4A  00B0               	movwf	?___ftdiv+2
 13607  0F4B  0008               	return
 13608  0F4C                     __end_of___ftdiv:	
 13609                           
 13610                           	psect	text79
 13611  0439                     __ptext79:	
 13612 ;; *************** function ___ftadd *****************
 13613 ;; Defined at:
 13614 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 13615 ;; Parameters:    Size  Location     Type
 13616 ;;  f1              3   33[BANK0 ] float 
 13617 ;;  f2              3   36[BANK0 ] float 
 13618 ;; Auto vars:     Size  Location     Type
 13619 ;;  exp1            1   45[BANK0 ] unsigned char 
 13620 ;;  exp2            1   44[BANK0 ] unsigned char 
 13621 ;;  sign            1   43[BANK0 ] unsigned char 
 13622 ;; Return value:  Size  Location     Type
 13623 ;;                  3   33[BANK0 ] float 
 13624 ;; Registers used:
 13625 ;;		wreg, status,2, status,0, pclath, cstack
 13626 ;; Tracked objects:
 13627 ;;		On entry : 0/0
 13628 ;;		On exit  : 0/0
 13629 ;;		Unchanged: 0/0
 13630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13631 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13632 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13633 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13634 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13635 ;;Total ram usage:       13 bytes
 13636 ;; Hardware stack levels used:    1
 13637 ;; Hardware stack levels required when called:    6
 13638 ;; This function calls:
 13639 ;;		___ftpack
 13640 ;; This function is called by:
 13641 ;;		_getPercentValue
 13642 ;;		_setPercentValue
 13643 ;; This function uses a non-reentrant model
 13644 ;;
 13645                           
 13646                           
 13647                           ;psect for function ___ftadd
 13648  0439                     ___ftadd:	
 13649                           
 13650                           ;incstack = 0
 13651                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 13652  0439  0020               	movlb	0	; select bank0
 13653  043A  0841               	movf	___ftadd@f1,w
 13654  043B  00C7               	movwf	??___ftadd
 13655  043C  0842               	movf	___ftadd@f1+1,w
 13656  043D  00C8               	movwf	??___ftadd+1
 13657  043E  0843               	movf	___ftadd@f1+2,w
 13658  043F  00C9               	movwf	??___ftadd+2
 13659  0440  1003               	clrc
 13660  0441  0D48               	rlf	??___ftadd+1,w
 13661  0442  0D49               	rlf	??___ftadd+2,w
 13662  0443  00CA               	movwf	??___ftadd+3
 13663  0444  084A               	movf	??___ftadd+3,w
 13664  0445  00CD               	movwf	___ftadd@exp1
 13665  0446  0844               	movf	___ftadd@f2,w
 13666  0447  00C7               	movwf	??___ftadd
 13667  0448  0845               	movf	___ftadd@f2+1,w
 13668  0449  00C8               	movwf	??___ftadd+1
 13669  044A  0846               	movf	___ftadd@f2+2,w
 13670  044B  00C9               	movwf	??___ftadd+2
 13671  044C  1003               	clrc
 13672  044D  0D48               	rlf	??___ftadd+1,w
 13673  044E  0D49               	rlf	??___ftadd+2,w
 13674  044F  00CA               	movwf	??___ftadd+3
 13675  0450  084A               	movf	??___ftadd+3,w
 13676  0451  00CC               	movwf	___ftadd@exp2
 13677  0452  084D               	movf	___ftadd@exp1,w
 13678  0453  1903               	btfsc	3,2
 13679  0454  2C61               	goto	l5761
 13680  0455  084C               	movf	___ftadd@exp2,w
 13681  0456  024D               	subwf	___ftadd@exp1,w
 13682  0457  1803               	skipnc
 13683  0458  2C68               	goto	l5765
 13684  0459  034D               	decf	___ftadd@exp1,w
 13685  045A  3AFF               	xorlw	255
 13686  045B  074C               	addwf	___ftadd@exp2,w
 13687  045C  00C7               	movwf	??___ftadd
 13688  045D  3019               	movlw	25
 13689  045E  0247               	subwf	??___ftadd,w
 13690  045F  1C03               	skipc
 13691  0460  2C68               	goto	l5765
 13692  0461                     l5761:	
 13693  0461  0844               	movf	___ftadd@f2,w
 13694  0462  00C1               	movwf	?___ftadd
 13695  0463  0845               	movf	___ftadd@f2+1,w
 13696  0464  00C2               	movwf	?___ftadd+1
 13697  0465  0846               	movf	___ftadd@f2+2,w
 13698  0466  00C3               	movwf	?___ftadd+2
 13699  0467  0008               	return
 13700  0468                     l5765:	
 13701  0468  084C               	movf	___ftadd@exp2,w
 13702  0469  1903               	btfsc	3,2
 13703  046A  0008               	return
 13704  046B  084D               	movf	___ftadd@exp1,w
 13705  046C  024C               	subwf	___ftadd@exp2,w
 13706  046D  1803               	skipnc
 13707  046E  2C77               	goto	l5771
 13708  046F  034C               	decf	___ftadd@exp2,w
 13709  0470  3AFF               	xorlw	255
 13710  0471  074D               	addwf	___ftadd@exp1,w
 13711  0472  00C7               	movwf	??___ftadd
 13712  0473  3019               	movlw	25
 13713  0474  0247               	subwf	??___ftadd,w
 13714  0475  1803               	btfsc	3,0
 13715  0476  0008               	return
 13716  0477                     l5771:	
 13717  0477  3006               	movlw	6
 13718  0478  00C7               	movwf	??___ftadd
 13719  0479  0847               	movf	??___ftadd,w
 13720  047A  00CB               	movwf	___ftadd@sign
 13721  047B  1BC3               	btfsc	___ftadd@f1+2,7
 13722  047C  17CB               	bsf	___ftadd@sign,7
 13723  047D  1BC6               	btfsc	___ftadd@f2+2,7
 13724  047E  174B               	bsf	___ftadd@sign,6
 13725  047F  17C2               	bsf	___ftadd@f1+1,7
 13726  0480  30FF               	movlw	255
 13727  0481  05C1               	andwf	___ftadd@f1,f
 13728  0482  30FF               	movlw	255
 13729  0483  05C2               	andwf	___ftadd@f1+1,f
 13730  0484  3000               	movlw	0
 13731  0485  05C3               	andwf	___ftadd@f1+2,f
 13732  0486  17C5               	bsf	___ftadd@f2+1,7
 13733  0487  30FF               	movlw	255
 13734  0488  05C4               	andwf	___ftadd@f2,f
 13735  0489  30FF               	movlw	255
 13736  048A  05C5               	andwf	___ftadd@f2+1,f
 13737  048B  3000               	movlw	0
 13738  048C  05C6               	andwf	___ftadd@f2+2,f
 13739  048D  084C               	movf	___ftadd@exp2,w
 13740  048E  024D               	subwf	___ftadd@exp1,w
 13741  048F  1803               	skipnc
 13742  0490  2CB3               	goto	l5793
 13743  0491                     l5783:	
 13744  0491  3001               	movlw	1
 13745  0492                     u4435:	
 13746  0492  35C4               	lslf	___ftadd@f2,f
 13747  0493  0DC5               	rlf	___ftadd@f2+1,f
 13748  0494  0DC6               	rlf	___ftadd@f2+2,f
 13749  0495  0B89               	decfsz	9,f
 13750  0496  2C92               	goto	u4435
 13751  0497  3001               	movlw	1
 13752  0498  02CC               	subwf	___ftadd@exp2,f
 13753  0499  084C               	movf	___ftadd@exp2,w
 13754  049A  064D               	xorwf	___ftadd@exp1,w
 13755  049B  1903               	skipnz
 13756  049C  2CAE               	goto	l5791
 13757  049D  3001               	movlw	1
 13758  049E  02CB               	subwf	___ftadd@sign,f
 13759  049F  084B               	movf	___ftadd@sign,w
 13760  04A0  3907               	andlw	7
 13761  04A1  1903               	btfsc	3,2
 13762  04A2  2CAE               	goto	l5791
 13763  04A3  2C91               	goto	l5783
 13764  04A4                     l5789:	
 13765  04A4  3001               	movlw	1
 13766  04A5                     u4465:	
 13767  04A5  36C3               	lsrf	___ftadd@f1+2,f
 13768  04A6  0CC2               	rrf	___ftadd@f1+1,f
 13769  04A7  0CC1               	rrf	___ftadd@f1,f
 13770  04A8  0B89               	decfsz	9,f
 13771  04A9  2CA5               	goto	u4465
 13772  04AA  3001               	movlw	1
 13773  04AB  00C7               	movwf	??___ftadd
 13774  04AC  0847               	movf	??___ftadd,w
 13775  04AD  07CD               	addwf	___ftadd@exp1,f
 13776  04AE                     l5791:	
 13777  04AE  084D               	movf	___ftadd@exp1,w
 13778  04AF  064C               	xorwf	___ftadd@exp2,w
 13779  04B0  1903               	btfsc	3,2
 13780  04B1  2CD8               	goto	l2922
 13781  04B2  2CA4               	goto	l5789
 13782  04B3                     l5793:	
 13783  04B3  084D               	movf	___ftadd@exp1,w
 13784  04B4  024C               	subwf	___ftadd@exp2,w
 13785  04B5  1803               	skipnc
 13786  04B6  2CD8               	goto	l2922
 13787  04B7                     l5795:	
 13788  04B7  3001               	movlw	1
 13789  04B8                     u4495:	
 13790  04B8  35C1               	lslf	___ftadd@f1,f
 13791  04B9  0DC2               	rlf	___ftadd@f1+1,f
 13792  04BA  0DC3               	rlf	___ftadd@f1+2,f
 13793  04BB  0B89               	decfsz	9,f
 13794  04BC  2CB8               	goto	u4495
 13795  04BD  3001               	movlw	1
 13796  04BE  02CD               	subwf	___ftadd@exp1,f
 13797  04BF  084C               	movf	___ftadd@exp2,w
 13798  04C0  064D               	xorwf	___ftadd@exp1,w
 13799  04C1  1903               	skipnz
 13800  04C2  2CD4               	goto	l5803
 13801  04C3  3001               	movlw	1
 13802  04C4  02CB               	subwf	___ftadd@sign,f
 13803  04C5  084B               	movf	___ftadd@sign,w
 13804  04C6  3907               	andlw	7
 13805  04C7  1903               	btfsc	3,2
 13806  04C8  2CD4               	goto	l5803
 13807  04C9  2CB7               	goto	l5795
 13808  04CA                     l5801:	
 13809  04CA  3001               	movlw	1
 13810  04CB                     u4525:	
 13811  04CB  36C6               	lsrf	___ftadd@f2+2,f
 13812  04CC  0CC5               	rrf	___ftadd@f2+1,f
 13813  04CD  0CC4               	rrf	___ftadd@f2,f
 13814  04CE  0B89               	decfsz	9,f
 13815  04CF  2CCB               	goto	u4525
 13816  04D0  3001               	movlw	1
 13817  04D1  00C7               	movwf	??___ftadd
 13818  04D2  0847               	movf	??___ftadd,w
 13819  04D3  07CC               	addwf	___ftadd@exp2,f
 13820  04D4                     l5803:	
 13821  04D4  084D               	movf	___ftadd@exp1,w
 13822  04D5  064C               	xorwf	___ftadd@exp2,w
 13823  04D6  1D03               	skipz
 13824  04D7  2CCA               	goto	l5801
 13825  04D8                     l2922:	
 13826  04D8  1FCB               	btfss	___ftadd@sign,7
 13827  04D9  2CEA               	goto	l5807
 13828  04DA  30FF               	movlw	255
 13829  04DB  06C1               	xorwf	___ftadd@f1,f
 13830  04DC  30FF               	movlw	255
 13831  04DD  06C2               	xorwf	___ftadd@f1+1,f
 13832  04DE  30FF               	movlw	255
 13833  04DF  06C3               	xorwf	___ftadd@f1+2,f
 13834  04E0  3001               	movlw	1
 13835  04E1  07C1               	addwf	___ftadd@f1,f
 13836  04E2  3000               	movlw	0
 13837  04E3  1803               	skipnc
 13838  04E4  3001               	movlw	1
 13839  04E5  07C2               	addwf	___ftadd@f1+1,f
 13840  04E6  3000               	movlw	0
 13841  04E7  1803               	skipnc
 13842  04E8  3001               	movlw	1
 13843  04E9  07C3               	addwf	___ftadd@f1+2,f
 13844  04EA                     l5807:	
 13845  04EA  1F4B               	btfss	___ftadd@sign,6
 13846  04EB  2CFC               	goto	l5811
 13847  04EC  30FF               	movlw	255
 13848  04ED  06C4               	xorwf	___ftadd@f2,f
 13849  04EE  30FF               	movlw	255
 13850  04EF  06C5               	xorwf	___ftadd@f2+1,f
 13851  04F0  30FF               	movlw	255
 13852  04F1  06C6               	xorwf	___ftadd@f2+2,f
 13853  04F2  3001               	movlw	1
 13854  04F3  07C4               	addwf	___ftadd@f2,f
 13855  04F4  3000               	movlw	0
 13856  04F5  1803               	skipnc
 13857  04F6  3001               	movlw	1
 13858  04F7  07C5               	addwf	___ftadd@f2+1,f
 13859  04F8  3000               	movlw	0
 13860  04F9  1803               	skipnc
 13861  04FA  3001               	movlw	1
 13862  04FB  07C6               	addwf	___ftadd@f2+2,f
 13863  04FC                     l5811:	
 13864  04FC  01CB               	clrf	___ftadd@sign
 13865  04FD  0841               	movf	___ftadd@f1,w
 13866  04FE  07C4               	addwf	___ftadd@f2,f
 13867  04FF  0842               	movf	___ftadd@f1+1,w
 13868  0500  3DC5               	addwfc	___ftadd@f2+1,f
 13869  0501  0843               	movf	___ftadd@f1+2,w
 13870  0502  3DC6               	addwfc	___ftadd@f2+2,f
 13871  0503  1FC6               	btfss	___ftadd@f2+2,7
 13872  0504  2D17               	goto	l5821
 13873  0505  30FF               	movlw	255
 13874  0506  06C4               	xorwf	___ftadd@f2,f
 13875  0507  30FF               	movlw	255
 13876  0508  06C5               	xorwf	___ftadd@f2+1,f
 13877  0509  30FF               	movlw	255
 13878  050A  06C6               	xorwf	___ftadd@f2+2,f
 13879  050B  3001               	movlw	1
 13880  050C  07C4               	addwf	___ftadd@f2,f
 13881  050D  3000               	movlw	0
 13882  050E  1803               	skipnc
 13883  050F  3001               	movlw	1
 13884  0510  07C5               	addwf	___ftadd@f2+1,f
 13885  0511  3000               	movlw	0
 13886  0512  1803               	skipnc
 13887  0513  3001               	movlw	1
 13888  0514  07C6               	addwf	___ftadd@f2+2,f
 13889  0515  01CB               	clrf	___ftadd@sign
 13890  0516  0ACB               	incf	___ftadd@sign,f
 13891  0517                     l5821:	
 13892  0517  0844               	movf	___ftadd@f2,w
 13893  0518  00A0               	movwf	___ftpack@arg
 13894  0519  0845               	movf	___ftadd@f2+1,w
 13895  051A  00A1               	movwf	___ftpack@arg+1
 13896  051B  0846               	movf	___ftadd@f2+2,w
 13897  051C  00A2               	movwf	___ftpack@arg+2
 13898  051D  084D               	movf	___ftadd@exp1,w
 13899  051E  00C7               	movwf	??___ftadd
 13900  051F  0847               	movf	??___ftadd,w
 13901  0520  00A3               	movwf	___ftpack@exp
 13902  0521  084B               	movf	___ftadd@sign,w
 13903  0522  00C8               	movwf	??___ftadd+1
 13904  0523  0848               	movf	??___ftadd+1,w
 13905  0524  00A4               	movwf	___ftpack@sign
 13906  0525  3189  218C         	fcall	___ftpack
 13907  0527  0020               	movlb	0	; select bank0
 13908  0528  0820               	movf	?___ftpack,w
 13909  0529  00C1               	movwf	?___ftadd
 13910  052A  0821               	movf	?___ftpack+1,w
 13911  052B  00C2               	movwf	?___ftadd+1
 13912  052C  0822               	movf	?___ftpack+2,w
 13913  052D  00C3               	movwf	?___ftadd+2
 13914  052E  0008               	return
 13915  052F                     __end_of___ftadd:	
 13916                           
 13917                           	psect	text80
 13918  1F74                     __ptext80:	
 13919 ;; *************** function ___awtoft *****************
 13920 ;; Defined at:
 13921 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 13922 ;; Parameters:    Size  Location     Type
 13923 ;;  c               2    8[BANK0 ] int 
 13924 ;; Auto vars:     Size  Location     Type
 13925 ;;  sign            1   13[BANK0 ] unsigned char 
 13926 ;; Return value:  Size  Location     Type
 13927 ;;                  3    8[BANK0 ] float 
 13928 ;; Registers used:
 13929 ;;		wreg, status,2, status,0, pclath, cstack
 13930 ;; Tracked objects:
 13931 ;;		On entry : 0/0
 13932 ;;		On exit  : 0/0
 13933 ;;		Unchanged: 0/0
 13934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13935 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13936 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13937 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13938 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13939 ;;Total ram usage:        6 bytes
 13940 ;; Hardware stack levels used:    1
 13941 ;; Hardware stack levels required when called:    6
 13942 ;; This function calls:
 13943 ;;		___ftpack
 13944 ;; This function is called by:
 13945 ;;		_getPercentValue
 13946 ;;		_setPercentValue
 13947 ;; This function uses a non-reentrant model
 13948 ;;
 13949                           
 13950                           
 13951                           ;psect for function ___awtoft
 13952  1F74                     ___awtoft:	
 13953                           
 13954                           ;incstack = 0
 13955                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13956  1F74  0020               	movlb	0	; select bank0
 13957  1F75  01AD               	clrf	___awtoft@sign
 13958  1F76  1FA9               	btfss	___awtoft@c+1,7
 13959  1F77  2F7F               	goto	l5749
 13960  1F78  09A8               	comf	___awtoft@c,f
 13961  1F79  09A9               	comf	___awtoft@c+1,f
 13962  1F7A  0AA8               	incf	___awtoft@c,f
 13963  1F7B  1903               	skipnz
 13964  1F7C  0AA9               	incf	___awtoft@c+1,f
 13965  1F7D  01AD               	clrf	___awtoft@sign
 13966  1F7E  0AAD               	incf	___awtoft@sign,f
 13967  1F7F                     l5749:	
 13968  1F7F  0828               	movf	___awtoft@c,w
 13969  1F80  00A0               	movwf	___ftpack@arg
 13970  1F81  0829               	movf	___awtoft@c+1,w
 13971  1F82  00A1               	movwf	___ftpack@arg+1
 13972  1F83  01A2               	clrf	___ftpack@arg+2
 13973  1F84  308E               	movlw	142
 13974  1F85  00AB               	movwf	??___awtoft
 13975  1F86  082B               	movf	??___awtoft,w
 13976  1F87  00A3               	movwf	___ftpack@exp
 13977  1F88  082D               	movf	___awtoft@sign,w
 13978  1F89  00AC               	movwf	??___awtoft+1
 13979  1F8A  082C               	movf	??___awtoft+1,w
 13980  1F8B  00A4               	movwf	___ftpack@sign
 13981  1F8C  3189  218C         	fcall	___ftpack
 13982  1F8E  0020               	movlb	0	; select bank0
 13983  1F8F  0820               	movf	?___ftpack,w
 13984  1F90  00A8               	movwf	?___awtoft
 13985  1F91  0821               	movf	?___ftpack+1,w
 13986  1F92  00A9               	movwf	?___awtoft+1
 13987  1F93  0822               	movf	?___ftpack+2,w
 13988  1F94  00AA               	movwf	?___awtoft+2
 13989  1F95  0008               	return
 13990  1F96                     __end_of___awtoft:	
 13991                           
 13992                           	psect	text81
 13993  098C                     __ptext81:	
 13994 ;; *************** function ___ftpack *****************
 13995 ;; Defined at:
 13996 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 13997 ;; Parameters:    Size  Location     Type
 13998 ;;  arg             3    0[BANK0 ] unsigned um
 13999 ;;  exp             1    3[BANK0 ] unsigned char 
 14000 ;;  sign            1    4[BANK0 ] unsigned char 
 14001 ;; Auto vars:     Size  Location     Type
 14002 ;;		None
 14003 ;; Return value:  Size  Location     Type
 14004 ;;                  3    0[BANK0 ] float 
 14005 ;; Registers used:
 14006 ;;		wreg, status,2, status,0
 14007 ;; Tracked objects:
 14008 ;;		On entry : 0/0
 14009 ;;		On exit  : 0/0
 14010 ;;		Unchanged: 0/0
 14011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14012 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14014 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14015 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14016 ;;Total ram usage:        8 bytes
 14017 ;; Hardware stack levels used:    1
 14018 ;; Hardware stack levels required when called:    5
 14019 ;; This function calls:
 14020 ;;		Nothing
 14021 ;; This function is called by:
 14022 ;;		___awtoft
 14023 ;;		___ftadd
 14024 ;;		___ftdiv
 14025 ;;		___ftmul
 14026 ;; This function uses a non-reentrant model
 14027 ;;
 14028                           
 14029                           
 14030                           ;psect for function ___ftpack
 14031  098C                     ___ftpack:	
 14032                           
 14033                           ;incstack = 0
 14034                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14035  098C  0020               	movlb	0	; select bank0
 14036  098D  0823               	movf	___ftpack@exp,w
 14037  098E  1903               	btfsc	3,2
 14038  098F  2995               	goto	l5699
 14039  0990  0822               	movf	___ftpack@arg+2,w
 14040  0991  0421               	iorwf	___ftpack@arg+1,w
 14041  0992  0420               	iorwf	___ftpack@arg,w
 14042  0993  1D03               	skipz
 14043  0994  29A6               	goto	l5705
 14044  0995                     l5699:	
 14045  0995  3000               	movlw	0
 14046  0996  00A0               	movwf	?___ftpack
 14047  0997  3000               	movlw	0
 14048  0998  00A1               	movwf	?___ftpack+1
 14049  0999  3000               	movlw	0
 14050  099A  00A2               	movwf	?___ftpack+2
 14051  099B  0008               	return
 14052  099C                     l5703:	
 14053  099C  3001               	movlw	1
 14054  099D  00A5               	movwf	??___ftpack
 14055  099E  0825               	movf	??___ftpack,w
 14056  099F  07A3               	addwf	___ftpack@exp,f
 14057  09A0  3001               	movlw	1
 14058  09A1                     u4225:	
 14059  09A1  36A2               	lsrf	___ftpack@arg+2,f
 14060  09A2  0CA1               	rrf	___ftpack@arg+1,f
 14061  09A3  0CA0               	rrf	___ftpack@arg,f
 14062  09A4  0B89               	decfsz	9,f
 14063  09A5  29A1               	goto	u4225
 14064  09A6                     l5705:	
 14065  09A6  30FE               	movlw	254
 14066  09A7  0522               	andwf	___ftpack@arg+2,w
 14067  09A8  1903               	btfsc	3,2
 14068  09A9  29BF               	goto	l2893
 14069  09AA  299C               	goto	l5703
 14070  09AB                     l5707:	
 14071  09AB  3001               	movlw	1
 14072  09AC  00A5               	movwf	??___ftpack
 14073  09AD  0825               	movf	??___ftpack,w
 14074  09AE  07A3               	addwf	___ftpack@exp,f
 14075  09AF  3001               	movlw	1
 14076  09B0  07A0               	addwf	___ftpack@arg,f
 14077  09B1  3000               	movlw	0
 14078  09B2  1803               	skipnc
 14079  09B3  3001               	movlw	1
 14080  09B4  07A1               	addwf	___ftpack@arg+1,f
 14081  09B5  3000               	movlw	0
 14082  09B6  1803               	skipnc
 14083  09B7  3001               	movlw	1
 14084  09B8  07A2               	addwf	___ftpack@arg+2,f
 14085  09B9  3001               	movlw	1
 14086  09BA                     u4245:	
 14087  09BA  36A2               	lsrf	___ftpack@arg+2,f
 14088  09BB  0CA1               	rrf	___ftpack@arg+1,f
 14089  09BC  0CA0               	rrf	___ftpack@arg,f
 14090  09BD  0B89               	decfsz	9,f
 14091  09BE  29BA               	goto	u4245
 14092  09BF                     l2893:	
 14093  09BF  30FF               	movlw	255
 14094  09C0  0522               	andwf	___ftpack@arg+2,w
 14095  09C1  1903               	btfsc	3,2
 14096  09C2  29CC               	goto	l5715
 14097  09C3  29AB               	goto	l5707
 14098  09C4                     l5713:	
 14099  09C4  3001               	movlw	1
 14100  09C5  02A3               	subwf	___ftpack@exp,f
 14101  09C6  3001               	movlw	1
 14102  09C7                     u4265:	
 14103  09C7  35A0               	lslf	___ftpack@arg,f
 14104  09C8  0DA1               	rlf	___ftpack@arg+1,f
 14105  09C9  0DA2               	rlf	___ftpack@arg+2,f
 14106  09CA  0B89               	decfsz	9,f
 14107  09CB  29C7               	goto	u4265
 14108  09CC                     l5715:	
 14109  09CC  1FA1               	btfss	___ftpack@arg+1,7
 14110  09CD  29C4               	goto	l5713
 14111  09CE  1823               	btfsc	___ftpack@exp,0
 14112  09CF  29D6               	goto	l2899
 14113  09D0  30FF               	movlw	255
 14114  09D1  05A0               	andwf	___ftpack@arg,f
 14115  09D2  307F               	movlw	127
 14116  09D3  05A1               	andwf	___ftpack@arg+1,f
 14117  09D4  30FF               	movlw	255
 14118  09D5  05A2               	andwf	___ftpack@arg+2,f
 14119  09D6                     l2899:	
 14120  09D6  1003               	clrc
 14121  09D7  0CA3               	rrf	___ftpack@exp,f
 14122  09D8  0823               	movf	___ftpack@exp,w
 14123  09D9  00A5               	movwf	??___ftpack
 14124  09DA  01A6               	clrf	??___ftpack+1
 14125  09DB  01A7               	clrf	??___ftpack+2
 14126  09DC  3010               	movlw	16
 14127  09DD                     u4295:	
 14128  09DD  35A5               	lslf	??___ftpack,f
 14129  09DE  0DA6               	rlf	??___ftpack+1,f
 14130  09DF  0DA7               	rlf	??___ftpack+2,f
 14131  09E0  0B89               	decfsz	9,f
 14132  09E1  29DD               	goto	u4295
 14133  09E2  0825               	movf	??___ftpack,w
 14134  09E3  04A0               	iorwf	___ftpack@arg,f
 14135  09E4  0826               	movf	??___ftpack+1,w
 14136  09E5  04A1               	iorwf	___ftpack@arg+1,f
 14137  09E6  0827               	movf	??___ftpack+2,w
 14138  09E7  04A2               	iorwf	___ftpack@arg+2,f
 14139  09E8  0824               	movf	___ftpack@sign,w
 14140  09E9  1903               	btfsc	3,2
 14141  09EA  0008               	return
 14142  09EB  17A2               	bsf	___ftpack@arg+2,7
 14143  09EC  0008               	return
 14144  09ED                     __end_of___ftpack:	
 14145                           
 14146                           	psect	text82
 14147  1545                     __ptext82:	
 14148 ;; *************** function _setLED *****************
 14149 ;; Defined at:
 14150 ;;		line 73 in file "../src/LED_B1.c"
 14151 ;; Parameters:    Size  Location     Type
 14152 ;;  led             1    wreg     unsigned char 
 14153 ;;  command         1    2[BANK0 ] unsigned char 
 14154 ;; Auto vars:     Size  Location     Type
 14155 ;;  led             1    3[BANK0 ] unsigned char 
 14156 ;; Return value:  Size  Location     Type
 14157 ;;		None               void
 14158 ;; Registers used:
 14159 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14160 ;; Tracked objects:
 14161 ;;		On entry : 0/0
 14162 ;;		On exit  : 0/0
 14163 ;;		Unchanged: 0/0
 14164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14165 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14168 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14169 ;;Total ram usage:        2 bytes
 14170 ;; Hardware stack levels used:    1
 14171 ;; Hardware stack levels required when called:    6
 14172 ;; This function calls:
 14173 ;;		_LedPointSelect
 14174 ;; This function is called by:
 14175 ;;		_setDimmerLights
 14176 ;;		_setLED_Initialization
 14177 ;;		_setSw_Initialization
 14178 ;;		_setMain_Exception
 14179 ;; This function uses a non-reentrant model
 14180 ;;
 14181                           
 14182                           
 14183                           ;psect for function _setLED
 14184  1545                     _setLED:	
 14185                           
 14186                           ;incstack = 0
 14187                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14188                           ;setLED@led stored from wreg
 14189  1545  0020               	movlb	0	; select bank0
 14190  1546  00A3               	movwf	setLED@led
 14191                           
 14192                           ;LED_B1.c: 74: LedPointSelect(led);
 14193  1547  0823               	movf	setLED@led,w
 14194  1548  319E  2681  3195   	fcall	_LedPointSelect
 14195                           
 14196                           ;LED_B1.c: 75: if (command == 0) {
 14197  154B  0020               	movlb	0	; select bank0
 14198  154C  08A2               	movf	setLED@command,f
 14199  154D  1D03               	skipz
 14200  154E  2D5C               	goto	l6427
 14201                           
 14202                           ;LED_B1.c: 77: if (led == 1) {
 14203  154F  0823               	movf	setLED@led,w
 14204  1550  3A01               	xorlw	1
 14205  1551  1D03               	skipz
 14206  1552  2D54               	goto	l6419
 14207                           
 14208                           ;LED_B1.c: 81: RA3 = 1;
 14209  1553  158C               	bsf	12,3	;volatile
 14210  1554                     l6419:	
 14211                           
 14212                           ;LED_B1.c: 83: }
 14213                           ;LED_B1.c: 86: if (led == 2) {
 14214  1554  0823               	movf	setLED@led,w
 14215  1555  3A02               	xorlw	2
 14216  1556  1903               	btfsc	3,2
 14217                           
 14218                           ;LED_B1.c: 90: RC7 = 1;
 14219  1557  178E               	bsf	14,7	;volatile
 14220                           
 14221                           ;LED_B1.c: 92: }
 14222                           ;LED_B1.c: 104: if (led == 99) {
 14223  1558  0823               	movf	setLED@led,w
 14224  1559  3A63               	xorlw	99
 14225  155A  1903               	btfsc	3,2
 14226                           
 14227                           ;LED_B1.c: 108: RB5 = 1;
 14228  155B  168D               	bsf	13,5	;volatile
 14229  155C                     l6427:	
 14230                           
 14231                           ;LED_B1.c: 110: }
 14232                           ;LED_B1.c: 112: } if (command == 1) {
 14233  155C  0822               	movf	setLED@command,w
 14234  155D  3A01               	xorlw	1
 14235  155E  1D03               	skipz
 14236  155F  2D6D               	goto	l6441
 14237                           
 14238                           ;LED_B1.c: 114: if (led == 1) {
 14239  1560  0823               	movf	setLED@led,w
 14240  1561  3A01               	xorlw	1
 14241  1562  1D03               	skipz
 14242  1563  2D65               	goto	l6433
 14243                           
 14244                           ;LED_B1.c: 118: RA3 = 0;
 14245  1564  118C               	bcf	12,3	;volatile
 14246  1565                     l6433:	
 14247                           
 14248                           ;LED_B1.c: 120: }
 14249                           ;LED_B1.c: 123: if (led == 2) {
 14250  1565  0823               	movf	setLED@led,w
 14251  1566  3A02               	xorlw	2
 14252  1567  1903               	btfsc	3,2
 14253                           
 14254                           ;LED_B1.c: 127: RC7 = 0;
 14255  1568  138E               	bcf	14,7	;volatile
 14256                           
 14257                           ;LED_B1.c: 129: }
 14258                           ;LED_B1.c: 141: if (led == 99) {
 14259  1569  0823               	movf	setLED@led,w
 14260  156A  3A63               	xorlw	99
 14261  156B  1903               	btfsc	3,2
 14262                           
 14263                           ;LED_B1.c: 145: RB5 = 0;
 14264  156C  128D               	bcf	13,5	;volatile
 14265  156D                     l6441:	
 14266                           
 14267                           ;LED_B1.c: 147: }
 14268                           ;LED_B1.c: 149: } if (command == 10) {
 14269  156D  0822               	movf	setLED@command,w
 14270  156E  3A0A               	xorlw	10
 14271  156F  1D03               	skipz
 14272  1570  2D8B               	goto	l6457
 14273                           
 14274                           ;LED_B1.c: 150: LED->GO = 0;
 14275  1571  087A               	movf	_LED,w
 14276  1572  0086               	movwf	6
 14277  1573  3001               	movlw	1	; select bank2/3
 14278  1574  0087               	movwf	7
 14279  1575  1081               	bcf	1,1
 14280                           
 14281                           ;LED_B1.c: 151: LED->Time = 0;
 14282  1576  0A7A               	incf	_LED,w
 14283  1577  0086               	movwf	6
 14284  1578  3001               	movlw	1	; select bank2/3
 14285  1579  0087               	movwf	7
 14286  157A  3000               	movlw	0
 14287  157B  3FC0               	movwi [0]fsr1
 14288  157C  3FC1               	movwi [1]fsr1
 14289                           
 14290                           ;LED_B1.c: 153: if (led == 1) {
 14291  157D  0823               	movf	setLED@led,w
 14292  157E  3A01               	xorlw	1
 14293  157F  1D03               	skipz
 14294  1580  2D83               	goto	l6449
 14295                           
 14296                           ;LED_B1.c: 157: RA3 = 1;
 14297  1581  158C               	bsf	12,3	;volatile
 14298                           
 14299                           ;LED_B1.c: 159: }
 14300  1582  2D87               	goto	l6453
 14301  1583                     l6449:	
 14302                           
 14303                           ;LED_B1.c: 162: else if (led == 2) {
 14304  1583  0823               	movf	setLED@led,w
 14305  1584  3A02               	xorlw	2
 14306  1585  1903               	btfsc	3,2
 14307                           
 14308                           ;LED_B1.c: 166: RC7 = 1;
 14309  1586  178E               	bsf	14,7	;volatile
 14310  1587                     l6453:	
 14311                           
 14312                           ;LED_B1.c: 168: }
 14313                           ;LED_B1.c: 180: if (led == 99) {
 14314  1587  0823               	movf	setLED@led,w
 14315  1588  3A63               	xorlw	99
 14316  1589  1903               	btfsc	3,2
 14317                           
 14318                           ;LED_B1.c: 184: RB5 = 1;
 14319  158A  168D               	bsf	13,5	;volatile
 14320  158B                     l6457:	
 14321                           
 14322                           ;LED_B1.c: 186: }
 14323                           ;LED_B1.c: 188: }
 14324                           ;LED_B1.c: 189: if (command == 11) {
 14325  158B  0822               	movf	setLED@command,w
 14326  158C  3A0B               	xorlw	11
 14327  158D  1D03               	skipz
 14328  158E  0008               	return
 14329                           
 14330                           ;LED_B1.c: 190: LED->GO = 1;
 14331  158F  087A               	movf	_LED,w
 14332  1590  0086               	movwf	6
 14333  1591  3001               	movlw	1	; select bank2/3
 14334  1592  0087               	movwf	7
 14335  1593  1481               	bsf	1,1
 14336  1594  0008               	return
 14337  1595                     __end_of_setLED:	
 14338                           
 14339                           	psect	text83
 14340  1E81                     __ptext83:	
 14341 ;; *************** function _LedPointSelect *****************
 14342 ;; Defined at:
 14343 ;;		line 7 in file "../src/LED_B1.c"
 14344 ;; Parameters:    Size  Location     Type
 14345 ;;  led             1    wreg     unsigned char 
 14346 ;; Auto vars:     Size  Location     Type
 14347 ;;  led             1    1[BANK0 ] unsigned char 
 14348 ;; Return value:  Size  Location     Type
 14349 ;;		None               void
 14350 ;; Registers used:
 14351 ;;		wreg
 14352 ;; Tracked objects:
 14353 ;;		On entry : 0/0
 14354 ;;		On exit  : 0/0
 14355 ;;		Unchanged: 0/0
 14356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14358 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14359 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14360 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14361 ;;Total ram usage:        2 bytes
 14362 ;; Hardware stack levels used:    1
 14363 ;; Hardware stack levels required when called:    5
 14364 ;; This function calls:
 14365 ;;		Nothing
 14366 ;; This function is called by:
 14367 ;;		_setLED_Initialization
 14368 ;;		_setLED
 14369 ;;		_setLED_Main
 14370 ;; This function uses a non-reentrant model
 14371 ;;
 14372                           
 14373                           
 14374                           ;psect for function _LedPointSelect
 14375  1E81                     _LedPointSelect:	
 14376                           
 14377                           ;incstack = 0
 14378                           ; Regs used in _LedPointSelect: [wreg]
 14379                           ;LedPointSelect@led stored from wreg
 14380  1E81  0020               	movlb	0	; select bank0
 14381  1E82  00A1               	movwf	LedPointSelect@led
 14382                           
 14383                           ;LED_B1.c: 9: if (led == 1) {
 14384  1E83  0821               	movf	LedPointSelect@led,w
 14385  1E84  3A01               	xorlw	1
 14386  1E85  1D03               	skipz
 14387  1E86  2E8B               	goto	l998
 14388                           
 14389                           ;LED_B1.c: 10: LED = &VarLED1;
 14390  1E87  3062               	movlw	_VarLED1& (0+255)
 14391  1E88  00A0               	movwf	??_LedPointSelect
 14392  1E89  0820               	movf	??_LedPointSelect,w
 14393  1E8A  00FA               	movwf	_LED
 14394  1E8B                     l998:	
 14395                           
 14396                           ;LED_B1.c: 11: }
 14397                           ;LED_B1.c: 14: if (led == 2) {
 14398  1E8B  0821               	movf	LedPointSelect@led,w
 14399  1E8C  3A02               	xorlw	2
 14400  1E8D  1D03               	skipz
 14401  1E8E  2E93               	goto	l999
 14402                           
 14403                           ;LED_B1.c: 15: LED = &VarLED2;
 14404  1E8F  3066               	movlw	_VarLED2& (0+255)
 14405  1E90  00A0               	movwf	??_LedPointSelect
 14406  1E91  0820               	movf	??_LedPointSelect,w
 14407  1E92  00FA               	movwf	_LED
 14408  1E93                     l999:	
 14409                           
 14410                           ;LED_B1.c: 16: }
 14411                           ;LED_B1.c: 24: if (led == 99) {
 14412  1E93  0821               	movf	LedPointSelect@led,w
 14413  1E94  3A63               	xorlw	99
 14414  1E95  1D03               	skipz
 14415  1E96  0008               	return
 14416                           
 14417                           ;LED_B1.c: 25: LED = &VarErrLED;
 14418  1E97  305E               	movlw	_VarErrLED& (0+255)
 14419  1E98  00A0               	movwf	??_LedPointSelect
 14420  1E99  0820               	movf	??_LedPointSelect,w
 14421  1E9A  00FA               	movwf	_LED
 14422  1E9B  0008               	return
 14423  1E9C                     __end_of_LedPointSelect:	
 14424                           
 14425                           	psect	text84
 14426  1DC4                     __ptext84:	
 14427 ;; *************** function _setDimmerLights_Line *****************
 14428 ;; Defined at:
 14429 ;;		line 682 in file "../src/Dimmer_B1.c"
 14430 ;; Parameters:    Size  Location     Type
 14431 ;;  lights          1    wreg     unsigned char 
 14432 ;; Auto vars:     Size  Location     Type
 14433 ;;  lights          1    0[BANK0 ] unsigned char 
 14434 ;; Return value:  Size  Location     Type
 14435 ;;		None               void
 14436 ;; Registers used:
 14437 ;;		wreg
 14438 ;; Tracked objects:
 14439 ;;		On entry : 0/0
 14440 ;;		On exit  : 0/0
 14441 ;;		Unchanged: 0/0
 14442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14444 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14446 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14447 ;;Total ram usage:        1 bytes
 14448 ;; Hardware stack levels used:    1
 14449 ;; Hardware stack levels required when called:    5
 14450 ;; This function calls:
 14451 ;;		Nothing
 14452 ;; This function is called by:
 14453 ;;		_setDimmerLights
 14454 ;; This function uses a non-reentrant model
 14455 ;;
 14456                           
 14457                           
 14458                           ;psect for function _setDimmerLights_Line
 14459  1DC4                     _setDimmerLights_Line:	
 14460                           
 14461                           ;incstack = 0
 14462                           ; Regs used in _setDimmerLights_Line: [wreg]
 14463                           ;setDimmerLights_Line@lights stored from wreg
 14464  1DC4  0020               	movlb	0	; select bank0
 14465  1DC5  00A0               	movwf	setDimmerLights_Line@lights
 14466                           
 14467                           ;Dimmer_B1.c: 684: DimmerLights1.Line = 0;
 14468  1DC6  0023               	movlb	3	; select bank3
 14469  1DC7  1047               	bcf	(_DimmerLights1^(0+384)+9),0
 14470                           
 14471                           ;Dimmer_B1.c: 687: DimmerLights2.Line = 0;
 14472  1DC8  1056               	bcf	(_DimmerLights2^(0+384)+9),0
 14473                           
 14474                           ;Dimmer_B1.c: 693: if (lights == 1) {
 14475  1DC9  0020               	movlb	0	; select bank0
 14476  1DCA  0820               	movf	setDimmerLights_Line@lights,w
 14477  1DCB  3A01               	xorlw	1
 14478  1DCC  1D03               	skipz
 14479  1DCD  2DD1               	goto	l6467
 14480                           
 14481                           ;Dimmer_B1.c: 694: DimmerLights1.Line = 1;
 14482  1DCE  0023               	movlb	3	; select bank3
 14483  1DCF  1447               	bsf	(_DimmerLights1^(0+384)+9),0
 14484                           
 14485                           ;Dimmer_B1.c: 695: }
 14486  1DD0  0008               	return
 14487  1DD1                     l6467:	
 14488                           
 14489                           ;Dimmer_B1.c: 698: else if (lights == 2) {
 14490  1DD1  0020               	movlb	0	; select bank0
 14491  1DD2  0820               	movf	setDimmerLights_Line@lights,w
 14492  1DD3  3A02               	xorlw	2
 14493  1DD4  1D03               	skipz
 14494  1DD5  0008               	return
 14495                           
 14496                           ;Dimmer_B1.c: 699: DimmerLights2.Line = 1;
 14497  1DD6  0023               	movlb	3	; select bank3
 14498  1DD7  1456               	bsf	(_DimmerLights2^(0+384)+9),0
 14499  1DD8  0008               	return
 14500  1DD9                     __end_of_setDimmerLights_Line:	
 14501                           
 14502                           	psect	text85
 14503  11CD                     __ptext85:	
 14504 ;; *************** function _getMain_All_Error_Status *****************
 14505 ;; Defined at:
 14506 ;;		line 361 in file "../src/main_B1.c"
 14507 ;; Parameters:    Size  Location     Type
 14508 ;;  command         1    wreg     unsigned char 
 14509 ;; Auto vars:     Size  Location     Type
 14510 ;;  command         1    5[BANK0 ] unsigned char 
 14511 ;;  status          1    6[BANK0 ] unsigned char 
 14512 ;; Return value:  Size  Location     Type
 14513 ;;                  1    wreg      unsigned char 
 14514 ;; Registers used:
 14515 ;;		wreg, status,2, status,0
 14516 ;; Tracked objects:
 14517 ;;		On entry : 0/0
 14518 ;;		On exit  : 0/0
 14519 ;;		Unchanged: 0/0
 14520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14522 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14523 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14524 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14525 ;;Total ram usage:        7 bytes
 14526 ;; Hardware stack levels used:    1
 14527 ;; Hardware stack levels required when called:    5
 14528 ;; This function calls:
 14529 ;;		Nothing
 14530 ;; This function is called by:
 14531 ;;		_DimmerLights_Main
 14532 ;;		_setDimmerLights
 14533 ;;		_setDimmerLights_Adj
 14534 ;;		_Load_Main
 14535 ;;		_setTemp_Main
 14536 ;;		_setRF_Main
 14537 ;;		_getRxData
 14538 ;;		_Switch_Main
 14539 ;; This function uses a non-reentrant model
 14540 ;;
 14541                           
 14542                           
 14543                           ;psect for function _getMain_All_Error_Status
 14544  11CD                     _getMain_All_Error_Status:	
 14545                           
 14546                           ;incstack = 0
 14547                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 14548                           ;getMain_All_Error_Status@command stored from wreg
 14549  11CD  0020               	movlb	0	; select bank0
 14550  11CE  00A5               	movwf	getMain_All_Error_Status@command
 14551                           
 14552                           ;main_B1.c: 362: char status = 0;
 14553  11CF  01A6               	clrf	getMain_All_Error_Status@status
 14554                           
 14555                           ;main_B1.c: 373: if (status == 0 && command != 2) {
 14556  11D0  08A6               	movf	getMain_All_Error_Status@status,f
 14557  11D1  1D03               	skipz
 14558  11D2  29E7               	goto	l6399
 14559  11D3  0825               	movf	getMain_All_Error_Status@command,w
 14560  11D4  3A02               	xorlw	2
 14561  11D5  1903               	skipnz
 14562  11D6  29E7               	goto	l6399
 14563                           
 14564                           ;main_B1.c: 374: status = Temp.ERROR == 1 ? 2 : 0;
 14565  11D7  0021               	movlb	1	; select bank1
 14566  11D8  18D6               	btfsc	_Temp^(0+128),1
 14567  11D9  29DE               	goto	l6397
 14568  11DA  0020               	movlb	0	; select bank0
 14569  11DB  01A1               	clrf	_getMain_All_Error_Status$7075
 14570  11DC  01A2               	clrf	_getMain_All_Error_Status$7075+1
 14571  11DD  29E3               	goto	l2716
 14572  11DE                     l6397:	
 14573  11DE  3002               	movlw	2
 14574  11DF  0020               	movlb	0	; select bank0
 14575  11E0  00A1               	movwf	_getMain_All_Error_Status$7075
 14576  11E1  3000               	movlw	0
 14577  11E2  00A2               	movwf	_getMain_All_Error_Status$7075+1
 14578  11E3                     l2716:	
 14579  11E3  0821               	movf	_getMain_All_Error_Status$7075,w
 14580  11E4  00A0               	movwf	??_getMain_All_Error_Status
 14581  11E5  0820               	movf	??_getMain_All_Error_Status,w
 14582  11E6  00A6               	movwf	getMain_All_Error_Status@status
 14583  11E7                     l6399:	
 14584                           
 14585                           ;main_B1.c: 375: }
 14586                           ;main_B1.c: 380: if (status == 0 && command != 3) {
 14587  11E7  08A6               	movf	getMain_All_Error_Status@status,f
 14588  11E8  1D03               	skipz
 14589  11E9  29FE               	goto	l2717
 14590  11EA  0825               	movf	getMain_All_Error_Status@command,w
 14591  11EB  3A03               	xorlw	3
 14592  11EC  1903               	skipnz
 14593  11ED  29FE               	goto	l2717
 14594                           
 14595                           ;main_B1.c: 381: status = Load.ERROR == 1 ? 3 : 0;
 14596  11EE  0022               	movlb	2	; select bank2
 14597  11EF  1AA8               	btfsc	_Load^(0+256),5
 14598  11F0  29F5               	goto	l6407
 14599  11F1  0020               	movlb	0	; select bank0
 14600  11F2  01A3               	clrf	_getMain_All_Error_Status$7076
 14601  11F3  01A4               	clrf	_getMain_All_Error_Status$7076+1
 14602  11F4  29FA               	goto	l2721
 14603  11F5                     l6407:	
 14604  11F5  3003               	movlw	3
 14605  11F6  0020               	movlb	0	; select bank0
 14606  11F7  00A3               	movwf	_getMain_All_Error_Status$7076
 14607  11F8  3000               	movlw	0
 14608  11F9  00A4               	movwf	_getMain_All_Error_Status$7076+1
 14609  11FA                     l2721:	
 14610  11FA  0823               	movf	_getMain_All_Error_Status$7076,w
 14611  11FB  00A0               	movwf	??_getMain_All_Error_Status
 14612  11FC  0820               	movf	??_getMain_All_Error_Status,w
 14613  11FD  00A6               	movwf	getMain_All_Error_Status@status
 14614  11FE                     l2717:	
 14615                           
 14616                           ;main_B1.c: 382: }
 14617                           ;main_B1.c: 398: return status;
 14618  11FE  0826               	movf	getMain_All_Error_Status@status,w
 14619  11FF  0008               	return
 14620  1200                     __end_of_getMain_All_Error_Status:	
 14621                           
 14622                           	psect	text86
 14623  1172                     __ptext86:	
 14624 ;; *************** function _getMain_LightsStatus *****************
 14625 ;; Defined at:
 14626 ;;		line 334 in file "../src/main_B1.c"
 14627 ;; Parameters:    Size  Location     Type
 14628 ;;		None
 14629 ;; Auto vars:     Size  Location     Type
 14630 ;;  i               2    6[BANK0 ] int 
 14631 ;;  status          1    8[BANK0 ] unsigned char 
 14632 ;;  count           1    5[BANK0 ] unsigned char 
 14633 ;; Return value:  Size  Location     Type
 14634 ;;                  1    wreg      unsigned char 
 14635 ;; Registers used:
 14636 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14637 ;; Tracked objects:
 14638 ;;		On entry : 0/0
 14639 ;;		On exit  : 0/0
 14640 ;;		Unchanged: 0/0
 14641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14643 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14644 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14645 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14646 ;;Total ram usage:        5 bytes
 14647 ;; Hardware stack levels used:    1
 14648 ;; Hardware stack levels required when called:    7
 14649 ;; This function calls:
 14650 ;;		_getDimmerLights_Status
 14651 ;; This function is called by:
 14652 ;;		_DimmerLights_Main
 14653 ;;		_Flash_Memory_Main
 14654 ;;		_Load_Main
 14655 ;;		_setMain_Exception
 14656 ;; This function uses a non-reentrant model
 14657 ;;
 14658                           
 14659                           
 14660                           ;psect for function _getMain_LightsStatus
 14661  1172                     _getMain_LightsStatus:	
 14662                           
 14663                           ;main_B1.c: 335: char status = 0;
 14664                           
 14665                           ;incstack = 0
 14666                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14667  1172  0020               	movlb	0	; select bank0
 14668  1173  01A8               	clrf	getMain_LightsStatus@status
 14669                           
 14670                           ;main_B1.c: 341: char count = 2;
 14671  1174  3002               	movlw	2
 14672  1175  00A4               	movwf	??_getMain_LightsStatus
 14673  1176  0824               	movf	??_getMain_LightsStatus,w
 14674  1177  00A5               	movwf	getMain_LightsStatus@count
 14675                           
 14676                           ;main_B1.c: 347: for (int i = 0; i < count; i++) {
 14677  1178  01A6               	clrf	getMain_LightsStatus@i
 14678  1179  01A7               	clrf	getMain_LightsStatus@i+1
 14679  117A                     l8823:	
 14680  117A  0827               	movf	getMain_LightsStatus@i+1,w
 14681  117B  3A80               	xorlw	128
 14682  117C  00A4               	movwf	??_getMain_LightsStatus
 14683  117D  3080               	movlw	128
 14684  117E  0224               	subwf	??_getMain_LightsStatus,w
 14685  117F  1D03               	skipz
 14686  1180  2983               	goto	u9145
 14687  1181  0825               	movf	getMain_LightsStatus@count,w
 14688  1182  0226               	subwf	getMain_LightsStatus@i,w
 14689  1183                     u9145:	
 14690  1183  1803               	btfsc	3,0
 14691  1184  299B               	goto	l8825
 14692                           
 14693                           ;main_B1.c: 348: if (status == 0) {
 14694  1185  0020               	movlb	0	; select bank0
 14695  1186  08A8               	movf	getMain_LightsStatus@status,f
 14696  1187  1D03               	skipz
 14697  1188  2996               	goto	l8821
 14698                           
 14699                           ;main_B1.c: 353: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 14700  1189  0826               	movf	getMain_LightsStatus@i,w
 14701  118A  3E01               	addlw	1
 14702  118B  319C  2474  3191   	fcall	_getDimmerLights_Status
 14703  118E  3A01               	xorlw	1
 14704  118F  3000               	movlw	0
 14705  1190  1903               	skipnz
 14706  1191  3001               	movlw	1
 14707  1192  0020               	movlb	0	; select bank0
 14708  1193  00A4               	movwf	??_getMain_LightsStatus
 14709  1194  0824               	movf	??_getMain_LightsStatus,w
 14710  1195  00A8               	movwf	getMain_LightsStatus@status
 14711  1196                     l8821:	
 14712  1196  3001               	movlw	1
 14713  1197  07A6               	addwf	getMain_LightsStatus@i,f
 14714  1198  3000               	movlw	0
 14715  1199  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 14716  119A  297A               	goto	l8823
 14717  119B                     l8825:	
 14718                           
 14719                           ;main_B1.c: 355: }
 14720                           ;main_B1.c: 356: }
 14721                           ;main_B1.c: 357: return status;
 14722  119B  0020               	movlb	0	; select bank0
 14723  119C  0828               	movf	getMain_LightsStatus@status,w
 14724  119D  0008               	return
 14725  119E                     __end_of_getMain_LightsStatus:	
 14726                           
 14727                           	psect	text87
 14728  1B9C                     __ptext87:	
 14729 ;; *************** function _getLoad_OK *****************
 14730 ;; Defined at:
 14731 ;;		line 218 in file "../src/OverLoad_B1.c"
 14732 ;; Parameters:    Size  Location     Type
 14733 ;;		None
 14734 ;; Auto vars:     Size  Location     Type
 14735 ;;  ok              1    0[BANK0 ] unsigned char 
 14736 ;; Return value:  Size  Location     Type
 14737 ;;                  1    wreg      unsigned char 
 14738 ;; Registers used:
 14739 ;;		wreg, status,2
 14740 ;; Tracked objects:
 14741 ;;		On entry : 0/0
 14742 ;;		On exit  : 0/0
 14743 ;;		Unchanged: 0/0
 14744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14746 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14748 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14749 ;;Total ram usage:        1 bytes
 14750 ;; Hardware stack levels used:    1
 14751 ;; Hardware stack levels required when called:    5
 14752 ;; This function calls:
 14753 ;;		Nothing
 14754 ;; This function is called by:
 14755 ;;		_DimmerLights_Main
 14756 ;; This function uses a non-reentrant model
 14757 ;;
 14758                           
 14759                           
 14760                           ;psect for function _getLoad_OK
 14761  1B9C                     _getLoad_OK:	
 14762                           
 14763                           ;OverLoad_B1.c: 219: char ok = Load.OK == 1 ? 1 : 0;
 14764                           
 14765                           ;incstack = 0
 14766                           ; Regs used in _getLoad_OK: [wreg+status,2]
 14767  1B9C  3000               	movlw	0
 14768  1B9D  0022               	movlb	2	; select bank2
 14769  1B9E  1BA8               	btfsc	_Load^(0+256),7
 14770  1B9F  3001               	movlw	1
 14771  1BA0  0020               	movlb	0	; select bank0
 14772  1BA1  00A0               	movwf	getLoad_OK@ok
 14773                           
 14774                           ;OverLoad_B1.c: 220: return ok;
 14775  1BA2  0820               	movf	getLoad_OK@ok,w
 14776  1BA3  0008               	return
 14777  1BA4                     __end_of_getLoad_OK:	
 14778                           
 14779                           	psect	text88
 14780  1E04                     __ptext88:	
 14781 ;; *************** function _DimmerLights_Initialization *****************
 14782 ;; Defined at:
 14783 ;;		line 341 in file "../src/Dimmer_B1.c"
 14784 ;; Parameters:    Size  Location     Type
 14785 ;;		None
 14786 ;; Auto vars:     Size  Location     Type
 14787 ;;		None
 14788 ;; Return value:  Size  Location     Type
 14789 ;;		None               void
 14790 ;; Registers used:
 14791 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14792 ;; Tracked objects:
 14793 ;;		On entry : 0/0
 14794 ;;		On exit  : 0/0
 14795 ;;		Unchanged: 0/0
 14796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14799 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14800 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14801 ;;Total ram usage:        1 bytes
 14802 ;; Hardware stack levels used:    1
 14803 ;; Hardware stack levels required when called:    7
 14804 ;; This function calls:
 14805 ;;		_Dimmer_Initialization
 14806 ;;		_setDimmerLights_Initialization
 14807 ;; This function is called by:
 14808 ;;		_main
 14809 ;; This function uses a non-reentrant model
 14810 ;;
 14811                           
 14812                           
 14813                           ;psect for function _DimmerLights_Initialization
 14814  1E04                     _DimmerLights_Initialization:	
 14815                           
 14816                           ;Dimmer_B1.c: 343: DimmerLights11 = &DimmerLights1;
 14817                           
 14818                           ;incstack = 0
 14819                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14820  1E04  30BE               	movlw	_DimmerLights1& (0+255)
 14821  1E05  0020               	movlb	0	; select bank0
 14822  1E06  00A4               	movwf	??_DimmerLights_Initialization
 14823  1E07  0824               	movf	??_DimmerLights_Initialization,w
 14824  1E08  0021               	movlb	1	; select bank1
 14825  1E09  00CB               	movwf	_DimmerLights11^(0+128)
 14826                           
 14827                           ;Dimmer_B1.c: 344: setDimmerLights_Initialization(1);
 14828  1E0A  3001               	movlw	1
 14829  1E0B  3190  20CE  319E   	fcall	_setDimmerLights_Initialization
 14830                           
 14831                           ;Dimmer_B1.c: 348: DimmerLights22 = &DimmerLights2;
 14832  1E0E  30CD               	movlw	_DimmerLights2& (0+255)
 14833  1E0F  0020               	movlb	0	; select bank0
 14834  1E10  00A4               	movwf	??_DimmerLights_Initialization
 14835  1E11  0824               	movf	??_DimmerLights_Initialization,w
 14836  1E12  0021               	movlb	1	; select bank1
 14837  1E13  00CC               	movwf	_DimmerLights22^(0+128)
 14838                           
 14839                           ;Dimmer_B1.c: 349: setDimmerLights_Initialization(2);
 14840  1E14  3002               	movlw	2
 14841  1E15  3190  20CE  319E   	fcall	_setDimmerLights_Initialization
 14842                           
 14843                           ;Dimmer_B1.c: 358: Dimmer_Initialization();
 14844  1E18  319B  234A         	fcall	_Dimmer_Initialization
 14845  1E1A  0008               	return
 14846  1E1B                     __end_of_DimmerLights_Initialization:	
 14847                           
 14848                           	psect	text89
 14849  10CE                     __ptext89:	
 14850 ;; *************** function _setDimmerLights_Initialization *****************
 14851 ;; Defined at:
 14852 ;;		line 364 in file "../src/Dimmer_B1.c"
 14853 ;; Parameters:    Size  Location     Type
 14854 ;;  lights          1    wreg     unsigned char 
 14855 ;; Auto vars:     Size  Location     Type
 14856 ;;  lights          1    3[BANK0 ] unsigned char 
 14857 ;; Return value:  Size  Location     Type
 14858 ;;		None               void
 14859 ;; Registers used:
 14860 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14861 ;; Tracked objects:
 14862 ;;		On entry : 0/0
 14863 ;;		On exit  : 0/0
 14864 ;;		Unchanged: 0/0
 14865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14867 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14868 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14869 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14870 ;;Total ram usage:        2 bytes
 14871 ;; Hardware stack levels used:    1
 14872 ;; Hardware stack levels required when called:    6
 14873 ;; This function calls:
 14874 ;;		_DimmerLightsPointSelect
 14875 ;; This function is called by:
 14876 ;;		_DimmerLights_Initialization
 14877 ;; This function uses a non-reentrant model
 14878 ;;
 14879                           
 14880                           
 14881                           ;psect for function _setDimmerLights_Initialization
 14882  10CE                     _setDimmerLights_Initialization:	
 14883                           
 14884                           ;incstack = 0
 14885                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 14886                           ;setDimmerLights_Initialization@lights stored from wreg
 14887  10CE  0020               	movlb	0	; select bank0
 14888  10CF  00A3               	movwf	setDimmerLights_Initialization@lights
 14889                           
 14890                           ;Dimmer_B1.c: 366: DimmerLightsPointSelect(lights);
 14891  10D0  0823               	movf	setDimmerLights_Initialization@lights,w
 14892  10D1  319C  24FE         	fcall	_DimmerLightsPointSelect
 14893                           
 14894                           ;Dimmer_B1.c: 372: DimmerLights->MaxmumValue = ((char)(80*0.8));
 14895  10D3  3040               	movlw	64
 14896  10D4  0020               	movlb	0	; select bank0
 14897  10D5  00A2               	movwf	??_setDimmerLights_Initialization
 14898  10D6  086F               	movf	_DimmerLights,w
 14899  10D7  3E05               	addlw	5
 14900  10D8  0086               	movwf	6
 14901  10D9  3001               	movlw	1	; select bank2/3
 14902  10DA  0087               	movwf	7
 14903  10DB  0822               	movf	??_setDimmerLights_Initialization,w
 14904  10DC  0081               	movwf	1
 14905                           
 14906                           ;Dimmer_B1.c: 373: DimmerLights->MinimumValue = ((char)(15*0.8));
 14907  10DD  300C               	movlw	12
 14908  10DE  00A2               	movwf	??_setDimmerLights_Initialization
 14909  10DF  086F               	movf	_DimmerLights,w
 14910  10E0  3E06               	addlw	6
 14911  10E1  0086               	movwf	6
 14912  10E2  3001               	movlw	1	; select bank2/3
 14913  10E3  0087               	movwf	7
 14914  10E4  0822               	movf	??_setDimmerLights_Initialization,w
 14915  10E5  0081               	movwf	1
 14916                           
 14917                           ;Dimmer_B1.c: 387: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 14918  10E6  086F               	movf	_DimmerLights,w
 14919  10E7  3E05               	addlw	5
 14920  10E8  0086               	movwf	6
 14921  10E9  3001               	movlw	1	; select bank2/3
 14922  10EA  0087               	movwf	7
 14923  10EB  0801               	movf	1,w
 14924  10EC  00A2               	movwf	??_setDimmerLights_Initialization
 14925  10ED  086F               	movf	_DimmerLights,w
 14926  10EE  3E04               	addlw	4
 14927  10EF  0086               	movwf	6
 14928  10F0  3001               	movlw	1	; select bank2/3
 14929  10F1  0087               	movwf	7
 14930  10F2  0822               	movf	??_setDimmerLights_Initialization,w
 14931  10F3  0081               	movwf	1
 14932  10F4  0008               	return
 14933  10F5                     __end_of_setDimmerLights_Initialization:	
 14934                           
 14935                           	psect	text90
 14936  1B4A                     __ptext90:	
 14937 ;; *************** function _Dimmer_Initialization *****************
 14938 ;; Defined at:
 14939 ;;		line 907 in file "../src/Dimmer_B1.c"
 14940 ;; Parameters:    Size  Location     Type
 14941 ;;		None
 14942 ;; Auto vars:     Size  Location     Type
 14943 ;;		None
 14944 ;; Return value:  Size  Location     Type
 14945 ;;		None               void
 14946 ;; Registers used:
 14947 ;;		None
 14948 ;; Tracked objects:
 14949 ;;		On entry : 0/0
 14950 ;;		On exit  : 0/0
 14951 ;;		Unchanged: 0/0
 14952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14957 ;;Total ram usage:        0 bytes
 14958 ;; Hardware stack levels used:    1
 14959 ;; Hardware stack levels required when called:    5
 14960 ;; This function calls:
 14961 ;;		Nothing
 14962 ;; This function is called by:
 14963 ;;		_DimmerLights_Initialization
 14964 ;; This function uses a non-reentrant model
 14965 ;;
 14966                           
 14967                           
 14968                           ;psect for function _Dimmer_Initialization
 14969  1B4A                     _Dimmer_Initialization:	
 14970                           
 14971                           ;incstack = 0
 14972                           ; Regs used in _Dimmer_Initialization: []
 14973  1B4A  0008               	return
 14974  1B4B                     __end_of_Dimmer_Initialization:	
 14975                           
 14976                           	psect	text91
 14977  1B94                     __ptext91:	
 14978 ;; *************** function _DelayOff_Main *****************
 14979 ;; Defined at:
 14980 ;;		line 41 in file "../src/DelayOff_B1.c"
 14981 ;; Parameters:    Size  Location     Type
 14982 ;;		None
 14983 ;; Auto vars:     Size  Location     Type
 14984 ;;		None
 14985 ;; Return value:  Size  Location     Type
 14986 ;;		None               void
 14987 ;; Registers used:
 14988 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14989 ;; Tracked objects:
 14990 ;;		On entry : 0/0
 14991 ;;		On exit  : 0/0
 14992 ;;		Unchanged: 0/0
 14993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14998 ;;Total ram usage:        0 bytes
 14999 ;; Hardware stack levels used:    1
 15000 ;; Hardware stack levels required when called:   10
 15001 ;; This function calls:
 15002 ;;		_DlyOff_Main
 15003 ;; This function is called by:
 15004 ;;		_main
 15005 ;; This function uses a non-reentrant model
 15006 ;;
 15007                           
 15008                           
 15009                           ;psect for function _DelayOff_Main
 15010  1B94                     _DelayOff_Main:	
 15011                           
 15012                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15013                           
 15014                           ;incstack = 0
 15015                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15016  1B94  3001               	movlw	1
 15017  1B95  3189  212B  319B   	fcall	_DlyOff_Main
 15018                           
 15019                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 15020  1B98  3002               	movlw	2
 15021  1B99  3189  212B         	fcall	_DlyOff_Main
 15022  1B9B  0008               	return
 15023  1B9C                     __end_of_DelayOff_Main:	
 15024                           
 15025                           	psect	text92
 15026  092B                     __ptext92:	
 15027 ;; *************** function _DlyOff_Main *****************
 15028 ;; Defined at:
 15029 ;;		line 62 in file "../src/DelayOff_B1.c"
 15030 ;; Parameters:    Size  Location     Type
 15031 ;;  sw              1    wreg     unsigned char 
 15032 ;; Auto vars:     Size  Location     Type
 15033 ;;  sw              1   19[BANK0 ] unsigned char 
 15034 ;; Return value:  Size  Location     Type
 15035 ;;		None               void
 15036 ;; Registers used:
 15037 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15038 ;; Tracked objects:
 15039 ;;		On entry : 0/0
 15040 ;;		On exit  : 0/0
 15041 ;;		Unchanged: 0/0
 15042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15044 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15045 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15046 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15047 ;;Total ram usage:        3 bytes
 15048 ;; Hardware stack levels used:    1
 15049 ;; Hardware stack levels required when called:    9
 15050 ;; This function calls:
 15051 ;;		_DelayOffPointSelect
 15052 ;;		_getDimmerLights_Status
 15053 ;;		_setDimmerLights_SwOff
 15054 ;;		_setDimmerLights_SwOn
 15055 ;;		_setRF_DimmerLights
 15056 ;; This function is called by:
 15057 ;;		_DelayOff_Main
 15058 ;; This function uses a non-reentrant model
 15059 ;;
 15060                           
 15061                           
 15062                           ;psect for function _DlyOff_Main
 15063  092B                     _DlyOff_Main:	
 15064                           
 15065                           ;incstack = 0
 15066                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15067                           ;DlyOff_Main@sw stored from wreg
 15068  092B  0020               	movlb	0	; select bank0
 15069  092C  00B3               	movwf	DlyOff_Main@sw
 15070                           
 15071                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15072  092D  0833               	movf	DlyOff_Main@sw,w
 15073  092E  319D  255E  3189   	fcall	_DelayOffPointSelect
 15074                           
 15075                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15076  0931  0878               	movf	_DelayOff,w
 15077  0932  0086               	movwf	6
 15078  0933  3001               	movlw	1	; select bank2/3
 15079  0934  0087               	movwf	7
 15080  0935  1C81               	btfss	1,1
 15081  0936  0008               	return
 15082                           
 15083                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15084  0937  0878               	movf	_DelayOff,w
 15085  0938  0086               	movwf	6
 15086  0939  3001               	movlw	1	; select bank2/3
 15087  093A  0087               	movwf	7
 15088  093B  3001               	movlw	1
 15089  093C  0781               	addwf	1,f
 15090  093D  3141               	addfsr 1,1
 15091  093E  1803               	skipnc
 15092  093F  0A81               	incf	1,f
 15093                           
 15094                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 15095  0940  0878               	movf	_DelayOff,w
 15096  0941  0086               	movwf	6
 15097  0942  3001               	movlw	1	; select bank2/3
 15098  0943  0087               	movwf	7
 15099  0944  3F40               	moviw [0]fsr1
 15100  0945  0020               	movlb	0	; select bank0
 15101  0946  00B1               	movwf	??_DlyOff_Main
 15102  0947  3F41               	moviw [1]fsr1
 15103  0948  00B2               	movwf	??_DlyOff_Main+1
 15104  0949  3016               	movlw	22
 15105  094A  0232               	subwf	??_DlyOff_Main+1,w
 15106  094B  3012               	movlw	18
 15107  094C  1903               	skipnz
 15108  094D  0231               	subwf	??_DlyOff_Main,w
 15109  094E  1C03               	skipc
 15110  094F  0008               	return
 15111                           
 15112                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15113  0950  0878               	movf	_DelayOff,w
 15114  0951  0086               	movwf	6
 15115  0952  3001               	movlw	1	; select bank2/3
 15116  0953  0087               	movwf	7
 15117  0954  3000               	movlw	0
 15118  0955  3FC0               	movwi [0]fsr1
 15119  0956  3FC1               	movwi [1]fsr1
 15120                           
 15121                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15122  0957  3001               	movlw	1
 15123  0958  00B1               	movwf	??_DlyOff_Main
 15124  0959  0878               	movf	_DelayOff,w
 15125  095A  0086               	movwf	6
 15126  095B  3001               	movlw	1	; select bank2/3
 15127  095C  0087               	movwf	7
 15128  095D  0831               	movf	??_DlyOff_Main,w
 15129  095E  0781               	addwf	1,f
 15130                           
 15131                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15132  095F  0878               	movf	_DelayOff,w
 15133  0960  0086               	movwf	6
 15134  0961  3001               	movlw	1	; select bank2/3
 15135  0962  0087               	movwf	7
 15136  0963  0878               	movf	_DelayOff,w
 15137  0964  0084               	movwf	4
 15138  0965  3001               	movlw	1	; select bank2/3
 15139  0966  0085               	movwf	5
 15140  0967  0800               	movf	0,w
 15141  0968  0201               	subwf	1,w
 15142  0969  1C03               	skipc
 15143  096A  0008               	return
 15144                           
 15145                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15146  096B  0878               	movf	_DelayOff,w
 15147  096C  0086               	movwf	6
 15148  096D  3001               	movlw	1	; select bank2/3
 15149  096E  0087               	movwf	7
 15150  096F  0181               	clrf	1
 15151                           
 15152                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15153  0970  0878               	movf	_DelayOff,w
 15154  0971  0086               	movwf	6
 15155  0972  3001               	movlw	1	; select bank2/3
 15156  0973  0087               	movwf	7
 15157  0974  1081               	bcf	1,1
 15158                           
 15159                           ;DelayOff_B1.c: 74: setDimmerLights_SwOn(sw);
 15160  0975  0833               	movf	DlyOff_Main@sw,w
 15161  0976  3193  23B1  3189   	fcall	_setDimmerLights_SwOn
 15162                           
 15163                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 15164  0979  0020               	movlb	0	; select bank0
 15165  097A  0833               	movf	DlyOff_Main@sw,w
 15166  097B  319C  2474  3189   	fcall	_getDimmerLights_Status
 15167  097E  3A01               	xorlw	1
 15168  097F  1D03               	skipz
 15169  0980  2986               	goto	l582
 15170                           
 15171                           ;DelayOff_B1.c: 76: setDimmerLights_SwOff(sw);
 15172  0981  0020               	movlb	0	; select bank0
 15173  0982  0833               	movf	DlyOff_Main@sw,w
 15174  0983  3194  246C  3189   	fcall	_setDimmerLights_SwOff
 15175  0986                     l582:	
 15176                           
 15177                           ;DelayOff_B1.c: 77: }
 15178                           ;DelayOff_B1.c: 78: setRF_DimmerLights(sw, 0);
 15179  0986  0020               	movlb	0	; select bank0
 15180  0987  01A0               	clrf	setRF_DimmerLights@on
 15181  0988  0833               	movf	DlyOff_Main@sw,w
 15182  0989  3188  2012         	fcall	_setRF_DimmerLights
 15183  098B  0008               	return
 15184  098C                     __end_of_DlyOff_Main:	
 15185                           
 15186                           	psect	text93
 15187  0812                     __ptext93:	
 15188 ;; *************** function _setRF_DimmerLights *****************
 15189 ;; Defined at:
 15190 ;;		line 532 in file "../src/RF_Control_B1.c"
 15191 ;; Parameters:    Size  Location     Type
 15192 ;;  lights          1    wreg     unsigned char 
 15193 ;;  on              1    0[BANK0 ] unsigned char 
 15194 ;; Auto vars:     Size  Location     Type
 15195 ;;  lights          1    4[BANK0 ] unsigned char 
 15196 ;;  status          1    3[BANK0 ] unsigned char 
 15197 ;; Return value:  Size  Location     Type
 15198 ;;		None               void
 15199 ;; Registers used:
 15200 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15201 ;; Tracked objects:
 15202 ;;		On entry : 0/0
 15203 ;;		On exit  : 0/0
 15204 ;;		Unchanged: 0/0
 15205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15206 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15207 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15208 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15209 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15210 ;;Total ram usage:        5 bytes
 15211 ;; Hardware stack levels used:    1
 15212 ;; Hardware stack levels required when called:    5
 15213 ;; This function calls:
 15214 ;;		Nothing
 15215 ;; This function is called by:
 15216 ;;		_DlyOff_Main
 15217 ;;		_setDimmerLights
 15218 ;;		_setDimmerLights_Adj
 15219 ;;		_setRFSW_Control
 15220 ;; This function uses a non-reentrant model
 15221 ;;
 15222                           
 15223                           
 15224                           ;psect for function _setRF_DimmerLights
 15225  0812                     _setRF_DimmerLights:	
 15226                           
 15227                           ;incstack = 0
 15228                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 15229                           ;setRF_DimmerLights@lights stored from wreg
 15230  0812  0020               	movlb	0	; select bank0
 15231  0813  00A4               	movwf	setRF_DimmerLights@lights
 15232                           
 15233                           ;RF_Control_B1.c: 533: char status = 1;
 15234  0814  01A3               	clrf	setRF_DimmerLights@status
 15235  0815  0AA3               	incf	setRF_DimmerLights@status,f
 15236                           
 15237                           ;RF_Control_B1.c: 534: status <<= (lights - 1);
 15238  0816  0824               	movf	setRF_DimmerLights@lights,w
 15239  0817  3EFF               	addlw	-1
 15240  0818  0A89               	incf	9,f
 15241  0819  281C               	goto	u8730
 15242  081A                     u8735:	
 15243  081A  1003               	clrc
 15244  081B  0DA3               	rlf	setRF_DimmerLights@status,f
 15245  081C                     u8730:	
 15246  081C  3EFF               	addlw	-1
 15247  081D  1D03               	skipz
 15248  081E  281A               	goto	u8735
 15249                           
 15250                           ;RF_Control_B1.c: 535: product->Data[11]=lights;
 15251  081F  0824               	movf	setRF_DimmerLights@lights,w
 15252  0820  00A1               	movwf	??_setRF_DimmerLights
 15253  0821  086E               	movf	_product,w
 15254  0822  3E0B               	addlw	11
 15255  0823  0086               	movwf	6
 15256  0824  3002               	movlw	2	; select bank4/5
 15257  0825  0087               	movwf	7
 15258  0826  0821               	movf	??_setRF_DimmerLights,w
 15259  0827  0081               	movwf	1
 15260                           
 15261                           ;RF_Control_B1.c: 543: product->Data[9]=product->Data[20 + lights];
 15262  0828  0824               	movf	setRF_DimmerLights@lights,w
 15263  0829  3E14               	addlw	20
 15264  082A  076E               	addwf	_product,w
 15265  082B  00A1               	movwf	??_setRF_DimmerLights
 15266  082C  0821               	movf	??_setRF_DimmerLights,w
 15267  082D  0086               	movwf	6
 15268  082E  3002               	movlw	2	; select bank4/5
 15269  082F  0087               	movwf	7
 15270  0830  0801               	movf	1,w
 15271  0831  00A2               	movwf	??_setRF_DimmerLights+1
 15272  0832  086E               	movf	_product,w
 15273  0833  3E09               	addlw	9
 15274  0834  0086               	movwf	6
 15275  0835  3002               	movlw	2	; select bank4/5
 15276  0836  0087               	movwf	7
 15277  0837  0822               	movf	??_setRF_DimmerLights+1,w
 15278  0838  0081               	movwf	1
 15279                           
 15280                           ;RF_Control_B1.c: 544: product->Data[17]=product->Data[26 + lights];
 15281  0839  0824               	movf	setRF_DimmerLights@lights,w
 15282  083A  3E1A               	addlw	26
 15283  083B  076E               	addwf	_product,w
 15284  083C  00A1               	movwf	??_setRF_DimmerLights
 15285  083D  0821               	movf	??_setRF_DimmerLights,w
 15286  083E  0086               	movwf	6
 15287  083F  3002               	movlw	2	; select bank4/5
 15288  0840  0087               	movwf	7
 15289  0841  0801               	movf	1,w
 15290  0842  00A2               	movwf	??_setRF_DimmerLights+1
 15291  0843  086E               	movf	_product,w
 15292  0844  3E11               	addlw	17
 15293  0845  0086               	movwf	6
 15294  0846  3002               	movlw	2	; select bank4/5
 15295  0847  0087               	movwf	7
 15296  0848  0822               	movf	??_setRF_DimmerLights+1,w
 15297  0849  0081               	movwf	1
 15298                           
 15299                           ;RF_Control_B1.c: 545: if (on == 1) {
 15300  084A  0820               	movf	setRF_DimmerLights@on,w
 15301  084B  3A01               	xorlw	1
 15302  084C  1D03               	skipz
 15303  084D  285E               	goto	l8505
 15304                           
 15305                           ;RF_Control_B1.c: 546: product->Data[15]=(product->Data[15] | status);
 15306  084E  086E               	movf	_product,w
 15307  084F  3E0F               	addlw	15
 15308  0850  0086               	movwf	6
 15309  0851  3002               	movlw	2	; select bank4/5
 15310  0852  0087               	movwf	7
 15311  0853  0801               	movf	1,w
 15312  0854  0423               	iorwf	setRF_DimmerLights@status,w
 15313  0855  00A1               	movwf	??_setRF_DimmerLights
 15314  0856  086E               	movf	_product,w
 15315  0857  3E0F               	addlw	15
 15316  0858  0086               	movwf	6
 15317  0859  3002               	movlw	2	; select bank4/5
 15318  085A  0087               	movwf	7
 15319  085B  0821               	movf	??_setRF_DimmerLights,w
 15320  085C  0081               	movwf	1
 15321                           
 15322                           ;RF_Control_B1.c: 547: } else {
 15323  085D  0008               	return
 15324  085E                     l8505:	
 15325                           
 15326                           ;RF_Control_B1.c: 548: product->Data[15]=(product->Data[15]&(~status));
 15327  085E  086E               	movf	_product,w
 15328  085F  3E0F               	addlw	15
 15329  0860  0086               	movwf	6
 15330  0861  3002               	movlw	2	; select bank4/5
 15331  0862  0087               	movwf	7
 15332  0863  0923               	comf	setRF_DimmerLights@status,w
 15333  0864  0501               	andwf	1,w
 15334  0865  00A1               	movwf	??_setRF_DimmerLights
 15335  0866  086E               	movf	_product,w
 15336  0867  3E0F               	addlw	15
 15337  0868  0086               	movwf	6
 15338  0869  3002               	movlw	2	; select bank4/5
 15339  086A  0087               	movwf	7
 15340  086B  0821               	movf	??_setRF_DimmerLights,w
 15341  086C  0081               	movwf	1
 15342  086D  0008               	return
 15343  086E                     __end_of_setRF_DimmerLights:	
 15344                           
 15345                           	psect	text94
 15346  13B1                     __ptext94:	
 15347 ;; *************** function _setDimmerLights_SwOn *****************
 15348 ;; Defined at:
 15349 ;;		line 517 in file "../src/Dimmer_B1.c"
 15350 ;; Parameters:    Size  Location     Type
 15351 ;;  sw              1    wreg     unsigned char 
 15352 ;; Auto vars:     Size  Location     Type
 15353 ;;  sw              1   15[BANK0 ] unsigned char 
 15354 ;;  idle            1   14[BANK0 ] unsigned char 
 15355 ;; Return value:  Size  Location     Type
 15356 ;;		None               void
 15357 ;; Registers used:
 15358 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15359 ;; Tracked objects:
 15360 ;;		On entry : 0/0
 15361 ;;		On exit  : 0/0
 15362 ;;		Unchanged: 0/0
 15363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15365 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15366 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15367 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15368 ;;Total ram usage:        3 bytes
 15369 ;; Hardware stack levels used:    1
 15370 ;; Hardware stack levels required when called:    7
 15371 ;; This function calls:
 15372 ;;		_DimmerLightsPointSelect
 15373 ;;		_getAll_DimmerLights_AdjGO
 15374 ;;		_setBuz
 15375 ;;		_setDimmerLights_Trigger
 15376 ;; This function is called by:
 15377 ;;		_DlyOff_Main
 15378 ;;		_setRFSW_Control
 15379 ;;		_setSw_Main
 15380 ;; This function uses a non-reentrant model
 15381 ;;
 15382                           
 15383                           
 15384                           ;psect for function _setDimmerLights_SwOn
 15385  13B1                     _setDimmerLights_SwOn:	
 15386                           
 15387                           ;incstack = 0
 15388                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15389                           ;setDimmerLights_SwOn@sw stored from wreg
 15390  13B1  0020               	movlb	0	; select bank0
 15391  13B2  00AF               	movwf	setDimmerLights_SwOn@sw
 15392                           
 15393                           ;Dimmer_B1.c: 518: DimmerLightsPointSelect(sw);
 15394  13B3  082F               	movf	setDimmerLights_SwOn@sw,w
 15395  13B4  319C  24FE  3193   	fcall	_DimmerLightsPointSelect
 15396                           
 15397                           ;Dimmer_B1.c: 519: char idle = 0;
 15398  13B7  0020               	movlb	0	; select bank0
 15399  13B8  01AE               	clrf	setDimmerLights_SwOn@idle
 15400                           
 15401                           ;Dimmer_B1.c: 521: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
 15402  13B9  319C  2484  3193   	fcall	_getAll_DimmerLights_AdjGO
 15403  13BC  3A01               	xorlw	1
 15404  13BD  3000               	movlw	0
 15405  13BE  1903               	skipnz
 15406  13BF  3001               	movlw	1
 15407  13C0  0020               	movlb	0	; select bank0
 15408  13C1  00AD               	movwf	??_setDimmerLights_SwOn
 15409  13C2  082D               	movf	??_setDimmerLights_SwOn,w
 15410  13C3  00AE               	movwf	setDimmerLights_SwOn@idle
 15411                           
 15412                           ;Dimmer_B1.c: 523: if (idle == 0) {
 15413  13C4  08AE               	movf	setDimmerLights_SwOn@idle,f
 15414  13C5  1D03               	skipz
 15415  13C6  0008               	return
 15416                           
 15417                           ;Dimmer_B1.c: 524: DimmerLights->SwFlag = 1;
 15418  13C7  086F               	movf	_DimmerLights,w
 15419  13C8  3E09               	addlw	9
 15420  13C9  0086               	movwf	6
 15421  13CA  3001               	movlw	1	; select bank2/3
 15422  13CB  0087               	movwf	7
 15423  13CC  1701               	bsf	1,6
 15424                           
 15425                           ;Dimmer_B1.c: 525: setBuz(1, 100);
 15426  13CD  3064               	movlw	100
 15427  13CE  00A9               	movwf	setBuz@time
 15428  13CF  3000               	movlw	0
 15429  13D0  00AA               	movwf	setBuz@time+1
 15430  13D1  3001               	movlw	1
 15431  13D2  3196  2699  3193   	fcall	_setBuz
 15432                           
 15433                           ;Dimmer_B1.c: 526: if (DimmerLights->Status == 0) {
 15434  13D5  0020               	movlb	0	; select bank0
 15435  13D6  086F               	movf	_DimmerLights,w
 15436  13D7  0086               	movwf	6
 15437  13D8  3001               	movlw	1	; select bank2/3
 15438  13D9  0087               	movwf	7
 15439  13DA  1A81               	btfsc	1,5
 15440  13DB  2BE7               	goto	l8465
 15441                           
 15442                           ;Dimmer_B1.c: 527: DimmerLights->Status = 1;
 15443  13DC  086F               	movf	_DimmerLights,w
 15444  13DD  0086               	movwf	6
 15445  13DE  3001               	movlw	1	; select bank2/3
 15446  13DF  0087               	movwf	7
 15447  13E0  1681               	bsf	1,5
 15448                           
 15449                           ;Dimmer_B1.c: 528: setDimmerLights_Trigger(sw, 1);
 15450  13E1  01A2               	clrf	setDimmerLights_Trigger@command
 15451  13E2  0AA2               	incf	setDimmerLights_Trigger@command,f
 15452  13E3  082F               	movf	setDimmerLights_SwOn@sw,w
 15453  13E4  319E  26B8         	fcall	_setDimmerLights_Trigger
 15454                           
 15455                           ;Dimmer_B1.c: 529: } else {
 15456  13E6  0008               	return
 15457  13E7                     l8465:	
 15458                           
 15459                           ;Dimmer_B1.c: 530: DimmerLights->Status = 0;
 15460  13E7  0020               	movlb	0	; select bank0
 15461  13E8  086F               	movf	_DimmerLights,w
 15462  13E9  0086               	movwf	6
 15463  13EA  3001               	movlw	1	; select bank2/3
 15464  13EB  0087               	movwf	7
 15465  13EC  1281               	bcf	1,5
 15466  13ED  0008               	return
 15467  13EE                     __end_of_setDimmerLights_SwOn:	
 15468                           
 15469                           	psect	text95
 15470  1699                     __ptext95:	
 15471 ;; *************** function _setBuz *****************
 15472 ;; Defined at:
 15473 ;;		line 22 in file "../src/Buzzer_B1.c"
 15474 ;; Parameters:    Size  Location     Type
 15475 ;;  count           1    wreg     unsigned char 
 15476 ;;  time            2    9[BANK0 ] int 
 15477 ;; Auto vars:     Size  Location     Type
 15478 ;;  count           1   12[BANK0 ] unsigned char 
 15479 ;; Return value:  Size  Location     Type
 15480 ;;		None               void
 15481 ;; Registers used:
 15482 ;;		wreg, status,2, status,0, pclath, cstack
 15483 ;; Tracked objects:
 15484 ;;		On entry : 0/0
 15485 ;;		On exit  : 0/0
 15486 ;;		Unchanged: 0/0
 15487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15488 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15489 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15490 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15491 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15492 ;;Total ram usage:        4 bytes
 15493 ;; Hardware stack levels used:    1
 15494 ;; Hardware stack levels required when called:    6
 15495 ;; This function calls:
 15496 ;;		___awdiv
 15497 ;; This function is called by:
 15498 ;;		_setDimmerLights_Main
 15499 ;;		_setDimmerLights_SwOn
 15500 ;;		_setLog_Code
 15501 ;;		_setControl_Lights_Table
 15502 ;;		_setSw_Main
 15503 ;;		_my_MainTimer
 15504 ;;		_setMain_Exception
 15505 ;; This function uses a non-reentrant model
 15506 ;;
 15507                           
 15508                           
 15509                           ;psect for function _setBuz
 15510  1699                     _setBuz:	
 15511                           
 15512                           ;incstack = 0
 15513                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 15514                           ;setBuz@count stored from wreg
 15515  1699  0020               	movlb	0	; select bank0
 15516  169A  00AC               	movwf	setBuz@count
 15517                           
 15518                           ;Buzzer_B1.c: 23: time /= 10;
 15519  169B  300A               	movlw	10
 15520  169C  00A0               	movwf	___awdiv@divisor
 15521  169D  3000               	movlw	0
 15522  169E  00A1               	movwf	___awdiv@divisor+1
 15523  169F  082A               	movf	setBuz@time+1,w
 15524  16A0  01A3               	clrf	___awdiv@dividend+1
 15525  16A1  07A3               	addwf	___awdiv@dividend+1,f
 15526  16A2  0829               	movf	setBuz@time,w
 15527  16A3  01A2               	clrf	___awdiv@dividend
 15528  16A4  07A2               	addwf	___awdiv@dividend,f
 15529  16A5  3195  2595  3196   	fcall	___awdiv
 15530  16A8  0020               	movlb	0	; select bank0
 15531  16A9  0821               	movf	?___awdiv+1,w
 15532  16AA  01AA               	clrf	setBuz@time+1
 15533  16AB  07AA               	addwf	setBuz@time+1,f
 15534  16AC  0820               	movf	?___awdiv,w
 15535  16AD  01A9               	clrf	setBuz@time
 15536  16AE  07A9               	addwf	setBuz@time,f
 15537                           
 15538                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 15539  16AF  0021               	movlb	1	; select bank1
 15540  16B0  1C30               	btfss	_Buz1^(0+128),0
 15541  16B1  0008               	return
 15542                           
 15543                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 15544  16B2  18B0               	btfsc	_Buz1^(0+128),1
 15545  16B3  2ECA               	goto	l96
 15546                           
 15547                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 15548  16B4  14B0               	bsf	_Buz1^(0+128),1
 15549                           
 15550                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 15551  16B5  01B1               	clrf	(_Buz1^(0+128)+1)
 15552  16B6  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 15553                           
 15554                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 15555  16B7  0020               	movlb	0	; select bank0
 15556  16B8  082C               	movf	setBuz@count,w
 15557  16B9  00AB               	movwf	??_setBuz
 15558  16BA  082B               	movf	??_setBuz,w
 15559  16BB  0021               	movlb	1	; select bank1
 15560  16BC  00B3               	movwf	(_Buz1^(0+128)+3)
 15561                           
 15562                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 15563  16BD  0020               	movlb	0	; select bank0
 15564  16BE  082A               	movf	setBuz@time+1,w
 15565  16BF  0021               	movlb	1	; select bank1
 15566  16C0  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 15567  16C1  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 15568  16C2  0020               	movlb	0	; select bank0
 15569  16C3  0829               	movf	setBuz@time,w
 15570  16C4  0021               	movlb	1	; select bank1
 15571  16C5  01B6               	clrf	(_Buz1^(0+128)+6)
 15572  16C6  07B6               	addwf	(_Buz1^(0+128)+6),f
 15573                           
 15574                           ;Buzzer_B1.c: 30: RB3 = 1;
 15575  16C7  0020               	movlb	0	; select bank0
 15576  16C8  158D               	bsf	13,3	;volatile
 15577                           
 15578                           ;Buzzer_B1.c: 31: } else {
 15579  16C9  0008               	return
 15580  16CA                     l96:	
 15581                           
 15582                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 15583  16CA  19B0               	btfsc	_Buz1^(0+128),3
 15584  16CB  2EDE               	goto	l98
 15585                           
 15586                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 15587  16CC  15B0               	bsf	_Buz1^(0+128),3
 15588                           
 15589                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 15590  16CD  0020               	movlb	0	; select bank0
 15591  16CE  082C               	movf	setBuz@count,w
 15592  16CF  00AB               	movwf	??_setBuz
 15593  16D0  082B               	movf	??_setBuz,w
 15594  16D1  0021               	movlb	1	; select bank1
 15595  16D2  00B4               	movwf	(_Buz1^(0+128)+4)
 15596                           
 15597                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 15598  16D3  0020               	movlb	0	; select bank0
 15599  16D4  082A               	movf	setBuz@time+1,w
 15600  16D5  0021               	movlb	1	; select bank1
 15601  16D6  01B9               	clrf	((_Buz1+1)^(0+128)+8)
 15602  16D7  07B9               	addwf	((_Buz1+1)^(0+128)+8),f
 15603  16D8  0020               	movlb	0	; select bank0
 15604  16D9  0829               	movf	setBuz@time,w
 15605  16DA  0021               	movlb	1	; select bank1
 15606  16DB  01B8               	clrf	(_Buz1^(0+128)+8)
 15607  16DC  07B8               	addwf	(_Buz1^(0+128)+8),f
 15608                           
 15609                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 15610  16DD  0008               	return
 15611  16DE                     l98:	
 15612  16DE  1A30               	btfsc	_Buz1^(0+128),4
 15613  16DF  0008               	return
 15614                           
 15615                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 15616  16E0  1630               	bsf	_Buz1^(0+128),4
 15617                           
 15618                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 15619  16E1  0020               	movlb	0	; select bank0
 15620  16E2  082C               	movf	setBuz@count,w
 15621  16E3  00AB               	movwf	??_setBuz
 15622  16E4  082B               	movf	??_setBuz,w
 15623  16E5  0021               	movlb	1	; select bank1
 15624  16E6  00B5               	movwf	(_Buz1^(0+128)+5)
 15625                           
 15626                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 15627  16E7  0020               	movlb	0	; select bank0
 15628  16E8  082A               	movf	setBuz@time+1,w
 15629  16E9  0021               	movlb	1	; select bank1
 15630  16EA  01BB               	clrf	((_Buz1+1)^(0+128)+10)
 15631  16EB  07BB               	addwf	((_Buz1+1)^(0+128)+10),f
 15632  16EC  0020               	movlb	0	; select bank0
 15633  16ED  0829               	movf	setBuz@time,w
 15634  16EE  0021               	movlb	1	; select bank1
 15635  16EF  01BA               	clrf	(_Buz1^(0+128)+10)
 15636  16F0  07BA               	addwf	(_Buz1^(0+128)+10),f
 15637  16F1  0008               	return
 15638  16F2                     __end_of_setBuz:	
 15639                           
 15640                           	psect	text96
 15641  1595                     __ptext96:	
 15642 ;; *************** function ___awdiv *****************
 15643 ;; Defined at:
 15644 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 15645 ;; Parameters:    Size  Location     Type
 15646 ;;  divisor         2    0[BANK0 ] int 
 15647 ;;  dividend        2    2[BANK0 ] int 
 15648 ;; Auto vars:     Size  Location     Type
 15649 ;;  quotient        2    7[BANK0 ] int 
 15650 ;;  sign            1    6[BANK0 ] unsigned char 
 15651 ;;  counter         1    5[BANK0 ] unsigned char 
 15652 ;; Return value:  Size  Location     Type
 15653 ;;                  2    0[BANK0 ] int 
 15654 ;; Registers used:
 15655 ;;		wreg, status,2, status,0
 15656 ;; Tracked objects:
 15657 ;;		On entry : 0/0
 15658 ;;		On exit  : 0/0
 15659 ;;		Unchanged: 0/0
 15660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15661 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15662 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15663 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15664 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15665 ;;Total ram usage:        9 bytes
 15666 ;; Hardware stack levels used:    1
 15667 ;; Hardware stack levels required when called:    5
 15668 ;; This function calls:
 15669 ;;		Nothing
 15670 ;; This function is called by:
 15671 ;;		_setBuz
 15672 ;; This function uses a non-reentrant model
 15673 ;;
 15674                           
 15675                           
 15676                           ;psect for function ___awdiv
 15677  1595                     ___awdiv:	
 15678                           
 15679                           ;incstack = 0
 15680                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 15681  1595  0020               	movlb	0	; select bank0
 15682  1596  01A6               	clrf	___awdiv@sign
 15683  1597  1FA1               	btfss	___awdiv@divisor+1,7
 15684  1598  2DA0               	goto	l8323
 15685  1599  09A0               	comf	___awdiv@divisor,f
 15686  159A  09A1               	comf	___awdiv@divisor+1,f
 15687  159B  0AA0               	incf	___awdiv@divisor,f
 15688  159C  1903               	skipnz
 15689  159D  0AA1               	incf	___awdiv@divisor+1,f
 15690  159E  01A6               	clrf	___awdiv@sign
 15691  159F  0AA6               	incf	___awdiv@sign,f
 15692  15A0                     l8323:	
 15693  15A0  1FA3               	btfss	___awdiv@dividend+1,7
 15694  15A1  2DAB               	goto	l8329
 15695  15A2  09A2               	comf	___awdiv@dividend,f
 15696  15A3  09A3               	comf	___awdiv@dividend+1,f
 15697  15A4  0AA2               	incf	___awdiv@dividend,f
 15698  15A5  1903               	skipnz
 15699  15A6  0AA3               	incf	___awdiv@dividend+1,f
 15700  15A7  3001               	movlw	1
 15701  15A8  00A4               	movwf	??___awdiv
 15702  15A9  0824               	movf	??___awdiv,w
 15703  15AA  06A6               	xorwf	___awdiv@sign,f
 15704  15AB                     l8329:	
 15705  15AB  01A7               	clrf	___awdiv@quotient
 15706  15AC  01A8               	clrf	___awdiv@quotient+1
 15707  15AD  0821               	movf	___awdiv@divisor+1,w
 15708  15AE  0420               	iorwf	___awdiv@divisor,w
 15709  15AF  1903               	skipnz
 15710  15B0  2DDA               	goto	l8351
 15711  15B1  01A5               	clrf	___awdiv@counter
 15712  15B2  0AA5               	incf	___awdiv@counter,f
 15713  15B3                     l8339:	
 15714  15B3  1BA1               	btfsc	___awdiv@divisor+1,7
 15715  15B4  2DBF               	goto	l8341
 15716  15B5  3001               	movlw	1
 15717  15B6                     u8505:	
 15718  15B6  35A0               	lslf	___awdiv@divisor,f
 15719  15B7  0DA1               	rlf	___awdiv@divisor+1,f
 15720  15B8  0B89               	decfsz	9,f
 15721  15B9  2DB6               	goto	u8505
 15722  15BA  3001               	movlw	1
 15723  15BB  00A4               	movwf	??___awdiv
 15724  15BC  0824               	movf	??___awdiv,w
 15725  15BD  07A5               	addwf	___awdiv@counter,f
 15726  15BE  2DB3               	goto	l8339
 15727  15BF                     l8341:	
 15728  15BF  3001               	movlw	1
 15729  15C0                     u8525:	
 15730  15C0  35A7               	lslf	___awdiv@quotient,f
 15731  15C1  0DA8               	rlf	___awdiv@quotient+1,f
 15732  15C2  0B89               	decfsz	9,f
 15733  15C3  2DC0               	goto	u8525
 15734  15C4  0821               	movf	___awdiv@divisor+1,w
 15735  15C5  0223               	subwf	___awdiv@dividend+1,w
 15736  15C6  1D03               	skipz
 15737  15C7  2DCA               	goto	u8535
 15738  15C8  0820               	movf	___awdiv@divisor,w
 15739  15C9  0222               	subwf	___awdiv@dividend,w
 15740  15CA                     u8535:	
 15741  15CA  1C03               	skipc
 15742  15CB  2DD1               	goto	l8347
 15743  15CC  0820               	movf	___awdiv@divisor,w
 15744  15CD  02A2               	subwf	___awdiv@dividend,f
 15745  15CE  0821               	movf	___awdiv@divisor+1,w
 15746  15CF  3BA3               	subwfb	___awdiv@dividend+1,f
 15747  15D0  1427               	bsf	___awdiv@quotient,0
 15748  15D1                     l8347:	
 15749  15D1  3001               	movlw	1
 15750  15D2                     u8545:	
 15751  15D2  36A1               	lsrf	___awdiv@divisor+1,f
 15752  15D3  0CA0               	rrf	___awdiv@divisor,f
 15753  15D4  0B89               	decfsz	9,f
 15754  15D5  2DD2               	goto	u8545
 15755  15D6  3001               	movlw	1
 15756  15D7  02A5               	subwf	___awdiv@counter,f
 15757  15D8  1D03               	btfss	3,2
 15758  15D9  2DBF               	goto	l8341
 15759  15DA                     l8351:	
 15760  15DA  0826               	movf	___awdiv@sign,w
 15761  15DB  1903               	btfsc	3,2
 15762  15DC  2DE2               	goto	l8355
 15763  15DD  09A7               	comf	___awdiv@quotient,f
 15764  15DE  09A8               	comf	___awdiv@quotient+1,f
 15765  15DF  0AA7               	incf	___awdiv@quotient,f
 15766  15E0  1903               	skipnz
 15767  15E1  0AA8               	incf	___awdiv@quotient+1,f
 15768  15E2                     l8355:	
 15769  15E2  0828               	movf	___awdiv@quotient+1,w
 15770  15E3  01A1               	clrf	?___awdiv+1
 15771  15E4  07A1               	addwf	?___awdiv+1,f
 15772  15E5  0827               	movf	___awdiv@quotient,w
 15773  15E6  01A0               	clrf	?___awdiv
 15774  15E7  07A0               	addwf	?___awdiv,f
 15775  15E8  0008               	return
 15776  15E9                     __end_of___awdiv:	
 15777                           
 15778                           	psect	text97
 15779  1C84                     __ptext97:	
 15780 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 15781 ;; Defined at:
 15782 ;;		line 502 in file "../src/Dimmer_B1.c"
 15783 ;; Parameters:    Size  Location     Type
 15784 ;;		None
 15785 ;; Auto vars:     Size  Location     Type
 15786 ;;  adjgo           1    1[BANK0 ] unsigned char 
 15787 ;; Return value:  Size  Location     Type
 15788 ;;                  1    wreg      unsigned char 
 15789 ;; Registers used:
 15790 ;;		wreg, status,2
 15791 ;; Tracked objects:
 15792 ;;		On entry : 0/0
 15793 ;;		On exit  : 0/0
 15794 ;;		Unchanged: 0/0
 15795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15797 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15798 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15799 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15800 ;;Total ram usage:        3 bytes
 15801 ;; Hardware stack levels used:    1
 15802 ;; Hardware stack levels required when called:    5
 15803 ;; This function calls:
 15804 ;;		Nothing
 15805 ;; This function is called by:
 15806 ;;		_setDimmerLights_SwOn
 15807 ;;		_setDimmerLights_AdjControl
 15808 ;;		_Load_Main
 15809 ;; This function uses a non-reentrant model
 15810 ;;
 15811                           
 15812                           
 15813                           ;psect for function _getAll_DimmerLights_AdjGO
 15814  1C84                     _getAll_DimmerLights_AdjGO:	
 15815                           
 15816                           ;Dimmer_B1.c: 503: char adjgo = 0;
 15817                           
 15818                           ;incstack = 0
 15819                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 15820  1C84  0020               	movlb	0	; select bank0
 15821  1C85  01A1               	clrf	getAll_DimmerLights_AdjGO@adjgo
 15822                           
 15823                           ;Dimmer_B1.c: 508: adjgo = DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1 ? 1 : 0;
 15824  1C86  01A2               	clrf	_getAll_DimmerLights_AdjGO$2562
 15825  1C87  0AA2               	incf	_getAll_DimmerLights_AdjGO$2562,f
 15826  1C88  0023               	movlb	3	; select bank3
 15827  1C89  1DC6               	btfss	(_DimmerLights1^(0+384)+8),3
 15828  1C8A  19D5               	btfsc	(_DimmerLights2^(0+384)+8),3
 15829  1C8B  2C8E               	goto	l8423
 15830  1C8C  0020               	movlb	0	; select bank0
 15831  1C8D  01A2               	clrf	_getAll_DimmerLights_AdjGO$2562
 15832  1C8E                     l8423:	
 15833  1C8E  0020               	movlb	0	; select bank0
 15834  1C8F  0822               	movf	_getAll_DimmerLights_AdjGO$2562,w
 15835  1C90  00A0               	movwf	??_getAll_DimmerLights_AdjGO
 15836  1C91  0820               	movf	??_getAll_DimmerLights_AdjGO,w
 15837  1C92  00A1               	movwf	getAll_DimmerLights_AdjGO@adjgo
 15838                           
 15839                           ;Dimmer_B1.c: 513: return adjgo;
 15840  1C93  0821               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 15841  1C94  0008               	return
 15842  1C95                     __end_of_getAll_DimmerLights_AdjGO:	
 15843                           
 15844                           	psect	text98
 15845  146C                     __ptext98:	
 15846 ;; *************** function _setDimmerLights_SwOff *****************
 15847 ;; Defined at:
 15848 ;;		line 536 in file "../src/Dimmer_B1.c"
 15849 ;; Parameters:    Size  Location     Type
 15850 ;;  sw              1    wreg     unsigned char 
 15851 ;; Auto vars:     Size  Location     Type
 15852 ;;  sw              1   16[BANK0 ] unsigned char 
 15853 ;;  command         1   15[BANK0 ] unsigned char 
 15854 ;; Return value:  Size  Location     Type
 15855 ;;		None               void
 15856 ;; Registers used:
 15857 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15858 ;; Tracked objects:
 15859 ;;		On entry : 0/0
 15860 ;;		On exit  : 0/0
 15861 ;;		Unchanged: 0/0
 15862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15864 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15866 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15867 ;;Total ram usage:        2 bytes
 15868 ;; Hardware stack levels used:    1
 15869 ;; Hardware stack levels required when called:    8
 15870 ;; This function calls:
 15871 ;;		_DimmerLightsPointSelect
 15872 ;;		_setDelayOff_GO
 15873 ;;		_setDimmerLights_Trigger
 15874 ;;		_setDimmerLights_TriggerAdj
 15875 ;; This function is called by:
 15876 ;;		_DlyOff_Main
 15877 ;;		_setDimmerLights_ErrorClose
 15878 ;;		_setRFSW_Control
 15879 ;;		_setSw_Main
 15880 ;; This function uses a non-reentrant model
 15881 ;;
 15882                           
 15883                           
 15884                           ;psect for function _setDimmerLights_SwOff
 15885  146C                     _setDimmerLights_SwOff:	
 15886                           
 15887                           ;incstack = 0
 15888                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15889                           ;setDimmerLights_SwOff@sw stored from wreg
 15890  146C  0020               	movlb	0	; select bank0
 15891  146D  00B0               	movwf	setDimmerLights_SwOff@sw
 15892                           
 15893                           ;Dimmer_B1.c: 537: DimmerLightsPointSelect(sw);
 15894  146E  0830               	movf	setDimmerLights_SwOff@sw,w
 15895  146F  319C  24FE  3194   	fcall	_DimmerLightsPointSelect
 15896                           
 15897                           ;Dimmer_B1.c: 538: char command = DimmerLights->Status == 1 ? 1 : 0;
 15898  1472  0020               	movlb	0	; select bank0
 15899  1473  086F               	movf	_DimmerLights,w
 15900  1474  0086               	movwf	6
 15901  1475  3001               	movlw	1	; select bank2/3
 15902  1476  0087               	movwf	7
 15903  1477  3000               	movlw	0
 15904  1478  1A81               	btfsc	1,5
 15905  1479  3001               	movlw	1
 15906  147A  00AF               	movwf	setDimmerLights_SwOff@command
 15907                           
 15908                           ;Dimmer_B1.c: 539: if (DimmerLights->SwFlag == 1) {
 15909  147B  086F               	movf	_DimmerLights,w
 15910  147C  3E09               	addlw	9
 15911  147D  0086               	movwf	6
 15912  147E  3001               	movlw	1	; select bank2/3
 15913  147F  0087               	movwf	7
 15914  1480  1F01               	btfss	1,6
 15915  1481  0008               	return
 15916                           
 15917                           ;Dimmer_B1.c: 540: DimmerLights->SwFlag = 0;
 15918  1482  086F               	movf	_DimmerLights,w
 15919  1483  3E09               	addlw	9
 15920  1484  0086               	movwf	6
 15921  1485  3001               	movlw	1	; select bank2/3
 15922  1486  0087               	movwf	7
 15923  1487  1301               	bcf	1,6
 15924                           
 15925                           ;Dimmer_B1.c: 541: if (DimmerLights->Status == 1) {
 15926  1488  086F               	movf	_DimmerLights,w
 15927  1489  0086               	movwf	6
 15928  148A  3001               	movlw	1	; select bank2/3
 15929  148B  0087               	movwf	7
 15930  148C  1E81               	btfss	1,5
 15931  148D  2CA0               	goto	l8489
 15932                           
 15933                           ;Dimmer_B1.c: 542: if (DimmerLights->SwAdj == 1) {
 15934  148E  086F               	movf	_DimmerLights,w
 15935  148F  3E09               	addlw	9
 15936  1490  0086               	movwf	6
 15937  1491  3001               	movlw	1	; select bank2/3
 15938  1492  0087               	movwf	7
 15939  1493  1F81               	btfss	1,7
 15940  1494  0008               	return
 15941                           
 15942                           ;Dimmer_B1.c: 543: DimmerLights->SwAdj = 0;
 15943  1495  086F               	movf	_DimmerLights,w
 15944  1496  3E09               	addlw	9
 15945  1497  0086               	movwf	6
 15946  1498  3001               	movlw	1	; select bank2/3
 15947  1499  0087               	movwf	7
 15948  149A  1381               	bcf	1,7
 15949                           
 15950                           ;Dimmer_B1.c: 544: setDimmerLights_TriggerAdj(sw, 0);
 15951  149B  01A2               	clrf	setDimmerLights_TriggerAdj@command
 15952  149C  0830               	movf	setDimmerLights_SwOff@sw,w
 15953  149D  319F  2714         	fcall	_setDimmerLights_TriggerAdj
 15954                           
 15955                           ;Dimmer_B1.c: 548: }
 15956                           ;Dimmer_B1.c: 549: } else {
 15957  149F  0008               	return
 15958  14A0                     l8489:	
 15959                           
 15960                           ;Dimmer_B1.c: 550: setDimmerLights_Trigger(sw, 0);
 15961  14A0  0020               	movlb	0	; select bank0
 15962  14A1  01A2               	clrf	setDimmerLights_Trigger@command
 15963  14A2  0830               	movf	setDimmerLights_SwOff@sw,w
 15964  14A3  319E  26B8  3194   	fcall	_setDimmerLights_Trigger
 15965                           
 15966                           ;Dimmer_B1.c: 551: setDelayOff_GO(sw, 0, 0);
 15967  14A6  0020               	movlb	0	; select bank0
 15968  14A7  01AA               	clrf	setDelayOff_GO@command
 15969  14A8  01AB               	clrf	setDelayOff_GO@value
 15970  14A9  0830               	movf	setDimmerLights_SwOff@sw,w
 15971  14AA  3188  20CA         	fcall	_setDelayOff_GO
 15972  14AC  0008               	return
 15973  14AD                     __end_of_setDimmerLights_SwOff:	
 15974                           
 15975                           	psect	text99
 15976  1F14                     __ptext99:	
 15977 ;; *************** function _setDimmerLights_TriggerAdj *****************
 15978 ;; Defined at:
 15979 ;;		line 788 in file "../src/Dimmer_B1.c"
 15980 ;; Parameters:    Size  Location     Type
 15981 ;;  lights          1    wreg     unsigned char 
 15982 ;;  command         1    2[BANK0 ] unsigned char 
 15983 ;; Auto vars:     Size  Location     Type
 15984 ;;  lights          1    4[BANK0 ] unsigned char 
 15985 ;; Return value:  Size  Location     Type
 15986 ;;		None               void
 15987 ;; Registers used:
 15988 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15989 ;; Tracked objects:
 15990 ;;		On entry : 0/0
 15991 ;;		On exit  : 0/0
 15992 ;;		Unchanged: 0/0
 15993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15994 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15995 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15996 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15997 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15998 ;;Total ram usage:        3 bytes
 15999 ;; Hardware stack levels used:    1
 16000 ;; Hardware stack levels required when called:    6
 16001 ;; This function calls:
 16002 ;;		_DimmerLightsPointSelect
 16003 ;; This function is called by:
 16004 ;;		_setDimmerLights_SwOff
 16005 ;;		_setDimmerLights_AdjControl
 16006 ;; This function uses a non-reentrant model
 16007 ;;
 16008                           
 16009                           
 16010                           ;psect for function _setDimmerLights_TriggerAdj
 16011  1F14                     _setDimmerLights_TriggerAdj:	
 16012                           
 16013                           ;incstack = 0
 16014                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16015                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 16016  1F14  0020               	movlb	0	; select bank0
 16017  1F15  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 16018                           
 16019                           ;Dimmer_B1.c: 789: DimmerLightsPointSelect(lights);
 16020  1F16  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 16021  1F17  319C  24FE         	fcall	_DimmerLightsPointSelect
 16022                           
 16023                           ;Dimmer_B1.c: 790: DimmerLights->TriggerAdj = 1;
 16024  1F19  0020               	movlb	0	; select bank0
 16025  1F1A  086F               	movf	_DimmerLights,w
 16026  1F1B  3E08               	addlw	8
 16027  1F1C  0086               	movwf	6
 16028  1F1D  3001               	movlw	1	; select bank2/3
 16029  1F1E  0087               	movwf	7
 16030  1F1F  1601               	bsf	1,4
 16031                           
 16032                           ;Dimmer_B1.c: 791: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 16033  1F20  0822               	movf	setDimmerLights_TriggerAdj@command,w
 16034  1F21  3A01               	xorlw	1
 16035  1F22  3000               	movlw	0
 16036  1F23  1903               	skipnz
 16037  1F24  3001               	movlw	1
 16038  1F25  00A3               	movwf	??_setDimmerLights_TriggerAdj
 16039  1F26  086F               	movf	_DimmerLights,w
 16040  1F27  3E08               	addlw	8
 16041  1F28  0086               	movwf	6
 16042  1F29  3001               	movlw	1	; select bank2/3
 16043  1F2A  0087               	movwf	7
 16044  1F2B  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16045  1F2C  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16046  1F2D  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16047  1F2E  0801               	movf	1,w
 16048  1F2F  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 16049  1F30  39F7               	andlw	-9
 16050  1F31  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 16051  1F32  0081               	movwf	1
 16052  1F33  0008               	return
 16053  1F34                     __end_of_setDimmerLights_TriggerAdj:	
 16054                           
 16055                           	psect	text100
 16056  1EB8                     __ptext100:	
 16057 ;; *************** function _setDimmerLights_Trigger *****************
 16058 ;; Defined at:
 16059 ;;		line 782 in file "../src/Dimmer_B1.c"
 16060 ;; Parameters:    Size  Location     Type
 16061 ;;  lights          1    wreg     unsigned char 
 16062 ;;  command         1    2[BANK0 ] unsigned char 
 16063 ;; Auto vars:     Size  Location     Type
 16064 ;;  lights          1    4[BANK0 ] unsigned char 
 16065 ;; Return value:  Size  Location     Type
 16066 ;;		None               void
 16067 ;; Registers used:
 16068 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16069 ;; Tracked objects:
 16070 ;;		On entry : 0/0
 16071 ;;		On exit  : 0/0
 16072 ;;		Unchanged: 0/0
 16073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16074 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16075 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16076 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16077 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16078 ;;Total ram usage:        3 bytes
 16079 ;; Hardware stack levels used:    1
 16080 ;; Hardware stack levels required when called:    6
 16081 ;; This function calls:
 16082 ;;		_DimmerLightsPointSelect
 16083 ;; This function is called by:
 16084 ;;		_setDimmerLights_SwOn
 16085 ;;		_setDimmerLights_SwOff
 16086 ;; This function uses a non-reentrant model
 16087 ;;
 16088                           
 16089                           
 16090                           ;psect for function _setDimmerLights_Trigger
 16091  1EB8                     _setDimmerLights_Trigger:	
 16092                           
 16093                           ;incstack = 0
 16094                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16095                           ;setDimmerLights_Trigger@lights stored from wreg
 16096  1EB8  0020               	movlb	0	; select bank0
 16097  1EB9  00A4               	movwf	setDimmerLights_Trigger@lights
 16098                           
 16099                           ;Dimmer_B1.c: 783: DimmerLightsPointSelect(lights);
 16100  1EBA  0824               	movf	setDimmerLights_Trigger@lights,w
 16101  1EBB  319C  24FE         	fcall	_DimmerLightsPointSelect
 16102                           
 16103                           ;Dimmer_B1.c: 784: DimmerLights->Trigger = 1;
 16104  1EBD  0020               	movlb	0	; select bank0
 16105  1EBE  086F               	movf	_DimmerLights,w
 16106  1EBF  3E08               	addlw	8
 16107  1EC0  0086               	movwf	6
 16108  1EC1  3001               	movlw	1	; select bank2/3
 16109  1EC2  0087               	movwf	7
 16110  1EC3  1501               	bsf	1,2
 16111                           
 16112                           ;Dimmer_B1.c: 785: DimmerLights->Switch = command == 1 ? 1 : 0;
 16113  1EC4  0822               	movf	setDimmerLights_Trigger@command,w
 16114  1EC5  3A01               	xorlw	1
 16115  1EC6  3000               	movlw	0
 16116  1EC7  1903               	skipnz
 16117  1EC8  3001               	movlw	1
 16118  1EC9  00A3               	movwf	??_setDimmerLights_Trigger
 16119  1ECA  086F               	movf	_DimmerLights,w
 16120  1ECB  3E08               	addlw	8
 16121  1ECC  0086               	movwf	6
 16122  1ECD  3001               	movlw	1	; select bank2/3
 16123  1ECE  0087               	movwf	7
 16124  1ECF  0DA3               	rlf	??_setDimmerLights_Trigger,f
 16125  1ED0  0801               	movf	1,w
 16126  1ED1  0623               	xorwf	??_setDimmerLights_Trigger,w
 16127  1ED2  39FD               	andlw	-3
 16128  1ED3  0623               	xorwf	??_setDimmerLights_Trigger,w
 16129  1ED4  0081               	movwf	1
 16130  1ED5  0008               	return
 16131  1ED6                     __end_of_setDimmerLights_Trigger:	
 16132                           
 16133                           	psect	text101
 16134  08CA                     __ptext101:	
 16135 ;; *************** function _setDelayOff_GO *****************
 16136 ;; Defined at:
 16137 ;;		line 86 in file "../src/DelayOff_B1.c"
 16138 ;; Parameters:    Size  Location     Type
 16139 ;;  sw              1    wreg     unsigned char 
 16140 ;;  command         1   10[BANK0 ] unsigned char 
 16141 ;;  value           1   11[BANK0 ] unsigned char 
 16142 ;; Auto vars:     Size  Location     Type
 16143 ;;  sw              1   14[BANK0 ] unsigned char 
 16144 ;; Return value:  Size  Location     Type
 16145 ;;		None               void
 16146 ;; Registers used:
 16147 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16148 ;; Tracked objects:
 16149 ;;		On entry : 0/0
 16150 ;;		On exit  : 0/0
 16151 ;;		Unchanged: 0/0
 16152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16153 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16154 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16155 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16156 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16157 ;;Total ram usage:        5 bytes
 16158 ;; Hardware stack levels used:    1
 16159 ;; Hardware stack levels required when called:    7
 16160 ;; This function calls:
 16161 ;;		_DelayOffPointSelect
 16162 ;;		_DelayTimejudge
 16163 ;; This function is called by:
 16164 ;;		_setDimmerLights_SwOff
 16165 ;;		_setRFSW_Control
 16166 ;; This function uses a non-reentrant model
 16167 ;;
 16168                           
 16169                           
 16170                           ;psect for function _setDelayOff_GO
 16171  08CA                     _setDelayOff_GO:	
 16172                           
 16173                           ;incstack = 0
 16174                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16175                           ;setDelayOff_GO@sw stored from wreg
 16176  08CA  0020               	movlb	0	; select bank0
 16177  08CB  00AE               	movwf	setDelayOff_GO@sw
 16178                           
 16179                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
 16180  08CC  082E               	movf	setDelayOff_GO@sw,w
 16181  08CD  319D  255E  3188   	fcall	_DelayOffPointSelect
 16182                           
 16183                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
 16184  08D0  0878               	movf	_DelayOff,w
 16185  08D1  0086               	movwf	6
 16186  08D2  3001               	movlw	1	; select bank2/3
 16187  08D3  0087               	movwf	7
 16188  08D4  1C01               	btfss	1,0
 16189  08D5  0008               	return
 16190                           
 16191                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
 16192  08D6  0020               	movlb	0	; select bank0
 16193  08D7  082A               	movf	setDelayOff_GO@command,w
 16194  08D8  3A01               	xorlw	1
 16195  08D9  3000               	movlw	0
 16196  08DA  1903               	skipnz
 16197  08DB  3001               	movlw	1
 16198  08DC  00AC               	movwf	??_setDelayOff_GO
 16199  08DD  0878               	movf	_DelayOff,w
 16200  08DE  0086               	movwf	6
 16201  08DF  3001               	movlw	1	; select bank2/3
 16202  08E0  0087               	movwf	7
 16203  08E1  0DAC               	rlf	??_setDelayOff_GO,f
 16204  08E2  0801               	movf	1,w
 16205  08E3  062C               	xorwf	??_setDelayOff_GO,w
 16206  08E4  39FD               	andlw	-3
 16207  08E5  062C               	xorwf	??_setDelayOff_GO,w
 16208  08E6  0081               	movwf	1
 16209                           
 16210                           ;DelayOff_B1.c: 90: if (command == 1) {
 16211  08E7  082A               	movf	setDelayOff_GO@command,w
 16212  08E8  3A01               	xorlw	1
 16213  08E9  1D03               	skipz
 16214  08EA  2915               	goto	l8407
 16215                           
 16216                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
 16217  08EB  082B               	movf	setDelayOff_GO@value,w
 16218  08EC  3191  2148  3188   	fcall	_DelayTimejudge
 16219  08EF  0020               	movlb	0	; select bank0
 16220  08F0  00AC               	movwf	??_setDelayOff_GO
 16221  08F1  0878               	movf	_DelayOff,w
 16222  08F2  0086               	movwf	6
 16223  08F3  3001               	movlw	1	; select bank2/3
 16224  08F4  0087               	movwf	7
 16225  08F5  082C               	movf	??_setDelayOff_GO,w
 16226  08F6  0081               	movwf	1
 16227                           
 16228                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 16229  08F7  300F               	movlw	15
 16230  08F8  052B               	andwf	setDelayOff_GO@value,w
 16231  08F9  00AC               	movwf	??_setDelayOff_GO
 16232  08FA  082C               	movf	??_setDelayOff_GO,w
 16233  08FB  3A05               	xorlw	5
 16234  08FC  1903               	skipnz
 16235  08FD  2902               	goto	l8401
 16236  08FE  082B               	movf	setDelayOff_GO@value,w
 16237  08FF  390F               	andlw	15
 16238  0900  1D03               	btfss	3,2
 16239  0901  2908               	goto	l8405
 16240  0902                     l8401:	
 16241  0902  3026               	movlw	38
 16242  0903  022B               	subwf	setDelayOff_GO@value,w
 16243  0904  1803               	skipnc
 16244  0905  2908               	goto	l8405
 16245                           
 16246                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
 16247  0906  082B               	movf	setDelayOff_GO@value,w
 16248  0907  2909               	goto	L9
 16249  0908                     l8405:	
 16250                           ;DelayOff_B1.c: 94: } else {
 16251                           
 16252                           
 16253                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
 16254  0908  3005               	movlw	5
 16255  0909                     L9:	
 16256  0909  00AC               	movwf	??_setDelayOff_GO
 16257  090A  082E               	movf	setDelayOff_GO@sw,w
 16258  090B  3E1A               	addlw	26
 16259  090C  076E               	addwf	_product,w
 16260  090D  00AD               	movwf	??_setDelayOff_GO+1
 16261  090E  082D               	movf	??_setDelayOff_GO+1,w
 16262  090F  0086               	movwf	6
 16263  0910  3002               	movlw	2	; select bank4/5
 16264  0911  0087               	movwf	7
 16265  0912  082C               	movf	??_setDelayOff_GO,w
 16266  0913  0081               	movwf	1
 16267                           
 16268                           ;DelayOff_B1.c: 96: }
 16269                           ;DelayOff_B1.c: 97: } else {
 16270  0914  291E               	goto	l8409
 16271  0915                     l8407:	
 16272                           
 16273                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
 16274  0915  082E               	movf	setDelayOff_GO@sw,w
 16275  0916  3E1A               	addlw	26
 16276  0917  076E               	addwf	_product,w
 16277  0918  00AC               	movwf	??_setDelayOff_GO
 16278  0919  082C               	movf	??_setDelayOff_GO,w
 16279  091A  0086               	movwf	6
 16280  091B  3002               	movlw	2	; select bank4/5
 16281  091C  0087               	movwf	7
 16282  091D  0181               	clrf	1
 16283  091E                     l8409:	
 16284                           
 16285                           ;DelayOff_B1.c: 99: }
 16286                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
 16287  091E  0878               	movf	_DelayOff,w
 16288  091F  0086               	movwf	6
 16289  0920  3001               	movlw	1	; select bank2/3
 16290  0921  0087               	movwf	7
 16291  0922  3000               	movlw	0
 16292  0923  3FC0               	movwi [0]fsr1
 16293  0924  3FC1               	movwi [1]fsr1
 16294                           
 16295                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
 16296  0925  0878               	movf	_DelayOff,w
 16297  0926  0086               	movwf	6
 16298  0927  3001               	movlw	1	; select bank2/3
 16299  0928  0087               	movwf	7
 16300  0929  0181               	clrf	1
 16301  092A  0008               	return
 16302  092B                     __end_of_setDelayOff_GO:	
 16303                           
 16304                           	psect	text102
 16305  1148                     __ptext102:	
 16306 ;; *************** function _DelayTimejudge *****************
 16307 ;; Defined at:
 16308 ;;		line 106 in file "../src/DelayOff_B1.c"
 16309 ;; Parameters:    Size  Location     Type
 16310 ;;  value           1    wreg     unsigned char 
 16311 ;; Auto vars:     Size  Location     Type
 16312 ;;  value           1    9[BANK0 ] unsigned char 
 16313 ;;  k               1    8[BANK0 ] unsigned char 
 16314 ;;  j               1    7[BANK0 ] unsigned char 
 16315 ;;  i               1    6[BANK0 ] unsigned char 
 16316 ;; Return value:  Size  Location     Type
 16317 ;;                  1    wreg      unsigned char 
 16318 ;; Registers used:
 16319 ;;		wreg, status,2, status,0, pclath, cstack
 16320 ;; Tracked objects:
 16321 ;;		On entry : 0/0
 16322 ;;		On exit  : 0/0
 16323 ;;		Unchanged: 0/0
 16324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16326 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16327 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16328 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16329 ;;Total ram usage:        6 bytes
 16330 ;; Hardware stack levels used:    1
 16331 ;; Hardware stack levels required when called:    6
 16332 ;; This function calls:
 16333 ;;		___bmul
 16334 ;; This function is called by:
 16335 ;;		_setDelayOff_GO
 16336 ;; This function uses a non-reentrant model
 16337 ;;
 16338                           
 16339                           
 16340                           ;psect for function _DelayTimejudge
 16341  1148                     _DelayTimejudge:	
 16342                           
 16343                           ;incstack = 0
 16344                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16345                           ;DelayTimejudge@value stored from wreg
 16346  1148  0020               	movlb	0	; select bank0
 16347  1149  00A9               	movwf	DelayTimejudge@value
 16348                           
 16349                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
 16350  114A  3005               	movlw	5
 16351  114B  00A4               	movwf	??_DelayTimejudge
 16352  114C  0824               	movf	??_DelayTimejudge,w
 16353  114D  00A6               	movwf	DelayTimejudge@i
 16354  114E  01A7               	clrf	DelayTimejudge@j
 16355  114F  01A8               	clrf	DelayTimejudge@k
 16356                           
 16357                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
 16358  1150  3031               	movlw	49
 16359  1151  0229               	subwf	DelayTimejudge@value,w
 16360  1152  1803               	skipnc
 16361  1153  2970               	goto	l8305
 16362                           
 16363                           ;DelayOff_B1.c: 109: j = value & 0x0f;
 16364  1154  0829               	movf	DelayTimejudge@value,w
 16365  1155  390F               	andlw	15
 16366  1156  00A4               	movwf	??_DelayTimejudge
 16367  1157  0824               	movf	??_DelayTimejudge,w
 16368  1158  00A7               	movwf	DelayTimejudge@j
 16369                           
 16370                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
 16371  1159  0829               	movf	DelayTimejudge@value,w
 16372  115A  00A4               	movwf	??_DelayTimejudge
 16373  115B  3004               	movlw	4
 16374  115C                     u8445:	
 16375  115C  36A4               	lsrf	??_DelayTimejudge,f
 16376  115D  0B89               	decfsz	9,f
 16377  115E  295C               	goto	u8445
 16378  115F  0824               	movf	??_DelayTimejudge,w
 16379  1160  390F               	andlw	15
 16380  1161  00A5               	movwf	??_DelayTimejudge+1
 16381  1162  0825               	movf	??_DelayTimejudge+1,w
 16382  1163  00A8               	movwf	DelayTimejudge@k
 16383                           
 16384                           ;DelayOff_B1.c: 111: i = j + (k * 10);
 16385  1164  300A               	movlw	10
 16386  1165  00A4               	movwf	??_DelayTimejudge
 16387  1166  0824               	movf	??_DelayTimejudge,w
 16388  1167  00A0               	movwf	___bmul@multiplicand
 16389  1168  0828               	movf	DelayTimejudge@k,w
 16390  1169  319C  24DA         	fcall	___bmul
 16391  116B  0020               	movlb	0	; select bank0
 16392  116C  0727               	addwf	DelayTimejudge@j,w
 16393  116D  00A5               	movwf	??_DelayTimejudge+1
 16394  116E  0825               	movf	??_DelayTimejudge+1,w
 16395  116F  00A6               	movwf	DelayTimejudge@i
 16396  1170                     l8305:	
 16397                           
 16398                           ;DelayOff_B1.c: 112: }
 16399                           ;DelayOff_B1.c: 133: return i;
 16400  1170  0826               	movf	DelayTimejudge@i,w
 16401  1171  0008               	return
 16402  1172                     __end_of_DelayTimejudge:	
 16403                           
 16404                           	psect	text103
 16405  1CDA                     __ptext103:	
 16406 ;; *************** function ___bmul *****************
 16407 ;; Defined at:
 16408 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16409 ;; Parameters:    Size  Location     Type
 16410 ;;  multiplier      1    wreg     unsigned char 
 16411 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16412 ;; Auto vars:     Size  Location     Type
 16413 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16414 ;;  product         1    2[BANK0 ] unsigned char 
 16415 ;; Return value:  Size  Location     Type
 16416 ;;                  1    wreg      unsigned char 
 16417 ;; Registers used:
 16418 ;;		wreg, status,2, status,0
 16419 ;; Tracked objects:
 16420 ;;		On entry : 0/0
 16421 ;;		On exit  : 0/0
 16422 ;;		Unchanged: 0/0
 16423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16424 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16425 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16426 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16427 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16428 ;;Total ram usage:        4 bytes
 16429 ;; Hardware stack levels used:    1
 16430 ;; Hardware stack levels required when called:    5
 16431 ;; This function calls:
 16432 ;;		Nothing
 16433 ;; This function is called by:
 16434 ;;		_DelayTimejudge
 16435 ;; This function uses a non-reentrant model
 16436 ;;
 16437                           
 16438                           
 16439                           ;psect for function ___bmul
 16440  1CDA                     ___bmul:	
 16441                           
 16442                           ;incstack = 0
 16443                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16444                           ;___bmul@multiplier stored from wreg
 16445  1CDA  0020               	movlb	0	; select bank0
 16446  1CDB  00A3               	movwf	___bmul@multiplier
 16447  1CDC  01A2               	clrf	___bmul@product
 16448  1CDD                     l8271:	
 16449  1CDD  1C23               	btfss	___bmul@multiplier,0
 16450  1CDE  2CE3               	goto	l8275
 16451  1CDF  0820               	movf	___bmul@multiplicand,w
 16452  1CE0  00A1               	movwf	??___bmul
 16453  1CE1  0821               	movf	??___bmul,w
 16454  1CE2  07A2               	addwf	___bmul@product,f
 16455  1CE3                     l8275:	
 16456  1CE3  1003               	clrc
 16457  1CE4  0DA0               	rlf	___bmul@multiplicand,f
 16458  1CE5  1003               	clrc
 16459  1CE6  0CA3               	rrf	___bmul@multiplier,f
 16460  1CE7  08A3               	movf	___bmul@multiplier,f
 16461  1CE8  1D03               	skipz
 16462  1CE9  2CDD               	goto	l8271
 16463  1CEA  0822               	movf	___bmul@product,w
 16464  1CEB  0008               	return
 16465  1CEC                     __end_of___bmul:	
 16466                           
 16467                           	psect	text104
 16468  1C74                     __ptext104:	
 16469 ;; *************** function _getDimmerLights_Status *****************
 16470 ;; Defined at:
 16471 ;;		line 457 in file "../src/Dimmer_B1.c"
 16472 ;; Parameters:    Size  Location     Type
 16473 ;;  lights          1    wreg     unsigned char 
 16474 ;; Auto vars:     Size  Location     Type
 16475 ;;  lights          1    2[BANK0 ] unsigned char 
 16476 ;;  status          1    3[BANK0 ] unsigned char 
 16477 ;; Return value:  Size  Location     Type
 16478 ;;                  1    wreg      unsigned char 
 16479 ;; Registers used:
 16480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16481 ;; Tracked objects:
 16482 ;;		On entry : 0/0
 16483 ;;		On exit  : 0/0
 16484 ;;		Unchanged: 0/0
 16485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16487 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16489 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16490 ;;Total ram usage:        2 bytes
 16491 ;; Hardware stack levels used:    1
 16492 ;; Hardware stack levels required when called:    6
 16493 ;; This function calls:
 16494 ;;		_DimmerLightsPointSelect
 16495 ;; This function is called by:
 16496 ;;		_DlyOff_Main
 16497 ;;		_setDimmerLights_ErrorClose
 16498 ;;		_setRFSW_Control
 16499 ;;		_setRFSW_AdjControl
 16500 ;;		_getMain_LightsStatus
 16501 ;; This function uses a non-reentrant model
 16502 ;;
 16503                           
 16504                           
 16505                           ;psect for function _getDimmerLights_Status
 16506  1C74                     _getDimmerLights_Status:	
 16507                           
 16508                           ;incstack = 0
 16509                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16510                           ;getDimmerLights_Status@lights stored from wreg
 16511  1C74  0020               	movlb	0	; select bank0
 16512  1C75  00A2               	movwf	getDimmerLights_Status@lights
 16513                           
 16514                           ;Dimmer_B1.c: 458: DimmerLightsPointSelect(lights);
 16515  1C76  0822               	movf	getDimmerLights_Status@lights,w
 16516  1C77  319C  24FE         	fcall	_DimmerLightsPointSelect
 16517                           
 16518                           ;Dimmer_B1.c: 459: char status = DimmerLights->Status == 1 ? 1 : 0;
 16519  1C79  0020               	movlb	0	; select bank0
 16520  1C7A  086F               	movf	_DimmerLights,w
 16521  1C7B  0086               	movwf	6
 16522  1C7C  3001               	movlw	1	; select bank2/3
 16523  1C7D  0087               	movwf	7
 16524  1C7E  3000               	movlw	0
 16525  1C7F  1A81               	btfsc	1,5
 16526  1C80  3001               	movlw	1
 16527  1C81  00A3               	movwf	getDimmerLights_Status@status
 16528                           
 16529                           ;Dimmer_B1.c: 460: return status;
 16530  1C82  0823               	movf	getDimmerLights_Status@status,w
 16531  1C83  0008               	return
 16532  1C84                     __end_of_getDimmerLights_Status:	
 16533                           
 16534                           	psect	text105
 16535  1CFE                     __ptext105:	
 16536 ;; *************** function _DimmerLightsPointSelect *****************
 16537 ;; Defined at:
 16538 ;;		line 322 in file "../src/Dimmer_B1.c"
 16539 ;; Parameters:    Size  Location     Type
 16540 ;;  lights          1    wreg     unsigned char 
 16541 ;; Auto vars:     Size  Location     Type
 16542 ;;  lights          1    1[BANK0 ] unsigned char 
 16543 ;; Return value:  Size  Location     Type
 16544 ;;		None               void
 16545 ;; Registers used:
 16546 ;;		wreg
 16547 ;; Tracked objects:
 16548 ;;		On entry : 0/0
 16549 ;;		On exit  : 0/0
 16550 ;;		Unchanged: 0/0
 16551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16553 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16554 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16555 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16556 ;;Total ram usage:        2 bytes
 16557 ;; Hardware stack levels used:    1
 16558 ;; Hardware stack levels required when called:    5
 16559 ;; This function calls:
 16560 ;;		Nothing
 16561 ;; This function is called by:
 16562 ;;		_setDimmerLights_Initialization
 16563 ;;		_setDimmerLights_Main
 16564 ;;		_getDimmerLights_Status
 16565 ;;		_setDimmerLights_SwOn
 16566 ;;		_setDimmerLights_SwOff
 16567 ;;		_setDimmerLights_AdjControl
 16568 ;;		_setDimmerLights_ErrorClose
 16569 ;;		_setDimmerLights
 16570 ;;		_setDimmerLights_Adj
 16571 ;;		_setDimmerLights_AdjRF
 16572 ;;		_setDimmerLights_Trigger
 16573 ;;		_setDimmerLights_TriggerAdj
 16574 ;;		_setDimmerLights_Status
 16575 ;;		_setDimmerLights_GO
 16576 ;;		_setDimmerLights_MaxmumValue
 16577 ;; This function uses a non-reentrant model
 16578 ;;
 16579                           
 16580                           
 16581                           ;psect for function _DimmerLightsPointSelect
 16582  1CFE                     _DimmerLightsPointSelect:	
 16583                           
 16584                           ;incstack = 0
 16585                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16586                           ;DimmerLightsPointSelect@lights stored from wreg
 16587  1CFE  0020               	movlb	0	; select bank0
 16588  1CFF  00A1               	movwf	DimmerLightsPointSelect@lights
 16589                           
 16590                           ;Dimmer_B1.c: 324: if (lights == 1) {
 16591  1D00  0821               	movf	DimmerLightsPointSelect@lights,w
 16592  1D01  3A01               	xorlw	1
 16593  1D02  1D03               	skipz
 16594  1D03  2D08               	goto	l768
 16595                           
 16596                           ;Dimmer_B1.c: 325: DimmerLights = &DimmerLights1;
 16597  1D04  30BE               	movlw	_DimmerLights1& (0+255)
 16598  1D05  00A0               	movwf	??_DimmerLightsPointSelect
 16599  1D06  0820               	movf	??_DimmerLightsPointSelect,w
 16600  1D07  00EF               	movwf	_DimmerLights
 16601  1D08                     l768:	
 16602                           
 16603                           ;Dimmer_B1.c: 326: }
 16604                           ;Dimmer_B1.c: 329: if (lights == 2) {
 16605  1D08  0821               	movf	DimmerLightsPointSelect@lights,w
 16606  1D09  3A02               	xorlw	2
 16607  1D0A  1D03               	skipz
 16608  1D0B  0008               	return
 16609                           
 16610                           ;Dimmer_B1.c: 330: DimmerLights = &DimmerLights2;
 16611  1D0C  30CD               	movlw	_DimmerLights2& (0+255)
 16612  1D0D  00A0               	movwf	??_DimmerLightsPointSelect
 16613  1D0E  0820               	movf	??_DimmerLightsPointSelect,w
 16614  1D0F  00EF               	movwf	_DimmerLights
 16615  1D10  0008               	return
 16616  1D11                     __end_of_DimmerLightsPointSelect:	
 16617                           
 16618                           	psect	text106
 16619  1B8C                     __ptext106:	
 16620 ;; *************** function _DelayOff_Initialization *****************
 16621 ;; Defined at:
 16622 ;;		line 26 in file "../src/DelayOff_B1.c"
 16623 ;; Parameters:    Size  Location     Type
 16624 ;;		None
 16625 ;; Auto vars:     Size  Location     Type
 16626 ;;		None
 16627 ;; Return value:  Size  Location     Type
 16628 ;;		None               void
 16629 ;; Registers used:
 16630 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16631 ;; Tracked objects:
 16632 ;;		On entry : 0/0
 16633 ;;		On exit  : 0/0
 16634 ;;		Unchanged: 0/0
 16635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16640 ;;Total ram usage:        0 bytes
 16641 ;; Hardware stack levels used:    1
 16642 ;; Hardware stack levels required when called:    7
 16643 ;; This function calls:
 16644 ;;		_DlyOff_Initialization
 16645 ;; This function is called by:
 16646 ;;		_main
 16647 ;; This function uses a non-reentrant model
 16648 ;;
 16649                           
 16650                           
 16651                           ;psect for function _DelayOff_Initialization
 16652  1B8C                     _DelayOff_Initialization:	
 16653                           
 16654                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16655                           
 16656                           ;incstack = 0
 16657                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16658  1B8C  3001               	movlw	1
 16659  1B8D  319B  23C6  319B   	fcall	_DlyOff_Initialization
 16660                           
 16661                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 16662  1B90  3002               	movlw	2
 16663  1B91  319B  23C6         	fcall	_DlyOff_Initialization
 16664  1B93  0008               	return
 16665  1B94                     __end_of_DelayOff_Initialization:	
 16666                           
 16667                           	psect	text107
 16668  1BC6                     __ptext107:	
 16669 ;; *************** function _DlyOff_Initialization *****************
 16670 ;; Defined at:
 16671 ;;		line 56 in file "../src/DelayOff_B1.c"
 16672 ;; Parameters:    Size  Location     Type
 16673 ;;  sw              1    wreg     unsigned char 
 16674 ;; Auto vars:     Size  Location     Type
 16675 ;;  sw              1    2[BANK0 ] unsigned char 
 16676 ;; Return value:  Size  Location     Type
 16677 ;;		None               void
 16678 ;; Registers used:
 16679 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16680 ;; Tracked objects:
 16681 ;;		On entry : 0/0
 16682 ;;		On exit  : 0/0
 16683 ;;		Unchanged: 0/0
 16684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16686 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16688 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16689 ;;Total ram usage:        1 bytes
 16690 ;; Hardware stack levels used:    1
 16691 ;; Hardware stack levels required when called:    6
 16692 ;; This function calls:
 16693 ;;		_DelayOffPointSelect
 16694 ;; This function is called by:
 16695 ;;		_DelayOff_Initialization
 16696 ;; This function uses a non-reentrant model
 16697 ;;
 16698                           
 16699                           
 16700                           ;psect for function _DlyOff_Initialization
 16701  1BC6                     _DlyOff_Initialization:	
 16702                           
 16703                           ;incstack = 0
 16704                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16705                           ;DlyOff_Initialization@sw stored from wreg
 16706  1BC6  0020               	movlb	0	; select bank0
 16707  1BC7  00A2               	movwf	DlyOff_Initialization@sw
 16708                           
 16709                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16710  1BC8  0822               	movf	DlyOff_Initialization@sw,w
 16711  1BC9  319D  255E         	fcall	_DelayOffPointSelect
 16712                           
 16713                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 16714  1BCB  0878               	movf	_DelayOff,w
 16715  1BCC  0086               	movwf	6
 16716  1BCD  3001               	movlw	1	; select bank2/3
 16717  1BCE  0087               	movwf	7
 16718  1BCF  1401               	bsf	1,0
 16719  1BD0  0008               	return
 16720  1BD1                     __end_of_DlyOff_Initialization:	
 16721                           
 16722                           	psect	text108
 16723  1D5E                     __ptext108:	
 16724 ;; *************** function _DelayOffPointSelect *****************
 16725 ;; Defined at:
 16726 ;;		line 7 in file "../src/DelayOff_B1.c"
 16727 ;; Parameters:    Size  Location     Type
 16728 ;;  sw              1    wreg     unsigned char 
 16729 ;; Auto vars:     Size  Location     Type
 16730 ;;  sw              1    1[BANK0 ] unsigned char 
 16731 ;; Return value:  Size  Location     Type
 16732 ;;		None               void
 16733 ;; Registers used:
 16734 ;;		wreg
 16735 ;; Tracked objects:
 16736 ;;		On entry : 0/0
 16737 ;;		On exit  : 0/0
 16738 ;;		Unchanged: 0/0
 16739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16741 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16742 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16743 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16744 ;;Total ram usage:        2 bytes
 16745 ;; Hardware stack levels used:    1
 16746 ;; Hardware stack levels required when called:    5
 16747 ;; This function calls:
 16748 ;;		Nothing
 16749 ;; This function is called by:
 16750 ;;		_DlyOff_Initialization
 16751 ;;		_DlyOff_Main
 16752 ;;		_setDelayOff_GO
 16753 ;; This function uses a non-reentrant model
 16754 ;;
 16755                           
 16756                           
 16757                           ;psect for function _DelayOffPointSelect
 16758  1D5E                     _DelayOffPointSelect:	
 16759                           
 16760                           ;incstack = 0
 16761                           ; Regs used in _DelayOffPointSelect: [wreg]
 16762                           ;DelayOffPointSelect@sw stored from wreg
 16763  1D5E  0020               	movlb	0	; select bank0
 16764  1D5F  00A1               	movwf	DelayOffPointSelect@sw
 16765                           
 16766                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16767  1D60  0821               	movf	DelayOffPointSelect@sw,w
 16768  1D61  3A01               	xorlw	1
 16769  1D62  1D03               	skipz
 16770  1D63  2D69               	goto	l8289
 16771                           
 16772                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16773  1D64  306A               	movlw	_DlySw1& (0+255)
 16774  1D65  00A0               	movwf	??_DelayOffPointSelect
 16775  1D66  0820               	movf	??_DelayOffPointSelect,w
 16776  1D67  00F8               	movwf	_DelayOff
 16777                           
 16778                           ;DelayOff_B1.c: 11: }
 16779  1D68  0008               	return
 16780  1D69                     l8289:	
 16781                           
 16782                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 16783  1D69  0821               	movf	DelayOffPointSelect@sw,w
 16784  1D6A  3A02               	xorlw	2
 16785  1D6B  1D03               	skipz
 16786  1D6C  0008               	return
 16787                           
 16788                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 16789  1D6D  306C               	movlw	_DlySw2& (0+255)
 16790  1D6E  00A0               	movwf	??_DelayOffPointSelect
 16791  1D6F  0820               	movf	??_DelayOffPointSelect,w
 16792  1D70  00F8               	movwf	_DelayOff
 16793  1D71  0008               	return
 16794  1D72                     __end_of_DelayOffPointSelect:	
 16795                           
 16796                           	psect	text109
 16797  1DAF                     __ptext109:	
 16798 ;; *************** function _CC2500_PowerOnInitial *****************
 16799 ;; Defined at:
 16800 ;;		line 122 in file "../src/CC2500_B1.c"
 16801 ;; Parameters:    Size  Location     Type
 16802 ;;		None
 16803 ;; Auto vars:     Size  Location     Type
 16804 ;;		None
 16805 ;; Return value:  Size  Location     Type
 16806 ;;		None               void
 16807 ;; Registers used:
 16808 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16809 ;; Tracked objects:
 16810 ;;		On entry : 0/0
 16811 ;;		On exit  : 0/0
 16812 ;;		Unchanged: 0/0
 16813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16818 ;;Total ram usage:        0 bytes
 16819 ;; Hardware stack levels used:    1
 16820 ;; Hardware stack levels required when called:    8
 16821 ;; This function calls:
 16822 ;;		_CC2500_ClearRXFIFO
 16823 ;;		_CC2500_ClearTXFIFO
 16824 ;;		_CC2500_FrequencyCabr
 16825 ;;		_CC2500_InitPATable
 16826 ;;		_CC2500_InitSetREG
 16827 ;;		_CC2500_PowerRST
 16828 ;;		_CC2500_SIDLEMode
 16829 ;; This function is called by:
 16830 ;;		_main
 16831 ;; This function uses a non-reentrant model
 16832 ;;
 16833                           
 16834                           
 16835                           ;psect for function _CC2500_PowerOnInitial
 16836  1DAF                     _CC2500_PowerOnInitial:	
 16837                           
 16838                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 16839                           
 16840                           ;incstack = 0
 16841                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16842  1DAF  3187  27B8  319D   	fcall	_CC2500_PowerRST
 16843                           
 16844                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 16845  1DB2  3191  211E  319D   	fcall	_CC2500_InitSetREG
 16846                           
 16847                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 16848  1DB5  319E  26D6  319D   	fcall	_CC2500_InitPATable
 16849                           
 16850                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 16851  1DB8  319B  235F  319D   	fcall	_CC2500_ClearTXFIFO
 16852                           
 16853                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 16854  1DBB  319B  235B  319D   	fcall	_CC2500_ClearRXFIFO
 16855                           
 16856                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 16857  1DBE  319B  23E7  319D   	fcall	_CC2500_FrequencyCabr
 16858                           
 16859                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 16860  1DC1  319B  2363         	fcall	_CC2500_SIDLEMode
 16861  1DC3  0008               	return
 16862  1DC4                     __end_of_CC2500_PowerOnInitial:	
 16863                           
 16864                           	psect	text110
 16865  1B63                     __ptext110:	
 16866 ;; *************** function _CC2500_SIDLEMode *****************
 16867 ;; Defined at:
 16868 ;;		line 212 in file "../src/CC2500_B1.c"
 16869 ;; Parameters:    Size  Location     Type
 16870 ;;		None
 16871 ;; Auto vars:     Size  Location     Type
 16872 ;;		None
 16873 ;; Return value:  Size  Location     Type
 16874 ;;		None               void
 16875 ;; Registers used:
 16876 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16877 ;; Tracked objects:
 16878 ;;		On entry : 0/0
 16879 ;;		On exit  : 0/0
 16880 ;;		Unchanged: 0/0
 16881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16886 ;;Total ram usage:        0 bytes
 16887 ;; Hardware stack levels used:    1
 16888 ;; Hardware stack levels required when called:    7
 16889 ;; This function calls:
 16890 ;;		_CC2500_WriteCommand
 16891 ;; This function is called by:
 16892 ;;		_CC2500_PowerOnInitial
 16893 ;; This function uses a non-reentrant model
 16894 ;;
 16895                           
 16896                           
 16897                           ;psect for function _CC2500_SIDLEMode
 16898  1B63                     _CC2500_SIDLEMode:	
 16899                           
 16900                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 16901                           
 16902                           ;incstack = 0
 16903                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16904  1B63  3036               	movlw	54
 16905  1B64  319E  264D         	fcall	_CC2500_WriteCommand
 16906  1B66  0008               	return
 16907  1B67                     __end_of_CC2500_SIDLEMode:	
 16908                           
 16909                           	psect	text111
 16910  07B8                     __ptext111:	
 16911 ;; *************** function _CC2500_PowerRST *****************
 16912 ;; Defined at:
 16913 ;;		line 135 in file "../src/CC2500_B1.c"
 16914 ;; Parameters:    Size  Location     Type
 16915 ;;		None
 16916 ;; Auto vars:     Size  Location     Type
 16917 ;;		None
 16918 ;; Return value:  Size  Location     Type
 16919 ;;		None               void
 16920 ;; Registers used:
 16921 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16922 ;; Tracked objects:
 16923 ;;		On entry : 0/0
 16924 ;;		On exit  : 0/0
 16925 ;;		Unchanged: 0/0
 16926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16929 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16930 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16931 ;;Total ram usage:        1 bytes
 16932 ;; Hardware stack levels used:    1
 16933 ;; Hardware stack levels required when called:    6
 16934 ;; This function calls:
 16935 ;;		_CC2500_WriteByte
 16936 ;;		_DelayTime_1us
 16937 ;;		_Timeout_Counter
 16938 ;;		_set_TimeoutCleared
 16939 ;; This function is called by:
 16940 ;;		_CC2500_PowerOnInitial
 16941 ;; This function uses a non-reentrant model
 16942 ;;
 16943                           
 16944                           
 16945                           ;psect for function _CC2500_PowerRST
 16946  07B8                     _CC2500_PowerRST:	
 16947                           
 16948                           ;CC2500_B1.c: 136: RC1 = 0;
 16949                           
 16950                           ;incstack = 0
 16951                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16952  07B8  0020               	movlb	0	; select bank0
 16953  07B9  108E               	bcf	14,1	;volatile
 16954                           
 16955                           ;CC2500_B1.c: 137: RC0 = 0;
 16956  07BA  100E               	bcf	14,0	;volatile
 16957                           
 16958                           ;CC2500_B1.c: 138: RC4 = 1;
 16959  07BB  160E               	bsf	14,4	;volatile
 16960                           
 16961                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 16962  07BC  300A               	movlw	10
 16963  07BD  00A0               	movwf	DelayTime_1us@count
 16964  07BE  3000               	movlw	0
 16965  07BF  00A1               	movwf	DelayTime_1us@count+1
 16966  07C0  3190  20A8  3187   	fcall	_DelayTime_1us
 16967                           
 16968                           ;CC2500_B1.c: 140: RC4 = 0;
 16969  07C3  0020               	movlb	0	; select bank0
 16970  07C4  120E               	bcf	14,4	;volatile
 16971                           
 16972                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 16973  07C5  300A               	movlw	10
 16974  07C6  00A0               	movwf	DelayTime_1us@count
 16975  07C7  3000               	movlw	0
 16976  07C8  00A1               	movwf	DelayTime_1us@count+1
 16977  07C9  3190  20A8  3187   	fcall	_DelayTime_1us
 16978                           
 16979                           ;CC2500_B1.c: 142: RC4 = 1;
 16980  07CC  0020               	movlb	0	; select bank0
 16981  07CD  160E               	bsf	14,4	;volatile
 16982                           
 16983                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 16984  07CE  3028               	movlw	40
 16985  07CF  00A0               	movwf	DelayTime_1us@count
 16986  07D0  3000               	movlw	0
 16987  07D1  00A1               	movwf	DelayTime_1us@count+1
 16988  07D2  3190  20A8  3187   	fcall	_DelayTime_1us
 16989                           
 16990                           ;CC2500_B1.c: 144: RC4 = 0;
 16991  07D5  0020               	movlb	0	; select bank0
 16992  07D6  120E               	bcf	14,4	;volatile
 16993                           
 16994                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 16995  07D7  3030               	movlw	48
 16996  07D8  00A6               	movwf	??_CC2500_PowerRST
 16997  07D9  0826               	movf	??_CC2500_PowerRST,w
 16998  07DA  0021               	movlb	1	; select bank1
 16999  07DB  00D0               	movwf	_SPI0Buffer^(0+128)
 17000                           
 17001                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 17002  07DC  2FE0               	goto	l8989
 17003  07DD                     l8987:	
 17004                           
 17005                           ;CC2500_B1.c: 147: Timeout_Counter();
 17006  07DD  319D  259A  3187   	fcall	_Timeout_Counter
 17007  07E0                     l8989:	
 17008  07E0  0020               	movlb	0	; select bank0
 17009  07E1  1D0E               	btfss	14,2	;volatile
 17010  07E2  2FE6               	goto	l8993
 17011  07E3  0021               	movlb	1	; select bank1
 17012  07E4  1D2D               	btfss	(_myMain^(0+128)+13),2
 17013  07E5  2FDD               	goto	l8987
 17014  07E6                     l8993:	
 17015                           
 17016                           ;CC2500_B1.c: 148: };
 17017                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 17018  07E6  319B  2367  3187   	fcall	_set_TimeoutCleared
 17019                           
 17020                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 17021  07E9  319E  261B  3187   	fcall	_CC2500_WriteByte
 17022                           
 17023                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 17024  07EC  2FF0               	goto	l8999
 17025  07ED                     l8997:	
 17026                           
 17027                           ;CC2500_B1.c: 152: Timeout_Counter();
 17028  07ED  319D  259A  3187   	fcall	_Timeout_Counter
 17029  07F0                     l8999:	
 17030  07F0  0020               	movlb	0	; select bank0
 17031  07F1  1D0E               	btfss	14,2	;volatile
 17032  07F2  2FF6               	goto	l9003
 17033  07F3  0021               	movlb	1	; select bank1
 17034  07F4  1D2D               	btfss	(_myMain^(0+128)+13),2
 17035  07F5  2FED               	goto	l8997
 17036  07F6                     l9003:	
 17037                           
 17038                           ;CC2500_B1.c: 153: };
 17039                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 17040  07F6  319B  2367         	fcall	_set_TimeoutCleared
 17041                           
 17042                           ;CC2500_B1.c: 155: RC0 = 0;
 17043  07F8  0020               	movlb	0	; select bank0
 17044  07F9  100E               	bcf	14,0	;volatile
 17045                           
 17046                           ;CC2500_B1.c: 156: RC4 = 1;
 17047  07FA  160E               	bsf	14,4	;volatile
 17048  07FB  0008               	return
 17049  07FC                     __end_of_CC2500_PowerRST:	
 17050                           
 17051                           	psect	text112
 17052  111E                     __ptext112:	
 17053 ;; *************** function _CC2500_InitSetREG *****************
 17054 ;; Defined at:
 17055 ;;		line 162 in file "../src/CC2500_B1.c"
 17056 ;; Parameters:    Size  Location     Type
 17057 ;;		None
 17058 ;; Auto vars:     Size  Location     Type
 17059 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17060 ;;  temp2           1    7[BANK0 ] unsigned char 
 17061 ;;  temp1           1    6[BANK0 ] unsigned char 
 17062 ;; Return value:  Size  Location     Type
 17063 ;;		None               void
 17064 ;; Registers used:
 17065 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17066 ;; Tracked objects:
 17067 ;;		On entry : 0/0
 17068 ;;		On exit  : 0/0
 17069 ;;		Unchanged: 0/0
 17070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17072 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17073 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17074 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17075 ;;Total ram usage:        4 bytes
 17076 ;; Hardware stack levels used:    1
 17077 ;; Hardware stack levels required when called:    7
 17078 ;; This function calls:
 17079 ;;		_CC2500_WriteREG
 17080 ;; This function is called by:
 17081 ;;		_CC2500_PowerOnInitial
 17082 ;; This function uses a non-reentrant model
 17083 ;;
 17084                           
 17085                           
 17086                           ;psect for function _CC2500_InitSetREG
 17087  111E                     _CC2500_InitSetREG:	
 17088                           
 17089                           ;CC2500_B1.c: 163: unsigned char loop_c;
 17090                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 17091                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 17092                           
 17093                           ;incstack = 0
 17094                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17095  111E  0020               	movlb	0	; select bank0
 17096  111F  01A8               	clrf	CC2500_InitSetREG@loop_c
 17097  1120                     L10:	
 17098  1120  302F               	movlw	47
 17099  1121  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17100  1122  1803               	btfsc	3,0
 17101  1123  0008               	return
 17102                           
 17103                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 17104  1124  0828               	movf	CC2500_InitSetREG@loop_c,w
 17105  1125  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17106  1126  0084               	movwf	4
 17107  1127  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17108  1128  1803               	skipnc
 17109  1129  3E01               	addlw	1
 17110  112A  0085               	movwf	5
 17111  112B  0800               	movf	0,w	;code access
 17112  112C  00A5               	movwf	??_CC2500_InitSetREG
 17113  112D  0825               	movf	??_CC2500_InitSetREG,w
 17114  112E  00A6               	movwf	CC2500_InitSetREG@temp1
 17115                           
 17116                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 17117  112F  0828               	movf	CC2500_InitSetREG@loop_c,w
 17118  1130  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17119  1131  0084               	movwf	4
 17120  1132  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17121  1133  1803               	skipnc
 17122  1134  3E01               	addlw	1
 17123  1135  0085               	movwf	5
 17124  1136  0800               	movf	0,w	;code access
 17125  1137  00A5               	movwf	??_CC2500_InitSetREG
 17126  1138  0825               	movf	??_CC2500_InitSetREG,w
 17127  1139  00A7               	movwf	CC2500_InitSetREG@temp2
 17128                           
 17129                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 17130  113A  0827               	movf	CC2500_InitSetREG@temp2,w
 17131  113B  00A5               	movwf	??_CC2500_InitSetREG
 17132  113C  0825               	movf	??_CC2500_InitSetREG,w
 17133  113D  00A2               	movwf	CC2500_WriteREG@value
 17134  113E  0826               	movf	CC2500_InitSetREG@temp1,w
 17135  113F  319F  2796  3191   	fcall	_CC2500_WriteREG
 17136  1142  3001               	movlw	1
 17137  1143  0020               	movlb	0	; select bank0
 17138  1144  00A5               	movwf	??_CC2500_InitSetREG
 17139  1145  0825               	movf	??_CC2500_InitSetREG,w
 17140  1146  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17141  1147  2920               	goto	L10
 17142  1148                     __end_of_CC2500_InitSetREG:	
 17143                           
 17144                           	psect	text113
 17145  1ED6                     __ptext113:	
 17146 ;; *************** function _CC2500_InitPATable *****************
 17147 ;; Defined at:
 17148 ;;		line 177 in file "../src/CC2500_B1.c"
 17149 ;; Parameters:    Size  Location     Type
 17150 ;;		None
 17151 ;; Auto vars:     Size  Location     Type
 17152 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17153 ;;  temp            1    6[BANK0 ] unsigned char 
 17154 ;; Return value:  Size  Location     Type
 17155 ;;		None               void
 17156 ;; Registers used:
 17157 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17158 ;; Tracked objects:
 17159 ;;		On entry : 0/0
 17160 ;;		On exit  : 0/0
 17161 ;;		Unchanged: 0/0
 17162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17164 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17165 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17166 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17167 ;;Total ram usage:        3 bytes
 17168 ;; Hardware stack levels used:    1
 17169 ;; Hardware stack levels required when called:    7
 17170 ;; This function calls:
 17171 ;;		_CC2500_WriteREG
 17172 ;; This function is called by:
 17173 ;;		_CC2500_PowerOnInitial
 17174 ;; This function uses a non-reentrant model
 17175 ;;
 17176                           
 17177                           
 17178                           ;psect for function _CC2500_InitPATable
 17179  1ED6                     _CC2500_InitPATable:	
 17180                           
 17181                           ;CC2500_B1.c: 178: unsigned char loop_d;
 17182                           ;CC2500_B1.c: 179: unsigned char temp;
 17183                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 17184                           
 17185                           ;incstack = 0
 17186                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17187  1ED6  0020               	movlb	0	; select bank0
 17188  1ED7  01A7               	clrf	CC2500_InitPATable@loop_d
 17189  1ED8                     L11:	
 17190  1ED8  3008               	movlw	8
 17191  1ED9  0227               	subwf	CC2500_InitPATable@loop_d,w
 17192  1EDA  1803               	btfsc	3,0
 17193  1EDB  0008               	return
 17194                           
 17195                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 17196  1EDC  0827               	movf	CC2500_InitPATable@loop_d,w
 17197  1EDD  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17198  1EDE  0084               	movwf	4
 17199  1EDF  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17200  1EE0  1803               	skipnc
 17201  1EE1  3E01               	addlw	1
 17202  1EE2  0085               	movwf	5
 17203  1EE3  0800               	movf	0,w	;code access
 17204  1EE4  00A5               	movwf	??_CC2500_InitPATable
 17205  1EE5  0825               	movf	??_CC2500_InitPATable,w
 17206  1EE6  00A6               	movwf	CC2500_InitPATable@temp
 17207                           
 17208                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 17209  1EE7  0826               	movf	CC2500_InitPATable@temp,w
 17210  1EE8  00A5               	movwf	??_CC2500_InitPATable
 17211  1EE9  0825               	movf	??_CC2500_InitPATable,w
 17212  1EEA  00A2               	movwf	CC2500_WriteREG@value
 17213  1EEB  303E               	movlw	62
 17214  1EEC  319F  2796  319E   	fcall	_CC2500_WriteREG
 17215  1EEF  3001               	movlw	1
 17216  1EF0  0020               	movlb	0	; select bank0
 17217  1EF1  00A5               	movwf	??_CC2500_InitPATable
 17218  1EF2  0825               	movf	??_CC2500_InitPATable,w
 17219  1EF3  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17220  1EF4  2ED8               	goto	L11
 17221  1EF5                     __end_of_CC2500_InitPATable:	
 17222                           
 17223                           	psect	text114
 17224  1F96                     __ptext114:	
 17225 ;; *************** function _CC2500_WriteREG *****************
 17226 ;; Defined at:
 17227 ;;		line 254 in file "../src/CC2500_B1.c"
 17228 ;; Parameters:    Size  Location     Type
 17229 ;;  w_addr          1    wreg     unsigned char 
 17230 ;;  value           1    2[BANK0 ] unsigned char 
 17231 ;; Auto vars:     Size  Location     Type
 17232 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17233 ;; Return value:  Size  Location     Type
 17234 ;;		None               void
 17235 ;; Registers used:
 17236 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17237 ;; Tracked objects:
 17238 ;;		On entry : 0/0
 17239 ;;		On exit  : 0/0
 17240 ;;		Unchanged: 0/0
 17241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17242 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17243 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17244 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17245 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17246 ;;Total ram usage:        3 bytes
 17247 ;; Hardware stack levels used:    1
 17248 ;; Hardware stack levels required when called:    6
 17249 ;; This function calls:
 17250 ;;		_CC2500_WriteByte
 17251 ;;		_Timeout_Counter
 17252 ;;		_set_TimeoutCleared
 17253 ;; This function is called by:
 17254 ;;		_CC2500_InitSetREG
 17255 ;;		_CC2500_InitPATable
 17256 ;; This function uses a non-reentrant model
 17257 ;;
 17258                           
 17259                           
 17260                           ;psect for function _CC2500_WriteREG
 17261  1F96                     _CC2500_WriteREG:	
 17262                           
 17263                           ;incstack = 0
 17264                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17265                           ;CC2500_WriteREG@w_addr stored from wreg
 17266  1F96  0020               	movlb	0	; select bank0
 17267  1F97  00A4               	movwf	CC2500_WriteREG@w_addr
 17268                           
 17269                           ;CC2500_B1.c: 255: RC4 = 0;
 17270  1F98  120E               	bcf	14,4	;volatile
 17271                           
 17272                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 17273  1F99  0824               	movf	CC2500_WriteREG@w_addr,w
 17274  1F9A  00A3               	movwf	??_CC2500_WriteREG
 17275  1F9B  0823               	movf	??_CC2500_WriteREG,w
 17276  1F9C  0021               	movlb	1	; select bank1
 17277  1F9D  00D0               	movwf	_SPI0Buffer^(0+128)
 17278                           
 17279                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 17280  1F9E  2FA2               	goto	l8799
 17281  1F9F                     l8797:	
 17282                           
 17283                           ;CC2500_B1.c: 258: Timeout_Counter();
 17284  1F9F  319D  259A  319F   	fcall	_Timeout_Counter
 17285  1FA2                     l8799:	
 17286  1FA2  0020               	movlb	0	; select bank0
 17287  1FA3  1D0E               	btfss	14,2	;volatile
 17288  1FA4  2FA8               	goto	l8803
 17289  1FA5  0021               	movlb	1	; select bank1
 17290  1FA6  1D2D               	btfss	(_myMain^(0+128)+13),2
 17291  1FA7  2F9F               	goto	l8797
 17292  1FA8                     l8803:	
 17293                           
 17294                           ;CC2500_B1.c: 259: };
 17295                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 17296  1FA8  319B  2367  319F   	fcall	_set_TimeoutCleared
 17297                           
 17298                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 17299  1FAB  319E  261B  319F   	fcall	_CC2500_WriteByte
 17300                           
 17301                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 17302  1FAE  0020               	movlb	0	; select bank0
 17303  1FAF  0822               	movf	CC2500_WriteREG@value,w
 17304  1FB0  00A3               	movwf	??_CC2500_WriteREG
 17305  1FB1  0823               	movf	??_CC2500_WriteREG,w
 17306  1FB2  0021               	movlb	1	; select bank1
 17307  1FB3  00D0               	movwf	_SPI0Buffer^(0+128)
 17308                           
 17309                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 17310  1FB4  319E  261B         	fcall	_CC2500_WriteByte
 17311                           
 17312                           ;CC2500_B1.c: 265: RC4 = 1;
 17313  1FB6  0020               	movlb	0	; select bank0
 17314  1FB7  160E               	bsf	14,4	;volatile
 17315  1FB8  0008               	return
 17316  1FB9                     __end_of_CC2500_WriteREG:	
 17317                           
 17318                           	psect	text115
 17319  1BE7                     __ptext115:	
 17320 ;; *************** function _CC2500_FrequencyCabr *****************
 17321 ;; Defined at:
 17322 ;;		line 204 in file "../src/CC2500_B1.c"
 17323 ;; Parameters:    Size  Location     Type
 17324 ;;		None
 17325 ;; Auto vars:     Size  Location     Type
 17326 ;;		None
 17327 ;; Return value:  Size  Location     Type
 17328 ;;		None               void
 17329 ;; Registers used:
 17330 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17331 ;; Tracked objects:
 17332 ;;		On entry : 0/0
 17333 ;;		On exit  : 0/0
 17334 ;;		Unchanged: 0/0
 17335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17340 ;;Total ram usage:        0 bytes
 17341 ;; Hardware stack levels used:    1
 17342 ;; Hardware stack levels required when called:    7
 17343 ;; This function calls:
 17344 ;;		_CC2500_WriteCommand
 17345 ;;		_DelayTime_1us
 17346 ;; This function is called by:
 17347 ;;		_CC2500_PowerOnInitial
 17348 ;; This function uses a non-reentrant model
 17349 ;;
 17350                           
 17351                           
 17352                           ;psect for function _CC2500_FrequencyCabr
 17353  1BE7                     _CC2500_FrequencyCabr:	
 17354                           
 17355                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 17356                           
 17357                           ;incstack = 0
 17358                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17359  1BE7  3033               	movlw	51
 17360  1BE8  319E  264D  319B   	fcall	_CC2500_WriteCommand
 17361                           
 17362                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 17363  1BEB  30E8               	movlw	232
 17364  1BEC  0020               	movlb	0	; select bank0
 17365  1BED  00A0               	movwf	DelayTime_1us@count
 17366  1BEE  3003               	movlw	3
 17367  1BEF  00A1               	movwf	DelayTime_1us@count+1
 17368  1BF0  3190  20A8         	fcall	_DelayTime_1us
 17369  1BF2  0008               	return
 17370  1BF3                     __end_of_CC2500_FrequencyCabr:	
 17371                           
 17372                           	psect	text116
 17373  10A8                     __ptext116:	
 17374 ;; *************** function _DelayTime_1us *****************
 17375 ;; Defined at:
 17376 ;;		line 323 in file "../src/CC2500_B1.c"
 17377 ;; Parameters:    Size  Location     Type
 17378 ;;  count           2    0[BANK0 ] int 
 17379 ;; Auto vars:     Size  Location     Type
 17380 ;;  j               2    4[BANK0 ] unsigned int 
 17381 ;;  i               2    2[BANK0 ] unsigned int 
 17382 ;; Return value:  Size  Location     Type
 17383 ;;		None               void
 17384 ;; Registers used:
 17385 ;;		wreg, status,2
 17386 ;; Tracked objects:
 17387 ;;		On entry : 0/0
 17388 ;;		On exit  : 0/0
 17389 ;;		Unchanged: 0/0
 17390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17391 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17392 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17394 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17395 ;;Total ram usage:        6 bytes
 17396 ;; Hardware stack levels used:    1
 17397 ;; Hardware stack levels required when called:    5
 17398 ;; This function calls:
 17399 ;;		Nothing
 17400 ;; This function is called by:
 17401 ;;		_CC2500_PowerRST
 17402 ;;		_CC2500_FrequencyCabr
 17403 ;; This function uses a non-reentrant model
 17404 ;;
 17405                           
 17406                           
 17407                           ;psect for function _DelayTime_1us
 17408  10A8                     _DelayTime_1us:	
 17409                           
 17410                           ;CC2500_B1.c: 324: unsigned int i, j;
 17411                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 17412                           
 17413                           ;incstack = 0
 17414                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17415  10A8  3001               	movlw	1
 17416  10A9  0020               	movlb	0	; select bank0
 17417  10AA  00A2               	movwf	DelayTime_1us@i
 17418  10AB  3000               	movlw	0
 17419  10AC  00A3               	movwf	DelayTime_1us@i+1
 17420  10AD                     l374:	
 17421  10AD  0821               	movf	DelayTime_1us@count+1,w
 17422  10AE  0223               	subwf	DelayTime_1us@i+1,w
 17423  10AF  1D03               	skipz
 17424  10B0  28B3               	goto	u9105
 17425  10B1  0820               	movf	DelayTime_1us@count,w
 17426  10B2  0222               	subwf	DelayTime_1us@i,w
 17427  10B3                     u9105:	
 17428  10B3  1803               	btfsc	3,0
 17429  10B4  0008               	return
 17430                           
 17431                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 17432  10B5  01A4               	clrf	DelayTime_1us@j
 17433  10B6  01A5               	clrf	DelayTime_1us@j+1
 17434  10B7  3000               	movlw	0
 17435  10B8  0225               	subwf	DelayTime_1us@j+1,w
 17436  10B9  3002               	movlw	2
 17437  10BA  1903               	skipnz
 17438  10BB  0224               	subwf	DelayTime_1us@j,w
 17439  10BC  1803               	btfsc	3,0
 17440  10BD  28C9               	goto	l8791
 17441  10BE                     l8789:	
 17442  10BE  3001               	movlw	1
 17443  10BF  07A4               	addwf	DelayTime_1us@j,f
 17444  10C0  3000               	movlw	0
 17445  10C1  3DA5               	addwfc	DelayTime_1us@j+1,f
 17446  10C2  3000               	movlw	0
 17447  10C3  0225               	subwf	DelayTime_1us@j+1,w
 17448  10C4  3002               	movlw	2
 17449  10C5  1903               	skipnz
 17450  10C6  0224               	subwf	DelayTime_1us@j,w
 17451  10C7  1C03               	skipc
 17452  10C8  28BE               	goto	l8789
 17453  10C9                     l8791:	
 17454  10C9  3001               	movlw	1
 17455  10CA  07A2               	addwf	DelayTime_1us@i,f
 17456  10CB  3000               	movlw	0
 17457  10CC  3DA3               	addwfc	DelayTime_1us@i+1,f
 17458  10CD  28AD               	goto	l374
 17459  10CE                     __end_of_DelayTime_1us:	
 17460                           
 17461                           	psect	text117
 17462  1B5F                     __ptext117:	
 17463 ;; *************** function _CC2500_ClearTXFIFO *****************
 17464 ;; Defined at:
 17465 ;;		line 190 in file "../src/CC2500_B1.c"
 17466 ;; Parameters:    Size  Location     Type
 17467 ;;		None
 17468 ;; Auto vars:     Size  Location     Type
 17469 ;;		None
 17470 ;; Return value:  Size  Location     Type
 17471 ;;		None               void
 17472 ;; Registers used:
 17473 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17474 ;; Tracked objects:
 17475 ;;		On entry : 0/0
 17476 ;;		On exit  : 0/0
 17477 ;;		Unchanged: 0/0
 17478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17483 ;;Total ram usage:        0 bytes
 17484 ;; Hardware stack levels used:    1
 17485 ;; Hardware stack levels required when called:    7
 17486 ;; This function calls:
 17487 ;;		_CC2500_WriteCommand
 17488 ;; This function is called by:
 17489 ;;		_CC2500_PowerOnInitial
 17490 ;; This function uses a non-reentrant model
 17491 ;;
 17492                           
 17493                           
 17494                           ;psect for function _CC2500_ClearTXFIFO
 17495  1B5F                     _CC2500_ClearTXFIFO:	
 17496                           
 17497                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 17498                           
 17499                           ;incstack = 0
 17500                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17501  1B5F  303B               	movlw	59
 17502  1B60  319E  264D         	fcall	_CC2500_WriteCommand
 17503  1B62  0008               	return
 17504  1B63                     __end_of_CC2500_ClearTXFIFO:	
 17505                           
 17506                           	psect	text118
 17507  1B5B                     __ptext118:	
 17508 ;; *************** function _CC2500_ClearRXFIFO *****************
 17509 ;; Defined at:
 17510 ;;		line 197 in file "../src/CC2500_B1.c"
 17511 ;; Parameters:    Size  Location     Type
 17512 ;;		None
 17513 ;; Auto vars:     Size  Location     Type
 17514 ;;		None
 17515 ;; Return value:  Size  Location     Type
 17516 ;;		None               void
 17517 ;; Registers used:
 17518 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17519 ;; Tracked objects:
 17520 ;;		On entry : 0/0
 17521 ;;		On exit  : 0/0
 17522 ;;		Unchanged: 0/0
 17523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17528 ;;Total ram usage:        0 bytes
 17529 ;; Hardware stack levels used:    1
 17530 ;; Hardware stack levels required when called:    7
 17531 ;; This function calls:
 17532 ;;		_CC2500_WriteCommand
 17533 ;; This function is called by:
 17534 ;;		_CC2500_PowerOnInitial
 17535 ;; This function uses a non-reentrant model
 17536 ;;
 17537                           
 17538                           
 17539                           ;psect for function _CC2500_ClearRXFIFO
 17540  1B5B                     _CC2500_ClearRXFIFO:	
 17541                           
 17542                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 17543                           
 17544                           ;incstack = 0
 17545                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17546  1B5B  303A               	movlw	58
 17547  1B5C  319E  264D         	fcall	_CC2500_WriteCommand
 17548  1B5E  0008               	return
 17549  1B5F                     __end_of_CC2500_ClearRXFIFO:	
 17550                           
 17551                           	psect	text119
 17552  1E4D                     __ptext119:	
 17553 ;; *************** function _CC2500_WriteCommand *****************
 17554 ;; Defined at:
 17555 ;;		line 288 in file "../src/CC2500_B1.c"
 17556 ;; Parameters:    Size  Location     Type
 17557 ;;  command         1    wreg     unsigned char 
 17558 ;; Auto vars:     Size  Location     Type
 17559 ;;  command         1    3[BANK0 ] unsigned char 
 17560 ;; Return value:  Size  Location     Type
 17561 ;;		None               void
 17562 ;; Registers used:
 17563 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17564 ;; Tracked objects:
 17565 ;;		On entry : 0/0
 17566 ;;		On exit  : 0/0
 17567 ;;		Unchanged: 0/0
 17568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17570 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17571 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17572 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17573 ;;Total ram usage:        2 bytes
 17574 ;; Hardware stack levels used:    1
 17575 ;; Hardware stack levels required when called:    6
 17576 ;; This function calls:
 17577 ;;		_CC2500_WriteByte
 17578 ;;		_Timeout_Counter
 17579 ;;		_set_TimeoutCleared
 17580 ;; This function is called by:
 17581 ;;		_CC2500_TxData
 17582 ;;		_CC2500_ClearTXFIFO
 17583 ;;		_CC2500_ClearRXFIFO
 17584 ;;		_CC2500_FrequencyCabr
 17585 ;;		_CC2500_SIDLEMode
 17586 ;;		_setRF_Main
 17587 ;;		_RF_RxDisable
 17588 ;; This function uses a non-reentrant model
 17589 ;;
 17590                           
 17591                           
 17592                           ;psect for function _CC2500_WriteCommand
 17593  1E4D                     _CC2500_WriteCommand:	
 17594                           
 17595                           ;incstack = 0
 17596                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17597                           ;CC2500_WriteCommand@command stored from wreg
 17598  1E4D  0020               	movlb	0	; select bank0
 17599  1E4E  00A3               	movwf	CC2500_WriteCommand@command
 17600                           
 17601                           ;CC2500_B1.c: 289: RC4 = 0;
 17602  1E4F  120E               	bcf	14,4	;volatile
 17603                           
 17604                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 17605  1E50  0823               	movf	CC2500_WriteCommand@command,w
 17606  1E51  00A2               	movwf	??_CC2500_WriteCommand
 17607  1E52  0822               	movf	??_CC2500_WriteCommand,w
 17608  1E53  0021               	movlb	1	; select bank1
 17609  1E54  00D0               	movwf	_SPI0Buffer^(0+128)
 17610                           
 17611                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 17612  1E55  2E59               	goto	l8603
 17613  1E56                     l8601:	
 17614                           
 17615                           ;CC2500_B1.c: 293: Timeout_Counter();
 17616  1E56  319D  259A  319E   	fcall	_Timeout_Counter
 17617  1E59                     l8603:	
 17618  1E59  0020               	movlb	0	; select bank0
 17619  1E5A  1D0E               	btfss	14,2	;volatile
 17620  1E5B  2E5F               	goto	l8607
 17621  1E5C  0021               	movlb	1	; select bank1
 17622  1E5D  1D2D               	btfss	(_myMain^(0+128)+13),2
 17623  1E5E  2E56               	goto	l8601
 17624  1E5F                     l8607:	
 17625                           
 17626                           ;CC2500_B1.c: 294: };
 17627                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 17628  1E5F  319B  2367  319E   	fcall	_set_TimeoutCleared
 17629                           
 17630                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 17631  1E62  319E  261B         	fcall	_CC2500_WriteByte
 17632                           
 17633                           ;CC2500_B1.c: 298: RC4 = 1;
 17634  1E64  0020               	movlb	0	; select bank0
 17635  1E65  160E               	bsf	14,4	;volatile
 17636  1E66  0008               	return
 17637  1E67                     __end_of_CC2500_WriteCommand:	
 17638                           
 17639                           	psect	text120
 17640  1B67                     __ptext120:	
 17641 ;; *************** function _set_TimeoutCleared *****************
 17642 ;; Defined at:
 17643 ;;		line 270 in file "../src/main_B1.c"
 17644 ;; Parameters:    Size  Location     Type
 17645 ;;		None
 17646 ;; Auto vars:     Size  Location     Type
 17647 ;;		None
 17648 ;; Return value:  Size  Location     Type
 17649 ;;		None               void
 17650 ;; Registers used:
 17651 ;;		status,2
 17652 ;; Tracked objects:
 17653 ;;		On entry : 0/0
 17654 ;;		On exit  : 0/0
 17655 ;;		Unchanged: 0/0
 17656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17661 ;;Total ram usage:        0 bytes
 17662 ;; Hardware stack levels used:    1
 17663 ;; Hardware stack levels required when called:    5
 17664 ;; This function calls:
 17665 ;;		Nothing
 17666 ;; This function is called by:
 17667 ;;		_CC2500_TxData
 17668 ;;		_CC2500_RxData
 17669 ;;		_CC2500_PowerRST
 17670 ;;		_CC2500_WriteREG
 17671 ;;		_CC2500_WriteCommand
 17672 ;;		_CC2500_ReadStatus
 17673 ;;		_getAD
 17674 ;;		_TouchPower
 17675 ;;		_CC2500_ReadREG
 17676 ;; This function uses a non-reentrant model
 17677 ;;
 17678                           
 17679                           
 17680                           ;psect for function _set_TimeoutCleared
 17681  1B67                     _set_TimeoutCleared:	
 17682                           
 17683                           ;main_B1.c: 271: myMain.Timeout = 0;
 17684                           
 17685                           ;incstack = 0
 17686                           ; Regs used in _set_TimeoutCleared: [status,2]
 17687  1B67  0021               	movlb	1	; select bank1
 17688  1B68  112D               	bcf	(_myMain^(0+128)+13),2
 17689                           
 17690                           ;main_B1.c: 272: myMain.Timeout_Counter = 0;
 17691  1B69  01AE               	clrf	(_myMain^(0+128)+14)
 17692  1B6A  01AF               	clrf	((_myMain+1)^(0+128)+14)
 17693  1B6B  0008               	return
 17694  1B6C                     __end_of_set_TimeoutCleared:	
 17695                           
 17696                           	psect	text121
 17697  1D9A                     __ptext121:	
 17698 ;; *************** function _Timeout_Counter *****************
 17699 ;; Defined at:
 17700 ;;		line 261 in file "../src/main_B1.c"
 17701 ;; Parameters:    Size  Location     Type
 17702 ;;		None
 17703 ;; Auto vars:     Size  Location     Type
 17704 ;;		None
 17705 ;; Return value:  Size  Location     Type
 17706 ;;		None               void
 17707 ;; Registers used:
 17708 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17709 ;; Tracked objects:
 17710 ;;		On entry : 0/0
 17711 ;;		On exit  : 0/0
 17712 ;;		Unchanged: 0/0
 17713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17718 ;;Total ram usage:        0 bytes
 17719 ;; Hardware stack levels used:    1
 17720 ;; Hardware stack levels required when called:    5
 17721 ;; This function calls:
 17722 ;;		Nothing
 17723 ;; This function is called by:
 17724 ;;		_CC2500_TxData
 17725 ;;		_CC2500_RxData
 17726 ;;		_CC2500_PowerRST
 17727 ;;		_CC2500_WriteREG
 17728 ;;		_CC2500_WriteCommand
 17729 ;;		_CC2500_ReadStatus
 17730 ;;		_getAD
 17731 ;;		_TouchPower
 17732 ;;		_CC2500_ReadREG
 17733 ;; This function uses a non-reentrant model
 17734 ;;
 17735                           
 17736                           
 17737                           ;psect for function _Timeout_Counter
 17738  1D9A                     _Timeout_Counter:	
 17739                           
 17740                           ;main_B1.c: 262: myMain.Timeout_Counter++;
 17741                           
 17742                           ;incstack = 0
 17743                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17744  1D9A  3001               	movlw	1
 17745  1D9B  0021               	movlb	1	; select bank1
 17746  1D9C  07AE               	addwf	(_myMain^(0+128)+14),f
 17747  1D9D  3000               	movlw	0
 17748  1D9E  3DAF               	addwfc	((_myMain+1)^(0+128)+14),f
 17749                           
 17750                           ;main_B1.c: 263: if (myMain.Timeout_Counter == 10000) {
 17751  1D9F  300E               	movlw	14
 17752  1DA0  3EA0               	addlw	_myMain& (0+255)
 17753  1DA1  0086               	movwf	6
 17754  1DA2  0187               	clrf	7
 17755  1DA3  3F40               	moviw [0]fsr1
 17756  1DA4  3A10               	xorlw	16
 17757  1DA5  1D03               	skipz
 17758  1DA6  2DA9               	goto	u8765
 17759  1DA7  3F41               	moviw [1]fsr1
 17760  1DA8  3A27               	xorlw	39
 17761  1DA9                     u8765:	
 17762  1DA9  1D03               	skipz
 17763  1DAA  0008               	return
 17764                           
 17765                           ;main_B1.c: 264: myMain.Timeout_Counter = 0;
 17766  1DAB  01AE               	clrf	(_myMain^(0+128)+14)
 17767  1DAC  01AF               	clrf	((_myMain+1)^(0+128)+14)
 17768                           
 17769                           ;main_B1.c: 265: myMain.Timeout = 1;
 17770  1DAD  152D               	bsf	(_myMain^(0+128)+13),2
 17771  1DAE  0008               	return
 17772  1DAF                     __end_of_Timeout_Counter:	
 17773                           
 17774                           	psect	text122
 17775  1E1B                     __ptext122:	
 17776 ;; *************** function _CC2500_WriteByte *****************
 17777 ;; Defined at:
 17778 ;;		line 222 in file "../src/CC2500_B1.c"
 17779 ;; Parameters:    Size  Location     Type
 17780 ;;		None
 17781 ;; Auto vars:     Size  Location     Type
 17782 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17783 ;; Return value:  Size  Location     Type
 17784 ;;		None               void
 17785 ;; Registers used:
 17786 ;;		wreg, status,2, status,0
 17787 ;; Tracked objects:
 17788 ;;		On entry : 0/0
 17789 ;;		On exit  : 0/0
 17790 ;;		Unchanged: 0/0
 17791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17793 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17794 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17795 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17796 ;;Total ram usage:        2 bytes
 17797 ;; Hardware stack levels used:    1
 17798 ;; Hardware stack levels required when called:    5
 17799 ;; This function calls:
 17800 ;;		Nothing
 17801 ;; This function is called by:
 17802 ;;		_CC2500_TxData
 17803 ;;		_CC2500_RxData
 17804 ;;		_CC2500_PowerRST
 17805 ;;		_CC2500_WriteREG
 17806 ;;		_CC2500_WriteCommand
 17807 ;;		_CC2500_ReadStatus
 17808 ;;		_CC2500_ReadREG
 17809 ;; This function uses a non-reentrant model
 17810 ;;
 17811                           
 17812                           
 17813                           ;psect for function _CC2500_WriteByte
 17814  1E1B                     _CC2500_WriteByte:	
 17815                           
 17816                           ;CC2500_B1.c: 223: unsigned char loop_a;
 17817                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 17818                           
 17819                           ;incstack = 0
 17820                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17821  1E1B  0020               	movlb	0	; select bank0
 17822  1E1C  01A1               	clrf	CC2500_WriteByte@loop_a
 17823  1E1D                     L12:	
 17824  1E1D  3008               	movlw	8
 17825  1E1E  0221               	subwf	CC2500_WriteByte@loop_a,w
 17826  1E1F  1803               	btfsc	3,0
 17827  1E20  0008               	return
 17828                           
 17829                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 17830  1E21  0021               	movlb	1	; select bank1
 17831  1E22  1FD0               	btfss	_SPI0Buffer^(0+128),7
 17832  1E23  2E27               	goto	l330
 17833                           
 17834                           ;CC2500_B1.c: 226: RC0 = 1;
 17835  1E24  0020               	movlb	0	; select bank0
 17836  1E25  140E               	bsf	14,0	;volatile
 17837  1E26  2E29               	goto	l331
 17838  1E27                     l330:	
 17839                           
 17840                           ;CC2500_B1.c: 227: else
 17841                           ;CC2500_B1.c: 228: RC0 = 0;
 17842  1E27  0020               	movlb	0	; select bank0
 17843  1E28  100E               	bcf	14,0	;volatile
 17844  1E29                     l331:	
 17845                           
 17846                           ;CC2500_B1.c: 229: RC1 = 1;
 17847  1E29  148E               	bsf	14,1	;volatile
 17848                           
 17849                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 17850  1E2A  1003               	clrc
 17851  1E2B  0021               	movlb	1	; select bank1
 17852  1E2C  0DD0               	rlf	_SPI0Buffer^(0+128),f
 17853                           
 17854                           ;CC2500_B1.c: 231: RC1 = 0;
 17855  1E2D  0020               	movlb	0	; select bank0
 17856  1E2E  108E               	bcf	14,1	;volatile
 17857  1E2F  3001               	movlw	1
 17858  1E30  00A0               	movwf	??_CC2500_WriteByte
 17859  1E31  0820               	movf	??_CC2500_WriteByte,w
 17860  1E32  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17861  1E33  2E1D               	goto	L12
 17862  1E34                     __end_of_CC2500_WriteByte:	
 17863                           
 17864                           	psect	text123
 17865  14AD                     __ptext123:	
 17866 ;; *************** function _Buzzer_Main *****************
 17867 ;; Defined at:
 17868 ;;		line 46 in file "../src/Buzzer_B1.c"
 17869 ;; Parameters:    Size  Location     Type
 17870 ;;		None
 17871 ;; Auto vars:     Size  Location     Type
 17872 ;;		None
 17873 ;; Return value:  Size  Location     Type
 17874 ;;		None               void
 17875 ;; Registers used:
 17876 ;;		wreg, status,2, status,0
 17877 ;; Tracked objects:
 17878 ;;		On entry : 0/0
 17879 ;;		On exit  : 0/0
 17880 ;;		Unchanged: 0/0
 17881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17884 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17885 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17886 ;;Total ram usage:        1 bytes
 17887 ;; Hardware stack levels used:    1
 17888 ;; Hardware stack levels required when called:    5
 17889 ;; This function calls:
 17890 ;;		Nothing
 17891 ;; This function is called by:
 17892 ;;		_main
 17893 ;; This function uses a non-reentrant model
 17894 ;;
 17895                           
 17896                           
 17897                           ;psect for function _Buzzer_Main
 17898  14AD                     _Buzzer_Main:	
 17899                           
 17900                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17901                           
 17902                           ;incstack = 0
 17903                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17904  14AD  0021               	movlb	1	; select bank1
 17905  14AE  1CB0               	btfss	_Buz1^(0+128),1
 17906  14AF  0008               	return
 17907                           
 17908                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17909  14B0  3001               	movlw	1
 17910  14B1  07B1               	addwf	(_Buz1^(0+128)+1),f
 17911  14B2  3000               	movlw	0
 17912  14B3  3DB2               	addwfc	((_Buz1+1)^(0+128)+1),f
 17913                           
 17914                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17915  14B4  0837               	movf	((_Buz1+1)^(0+128)+6),w
 17916  14B5  0232               	subwf	((_Buz1+1)^(0+128)+1),w
 17917  14B6  1D03               	skipz
 17918  14B7  2CBA               	goto	u7515
 17919  14B8  0836               	movf	(_Buz1^(0+128)+6),w
 17920  14B9  0231               	subwf	(_Buz1^(0+128)+1),w
 17921  14BA                     u7515:	
 17922  14BA  1C03               	skipc
 17923  14BB  0008               	return
 17924                           
 17925                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17926  14BC  01B1               	clrf	(_Buz1^(0+128)+1)
 17927  14BD  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 17928                           
 17929                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17930  14BE  12B0               	bcf	_Buz1^(0+128),5
 17931  14BF  0020               	movlb	0	; select bank0
 17932  14C0  1D8D               	btfss	13,3	;volatile
 17933  14C1  2CC4               	goto	l7671
 17934  14C2  0021               	movlb	1	; select bank1
 17935  14C3  16B0               	bsf	_Buz1^(0+128),5
 17936  14C4                     l7671:	
 17937                           
 17938                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17939  14C4  0021               	movlb	1	; select bank1
 17940  14C5  1AB0               	btfsc	_Buz1^(0+128),5
 17941  14C6  2CF0               	goto	l106
 17942                           
 17943                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17944  14C7  08B3               	movf	(_Buz1^(0+128)+3),f
 17945  14C8  1D03               	skipz
 17946  14C9  2CEC               	goto	l107
 17947                           
 17948                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17949  14CA  1DB0               	btfss	_Buz1^(0+128),3
 17950  14CB  2CDA               	goto	l108
 17951                           
 17952                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17953  14CC  11B0               	bcf	_Buz1^(0+128),3
 17954                           
 17955                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17956  14CD  0834               	movf	(_Buz1^(0+128)+4),w
 17957  14CE  0020               	movlb	0	; select bank0
 17958  14CF  00A0               	movwf	??_Buzzer_Main
 17959  14D0  0820               	movf	??_Buzzer_Main,w
 17960  14D1  0021               	movlb	1	; select bank1
 17961  14D2  00B3               	movwf	(_Buz1^(0+128)+3)
 17962                           
 17963                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17964  14D3  0839               	movf	((_Buz1+1)^(0+128)+8),w
 17965  14D4  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 17966  14D5  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 17967  14D6  0838               	movf	(_Buz1^(0+128)+8),w
 17968  14D7  01B6               	clrf	(_Buz1^(0+128)+6)
 17969  14D8  07B6               	addwf	(_Buz1^(0+128)+6),f
 17970                           
 17971                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17972  14D9  0008               	return
 17973  14DA                     l108:	
 17974  14DA  1E30               	btfss	_Buz1^(0+128),4
 17975  14DB  2CEA               	goto	l110
 17976                           
 17977                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17978  14DC  1230               	bcf	_Buz1^(0+128),4
 17979                           
 17980                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17981  14DD  0835               	movf	(_Buz1^(0+128)+5),w
 17982  14DE  0020               	movlb	0	; select bank0
 17983  14DF  00A0               	movwf	??_Buzzer_Main
 17984  14E0  0820               	movf	??_Buzzer_Main,w
 17985  14E1  0021               	movlb	1	; select bank1
 17986  14E2  00B3               	movwf	(_Buz1^(0+128)+3)
 17987                           
 17988                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17989  14E3  083B               	movf	((_Buz1+1)^(0+128)+10),w
 17990  14E4  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 17991  14E5  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 17992  14E6  083A               	movf	(_Buz1^(0+128)+10),w
 17993  14E7  01B6               	clrf	(_Buz1^(0+128)+6)
 17994  14E8  07B6               	addwf	(_Buz1^(0+128)+6),f
 17995                           
 17996                           ;Buzzer_B1.c: 62: } else {
 17997  14E9  0008               	return
 17998  14EA                     l110:	
 17999                           
 18000                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18001  14EA  10B0               	bcf	_Buz1^(0+128),1
 18002                           
 18003                           ;Buzzer_B1.c: 64: }
 18004                           ;Buzzer_B1.c: 65: } else {
 18005  14EB  0008               	return
 18006  14EC                     l107:	
 18007                           
 18008                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18009  14EC  16B0               	bsf	_Buz1^(0+128),5
 18010                           
 18011                           ;Buzzer_B1.c: 68: RB3 = 1;
 18012  14ED  0020               	movlb	0	; select bank0
 18013  14EE  158D               	bsf	13,3	;volatile
 18014                           
 18015                           ;Buzzer_B1.c: 69: }
 18016                           ;Buzzer_B1.c: 70: } else {
 18017  14EF  0008               	return
 18018  14F0                     l106:	
 18019                           
 18020                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18021  14F0  12B0               	bcf	_Buz1^(0+128),5
 18022                           
 18023                           ;Buzzer_B1.c: 73: RB3 = 0;
 18024  14F1  0020               	movlb	0	; select bank0
 18025  14F2  118D               	bcf	13,3	;volatile
 18026                           
 18027                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18028  14F3  3001               	movlw	1
 18029  14F4  0021               	movlb	1	; select bank1
 18030  14F5  02B3               	subwf	(_Buz1^(0+128)+3),f
 18031  14F6  0008               	return
 18032  14F7                     __end_of_Buzzer_Main:	
 18033                           
 18034                           	psect	text124
 18035  1B4C                     __ptext124:	
 18036 ;; *************** function _Buzzer_Initialization *****************
 18037 ;; Defined at:
 18038 ;;		line 11 in file "../src/Buzzer_B1.c"
 18039 ;; Parameters:    Size  Location     Type
 18040 ;;		None
 18041 ;; Auto vars:     Size  Location     Type
 18042 ;;		None
 18043 ;; Return value:  Size  Location     Type
 18044 ;;		None               void
 18045 ;; Registers used:
 18046 ;;		None
 18047 ;; Tracked objects:
 18048 ;;		On entry : 0/0
 18049 ;;		On exit  : 0/0
 18050 ;;		Unchanged: 0/0
 18051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18056 ;;Total ram usage:        0 bytes
 18057 ;; Hardware stack levels used:    1
 18058 ;; Hardware stack levels required when called:    5
 18059 ;; This function calls:
 18060 ;;		Nothing
 18061 ;; This function is called by:
 18062 ;;		_main
 18063 ;; This function uses a non-reentrant model
 18064 ;;
 18065                           
 18066                           
 18067                           ;psect for function _Buzzer_Initialization
 18068  1B4C                     _Buzzer_Initialization:	
 18069                           
 18070                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18071                           
 18072                           ;incstack = 0
 18073                           ; Regs used in _Buzzer_Initialization: []
 18074  1B4C  0021               	movlb	1	; select bank1
 18075  1B4D  1430               	bsf	_Buz1^(0+128),0
 18076  1B4E  0008               	return
 18077  1B4F                     __end_of_Buzzer_Initialization:	
 18078                           
 18079                           	psect	intentry
 18080  0004                     __pintentry:	
 18081 ;; *************** function _ISR *****************
 18082 ;; Defined at:
 18083 ;;		line 107 in file "../src/MCU_B1.c"
 18084 ;; Parameters:    Size  Location     Type
 18085 ;;		None
 18086 ;; Auto vars:     Size  Location     Type
 18087 ;;		None
 18088 ;; Return value:  Size  Location     Type
 18089 ;;		None               void
 18090 ;; Registers used:
 18091 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18092 ;; Tracked objects:
 18093 ;;		On entry : 0/0
 18094 ;;		On exit  : 0/0
 18095 ;;		Unchanged: 0/0
 18096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18099 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18100 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18101 ;;Total ram usage:        1 bytes
 18102 ;; Hardware stack levels used:    1
 18103 ;; Hardware stack levels required when called:    4
 18104 ;; This function calls:
 18105 ;;		_IOC_ISR
 18106 ;;		_TMR1_ISR
 18107 ;; This function is called by:
 18108 ;;		Interrupt level 1
 18109 ;; This function uses a non-reentrant model
 18110 ;;
 18111                           
 18112  0004                     _ISR:	
 18113                           
 18114                           ;incstack = 0
 18115                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18116  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18117  0005  3180               	pagesel	$
 18118  0006  0020               	movlb	0	; select bank0
 18119  0007  087F               	movf	127,w
 18120  0008  00F7               	movwf	??_ISR
 18121                           
 18122                           ;MCU_B1.c: 109: IOC_ISR();
 18123  0009  319C  2456  3180   	fcall	_IOC_ISR
 18124                           
 18125                           ;MCU_B1.c: 111: ;;
 18126                           ;MCU_B1.c: 113: TMR1_ISR();
 18127  000C  3190  20F5         	fcall	_TMR1_ISR
 18128  000E  0877               	movf	??_ISR,w
 18129  000F  0020               	movlb	0	; select bank0
 18130  0010  00FF               	movwf	127
 18131  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18132  0012  0009               	retfie
 18133  0013                     __end_of_ISR:	
 18134                           
 18135                           	psect	text126
 18136  10F5                     __ptext126:	
 18137 ;; *************** function _TMR1_ISR *****************
 18138 ;; Defined at:
 18139 ;;		line 209 in file "../src/MCU_B1.c"
 18140 ;; Parameters:    Size  Location     Type
 18141 ;;		None
 18142 ;; Auto vars:     Size  Location     Type
 18143 ;;		None
 18144 ;; Return value:  Size  Location     Type
 18145 ;;		None               void
 18146 ;; Registers used:
 18147 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18148 ;; Tracked objects:
 18149 ;;		On entry : 0/0
 18150 ;;		On exit  : 0/0
 18151 ;;		Unchanged: 0/0
 18152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18157 ;;Total ram usage:        0 bytes
 18158 ;; Hardware stack levels used:    1
 18159 ;; Hardware stack levels required when called:    2
 18160 ;; This function calls:
 18161 ;;		_setDimmerLights_IntrControl
 18162 ;; This function is called by:
 18163 ;;		_ISR
 18164 ;; This function uses a non-reentrant model
 18165 ;;
 18166                           
 18167                           
 18168                           ;psect for function _TMR1_ISR
 18169  10F5                     _TMR1_ISR:	
 18170                           
 18171                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18172                           
 18173                           ;incstack = 0
 18174                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18175  10F5  0021               	movlb	1	; select bank1
 18176  10F6  1C11               	btfss	17,0	;volatile
 18177  10F7  0008               	return
 18178  10F8  0020               	movlb	0	; select bank0
 18179  10F9  1C11               	btfss	17,0	;volatile
 18180  10FA  0008               	return
 18181                           
 18182                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18183  10FB  30FA               	movlw	250
 18184  10FC  0097               	movwf	23	;volatile
 18185                           
 18186                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18187  10FD  3038               	movlw	56
 18188  10FE  0096               	movwf	22	;volatile
 18189                           
 18190                           ;MCU_B1.c: 214: TMR1IF = 0;
 18191  10FF  1011               	bcf	17,0	;volatile
 18192                           
 18193                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18194  1100  3001               	movlw	1
 18195  1101  3182  22FD  3190   	fcall	_setDimmerLights_IntrControl
 18196                           
 18197                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18198  1104  3002               	movlw	2
 18199  1105  3182  22FD  3190   	fcall	_setDimmerLights_IntrControl
 18200                           
 18201                           ;MCU_B1.c: 234: Timer1.Count++;
 18202  1108  3001               	movlw	1
 18203  1109  0022               	movlb	2	; select bank2
 18204  110A  07A4               	addwf	(_Timer1^(0+256)+1),f
 18205  110B  3000               	movlw	0
 18206  110C  3DA5               	addwfc	((_Timer1+1)^(0+256)+1),f
 18207                           
 18208                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 18209  110D  3001               	movlw	1
 18210  110E  3E23               	addlw	_Timer1& (0+255)
 18211  110F  0086               	movwf	6
 18212  1110  3001               	movlw	1	; select bank2/3
 18213  1111  0087               	movwf	7
 18214  1112  3F40               	moviw [0]fsr1
 18215  1113  3A64               	xorlw	100
 18216  1114  1D03               	skipz
 18217  1115  2918               	goto	u767_25
 18218  1116  3F41               	moviw [1]fsr1
 18219  1117  3A00               	xorlw	0
 18220  1118                     u767_25:	
 18221  1118  1D03               	skipz
 18222  1119  0008               	return
 18223                           
 18224                           ;MCU_B1.c: 236: {
 18225                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18226  111A  01A4               	clrf	(_Timer1^(0+256)+1)
 18227  111B  01A5               	clrf	((_Timer1+1)^(0+256)+1)
 18228                           
 18229                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18230  111C  1423               	bsf	_Timer1^(0+256),0
 18231  111D  0008               	return
 18232  111E                     __end_of_TMR1_ISR:	
 18233                           
 18234                           	psect	text127
 18235  02FD                     __ptext127:	
 18236 ;; *************** function _setDimmerLights_IntrControl *****************
 18237 ;; Defined at:
 18238 ;;		line 92 in file "../src/Dimmer_B1.c"
 18239 ;; Parameters:    Size  Location     Type
 18240 ;;  lights          1    wreg     unsigned char 
 18241 ;; Auto vars:     Size  Location     Type
 18242 ;;  lights          1    6[COMMON] unsigned char 
 18243 ;; Return value:  Size  Location     Type
 18244 ;;		None               void
 18245 ;; Registers used:
 18246 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18247 ;; Tracked objects:
 18248 ;;		On entry : 0/0
 18249 ;;		On exit  : 0/0
 18250 ;;		Unchanged: 0/0
 18251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18253 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18254 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18255 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18256 ;;Total ram usage:        5 bytes
 18257 ;; Hardware stack levels used:    1
 18258 ;; Hardware stack levels required when called:    1
 18259 ;; This function calls:
 18260 ;;		_DimmerIntrPointSelect
 18261 ;; This function is called by:
 18262 ;;		_TMR1_ISR
 18263 ;; This function uses a non-reentrant model
 18264 ;;
 18265                           
 18266                           
 18267                           ;psect for function _setDimmerLights_IntrControl
 18268  02FD                     _setDimmerLights_IntrControl:	
 18269                           
 18270                           ;incstack = 0
 18271                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18272                           ;setDimmerLights_IntrControl@lights stored from wreg
 18273  02FD  00F6               	movwf	setDimmerLights_IntrControl@lights
 18274                           
 18275                           ;Dimmer_B1.c: 228: DimmerIntrPointSelect(lights);
 18276  02FE  0876               	movf	setDimmerLights_IntrControl@lights,w
 18277  02FF  319C  24C8  3182   	fcall	_DimmerIntrPointSelect
 18278                           
 18279                           ;Dimmer_B1.c: 229: if (DimmerLightsIntr->GO == 1) {
 18280  0302  0879               	movf	_DimmerLightsIntr,w
 18281  0303  0086               	movwf	6
 18282  0304  3001               	movlw	1	; select bank2/3
 18283  0305  0087               	movwf	7
 18284  0306  1C01               	btfss	1,0
 18285  0307  2B5F               	goto	i1l7121
 18286                           
 18287                           ;Dimmer_B1.c: 230: DimmerLightsIntr->Count++;
 18288  0308  3001               	movlw	1
 18289  0309  00F2               	movwf	??_setDimmerLights_IntrControl
 18290  030A  0879               	movf	_DimmerLightsIntr,w
 18291  030B  3E03               	addlw	3
 18292  030C  0086               	movwf	6
 18293  030D  3001               	movlw	1	; select bank2/3
 18294  030E  0087               	movwf	7
 18295  030F  0872               	movf	??_setDimmerLights_IntrControl,w
 18296  0310  0781               	addwf	1,f
 18297                           
 18298                           ;Dimmer_B1.c: 231: if (DimmerLightsIntr->Count
 18299                           ;Dimmer_B1.c: 232: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 18300  0311  0022               	movlb	2	; select bank2
 18301  0312  0822               	movf	(_Dimmer^(0+256)+2),w
 18302  0313  00F2               	movwf	??_setDimmerLights_IntrControl
 18303  0314  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18304  0315  09F2               	comf	??_setDimmerLights_IntrControl,f
 18305  0316  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18306  0317  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18307  0318  1903               	skipnz
 18308  0319  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18309  031A  0879               	movf	_DimmerLightsIntr,w
 18310  031B  3E04               	addlw	4
 18311  031C  0086               	movwf	6
 18312  031D  3001               	movlw	1	; select bank2/3
 18313  031E  0087               	movwf	7
 18314  031F  0801               	movf	1,w
 18315  0320  0772               	addwf	??_setDimmerLights_IntrControl,w
 18316  0321  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18317  0322  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18318  0323  1803               	skipnc
 18319  0324  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18320  0325  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18321  0326  0879               	movf	_DimmerLightsIntr,w
 18322  0327  3E03               	addlw	3
 18323  0328  0086               	movwf	6
 18324  0329  3001               	movlw	1	; select bank2/3
 18325  032A  0087               	movwf	7
 18326  032B  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18327  032C  3A80               	xorlw	128
 18328  032D  3C80               	sublw	128
 18329  032E  1D03               	skipz
 18330  032F  2B32               	goto	u652_25
 18331  0330  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18332  0331  0201               	subwf	1,w
 18333  0332                     u652_25:	
 18334  0332  1C03               	skipc
 18335  0333  0008               	return
 18336                           
 18337                           ;Dimmer_B1.c: 233: DimmerLightsIntr->Count = 0;
 18338  0334  0879               	movf	_DimmerLightsIntr,w
 18339  0335  3E03               	addlw	3
 18340  0336  0086               	movwf	6
 18341  0337  3001               	movlw	1	; select bank2/3
 18342  0338  0087               	movwf	7
 18343  0339  0181               	clrf	1
 18344                           
 18345                           ;Dimmer_B1.c: 234: DimmerLightsIntr->GO = 0;
 18346  033A  0879               	movf	_DimmerLightsIntr,w
 18347  033B  0086               	movwf	6
 18348  033C  3001               	movlw	1	; select bank2/3
 18349  033D  0087               	movwf	7
 18350  033E  1001               	bcf	1,0
 18351                           
 18352                           ;Dimmer_B1.c: 235: DimmerLightsIntr->Flag = 1;
 18353  033F  0879               	movf	_DimmerLightsIntr,w
 18354  0340  3E08               	addlw	8
 18355  0341  0086               	movwf	6
 18356  0342  3001               	movlw	1	; select bank2/3
 18357  0343  0087               	movwf	7
 18358  0344  1401               	bsf	1,0
 18359                           
 18360                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->MOSFET == 1) {
 18361  0345  0879               	movf	_DimmerLightsIntr,w
 18362  0346  3E09               	addlw	9
 18363  0347  0086               	movwf	6
 18364  0348  3001               	movlw	1	; select bank2/3
 18365  0349  0087               	movwf	7
 18366  034A  1E01               	btfss	1,4
 18367  034B  0008               	return
 18368                           
 18369                           ;Dimmer_B1.c: 237: DimmerLightsIntr->MOSFET = 0;
 18370  034C  0879               	movf	_DimmerLightsIntr,w
 18371  034D  3E09               	addlw	9
 18372  034E  0086               	movwf	6
 18373  034F  3001               	movlw	1	; select bank2/3
 18374  0350  0087               	movwf	7
 18375  0351  1201               	bcf	1,4
 18376                           
 18377                           ;Dimmer_B1.c: 239: if (lights == 1) {
 18378  0352  0876               	movf	setDimmerLights_IntrControl@lights,w
 18379  0353  3A01               	xorlw	1
 18380  0354  1D03               	skipz
 18381  0355  2B58               	goto	i1l7117
 18382                           
 18383                           ;Dimmer_B1.c: 240: RA7 = 0;
 18384  0356  0020               	movlb	0	; select bank0
 18385  0357  138C               	bcf	12,7	;volatile
 18386  0358                     i1l7117:	
 18387                           ;Dimmer_B1.c: 241: ;;
 18388                           
 18389                           
 18390                           ;Dimmer_B1.c: 242: }
 18391                           ;Dimmer_B1.c: 245: if (lights == 2) {
 18392  0358  0876               	movf	setDimmerLights_IntrControl@lights,w
 18393  0359  3A02               	xorlw	2
 18394  035A  1D03               	skipz
 18395  035B  0008               	return
 18396                           
 18397                           ;Dimmer_B1.c: 246: RB4 = 0;
 18398  035C  0020               	movlb	0	; select bank0
 18399  035D  120D               	bcf	13,4	;volatile
 18400                           
 18401                           ;Dimmer_B1.c: 247: }
 18402                           ;Dimmer_B1.c: 249: }
 18403                           ;Dimmer_B1.c: 250: }
 18404                           ;Dimmer_B1.c: 251: } else {
 18405  035E  0008               	return
 18406  035F                     i1l7121:	
 18407                           
 18408                           ;Dimmer_B1.c: 252: if (DimmerLightsIntr->Flag == 1) {
 18409  035F  0879               	movf	_DimmerLightsIntr,w
 18410  0360  3E08               	addlw	8
 18411  0361  0086               	movwf	6
 18412  0362  3001               	movlw	1	; select bank2/3
 18413  0363  0087               	movwf	7
 18414  0364  1C01               	btfss	1,0
 18415  0365  2C13               	goto	i1l747
 18416                           
 18417                           ;Dimmer_B1.c: 253: DimmerLightsIntr->Flag = 0;
 18418  0366  0879               	movf	_DimmerLightsIntr,w
 18419  0367  3E08               	addlw	8
 18420  0368  0086               	movwf	6
 18421  0369  3001               	movlw	1	; select bank2/3
 18422  036A  0087               	movwf	7
 18423  036B  1001               	bcf	1,0
 18424                           
 18425                           ;Dimmer_B1.c: 254: if (DimmerLightsIntr->Signal == 1) {
 18426  036C  0879               	movf	_DimmerLightsIntr,w
 18427  036D  0086               	movwf	6
 18428  036E  3001               	movlw	1	; select bank2/3
 18429  036F  0087               	movwf	7
 18430  0370  1C81               	btfss	1,1
 18431  0371  2C13               	goto	i1l747
 18432                           
 18433                           ;Dimmer_B1.c: 255: DimmerLightsIntr->DimmingTime++;
 18434  0372  3001               	movlw	1
 18435  0373  00F2               	movwf	??_setDimmerLights_IntrControl
 18436  0374  0A79               	incf	_DimmerLightsIntr,w
 18437  0375  0086               	movwf	6
 18438  0376  3001               	movlw	1	; select bank2/3
 18439  0377  0087               	movwf	7
 18440  0378  0872               	movf	??_setDimmerLights_IntrControl,w
 18441  0379  0781               	addwf	1,f
 18442                           
 18443                           ;Dimmer_B1.c: 256: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18444  037A  0A79               	incf	_DimmerLightsIntr,w
 18445  037B  0086               	movwf	6
 18446  037C  3001               	movlw	1	; select bank2/3
 18447  037D  0087               	movwf	7
 18448  037E  0879               	movf	_DimmerLightsIntr,w
 18449  037F  3E02               	addlw	2
 18450  0380  0084               	movwf	4
 18451  0381  3001               	movlw	1	; select bank2/3
 18452  0382  0085               	movwf	5
 18453  0383  0800               	movf	0,w
 18454  0384  0201               	subwf	1,w
 18455  0385  1C03               	skipc
 18456  0386  2C13               	goto	i1l747
 18457                           
 18458                           ;Dimmer_B1.c: 257: DimmerLightsIntr->DimmingTime = 0;
 18459  0387  0A79               	incf	_DimmerLightsIntr,w
 18460  0388  0086               	movwf	6
 18461  0389  3001               	movlw	1	; select bank2/3
 18462  038A  0087               	movwf	7
 18463  038B  0181               	clrf	1
 18464                           
 18465                           ;Dimmer_B1.c: 258: if (DimmerLightsIntr->AdjFlag == 1) {
 18466  038C  0879               	movf	_DimmerLightsIntr,w
 18467  038D  0086               	movwf	6
 18468  038E  3001               	movlw	1	; select bank2/3
 18469  038F  0087               	movwf	7
 18470  0390  1D81               	btfss	1,3
 18471  0391  2BC8               	goto	i1l7147
 18472                           
 18473                           ;Dimmer_B1.c: 259: if (DimmerLightsIntr->AdjStatus == 0) {
 18474  0392  0879               	movf	_DimmerLightsIntr,w
 18475  0393  0086               	movwf	6
 18476  0394  3001               	movlw	1	; select bank2/3
 18477  0395  0087               	movwf	7
 18478  0396  1A01               	btfsc	1,4
 18479  0397  2BB1               	goto	i1l7141
 18480                           
 18481                           ;Dimmer_B1.c: 260: if (DimmerLightsIntr->DimmingValue < ((char)(80*0.8))) {
 18482  0398  0879               	movf	_DimmerLightsIntr,w
 18483  0399  3E04               	addlw	4
 18484  039A  0086               	movwf	6
 18485  039B  3001               	movlw	1	; select bank2/3
 18486  039C  0087               	movwf	7
 18487  039D  3040               	movlw	64
 18488  039E  0201               	subwf	1,w
 18489  039F  1803               	skipnc
 18490  03A0  2BAB               	goto	i1l7139
 18491                           
 18492                           ;Dimmer_B1.c: 261: DimmerLightsIntr->DimmingValue++;
 18493  03A1  3001               	movlw	1
 18494  03A2  00F2               	movwf	??_setDimmerLights_IntrControl
 18495  03A3  0879               	movf	_DimmerLightsIntr,w
 18496  03A4  3E04               	addlw	4
 18497  03A5  0086               	movwf	6
 18498  03A6  3001               	movlw	1	; select bank2/3
 18499  03A7  0087               	movwf	7
 18500  03A8  0872               	movf	??_setDimmerLights_IntrControl,w
 18501  03A9  0781               	addwf	1,f
 18502                           
 18503                           ;Dimmer_B1.c: 262: } else {
 18504  03AA  2C13               	goto	i1l747
 18505  03AB                     i1l7139:	
 18506                           
 18507                           ;Dimmer_B1.c: 263: DimmerLightsIntr->AdjStatus = 1;
 18508  03AB  0879               	movf	_DimmerLightsIntr,w
 18509  03AC  0086               	movwf	6
 18510  03AD  3001               	movlw	1	; select bank2/3
 18511  03AE  0087               	movwf	7
 18512  03AF  1601               	bsf	1,4
 18513                           
 18514                           ;Dimmer_B1.c: 264: }
 18515                           ;Dimmer_B1.c: 265: } else {
 18516  03B0  2C13               	goto	i1l747
 18517  03B1                     i1l7141:	
 18518                           
 18519                           ;Dimmer_B1.c: 266: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18520  03B1  0879               	movf	_DimmerLightsIntr,w
 18521  03B2  3E04               	addlw	4
 18522  03B3  0086               	movwf	6
 18523  03B4  3001               	movlw	1	; select bank2/3
 18524  03B5  0087               	movwf	7
 18525  03B6  300D               	movlw	13
 18526  03B7  0201               	subwf	1,w
 18527  03B8  1C03               	skipc
 18528  03B9  2BC2               	goto	i1l7145
 18529                           
 18530                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingValue--;
 18531  03BA  0879               	movf	_DimmerLightsIntr,w
 18532  03BB  3E04               	addlw	4
 18533  03BC  0086               	movwf	6
 18534  03BD  3001               	movlw	1	; select bank2/3
 18535  03BE  0087               	movwf	7
 18536  03BF  3001               	movlw	1
 18537  03C0  0281               	subwf	1,f
 18538                           
 18539                           ;Dimmer_B1.c: 268: } else {
 18540  03C1  2C13               	goto	i1l747
 18541  03C2                     i1l7145:	
 18542                           
 18543                           ;Dimmer_B1.c: 269: DimmerLightsIntr->AdjStatus = 0;
 18544  03C2  0879               	movf	_DimmerLightsIntr,w
 18545  03C3  0086               	movwf	6
 18546  03C4  3001               	movlw	1	; select bank2/3
 18547  03C5  0087               	movwf	7
 18548  03C6  1201               	bcf	1,4
 18549                           
 18550                           ;Dimmer_B1.c: 270: }
 18551                           ;Dimmer_B1.c: 271: }
 18552                           ;Dimmer_B1.c: 272: } else if (DimmerLightsIntr->AdjRF == 1) {
 18553  03C7  2C13               	goto	i1l747
 18554  03C8                     i1l7147:	
 18555  03C8  0879               	movf	_DimmerLightsIntr,w
 18556  03C9  0086               	movwf	6
 18557  03CA  3001               	movlw	1	; select bank2/3
 18558  03CB  0087               	movwf	7
 18559  03CC  1D01               	btfss	1,2
 18560  03CD  2C13               	goto	i1l747
 18561                           
 18562                           ;Dimmer_B1.c: 273: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18563  03CE  0879               	movf	_DimmerLightsIntr,w
 18564  03CF  3E04               	addlw	4
 18565  03D0  0086               	movwf	6
 18566  03D1  3001               	movlw	1	; select bank2/3
 18567  03D2  0087               	movwf	7
 18568  03D3  0879               	movf	_DimmerLightsIntr,w
 18569  03D4  3E05               	addlw	5
 18570  03D5  0084               	movwf	4
 18571  03D6  3001               	movlw	1	; select bank2/3
 18572  03D7  0085               	movwf	5
 18573  03D8  0800               	movf	0,w
 18574  03D9  0201               	subwf	1,w
 18575  03DA  1803               	skipnc
 18576  03DB  2BE6               	goto	i1l7153
 18577                           
 18578                           ;Dimmer_B1.c: 274: DimmerLightsIntr->DimmingValue++;
 18579  03DC  3001               	movlw	1
 18580  03DD  00F2               	movwf	??_setDimmerLights_IntrControl
 18581  03DE  0879               	movf	_DimmerLightsIntr,w
 18582  03DF  3E04               	addlw	4
 18583  03E0  0086               	movwf	6
 18584  03E1  3001               	movlw	1	; select bank2/3
 18585  03E2  0087               	movwf	7
 18586  03E3  0872               	movf	??_setDimmerLights_IntrControl,w
 18587  03E4  0781               	addwf	1,f
 18588                           
 18589                           ;Dimmer_B1.c: 275: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18590  03E5  2BFB               	goto	i1l7157
 18591  03E6                     i1l7153:	
 18592  03E6  0879               	movf	_DimmerLightsIntr,w
 18593  03E7  3E05               	addlw	5
 18594  03E8  0086               	movwf	6
 18595  03E9  3001               	movlw	1	; select bank2/3
 18596  03EA  0087               	movwf	7
 18597  03EB  0879               	movf	_DimmerLightsIntr,w
 18598  03EC  3E04               	addlw	4
 18599  03ED  0084               	movwf	4
 18600  03EE  3001               	movlw	1	; select bank2/3
 18601  03EF  0085               	movwf	5
 18602  03F0  0800               	movf	0,w
 18603  03F1  0201               	subwf	1,w
 18604  03F2  1803               	skipnc
 18605  03F3  2BFB               	goto	i1l7157
 18606                           
 18607                           ;Dimmer_B1.c: 276: DimmerLightsIntr->DimmingValue--;
 18608  03F4  0879               	movf	_DimmerLightsIntr,w
 18609  03F5  3E04               	addlw	4
 18610  03F6  0086               	movwf	6
 18611  03F7  3001               	movlw	1	; select bank2/3
 18612  03F8  0087               	movwf	7
 18613  03F9  3001               	movlw	1
 18614  03FA  0281               	subwf	1,f
 18615  03FB                     i1l7157:	
 18616                           
 18617                           ;Dimmer_B1.c: 277: }
 18618                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18619  03FB  0879               	movf	_DimmerLightsIntr,w
 18620  03FC  3E05               	addlw	5
 18621  03FD  0086               	movwf	6
 18622  03FE  3001               	movlw	1	; select bank2/3
 18623  03FF  0087               	movwf	7
 18624  0400  0879               	movf	_DimmerLightsIntr,w
 18625  0401  3E04               	addlw	4
 18626  0402  0084               	movwf	4
 18627  0403  3001               	movlw	1	; select bank2/3
 18628  0404  0085               	movwf	5
 18629  0405  0800               	movf	0,w
 18630  0406  0601               	xorwf	1,w
 18631  0407  1D03               	skipz
 18632  0408  2C13               	goto	i1l747
 18633                           
 18634                           ;Dimmer_B1.c: 279: DimmerLightsIntr->AdjRF = 0;
 18635  0409  0879               	movf	_DimmerLightsIntr,w
 18636  040A  0086               	movwf	6
 18637  040B  3001               	movlw	1	; select bank2/3
 18638  040C  0087               	movwf	7
 18639  040D  1101               	bcf	1,2
 18640                           
 18641                           ;Dimmer_B1.c: 280: DimmerLightsIntr->Signal = 0;
 18642  040E  0879               	movf	_DimmerLightsIntr,w
 18643  040F  0086               	movwf	6
 18644  0410  3001               	movlw	1	; select bank2/3
 18645  0411  0087               	movwf	7
 18646  0412  1081               	bcf	1,1
 18647  0413                     i1l747:	
 18648                           
 18649                           ;Dimmer_B1.c: 281: }
 18650                           ;Dimmer_B1.c: 282: }
 18651                           ;Dimmer_B1.c: 300: }
 18652                           ;Dimmer_B1.c: 301: }
 18653                           ;Dimmer_B1.c: 302: }
 18654                           ;Dimmer_B1.c: 304: if (DimmerLightsIntr->MosfetSignal == 1) {
 18655  0413  0879               	movf	_DimmerLightsIntr,w
 18656  0414  3E09               	addlw	9
 18657  0415  0086               	movwf	6
 18658  0416  3001               	movlw	1	; select bank2/3
 18659  0417  0087               	movwf	7
 18660  0418  1D81               	btfss	1,3
 18661  0419  0008               	return
 18662                           
 18663                           ;Dimmer_B1.c: 305: DimmerLightsIntr->MosfetSignalCount++;
 18664  041A  3001               	movlw	1
 18665  041B  00F2               	movwf	??_setDimmerLights_IntrControl
 18666  041C  0879               	movf	_DimmerLightsIntr,w
 18667  041D  3E0C               	addlw	12
 18668  041E  0086               	movwf	6
 18669  041F  3001               	movlw	1	; select bank2/3
 18670  0420  0087               	movwf	7
 18671  0421  0872               	movf	??_setDimmerLights_IntrControl,w
 18672  0422  0781               	addwf	1,f
 18673                           
 18674                           ;Dimmer_B1.c: 306: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 18675  0423  0879               	movf	_DimmerLightsIntr,w
 18676  0424  3E0C               	addlw	12
 18677  0425  0086               	movwf	6
 18678  0426  3001               	movlw	1	; select bank2/3
 18679  0427  0087               	movwf	7
 18680  0428  0801               	movf	1,w
 18681  0429  3A05               	xorlw	5
 18682  042A  1D03               	skipz
 18683  042B  0008               	return
 18684                           
 18685                           ;Dimmer_B1.c: 307: DimmerLightsIntr->MosfetSignalCount = 0;
 18686  042C  0879               	movf	_DimmerLightsIntr,w
 18687  042D  3E0C               	addlw	12
 18688  042E  0086               	movwf	6
 18689  042F  3001               	movlw	1	; select bank2/3
 18690  0430  0087               	movwf	7
 18691  0431  0181               	clrf	1
 18692                           
 18693                           ;Dimmer_B1.c: 308: DimmerLightsIntr->MosfetSignal = 0;
 18694  0432  0879               	movf	_DimmerLightsIntr,w
 18695  0433  3E09               	addlw	9
 18696  0434  0086               	movwf	6
 18697  0435  3001               	movlw	1	; select bank2/3
 18698  0436  0087               	movwf	7
 18699  0437  1181               	bcf	1,3
 18700  0438  0008               	return
 18701  0439                     __end_of_setDimmerLights_IntrControl:	
 18702                           
 18703                           	psect	text128
 18704  1CC8                     __ptext128:	
 18705 ;; *************** function _DimmerIntrPointSelect *****************
 18706 ;; Defined at:
 18707 ;;		line 70 in file "../src/Dimmer_B1.c"
 18708 ;; Parameters:    Size  Location     Type
 18709 ;;  lights          1    wreg     unsigned char 
 18710 ;; Auto vars:     Size  Location     Type
 18711 ;;  lights          1    1[COMMON] unsigned char 
 18712 ;; Return value:  Size  Location     Type
 18713 ;;		None               void
 18714 ;; Registers used:
 18715 ;;		wreg
 18716 ;; Tracked objects:
 18717 ;;		On entry : 0/0
 18718 ;;		On exit  : 0/0
 18719 ;;		Unchanged: 0/0
 18720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18723 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18724 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18725 ;;Total ram usage:        2 bytes
 18726 ;; Hardware stack levels used:    1
 18727 ;; This function calls:
 18728 ;;		Nothing
 18729 ;; This function is called by:
 18730 ;;		_setDimmerLights_IntrControl
 18731 ;; This function uses a non-reentrant model
 18732 ;;
 18733                           
 18734                           
 18735                           ;psect for function _DimmerIntrPointSelect
 18736  1CC8                     _DimmerIntrPointSelect:	
 18737                           
 18738                           ;incstack = 0
 18739                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18740                           ;DimmerIntrPointSelect@lights stored from wreg
 18741  1CC8  00F1               	movwf	DimmerIntrPointSelect@lights
 18742                           
 18743                           ;Dimmer_B1.c: 72: if (lights == 1) {
 18744  1CC9  0871               	movf	DimmerIntrPointSelect@lights,w
 18745  1CCA  3A01               	xorlw	1
 18746  1CCB  1D03               	skipz
 18747  1CCC  2CD1               	goto	i1l736
 18748                           
 18749                           ;Dimmer_B1.c: 73: DimmerLightsIntr = &DimmerLights1;
 18750  1CCD  30BE               	movlw	_DimmerLights1& (0+255)
 18751  1CCE  00F0               	movwf	??_DimmerIntrPointSelect
 18752  1CCF  0870               	movf	??_DimmerIntrPointSelect,w
 18753  1CD0  00F9               	movwf	_DimmerLightsIntr
 18754  1CD1                     i1l736:	
 18755                           
 18756                           ;Dimmer_B1.c: 74: }
 18757                           ;Dimmer_B1.c: 77: if (lights == 2) {
 18758  1CD1  0871               	movf	DimmerIntrPointSelect@lights,w
 18759  1CD2  3A02               	xorlw	2
 18760  1CD3  1D03               	skipz
 18761  1CD4  0008               	return
 18762                           
 18763                           ;Dimmer_B1.c: 78: DimmerLightsIntr = &DimmerLights2;
 18764  1CD5  30CD               	movlw	_DimmerLights2& (0+255)
 18765  1CD6  00F0               	movwf	??_DimmerIntrPointSelect
 18766  1CD7  0870               	movf	??_DimmerIntrPointSelect,w
 18767  1CD8  00F9               	movwf	_DimmerLightsIntr
 18768  1CD9  0008               	return
 18769  1CDA                     __end_of_DimmerIntrPointSelect:	
 18770                           
 18771                           	psect	text129
 18772  1C56                     __ptext129:	
 18773 ;; *************** function _IOC_ISR *****************
 18774 ;; Defined at:
 18775 ;;		line 401 in file "../src/MCU_B1.c"
 18776 ;; Parameters:    Size  Location     Type
 18777 ;;		None
 18778 ;; Auto vars:     Size  Location     Type
 18779 ;;		None
 18780 ;; Return value:  Size  Location     Type
 18781 ;;		None               void
 18782 ;; Registers used:
 18783 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18784 ;; Tracked objects:
 18785 ;;		On entry : 0/0
 18786 ;;		On exit  : 0/0
 18787 ;;		Unchanged: 0/0
 18788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18793 ;;Total ram usage:        0 bytes
 18794 ;; Hardware stack levels used:    1
 18795 ;; Hardware stack levels required when called:    3
 18796 ;; This function calls:
 18797 ;;		_setDimmerReClock
 18798 ;; This function is called by:
 18799 ;;		_ISR
 18800 ;; This function uses a non-reentrant model
 18801 ;;
 18802                           
 18803                           
 18804                           ;psect for function _IOC_ISR
 18805  1C56                     _IOC_ISR:	
 18806                           
 18807                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18808                           
 18809                           ;incstack = 0
 18810                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18811  1C56  1D8B               	btfss	11,3	;volatile
 18812  1C57  0008               	return
 18813  1C58  1C0B               	btfss	11,0	;volatile
 18814  1C59  0008               	return
 18815  1C5A  0027               	movlb	7	; select bank7
 18816  1C5B  1D16               	btfss	22,2	;volatile
 18817  1C5C  0008               	return
 18818                           
 18819                           ;MCU_B1.c: 403: IOCBF2 = 0;
 18820  1C5D  1116               	bcf	22,2	;volatile
 18821                           
 18822                           ;MCU_B1.c: 404: IOCIF = 0;
 18823  1C5E  100B               	bcf	11,0	;volatile
 18824                           
 18825                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 18826  1C5F  0021               	movlb	1	; select bank1
 18827  1C60  1C20               	btfss	_myMain^(0+128),0
 18828  1C61  0008               	return
 18829                           
 18830                           ;MCU_B1.c: 408: setDimmerReClock();
 18831  1C62  319B  2384         	fcall	_setDimmerReClock
 18832  1C64  0008               	return
 18833  1C65                     __end_of_IOC_ISR:	
 18834                           
 18835                           	psect	text130
 18836  1B84                     __ptext130:	
 18837 ;; *************** function _setDimmerReClock *****************
 18838 ;; Defined at:
 18839 ;;		line 244 in file "../src/MCU_B1.c"
 18840 ;; Parameters:    Size  Location     Type
 18841 ;;		None
 18842 ;; Auto vars:     Size  Location     Type
 18843 ;;		None
 18844 ;; Return value:  Size  Location     Type
 18845 ;;		None               void
 18846 ;; Registers used:
 18847 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18848 ;; Tracked objects:
 18849 ;;		On entry : 0/0
 18850 ;;		On exit  : 0/0
 18851 ;;		Unchanged: 0/0
 18852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18857 ;;Total ram usage:        0 bytes
 18858 ;; Hardware stack levels used:    1
 18859 ;; Hardware stack levels required when called:    2
 18860 ;; This function calls:
 18861 ;;		_setDimmerLights_IntrIOC_GO
 18862 ;; This function is called by:
 18863 ;;		_IOC_ISR
 18864 ;; This function uses a non-reentrant model
 18865 ;;
 18866                           
 18867                           
 18868                           ;psect for function _setDimmerReClock
 18869  1B84                     _setDimmerReClock:	
 18870                           
 18871                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 18872                           
 18873                           ;incstack = 0
 18874                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18875  1B84  3001               	movlw	1
 18876  1B85  3193  230A  319B   	fcall	_setDimmerLights_IntrIOC_GO
 18877                           
 18878                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 18879  1B88  3002               	movlw	2
 18880  1B89  3193  230A         	fcall	_setDimmerLights_IntrIOC_GO
 18881  1B8B  0008               	return
 18882  1B8C                     __end_of_setDimmerReClock:	
 18883                           
 18884                           	psect	text131
 18885  130A                     __ptext131:	
 18886 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18887 ;; Defined at:
 18888 ;;		line 28 in file "../src/Dimmer_B1.c"
 18889 ;; Parameters:    Size  Location     Type
 18890 ;;  lights          1    wreg     unsigned char 
 18891 ;; Auto vars:     Size  Location     Type
 18892 ;;  lights          1    2[COMMON] unsigned char 
 18893 ;; Return value:  Size  Location     Type
 18894 ;;		None               void
 18895 ;; Registers used:
 18896 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18897 ;; Tracked objects:
 18898 ;;		On entry : 0/0
 18899 ;;		On exit  : 0/0
 18900 ;;		Unchanged: 0/0
 18901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18903 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18905 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18906 ;;Total ram usage:        1 bytes
 18907 ;; Hardware stack levels used:    1
 18908 ;; Hardware stack levels required when called:    1
 18909 ;; This function calls:
 18910 ;;		_DimmerIntrIOCPointSelect
 18911 ;; This function is called by:
 18912 ;;		_setDimmerReClock
 18913 ;; This function uses a non-reentrant model
 18914 ;;
 18915                           
 18916                           
 18917                           ;psect for function _setDimmerLights_IntrIOC_GO
 18918  130A                     _setDimmerLights_IntrIOC_GO:	
 18919                           
 18920                           ;incstack = 0
 18921                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18922                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18923  130A  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18924                           
 18925                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 18926  130B  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18927  130C  319D  254A  3193   	fcall	_DimmerIntrIOCPointSelect
 18928                           
 18929                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0) {
 18930  130F  0021               	movlb	1	; select bank1
 18931  1310  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18932  1311  0086               	movwf	6
 18933  1312  3001               	movlw	1	; select bank2/3
 18934  1313  0087               	movwf	7
 18935  1314  1801               	btfsc	1,0
 18936  1315  0008               	return
 18937  1316  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18938  1317  3E09               	addlw	9
 18939  1318  0086               	movwf	6
 18940  1319  3001               	movlw	1	; select bank2/3
 18941  131A  0087               	movwf	7
 18942  131B  1981               	btfsc	1,3
 18943  131C  0008               	return
 18944                           
 18945                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 18946  131D  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18947  131E  0086               	movwf	6
 18948  131F  3001               	movlw	1	; select bank2/3
 18949  1320  0087               	movwf	7
 18950  1321  1401               	bsf	1,0
 18951                           
 18952                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 18953  1322  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18954  1323  3E09               	addlw	9
 18955  1324  0086               	movwf	6
 18956  1325  3001               	movlw	1	; select bank2/3
 18957  1326  0087               	movwf	7
 18958  1327  1581               	bsf	1,3
 18959                           
 18960                           ;Dimmer_B1.c: 48: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 18961  1328  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18962  1329  0086               	movwf	6
 18963  132A  3001               	movlw	1	; select bank2/3
 18964  132B  0087               	movwf	7
 18965  132C  1F01               	btfss	1,6
 18966  132D  0008               	return
 18967                           
 18968                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MOSFET = 1;
 18969  132E  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18970  132F  3E09               	addlw	9
 18971  1330  0086               	movwf	6
 18972  1331  3001               	movlw	1	; select bank2/3
 18973  1332  0087               	movwf	7
 18974  1333  1601               	bsf	1,4
 18975                           
 18976                           ;Dimmer_B1.c: 51: if (lights == 1) {
 18977  1334  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18978  1335  3A01               	xorlw	1
 18979  1336  1D03               	skipz
 18980  1337  2B3A               	goto	i1l6683
 18981                           
 18982                           ;Dimmer_B1.c: 52: RA7 = 1;
 18983  1338  0020               	movlb	0	; select bank0
 18984  1339  178C               	bsf	12,7	;volatile
 18985  133A                     i1l6683:	
 18986                           ;Dimmer_B1.c: 53: ;;
 18987                           
 18988                           
 18989                           ;Dimmer_B1.c: 54: }
 18990                           ;Dimmer_B1.c: 57: if (lights == 2) {
 18991  133A  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18992  133B  3A02               	xorlw	2
 18993  133C  1D03               	skipz
 18994  133D  0008               	return
 18995                           
 18996                           ;Dimmer_B1.c: 58: RB4 = 1;
 18997  133E  0020               	movlb	0	; select bank0
 18998  133F  160D               	bsf	13,4	;volatile
 18999  1340  0008               	return
 19000  1341                     __end_of_setDimmerLights_IntrIOC_GO:	
 19001                           
 19002                           	psect	text132
 19003  1D4A                     __ptext132:	
 19004 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19005 ;; Defined at:
 19006 ;;		line 8 in file "../src/Dimmer_B1.c"
 19007 ;; Parameters:    Size  Location     Type
 19008 ;;  lights          1    wreg     unsigned char 
 19009 ;; Auto vars:     Size  Location     Type
 19010 ;;  lights          1    1[COMMON] unsigned char 
 19011 ;; Return value:  Size  Location     Type
 19012 ;;		None               void
 19013 ;; Registers used:
 19014 ;;		wreg
 19015 ;; Tracked objects:
 19016 ;;		On entry : 0/0
 19017 ;;		On exit  : 0/0
 19018 ;;		Unchanged: 0/0
 19019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19021 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19022 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19023 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19024 ;;Total ram usage:        2 bytes
 19025 ;; Hardware stack levels used:    1
 19026 ;; This function calls:
 19027 ;;		Nothing
 19028 ;; This function is called by:
 19029 ;;		_setDimmerLights_IntrIOC_GO
 19030 ;; This function uses a non-reentrant model
 19031 ;;
 19032                           
 19033                           
 19034                           ;psect for function _DimmerIntrIOCPointSelect
 19035  1D4A                     _DimmerIntrIOCPointSelect:	
 19036                           
 19037                           ;incstack = 0
 19038                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19039                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19040  1D4A  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19041                           
 19042                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19043  1D4B  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19044  1D4C  3A01               	xorlw	1
 19045  1D4D  1D03               	skipz
 19046  1D4E  2D54               	goto	i1l724
 19047                           
 19048                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19049  1D4F  30BE               	movlw	_DimmerLights1& (0+255)
 19050  1D50  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19051  1D51  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19052  1D52  0021               	movlb	1	; select bank1
 19053  1D53  00CD               	movwf	_DimmerLightsIntrIOC^(0+128)
 19054  1D54                     i1l724:	
 19055                           
 19056                           ;Dimmer_B1.c: 12: }
 19057                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19058  1D54  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19059  1D55  3A02               	xorlw	2
 19060  1D56  1D03               	skipz
 19061  1D57  0008               	return
 19062                           
 19063                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19064  1D58  30CD               	movlw	_DimmerLights2& (0+255)
 19065  1D59  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19066  1D5A  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19067  1D5B  0021               	movlb	1	; select bank1
 19068  1D5C  00CD               	movwf	_DimmerLightsIntrIOC^(0+128)
 19069  1D5D  0008               	return
 19070  1D5E                     __end_of_DimmerIntrIOCPointSelect:	
 19071  007E                     btemp	set	126	;btemp
 19072  007E                     pic14e$flags	set	126
 19073  007E                     wtemp	set	126
 19074  007E                     wtemp0	set	126
 19075  0080                     wtemp1	set	128
 19076  0082                     wtemp2	set	130
 19077  0084                     wtemp3	set	132
 19078  0086                     wtemp4	set	134
 19079  0088                     wtemp5	set	136
 19080  007F                     wtemp6	set	127
 19081  007E                     ttemp	set	126
 19082  007E                     ttemp0	set	126
 19083  0081                     ttemp1	set	129
 19084  0084                     ttemp2	set	132
 19085  0087                     ttemp3	set	135
 19086  007F                     ttemp4	set	127
 19087  007E                     ltemp	set	126
 19088  007E                     ltemp0	set	126
 19089  0082                     ltemp1	set	130
 19090  0086                     ltemp2	set	134
 19091  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         261
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80     78      80
    BANK1            80      7      79
    BANK2            80      0      78
    BANK3            80      0      69
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK2[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw2(BANK2[2]), DlySw1(BANK2[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_getMain_All_Error_Status
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setPercentValue
    _setDimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  100645
                                              3 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1705
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     301
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     669
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0     161
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0     161
                                              7 BANK0      2     2      0
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   13853
                                             29 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    7451
                                             17 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     604
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    6145
                                             22 BANK0      7     7      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0    3009
                                             17 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   27956
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   27956
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   26843
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1749
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   24899
                             _setBuz
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0    7773
                                             17 BANK0      3     3      0
             _getDimmerLights_Status
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   15421
                                             71 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15111
                                             68 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   15018
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14925
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0    1017
                                              9 BANK0      7     7      0
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      73
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1461
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12890
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   29684
                                             71 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   29166
                                             70 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  4     3      1   13084
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      4     3      1   14160
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   11682
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     134
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     297
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5995
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5995
                                             17 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1     847
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    2272
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1705
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    2532
                                             15 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     332
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     332
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1679
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     444
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     240
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0     127
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     110
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
       _setRF_DimmerLights
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
             _setRF_DimmerLights
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     184      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     184      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Nov 19 16:32:20 2014

                   __size_of_Switch_Main 0024                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l96 16CA                                       l98 16DE  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1FB9  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 007B                     _getDimmerLights_Line 1D37  
                 __end_of_setDelayOff_GO 092B                             ___ftadd@exp1 004D  
                           ___ftadd@exp2 004C                setDimmerLights_Adj@lights 0065  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 16F2  
                   _setDimmerLights_Line 1DC4                             ___ftadd@sign 004B  
                                    l110 14EA                                      l106 14F0  
                                    l107 14EC                                      l108 14DA  
                                    l330 1E27                                      l331 1E29  
                   _setDimmerLights_SwOn 13B1                                      l255 0AF4  
                                    l280 0C2C                                      l281 0C73  
                                    l374 10AD                                      l582 0986  
                                    l768 1D08                                      l866 1D40  
                                    l779 122A                                      l867 1D47  
                                    _GIE 005F                                      _CRC 00CA  
                                    l998 1E8B                                      l999 1E93  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0017                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RA4 0064                                      _LED 007A  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00BC                                      _ISR 0004  
                                    _WDT 00C8             getDimmerLights_Status@lights 0022  
                                    _Sw1 0155                                      _Sw2 01DC  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1E34  
                  _Buzzer_Initialization 1B4C                          __end_of_ADC_Set 1B84  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023             getDimmerLights_Status@status 0023  
                        _setDimmerLights 0D81                   _setMain_Exception$7064 0039  
                      ??_getSw_KeyStatus 0020                    _setDimmerLights_AdjRF 1FB9  
                                   ?_ISR 0070          setDimmerLights_ErrorClose@count 0032  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1C65  
                             Load_Main@i 002F                               Load_Main@j 002B  
                           ___ftdiv@sign 003D                                     l1033 1425  
                                   l1301 12CE                                     l2031 1306  
                                   l2015 0BAA                                     l2025 0C00  
                                   l1315 11C6                                     l1324 153D  
                                   l2045 0B8E                                     l2057 1457  
                                   l2049 160F                 ?_DimmerLightsPointSelect 0070  
                                   l1460 02F7                                     l1463 01F0  
                                   l1615 0E9F                                     l1464 02C7  
                                   l1465 02C5                                     l2363 1DE0  
                        __end_of_IOC_Set 1C2F                                     l2391 0089  
                                   l2721 11FA                                     l2379 1FEC  
                                   l2716 11E3                                     l2717 11FE  
                                   l2389 01B0                                     l2673 13AF  
                                   l2922 04D8                           _Load_Main$3852 002D  
                                   l1964 061B                                     l1973 059A  
                                   l1974 0596                                     l1966 0558  
                                   l1967 055A                                     l1976 05D3  
                                   l1968 0562                                     l2893 09BF  
                                   l6407 11F5                                     l5703 099C  
                                   l7311 1513                                     l6433 1565  
                                   l6441 156D                                     l5713 09C4  
                                   l5705 09A6                                     l5801 04CA  
                                   l7305 14FE                                     l9003 07F6  
                                   l6419 1554                                     l6427 155C  
                                   l2899 09D6                                     l5715 09CC  
                                   l5707 09AB                                     l5811 04FC  
                                   l5803 04D4                    _setDimmerLights_SwOff 146C  
                                   l6453 1587                                     l5821 0517  
                                   l7405 0E83                                     l5807 04EA  
                                   l5831 0EBA                                     l5903 0FD0  
                                   l7407 0E84                                     l9111 1F3F  
                                   l8305 1170                                     l8401 0902  
                                   l6449 1583                                     l6457 158B  
                                   l5761 0461                                     l9105 1745  
                                   l9113 1F42                                     l8323 15A0  
                                   l6467 1DD1                                     l5771 0477  
                                   l5851 0F11                                     l5923 0D13  
                                   l5907 0FD8                                     l9203 05E8  
                                   l8405 0908                                     l8341 15BF  
                                   l6397 11DE                                     l5749 1F7F  
                                   l5765 0468                                     l5837 0ED0  
                                   l5941 0D43                                     l9301 00B7  
                                   l7365 0E1E                                     l9117 1F47  
                                   l8271 1CDD                                     l8407 0915  
                                   l8423 1C8E                                     l8351 15DA  
                                   l6399 11E7                                     l5791 04AE  
                                   l5783 0491                                     l5951 0D67  
                                   l5943 0D51                                     l8511 1241  
                                   l9215 0609                                     l9151 0579  
                                   l9311 00E9                                     l8601 1E56  
                                   l8409 091E                                     l8329 15AB  
                                   l8505 085E                                     l5793 04B3  
                                   l5953 0D6A                                     l5873 0F63  
                                   l8603 1E59                                     l8275 1CE3  
                                   l8355 15E2                                     l8347 15D1  
                                   l8339 15B3                                     l5699 0995  
                                   l5795 04B7                                     l5859 0F2A  
                                   l5891 0FB4                                     l9235 1DE5  
                                   l7395 0E6E                                     l5789 04A4  
                                   l5957 0D78                                     l5949 0D5E  
                                   l9093 1717                                     l6909 1CC2  
                                   l9261 089B                                     l9325 0127  
                                   l7671 14C4                                     l8607 1E5F  
                                   l9095 171D                                     l8623 1096  
                                   l8711 0B07                                     l8703 0AFA  
                                   l5895 0FBC                                     l5879 0F79  
                                   l9239 1DEB                                     l9271 08BB  
                                   l9255 088D                                     l9247 087A  
                                   l9335 0159                                     l8289 1D69  
                                   l8465 13E7                                     l6865 11AE  
                                   l9513 0234                                     l8561 107C  
                                   l8617 108D                                     l8713 0B0A  
                                   l8705 0AFD                                     l9185 05B8  
                                   l9265 08AB                                     l9273 08C4  
                                   l9361 01AC                                     l8803 1FA8  
                                   l9603 02E5                                     l9507 020A  
                                   l8619 1090                                     l8731 0C07  
                                   l9187 05BA                                     l9443 0CBF  
                                   l9435 0C9A                                     l8821 1196  
                                   l7781 0691                                     l8733 0C0A  
                                   l8717 0B10                                     l8709 0B03  
                                   l8581 162F                                     l8645 0B21  
                                   l6981 1F02                                     l9285 0074  
                  _myMain_Initialization 1C65                                     l8823 117A  
                                   l9543 0290                                     l8559 1076  
                                   l8751 0C23                                     l8663 0B63  
                                   l6967 1D7D                                     l6991 1F0E  
                                   l6983 1F04                                     l9463 0CF4  
                                   l9447 0CC7                                     l9623 1369  
                                   l8489 14A0                                     l8825 119B  
                                   l9393 1221                                     l9537 0283  
                                   l9545 0296                                     l8737 0C10  
                                   l8681 0AC3                                     l8593 1445  
                                   l8577 1616                                     l8665 0B67  
                                   l8673 0B73                                     l6993 1F12  
                                   l9395 1224                                     l9555 02AB  
                                   l8739 0C13                                     l8667 0B6B  
                                   l8659 0B4D                                     l8915 1782  
                                   l9397 122C                                     l8765 0C3E  
                                   l8749 0C29                                     l8685 0AC9  
                                   l8669 0B6F                                     l8941 0BAD  
                                   l8917 1757                                     l8791 10C9  
                                   l8847 0DCF                                     l9487 01DF  
                                   l8767 0C57                                     l8679 0AC0  
                                   l8919 1788                                     l9647 1FF5  
                                   l9743 1670                                     l8953 0BC5  
                                   _CFGS 0CAE                                     l8859 0DF6  
                                   l8867 0A68                                     l8779 0C75  
                                   l8699 0ADB                                     l8963 0BEB  
                                   l8891 127E                                     l9667 1399  
                                   l9739 1665                                     l8789 10BE  
                                   l8797 1F9F                                     l8799 1FA2  
                           __CFG_WDTE$ON 0000                                     l8993 07E6  
                                   l8969 0BF6                                     l8987 07DD  
                                   l8997 07ED                                     l8989 07E0  
                                   l8999 07F0                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     u4225 09A1  
                                   u4245 09BA                                     u4265 09C7  
                                   u4435 0492                                     _PEIE 005E  
                                   u4525 04CB                                     u4605 0EF2  
                                   u4295 09DD                                     u4615 0F12  
                                   u4465 04A5                                     u4625 0F21  
                                   u4705 0FBD                                     u4635 0F2B  
                                   u4715 0FC3                                     u4495 04B8  
                                   u4815 0D44                                     u4745 0FD9  
                                   u4595 0EE2                                     u4755 0FDF  
                                   u4675 0F85                                     u4845 0D5F  
                                   u4685 0F95                                     u9105 10B3  
                                   u4785 0D1A                                     u7515 14BA  
                                   u8505 15B6                                     u9145 1183  
                                   u8445 115C                                     u8525 15C0  
                                   u9245 1760                                     u8535 15CA  
                                   u8545 15D2                                     u6945 0E5F  
                                   u8730 081C                                     u6965 0E74  
                                   u8735 081A                                     u8765 1DA9  
                                   u9825 05F9                                     _LWLO 0CAD  
                                   u9695 0573                                     _RSSI 00CE  
                                   _WREN 0CAA                                     _Buz1 00B0  
                                   _Load 0128                                     _Temp 00D6  
                                   _main 1641                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 098C                          __end_of_RF_Main 1B55  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0020  
                                   btemp 007E                          __end_of_WDT_Set 1BDC  
                                   ltemp 007E            __size_of_setRF_Initialization 000B  
                       _setDimmerReClock 1B84                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 146C  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                      ?_getDimmer_LoadOK 0070                                    ??_ISR 0077  
                           ___fttol@exp1 005B                             ___fttol@lval 0057  
                 _getDimmerLights_Status 1C74                       ??_getDimmer_LoadOK 0020  
         __size_of_DimmerIntrPointSelect 0012                         __end_of_LED_Main 1C23  
       setDimmerLights_ErrorClose@lights 0033            __end_of_DimmerIntrPointSelect 1CDA  
                  ?_getDimmerLights_Line 0070                    ?_setDimmerLights_Main 0070  
                  ?_setDimmerLights_Line 0070                          ?_setDelayOff_GO 002A  
                  ?_setDimmerLights_SwOn 0070                                    ?_main 00EB  
                        __end_of___awdiv 15E9                          __end_of___ftadd 052F  
                        __end_of___ftdiv 0F4C                          __end_of___ftneg 1BBD  
                                  u10235 0CAD                          __end_of___ftmul 1000  
                                  u10505 029C                                    u10425 0236  
                                  u10195 12C5                                    u10435 023B  
                        ___awdiv@divisor 0020                                    u10445 0249  
                                  u10285 0CE1                                    u10615 1360  
                                  _T1CON 0018                                    u10625 136F  
                        __end_of___fttol 0D81                                    u10675 1389  
                                  u10685 13A7                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                                  i1l724 1D54                                    i1l736 1CD1  
                                  i1l747 0413                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _TMR1H 0017  
                                  _TMR1L 0016                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0021  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB1 1069  
                                  _WPUB2 106A                     setMain_Exception@buz 0038  
                __end_of_Timeout_Counter 1DAF                            __CFG_WRT$HALF 0000  
     __end_of_setDimmerLights_IntrIOC_GO 1341               _setDimmerLights_IntrIOC_GO 130A  
                       __end_of_TMR1_ISR 111E             __size_of_CC2500_WriteCommand 001A  
     __end_of_setDimmerLights_ErrorClose 17A5               _setDimmerLights_ErrorClose 174B  
                       __end_of_TMR1_Set 1C3B                                    _getAD 1F34  
                          ___awtoft@sign 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 0812  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E0                           __CFG_BOREN$OFF 0000  
           __end_of_getMain_Lights_Count 1E04                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
           __end_of_getMain_LightsStatus 119E            __end_of_setLED_Initialization 1CA6  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0070  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 0812              __size_of_Flash_Memory_Write 002F  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0003  
       __size_of_DelayOff_Initialization 0008                   ?_setLoad_AH_AL_Restore 0070  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 17A5  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ?_setMemory_Modify 0070  
                      ??_setPercentValue 005C                             __end_of_main 1699  
                    ?_setRF_DimmerLights 0020                         __end_of_Fosc_Set 0800  
                     ??_setMemory_Modify 0020                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0E0A  
                   _setSw_Initialization 1BAC                                   ??_main 006E  
                          ___fttol@sign1 0056                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0B20                           _setMemory_Data 1BF3  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 0014  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E0  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1D11  
                 ?_setDimmerLights_AdjRF 0070                 __size_of_setRFSW_Control 0058  
                ??_Switch_Initialization 0025                     ??_setRF_DimmerLights 0021  
                                 ?_getAD 0020             setDimmerLights_AdjControl@sw 0028  
                      ??_getRF_KeyStatus 0020                   ?_setDimmerLights_SwOff 0070  
                            _DlyOff_Main 092B                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006E                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 1F96  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 09ED  
               _getMain_All_Error_Status 11CD                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1EB8                                   i1l7121 035F  
                                 i1l7141 03B1                                   i1l7117 0358  
                                 i1l7153 03E6                                   i1l7145 03C2  
                                 i1l7139 03AB                                   i1l7147 03C8  
                                 i1l7157 03FB                                   i1l6683 133A  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                                   u652_25 0332  
                     __size_of_Load_Main 0144                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   u767_25 1118  
                                 _IO_Set 1E34                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1B4A  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1DC4  
                                 _Dimmer 0120                                   _DlySw1 016A  
                                 _DlySw2 016C               __end_of_Mcu_Initialization 1CFE  
                    __end_of_Buzzer_Main 14F7                                   _Memory 0220  
                                 _Timer1 0123       __end_of_setDimmerLights_TriggerAdj 1F34  
             _setDimmerLights_TriggerAdj 1F14                                   ___bmul 1CDA  
                              ??___awdiv 0024                                ??___ftadd 0047  
           __size_of_DelayOffPointSelect 0014                                ??___ftdiv 0034  
                              ??___ftneg 0041                    setDimmerLights@lights 0065  
                              ??___ftmul 0034                                ??___fttol 0052  
           ?_Flash_Memory_Initialization 0070                   ??_getDimmerLights_Line 0020  
            setDimmerLights_AdjRF@lights 0063                   ??_setDimmerLights_Main 0066  
                 ??_setDimmerLights_Line 0020                                   _r_data 00D4  
                                 _s_data 00D5                   ??_setDimmerLights_SwOn 002D  
                                 _setLED 1545                                   _myMain 00A0  
                 __end_of_setMemory_Data 1BFF                         _DimmerLightsIntr 0079  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0062  
                       ___awdiv@quotient 0027                                   _setBuz 1699  
                     __size_of_Temp_Main 0003              __end_of_Load_Initialization 1B71  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039              ?_setDimmerLights_AdjControl 0070  
    __end_of_setDimmerLights_IntrControl 0439              _setDimmerLights_IntrControl 02FD  
               Flash_Memory_Read@address 0022                         ?_Timeout_Counter 0070  
             __end_of_setMemory_LoopSave 1D37              getMain_Lights_Count@status1 0022  
            getMain_Lights_Count@status2 0023              getMain_Lights_Count@status3 0021  
                  __end_of_SwPointSelect 1D86             __size_of_Flash_Memory_Modify 004E  
      setDimmerLights_IntrControl@lights 0076                  __size_of_LedPointSelect 001B  
                __size_of_getMain_LoadOK 000E                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009               getMain_LightsStatus@status 0028  
                             _TouchPower 1DD9               ?_getAll_DimmerLights_AdjGO 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 1800         __end_of_CC2500_registers_address 102F  
                __end_of__initialization 0046                                ?_LED_Main 0070  
                             ___ftadd@f1 0041                               ___ftadd@f2 0044  
                   _getRF_KeyStatus$5256 0022                            ?_my_MainTimer 0070  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                               ___ftneg@f1 003E  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004E  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                           __pidataBANK4 1F54                            __end_of_getAD 1F54  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
                 setLoad_AH_AL_Restore@i 0021                setMemory_LoopSave@command 0021  
           __size_of_setDimmerLights_Adj 0066                       _LED_Initialization 1C0B  
                        _getSw_KeyStatus 1EF5                ??_setControl_Lights_Table 006B  
                     getRF_KeyStatus@key 0021                         ??_DelayTimejudge 0024  
                        ?_setMemory_Data 0020            ??_Flash_Memory_Initialization 0062  
                       ?_setDimmerLights 0062                     _getMain_Lights_Count 1DEE  
                              ?_WDT_Main 0070                        __end_of_Load_Main 02FD  
                     __size_of_getBuz_GO 0011                     _getMain_LightsStatus 1172  
             __end_of_set_TimeoutCleared 1B6C                 __end_of_setDimmerReClock 1B8C  
                     __size_of_getRxData 0074                      ?_LED_Initialization 0070  
                  getMain_LightsStatus@i 0026                        ?_CC2500_WriteByte 0070  
                         _DimmerLights11 00CB                           _DimmerLights22 00CC  
                   __size_of_setLED_Main 003E                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 1B55  
                     ??_CC2500_WriteByte 0020                               __pbssBANK0 006F  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                               __pbssBANK4 0220  
                              ?_Fosc_Set 0070                              _Buzzer_Main 14AD  
                      ??_setRFSW_Control 0031                        __end_of_Temp_Main 1B5B  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                         ??_my_MainTimer 002D                               ??_LED_Main 0025  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1B8C  
              getMain_LightsStatus@count 0025                            ??_Switch_Main 003D  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 006F  
                      LedPointSelect@led 0021                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 0014                              setBuz@count 002C  
                ?_getDimmerLights_Status 0070                               __pmaintext 1641  
                    _CC2500_WriteCommand 1E4D                     ?_Temp_Initialization 0070  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 002C            ??_DimmerLights_Initialization 0024  
                             ??_TMR1_ISR 0077                            ?_setTemp_Main 0070  
                             _getLoad_AD 0C79                               ??_TMR1_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                             _getLoad_OK 1B9C                       __size_of_setTxData 00BD  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                  ?_getMain_Lights_Count 0070                                  _ADC_Set 1B7D  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 1341  
                             ??_WDT_Main 0020                    ?_getMain_LightsStatus 0070  
           __end_of_setRF_Initialization 1BE7                       _setRFSW_AdjControl 142C  
                                _IOC_ISR 1C56                                  _IOC_Set 1C23  
                   __size_of_setLog_Code 0036                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 129E                __size_of_getDimmer_LoadOK 0008  
                      _Flash_Memory_Read 1E67              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 0076                   __size_of_CC2500_TxData 0068  
            ?_setDimmerLights_ErrorClose 0070                      ?_setRFSW_AdjControl 0070  
                                _RF_Data 01A0                                  _RF_Main 1B52  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1BD1          __end_of_setControl_Lights_Table 0B8F  
                        setRF_Main@error 00EA                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _setPercentValue 09ED  
                ??_setLoad_AH_AL_Restore 0020                         ?_getPercentValue 0070  
           __end_of_CC2500_FrequencyCabr 1BF3                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 1CB7                      ??_Flash_Memory_Main 0029  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 0162  
                                _VarLED2 0166           __end_of_getDimmerLights_Status 1C84  
                      __end_of_getRxData 0C03                  __end_of_getSw_KeyStatus 1F14  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1D5E  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1ED6  
                   ??_setRFSW_AdjControl 0067                           ??_setTemp_Main 0027  
                        __size_of___bmul 0012                                  ___awdiv 1595  
                                ___ftadd 0439                                  ___ftdiv 0EA3  
                                ___ftneg 1BB4                                  ___ftmul 0F4C  
                                ___fttol 0CFA                      __end_of_Switch_Main 2000  
                ??_Buzzer_Initialization 0020                          _getRF_KeyStatus 1CB7  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0050                     setRFSW_AdjControl@sw 006A  
                        __size_of_setBuz 0059                                  __ptext1 1378  
                                __ptext2 1C65                                  __ptext3 1341  
                                __ptext4 0C79                                  __ptext5 1F34  
                                __ptext6 0800                                  __ptext7 0002  
                                __ptext8 1B58                                  __ptext9 0E0A  
                ??_setDimmerLights_AdjRF 0062                __size_of_CC2500_SIDLEMode 0004  
                  _DimmerIntrPointSelect 1CC8                             __size_of_ISR 000F  
             ??_getMain_All_Error_Status 0020                __end_of_Flash_Memory_Main 12D4  
              __end_of_Flash_Memory_Read 1E81                  ??_setDimmerLights_SwOff 002F  
                             _setRF_Main 052F                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1B94                        _DimmerLights_Main 1200  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
              __size_of_setMemory_Modify 0013            __end_of_DlyOff_Initialization 1BD1  
             __end_of_CC2500_ClearRXFIFO 1B5F                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1B63            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006E                           _LedPointSelect 1E81  
                    _DelayOffPointSelect 1D5E                           _getMain_LoadOK 1C48  
                                clrloop0 1B78           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 1C48                     end_of_initialization 0046  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 111E  
                          _DelayTime_1us 10A8                        __end_of_setTxData 07B8  
             __end_of_Flash_Memory_Write 11CD                                  init_ram 1B71  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 1B72  
                             _setSw_Main 004A                    CC2500_ReadByte@loop_b 0021  
                 setDimmerLights_SwOn@sw 002F                        _CC2500_ReadStatus 1083  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1C95  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 0C03  
                          _CC2500_TxData 0AB8                      ??_CC2500_InitSetREG 0025  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 14F7  
                            ?_getLoad_AD 0070                              ?_getLoad_OK 0070  
                 ??_getMain_Lights_Count 0020                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1BBD                      ??_CC2500_ReadStatus 0022  
                 ??_getMain_LightsStatus 0024                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                      __size_of_TouchPower 0015  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1234                       _Mcu_Initialization 1CEC  
               __size_of_CC2500_PowerRST 0044                     __end_of_my_MainTimer 13B1  
                         ?_DelayOff_Main 0070                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1E9C                  __end_of_setPercentValue 0A52  
                 __end_of_getMain_LoadOK 1C56                 __size_of_CC2500_WriteREG 0023  
              __end_of_CC2500_InitSetREG 1148                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 005C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 0A52  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 10A8  
            ??_getAll_DimmerLights_AdjGO 0020          getMain_All_Error_Status@command 0025  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1E4D  
                   _setRF_Initialization 1BDC                       _setMemory_LoopSave 1D24  
                            _Switch_Main 1FDC                        __size_of_LED_Main 000C  
                       ?_getSw_KeyStatus 0070                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1CFE  
                __end_of_getRF_KeyStatus 1CC8                        _setMain_Exception 086E  
                       ??_setMemory_Data 0021                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1DAF                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                     ?_setMain_Exception 0070                      ?_setMemory_LoopSave 0070  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 1CEC  
               setMain_Exception@command 003C                     setRF_DimmerLights@on 0020  
               _DimmerIntrIOCPointSelect 1D4A          _setDimmerLights_AdjControl$2582 0027  
                      getSw_KeyStatus@sw 0024                        __size_of_TMR1_ISR 0029  
          __size_of_getDimmerLights_Line 0013                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR1_Set 000C            __size_of_setDimmerLights_Main 0059  
                         __end_of_setLED 1595            __size_of_setDimmerLights_Line 0015  
          __size_of_setDimmerLights_SwOn 003D                           __end_of_setBuz 16F2  
                    ??_setMain_Exception 0036                     _CC2500_FrequencyCabr 1BE7  
             __size_of_Flash_Memory_Main 0036               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 15E9  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 1234  
                        ?_LedPointSelect 0070                                _Load_Main 01B9  
                            __end_of_ISR 0013                          ?_getMain_LoadOK 0070  
                       _getDimmer_LoadOK 1BA4                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 0005                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1EF5  
        __size_of_setTemp_Initialization 0001                     ??_setMemory_LoopSave 0020  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 0EA3                      __size_of_getLoad_AD 0081  
                           ?_Buzzer_Main 0070                      __size_of_getLoad_OK 0008  
                     _set_TimeoutCleared 1B67                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 015E  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0064  
                    __size_of_getTemp_AD 0037                   ?_setLED_Initialization 0070  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              __end_of_setMain_Exception 08CA                __size_of_CC2500_WriteByte 0019  
                              _Temp_Main 1B58                      ?_set_TimeoutCleared 0070  
                         ??_WDT_Clearing 0020                                _Rx_Length 00CF  
                setRF_DimmerValue@lights 0066                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 0014  
                              _Tx_Length 00D2                              __pdataBANK4 0245  
              _getAll_DimmerLights_AdjGO 1C84                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0034                        ??_CC2500_ReadByte 0020  
       __end_of_getMain_All_Error_Status 1200                         _CC2500_SIDLEMode 1B63  
             __size_of_DimmerLights_Main 0034                __end_of_setRF_DimmerValue 1269  
                     setMemory_Data@data 0020                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
         _getAll_DimmerLights_AdjGO$2562 0022                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                       _setMemory_Modify 1D11                               ?_Load_Main 0070  
                          __pcstackBANK0 0020                            __pcstackBANK1 00E8  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0089                            DlyOff_Main@sw 0033  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 0061               __size_of_CC2500_ReadStatus 0025  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 01BE                            _DimmerLights2 01CD  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 001C  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1EB8  
               setRFSW_AdjControl@status 0069                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006E                           getRxData@error 006C  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 00F0  
                         Load_Main@adjgo 002C                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                         ?_getRF_KeyStatus 0070  
                         Load_Main@error 002E                   _setTemp_Initialization 1B4B  
                              _getBuz_GO 1CA6      __end_of_Flash_Memory_Initialization 06FB  
            _Flash_Memory_Initialization 061F                                 ?___awdiv 0020  
                              __ptext100 1EB8                                __ptext101 08CA  
                              __ptext110 1B63                                __ptext102 1148  
                              __ptext111 07B8                                __ptext103 1CDA  
                              __ptext120 1B67                                __ptext112 111E  
                              __ptext104 1C74                                __ptext121 1D9A  
                              __ptext113 1ED6                                __ptext105 1CFE  
                              __ptext130 1B84                                __ptext122 1E1B  
                              __ptext114 1F96                                __ptext106 1B8C  
                              __ptext131 130A                                __ptext123 14AD  
                              __ptext115 1BE7                                __ptext107 1BC6  
                              __ptext132 1D4A                                __ptext124 1B4C  
                              __ptext116 10A8                                __ptext108 1D5E  
                              __ptext117 1B5F                                __ptext109 1DAF  
                               ?___ftadd 0041                                __ptext126 10F5  
                              __ptext118 1B5B                                __ptext127 02FD  
                              __ptext119 1E4D                                __ptext128 1CC8  
                              __ptext129 1C56                                _getRxData 0B8F  
                               ?___ftdiv 002E                                 ?___ftneg 003E  
                               ?___ftmul 002E                                 ?___fttol 004E  
                  __size_of_my_MainTimer 0039                  __end_of_setRFSW_Control 1641  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
                       getMain_LoadOK@ok 0022            __end_of_Buzzer_Initialization 1B4F  
                       getPercentValue@i 005F                         setPercentValue@i 005F  
                          ??_setLog_Code 002D                 getDimmerLights_Line@line 0021  
                     __end_of_TouchPower 1DEE                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 016F  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
          __end_of_setDimmerLights_AdjRF 1FDC                   CC2500_WriteByte@loop_a 0021  
                 _DimmerLights_Main$2499 0069                                _r_address 00D3  
         __size_of_setDimmerLights_SwOff 0041           __size_of_myMain_Initialization 000F  
          __end_of_setDimmerLights_SwOff 14AD             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1C74                           __size_of_getAD 0020  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1D72  
                    __end_of_setLED_Main 142C                      _DimmerLightsIntrIOC 00CD  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1B58  
           setDimmerLights_SwOff@command 002F                        _CC2500_rfSettings 102F  
                               _LED_Main 1C17                          SwPointSelect@sw 0021  
                              clear_ram0 1B77                 CC2500_InitPATable@loop_d 0027  
             __size_of_setMain_Exception 005C                             _my_MainTimer 1378  
                              _setTxData 06FB      __end_of_DimmerLights_Initialization 1E1B  
            _DimmerLights_Initialization 1E04                       _CC2500_ClearRXFIFO 1B5B  
                     _CC2500_ClearTXFIFO 1B5F           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0024                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1D9A                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0023              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 119E                               ?_getRxData 0070  
                           ??_getLoad_AD 0024                                 _TMR1_ISR 10F5  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                           ??_getLoad_OK 0020                                 _TMR1_Set 1C2F  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 0126  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1E67  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 0800  
                DlyOff_Initialization@sw 0022                    getSw_KeyStatus@status 0023  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         setRF_Main@loop_f 00E8  
                  __size_of_setTemp_Main 0099                  __size_of_setDelayOff_GO 0061  
           ??_setDimmerLights_AdjControl 0025                                 _DelayOff 0078  
                           setSw_Main@sw 0033         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0029                         __size_of_IOC_ISR 000F  
           ?_setDimmerLights_IntrControl 0070           getMain_All_Error_Status@status 0026  
                       __size_of_IOC_Set 000C             __end_of_Flash_Memory_Erasing 1C0B  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 130A  
                  _DlyOff_Initialization 1BC6                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 07FC  
                       __size_of_WDT_Set 000B                    setRFSW_Control@status 0032  
                setMain_Exception@status 003B                       __end_of_getLoad_AD 0CFA  
                     __end_of_getLoad_OK 1BA4                    _Switch_Initialization 1C3B  
      __size_of_getMain_All_Error_Status 0033                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0063                ?_getMain_All_Error_Status 0070  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 1378  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1E1B  
                      getLoad_AD@channel 0026             Flash_Memory_Initialization@i 0063  
                               _SwDetect 00D1                              ??_Temp_Main 0029  
                      setRFSW_Control@sw 0033            _getMain_All_Error_Status$7075 0021  
          _getMain_All_Error_Status$7076 0023                 __end_of_getDimmer_LoadOK 1BAC  
                    _Load_Initialization 1B6C                                setLED@led 0023  
                ??_DimmerIntrPointSelect 0070      __size_of_setDimmerLights_AdjControl 0035  
                           _setTemp_Main 0E0A                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                         __size_of___ftneg 0009  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
               setDimmerLights_SwOn@idle 002E                                 ___awtoft 1F74  
                       ??_LedPointSelect 0020                                 ___ftpack 098C  
          __size_of_getMain_Lights_Count 0016                         ??_getMain_LoadOK 0021  
          __size_of_getMain_LightsStatus 002C                        getTemp_AD@channel 0025  
                           ??_setRF_Main 006D                     CC2500_WriteREG@value 0022  
                            _setLED_Main 13EE               __end_of_setRF_DimmerLights 086E  
               ?_DelayOff_Initialization 0070                         setDelayOff_GO@sw 002E  
     __size_of_getAll_DimmerLights_AdjGO 0011                     ?_Load_Initialization 0070  
                               __ptext10 1B55                                 __ptext11 1B4B  
                               __ptext20 1D37                                 __ptext12 1FDC  
                               __ptext21 1C3B                                 __ptext13 004A  
                               __ptext30 15E9                                 __ptext22 1BAC  
                               __ptext14 1D86                                 __ptext31 142C  
                               __ptext23 1DD9                                 __ptext15 1269  
                               __ptext40 0C03                                 __ptext32 1234  
                               __ptext24 1B52                                 __ptext16 1EF5  
                               __ptext41 1083                                 __ptext33 1FB9  
                               __ptext25 052F                                 __ptext17 1D72  
                               __ptext50 07FC                                 __ptext42 1066  
                               __ptext34 17A5                                 __ptext26 0B8F  
                               __ptext18 086E                                 __ptext51 1B7D  
                               __ptext43 1B4F                                 __ptext35 0F4C  
                               __ptext27 12D4                                 __ptext19 174B  
                               __ptext60 1C0B                                 __ptext52 01B9  
                               __ptext44 1BDC                                 __ptext36 1D11  
                               __ptext28 1D24                                 __ptext61 1C95  
                               __ptext53 1C48                                 __ptext45 1CEC  
                               __ptext37 1CB7                                 __ptext29 0B20  
                               __ptext70 1200                                 __ptext62 129E  
                               __ptext54 1BA4                                 __ptext46 1BD1  
                               __ptext38 1CA6                                 __ptext71 16F2  
                               __ptext63 14F7                                 __ptext55 1DEE  
                               __ptext47 1C2F                                 __ptext39 0AB8  
                               __ptext80 1F74                                 __ptext72 0A52  
                               __ptext64 1BFF                                 __ptext56 1B6C  
                               __ptext48 1E34                                 __ptext81 098C  
                               __ptext73 0D81                                 __ptext65 061F  
                               __ptext57 1E9C                                 __ptext49 1C23  
                               __ptext90 1B4A                                 __ptext82 1545  
                               __ptext74 06FB                                 __ptext66 1BF3  
                               __ptext58 1C17                                 __ptext91 1B94  
                               __ptext83 1E81                                 __ptext75 09ED  
                               __ptext67 119E                                 __ptext59 13EE  
                               __ptext92 092B                                 __ptext84 1DC4  
                               __ptext76 0CFA                                 __ptext68 1BBD  
                               __ptext93 0812                                 __ptext85 11CD  
                               __ptext77 1BB4                                 __ptext69 1E67  
                               __ptext94 13B1                                 __ptext86 1172  
                               __ptext78 0EA3                                 __ptext95 1699  
                               __ptext87 1B9C                                 __ptext79 0439  
                               __ptext96 1595                                 __ptext88 1E04  
                               __ptext97 1C84                                 __ptext89 10CE  
                               __ptext98 146C                                 __ptext99 1F14  
                               __product 0245            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 ??_getDimmerLights_Status 0022  
         __size_of_Dimmer_Initialization 0001             __end_of_getDimmerLights_Line 1D4A  
          __end_of_Dimmer_Initialization 1B4B             __end_of_setDimmerLights_Main 174B  
           __end_of_setDimmerLights_Line 1DD9                         Switch_Main@error 003E  
           __end_of_setDimmerLights_SwOn 13EE                   getDimmer_LoadOK@status 0020  
                           ??_setSw_Main 0031                            setLED@command 0022  
                          __size_of_main 0058                              _setRF_Learn 1D86  
               __end_of_CC2500_SIDLEMode 1B67               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 1D72               CC2500_WriteCommand@command 0023  
                   setRF_Main@Receive_OK 00E9                __size_of_setDimmerReClock 0008  
         setDimmerLights_AdjControl@idle 0026                          _CC2500_ReadByte 1066  
                     _CC2500_InitPATable 1ED6                 __end_of_setMemory_Modify 1D24  
          setDimmerLights_Trigger@lights 0024                       __end_of_setRF_Main 061F  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0012  
            setDimmerLights_ErrorClose@i 0034                     _CC2500_patable_vaule 105E  
                            ??_getRxData 006B                             getLoad_OK@ok 0020  
       setDimmerLights_TriggerAdj@lights 0024                                 main@argc 00EB  
                               main@argv 00ED                      ?_CC2500_InitPATable 0070  
                   _getSw_KeyStatus$6330 0022                     _getSw_KeyStatus$6329 0021  
                        _CC2500_PowerRST 07B8                 __size_of_getSw_KeyStatus 001F  
            __end_of_Flash_Memory_Modify 1545                        ??_getPercentValue 005C  
                            _setLog_Code 12D4              __end_of_Flash_Memory_Unlock 1BC6  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1F96  
                     __end_of_setSw_Main 01B9                    ??_Load_Initialization 0022  
                          _Transceive_OK 03E1                   ?_DlyOff_Initialization 0070  
                         _DelayTimejudge 1148                              pic14e$flags 007E  
           ??_setDimmerLights_IntrIOC_GO 0072               setDimmerLights_Line@lights 0020  
           ??_setDimmerLights_ErrorClose 0031                  setDimmerLights_SwOff@sw 0030  
      __end_of_getAll_DimmerLights_AdjGO 1C95              __size_of_setMemory_LoopSave 0013  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0070                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 10F5  __size_of_setDimmerLights_Initialization 0027  
         _setDimmerLights_Initialization 10CE              __end_of_setDimmerLights_Adj 0AB8  
                ?_setTemp_Initialization 0070                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                        _RF_Initialization 1B4F  
   __size_of_setDimmerLights_IntrControl 013C                              getLoad_AD@i 0029  
                            getLoad_AD@j 0028                              getLoad_AD@k 0027  
                   _Flash_Memory_Erasing 1BFF                       ?_RF_Initialization 0070  
                             _SPI0Buffer 00D0          __end_of_DelayOff_Initialization 1B94  
    __size_of_setDimmerLights_IntrIOC_GO 0037      __size_of_setDimmerLights_ErrorClose 005A  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1B9C  
     __end_of_setDimmerLights_AdjControl 129E               _setDimmerLights_AdjControl 1269  
                    ??_RF_Initialization 0021                  __size_of_setMemory_Data 000C  
                         _setDelayOff_GO 08CA         __size_of_setControl_Lights_Table 006F  
                 __end_of_DelayTimejudge 1172     __size_of_Flash_Memory_Initialization 00DC  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0031  
                  setMemory_Data@address 0022                    __end_of_DelayTime_1us 10CE  
                __end_of_CC2500_ReadByte 1083             __end_of_setSw_Initialization 1BB4  
                        _Timeout_Counter 1D9A          __size_of_getDimmerLights_Status 0010  
                   getPercentValue@value 005E               __end_of_LED_Initialization 1C17  
       __size_of_setDimmerLights_Trigger 001E           __end_of_setTemp_Initialization 1B4C  
               __size_of_setPercentValue 0065                  setMemory_Modify@command 0021  
                   setPercentValue@value 005E                __end_of_RF_Initialization 1B52  
                  __end_of_CC2500_RxData 0C79                    __end_of_CC2500_TxData 0B20  
                  _setLoad_AH_AL_Restore 1E9C                  __end_of_CC2500_PowerRST 07FC  
         getAll_DimmerLights_AdjGO@adjgo 0021  
