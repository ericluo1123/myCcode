

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Nov 01 10:51:18 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	intentry,global,class=CODE,delta=2
   128                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text117,local,class=CODE,merge=1,delta=2
   137                           	dabs	1,0x7E,2
   138  0000                     	;# 
   139  0001                     	;# 
   140  0002                     	;# 
   141  0003                     	;# 
   142  0004                     	;# 
   143  0005                     	;# 
   144  0006                     	;# 
   145  0007                     	;# 
   146  0008                     	;# 
   147  0009                     	;# 
   148  000A                     	;# 
   149  000B                     	;# 
   150  000C                     	;# 
   151  000D                     	;# 
   152  000E                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0015                     	;# 
   157  0016                     	;# 
   158  0016                     	;# 
   159  0017                     	;# 
   160  0018                     	;# 
   161  0019                     	;# 
   162  001A                     	;# 
   163  001B                     	;# 
   164  001C                     	;# 
   165  008C                     	;# 
   166  008D                     	;# 
   167  008E                     	;# 
   168  0090                     	;# 
   169  0091                     	;# 
   170  0092                     	;# 
   171  0095                     	;# 
   172  0096                     	;# 
   173  0097                     	;# 
   174  0099                     	;# 
   175  009A                     	;# 
   176  009B                     	;# 
   177  009B                     	;# 
   178  009C                     	;# 
   179  009D                     	;# 
   180  009E                     	;# 
   181  010C                     	;# 
   182  010D                     	;# 
   183  010E                     	;# 
   184  0116                     	;# 
   185  0117                     	;# 
   186  011D                     	;# 
   187  018C                     	;# 
   188  018D                     	;# 
   189  018E                     	;# 
   190  0191                     	;# 
   191  0191                     	;# 
   192  0192                     	;# 
   193  0193                     	;# 
   194  0193                     	;# 
   195  0194                     	;# 
   196  0195                     	;# 
   197  0196                     	;# 
   198  0197                     	;# 
   199  0199                     	;# 
   200  019A                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019B                     	;# 
   204  019B                     	;# 
   205  019C                     	;# 
   206  019C                     	;# 
   207  019D                     	;# 
   208  019E                     	;# 
   209  019F                     	;# 
   210  020D                     	;# 
   211  0210                     	;# 
   212  0211                     	;# 
   213  0211                     	;# 
   214  0212                     	;# 
   215  0212                     	;# 
   216  0213                     	;# 
   217  0213                     	;# 
   218  0214                     	;# 
   219  0214                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0216                     	;# 
   224  0216                     	;# 
   225  0217                     	;# 
   226  0217                     	;# 
   227  0291                     	;# 
   228  0291                     	;# 
   229  0292                     	;# 
   230  0293                     	;# 
   231  0298                     	;# 
   232  0298                     	;# 
   233  0299                     	;# 
   234  029A                     	;# 
   235  0394                     	;# 
   236  0395                     	;# 
   237  0396                     	;# 
   238  0FE4                     	;# 
   239  0FE5                     	;# 
   240  0FE6                     	;# 
   241  0FE7                     	;# 
   242  0FE8                     	;# 
   243  0FE9                     	;# 
   244  0FEA                     	;# 
   245  0FEB                     	;# 
   246  0FED                     	;# 
   247  0FEE                     	;# 
   248  0FEF                     	;# 
   249  0000                     	;# 
   250  0001                     	;# 
   251  0002                     	;# 
   252  0003                     	;# 
   253  0004                     	;# 
   254  0005                     	;# 
   255  0006                     	;# 
   256  0007                     	;# 
   257  0008                     	;# 
   258  0009                     	;# 
   259  000A                     	;# 
   260  000B                     	;# 
   261  000C                     	;# 
   262  000D                     	;# 
   263  000E                     	;# 
   264  0010                     	;# 
   265  0011                     	;# 
   266  0012                     	;# 
   267  0015                     	;# 
   268  0016                     	;# 
   269  0016                     	;# 
   270  0017                     	;# 
   271  0018                     	;# 
   272  0019                     	;# 
   273  001A                     	;# 
   274  001B                     	;# 
   275  001C                     	;# 
   276  008C                     	;# 
   277  008D                     	;# 
   278  008E                     	;# 
   279  0090                     	;# 
   280  0091                     	;# 
   281  0092                     	;# 
   282  0095                     	;# 
   283  0096                     	;# 
   284  0097                     	;# 
   285  0099                     	;# 
   286  009A                     	;# 
   287  009B                     	;# 
   288  009B                     	;# 
   289  009C                     	;# 
   290  009D                     	;# 
   291  009E                     	;# 
   292  010C                     	;# 
   293  010D                     	;# 
   294  010E                     	;# 
   295  0116                     	;# 
   296  0117                     	;# 
   297  011D                     	;# 
   298  018C                     	;# 
   299  018D                     	;# 
   300  018E                     	;# 
   301  0191                     	;# 
   302  0191                     	;# 
   303  0192                     	;# 
   304  0193                     	;# 
   305  0193                     	;# 
   306  0194                     	;# 
   307  0195                     	;# 
   308  0196                     	;# 
   309  0197                     	;# 
   310  0199                     	;# 
   311  019A                     	;# 
   312  019B                     	;# 
   313  019B                     	;# 
   314  019B                     	;# 
   315  019B                     	;# 
   316  019C                     	;# 
   317  019C                     	;# 
   318  019D                     	;# 
   319  019E                     	;# 
   320  019F                     	;# 
   321  020D                     	;# 
   322  0210                     	;# 
   323  0211                     	;# 
   324  0211                     	;# 
   325  0212                     	;# 
   326  0212                     	;# 
   327  0213                     	;# 
   328  0213                     	;# 
   329  0214                     	;# 
   330  0214                     	;# 
   331  0215                     	;# 
   332  0215                     	;# 
   333  0215                     	;# 
   334  0216                     	;# 
   335  0216                     	;# 
   336  0217                     	;# 
   337  0217                     	;# 
   338  0291                     	;# 
   339  0291                     	;# 
   340  0292                     	;# 
   341  0293                     	;# 
   342  0298                     	;# 
   343  0298                     	;# 
   344  0299                     	;# 
   345  029A                     	;# 
   346  0394                     	;# 
   347  0395                     	;# 
   348  0396                     	;# 
   349  0FE4                     	;# 
   350  0FE5                     	;# 
   351  0FE6                     	;# 
   352  0FE7                     	;# 
   353  0FE8                     	;# 
   354  0FE9                     	;# 
   355  0FEA                     	;# 
   356  0FEB                     	;# 
   357  0FED                     	;# 
   358  0FEE                     	;# 
   359  0FEF                     	;# 
   360  0000                     	;# 
   361  0001                     	;# 
   362  0002                     	;# 
   363  0003                     	;# 
   364  0004                     	;# 
   365  0005                     	;# 
   366  0006                     	;# 
   367  0007                     	;# 
   368  0008                     	;# 
   369  0009                     	;# 
   370  000A                     	;# 
   371  000B                     	;# 
   372  000C                     	;# 
   373  000D                     	;# 
   374  000E                     	;# 
   375  0010                     	;# 
   376  0011                     	;# 
   377  0012                     	;# 
   378  0015                     	;# 
   379  0016                     	;# 
   380  0016                     	;# 
   381  0017                     	;# 
   382  0018                     	;# 
   383  0019                     	;# 
   384  001A                     	;# 
   385  001B                     	;# 
   386  001C                     	;# 
   387  008C                     	;# 
   388  008D                     	;# 
   389  008E                     	;# 
   390  0090                     	;# 
   391  0091                     	;# 
   392  0092                     	;# 
   393  0095                     	;# 
   394  0096                     	;# 
   395  0097                     	;# 
   396  0099                     	;# 
   397  009A                     	;# 
   398  009B                     	;# 
   399  009B                     	;# 
   400  009C                     	;# 
   401  009D                     	;# 
   402  009E                     	;# 
   403  010C                     	;# 
   404  010D                     	;# 
   405  010E                     	;# 
   406  0116                     	;# 
   407  0117                     	;# 
   408  011D                     	;# 
   409  018C                     	;# 
   410  018D                     	;# 
   411  018E                     	;# 
   412  0191                     	;# 
   413  0191                     	;# 
   414  0192                     	;# 
   415  0193                     	;# 
   416  0193                     	;# 
   417  0194                     	;# 
   418  0195                     	;# 
   419  0196                     	;# 
   420  0197                     	;# 
   421  0199                     	;# 
   422  019A                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019B                     	;# 
   426  019B                     	;# 
   427  019C                     	;# 
   428  019C                     	;# 
   429  019D                     	;# 
   430  019E                     	;# 
   431  019F                     	;# 
   432  020D                     	;# 
   433  0210                     	;# 
   434  0211                     	;# 
   435  0211                     	;# 
   436  0212                     	;# 
   437  0212                     	;# 
   438  0213                     	;# 
   439  0213                     	;# 
   440  0214                     	;# 
   441  0214                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0215                     	;# 
   445  0216                     	;# 
   446  0216                     	;# 
   447  0217                     	;# 
   448  0217                     	;# 
   449  0291                     	;# 
   450  0291                     	;# 
   451  0292                     	;# 
   452  0293                     	;# 
   453  0298                     	;# 
   454  0298                     	;# 
   455  0299                     	;# 
   456  029A                     	;# 
   457  0394                     	;# 
   458  0395                     	;# 
   459  0396                     	;# 
   460  0FE4                     	;# 
   461  0FE5                     	;# 
   462  0FE6                     	;# 
   463  0FE7                     	;# 
   464  0FE8                     	;# 
   465  0FE9                     	;# 
   466  0FEA                     	;# 
   467  0FEB                     	;# 
   468  0FED                     	;# 
   469  0FEE                     	;# 
   470  0FEF                     	;# 
   471  0000                     	;# 
   472  0001                     	;# 
   473  0002                     	;# 
   474  0003                     	;# 
   475  0004                     	;# 
   476  0005                     	;# 
   477  0006                     	;# 
   478  0007                     	;# 
   479  0008                     	;# 
   480  0009                     	;# 
   481  000A                     	;# 
   482  000B                     	;# 
   483  000C                     	;# 
   484  000D                     	;# 
   485  000E                     	;# 
   486  0010                     	;# 
   487  0011                     	;# 
   488  0012                     	;# 
   489  0015                     	;# 
   490  0016                     	;# 
   491  0016                     	;# 
   492  0017                     	;# 
   493  0018                     	;# 
   494  0019                     	;# 
   495  001A                     	;# 
   496  001B                     	;# 
   497  001C                     	;# 
   498  008C                     	;# 
   499  008D                     	;# 
   500  008E                     	;# 
   501  0090                     	;# 
   502  0091                     	;# 
   503  0092                     	;# 
   504  0095                     	;# 
   505  0096                     	;# 
   506  0097                     	;# 
   507  0099                     	;# 
   508  009A                     	;# 
   509  009B                     	;# 
   510  009B                     	;# 
   511  009C                     	;# 
   512  009D                     	;# 
   513  009E                     	;# 
   514  010C                     	;# 
   515  010D                     	;# 
   516  010E                     	;# 
   517  0116                     	;# 
   518  0117                     	;# 
   519  011D                     	;# 
   520  018C                     	;# 
   521  018D                     	;# 
   522  018E                     	;# 
   523  0191                     	;# 
   524  0191                     	;# 
   525  0192                     	;# 
   526  0193                     	;# 
   527  0193                     	;# 
   528  0194                     	;# 
   529  0195                     	;# 
   530  0196                     	;# 
   531  0197                     	;# 
   532  0199                     	;# 
   533  019A                     	;# 
   534  019B                     	;# 
   535  019B                     	;# 
   536  019B                     	;# 
   537  019B                     	;# 
   538  019C                     	;# 
   539  019C                     	;# 
   540  019D                     	;# 
   541  019E                     	;# 
   542  019F                     	;# 
   543  020D                     	;# 
   544  0210                     	;# 
   545  0211                     	;# 
   546  0211                     	;# 
   547  0212                     	;# 
   548  0212                     	;# 
   549  0213                     	;# 
   550  0213                     	;# 
   551  0214                     	;# 
   552  0214                     	;# 
   553  0215                     	;# 
   554  0215                     	;# 
   555  0215                     	;# 
   556  0216                     	;# 
   557  0216                     	;# 
   558  0217                     	;# 
   559  0217                     	;# 
   560  0291                     	;# 
   561  0291                     	;# 
   562  0292                     	;# 
   563  0293                     	;# 
   564  0298                     	;# 
   565  0298                     	;# 
   566  0299                     	;# 
   567  029A                     	;# 
   568  0394                     	;# 
   569  0395                     	;# 
   570  0396                     	;# 
   571  0FE4                     	;# 
   572  0FE5                     	;# 
   573  0FE6                     	;# 
   574  0FE7                     	;# 
   575  0FE8                     	;# 
   576  0FE9                     	;# 
   577  0FEA                     	;# 
   578  0FEB                     	;# 
   579  0FED                     	;# 
   580  0FEE                     	;# 
   581  0FEF                     	;# 
   582  0000                     	;# 
   583  0001                     	;# 
   584  0002                     	;# 
   585  0003                     	;# 
   586  0004                     	;# 
   587  0005                     	;# 
   588  0006                     	;# 
   589  0007                     	;# 
   590  0008                     	;# 
   591  0009                     	;# 
   592  000A                     	;# 
   593  000B                     	;# 
   594  000C                     	;# 
   595  000D                     	;# 
   596  000E                     	;# 
   597  0010                     	;# 
   598  0011                     	;# 
   599  0012                     	;# 
   600  0015                     	;# 
   601  0016                     	;# 
   602  0016                     	;# 
   603  0017                     	;# 
   604  0018                     	;# 
   605  0019                     	;# 
   606  001A                     	;# 
   607  001B                     	;# 
   608  001C                     	;# 
   609  008C                     	;# 
   610  008D                     	;# 
   611  008E                     	;# 
   612  0090                     	;# 
   613  0091                     	;# 
   614  0092                     	;# 
   615  0095                     	;# 
   616  0096                     	;# 
   617  0097                     	;# 
   618  0099                     	;# 
   619  009A                     	;# 
   620  009B                     	;# 
   621  009B                     	;# 
   622  009C                     	;# 
   623  009D                     	;# 
   624  009E                     	;# 
   625  010C                     	;# 
   626  010D                     	;# 
   627  010E                     	;# 
   628  0116                     	;# 
   629  0117                     	;# 
   630  011D                     	;# 
   631  018C                     	;# 
   632  018D                     	;# 
   633  018E                     	;# 
   634  0191                     	;# 
   635  0191                     	;# 
   636  0192                     	;# 
   637  0193                     	;# 
   638  0193                     	;# 
   639  0194                     	;# 
   640  0195                     	;# 
   641  0196                     	;# 
   642  0197                     	;# 
   643  0199                     	;# 
   644  019A                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019B                     	;# 
   648  019B                     	;# 
   649  019C                     	;# 
   650  019C                     	;# 
   651  019D                     	;# 
   652  019E                     	;# 
   653  019F                     	;# 
   654  020D                     	;# 
   655  0210                     	;# 
   656  0211                     	;# 
   657  0211                     	;# 
   658  0212                     	;# 
   659  0212                     	;# 
   660  0213                     	;# 
   661  0213                     	;# 
   662  0214                     	;# 
   663  0214                     	;# 
   664  0215                     	;# 
   665  0215                     	;# 
   666  0215                     	;# 
   667  0216                     	;# 
   668  0216                     	;# 
   669  0217                     	;# 
   670  0217                     	;# 
   671  0291                     	;# 
   672  0291                     	;# 
   673  0292                     	;# 
   674  0293                     	;# 
   675  0298                     	;# 
   676  0298                     	;# 
   677  0299                     	;# 
   678  029A                     	;# 
   679  0394                     	;# 
   680  0395                     	;# 
   681  0396                     	;# 
   682  0FE4                     	;# 
   683  0FE5                     	;# 
   684  0FE6                     	;# 
   685  0FE7                     	;# 
   686  0FE8                     	;# 
   687  0FE9                     	;# 
   688  0FEA                     	;# 
   689  0FEB                     	;# 
   690  0FED                     	;# 
   691  0FEE                     	;# 
   692  0FEF                     	;# 
   693  0000                     	;# 
   694  0001                     	;# 
   695  0002                     	;# 
   696  0003                     	;# 
   697  0004                     	;# 
   698  0005                     	;# 
   699  0006                     	;# 
   700  0007                     	;# 
   701  0008                     	;# 
   702  0009                     	;# 
   703  000A                     	;# 
   704  000B                     	;# 
   705  000C                     	;# 
   706  000D                     	;# 
   707  000E                     	;# 
   708  0010                     	;# 
   709  0011                     	;# 
   710  0012                     	;# 
   711  0015                     	;# 
   712  0016                     	;# 
   713  0016                     	;# 
   714  0017                     	;# 
   715  0018                     	;# 
   716  0019                     	;# 
   717  001A                     	;# 
   718  001B                     	;# 
   719  001C                     	;# 
   720  008C                     	;# 
   721  008D                     	;# 
   722  008E                     	;# 
   723  0090                     	;# 
   724  0091                     	;# 
   725  0092                     	;# 
   726  0095                     	;# 
   727  0096                     	;# 
   728  0097                     	;# 
   729  0099                     	;# 
   730  009A                     	;# 
   731  009B                     	;# 
   732  009B                     	;# 
   733  009C                     	;# 
   734  009D                     	;# 
   735  009E                     	;# 
   736  010C                     	;# 
   737  010D                     	;# 
   738  010E                     	;# 
   739  0116                     	;# 
   740  0117                     	;# 
   741  011D                     	;# 
   742  018C                     	;# 
   743  018D                     	;# 
   744  018E                     	;# 
   745  0191                     	;# 
   746  0191                     	;# 
   747  0192                     	;# 
   748  0193                     	;# 
   749  0193                     	;# 
   750  0194                     	;# 
   751  0195                     	;# 
   752  0196                     	;# 
   753  0197                     	;# 
   754  0199                     	;# 
   755  019A                     	;# 
   756  019B                     	;# 
   757  019B                     	;# 
   758  019B                     	;# 
   759  019B                     	;# 
   760  019C                     	;# 
   761  019C                     	;# 
   762  019D                     	;# 
   763  019E                     	;# 
   764  019F                     	;# 
   765  020D                     	;# 
   766  0210                     	;# 
   767  0211                     	;# 
   768  0211                     	;# 
   769  0212                     	;# 
   770  0212                     	;# 
   771  0213                     	;# 
   772  0213                     	;# 
   773  0214                     	;# 
   774  0214                     	;# 
   775  0215                     	;# 
   776  0215                     	;# 
   777  0215                     	;# 
   778  0216                     	;# 
   779  0216                     	;# 
   780  0217                     	;# 
   781  0217                     	;# 
   782  0291                     	;# 
   783  0291                     	;# 
   784  0292                     	;# 
   785  0293                     	;# 
   786  0298                     	;# 
   787  0298                     	;# 
   788  0299                     	;# 
   789  029A                     	;# 
   790  0394                     	;# 
   791  0395                     	;# 
   792  0396                     	;# 
   793  0FE4                     	;# 
   794  0FE5                     	;# 
   795  0FE6                     	;# 
   796  0FE7                     	;# 
   797  0FE8                     	;# 
   798  0FE9                     	;# 
   799  0FEA                     	;# 
   800  0FEB                     	;# 
   801  0FED                     	;# 
   802  0FEE                     	;# 
   803  0FEF                     	;# 
   804  0000                     	;# 
   805  0001                     	;# 
   806  0002                     	;# 
   807  0003                     	;# 
   808  0004                     	;# 
   809  0005                     	;# 
   810  0006                     	;# 
   811  0007                     	;# 
   812  0008                     	;# 
   813  0009                     	;# 
   814  000A                     	;# 
   815  000B                     	;# 
   816  000C                     	;# 
   817  000D                     	;# 
   818  000E                     	;# 
   819  0010                     	;# 
   820  0011                     	;# 
   821  0012                     	;# 
   822  0015                     	;# 
   823  0016                     	;# 
   824  0016                     	;# 
   825  0017                     	;# 
   826  0018                     	;# 
   827  0019                     	;# 
   828  001A                     	;# 
   829  001B                     	;# 
   830  001C                     	;# 
   831  008C                     	;# 
   832  008D                     	;# 
   833  008E                     	;# 
   834  0090                     	;# 
   835  0091                     	;# 
   836  0092                     	;# 
   837  0095                     	;# 
   838  0096                     	;# 
   839  0097                     	;# 
   840  0099                     	;# 
   841  009A                     	;# 
   842  009B                     	;# 
   843  009B                     	;# 
   844  009C                     	;# 
   845  009D                     	;# 
   846  009E                     	;# 
   847  010C                     	;# 
   848  010D                     	;# 
   849  010E                     	;# 
   850  0116                     	;# 
   851  0117                     	;# 
   852  011D                     	;# 
   853  018C                     	;# 
   854  018D                     	;# 
   855  018E                     	;# 
   856  0191                     	;# 
   857  0191                     	;# 
   858  0192                     	;# 
   859  0193                     	;# 
   860  0193                     	;# 
   861  0194                     	;# 
   862  0195                     	;# 
   863  0196                     	;# 
   864  0197                     	;# 
   865  0199                     	;# 
   866  019A                     	;# 
   867  019B                     	;# 
   868  019B                     	;# 
   869  019B                     	;# 
   870  019B                     	;# 
   871  019C                     	;# 
   872  019C                     	;# 
   873  019D                     	;# 
   874  019E                     	;# 
   875  019F                     	;# 
   876  020D                     	;# 
   877  0210                     	;# 
   878  0211                     	;# 
   879  0211                     	;# 
   880  0212                     	;# 
   881  0212                     	;# 
   882  0213                     	;# 
   883  0213                     	;# 
   884  0214                     	;# 
   885  0214                     	;# 
   886  0215                     	;# 
   887  0215                     	;# 
   888  0215                     	;# 
   889  0216                     	;# 
   890  0216                     	;# 
   891  0217                     	;# 
   892  0217                     	;# 
   893  0291                     	;# 
   894  0291                     	;# 
   895  0292                     	;# 
   896  0293                     	;# 
   897  0298                     	;# 
   898  0298                     	;# 
   899  0299                     	;# 
   900  029A                     	;# 
   901  0394                     	;# 
   902  0395                     	;# 
   903  0396                     	;# 
   904  0FE4                     	;# 
   905  0FE5                     	;# 
   906  0FE6                     	;# 
   907  0FE7                     	;# 
   908  0FE8                     	;# 
   909  0FE9                     	;# 
   910  0FEA                     	;# 
   911  0FEB                     	;# 
   912  0FED                     	;# 
   913  0FEE                     	;# 
   914  0FEF                     	;# 
   915  0000                     	;# 
   916  0001                     	;# 
   917  0002                     	;# 
   918  0003                     	;# 
   919  0004                     	;# 
   920  0005                     	;# 
   921  0006                     	;# 
   922  0007                     	;# 
   923  0008                     	;# 
   924  0009                     	;# 
   925  000A                     	;# 
   926  000B                     	;# 
   927  000C                     	;# 
   928  000D                     	;# 
   929  000E                     	;# 
   930  0010                     	;# 
   931  0011                     	;# 
   932  0012                     	;# 
   933  0015                     	;# 
   934  0016                     	;# 
   935  0016                     	;# 
   936  0017                     	;# 
   937  0018                     	;# 
   938  0019                     	;# 
   939  001A                     	;# 
   940  001B                     	;# 
   941  001C                     	;# 
   942  008C                     	;# 
   943  008D                     	;# 
   944  008E                     	;# 
   945  0090                     	;# 
   946  0091                     	;# 
   947  0092                     	;# 
   948  0095                     	;# 
   949  0096                     	;# 
   950  0097                     	;# 
   951  0099                     	;# 
   952  009A                     	;# 
   953  009B                     	;# 
   954  009B                     	;# 
   955  009C                     	;# 
   956  009D                     	;# 
   957  009E                     	;# 
   958  010C                     	;# 
   959  010D                     	;# 
   960  010E                     	;# 
   961  0116                     	;# 
   962  0117                     	;# 
   963  011D                     	;# 
   964  018C                     	;# 
   965  018D                     	;# 
   966  018E                     	;# 
   967  0191                     	;# 
   968  0191                     	;# 
   969  0192                     	;# 
   970  0193                     	;# 
   971  0193                     	;# 
   972  0194                     	;# 
   973  0195                     	;# 
   974  0196                     	;# 
   975  0197                     	;# 
   976  0199                     	;# 
   977  019A                     	;# 
   978  019B                     	;# 
   979  019B                     	;# 
   980  019B                     	;# 
   981  019B                     	;# 
   982  019C                     	;# 
   983  019C                     	;# 
   984  019D                     	;# 
   985  019E                     	;# 
   986  019F                     	;# 
   987  020D                     	;# 
   988  0210                     	;# 
   989  0211                     	;# 
   990  0211                     	;# 
   991  0212                     	;# 
   992  0212                     	;# 
   993  0213                     	;# 
   994  0213                     	;# 
   995  0214                     	;# 
   996  0214                     	;# 
   997  0215                     	;# 
   998  0215                     	;# 
   999  0215                     	;# 
  1000  0216                     	;# 
  1001  0216                     	;# 
  1002  0217                     	;# 
  1003  0217                     	;# 
  1004  0291                     	;# 
  1005  0291                     	;# 
  1006  0292                     	;# 
  1007  0293                     	;# 
  1008  0298                     	;# 
  1009  0298                     	;# 
  1010  0299                     	;# 
  1011  029A                     	;# 
  1012  0394                     	;# 
  1013  0395                     	;# 
  1014  0396                     	;# 
  1015  0FE4                     	;# 
  1016  0FE5                     	;# 
  1017  0FE6                     	;# 
  1018  0FE7                     	;# 
  1019  0FE8                     	;# 
  1020  0FE9                     	;# 
  1021  0FEA                     	;# 
  1022  0FEB                     	;# 
  1023  0FED                     	;# 
  1024  0FEE                     	;# 
  1025  0FEF                     	;# 
  1026  0000                     	;# 
  1027  0001                     	;# 
  1028  0002                     	;# 
  1029  0003                     	;# 
  1030  0004                     	;# 
  1031  0005                     	;# 
  1032  0006                     	;# 
  1033  0007                     	;# 
  1034  0008                     	;# 
  1035  0009                     	;# 
  1036  000A                     	;# 
  1037  000B                     	;# 
  1038  000C                     	;# 
  1039  000D                     	;# 
  1040  000E                     	;# 
  1041  0010                     	;# 
  1042  0011                     	;# 
  1043  0012                     	;# 
  1044  0015                     	;# 
  1045  0016                     	;# 
  1046  0016                     	;# 
  1047  0017                     	;# 
  1048  0018                     	;# 
  1049  0019                     	;# 
  1050  001A                     	;# 
  1051  001B                     	;# 
  1052  001C                     	;# 
  1053  008C                     	;# 
  1054  008D                     	;# 
  1055  008E                     	;# 
  1056  0090                     	;# 
  1057  0091                     	;# 
  1058  0092                     	;# 
  1059  0095                     	;# 
  1060  0096                     	;# 
  1061  0097                     	;# 
  1062  0099                     	;# 
  1063  009A                     	;# 
  1064  009B                     	;# 
  1065  009B                     	;# 
  1066  009C                     	;# 
  1067  009D                     	;# 
  1068  009E                     	;# 
  1069  010C                     	;# 
  1070  010D                     	;# 
  1071  010E                     	;# 
  1072  0116                     	;# 
  1073  0117                     	;# 
  1074  011D                     	;# 
  1075  018C                     	;# 
  1076  018D                     	;# 
  1077  018E                     	;# 
  1078  0191                     	;# 
  1079  0191                     	;# 
  1080  0192                     	;# 
  1081  0193                     	;# 
  1082  0193                     	;# 
  1083  0194                     	;# 
  1084  0195                     	;# 
  1085  0196                     	;# 
  1086  0197                     	;# 
  1087  0199                     	;# 
  1088  019A                     	;# 
  1089  019B                     	;# 
  1090  019B                     	;# 
  1091  019B                     	;# 
  1092  019B                     	;# 
  1093  019C                     	;# 
  1094  019C                     	;# 
  1095  019D                     	;# 
  1096  019E                     	;# 
  1097  019F                     	;# 
  1098  020D                     	;# 
  1099  0210                     	;# 
  1100  0211                     	;# 
  1101  0211                     	;# 
  1102  0212                     	;# 
  1103  0212                     	;# 
  1104  0213                     	;# 
  1105  0213                     	;# 
  1106  0214                     	;# 
  1107  0214                     	;# 
  1108  0215                     	;# 
  1109  0215                     	;# 
  1110  0215                     	;# 
  1111  0216                     	;# 
  1112  0216                     	;# 
  1113  0217                     	;# 
  1114  0217                     	;# 
  1115  0291                     	;# 
  1116  0291                     	;# 
  1117  0292                     	;# 
  1118  0293                     	;# 
  1119  0298                     	;# 
  1120  0298                     	;# 
  1121  0299                     	;# 
  1122  029A                     	;# 
  1123  0394                     	;# 
  1124  0395                     	;# 
  1125  0396                     	;# 
  1126  0FE4                     	;# 
  1127  0FE5                     	;# 
  1128  0FE6                     	;# 
  1129  0FE7                     	;# 
  1130  0FE8                     	;# 
  1131  0FE9                     	;# 
  1132  0FEA                     	;# 
  1133  0FEB                     	;# 
  1134  0FED                     	;# 
  1135  0FEE                     	;# 
  1136  0FEF                     	;# 
  1137  0000                     	;# 
  1138  0001                     	;# 
  1139  0002                     	;# 
  1140  0003                     	;# 
  1141  0004                     	;# 
  1142  0005                     	;# 
  1143  0006                     	;# 
  1144  0007                     	;# 
  1145  0008                     	;# 
  1146  0009                     	;# 
  1147  000A                     	;# 
  1148  000B                     	;# 
  1149  000C                     	;# 
  1150  000D                     	;# 
  1151  000E                     	;# 
  1152  0010                     	;# 
  1153  0011                     	;# 
  1154  0012                     	;# 
  1155  0015                     	;# 
  1156  0016                     	;# 
  1157  0016                     	;# 
  1158  0017                     	;# 
  1159  0018                     	;# 
  1160  0019                     	;# 
  1161  001A                     	;# 
  1162  001B                     	;# 
  1163  001C                     	;# 
  1164  008C                     	;# 
  1165  008D                     	;# 
  1166  008E                     	;# 
  1167  0090                     	;# 
  1168  0091                     	;# 
  1169  0092                     	;# 
  1170  0095                     	;# 
  1171  0096                     	;# 
  1172  0097                     	;# 
  1173  0099                     	;# 
  1174  009A                     	;# 
  1175  009B                     	;# 
  1176  009B                     	;# 
  1177  009C                     	;# 
  1178  009D                     	;# 
  1179  009E                     	;# 
  1180  010C                     	;# 
  1181  010D                     	;# 
  1182  010E                     	;# 
  1183  0116                     	;# 
  1184  0117                     	;# 
  1185  011D                     	;# 
  1186  018C                     	;# 
  1187  018D                     	;# 
  1188  018E                     	;# 
  1189  0191                     	;# 
  1190  0191                     	;# 
  1191  0192                     	;# 
  1192  0193                     	;# 
  1193  0193                     	;# 
  1194  0194                     	;# 
  1195  0195                     	;# 
  1196  0196                     	;# 
  1197  0197                     	;# 
  1198  0199                     	;# 
  1199  019A                     	;# 
  1200  019B                     	;# 
  1201  019B                     	;# 
  1202  019B                     	;# 
  1203  019B                     	;# 
  1204  019C                     	;# 
  1205  019C                     	;# 
  1206  019D                     	;# 
  1207  019E                     	;# 
  1208  019F                     	;# 
  1209  020D                     	;# 
  1210  0210                     	;# 
  1211  0211                     	;# 
  1212  0211                     	;# 
  1213  0212                     	;# 
  1214  0212                     	;# 
  1215  0213                     	;# 
  1216  0213                     	;# 
  1217  0214                     	;# 
  1218  0214                     	;# 
  1219  0215                     	;# 
  1220  0215                     	;# 
  1221  0215                     	;# 
  1222  0216                     	;# 
  1223  0216                     	;# 
  1224  0217                     	;# 
  1225  0217                     	;# 
  1226  0291                     	;# 
  1227  0291                     	;# 
  1228  0292                     	;# 
  1229  0293                     	;# 
  1230  0298                     	;# 
  1231  0298                     	;# 
  1232  0299                     	;# 
  1233  029A                     	;# 
  1234  0394                     	;# 
  1235  0395                     	;# 
  1236  0396                     	;# 
  1237  0FE4                     	;# 
  1238  0FE5                     	;# 
  1239  0FE6                     	;# 
  1240  0FE7                     	;# 
  1241  0FE8                     	;# 
  1242  0FE9                     	;# 
  1243  0FEA                     	;# 
  1244  0FEB                     	;# 
  1245  0FED                     	;# 
  1246  0FEE                     	;# 
  1247  0FEF                     	;# 
  1248  0000                     	;# 
  1249  0001                     	;# 
  1250  0002                     	;# 
  1251  0003                     	;# 
  1252  0004                     	;# 
  1253  0005                     	;# 
  1254  0006                     	;# 
  1255  0007                     	;# 
  1256  0008                     	;# 
  1257  0009                     	;# 
  1258  000A                     	;# 
  1259  000B                     	;# 
  1260  000C                     	;# 
  1261  000D                     	;# 
  1262  000E                     	;# 
  1263  0010                     	;# 
  1264  0011                     	;# 
  1265  0012                     	;# 
  1266  0015                     	;# 
  1267  0016                     	;# 
  1268  0016                     	;# 
  1269  0017                     	;# 
  1270  0018                     	;# 
  1271  0019                     	;# 
  1272  001A                     	;# 
  1273  001B                     	;# 
  1274  001C                     	;# 
  1275  008C                     	;# 
  1276  008D                     	;# 
  1277  008E                     	;# 
  1278  0090                     	;# 
  1279  0091                     	;# 
  1280  0092                     	;# 
  1281  0095                     	;# 
  1282  0096                     	;# 
  1283  0097                     	;# 
  1284  0099                     	;# 
  1285  009A                     	;# 
  1286  009B                     	;# 
  1287  009B                     	;# 
  1288  009C                     	;# 
  1289  009D                     	;# 
  1290  009E                     	;# 
  1291  010C                     	;# 
  1292  010D                     	;# 
  1293  010E                     	;# 
  1294  0116                     	;# 
  1295  0117                     	;# 
  1296  011D                     	;# 
  1297  018C                     	;# 
  1298  018D                     	;# 
  1299  018E                     	;# 
  1300  0191                     	;# 
  1301  0191                     	;# 
  1302  0192                     	;# 
  1303  0193                     	;# 
  1304  0193                     	;# 
  1305  0194                     	;# 
  1306  0195                     	;# 
  1307  0196                     	;# 
  1308  0197                     	;# 
  1309  0199                     	;# 
  1310  019A                     	;# 
  1311  019B                     	;# 
  1312  019B                     	;# 
  1313  019B                     	;# 
  1314  019B                     	;# 
  1315  019C                     	;# 
  1316  019C                     	;# 
  1317  019D                     	;# 
  1318  019E                     	;# 
  1319  019F                     	;# 
  1320  020D                     	;# 
  1321  0210                     	;# 
  1322  0211                     	;# 
  1323  0211                     	;# 
  1324  0212                     	;# 
  1325  0212                     	;# 
  1326  0213                     	;# 
  1327  0213                     	;# 
  1328  0214                     	;# 
  1329  0214                     	;# 
  1330  0215                     	;# 
  1331  0215                     	;# 
  1332  0215                     	;# 
  1333  0216                     	;# 
  1334  0216                     	;# 
  1335  0217                     	;# 
  1336  0217                     	;# 
  1337  0291                     	;# 
  1338  0291                     	;# 
  1339  0292                     	;# 
  1340  0293                     	;# 
  1341  0298                     	;# 
  1342  0298                     	;# 
  1343  0299                     	;# 
  1344  029A                     	;# 
  1345  0394                     	;# 
  1346  0395                     	;# 
  1347  0396                     	;# 
  1348  0FE4                     	;# 
  1349  0FE5                     	;# 
  1350  0FE6                     	;# 
  1351  0FE7                     	;# 
  1352  0FE8                     	;# 
  1353  0FE9                     	;# 
  1354  0FEA                     	;# 
  1355  0FEB                     	;# 
  1356  0FED                     	;# 
  1357  0FEE                     	;# 
  1358  0FEF                     	;# 
  1359  0000                     	;# 
  1360  0001                     	;# 
  1361  0002                     	;# 
  1362  0003                     	;# 
  1363  0004                     	;# 
  1364  0005                     	;# 
  1365  0006                     	;# 
  1366  0007                     	;# 
  1367  0008                     	;# 
  1368  0009                     	;# 
  1369  000A                     	;# 
  1370  000B                     	;# 
  1371  000C                     	;# 
  1372  000D                     	;# 
  1373  000E                     	;# 
  1374  0010                     	;# 
  1375  0011                     	;# 
  1376  0012                     	;# 
  1377  0015                     	;# 
  1378  0016                     	;# 
  1379  0016                     	;# 
  1380  0017                     	;# 
  1381  0018                     	;# 
  1382  0019                     	;# 
  1383  001A                     	;# 
  1384  001B                     	;# 
  1385  001C                     	;# 
  1386  008C                     	;# 
  1387  008D                     	;# 
  1388  008E                     	;# 
  1389  0090                     	;# 
  1390  0091                     	;# 
  1391  0092                     	;# 
  1392  0095                     	;# 
  1393  0096                     	;# 
  1394  0097                     	;# 
  1395  0099                     	;# 
  1396  009A                     	;# 
  1397  009B                     	;# 
  1398  009B                     	;# 
  1399  009C                     	;# 
  1400  009D                     	;# 
  1401  009E                     	;# 
  1402  010C                     	;# 
  1403  010D                     	;# 
  1404  010E                     	;# 
  1405  0116                     	;# 
  1406  0117                     	;# 
  1407  011D                     	;# 
  1408  018C                     	;# 
  1409  018D                     	;# 
  1410  018E                     	;# 
  1411  0191                     	;# 
  1412  0191                     	;# 
  1413  0192                     	;# 
  1414  0193                     	;# 
  1415  0193                     	;# 
  1416  0194                     	;# 
  1417  0195                     	;# 
  1418  0196                     	;# 
  1419  0197                     	;# 
  1420  0199                     	;# 
  1421  019A                     	;# 
  1422  019B                     	;# 
  1423  019B                     	;# 
  1424  019B                     	;# 
  1425  019B                     	;# 
  1426  019C                     	;# 
  1427  019C                     	;# 
  1428  019D                     	;# 
  1429  019E                     	;# 
  1430  019F                     	;# 
  1431  020D                     	;# 
  1432  0210                     	;# 
  1433  0211                     	;# 
  1434  0211                     	;# 
  1435  0212                     	;# 
  1436  0212                     	;# 
  1437  0213                     	;# 
  1438  0213                     	;# 
  1439  0214                     	;# 
  1440  0214                     	;# 
  1441  0215                     	;# 
  1442  0215                     	;# 
  1443  0215                     	;# 
  1444  0216                     	;# 
  1445  0216                     	;# 
  1446  0217                     	;# 
  1447  0217                     	;# 
  1448  0291                     	;# 
  1449  0291                     	;# 
  1450  0292                     	;# 
  1451  0293                     	;# 
  1452  0298                     	;# 
  1453  0298                     	;# 
  1454  0299                     	;# 
  1455  029A                     	;# 
  1456  0394                     	;# 
  1457  0395                     	;# 
  1458  0396                     	;# 
  1459  0FE4                     	;# 
  1460  0FE5                     	;# 
  1461  0FE6                     	;# 
  1462  0FE7                     	;# 
  1463  0FE8                     	;# 
  1464  0FE9                     	;# 
  1465  0FEA                     	;# 
  1466  0FEB                     	;# 
  1467  0FED                     	;# 
  1468  0FEE                     	;# 
  1469  0FEF                     	;# 
  1470  0000                     	;# 
  1471  0001                     	;# 
  1472  0002                     	;# 
  1473  0003                     	;# 
  1474  0004                     	;# 
  1475  0005                     	;# 
  1476  0006                     	;# 
  1477  0007                     	;# 
  1478  0008                     	;# 
  1479  0009                     	;# 
  1480  000A                     	;# 
  1481  000B                     	;# 
  1482  000C                     	;# 
  1483  000D                     	;# 
  1484  000E                     	;# 
  1485  0010                     	;# 
  1486  0011                     	;# 
  1487  0012                     	;# 
  1488  0015                     	;# 
  1489  0016                     	;# 
  1490  0016                     	;# 
  1491  0017                     	;# 
  1492  0018                     	;# 
  1493  0019                     	;# 
  1494  001A                     	;# 
  1495  001B                     	;# 
  1496  001C                     	;# 
  1497  008C                     	;# 
  1498  008D                     	;# 
  1499  008E                     	;# 
  1500  0090                     	;# 
  1501  0091                     	;# 
  1502  0092                     	;# 
  1503  0095                     	;# 
  1504  0096                     	;# 
  1505  0097                     	;# 
  1506  0099                     	;# 
  1507  009A                     	;# 
  1508  009B                     	;# 
  1509  009B                     	;# 
  1510  009C                     	;# 
  1511  009D                     	;# 
  1512  009E                     	;# 
  1513  010C                     	;# 
  1514  010D                     	;# 
  1515  010E                     	;# 
  1516  0116                     	;# 
  1517  0117                     	;# 
  1518  011D                     	;# 
  1519  018C                     	;# 
  1520  018D                     	;# 
  1521  018E                     	;# 
  1522  0191                     	;# 
  1523  0191                     	;# 
  1524  0192                     	;# 
  1525  0193                     	;# 
  1526  0193                     	;# 
  1527  0194                     	;# 
  1528  0195                     	;# 
  1529  0196                     	;# 
  1530  0197                     	;# 
  1531  0199                     	;# 
  1532  019A                     	;# 
  1533  019B                     	;# 
  1534  019B                     	;# 
  1535  019B                     	;# 
  1536  019B                     	;# 
  1537  019C                     	;# 
  1538  019C                     	;# 
  1539  019D                     	;# 
  1540  019E                     	;# 
  1541  019F                     	;# 
  1542  020D                     	;# 
  1543  0210                     	;# 
  1544  0211                     	;# 
  1545  0211                     	;# 
  1546  0212                     	;# 
  1547  0212                     	;# 
  1548  0213                     	;# 
  1549  0213                     	;# 
  1550  0214                     	;# 
  1551  0214                     	;# 
  1552  0215                     	;# 
  1553  0215                     	;# 
  1554  0215                     	;# 
  1555  0216                     	;# 
  1556  0216                     	;# 
  1557  0217                     	;# 
  1558  0217                     	;# 
  1559  0291                     	;# 
  1560  0291                     	;# 
  1561  0292                     	;# 
  1562  0293                     	;# 
  1563  0298                     	;# 
  1564  0298                     	;# 
  1565  0299                     	;# 
  1566  029A                     	;# 
  1567  0394                     	;# 
  1568  0395                     	;# 
  1569  0396                     	;# 
  1570  0FE4                     	;# 
  1571  0FE5                     	;# 
  1572  0FE6                     	;# 
  1573  0FE7                     	;# 
  1574  0FE8                     	;# 
  1575  0FE9                     	;# 
  1576  0FEA                     	;# 
  1577  0FEB                     	;# 
  1578  0FED                     	;# 
  1579  0FEE                     	;# 
  1580  0FEF                     	;# 
  1581  0000                     	;# 
  1582  0001                     	;# 
  1583  0002                     	;# 
  1584  0003                     	;# 
  1585  0004                     	;# 
  1586  0005                     	;# 
  1587  0006                     	;# 
  1588  0007                     	;# 
  1589  0008                     	;# 
  1590  0009                     	;# 
  1591  000A                     	;# 
  1592  000B                     	;# 
  1593  000C                     	;# 
  1594  000D                     	;# 
  1595  000E                     	;# 
  1596  0010                     	;# 
  1597  0011                     	;# 
  1598  0012                     	;# 
  1599  0015                     	;# 
  1600  0016                     	;# 
  1601  0016                     	;# 
  1602  0017                     	;# 
  1603  0018                     	;# 
  1604  0019                     	;# 
  1605  001A                     	;# 
  1606  001B                     	;# 
  1607  001C                     	;# 
  1608  008C                     	;# 
  1609  008D                     	;# 
  1610  008E                     	;# 
  1611  0090                     	;# 
  1612  0091                     	;# 
  1613  0092                     	;# 
  1614  0095                     	;# 
  1615  0096                     	;# 
  1616  0097                     	;# 
  1617  0099                     	;# 
  1618  009A                     	;# 
  1619  009B                     	;# 
  1620  009B                     	;# 
  1621  009C                     	;# 
  1622  009D                     	;# 
  1623  009E                     	;# 
  1624  010C                     	;# 
  1625  010D                     	;# 
  1626  010E                     	;# 
  1627  0116                     	;# 
  1628  0117                     	;# 
  1629  011D                     	;# 
  1630  018C                     	;# 
  1631  018D                     	;# 
  1632  018E                     	;# 
  1633  0191                     	;# 
  1634  0191                     	;# 
  1635  0192                     	;# 
  1636  0193                     	;# 
  1637  0193                     	;# 
  1638  0194                     	;# 
  1639  0195                     	;# 
  1640  0196                     	;# 
  1641  0197                     	;# 
  1642  0199                     	;# 
  1643  019A                     	;# 
  1644  019B                     	;# 
  1645  019B                     	;# 
  1646  019B                     	;# 
  1647  019B                     	;# 
  1648  019C                     	;# 
  1649  019C                     	;# 
  1650  019D                     	;# 
  1651  019E                     	;# 
  1652  019F                     	;# 
  1653  020D                     	;# 
  1654  0210                     	;# 
  1655  0211                     	;# 
  1656  0211                     	;# 
  1657  0212                     	;# 
  1658  0212                     	;# 
  1659  0213                     	;# 
  1660  0213                     	;# 
  1661  0214                     	;# 
  1662  0214                     	;# 
  1663  0215                     	;# 
  1664  0215                     	;# 
  1665  0215                     	;# 
  1666  0216                     	;# 
  1667  0216                     	;# 
  1668  0217                     	;# 
  1669  0217                     	;# 
  1670  0291                     	;# 
  1671  0291                     	;# 
  1672  0292                     	;# 
  1673  0293                     	;# 
  1674  0298                     	;# 
  1675  0298                     	;# 
  1676  0299                     	;# 
  1677  029A                     	;# 
  1678  0394                     	;# 
  1679  0395                     	;# 
  1680  0396                     	;# 
  1681  0FE4                     	;# 
  1682  0FE5                     	;# 
  1683  0FE6                     	;# 
  1684  0FE7                     	;# 
  1685  0FE8                     	;# 
  1686  0FE9                     	;# 
  1687  0FEA                     	;# 
  1688  0FEB                     	;# 
  1689  0FED                     	;# 
  1690  0FEE                     	;# 
  1691  0FEF                     	;# 
  1692  0000                     	;# 
  1693  0001                     	;# 
  1694  0002                     	;# 
  1695  0003                     	;# 
  1696  0004                     	;# 
  1697  0005                     	;# 
  1698  0006                     	;# 
  1699  0007                     	;# 
  1700  0008                     	;# 
  1701  0009                     	;# 
  1702  000A                     	;# 
  1703  000B                     	;# 
  1704  000C                     	;# 
  1705  000D                     	;# 
  1706  000E                     	;# 
  1707  0010                     	;# 
  1708  0011                     	;# 
  1709  0012                     	;# 
  1710  0015                     	;# 
  1711  0016                     	;# 
  1712  0016                     	;# 
  1713  0017                     	;# 
  1714  0018                     	;# 
  1715  0019                     	;# 
  1716  001A                     	;# 
  1717  001B                     	;# 
  1718  001C                     	;# 
  1719  008C                     	;# 
  1720  008D                     	;# 
  1721  008E                     	;# 
  1722  0090                     	;# 
  1723  0091                     	;# 
  1724  0092                     	;# 
  1725  0095                     	;# 
  1726  0096                     	;# 
  1727  0097                     	;# 
  1728  0099                     	;# 
  1729  009A                     	;# 
  1730  009B                     	;# 
  1731  009B                     	;# 
  1732  009C                     	;# 
  1733  009D                     	;# 
  1734  009E                     	;# 
  1735  010C                     	;# 
  1736  010D                     	;# 
  1737  010E                     	;# 
  1738  0116                     	;# 
  1739  0117                     	;# 
  1740  011D                     	;# 
  1741  018C                     	;# 
  1742  018D                     	;# 
  1743  018E                     	;# 
  1744  0191                     	;# 
  1745  0191                     	;# 
  1746  0192                     	;# 
  1747  0193                     	;# 
  1748  0193                     	;# 
  1749  0194                     	;# 
  1750  0195                     	;# 
  1751  0196                     	;# 
  1752  0197                     	;# 
  1753  0199                     	;# 
  1754  019A                     	;# 
  1755  019B                     	;# 
  1756  019B                     	;# 
  1757  019B                     	;# 
  1758  019B                     	;# 
  1759  019C                     	;# 
  1760  019C                     	;# 
  1761  019D                     	;# 
  1762  019E                     	;# 
  1763  019F                     	;# 
  1764  020D                     	;# 
  1765  0210                     	;# 
  1766  0211                     	;# 
  1767  0211                     	;# 
  1768  0212                     	;# 
  1769  0212                     	;# 
  1770  0213                     	;# 
  1771  0213                     	;# 
  1772  0214                     	;# 
  1773  0214                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0215                     	;# 
  1777  0216                     	;# 
  1778  0216                     	;# 
  1779  0217                     	;# 
  1780  0217                     	;# 
  1781  0291                     	;# 
  1782  0291                     	;# 
  1783  0292                     	;# 
  1784  0293                     	;# 
  1785  0298                     	;# 
  1786  0298                     	;# 
  1787  0299                     	;# 
  1788  029A                     	;# 
  1789  0394                     	;# 
  1790  0395                     	;# 
  1791  0396                     	;# 
  1792  0FE4                     	;# 
  1793  0FE5                     	;# 
  1794  0FE6                     	;# 
  1795  0FE7                     	;# 
  1796  0FE8                     	;# 
  1797  0FE9                     	;# 
  1798  0FEA                     	;# 
  1799  0FEB                     	;# 
  1800  0FED                     	;# 
  1801  0FEE                     	;# 
  1802  0FEF                     	;# 
  1803  0000                     	;# 
  1804  0001                     	;# 
  1805  0002                     	;# 
  1806  0003                     	;# 
  1807  0004                     	;# 
  1808  0005                     	;# 
  1809  0006                     	;# 
  1810  0007                     	;# 
  1811  0008                     	;# 
  1812  0009                     	;# 
  1813  000A                     	;# 
  1814  000B                     	;# 
  1815  000C                     	;# 
  1816  000D                     	;# 
  1817  000E                     	;# 
  1818  0010                     	;# 
  1819  0011                     	;# 
  1820  0012                     	;# 
  1821  0015                     	;# 
  1822  0016                     	;# 
  1823  0016                     	;# 
  1824  0017                     	;# 
  1825  0018                     	;# 
  1826  0019                     	;# 
  1827  001A                     	;# 
  1828  001B                     	;# 
  1829  001C                     	;# 
  1830  008C                     	;# 
  1831  008D                     	;# 
  1832  008E                     	;# 
  1833  0090                     	;# 
  1834  0091                     	;# 
  1835  0092                     	;# 
  1836  0095                     	;# 
  1837  0096                     	;# 
  1838  0097                     	;# 
  1839  0099                     	;# 
  1840  009A                     	;# 
  1841  009B                     	;# 
  1842  009B                     	;# 
  1843  009C                     	;# 
  1844  009D                     	;# 
  1845  009E                     	;# 
  1846  010C                     	;# 
  1847  010D                     	;# 
  1848  010E                     	;# 
  1849  0116                     	;# 
  1850  0117                     	;# 
  1851  011D                     	;# 
  1852  018C                     	;# 
  1853  018D                     	;# 
  1854  018E                     	;# 
  1855  0191                     	;# 
  1856  0191                     	;# 
  1857  0192                     	;# 
  1858  0193                     	;# 
  1859  0193                     	;# 
  1860  0194                     	;# 
  1861  0195                     	;# 
  1862  0196                     	;# 
  1863  0197                     	;# 
  1864  0199                     	;# 
  1865  019A                     	;# 
  1866  019B                     	;# 
  1867  019B                     	;# 
  1868  019B                     	;# 
  1869  019B                     	;# 
  1870  019C                     	;# 
  1871  019C                     	;# 
  1872  019D                     	;# 
  1873  019E                     	;# 
  1874  019F                     	;# 
  1875  020D                     	;# 
  1876  0210                     	;# 
  1877  0211                     	;# 
  1878  0211                     	;# 
  1879  0212                     	;# 
  1880  0212                     	;# 
  1881  0213                     	;# 
  1882  0213                     	;# 
  1883  0214                     	;# 
  1884  0214                     	;# 
  1885  0215                     	;# 
  1886  0215                     	;# 
  1887  0215                     	;# 
  1888  0216                     	;# 
  1889  0216                     	;# 
  1890  0217                     	;# 
  1891  0217                     	;# 
  1892  0291                     	;# 
  1893  0291                     	;# 
  1894  0292                     	;# 
  1895  0293                     	;# 
  1896  0298                     	;# 
  1897  0298                     	;# 
  1898  0299                     	;# 
  1899  029A                     	;# 
  1900  0394                     	;# 
  1901  0395                     	;# 
  1902  0396                     	;# 
  1903  0FE4                     	;# 
  1904  0FE5                     	;# 
  1905  0FE6                     	;# 
  1906  0FE7                     	;# 
  1907  0FE8                     	;# 
  1908  0FE9                     	;# 
  1909  0FEA                     	;# 
  1910  0FEB                     	;# 
  1911  0FED                     	;# 
  1912  0FEE                     	;# 
  1913  0FEF                     	;# 
  1914  0000                     	;# 
  1915  0001                     	;# 
  1916  0002                     	;# 
  1917  0003                     	;# 
  1918  0004                     	;# 
  1919  0005                     	;# 
  1920  0006                     	;# 
  1921  0007                     	;# 
  1922  0008                     	;# 
  1923  0009                     	;# 
  1924  000A                     	;# 
  1925  000B                     	;# 
  1926  000C                     	;# 
  1927  000D                     	;# 
  1928  000E                     	;# 
  1929  0010                     	;# 
  1930  0011                     	;# 
  1931  0012                     	;# 
  1932  0015                     	;# 
  1933  0016                     	;# 
  1934  0016                     	;# 
  1935  0017                     	;# 
  1936  0018                     	;# 
  1937  0019                     	;# 
  1938  001A                     	;# 
  1939  001B                     	;# 
  1940  001C                     	;# 
  1941  008C                     	;# 
  1942  008D                     	;# 
  1943  008E                     	;# 
  1944  0090                     	;# 
  1945  0091                     	;# 
  1946  0092                     	;# 
  1947  0095                     	;# 
  1948  0096                     	;# 
  1949  0097                     	;# 
  1950  0099                     	;# 
  1951  009A                     	;# 
  1952  009B                     	;# 
  1953  009B                     	;# 
  1954  009C                     	;# 
  1955  009D                     	;# 
  1956  009E                     	;# 
  1957  010C                     	;# 
  1958  010D                     	;# 
  1959  010E                     	;# 
  1960  0116                     	;# 
  1961  0117                     	;# 
  1962  011D                     	;# 
  1963  018C                     	;# 
  1964  018D                     	;# 
  1965  018E                     	;# 
  1966  0191                     	;# 
  1967  0191                     	;# 
  1968  0192                     	;# 
  1969  0193                     	;# 
  1970  0193                     	;# 
  1971  0194                     	;# 
  1972  0195                     	;# 
  1973  0196                     	;# 
  1974  0197                     	;# 
  1975  0199                     	;# 
  1976  019A                     	;# 
  1977  019B                     	;# 
  1978  019B                     	;# 
  1979  019B                     	;# 
  1980  019B                     	;# 
  1981  019C                     	;# 
  1982  019C                     	;# 
  1983  019D                     	;# 
  1984  019E                     	;# 
  1985  019F                     	;# 
  1986  020D                     	;# 
  1987  0210                     	;# 
  1988  0211                     	;# 
  1989  0211                     	;# 
  1990  0212                     	;# 
  1991  0212                     	;# 
  1992  0213                     	;# 
  1993  0213                     	;# 
  1994  0214                     	;# 
  1995  0214                     	;# 
  1996  0215                     	;# 
  1997  0215                     	;# 
  1998  0215                     	;# 
  1999  0216                     	;# 
  2000  0216                     	;# 
  2001  0217                     	;# 
  2002  0217                     	;# 
  2003  0291                     	;# 
  2004  0291                     	;# 
  2005  0292                     	;# 
  2006  0293                     	;# 
  2007  0298                     	;# 
  2008  0298                     	;# 
  2009  0299                     	;# 
  2010  029A                     	;# 
  2011  0394                     	;# 
  2012  0395                     	;# 
  2013  0396                     	;# 
  2014  0FE4                     	;# 
  2015  0FE5                     	;# 
  2016  0FE6                     	;# 
  2017  0FE7                     	;# 
  2018  0FE8                     	;# 
  2019  0FE9                     	;# 
  2020  0FEA                     	;# 
  2021  0FEB                     	;# 
  2022  0FED                     	;# 
  2023  0FEE                     	;# 
  2024  0FEF                     	;# 
  2025                           
  2026                           	psect	idataBANK3
  2027  13BB                     __pidataBANK3:	
  2028                           
  2029                           ;initializer for __product
  2030  13BB  3463               	retlw	99
  2031  13BC  3402               	retlw	2
  2032  13BD  3400               	retlw	0
  2033  13BE  3400               	retlw	0
  2034  13BF  3400               	retlw	0
  2035  13C0  3400               	retlw	0
  2036  13C1  3400               	retlw	0
  2037  13C2  3400               	retlw	0
  2038  13C3  3400               	retlw	0
  2039  13C4  3400               	retlw	0
  2040  13C5  3400               	retlw	0
  2041  13C6  3400               	retlw	0
  2042  13C7  34FF               	retlw	255
  2043  13C8  34FF               	retlw	255
  2044  13C9  34FF               	retlw	255
  2045  13CA  3400               	retlw	0
  2046  13CB  3400               	retlw	0
  2047  13CC  3400               	retlw	0
  2048  13CD  3400               	retlw	0
  2049  13CE  3400               	retlw	0
  2050  13CF  3400               	retlw	0
  2051  13D0  3400               	retlw	0
  2052  13D1  3400               	retlw	0
  2053  13D2  3400               	retlw	0
  2054  13D3  3400               	retlw	0
  2055  13D4  3400               	retlw	0
  2056  13D5  3400               	retlw	0
  2057  13D6  3400               	retlw	0
  2058  13D7  3400               	retlw	0
  2059  13D8  3400               	retlw	0
  2060  13D9  3400               	retlw	0
  2061  13DA  3400               	retlw	0
  2062                           
  2063                           	psect	stringtext
  2064  1000                     __pstringtext:	
  2065  1000                     _CC2500_registers_address:	
  2066  1000  3403               	retlw	3
  2067  1001  3416               	retlw	22
  2068  1002  3417               	retlw	23
  2069  1003  341E               	retlw	30
  2070  1004  341F               	retlw	31
  2071  1005  3420               	retlw	32
  2072  1006  342A               	retlw	42
  2073  1007  342B               	retlw	43
  2074  1008  340B               	retlw	11
  2075  1009  340C               	retlw	12
  2076  100A  340D               	retlw	13
  2077  100B  340E               	retlw	14
  2078  100C  340F               	retlw	15
  2079  100D  3410               	retlw	16
  2080  100E  3411               	retlw	17
  2081  100F  3412               	retlw	18
  2082  1010  3413               	retlw	19
  2083  1011  3414               	retlw	20
  2084  1012  340A               	retlw	10
  2085  1013  3415               	retlw	21
  2086  1014  3421               	retlw	33
  2087  1015  3422               	retlw	34
  2088  1016  3418               	retlw	24
  2089  1017  3419               	retlw	25
  2090  1018  341A               	retlw	26
  2091  1019  341B               	retlw	27
  2092  101A  341C               	retlw	28
  2093  101B  341D               	retlw	29
  2094  101C  3423               	retlw	35
  2095  101D  3424               	retlw	36
  2096  101E  3425               	retlw	37
  2097  101F  3426               	retlw	38
  2098  1020  3429               	retlw	41
  2099  1021  342C               	retlw	44
  2100  1022  342D               	retlw	45
  2101  1023  342E               	retlw	46
  2102  1024  3400               	retlw	0
  2103  1025  3401               	retlw	1
  2104  1026  3402               	retlw	2
  2105  1027  3407               	retlw	7
  2106  1028  3408               	retlw	8
  2107  1029  3409               	retlw	9
  2108  102A  3406               	retlw	6
  2109  102B  3404               	retlw	4
  2110  102C  3405               	retlw	5
  2111  102D  3427               	retlw	39
  2112  102E  3428               	retlw	40
  2113  102F                     __end_of_CC2500_registers_address:	
  2114  102F                     _CC2500_rfSettings:	
  2115  102F  3407               	retlw	7
  2116  1030  3407               	retlw	7
  2117  1031  3430               	retlw	48
  2118  1032  3487               	retlw	135
  2119  1033  346B               	retlw	107
  2120  1034  34F8               	retlw	248
  2121  1035  347F               	retlw	127
  2122  1036  343F               	retlw	63
  2123  1037  3409               	retlw	9
  2124  1038  3400               	retlw	0
  2125  1039  345C               	retlw	92
  2126  103A  34A7               	retlw	167
  2127  103B  3462               	retlw	98
  2128  103C  3486               	retlw	134
  2129  103D  3483               	retlw	131
  2130  103E  3403               	retlw	3
  2131  103F  3422               	retlw	34
  2132  1040  34F8               	retlw	248
  2133  1041  3400               	retlw	0
  2134  1042  3444               	retlw	68
  2135  1043  34B6               	retlw	182
  2136  1044  3410               	retlw	16
  2137  1045  3418               	retlw	24
  2138  1046  341D               	retlw	29
  2139  1047  341C               	retlw	28
  2140  1048  34C7               	retlw	199
  2141  1049  3400               	retlw	0
  2142  104A  34B2               	retlw	178
  2143  104B  34EA               	retlw	234
  2144  104C  340A               	retlw	10
  2145  104D  3400               	retlw	0
  2146  104E  3411               	retlw	17
  2147  104F  3459               	retlw	89
  2148  1050  3488               	retlw	136
  2149  1051  3431               	retlw	49
  2150  1052  340B               	retlw	11
  2151  1053  342F               	retlw	47
  2152  1054  342E               	retlw	46
  2153  1055  3406               	retlw	6
  2154  1056  3404               	retlw	4
  2155  1057  3405               	retlw	5
  2156  1058  3400               	retlw	0
  2157  1059  3430               	retlw	48
  2158  105A  34D3               	retlw	211
  2159  105B  3491               	retlw	145
  2160  105C  3441               	retlw	65
  2161  105D  3400               	retlw	0
  2162  105E                     __end_of_CC2500_rfSettings:	
  2163  105E                     _CC2500_patable_vaule:	
  2164  105E  34FE               	retlw	254
  2165  105F  34FE               	retlw	254
  2166  1060  34FE               	retlw	254
  2167  1061  34FE               	retlw	254
  2168  1062  34FE               	retlw	254
  2169  1063  34FE               	retlw	254
  2170  1064  34FE               	retlw	254
  2171  1065  34FE               	retlw	254
  2172  1066                     __end_of_CC2500_patable_vaule:	
  2173                           
  2174                           	psect	nvBANK0
  2175  006E                     __pnvBANK0:	
  2176  006E                     _product:	
  2177  006E                     	ds	1
  2178  000C                     _PORTA	set	12
  2179  000D                     _PORTB	set	13
  2180  000E                     _PORTC	set	14
  2181  0018                     _T1CON	set	24
  2182  0017                     _TMR1H	set	23
  2183  0016                     _TMR1L	set	22
  2184  005F                     _GIE	set	95
  2185  005C                     _INTE	set	92
  2186  0059                     _INTF	set	89
  2187  005B                     _IOCIE	set	91
  2188  0058                     _IOCIF	set	88
  2189  005E                     _PEIE	set	94
  2190  0060                     _RA0	set	96
  2191  0063                     _RA3	set	99
  2192  0064                     _RA4	set	100
  2193  0066                     _RA6	set	102
  2194  0067                     _RA7	set	103
  2195  0068                     _RB0	set	104
  2196  0069                     _RB1	set	105
  2197  006B                     _RB3	set	107
  2198  006C                     _RB4	set	108
  2199  006D                     _RB5	set	109
  2200  0070                     _RC0	set	112
  2201  0071                     _RC1	set	113
  2202  0072                     _RC2	set	114
  2203  0074                     _RC4	set	116
  2204  0075                     _RC5	set	117
  2205  0077                     _RC7	set	119
  2206  0088                     _TMR1IF	set	136
  2207  009D                     _ADCON0	set	157
  2208  009E                     _ADCON1	set	158
  2209  009C                     _ADRESH	set	156
  2210  009B                     _ADRESL	set	155
  2211  0099                     _OSCCON	set	153
  2212  008C                     _TRISA	set	140
  2213  008D                     _TRISB	set	141
  2214  008E                     _TRISC	set	142
  2215  0097                     _WDTCON	set	151
  2216  04E9                     _GO_nDONE	set	1257
  2217  0488                     _TMR1IE	set	1160
  2218  0117                     _FVRCON	set	279
  2219  010C                     _LATA	set	268
  2220  010D                     _LATB	set	269
  2221  010E                     _LATC	set	270
  2222  018C                     _ANSELA	set	396
  2223  018D                     _ANSELB	set	397
  2224  018E                     _ANSELC	set	398
  2225  0192                     _PMADRH	set	402
  2226  0191                     _PMADRL	set	401
  2227  0196                     _PMCON2	set	406
  2228  0194                     _PMDATH	set	404
  2229  0193                     _PMDATL	set	403
  2230  0CAE                     _CFGS	set	3246
  2231  0CAC                     _FREE	set	3244
  2232  0CAD                     _LWLO	set	3245
  2233  0CA8                     _RD	set	3240
  2234  0CA9                     _WR	set	3241
  2235  0CAA                     _WREN	set	3242
  2236  1068                     _WPUB0	set	4200
  2237  1069                     _WPUB1	set	4201
  2238  106A                     _WPUB2	set	4202
  2239  0396                     _IOCBF	set	918
  2240  0395                     _IOCBN	set	917
  2241  0394                     _IOCBP	set	916
  2242  1CB2                     _IOCBF2	set	7346
  2243                           
  2244                           ; #config settings
  2245  0000                     
  2246                           	psect	cinit
  2247  0018                     start_initialization:	
  2248  0018                     __initialization:	
  2249                           
  2250                           ; Clear objects allocated to BITCOMMON
  2251  0018  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2252                           
  2253                           ; Clear objects allocated to COMMON
  2254  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2255  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2256  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2257  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2258  001D  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2259                           
  2260                           ; Clear objects allocated to BANK0
  2261  001E  01EF               	clrf	__pbssBANK0& (0+127)
  2262                           
  2263                           ; Clear objects allocated to BANK1
  2264  001F  30A0               	movlw	low __pbssBANK1
  2265  0020  0084               	movwf	4
  2266  0021  3000               	movlw	high __pbssBANK1
  2267  0022  0085               	movwf	5
  2268  0023  3050               	movlw	80
  2269  0024  319F  27A0  3180   	fcall	clear_ram0
  2270                           
  2271                           ; Clear objects allocated to BANK2
  2272  0027  3020               	movlw	low __pbssBANK2
  2273  0028  0084               	movwf	4
  2274  0029  3001               	movlw	high __pbssBANK2
  2275  002A  0085               	movwf	5
  2276  002B  3045               	movlw	69
  2277  002C  319F  27A0  3180   	fcall	clear_ram0
  2278                           
  2279                           ; Clear objects allocated to BANK3
  2280  002F  30A0               	movlw	low __pbssBANK3
  2281  0030  0084               	movwf	4
  2282  0031  3001               	movlw	high __pbssBANK3
  2283  0032  0085               	movwf	5
  2284  0033  3025               	movlw	37
  2285  0034  319F  27A0  3180   	fcall	clear_ram0
  2286                           
  2287                           ; Initialize objects allocated to BANK3
  2288  0037  30BB               	movlw	low __pidataBANK3
  2289  0038  0084               	movwf	4
  2290  0039  3093               	movlw	(high __pidataBANK3)| (0+128)
  2291  003A  0085               	movwf	5
  2292  003B  30C5               	movlw	low __pdataBANK3
  2293  003C  0086               	movwf	6
  2294  003D  3001               	movlw	high __pdataBANK3
  2295  003E  0087               	movwf	7
  2296  003F  3020               	movlw	32
  2297  0040  319F  279A         	fcall	init_ram
  2298  0042                     end_of_initialization:	
  2299                           ;End of C runtime variable initialization code
  2300                           
  2301  0042                     __end_of__initialization:	
  2302  0042  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2303  0043  0020               	movlb	0
  2304  0044  3196  2EA8         	ljmp	_main	;jump to C main() function
  2305                           
  2306                           	psect	bitbssCOMMON
  2307  03E8                     __pbitbssCOMMON:	
  2308  03E8                     _Receive_OK:	
  2309  03E8                     	ds	1
  2310  03E9                     _Transceive_OK:	
  2311  03E9                     	ds	1
  2312                           
  2313                           	psect	bssCOMMON
  2314  0078                     __pbssCOMMON:	
  2315  0078                     _DelayOff:	
  2316  0078                     	ds	1
  2317  0079                     _DimmerLights:	
  2318  0079                     	ds	1
  2319  007A                     _DimmerLightsIntr:	
  2320  007A                     	ds	1
  2321  007B                     _LED:	
  2322  007B                     	ds	1
  2323  007C                     _SPI0Buffer:	
  2324  007C                     	ds	1
  2325                           
  2326                           	psect	bssBANK0
  2327  006F                     __pbssBANK0:	
  2328  006F                     _Sw:	
  2329  006F                     	ds	1
  2330                           
  2331                           	psect	bssBANK1
  2332  00A0                     __pbssBANK1:	
  2333  00A0                     _myMain:	
  2334  00A0                     	ds	16
  2335  00B0                     _Buz1:	
  2336  00B0                     	ds	12
  2337  00BC                     _RF1:	
  2338  00BC                     	ds	12
  2339  00C8                     _Timer1:	
  2340  00C8                     	ds	3
  2341  00CB                     _RF_Count:	
  2342  00CB                     	ds	2
  2343  00CD                     _WDT:	
  2344  00CD                     	ds	2
  2345  00CF                     _CRC:	
  2346  00CF                     	ds	1
  2347  00D0                     _Dimmer:	
  2348  00D0                     	ds	1
  2349  00D1                     _DimmerLights11:	
  2350  00D1                     	ds	1
  2351  00D2                     _DimmerLights22:	
  2352  00D2                     	ds	1
  2353  00D3                     _DimmerLightsIntrIOC:	
  2354  00D3                     	ds	1
  2355  00D4                     _RFSW:	
  2356  00D4                     	ds	1
  2357  00D5                     _RSSI:	
  2358  00D5                     	ds	1
  2359  00D6                     _Rx_Length:	
  2360  00D6                     	ds	1
  2361  00D7                     _Tx_Length:	
  2362  00D7                     	ds	1
  2363  00D8                     _r_address:	
  2364  00D8                     	ds	1
  2365  00D9                     _r_data:	
  2366  00D9                     	ds	1
  2367  00DA                     _s_data:	
  2368  00DA                     	ds	1
  2369  00DB                     _VarErrLED:	
  2370  00DB                     	ds	4
  2371  00DF                     _VarLED1:	
  2372  00DF                     	ds	4
  2373  00E3                     _VarLED2:	
  2374  00E3                     	ds	4
  2375  00E7                     _Dimmer1:	
  2376  00E7                     	ds	3
  2377  00EA                     _DlySw1:	
  2378  00EA                     	ds	2
  2379  00EC                     _DlySw2:	
  2380  00EC                     	ds	2
  2381  00EE                     _RFSW1:	
  2382  00EE                     	ds	1
  2383  00EF                     _RFSW2:	
  2384  00EF                     	ds	1
  2385                           
  2386                           	psect	bssBANK2
  2387  0120                     __pbssBANK2:	
  2388  0120                     _RF_Data:	
  2389  0120                     	ds	21
  2390  0135                     _DimmerLights1:	
  2391  0135                     	ds	15
  2392  0144                     _DimmerLights2:	
  2393  0144                     	ds	15
  2394  0153                     _Sw1:	
  2395  0153                     	ds	9
  2396  015C                     _Sw2:	
  2397  015C                     	ds	9
  2398                           
  2399                           	psect	bssBANK3
  2400  01A0                     __pbssBANK3:	
  2401  01A0                     _Memory:	
  2402  01A0                     	ds	37
  2403                           
  2404                           	psect	dataBANK3
  2405  01C5                     __pdataBANK3:	
  2406  01C5                     __product:	
  2407  01C5                     	ds	32
  2408                           
  2409                           	psect	clrtext
  2410  1FA0                     clear_ram0:	
  2411                           ;	Called with FSR0 containing the base address, and
  2412                           ;	WREG with the size to clear
  2413                           
  2414  1FA0  0064               	clrwdt	;clear the watchdog before getting into this loop
  2415  1FA1                     clrloop0:	
  2416  1FA1  0180               	clrf	0	;clear RAM location pointed to by FSR
  2417  1FA2  3101               	addfsr 0,1
  2418  1FA3  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2419  1FA4  2FA1               	goto	clrloop0	;have we reached the end yet?
  2420  1FA5  3400               	retlw	0	;all done for this memory range, return
  2421                           
  2422                           	psect	inittext
  2423  1F9A                     init_ram:	
  2424  1F9A  00FE               	movwf	126
  2425  1F9B                     initloop:	
  2426  1F9B  0012               	moviw fsr0++
  2427  1F9C  001E               	movwi fsr1++
  2428  1F9D  0BFE               	decfsz	126,f
  2429  1F9E  2F9B               	goto	initloop
  2430  1F9F  3400               	retlw	0
  2431                           
  2432                           	psect	cstackCOMMON
  2433  0070                     __pcstackCOMMON:	
  2434  0070                     ?_Timeout_Counter:	
  2435  0070                     ?_set_TimeoutCleared:	
  2436                           ; 0 bytes @ 0x0
  2437                           
  2438  0070                     ?_CC2500_WriteByte:	
  2439                           ; 0 bytes @ 0x0
  2440                           
  2441  0070                     ?_CC2500_WriteCommand:	
  2442                           ; 0 bytes @ 0x0
  2443                           
  2444  0070                     ?_CC2500_ReadStatus:	
  2445                           ; 0 bytes @ 0x0
  2446                           
  2447  0070                     ?_CC2500_ReadByte:	
  2448                           ; 0 bytes @ 0x0
  2449                           
  2450  0070                     ?_CC2500_PowerRST:	
  2451                           ; 0 bytes @ 0x0
  2452                           
  2453  0070                     ?_CC2500_InitSetREG:	
  2454                           ; 0 bytes @ 0x0
  2455                           
  2456  0070                     ?_CC2500_InitPATable:	
  2457                           ; 0 bytes @ 0x0
  2458                           
  2459  0070                     ?_CC2500_ClearTXFIFO:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  0070                     ?_CC2500_ClearRXFIFO:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  0070                     ?_CC2500_FrequencyCabr:	
  2466                           ; 0 bytes @ 0x0
  2467                           
  2468  0070                     ?_CC2500_SIDLEMode:	
  2469                           ; 0 bytes @ 0x0
  2470                           
  2471  0070                     ?_DlyOff_Initialization:	
  2472                           ; 0 bytes @ 0x0
  2473                           
  2474  0070                     ?_DlyOff_Main:	
  2475                           ; 0 bytes @ 0x0
  2476                           
  2477  0070                     ?_setTxData:	
  2478                           ; 0 bytes @ 0x0
  2479                           
  2480  0070                     ?_setDimmerLights_Initialization:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0070                     ?_Dimmer_Initialization:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0070                     ?_setMemory_GO:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0070                     ?_setDimmerLights_Main:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0070                     ?_setLED_Initialization:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0070                     ?_setLED_Main:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0070                     ?_Fosc_Set:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0070                     ?_IO_Set:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0070                     ?_TMR1_Set:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0070                     ?_ADC_Set:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0070                     ?_INT_Set:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0070                     ?_IOC_Set:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0070                     ?_WDT_Set:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0070                     ?_IOC_ISR:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0070                     ?_TMR1_ISR:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0070                     ?_INT_ISR:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0070                     ?_setRF_ReceiveGO:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0070                     ??_setRF_ReceiveGO:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0070                     ?_Flash_Memory_Write:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0070                     ?_Flash_Memory_Modify:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0070                     ?_WDT_Clearing:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0070                     ?_setRF_Initialization:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0070                     ?_setRF_Main:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0070                     ?_getRxData:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0070                     ?_setLog_Code:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0070                     ?_setControl_Lights_Table:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0070                     ?_setRFSW_Control:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0070                     ?_setRFSW_AdjControl:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0070                     ?_setRF_DimmerValue:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0070                     ?_setSw_Initialization:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0070                     ?_setSw_Main:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0070                     ?_Sw_DimmerOnFunc:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_Sw_DimmerAdjFunc:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_Sw_DimmerOffFunc:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_myMain_Initialization:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_my_MainTime:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_Buzzer_Initialization:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_Buzzer_Main:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_CC2500_TxData:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_CC2500_RxData:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_CC2500_PowerOnInitial:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_DelayOffPointSelect:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_DelayOff_Initialization:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_DelayOff_Main:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_DimmerIntrIOCPointSelect:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ??_DimmerIntrIOCPointSelect:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_DimmerIntrPointSelect:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ??_DimmerIntrPointSelect:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_setDimmerLights_IntrControl:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_DimmerLightsPointSelect:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_DimmerLights_Initialization:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_DimmerLights_Close:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_DimmerLights_Main:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_setDimmerLights_AdjRF:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_LedPointSelect:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_LED_Initialization:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_LED_Main:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_Mcu_Initialization:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_ISR:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_setDimmerReClock:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_Flash_Memory_Initialization:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_Flash_Memory_Main:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_Flash_Memory_Unlock:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_Flash_Memory_Erasing:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_WDT_Main:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_RF_Initialization:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_RF_Main:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_setRF_Learn:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_setRF_Enable:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_RfSWPointSelect:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_TouchPower:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_SwPointSelect:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_Switch_Initialization:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_Switch_Main:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_setSw_Enable:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_DelayTimejudge:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_getDimmerLights_StatusFlag:	
  2712                           ; 1 bytes @ 0x0
  2713                           
  2714  0070                     ?_getPercentValue:	
  2715                           ; 1 bytes @ 0x0
  2716                           
  2717  0070                     ?_Flash_Memory_Read:	
  2718                           ; 1 bytes @ 0x0
  2719                           
  2720  0070                     ?_setPercentValue:	
  2721                           ; 1 bytes @ 0x0
  2722                           
  2723  0070                     setRF_ReceiveGO@command:	
  2724                           ; 1 bytes @ 0x0
  2725                           
  2726                           
  2727                           ; 1 bytes @ 0x0
  2728  0070                     	ds	1
  2729  0071                     ??_INT_ISR:	
  2730  0071                     DimmerIntrIOCPointSelect@lights:	
  2731                           ; 0 bytes @ 0x1
  2732                           
  2733  0071                     DimmerIntrPointSelect@lights:	
  2734                           ; 1 bytes @ 0x1
  2735                           
  2736                           
  2737                           ; 1 bytes @ 0x1
  2738  0071                     	ds	1
  2739  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2740  0072                     ??_setDimmerLights_IntrControl:	
  2741                           ; 0 bytes @ 0x2
  2742                           
  2743  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2744                           ; 0 bytes @ 0x2
  2745                           
  2746                           
  2747                           ; 1 bytes @ 0x2
  2748  0072                     	ds	1
  2749  0073                     ??_IOC_ISR:	
  2750  0073                     ??_setDimmerReClock:	
  2751                           ; 0 bytes @ 0x3
  2752                           
  2753                           
  2754                           ; 0 bytes @ 0x3
  2755  0073                     	ds	3
  2756  0076                     setDimmerLights_IntrControl@lights:	
  2757                           
  2758                           ; 1 bytes @ 0x6
  2759  0076                     	ds	1
  2760  0077                     ??_TMR1_ISR:	
  2761  0077                     ??_ISR:	
  2762                           ; 0 bytes @ 0x7
  2763                           
  2764                           
  2765                           ; 0 bytes @ 0x7
  2766  0077                     	ds	1
  2767                           
  2768                           	psect	cstackBANK0
  2769  0020                     __pcstackBANK0:	
  2770  0020                     ??_Timeout_Counter:	
  2771  0020                     ??_set_TimeoutCleared:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0020                     ??_CC2500_WriteByte:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0020                     ??_CC2500_ReadByte:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0020                     ?_DelayTime_1us:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0020                     ??_setTxData:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0020                     ??_Dimmer_Initialization:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0020                     ??_getDimmerLights_StatusFlag:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0020                     ??_setMemory_GO:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0020                     ??_Fosc_Set:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0020                     ??_IO_Set:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0020                     ??_TMR1_Set:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0020                     ??_ADC_Set:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0020                     ??_INT_Set:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0020                     ??_IOC_Set:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0020                     ??_WDT_Set:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0020                     ??_Flash_Memory_Read:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0020                     ??_Flash_Memory_Write:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0020                     ??_WDT_Clearing:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0020                     ??_setRF_Initialization:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0020                     ??_myMain_Initialization:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0020                     ??_Buzzer_Initialization:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0020                     ??_Buzzer_Main:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0020                     ??_DelayOffPointSelect:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0020                     ??_DimmerLightsPointSelect:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0020                     ??_LedPointSelect:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0020                     ??_Flash_Memory_Unlock:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0020                     ??_Flash_Memory_Erasing:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0020                     ??_WDT_Main:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0020                     ??_setRF_Learn:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0020                     ??_setRF_Enable:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0020                     ??_RfSWPointSelect:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0020                     ??_TouchPower:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0020                     ??_SwPointSelect:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0020                     ?___bmul:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0020                     ?_getBuz_GO:	
  2874                           ; 1 bytes @ 0x0
  2875                           
  2876  0020                     ?___awdiv:	
  2877                           ; 2 bytes @ 0x0
  2878                           
  2879  0020                     ?___ftpack:	
  2880                           ; 2 bytes @ 0x0
  2881                           
  2882  0020                     setRF_Learn@command:	
  2883                           ; 3 bytes @ 0x0
  2884                           
  2885  0020                     setRF_Enable@command:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0020                     ___bmul@multiplicand:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0020                     DelayTime_1us@count:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0020                     ___awdiv@divisor:	
  2895                           ; 2 bytes @ 0x0
  2896                           
  2897  0020                     ___ftpack@arg:	
  2898                           ; 2 bytes @ 0x0
  2899                           
  2900                           
  2901                           ; 3 bytes @ 0x0
  2902  0020                     	ds	1
  2903  0021                     ??_Mcu_Initialization:	
  2904  0021                     ??_RF_Initialization:	
  2905                           ; 0 bytes @ 0x1
  2906                           
  2907  0021                     ??___bmul:	
  2908                           ; 0 bytes @ 0x1
  2909                           
  2910  0021                     CC2500_WriteByte@loop_a:	
  2911                           ; 0 bytes @ 0x1
  2912                           
  2913  0021                     CC2500_ReadByte@loop_b:	
  2914                           ; 1 bytes @ 0x1
  2915                           
  2916  0021                     DelayOffPointSelect@sw:	
  2917                           ; 1 bytes @ 0x1
  2918                           
  2919  0021                     DimmerLightsPointSelect@lights:	
  2920                           ; 1 bytes @ 0x1
  2921                           
  2922  0021                     getDimmerLights_StatusFlag@Status:	
  2923                           ; 1 bytes @ 0x1
  2924                           
  2925  0021                     LedPointSelect@led:	
  2926                           ; 1 bytes @ 0x1
  2927                           
  2928  0021                     Flash_Memory_Read@i:	
  2929                           ; 1 bytes @ 0x1
  2930                           
  2931  0021                     Flash_Memory_Write@i:	
  2932                           ; 1 bytes @ 0x1
  2933                           
  2934  0021                     RfSWPointSelect@sw:	
  2935                           ; 1 bytes @ 0x1
  2936                           
  2937  0021                     SwPointSelect@sw:	
  2938                           ; 1 bytes @ 0x1
  2939                           
  2940                           
  2941                           ; 1 bytes @ 0x1
  2942  0021                     	ds	1
  2943  0022                     ??_CC2500_WriteCommand:	
  2944  0022                     ??_CC2500_ReadStatus:	
  2945                           ; 0 bytes @ 0x2
  2946                           
  2947  0022                     ??_DelayTime_1us:	
  2948                           ; 0 bytes @ 0x2
  2949                           
  2950  0022                     ?_CC2500_WriteREG:	
  2951                           ; 0 bytes @ 0x2
  2952                           
  2953  0022                     ??_DlyOff_Initialization:	
  2954                           ; 0 bytes @ 0x2
  2955                           
  2956  0022                     ?_setSw_Status:	
  2957                           ; 0 bytes @ 0x2
  2958                           
  2959  0022                     ?_setRFSW_Status:	
  2960                           ; 0 bytes @ 0x2
  2961                           
  2962  0022                     ?_setDimmerLights_Trigger:	
  2963                           ; 0 bytes @ 0x2
  2964                           
  2965  0022                     ?_setDimmerLights_Switch:	
  2966                           ; 0 bytes @ 0x2
  2967                           
  2968  0022                     ??_setDimmerLights_Initialization:	
  2969                           ; 0 bytes @ 0x2
  2970                           
  2971  0022                     ?_setLED:	
  2972                           ; 0 bytes @ 0x2
  2973                           
  2974  0022                     ??_setLED_Main:	
  2975                           ; 0 bytes @ 0x2
  2976                           
  2977  0022                     ??_getBuz_GO:	
  2978                           ; 0 bytes @ 0x2
  2979                           
  2980  0022                     ?_setDimmerLights_AdjGo:	
  2981                           ; 0 bytes @ 0x2
  2982                           
  2983  0022                     ?_setDimmerLights_TriggerAdj:	
  2984                           ; 0 bytes @ 0x2
  2985                           
  2986  0022                     ??_setSw_Enable:	
  2987                           ; 0 bytes @ 0x2
  2988                           
  2989  0022                     CC2500_WriteREG@value:	
  2990                           ; 0 bytes @ 0x2
  2991                           
  2992  0022                     DlyOff_Initialization@sw:	
  2993                           ; 1 bytes @ 0x2
  2994                           
  2995  0022                     _getDimmerLights_StatusFlag$2225:	
  2996                           ; 1 bytes @ 0x2
  2997                           
  2998  0022                     setDimmerLights_Switch@command:	
  2999                           ; 1 bytes @ 0x2
  3000                           
  3001  0022                     setDimmerLights_AdjGo@command:	
  3002                           ; 1 bytes @ 0x2
  3003                           
  3004  0022                     setDimmerLights_Trigger@command:	
  3005                           ; 1 bytes @ 0x2
  3006                           
  3007  0022                     setDimmerLights_TriggerAdj@command:	
  3008                           ; 1 bytes @ 0x2
  3009                           
  3010  0022                     setLED@command:	
  3011                           ; 1 bytes @ 0x2
  3012                           
  3013  0022                     Flash_Memory_Read@address:	
  3014                           ; 1 bytes @ 0x2
  3015                           
  3016  0022                     setMemory_GO@command:	
  3017                           ; 1 bytes @ 0x2
  3018                           
  3019  0022                     setRFSW_Status@command:	
  3020                           ; 1 bytes @ 0x2
  3021                           
  3022  0022                     setSw_Enable@command:	
  3023                           ; 1 bytes @ 0x2
  3024                           
  3025  0022                     setSw_Status@command:	
  3026                           ; 1 bytes @ 0x2
  3027                           
  3028  0022                     ___bmul@product:	
  3029                           ; 1 bytes @ 0x2
  3030                           
  3031  0022                     DelayTime_1us@i:	
  3032                           ; 1 bytes @ 0x2
  3033                           
  3034  0022                     ___awdiv@dividend:	
  3035                           ; 2 bytes @ 0x2
  3036                           
  3037                           
  3038                           ; 2 bytes @ 0x2
  3039  0022                     	ds	1
  3040  0023                     ??_CC2500_WriteREG:	
  3041  0023                     ??_setSw_Status:	
  3042                           ; 0 bytes @ 0x3
  3043                           
  3044  0023                     ??_setRFSW_Status:	
  3045                           ; 0 bytes @ 0x3
  3046                           
  3047  0023                     ??_setDimmerLights_Trigger:	
  3048                           ; 0 bytes @ 0x3
  3049                           
  3050  0023                     ??_setDimmerLights_Switch:	
  3051                           ; 0 bytes @ 0x3
  3052                           
  3053  0023                     ??_setLED:	
  3054                           ; 0 bytes @ 0x3
  3055                           
  3056  0023                     ??_DelayOff_Initialization:	
  3057                           ; 0 bytes @ 0x3
  3058                           
  3059  0023                     ??_DimmerLights_Close:	
  3060                           ; 0 bytes @ 0x3
  3061                           
  3062  0023                     ??_setDimmerLights_AdjGo:	
  3063                           ; 0 bytes @ 0x3
  3064                           
  3065  0023                     ??_setDimmerLights_TriggerAdj:	
  3066                           ; 0 bytes @ 0x3
  3067                           
  3068  0023                     CC2500_WriteCommand@command:	
  3069                           ; 0 bytes @ 0x3
  3070                           
  3071  0023                     CC2500_ReadStatus@status_addr:	
  3072                           ; 1 bytes @ 0x3
  3073                           
  3074  0023                     setDimmerLights_Initialization@lights:	
  3075                           ; 1 bytes @ 0x3
  3076                           
  3077  0023                     setDimmerLights_Switch@lights:	
  3078                           ; 1 bytes @ 0x3
  3079                           
  3080  0023                     setDimmerLights_AdjGo@lights:	
  3081                           ; 1 bytes @ 0x3
  3082                           
  3083  0023                     setDimmerLights_Trigger@lights:	
  3084                           ; 1 bytes @ 0x3
  3085                           
  3086  0023                     setDimmerLights_TriggerAdj@lights:	
  3087                           ; 1 bytes @ 0x3
  3088                           
  3089  0023                     setLED@led:	
  3090                           ; 1 bytes @ 0x3
  3091                           
  3092  0023                     Flash_Memory_Read@ret:	
  3093                           ; 1 bytes @ 0x3
  3094                           
  3095  0023                     setRFSW_Status@sw:	
  3096                           ; 1 bytes @ 0x3
  3097                           
  3098  0023                     setSw_Status@sw:	
  3099                           ; 1 bytes @ 0x3
  3100                           
  3101  0023                     ___bmul@multiplier:	
  3102                           ; 1 bytes @ 0x3
  3103                           
  3104  0023                     ___ftpack@exp:	
  3105                           ; 1 bytes @ 0x3
  3106                           
  3107                           
  3108                           ; 1 bytes @ 0x3
  3109  0023                     	ds	1
  3110  0024                     ??_CC2500_ClearTXFIFO:	
  3111  0024                     ??_CC2500_ClearRXFIFO:	
  3112                           ; 0 bytes @ 0x4
  3113                           
  3114  0024                     ??_CC2500_SIDLEMode:	
  3115                           ; 0 bytes @ 0x4
  3116                           
  3117  0024                     ??_DelayTimejudge:	
  3118                           ; 0 bytes @ 0x4
  3119                           
  3120  0024                     ?_setDimmerLights:	
  3121                           ; 0 bytes @ 0x4
  3122                           
  3123  0024                     ??_setLED_Initialization:	
  3124                           ; 0 bytes @ 0x4
  3125                           
  3126  0024                     ??_Flash_Memory_Modify:	
  3127                           ; 0 bytes @ 0x4
  3128                           
  3129  0024                     ??_setSw_Initialization:	
  3130                           ; 0 bytes @ 0x4
  3131                           
  3132  0024                     ??_Sw_DimmerAdjFunc:	
  3133                           ; 0 bytes @ 0x4
  3134                           
  3135  0024                     ??_CC2500_TxData:	
  3136                           ; 0 bytes @ 0x4
  3137                           
  3138  0024                     ??_CC2500_RxData:	
  3139                           ; 0 bytes @ 0x4
  3140                           
  3141  0024                     ??_DimmerLights_Initialization:	
  3142                           ; 0 bytes @ 0x4
  3143                           
  3144  0024                     ??___awdiv:	
  3145                           ; 0 bytes @ 0x4
  3146                           
  3147  0024                     CC2500_WriteREG@w_addr:	
  3148                           ; 0 bytes @ 0x4
  3149                           
  3150  0024                     setDimmerLights@status:	
  3151                           ; 1 bytes @ 0x4
  3152                           
  3153  0024                     setLED_Initialization@led:	
  3154                           ; 1 bytes @ 0x4
  3155                           
  3156  0024                     setLED_Main@led:	
  3157                           ; 1 bytes @ 0x4
  3158                           
  3159  0024                     setSw_Initialization@sw:	
  3160                           ; 1 bytes @ 0x4
  3161                           
  3162  0024                     Sw_DimmerAdjFunc@Idle:	
  3163                           ; 1 bytes @ 0x4
  3164                           
  3165  0024                     ___ftpack@sign:	
  3166                           ; 1 bytes @ 0x4
  3167                           
  3168  0024                     getBuz_GO@i:	
  3169                           ; 1 bytes @ 0x4
  3170                           
  3171  0024                     DelayTime_1us@j:	
  3172                           ; 2 bytes @ 0x4
  3173                           
  3174                           
  3175                           ; 2 bytes @ 0x4
  3176  0024                     	ds	1
  3177  0025                     ??_CC2500_InitSetREG:	
  3178  0025                     ??_CC2500_InitPATable:	
  3179                           ; 0 bytes @ 0x5
  3180                           
  3181  0025                     ??_setDimmerLights:	
  3182                           ; 0 bytes @ 0x5
  3183                           
  3184  0025                     ??___ftpack:	
  3185                           ; 0 bytes @ 0x5
  3186                           
  3187  0025                     ??_LED_Initialization:	
  3188                           ; 0 bytes @ 0x5
  3189                           
  3190  0025                     ??_LED_Main:	
  3191                           ; 0 bytes @ 0x5
  3192                           
  3193  0025                     ??_Switch_Initialization:	
  3194                           ; 0 bytes @ 0x5
  3195                           
  3196  0025                     CC2500_TxData@loop_e:	
  3197                           ; 0 bytes @ 0x5
  3198                           
  3199  0025                     CC2500_RxData@loop_f:	
  3200                           ; 1 bytes @ 0x5
  3201                           
  3202  0025                     Flash_Memory_Modify@i:	
  3203                           ; 1 bytes @ 0x5
  3204                           
  3205  0025                     Sw_DimmerAdjFunc@sw:	
  3206                           ; 1 bytes @ 0x5
  3207                           
  3208  0025                     ___awdiv@counter:	
  3209                           ; 1 bytes @ 0x5
  3210                           
  3211                           
  3212                           ; 1 bytes @ 0x5
  3213  0025                     	ds	1
  3214  0026                     ??_CC2500_PowerRST:	
  3215  0026                     ??_CC2500_FrequencyCabr:	
  3216                           ; 0 bytes @ 0x6
  3217                           
  3218  0026                     ??_Flash_Memory_Main:	
  3219                           ; 0 bytes @ 0x6
  3220                           
  3221  0026                     CC2500_InitSetREG@temp1:	
  3222                           ; 0 bytes @ 0x6
  3223                           
  3224  0026                     CC2500_InitPATable@temp:	
  3225                           ; 1 bytes @ 0x6
  3226                           
  3227  0026                     DelayTimejudge@i:	
  3228                           ; 1 bytes @ 0x6
  3229                           
  3230  0026                     setDimmerLights@lights:	
  3231                           ; 1 bytes @ 0x6
  3232                           
  3233  0026                     ___awdiv@sign:	
  3234                           ; 1 bytes @ 0x6
  3235                           
  3236                           
  3237                           ; 1 bytes @ 0x6
  3238  0026                     	ds	1
  3239  0027                     CC2500_InitSetREG@temp2:	
  3240  0027                     CC2500_InitPATable@loop_d:	
  3241                           ; 1 bytes @ 0x7
  3242                           
  3243  0027                     DelayTimejudge@j:	
  3244                           ; 1 bytes @ 0x7
  3245                           
  3246  0027                     ___awdiv@quotient:	
  3247                           ; 1 bytes @ 0x7
  3248                           
  3249                           
  3250                           ; 2 bytes @ 0x7
  3251  0027                     	ds	1
  3252  0028                     ?___awtoft:	
  3253  0028                     CC2500_InitSetREG@loop_c:	
  3254                           ; 3 bytes @ 0x8
  3255                           
  3256  0028                     DelayTimejudge@k:	
  3257                           ; 1 bytes @ 0x8
  3258                           
  3259  0028                     ___awtoft@c:	
  3260                           ; 1 bytes @ 0x8
  3261                           
  3262                           
  3263                           ; 2 bytes @ 0x8
  3264  0028                     	ds	1
  3265  0029                     ?_setBuz:	
  3266  0029                     ??_CC2500_PowerOnInitial:	
  3267                           ; 0 bytes @ 0x9
  3268                           
  3269  0029                     DelayTimejudge@value:	
  3270                           ; 0 bytes @ 0x9
  3271                           
  3272  0029                     setBuz@time:	
  3273                           ; 1 bytes @ 0x9
  3274                           
  3275                           
  3276                           ; 2 bytes @ 0x9
  3277  0029                     	ds	1
  3278  002A                     ?_setDelayOff_GO:	
  3279  002A                     setDelayOff_GO@command:	
  3280                           ; 0 bytes @ 0xA
  3281                           
  3282                           
  3283                           ; 1 bytes @ 0xA
  3284  002A                     	ds	1
  3285  002B                     ??_setBuz:	
  3286  002B                     ??___awtoft:	
  3287                           ; 0 bytes @ 0xB
  3288                           
  3289  002B                     setDelayOff_GO@value:	
  3290                           ; 0 bytes @ 0xB
  3291                           
  3292                           
  3293                           ; 1 bytes @ 0xB
  3294  002B                     	ds	1
  3295  002C                     ??_setDelayOff_GO:	
  3296  002C                     setBuz@count:	
  3297                           ; 0 bytes @ 0xC
  3298                           
  3299                           
  3300                           ; 1 bytes @ 0xC
  3301  002C                     	ds	1
  3302  002D                     ??_setLog_Code:	
  3303  002D                     ??_my_MainTime:	
  3304                           ; 0 bytes @ 0xD
  3305                           
  3306  002D                     ___awtoft@sign:	
  3307                           ; 0 bytes @ 0xD
  3308                           
  3309                           
  3310                           ; 1 bytes @ 0xD
  3311  002D                     	ds	1
  3312  002E                     ?___ftdiv:	
  3313  002E                     ?___ftmul:	
  3314                           ; 3 bytes @ 0xE
  3315                           
  3316  002E                     setDelayOff_GO@sw:	
  3317                           ; 3 bytes @ 0xE
  3318                           
  3319  002E                     ___ftdiv@f2:	
  3320                           ; 1 bytes @ 0xE
  3321                           
  3322  002E                     ___ftmul@f1:	
  3323                           ; 3 bytes @ 0xE
  3324                           
  3325                           
  3326                           ; 3 bytes @ 0xE
  3327  002E                     	ds	3
  3328  0031                     ___ftdiv@f1:	
  3329  0031                     ___ftmul@f2:	
  3330                           ; 3 bytes @ 0x11
  3331                           
  3332                           
  3333                           ; 3 bytes @ 0x11
  3334  0031                     	ds	3
  3335  0034                     ??___ftdiv:	
  3336  0034                     ??___ftmul:	
  3337                           ; 0 bytes @ 0x14
  3338                           
  3339                           
  3340                           ; 0 bytes @ 0x14
  3341  0034                     	ds	4
  3342  0038                     ___ftdiv@cntr:	
  3343  0038                     ___ftmul@exp:	
  3344                           ; 1 bytes @ 0x18
  3345                           
  3346                           
  3347                           ; 1 bytes @ 0x18
  3348  0038                     	ds	1
  3349  0039                     ___ftdiv@f3:	
  3350  0039                     ___ftmul@f3_as_product:	
  3351                           ; 3 bytes @ 0x19
  3352                           
  3353                           
  3354                           ; 3 bytes @ 0x19
  3355  0039                     	ds	3
  3356  003C                     ___ftdiv@exp:	
  3357  003C                     ___ftmul@cntr:	
  3358                           ; 1 bytes @ 0x1C
  3359                           
  3360                           
  3361                           ; 1 bytes @ 0x1C
  3362  003C                     	ds	1
  3363  003D                     ___ftdiv@sign:	
  3364  003D                     ___ftmul@sign:	
  3365                           ; 1 bytes @ 0x1D
  3366                           
  3367                           
  3368                           ; 1 bytes @ 0x1D
  3369  003D                     	ds	1
  3370  003E                     ?___ftadd:	
  3371  003E                     ___ftadd@f1:	
  3372                           ; 3 bytes @ 0x1E
  3373                           
  3374                           
  3375                           ; 3 bytes @ 0x1E
  3376  003E                     	ds	3
  3377  0041                     ___ftadd@f2:	
  3378                           
  3379                           ; 3 bytes @ 0x21
  3380  0041                     	ds	3
  3381  0044                     ??___ftadd:	
  3382                           
  3383                           ; 0 bytes @ 0x24
  3384  0044                     	ds	4
  3385  0048                     ___ftadd@sign:	
  3386                           
  3387                           ; 1 bytes @ 0x28
  3388  0048                     	ds	1
  3389  0049                     ___ftadd@exp2:	
  3390                           
  3391                           ; 1 bytes @ 0x29
  3392  0049                     	ds	1
  3393  004A                     ___ftadd@exp1:	
  3394                           
  3395                           ; 1 bytes @ 0x2A
  3396  004A                     	ds	1
  3397  004B                     ?___fttol:	
  3398  004B                     ___fttol@f1:	
  3399                           ; 4 bytes @ 0x2B
  3400                           
  3401                           
  3402                           ; 3 bytes @ 0x2B
  3403  004B                     	ds	4
  3404  004F                     ??___fttol:	
  3405                           
  3406                           ; 0 bytes @ 0x2F
  3407  004F                     	ds	4
  3408  0053                     ___fttol@sign1:	
  3409                           
  3410                           ; 1 bytes @ 0x33
  3411  0053                     	ds	1
  3412  0054                     ___fttol@lval:	
  3413                           
  3414                           ; 4 bytes @ 0x34
  3415  0054                     	ds	4
  3416  0058                     ___fttol@exp1:	
  3417                           
  3418                           ; 1 bytes @ 0x38
  3419  0058                     	ds	1
  3420  0059                     ??_getPercentValue:	
  3421  0059                     ??_setPercentValue:	
  3422                           ; 0 bytes @ 0x39
  3423                           
  3424  0059                     setPercentValue@value:	
  3425                           ; 0 bytes @ 0x39
  3426                           
  3427                           
  3428                           ; 1 bytes @ 0x39
  3429  0059                     	ds	1
  3430  005A                     setPercentValue@i:	
  3431                           
  3432                           ; 3 bytes @ 0x3A
  3433  005A                     	ds	1
  3434  005B                     getPercentValue@value:	
  3435                           
  3436                           ; 1 bytes @ 0x3B
  3437  005B                     	ds	1
  3438  005C                     getPercentValue@i:	
  3439                           
  3440                           ; 3 bytes @ 0x3C
  3441  005C                     	ds	1
  3442  005D                     ?_setRF_DimmerLights:	
  3443  005D                     ??_Flash_Memory_Initialization:	
  3444                           ; 0 bytes @ 0x3D
  3445                           
  3446  005D                     setRF_DimmerLights@on:	
  3447                           ; 0 bytes @ 0x3D
  3448                           
  3449                           
  3450                           ; 1 bytes @ 0x3D
  3451  005D                     	ds	1
  3452  005E                     ??_setRF_DimmerLights:	
  3453  005E                     Flash_Memory_Initialization@i:	
  3454                           ; 0 bytes @ 0x3E
  3455                           
  3456                           
  3457                           ; 1 bytes @ 0x3E
  3458  005E                     	ds	1
  3459  005F                     ??_setDimmerLights_AdjRF:	
  3460                           
  3461                           ; 0 bytes @ 0x3F
  3462  005F                     	ds	1
  3463  0060                     setDimmerLights_AdjRF@lights:	
  3464  0060                     setRF_DimmerLights@status:	
  3465                           ; 1 bytes @ 0x40
  3466                           
  3467                           
  3468                           ; 1 bytes @ 0x40
  3469  0060                     	ds	1
  3470  0061                     ??_setRF_DimmerValue:	
  3471  0061                     setRF_DimmerLights@lights:	
  3472                           ; 0 bytes @ 0x41
  3473                           
  3474                           
  3475                           ; 1 bytes @ 0x41
  3476  0061                     	ds	1
  3477  0062                     ??_DlyOff_Main:	
  3478  0062                     ?_setDimmerLights_Adj:	
  3479                           ; 0 bytes @ 0x42
  3480                           
  3481  0062                     ??_setRFSW_Control:	
  3482                           ; 0 bytes @ 0x42
  3483                           
  3484  0062                     ??_Sw_DimmerOnFunc:	
  3485                           ; 0 bytes @ 0x42
  3486                           
  3487  0062                     ??_Sw_DimmerOffFunc:	
  3488                           ; 0 bytes @ 0x42
  3489                           
  3490  0062                     setDimmerLights_Adj@status:	
  3491                           ; 0 bytes @ 0x42
  3492                           
  3493  0062                     Sw_DimmerOnFunc@Idle:	
  3494                           ; 1 bytes @ 0x42
  3495                           
  3496                           
  3497                           ; 1 bytes @ 0x42
  3498  0062                     	ds	1
  3499  0063                     ??_setDimmerLights_Adj:	
  3500  0063                     setRFSW_Control@sw:	
  3501                           ; 0 bytes @ 0x43
  3502                           
  3503  0063                     setRF_DimmerValue@lights:	
  3504                           ; 1 bytes @ 0x43
  3505                           
  3506  0063                     Sw_DimmerOnFunc@sw:	
  3507                           ; 1 bytes @ 0x43
  3508                           
  3509                           
  3510                           ; 1 bytes @ 0x43
  3511  0063                     	ds	1
  3512  0064                     ??_setRFSW_AdjControl:	
  3513  0064                     DlyOff_Main@sw:	
  3514                           ; 0 bytes @ 0x44
  3515                           
  3516  0064                     setDimmerLights_Adj@lights:	
  3517                           ; 1 bytes @ 0x44
  3518                           
  3519  0064                     Sw_DimmerOffFunc@sw:	
  3520                           ; 1 bytes @ 0x44
  3521                           
  3522                           
  3523                           ; 1 bytes @ 0x44
  3524  0064                     	ds	1
  3525  0065                     ??_setDimmerLights_Main:	
  3526  0065                     ??_setSw_Main:	
  3527                           ; 0 bytes @ 0x45
  3528                           
  3529  0065                     ??_DelayOff_Main:	
  3530                           ; 0 bytes @ 0x45
  3531                           
  3532  0065                     setDimmerLights_Main@clear:	
  3533                           ; 0 bytes @ 0x45
  3534                           
  3535                           
  3536                           ; 1 bytes @ 0x45
  3537  0065                     	ds	1
  3538  0066                     setDimmerLights_Main@lights:	
  3539  0066                     setRFSW_AdjControl@sw:	
  3540                           ; 1 bytes @ 0x46
  3541                           
  3542                           
  3543                           ; 1 bytes @ 0x46
  3544  0066                     	ds	1
  3545  0067                     ??_setRF_Main:	
  3546  0067                     ??_getRxData:	
  3547                           ; 0 bytes @ 0x47
  3548                           
  3549  0067                     ??_setControl_Lights_Table:	
  3550                           ; 0 bytes @ 0x47
  3551                           
  3552  0067                     ??_DimmerLights_Main:	
  3553                           ; 0 bytes @ 0x47
  3554                           
  3555  0067                     _setSw_Main$5380:	
  3556                           ; 0 bytes @ 0x47
  3557                           
  3558                           
  3559                           ; 1 bytes @ 0x47
  3560  0067                     	ds	1
  3561  0068                     _setRF_Main$4463:	
  3562  0068                     _setSw_Main$5381:	
  3563                           ; 1 bytes @ 0x48
  3564                           
  3565                           
  3566                           ; 1 bytes @ 0x48
  3567  0068                     	ds	1
  3568  0069                     ??_RF_Main:	
  3569  0069                     setSw_Main@sw:	
  3570                           ; 0 bytes @ 0x49
  3571                           
  3572                           
  3573                           ; 1 bytes @ 0x49
  3574  0069                     	ds	1
  3575  006A                     ??_Switch_Main:	
  3576  006A                     ?_main:	
  3577                           ; 0 bytes @ 0x4A
  3578                           
  3579  006A                     main@argc:	
  3580                           ; 2 bytes @ 0x4A
  3581                           
  3582                           
  3583                           ; 2 bytes @ 0x4A
  3584  006A                     	ds	2
  3585  006C                     main@argv:	
  3586                           
  3587                           ; 2 bytes @ 0x4C
  3588  006C                     	ds	2
  3589  006E                     ??_main:	
  3590                           
  3591                           	psect	maintext
  3592  16A8                     __pmaintext:	
  3593                           ; 0 bytes @ 0x4E
  3594 ;;
  3595 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3596 ;;
  3597 ;; *************** function _main *****************
  3598 ;; Defined at:
  3599 ;;		line 7 in file "../src/main_B1.c"
  3600 ;; Parameters:    Size  Location     Type
  3601 ;;  argc            2   74[BANK0 ] int 
  3602 ;;  argv            2   76[BANK0 ] PTR PTR unsigned char 
  3603 ;; Auto vars:     Size  Location     Type
  3604 ;;		None
  3605 ;; Return value:  Size  Location     Type
  3606 ;;                  2   74[BANK0 ] int 
  3607 ;; Registers used:
  3608 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3609 ;; Tracked objects:
  3610 ;;		On entry : 17F/0
  3611 ;;		On exit  : 0/0
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3614 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3617 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3618 ;;Total ram usage:        4 bytes
  3619 ;; Hardware stack levels required when called:   15
  3620 ;; This function calls:
  3621 ;;		_Buzzer_Initialization
  3622 ;;		_Buzzer_Main
  3623 ;;		_CC2500_PowerOnInitial
  3624 ;;		_DelayOff_Initialization
  3625 ;;		_DelayOff_Main
  3626 ;;		_DimmerLights_Initialization
  3627 ;;		_DimmerLights_Main
  3628 ;;		_Flash_Memory_Initialization
  3629 ;;		_Flash_Memory_Main
  3630 ;;		_LED_Initialization
  3631 ;;		_LED_Main
  3632 ;;		_Mcu_Initialization
  3633 ;;		_RF_Initialization
  3634 ;;		_RF_Main
  3635 ;;		_Switch_Initialization
  3636 ;;		_Switch_Main
  3637 ;;		_WDT_Main
  3638 ;;		_myMain_Initialization
  3639 ;;		_my_MainTime
  3640 ;; This function is called by:
  3641 ;;		Startup code after reset
  3642 ;; This function uses a non-reentrant model
  3643 ;;
  3644                           
  3645                           
  3646                           ;psect for function _main
  3647  16A8                     _main:	
  3648                           
  3649                           ;main_B1.c: 8: myMain_Initialization();
  3650                           
  3651                           ;incstack = 0
  3652                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3653  16A8  3191  2131  3196   	fcall	_myMain_Initialization
  3654                           
  3655                           ;main_B1.c: 9: Mcu_Initialization();
  3656  16AB  3192  2289  3196   	fcall	_Mcu_Initialization
  3657                           
  3658                           ;main_B1.c: 10: Flash_Memory_Initialization();
  3659  16AE  3184  24C7  3196   	fcall	_Flash_Memory_Initialization
  3660                           
  3661                           ;main_B1.c: 11: LED_Initialization();
  3662  16B1  3190  20AB  3196   	fcall	_LED_Initialization
  3663                           
  3664                           ;main_B1.c: 12: Buzzer_Initialization();
  3665  16B4  319F  2776  3196   	fcall	_Buzzer_Initialization
  3666                           
  3667                           ;main_B1.c: 14: ;;
  3668                           ;main_B1.c: 15: ;;
  3669                           ;main_B1.c: 16: ;;
  3670                           ;main_B1.c: 17: ;;
  3671                           ;main_B1.c: 18: DelayOff_Initialization();
  3672  16B7  319F  27BC  3196   	fcall	_DelayOff_Initialization
  3673                           
  3674                           ;main_B1.c: 20: DimmerLights_Initialization();
  3675  16BA  3192  22CA  3196   	fcall	_DimmerLights_Initialization
  3676                           
  3677                           ;main_B1.c: 21: ;;
  3678                           ;main_B1.c: 22: ;;
  3679                           ;main_B1.c: 23: ;;
  3680                           ;main_B1.c: 24: Switch_Initialization();
  3681  16BD  3190  20E9  3196   	fcall	_Switch_Initialization
  3682                           
  3683                           ;main_B1.c: 25: RF_Initialization();
  3684  16C0  319F  2779  3196   	fcall	_RF_Initialization
  3685                           
  3686                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  3687  16C3  3192  2274  3196   	fcall	_CC2500_PowerOnInitial
  3688  16C6                     l2590:	
  3689                           ;main_B1.c: 27: ;;
  3690                           ;main_B1.c: 29: while (1) {
  3691                           
  3692                           
  3693                           ;main_B1.c: 56: }
  3694                           ;main_B1.c: 92: if (Timer1.Timeout == 1) {
  3695  16C6  0021               	movlb	1	; select bank1
  3696  16C7  1C48               	btfss	_Timer1^(0+128),0
  3697  16C8  2EC6               	goto	l2590
  3698                           
  3699                           ;main_B1.c: 93: Timer1.Timeout = 0;
  3700  16C9  1048               	bcf	_Timer1^(0+128),0
  3701                           
  3702                           ;main_B1.c: 94: my_MainTime();
  3703  16CA  3187  27A8  3196   	fcall	_my_MainTime
  3704                           
  3705                           ;main_B1.c: 95: WDT_Main();
  3706  16CD  3191  21D6  3196   	fcall	_WDT_Main
  3707                           
  3708                           ;main_B1.c: 96: ;;
  3709                           ;main_B1.c: 97: ;;
  3710                           ;main_B1.c: 98: if (myMain.PowerON) {
  3711  16D0  0021               	movlb	1	; select bank1
  3712  16D1  1C20               	btfss	_myMain^(0+128),0
  3713  16D2  2EC6               	goto	l2590
  3714                           
  3715                           ;main_B1.c: 99: Flash_Memory_Main();
  3716  16D3  3193  239C  3196   	fcall	_Flash_Memory_Main
  3717                           
  3718                           ;main_B1.c: 101: LED_Main();
  3719  16D6  3190  20B7  3196   	fcall	_LED_Main
  3720                           
  3721                           ;main_B1.c: 102: Buzzer_Main();
  3722  16D9  3197  27B6  3196   	fcall	_Buzzer_Main
  3723                           
  3724                           ;main_B1.c: 104: ;;
  3725                           ;main_B1.c: 105: ;;
  3726                           ;main_B1.c: 106: ;;
  3727                           ;main_B1.c: 107: ;;
  3728                           ;main_B1.c: 109: ;;
  3729                           ;main_B1.c: 110: DimmerLights_Main();
  3730  16DC  3190  2072  3196   	fcall	_DimmerLights_Main
  3731                           
  3732                           ;main_B1.c: 111: Switch_Main();
  3733  16DF  319F  27DC  3196   	fcall	_Switch_Main
  3734                           
  3735                           ;main_B1.c: 112: ;;
  3736                           ;main_B1.c: 113: ;;
  3737                           ;main_B1.c: 115: RF_Main();
  3738  16E2  319F  277C  3196   	fcall	_RF_Main
  3739                           
  3740                           ;main_B1.c: 116: DelayOff_Main();
  3741  16E5  319F  27C4  3196   	fcall	_DelayOff_Main
  3742                           
  3743                           ;main_B1.c: 117: ;;
  3744  16E8  2EC6               	goto	l2590
  3745  16E9                     __end_of_main:	
  3746                           ;main_B1.c: 125: }
  3747                           ;main_B1.c: 126: }
  3748                           ;main_B1.c: 160: }
  3749                           ;main_B1.c: 161: return (0);
  3750                           ;	Return value of _main is never used
  3751                           
  3752                           
  3753                           	psect	text1
  3754  07A8                     __ptext1:	
  3755 ;; *************** function _my_MainTime *****************
  3756 ;; Defined at:
  3757 ;;		line 180 in file "../src/main_B1.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;		None
  3760 ;; Auto vars:     Size  Location     Type
  3761 ;;		None
  3762 ;; Return value:  Size  Location     Type
  3763 ;;		None               void
  3764 ;; Registers used:
  3765 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3766 ;; Tracked objects:
  3767 ;;		On entry : 0/0
  3768 ;;		On exit  : 0/0
  3769 ;;		Unchanged: 0/0
  3770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3775 ;;Total ram usage:        0 bytes
  3776 ;; Hardware stack levels used:    1
  3777 ;; Hardware stack levels required when called:    7
  3778 ;; This function calls:
  3779 ;;		_setBuz
  3780 ;;		_setRF_Enable
  3781 ;;		_setSw_Enable
  3782 ;; This function is called by:
  3783 ;;		_main
  3784 ;; This function uses a non-reentrant model
  3785 ;;
  3786                           
  3787                           
  3788                           ;psect for function _my_MainTime
  3789  07A8                     _my_MainTime:	
  3790                           
  3791                           ;main_B1.c: 182: if (myMain.PowerON == 0) {
  3792                           
  3793                           ;incstack = 0
  3794                           ; Regs used in _my_MainTime: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3795  07A8  0021               	movlb	1	; select bank1
  3796  07A9  1820               	btfsc	_myMain^(0+128),0
  3797  07AA  2FD2               	goto	l7237
  3798                           
  3799                           ;main_B1.c: 183: myMain.PowerCount++;
  3800  07AB  3001               	movlw	1
  3801  07AC  07A2               	addwf	(_myMain^(0+128)+2),f
  3802  07AD  3000               	movlw	0
  3803  07AE  3DA3               	addwfc	((_myMain+1)^(0+128)+2),f
  3804                           
  3805                           ;main_B1.c: 184: if (myMain.PowerCount == 150)
  3806  07AF  3002               	movlw	2
  3807  07B0  3EA0               	addlw	_myMain& (0+255)
  3808  07B1  0086               	movwf	6
  3809  07B2  0187               	clrf	7
  3810  07B3  3F40               	moviw [0]fsr1
  3811  07B4  3A96               	xorlw	150
  3812  07B5  1D03               	skipz
  3813  07B6  2FB9               	goto	u6805
  3814  07B7  3F41               	moviw [1]fsr1
  3815  07B8  3A00               	xorlw	0
  3816  07B9                     u6805:	
  3817  07B9  1D03               	skipz
  3818  07BA  2FEA               	goto	l7247
  3819                           
  3820                           ;main_B1.c: 185: {
  3821                           ;main_B1.c: 186: myMain.PowerCount = 0;
  3822  07BB  01A2               	clrf	(_myMain^(0+128)+2)
  3823  07BC  01A3               	clrf	((_myMain+1)^(0+128)+2)
  3824                           
  3825                           ;main_B1.c: 187: myMain.PowerON = 1;
  3826  07BD  1420               	bsf	_myMain^(0+128),0
  3827                           
  3828                           ;main_B1.c: 190: ;;
  3829                           ;main_B1.c: 194: ;;
  3830                           ;main_B1.c: 200: setBuz(3, 50);
  3831  07BE  3032               	movlw	50
  3832  07BF  0020               	movlb	0	; select bank0
  3833  07C0  00A9               	movwf	setBuz@time
  3834  07C1  3000               	movlw	0
  3835  07C2  00AA               	movwf	setBuz@time+1
  3836  07C3  3003               	movlw	3
  3837  07C4  3188  20A2  3187   	fcall	_setBuz
  3838                           
  3839                           ;main_B1.c: 201: myMain.SelfTest = 1;
  3840  07C7  0021               	movlb	1	; select bank1
  3841  07C8  1620               	bsf	_myMain^(0+128),4
  3842                           
  3843                           ;main_B1.c: 203: setSw_Enable(1);
  3844  07C9  3001               	movlw	1
  3845  07CA  3193  2344  3187   	fcall	_setSw_Enable
  3846                           
  3847                           ;main_B1.c: 206: setRF_Enable(1);
  3848  07CD  3001               	movlw	1
  3849  07CE  3190  20F6  3187   	fcall	_setRF_Enable
  3850                           
  3851                           ;main_B1.c: 210: }
  3852                           ;main_B1.c: 211: } else {
  3853  07D1  2FEA               	goto	l7247
  3854  07D2                     l7237:	
  3855                           
  3856                           ;main_B1.c: 219: myMain.Count1++;
  3857  07D2  3001               	movlw	1
  3858  07D3  0021               	movlb	1	; select bank1
  3859  07D4  07A6               	addwf	(_myMain^(0+128)+6),f
  3860  07D5  3000               	movlw	0
  3861  07D6  3DA7               	addwfc	((_myMain+1)^(0+128)+6),f
  3862                           
  3863                           ;main_B1.c: 220: if (myMain.Count1 == 100)
  3864  07D7  3006               	movlw	6
  3865  07D8  3EA0               	addlw	_myMain& (0+255)
  3866  07D9  0086               	movwf	6
  3867  07DA  0187               	clrf	7
  3868  07DB  3F40               	moviw [0]fsr1
  3869  07DC  3A64               	xorlw	100
  3870  07DD  1D03               	skipz
  3871  07DE  2FE1               	goto	u6815
  3872  07DF  3F41               	moviw [1]fsr1
  3873  07E0  3A00               	xorlw	0
  3874  07E1                     u6815:	
  3875  07E1  1D03               	skipz
  3876  07E2  2FEA               	goto	l7247
  3877                           
  3878                           ;main_B1.c: 221: {
  3879                           ;main_B1.c: 222: myMain.Count1 = 0;
  3880  07E3  01A6               	clrf	(_myMain^(0+128)+6)
  3881  07E4  01A7               	clrf	((_myMain+1)^(0+128)+6)
  3882                           
  3883                           ;main_B1.c: 234: if (myMain.Flag) {
  3884  07E5  1CA0               	btfss	_myMain^(0+128),1
  3885  07E6  2FE9               	goto	l2605
  3886                           
  3887                           ;main_B1.c: 235: myMain.Flag = 0;
  3888  07E7  10A0               	bcf	_myMain^(0+128),1
  3889                           
  3890                           ;main_B1.c: 244: } else {
  3891  07E8  2FEA               	goto	l7247
  3892  07E9                     l2605:	
  3893                           
  3894                           ;main_B1.c: 245: myMain.Flag = 1;
  3895  07E9  14A0               	bsf	_myMain^(0+128),1
  3896  07EA                     l7247:	
  3897                           
  3898                           ;main_B1.c: 254: }
  3899                           ;main_B1.c: 255: }
  3900                           ;main_B1.c: 257: }
  3901                           ;main_B1.c: 259: myMain.Count2++;
  3902  07EA  3001               	movlw	1
  3903  07EB  0021               	movlb	1	; select bank1
  3904  07EC  07A8               	addwf	(_myMain^(0+128)+8),f
  3905  07ED  3000               	movlw	0
  3906  07EE  3DA9               	addwfc	((_myMain+1)^(0+128)+8),f
  3907                           
  3908                           ;main_B1.c: 260: if (myMain.Count2 == 50) {
  3909  07EF  3008               	movlw	8
  3910  07F0  3EA0               	addlw	_myMain& (0+255)
  3911  07F1  0086               	movwf	6
  3912  07F2  0187               	clrf	7
  3913  07F3  3F40               	moviw [0]fsr1
  3914  07F4  3A32               	xorlw	50
  3915  07F5  1D03               	skipz
  3916  07F6  2FF9               	goto	u6835
  3917  07F7  3F41               	moviw [1]fsr1
  3918  07F8  3A00               	xorlw	0
  3919  07F9                     u6835:	
  3920  07F9  1D03               	skipz
  3921  07FA  0008               	return
  3922                           
  3923                           ;main_B1.c: 261: myMain.Count2 = 0;
  3924  07FB  01A8               	clrf	(_myMain^(0+128)+8)
  3925  07FC  01A9               	clrf	((_myMain+1)^(0+128)+8)
  3926  07FD  0008               	return
  3927  07FE                     __end_of_my_MainTime:	
  3928                           
  3929                           	psect	text2
  3930  1344                     __ptext2:	
  3931 ;; *************** function _setSw_Enable *****************
  3932 ;; Defined at:
  3933 ;;		line 91 in file "../src/Switch_B1.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;  command         1    wreg     unsigned char 
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;  command         1    2[BANK0 ] unsigned char 
  3938 ;; Return value:  Size  Location     Type
  3939 ;;		None               void
  3940 ;; Registers used:
  3941 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3942 ;; Tracked objects:
  3943 ;;		On entry : 0/0
  3944 ;;		On exit  : 0/0
  3945 ;;		Unchanged: 0/0
  3946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3948 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3950 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3951 ;;Total ram usage:        1 bytes
  3952 ;; Hardware stack levels used:    1
  3953 ;; Hardware stack levels required when called:    6
  3954 ;; This function calls:
  3955 ;;		_SwPointSelect
  3956 ;; This function is called by:
  3957 ;;		_my_MainTime
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961                           
  3962                           ;psect for function _setSw_Enable
  3963  1344                     _setSw_Enable:	
  3964                           
  3965                           ;incstack = 0
  3966                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3967                           ;setSw_Enable@command stored from wreg
  3968  1344  0020               	movlb	0	; select bank0
  3969  1345  00A2               	movwf	setSw_Enable@command
  3970                           
  3971                           ;Switch_B1.c: 94: SwPointSelect(1);
  3972  1346  3001               	movlw	1
  3973  1347  3192  2237  3193   	fcall	_SwPointSelect
  3974                           
  3975                           ;Switch_B1.c: 95: Sw->Enable = command;
  3976  134A  0020               	movlb	0	; select bank0
  3977  134B  086F               	movf	_Sw,w
  3978  134C  0086               	movwf	6
  3979  134D  3001               	movlw	1	; select bank2/3
  3980  134E  0087               	movwf	7
  3981  134F  0822               	movf	setSw_Enable@command,w
  3982  1350  1001               	bcf	1,0
  3983  1351  1D03               	skipz
  3984  1352  1401               	bsf	1,0
  3985                           
  3986                           ;Switch_B1.c: 99: SwPointSelect(2);
  3987  1353  3002               	movlw	2
  3988  1354  3192  2237         	fcall	_SwPointSelect
  3989                           
  3990                           ;Switch_B1.c: 100: Sw->Enable = command;
  3991  1356  0020               	movlb	0	; select bank0
  3992  1357  086F               	movf	_Sw,w
  3993  1358  0086               	movwf	6
  3994  1359  3001               	movlw	1	; select bank2/3
  3995  135A  0087               	movwf	7
  3996  135B  0822               	movf	setSw_Enable@command,w
  3997  135C  1001               	bcf	1,0
  3998  135D  1D03               	skipz
  3999  135E  1401               	bsf	1,0
  4000  135F  0008               	return
  4001  1360                     __end_of_setSw_Enable:	
  4002                           
  4003                           	psect	text3
  4004  10F6                     __ptext3:	
  4005 ;; *************** function _setRF_Enable *****************
  4006 ;; Defined at:
  4007 ;;		line 227 in file "../src/RF_Control_B1.c"
  4008 ;; Parameters:    Size  Location     Type
  4009 ;;  command         1    wreg     unsigned char 
  4010 ;; Auto vars:     Size  Location     Type
  4011 ;;  command         1    0[BANK0 ] unsigned char 
  4012 ;; Return value:  Size  Location     Type
  4013 ;;		None               void
  4014 ;; Registers used:
  4015 ;;		wreg, status,2
  4016 ;; Tracked objects:
  4017 ;;		On entry : 0/0
  4018 ;;		On exit  : 0/0
  4019 ;;		Unchanged: 0/0
  4020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4022 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4024 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4025 ;;Total ram usage:        1 bytes
  4026 ;; Hardware stack levels used:    1
  4027 ;; Hardware stack levels required when called:    5
  4028 ;; This function calls:
  4029 ;;		Nothing
  4030 ;; This function is called by:
  4031 ;;		_my_MainTime
  4032 ;; This function uses a non-reentrant model
  4033 ;;
  4034                           
  4035                           
  4036                           ;psect for function _setRF_Enable
  4037  10F6                     _setRF_Enable:	
  4038                           
  4039                           ;incstack = 0
  4040                           ; Regs used in _setRF_Enable: [wreg+status,2]
  4041                           ;setRF_Enable@command stored from wreg
  4042  10F6  0020               	movlb	0	; select bank0
  4043  10F7  00A0               	movwf	setRF_Enable@command
  4044                           
  4045                           ;RF_Control_B1.c: 228: RF1.Enable = command;
  4046  10F8  0820               	movf	setRF_Enable@command,w
  4047  10F9  0021               	movlb	1	; select bank1
  4048  10FA  103C               	bcf	_RF1^(0+128),0
  4049  10FB  1D03               	skipz
  4050  10FC  143C               	bsf	_RF1^(0+128),0
  4051                           
  4052                           ;RF_Control_B1.c: 229: RF1.Learn = 0;
  4053  10FD  133C               	bcf	_RF1^(0+128),6
  4054                           
  4055                           ;RF_Control_B1.c: 230: RF1.TransceiveGO = 0;
  4056  10FE  113C               	bcf	_RF1^(0+128),2
  4057                           
  4058                           ;RF_Control_B1.c: 231: RF1.RxStatus = 0;
  4059  10FF  11BC               	bcf	_RF1^(0+128),3
  4060                           
  4061                           ;RF_Control_B1.c: 232: RF1.ReceiveGO = 0;
  4062  1100  10BC               	bcf	_RF1^(0+128),1
  4063                           
  4064                           ;RF_Control_B1.c: 233: RF1.DebounceTime = 0;
  4065  1101  01C5               	clrf	(_RF1^(0+128)+9)
  4066                           
  4067                           ;RF_Control_B1.c: 234: RF1.Debounce = 0;
  4068  1102  12BC               	bcf	_RF1^(0+128),5
  4069  1103  0008               	return
  4070  1104                     __end_of_setRF_Enable:	
  4071                           
  4072                           	psect	text4
  4073  1131                     __ptext4:	
  4074 ;; *************** function _myMain_Initialization *****************
  4075 ;; Defined at:
  4076 ;;		line 167 in file "../src/main_B1.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;		None
  4079 ;; Auto vars:     Size  Location     Type
  4080 ;;		None
  4081 ;; Return value:  Size  Location     Type
  4082 ;;		None               void
  4083 ;; Registers used:
  4084 ;;		wreg, fsr1l, fsr1h
  4085 ;; Tracked objects:
  4086 ;;		On entry : 0/0
  4087 ;;		On exit  : 0/0
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4092 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4093 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4094 ;;Total ram usage:        1 bytes
  4095 ;; Hardware stack levels used:    1
  4096 ;; Hardware stack levels required when called:    5
  4097 ;; This function calls:
  4098 ;;		Nothing
  4099 ;; This function is called by:
  4100 ;;		_main
  4101 ;; This function uses a non-reentrant model
  4102 ;;
  4103                           
  4104                           
  4105                           ;psect for function _myMain_Initialization
  4106  1131                     _myMain_Initialization:	
  4107                           
  4108                           ;main_B1.c: 169: product = &_product;
  4109                           
  4110                           ;incstack = 0
  4111                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4112  1131  30C5               	movlw	__product& (0+255)
  4113  1132  0020               	movlb	0	; select bank0
  4114  1133  00A0               	movwf	??_myMain_Initialization
  4115  1134  0820               	movf	??_myMain_Initialization,w
  4116  1135  00EE               	movwf	_product
  4117                           
  4118                           ;main_B1.c: 170: product->Data[20] = 210;
  4119  1136  30D2               	movlw	210
  4120  1137  00A0               	movwf	??_myMain_Initialization
  4121  1138  086E               	movf	_product,w
  4122  1139  3E14               	addlw	20
  4123  113A  0086               	movwf	6
  4124  113B  3001               	movlw	1	; select bank2/3
  4125  113C  0087               	movwf	7
  4126  113D  0820               	movf	??_myMain_Initialization,w
  4127  113E  0081               	movwf	1
  4128  113F  0008               	return
  4129  1140                     __end_of_myMain_Initialization:	
  4130                           
  4131                           	psect	text5
  4132  11D6                     __ptext5:	
  4133 ;; *************** function _WDT_Main *****************
  4134 ;; Defined at:
  4135 ;;		line 1019 in file "../src/MCU_B1.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;		None
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;		None
  4140 ;; Return value:  Size  Location     Type
  4141 ;;		None               void
  4142 ;; Registers used:
  4143 ;;		wreg, status,2, status,0, pclath, cstack
  4144 ;; Tracked objects:
  4145 ;;		On entry : 0/0
  4146 ;;		On exit  : 0/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4151 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4152 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4153 ;;Total ram usage:        1 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; Hardware stack levels required when called:    6
  4156 ;; This function calls:
  4157 ;;		_WDT_Clearing
  4158 ;; This function is called by:
  4159 ;;		_main
  4160 ;; This function uses a non-reentrant model
  4161 ;;
  4162                           
  4163                           
  4164                           ;psect for function _WDT_Main
  4165  11D6                     _WDT_Main:	
  4166                           
  4167                           ;MCU_B1.c: 1020: if (WDT.Enable == 1) {
  4168                           
  4169                           ;incstack = 0
  4170                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4171  11D6  0021               	movlb	1	; select bank1
  4172  11D7  1C4D               	btfss	_WDT^(0+128),0
  4173  11D8  0008               	return
  4174                           
  4175                           ;MCU_B1.c: 1021: if (WDT.Timer-- > 0) {
  4176  11D9  3001               	movlw	1
  4177  11DA  02CE               	subwf	(_WDT^(0+128)+1),f
  4178  11DB  084E               	movf	(_WDT^(0+128)+1),w
  4179  11DC  3AFF               	xorlw	255
  4180  11DD  1903               	skipnz
  4181  11DE  0008               	return
  4182                           
  4183                           ;MCU_B1.c: 1022: WDT.Timer = 100;
  4184  11DF  3064               	movlw	100
  4185  11E0  0020               	movlb	0	; select bank0
  4186  11E1  00A0               	movwf	??_WDT_Main
  4187  11E2  0820               	movf	??_WDT_Main,w
  4188  11E3  0021               	movlb	1	; select bank1
  4189  11E4  00CE               	movwf	(_WDT^(0+128)+1)
  4190                           
  4191                           ;MCU_B1.c: 1023: WDT_Clearing();
  4192  11E5  3187  27FE         	fcall	_WDT_Clearing
  4193  11E7  0008               	return
  4194  11E8                     __end_of_WDT_Main:	
  4195                           
  4196                           	psect	text6
  4197  07FE                     __ptext6:	
  4198 ;; *************** function _WDT_Clearing *****************
  4199 ;; Defined at:
  4200 ;;		line 1029 in file "../src/MCU_B1.c"
  4201 ;; Parameters:    Size  Location     Type
  4202 ;;		None
  4203 ;; Auto vars:     Size  Location     Type
  4204 ;;		None
  4205 ;; Return value:  Size  Location     Type
  4206 ;;		None               void
  4207 ;; Registers used:
  4208 ;;		None
  4209 ;; Tracked objects:
  4210 ;;		On entry : 0/0
  4211 ;;		On exit  : 0/0
  4212 ;;		Unchanged: 0/0
  4213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4218 ;;Total ram usage:        0 bytes
  4219 ;; Hardware stack levels used:    1
  4220 ;; Hardware stack levels required when called:    5
  4221 ;; This function calls:
  4222 ;;		Nothing
  4223 ;; This function is called by:
  4224 ;;		_WDT_Main
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           
  4229                           ;psect for function _WDT_Clearing
  4230  07FE                     _WDT_Clearing:	
  4231                           
  4232                           ;incstack = 0
  4233                           ; Regs used in _WDT_Clearing: []
  4234  07FE  0064               	clrwdt	;# 
  4235  07FF  0008               	return
  4236  0800                     __end_of_WDT_Clearing:	
  4237                           
  4238                           	psect	text7
  4239  1FDC                     __ptext7:	
  4240 ;; *************** function _Switch_Main *****************
  4241 ;; Defined at:
  4242 ;;		line 67 in file "../src/Switch_B1.c"
  4243 ;; Parameters:    Size  Location     Type
  4244 ;;		None
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;		None
  4247 ;; Return value:  Size  Location     Type
  4248 ;;		None               void
  4249 ;; Registers used:
  4250 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4251 ;; Tracked objects:
  4252 ;;		On entry : 0/0
  4253 ;;		On exit  : 0/0
  4254 ;;		Unchanged: 0/0
  4255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4260 ;;Total ram usage:        0 bytes
  4261 ;; Hardware stack levels used:    1
  4262 ;; Hardware stack levels required when called:   11
  4263 ;; This function calls:
  4264 ;;		_setSw_Main
  4265 ;; This function is called by:
  4266 ;;		_main
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           
  4271                           ;psect for function _Switch_Main
  4272  1FDC                     _Switch_Main:	
  4273                           
  4274                           ;Switch_B1.c: 69: setSw_Main(1);
  4275                           
  4276                           ;incstack = 0
  4277                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4278  1FDC  3001               	movlw	1
  4279  1FDD  3181  21A8  319F   	fcall	_setSw_Main
  4280                           
  4281                           ;Switch_B1.c: 73: setSw_Main(2);
  4282  1FE0  3002               	movlw	2
  4283  1FE1  3181  21A8         	fcall	_setSw_Main
  4284  1FE3  0008               	return
  4285  1FE4                     __end_of_Switch_Main:	
  4286                           
  4287                           	psect	text8
  4288  01A8                     __ptext8:	
  4289 ;; *************** function _setSw_Main *****************
  4290 ;; Defined at:
  4291 ;;		line 117 in file "../src/Switch_B1.c"
  4292 ;; Parameters:    Size  Location     Type
  4293 ;;  sw              1    wreg     unsigned char 
  4294 ;; Auto vars:     Size  Location     Type
  4295 ;;  sw              1   73[BANK0 ] unsigned char 
  4296 ;; Return value:  Size  Location     Type
  4297 ;;		None               void
  4298 ;; Registers used:
  4299 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4300 ;; Tracked objects:
  4301 ;;		On entry : 0/0
  4302 ;;		On exit  : 0/0
  4303 ;;		Unchanged: 0/0
  4304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4306 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4307 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4308 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4309 ;;Total ram usage:        5 bytes
  4310 ;; Hardware stack levels used:    1
  4311 ;; Hardware stack levels required when called:   10
  4312 ;; This function calls:
  4313 ;;		_SwPointSelect
  4314 ;;		_Sw_DimmerAdjFunc
  4315 ;;		_Sw_DimmerOffFunc
  4316 ;;		_Sw_DimmerOnFunc
  4317 ;;		_setBuz
  4318 ;;		_setRF_Learn
  4319 ;; This function is called by:
  4320 ;;		_Switch_Main
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           
  4325                           ;psect for function _setSw_Main
  4326  01A8                     _setSw_Main:	
  4327                           
  4328                           ;incstack = 0
  4329                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4330                           ;setSw_Main@sw stored from wreg
  4331  01A8  0020               	movlb	0	; select bank0
  4332  01A9  00E9               	movwf	setSw_Main@sw
  4333                           
  4334                           ;Switch_B1.c: 118: SwPointSelect(sw);
  4335  01AA  0869               	movf	setSw_Main@sw,w
  4336  01AB  3192  2237  3181   	fcall	_SwPointSelect
  4337                           
  4338                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  4339  01AE  0020               	movlb	0	; select bank0
  4340  01AF  086F               	movf	_Sw,w
  4341  01B0  0086               	movwf	6
  4342  01B1  3001               	movlw	1	; select bank2/3
  4343  01B2  0087               	movwf	7
  4344  01B3  1C01               	btfss	1,0
  4345  01B4  0008               	return
  4346                           
  4347                           ;Switch_B1.c: 131: if (sw == 1) {
  4348  01B5  0869               	movf	setSw_Main@sw,w
  4349  01B6  3A01               	xorlw	1
  4350  01B7  1D03               	skipz
  4351  01B8  29C5               	goto	l6943
  4352                           
  4353                           ;Switch_B1.c: 132: Sw->Touch = (RA6 == 1 || RA4 == 1) ? 1 : 0;
  4354  01B9  01E7               	clrf	_setSw_Main$5380
  4355  01BA  0AE7               	incf	_setSw_Main$5380,f
  4356  01BB  1F0C               	btfss	12,6	;volatile
  4357  01BC  1A0C               	btfsc	12,4	;volatile
  4358  01BD  29BF               	goto	l6941
  4359  01BE  01E7               	clrf	_setSw_Main$5380
  4360  01BF                     l6941:	
  4361  01BF  086F               	movf	_Sw,w
  4362  01C0  0086               	movwf	6
  4363  01C1  3001               	movlw	1	; select bank2/3
  4364  01C2  0087               	movwf	7
  4365  01C3  0867               	movf	_setSw_Main$5380,w
  4366  01C4  29D4               	goto	L1
  4367  01C5                     l6943:	
  4368                           ;Switch_B1.c: 133: } else if (sw == 2) {
  4369                           
  4370  01C5  0869               	movf	setSw_Main@sw,w
  4371  01C6  3A02               	xorlw	2
  4372  01C7  1D03               	skipz
  4373  01C8  29D7               	goto	l6953
  4374                           
  4375                           ;Switch_B1.c: 134: Sw->Touch = (RA0 == 1 || RB1 == 1) ? 1 : 0;
  4376  01C9  01E8               	clrf	_setSw_Main$5381
  4377  01CA  0AE8               	incf	_setSw_Main$5381,f
  4378  01CB  1C0C               	btfss	12,0	;volatile
  4379  01CC  188D               	btfsc	13,1	;volatile
  4380  01CD  29CF               	goto	l6951
  4381  01CE  01E8               	clrf	_setSw_Main$5381
  4382  01CF                     l6951:	
  4383  01CF  086F               	movf	_Sw,w
  4384  01D0  0086               	movwf	6
  4385  01D1  3001               	movlw	1	; select bank2/3
  4386  01D2  0087               	movwf	7
  4387  01D3  0868               	movf	_setSw_Main$5381,w
  4388  01D4                     L1:	
  4389  01D4  1081               	bcf	1,1
  4390  01D5  1D03               	skipz
  4391  01D6  1481               	bsf	1,1
  4392  01D7                     l6953:	
  4393                           
  4394                           ;Switch_B1.c: 135: }
  4395                           ;Switch_B1.c: 141: if (Sw->Touch == 1) {
  4396  01D7  086F               	movf	_Sw,w
  4397  01D8  0086               	movwf	6
  4398  01D9  3001               	movlw	1	; select bank2/3
  4399  01DA  0087               	movwf	7
  4400  01DB  1C81               	btfss	1,1
  4401  01DC  2AA1               	goto	l7001
  4402                           
  4403                           ;Switch_B1.c: 142: if (Sw->Debounce == 0) {
  4404  01DD  086F               	movf	_Sw,w
  4405  01DE  0086               	movwf	6
  4406  01DF  3001               	movlw	1	; select bank2/3
  4407  01E0  0087               	movwf	7
  4408  01E1  1901               	btfsc	1,2
  4409  01E2  2A04               	goto	l6967
  4410                           
  4411                           ;Switch_B1.c: 143: Sw->DebounceTime++;
  4412  01E3  3001               	movlw	1
  4413  01E4  00E5               	movwf	??_setSw_Main
  4414  01E5  086F               	movf	_Sw,w
  4415  01E6  3E02               	addlw	2
  4416  01E7  0086               	movwf	6
  4417  01E8  3001               	movlw	1	; select bank2/3
  4418  01E9  0087               	movwf	7
  4419  01EA  0865               	movf	??_setSw_Main,w
  4420  01EB  0781               	addwf	1,f
  4421                           
  4422                           ;Switch_B1.c: 144: if (Sw->DebounceTime >= 5) {
  4423  01EC  086F               	movf	_Sw,w
  4424  01ED  3E02               	addlw	2
  4425  01EE  0086               	movwf	6
  4426  01EF  3001               	movlw	1	; select bank2/3
  4427  01F0  0087               	movwf	7
  4428  01F1  3005               	movlw	5
  4429  01F2  0201               	subwf	1,w
  4430  01F3  1C03               	skipc
  4431  01F4  0008               	return
  4432                           
  4433                           ;Switch_B1.c: 145: Sw->DebounceTime = 0;
  4434  01F5  086F               	movf	_Sw,w
  4435  01F6  3E02               	addlw	2
  4436  01F7  0086               	movwf	6
  4437  01F8  3001               	movlw	1	; select bank2/3
  4438  01F9  0087               	movwf	7
  4439  01FA  0181               	clrf	1
  4440                           
  4441                           ;Switch_B1.c: 146: Sw->Debounce = 1;
  4442  01FB  086F               	movf	_Sw,w
  4443  01FC  0086               	movwf	6
  4444  01FD  3001               	movlw	1	; select bank2/3
  4445  01FE  0087               	movwf	7
  4446  01FF  1501               	bsf	1,2
  4447                           
  4448                           ;Switch_B1.c: 149: Sw_DimmerOnFunc(sw);
  4449  0200  0869               	movf	setSw_Main@sw,w
  4450  0201  318D  2566         	fcall	_Sw_DimmerOnFunc
  4451                           
  4452                           ;Switch_B1.c: 173: }
  4453                           ;Switch_B1.c: 174: } else {
  4454  0203  0008               	return
  4455  0204                     l6967:	
  4456                           
  4457                           ;Switch_B1.c: 175: if (Sw->Hold1 == 0) {
  4458  0204  0020               	movlb	0	; select bank0
  4459  0205  086F               	movf	_Sw,w
  4460  0206  0086               	movwf	6
  4461  0207  3001               	movlw	1	; select bank2/3
  4462  0208  0087               	movwf	7
  4463  0209  1981               	btfsc	1,3
  4464  020A  2A31               	goto	l6977
  4465                           
  4466                           ;Switch_B1.c: 176: Sw->Hold1Time++;
  4467  020B  086F               	movf	_Sw,w
  4468  020C  3E03               	addlw	3
  4469  020D  0086               	movwf	6
  4470  020E  3001               	movlw	1	; select bank2/3
  4471  020F  0087               	movwf	7
  4472  0210  3001               	movlw	1
  4473  0211  0781               	addwf	1,f
  4474  0212  3141               	addfsr 1,1
  4475  0213  1803               	skipnc
  4476  0214  0A81               	incf	1,f
  4477                           
  4478                           ;Switch_B1.c: 177: if (Sw->Hold1Time >= 150) {
  4479  0215  086F               	movf	_Sw,w
  4480  0216  3E03               	addlw	3
  4481  0217  0086               	movwf	6
  4482  0218  3001               	movlw	1	; select bank2/3
  4483  0219  0087               	movwf	7
  4484  021A  3F40               	moviw [0]fsr1
  4485  021B  00E5               	movwf	??_setSw_Main
  4486  021C  3F41               	moviw [1]fsr1
  4487  021D  00E6               	movwf	??_setSw_Main+1
  4488  021E  3000               	movlw	0
  4489  021F  0266               	subwf	??_setSw_Main+1,w
  4490  0220  3096               	movlw	150
  4491  0221  1903               	skipnz
  4492  0222  0265               	subwf	??_setSw_Main,w
  4493  0223  1C03               	skipc
  4494  0224  0008               	return
  4495                           
  4496                           ;Switch_B1.c: 178: Sw->Hold1Time = 0;
  4497  0225  086F               	movf	_Sw,w
  4498  0226  3E03               	addlw	3
  4499  0227  0086               	movwf	6
  4500  0228  3001               	movlw	1	; select bank2/3
  4501  0229  0087               	movwf	7
  4502  022A  3000               	movlw	0
  4503  022B  3FC0               	movwi [0]fsr1
  4504  022C  3FC1               	movwi [1]fsr1
  4505                           
  4506                           ;Switch_B1.c: 181: Sw_DimmerAdjFunc(sw);
  4507  022D  0869               	movf	setSw_Main@sw,w
  4508  022E  3188  2002         	fcall	_Sw_DimmerAdjFunc
  4509                           
  4510                           ;Switch_B1.c: 184: }
  4511                           ;Switch_B1.c: 185: } else {
  4512  0230  0008               	return
  4513  0231                     l6977:	
  4514                           
  4515                           ;Switch_B1.c: 186: if (Sw->Hold2 == 0) {
  4516  0231  0020               	movlb	0	; select bank0
  4517  0232  086F               	movf	_Sw,w
  4518  0233  0086               	movwf	6
  4519  0234  3001               	movlw	1	; select bank2/3
  4520  0235  0087               	movwf	7
  4521  0236  1A01               	btfsc	1,4
  4522  0237  2A6F               	goto	l6991
  4523                           
  4524                           ;Switch_B1.c: 187: Sw->Hold2Time++;
  4525  0238  086F               	movf	_Sw,w
  4526  0239  3E05               	addlw	5
  4527  023A  0086               	movwf	6
  4528  023B  3001               	movlw	1	; select bank2/3
  4529  023C  0087               	movwf	7
  4530  023D  3001               	movlw	1
  4531  023E  0781               	addwf	1,f
  4532  023F  3141               	addfsr 1,1
  4533  0240  1803               	skipnc
  4534  0241  0A81               	incf	1,f
  4535                           
  4536                           ;Switch_B1.c: 188: if (Sw->Hold2Time >= 150) {
  4537  0242  086F               	movf	_Sw,w
  4538  0243  3E05               	addlw	5
  4539  0244  0086               	movwf	6
  4540  0245  3001               	movlw	1	; select bank2/3
  4541  0246  0087               	movwf	7
  4542  0247  3F40               	moviw [0]fsr1
  4543  0248  00E5               	movwf	??_setSw_Main
  4544  0249  3F41               	moviw [1]fsr1
  4545  024A  00E6               	movwf	??_setSw_Main+1
  4546  024B  3000               	movlw	0
  4547  024C  0266               	subwf	??_setSw_Main+1,w
  4548  024D  3096               	movlw	150
  4549  024E  1903               	skipnz
  4550  024F  0265               	subwf	??_setSw_Main,w
  4551  0250  1C03               	skipc
  4552  0251  0008               	return
  4553                           
  4554                           ;Switch_B1.c: 189: Sw->Hold2Time = 0;
  4555  0252  086F               	movf	_Sw,w
  4556  0253  3E05               	addlw	5
  4557  0254  0086               	movwf	6
  4558  0255  3001               	movlw	1	; select bank2/3
  4559  0256  0087               	movwf	7
  4560  0257  3000               	movlw	0
  4561  0258  3FC0               	movwi [0]fsr1
  4562  0259  3FC1               	movwi [1]fsr1
  4563                           
  4564                           ;Switch_B1.c: 190: Sw->Hold2 = 1;
  4565  025A  086F               	movf	_Sw,w
  4566  025B  0086               	movwf	6
  4567  025C  3001               	movlw	1	; select bank2/3
  4568  025D  0087               	movwf	7
  4569  025E  1601               	bsf	1,4
  4570                           
  4571                           ;Switch_B1.c: 193: setRF_Learn(1);
  4572  025F  3001               	movlw	1
  4573  0260  319F  27D4  3181   	fcall	_setRF_Learn
  4574                           
  4575                           ;Switch_B1.c: 195: if (myMain.First == 1) {
  4576  0263  0021               	movlb	1	; select bank1
  4577  0264  1EA0               	btfss	_myMain^(0+128),5
  4578  0265  0008               	return
  4579                           
  4580                           ;Switch_B1.c: 196: setBuz(2, 100);
  4581  0266  3064               	movlw	100
  4582  0267  0020               	movlb	0	; select bank0
  4583  0268  00A9               	movwf	setBuz@time
  4584  0269  3000               	movlw	0
  4585  026A  00AA               	movwf	setBuz@time+1
  4586  026B  3002               	movlw	2
  4587  026C  3188  20A2         	fcall	_setBuz
  4588                           
  4589                           ;Switch_B1.c: 197: }
  4590                           ;Switch_B1.c: 199: }
  4591                           ;Switch_B1.c: 200: } else {
  4592  026E  0008               	return
  4593  026F                     l6991:	
  4594                           
  4595                           ;Switch_B1.c: 201: if (Sw->Hold3 == 0) {
  4596  026F  0020               	movlb	0	; select bank0
  4597  0270  086F               	movf	_Sw,w
  4598  0271  0086               	movwf	6
  4599  0272  3001               	movlw	1	; select bank2/3
  4600  0273  0087               	movwf	7
  4601  0274  1A81               	btfsc	1,5
  4602  0275  0008               	return
  4603                           
  4604                           ;Switch_B1.c: 202: Sw->Hold3Time++;
  4605  0276  086F               	movf	_Sw,w
  4606  0277  3E07               	addlw	7
  4607  0278  0086               	movwf	6
  4608  0279  3001               	movlw	1	; select bank2/3
  4609  027A  0087               	movwf	7
  4610  027B  3001               	movlw	1
  4611  027C  0781               	addwf	1,f
  4612  027D  3141               	addfsr 1,1
  4613  027E  1803               	skipnc
  4614  027F  0A81               	incf	1,f
  4615                           
  4616                           ;Switch_B1.c: 203: if (Sw->Hold3Time >= 300) {
  4617  0280  086F               	movf	_Sw,w
  4618  0281  3E07               	addlw	7
  4619  0282  0086               	movwf	6
  4620  0283  3001               	movlw	1	; select bank2/3
  4621  0284  0087               	movwf	7
  4622  0285  3F40               	moviw [0]fsr1
  4623  0286  00E5               	movwf	??_setSw_Main
  4624  0287  3F41               	moviw [1]fsr1
  4625  0288  00E6               	movwf	??_setSw_Main+1
  4626  0289  3001               	movlw	1
  4627  028A  0266               	subwf	??_setSw_Main+1,w
  4628  028B  302C               	movlw	44
  4629  028C  1903               	skipnz
  4630  028D  0265               	subwf	??_setSw_Main,w
  4631  028E  1C03               	skipc
  4632  028F  0008               	return
  4633                           
  4634                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  4635  0290  086F               	movf	_Sw,w
  4636  0291  3E07               	addlw	7
  4637  0292  0086               	movwf	6
  4638  0293  3001               	movlw	1	; select bank2/3
  4639  0294  0087               	movwf	7
  4640  0295  3000               	movlw	0
  4641  0296  3FC0               	movwi [0]fsr1
  4642  0297  3FC1               	movwi [1]fsr1
  4643                           
  4644                           ;Switch_B1.c: 205: Sw->Hold3 = 1;
  4645  0298  086F               	movf	_Sw,w
  4646  0299  0086               	movwf	6
  4647  029A  3001               	movlw	1	; select bank2/3
  4648  029B  0087               	movwf	7
  4649  029C  1681               	bsf	1,5
  4650                           
  4651                           ;Switch_B1.c: 208: setRF_Learn(0);
  4652  029D  3000               	movlw	0
  4653  029E  319F  27D4         	fcall	_setRF_Learn
  4654                           
  4655                           ;Switch_B1.c: 211: }
  4656                           ;Switch_B1.c: 212: }
  4657                           ;Switch_B1.c: 213: }
  4658                           ;Switch_B1.c: 214: }
  4659                           ;Switch_B1.c: 215: }
  4660                           ;Switch_B1.c: 216: } else {
  4661  02A0  0008               	return
  4662  02A1                     l7001:	
  4663                           
  4664                           ;Switch_B1.c: 217: if (Sw->Debounce == 1) {
  4665  02A1  0020               	movlb	0	; select bank0
  4666  02A2  086F               	movf	_Sw,w
  4667  02A3  0086               	movwf	6
  4668  02A4  3001               	movlw	1	; select bank2/3
  4669  02A5  0087               	movwf	7
  4670  02A6  1D01               	btfss	1,2
  4671  02A7  0008               	return
  4672                           
  4673                           ;Switch_B1.c: 218: Sw->DebounceTime++;
  4674  02A8  3001               	movlw	1
  4675  02A9  00E5               	movwf	??_setSw_Main
  4676  02AA  086F               	movf	_Sw,w
  4677  02AB  3E02               	addlw	2
  4678  02AC  0086               	movwf	6
  4679  02AD  3001               	movlw	1	; select bank2/3
  4680  02AE  0087               	movwf	7
  4681  02AF  0865               	movf	??_setSw_Main,w
  4682  02B0  0781               	addwf	1,f
  4683                           
  4684                           ;Switch_B1.c: 219: if (Sw->DebounceTime >= 5) {
  4685  02B1  086F               	movf	_Sw,w
  4686  02B2  3E02               	addlw	2
  4687  02B3  0086               	movwf	6
  4688  02B4  3001               	movlw	1	; select bank2/3
  4689  02B5  0087               	movwf	7
  4690  02B6  3005               	movlw	5
  4691  02B7  0201               	subwf	1,w
  4692  02B8  1C03               	skipc
  4693  02B9  0008               	return
  4694                           
  4695                           ;Switch_B1.c: 220: Sw->DebounceTime = 0;
  4696  02BA  086F               	movf	_Sw,w
  4697  02BB  3E02               	addlw	2
  4698  02BC  0086               	movwf	6
  4699  02BD  3001               	movlw	1	; select bank2/3
  4700  02BE  0087               	movwf	7
  4701  02BF  0181               	clrf	1
  4702                           
  4703                           ;Switch_B1.c: 221: Sw->Debounce = 0;
  4704  02C0  086F               	movf	_Sw,w
  4705  02C1  0086               	movwf	6
  4706  02C2  3001               	movlw	1	; select bank2/3
  4707  02C3  0087               	movwf	7
  4708  02C4  1101               	bcf	1,2
  4709                           
  4710                           ;Switch_B1.c: 222: Sw->Hold1Time = 0;
  4711  02C5  086F               	movf	_Sw,w
  4712  02C6  3E03               	addlw	3
  4713  02C7  0086               	movwf	6
  4714  02C8  3001               	movlw	1	; select bank2/3
  4715  02C9  0087               	movwf	7
  4716  02CA  3000               	movlw	0
  4717  02CB  3FC0               	movwi [0]fsr1
  4718  02CC  3FC1               	movwi [1]fsr1
  4719                           
  4720                           ;Switch_B1.c: 223: Sw->Hold1 = 0;
  4721  02CD  086F               	movf	_Sw,w
  4722  02CE  0086               	movwf	6
  4723  02CF  3001               	movlw	1	; select bank2/3
  4724  02D0  0087               	movwf	7
  4725  02D1  1181               	bcf	1,3
  4726                           
  4727                           ;Switch_B1.c: 224: Sw->Hold2Time = 0;
  4728  02D2  086F               	movf	_Sw,w
  4729  02D3  3E05               	addlw	5
  4730  02D4  0086               	movwf	6
  4731  02D5  3001               	movlw	1	; select bank2/3
  4732  02D6  0087               	movwf	7
  4733  02D7  3000               	movlw	0
  4734  02D8  3FC0               	movwi [0]fsr1
  4735  02D9  3FC1               	movwi [1]fsr1
  4736                           
  4737                           ;Switch_B1.c: 225: Sw->Hold2 = 0;
  4738  02DA  086F               	movf	_Sw,w
  4739  02DB  0086               	movwf	6
  4740  02DC  3001               	movlw	1	; select bank2/3
  4741  02DD  0087               	movwf	7
  4742  02DE  1201               	bcf	1,4
  4743                           
  4744                           ;Switch_B1.c: 226: Sw->Hold3Time = 0;
  4745  02DF  086F               	movf	_Sw,w
  4746  02E0  3E07               	addlw	7
  4747  02E1  0086               	movwf	6
  4748  02E2  3001               	movlw	1	; select bank2/3
  4749  02E3  0087               	movwf	7
  4750  02E4  3000               	movlw	0
  4751  02E5  3FC0               	movwi [0]fsr1
  4752  02E6  3FC1               	movwi [1]fsr1
  4753                           
  4754                           ;Switch_B1.c: 227: Sw->Hold3 = 0;
  4755  02E7  086F               	movf	_Sw,w
  4756  02E8  0086               	movwf	6
  4757  02E9  3001               	movlw	1	; select bank2/3
  4758  02EA  0087               	movwf	7
  4759  02EB  1281               	bcf	1,5
  4760                           
  4761                           ;Switch_B1.c: 229: Sw_DimmerOffFunc(sw);
  4762  02EC  0869               	movf	setSw_Main@sw,w
  4763  02ED  318C  2416  3181   	fcall	_Sw_DimmerOffFunc
  4764                           
  4765                           ;Switch_B1.c: 232: setRF_Learn(0);
  4766  02F0  3000               	movlw	0
  4767  02F1  319F  27D4         	fcall	_setRF_Learn
  4768  02F3  0008               	return
  4769  02F4                     __end_of_setSw_Main:	
  4770                           
  4771                           	psect	text9
  4772  1FD4                     __ptext9:	
  4773 ;; *************** function _setRF_Learn *****************
  4774 ;; Defined at:
  4775 ;;		line 23 in file "../src/RF_Control_B1.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;  command         1    wreg     unsigned char 
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;  command         1    0[BANK0 ] unsigned char 
  4780 ;; Return value:  Size  Location     Type
  4781 ;;		None               void
  4782 ;; Registers used:
  4783 ;;		wreg
  4784 ;; Tracked objects:
  4785 ;;		On entry : 0/0
  4786 ;;		On exit  : 0/0
  4787 ;;		Unchanged: 0/0
  4788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4790 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4792 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4793 ;;Total ram usage:        1 bytes
  4794 ;; Hardware stack levels used:    1
  4795 ;; Hardware stack levels required when called:    5
  4796 ;; This function calls:
  4797 ;;		Nothing
  4798 ;; This function is called by:
  4799 ;;		_setSw_Main
  4800 ;; This function uses a non-reentrant model
  4801 ;;
  4802                           
  4803                           
  4804                           ;psect for function _setRF_Learn
  4805  1FD4                     _setRF_Learn:	
  4806                           
  4807                           ;incstack = 0
  4808                           ; Regs used in _setRF_Learn: [wreg]
  4809                           ;setRF_Learn@command stored from wreg
  4810  1FD4  0020               	movlb	0	; select bank0
  4811  1FD5  00A0               	movwf	setRF_Learn@command
  4812                           
  4813                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  4814  1FD6  0820               	movf	setRF_Learn@command,w
  4815  1FD7  0021               	movlb	1	; select bank1
  4816  1FD8  133C               	bcf	_RF1^(0+128),6
  4817  1FD9  1D03               	skipz
  4818  1FDA  173C               	bsf	_RF1^(0+128),6
  4819  1FDB  0008               	return
  4820  1FDC                     __end_of_setRF_Learn:	
  4821                           
  4822                           	psect	text10
  4823  0D66                     __ptext10:	
  4824 ;; *************** function _Sw_DimmerOnFunc *****************
  4825 ;; Defined at:
  4826 ;;		line 241 in file "../src/Switch_B1.c"
  4827 ;; Parameters:    Size  Location     Type
  4828 ;;  sw              1    wreg     unsigned char 
  4829 ;; Auto vars:     Size  Location     Type
  4830 ;;  sw              1   67[BANK0 ] unsigned char 
  4831 ;;  Idle            1   66[BANK0 ] unsigned char 
  4832 ;; Return value:  Size  Location     Type
  4833 ;;		None               void
  4834 ;; Registers used:
  4835 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4836 ;; Tracked objects:
  4837 ;;		On entry : 0/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4842 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4844 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4845 ;;Total ram usage:        2 bytes
  4846 ;; Hardware stack levels used:    1
  4847 ;; Hardware stack levels required when called:    9
  4848 ;; This function calls:
  4849 ;;		_setBuz
  4850 ;;		_setDimmerLights_Switch
  4851 ;;		_setDimmerLights_Trigger
  4852 ;;		_setRFSW_Status
  4853 ;;		_setRF_DimmerLights
  4854 ;;		_setTxData
  4855 ;; This function is called by:
  4856 ;;		_setSw_Main
  4857 ;; This function uses a non-reentrant model
  4858 ;;
  4859                           
  4860                           
  4861                           ;psect for function _Sw_DimmerOnFunc
  4862  0D66                     _Sw_DimmerOnFunc:	
  4863                           
  4864                           ;incstack = 0
  4865                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4866                           ;Sw_DimmerOnFunc@sw stored from wreg
  4867  0D66  0020               	movlb	0	; select bank0
  4868  0D67  00E3               	movwf	Sw_DimmerOnFunc@sw
  4869                           
  4870                           ;Switch_B1.c: 242: char Idle = 1;
  4871  0D68  01E2               	clrf	Sw_DimmerOnFunc@Idle
  4872  0D69  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  4873                           
  4874                           ;Switch_B1.c: 256: if (sw == 1) {
  4875  0D6A  0863               	movf	Sw_DimmerOnFunc@sw,w
  4876  0D6B  3A01               	xorlw	1
  4877  0D6C  1D03               	skipz
  4878  0D6D  2D78               	goto	l6359
  4879                           
  4880                           ;Switch_B1.c: 257: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  4881  0D6E  1003               	clrc
  4882  0D6F  0022               	movlb	2	; select bank2
  4883  0D70  1DCC               	btfss	(_DimmerLights2^(0+256)+8),3
  4884  0D71  1403               	setc
  4885  0D72  3000               	movlw	0
  4886  0D73  1803               	btfsc	3,0
  4887  0D74  3001               	movlw	1
  4888  0D75  0020               	movlb	0	; select bank0
  4889  0D76  00E2               	movwf	Sw_DimmerOnFunc@Idle
  4890                           
  4891                           ;Switch_B1.c: 258: } else if (sw == 2) {
  4892  0D77  2D85               	goto	l6363
  4893  0D78                     l6359:	
  4894  0D78  0863               	movf	Sw_DimmerOnFunc@sw,w
  4895  0D79  3A02               	xorlw	2
  4896  0D7A  1D03               	skipz
  4897  0D7B  2D85               	goto	l6363
  4898                           
  4899                           ;Switch_B1.c: 259: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  4900  0D7C  1003               	clrc
  4901  0D7D  0022               	movlb	2	; select bank2
  4902  0D7E  1DBD               	btfss	(_DimmerLights1^(0+256)+8),3
  4903  0D7F  1403               	setc
  4904  0D80  3000               	movlw	0
  4905  0D81  1803               	btfsc	3,0
  4906  0D82  3001               	movlw	1
  4907  0D83  0020               	movlb	0	; select bank0
  4908  0D84  00E2               	movwf	Sw_DimmerOnFunc@Idle
  4909  0D85                     l6363:	
  4910                           
  4911                           ;Switch_B1.c: 260: }
  4912                           ;Switch_B1.c: 263: if (Idle == 1) {
  4913  0D85  0862               	movf	Sw_DimmerOnFunc@Idle,w
  4914  0D86  3A01               	xorlw	1
  4915  0D87  1D03               	skipz
  4916  0D88  0008               	return
  4917                           
  4918                           ;Switch_B1.c: 264: Sw->Flag = 1;
  4919  0D89  086F               	movf	_Sw,w
  4920  0D8A  0086               	movwf	6
  4921  0D8B  3001               	movlw	1	; select bank2/3
  4922  0D8C  0087               	movwf	7
  4923  0D8D  1781               	bsf	1,7
  4924                           
  4925                           ;Switch_B1.c: 265: setBuz(1, 100);
  4926  0D8E  3064               	movlw	100
  4927  0D8F  00A9               	movwf	setBuz@time
  4928  0D90  3000               	movlw	0
  4929  0D91  00AA               	movwf	setBuz@time+1
  4930  0D92  3001               	movlw	1
  4931  0D93  3188  20A2  318D   	fcall	_setBuz
  4932                           
  4933                           ;Switch_B1.c: 266: if (Sw->Status == 0) {
  4934  0D96  0020               	movlb	0	; select bank0
  4935  0D97  086F               	movf	_Sw,w
  4936  0D98  0086               	movwf	6
  4937  0D99  3001               	movlw	1	; select bank2/3
  4938  0D9A  0087               	movwf	7
  4939  0D9B  1B01               	btfsc	1,6
  4940  0D9C  2DC6               	goto	l6383
  4941                           
  4942                           ;Switch_B1.c: 267: Sw->Status = 1;
  4943  0D9D  086F               	movf	_Sw,w
  4944  0D9E  0086               	movwf	6
  4945  0D9F  3001               	movlw	1	; select bank2/3
  4946  0DA0  0087               	movwf	7
  4947  0DA1  1701               	bsf	1,6
  4948                           
  4949                           ;Switch_B1.c: 268: setRFSW_Status(sw, 1);
  4950  0DA2  01A2               	clrf	setRFSW_Status@command
  4951  0DA3  0AA2               	incf	setRFSW_Status@command,f
  4952  0DA4  0863               	movf	Sw_DimmerOnFunc@sw,w
  4953  0DA5  3191  2104  318D   	fcall	_setRFSW_Status
  4954                           
  4955                           ;Switch_B1.c: 270: setDimmerLights_Trigger(sw, 1);
  4956  0DA8  0020               	movlb	0	; select bank0
  4957  0DA9  01A2               	clrf	setDimmerLights_Trigger@command
  4958  0DAA  0AA2               	incf	setDimmerLights_Trigger@command,f
  4959  0DAB  0863               	movf	Sw_DimmerOnFunc@sw,w
  4960  0DAC  3191  2150  318D   	fcall	_setDimmerLights_Trigger
  4961                           
  4962                           ;Switch_B1.c: 271: setDimmerLights_Switch(sw, 1);
  4963  0DAF  0020               	movlb	0	; select bank0
  4964  0DB0  01A2               	clrf	setDimmerLights_Switch@command
  4965  0DB1  0AA2               	incf	setDimmerLights_Switch@command,f
  4966  0DB2  0863               	movf	Sw_DimmerOnFunc@sw,w
  4967  0DB3  3191  2140  318D   	fcall	_setDimmerLights_Switch
  4968                           
  4969                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  4970  0DB6  0020               	movlb	0	; select bank0
  4971  0DB7  086F               	movf	_Sw,w
  4972  0DB8  0086               	movwf	6
  4973  0DB9  3001               	movlw	1	; select bank2/3
  4974  0DBA  0087               	movwf	7
  4975  0DBB  3000               	movlw	0
  4976  0DBC  1B01               	btfsc	1,6
  4977  0DBD  3001               	movlw	1
  4978  0DBE  00DD               	movwf	setRF_DimmerLights@on
  4979  0DBF  0863               	movf	Sw_DimmerOnFunc@sw,w
  4980  0DC0  318B  23AA  318D   	fcall	_setRF_DimmerLights
  4981                           
  4982                           ;Switch_B1.c: 274: setTxData();
  4983  0DC3  3185  258E         	fcall	_setTxData
  4984                           
  4985                           ;Switch_B1.c: 276: } else {
  4986  0DC5  0008               	return
  4987  0DC6                     l6383:	
  4988                           
  4989                           ;Switch_B1.c: 277: Sw->Status = 0;
  4990  0DC6  0020               	movlb	0	; select bank0
  4991  0DC7  086F               	movf	_Sw,w
  4992  0DC8  0086               	movwf	6
  4993  0DC9  3001               	movlw	1	; select bank2/3
  4994  0DCA  0087               	movwf	7
  4995  0DCB  1301               	bcf	1,6
  4996                           
  4997                           ;Switch_B1.c: 278: setRFSW_Status(sw, Sw->Status);
  4998  0DCC  086F               	movf	_Sw,w
  4999  0DCD  0086               	movwf	6
  5000  0DCE  3001               	movlw	1	; select bank2/3
  5001  0DCF  0087               	movwf	7
  5002  0DD0  3000               	movlw	0
  5003  0DD1  1B01               	btfsc	1,6
  5004  0DD2  3001               	movlw	1
  5005  0DD3  00A2               	movwf	setRFSW_Status@command
  5006  0DD4  0863               	movf	Sw_DimmerOnFunc@sw,w
  5007  0DD5  3191  2104         	fcall	_setRFSW_Status
  5008  0DD7  0008               	return
  5009  0DD8                     __end_of_Sw_DimmerOnFunc:	
  5010                           
  5011                           	psect	text11
  5012  0C16                     __ptext11:	
  5013 ;; *************** function _Sw_DimmerOffFunc *****************
  5014 ;; Defined at:
  5015 ;;		line 284 in file "../src/Switch_B1.c"
  5016 ;; Parameters:    Size  Location     Type
  5017 ;;  sw              1    wreg     unsigned char 
  5018 ;; Auto vars:     Size  Location     Type
  5019 ;;  sw              1   68[BANK0 ] unsigned char 
  5020 ;; Return value:  Size  Location     Type
  5021 ;;		None               void
  5022 ;; Registers used:
  5023 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5024 ;; Tracked objects:
  5025 ;;		On entry : 0/0
  5026 ;;		On exit  : 0/0
  5027 ;;		Unchanged: 0/0
  5028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5030 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5031 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5032 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5033 ;;Total ram usage:        3 bytes
  5034 ;; Hardware stack levels used:    1
  5035 ;; Hardware stack levels required when called:    9
  5036 ;; This function calls:
  5037 ;;		_setDelayOff_GO
  5038 ;;		_setDimmerLights_AdjGo
  5039 ;;		_setDimmerLights_Switch
  5040 ;;		_setDimmerLights_Trigger
  5041 ;;		_setDimmerLights_TriggerAdj
  5042 ;;		_setRF_DimmerLights
  5043 ;;		_setTxData
  5044 ;; This function is called by:
  5045 ;;		_setSw_Main
  5046 ;; This function uses a non-reentrant model
  5047 ;;
  5048                           
  5049                           
  5050                           ;psect for function _Sw_DimmerOffFunc
  5051  0C16                     _Sw_DimmerOffFunc:	
  5052                           
  5053                           ;incstack = 0
  5054                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5055                           ;Sw_DimmerOffFunc@sw stored from wreg
  5056  0C16  0020               	movlb	0	; select bank0
  5057  0C17  00E4               	movwf	Sw_DimmerOffFunc@sw
  5058                           
  5059                           ;Switch_B1.c: 285: if (Sw->Flag == 1) {
  5060  0C18  086F               	movf	_Sw,w
  5061  0C19  0086               	movwf	6
  5062  0C1A  3001               	movlw	1	; select bank2/3
  5063  0C1B  0087               	movwf	7
  5064  0C1C  1F81               	btfss	1,7
  5065  0C1D  0008               	return
  5066                           
  5067                           ;Switch_B1.c: 286: Sw->Flag = 0;
  5068  0C1E  086F               	movf	_Sw,w
  5069  0C1F  0086               	movwf	6
  5070  0C20  3001               	movlw	1	; select bank2/3
  5071  0C21  0087               	movwf	7
  5072  0C22  1381               	bcf	1,7
  5073                           
  5074                           ;Switch_B1.c: 287: if (Sw->Status == 1) {
  5075  0C23  086F               	movf	_Sw,w
  5076  0C24  0086               	movwf	6
  5077  0C25  3001               	movlw	1	; select bank2/3
  5078  0C26  0087               	movwf	7
  5079  0C27  1F01               	btfss	1,6
  5080  0C28  2C61               	goto	l6427
  5081                           
  5082                           ;Switch_B1.c: 288: if (Sw->Adj == 1) {
  5083  0C29  0A6F               	incf	_Sw,w
  5084  0C2A  0086               	movwf	6
  5085  0C2B  3001               	movlw	1	; select bank2/3
  5086  0C2C  0087               	movwf	7
  5087  0C2D  1C01               	btfss	1,0
  5088  0C2E  0008               	return
  5089                           
  5090                           ;Switch_B1.c: 289: Sw->Adj = 0;
  5091  0C2F  0A6F               	incf	_Sw,w
  5092  0C30  0086               	movwf	6
  5093  0C31  3001               	movlw	1	; select bank2/3
  5094  0C32  0087               	movwf	7
  5095  0C33  1001               	bcf	1,0
  5096                           
  5097                           ;Switch_B1.c: 290: setDimmerLights_TriggerAdj(sw, 1);
  5098  0C34  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5099  0C35  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5100  0C36  0864               	movf	Sw_DimmerOffFunc@sw,w
  5101  0C37  3191  2180  318C   	fcall	_setDimmerLights_TriggerAdj
  5102                           
  5103                           ;Switch_B1.c: 291: setDimmerLights_AdjGo(sw, 0);
  5104  0C3A  0020               	movlb	0	; select bank0
  5105  0C3B  01A2               	clrf	setDimmerLights_AdjGo@command
  5106  0C3C  0864               	movf	Sw_DimmerOffFunc@sw,w
  5107  0C3D  3191  2170  318C   	fcall	_setDimmerLights_AdjGo
  5108                           
  5109                           ;Switch_B1.c: 293: product->Data[17]=product->Data[26 + sw];
  5110  0C40  0020               	movlb	0	; select bank0
  5111  0C41  0864               	movf	Sw_DimmerOffFunc@sw,w
  5112  0C42  3E1A               	addlw	26
  5113  0C43  076E               	addwf	_product,w
  5114  0C44  00E2               	movwf	??_Sw_DimmerOffFunc
  5115  0C45  0862               	movf	??_Sw_DimmerOffFunc,w
  5116  0C46  0086               	movwf	6
  5117  0C47  3001               	movlw	1	; select bank2/3
  5118  0C48  0087               	movwf	7
  5119  0C49  0801               	movf	1,w
  5120  0C4A  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5121  0C4B  086E               	movf	_product,w
  5122  0C4C  3E11               	addlw	17
  5123  0C4D  0086               	movwf	6
  5124  0C4E  3001               	movlw	1	; select bank2/3
  5125  0C4F  0087               	movwf	7
  5126  0C50  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5127  0C51  0081               	movwf	1
  5128                           
  5129                           ;Switch_B1.c: 294: setRF_DimmerLights(sw, Sw->Status);
  5130  0C52  086F               	movf	_Sw,w
  5131  0C53  0086               	movwf	6
  5132  0C54  3001               	movlw	1	; select bank2/3
  5133  0C55  0087               	movwf	7
  5134  0C56  3000               	movlw	0
  5135  0C57  1B01               	btfsc	1,6
  5136  0C58  3001               	movlw	1
  5137  0C59  00DD               	movwf	setRF_DimmerLights@on
  5138  0C5A  0864               	movf	Sw_DimmerOffFunc@sw,w
  5139  0C5B  318B  23AA  318C   	fcall	_setRF_DimmerLights
  5140                           
  5141                           ;Switch_B1.c: 295: setTxData();
  5142  0C5E  3185  258E         	fcall	_setTxData
  5143                           
  5144                           ;Switch_B1.c: 297: }
  5145                           ;Switch_B1.c: 298: } else {
  5146  0C60  0008               	return
  5147  0C61                     l6427:	
  5148                           
  5149                           ;Switch_B1.c: 299: setDimmerLights_Trigger(sw, 1);
  5150  0C61  0020               	movlb	0	; select bank0
  5151  0C62  01A2               	clrf	setDimmerLights_Trigger@command
  5152  0C63  0AA2               	incf	setDimmerLights_Trigger@command,f
  5153  0C64  0864               	movf	Sw_DimmerOffFunc@sw,w
  5154  0C65  3191  2150  318C   	fcall	_setDimmerLights_Trigger
  5155                           
  5156                           ;Switch_B1.c: 300: setDimmerLights_Switch(sw, 0);
  5157  0C68  0020               	movlb	0	; select bank0
  5158  0C69  01A2               	clrf	setDimmerLights_Switch@command
  5159  0C6A  0864               	movf	Sw_DimmerOffFunc@sw,w
  5160  0C6B  3191  2140  318C   	fcall	_setDimmerLights_Switch
  5161                           
  5162                           ;Switch_B1.c: 302: setDelayOff_GO(sw, 0, 0);
  5163  0C6E  0020               	movlb	0	; select bank0
  5164  0C6F  01AA               	clrf	setDelayOff_GO@command
  5165  0C70  01AB               	clrf	setDelayOff_GO@value
  5166  0C71  0864               	movf	Sw_DimmerOffFunc@sw,w
  5167  0C72  3189  21B1  318C   	fcall	_setDelayOff_GO
  5168                           
  5169                           ;Switch_B1.c: 303: setRF_DimmerLights(sw, Sw->Status);
  5170  0C75  0020               	movlb	0	; select bank0
  5171  0C76  086F               	movf	_Sw,w
  5172  0C77  0086               	movwf	6
  5173  0C78  3001               	movlw	1	; select bank2/3
  5174  0C79  0087               	movwf	7
  5175  0C7A  3000               	movlw	0
  5176  0C7B  1B01               	btfsc	1,6
  5177  0C7C  3001               	movlw	1
  5178  0C7D  00DD               	movwf	setRF_DimmerLights@on
  5179  0C7E  0864               	movf	Sw_DimmerOffFunc@sw,w
  5180  0C7F  318B  23AA  318C   	fcall	_setRF_DimmerLights
  5181                           
  5182                           ;Switch_B1.c: 304: setTxData();
  5183  0C82  3185  258E         	fcall	_setTxData
  5184  0C84  0008               	return
  5185  0C85                     __end_of_Sw_DimmerOffFunc:	
  5186                           
  5187                           	psect	text12
  5188  0802                     __ptext12:	
  5189 ;; *************** function _Sw_DimmerAdjFunc *****************
  5190 ;; Defined at:
  5191 ;;		line 311 in file "../src/Switch_B1.c"
  5192 ;; Parameters:    Size  Location     Type
  5193 ;;  sw              1    wreg     unsigned char 
  5194 ;; Auto vars:     Size  Location     Type
  5195 ;;  sw              1    5[BANK0 ] unsigned char 
  5196 ;;  Idle            1    4[BANK0 ] unsigned char 
  5197 ;; Return value:  Size  Location     Type
  5198 ;;		None               void
  5199 ;; Registers used:
  5200 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5201 ;; Tracked objects:
  5202 ;;		On entry : 0/0
  5203 ;;		On exit  : 0/0
  5204 ;;		Unchanged: 0/0
  5205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5207 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5209 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5210 ;;Total ram usage:        2 bytes
  5211 ;; Hardware stack levels used:    1
  5212 ;; Hardware stack levels required when called:    7
  5213 ;; This function calls:
  5214 ;;		_setDimmerLights_AdjGo
  5215 ;;		_setDimmerLights_TriggerAdj
  5216 ;;		_setRFSW_Status
  5217 ;; This function is called by:
  5218 ;;		_setSw_Main
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           
  5223                           ;psect for function _Sw_DimmerAdjFunc
  5224  0802                     _Sw_DimmerAdjFunc:	
  5225                           
  5226                           ;incstack = 0
  5227                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5228                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5229  0802  0020               	movlb	0	; select bank0
  5230  0803  00A5               	movwf	Sw_DimmerAdjFunc@sw
  5231                           
  5232                           ;Switch_B1.c: 312: char Idle = 1;
  5233  0804  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  5234  0805  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  5235                           
  5236                           ;Switch_B1.c: 325: if (sw == 1) {
  5237  0806  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5238  0807  3A01               	xorlw	1
  5239  0808  1D03               	skipz
  5240  0809  2814               	goto	l6393
  5241                           
  5242                           ;Switch_B1.c: 326: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  5243  080A  1003               	clrc
  5244  080B  0022               	movlb	2	; select bank2
  5245  080C  1DCC               	btfss	(_DimmerLights2^(0+256)+8),3
  5246  080D  1403               	setc
  5247  080E  3000               	movlw	0
  5248  080F  1803               	btfsc	3,0
  5249  0810  3001               	movlw	1
  5250  0811  0020               	movlb	0	; select bank0
  5251  0812  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  5252                           
  5253                           ;Switch_B1.c: 327: } else if (sw == 2) {
  5254  0813  2821               	goto	l6397
  5255  0814                     l6393:	
  5256  0814  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5257  0815  3A02               	xorlw	2
  5258  0816  1D03               	skipz
  5259  0817  2821               	goto	l6397
  5260                           
  5261                           ;Switch_B1.c: 328: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  5262  0818  1003               	clrc
  5263  0819  0022               	movlb	2	; select bank2
  5264  081A  1DBD               	btfss	(_DimmerLights1^(0+256)+8),3
  5265  081B  1403               	setc
  5266  081C  3000               	movlw	0
  5267  081D  1803               	btfsc	3,0
  5268  081E  3001               	movlw	1
  5269  081F  0020               	movlb	0	; select bank0
  5270  0820  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  5271  0821                     l6397:	
  5272                           
  5273                           ;Switch_B1.c: 329: }
  5274                           ;Switch_B1.c: 332: if (Idle == 1) {
  5275  0821  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  5276  0822  3A01               	xorlw	1
  5277  0823  1D03               	skipz
  5278  0824  0008               	return
  5279                           
  5280                           ;Switch_B1.c: 333: if (Sw->Flag == 1) {
  5281  0825  086F               	movf	_Sw,w
  5282  0826  0086               	movwf	6
  5283  0827  3001               	movlw	1	; select bank2/3
  5284  0828  0087               	movwf	7
  5285  0829  1F81               	btfss	1,7
  5286  082A  0008               	return
  5287                           
  5288                           ;Switch_B1.c: 334: Sw->Hold1 = 1;
  5289  082B  086F               	movf	_Sw,w
  5290  082C  0086               	movwf	6
  5291  082D  3001               	movlw	1	; select bank2/3
  5292  082E  0087               	movwf	7
  5293  082F  1581               	bsf	1,3
  5294                           
  5295                           ;Switch_B1.c: 335: Sw->Adj = 1;
  5296  0830  0A6F               	incf	_Sw,w
  5297  0831  0086               	movwf	6
  5298  0832  3001               	movlw	1	; select bank2/3
  5299  0833  0087               	movwf	7
  5300  0834  1401               	bsf	1,0
  5301                           
  5302                           ;Switch_B1.c: 336: Sw->Status = 1;
  5303  0835  086F               	movf	_Sw,w
  5304  0836  0086               	movwf	6
  5305  0837  3001               	movlw	1	; select bank2/3
  5306  0838  0087               	movwf	7
  5307  0839  1701               	bsf	1,6
  5308                           
  5309                           ;Switch_B1.c: 337: setRFSW_Status(sw, 1);
  5310  083A  01A2               	clrf	setRFSW_Status@command
  5311  083B  0AA2               	incf	setRFSW_Status@command,f
  5312  083C  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5313  083D  3191  2104  3188   	fcall	_setRFSW_Status
  5314                           
  5315                           ;Switch_B1.c: 339: setDimmerLights_TriggerAdj(sw, 1);
  5316  0840  0020               	movlb	0	; select bank0
  5317  0841  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5318  0842  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5319  0843  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5320  0844  3191  2180  3188   	fcall	_setDimmerLights_TriggerAdj
  5321                           
  5322                           ;Switch_B1.c: 340: setDimmerLights_AdjGo(sw, 1);
  5323  0847  0020               	movlb	0	; select bank0
  5324  0848  01A2               	clrf	setDimmerLights_AdjGo@command
  5325  0849  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5326  084A  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5327  084B  3191  2170         	fcall	_setDimmerLights_AdjGo
  5328  084D  0008               	return
  5329  084E                     __end_of_Sw_DimmerAdjFunc:	
  5330                           
  5331                           	psect	text13
  5332  1180                     __ptext13:	
  5333 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5334 ;; Defined at:
  5335 ;;		line 722 in file "../src/Dimmer_B1.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;  lights          1    wreg     unsigned char 
  5338 ;;  command         1    2[BANK0 ] unsigned char 
  5339 ;; Auto vars:     Size  Location     Type
  5340 ;;  lights          1    3[BANK0 ] unsigned char 
  5341 ;; Return value:  Size  Location     Type
  5342 ;;		None               void
  5343 ;; Registers used:
  5344 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5345 ;; Tracked objects:
  5346 ;;		On entry : 0/0
  5347 ;;		On exit  : 0/0
  5348 ;;		Unchanged: 0/0
  5349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5350 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5353 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5354 ;;Total ram usage:        2 bytes
  5355 ;; Hardware stack levels used:    1
  5356 ;; Hardware stack levels required when called:    6
  5357 ;; This function calls:
  5358 ;;		_DimmerLightsPointSelect
  5359 ;; This function is called by:
  5360 ;;		_Sw_DimmerOffFunc
  5361 ;;		_Sw_DimmerAdjFunc
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           
  5366                           ;psect for function _setDimmerLights_TriggerAdj
  5367  1180                     _setDimmerLights_TriggerAdj:	
  5368                           
  5369                           ;incstack = 0
  5370                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5371                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5372  1180  0020               	movlb	0	; select bank0
  5373  1181  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5374                           
  5375                           ;Dimmer_B1.c: 724: DimmerLightsPointSelect(lights);
  5376  1182  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5377  1183  3191  21E8         	fcall	_DimmerLightsPointSelect
  5378                           
  5379                           ;Dimmer_B1.c: 725: DimmerLights->TriggerAdj = command;
  5380  1185  0879               	movf	_DimmerLights,w
  5381  1186  3E08               	addlw	8
  5382  1187  0086               	movwf	6
  5383  1188  3001               	movlw	1	; select bank2/3
  5384  1189  0087               	movwf	7
  5385  118A  0020               	movlb	0	; select bank0
  5386  118B  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5387  118C  1201               	bcf	1,4
  5388  118D  1D03               	skipz
  5389  118E  1601               	bsf	1,4
  5390  118F  0008               	return
  5391  1190                     __end_of_setDimmerLights_TriggerAdj:	
  5392                           
  5393                           	psect	text14
  5394  1170                     __ptext14:	
  5395 ;; *************** function _setDimmerLights_AdjGo *****************
  5396 ;; Defined at:
  5397 ;;		line 710 in file "../src/Dimmer_B1.c"
  5398 ;; Parameters:    Size  Location     Type
  5399 ;;  lights          1    wreg     unsigned char 
  5400 ;;  command         1    2[BANK0 ] unsigned char 
  5401 ;; Auto vars:     Size  Location     Type
  5402 ;;  lights          1    3[BANK0 ] unsigned char 
  5403 ;; Return value:  Size  Location     Type
  5404 ;;		None               void
  5405 ;; Registers used:
  5406 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5407 ;; Tracked objects:
  5408 ;;		On entry : 0/0
  5409 ;;		On exit  : 0/0
  5410 ;;		Unchanged: 0/0
  5411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5412 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5413 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5415 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5416 ;;Total ram usage:        2 bytes
  5417 ;; Hardware stack levels used:    1
  5418 ;; Hardware stack levels required when called:    6
  5419 ;; This function calls:
  5420 ;;		_DimmerLightsPointSelect
  5421 ;; This function is called by:
  5422 ;;		_Sw_DimmerOffFunc
  5423 ;;		_Sw_DimmerAdjFunc
  5424 ;; This function uses a non-reentrant model
  5425 ;;
  5426                           
  5427                           
  5428                           ;psect for function _setDimmerLights_AdjGo
  5429  1170                     _setDimmerLights_AdjGo:	
  5430                           
  5431                           ;incstack = 0
  5432                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5433                           ;setDimmerLights_AdjGo@lights stored from wreg
  5434  1170  0020               	movlb	0	; select bank0
  5435  1171  00A3               	movwf	setDimmerLights_AdjGo@lights
  5436                           
  5437                           ;Dimmer_B1.c: 712: DimmerLightsPointSelect(lights);
  5438  1172  0823               	movf	setDimmerLights_AdjGo@lights,w
  5439  1173  3191  21E8         	fcall	_DimmerLightsPointSelect
  5440                           
  5441                           ;Dimmer_B1.c: 713: DimmerLights->AdjGo = command;
  5442  1175  0879               	movf	_DimmerLights,w
  5443  1176  3E08               	addlw	8
  5444  1177  0086               	movwf	6
  5445  1178  3001               	movlw	1	; select bank2/3
  5446  1179  0087               	movwf	7
  5447  117A  0020               	movlb	0	; select bank0
  5448  117B  0822               	movf	setDimmerLights_AdjGo@command,w
  5449  117C  1181               	bcf	1,3
  5450  117D  1D03               	skipz
  5451  117E  1581               	bsf	1,3
  5452  117F  0008               	return
  5453  1180                     __end_of_setDimmerLights_AdjGo:	
  5454                           
  5455                           	psect	text15
  5456  10E9                     __ptext15:	
  5457 ;; *************** function _Switch_Initialization *****************
  5458 ;; Defined at:
  5459 ;;		line 41 in file "../src/Switch_B1.c"
  5460 ;; Parameters:    Size  Location     Type
  5461 ;;		None
  5462 ;; Auto vars:     Size  Location     Type
  5463 ;;		None
  5464 ;; Return value:  Size  Location     Type
  5465 ;;		None               void
  5466 ;; Registers used:
  5467 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5468 ;; Tracked objects:
  5469 ;;		On entry : 0/0
  5470 ;;		On exit  : 0/0
  5471 ;;		Unchanged: 0/0
  5472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5477 ;;Total ram usage:        0 bytes
  5478 ;; Hardware stack levels used:    1
  5479 ;; Hardware stack levels required when called:    8
  5480 ;; This function calls:
  5481 ;;		_TouchPower
  5482 ;;		_setSw_Initialization
  5483 ;; This function is called by:
  5484 ;;		_main
  5485 ;; This function uses a non-reentrant model
  5486 ;;
  5487                           
  5488                           
  5489                           ;psect for function _Switch_Initialization
  5490  10E9                     _Switch_Initialization:	
  5491                           
  5492                           ;Switch_B1.c: 42: TouchPower();
  5493                           
  5494                           ;incstack = 0
  5495                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5496  10E9  3191  2122  3190   	fcall	_TouchPower
  5497                           
  5498                           ;Switch_B1.c: 44: WPUB1 = 0;
  5499  10EC  0024               	movlb	4	; select bank4
  5500  10ED  108D               	bcf	13,1	;volatile
  5501                           
  5502                           ;Switch_B1.c: 53: setSw_Initialization(1);
  5503  10EE  3001               	movlw	1
  5504  10EF  319F  27CC  3190   	fcall	_setSw_Initialization
  5505                           
  5506                           ;Switch_B1.c: 57: setSw_Initialization(2);
  5507  10F2  3002               	movlw	2
  5508  10F3  319F  27CC         	fcall	_setSw_Initialization
  5509  10F5  0008               	return
  5510  10F6                     __end_of_Switch_Initialization:	
  5511                           
  5512                           	psect	text16
  5513  1FCC                     __ptext16:	
  5514 ;; *************** function _setSw_Initialization *****************
  5515 ;; Defined at:
  5516 ;;		line 83 in file "../src/Switch_B1.c"
  5517 ;; Parameters:    Size  Location     Type
  5518 ;;  sw              1    wreg     unsigned char 
  5519 ;; Auto vars:     Size  Location     Type
  5520 ;;  sw              1    4[BANK0 ] unsigned char 
  5521 ;; Return value:  Size  Location     Type
  5522 ;;		None               void
  5523 ;; Registers used:
  5524 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5525 ;; Tracked objects:
  5526 ;;		On entry : 0/0
  5527 ;;		On exit  : 0/0
  5528 ;;		Unchanged: 0/0
  5529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5531 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5533 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5534 ;;Total ram usage:        1 bytes
  5535 ;; Hardware stack levels used:    1
  5536 ;; Hardware stack levels required when called:    7
  5537 ;; This function calls:
  5538 ;;		_setLED
  5539 ;; This function is called by:
  5540 ;;		_Switch_Initialization
  5541 ;; This function uses a non-reentrant model
  5542 ;;
  5543                           
  5544                           
  5545                           ;psect for function _setSw_Initialization
  5546  1FCC                     _setSw_Initialization:	
  5547                           
  5548                           ;incstack = 0
  5549                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5550                           ;setSw_Initialization@sw stored from wreg
  5551  1FCC  0020               	movlb	0	; select bank0
  5552  1FCD  00A4               	movwf	setSw_Initialization@sw
  5553                           
  5554                           ;Switch_B1.c: 84: setLED(sw, 1);
  5555  1FCE  01A2               	clrf	setLED@command
  5556  1FCF  0AA2               	incf	setLED@command,f
  5557  1FD0  0824               	movf	setSw_Initialization@sw,w
  5558  1FD1  3188  20FB         	fcall	_setLED
  5559  1FD3  0008               	return
  5560  1FD4                     __end_of_setSw_Initialization:	
  5561                           
  5562                           	psect	text17
  5563  1122                     __ptext17:	
  5564 ;; *************** function _TouchPower *****************
  5565 ;; Defined at:
  5566 ;;		line 10 in file "../src/Switch_B1.c"
  5567 ;; Parameters:    Size  Location     Type
  5568 ;;		None
  5569 ;; Auto vars:     Size  Location     Type
  5570 ;;		None
  5571 ;; Return value:  Size  Location     Type
  5572 ;;		None               void
  5573 ;; Registers used:
  5574 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5575 ;; Tracked objects:
  5576 ;;		On entry : 0/0
  5577 ;;		On exit  : 0/0
  5578 ;;		Unchanged: 0/0
  5579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5584 ;;Total ram usage:        0 bytes
  5585 ;; Hardware stack levels used:    1
  5586 ;; Hardware stack levels required when called:    6
  5587 ;; This function calls:
  5588 ;;		_Timeout_Counter
  5589 ;;		_set_TimeoutCleared
  5590 ;; This function is called by:
  5591 ;;		_Switch_Initialization
  5592 ;; This function uses a non-reentrant model
  5593 ;;
  5594                           
  5595                           
  5596                           ;psect for function _TouchPower
  5597  1122                     _TouchPower:	
  5598                           
  5599                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  5600                           
  5601                           ;incstack = 0
  5602                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5603  1122  2928               	goto	l6921
  5604  1123                     l2288:	
  5605                           
  5606                           ;Switch_B1.c: 12: RC5 = 1;
  5607  1123  0020               	movlb	0	; select bank0
  5608  1124  168E               	bsf	14,5	;volatile
  5609                           
  5610                           ;Switch_B1.c: 13: Timeout_Counter();
  5611  1125  3192  225F  3191   	fcall	_Timeout_Counter
  5612  1128                     l6921:	
  5613  1128  0020               	movlb	0	; select bank0
  5614  1129  1A8E               	btfsc	14,5	;volatile
  5615  112A  292E               	goto	l6925
  5616  112B  0021               	movlb	1	; select bank1
  5617  112C  1D2D               	btfss	(_myMain^(0+128)+13),2
  5618  112D  2923               	goto	l2288
  5619  112E                     l6925:	
  5620                           
  5621                           ;Switch_B1.c: 14: }
  5622                           ;Switch_B1.c: 15: set_TimeoutCleared();
  5623  112E  319F  278F         	fcall	_set_TimeoutCleared
  5624  1130  0008               	return
  5625  1131                     __end_of_TouchPower:	
  5626                           
  5627                           	psect	text18
  5628  1F7C                     __ptext18:	
  5629 ;; *************** function _RF_Main *****************
  5630 ;; Defined at:
  5631 ;;		line 16 in file "../src/RF_Control_B1.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;		None
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;		None
  5636 ;; Return value:  Size  Location     Type
  5637 ;;		None               void
  5638 ;; Registers used:
  5639 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5640 ;; Tracked objects:
  5641 ;;		On entry : 0/0
  5642 ;;		On exit  : 0/0
  5643 ;;		Unchanged: 0/0
  5644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5648 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5649 ;;Total ram usage:        0 bytes
  5650 ;; Hardware stack levels used:    1
  5651 ;; Hardware stack levels required when called:   14
  5652 ;; This function calls:
  5653 ;;		_setRF_Main
  5654 ;; This function is called by:
  5655 ;;		_main
  5656 ;; This function uses a non-reentrant model
  5657 ;;
  5658                           
  5659                           
  5660                           ;psect for function _RF_Main
  5661  1F7C                     _RF_Main:	
  5662                           
  5663                           ;RF_Control_B1.c: 18: setRF_Main();
  5664                           
  5665                           ;incstack = 0
  5666                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5667  1F7C  3183  23EA         	fcall	_setRF_Main
  5668  1F7E  0008               	return
  5669  1F7F                     __end_of_RF_Main:	
  5670                           
  5671                           	psect	text19
  5672  03EA                     __ptext19:	
  5673 ;; *************** function _setRF_Main *****************
  5674 ;; Defined at:
  5675 ;;		line 52 in file "../src/RF_Control_B1.c"
  5676 ;; Parameters:    Size  Location     Type
  5677 ;;		None
  5678 ;; Auto vars:     Size  Location     Type
  5679 ;;  Receive_OK      1    0        unsigned char 
  5680 ;;  loop_f          1    0        unsigned char 
  5681 ;; Return value:  Size  Location     Type
  5682 ;;		None               void
  5683 ;; Registers used:
  5684 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5691 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5692 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5693 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5694 ;;Total ram usage:        2 bytes
  5695 ;; Hardware stack levels used:    1
  5696 ;; Hardware stack levels required when called:   13
  5697 ;; This function calls:
  5698 ;;		_CC2500_ReadStatus
  5699 ;;		_CC2500_RxData
  5700 ;;		_CC2500_TxData
  5701 ;;		_CC2500_WriteCommand
  5702 ;;		_getBuz_GO
  5703 ;;		_getRxData
  5704 ;; This function is called by:
  5705 ;;		_RF_Main
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           
  5710                           ;psect for function _setRF_Main
  5711  03EA                     _setRF_Main:	
  5712                           
  5713                           ;RF_Control_B1.c: 53: char loop_f, Receive_OK;
  5714                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  5715                           
  5716                           ;incstack = 0
  5717                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5718  03EA  0021               	movlb	1	; select bank1
  5719  03EB  1C3C               	btfss	_RF1^(0+128),0
  5720  03EC  0008               	return
  5721                           
  5722                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  5723  03ED  3191  21A1  3183   	fcall	_getBuz_GO
  5724  03F0  0020               	movlb	0	; select bank0
  5725  03F1  0821               	movf	?_getBuz_GO+1,w
  5726  03F2  0420               	iorwf	?_getBuz_GO,w
  5727  03F3  1D03               	skipz
  5728  03F4  0008               	return
  5729                           
  5730                           ;RF_Control_B1.c: 64: RF1.Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  5731  03F5  01E8               	clrf	_setRF_Main$4463
  5732  03F6  0AE8               	incf	_setRF_Main$4463,f
  5733  03F7  1F0C               	btfss	12,6	;volatile
  5734  03F8  1A0C               	btfsc	12,4	;volatile
  5735  03F9  2BFE               	goto	l6805
  5736  03FA  1C0C               	btfss	12,0	;volatile
  5737  03FB  188D               	btfsc	13,1	;volatile
  5738  03FC  2BFE               	goto	l6805
  5739  03FD  01E8               	clrf	_setRF_Main$4463
  5740  03FE                     l6805:	
  5741  03FE  0868               	movf	_setRF_Main$4463,w
  5742  03FF  0021               	movlb	1	; select bank1
  5743  0400  13BC               	bcf	_RF1^(0+128),7
  5744  0401  1D03               	skipz
  5745  0402  17BC               	bsf	_RF1^(0+128),7
  5746                           
  5747                           ;RF_Control_B1.c: 71: if (RF1.Key == 1 && RF1.Learn == 0) {
  5748  0403  1BBC               	btfsc	_RF1^(0+128),7
  5749  0404  1B3C               	btfsc	_RF1^(0+128),6
  5750  0405  2C0B               	goto	l1879
  5751                           
  5752                           ;RF_Control_B1.c: 72: RF1.Count = 0;
  5753  0406  01BE               	clrf	(_RF1^(0+128)+2)
  5754  0407  01BF               	clrf	((_RF1+1)^(0+128)+2)
  5755                           
  5756                           ;RF_Control_B1.c: 73: RF1.Run = 1;
  5757  0408  14BD               	bsf	(_RF1^(0+128)+1),1
  5758                           
  5759                           ;RF_Control_B1.c: 74: RF1.RxStatus = 0;
  5760  0409  11BC               	bcf	_RF1^(0+128),3
  5761                           
  5762                           ;RF_Control_B1.c: 76: } else {
  5763  040A  0008               	return
  5764  040B                     l1879:	
  5765                           
  5766                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  5767  040B  18BD               	btfsc	(_RF1^(0+128)+1),1
  5768  040C  1B3C               	btfsc	_RF1^(0+128),6
  5769  040D  2C22               	goto	l6827
  5770                           
  5771                           ;RF_Control_B1.c: 78: RF1.Count++;
  5772  040E  3001               	movlw	1
  5773  040F  07BE               	addwf	(_RF1^(0+128)+2),f
  5774  0410  3000               	movlw	0
  5775  0411  3DBF               	addwfc	((_RF1+1)^(0+128)+2),f
  5776                           
  5777                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  5778  0412  3002               	movlw	2
  5779  0413  3EBC               	addlw	_RF1& (0+255)
  5780  0414  0086               	movwf	6
  5781  0415  0187               	clrf	7
  5782  0416  3F40               	moviw [0]fsr1
  5783  0417  0643               	xorwf	(_RF1^(0+128)+7),w
  5784  0418  1D03               	skipz
  5785  0419  2C1C               	goto	u6175
  5786  041A  3F41               	moviw [1]fsr1
  5787  041B  0644               	xorwf	((_RF1+1)^(0+128)+7),w
  5788  041C                     u6175:	
  5789  041C  1D03               	skipz
  5790  041D  2C94               	goto	l6881
  5791                           
  5792                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  5793  041E  01BE               	clrf	(_RF1^(0+128)+2)
  5794  041F  01BF               	clrf	((_RF1+1)^(0+128)+2)
  5795                           
  5796                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  5797  0420  10BD               	bcf	(_RF1^(0+128)+1),1
  5798                           
  5799                           ;RF_Control_B1.c: 82: }
  5800                           ;RF_Control_B1.c: 83: } else {
  5801  0421  2C94               	goto	l6881
  5802  0422                     l6827:	
  5803                           
  5804                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  5805  0422  01BE               	clrf	(_RF1^(0+128)+2)
  5806  0423  01BF               	clrf	((_RF1+1)^(0+128)+2)
  5807                           
  5808                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  5809  0424  10BD               	bcf	(_RF1^(0+128)+1),1
  5810                           
  5811                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  5812  0425  193C               	btfsc	_RF1^(0+128),2
  5813  0426  1B3C               	btfsc	_RF1^(0+128),6
  5814  0427  2C43               	goto	l1884
  5815                           
  5816                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  5817  0428  113C               	bcf	_RF1^(0+128),2
  5818                           
  5819                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  5820  0429  11BC               	bcf	_RF1^(0+128),3
  5821                           
  5822                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  5823  042A  10BC               	bcf	_RF1^(0+128),1
  5824                           
  5825                           ;RF_Control_B1.c: 92: CC2500_ReadStatus(0x3B);
  5826  042B  303B               	movlw	59
  5827  042C  3194  241E  3183   	fcall	_CC2500_ReadStatus
  5828                           
  5829                           ;RF_Control_B1.c: 93: if (s_data != 0) {
  5830  042F  0021               	movlb	1	; select bank1
  5831  0430  085A               	movf	_s_data^(0+128),w
  5832  0431  1903               	btfsc	3,2
  5833  0432  2C3F               	goto	l1885
  5834                           
  5835                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  5836  0433  3036               	movlw	54
  5837  0434  3192  22F8  3183   	fcall	_CC2500_WriteCommand
  5838                           
  5839                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x3B);
  5840  0437  303B               	movlw	59
  5841  0438  3192  22F8  3183   	fcall	_CC2500_WriteCommand
  5842                           
  5843                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x3A);
  5844  043B  303A               	movlw	58
  5845  043C  3192  22F8  3183   	fcall	_CC2500_WriteCommand
  5846  043F                     l1885:	
  5847                           
  5848                           ;RF_Control_B1.c: 97: }
  5849                           ;RF_Control_B1.c: 98: CC2500_TxData();
  5850  043F  318A  2271  3183   	fcall	_CC2500_TxData
  5851                           
  5852                           ;RF_Control_B1.c: 100: } else {
  5853  0442  2C94               	goto	l6881
  5854  0443                     l1884:	
  5855                           
  5856                           ;RF_Control_B1.c: 102: if (RF1.RxStatus == 1) {
  5857  0443  1DBC               	btfss	_RF1^(0+128),3
  5858  0444  2C7F               	goto	l1887
  5859                           
  5860                           ;RF_Control_B1.c: 103: CC2500_RxData();
  5861  0445  318C  24F5  3183   	fcall	_CC2500_RxData
  5862                           
  5863                           ;RF_Control_B1.c: 104: if (RF1.ReceiveGO == 1) {
  5864  0448  0021               	movlb	1	; select bank1
  5865  0449  1CBC               	btfss	_RF1^(0+128),1
  5866  044A  2C94               	goto	l6881
  5867                           
  5868                           ;RF_Control_B1.c: 105: RF1.ReceiveGO = 0;
  5869  044B  10BC               	bcf	_RF1^(0+128),1
  5870                           
  5871                           ;RF_Control_B1.c: 106: RF1.Correction = 0;
  5872  044C  12BD               	bcf	(_RF1^(0+128)+1),5
  5873                           
  5874                           ;RF_Control_B1.c: 107: RF1.CorrectionCounter = 0;
  5875  044D  01C6               	clrf	(_RF1^(0+128)+10)
  5876  044E  01C7               	clrf	((_RF1+1)^(0+128)+10)
  5877                           
  5878                           ;RF_Control_B1.c: 116: getRxData();
  5879  044F  318A  22D6  3183   	fcall	_getRxData
  5880                           
  5881                           ;RF_Control_B1.c: 117: RB5 = RB5 == 1 ? 0 : 1;
  5882  0452  3020               	movlw	32
  5883  0453  0020               	movlb	0	; select bank0
  5884  0454  068D               	xorwf	13,f
  5885                           
  5886                           ;RF_Control_B1.c: 120: RF1.Run = 1;
  5887  0455  0021               	movlb	1	; select bank1
  5888  0456  14BD               	bsf	(_RF1^(0+128)+1),1
  5889                           
  5890                           ;RF_Control_B1.c: 122: if (RF1.Checked == 1) {
  5891  0457  1DBD               	btfss	(_RF1^(0+128)+1),3
  5892  0458  2C66               	goto	l6865
  5893                           
  5894                           ;RF_Control_B1.c: 123: if (RF1.RunTime > 20) {
  5895  0459  3000               	movlw	0
  5896  045A  0244               	subwf	((_RF1+1)^(0+128)+7),w
  5897  045B  3015               	movlw	21
  5898  045C  1903               	skipnz
  5899  045D  0243               	subwf	(_RF1^(0+128)+7),w
  5900  045E  1C03               	skipc
  5901  045F  2C64               	goto	l6863
  5902                           
  5903                           ;RF_Control_B1.c: 124: RF1.RunTime = 20;
  5904  0460  3014               	movlw	20
  5905  0461  00C3               	movwf	(_RF1^(0+128)+7)
  5906  0462  3000               	movlw	0
  5907  0463  00C4               	movwf	(_RF1^(0+128)+8)
  5908  0464                     l6863:	
  5909                           
  5910                           ;RF_Control_B1.c: 125: }
  5911                           ;RF_Control_B1.c: 126: RF1.CheckCount = 0;
  5912  0464  01C0               	clrf	(_RF1^(0+128)+4)
  5913                           
  5914                           ;RF_Control_B1.c: 127: } else {
  5915  0465  2C94               	goto	l6881
  5916  0466                     l6865:	
  5917                           
  5918                           ;RF_Control_B1.c: 128: RF1.CheckCount++;
  5919  0466  3001               	movlw	1
  5920  0467  0020               	movlb	0	; select bank0
  5921  0468  00E7               	movwf	??_setRF_Main
  5922  0469  0867               	movf	??_setRF_Main,w
  5923  046A  0021               	movlb	1	; select bank1
  5924  046B  07C0               	addwf	(_RF1^(0+128)+4),f
  5925                           
  5926                           ;RF_Control_B1.c: 129: if (RF1.CheckCount == 2) {
  5927  046C  0840               	movf	(_RF1^(0+128)+4),w
  5928  046D  3A02               	xorlw	2
  5929  046E  1D03               	skipz
  5930  046F  2C94               	goto	l6881
  5931                           
  5932                           ;RF_Control_B1.c: 130: RF1.CheckCount = 0;
  5933  0470  01C0               	clrf	(_RF1^(0+128)+4)
  5934                           
  5935                           ;RF_Control_B1.c: 131: RF1.CheckedCounter = 0;
  5936  0471  01C1               	clrf	(_RF1^(0+128)+5)
  5937  0472  01C2               	clrf	((_RF1+1)^(0+128)+5)
  5938                           
  5939                           ;RF_Control_B1.c: 132: if (RF1.RunTime < 300) {
  5940  0473  3001               	movlw	1
  5941  0474  0244               	subwf	((_RF1+1)^(0+128)+7),w
  5942  0475  302C               	movlw	44
  5943  0476  1903               	skipnz
  5944  0477  0243               	subwf	(_RF1^(0+128)+7),w
  5945  0478  1803               	skipnc
  5946  0479  2C94               	goto	l6881
  5947                           
  5948                           ;RF_Control_B1.c: 133: RF1.RunTime += 10;
  5949  047A  300A               	movlw	10
  5950  047B  07C3               	addwf	(_RF1^(0+128)+7),f
  5951  047C  3000               	movlw	0
  5952  047D  3DC4               	addwfc	((_RF1+1)^(0+128)+7),f
  5953                           
  5954                           ;RF_Control_B1.c: 134: }
  5955                           ;RF_Control_B1.c: 135: }
  5956                           ;RF_Control_B1.c: 136: }
  5957                           ;RF_Control_B1.c: 137: }
  5958                           ;RF_Control_B1.c: 138: } else {
  5959  047E  2C94               	goto	l6881
  5960  047F                     l1887:	
  5961                           
  5962                           ;RF_Control_B1.c: 140: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  5963  047F  1DBC               	btfss	_RF1^(0+128),3
  5964  0480  18BC               	btfsc	_RF1^(0+128),1
  5965  0481  2C94               	goto	l6881
  5966                           
  5967                           ;RF_Control_B1.c: 141: RF1.RxStatus = 1;
  5968  0482  15BC               	bsf	_RF1^(0+128),3
  5969                           
  5970                           ;RF_Control_B1.c: 142: RF1.Correction = 1;
  5971  0483  16BD               	bsf	(_RF1^(0+128)+1),5
  5972                           
  5973                           ;RF_Control_B1.c: 144: CC2500_WriteCommand(0x36);
  5974  0484  3036               	movlw	54
  5975  0485  3192  22F8  3183   	fcall	_CC2500_WriteCommand
  5976                           
  5977                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x3B);
  5978  0488  303B               	movlw	59
  5979  0489  3192  22F8  3183   	fcall	_CC2500_WriteCommand
  5980                           
  5981                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x3A);
  5982  048C  303A               	movlw	58
  5983  048D  3192  22F8  3183   	fcall	_CC2500_WriteCommand
  5984                           
  5985                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x34);
  5986  0490  3034               	movlw	52
  5987  0491  3192  22F8  3183   	fcall	_CC2500_WriteCommand
  5988  0494                     l6881:	
  5989                           
  5990                           ;RF_Control_B1.c: 149: }
  5991                           ;RF_Control_B1.c: 151: }
  5992                           ;RF_Control_B1.c: 152: }
  5993                           ;RF_Control_B1.c: 153: }
  5994                           ;RF_Control_B1.c: 154: if (RF1.RxStatus == 1) {
  5995  0494  0021               	movlb	1	; select bank1
  5996  0495  1DBC               	btfss	_RF1^(0+128),3
  5997  0496  2CB5               	goto	l6893
  5998                           
  5999                           ;RF_Control_B1.c: 155: RF1.CheckedCounter++;
  6000  0497  3001               	movlw	1
  6001  0498  07C1               	addwf	(_RF1^(0+128)+5),f
  6002  0499  3000               	movlw	0
  6003  049A  3DC2               	addwfc	((_RF1+1)^(0+128)+5),f
  6004                           
  6005                           ;RF_Control_B1.c: 156: if (RF1.CheckedCounter == 100) {
  6006  049B  3005               	movlw	5
  6007  049C  3EBC               	addlw	_RF1& (0+255)
  6008  049D  0086               	movwf	6
  6009  049E  0187               	clrf	7
  6010  049F  3F40               	moviw [0]fsr1
  6011  04A0  3A64               	xorlw	100
  6012  04A1  1D03               	skipz
  6013  04A2  2CA5               	goto	u6305
  6014  04A3  3F41               	moviw [1]fsr1
  6015  04A4  3A00               	xorlw	0
  6016  04A5                     u6305:	
  6017  04A5  1D03               	skipz
  6018  04A6  2CB5               	goto	l6893
  6019                           
  6020                           ;RF_Control_B1.c: 157: RF1.CheckedCounter = 0;
  6021  04A7  01C1               	clrf	(_RF1^(0+128)+5)
  6022  04A8  01C2               	clrf	((_RF1+1)^(0+128)+5)
  6023                           
  6024                           ;RF_Control_B1.c: 158: RF1.CheckCount = 0;
  6025  04A9  01C0               	clrf	(_RF1^(0+128)+4)
  6026                           
  6027                           ;RF_Control_B1.c: 159: if (RF1.RunTime > 20) {
  6028  04AA  3000               	movlw	0
  6029  04AB  0244               	subwf	((_RF1+1)^(0+128)+7),w
  6030  04AC  3015               	movlw	21
  6031  04AD  1903               	skipnz
  6032  04AE  0243               	subwf	(_RF1^(0+128)+7),w
  6033  04AF  1C03               	skipc
  6034  04B0  2CB5               	goto	l6893
  6035                           
  6036                           ;RF_Control_B1.c: 160: RF1.RunTime -= 10;
  6037  04B1  300A               	movlw	10
  6038  04B2  02C3               	subwf	(_RF1^(0+128)+7),f
  6039  04B3  3000               	movlw	0
  6040  04B4  3BC4               	subwfb	((_RF1+1)^(0+128)+7),f
  6041  04B5                     l6893:	
  6042                           
  6043                           ;RF_Control_B1.c: 161: }
  6044                           ;RF_Control_B1.c: 162: }
  6045                           ;RF_Control_B1.c: 163: }
  6046                           ;RF_Control_B1.c: 164: if (RF1.Correction == 1) {
  6047  04B5  1EBD               	btfss	(_RF1^(0+128)+1),5
  6048  04B6  0008               	return
  6049                           
  6050                           ;RF_Control_B1.c: 165: RF1.CorrectionCounter++;
  6051  04B7  3001               	movlw	1
  6052  04B8  07C6               	addwf	(_RF1^(0+128)+10),f
  6053  04B9  3000               	movlw	0
  6054  04BA  3DC7               	addwfc	((_RF1+1)^(0+128)+10),f
  6055                           
  6056                           ;RF_Control_B1.c: 166: if (RF1.CorrectionCounter >= 30000) {
  6057  04BB  3075               	movlw	117
  6058  04BC  0247               	subwf	((_RF1+1)^(0+128)+10),w
  6059  04BD  3030               	movlw	48
  6060  04BE  1903               	skipnz
  6061  04BF  0246               	subwf	(_RF1^(0+128)+10),w
  6062  04C0  1C03               	skipc
  6063  04C1  0008               	return
  6064                           
  6065                           ;RF_Control_B1.c: 167: RF1.CorrectionCounter = 0;
  6066  04C2  01C6               	clrf	(_RF1^(0+128)+10)
  6067  04C3  01C7               	clrf	((_RF1+1)^(0+128)+10)
  6068                           
  6069                           ;RF_Control_B1.c: 168: RF1.RxStatus = 0;
  6070  04C4  11BC               	bcf	_RF1^(0+128),3
  6071                           
  6072                           ;RF_Control_B1.c: 169: RF1.ReceiveGO = 0;
  6073  04C5  10BC               	bcf	_RF1^(0+128),1
  6074  04C6  0008               	return
  6075  04C7                     __end_of_setRF_Main:	
  6076                           
  6077                           	psect	text20
  6078  0AD6                     __ptext20:	
  6079 ;; *************** function _getRxData *****************
  6080 ;; Defined at:
  6081 ;;		line 252 in file "../src/RF_Control_B1.c"
  6082 ;; Parameters:    Size  Location     Type
  6083 ;;		None
  6084 ;; Auto vars:     Size  Location     Type
  6085 ;;		None
  6086 ;; Return value:  Size  Location     Type
  6087 ;;		None               void
  6088 ;; Registers used:
  6089 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6090 ;; Tracked objects:
  6091 ;;		On entry : 0/0
  6092 ;;		On exit  : 0/0
  6093 ;;		Unchanged: 0/0
  6094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6099 ;;Total ram usage:        0 bytes
  6100 ;; Hardware stack levels used:    1
  6101 ;; Hardware stack levels required when called:   12
  6102 ;; This function calls:
  6103 ;;		_setControl_Lights_Table
  6104 ;;		_setLog_Code
  6105 ;; This function is called by:
  6106 ;;		_setRF_Main
  6107 ;; This function uses a non-reentrant model
  6108 ;;
  6109                           
  6110                           
  6111                           ;psect for function _getRxData
  6112  0AD6                     _getRxData:	
  6113                           
  6114                           ;RF_Control_B1.c: 253: if (RF1.Learn == 1) {
  6115                           
  6116                           ;incstack = 0
  6117                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6118  0AD6  0021               	movlb	1	; select bank1
  6119  0AD7  1F3C               	btfss	_RF1^(0+128),6
  6120  0AD8  2AE9               	goto	l6319
  6121                           
  6122                           ;RF_Control_B1.c: 254: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6123  0AD9  0022               	movlb	2	; select bank2
  6124  0ADA  08A0               	movf	_RF_Data^(0+256),f
  6125  0ADB  1D03               	skipz
  6126  0ADC  2AE6               	goto	l1918
  6127  0ADD  0821               	movf	(_RF_Data^(0+256)+1),w
  6128  0ADE  3A64               	xorlw	100
  6129  0ADF  1D03               	skipz
  6130  0AE0  2AE6               	goto	l1918
  6131                           
  6132                           ;RF_Control_B1.c: 255: setLog_Code();
  6133  0AE1  3195  258C         	fcall	_setLog_Code
  6134                           
  6135                           ;RF_Control_B1.c: 256: RF1.Checked = 1;
  6136  0AE3  0021               	movlb	1	; select bank1
  6137  0AE4  15BD               	bsf	(_RF1^(0+128)+1),3
  6138                           
  6139                           ;RF_Control_B1.c: 257: } else {
  6140  0AE5  0008               	return
  6141  0AE6                     l1918:	
  6142                           
  6143                           ;RF_Control_B1.c: 258: RF1.Checked = 0;
  6144  0AE6  0021               	movlb	1	; select bank1
  6145  0AE7  11BD               	bcf	(_RF1^(0+128)+1),3
  6146                           
  6147                           ;RF_Control_B1.c: 259: }
  6148                           ;RF_Control_B1.c: 260: } else {
  6149  0AE8  0008               	return
  6150  0AE9                     l6319:	
  6151                           
  6152                           ;RF_Control_B1.c: 261: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6153  0AE9  0022               	movlb	2	; select bank2
  6154  0AEA  08A0               	movf	_RF_Data^(0+256),f
  6155  0AEB  1D03               	skipz
  6156  0AEC  2B27               	goto	l6341
  6157  0AED  0821               	movf	(_RF_Data^(0+256)+1),w
  6158  0AEE  3A02               	xorlw	2
  6159  0AEF  1D03               	skipz
  6160  0AF0  2B27               	goto	l6341
  6161                           
  6162                           ;RF_Control_B1.c: 263: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6163  0AF1  082C               	movf	(_RF_Data^(0+256)+12),w
  6164  0AF2  3AFF               	xorlw	255
  6165  0AF3  1D03               	skipz
  6166  0AF4  2B01               	goto	l6331
  6167  0AF5  082D               	movf	(_RF_Data^(0+256)+13),w
  6168  0AF6  3AFF               	xorlw	255
  6169  0AF7  1D03               	skipz
  6170  0AF8  2B01               	goto	l6331
  6171  0AF9  082E               	movf	(_RF_Data^(0+256)+14),w
  6172  0AFA  3AFF               	xorlw	255
  6173  0AFB  1D03               	skipz
  6174  0AFC  2B01               	goto	l6331
  6175                           
  6176                           ;RF_Control_B1.c: 264: __nop();
  6177  0AFD  0000               	nop
  6178                           
  6179                           ;RF_Control_B1.c: 265: RF1.Checked = 0;
  6180  0AFE  0021               	movlb	1	; select bank1
  6181  0AFF  11BD               	bcf	(_RF1^(0+128)+1),3
  6182                           
  6183                           ;RF_Control_B1.c: 266: } else {
  6184  0B00  0008               	return
  6185  0B01                     l6331:	
  6186                           
  6187                           ;RF_Control_B1.c: 267: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6188  0B01  0020               	movlb	0	; select bank0
  6189  0B02  086E               	movf	_product,w
  6190  0B03  3E0C               	addlw	12
  6191  0B04  0086               	movwf	6
  6192  0B05  3001               	movlw	1	; select bank2/3
  6193  0B06  0087               	movwf	7
  6194  0B07  0022               	movlb	2	; select bank2
  6195  0B08  082C               	movf	(_RF_Data^(0+256)+12),w
  6196  0B09  0601               	xorwf	1,w
  6197  0B0A  1D03               	skipz
  6198  0B0B  0008               	return
  6199  0B0C  0020               	movlb	0	; select bank0
  6200  0B0D  086E               	movf	_product,w
  6201  0B0E  3E0D               	addlw	13
  6202  0B0F  0086               	movwf	6
  6203  0B10  3001               	movlw	1	; select bank2/3
  6204  0B11  0087               	movwf	7
  6205  0B12  0022               	movlb	2	; select bank2
  6206  0B13  082D               	movf	(_RF_Data^(0+256)+13),w
  6207  0B14  0601               	xorwf	1,w
  6208  0B15  1D03               	skipz
  6209  0B16  0008               	return
  6210  0B17  0020               	movlb	0	; select bank0
  6211  0B18  086E               	movf	_product,w
  6212  0B19  3E0E               	addlw	14
  6213  0B1A  0086               	movwf	6
  6214  0B1B  3001               	movlw	1	; select bank2/3
  6215  0B1C  0087               	movwf	7
  6216  0B1D  0022               	movlb	2	; select bank2
  6217  0B1E  082E               	movf	(_RF_Data^(0+256)+14),w
  6218  0B1F  0601               	xorwf	1,w
  6219  0B20  1D03               	skipz
  6220  0B21  0008               	return
  6221                           
  6222                           ;RF_Control_B1.c: 268: setControl_Lights_Table();
  6223  0B22  318E  26E5         	fcall	_setControl_Lights_Table
  6224                           
  6225                           ;RF_Control_B1.c: 269: RF1.Checked = 1;
  6226  0B24  0021               	movlb	1	; select bank1
  6227  0B25  15BD               	bsf	(_RF1^(0+128)+1),3
  6228                           
  6229                           ;RF_Control_B1.c: 270: }
  6230                           ;RF_Control_B1.c: 271: }
  6231                           ;RF_Control_B1.c: 272: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6232  0B26  0008               	return
  6233  0B27                     l6341:	
  6234  0B27  0022               	movlb	2	; select bank2
  6235  0B28  0820               	movf	_RF_Data^(0+256),w
  6236  0B29  3AFF               	xorlw	255
  6237  0B2A  1D03               	skipz
  6238  0B2B  2B32               	goto	l6347
  6239  0B2C  0821               	movf	(_RF_Data^(0+256)+1),w
  6240  0B2D  3A02               	xorlw	2
  6241  0B2E  1D03               	skipz
  6242  0B2F  2B32               	goto	l6347
  6243                           
  6244                           ;RF_Control_B1.c: 273: __nop();
  6245  0B30  0000               	nop
  6246                           
  6247                           ;RF_Control_B1.c: 274: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6248  0B31  0008               	return
  6249  0B32                     l6347:	
  6250  0B32  0022               	movlb	2	; select bank2
  6251  0B33  08A0               	movf	_RF_Data^(0+256),f
  6252  0B34  1D03               	skipz
  6253  0B35  2B3C               	goto	l1928
  6254  0B36  0821               	movf	(_RF_Data^(0+256)+1),w
  6255  0B37  3A65               	xorlw	101
  6256  0B38  1D03               	skipz
  6257  0B39  2B3C               	goto	l1928
  6258                           
  6259                           ;RF_Control_B1.c: 275: __nop();
  6260  0B3A  0000               	nop
  6261                           
  6262                           ;RF_Control_B1.c: 276: } else {
  6263  0B3B  0008               	return
  6264  0B3C                     l1928:	
  6265                           
  6266                           ;RF_Control_B1.c: 277: RF1.Checked = 0;
  6267  0B3C  0021               	movlb	1	; select bank1
  6268  0B3D  11BD               	bcf	(_RF1^(0+128)+1),3
  6269  0B3E  0008               	return
  6270  0B3F                     __end_of_getRxData:	
  6271                           
  6272                           	psect	text21
  6273  158C                     __ptext21:	
  6274 ;; *************** function _setLog_Code *****************
  6275 ;; Defined at:
  6276 ;;		line 287 in file "../src/RF_Control_B1.c"
  6277 ;; Parameters:    Size  Location     Type
  6278 ;;		None
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;		None
  6281 ;; Return value:  Size  Location     Type
  6282 ;;		None               void
  6283 ;; Registers used:
  6284 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6285 ;; Tracked objects:
  6286 ;;		On entry : 0/0
  6287 ;;		On exit  : 0/0
  6288 ;;		Unchanged: 0/0
  6289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6292 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6293 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6294 ;;Total ram usage:        1 bytes
  6295 ;; Hardware stack levels used:    1
  6296 ;; Hardware stack levels required when called:    7
  6297 ;; This function calls:
  6298 ;;		_setBuz
  6299 ;; This function is called by:
  6300 ;;		_getRxData
  6301 ;; This function uses a non-reentrant model
  6302 ;;
  6303                           
  6304                           
  6305                           ;psect for function _setLog_Code
  6306  158C                     _setLog_Code:	
  6307                           
  6308                           ;RF_Control_B1.c: 288: product->Data[12]=RF_Data[12];
  6309                           
  6310                           ;incstack = 0
  6311                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6312  158C  0022               	movlb	2	; select bank2
  6313  158D  082C               	movf	(_RF_Data^(0+256)+12),w
  6314  158E  0020               	movlb	0	; select bank0
  6315  158F  00AD               	movwf	??_setLog_Code
  6316  1590  086E               	movf	_product,w
  6317  1591  3E0C               	addlw	12
  6318  1592  0086               	movwf	6
  6319  1593  3001               	movlw	1	; select bank2/3
  6320  1594  0087               	movwf	7
  6321  1595  082D               	movf	??_setLog_Code,w
  6322  1596  0081               	movwf	1
  6323                           
  6324                           ;RF_Control_B1.c: 289: product->Data[13]=RF_Data[13];
  6325  1597  0022               	movlb	2	; select bank2
  6326  1598  082D               	movf	(_RF_Data^(0+256)+13),w
  6327  1599  0020               	movlb	0	; select bank0
  6328  159A  00AD               	movwf	??_setLog_Code
  6329  159B  086E               	movf	_product,w
  6330  159C  3E0D               	addlw	13
  6331  159D  0086               	movwf	6
  6332  159E  3001               	movlw	1	; select bank2/3
  6333  159F  0087               	movwf	7
  6334  15A0  082D               	movf	??_setLog_Code,w
  6335  15A1  0081               	movwf	1
  6336                           
  6337                           ;RF_Control_B1.c: 290: product->Data[14]=RF_Data[14];
  6338  15A2  0022               	movlb	2	; select bank2
  6339  15A3  082E               	movf	(_RF_Data^(0+256)+14),w
  6340  15A4  0020               	movlb	0	; select bank0
  6341  15A5  00AD               	movwf	??_setLog_Code
  6342  15A6  086E               	movf	_product,w
  6343  15A7  3E0E               	addlw	14
  6344  15A8  0086               	movwf	6
  6345  15A9  3001               	movlw	1	; select bank2/3
  6346  15AA  0087               	movwf	7
  6347  15AB  082D               	movf	??_setLog_Code,w
  6348  15AC  0081               	movwf	1
  6349                           
  6350                           ;RF_Control_B1.c: 291: setBuz(1, 100);
  6351  15AD  3064               	movlw	100
  6352  15AE  00A9               	movwf	setBuz@time
  6353  15AF  3000               	movlw	0
  6354  15B0  00AA               	movwf	setBuz@time+1
  6355  15B1  3001               	movlw	1
  6356  15B2  3188  20A2  3195   	fcall	_setBuz
  6357                           
  6358                           ;RF_Control_B1.c: 292: RF1.Learn = 0;
  6359  15B5  0021               	movlb	1	; select bank1
  6360  15B6  133C               	bcf	_RF1^(0+128),6
  6361                           
  6362                           ;RF_Control_B1.c: 293: if (myMain.First) {
  6363  15B7  1EA0               	btfss	_myMain^(0+128),5
  6364  15B8  2DBB               	goto	l1933
  6365                           
  6366                           ;RF_Control_B1.c: 294: Memory.LoopSave=1;
  6367  15B9  0023               	movlb	3	; select bank3
  6368  15BA  1544               	bsf	(_Memory^(0+384)+36),2
  6369  15BB                     l1933:	
  6370                           
  6371                           ;RF_Control_B1.c: 295: }
  6372                           ;RF_Control_B1.c: 296: Memory.Modify=1;
  6373  15BB  0023               	movlb	3	; select bank3
  6374  15BC  1444               	bsf	(_Memory^(0+384)+36),0
  6375  15BD  0008               	return
  6376  15BE                     __end_of_setLog_Code:	
  6377                           
  6378                           	psect	text22
  6379  0EE5                     __ptext22:	
  6380 ;; *************** function _setControl_Lights_Table *****************
  6381 ;; Defined at:
  6382 ;;		line 300 in file "../src/RF_Control_B1.c"
  6383 ;; Parameters:    Size  Location     Type
  6384 ;;		None
  6385 ;; Auto vars:     Size  Location     Type
  6386 ;;		None
  6387 ;; Return value:  Size  Location     Type
  6388 ;;		None               void
  6389 ;; Registers used:
  6390 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6391 ;; Tracked objects:
  6392 ;;		On entry : 0/0
  6393 ;;		On exit  : 0/0
  6394 ;;		Unchanged: 0/0
  6395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6400 ;;Total ram usage:        0 bytes
  6401 ;; Hardware stack levels used:    1
  6402 ;; Hardware stack levels required when called:   11
  6403 ;; This function calls:
  6404 ;;		_setBuz
  6405 ;;		_setDimmerLights
  6406 ;;		_setRFSW_AdjControl
  6407 ;;		_setRFSW_Control
  6408 ;;		_setRFSW_Status
  6409 ;;		_setSw_Status
  6410 ;;		_setTxData
  6411 ;; This function is called by:
  6412 ;;		_getRxData
  6413 ;; This function uses a non-reentrant model
  6414 ;;
  6415                           
  6416                           
  6417                           ;psect for function _setControl_Lights_Table
  6418  0EE5                     _setControl_Lights_Table:	
  6419                           
  6420                           ;RF_Control_B1.c: 301: if (RF_Data[15] == 0x00) {
  6421                           
  6422                           ;incstack = 0
  6423                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6424  0EE5  0022               	movlb	2	; select bank2
  6425  0EE6  08AF               	movf	(_RF_Data^(0+256)+15),f
  6426  0EE7  1D03               	skipz
  6427  0EE8  2F31               	goto	l6029
  6428                           
  6429                           ;RF_Control_B1.c: 303: setDimmerLights(1, 0);
  6430  0EE9  0020               	movlb	0	; select bank0
  6431  0EEA  01A4               	clrf	setDimmerLights@status
  6432  0EEB  3001               	movlw	1
  6433  0EEC  318D  25D8  318E   	fcall	_setDimmerLights
  6434                           
  6435                           ;RF_Control_B1.c: 304: setRFSW_Status(1, 0);
  6436  0EEF  0020               	movlb	0	; select bank0
  6437  0EF0  01A2               	clrf	setRFSW_Status@command
  6438  0EF1  3001               	movlw	1
  6439  0EF2  3191  2104  318E   	fcall	_setRFSW_Status
  6440                           
  6441                           ;RF_Control_B1.c: 305: setSw_Status(1, 0);
  6442  0EF5  0020               	movlb	0	; select bank0
  6443  0EF6  01A2               	clrf	setSw_Status@command
  6444  0EF7  3001               	movlw	1
  6445  0EF8  3191  2113  318E   	fcall	_setSw_Status
  6446                           
  6447                           ;RF_Control_B1.c: 308: setDimmerLights(2, 0);
  6448  0EFB  0020               	movlb	0	; select bank0
  6449  0EFC  01A4               	clrf	setDimmerLights@status
  6450  0EFD  3002               	movlw	2
  6451  0EFE  318D  25D8  318E   	fcall	_setDimmerLights
  6452                           
  6453                           ;RF_Control_B1.c: 309: setRFSW_Status(2, 0);
  6454  0F01  0020               	movlb	0	; select bank0
  6455  0F02  01A2               	clrf	setRFSW_Status@command
  6456  0F03  3002               	movlw	2
  6457  0F04  3191  2104  318E   	fcall	_setRFSW_Status
  6458                           
  6459                           ;RF_Control_B1.c: 310: setSw_Status(2, 0);
  6460  0F07  0020               	movlb	0	; select bank0
  6461  0F08  01A2               	clrf	setSw_Status@command
  6462  0F09  3002               	movlw	2
  6463  0F0A  3191  2113  318E   	fcall	_setSw_Status
  6464                           
  6465                           ;RF_Control_B1.c: 318: product->Data[9]=0;
  6466  0F0D  0020               	movlb	0	; select bank0
  6467  0F0E  086E               	movf	_product,w
  6468  0F0F  3E09               	addlw	9
  6469  0F10  0086               	movwf	6
  6470  0F11  3001               	movlw	1	; select bank2/3
  6471  0F12  0087               	movwf	7
  6472  0F13  0181               	clrf	1
  6473                           
  6474                           ;RF_Control_B1.c: 319: product->Data[11]=0;
  6475  0F14  086E               	movf	_product,w
  6476  0F15  3E0B               	addlw	11
  6477  0F16  0086               	movwf	6
  6478  0F17  3001               	movlw	1	; select bank2/3
  6479  0F18  0087               	movwf	7
  6480  0F19  0181               	clrf	1
  6481                           
  6482                           ;RF_Control_B1.c: 320: product->Data[15]=0;
  6483  0F1A  086E               	movf	_product,w
  6484  0F1B  3E0F               	addlw	15
  6485  0F1C  0086               	movwf	6
  6486  0F1D  3001               	movlw	1	; select bank2/3
  6487  0F1E  0087               	movwf	7
  6488  0F1F  0181               	clrf	1
  6489                           
  6490                           ;RF_Control_B1.c: 321: product->Data[17]=0;
  6491  0F20  086E               	movf	_product,w
  6492  0F21  3E11               	addlw	17
  6493  0F22  0086               	movwf	6
  6494  0F23  3001               	movlw	1	; select bank2/3
  6495  0F24  0087               	movwf	7
  6496  0F25  0181               	clrf	1
  6497                           
  6498                           ;RF_Control_B1.c: 322: setBuz(1, 100);
  6499  0F26  3064               	movlw	100
  6500  0F27  00A9               	movwf	setBuz@time
  6501  0F28  3000               	movlw	0
  6502  0F29  00AA               	movwf	setBuz@time+1
  6503  0F2A  3001               	movlw	1
  6504  0F2B  3188  20A2  318E   	fcall	_setBuz
  6505                           
  6506                           ;RF_Control_B1.c: 323: setTxData();
  6507  0F2E  3185  258E         	fcall	_setTxData
  6508                           
  6509                           ;RF_Control_B1.c: 324: } else if (RF_Data[15] == 0x20) {
  6510  0F30  0008               	return
  6511  0F31                     l6029:	
  6512  0F31  0022               	movlb	2	; select bank2
  6513  0F32  082F               	movf	(_RF_Data^(0+256)+15),w
  6514  0F33  3A20               	xorlw	32
  6515  0F34  1D03               	skipz
  6516  0F35  2F4C               	goto	l6035
  6517                           
  6518                           ;RF_Control_B1.c: 325: product->Data[9]=0;
  6519  0F36  0020               	movlb	0	; select bank0
  6520  0F37  086E               	movf	_product,w
  6521  0F38  3E09               	addlw	9
  6522  0F39  0086               	movwf	6
  6523  0F3A  3001               	movlw	1	; select bank2/3
  6524  0F3B  0087               	movwf	7
  6525  0F3C  0181               	clrf	1
  6526                           
  6527                           ;RF_Control_B1.c: 326: product->Data[11]=0;
  6528  0F3D  086E               	movf	_product,w
  6529  0F3E  3E0B               	addlw	11
  6530  0F3F  0086               	movwf	6
  6531  0F40  3001               	movlw	1	; select bank2/3
  6532  0F41  0087               	movwf	7
  6533  0F42  0181               	clrf	1
  6534                           
  6535                           ;RF_Control_B1.c: 327: product->Data[17]=0;
  6536  0F43  086E               	movf	_product,w
  6537  0F44  3E11               	addlw	17
  6538  0F45  0086               	movwf	6
  6539  0F46  3001               	movlw	1	; select bank2/3
  6540  0F47  0087               	movwf	7
  6541  0F48  0181               	clrf	1
  6542                           
  6543                           ;RF_Control_B1.c: 328: setTxData();
  6544  0F49  3185  258E         	fcall	_setTxData
  6545                           
  6546                           ;RF_Control_B1.c: 329: }
  6547  0F4B  0008               	return
  6548  0F4C                     l6035:	
  6549                           
  6550                           ;RF_Control_B1.c: 331: else if (RF_Data[15] == 0x01) {
  6551  0F4C  0022               	movlb	2	; select bank2
  6552  0F4D  082F               	movf	(_RF_Data^(0+256)+15),w
  6553  0F4E  3A01               	xorlw	1
  6554  0F4F  1D03               	skipz
  6555  0F50  2F55               	goto	l6039
  6556                           
  6557                           ;RF_Control_B1.c: 332: setRFSW_Control(1);
  6558  0F51  3001               	movlw	1
  6559  0F52  318F  2770         	fcall	_setRFSW_Control
  6560                           
  6561                           ;RF_Control_B1.c: 333: }
  6562  0F54  0008               	return
  6563  0F55                     l6039:	
  6564                           
  6565                           ;RF_Control_B1.c: 335: else if (RF_Data[15] == 0x11) {
  6566  0F55  0022               	movlb	2	; select bank2
  6567  0F56  082F               	movf	(_RF_Data^(0+256)+15),w
  6568  0F57  3A11               	xorlw	17
  6569  0F58  1D03               	skipz
  6570  0F59  2F5E               	goto	l6043
  6571                           
  6572                           ;RF_Control_B1.c: 336: setRFSW_AdjControl(1);
  6573  0F5A  3001               	movlw	1
  6574  0F5B  3195  25F3         	fcall	_setRFSW_AdjControl
  6575                           
  6576                           ;RF_Control_B1.c: 337: }
  6577  0F5D  0008               	return
  6578  0F5E                     l6043:	
  6579                           
  6580                           ;RF_Control_B1.c: 342: else if (RF_Data[15] == 0x02) {
  6581  0F5E  0022               	movlb	2	; select bank2
  6582  0F5F  082F               	movf	(_RF_Data^(0+256)+15),w
  6583  0F60  3A02               	xorlw	2
  6584  0F61  1D03               	skipz
  6585  0F62  2F67               	goto	l6047
  6586                           
  6587                           ;RF_Control_B1.c: 343: setRFSW_Control(2);
  6588  0F63  3002               	movlw	2
  6589  0F64  318F  2770         	fcall	_setRFSW_Control
  6590                           
  6591                           ;RF_Control_B1.c: 344: }
  6592  0F66  0008               	return
  6593  0F67                     l6047:	
  6594                           
  6595                           ;RF_Control_B1.c: 346: else if (RF_Data[15] == 0x21) {
  6596  0F67  0022               	movlb	2	; select bank2
  6597  0F68  082F               	movf	(_RF_Data^(0+256)+15),w
  6598  0F69  3A21               	xorlw	33
  6599  0F6A  1D03               	skipz
  6600  0F6B  0008               	return
  6601                           
  6602                           ;RF_Control_B1.c: 347: setRFSW_AdjControl(2);
  6603  0F6C  3002               	movlw	2
  6604  0F6D  3195  25F3         	fcall	_setRFSW_AdjControl
  6605  0F6F  0008               	return
  6606  0F70                     __end_of_setControl_Lights_Table:	
  6607                           
  6608                           	psect	text23
  6609  0F70                     __ptext23:	
  6610 ;; *************** function _setRFSW_Control *****************
  6611 ;; Defined at:
  6612 ;;		line 388 in file "../src/RF_Control_B1.c"
  6613 ;; Parameters:    Size  Location     Type
  6614 ;;  sw              1    wreg     unsigned char 
  6615 ;; Auto vars:     Size  Location     Type
  6616 ;;  sw              1   67[BANK0 ] unsigned char 
  6617 ;; Return value:  Size  Location     Type
  6618 ;;		None               void
  6619 ;; Registers used:
  6620 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6621 ;; Tracked objects:
  6622 ;;		On entry : 0/0
  6623 ;;		On exit  : 0/0
  6624 ;;		Unchanged: 0/0
  6625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6627 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6628 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6629 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6630 ;;Total ram usage:        2 bytes
  6631 ;; Hardware stack levels used:    1
  6632 ;; Hardware stack levels required when called:    9
  6633 ;; This function calls:
  6634 ;;		_RfSWPointSelect
  6635 ;;		_setBuz
  6636 ;;		_setDelayOff_GO
  6637 ;;		_setDimmerLights_Switch
  6638 ;;		_setDimmerLights_Trigger
  6639 ;;		_setRF_DimmerLights
  6640 ;;		_setSw_Status
  6641 ;;		_setTxData
  6642 ;; This function is called by:
  6643 ;;		_setControl_Lights_Table
  6644 ;; This function uses a non-reentrant model
  6645 ;;
  6646                           
  6647                           
  6648                           ;psect for function _setRFSW_Control
  6649  0F70                     _setRFSW_Control:	
  6650                           
  6651                           ;incstack = 0
  6652                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6653                           ;setRFSW_Control@sw stored from wreg
  6654  0F70  0020               	movlb	0	; select bank0
  6655  0F71  00E3               	movwf	setRFSW_Control@sw
  6656                           
  6657                           ;RF_Control_B1.c: 389: RfSWPointSelect(sw);
  6658  0F72  0863               	movf	setRFSW_Control@sw,w
  6659  0F73  3192  229E  318F   	fcall	_RfSWPointSelect
  6660                           
  6661                           ;RF_Control_B1.c: 390: if (RFSW->Status == 0) {
  6662  0F76  0021               	movlb	1	; select bank1
  6663  0F77  0854               	movf	_RFSW^(0+128),w
  6664  0F78  0086               	movwf	6
  6665  0F79  0187               	clrf	7
  6666  0F7A  1801               	btfsc	1,0
  6667  0F7B  2FB2               	goto	l5913
  6668                           
  6669                           ;RF_Control_B1.c: 391: if (RF_Data[16] == 0x80) {
  6670  0F7C  0022               	movlb	2	; select bank2
  6671  0F7D  0830               	movf	(_RF_Data^(0+256)+16),w
  6672  0F7E  3A80               	xorlw	128
  6673  0F7F  1D03               	skipz
  6674  0F80  2F8E               	goto	l5903
  6675                           
  6676                           ;RF_Control_B1.c: 392: setDelayOff_GO(sw, 1, RF_Data[17]);
  6677  0F81  0020               	movlb	0	; select bank0
  6678  0F82  01AA               	clrf	setDelayOff_GO@command
  6679  0F83  0AAA               	incf	setDelayOff_GO@command,f
  6680  0F84  0022               	movlb	2	; select bank2
  6681  0F85  0831               	movf	(_RF_Data^(0+256)+17),w
  6682  0F86  0020               	movlb	0	; select bank0
  6683  0F87  00E2               	movwf	??_setRFSW_Control
  6684  0F88  0862               	movf	??_setRFSW_Control,w
  6685  0F89  00AB               	movwf	setDelayOff_GO@value
  6686  0F8A  0863               	movf	setRFSW_Control@sw,w
  6687  0F8B  3189  21B1  318F   	fcall	_setDelayOff_GO
  6688  0F8E                     l5903:	
  6689                           
  6690                           ;RF_Control_B1.c: 393: }
  6691                           ;RF_Control_B1.c: 394: RFSW->Status = 1;
  6692  0F8E  0021               	movlb	1	; select bank1
  6693  0F8F  0854               	movf	_RFSW^(0+128),w
  6694  0F90  0086               	movwf	6
  6695  0F91  0187               	clrf	7
  6696  0F92  1401               	bsf	1,0
  6697                           
  6698                           ;RF_Control_B1.c: 395: setSw_Status(sw, 1);
  6699  0F93  0020               	movlb	0	; select bank0
  6700  0F94  01A2               	clrf	setSw_Status@command
  6701  0F95  0AA2               	incf	setSw_Status@command,f
  6702  0F96  0863               	movf	setRFSW_Control@sw,w
  6703  0F97  3191  2113  318F   	fcall	_setSw_Status
  6704                           
  6705                           ;RF_Control_B1.c: 397: setDimmerLights_Trigger(sw, 1);
  6706  0F9A  0020               	movlb	0	; select bank0
  6707  0F9B  01A2               	clrf	setDimmerLights_Trigger@command
  6708  0F9C  0AA2               	incf	setDimmerLights_Trigger@command,f
  6709  0F9D  0863               	movf	setRFSW_Control@sw,w
  6710  0F9E  3191  2150  318F   	fcall	_setDimmerLights_Trigger
  6711                           
  6712                           ;RF_Control_B1.c: 398: setDimmerLights_Switch(sw, 1);
  6713  0FA1  0020               	movlb	0	; select bank0
  6714  0FA2  01A2               	clrf	setDimmerLights_Switch@command
  6715  0FA3  0AA2               	incf	setDimmerLights_Switch@command,f
  6716  0FA4  0863               	movf	setRFSW_Control@sw,w
  6717  0FA5  3191  2140  318F   	fcall	_setDimmerLights_Switch
  6718                           
  6719                           ;RF_Control_B1.c: 400: setRF_DimmerLights(sw, RFSW->Status);
  6720  0FA8  0021               	movlb	1	; select bank1
  6721  0FA9  0854               	movf	_RFSW^(0+128),w
  6722  0FAA  0086               	movwf	6
  6723  0FAB  0187               	clrf	7
  6724  0FAC  3000               	movlw	0
  6725  0FAD  1801               	btfsc	1,0
  6726  0FAE  3001               	movlw	1
  6727  0FAF  0020               	movlb	0	; select bank0
  6728  0FB0  00DD               	movwf	setRF_DimmerLights@on
  6729  0FB1  2FF0               	goto	L2
  6730  0FB2                     l5913:	
  6731                           ;RF_Control_B1.c: 401: } else {
  6732                           
  6733                           
  6734                           ;RF_Control_B1.c: 402: if (RF_Data[16] == 0x80) {
  6735  0FB2  0022               	movlb	2	; select bank2
  6736  0FB3  0830               	movf	(_RF_Data^(0+256)+16),w
  6737  0FB4  3A80               	xorlw	128
  6738  0FB5  1D03               	skipz
  6739  0FB6  2FC8               	goto	l5917
  6740                           
  6741                           ;RF_Control_B1.c: 403: setDelayOff_GO(sw, 1, RF_Data[17]);
  6742  0FB7  0020               	movlb	0	; select bank0
  6743  0FB8  01AA               	clrf	setDelayOff_GO@command
  6744  0FB9  0AAA               	incf	setDelayOff_GO@command,f
  6745  0FBA  0022               	movlb	2	; select bank2
  6746  0FBB  0831               	movf	(_RF_Data^(0+256)+17),w
  6747  0FBC  0020               	movlb	0	; select bank0
  6748  0FBD  00E2               	movwf	??_setRFSW_Control
  6749  0FBE  0862               	movf	??_setRFSW_Control,w
  6750  0FBF  00AB               	movwf	setDelayOff_GO@value
  6751  0FC0  0863               	movf	setRFSW_Control@sw,w
  6752  0FC1  3189  21B1  318F   	fcall	_setDelayOff_GO
  6753                           
  6754                           ;RF_Control_B1.c: 404: setRF_DimmerLights(sw, 1);
  6755  0FC4  0020               	movlb	0	; select bank0
  6756  0FC5  01DD               	clrf	setRF_DimmerLights@on
  6757  0FC6  0ADD               	incf	setRF_DimmerLights@on,f
  6758  0FC7  2FF0               	goto	L2
  6759  0FC8                     l5917:	
  6760                           ;RF_Control_B1.c: 405: } else {
  6761                           
  6762                           
  6763                           ;RF_Control_B1.c: 406: RFSW->Status = 0;
  6764  0FC8  0021               	movlb	1	; select bank1
  6765  0FC9  0854               	movf	_RFSW^(0+128),w
  6766  0FCA  0086               	movwf	6
  6767  0FCB  0187               	clrf	7
  6768  0FCC  1001               	bcf	1,0
  6769                           
  6770                           ;RF_Control_B1.c: 407: setSw_Status(sw, 0);
  6771  0FCD  0020               	movlb	0	; select bank0
  6772  0FCE  01A2               	clrf	setSw_Status@command
  6773  0FCF  0863               	movf	setRFSW_Control@sw,w
  6774  0FD0  3191  2113  318F   	fcall	_setSw_Status
  6775                           
  6776                           ;RF_Control_B1.c: 409: setDimmerLights_Trigger(sw, 1);
  6777  0FD3  0020               	movlb	0	; select bank0
  6778  0FD4  01A2               	clrf	setDimmerLights_Trigger@command
  6779  0FD5  0AA2               	incf	setDimmerLights_Trigger@command,f
  6780  0FD6  0863               	movf	setRFSW_Control@sw,w
  6781  0FD7  3191  2150  318F   	fcall	_setDimmerLights_Trigger
  6782                           
  6783                           ;RF_Control_B1.c: 410: setDimmerLights_Switch(sw, RFSW->Status);
  6784  0FDA  0021               	movlb	1	; select bank1
  6785  0FDB  0854               	movf	_RFSW^(0+128),w
  6786  0FDC  0086               	movwf	6
  6787  0FDD  0187               	clrf	7
  6788  0FDE  3000               	movlw	0
  6789  0FDF  1801               	btfsc	1,0
  6790  0FE0  3001               	movlw	1
  6791  0FE1  0020               	movlb	0	; select bank0
  6792  0FE2  00A2               	movwf	setDimmerLights_Switch@command
  6793  0FE3  0863               	movf	setRFSW_Control@sw,w
  6794  0FE4  3191  2140  318F   	fcall	_setDimmerLights_Switch
  6795                           
  6796                           ;RF_Control_B1.c: 412: setDelayOff_GO(sw, 0, 0);
  6797  0FE7  0020               	movlb	0	; select bank0
  6798  0FE8  01AA               	clrf	setDelayOff_GO@command
  6799  0FE9  01AB               	clrf	setDelayOff_GO@value
  6800  0FEA  0863               	movf	setRFSW_Control@sw,w
  6801  0FEB  3189  21B1  318F   	fcall	_setDelayOff_GO
  6802                           
  6803                           ;RF_Control_B1.c: 413: setRF_DimmerLights(sw, 0);
  6804  0FEE  0020               	movlb	0	; select bank0
  6805  0FEF  01DD               	clrf	setRF_DimmerLights@on
  6806  0FF0                     L2:	
  6807  0FF0  0863               	movf	setRFSW_Control@sw,w
  6808  0FF1  318B  23AA  318F   	fcall	_setRF_DimmerLights
  6809                           
  6810                           ;RF_Control_B1.c: 414: }
  6811                           ;RF_Control_B1.c: 415: }
  6812                           ;RF_Control_B1.c: 416: setBuz(1, 100);
  6813  0FF4  3064               	movlw	100
  6814  0FF5  0020               	movlb	0	; select bank0
  6815  0FF6  00A9               	movwf	setBuz@time
  6816  0FF7  3000               	movlw	0
  6817  0FF8  00AA               	movwf	setBuz@time+1
  6818  0FF9  3001               	movlw	1
  6819  0FFA  3188  20A2  318F   	fcall	_setBuz
  6820                           
  6821                           ;RF_Control_B1.c: 417: setTxData();
  6822  0FFD  3185  258E         	fcall	_setTxData
  6823  0FFF  0008               	return
  6824  1000                     __end_of_setRFSW_Control:	
  6825                           
  6826                           	psect	text24
  6827  09B1                     __ptext24:	
  6828 ;; *************** function _setDelayOff_GO *****************
  6829 ;; Defined at:
  6830 ;;		line 86 in file "../src/DelayOff_B1.c"
  6831 ;; Parameters:    Size  Location     Type
  6832 ;;  sw              1    wreg     unsigned char 
  6833 ;;  command         1   10[BANK0 ] unsigned char 
  6834 ;;  value           1   11[BANK0 ] unsigned char 
  6835 ;; Auto vars:     Size  Location     Type
  6836 ;;  sw              1   14[BANK0 ] unsigned char 
  6837 ;; Return value:  Size  Location     Type
  6838 ;;		None               void
  6839 ;; Registers used:
  6840 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6841 ;; Tracked objects:
  6842 ;;		On entry : 0/0
  6843 ;;		On exit  : 0/0
  6844 ;;		Unchanged: 0/0
  6845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6846 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6847 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6848 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6849 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6850 ;;Total ram usage:        5 bytes
  6851 ;; Hardware stack levels used:    1
  6852 ;; Hardware stack levels required when called:    7
  6853 ;; This function calls:
  6854 ;;		_DelayOffPointSelect
  6855 ;;		_DelayTimejudge
  6856 ;; This function is called by:
  6857 ;;		_setRFSW_Control
  6858 ;;		_Sw_DimmerOffFunc
  6859 ;; This function uses a non-reentrant model
  6860 ;;
  6861                           
  6862                           
  6863                           ;psect for function _setDelayOff_GO
  6864  09B1                     _setDelayOff_GO:	
  6865                           
  6866                           ;incstack = 0
  6867                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6868                           ;setDelayOff_GO@sw stored from wreg
  6869  09B1  0020               	movlb	0	; select bank0
  6870  09B2  00AE               	movwf	setDelayOff_GO@sw
  6871                           
  6872                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  6873  09B3  082E               	movf	setDelayOff_GO@sw,w
  6874  09B4  3192  2223  3189   	fcall	_DelayOffPointSelect
  6875                           
  6876                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  6877  09B7  0878               	movf	_DelayOff,w
  6878  09B8  0086               	movwf	6
  6879  09B9  0187               	clrf	7
  6880  09BA  1C01               	btfss	1,0
  6881  09BB  0008               	return
  6882                           
  6883                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  6884  09BC  0020               	movlb	0	; select bank0
  6885  09BD  082A               	movf	setDelayOff_GO@command,w
  6886  09BE  3A01               	xorlw	1
  6887  09BF  3000               	movlw	0
  6888  09C0  1903               	skipnz
  6889  09C1  3001               	movlw	1
  6890  09C2  00AC               	movwf	??_setDelayOff_GO
  6891  09C3  0878               	movf	_DelayOff,w
  6892  09C4  0086               	movwf	6
  6893  09C5  0187               	clrf	7
  6894  09C6  0DAC               	rlf	??_setDelayOff_GO,f
  6895  09C7  0801               	movf	1,w
  6896  09C8  062C               	xorwf	??_setDelayOff_GO,w
  6897  09C9  39FD               	andlw	-3
  6898  09CA  062C               	xorwf	??_setDelayOff_GO,w
  6899  09CB  0081               	movwf	1
  6900                           
  6901                           ;DelayOff_B1.c: 90: if (command == 1) {
  6902  09CC  082A               	movf	setDelayOff_GO@command,w
  6903  09CD  3A01               	xorlw	1
  6904  09CE  1D03               	skipz
  6905  09CF  29F9               	goto	l5737
  6906                           
  6907                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  6908  09D0  082B               	movf	setDelayOff_GO@value,w
  6909  09D1  3194  24DB  3189   	fcall	_DelayTimejudge
  6910  09D4  0020               	movlb	0	; select bank0
  6911  09D5  00AC               	movwf	??_setDelayOff_GO
  6912  09D6  0878               	movf	_DelayOff,w
  6913  09D7  0086               	movwf	6
  6914  09D8  0187               	clrf	7
  6915  09D9  082C               	movf	??_setDelayOff_GO,w
  6916  09DA  0081               	movwf	1
  6917                           
  6918                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  6919  09DB  300F               	movlw	15
  6920  09DC  052B               	andwf	setDelayOff_GO@value,w
  6921  09DD  00AC               	movwf	??_setDelayOff_GO
  6922  09DE  082C               	movf	??_setDelayOff_GO,w
  6923  09DF  3A05               	xorlw	5
  6924  09E0  1903               	skipnz
  6925  09E1  29E6               	goto	l5731
  6926  09E2  082B               	movf	setDelayOff_GO@value,w
  6927  09E3  390F               	andlw	15
  6928  09E4  1D03               	btfss	3,2
  6929  09E5  29EC               	goto	l5735
  6930  09E6                     l5731:	
  6931  09E6  3026               	movlw	38
  6932  09E7  022B               	subwf	setDelayOff_GO@value,w
  6933  09E8  1803               	skipnc
  6934  09E9  29EC               	goto	l5735
  6935                           
  6936                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  6937  09EA  082B               	movf	setDelayOff_GO@value,w
  6938  09EB  29ED               	goto	L3
  6939  09EC                     l5735:	
  6940                           ;DelayOff_B1.c: 94: } else {
  6941                           
  6942                           
  6943                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  6944  09EC  3005               	movlw	5
  6945  09ED                     L3:	
  6946  09ED  00AC               	movwf	??_setDelayOff_GO
  6947  09EE  082E               	movf	setDelayOff_GO@sw,w
  6948  09EF  3E1A               	addlw	26
  6949  09F0  076E               	addwf	_product,w
  6950  09F1  00AD               	movwf	??_setDelayOff_GO+1
  6951  09F2  082D               	movf	??_setDelayOff_GO+1,w
  6952  09F3  0086               	movwf	6
  6953  09F4  3001               	movlw	1	; select bank2/3
  6954  09F5  0087               	movwf	7
  6955  09F6  082C               	movf	??_setDelayOff_GO,w
  6956  09F7  0081               	movwf	1
  6957                           
  6958                           ;DelayOff_B1.c: 96: }
  6959                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  6960  09F8  2A05               	goto	l5741
  6961  09F9                     l5737:	
  6962  09F9  08AA               	movf	setDelayOff_GO@command,f
  6963  09FA  1D03               	skipz
  6964  09FB  2A05               	goto	l5741
  6965                           
  6966                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  6967  09FC  082E               	movf	setDelayOff_GO@sw,w
  6968  09FD  3E1A               	addlw	26
  6969  09FE  076E               	addwf	_product,w
  6970  09FF  00AC               	movwf	??_setDelayOff_GO
  6971  0A00  082C               	movf	??_setDelayOff_GO,w
  6972  0A01  0086               	movwf	6
  6973  0A02  3001               	movlw	1	; select bank2/3
  6974  0A03  0087               	movwf	7
  6975  0A04  0181               	clrf	1
  6976  0A05                     l5741:	
  6977                           
  6978                           ;DelayOff_B1.c: 99: }
  6979                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  6980  0A05  0878               	movf	_DelayOff,w
  6981  0A06  0086               	movwf	6
  6982  0A07  0187               	clrf	7
  6983  0A08  3000               	movlw	0
  6984  0A09  3FC0               	movwi [0]fsr1
  6985  0A0A  3FC1               	movwi [1]fsr1
  6986                           
  6987                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  6988  0A0B  0878               	movf	_DelayOff,w
  6989  0A0C  0086               	movwf	6
  6990  0A0D  0187               	clrf	7
  6991  0A0E  0181               	clrf	1
  6992  0A0F  0008               	return
  6993  0A10                     __end_of_setDelayOff_GO:	
  6994                           
  6995                           	psect	text25
  6996  14DB                     __ptext25:	
  6997 ;; *************** function _DelayTimejudge *****************
  6998 ;; Defined at:
  6999 ;;		line 106 in file "../src/DelayOff_B1.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;  value           1    wreg     unsigned char 
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;  value           1    9[BANK0 ] unsigned char 
  7004 ;;  k               1    8[BANK0 ] unsigned char 
  7005 ;;  j               1    7[BANK0 ] unsigned char 
  7006 ;;  i               1    6[BANK0 ] unsigned char 
  7007 ;; Return value:  Size  Location     Type
  7008 ;;                  1    wreg      unsigned char 
  7009 ;; Registers used:
  7010 ;;		wreg, status,2, status,0, pclath, cstack
  7011 ;; Tracked objects:
  7012 ;;		On entry : 0/0
  7013 ;;		On exit  : 0/0
  7014 ;;		Unchanged: 0/0
  7015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7017 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7018 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7019 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7020 ;;Total ram usage:        6 bytes
  7021 ;; Hardware stack levels used:    1
  7022 ;; Hardware stack levels required when called:    6
  7023 ;; This function calls:
  7024 ;;		___bmul
  7025 ;; This function is called by:
  7026 ;;		_setDelayOff_GO
  7027 ;; This function uses a non-reentrant model
  7028 ;;
  7029                           
  7030                           
  7031                           ;psect for function _DelayTimejudge
  7032  14DB                     _DelayTimejudge:	
  7033                           
  7034                           ;incstack = 0
  7035                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  7036                           ;DelayTimejudge@value stored from wreg
  7037  14DB  0020               	movlb	0	; select bank0
  7038  14DC  00A9               	movwf	DelayTimejudge@value
  7039                           
  7040                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  7041  14DD  3005               	movlw	5
  7042  14DE  00A4               	movwf	??_DelayTimejudge
  7043  14DF  0824               	movf	??_DelayTimejudge,w
  7044  14E0  00A6               	movwf	DelayTimejudge@i
  7045  14E1  01A7               	clrf	DelayTimejudge@j
  7046  14E2  01A8               	clrf	DelayTimejudge@k
  7047                           
  7048                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  7049  14E3  3031               	movlw	49
  7050  14E4  0229               	subwf	DelayTimejudge@value,w
  7051  14E5  1803               	skipnc
  7052  14E6  2D03               	goto	l5533
  7053                           
  7054                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  7055  14E7  0829               	movf	DelayTimejudge@value,w
  7056  14E8  390F               	andlw	15
  7057  14E9  00A4               	movwf	??_DelayTimejudge
  7058  14EA  0824               	movf	??_DelayTimejudge,w
  7059  14EB  00A7               	movwf	DelayTimejudge@j
  7060                           
  7061                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  7062  14EC  0829               	movf	DelayTimejudge@value,w
  7063  14ED  00A4               	movwf	??_DelayTimejudge
  7064  14EE  3004               	movlw	4
  7065  14EF                     u4255:	
  7066  14EF  36A4               	lsrf	??_DelayTimejudge,f
  7067  14F0  0B89               	decfsz	9,f
  7068  14F1  2CEF               	goto	u4255
  7069  14F2  0824               	movf	??_DelayTimejudge,w
  7070  14F3  390F               	andlw	15
  7071  14F4  00A5               	movwf	??_DelayTimejudge+1
  7072  14F5  0825               	movf	??_DelayTimejudge+1,w
  7073  14F6  00A8               	movwf	DelayTimejudge@k
  7074                           
  7075                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  7076  14F7  300A               	movlw	10
  7077  14F8  00A4               	movwf	??_DelayTimejudge
  7078  14F9  0824               	movf	??_DelayTimejudge,w
  7079  14FA  00A0               	movwf	___bmul@multiplicand
  7080  14FB  0828               	movf	DelayTimejudge@k,w
  7081  14FC  3191  21C4         	fcall	___bmul
  7082  14FE  0020               	movlb	0	; select bank0
  7083  14FF  0727               	addwf	DelayTimejudge@j,w
  7084  1500  00A5               	movwf	??_DelayTimejudge+1
  7085  1501  0825               	movf	??_DelayTimejudge+1,w
  7086  1502  00A6               	movwf	DelayTimejudge@i
  7087  1503                     l5533:	
  7088                           
  7089                           ;DelayOff_B1.c: 112: }
  7090                           ;DelayOff_B1.c: 133: return i;
  7091  1503  0826               	movf	DelayTimejudge@i,w
  7092  1504  0008               	return
  7093  1505                     __end_of_DelayTimejudge:	
  7094                           
  7095                           	psect	text26
  7096  11C4                     __ptext26:	
  7097 ;; *************** function ___bmul *****************
  7098 ;; Defined at:
  7099 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  7100 ;; Parameters:    Size  Location     Type
  7101 ;;  multiplier      1    wreg     unsigned char 
  7102 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7103 ;; Auto vars:     Size  Location     Type
  7104 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7105 ;;  product         1    2[BANK0 ] unsigned char 
  7106 ;; Return value:  Size  Location     Type
  7107 ;;                  1    wreg      unsigned char 
  7108 ;; Registers used:
  7109 ;;		wreg, status,2, status,0
  7110 ;; Tracked objects:
  7111 ;;		On entry : 0/0
  7112 ;;		On exit  : 0/0
  7113 ;;		Unchanged: 0/0
  7114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7115 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7116 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7117 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7118 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7119 ;;Total ram usage:        4 bytes
  7120 ;; Hardware stack levels used:    1
  7121 ;; Hardware stack levels required when called:    5
  7122 ;; This function calls:
  7123 ;;		Nothing
  7124 ;; This function is called by:
  7125 ;;		_DelayTimejudge
  7126 ;; This function uses a non-reentrant model
  7127 ;;
  7128                           
  7129                           
  7130                           ;psect for function ___bmul
  7131  11C4                     ___bmul:	
  7132                           
  7133                           ;incstack = 0
  7134                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7135                           ;___bmul@multiplier stored from wreg
  7136  11C4  0020               	movlb	0	; select bank0
  7137  11C5  00A3               	movwf	___bmul@multiplier
  7138  11C6  01A2               	clrf	___bmul@product
  7139  11C7                     l5499:	
  7140  11C7  1C23               	btfss	___bmul@multiplier,0
  7141  11C8  29CD               	goto	l5503
  7142  11C9  0820               	movf	___bmul@multiplicand,w
  7143  11CA  00A1               	movwf	??___bmul
  7144  11CB  0821               	movf	??___bmul,w
  7145  11CC  07A2               	addwf	___bmul@product,f
  7146  11CD                     l5503:	
  7147  11CD  1003               	clrc
  7148  11CE  0DA0               	rlf	___bmul@multiplicand,f
  7149  11CF  1003               	clrc
  7150  11D0  0CA3               	rrf	___bmul@multiplier,f
  7151  11D1  08A3               	movf	___bmul@multiplier,f
  7152  11D2  1D03               	skipz
  7153  11D3  29C7               	goto	l5499
  7154  11D4  0822               	movf	___bmul@product,w
  7155  11D5  0008               	return
  7156  11D6                     __end_of___bmul:	
  7157                           
  7158                           	psect	text27
  7159  15F3                     __ptext27:	
  7160 ;; *************** function _setRFSW_AdjControl *****************
  7161 ;; Defined at:
  7162 ;;		line 421 in file "../src/RF_Control_B1.c"
  7163 ;; Parameters:    Size  Location     Type
  7164 ;;  sw              1    wreg     unsigned char 
  7165 ;; Auto vars:     Size  Location     Type
  7166 ;;  sw              1   70[BANK0 ] unsigned char 
  7167 ;; Return value:  Size  Location     Type
  7168 ;;		None               void
  7169 ;; Registers used:
  7170 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7171 ;; Tracked objects:
  7172 ;;		On entry : 0/0
  7173 ;;		On exit  : 0/0
  7174 ;;		Unchanged: 0/0
  7175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7177 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7178 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7179 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7180 ;;Total ram usage:        3 bytes
  7181 ;; Hardware stack levels used:    1
  7182 ;; Hardware stack levels required when called:   10
  7183 ;; This function calls:
  7184 ;;		_RfSWPointSelect
  7185 ;;		_setRF_DimmerValue
  7186 ;;		_setTxData
  7187 ;; This function is called by:
  7188 ;;		_setControl_Lights_Table
  7189 ;; This function uses a non-reentrant model
  7190 ;;
  7191                           
  7192                           
  7193                           ;psect for function _setRFSW_AdjControl
  7194  15F3                     _setRFSW_AdjControl:	
  7195                           
  7196                           ;incstack = 0
  7197                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7198                           ;setRFSW_AdjControl@sw stored from wreg
  7199  15F3  0020               	movlb	0	; select bank0
  7200  15F4  00E6               	movwf	setRFSW_AdjControl@sw
  7201                           
  7202                           ;RF_Control_B1.c: 422: RfSWPointSelect(sw);
  7203  15F5  0866               	movf	setRFSW_AdjControl@sw,w
  7204  15F6  3192  229E  3195   	fcall	_RfSWPointSelect
  7205                           
  7206                           ;RF_Control_B1.c: 423: if (RFSW->Status == 1) {
  7207  15F9  0021               	movlb	1	; select bank1
  7208  15FA  0854               	movf	_RFSW^(0+128),w
  7209  15FB  0086               	movwf	6
  7210  15FC  0187               	clrf	7
  7211  15FD  1C01               	btfss	1,0
  7212  15FE  2E07               	goto	l5941
  7213                           
  7214                           ;RF_Control_B1.c: 424: Memory.Modify=1;
  7215  15FF  0023               	movlb	3	; select bank3
  7216  1600  1444               	bsf	(_Memory^(0+384)+36),0
  7217                           
  7218                           ;RF_Control_B1.c: 425: setRF_DimmerValue(sw);
  7219  1601  0020               	movlb	0	; select bank0
  7220  1602  0866               	movf	setRFSW_AdjControl@sw,w
  7221  1603  3195  25BE  3195   	fcall	_setRF_DimmerValue
  7222                           
  7223                           ;RF_Control_B1.c: 426: } else {
  7224  1606  2E19               	goto	l1965
  7225  1607                     l5941:	
  7226                           
  7227                           ;RF_Control_B1.c: 427: product->Data[9]=product->Data[20 + sw];
  7228  1607  0020               	movlb	0	; select bank0
  7229  1608  0866               	movf	setRFSW_AdjControl@sw,w
  7230  1609  3E14               	addlw	20
  7231  160A  076E               	addwf	_product,w
  7232  160B  00E4               	movwf	??_setRFSW_AdjControl
  7233  160C  0864               	movf	??_setRFSW_AdjControl,w
  7234  160D  0086               	movwf	6
  7235  160E  3001               	movlw	1	; select bank2/3
  7236  160F  0087               	movwf	7
  7237  1610  0801               	movf	1,w
  7238  1611  00E5               	movwf	??_setRFSW_AdjControl+1
  7239  1612  086E               	movf	_product,w
  7240  1613  3E09               	addlw	9
  7241  1614  0086               	movwf	6
  7242  1615  3001               	movlw	1	; select bank2/3
  7243  1616  0087               	movwf	7
  7244  1617  0865               	movf	??_setRFSW_AdjControl+1,w
  7245  1618  0081               	movwf	1
  7246  1619                     l1965:	
  7247                           
  7248                           ;RF_Control_B1.c: 428: }
  7249                           ;RF_Control_B1.c: 429: product->Data[17]=product->Data[26 + sw];
  7250  1619  0020               	movlb	0	; select bank0
  7251  161A  0866               	movf	setRFSW_AdjControl@sw,w
  7252  161B  3E1A               	addlw	26
  7253  161C  076E               	addwf	_product,w
  7254  161D  00E4               	movwf	??_setRFSW_AdjControl
  7255  161E  0864               	movf	??_setRFSW_AdjControl,w
  7256  161F  0086               	movwf	6
  7257  1620  3001               	movlw	1	; select bank2/3
  7258  1621  0087               	movwf	7
  7259  1622  0801               	movf	1,w
  7260  1623  00E5               	movwf	??_setRFSW_AdjControl+1
  7261  1624  086E               	movf	_product,w
  7262  1625  3E11               	addlw	17
  7263  1626  0086               	movwf	6
  7264  1627  3001               	movlw	1	; select bank2/3
  7265  1628  0087               	movwf	7
  7266  1629  0865               	movf	??_setRFSW_AdjControl+1,w
  7267  162A  0081               	movwf	1
  7268                           
  7269                           ;RF_Control_B1.c: 430: setTxData();
  7270  162B  3185  258E         	fcall	_setTxData
  7271  162D  0008               	return
  7272  162E                     __end_of_setRFSW_AdjControl:	
  7273                           
  7274                           	psect	text28
  7275  15BE                     __ptext28:	
  7276 ;; *************** function _setRF_DimmerValue *****************
  7277 ;; Defined at:
  7278 ;;		line 441 in file "../src/RF_Control_B1.c"
  7279 ;; Parameters:    Size  Location     Type
  7280 ;;  lights          1    wreg     unsigned char 
  7281 ;; Auto vars:     Size  Location     Type
  7282 ;;  lights          1   67[BANK0 ] unsigned char 
  7283 ;; Return value:  Size  Location     Type
  7284 ;;		None               void
  7285 ;; Registers used:
  7286 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7287 ;; Tracked objects:
  7288 ;;		On entry : 0/0
  7289 ;;		On exit  : 0/0
  7290 ;;		Unchanged: 0/0
  7291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7293 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7294 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7295 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7296 ;;Total ram usage:        3 bytes
  7297 ;; Hardware stack levels used:    1
  7298 ;; Hardware stack levels required when called:    9
  7299 ;; This function calls:
  7300 ;;		_setDimmerLights_AdjRF
  7301 ;; This function is called by:
  7302 ;;		_setRFSW_AdjControl
  7303 ;; This function uses a non-reentrant model
  7304 ;;
  7305                           
  7306                           
  7307                           ;psect for function _setRF_DimmerValue
  7308  15BE                     _setRF_DimmerValue:	
  7309                           
  7310                           ;incstack = 0
  7311                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7312                           ;setRF_DimmerValue@lights stored from wreg
  7313  15BE  0020               	movlb	0	; select bank0
  7314  15BF  00E3               	movwf	setRF_DimmerValue@lights
  7315                           
  7316                           ;RF_Control_B1.c: 442: if (RF_Data[9] > 0x64) {
  7317  15C0  3065               	movlw	101
  7318  15C1  0022               	movlb	2	; select bank2
  7319  15C2  0229               	subwf	(_RF_Data^(0+256)+9),w
  7320  15C3  1C03               	skipc
  7321  15C4  2DCB               	goto	l5811
  7322                           
  7323                           ;RF_Control_B1.c: 443: RF_Data[9] = 0x64;
  7324  15C5  3064               	movlw	100
  7325  15C6  0020               	movlb	0	; select bank0
  7326  15C7  00E1               	movwf	??_setRF_DimmerValue
  7327  15C8  0861               	movf	??_setRF_DimmerValue,w
  7328  15C9  0022               	movlb	2	; select bank2
  7329  15CA  00A9               	movwf	(_RF_Data^(0+256)+9)
  7330  15CB                     l5811:	
  7331                           
  7332                           ;RF_Control_B1.c: 444: }
  7333                           ;RF_Control_B1.c: 445: product->Data[9]=RF_Data[9];
  7334  15CB  0829               	movf	(_RF_Data^(0+256)+9),w
  7335  15CC  0020               	movlb	0	; select bank0
  7336  15CD  00E1               	movwf	??_setRF_DimmerValue
  7337  15CE  086E               	movf	_product,w
  7338  15CF  3E09               	addlw	9
  7339  15D0  0086               	movwf	6
  7340  15D1  3001               	movlw	1	; select bank2/3
  7341  15D2  0087               	movwf	7
  7342  15D3  0861               	movf	??_setRF_DimmerValue,w
  7343  15D4  0081               	movwf	1
  7344                           
  7345                           ;RF_Control_B1.c: 446: product->Data[11]=lights;
  7346  15D5  0863               	movf	setRF_DimmerValue@lights,w
  7347  15D6  00E1               	movwf	??_setRF_DimmerValue
  7348  15D7  086E               	movf	_product,w
  7349  15D8  3E0B               	addlw	11
  7350  15D9  0086               	movwf	6
  7351  15DA  3001               	movlw	1	; select bank2/3
  7352  15DB  0087               	movwf	7
  7353  15DC  0861               	movf	??_setRF_DimmerValue,w
  7354  15DD  0081               	movwf	1
  7355                           
  7356                           ;RF_Control_B1.c: 447: product->Data[(20 + lights)]=product->Data[9];
  7357  15DE  086E               	movf	_product,w
  7358  15DF  3E09               	addlw	9
  7359  15E0  0086               	movwf	6
  7360  15E1  3001               	movlw	1	; select bank2/3
  7361  15E2  0087               	movwf	7
  7362  15E3  0801               	movf	1,w
  7363  15E4  00E1               	movwf	??_setRF_DimmerValue
  7364  15E5  0863               	movf	setRF_DimmerValue@lights,w
  7365  15E6  3E14               	addlw	20
  7366  15E7  076E               	addwf	_product,w
  7367  15E8  00E2               	movwf	??_setRF_DimmerValue+1
  7368  15E9  0862               	movf	??_setRF_DimmerValue+1,w
  7369  15EA  0086               	movwf	6
  7370  15EB  3001               	movlw	1	; select bank2/3
  7371  15EC  0087               	movwf	7
  7372  15ED  0861               	movf	??_setRF_DimmerValue,w
  7373  15EE  0081               	movwf	1
  7374                           
  7375                           ;RF_Control_B1.c: 448: setDimmerLights_AdjRF(lights);
  7376  15EF  0863               	movf	setRF_DimmerValue@lights,w
  7377  15F0  3194  2440         	fcall	_setDimmerLights_AdjRF
  7378  15F2  0008               	return
  7379  15F3                     __end_of_setRF_DimmerValue:	
  7380                           
  7381                           	psect	text29
  7382  1440                     __ptext29:	
  7383 ;; *************** function _setDimmerLights_AdjRF *****************
  7384 ;; Defined at:
  7385 ;;		line 690 in file "../src/Dimmer_B1.c"
  7386 ;; Parameters:    Size  Location     Type
  7387 ;;  lights          1    wreg     unsigned char 
  7388 ;; Auto vars:     Size  Location     Type
  7389 ;;  lights          1   64[BANK0 ] unsigned char 
  7390 ;; Return value:  Size  Location     Type
  7391 ;;		None               void
  7392 ;; Registers used:
  7393 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7394 ;; Tracked objects:
  7395 ;;		On entry : 0/0
  7396 ;;		On exit  : 0/0
  7397 ;;		Unchanged: 0/0
  7398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7400 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7401 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7402 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7403 ;;Total ram usage:        2 bytes
  7404 ;; Hardware stack levels used:    1
  7405 ;; Hardware stack levels required when called:    8
  7406 ;; This function calls:
  7407 ;;		_DimmerLightsPointSelect
  7408 ;;		_getPercentValue
  7409 ;; This function is called by:
  7410 ;;		_setRF_DimmerValue
  7411 ;; This function uses a non-reentrant model
  7412 ;;
  7413                           
  7414                           
  7415                           ;psect for function _setDimmerLights_AdjRF
  7416  1440                     _setDimmerLights_AdjRF:	
  7417                           
  7418                           ;incstack = 0
  7419                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7420                           ;setDimmerLights_AdjRF@lights stored from wreg
  7421  1440  0020               	movlb	0	; select bank0
  7422  1441  00E0               	movwf	setDimmerLights_AdjRF@lights
  7423                           
  7424                           ;Dimmer_B1.c: 692: DimmerLightsPointSelect(lights);
  7425  1442  0860               	movf	setDimmerLights_AdjRF@lights,w
  7426  1443  3191  21E8  3194   	fcall	_DimmerLightsPointSelect
  7427                           
  7428                           ;Dimmer_B1.c: 693: DimmerLights->AdjRF = 1;
  7429  1446  0879               	movf	_DimmerLights,w
  7430  1447  0086               	movwf	6
  7431  1448  3001               	movlw	1	; select bank2/3
  7432  1449  0087               	movwf	7
  7433  144A  1501               	bsf	1,2
  7434                           
  7435                           ;Dimmer_B1.c: 694: DimmerLights->Signal = 1;
  7436  144B  0879               	movf	_DimmerLights,w
  7437  144C  0086               	movwf	6
  7438  144D  3001               	movlw	1	; select bank2/3
  7439  144E  0087               	movwf	7
  7440  144F  1481               	bsf	1,1
  7441                           
  7442                           ;Dimmer_B1.c: 695: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7443  1450  0020               	movlb	0	; select bank0
  7444  1451  086E               	movf	_product,w
  7445  1452  3E09               	addlw	9
  7446  1453  0086               	movwf	6
  7447  1454  3001               	movlw	1	; select bank2/3
  7448  1455  0087               	movwf	7
  7449  1456  0801               	movf	1,w
  7450  1457  3189  2156         	fcall	_getPercentValue
  7451  1459  0020               	movlb	0	; select bank0
  7452  145A  00DF               	movwf	??_setDimmerLights_AdjRF
  7453  145B  0879               	movf	_DimmerLights,w
  7454  145C  3E05               	addlw	5
  7455  145D  0086               	movwf	6
  7456  145E  3001               	movlw	1	; select bank2/3
  7457  145F  0087               	movwf	7
  7458  1460  085F               	movf	??_setDimmerLights_AdjRF,w
  7459  1461  0081               	movwf	1
  7460  1462  0008               	return
  7461  1463                     __end_of_setDimmerLights_AdjRF:	
  7462                           
  7463                           	psect	text30
  7464  0956                     __ptext30:	
  7465 ;; *************** function _getPercentValue *****************
  7466 ;; Defined at:
  7467 ;;		line 763 in file "../src/Dimmer_B1.c"
  7468 ;; Parameters:    Size  Location     Type
  7469 ;;  value           1    wreg     unsigned char 
  7470 ;; Auto vars:     Size  Location     Type
  7471 ;;  value           1   59[BANK0 ] unsigned char 
  7472 ;;  i               3   60[BANK0 ] float 
  7473 ;; Return value:  Size  Location     Type
  7474 ;;                  1    wreg      unsigned char 
  7475 ;; Registers used:
  7476 ;;		wreg, status,2, status,0, pclath, cstack
  7477 ;; Tracked objects:
  7478 ;;		On entry : 0/0
  7479 ;;		On exit  : 0/0
  7480 ;;		Unchanged: 0/0
  7481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7483 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7484 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7485 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7486 ;;Total ram usage:        6 bytes
  7487 ;; Hardware stack levels used:    1
  7488 ;; Hardware stack levels required when called:    7
  7489 ;; This function calls:
  7490 ;;		___awtoft
  7491 ;;		___ftadd
  7492 ;;		___ftdiv
  7493 ;;		___ftmul
  7494 ;;		___fttol
  7495 ;; This function is called by:
  7496 ;;		_setDimmerLights_AdjRF
  7497 ;; This function uses a non-reentrant model
  7498 ;;
  7499                           
  7500                           
  7501                           ;psect for function _getPercentValue
  7502  0956                     _getPercentValue:	
  7503                           
  7504                           ;incstack = 0
  7505                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7506                           ;getPercentValue@value stored from wreg
  7507  0956  0020               	movlb	0	; select bank0
  7508  0957  00DB               	movwf	getPercentValue@value
  7509                           
  7510                           ;Dimmer_B1.c: 771: float i = ((char)(90*0.8)) - ((char)(25*0.8));
  7511  0958  3000               	movlw	0
  7512  0959  00DC               	movwf	getPercentValue@i
  7513  095A  3050               	movlw	80
  7514  095B  00DD               	movwf	getPercentValue@i+1
  7515  095C  3042               	movlw	66
  7516  095D  00DE               	movwf	getPercentValue@i+2
  7517                           
  7518                           ;Dimmer_B1.c: 772: i /= 100;
  7519  095E  3000               	movlw	0
  7520  095F  00AE               	movwf	___ftdiv@f2
  7521  0960  30C8               	movlw	200
  7522  0961  00AF               	movwf	___ftdiv@f2+1
  7523  0962  3042               	movlw	66
  7524  0963  00B0               	movwf	___ftdiv@f2+2
  7525  0964  085C               	movf	getPercentValue@i,w
  7526  0965  00B1               	movwf	___ftdiv@f1
  7527  0966  085D               	movf	getPercentValue@i+1,w
  7528  0967  00B2               	movwf	___ftdiv@f1+1
  7529  0968  085E               	movf	getPercentValue@i+2,w
  7530  0969  00B3               	movwf	___ftdiv@f1+2
  7531  096A  3186  26FF  3189   	fcall	___ftdiv
  7532  096D  0020               	movlb	0	; select bank0
  7533  096E  082E               	movf	?___ftdiv,w
  7534  096F  00DC               	movwf	getPercentValue@i
  7535  0970  082F               	movf	?___ftdiv+1,w
  7536  0971  00DD               	movwf	getPercentValue@i+1
  7537  0972  0830               	movf	?___ftdiv+2,w
  7538  0973  00DE               	movwf	getPercentValue@i+2
  7539                           
  7540                           ;Dimmer_B1.c: 774: return (char) (((100 - value) * i) + ((char)(90*0.8)));
  7541  0974  085B               	movf	getPercentValue@value,w
  7542  0975  00D9               	movwf	??_getPercentValue
  7543  0976  01DA               	clrf	??_getPercentValue+1
  7544  0977  09D9               	comf	??_getPercentValue,f
  7545  0978  09DA               	comf	??_getPercentValue+1,f
  7546  0979  0AD9               	incf	??_getPercentValue,f
  7547  097A  1903               	skipnz
  7548  097B  0ADA               	incf	??_getPercentValue+1,f
  7549  097C  0859               	movf	??_getPercentValue,w
  7550  097D  3E64               	addlw	100
  7551  097E  00A8               	movwf	___awtoft@c
  7552  097F  3000               	movlw	0
  7553  0980  3D5A               	addwfc	??_getPercentValue+1,w
  7554  0981  00A9               	movwf	___awtoft@c+1
  7555  0982  3193  23FC  3189   	fcall	___awtoft
  7556  0985  0020               	movlb	0	; select bank0
  7557  0986  0828               	movf	?___awtoft,w
  7558  0987  00B1               	movwf	___ftmul@f2
  7559  0988  0829               	movf	?___awtoft+1,w
  7560  0989  00B2               	movwf	___ftmul@f2+1
  7561  098A  082A               	movf	?___awtoft+2,w
  7562  098B  00B3               	movwf	___ftmul@f2+2
  7563  098C  085C               	movf	getPercentValue@i,w
  7564  098D  00AE               	movwf	___ftmul@f1
  7565  098E  085D               	movf	getPercentValue@i+1,w
  7566  098F  00AF               	movwf	___ftmul@f1+1
  7567  0990  085E               	movf	getPercentValue@i+2,w
  7568  0991  00B0               	movwf	___ftmul@f1+2
  7569  0992  3186  264B  3189   	fcall	___ftmul
  7570  0995  0020               	movlb	0	; select bank0
  7571  0996  082E               	movf	?___ftmul,w
  7572  0997  00C1               	movwf	___ftadd@f2
  7573  0998  082F               	movf	?___ftmul+1,w
  7574  0999  00C2               	movwf	___ftadd@f2+1
  7575  099A  0830               	movf	?___ftmul+2,w
  7576  099B  00C3               	movwf	___ftadd@f2+2
  7577  099C  3000               	movlw	0
  7578  099D  00BE               	movwf	___ftadd@f1
  7579  099E  3090               	movlw	144
  7580  099F  00BF               	movwf	___ftadd@f1+1
  7581  09A0  3042               	movlw	66
  7582  09A1  00C0               	movwf	___ftadd@f1+2
  7583  09A2  3182  22F4  3189   	fcall	___ftadd
  7584  09A5  0020               	movlb	0	; select bank0
  7585  09A6  083E               	movf	?___ftadd,w
  7586  09A7  00CB               	movwf	___fttol@f1
  7587  09A8  083F               	movf	?___ftadd+1,w
  7588  09A9  00CC               	movwf	___fttol@f1+1
  7589  09AA  0840               	movf	?___ftadd+2,w
  7590  09AB  00CD               	movwf	___fttol@f1+2
  7591  09AC  318E  265E         	fcall	___fttol
  7592  09AE  0020               	movlb	0	; select bank0
  7593  09AF  084B               	movf	?___fttol,w
  7594  09B0  0008               	return
  7595  09B1                     __end_of_getPercentValue:	
  7596                           
  7597                           	psect	text31
  7598  064B                     __ptext31:	
  7599 ;; *************** function ___ftmul *****************
  7600 ;; Defined at:
  7601 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7602 ;; Parameters:    Size  Location     Type
  7603 ;;  f1              3   14[BANK0 ] float 
  7604 ;;  f2              3   17[BANK0 ] float 
  7605 ;; Auto vars:     Size  Location     Type
  7606 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7607 ;;  sign            1   29[BANK0 ] unsigned char 
  7608 ;;  cntr            1   28[BANK0 ] unsigned char 
  7609 ;;  exp             1   24[BANK0 ] unsigned char 
  7610 ;; Return value:  Size  Location     Type
  7611 ;;                  3   14[BANK0 ] float 
  7612 ;; Registers used:
  7613 ;;		wreg, status,2, status,0, pclath, cstack
  7614 ;; Tracked objects:
  7615 ;;		On entry : 0/0
  7616 ;;		On exit  : 0/0
  7617 ;;		Unchanged: 0/0
  7618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7619 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7620 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7621 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7622 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7623 ;;Total ram usage:       16 bytes
  7624 ;; Hardware stack levels used:    1
  7625 ;; Hardware stack levels required when called:    6
  7626 ;; This function calls:
  7627 ;;		___ftpack
  7628 ;; This function is called by:
  7629 ;;		_getPercentValue
  7630 ;; This function uses a non-reentrant model
  7631 ;;
  7632                           
  7633                           
  7634                           ;psect for function ___ftmul
  7635  064B                     ___ftmul:	
  7636                           
  7637                           ;incstack = 0
  7638                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7639  064B  0020               	movlb	0	; select bank0
  7640  064C  082E               	movf	___ftmul@f1,w
  7641  064D  00B4               	movwf	??___ftmul
  7642  064E  082F               	movf	___ftmul@f1+1,w
  7643  064F  00B5               	movwf	??___ftmul+1
  7644  0650  0830               	movf	___ftmul@f1+2,w
  7645  0651  00B6               	movwf	??___ftmul+2
  7646  0652  1003               	clrc
  7647  0653  0D35               	rlf	??___ftmul+1,w
  7648  0654  0D36               	rlf	??___ftmul+2,w
  7649  0655  00B7               	movwf	??___ftmul+3
  7650  0656  0837               	movf	??___ftmul+3,w
  7651  0657  00B8               	movwf	___ftmul@exp
  7652  0658  08B8               	movf	___ftmul@exp,f
  7653  0659  1D03               	skipz
  7654  065A  2E62               	goto	l5395
  7655  065B  3000               	movlw	0
  7656  065C  00AE               	movwf	?___ftmul
  7657  065D  3000               	movlw	0
  7658  065E  00AF               	movwf	?___ftmul+1
  7659  065F  3000               	movlw	0
  7660  0660  00B0               	movwf	?___ftmul+2
  7661  0661  0008               	return
  7662  0662                     l5395:	
  7663  0662  0831               	movf	___ftmul@f2,w
  7664  0663  00B4               	movwf	??___ftmul
  7665  0664  0832               	movf	___ftmul@f2+1,w
  7666  0665  00B5               	movwf	??___ftmul+1
  7667  0666  0833               	movf	___ftmul@f2+2,w
  7668  0667  00B6               	movwf	??___ftmul+2
  7669  0668  1003               	clrc
  7670  0669  0D35               	rlf	??___ftmul+1,w
  7671  066A  0D36               	rlf	??___ftmul+2,w
  7672  066B  00B7               	movwf	??___ftmul+3
  7673  066C  0837               	movf	??___ftmul+3,w
  7674  066D  00BD               	movwf	___ftmul@sign
  7675  066E  08BD               	movf	___ftmul@sign,f
  7676  066F  1D03               	skipz
  7677  0670  2E78               	goto	l5401
  7678  0671  3000               	movlw	0
  7679  0672  00AE               	movwf	?___ftmul
  7680  0673  3000               	movlw	0
  7681  0674  00AF               	movwf	?___ftmul+1
  7682  0675  3000               	movlw	0
  7683  0676  00B0               	movwf	?___ftmul+2
  7684  0677  0008               	return
  7685  0678                     l5401:	
  7686  0678  083D               	movf	___ftmul@sign,w
  7687  0679  3E7B               	addlw	123
  7688  067A  00B4               	movwf	??___ftmul
  7689  067B  0834               	movf	??___ftmul,w
  7690  067C  07B8               	addwf	___ftmul@exp,f
  7691  067D  082E               	movf	___ftmul@f1,w
  7692  067E  00B4               	movwf	??___ftmul
  7693  067F  082F               	movf	___ftmul@f1+1,w
  7694  0680  00B5               	movwf	??___ftmul+1
  7695  0681  0830               	movf	___ftmul@f1+2,w
  7696  0682  00B6               	movwf	??___ftmul+2
  7697  0683  3010               	movlw	16
  7698  0684                     u3985:	
  7699  0684  36B6               	lsrf	??___ftmul+2,f
  7700  0685  0CB5               	rrf	??___ftmul+1,f
  7701  0686  0CB4               	rrf	??___ftmul,f
  7702  0687  0B89               	decfsz	9,f
  7703  0688  2E84               	goto	u3985
  7704  0689  0834               	movf	??___ftmul,w
  7705  068A  00B7               	movwf	??___ftmul+3
  7706  068B  0837               	movf	??___ftmul+3,w
  7707  068C  00BD               	movwf	___ftmul@sign
  7708  068D  0831               	movf	___ftmul@f2,w
  7709  068E  00B4               	movwf	??___ftmul
  7710  068F  0832               	movf	___ftmul@f2+1,w
  7711  0690  00B5               	movwf	??___ftmul+1
  7712  0691  0833               	movf	___ftmul@f2+2,w
  7713  0692  00B6               	movwf	??___ftmul+2
  7714  0693  3010               	movlw	16
  7715  0694                     u3995:	
  7716  0694  36B6               	lsrf	??___ftmul+2,f
  7717  0695  0CB5               	rrf	??___ftmul+1,f
  7718  0696  0CB4               	rrf	??___ftmul,f
  7719  0697  0B89               	decfsz	9,f
  7720  0698  2E94               	goto	u3995
  7721  0699  0834               	movf	??___ftmul,w
  7722  069A  00B7               	movwf	??___ftmul+3
  7723  069B  0837               	movf	??___ftmul+3,w
  7724  069C  06BD               	xorwf	___ftmul@sign,f
  7725  069D  3080               	movlw	128
  7726  069E  00B4               	movwf	??___ftmul
  7727  069F  0834               	movf	??___ftmul,w
  7728  06A0  05BD               	andwf	___ftmul@sign,f
  7729  06A1  17AF               	bsf	___ftmul@f1+1,7
  7730  06A2  17B2               	bsf	___ftmul@f2+1,7
  7731  06A3  30FF               	movlw	255
  7732  06A4  05B1               	andwf	___ftmul@f2,f
  7733  06A5  30FF               	movlw	255
  7734  06A6  05B2               	andwf	___ftmul@f2+1,f
  7735  06A7  3000               	movlw	0
  7736  06A8  05B3               	andwf	___ftmul@f2+2,f
  7737  06A9  3000               	movlw	0
  7738  06AA  00B9               	movwf	___ftmul@f3_as_product
  7739  06AB  3000               	movlw	0
  7740  06AC  00BA               	movwf	___ftmul@f3_as_product+1
  7741  06AD  3000               	movlw	0
  7742  06AE  00BB               	movwf	___ftmul@f3_as_product+2
  7743  06AF  3007               	movlw	7
  7744  06B0  00B4               	movwf	??___ftmul
  7745  06B1  0834               	movf	??___ftmul,w
  7746  06B2  00BC               	movwf	___ftmul@cntr
  7747  06B3                     l5413:	
  7748  06B3  1C2E               	btfss	___ftmul@f1,0
  7749  06B4  2EBB               	goto	l5417
  7750  06B5  0831               	movf	___ftmul@f2,w
  7751  06B6  07B9               	addwf	___ftmul@f3_as_product,f
  7752  06B7  0832               	movf	___ftmul@f2+1,w
  7753  06B8  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7754  06B9  0833               	movf	___ftmul@f2+2,w
  7755  06BA  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7756  06BB                     l5417:	
  7757  06BB  3001               	movlw	1
  7758  06BC                     u4015:	
  7759  06BC  36B0               	lsrf	___ftmul@f1+2,f
  7760  06BD  0CAF               	rrf	___ftmul@f1+1,f
  7761  06BE  0CAE               	rrf	___ftmul@f1,f
  7762  06BF  0B89               	decfsz	9,f
  7763  06C0  2EBC               	goto	u4015
  7764  06C1  3001               	movlw	1
  7765  06C2                     u4025:	
  7766  06C2  35B1               	lslf	___ftmul@f2,f
  7767  06C3  0DB2               	rlf	___ftmul@f2+1,f
  7768  06C4  0DB3               	rlf	___ftmul@f2+2,f
  7769  06C5  0B89               	decfsz	9,f
  7770  06C6  2EC2               	goto	u4025
  7771  06C7  3001               	movlw	1
  7772  06C8  02BC               	subwf	___ftmul@cntr,f
  7773  06C9  1D03               	btfss	3,2
  7774  06CA  2EB3               	goto	l5413
  7775  06CB  3009               	movlw	9
  7776  06CC  00B4               	movwf	??___ftmul
  7777  06CD  0834               	movf	??___ftmul,w
  7778  06CE  00BC               	movwf	___ftmul@cntr
  7779  06CF                     l5425:	
  7780  06CF  1C2E               	btfss	___ftmul@f1,0
  7781  06D0  2ED7               	goto	l5429
  7782  06D1  0831               	movf	___ftmul@f2,w
  7783  06D2  07B9               	addwf	___ftmul@f3_as_product,f
  7784  06D3  0832               	movf	___ftmul@f2+1,w
  7785  06D4  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7786  06D5  0833               	movf	___ftmul@f2+2,w
  7787  06D6  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7788  06D7                     l5429:	
  7789  06D7  3001               	movlw	1
  7790  06D8                     u4055:	
  7791  06D8  36B0               	lsrf	___ftmul@f1+2,f
  7792  06D9  0CAF               	rrf	___ftmul@f1+1,f
  7793  06DA  0CAE               	rrf	___ftmul@f1,f
  7794  06DB  0B89               	decfsz	9,f
  7795  06DC  2ED8               	goto	u4055
  7796  06DD  3001               	movlw	1
  7797  06DE                     u4065:	
  7798  06DE  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7799  06DF  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7800  06E0  0CB9               	rrf	___ftmul@f3_as_product,f
  7801  06E1  0B89               	decfsz	9,f
  7802  06E2  2EDE               	goto	u4065
  7803  06E3  3001               	movlw	1
  7804  06E4  02BC               	subwf	___ftmul@cntr,f
  7805  06E5  1D03               	btfss	3,2
  7806  06E6  2ECF               	goto	l5425
  7807  06E7  0839               	movf	___ftmul@f3_as_product,w
  7808  06E8  00A0               	movwf	___ftpack@arg
  7809  06E9  083A               	movf	___ftmul@f3_as_product+1,w
  7810  06EA  00A1               	movwf	___ftpack@arg+1
  7811  06EB  083B               	movf	___ftmul@f3_as_product+2,w
  7812  06EC  00A2               	movwf	___ftpack@arg+2
  7813  06ED  0838               	movf	___ftmul@exp,w
  7814  06EE  00B4               	movwf	??___ftmul
  7815  06EF  0834               	movf	??___ftmul,w
  7816  06F0  00A3               	movwf	___ftpack@exp
  7817  06F1  083D               	movf	___ftmul@sign,w
  7818  06F2  00B5               	movwf	??___ftmul+1
  7819  06F3  0835               	movf	??___ftmul+1,w
  7820  06F4  00A4               	movwf	___ftpack@sign
  7821  06F5  318A  2210         	fcall	___ftpack
  7822  06F7  0020               	movlb	0	; select bank0
  7823  06F8  0820               	movf	?___ftpack,w
  7824  06F9  00AE               	movwf	?___ftmul
  7825  06FA  0821               	movf	?___ftpack+1,w
  7826  06FB  00AF               	movwf	?___ftmul+1
  7827  06FC  0822               	movf	?___ftpack+2,w
  7828  06FD  00B0               	movwf	?___ftmul+2
  7829  06FE  0008               	return
  7830  06FF                     __end_of___ftmul:	
  7831                           
  7832                           	psect	text32
  7833  02F4                     __ptext32:	
  7834 ;; *************** function ___ftadd *****************
  7835 ;; Defined at:
  7836 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7837 ;; Parameters:    Size  Location     Type
  7838 ;;  f1              3   30[BANK0 ] float 
  7839 ;;  f2              3   33[BANK0 ] float 
  7840 ;; Auto vars:     Size  Location     Type
  7841 ;;  exp1            1   42[BANK0 ] unsigned char 
  7842 ;;  exp2            1   41[BANK0 ] unsigned char 
  7843 ;;  sign            1   40[BANK0 ] unsigned char 
  7844 ;; Return value:  Size  Location     Type
  7845 ;;                  3   30[BANK0 ] float 
  7846 ;; Registers used:
  7847 ;;		wreg, status,2, status,0, pclath, cstack
  7848 ;; Tracked objects:
  7849 ;;		On entry : 0/0
  7850 ;;		On exit  : 0/0
  7851 ;;		Unchanged: 0/0
  7852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7853 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7854 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7855 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7856 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7857 ;;Total ram usage:       13 bytes
  7858 ;; Hardware stack levels used:    1
  7859 ;; Hardware stack levels required when called:    6
  7860 ;; This function calls:
  7861 ;;		___ftpack
  7862 ;; This function is called by:
  7863 ;;		_getPercentValue
  7864 ;; This function uses a non-reentrant model
  7865 ;;
  7866                           
  7867                           
  7868                           ;psect for function ___ftadd
  7869  02F4                     ___ftadd:	
  7870                           
  7871                           ;incstack = 0
  7872                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7873  02F4  0020               	movlb	0	; select bank0
  7874  02F5  083E               	movf	___ftadd@f1,w
  7875  02F6  00C4               	movwf	??___ftadd
  7876  02F7  083F               	movf	___ftadd@f1+1,w
  7877  02F8  00C5               	movwf	??___ftadd+1
  7878  02F9  0840               	movf	___ftadd@f1+2,w
  7879  02FA  00C6               	movwf	??___ftadd+2
  7880  02FB  1003               	clrc
  7881  02FC  0D45               	rlf	??___ftadd+1,w
  7882  02FD  0D46               	rlf	??___ftadd+2,w
  7883  02FE  00C7               	movwf	??___ftadd+3
  7884  02FF  0847               	movf	??___ftadd+3,w
  7885  0300  00CA               	movwf	___ftadd@exp1
  7886  0301  0841               	movf	___ftadd@f2,w
  7887  0302  00C4               	movwf	??___ftadd
  7888  0303  0842               	movf	___ftadd@f2+1,w
  7889  0304  00C5               	movwf	??___ftadd+1
  7890  0305  0843               	movf	___ftadd@f2+2,w
  7891  0306  00C6               	movwf	??___ftadd+2
  7892  0307  1003               	clrc
  7893  0308  0D45               	rlf	??___ftadd+1,w
  7894  0309  0D46               	rlf	??___ftadd+2,w
  7895  030A  00C7               	movwf	??___ftadd+3
  7896  030B  0847               	movf	??___ftadd+3,w
  7897  030C  00C9               	movwf	___ftadd@exp2
  7898  030D  084A               	movf	___ftadd@exp1,w
  7899  030E  1903               	btfsc	3,2
  7900  030F  2B1C               	goto	l5283
  7901  0310  0849               	movf	___ftadd@exp2,w
  7902  0311  024A               	subwf	___ftadd@exp1,w
  7903  0312  1803               	skipnc
  7904  0313  2B23               	goto	l5287
  7905  0314  034A               	decf	___ftadd@exp1,w
  7906  0315  3AFF               	xorlw	255
  7907  0316  0749               	addwf	___ftadd@exp2,w
  7908  0317  00C4               	movwf	??___ftadd
  7909  0318  3019               	movlw	25
  7910  0319  0244               	subwf	??___ftadd,w
  7911  031A  1C03               	skipc
  7912  031B  2B23               	goto	l5287
  7913  031C                     l5283:	
  7914  031C  0841               	movf	___ftadd@f2,w
  7915  031D  00BE               	movwf	?___ftadd
  7916  031E  0842               	movf	___ftadd@f2+1,w
  7917  031F  00BF               	movwf	?___ftadd+1
  7918  0320  0843               	movf	___ftadd@f2+2,w
  7919  0321  00C0               	movwf	?___ftadd+2
  7920  0322  0008               	return
  7921  0323                     l5287:	
  7922  0323  0849               	movf	___ftadd@exp2,w
  7923  0324  1903               	btfsc	3,2
  7924  0325  0008               	return
  7925  0326  084A               	movf	___ftadd@exp1,w
  7926  0327  0249               	subwf	___ftadd@exp2,w
  7927  0328  1803               	skipnc
  7928  0329  2B32               	goto	l5293
  7929  032A  0349               	decf	___ftadd@exp2,w
  7930  032B  3AFF               	xorlw	255
  7931  032C  074A               	addwf	___ftadd@exp1,w
  7932  032D  00C4               	movwf	??___ftadd
  7933  032E  3019               	movlw	25
  7934  032F  0244               	subwf	??___ftadd,w
  7935  0330  1803               	btfsc	3,0
  7936  0331  0008               	return
  7937  0332                     l5293:	
  7938  0332  3006               	movlw	6
  7939  0333  00C4               	movwf	??___ftadd
  7940  0334  0844               	movf	??___ftadd,w
  7941  0335  00C8               	movwf	___ftadd@sign
  7942  0336  1BC0               	btfsc	___ftadd@f1+2,7
  7943  0337  17C8               	bsf	___ftadd@sign,7
  7944  0338  1BC3               	btfsc	___ftadd@f2+2,7
  7945  0339  1748               	bsf	___ftadd@sign,6
  7946  033A  17BF               	bsf	___ftadd@f1+1,7
  7947  033B  30FF               	movlw	255
  7948  033C  05BE               	andwf	___ftadd@f1,f
  7949  033D  30FF               	movlw	255
  7950  033E  05BF               	andwf	___ftadd@f1+1,f
  7951  033F  3000               	movlw	0
  7952  0340  05C0               	andwf	___ftadd@f1+2,f
  7953  0341  17C2               	bsf	___ftadd@f2+1,7
  7954  0342  30FF               	movlw	255
  7955  0343  05C1               	andwf	___ftadd@f2,f
  7956  0344  30FF               	movlw	255
  7957  0345  05C2               	andwf	___ftadd@f2+1,f
  7958  0346  3000               	movlw	0
  7959  0347  05C3               	andwf	___ftadd@f2+2,f
  7960  0348  0849               	movf	___ftadd@exp2,w
  7961  0349  024A               	subwf	___ftadd@exp1,w
  7962  034A  1803               	skipnc
  7963  034B  2B6E               	goto	l5315
  7964  034C                     l5305:	
  7965  034C  3001               	movlw	1
  7966  034D                     u3745:	
  7967  034D  35C1               	lslf	___ftadd@f2,f
  7968  034E  0DC2               	rlf	___ftadd@f2+1,f
  7969  034F  0DC3               	rlf	___ftadd@f2+2,f
  7970  0350  0B89               	decfsz	9,f
  7971  0351  2B4D               	goto	u3745
  7972  0352  3001               	movlw	1
  7973  0353  02C9               	subwf	___ftadd@exp2,f
  7974  0354  0849               	movf	___ftadd@exp2,w
  7975  0355  064A               	xorwf	___ftadd@exp1,w
  7976  0356  1903               	skipnz
  7977  0357  2B69               	goto	l5313
  7978  0358  3001               	movlw	1
  7979  0359  02C8               	subwf	___ftadd@sign,f
  7980  035A  0848               	movf	___ftadd@sign,w
  7981  035B  3907               	andlw	7
  7982  035C  1903               	btfsc	3,2
  7983  035D  2B69               	goto	l5313
  7984  035E  2B4C               	goto	l5305
  7985  035F                     l5311:	
  7986  035F  3001               	movlw	1
  7987  0360                     u3775:	
  7988  0360  36C0               	lsrf	___ftadd@f1+2,f
  7989  0361  0CBF               	rrf	___ftadd@f1+1,f
  7990  0362  0CBE               	rrf	___ftadd@f1,f
  7991  0363  0B89               	decfsz	9,f
  7992  0364  2B60               	goto	u3775
  7993  0365  3001               	movlw	1
  7994  0366  00C4               	movwf	??___ftadd
  7995  0367  0844               	movf	??___ftadd,w
  7996  0368  07CA               	addwf	___ftadd@exp1,f
  7997  0369                     l5313:	
  7998  0369  084A               	movf	___ftadd@exp1,w
  7999  036A  0649               	xorwf	___ftadd@exp2,w
  8000  036B  1903               	btfsc	3,2
  8001  036C  2B93               	goto	l2818
  8002  036D  2B5F               	goto	l5311
  8003  036E                     l5315:	
  8004  036E  084A               	movf	___ftadd@exp1,w
  8005  036F  0249               	subwf	___ftadd@exp2,w
  8006  0370  1803               	skipnc
  8007  0371  2B93               	goto	l2818
  8008  0372                     l5317:	
  8009  0372  3001               	movlw	1
  8010  0373                     u3805:	
  8011  0373  35BE               	lslf	___ftadd@f1,f
  8012  0374  0DBF               	rlf	___ftadd@f1+1,f
  8013  0375  0DC0               	rlf	___ftadd@f1+2,f
  8014  0376  0B89               	decfsz	9,f
  8015  0377  2B73               	goto	u3805
  8016  0378  3001               	movlw	1
  8017  0379  02CA               	subwf	___ftadd@exp1,f
  8018  037A  0849               	movf	___ftadd@exp2,w
  8019  037B  064A               	xorwf	___ftadd@exp1,w
  8020  037C  1903               	skipnz
  8021  037D  2B8F               	goto	l5325
  8022  037E  3001               	movlw	1
  8023  037F  02C8               	subwf	___ftadd@sign,f
  8024  0380  0848               	movf	___ftadd@sign,w
  8025  0381  3907               	andlw	7
  8026  0382  1903               	btfsc	3,2
  8027  0383  2B8F               	goto	l5325
  8028  0384  2B72               	goto	l5317
  8029  0385                     l5323:	
  8030  0385  3001               	movlw	1
  8031  0386                     u3835:	
  8032  0386  36C3               	lsrf	___ftadd@f2+2,f
  8033  0387  0CC2               	rrf	___ftadd@f2+1,f
  8034  0388  0CC1               	rrf	___ftadd@f2,f
  8035  0389  0B89               	decfsz	9,f
  8036  038A  2B86               	goto	u3835
  8037  038B  3001               	movlw	1
  8038  038C  00C4               	movwf	??___ftadd
  8039  038D  0844               	movf	??___ftadd,w
  8040  038E  07C9               	addwf	___ftadd@exp2,f
  8041  038F                     l5325:	
  8042  038F  084A               	movf	___ftadd@exp1,w
  8043  0390  0649               	xorwf	___ftadd@exp2,w
  8044  0391  1D03               	skipz
  8045  0392  2B85               	goto	l5323
  8046  0393                     l2818:	
  8047  0393  1FC8               	btfss	___ftadd@sign,7
  8048  0394  2BA5               	goto	l5329
  8049  0395  30FF               	movlw	255
  8050  0396  06BE               	xorwf	___ftadd@f1,f
  8051  0397  30FF               	movlw	255
  8052  0398  06BF               	xorwf	___ftadd@f1+1,f
  8053  0399  30FF               	movlw	255
  8054  039A  06C0               	xorwf	___ftadd@f1+2,f
  8055  039B  3001               	movlw	1
  8056  039C  07BE               	addwf	___ftadd@f1,f
  8057  039D  3000               	movlw	0
  8058  039E  1803               	skipnc
  8059  039F  3001               	movlw	1
  8060  03A0  07BF               	addwf	___ftadd@f1+1,f
  8061  03A1  3000               	movlw	0
  8062  03A2  1803               	skipnc
  8063  03A3  3001               	movlw	1
  8064  03A4  07C0               	addwf	___ftadd@f1+2,f
  8065  03A5                     l5329:	
  8066  03A5  1F48               	btfss	___ftadd@sign,6
  8067  03A6  2BB7               	goto	l5333
  8068  03A7  30FF               	movlw	255
  8069  03A8  06C1               	xorwf	___ftadd@f2,f
  8070  03A9  30FF               	movlw	255
  8071  03AA  06C2               	xorwf	___ftadd@f2+1,f
  8072  03AB  30FF               	movlw	255
  8073  03AC  06C3               	xorwf	___ftadd@f2+2,f
  8074  03AD  3001               	movlw	1
  8075  03AE  07C1               	addwf	___ftadd@f2,f
  8076  03AF  3000               	movlw	0
  8077  03B0  1803               	skipnc
  8078  03B1  3001               	movlw	1
  8079  03B2  07C2               	addwf	___ftadd@f2+1,f
  8080  03B3  3000               	movlw	0
  8081  03B4  1803               	skipnc
  8082  03B5  3001               	movlw	1
  8083  03B6  07C3               	addwf	___ftadd@f2+2,f
  8084  03B7                     l5333:	
  8085  03B7  01C8               	clrf	___ftadd@sign
  8086  03B8  083E               	movf	___ftadd@f1,w
  8087  03B9  07C1               	addwf	___ftadd@f2,f
  8088  03BA  083F               	movf	___ftadd@f1+1,w
  8089  03BB  3DC2               	addwfc	___ftadd@f2+1,f
  8090  03BC  0840               	movf	___ftadd@f1+2,w
  8091  03BD  3DC3               	addwfc	___ftadd@f2+2,f
  8092  03BE  1FC3               	btfss	___ftadd@f2+2,7
  8093  03BF  2BD2               	goto	l5343
  8094  03C0  30FF               	movlw	255
  8095  03C1  06C1               	xorwf	___ftadd@f2,f
  8096  03C2  30FF               	movlw	255
  8097  03C3  06C2               	xorwf	___ftadd@f2+1,f
  8098  03C4  30FF               	movlw	255
  8099  03C5  06C3               	xorwf	___ftadd@f2+2,f
  8100  03C6  3001               	movlw	1
  8101  03C7  07C1               	addwf	___ftadd@f2,f
  8102  03C8  3000               	movlw	0
  8103  03C9  1803               	skipnc
  8104  03CA  3001               	movlw	1
  8105  03CB  07C2               	addwf	___ftadd@f2+1,f
  8106  03CC  3000               	movlw	0
  8107  03CD  1803               	skipnc
  8108  03CE  3001               	movlw	1
  8109  03CF  07C3               	addwf	___ftadd@f2+2,f
  8110  03D0  01C8               	clrf	___ftadd@sign
  8111  03D1  0AC8               	incf	___ftadd@sign,f
  8112  03D2                     l5343:	
  8113  03D2  0841               	movf	___ftadd@f2,w
  8114  03D3  00A0               	movwf	___ftpack@arg
  8115  03D4  0842               	movf	___ftadd@f2+1,w
  8116  03D5  00A1               	movwf	___ftpack@arg+1
  8117  03D6  0843               	movf	___ftadd@f2+2,w
  8118  03D7  00A2               	movwf	___ftpack@arg+2
  8119  03D8  084A               	movf	___ftadd@exp1,w
  8120  03D9  00C4               	movwf	??___ftadd
  8121  03DA  0844               	movf	??___ftadd,w
  8122  03DB  00A3               	movwf	___ftpack@exp
  8123  03DC  0848               	movf	___ftadd@sign,w
  8124  03DD  00C5               	movwf	??___ftadd+1
  8125  03DE  0845               	movf	??___ftadd+1,w
  8126  03DF  00A4               	movwf	___ftpack@sign
  8127  03E0  318A  2210         	fcall	___ftpack
  8128  03E2  0020               	movlb	0	; select bank0
  8129  03E3  0820               	movf	?___ftpack,w
  8130  03E4  00BE               	movwf	?___ftadd
  8131  03E5  0821               	movf	?___ftpack+1,w
  8132  03E6  00BF               	movwf	?___ftadd+1
  8133  03E7  0822               	movf	?___ftpack+2,w
  8134  03E8  00C0               	movwf	?___ftadd+2
  8135  03E9  0008               	return
  8136  03EA                     __end_of___ftadd:	
  8137                           
  8138                           	psect	text33
  8139  11A1                     __ptext33:	
  8140 ;; *************** function _getBuz_GO *****************
  8141 ;; Defined at:
  8142 ;;		line 82 in file "../src/Buzzer_B1.c"
  8143 ;; Parameters:    Size  Location     Type
  8144 ;;		None
  8145 ;; Auto vars:     Size  Location     Type
  8146 ;;  i               2    4[BANK0 ] int 
  8147 ;; Return value:  Size  Location     Type
  8148 ;;                  2    0[BANK0 ] int 
  8149 ;; Registers used:
  8150 ;;		wreg, status,2, status,0
  8151 ;; Tracked objects:
  8152 ;;		On entry : 0/0
  8153 ;;		On exit  : 0/0
  8154 ;;		Unchanged: 0/0
  8155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8156 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8157 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8158 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8159 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8160 ;;Total ram usage:        6 bytes
  8161 ;; Hardware stack levels used:    1
  8162 ;; Hardware stack levels required when called:    5
  8163 ;; This function calls:
  8164 ;;		Nothing
  8165 ;; This function is called by:
  8166 ;;		_setRF_Main
  8167 ;; This function uses a non-reentrant model
  8168 ;;
  8169                           
  8170                           
  8171                           ;psect for function _getBuz_GO
  8172  11A1                     _getBuz_GO:	
  8173                           
  8174                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8175                           
  8176                           ;incstack = 0
  8177                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8178  11A1  0021               	movlb	1	; select bank1
  8179  11A2  0C30               	rrf	_Buz1^(0+128),w
  8180  11A3  3901               	andlw	1
  8181  11A4  0020               	movlb	0	; select bank0
  8182  11A5  00A2               	movwf	??_getBuz_GO
  8183  11A6  01A3               	clrf	??_getBuz_GO+1
  8184  11A7  0822               	movf	??_getBuz_GO,w
  8185  11A8  00A4               	movwf	getBuz_GO@i
  8186  11A9  0823               	movf	??_getBuz_GO+1,w
  8187  11AA  00A5               	movwf	getBuz_GO@i+1
  8188                           
  8189                           ;Buzzer_B1.c: 84: return i;
  8190  11AB  0825               	movf	getBuz_GO@i+1,w
  8191  11AC  01A1               	clrf	?_getBuz_GO+1
  8192  11AD  07A1               	addwf	?_getBuz_GO+1,f
  8193  11AE  0824               	movf	getBuz_GO@i,w
  8194  11AF  01A0               	clrf	?_getBuz_GO
  8195  11B0  07A0               	addwf	?_getBuz_GO,f
  8196  11B1  0008               	return
  8197  11B2                     __end_of_getBuz_GO:	
  8198                           
  8199                           	psect	text34
  8200  0A71                     __ptext34:	
  8201 ;; *************** function _CC2500_TxData *****************
  8202 ;; Defined at:
  8203 ;;		line 32 in file "../src/CC2500_B1.c"
  8204 ;; Parameters:    Size  Location     Type
  8205 ;;		None
  8206 ;; Auto vars:     Size  Location     Type
  8207 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8208 ;; Return value:  Size  Location     Type
  8209 ;;		None               void
  8210 ;; Registers used:
  8211 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8212 ;; Tracked objects:
  8213 ;;		On entry : 0/0
  8214 ;;		On exit  : 0/0
  8215 ;;		Unchanged: 0/0
  8216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8219 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8220 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8221 ;;Total ram usage:        2 bytes
  8222 ;; Hardware stack levels used:    1
  8223 ;; Hardware stack levels required when called:    7
  8224 ;; This function calls:
  8225 ;;		_CC2500_WriteByte
  8226 ;;		_CC2500_WriteCommand
  8227 ;;		_Timeout_Counter
  8228 ;;		_set_TimeoutCleared
  8229 ;; This function is called by:
  8230 ;;		_setRF_Main
  8231 ;; This function uses a non-reentrant model
  8232 ;;
  8233                           
  8234                           
  8235                           ;psect for function _CC2500_TxData
  8236  0A71                     _CC2500_TxData:	
  8237                           
  8238                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8239                           ;CC2500_B1.c: 35: RC4 = 0;
  8240                           
  8241                           ;incstack = 0
  8242                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8243  0A71  0020               	movlb	0	; select bank0
  8244  0A72  120E               	bcf	14,4	;volatile
  8245                           
  8246                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8247  0A73  307F               	movlw	127
  8248  0A74  00A4               	movwf	??_CC2500_TxData
  8249  0A75  0824               	movf	??_CC2500_TxData,w
  8250  0A76  00FC               	movwf	_SPI0Buffer
  8251                           
  8252                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8253  0A77  2A7B               	goto	l6061
  8254  0A78                     l6059:	
  8255                           
  8256                           ;CC2500_B1.c: 38: Timeout_Counter();
  8257  0A78  3192  225F  318A   	fcall	_Timeout_Counter
  8258  0A7B                     l6061:	
  8259  0A7B  0020               	movlb	0	; select bank0
  8260  0A7C  1D0E               	btfss	14,2	;volatile
  8261  0A7D  2A81               	goto	l6065
  8262  0A7E  0021               	movlb	1	; select bank1
  8263  0A7F  1D2D               	btfss	(_myMain^(0+128)+13),2
  8264  0A80  2A78               	goto	l6059
  8265  0A81                     l6065:	
  8266                           
  8267                           ;CC2500_B1.c: 39: };
  8268                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8269  0A81  319F  278F  318A   	fcall	_set_TimeoutCleared
  8270                           
  8271                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8272  0A84  3192  220F  318A   	fcall	_CC2500_WriteByte
  8273                           
  8274                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8275  0A87  0021               	movlb	1	; select bank1
  8276  0A88  0857               	movf	_Tx_Length^(0+128),w
  8277  0A89  0020               	movlb	0	; select bank0
  8278  0A8A  00A4               	movwf	??_CC2500_TxData
  8279  0A8B  0824               	movf	??_CC2500_TxData,w
  8280  0A8C  00FC               	movwf	_SPI0Buffer
  8281                           
  8282                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8283  0A8D  3192  220F  318A   	fcall	_CC2500_WriteByte
  8284                           
  8285                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8286  0A90  0020               	movlb	0	; select bank0
  8287  0A91  01A5               	clrf	CC2500_TxData@loop_e
  8288  0A92                     l6079:	
  8289  0A92  0021               	movlb	1	; select bank1
  8290  0A93  0857               	movf	_Tx_Length^(0+128),w
  8291  0A94  0020               	movlb	0	; select bank0
  8292  0A95  0225               	subwf	CC2500_TxData@loop_e,w
  8293  0A96  1803               	btfsc	3,0
  8294  0A97  2AAA               	goto	l259
  8295                           
  8296                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8297  0A98  0825               	movf	CC2500_TxData@loop_e,w
  8298  0A99  3E20               	addlw	_RF_Data& (0+255)
  8299  0A9A  0086               	movwf	6
  8300  0A9B  3001               	movlw	1	; select bank2/3
  8301  0A9C  0087               	movwf	7
  8302  0A9D  0801               	movf	1,w
  8303  0A9E  00A4               	movwf	??_CC2500_TxData
  8304  0A9F  0824               	movf	??_CC2500_TxData,w
  8305  0AA0  00FC               	movwf	_SPI0Buffer
  8306                           
  8307                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8308  0AA1  3192  220F  318A   	fcall	_CC2500_WriteByte
  8309  0AA4  3001               	movlw	1
  8310  0AA5  0020               	movlb	0	; select bank0
  8311  0AA6  00A4               	movwf	??_CC2500_TxData
  8312  0AA7  0824               	movf	??_CC2500_TxData,w
  8313  0AA8  07A5               	addwf	CC2500_TxData@loop_e,f
  8314  0AA9  2A92               	goto	l6079
  8315  0AAA                     l259:	
  8316                           
  8317                           ;CC2500_B1.c: 48: }
  8318                           ;CC2500_B1.c: 49: RC4 = 1;
  8319  0AAA  160E               	bsf	14,4	;volatile
  8320                           
  8321                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8322  0AAB  3035               	movlw	53
  8323  0AAC  3192  22F8  318A   	fcall	_CC2500_WriteCommand
  8324                           
  8325                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  8326  0AAF  2AB3               	goto	l6085
  8327  0AB0                     l6083:	
  8328                           
  8329                           ;CC2500_B1.c: 52: Timeout_Counter();
  8330  0AB0  3192  225F  318A   	fcall	_Timeout_Counter
  8331  0AB3                     l6085:	
  8332  0AB3  0020               	movlb	0	; select bank0
  8333  0AB4  180D               	btfsc	13,0	;volatile
  8334  0AB5  2AB9               	goto	l6089
  8335  0AB6  0021               	movlb	1	; select bank1
  8336  0AB7  1D2D               	btfss	(_myMain^(0+128)+13),2
  8337  0AB8  2AB0               	goto	l6083
  8338  0AB9                     l6089:	
  8339                           
  8340                           ;CC2500_B1.c: 53: };
  8341                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8342  0AB9  319F  278F  318A   	fcall	_set_TimeoutCleared
  8343                           
  8344                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  8345  0ABC  2AC0               	goto	l6093
  8346  0ABD                     l6091:	
  8347                           
  8348                           ;CC2500_B1.c: 57: Timeout_Counter();
  8349  0ABD  3192  225F  318A   	fcall	_Timeout_Counter
  8350  0AC0                     l6093:	
  8351  0AC0  0020               	movlb	0	; select bank0
  8352  0AC1  1C0D               	btfss	13,0	;volatile
  8353  0AC2  2AC6               	goto	l6097
  8354  0AC3  0021               	movlb	1	; select bank1
  8355  0AC4  1D2D               	btfss	(_myMain^(0+128)+13),2
  8356  0AC5  2ABD               	goto	l6091
  8357  0AC6                     l6097:	
  8358                           
  8359                           ;CC2500_B1.c: 58: };
  8360                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8361  0AC6  319F  278F  318A   	fcall	_set_TimeoutCleared
  8362                           
  8363                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8364  0AC9  3036               	movlw	54
  8365  0ACA  3192  22F8  318A   	fcall	_CC2500_WriteCommand
  8366                           
  8367                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8368  0ACD  303B               	movlw	59
  8369  0ACE  3192  22F8  318A   	fcall	_CC2500_WriteCommand
  8370                           
  8371                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  8372  0AD1  303A               	movlw	58
  8373  0AD2  3192  22F8         	fcall	_CC2500_WriteCommand
  8374                           
  8375                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8376  0AD4  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8377  0AD5  0008               	return
  8378  0AD6                     __end_of_CC2500_TxData:	
  8379                           
  8380                           	psect	text35
  8381  0CF5                     __ptext35:	
  8382 ;; *************** function _CC2500_RxData *****************
  8383 ;; Defined at:
  8384 ;;		line 70 in file "../src/CC2500_B1.c"
  8385 ;; Parameters:    Size  Location     Type
  8386 ;;		None
  8387 ;; Auto vars:     Size  Location     Type
  8388 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8389 ;; Return value:  Size  Location     Type
  8390 ;;		None               void
  8391 ;; Registers used:
  8392 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8393 ;; Tracked objects:
  8394 ;;		On entry : 0/0
  8395 ;;		On exit  : 0/0
  8396 ;;		Unchanged: 0/0
  8397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8399 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8400 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8401 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8402 ;;Total ram usage:        2 bytes
  8403 ;; Hardware stack levels used:    1
  8404 ;; Hardware stack levels required when called:    7
  8405 ;; This function calls:
  8406 ;;		_CC2500_ReadByte
  8407 ;;		_CC2500_ReadStatus
  8408 ;;		_CC2500_WriteByte
  8409 ;;		_Timeout_Counter
  8410 ;;		_set_TimeoutCleared
  8411 ;; This function is called by:
  8412 ;;		_setRF_Main
  8413 ;; This function uses a non-reentrant model
  8414 ;;
  8415                           
  8416                           
  8417                           ;psect for function _CC2500_RxData
  8418  0CF5                     _CC2500_RxData:	
  8419                           
  8420                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8421                           ;CC2500_B1.c: 75: if (RB0 == 1)
  8422                           
  8423                           ;incstack = 0
  8424                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8425  0CF5  0020               	movlb	0	; select bank0
  8426  0CF6  180D               	btfsc	13,0	;volatile
  8427  0CF7  2CFC               	goto	l6113
  8428  0CF8  2D05               	goto	l6119
  8429  0CF9                     l6111:	
  8430                           ;CC2500_B1.c: 76: {
  8431                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  8432                           
  8433                           
  8434                           ;CC2500_B1.c: 78: Timeout_Counter();
  8435  0CF9  3192  225F  318C   	fcall	_Timeout_Counter
  8436  0CFC                     l6113:	
  8437  0CFC  0020               	movlb	0	; select bank0
  8438  0CFD  1C0D               	btfss	13,0	;volatile
  8439  0CFE  2D02               	goto	l6117
  8440  0CFF  0021               	movlb	1	; select bank1
  8441  0D00  1D2D               	btfss	(_myMain^(0+128)+13),2
  8442  0D01  2CF9               	goto	l6111
  8443  0D02                     l6117:	
  8444                           
  8445                           ;CC2500_B1.c: 79: };
  8446                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8447  0D02  319F  278F  318C   	fcall	_set_TimeoutCleared
  8448  0D05                     l6119:	
  8449                           
  8450                           ;CC2500_B1.c: 81: }
  8451                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8452  0D05  303B               	movlw	59
  8453  0D06  3194  241E  318C   	fcall	_CC2500_ReadStatus
  8454                           
  8455                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8456  0D09  0021               	movlb	1	; select bank1
  8457  0D0A  085A               	movf	_s_data^(0+128),w
  8458  0D0B  1903               	btfsc	3,2
  8459  0D0C  0008               	return
  8460                           
  8461                           ;CC2500_B1.c: 86: RC4 = 0;
  8462  0D0D  0020               	movlb	0	; select bank0
  8463  0D0E  120E               	bcf	14,4	;volatile
  8464                           
  8465                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8466  0D0F  30FF               	movlw	255
  8467  0D10  00A4               	movwf	??_CC2500_RxData
  8468  0D11  0824               	movf	??_CC2500_RxData,w
  8469  0D12  00FC               	movwf	_SPI0Buffer
  8470                           
  8471                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  8472  0D13  2D1A               	goto	l6129
  8473  0D14                     l6131:	
  8474  0D14  0021               	movlb	1	; select bank1
  8475  0D15  192D               	btfsc	(_myMain^(0+128)+13),2
  8476  0D16  2D1D               	goto	l284
  8477                           
  8478                           ;CC2500_B1.c: 89: Timeout_Counter();
  8479  0D17  3192  225F  318C   	fcall	_Timeout_Counter
  8480  0D1A                     l6129:	
  8481  0D1A  0020               	movlb	0	; select bank0
  8482  0D1B  190E               	btfsc	14,2	;volatile
  8483  0D1C  2D14               	goto	l6131
  8484  0D1D                     l284:	
  8485                           
  8486                           ;CC2500_B1.c: 90: };
  8487                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  8488  0D1D  0021               	movlb	1	; select bank1
  8489  0D1E  192D               	btfsc	(_myMain^(0+128)+13),2
  8490  0D1F  2D60               	goto	l285
  8491                           
  8492                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  8493  0D20  3192  220F  318C   	fcall	_CC2500_WriteByte
  8494                           
  8495                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  8496  0D23  3192  22E1  318C   	fcall	_CC2500_ReadByte
  8497                           
  8498                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  8499  0D26  087C               	movf	_SPI0Buffer,w
  8500  0D27  0020               	movlb	0	; select bank0
  8501  0D28  00A4               	movwf	??_CC2500_RxData
  8502  0D29  0824               	movf	??_CC2500_RxData,w
  8503  0D2A  0021               	movlb	1	; select bank1
  8504  0D2B  00D6               	movwf	_Rx_Length^(0+128)
  8505                           
  8506                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8507  0D2C  0020               	movlb	0	; select bank0
  8508  0D2D  01A5               	clrf	CC2500_RxData@loop_f
  8509  0D2E                     l6145:	
  8510  0D2E  0021               	movlb	1	; select bank1
  8511  0D2F  0856               	movf	_Rx_Length^(0+128),w
  8512  0D30  0020               	movlb	0	; select bank0
  8513  0D31  0225               	subwf	CC2500_RxData@loop_f,w
  8514  0D32  1803               	btfsc	3,0
  8515  0D33  2D46               	goto	l6147
  8516                           
  8517                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8518  0D34  3192  22E1  318C   	fcall	_CC2500_ReadByte
  8519                           
  8520                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  8521  0D37  087C               	movf	_SPI0Buffer,w
  8522  0D38  0020               	movlb	0	; select bank0
  8523  0D39  00A4               	movwf	??_CC2500_RxData
  8524  0D3A  0825               	movf	CC2500_RxData@loop_f,w
  8525  0D3B  3E20               	addlw	_RF_Data& (0+255)
  8526  0D3C  0086               	movwf	6
  8527  0D3D  3001               	movlw	1	; select bank2/3
  8528  0D3E  0087               	movwf	7
  8529  0D3F  0824               	movf	??_CC2500_RxData,w
  8530  0D40  0081               	movwf	1
  8531  0D41  3001               	movlw	1
  8532  0D42  00A4               	movwf	??_CC2500_RxData
  8533  0D43  0824               	movf	??_CC2500_RxData,w
  8534  0D44  07A5               	addwf	CC2500_RxData@loop_f,f
  8535  0D45  2D2E               	goto	l6145
  8536  0D46                     l6147:	
  8537                           
  8538                           ;CC2500_B1.c: 99: }
  8539                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  8540  0D46  3192  22E1  318C   	fcall	_CC2500_ReadByte
  8541                           
  8542                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  8543  0D49  087C               	movf	_SPI0Buffer,w
  8544  0D4A  0020               	movlb	0	; select bank0
  8545  0D4B  00A4               	movwf	??_CC2500_RxData
  8546  0D4C  0824               	movf	??_CC2500_RxData,w
  8547  0D4D  0021               	movlb	1	; select bank1
  8548  0D4E  00D5               	movwf	_RSSI^(0+128)
  8549                           
  8550                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8551  0D4F  3192  22E1  318C   	fcall	_CC2500_ReadByte
  8552                           
  8553                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  8554  0D52  087C               	movf	_SPI0Buffer,w
  8555  0D53  0020               	movlb	0	; select bank0
  8556  0D54  00A4               	movwf	??_CC2500_RxData
  8557  0D55  0824               	movf	??_CC2500_RxData,w
  8558  0D56  0021               	movlb	1	; select bank1
  8559  0D57  00CF               	movwf	_CRC^(0+128)
  8560                           
  8561                           ;CC2500_B1.c: 104: RC4 = 1;
  8562  0D58  0020               	movlb	0	; select bank0
  8563  0D59  160E               	bsf	14,4	;volatile
  8564                           
  8565                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  8566  0D5A  0021               	movlb	1	; select bank1
  8567  0D5B  1BCF               	btfsc	_CRC^(0+128),7
  8568                           
  8569                           ;CC2500_B1.c: 106: Receive_OK = 1;
  8570  0D5C  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8571                           
  8572                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  8573  0D5D  11BC               	bcf	_RF1^(0+128),3
  8574                           
  8575                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  8576  0D5E  14BC               	bsf	_RF1^(0+128),1
  8577                           
  8578                           ;CC2500_B1.c: 110: } else {
  8579  0D5F  2D62               	goto	l6159
  8580  0D60                     l285:	
  8581                           
  8582                           ;CC2500_B1.c: 111: RC4 = 1;
  8583  0D60  0020               	movlb	0	; select bank0
  8584  0D61  160E               	bsf	14,4	;volatile
  8585  0D62                     l6159:	
  8586                           
  8587                           ;CC2500_B1.c: 112: }
  8588                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  8589  0D62  319F  278F         	fcall	_set_TimeoutCleared
  8590  0D64  0021               	movlb	1	; select bank1
  8591  0D65  0008               	return
  8592  0D66                     __end_of_CC2500_RxData:	
  8593                           
  8594                           	psect	text36
  8595  141E                     __ptext36:	
  8596 ;; *************** function _CC2500_ReadStatus *****************
  8597 ;; Defined at:
  8598 ;;		line 304 in file "../src/CC2500_B1.c"
  8599 ;; Parameters:    Size  Location     Type
  8600 ;;  status_addr     1    wreg     unsigned char 
  8601 ;; Auto vars:     Size  Location     Type
  8602 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8603 ;; Return value:  Size  Location     Type
  8604 ;;		None               void
  8605 ;; Registers used:
  8606 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8607 ;; Tracked objects:
  8608 ;;		On entry : 0/0
  8609 ;;		On exit  : 0/0
  8610 ;;		Unchanged: 0/0
  8611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8613 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8614 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8615 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8616 ;;Total ram usage:        2 bytes
  8617 ;; Hardware stack levels used:    1
  8618 ;; Hardware stack levels required when called:    6
  8619 ;; This function calls:
  8620 ;;		_CC2500_ReadByte
  8621 ;;		_CC2500_WriteByte
  8622 ;;		_Timeout_Counter
  8623 ;;		_set_TimeoutCleared
  8624 ;; This function is called by:
  8625 ;;		_CC2500_RxData
  8626 ;;		_setRF_Main
  8627 ;; This function uses a non-reentrant model
  8628 ;;
  8629                           
  8630                           
  8631                           ;psect for function _CC2500_ReadStatus
  8632  141E                     _CC2500_ReadStatus:	
  8633                           
  8634                           ;incstack = 0
  8635                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8636                           ;CC2500_ReadStatus@status_addr stored from wreg
  8637  141E  0020               	movlb	0	; select bank0
  8638  141F  00A3               	movwf	CC2500_ReadStatus@status_addr
  8639                           
  8640                           ;CC2500_B1.c: 305: RC4 = 0;
  8641  1420  120E               	bcf	14,4	;volatile
  8642                           
  8643                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  8644  1421  0823               	movf	CC2500_ReadStatus@status_addr,w
  8645  1422  3EC0               	addlw	192
  8646  1423  00A2               	movwf	??_CC2500_ReadStatus
  8647  1424  0822               	movf	??_CC2500_ReadStatus,w
  8648  1425  00FC               	movwf	_SPI0Buffer
  8649                           
  8650                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  8651  1426  2C2A               	goto	l5967
  8652  1427                     l5965:	
  8653                           
  8654                           ;CC2500_B1.c: 309: Timeout_Counter();
  8655  1427  3192  225F  3194   	fcall	_Timeout_Counter
  8656  142A                     l5967:	
  8657  142A  0020               	movlb	0	; select bank0
  8658  142B  1D0E               	btfss	14,2	;volatile
  8659  142C  2C30               	goto	l5971
  8660  142D  0021               	movlb	1	; select bank1
  8661  142E  1D2D               	btfss	(_myMain^(0+128)+13),2
  8662  142F  2C27               	goto	l5965
  8663  1430                     l5971:	
  8664                           
  8665                           ;CC2500_B1.c: 310: };
  8666                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  8667  1430  319F  278F  3194   	fcall	_set_TimeoutCleared
  8668                           
  8669                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  8670  1433  3192  220F  3194   	fcall	_CC2500_WriteByte
  8671                           
  8672                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  8673  1436  3192  22E1         	fcall	_CC2500_ReadByte
  8674                           
  8675                           ;CC2500_B1.c: 315: RC4 = 1;
  8676  1438  0020               	movlb	0	; select bank0
  8677  1439  160E               	bsf	14,4	;volatile
  8678                           
  8679                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  8680  143A  087C               	movf	_SPI0Buffer,w
  8681  143B  00A2               	movwf	??_CC2500_ReadStatus
  8682  143C  0822               	movf	??_CC2500_ReadStatus,w
  8683  143D  0021               	movlb	1	; select bank1
  8684  143E  00DA               	movwf	_s_data^(0+128)
  8685  143F  0008               	return
  8686  1440                     __end_of_CC2500_ReadStatus:	
  8687                           
  8688                           	psect	text37
  8689  12E1                     __ptext37:	
  8690 ;; *************** function _CC2500_ReadByte *****************
  8691 ;; Defined at:
  8692 ;;		line 238 in file "../src/CC2500_B1.c"
  8693 ;; Parameters:    Size  Location     Type
  8694 ;;		None
  8695 ;; Auto vars:     Size  Location     Type
  8696 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8697 ;; Return value:  Size  Location     Type
  8698 ;;		None               void
  8699 ;; Registers used:
  8700 ;;		wreg, status,2, status,0
  8701 ;; Tracked objects:
  8702 ;;		On entry : 0/0
  8703 ;;		On exit  : 0/0
  8704 ;;		Unchanged: 0/0
  8705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8708 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8709 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;Total ram usage:        2 bytes
  8711 ;; Hardware stack levels used:    1
  8712 ;; Hardware stack levels required when called:    5
  8713 ;; This function calls:
  8714 ;;		Nothing
  8715 ;; This function is called by:
  8716 ;;		_CC2500_RxData
  8717 ;;		_CC2500_ReadStatus
  8718 ;;		_CC2500_ReadREG
  8719 ;; This function uses a non-reentrant model
  8720 ;;
  8721                           
  8722                           
  8723                           ;psect for function _CC2500_ReadByte
  8724  12E1                     _CC2500_ReadByte:	
  8725                           
  8726                           ;CC2500_B1.c: 239: unsigned char loop_b;
  8727                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  8728                           
  8729                           ;incstack = 0
  8730                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8731  12E1  0020               	movlb	0	; select bank0
  8732  12E2  01A1               	clrf	CC2500_ReadByte@loop_b
  8733  12E3                     L4:	
  8734  12E3  3008               	movlw	8
  8735  12E4  0221               	subwf	CC2500_ReadByte@loop_b,w
  8736  12E5  1803               	btfsc	3,0
  8737  12E6  0008               	return
  8738                           
  8739                           ;CC2500_B1.c: 241: RC1 = 1;
  8740  12E7  148E               	bsf	14,1	;volatile
  8741                           
  8742                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  8743  12E8  1003               	clrc
  8744  12E9  0DFC               	rlf	_SPI0Buffer,f
  8745                           
  8746                           ;CC2500_B1.c: 243: if (RC2 == 1)
  8747  12EA  1D0E               	btfss	14,2	;volatile
  8748  12EB  2AEE               	goto	l5859
  8749                           
  8750                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  8751  12EC  147C               	bsf	_SPI0Buffer,0
  8752  12ED  2AF2               	goto	l5861
  8753  12EE                     l5859:	
  8754                           
  8755                           ;CC2500_B1.c: 245: else
  8756                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  8757  12EE  30FE               	movlw	254
  8758  12EF  00A0               	movwf	??_CC2500_ReadByte
  8759  12F0  0820               	movf	??_CC2500_ReadByte,w
  8760  12F1  05FC               	andwf	_SPI0Buffer,f
  8761  12F2                     l5861:	
  8762                           
  8763                           ;CC2500_B1.c: 247: RC1 = 0;
  8764  12F2  108E               	bcf	14,1	;volatile
  8765  12F3  3001               	movlw	1
  8766  12F4  00A0               	movwf	??_CC2500_ReadByte
  8767  12F5  0820               	movf	??_CC2500_ReadByte,w
  8768  12F6  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8769  12F7  2AE3               	goto	L4
  8770  12F8                     __end_of_CC2500_ReadByte:	
  8771                           
  8772                           	psect	text38
  8773  1F79                     __ptext38:	
  8774 ;; *************** function _RF_Initialization *****************
  8775 ;; Defined at:
  8776 ;;		line 9 in file "../src/RF_Control_B1.c"
  8777 ;; Parameters:    Size  Location     Type
  8778 ;;		None
  8779 ;; Auto vars:     Size  Location     Type
  8780 ;;		None
  8781 ;; Return value:  Size  Location     Type
  8782 ;;		None               void
  8783 ;; Registers used:
  8784 ;;		wreg, status,2, status,0, pclath, cstack
  8785 ;; Tracked objects:
  8786 ;;		On entry : 0/0
  8787 ;;		On exit  : 0/0
  8788 ;;		Unchanged: 0/0
  8789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8794 ;;Total ram usage:        0 bytes
  8795 ;; Hardware stack levels used:    1
  8796 ;; Hardware stack levels required when called:    6
  8797 ;; This function calls:
  8798 ;;		_setRF_Initialization
  8799 ;; This function is called by:
  8800 ;;		_main
  8801 ;; This function uses a non-reentrant model
  8802 ;;
  8803                           
  8804                           
  8805                           ;psect for function _RF_Initialization
  8806  1F79                     _RF_Initialization:	
  8807                           
  8808                           ;RF_Control_B1.c: 11: setRF_Initialization();
  8809                           
  8810                           ;incstack = 0
  8811                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8812  1F79  3190  2088         	fcall	_setRF_Initialization
  8813  1F7B  0008               	return
  8814  1F7C                     __end_of_RF_Initialization:	
  8815                           
  8816                           	psect	text39
  8817  1088                     __ptext39:	
  8818 ;; *************** function _setRF_Initialization *****************
  8819 ;; Defined at:
  8820 ;;		line 43 in file "../src/RF_Control_B1.c"
  8821 ;; Parameters:    Size  Location     Type
  8822 ;;		None
  8823 ;; Auto vars:     Size  Location     Type
  8824 ;;		None
  8825 ;; Return value:  Size  Location     Type
  8826 ;;		None               void
  8827 ;; Registers used:
  8828 ;;		wreg
  8829 ;; Tracked objects:
  8830 ;;		On entry : 0/0
  8831 ;;		On exit  : 0/0
  8832 ;;		Unchanged: 0/0
  8833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8836 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8837 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8838 ;;Total ram usage:        1 bytes
  8839 ;; Hardware stack levels used:    1
  8840 ;; Hardware stack levels required when called:    5
  8841 ;; This function calls:
  8842 ;;		Nothing
  8843 ;; This function is called by:
  8844 ;;		_RF_Initialization
  8845 ;; This function uses a non-reentrant model
  8846 ;;
  8847                           
  8848                           
  8849                           ;psect for function _setRF_Initialization
  8850  1088                     _setRF_Initialization:	
  8851                           
  8852                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  8853                           
  8854                           ;incstack = 0
  8855                           ; Regs used in _setRF_Initialization: [wreg]
  8856  1088  3015               	movlw	21
  8857  1089  0020               	movlb	0	; select bank0
  8858  108A  00A0               	movwf	??_setRF_Initialization
  8859  108B  0820               	movf	??_setRF_Initialization,w
  8860  108C  0021               	movlb	1	; select bank1
  8861  108D  00D7               	movwf	_Tx_Length^(0+128)
  8862                           
  8863                           ;RF_Control_B1.c: 46: RF1.RunTime = 20;
  8864  108E  3014               	movlw	20
  8865  108F  00C3               	movwf	(_RF1^(0+128)+7)
  8866  1090  3000               	movlw	0
  8867  1091  00C4               	movwf	(_RF1^(0+128)+8)
  8868  1092  0008               	return
  8869  1093                     __end_of_setRF_Initialization:	
  8870                           
  8871                           	psect	text40
  8872  1289                     __ptext40:	
  8873 ;; *************** function _Mcu_Initialization *****************
  8874 ;; Defined at:
  8875 ;;		line 30 in file "../src/MCU_B1.c"
  8876 ;; Parameters:    Size  Location     Type
  8877 ;;		None
  8878 ;; Auto vars:     Size  Location     Type
  8879 ;;		None
  8880 ;; Return value:  Size  Location     Type
  8881 ;;		None               void
  8882 ;; Registers used:
  8883 ;;		wreg, status,2, status,0, pclath, cstack
  8884 ;; Tracked objects:
  8885 ;;		On entry : 0/0
  8886 ;;		On exit  : 0/0
  8887 ;;		Unchanged: 0/0
  8888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8893 ;;Total ram usage:        0 bytes
  8894 ;; Hardware stack levels used:    1
  8895 ;; Hardware stack levels required when called:    6
  8896 ;; This function calls:
  8897 ;;		_ADC_Set
  8898 ;;		_Fosc_Set
  8899 ;;		_INT_Set
  8900 ;;		_IOC_Set
  8901 ;;		_IO_Set
  8902 ;;		_TMR1_Set
  8903 ;;		_WDT_Set
  8904 ;; This function is called by:
  8905 ;;		_main
  8906 ;; This function uses a non-reentrant model
  8907 ;;
  8908                           
  8909                           
  8910                           ;psect for function _Mcu_Initialization
  8911  1289                     _Mcu_Initialization:	
  8912                           
  8913                           ;MCU_B1.c: 32: Fosc_Set();
  8914                           
  8915                           ;incstack = 0
  8916                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8917  1289  319F  278B  3192   	fcall	_Fosc_Set
  8918                           
  8919                           ;MCU_B1.c: 34: IO_Set();
  8920  128C  3193  2311  3192   	fcall	_IO_Set
  8921                           
  8922                           ;MCU_B1.c: 36: ;;
  8923                           ;MCU_B1.c: 38: TMR1_Set();
  8924  128F  3190  20C3  3192   	fcall	_TMR1_Set
  8925                           
  8926                           ;MCU_B1.c: 40: ADC_Set();
  8927  1292  319F  27AD  3192   	fcall	_ADC_Set
  8928                           
  8929                           ;MCU_B1.c: 42: ;;
  8930                           ;MCU_B1.c: 44: INT_Set();
  8931  1295  319F  2794  3192   	fcall	_INT_Set
  8932                           
  8933                           ;MCU_B1.c: 46: IOC_Set();
  8934  1298  3190  20DC  3192   	fcall	_IOC_Set
  8935                           
  8936                           ;MCU_B1.c: 48: ;;
  8937                           ;MCU_B1.c: 50: ;;
  8938                           ;MCU_B1.c: 52: WDT_Set();
  8939  129B  3190  207D         	fcall	_WDT_Set
  8940  129D  0008               	return
  8941  129E                     __end_of_Mcu_Initialization:	
  8942                           
  8943                           	psect	text41
  8944  107D                     __ptext41:	
  8945 ;; *************** function _WDT_Set *****************
  8946 ;; Defined at:
  8947 ;;		line 1005 in file "../src/MCU_B1.c"
  8948 ;; Parameters:    Size  Location     Type
  8949 ;;		None
  8950 ;; Auto vars:     Size  Location     Type
  8951 ;;		None
  8952 ;; Return value:  Size  Location     Type
  8953 ;;		None               void
  8954 ;; Registers used:
  8955 ;;		wreg
  8956 ;; Tracked objects:
  8957 ;;		On entry : 0/0
  8958 ;;		On exit  : 0/0
  8959 ;;		Unchanged: 0/0
  8960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8964 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8965 ;;Total ram usage:        1 bytes
  8966 ;; Hardware stack levels used:    1
  8967 ;; Hardware stack levels required when called:    5
  8968 ;; This function calls:
  8969 ;;		Nothing
  8970 ;; This function is called by:
  8971 ;;		_Mcu_Initialization
  8972 ;; This function uses a non-reentrant model
  8973 ;;
  8974                           
  8975                           
  8976                           ;psect for function _WDT_Set
  8977  107D                     _WDT_Set:	
  8978                           
  8979                           ;MCU_B1.c: 1012: WDTCON = 0b00010111;;
  8980                           
  8981                           ;incstack = 0
  8982                           ; Regs used in _WDT_Set: [wreg]
  8983  107D  3017               	movlw	23
  8984  107E  0021               	movlb	1	; select bank1
  8985  107F  0097               	movwf	23	;volatile
  8986                           
  8987                           ;MCU_B1.c: 1014: WDT.Enable = 1;
  8988  1080  144D               	bsf	_WDT^(0+128),0
  8989                           
  8990                           ;MCU_B1.c: 1015: WDT.Timer = 10;
  8991  1081  300A               	movlw	10
  8992  1082  0020               	movlb	0	; select bank0
  8993  1083  00A0               	movwf	??_WDT_Set
  8994  1084  0820               	movf	??_WDT_Set,w
  8995  1085  0021               	movlb	1	; select bank1
  8996  1086  00CE               	movwf	(_WDT^(0+128)+1)
  8997  1087  0008               	return
  8998  1088                     __end_of_WDT_Set:	
  8999                           
  9000                           	psect	text42
  9001  10C3                     __ptext42:	
  9002 ;; *************** function _TMR1_Set *****************
  9003 ;; Defined at:
  9004 ;;		line 199 in file "../src/MCU_B1.c"
  9005 ;; Parameters:    Size  Location     Type
  9006 ;;		None
  9007 ;; Auto vars:     Size  Location     Type
  9008 ;;		None
  9009 ;; Return value:  Size  Location     Type
  9010 ;;		None               void
  9011 ;; Registers used:
  9012 ;;		wreg
  9013 ;; Tracked objects:
  9014 ;;		On entry : 0/0
  9015 ;;		On exit  : 0/0
  9016 ;;		Unchanged: 0/0
  9017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9022 ;;Total ram usage:        0 bytes
  9023 ;; Hardware stack levels used:    1
  9024 ;; Hardware stack levels required when called:    5
  9025 ;; This function calls:
  9026 ;;		Nothing
  9027 ;; This function is called by:
  9028 ;;		_Mcu_Initialization
  9029 ;; This function uses a non-reentrant model
  9030 ;;
  9031                           
  9032                           
  9033                           ;psect for function _TMR1_Set
  9034  10C3                     _TMR1_Set:	
  9035                           
  9036                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9037                           
  9038                           ;incstack = 0
  9039                           ; Regs used in _TMR1_Set: [wreg]
  9040  10C3  3041               	movlw	65
  9041  10C4  0020               	movlb	0	; select bank0
  9042  10C5  0098               	movwf	24	;volatile
  9043                           
  9044                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9045  10C6  30FA               	movlw	250
  9046  10C7  0097               	movwf	23	;volatile
  9047                           
  9048                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9049  10C8  3038               	movlw	56
  9050  10C9  0096               	movwf	22	;volatile
  9051                           
  9052                           ;MCU_B1.c: 203: TMR1IE = 1;
  9053  10CA  0021               	movlb	1	; select bank1
  9054  10CB  1411               	bsf	17,0	;volatile
  9055                           
  9056                           ;MCU_B1.c: 204: PEIE = 1;
  9057  10CC  170B               	bsf	11,6	;volatile
  9058                           
  9059                           ;MCU_B1.c: 205: GIE = 1;
  9060  10CD  178B               	bsf	11,7	;volatile
  9061  10CE  0008               	return
  9062  10CF                     __end_of_TMR1_Set:	
  9063                           
  9064                           	psect	text43
  9065  1311                     __ptext43:	
  9066 ;; *************** function _IO_Set *****************
  9067 ;; Defined at:
  9068 ;;		line 60 in file "../src/MCU_B1.c"
  9069 ;; Parameters:    Size  Location     Type
  9070 ;;		None
  9071 ;; Auto vars:     Size  Location     Type
  9072 ;;		None
  9073 ;; Return value:  Size  Location     Type
  9074 ;;		None               void
  9075 ;; Registers used:
  9076 ;;		wreg, status,2
  9077 ;; Tracked objects:
  9078 ;;		On entry : 0/0
  9079 ;;		On exit  : 0/0
  9080 ;;		Unchanged: 0/0
  9081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9086 ;;Total ram usage:        0 bytes
  9087 ;; Hardware stack levels used:    1
  9088 ;; Hardware stack levels required when called:    5
  9089 ;; This function calls:
  9090 ;;		Nothing
  9091 ;; This function is called by:
  9092 ;;		_Mcu_Initialization
  9093 ;; This function uses a non-reentrant model
  9094 ;;
  9095                           
  9096                           
  9097                           ;psect for function _IO_Set
  9098  1311                     _IO_Set:	
  9099                           
  9100                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9101                           
  9102                           ;incstack = 0
  9103                           ; Regs used in _IO_Set: [wreg+status,2]
  9104  1311  3077               	movlw	119
  9105  1312  0021               	movlb	1	; select bank1
  9106  1313  008C               	movwf	12	;volatile
  9107                           
  9108                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9109  1314  3007               	movlw	7
  9110  1315  008D               	movwf	13	;volatile
  9111                           
  9112                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9113  1316  300C               	movlw	12
  9114  1317  008E               	movwf	14	;volatile
  9115                           
  9116                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9117  1318  0022               	movlb	2	; select bank2
  9118  1319  018C               	clrf	12	;volatile
  9119                           
  9120                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9121  131A  3002               	movlw	2
  9122  131B  008D               	movwf	13	;volatile
  9123                           
  9124                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9125  131C  018E               	clrf	14	;volatile
  9126                           
  9127                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9128  131D  3022               	movlw	34
  9129  131E  0023               	movlb	3	; select bank3
  9130  131F  008C               	movwf	12	;volatile
  9131                           
  9132                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9133  1320  018D               	clrf	13	;volatile
  9134                           
  9135                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9136  1321  018E               	clrf	14	;volatile
  9137                           
  9138                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9139  1322  3077               	movlw	119
  9140  1323  0020               	movlb	0	; select bank0
  9141  1324  008C               	movwf	12	;volatile
  9142                           
  9143                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  9144  1325  3007               	movlw	7
  9145  1326  008D               	movwf	13	;volatile
  9146                           
  9147                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9148  1327  300C               	movlw	12
  9149  1328  008E               	movwf	14	;volatile
  9150  1329  0008               	return
  9151  132A                     __end_of_IO_Set:	
  9152                           
  9153                           	psect	text44
  9154  10DC                     __ptext44:	
  9155 ;; *************** function _IOC_Set *****************
  9156 ;; Defined at:
  9157 ;;		line 367 in file "../src/MCU_B1.c"
  9158 ;; Parameters:    Size  Location     Type
  9159 ;;		None
  9160 ;; Auto vars:     Size  Location     Type
  9161 ;;		None
  9162 ;; Return value:  Size  Location     Type
  9163 ;;		None               void
  9164 ;; Registers used:
  9165 ;;		wreg, status,2
  9166 ;; Tracked objects:
  9167 ;;		On entry : 0/0
  9168 ;;		On exit  : 0/0
  9169 ;;		Unchanged: 0/0
  9170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9175 ;;Total ram usage:        0 bytes
  9176 ;; Hardware stack levels used:    1
  9177 ;; Hardware stack levels required when called:    5
  9178 ;; This function calls:
  9179 ;;		Nothing
  9180 ;; This function is called by:
  9181 ;;		_Mcu_Initialization
  9182 ;; This function uses a non-reentrant model
  9183 ;;
  9184                           
  9185                           
  9186                           ;psect for function _IOC_Set
  9187  10DC                     _IOC_Set:	
  9188                           
  9189                           ;MCU_B1.c: 368: WPUB2 = 0;
  9190                           
  9191                           ;incstack = 0
  9192                           ; Regs used in _IOC_Set: [wreg+status,2]
  9193  10DC  0024               	movlb	4	; select bank4
  9194  10DD  110D               	bcf	13,2	;volatile
  9195                           
  9196                           ;MCU_B1.c: 382: IOCBP = 0b00000100;
  9197  10DE  3004               	movlw	4
  9198  10DF  0027               	movlb	7	; select bank7
  9199  10E0  0094               	movwf	20	;volatile
  9200                           
  9201                           ;MCU_B1.c: 383: IOCBN = 0b00000100;
  9202  10E1  3004               	movlw	4
  9203  10E2  0095               	movwf	21	;volatile
  9204                           
  9205                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
  9206  10E3  0196               	clrf	22	;volatile
  9207                           
  9208                           ;MCU_B1.c: 394: IOCIE = 1;
  9209  10E4  158B               	bsf	11,3	;volatile
  9210                           
  9211                           ;MCU_B1.c: 395: IOCIF = 0;
  9212  10E5  100B               	bcf	11,0	;volatile
  9213                           
  9214                           ;MCU_B1.c: 396: PEIE = 1;
  9215  10E6  170B               	bsf	11,6	;volatile
  9216                           
  9217                           ;MCU_B1.c: 397: GIE = 1;
  9218  10E7  178B               	bsf	11,7	;volatile
  9219  10E8  0008               	return
  9220  10E9                     __end_of_IOC_Set:	
  9221                           
  9222                           	psect	text45
  9223  1F94                     __ptext45:	
  9224 ;; *************** function _INT_Set *****************
  9225 ;; Defined at:
  9226 ;;		line 340 in file "../src/MCU_B1.c"
  9227 ;; Parameters:    Size  Location     Type
  9228 ;;		None
  9229 ;; Auto vars:     Size  Location     Type
  9230 ;;		None
  9231 ;; Return value:  Size  Location     Type
  9232 ;;		None               void
  9233 ;; Registers used:
  9234 ;;		None
  9235 ;; Tracked objects:
  9236 ;;		On entry : 0/0
  9237 ;;		On exit  : 0/0
  9238 ;;		Unchanged: 0/0
  9239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9244 ;;Total ram usage:        0 bytes
  9245 ;; Hardware stack levels used:    1
  9246 ;; Hardware stack levels required when called:    5
  9247 ;; This function calls:
  9248 ;;		Nothing
  9249 ;; This function is called by:
  9250 ;;		_Mcu_Initialization
  9251 ;; This function uses a non-reentrant model
  9252 ;;
  9253                           
  9254                           
  9255                           ;psect for function _INT_Set
  9256  1F94                     _INT_Set:	
  9257                           
  9258                           ;MCU_B1.c: 341: WPUB0 = 0;
  9259                           
  9260                           ;incstack = 0
  9261                           ; Regs used in _INT_Set: []
  9262  1F94  0024               	movlb	4	; select bank4
  9263  1F95  100D               	bcf	13,0	;volatile
  9264                           
  9265                           ;MCU_B1.c: 342: INTE = 0;
  9266  1F96  120B               	bcf	11,4	;volatile
  9267                           
  9268                           ;MCU_B1.c: 343: PEIE = 1;
  9269  1F97  170B               	bsf	11,6	;volatile
  9270                           
  9271                           ;MCU_B1.c: 344: GIE = 1;
  9272  1F98  178B               	bsf	11,7	;volatile
  9273  1F99  0008               	return
  9274  1F9A                     __end_of_INT_Set:	
  9275                           
  9276                           	psect	text46
  9277  1F8B                     __ptext46:	
  9278 ;; *************** function _Fosc_Set *****************
  9279 ;; Defined at:
  9280 ;;		line 56 in file "../src/MCU_B1.c"
  9281 ;; Parameters:    Size  Location     Type
  9282 ;;		None
  9283 ;; Auto vars:     Size  Location     Type
  9284 ;;		None
  9285 ;; Return value:  Size  Location     Type
  9286 ;;		None               void
  9287 ;; Registers used:
  9288 ;;		wreg
  9289 ;; Tracked objects:
  9290 ;;		On entry : 0/0
  9291 ;;		On exit  : 0/0
  9292 ;;		Unchanged: 0/0
  9293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9298 ;;Total ram usage:        0 bytes
  9299 ;; Hardware stack levels used:    1
  9300 ;; Hardware stack levels required when called:    5
  9301 ;; This function calls:
  9302 ;;		Nothing
  9303 ;; This function is called by:
  9304 ;;		_Mcu_Initialization
  9305 ;; This function uses a non-reentrant model
  9306 ;;
  9307                           
  9308                           
  9309                           ;psect for function _Fosc_Set
  9310  1F8B                     _Fosc_Set:	
  9311                           
  9312                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9313                           
  9314                           ;incstack = 0
  9315                           ; Regs used in _Fosc_Set: [wreg]
  9316  1F8B  3078               	movlw	120
  9317  1F8C  0021               	movlb	1	; select bank1
  9318  1F8D  0099               	movwf	25	;volatile
  9319  1F8E  0008               	return
  9320  1F8F                     __end_of_Fosc_Set:	
  9321                           
  9322                           	psect	text47
  9323  1FAD                     __ptext47:	
  9324 ;; *************** function _ADC_Set *****************
  9325 ;; Defined at:
  9326 ;;		line 419 in file "../src/MCU_B1.c"
  9327 ;; Parameters:    Size  Location     Type
  9328 ;;		None
  9329 ;; Auto vars:     Size  Location     Type
  9330 ;;		None
  9331 ;; Return value:  Size  Location     Type
  9332 ;;		None               void
  9333 ;; Registers used:
  9334 ;;		wreg
  9335 ;; Tracked objects:
  9336 ;;		On entry : 0/0
  9337 ;;		On exit  : 0/0
  9338 ;;		Unchanged: 0/0
  9339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9344 ;;Total ram usage:        0 bytes
  9345 ;; Hardware stack levels used:    1
  9346 ;; Hardware stack levels required when called:    5
  9347 ;; This function calls:
  9348 ;;		Nothing
  9349 ;; This function is called by:
  9350 ;;		_Mcu_Initialization
  9351 ;; This function uses a non-reentrant model
  9352 ;;
  9353                           
  9354                           
  9355                           ;psect for function _ADC_Set
  9356  1FAD                     _ADC_Set:	
  9357                           
  9358                           ;MCU_B1.c: 420: ADCON1 = 0xf2;
  9359                           
  9360                           ;incstack = 0
  9361                           ; Regs used in _ADC_Set: [wreg]
  9362  1FAD  30F2               	movlw	242
  9363  1FAE  0021               	movlb	1	; select bank1
  9364  1FAF  009E               	movwf	30	;volatile
  9365                           
  9366                           ;MCU_B1.c: 421: FVRCON = 0xc0;
  9367  1FB0  30C0               	movlw	192
  9368  1FB1  0022               	movlb	2	; select bank2
  9369  1FB2  0097               	movwf	23	;volatile
  9370  1FB3  0008               	return
  9371  1FB4                     __end_of_ADC_Set:	
  9372                           
  9373                           	psect	text48
  9374  10B7                     __ptext48:	
  9375 ;; *************** function _LED_Main *****************
  9376 ;; Defined at:
  9377 ;;		line 47 in file "../src/LED_B1.c"
  9378 ;; Parameters:    Size  Location     Type
  9379 ;;		None
  9380 ;; Auto vars:     Size  Location     Type
  9381 ;;		None
  9382 ;; Return value:  Size  Location     Type
  9383 ;;		None               void
  9384 ;; Registers used:
  9385 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9386 ;; Tracked objects:
  9387 ;;		On entry : 0/0
  9388 ;;		On exit  : 0/0
  9389 ;;		Unchanged: 0/0
  9390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9395 ;;Total ram usage:        0 bytes
  9396 ;; Hardware stack levels used:    1
  9397 ;; Hardware stack levels required when called:    7
  9398 ;; This function calls:
  9399 ;;		_setLED_Main
  9400 ;; This function is called by:
  9401 ;;		_main
  9402 ;; This function uses a non-reentrant model
  9403 ;;
  9404                           
  9405                           
  9406                           ;psect for function _LED_Main
  9407  10B7                     _LED_Main:	
  9408                           
  9409                           ;LED_B1.c: 49: setLED_Main(1);
  9410                           
  9411                           ;incstack = 0
  9412                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9413  10B7  3001               	movlw	1
  9414  10B8  3196  266B  3190   	fcall	_setLED_Main
  9415                           
  9416                           ;LED_B1.c: 52: setLED_Main(2);
  9417  10BB  3002               	movlw	2
  9418  10BC  3196  266B  3190   	fcall	_setLED_Main
  9419                           
  9420                           ;LED_B1.c: 58: setLED_Main(99);
  9421  10BF  3063               	movlw	99
  9422  10C0  3196  266B         	fcall	_setLED_Main
  9423  10C2  0008               	return
  9424  10C3                     __end_of_LED_Main:	
  9425                           
  9426                           	psect	text49
  9427  166B                     __ptext49:	
  9428 ;; *************** function _setLED_Main *****************
  9429 ;; Defined at:
  9430 ;;		line 192 in file "../src/LED_B1.c"
  9431 ;; Parameters:    Size  Location     Type
  9432 ;;  led             1    wreg     unsigned char 
  9433 ;; Auto vars:     Size  Location     Type
  9434 ;;  led             1    4[BANK0 ] unsigned char 
  9435 ;; Return value:  Size  Location     Type
  9436 ;;		None               void
  9437 ;; Registers used:
  9438 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9439 ;; Tracked objects:
  9440 ;;		On entry : 0/0
  9441 ;;		On exit  : 0/0
  9442 ;;		Unchanged: 0/0
  9443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9445 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9446 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9447 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9448 ;;Total ram usage:        3 bytes
  9449 ;; Hardware stack levels used:    1
  9450 ;; Hardware stack levels required when called:    6
  9451 ;; This function calls:
  9452 ;;		_LedPointSelect
  9453 ;; This function is called by:
  9454 ;;		_LED_Main
  9455 ;; This function uses a non-reentrant model
  9456 ;;
  9457                           
  9458                           
  9459                           ;psect for function _setLED_Main
  9460  166B                     _setLED_Main:	
  9461                           
  9462                           ;incstack = 0
  9463                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9464                           ;setLED_Main@led stored from wreg
  9465  166B  0020               	movlb	0	; select bank0
  9466  166C  00A4               	movwf	setLED_Main@led
  9467                           
  9468                           ;LED_B1.c: 193: LedPointSelect(led);
  9469  166D  0824               	movf	setLED_Main@led,w
  9470  166E  3193  2360  3196   	fcall	_LedPointSelect
  9471                           
  9472                           ;LED_B1.c: 194: if (LED->GO == 1) {
  9473  1671  087B               	movf	_LED,w
  9474  1672  0086               	movwf	6
  9475  1673  0187               	clrf	7
  9476  1674  1C81               	btfss	1,1
  9477  1675  0008               	return
  9478                           
  9479                           ;LED_B1.c: 195: LED->Time++;
  9480  1676  0A7B               	incf	_LED,w
  9481  1677  0086               	movwf	6
  9482  1678  0187               	clrf	7
  9483  1679  3001               	movlw	1
  9484  167A  0781               	addwf	1,f
  9485  167B  3141               	addfsr 1,1
  9486  167C  1803               	skipnc
  9487  167D  0A81               	incf	1,f
  9488                           
  9489                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
  9490  167E  0A7B               	incf	_LED,w
  9491  167F  0086               	movwf	6
  9492  1680  0187               	clrf	7
  9493  1681  3F40               	moviw [0]fsr1
  9494  1682  0020               	movlb	0	; select bank0
  9495  1683  00A2               	movwf	??_setLED_Main
  9496  1684  3F41               	moviw [1]fsr1
  9497  1685  00A3               	movwf	??_setLED_Main+1
  9498  1686  3000               	movlw	0
  9499  1687  0223               	subwf	??_setLED_Main+1,w
  9500  1688  3032               	movlw	50
  9501  1689  1903               	skipnz
  9502  168A  0222               	subwf	??_setLED_Main,w
  9503  168B  1C03               	skipc
  9504  168C  0008               	return
  9505                           
  9506                           ;LED_B1.c: 197: LED->Time = 0;
  9507  168D  0A7B               	incf	_LED,w
  9508  168E  0086               	movwf	6
  9509  168F  0187               	clrf	7
  9510  1690  3000               	movlw	0
  9511  1691  3FC0               	movwi [0]fsr1
  9512  1692  3FC1               	movwi [1]fsr1
  9513                           
  9514                           ;LED_B1.c: 199: if (led == 1) {
  9515  1693  0824               	movf	setLED_Main@led,w
  9516  1694  3A01               	xorlw	1
  9517  1695  1D03               	skipz
  9518  1696  2E9A               	goto	l6697
  9519                           
  9520                           ;LED_B1.c: 200: RA3 = RA3 == 1 ? 0 : 1;
  9521  1697  3008               	movlw	8
  9522  1698  068C               	xorwf	12,f
  9523                           
  9524                           ;LED_B1.c: 201: }
  9525  1699  0008               	return
  9526  169A                     l6697:	
  9527                           
  9528                           ;LED_B1.c: 204: else if (led == 2) {
  9529  169A  0824               	movf	setLED_Main@led,w
  9530  169B  3A02               	xorlw	2
  9531  169C  1D03               	skipz
  9532  169D  2EA1               	goto	l6701
  9533                           
  9534                           ;LED_B1.c: 205: RC7 = RC7 == 1 ? 0 : 1;
  9535  169E  3080               	movlw	128
  9536  169F  068E               	xorwf	14,f
  9537                           
  9538                           ;LED_B1.c: 206: }
  9539  16A0  0008               	return
  9540  16A1                     l6701:	
  9541                           
  9542                           ;LED_B1.c: 214: else if (led == 99) {
  9543  16A1  0824               	movf	setLED_Main@led,w
  9544  16A2  3A63               	xorlw	99
  9545  16A3  1D03               	skipz
  9546  16A4  0008               	return
  9547                           
  9548                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
  9549  16A5  3020               	movlw	32
  9550  16A6  068D               	xorwf	13,f
  9551  16A7  0008               	return
  9552  16A8                     __end_of_setLED_Main:	
  9553                           
  9554                           	psect	text50
  9555  10AB                     __ptext50:	
  9556 ;; *************** function _LED_Initialization *****************
  9557 ;; Defined at:
  9558 ;;		line 31 in file "../src/LED_B1.c"
  9559 ;; Parameters:    Size  Location     Type
  9560 ;;		None
  9561 ;; Auto vars:     Size  Location     Type
  9562 ;;		None
  9563 ;; Return value:  Size  Location     Type
  9564 ;;		None               void
  9565 ;; Registers used:
  9566 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9567 ;; Tracked objects:
  9568 ;;		On entry : 0/0
  9569 ;;		On exit  : 0/0
  9570 ;;		Unchanged: 0/0
  9571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9576 ;;Total ram usage:        0 bytes
  9577 ;; Hardware stack levels used:    1
  9578 ;; Hardware stack levels required when called:    8
  9579 ;; This function calls:
  9580 ;;		_setLED_Initialization
  9581 ;; This function is called by:
  9582 ;;		_main
  9583 ;; This function uses a non-reentrant model
  9584 ;;
  9585                           
  9586                           
  9587                           ;psect for function _LED_Initialization
  9588  10AB                     _LED_Initialization:	
  9589                           
  9590                           ;LED_B1.c: 33: setLED_Initialization(1);
  9591                           
  9592                           ;incstack = 0
  9593                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9594  10AB  3001               	movlw	1
  9595  10AC  3191  2160  3190   	fcall	_setLED_Initialization
  9596                           
  9597                           ;LED_B1.c: 36: setLED_Initialization(2);
  9598  10AF  3002               	movlw	2
  9599  10B0  3191  2160  3190   	fcall	_setLED_Initialization
  9600                           
  9601                           ;LED_B1.c: 42: setLED_Initialization(99);
  9602  10B3  3063               	movlw	99
  9603  10B4  3191  2160         	fcall	_setLED_Initialization
  9604  10B6  0008               	return
  9605  10B7                     __end_of_LED_Initialization:	
  9606                           
  9607                           	psect	text51
  9608  1160                     __ptext51:	
  9609 ;; *************** function _setLED_Initialization *****************
  9610 ;; Defined at:
  9611 ;;		line 63 in file "../src/LED_B1.c"
  9612 ;; Parameters:    Size  Location     Type
  9613 ;;  led             1    wreg     unsigned char 
  9614 ;; Auto vars:     Size  Location     Type
  9615 ;;  led             1    4[BANK0 ] unsigned char 
  9616 ;; Return value:  Size  Location     Type
  9617 ;;		None               void
  9618 ;; Registers used:
  9619 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9620 ;; Tracked objects:
  9621 ;;		On entry : 0/0
  9622 ;;		On exit  : 0/0
  9623 ;;		Unchanged: 0/0
  9624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9626 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9628 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9629 ;;Total ram usage:        1 bytes
  9630 ;; Hardware stack levels used:    1
  9631 ;; Hardware stack levels required when called:    7
  9632 ;; This function calls:
  9633 ;;		_LedPointSelect
  9634 ;;		_setLED
  9635 ;; This function is called by:
  9636 ;;		_LED_Initialization
  9637 ;; This function uses a non-reentrant model
  9638 ;;
  9639                           
  9640                           
  9641                           ;psect for function _setLED_Initialization
  9642  1160                     _setLED_Initialization:	
  9643                           
  9644                           ;incstack = 0
  9645                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9646                           ;setLED_Initialization@led stored from wreg
  9647  1160  0020               	movlb	0	; select bank0
  9648  1161  00A4               	movwf	setLED_Initialization@led
  9649                           
  9650                           ;LED_B1.c: 64: LedPointSelect(led);
  9651  1162  0824               	movf	setLED_Initialization@led,w
  9652  1163  3193  2360  3191   	fcall	_LedPointSelect
  9653                           
  9654                           ;LED_B1.c: 65: LED->Enable = 1;
  9655  1166  087B               	movf	_LED,w
  9656  1167  0086               	movwf	6
  9657  1168  0187               	clrf	7
  9658  1169  1401               	bsf	1,0
  9659                           
  9660                           ;LED_B1.c: 66: setLED(led, 0);
  9661  116A  0020               	movlb	0	; select bank0
  9662  116B  01A2               	clrf	setLED@command
  9663  116C  0824               	movf	setLED_Initialization@led,w
  9664  116D  3188  20FB         	fcall	_setLED
  9665  116F  0008               	return
  9666  1170                     __end_of_setLED_Initialization:	
  9667                           
  9668                           	psect	text52
  9669  139C                     __ptext52:	
  9670 ;; *************** function _Flash_Memory_Main *****************
  9671 ;; Defined at:
  9672 ;;		line 900 in file "../src/MCU_B1.c"
  9673 ;; Parameters:    Size  Location     Type
  9674 ;;		None
  9675 ;; Auto vars:     Size  Location     Type
  9676 ;;		None
  9677 ;; Return value:  Size  Location     Type
  9678 ;;		None               void
  9679 ;; Registers used:
  9680 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9681 ;; Tracked objects:
  9682 ;;		On entry : 0/0
  9683 ;;		On exit  : 0/0
  9684 ;;		Unchanged: 0/0
  9685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9690 ;;Total ram usage:        0 bytes
  9691 ;; Hardware stack levels used:    1
  9692 ;; Hardware stack levels required when called:    8
  9693 ;; This function calls:
  9694 ;;		_Flash_Memory_Modify
  9695 ;; This function is called by:
  9696 ;;		_main
  9697 ;; This function uses a non-reentrant model
  9698 ;;
  9699                           
  9700                           
  9701                           ;psect for function _Flash_Memory_Main
  9702  139C                     _Flash_Memory_Main:	
  9703                           
  9704                           ;MCU_B1.c: 901: if (Memory.GO == 1) {
  9705                           
  9706                           ;incstack = 0
  9707                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9708  139C  0023               	movlb	3	; select bank3
  9709  139D  1CC4               	btfss	(_Memory^(0+384)+36),1
  9710  139E  0008               	return
  9711                           
  9712                           ;MCU_B1.c: 902: if (Memory.Modify == 1) {
  9713  139F  1C44               	btfss	(_Memory^(0+384)+36),0
  9714  13A0  2BB9               	goto	l1327
  9715                           
  9716                           ;MCU_B1.c: 903: Memory.Time++;
  9717  13A1  3001               	movlw	1
  9718  13A2  07C2               	addwf	(_Memory^(0+384)+34),f
  9719  13A3  3000               	movlw	0
  9720  13A4  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
  9721                           
  9722                           ;MCU_B1.c: 904: if (Memory.Time == 25)
  9723  13A5  3022               	movlw	34
  9724  13A6  3EA0               	addlw	_Memory& (0+255)
  9725  13A7  0086               	movwf	6
  9726  13A8  3001               	movlw	1	; select bank3/4
  9727  13A9  0087               	movwf	7
  9728  13AA  3F40               	moviw [0]fsr1
  9729  13AB  3A19               	xorlw	25
  9730  13AC  1D03               	skipz
  9731  13AD  2BB0               	goto	u6765
  9732  13AE  3F41               	moviw [1]fsr1
  9733  13AF  3A00               	xorlw	0
  9734  13B0                     u6765:	
  9735  13B0  1D03               	skipz
  9736  13B1  0008               	return
  9737                           
  9738                           ;MCU_B1.c: 905: {
  9739                           ;MCU_B1.c: 906: Memory.Time = 0;
  9740  13B2  01C2               	clrf	(_Memory^(0+384)+34)
  9741  13B3  01C3               	clrf	((_Memory+1)^(0+384)+34)
  9742                           
  9743                           ;MCU_B1.c: 907: Memory.Modify = 0;
  9744  13B4  1044               	bcf	(_Memory^(0+384)+36),0
  9745                           
  9746                           ;MCU_B1.c: 908: Memory.GO = 0;
  9747  13B5  10C4               	bcf	(_Memory^(0+384)+36),1
  9748                           
  9749                           ;MCU_B1.c: 909: Flash_Memory_Modify();
  9750  13B6  3197  272C         	fcall	_Flash_Memory_Modify
  9751                           
  9752                           ;MCU_B1.c: 910: }
  9753                           ;MCU_B1.c: 911: } else {
  9754  13B8  0008               	return
  9755  13B9                     l1327:	
  9756                           
  9757                           ;MCU_B1.c: 912: Memory.GO = 0;
  9758  13B9  10C4               	bcf	(_Memory^(0+384)+36),1
  9759  13BA  0008               	return
  9760  13BB                     __end_of_Flash_Memory_Main:	
  9761                           
  9762                           	psect	text53
  9763  172C                     __ptext53:	
  9764 ;; *************** function _Flash_Memory_Modify *****************
  9765 ;; Defined at:
  9766 ;;		line 969 in file "../src/MCU_B1.c"
  9767 ;; Parameters:    Size  Location     Type
  9768 ;;		None
  9769 ;; Auto vars:     Size  Location     Type
  9770 ;;  i               1    5[BANK0 ] unsigned char 
  9771 ;; Return value:  Size  Location     Type
  9772 ;;		None               void
  9773 ;; Registers used:
  9774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9775 ;; Tracked objects:
  9776 ;;		On entry : 0/0
  9777 ;;		On exit  : 0/0
  9778 ;;		Unchanged: 0/0
  9779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9781 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9782 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9783 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9784 ;;Total ram usage:        2 bytes
  9785 ;; Hardware stack levels used:    1
  9786 ;; Hardware stack levels required when called:    7
  9787 ;; This function calls:
  9788 ;;		_Flash_Memory_Erasing
  9789 ;;		_Flash_Memory_Read
  9790 ;;		_Flash_Memory_Write
  9791 ;; This function is called by:
  9792 ;;		_Flash_Memory_Main
  9793 ;; This function uses a non-reentrant model
  9794 ;;
  9795                           
  9796                           
  9797                           ;psect for function _Flash_Memory_Modify
  9798  172C                     _Flash_Memory_Modify:	
  9799                           
  9800                           ;MCU_B1.c: 970: char i = 0;
  9801                           
  9802                           ;incstack = 0
  9803                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9804  172C  0020               	movlb	0	; select bank0
  9805  172D  01A5               	clrf	Flash_Memory_Modify@i
  9806                           
  9807                           ;MCU_B1.c: 971: for (i = 0; i < 32; i++) {
  9808  172E  01A5               	clrf	Flash_Memory_Modify@i
  9809  172F  3020               	movlw	32
  9810  1730  0225               	subwf	Flash_Memory_Modify@i,w
  9811  1731  1803               	btfsc	3,0
  9812  1732  2F48               	goto	l6775
  9813  1733                     l6769:	
  9814                           
  9815                           ;MCU_B1.c: 972: Memory.Data[i] = Flash_Memory_Read(i);
  9816  1733  0825               	movf	Flash_Memory_Modify@i,w
  9817  1734  3193  232A  3197   	fcall	_Flash_Memory_Read
  9818  1737  0020               	movlb	0	; select bank0
  9819  1738  00A4               	movwf	??_Flash_Memory_Modify
  9820  1739  0825               	movf	Flash_Memory_Modify@i,w
  9821  173A  3EA0               	addlw	_Memory& (0+255)
  9822  173B  0086               	movwf	6
  9823  173C  3001               	movlw	1	; select bank3/4
  9824  173D  0087               	movwf	7
  9825  173E  0824               	movf	??_Flash_Memory_Modify,w
  9826  173F  0081               	movwf	1
  9827  1740  3001               	movlw	1
  9828  1741  00A4               	movwf	??_Flash_Memory_Modify
  9829  1742  0824               	movf	??_Flash_Memory_Modify,w
  9830  1743  07A5               	addwf	Flash_Memory_Modify@i,f
  9831  1744  3020               	movlw	32
  9832  1745  0225               	subwf	Flash_Memory_Modify@i,w
  9833  1746  1C03               	skipc
  9834  1747  2F33               	goto	l6769
  9835  1748                     l6775:	
  9836                           
  9837                           ;MCU_B1.c: 973: }
  9838                           ;MCU_B1.c: 974: Memory.Data[0]=product->Data[12];
  9839  1748  086E               	movf	_product,w
  9840  1749  0086               	movwf	6
  9841  174A  3001               	movlw	1	; select bank2/3
  9842  174B  0087               	movwf	7
  9843  174C  3001               	movlw	1	; select bank2/3
  9844  174D  3F4C               	moviw [12]fsr1
  9845  174E  0023               	movlb	3	; select bank3
  9846  174F  00A0               	movwf	_Memory^(0+384)
  9847                           
  9848                           ;MCU_B1.c: 975: Memory.Data[1]=product->Data[13];
  9849  1750  0020               	movlb	0	; select bank0
  9850  1751  086E               	movf	_product,w
  9851  1752  0086               	movwf	6
  9852  1753  3001               	movlw	1	; select bank2/3
  9853  1754  0087               	movwf	7
  9854  1755  3001               	movlw	1	; select bank2/3
  9855  1756  3F4D               	moviw [13]fsr1
  9856  1757  0023               	movlb	3	; select bank3
  9857  1758  00A1               	movwf	(_Memory^(0+384)+1)
  9858                           
  9859                           ;MCU_B1.c: 976: Memory.Data[2]=product->Data[14];
  9860  1759  0020               	movlb	0	; select bank0
  9861  175A  086E               	movf	_product,w
  9862  175B  0086               	movwf	6
  9863  175C  3001               	movlw	1	; select bank2/3
  9864  175D  0087               	movwf	7
  9865  175E  3001               	movlw	1	; select bank2/3
  9866  175F  3F4E               	moviw [14]fsr1
  9867  1760  0023               	movlb	3	; select bank3
  9868  1761  00A2               	movwf	(_Memory^(0+384)+2)
  9869                           
  9870                           ;MCU_B1.c: 982: if (Memory.LoopSave == 1) {
  9871  1762  1D44               	btfss	(_Memory^(0+384)+36),2
  9872  1763  2F68               	goto	l1349
  9873                           
  9874                           ;MCU_B1.c: 983: Memory.LoopSave = 0;
  9875  1764  1144               	bcf	(_Memory^(0+384)+36),2
  9876                           
  9877                           ;MCU_B1.c: 984: myMain.FirstOpen = 0;
  9878  1765  0021               	movlb	1	; select bank1
  9879  1766  11A0               	bcf	_myMain^(0+128),3
  9880                           
  9881                           ;MCU_B1.c: 985: myMain.First = 0;
  9882  1767  12A0               	bcf	_myMain^(0+128),5
  9883  1768                     l1349:	
  9884                           
  9885                           ;MCU_B1.c: 987: }
  9886                           ;MCU_B1.c: 988: GIE = 0;
  9887  1768  138B               	bcf	11,7	;volatile
  9888                           
  9889                           ;MCU_B1.c: 989: Flash_Memory_Erasing();
  9890  1769  3190  209F  3197   	fcall	_Flash_Memory_Erasing
  9891                           
  9892                           ;MCU_B1.c: 990: Flash_Memory_Write();
  9893  176C  3195  255D         	fcall	_Flash_Memory_Write
  9894                           
  9895                           ;MCU_B1.c: 991: GIE = 1;
  9896  176E  178B               	bsf	11,7	;volatile
  9897  176F  0008               	return
  9898  1770                     __end_of_Flash_Memory_Modify:	
  9899                           
  9900                           	psect	text54
  9901  109F                     __ptext54:	
  9902 ;; *************** function _Flash_Memory_Erasing *****************
  9903 ;; Defined at:
  9904 ;;		line 958 in file "../src/MCU_B1.c"
  9905 ;; Parameters:    Size  Location     Type
  9906 ;;		None
  9907 ;; Auto vars:     Size  Location     Type
  9908 ;;		None
  9909 ;; Return value:  Size  Location     Type
  9910 ;;		None               void
  9911 ;; Registers used:
  9912 ;;		wreg, status,2, status,0, pclath, cstack
  9913 ;; Tracked objects:
  9914 ;;		On entry : 0/0
  9915 ;;		On exit  : 0/0
  9916 ;;		Unchanged: 0/0
  9917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9922 ;;Total ram usage:        0 bytes
  9923 ;; Hardware stack levels used:    1
  9924 ;; Hardware stack levels required when called:    6
  9925 ;; This function calls:
  9926 ;;		_Flash_Memory_Unlock
  9927 ;; This function is called by:
  9928 ;;		_Flash_Memory_Modify
  9929 ;; This function uses a non-reentrant model
  9930 ;;
  9931                           
  9932                           
  9933                           ;psect for function _Flash_Memory_Erasing
  9934  109F                     _Flash_Memory_Erasing:	
  9935                           
  9936                           ;MCU_B1.c: 959: CFGS = 0;
  9937                           
  9938                           ;incstack = 0
  9939                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
  9940  109F  0023               	movlb	3	; select bank3
  9941  10A0  1315               	bcf	21,6	;volatile
  9942                           
  9943                           ;MCU_B1.c: 960: PMADRH = 0x30;
  9944  10A1  3030               	movlw	48
  9945  10A2  0092               	movwf	18	;volatile
  9946                           
  9947                           ;MCU_B1.c: 961: PMADRL = 0x00;
  9948  10A3  0191               	clrf	17	;volatile
  9949                           
  9950                           ;MCU_B1.c: 962: FREE = 1;
  9951  10A4  1615               	bsf	21,4	;volatile
  9952                           
  9953                           ;MCU_B1.c: 963: WREN = 1;
  9954  10A5  1515               	bsf	21,2	;volatile
  9955                           
  9956                           ;MCU_B1.c: 964: Flash_Memory_Unlock();
  9957  10A6  319F  27ED         	fcall	_Flash_Memory_Unlock
  9958                           
  9959                           ;MCU_B1.c: 965: WREN = 0;
  9960  10A8  0023               	movlb	3	; select bank3
  9961  10A9  1115               	bcf	21,2	;volatile
  9962  10AA  0008               	return
  9963  10AB                     __end_of_Flash_Memory_Erasing:	
  9964                           
  9965                           	psect	text55
  9966  04C7                     __ptext55:	
  9967 ;; *************** function _Flash_Memory_Initialization *****************
  9968 ;; Defined at:
  9969 ;;		line 859 in file "../src/MCU_B1.c"
  9970 ;; Parameters:    Size  Location     Type
  9971 ;;		None
  9972 ;; Auto vars:     Size  Location     Type
  9973 ;;  i               1   62[BANK0 ] unsigned char 
  9974 ;; Return value:  Size  Location     Type
  9975 ;;		None               void
  9976 ;; Registers used:
  9977 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9978 ;; Tracked objects:
  9979 ;;		On entry : 0/0
  9980 ;;		On exit  : 0/0
  9981 ;;		Unchanged: 0/0
  9982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9984 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9985 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9986 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9987 ;;Total ram usage:        2 bytes
  9988 ;; Hardware stack levels used:    1
  9989 ;; Hardware stack levels required when called:    8
  9990 ;; This function calls:
  9991 ;;		_Flash_Memory_Read
  9992 ;;		_Flash_Memory_Write
  9993 ;;		_setPercentValue
  9994 ;; This function is called by:
  9995 ;;		_main
  9996 ;; This function uses a non-reentrant model
  9997 ;;
  9998                           
  9999                           
 10000                           ;psect for function _Flash_Memory_Initialization
 10001  04C7                     _Flash_Memory_Initialization:	
 10002                           
 10003                           ;MCU_B1.c: 860: char i = 0;
 10004                           
 10005                           ;incstack = 0
 10006                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10007  04C7  0020               	movlb	0	; select bank0
 10008  04C8  01DE               	clrf	Flash_Memory_Initialization@i
 10009                           
 10010                           ;MCU_B1.c: 861: if (Flash_Memory_Read(31) == 0xaa) {
 10011  04C9  301F               	movlw	31
 10012  04CA  3193  232A  3184   	fcall	_Flash_Memory_Read
 10013  04CD  3AAA               	xorlw	170
 10014  04CE  1D03               	skipz
 10015  04CF  2D39               	goto	l7151
 10016                           
 10017                           ;MCU_B1.c: 862: product->Data[12] = Flash_Memory_Read(0);
 10018  04D0  3000               	movlw	0
 10019  04D1  3193  232A  3184   	fcall	_Flash_Memory_Read
 10020  04D4  0020               	movlb	0	; select bank0
 10021  04D5  00DD               	movwf	??_Flash_Memory_Initialization
 10022  04D6  086E               	movf	_product,w
 10023  04D7  3E0C               	addlw	12
 10024  04D8  0086               	movwf	6
 10025  04D9  3001               	movlw	1	; select bank2/3
 10026  04DA  0087               	movwf	7
 10027  04DB  085D               	movf	??_Flash_Memory_Initialization,w
 10028  04DC  0081               	movwf	1
 10029                           
 10030                           ;MCU_B1.c: 863: product->Data[13] = Flash_Memory_Read(1);
 10031  04DD  3001               	movlw	1
 10032  04DE  3193  232A  3184   	fcall	_Flash_Memory_Read
 10033  04E1  0020               	movlb	0	; select bank0
 10034  04E2  00DD               	movwf	??_Flash_Memory_Initialization
 10035  04E3  086E               	movf	_product,w
 10036  04E4  3E0D               	addlw	13
 10037  04E5  0086               	movwf	6
 10038  04E6  3001               	movlw	1	; select bank2/3
 10039  04E7  0087               	movwf	7
 10040  04E8  085D               	movf	??_Flash_Memory_Initialization,w
 10041  04E9  0081               	movwf	1
 10042                           
 10043                           ;MCU_B1.c: 864: product->Data[14] = Flash_Memory_Read(2);
 10044  04EA  3002               	movlw	2
 10045  04EB  3193  232A  3184   	fcall	_Flash_Memory_Read
 10046  04EE  0020               	movlb	0	; select bank0
 10047  04EF  00DD               	movwf	??_Flash_Memory_Initialization
 10048  04F0  086E               	movf	_product,w
 10049  04F1  3E0E               	addlw	14
 10050  04F2  0086               	movwf	6
 10051  04F3  3001               	movlw	1	; select bank2/3
 10052  04F4  0087               	movwf	7
 10053  04F5  085D               	movf	??_Flash_Memory_Initialization,w
 10054  04F6  0081               	movwf	1
 10055                           
 10056                           ;MCU_B1.c: 870: i = setPercentValue(((char)(90*0.8)));
 10057  04F7  3048               	movlw	72
 10058  04F8  3197  2770  3184   	fcall	_setPercentValue
 10059  04FB  0020               	movlb	0	; select bank0
 10060  04FC  00DD               	movwf	??_Flash_Memory_Initialization
 10061  04FD  085D               	movf	??_Flash_Memory_Initialization,w
 10062  04FE  00DE               	movwf	Flash_Memory_Initialization@i
 10063                           
 10064                           ;MCU_B1.c: 871: product->Data[21] = i;
 10065  04FF  085E               	movf	Flash_Memory_Initialization@i,w
 10066  0500  00DD               	movwf	??_Flash_Memory_Initialization
 10067  0501  086E               	movf	_product,w
 10068  0502  3E15               	addlw	21
 10069  0503  0086               	movwf	6
 10070  0504  3001               	movlw	1	; select bank2/3
 10071  0505  0087               	movwf	7
 10072  0506  085D               	movf	??_Flash_Memory_Initialization,w
 10073  0507  0081               	movwf	1
 10074                           
 10075                           ;MCU_B1.c: 872: product->Data[22] = i;
 10076  0508  085E               	movf	Flash_Memory_Initialization@i,w
 10077  0509  00DD               	movwf	??_Flash_Memory_Initialization
 10078  050A  086E               	movf	_product,w
 10079  050B  3E16               	addlw	22
 10080  050C  0086               	movwf	6
 10081  050D  3001               	movlw	1	; select bank2/3
 10082  050E  0087               	movwf	7
 10083  050F  085D               	movf	??_Flash_Memory_Initialization,w
 10084  0510  0081               	movwf	1
 10085                           
 10086                           ;MCU_B1.c: 873: product->Data[23] = i;
 10087  0511  085E               	movf	Flash_Memory_Initialization@i,w
 10088  0512  00DD               	movwf	??_Flash_Memory_Initialization
 10089  0513  086E               	movf	_product,w
 10090  0514  3E17               	addlw	23
 10091  0515  0086               	movwf	6
 10092  0516  3001               	movlw	1	; select bank2/3
 10093  0517  0087               	movwf	7
 10094  0518  085D               	movf	??_Flash_Memory_Initialization,w
 10095  0519  0081               	movwf	1
 10096                           
 10097                           ;MCU_B1.c: 875: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 10098  051A  086E               	movf	_product,w
 10099  051B  3E0C               	addlw	12
 10100  051C  0086               	movwf	6
 10101  051D  3001               	movlw	1	; select bank2/3
 10102  051E  0087               	movwf	7
 10103  051F  0801               	movf	1,w
 10104  0520  3AFF               	xorlw	255
 10105  0521  1D03               	skipz
 10106  0522  0008               	return
 10107  0523  086E               	movf	_product,w
 10108  0524  3E0D               	addlw	13
 10109  0525  0086               	movwf	6
 10110  0526  3001               	movlw	1	; select bank2/3
 10111  0527  0087               	movwf	7
 10112  0528  0801               	movf	1,w
 10113  0529  3AFF               	xorlw	255
 10114  052A  1D03               	skipz
 10115  052B  0008               	return
 10116  052C  086E               	movf	_product,w
 10117  052D  3E0E               	addlw	14
 10118  052E  0086               	movwf	6
 10119  052F  3001               	movlw	1	; select bank2/3
 10120  0530  0087               	movwf	7
 10121  0531  0801               	movf	1,w
 10122  0532  3AFF               	xorlw	255
 10123  0533  1D03               	skipz
 10124  0534  0008               	return
 10125                           
 10126                           ;MCU_B1.c: 876: myMain.FirstOpen = 1;
 10127  0535  0021               	movlb	1	; select bank1
 10128  0536  15A0               	bsf	_myMain^(0+128),3
 10129                           
 10130                           ;MCU_B1.c: 877: myMain.First = 1;
 10131  0537  16A0               	bsf	_myMain^(0+128),5
 10132                           
 10133                           ;MCU_B1.c: 878: }
 10134                           ;MCU_B1.c: 879: } else {
 10135  0538  0008               	return
 10136  0539                     l7151:	
 10137                           
 10138                           ;MCU_B1.c: 880: i = setPercentValue(((char)(90*0.8)));
 10139  0539  3048               	movlw	72
 10140  053A  3197  2770  3184   	fcall	_setPercentValue
 10141  053D  0020               	movlb	0	; select bank0
 10142  053E  00DD               	movwf	??_Flash_Memory_Initialization
 10143  053F  085D               	movf	??_Flash_Memory_Initialization,w
 10144  0540  00DE               	movwf	Flash_Memory_Initialization@i
 10145                           
 10146                           ;MCU_B1.c: 881: Memory.Data[0]=0xff;
 10147  0541  30FF               	movlw	255
 10148  0542  00DD               	movwf	??_Flash_Memory_Initialization
 10149  0543  085D               	movf	??_Flash_Memory_Initialization,w
 10150  0544  0023               	movlb	3	; select bank3
 10151  0545  00A0               	movwf	_Memory^(0+384)
 10152                           
 10153                           ;MCU_B1.c: 882: Memory.Data[1]=0xff;
 10154  0546  30FF               	movlw	255
 10155  0547  0020               	movlb	0	; select bank0
 10156  0548  00DD               	movwf	??_Flash_Memory_Initialization
 10157  0549  085D               	movf	??_Flash_Memory_Initialization,w
 10158  054A  0023               	movlb	3	; select bank3
 10159  054B  00A1               	movwf	(_Memory^(0+384)+1)
 10160                           
 10161                           ;MCU_B1.c: 883: Memory.Data[2]=0xff;
 10162  054C  30FF               	movlw	255
 10163  054D  0020               	movlb	0	; select bank0
 10164  054E  00DD               	movwf	??_Flash_Memory_Initialization
 10165  054F  085D               	movf	??_Flash_Memory_Initialization,w
 10166  0550  0023               	movlb	3	; select bank3
 10167  0551  00A2               	movwf	(_Memory^(0+384)+2)
 10168                           
 10169                           ;MCU_B1.c: 884: Memory.Data[3]=0xff;
 10170  0552  30FF               	movlw	255
 10171  0553  0020               	movlb	0	; select bank0
 10172  0554  00DD               	movwf	??_Flash_Memory_Initialization
 10173  0555  085D               	movf	??_Flash_Memory_Initialization,w
 10174  0556  0023               	movlb	3	; select bank3
 10175  0557  00A3               	movwf	(_Memory^(0+384)+3)
 10176                           
 10177                           ;MCU_B1.c: 885: Memory.Data[4]=0xff;
 10178  0558  30FF               	movlw	255
 10179  0559  0020               	movlb	0	; select bank0
 10180  055A  00DD               	movwf	??_Flash_Memory_Initialization
 10181  055B  085D               	movf	??_Flash_Memory_Initialization,w
 10182  055C  0023               	movlb	3	; select bank3
 10183  055D  00A4               	movwf	(_Memory^(0+384)+4)
 10184                           
 10185                           ;MCU_B1.c: 886: Memory.Data[5]=0xff;
 10186  055E  30FF               	movlw	255
 10187  055F  0020               	movlb	0	; select bank0
 10188  0560  00DD               	movwf	??_Flash_Memory_Initialization
 10189  0561  085D               	movf	??_Flash_Memory_Initialization,w
 10190  0562  0023               	movlb	3	; select bank3
 10191  0563  00A5               	movwf	(_Memory^(0+384)+5)
 10192                           
 10193                           ;MCU_B1.c: 887: Memory.Data[31]=0xaa;
 10194  0564  30AA               	movlw	170
 10195  0565  0020               	movlb	0	; select bank0
 10196  0566  00DD               	movwf	??_Flash_Memory_Initialization
 10197  0567  085D               	movf	??_Flash_Memory_Initialization,w
 10198  0568  0023               	movlb	3	; select bank3
 10199  0569  00BF               	movwf	(_Memory^(0+384)+31)
 10200                           
 10201                           ;MCU_B1.c: 888: product->Data[21] = i;
 10202  056A  0020               	movlb	0	; select bank0
 10203  056B  085E               	movf	Flash_Memory_Initialization@i,w
 10204  056C  00DD               	movwf	??_Flash_Memory_Initialization
 10205  056D  086E               	movf	_product,w
 10206  056E  3E15               	addlw	21
 10207  056F  0086               	movwf	6
 10208  0570  3001               	movlw	1	; select bank2/3
 10209  0571  0087               	movwf	7
 10210  0572  085D               	movf	??_Flash_Memory_Initialization,w
 10211  0573  0081               	movwf	1
 10212                           
 10213                           ;MCU_B1.c: 889: product->Data[22] = i;
 10214  0574  085E               	movf	Flash_Memory_Initialization@i,w
 10215  0575  00DD               	movwf	??_Flash_Memory_Initialization
 10216  0576  086E               	movf	_product,w
 10217  0577  3E16               	addlw	22
 10218  0578  0086               	movwf	6
 10219  0579  3001               	movlw	1	; select bank2/3
 10220  057A  0087               	movwf	7
 10221  057B  085D               	movf	??_Flash_Memory_Initialization,w
 10222  057C  0081               	movwf	1
 10223                           
 10224                           ;MCU_B1.c: 890: product->Data[23] = i;
 10225  057D  085E               	movf	Flash_Memory_Initialization@i,w
 10226  057E  00DD               	movwf	??_Flash_Memory_Initialization
 10227  057F  086E               	movf	_product,w
 10228  0580  3E17               	addlw	23
 10229  0581  0086               	movwf	6
 10230  0582  3001               	movlw	1	; select bank2/3
 10231  0583  0087               	movwf	7
 10232  0584  085D               	movf	??_Flash_Memory_Initialization,w
 10233  0585  0081               	movwf	1
 10234                           
 10235                           ;MCU_B1.c: 891: GIE = 0;
 10236  0586  138B               	bcf	11,7	;volatile
 10237                           
 10238                           ;MCU_B1.c: 892: Flash_Memory_Write();
 10239  0587  3195  255D         	fcall	_Flash_Memory_Write
 10240                           
 10241                           ;MCU_B1.c: 893: GIE = 1;
 10242  0589  178B               	bsf	11,7	;volatile
 10243                           
 10244                           ;MCU_B1.c: 894: myMain.FirstOpen = 1;
 10245  058A  0021               	movlb	1	; select bank1
 10246  058B  15A0               	bsf	_myMain^(0+128),3
 10247                           
 10248                           ;MCU_B1.c: 895: myMain.First = 1;
 10249  058C  16A0               	bsf	_myMain^(0+128),5
 10250  058D  0008               	return
 10251  058E                     __end_of_Flash_Memory_Initialization:	
 10252                           
 10253                           	psect	text56
 10254  155D                     __ptext56:	
 10255 ;; *************** function _Flash_Memory_Write *****************
 10256 ;; Defined at:
 10257 ;;		line 939 in file "../src/MCU_B1.c"
 10258 ;; Parameters:    Size  Location     Type
 10259 ;;		None
 10260 ;; Auto vars:     Size  Location     Type
 10261 ;;  i               1    1[BANK0 ] unsigned char 
 10262 ;; Return value:  Size  Location     Type
 10263 ;;		None               void
 10264 ;; Registers used:
 10265 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10266 ;; Tracked objects:
 10267 ;;		On entry : 0/0
 10268 ;;		On exit  : 0/0
 10269 ;;		Unchanged: 0/0
 10270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10273 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10274 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10275 ;;Total ram usage:        2 bytes
 10276 ;; Hardware stack levels used:    1
 10277 ;; Hardware stack levels required when called:    6
 10278 ;; This function calls:
 10279 ;;		_Flash_Memory_Unlock
 10280 ;; This function is called by:
 10281 ;;		_Flash_Memory_Initialization
 10282 ;;		_Flash_Memory_Modify
 10283 ;; This function uses a non-reentrant model
 10284 ;;
 10285                           
 10286                           
 10287                           ;psect for function _Flash_Memory_Write
 10288  155D                     _Flash_Memory_Write:	
 10289                           
 10290                           ;MCU_B1.c: 940: char i = 0;
 10291                           
 10292                           ;incstack = 0
 10293                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10294  155D  0020               	movlb	0	; select bank0
 10295  155E  01A1               	clrf	Flash_Memory_Write@i
 10296                           
 10297                           ;MCU_B1.c: 941: CFGS = 0;
 10298  155F  0023               	movlb	3	; select bank3
 10299  1560  1315               	bcf	21,6	;volatile
 10300                           
 10301                           ;MCU_B1.c: 942: PMADRH = 0x30;
 10302  1561  3030               	movlw	48
 10303  1562  0092               	movwf	18	;volatile
 10304                           
 10305                           ;MCU_B1.c: 943: PMDATH = 0;
 10306  1563  0194               	clrf	20	;volatile
 10307                           
 10308                           ;MCU_B1.c: 944: FREE = 0;
 10309  1564  1215               	bcf	21,4	;volatile
 10310                           
 10311                           ;MCU_B1.c: 945: LWLO = 1;
 10312  1565  1695               	bsf	21,5	;volatile
 10313                           
 10314                           ;MCU_B1.c: 946: WREN = 1;
 10315  1566  1515               	bsf	21,2	;volatile
 10316                           
 10317                           ;MCU_B1.c: 947: for (i = 0; i < 32; i++) {
 10318  1567  0020               	movlb	0	; select bank0
 10319  1568  01A1               	clrf	Flash_Memory_Write@i
 10320  1569  3020               	movlw	32
 10321  156A  0221               	subwf	Flash_Memory_Write@i,w
 10322  156B  1803               	btfsc	3,0
 10323  156C  2D85               	goto	l1340
 10324  156D                     l6279:	
 10325                           
 10326                           ;MCU_B1.c: 948: PMADRL = i;
 10327  156D  0821               	movf	Flash_Memory_Write@i,w
 10328  156E  0023               	movlb	3	; select bank3
 10329  156F  0091               	movwf	17	;volatile
 10330                           
 10331                           ;MCU_B1.c: 949: PMDATL = Memory.Data[i];
 10332  1570  0020               	movlb	0	; select bank0
 10333  1571  0821               	movf	Flash_Memory_Write@i,w
 10334  1572  3EA0               	addlw	_Memory& (0+255)
 10335  1573  0086               	movwf	6
 10336  1574  3001               	movlw	1	; select bank3/4
 10337  1575  0087               	movwf	7
 10338  1576  0801               	movf	1,w
 10339  1577  0023               	movlb	3	; select bank3
 10340  1578  0093               	movwf	19	;volatile
 10341                           
 10342                           ;MCU_B1.c: 950: Flash_Memory_Unlock();
 10343  1579  319F  27ED  3195   	fcall	_Flash_Memory_Unlock
 10344  157C  3001               	movlw	1
 10345  157D  0020               	movlb	0	; select bank0
 10346  157E  00A0               	movwf	??_Flash_Memory_Write
 10347  157F  0820               	movf	??_Flash_Memory_Write,w
 10348  1580  07A1               	addwf	Flash_Memory_Write@i,f
 10349  1581  3020               	movlw	32
 10350  1582  0221               	subwf	Flash_Memory_Write@i,w
 10351  1583  1C03               	skipc
 10352  1584  2D6D               	goto	l6279
 10353  1585                     l1340:	
 10354                           
 10355                           ;MCU_B1.c: 951: }
 10356                           ;MCU_B1.c: 952: LWLO = 0;
 10357  1585  0023               	movlb	3	; select bank3
 10358  1586  1295               	bcf	21,5	;volatile
 10359                           
 10360                           ;MCU_B1.c: 953: Flash_Memory_Unlock();
 10361  1587  319F  27ED         	fcall	_Flash_Memory_Unlock
 10362                           
 10363                           ;MCU_B1.c: 954: WREN = 0;
 10364  1589  0023               	movlb	3	; select bank3
 10365  158A  1115               	bcf	21,2	;volatile
 10366  158B  0008               	return
 10367  158C                     __end_of_Flash_Memory_Write:	
 10368                           
 10369                           	psect	text57
 10370  1FED                     __ptext57:	
 10371 ;; *************** function _Flash_Memory_Unlock *****************
 10372 ;; Defined at:
 10373 ;;		line 918 in file "../src/MCU_B1.c"
 10374 ;; Parameters:    Size  Location     Type
 10375 ;;		None
 10376 ;; Auto vars:     Size  Location     Type
 10377 ;;		None
 10378 ;; Return value:  Size  Location     Type
 10379 ;;		None               void
 10380 ;; Registers used:
 10381 ;;		wreg
 10382 ;; Tracked objects:
 10383 ;;		On entry : 0/0
 10384 ;;		On exit  : 0/0
 10385 ;;		Unchanged: 0/0
 10386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10391 ;;Total ram usage:        0 bytes
 10392 ;; Hardware stack levels used:    1
 10393 ;; Hardware stack levels required when called:    5
 10394 ;; This function calls:
 10395 ;;		Nothing
 10396 ;; This function is called by:
 10397 ;;		_Flash_Memory_Write
 10398 ;;		_Flash_Memory_Erasing
 10399 ;; This function uses a non-reentrant model
 10400 ;;
 10401                           
 10402                           
 10403                           ;psect for function _Flash_Memory_Unlock
 10404  1FED                     _Flash_Memory_Unlock:	
 10405                           
 10406                           ;MCU_B1.c: 919: PMCON2 = 0x55;
 10407                           
 10408                           ;incstack = 0
 10409                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 10410  1FED  3055               	movlw	85
 10411  1FEE  0023               	movlb	3	; select bank3
 10412  1FEF  0096               	movwf	22	;volatile
 10413                           
 10414                           ;MCU_B1.c: 920: PMCON2 = 0xaa;
 10415  1FF0  30AA               	movlw	170
 10416  1FF1  0096               	movwf	22	;volatile
 10417                           
 10418                           ;MCU_B1.c: 921: WR = 1;
 10419  1FF2  1495               	bsf	21,1	;volatile
 10420                           
 10421                           ;MCU_B1.c: 922: __nop();
 10422  1FF3  0000               	nop
 10423                           
 10424                           ;MCU_B1.c: 923: __nop();
 10425  1FF4  0000               	nop
 10426  1FF5  0008               	return
 10427  1FF6                     __end_of_Flash_Memory_Unlock:	
 10428                           
 10429                           	psect	text58
 10430  132A                     __ptext58:	
 10431 ;; *************** function _Flash_Memory_Read *****************
 10432 ;; Defined at:
 10433 ;;		line 927 in file "../src/MCU_B1.c"
 10434 ;; Parameters:    Size  Location     Type
 10435 ;;  address         1    wreg     unsigned char 
 10436 ;; Auto vars:     Size  Location     Type
 10437 ;;  address         1    2[BANK0 ] unsigned char 
 10438 ;;  ret             1    3[BANK0 ] unsigned char 
 10439 ;;  i               1    1[BANK0 ] unsigned char 
 10440 ;; Return value:  Size  Location     Type
 10441 ;;                  1    wreg      unsigned char 
 10442 ;; Registers used:
 10443 ;;		wreg, status,2
 10444 ;; Tracked objects:
 10445 ;;		On entry : 0/0
 10446 ;;		On exit  : 0/0
 10447 ;;		Unchanged: 0/0
 10448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10450 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10451 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10452 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10453 ;;Total ram usage:        4 bytes
 10454 ;; Hardware stack levels used:    1
 10455 ;; Hardware stack levels required when called:    5
 10456 ;; This function calls:
 10457 ;;		Nothing
 10458 ;; This function is called by:
 10459 ;;		_Flash_Memory_Initialization
 10460 ;;		_Flash_Memory_Modify
 10461 ;; This function uses a non-reentrant model
 10462 ;;
 10463                           
 10464                           
 10465                           ;psect for function _Flash_Memory_Read
 10466  132A                     _Flash_Memory_Read:	
 10467                           
 10468                           ;incstack = 0
 10469                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 10470                           ;Flash_Memory_Read@address stored from wreg
 10471  132A  0020               	movlb	0	; select bank0
 10472  132B  00A2               	movwf	Flash_Memory_Read@address
 10473                           
 10474                           ;MCU_B1.c: 928: char i = 0, ret = 0;
 10475  132C  01A1               	clrf	Flash_Memory_Read@i
 10476  132D  01A3               	clrf	Flash_Memory_Read@ret
 10477                           
 10478                           ;MCU_B1.c: 929: PMADRH = 0x30;
 10479  132E  3030               	movlw	48
 10480  132F  0023               	movlb	3	; select bank3
 10481  1330  0092               	movwf	18	;volatile
 10482                           
 10483                           ;MCU_B1.c: 930: PMADRL = address;
 10484  1331  0020               	movlb	0	; select bank0
 10485  1332  0822               	movf	Flash_Memory_Read@address,w
 10486  1333  0023               	movlb	3	; select bank3
 10487  1334  0091               	movwf	17	;volatile
 10488                           
 10489                           ;MCU_B1.c: 931: CFGS = 0;
 10490  1335  1315               	bcf	21,6	;volatile
 10491                           
 10492                           ;MCU_B1.c: 932: RD = 1;
 10493  1336  1415               	bsf	21,0	;volatile
 10494                           
 10495                           ;MCU_B1.c: 933: i = PMDATH;
 10496  1337  0814               	movf	20,w	;volatile
 10497  1338  0020               	movlb	0	; select bank0
 10498  1339  00A0               	movwf	??_Flash_Memory_Read
 10499  133A  0820               	movf	??_Flash_Memory_Read,w
 10500  133B  00A1               	movwf	Flash_Memory_Read@i
 10501                           
 10502                           ;MCU_B1.c: 934: ret = PMDATL;
 10503  133C  0023               	movlb	3	; select bank3
 10504  133D  0813               	movf	19,w	;volatile
 10505  133E  0020               	movlb	0	; select bank0
 10506  133F  00A0               	movwf	??_Flash_Memory_Read
 10507  1340  0820               	movf	??_Flash_Memory_Read,w
 10508  1341  00A3               	movwf	Flash_Memory_Read@ret
 10509                           
 10510                           ;MCU_B1.c: 935: return ret;
 10511  1342  0823               	movf	Flash_Memory_Read@ret,w
 10512  1343  0008               	return
 10513  1344                     __end_of_Flash_Memory_Read:	
 10514                           
 10515                           	psect	text59
 10516  1072                     __ptext59:	
 10517 ;; *************** function _DimmerLights_Main *****************
 10518 ;; Defined at:
 10519 ;;		line 418 in file "../src/Dimmer_B1.c"
 10520 ;; Parameters:    Size  Location     Type
 10521 ;;		None
 10522 ;; Auto vars:     Size  Location     Type
 10523 ;;		None
 10524 ;; Return value:  Size  Location     Type
 10525 ;;		None               void
 10526 ;; Registers used:
 10527 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10528 ;; Tracked objects:
 10529 ;;		On entry : 0/0
 10530 ;;		On exit  : 0/0
 10531 ;;		Unchanged: 0/0
 10532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10536 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10537 ;;Total ram usage:        0 bytes
 10538 ;; Hardware stack levels used:    1
 10539 ;; Hardware stack levels required when called:   11
 10540 ;; This function calls:
 10541 ;;		_DimmerLights_Close
 10542 ;;		_setDimmerLights_Main
 10543 ;; This function is called by:
 10544 ;;		_main
 10545 ;; This function uses a non-reentrant model
 10546 ;;
 10547                           
 10548                           
 10549                           ;psect for function _DimmerLights_Main
 10550  1072                     _DimmerLights_Main:	
 10551                           
 10552                           ;Dimmer_B1.c: 421: setDimmerLights_Main(1);
 10553                           
 10554                           ;incstack = 0
 10555                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10556  1072  3001               	movlw	1
 10557  1073  318C  2485  3190   	fcall	_setDimmerLights_Main
 10558                           
 10559                           ;Dimmer_B1.c: 425: setDimmerLights_Main(2);
 10560  1076  3002               	movlw	2
 10561  1077  318C  2485  3190   	fcall	_setDimmerLights_Main
 10562                           
 10563                           ;Dimmer_B1.c: 432: DimmerLights_Close();
 10564  107A  3192  224B         	fcall	_DimmerLights_Close
 10565  107C  0008               	return
 10566  107D                     __end_of_DimmerLights_Main:	
 10567                           
 10568                           	psect	text60
 10569  0C85                     __ptext60:	
 10570 ;; *************** function _setDimmerLights_Main *****************
 10571 ;; Defined at:
 10572 ;;		line 436 in file "../src/Dimmer_B1.c"
 10573 ;; Parameters:    Size  Location     Type
 10574 ;;  lights          1    wreg     unsigned char 
 10575 ;; Auto vars:     Size  Location     Type
 10576 ;;  lights          1   70[BANK0 ] unsigned char 
 10577 ;;  clear           1   69[BANK0 ] unsigned char 
 10578 ;; Return value:  Size  Location     Type
 10579 ;;		None               void
 10580 ;; Registers used:
 10581 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10582 ;; Tracked objects:
 10583 ;;		On entry : 0/0
 10584 ;;		On exit  : 0/0
 10585 ;;		Unchanged: 0/0
 10586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10588 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10590 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10591 ;;Total ram usage:        2 bytes
 10592 ;; Hardware stack levels used:    1
 10593 ;; Hardware stack levels required when called:   10
 10594 ;; This function calls:
 10595 ;;		_DimmerLightsPointSelect
 10596 ;;		_setBuz
 10597 ;;		_setDimmerLights
 10598 ;;		_setDimmerLights_Adj
 10599 ;; This function is called by:
 10600 ;;		_DimmerLights_Main
 10601 ;; This function uses a non-reentrant model
 10602 ;;
 10603                           
 10604                           
 10605                           ;psect for function _setDimmerLights_Main
 10606  0C85                     _setDimmerLights_Main:	
 10607                           
 10608                           ;incstack = 0
 10609                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10610                           ;setDimmerLights_Main@lights stored from wreg
 10611  0C85  0020               	movlb	0	; select bank0
 10612  0C86  00E6               	movwf	setDimmerLights_Main@lights
 10613                           
 10614                           ;Dimmer_B1.c: 437: char clear = 1;
 10615  0C87  01E5               	clrf	setDimmerLights_Main@clear
 10616  0C88  0AE5               	incf	setDimmerLights_Main@clear,f
 10617                           
 10618                           ;Dimmer_B1.c: 438: DimmerLightsPointSelect(lights);
 10619  0C89  0866               	movf	setDimmerLights_Main@lights,w
 10620  0C8A  3191  21E8  318C   	fcall	_DimmerLightsPointSelect
 10621                           
 10622                           ;Dimmer_B1.c: 451: if (lights == 1) {
 10623  0C8D  0020               	movlb	0	; select bank0
 10624  0C8E  0866               	movf	setDimmerLights_Main@lights,w
 10625  0C8F  3A01               	xorlw	1
 10626  0C90  1D03               	skipz
 10627  0C91  2C99               	goto	l6651
 10628                           
 10629                           ;Dimmer_B1.c: 452: clear = (DimmerLights2.Clear == 0) ? 0 : 1;
 10630  0C92  3000               	movlw	0
 10631  0C93  0022               	movlb	2	; select bank2
 10632  0C94  194D               	btfsc	(_DimmerLights2^(0+256)+9),2
 10633  0C95  3001               	movlw	1
 10634  0C96  0020               	movlb	0	; select bank0
 10635  0C97  00E5               	movwf	setDimmerLights_Main@clear
 10636                           
 10637                           ;Dimmer_B1.c: 453: } else if (lights == 2) {
 10638  0C98  2CA3               	goto	l6655
 10639  0C99                     l6651:	
 10640  0C99  0866               	movf	setDimmerLights_Main@lights,w
 10641  0C9A  3A02               	xorlw	2
 10642  0C9B  1D03               	skipz
 10643  0C9C  2CA3               	goto	l6655
 10644                           
 10645                           ;Dimmer_B1.c: 454: clear = (DimmerLights1.Clear == 0) ? 0 : 1;
 10646  0C9D  3000               	movlw	0
 10647  0C9E  0022               	movlb	2	; select bank2
 10648  0C9F  193E               	btfsc	(_DimmerLights1^(0+256)+9),2
 10649  0CA0  3001               	movlw	1
 10650  0CA1  0020               	movlb	0	; select bank0
 10651  0CA2  00E5               	movwf	setDimmerLights_Main@clear
 10652  0CA3                     l6655:	
 10653                           
 10654                           ;Dimmer_B1.c: 455: }
 10655                           ;Dimmer_B1.c: 458: if (DimmerLights->Trigger == 1) {
 10656  0CA3  0879               	movf	_DimmerLights,w
 10657  0CA4  3E08               	addlw	8
 10658  0CA5  0086               	movwf	6
 10659  0CA6  3001               	movlw	1	; select bank2/3
 10660  0CA7  0087               	movwf	7
 10661  0CA8  1D01               	btfss	1,2
 10662  0CA9  2CC7               	goto	l6665
 10663                           
 10664                           ;Dimmer_B1.c: 459: if (clear == 1) {
 10665  0CAA  0865               	movf	setDimmerLights_Main@clear,w
 10666  0CAB  3A01               	xorlw	1
 10667  0CAC  1D03               	skipz
 10668  0CAD  0008               	return
 10669                           
 10670                           ;Dimmer_B1.c: 460: DimmerLights->Trigger = 0;
 10671  0CAE  0879               	movf	_DimmerLights,w
 10672  0CAF  3E08               	addlw	8
 10673  0CB0  0086               	movwf	6
 10674  0CB1  3001               	movlw	1	; select bank2/3
 10675  0CB2  0087               	movwf	7
 10676  0CB3  1101               	bcf	1,2
 10677                           
 10678                           ;Dimmer_B1.c: 461: if (DimmerLights->Switch == 1) {
 10679  0CB4  0879               	movf	_DimmerLights,w
 10680  0CB5  3E08               	addlw	8
 10681  0CB6  0086               	movwf	6
 10682  0CB7  3001               	movlw	1	; select bank2/3
 10683  0CB8  0087               	movwf	7
 10684  0CB9  1C81               	btfss	1,1
 10685  0CBA  2CC1               	goto	l6663
 10686                           
 10687                           ;Dimmer_B1.c: 462: setDimmerLights(lights, 1);
 10688  0CBB  01A4               	clrf	setDimmerLights@status
 10689  0CBC  0AA4               	incf	setDimmerLights@status,f
 10690  0CBD  0866               	movf	setDimmerLights_Main@lights,w
 10691  0CBE  318D  25D8         	fcall	_setDimmerLights
 10692                           
 10693                           ;Dimmer_B1.c: 463: } else {
 10694  0CC0  0008               	return
 10695  0CC1                     l6663:	
 10696                           
 10697                           ;Dimmer_B1.c: 464: setDimmerLights(lights, 0);
 10698  0CC1  0020               	movlb	0	; select bank0
 10699  0CC2  01A4               	clrf	setDimmerLights@status
 10700  0CC3  0866               	movf	setDimmerLights_Main@lights,w
 10701  0CC4  318D  25D8         	fcall	_setDimmerLights
 10702                           
 10703                           ;Dimmer_B1.c: 465: }
 10704                           ;Dimmer_B1.c: 469: }
 10705                           ;Dimmer_B1.c: 470: } else {
 10706  0CC6  0008               	return
 10707  0CC7                     l6665:	
 10708                           
 10709                           ;Dimmer_B1.c: 471: if (DimmerLights->TriggerAdj == 1) {
 10710  0CC7  0879               	movf	_DimmerLights,w
 10711  0CC8  3E08               	addlw	8
 10712  0CC9  0086               	movwf	6
 10713  0CCA  3001               	movlw	1	; select bank2/3
 10714  0CCB  0087               	movwf	7
 10715  0CCC  1E01               	btfss	1,4
 10716  0CCD  0008               	return
 10717                           
 10718                           ;Dimmer_B1.c: 472: if (clear == 1) {
 10719  0CCE  0020               	movlb	0	; select bank0
 10720  0CCF  0865               	movf	setDimmerLights_Main@clear,w
 10721  0CD0  3A01               	xorlw	1
 10722  0CD1  1D03               	skipz
 10723  0CD2  0008               	return
 10724                           
 10725                           ;Dimmer_B1.c: 473: DimmerLights->TriggerAdj = 0;
 10726  0CD3  0879               	movf	_DimmerLights,w
 10727  0CD4  3E08               	addlw	8
 10728  0CD5  0086               	movwf	6
 10729  0CD6  3001               	movlw	1	; select bank2/3
 10730  0CD7  0087               	movwf	7
 10731  0CD8  1201               	bcf	1,4
 10732                           
 10733                           ;Dimmer_B1.c: 474: if (DimmerLights->AdjGo == 1) {
 10734  0CD9  0879               	movf	_DimmerLights,w
 10735  0CDA  3E08               	addlw	8
 10736  0CDB  0086               	movwf	6
 10737  0CDC  3001               	movlw	1	; select bank2/3
 10738  0CDD  0087               	movwf	7
 10739  0CDE  1D81               	btfss	1,3
 10740  0CDF  2CEF               	goto	l6675
 10741                           
 10742                           ;Dimmer_B1.c: 475: setDimmerLights_Adj(lights, 1);
 10743  0CE0  01E2               	clrf	setDimmerLights_Adj@status
 10744  0CE1  0AE2               	incf	setDimmerLights_Adj@status,f
 10745  0CE2  0866               	movf	setDimmerLights_Main@lights,w
 10746  0CE3  3196  262E  318C   	fcall	_setDimmerLights_Adj
 10747                           
 10748                           ;Dimmer_B1.c: 476: setBuz(1, 100);
 10749  0CE6  3064               	movlw	100
 10750  0CE7  0020               	movlb	0	; select bank0
 10751  0CE8  00A9               	movwf	setBuz@time
 10752  0CE9  3000               	movlw	0
 10753  0CEA  00AA               	movwf	setBuz@time+1
 10754  0CEB  3001               	movlw	1
 10755  0CEC  3188  20A2         	fcall	_setBuz
 10756                           
 10757                           ;Dimmer_B1.c: 477: } else {
 10758  0CEE  0008               	return
 10759  0CEF                     l6675:	
 10760                           
 10761                           ;Dimmer_B1.c: 478: setDimmerLights_Adj(lights, 0);
 10762  0CEF  0020               	movlb	0	; select bank0
 10763  0CF0  01E2               	clrf	setDimmerLights_Adj@status
 10764  0CF1  0866               	movf	setDimmerLights_Main@lights,w
 10765  0CF2  3196  262E         	fcall	_setDimmerLights_Adj
 10766  0CF4  0008               	return
 10767  0CF5                     __end_of_setDimmerLights_Main:	
 10768                           
 10769                           	psect	text61
 10770  162E                     __ptext61:	
 10771 ;; *************** function _setDimmerLights_Adj *****************
 10772 ;; Defined at:
 10773 ;;		line 657 in file "../src/Dimmer_B1.c"
 10774 ;; Parameters:    Size  Location     Type
 10775 ;;  lights          1    wreg     unsigned char 
 10776 ;;  status          1   66[BANK0 ] unsigned char 
 10777 ;; Auto vars:     Size  Location     Type
 10778 ;;  lights          1   68[BANK0 ] unsigned char 
 10779 ;; Return value:  Size  Location     Type
 10780 ;;		None               void
 10781 ;; Registers used:
 10782 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10783 ;; Tracked objects:
 10784 ;;		On entry : 0/0
 10785 ;;		On exit  : 0/0
 10786 ;;		Unchanged: 0/0
 10787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10788 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10789 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10790 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10791 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10792 ;;Total ram usage:        3 bytes
 10793 ;; Hardware stack levels used:    1
 10794 ;; Hardware stack levels required when called:    9
 10795 ;; This function calls:
 10796 ;;		_DimmerLightsPointSelect
 10797 ;;		_setRF_DimmerLights
 10798 ;;		_setTxData
 10799 ;; This function is called by:
 10800 ;;		_setDimmerLights_Main
 10801 ;; This function uses a non-reentrant model
 10802 ;;
 10803                           
 10804                           
 10805                           ;psect for function _setDimmerLights_Adj
 10806  162E                     _setDimmerLights_Adj:	
 10807                           
 10808                           ;incstack = 0
 10809                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10810                           ;setDimmerLights_Adj@lights stored from wreg
 10811  162E  0020               	movlb	0	; select bank0
 10812  162F  00E4               	movwf	setDimmerLights_Adj@lights
 10813                           
 10814                           ;Dimmer_B1.c: 658: DimmerLightsPointSelect(lights);
 10815  1630  0864               	movf	setDimmerLights_Adj@lights,w
 10816  1631  3191  21E8  3196   	fcall	_DimmerLightsPointSelect
 10817                           
 10818                           ;Dimmer_B1.c: 659: if (status == 1) {
 10819  1634  0020               	movlb	0	; select bank0
 10820  1635  0862               	movf	setDimmerLights_Adj@status,w
 10821  1636  3A01               	xorlw	1
 10822  1637  1D03               	skipz
 10823  1638  2E44               	goto	l6233
 10824                           
 10825                           ;Dimmer_B1.c: 660: DimmerLights->AdjFlag = 1;
 10826  1639  0879               	movf	_DimmerLights,w
 10827  163A  0086               	movwf	6
 10828  163B  3001               	movlw	1	; select bank2/3
 10829  163C  0087               	movwf	7
 10830  163D  1581               	bsf	1,3
 10831                           
 10832                           ;Dimmer_B1.c: 661: DimmerLights->Signal = 1;
 10833  163E  0879               	movf	_DimmerLights,w
 10834  163F  0086               	movwf	6
 10835  1640  3001               	movlw	1	; select bank2/3
 10836  1641  0087               	movwf	7
 10837  1642  1481               	bsf	1,1
 10838                           
 10839                           ;Dimmer_B1.c: 662: } else {
 10840  1643  0008               	return
 10841  1644                     l6233:	
 10842                           
 10843                           ;Dimmer_B1.c: 663: if (DimmerLights->AdjFlag == 1) {
 10844  1644  0879               	movf	_DimmerLights,w
 10845  1645  0086               	movwf	6
 10846  1646  3001               	movlw	1	; select bank2/3
 10847  1647  0087               	movwf	7
 10848  1648  1D81               	btfss	1,3
 10849  1649  0008               	return
 10850                           
 10851                           ;Dimmer_B1.c: 665: DimmerLights->Signal = 0;
 10852  164A  0879               	movf	_DimmerLights,w
 10853  164B  0086               	movwf	6
 10854  164C  3001               	movlw	1	; select bank2/3
 10855  164D  0087               	movwf	7
 10856  164E  1081               	bcf	1,1
 10857                           
 10858                           ;Dimmer_B1.c: 666: DimmerLights->AdjFlag = 0;
 10859  164F  0879               	movf	_DimmerLights,w
 10860  1650  0086               	movwf	6
 10861  1651  3001               	movlw	1	; select bank2/3
 10862  1652  0087               	movwf	7
 10863  1653  1181               	bcf	1,3
 10864                           
 10865                           ;Dimmer_B1.c: 667: ;;
 10866                           ;Dimmer_B1.c: 668: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 10867  1654  0879               	movf	_DimmerLights,w
 10868  1655  3E04               	addlw	4
 10869  1656  0086               	movwf	6
 10870  1657  3001               	movlw	1	; select bank2/3
 10871  1658  0087               	movwf	7
 10872  1659  0801               	movf	1,w
 10873  165A  00E3               	movwf	??_setDimmerLights_Adj
 10874  165B  0879               	movf	_DimmerLights,w
 10875  165C  3E05               	addlw	5
 10876  165D  0086               	movwf	6
 10877  165E  3001               	movlw	1	; select bank2/3
 10878  165F  0087               	movwf	7
 10879  1660  0863               	movf	??_setDimmerLights_Adj,w
 10880  1661  0081               	movwf	1
 10881                           
 10882                           ;Dimmer_B1.c: 676: setRF_DimmerLights(lights, 1);
 10883  1662  01DD               	clrf	setRF_DimmerLights@on
 10884  1663  0ADD               	incf	setRF_DimmerLights@on,f
 10885  1664  0864               	movf	setDimmerLights_Adj@lights,w
 10886  1665  318B  23AA  3196   	fcall	_setRF_DimmerLights
 10887                           
 10888                           ;Dimmer_B1.c: 677: setTxData();
 10889  1668  3185  258E         	fcall	_setTxData
 10890  166A  0008               	return
 10891  166B                     __end_of_setDimmerLights_Adj:	
 10892                           
 10893                           	psect	text62
 10894  0DD8                     __ptext62:	
 10895 ;; *************** function _setDimmerLights *****************
 10896 ;; Defined at:
 10897 ;;		line 604 in file "../src/Dimmer_B1.c"
 10898 ;; Parameters:    Size  Location     Type
 10899 ;;  lights          1    wreg     unsigned char 
 10900 ;;  status          1    4[BANK0 ] unsigned char 
 10901 ;; Auto vars:     Size  Location     Type
 10902 ;;  lights          1    6[BANK0 ] unsigned char 
 10903 ;; Return value:  Size  Location     Type
 10904 ;;		None               void
 10905 ;; Registers used:
 10906 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10907 ;; Tracked objects:
 10908 ;;		On entry : 0/0
 10909 ;;		On exit  : 0/0
 10910 ;;		Unchanged: 0/0
 10911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10912 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10913 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10914 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10915 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10916 ;;Total ram usage:        3 bytes
 10917 ;; Hardware stack levels used:    1
 10918 ;; Hardware stack levels required when called:    7
 10919 ;; This function calls:
 10920 ;;		_DimmerLightsPointSelect
 10921 ;;		_setLED
 10922 ;;		_setMemory_GO
 10923 ;; This function is called by:
 10924 ;;		_setDimmerLights_Main
 10925 ;;		_setControl_Lights_Table
 10926 ;; This function uses a non-reentrant model
 10927 ;;
 10928                           
 10929                           
 10930                           ;psect for function _setDimmerLights
 10931  0DD8                     _setDimmerLights:	
 10932                           
 10933                           ;incstack = 0
 10934                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10935                           ;setDimmerLights@lights stored from wreg
 10936  0DD8  0020               	movlb	0	; select bank0
 10937  0DD9  00A6               	movwf	setDimmerLights@lights
 10938                           
 10939                           ;Dimmer_B1.c: 605: DimmerLightsPointSelect(lights);
 10940  0DDA  0826               	movf	setDimmerLights@lights,w
 10941  0DDB  3191  21E8  318D   	fcall	_DimmerLightsPointSelect
 10942                           
 10943                           ;Dimmer_B1.c: 606: Dimmer->Load = lights;
 10944  0DDE  0020               	movlb	0	; select bank0
 10945  0DDF  0826               	movf	setDimmerLights@lights,w
 10946  0DE0  00A5               	movwf	??_setDimmerLights
 10947  0DE1  0021               	movlb	1	; select bank1
 10948  0DE2  0A50               	incf	_Dimmer^(0+128),w
 10949  0DE3  0086               	movwf	6
 10950  0DE4  0187               	clrf	7
 10951  0DE5  0020               	movlb	0	; select bank0
 10952  0DE6  0825               	movf	??_setDimmerLights,w
 10953  0DE7  0081               	movwf	1
 10954                           
 10955                           ;Dimmer_B1.c: 607: if (status == 1) {
 10956  0DE8  0824               	movf	setDimmerLights@status,w
 10957  0DE9  3A01               	xorlw	1
 10958  0DEA  1D03               	skipz
 10959  0DEB  2E2C               	goto	l5893
 10960                           
 10961                           ;Dimmer_B1.c: 608: DimmerLights->Status = 1;
 10962  0DEC  0879               	movf	_DimmerLights,w
 10963  0DED  0086               	movwf	6
 10964  0DEE  3001               	movlw	1	; select bank2/3
 10965  0DEF  0087               	movwf	7
 10966  0DF0  1681               	bsf	1,5
 10967                           
 10968                           ;Dimmer_B1.c: 609: setLED(lights, 0);
 10969  0DF1  01A2               	clrf	setLED@command
 10970  0DF2  0826               	movf	setDimmerLights@lights,w
 10971  0DF3  3188  20FB  318D   	fcall	_setLED
 10972                           
 10973                           ;Dimmer_B1.c: 611: ;;
 10974                           ;Dimmer_B1.c: 613: DimmerLights->Signal = 1;
 10975  0DF6  0879               	movf	_DimmerLights,w
 10976  0DF7  0086               	movwf	6
 10977  0DF8  3001               	movlw	1	; select bank2/3
 10978  0DF9  0087               	movwf	7
 10979  0DFA  1481               	bsf	1,1
 10980                           
 10981                           ;Dimmer_B1.c: 614: DimmerLights->DimmingTimeValue = 7;
 10982  0DFB  3007               	movlw	7
 10983  0DFC  0020               	movlb	0	; select bank0
 10984  0DFD  00A5               	movwf	??_setDimmerLights
 10985  0DFE  0879               	movf	_DimmerLights,w
 10986  0DFF  3E02               	addlw	2
 10987  0E00  0086               	movwf	6
 10988  0E01  3001               	movlw	1	; select bank2/3
 10989  0E02  0087               	movwf	7
 10990  0E03  0825               	movf	??_setDimmerLights,w
 10991  0E04  0081               	movwf	1
 10992                           
 10993                           ;Dimmer_B1.c: 616: if (DimmerLights->StatusFlag == 0) {
 10994  0E05  0879               	movf	_DimmerLights,w
 10995  0E06  0086               	movwf	6
 10996  0E07  3001               	movlw	1	; select bank2/3
 10997  0E08  0087               	movwf	7
 10998  0E09  1B01               	btfsc	1,6
 10999  0E0A  0008               	return
 11000                           
 11001                           ;Dimmer_B1.c: 617: DimmerLights->StatusFlag = 1;
 11002  0E0B  0879               	movf	_DimmerLights,w
 11003  0E0C  0086               	movwf	6
 11004  0E0D  3001               	movlw	1	; select bank2/3
 11005  0E0E  0087               	movwf	7
 11006  0E0F  1701               	bsf	1,6
 11007                           
 11008                           ;Dimmer_B1.c: 618: ;;
 11009                           ;Dimmer_B1.c: 619: setMemory_GO(0);
 11010  0E10  3000               	movlw	0
 11011  0E11  3192  22B4         	fcall	_setMemory_GO
 11012                           
 11013                           ;Dimmer_B1.c: 622: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 11014  0E13  0879               	movf	_DimmerLights,w
 11015  0E14  3E05               	addlw	5
 11016  0E15  0086               	movwf	6
 11017  0E16  3001               	movlw	1	; select bank2/3
 11018  0E17  0087               	movwf	7
 11019  0E18  0801               	movf	1,w
 11020  0E19  0020               	movlb	0	; select bank0
 11021  0E1A  00A5               	movwf	??_setDimmerLights
 11022  0E1B  0879               	movf	_DimmerLights,w
 11023  0E1C  3E04               	addlw	4
 11024  0E1D  0086               	movwf	6
 11025  0E1E  3001               	movlw	1	; select bank2/3
 11026  0E1F  0087               	movwf	7
 11027  0E20  0825               	movf	??_setDimmerLights,w
 11028  0E21  0081               	movwf	1
 11029                           
 11030                           ;Dimmer_B1.c: 626: DimmerLights->DimmingValue = ((char)(90*0.8));
 11031  0E22  3048               	movlw	72
 11032  0E23  00A5               	movwf	??_setDimmerLights
 11033  0E24  0879               	movf	_DimmerLights,w
 11034  0E25  3E04               	addlw	4
 11035  0E26  0086               	movwf	6
 11036  0E27  3001               	movlw	1	; select bank2/3
 11037  0E28  0087               	movwf	7
 11038  0E29  0825               	movf	??_setDimmerLights,w
 11039  0E2A  0081               	movwf	1
 11040                           
 11041                           ;Dimmer_B1.c: 628: }
 11042                           ;Dimmer_B1.c: 629: } else {
 11043  0E2B  0008               	return
 11044  0E2C                     l5893:	
 11045                           
 11046                           ;Dimmer_B1.c: 630: DimmerLights->Status = 0;
 11047  0E2C  0879               	movf	_DimmerLights,w
 11048  0E2D  0086               	movwf	6
 11049  0E2E  3001               	movlw	1	; select bank2/3
 11050  0E2F  0087               	movwf	7
 11051  0E30  1281               	bcf	1,5
 11052                           
 11053                           ;Dimmer_B1.c: 632: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11054  0E31  0879               	movf	_DimmerLights,w
 11055  0E32  3E06               	addlw	6
 11056  0E33  0086               	movwf	6
 11057  0E34  3001               	movlw	1	; select bank2/3
 11058  0E35  0087               	movwf	7
 11059  0E36  0801               	movf	1,w
 11060  0E37  00A5               	movwf	??_setDimmerLights
 11061  0E38  0879               	movf	_DimmerLights,w
 11062  0E39  3E04               	addlw	4
 11063  0E3A  0086               	movwf	6
 11064  0E3B  3001               	movlw	1	; select bank2/3
 11065  0E3C  0087               	movwf	7
 11066  0E3D  0825               	movf	??_setDimmerLights,w
 11067  0E3E  0081               	movwf	1
 11068                           
 11069                           ;Dimmer_B1.c: 637: DimmerLights->MosfetClose = 1;
 11070  0E3F  0879               	movf	_DimmerLights,w
 11071  0E40  3E08               	addlw	8
 11072  0E41  0086               	movwf	6
 11073  0E42  3001               	movlw	1	; select bank2/3
 11074  0E43  0087               	movwf	7
 11075  0E44  1781               	bsf	1,7
 11076                           
 11077                           ;Dimmer_B1.c: 639: DimmerLights->Signal = 1;
 11078  0E45  0879               	movf	_DimmerLights,w
 11079  0E46  0086               	movwf	6
 11080  0E47  3001               	movlw	1	; select bank2/3
 11081  0E48  0087               	movwf	7
 11082  0E49  1481               	bsf	1,1
 11083                           
 11084                           ;Dimmer_B1.c: 640: DimmerLights->AdjFlag = 0;
 11085  0E4A  0879               	movf	_DimmerLights,w
 11086  0E4B  0086               	movwf	6
 11087  0E4C  3001               	movlw	1	; select bank2/3
 11088  0E4D  0087               	movwf	7
 11089  0E4E  1181               	bcf	1,3
 11090                           
 11091                           ;Dimmer_B1.c: 641: DimmerLights->AdjStatus = 0;
 11092  0E4F  0879               	movf	_DimmerLights,w
 11093  0E50  0086               	movwf	6
 11094  0E51  3001               	movlw	1	; select bank2/3
 11095  0E52  0087               	movwf	7
 11096  0E53  1201               	bcf	1,4
 11097                           
 11098                           ;Dimmer_B1.c: 642: DimmerLights->DimmingTimeValue = 7;
 11099  0E54  3007               	movlw	7
 11100  0E55  00A5               	movwf	??_setDimmerLights
 11101  0E56  0879               	movf	_DimmerLights,w
 11102  0E57  3E02               	addlw	2
 11103  0E58  0086               	movwf	6
 11104  0E59  3001               	movlw	1	; select bank2/3
 11105  0E5A  0087               	movwf	7
 11106  0E5B  0825               	movf	??_setDimmerLights,w
 11107  0E5C  0081               	movwf	1
 11108  0E5D  0008               	return
 11109  0E5E                     __end_of_setDimmerLights:	
 11110                           
 11111                           	psect	text63
 11112  08FB                     __ptext63:	
 11113 ;; *************** function _setLED *****************
 11114 ;; Defined at:
 11115 ;;		line 70 in file "../src/LED_B1.c"
 11116 ;; Parameters:    Size  Location     Type
 11117 ;;  led             1    wreg     unsigned char 
 11118 ;;  command         1    2[BANK0 ] unsigned char 
 11119 ;; Auto vars:     Size  Location     Type
 11120 ;;  led             1    3[BANK0 ] unsigned char 
 11121 ;; Return value:  Size  Location     Type
 11122 ;;		None               void
 11123 ;; Registers used:
 11124 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11125 ;; Tracked objects:
 11126 ;;		On entry : 0/0
 11127 ;;		On exit  : 0/0
 11128 ;;		Unchanged: 0/0
 11129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11130 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11131 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11133 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11134 ;;Total ram usage:        2 bytes
 11135 ;; Hardware stack levels used:    1
 11136 ;; Hardware stack levels required when called:    6
 11137 ;; This function calls:
 11138 ;;		_LedPointSelect
 11139 ;; This function is called by:
 11140 ;;		_setDimmerLights
 11141 ;;		_setLED_Initialization
 11142 ;;		_setSw_Initialization
 11143 ;;		_setDimmerLights_ERROR
 11144 ;; This function uses a non-reentrant model
 11145 ;;
 11146                           
 11147                           
 11148                           ;psect for function _setLED
 11149  08FB                     _setLED:	
 11150                           
 11151                           ;incstack = 0
 11152                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11153                           ;setLED@led stored from wreg
 11154  08FB  0020               	movlb	0	; select bank0
 11155  08FC  00A3               	movwf	setLED@led
 11156                           
 11157                           ;LED_B1.c: 71: LedPointSelect(led);
 11158  08FD  0823               	movf	setLED@led,w
 11159  08FE  3193  2360  3188   	fcall	_LedPointSelect
 11160                           
 11161                           ;LED_B1.c: 72: if (command == 0) {
 11162  0901  0020               	movlb	0	; select bank0
 11163  0902  08A2               	movf	setLED@command,f
 11164  0903  1D03               	skipz
 11165  0904  2917               	goto	l5767
 11166                           
 11167                           ;LED_B1.c: 74: if (led == 1) {
 11168  0905  0823               	movf	setLED@led,w
 11169  0906  3A01               	xorlw	1
 11170  0907  1D03               	skipz
 11171  0908  290B               	goto	l5759
 11172                           
 11173                           ;LED_B1.c: 78: RA3 = 1;
 11174  0909  158C               	bsf	12,3	;volatile
 11175                           
 11176                           ;LED_B1.c: 80: }
 11177  090A  0008               	return
 11178  090B                     l5759:	
 11179                           
 11180                           ;LED_B1.c: 83: else if (led == 2) {
 11181  090B  0823               	movf	setLED@led,w
 11182  090C  3A02               	xorlw	2
 11183  090D  1D03               	skipz
 11184  090E  2911               	goto	l5763
 11185                           
 11186                           ;LED_B1.c: 87: RC7 = 1;
 11187  090F  178E               	bsf	14,7	;volatile
 11188                           
 11189                           ;LED_B1.c: 89: }
 11190  0910  0008               	return
 11191  0911                     l5763:	
 11192                           
 11193                           ;LED_B1.c: 101: else if (led == 99) {
 11194  0911  0823               	movf	setLED@led,w
 11195  0912  3A63               	xorlw	99
 11196  0913  1D03               	skipz
 11197  0914  0008               	return
 11198                           
 11199                           ;LED_B1.c: 105: RB5 = 1;
 11200  0915  168D               	bsf	13,5	;volatile
 11201                           
 11202                           ;LED_B1.c: 107: }
 11203                           ;LED_B1.c: 109: } else if (command == 1) {
 11204  0916  0008               	return
 11205  0917                     l5767:	
 11206  0917  0822               	movf	setLED@command,w
 11207  0918  3A01               	xorlw	1
 11208  0919  1D03               	skipz
 11209  091A  292D               	goto	l5781
 11210                           
 11211                           ;LED_B1.c: 111: if (led == 1) {
 11212  091B  0823               	movf	setLED@led,w
 11213  091C  3A01               	xorlw	1
 11214  091D  1D03               	skipz
 11215  091E  2921               	goto	l5773
 11216                           
 11217                           ;LED_B1.c: 115: RA3 = 0;
 11218  091F  118C               	bcf	12,3	;volatile
 11219                           
 11220                           ;LED_B1.c: 117: }
 11221  0920  0008               	return
 11222  0921                     l5773:	
 11223                           
 11224                           ;LED_B1.c: 120: else if (led == 2) {
 11225  0921  0823               	movf	setLED@led,w
 11226  0922  3A02               	xorlw	2
 11227  0923  1D03               	skipz
 11228  0924  2927               	goto	l5777
 11229                           
 11230                           ;LED_B1.c: 124: RC7 = 0;
 11231  0925  138E               	bcf	14,7	;volatile
 11232                           
 11233                           ;LED_B1.c: 126: }
 11234  0926  0008               	return
 11235  0927                     l5777:	
 11236                           
 11237                           ;LED_B1.c: 138: else if (led == 99) {
 11238  0927  0823               	movf	setLED@led,w
 11239  0928  3A63               	xorlw	99
 11240  0929  1D03               	skipz
 11241  092A  0008               	return
 11242                           
 11243                           ;LED_B1.c: 142: RB5 = 0;
 11244  092B  128D               	bcf	13,5	;volatile
 11245                           
 11246                           ;LED_B1.c: 144: }
 11247                           ;LED_B1.c: 146: } else if (command == 10) {
 11248  092C  0008               	return
 11249  092D                     l5781:	
 11250  092D  0822               	movf	setLED@command,w
 11251  092E  3A0A               	xorlw	10
 11252  092F  1D03               	skipz
 11253  0930  294D               	goto	l5797
 11254                           
 11255                           ;LED_B1.c: 147: LED->GO = 0;
 11256  0931  087B               	movf	_LED,w
 11257  0932  0086               	movwf	6
 11258  0933  0187               	clrf	7
 11259  0934  1081               	bcf	1,1
 11260                           
 11261                           ;LED_B1.c: 148: LED->Time = 0;
 11262  0935  0A7B               	incf	_LED,w
 11263  0936  0086               	movwf	6
 11264  0937  0187               	clrf	7
 11265  0938  3000               	movlw	0
 11266  0939  3FC0               	movwi [0]fsr1
 11267  093A  3FC1               	movwi [1]fsr1
 11268                           
 11269                           ;LED_B1.c: 150: if (led == 1) {
 11270  093B  0823               	movf	setLED@led,w
 11271  093C  3A01               	xorlw	1
 11272  093D  1D03               	skipz
 11273  093E  2941               	goto	l5789
 11274                           
 11275                           ;LED_B1.c: 154: RA3 = 1;
 11276  093F  158C               	bsf	12,3	;volatile
 11277                           
 11278                           ;LED_B1.c: 156: }
 11279  0940  0008               	return
 11280  0941                     l5789:	
 11281                           
 11282                           ;LED_B1.c: 159: else if (led == 2) {
 11283  0941  0823               	movf	setLED@led,w
 11284  0942  3A02               	xorlw	2
 11285  0943  1D03               	skipz
 11286  0944  2947               	goto	l5793
 11287                           
 11288                           ;LED_B1.c: 163: RC7 = 1;
 11289  0945  178E               	bsf	14,7	;volatile
 11290                           
 11291                           ;LED_B1.c: 165: }
 11292  0946  0008               	return
 11293  0947                     l5793:	
 11294                           
 11295                           ;LED_B1.c: 177: else if (led == 99) {
 11296  0947  0823               	movf	setLED@led,w
 11297  0948  3A63               	xorlw	99
 11298  0949  1D03               	skipz
 11299  094A  0008               	return
 11300                           
 11301                           ;LED_B1.c: 181: RB5 = 1;
 11302  094B  168D               	bsf	13,5	;volatile
 11303                           
 11304                           ;LED_B1.c: 183: }
 11305                           ;LED_B1.c: 185: } else if (command == 11) {
 11306  094C  0008               	return
 11307  094D                     l5797:	
 11308  094D  0822               	movf	setLED@command,w
 11309  094E  3A0B               	xorlw	11
 11310  094F  1D03               	skipz
 11311  0950  0008               	return
 11312                           
 11313                           ;LED_B1.c: 186: LED->GO = 1;
 11314  0951  087B               	movf	_LED,w
 11315  0952  0086               	movwf	6
 11316  0953  0187               	clrf	7
 11317  0954  1481               	bsf	1,1
 11318  0955  0008               	return
 11319  0956                     __end_of_setLED:	
 11320                           
 11321                           	psect	text64
 11322  1360                     __ptext64:	
 11323 ;; *************** function _LedPointSelect *****************
 11324 ;; Defined at:
 11325 ;;		line 7 in file "../src/LED_B1.c"
 11326 ;; Parameters:    Size  Location     Type
 11327 ;;  led             1    wreg     unsigned char 
 11328 ;; Auto vars:     Size  Location     Type
 11329 ;;  led             1    1[BANK0 ] unsigned char 
 11330 ;; Return value:  Size  Location     Type
 11331 ;;		None               void
 11332 ;; Registers used:
 11333 ;;		wreg
 11334 ;; Tracked objects:
 11335 ;;		On entry : 0/0
 11336 ;;		On exit  : 0/0
 11337 ;;		Unchanged: 0/0
 11338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11340 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11341 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11342 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11343 ;;Total ram usage:        2 bytes
 11344 ;; Hardware stack levels used:    1
 11345 ;; Hardware stack levels required when called:    5
 11346 ;; This function calls:
 11347 ;;		Nothing
 11348 ;; This function is called by:
 11349 ;;		_setLED_Initialization
 11350 ;;		_setLED
 11351 ;;		_setLED_Main
 11352 ;; This function uses a non-reentrant model
 11353 ;;
 11354                           
 11355                           
 11356                           ;psect for function _LedPointSelect
 11357  1360                     _LedPointSelect:	
 11358                           
 11359                           ;incstack = 0
 11360                           ; Regs used in _LedPointSelect: [wreg]
 11361                           ;LedPointSelect@led stored from wreg
 11362  1360  0020               	movlb	0	; select bank0
 11363  1361  00A1               	movwf	LedPointSelect@led
 11364                           
 11365                           ;LED_B1.c: 9: if (led == 1) {
 11366  1362  0821               	movf	LedPointSelect@led,w
 11367  1363  3A01               	xorlw	1
 11368  1364  1D03               	skipz
 11369  1365  2B6B               	goto	l5557
 11370                           
 11371                           ;LED_B1.c: 10: LED = &VarLED1;
 11372  1366  30DF               	movlw	_VarLED1& (0+255)
 11373  1367  00A0               	movwf	??_LedPointSelect
 11374  1368  0820               	movf	??_LedPointSelect,w
 11375  1369  00FB               	movwf	_LED
 11376                           
 11377                           ;LED_B1.c: 11: }
 11378  136A  0008               	return
 11379  136B                     l5557:	
 11380                           
 11381                           ;LED_B1.c: 14: else if (led == 2) {
 11382  136B  0821               	movf	LedPointSelect@led,w
 11383  136C  3A02               	xorlw	2
 11384  136D  1D03               	skipz
 11385  136E  2B74               	goto	l5561
 11386                           
 11387                           ;LED_B1.c: 15: LED = &VarLED2;
 11388  136F  30E3               	movlw	_VarLED2& (0+255)
 11389  1370  00A0               	movwf	??_LedPointSelect
 11390  1371  0820               	movf	??_LedPointSelect,w
 11391  1372  00FB               	movwf	_LED
 11392                           
 11393                           ;LED_B1.c: 16: }
 11394  1373  0008               	return
 11395  1374                     l5561:	
 11396                           
 11397                           ;LED_B1.c: 24: else if (led == 99) {
 11398  1374  0821               	movf	LedPointSelect@led,w
 11399  1375  3A63               	xorlw	99
 11400  1376  1D03               	skipz
 11401  1377  0008               	return
 11402                           
 11403                           ;LED_B1.c: 25: LED = &VarErrLED;
 11404  1378  30DB               	movlw	_VarErrLED& (0+255)
 11405  1379  00A0               	movwf	??_LedPointSelect
 11406  137A  0820               	movf	??_LedPointSelect,w
 11407  137B  00FB               	movwf	_LED
 11408  137C  0008               	return
 11409  137D                     __end_of_LedPointSelect:	
 11410                           
 11411                           	psect	text65
 11412  124B                     __ptext65:	
 11413 ;; *************** function _DimmerLights_Close *****************
 11414 ;; Defined at:
 11415 ;;		line 407 in file "../src/Dimmer_B1.c"
 11416 ;; Parameters:    Size  Location     Type
 11417 ;;		None
 11418 ;; Auto vars:     Size  Location     Type
 11419 ;;		None
 11420 ;; Return value:  Size  Location     Type
 11421 ;;		None               void
 11422 ;; Registers used:
 11423 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11424 ;; Tracked objects:
 11425 ;;		On entry : 0/0
 11426 ;;		On exit  : 0/0
 11427 ;;		Unchanged: 0/0
 11428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11433 ;;Total ram usage:        0 bytes
 11434 ;; Hardware stack levels used:    1
 11435 ;; Hardware stack levels required when called:    6
 11436 ;; This function calls:
 11437 ;;		_getDimmerLights_StatusFlag
 11438 ;;		_setMemory_GO
 11439 ;; This function is called by:
 11440 ;;		_DimmerLights_Main
 11441 ;; This function uses a non-reentrant model
 11442 ;;
 11443                           
 11444                           
 11445                           ;psect for function _DimmerLights_Close
 11446  124B                     _DimmerLights_Close:	
 11447                           
 11448                           ;Dimmer_B1.c: 408: if (Dimmer->Detect == 1) {
 11449                           
 11450                           ;incstack = 0
 11451                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11452  124B  0021               	movlb	1	; select bank1
 11453  124C  0850               	movf	_Dimmer^(0+128),w
 11454  124D  0086               	movwf	6
 11455  124E  0187               	clrf	7
 11456  124F  1C01               	btfss	1,0
 11457  1250  0008               	return
 11458                           
 11459                           ;Dimmer_B1.c: 409: Dimmer->Detect = 0;
 11460  1251  0850               	movf	_Dimmer^(0+128),w
 11461  1252  0086               	movwf	6
 11462  1253  0187               	clrf	7
 11463  1254  1001               	bcf	1,0
 11464                           
 11465                           ;Dimmer_B1.c: 410: if (getDimmerLights_StatusFlag() == 0) {
 11466  1255  3191  2190  3192   	fcall	_getDimmerLights_StatusFlag
 11467  1258  3800               	iorlw	0
 11468  1259  1D03               	skipz
 11469  125A  0008               	return
 11470                           
 11471                           ;Dimmer_B1.c: 411: ;;
 11472                           ;Dimmer_B1.c: 412: setMemory_GO(1);
 11473  125B  3001               	movlw	1
 11474  125C  3192  22B4         	fcall	_setMemory_GO
 11475  125E  0008               	return
 11476  125F                     __end_of_DimmerLights_Close:	
 11477                           
 11478                           	psect	text66
 11479  12B4                     __ptext66:	
 11480 ;; *************** function _setMemory_GO *****************
 11481 ;; Defined at:
 11482 ;;		line 995 in file "../src/MCU_B1.c"
 11483 ;; Parameters:    Size  Location     Type
 11484 ;;  command         1    wreg     unsigned char 
 11485 ;; Auto vars:     Size  Location     Type
 11486 ;;  command         1    2[BANK0 ] unsigned char 
 11487 ;; Return value:  Size  Location     Type
 11488 ;;		None               void
 11489 ;; Registers used:
 11490 ;;		wreg, status,2, status,0
 11491 ;; Tracked objects:
 11492 ;;		On entry : 0/0
 11493 ;;		On exit  : 0/0
 11494 ;;		Unchanged: 0/0
 11495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11497 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11498 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11499 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11500 ;;Total ram usage:        3 bytes
 11501 ;; Hardware stack levels used:    1
 11502 ;; Hardware stack levels required when called:    5
 11503 ;; This function calls:
 11504 ;;		Nothing
 11505 ;; This function is called by:
 11506 ;;		_DimmerLights_Close
 11507 ;;		_setDimmerLights
 11508 ;; This function uses a non-reentrant model
 11509 ;;
 11510                           
 11511                           
 11512                           ;psect for function _setMemory_GO
 11513  12B4                     _setMemory_GO:	
 11514                           
 11515                           ;incstack = 0
 11516                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 11517                           ;setMemory_GO@command stored from wreg
 11518  12B4  0020               	movlb	0	; select bank0
 11519  12B5  00A2               	movwf	setMemory_GO@command
 11520                           
 11521                           ;MCU_B1.c: 996: Memory.GO = command;
 11522  12B6  0822               	movf	setMemory_GO@command,w
 11523  12B7  0023               	movlb	3	; select bank3
 11524  12B8  10C4               	bcf	(_Memory^(0+384)+36),1
 11525  12B9  1D03               	skipz
 11526  12BA  14C4               	bsf	(_Memory^(0+384)+36),1
 11527                           
 11528                           ;MCU_B1.c: 997: if (command == 0) {
 11529  12BB  0020               	movlb	0	; select bank0
 11530  12BC  08A2               	movf	setMemory_GO@command,f
 11531  12BD  1D03               	skipz
 11532  12BE  0008               	return
 11533                           
 11534                           ;MCU_B1.c: 998: Memory.Time = command;
 11535  12BF  0822               	movf	setMemory_GO@command,w
 11536  12C0  00A0               	movwf	??_setMemory_GO
 11537  12C1  01A1               	clrf	??_setMemory_GO+1
 11538  12C2  0820               	movf	??_setMemory_GO,w
 11539  12C3  0023               	movlb	3	; select bank3
 11540  12C4  00C2               	movwf	(_Memory^(0+384)+34)
 11541  12C5  0020               	movlb	0	; select bank0
 11542  12C6  0821               	movf	??_setMemory_GO+1,w
 11543  12C7  0023               	movlb	3	; select bank3
 11544  12C8  00C3               	movwf	((_Memory+1)^(0+384)+34)
 11545  12C9  0008               	return
 11546  12CA                     __end_of_setMemory_GO:	
 11547                           
 11548                           	psect	text67
 11549  1190                     __ptext67:	
 11550 ;; *************** function _getDimmerLights_StatusFlag *****************
 11551 ;; Defined at:
 11552 ;;		line 486 in file "../src/Dimmer_B1.c"
 11553 ;; Parameters:    Size  Location     Type
 11554 ;;		None
 11555 ;; Auto vars:     Size  Location     Type
 11556 ;;  Status          1    1[BANK0 ] unsigned char 
 11557 ;; Return value:  Size  Location     Type
 11558 ;;                  1    wreg      unsigned char 
 11559 ;; Registers used:
 11560 ;;		wreg, status,2
 11561 ;; Tracked objects:
 11562 ;;		On entry : 0/0
 11563 ;;		On exit  : 0/0
 11564 ;;		Unchanged: 0/0
 11565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11567 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11568 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11569 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11570 ;;Total ram usage:        3 bytes
 11571 ;; Hardware stack levels used:    1
 11572 ;; Hardware stack levels required when called:    5
 11573 ;; This function calls:
 11574 ;;		Nothing
 11575 ;; This function is called by:
 11576 ;;		_DimmerLights_Close
 11577 ;;		_DimmerLights_Exceptions
 11578 ;; This function uses a non-reentrant model
 11579 ;;
 11580                           
 11581                           
 11582                           ;psect for function _getDimmerLights_StatusFlag
 11583  1190                     _getDimmerLights_StatusFlag:	
 11584                           
 11585                           ;Dimmer_B1.c: 487: char Status = 0;
 11586                           
 11587                           ;incstack = 0
 11588                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 11589  1190  0020               	movlb	0	; select bank0
 11590  1191  01A1               	clrf	getDimmerLights_StatusFlag@Status
 11591                           
 11592                           ;Dimmer_B1.c: 494: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1) ? 1 : 0;
 11593  1192  01A2               	clrf	_getDimmerLights_StatusFlag$2225
 11594  1193  0AA2               	incf	_getDimmerLights_StatusFlag$2225,f
 11595  1194  0022               	movlb	2	; select bank2
 11596  1195  1F35               	btfss	_DimmerLights1^(0+256),6
 11597  1196  1B44               	btfsc	_DimmerLights2^(0+256),6
 11598  1197  299A               	goto	l6221
 11599  1198  0020               	movlb	0	; select bank0
 11600  1199  01A2               	clrf	_getDimmerLights_StatusFlag$2225
 11601  119A                     l6221:	
 11602  119A  0020               	movlb	0	; select bank0
 11603  119B  0822               	movf	_getDimmerLights_StatusFlag$2225,w
 11604  119C  00A0               	movwf	??_getDimmerLights_StatusFlag
 11605  119D  0820               	movf	??_getDimmerLights_StatusFlag,w
 11606  119E  00A1               	movwf	getDimmerLights_StatusFlag@Status
 11607                           
 11608                           ;Dimmer_B1.c: 501: return Status;
 11609  119F  0821               	movf	getDimmerLights_StatusFlag@Status,w
 11610  11A0  0008               	return
 11611  11A1                     __end_of_getDimmerLights_StatusFlag:	
 11612                           
 11613                           	psect	text68
 11614  12CA                     __ptext68:	
 11615 ;; *************** function _DimmerLights_Initialization *****************
 11616 ;; Defined at:
 11617 ;;		line 345 in file "../src/Dimmer_B1.c"
 11618 ;; Parameters:    Size  Location     Type
 11619 ;;		None
 11620 ;; Auto vars:     Size  Location     Type
 11621 ;;		None
 11622 ;; Return value:  Size  Location     Type
 11623 ;;		None               void
 11624 ;; Registers used:
 11625 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11626 ;; Tracked objects:
 11627 ;;		On entry : 0/0
 11628 ;;		On exit  : 0/0
 11629 ;;		Unchanged: 0/0
 11630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11633 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11634 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11635 ;;Total ram usage:        1 bytes
 11636 ;; Hardware stack levels used:    1
 11637 ;; Hardware stack levels required when called:    7
 11638 ;; This function calls:
 11639 ;;		_Dimmer_Initialization
 11640 ;;		_setDimmerLights_Initialization
 11641 ;; This function is called by:
 11642 ;;		_main
 11643 ;; This function uses a non-reentrant model
 11644 ;;
 11645                           
 11646                           
 11647                           ;psect for function _DimmerLights_Initialization
 11648  12CA                     _DimmerLights_Initialization:	
 11649                           
 11650                           ;Dimmer_B1.c: 348: DimmerLights11 = &DimmerLights1;
 11651                           
 11652                           ;incstack = 0
 11653                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11654  12CA  3035               	movlw	_DimmerLights1& (0+255)
 11655  12CB  0020               	movlb	0	; select bank0
 11656  12CC  00A4               	movwf	??_DimmerLights_Initialization
 11657  12CD  0824               	movf	??_DimmerLights_Initialization,w
 11658  12CE  0021               	movlb	1	; select bank1
 11659  12CF  00D1               	movwf	_DimmerLights11^(0+128)
 11660                           
 11661                           ;Dimmer_B1.c: 349: setDimmerLights_Initialization(1);
 11662  12D0  3001               	movlw	1
 11663  12D1  3195  2530  3192   	fcall	_setDimmerLights_Initialization
 11664                           
 11665                           ;Dimmer_B1.c: 353: DimmerLights22 = &DimmerLights2;
 11666  12D4  3044               	movlw	_DimmerLights2& (0+255)
 11667  12D5  0020               	movlb	0	; select bank0
 11668  12D6  00A4               	movwf	??_DimmerLights_Initialization
 11669  12D7  0824               	movf	??_DimmerLights_Initialization,w
 11670  12D8  0021               	movlb	1	; select bank1
 11671  12D9  00D2               	movwf	_DimmerLights22^(0+128)
 11672                           
 11673                           ;Dimmer_B1.c: 354: setDimmerLights_Initialization(2);
 11674  12DA  3002               	movlw	2
 11675  12DB  3195  2530  3192   	fcall	_setDimmerLights_Initialization
 11676                           
 11677                           ;Dimmer_B1.c: 363: Dimmer_Initialization();
 11678  12DE  319F  27A6         	fcall	_Dimmer_Initialization
 11679  12E0  0008               	return
 11680  12E1                     __end_of_DimmerLights_Initialization:	
 11681                           
 11682                           	psect	text69
 11683  1530                     __ptext69:	
 11684 ;; *************** function _setDimmerLights_Initialization *****************
 11685 ;; Defined at:
 11686 ;;		line 368 in file "../src/Dimmer_B1.c"
 11687 ;; Parameters:    Size  Location     Type
 11688 ;;  lights          1    wreg     unsigned char 
 11689 ;; Auto vars:     Size  Location     Type
 11690 ;;  lights          1    3[BANK0 ] unsigned char 
 11691 ;; Return value:  Size  Location     Type
 11692 ;;		None               void
 11693 ;; Registers used:
 11694 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11695 ;; Tracked objects:
 11696 ;;		On entry : 0/0
 11697 ;;		On exit  : 0/0
 11698 ;;		Unchanged: 0/0
 11699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11701 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11702 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11703 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11704 ;;Total ram usage:        2 bytes
 11705 ;; Hardware stack levels used:    1
 11706 ;; Hardware stack levels required when called:    6
 11707 ;; This function calls:
 11708 ;;		_DimmerLightsPointSelect
 11709 ;; This function is called by:
 11710 ;;		_DimmerLights_Initialization
 11711 ;; This function uses a non-reentrant model
 11712 ;;
 11713                           
 11714                           
 11715                           ;psect for function _setDimmerLights_Initialization
 11716  1530                     _setDimmerLights_Initialization:	
 11717                           
 11718                           ;incstack = 0
 11719                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 11720                           ;setDimmerLights_Initialization@lights stored from wreg
 11721  1530  0020               	movlb	0	; select bank0
 11722  1531  00A3               	movwf	setDimmerLights_Initialization@lights
 11723                           
 11724                           ;Dimmer_B1.c: 370: DimmerLightsPointSelect(lights);
 11725  1532  0823               	movf	setDimmerLights_Initialization@lights,w
 11726  1533  3191  21E8         	fcall	_DimmerLightsPointSelect
 11727                           
 11728                           ;Dimmer_B1.c: 371: DimmerLights->Clear = 1;
 11729  1535  0879               	movf	_DimmerLights,w
 11730  1536  3E09               	addlw	9
 11731  1537  0086               	movwf	6
 11732  1538  3001               	movlw	1	; select bank2/3
 11733  1539  0087               	movwf	7
 11734  153A  1501               	bsf	1,2
 11735                           
 11736                           ;Dimmer_B1.c: 377: DimmerLights->MaxmumValue = ((char)(90*0.8));
 11737  153B  3048               	movlw	72
 11738  153C  0020               	movlb	0	; select bank0
 11739  153D  00A2               	movwf	??_setDimmerLights_Initialization
 11740  153E  0879               	movf	_DimmerLights,w
 11741  153F  3E05               	addlw	5
 11742  1540  0086               	movwf	6
 11743  1541  3001               	movlw	1	; select bank2/3
 11744  1542  0087               	movwf	7
 11745  1543  0822               	movf	??_setDimmerLights_Initialization,w
 11746  1544  0081               	movwf	1
 11747                           
 11748                           ;Dimmer_B1.c: 378: DimmerLights->MinimumValue = ((char)(25*0.8));
 11749  1545  3014               	movlw	20
 11750  1546  00A2               	movwf	??_setDimmerLights_Initialization
 11751  1547  0879               	movf	_DimmerLights,w
 11752  1548  3E06               	addlw	6
 11753  1549  0086               	movwf	6
 11754  154A  3001               	movlw	1	; select bank2/3
 11755  154B  0087               	movwf	7
 11756  154C  0822               	movf	??_setDimmerLights_Initialization,w
 11757  154D  0081               	movwf	1
 11758                           
 11759                           ;Dimmer_B1.c: 392: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 11760  154E  0879               	movf	_DimmerLights,w
 11761  154F  3E05               	addlw	5
 11762  1550  0086               	movwf	6
 11763  1551  3001               	movlw	1	; select bank2/3
 11764  1552  0087               	movwf	7
 11765  1553  0801               	movf	1,w
 11766  1554  00A2               	movwf	??_setDimmerLights_Initialization
 11767  1555  0879               	movf	_DimmerLights,w
 11768  1556  3E04               	addlw	4
 11769  1557  0086               	movwf	6
 11770  1558  3001               	movlw	1	; select bank2/3
 11771  1559  0087               	movwf	7
 11772  155A  0822               	movf	??_setDimmerLights_Initialization,w
 11773  155B  0081               	movwf	1
 11774  155C  0008               	return
 11775  155D                     __end_of_setDimmerLights_Initialization:	
 11776                           
 11777                           	psect	text70
 11778  1FA6                     __ptext70:	
 11779 ;; *************** function _Dimmer_Initialization *****************
 11780 ;; Defined at:
 11781 ;;		line 797 in file "../src/Dimmer_B1.c"
 11782 ;; Parameters:    Size  Location     Type
 11783 ;;		None
 11784 ;; Auto vars:     Size  Location     Type
 11785 ;;		None
 11786 ;; Return value:  Size  Location     Type
 11787 ;;		None               void
 11788 ;; Registers used:
 11789 ;;		wreg
 11790 ;; Tracked objects:
 11791 ;;		On entry : 0/0
 11792 ;;		On exit  : 0/0
 11793 ;;		Unchanged: 0/0
 11794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11797 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11798 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11799 ;;Total ram usage:        1 bytes
 11800 ;; Hardware stack levels used:    1
 11801 ;; Hardware stack levels required when called:    5
 11802 ;; This function calls:
 11803 ;;		Nothing
 11804 ;; This function is called by:
 11805 ;;		_DimmerLights_Initialization
 11806 ;; This function uses a non-reentrant model
 11807 ;;
 11808                           
 11809                           
 11810                           ;psect for function _Dimmer_Initialization
 11811  1FA6                     _Dimmer_Initialization:	
 11812                           
 11813                           ;Dimmer_B1.c: 799: Dimmer = &Dimmer1;
 11814                           
 11815                           ;incstack = 0
 11816                           ; Regs used in _Dimmer_Initialization: [wreg]
 11817  1FA6  30E7               	movlw	_Dimmer1& (0+255)
 11818  1FA7  0020               	movlb	0	; select bank0
 11819  1FA8  00A0               	movwf	??_Dimmer_Initialization
 11820  1FA9  0820               	movf	??_Dimmer_Initialization,w
 11821  1FAA  0021               	movlb	1	; select bank1
 11822  1FAB  00D0               	movwf	_Dimmer^(0+128)
 11823  1FAC  0008               	return
 11824  1FAD                     __end_of_Dimmer_Initialization:	
 11825                           
 11826                           	psect	text71
 11827  1FC4                     __ptext71:	
 11828 ;; *************** function _DelayOff_Main *****************
 11829 ;; Defined at:
 11830 ;;		line 41 in file "../src/DelayOff_B1.c"
 11831 ;; Parameters:    Size  Location     Type
 11832 ;;		None
 11833 ;; Auto vars:     Size  Location     Type
 11834 ;;		None
 11835 ;; Return value:  Size  Location     Type
 11836 ;;		None               void
 11837 ;; Registers used:
 11838 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11839 ;; Tracked objects:
 11840 ;;		On entry : 0/0
 11841 ;;		On exit  : 0/0
 11842 ;;		Unchanged: 0/0
 11843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11848 ;;Total ram usage:        0 bytes
 11849 ;; Hardware stack levels used:    1
 11850 ;; Hardware stack levels required when called:   10
 11851 ;; This function calls:
 11852 ;;		_DlyOff_Main
 11853 ;; This function is called by:
 11854 ;;		_main
 11855 ;; This function uses a non-reentrant model
 11856 ;;
 11857                           
 11858                           
 11859                           ;psect for function _DelayOff_Main
 11860  1FC4                     _DelayOff_Main:	
 11861                           
 11862                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 11863                           
 11864                           ;incstack = 0
 11865                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11866  1FC4  3001               	movlw	1
 11867  1FC5  318B  233F  319F   	fcall	_DlyOff_Main
 11868                           
 11869                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 11870  1FC8  3002               	movlw	2
 11871  1FC9  318B  233F         	fcall	_DlyOff_Main
 11872  1FCB  0008               	return
 11873  1FCC                     __end_of_DelayOff_Main:	
 11874                           
 11875                           	psect	text72
 11876  0B3F                     __ptext72:	
 11877 ;; *************** function _DlyOff_Main *****************
 11878 ;; Defined at:
 11879 ;;		line 62 in file "../src/DelayOff_B1.c"
 11880 ;; Parameters:    Size  Location     Type
 11881 ;;  sw              1    wreg     unsigned char 
 11882 ;; Auto vars:     Size  Location     Type
 11883 ;;  sw              1   68[BANK0 ] unsigned char 
 11884 ;; Return value:  Size  Location     Type
 11885 ;;		None               void
 11886 ;; Registers used:
 11887 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11888 ;; Tracked objects:
 11889 ;;		On entry : 0/0
 11890 ;;		On exit  : 0/0
 11891 ;;		Unchanged: 0/0
 11892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11894 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11895 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11896 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11897 ;;Total ram usage:        3 bytes
 11898 ;; Hardware stack levels used:    1
 11899 ;; Hardware stack levels required when called:    9
 11900 ;; This function calls:
 11901 ;;		_DelayOffPointSelect
 11902 ;;		_setBuz
 11903 ;;		_setDimmerLights_Switch
 11904 ;;		_setDimmerLights_Trigger
 11905 ;;		_setRFSW_Status
 11906 ;;		_setRF_DimmerLights
 11907 ;;		_setSw_Status
 11908 ;;		_setTxData
 11909 ;; This function is called by:
 11910 ;;		_DelayOff_Main
 11911 ;; This function uses a non-reentrant model
 11912 ;;
 11913                           
 11914                           
 11915                           ;psect for function _DlyOff_Main
 11916  0B3F                     _DlyOff_Main:	
 11917                           
 11918                           ;incstack = 0
 11919                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11920                           ;DlyOff_Main@sw stored from wreg
 11921  0B3F  0020               	movlb	0	; select bank0
 11922  0B40  00E4               	movwf	DlyOff_Main@sw
 11923                           
 11924                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 11925  0B41  0864               	movf	DlyOff_Main@sw,w
 11926  0B42  3192  2223  318B   	fcall	_DelayOffPointSelect
 11927                           
 11928                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 11929  0B45  0878               	movf	_DelayOff,w
 11930  0B46  0086               	movwf	6
 11931  0B47  0187               	clrf	7
 11932  0B48  1C81               	btfss	1,1
 11933  0B49  0008               	return
 11934                           
 11935                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 11936  0B4A  0878               	movf	_DelayOff,w
 11937  0B4B  0086               	movwf	6
 11938  0B4C  0187               	clrf	7
 11939  0B4D  3001               	movlw	1
 11940  0B4E  0781               	addwf	1,f
 11941  0B4F  3141               	addfsr 1,1
 11942  0B50  1803               	skipnc
 11943  0B51  0A81               	incf	1,f
 11944                           
 11945                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 11946  0B52  0878               	movf	_DelayOff,w
 11947  0B53  0086               	movwf	6
 11948  0B54  0187               	clrf	7
 11949  0B55  3F40               	moviw [0]fsr1
 11950  0B56  0020               	movlb	0	; select bank0
 11951  0B57  00E2               	movwf	??_DlyOff_Main
 11952  0B58  3F41               	moviw [1]fsr1
 11953  0B59  00E3               	movwf	??_DlyOff_Main+1
 11954  0B5A  3016               	movlw	22
 11955  0B5B  0263               	subwf	??_DlyOff_Main+1,w
 11956  0B5C  3012               	movlw	18
 11957  0B5D  1903               	skipnz
 11958  0B5E  0262               	subwf	??_DlyOff_Main,w
 11959  0B5F  1C03               	skipc
 11960  0B60  0008               	return
 11961                           
 11962                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 11963  0B61  0878               	movf	_DelayOff,w
 11964  0B62  0086               	movwf	6
 11965  0B63  0187               	clrf	7
 11966  0B64  3000               	movlw	0
 11967  0B65  3FC0               	movwi [0]fsr1
 11968  0B66  3FC1               	movwi [1]fsr1
 11969                           
 11970                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 11971  0B67  3001               	movlw	1
 11972  0B68  00E2               	movwf	??_DlyOff_Main
 11973  0B69  0878               	movf	_DelayOff,w
 11974  0B6A  0086               	movwf	6
 11975  0B6B  0187               	clrf	7
 11976  0B6C  0862               	movf	??_DlyOff_Main,w
 11977  0B6D  0781               	addwf	1,f
 11978                           
 11979                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 11980  0B6E  0878               	movf	_DelayOff,w
 11981  0B6F  0086               	movwf	6
 11982  0B70  0187               	clrf	7
 11983  0B71  0878               	movf	_DelayOff,w
 11984  0B72  0084               	movwf	4
 11985  0B73  0185               	clrf	5
 11986  0B74  0800               	movf	0,w
 11987  0B75  0201               	subwf	1,w
 11988  0B76  1C03               	skipc
 11989  0B77  0008               	return
 11990                           
 11991                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 11992  0B78  0878               	movf	_DelayOff,w
 11993  0B79  0086               	movwf	6
 11994  0B7A  0187               	clrf	7
 11995  0B7B  0181               	clrf	1
 11996                           
 11997                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 11998  0B7C  0878               	movf	_DelayOff,w
 11999  0B7D  0086               	movwf	6
 12000  0B7E  0187               	clrf	7
 12001  0B7F  1081               	bcf	1,1
 12002                           
 12003                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 12004  0B80  01A2               	clrf	setSw_Status@command
 12005  0B81  0864               	movf	DlyOff_Main@sw,w
 12006  0B82  3191  2113  318B   	fcall	_setSw_Status
 12007                           
 12008                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 12009  0B85  0020               	movlb	0	; select bank0
 12010  0B86  01A2               	clrf	setRFSW_Status@command
 12011  0B87  0864               	movf	DlyOff_Main@sw,w
 12012  0B88  3191  2104  318B   	fcall	_setRFSW_Status
 12013                           
 12014                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 12015  0B8B  0020               	movlb	0	; select bank0
 12016  0B8C  01DD               	clrf	setRF_DimmerLights@on
 12017  0B8D  0864               	movf	DlyOff_Main@sw,w
 12018  0B8E  318B  23AA  318B   	fcall	_setRF_DimmerLights
 12019                           
 12020                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 12021  0B91  0020               	movlb	0	; select bank0
 12022  0B92  01A2               	clrf	setDimmerLights_Trigger@command
 12023  0B93  0AA2               	incf	setDimmerLights_Trigger@command,f
 12024  0B94  0864               	movf	DlyOff_Main@sw,w
 12025  0B95  3191  2150  318B   	fcall	_setDimmerLights_Trigger
 12026                           
 12027                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 12028  0B98  0020               	movlb	0	; select bank0
 12029  0B99  01A2               	clrf	setDimmerLights_Switch@command
 12030  0B9A  0864               	movf	DlyOff_Main@sw,w
 12031  0B9B  3191  2140  318B   	fcall	_setDimmerLights_Switch
 12032                           
 12033                           ;DelayOff_B1.c: 78: setTxData();
 12034  0B9E  3185  258E  318B   	fcall	_setTxData
 12035                           
 12036                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 12037  0BA1  3064               	movlw	100
 12038  0BA2  0020               	movlb	0	; select bank0
 12039  0BA3  00A9               	movwf	setBuz@time
 12040  0BA4  3000               	movlw	0
 12041  0BA5  00AA               	movwf	setBuz@time+1
 12042  0BA6  3001               	movlw	1
 12043  0BA7  3188  20A2         	fcall	_setBuz
 12044  0BA9  0008               	return
 12045  0BAA                     __end_of_DlyOff_Main:	
 12046                           
 12047                           	psect	text73
 12048  058E                     __ptext73:	
 12049 ;; *************** function _setTxData *****************
 12050 ;; Defined at:
 12051 ;;		line 186 in file "../src/RF_Control_B1.c"
 12052 ;; Parameters:    Size  Location     Type
 12053 ;;		None
 12054 ;; Auto vars:     Size  Location     Type
 12055 ;;  i               1    0        unsigned char 
 12056 ;; Return value:  Size  Location     Type
 12057 ;;		None               void
 12058 ;; Registers used:
 12059 ;;		wreg, fsr1l, fsr1h
 12060 ;; Tracked objects:
 12061 ;;		On entry : 0/0
 12062 ;;		On exit  : 0/0
 12063 ;;		Unchanged: 0/0
 12064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12067 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12068 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12069 ;;Total ram usage:        1 bytes
 12070 ;; Hardware stack levels used:    1
 12071 ;; Hardware stack levels required when called:    5
 12072 ;; This function calls:
 12073 ;;		Nothing
 12074 ;; This function is called by:
 12075 ;;		_DlyOff_Main
 12076 ;;		_setDimmerLights_Adj
 12077 ;;		_setControl_Lights_Table
 12078 ;;		_setRFSW_Control
 12079 ;;		_setRFSW_AdjControl
 12080 ;;		_Sw_DimmerOnFunc
 12081 ;;		_Sw_DimmerOffFunc
 12082 ;; This function uses a non-reentrant model
 12083 ;;
 12084                           
 12085                           
 12086                           ;psect for function _setTxData
 12087  058E                     _setTxData:	
 12088                           
 12089                           ;RF_Control_B1.c: 187: char i;
 12090                           ;RF_Control_B1.c: 188: if (RF1.Enable == 1) {
 12091                           
 12092                           ;incstack = 0
 12093                           ; Regs used in _setTxData: [wregfsr1]
 12094  058E  0021               	movlb	1	; select bank1
 12095  058F  1C3C               	btfss	_RF1^(0+128),0
 12096  0590  0008               	return
 12097                           
 12098                           ;RF_Control_B1.c: 190: RF1.TransceiveGO = 1;
 12099  0591  153C               	bsf	_RF1^(0+128),2
 12100                           
 12101                           ;RF_Control_B1.c: 191: RF1.RunTime = 20;
 12102  0592  3014               	movlw	20
 12103  0593  00C3               	movwf	(_RF1^(0+128)+7)
 12104  0594  3000               	movlw	0
 12105  0595  00C4               	movwf	(_RF1^(0+128)+8)
 12106                           
 12107                           ;RF_Control_B1.c: 201: RF_Data[0] = 0x63;
 12108  0596  3063               	movlw	99
 12109  0597  0020               	movlb	0	; select bank0
 12110  0598  00A0               	movwf	??_setTxData
 12111  0599  0820               	movf	??_setTxData,w
 12112  059A  0022               	movlb	2	; select bank2
 12113  059B  00A0               	movwf	_RF_Data^(0+256)
 12114                           
 12115                           ;RF_Control_B1.c: 202: RF_Data[1] = 0x02;
 12116  059C  3002               	movlw	2
 12117  059D  0020               	movlb	0	; select bank0
 12118  059E  00A0               	movwf	??_setTxData
 12119  059F  0820               	movf	??_setTxData,w
 12120  05A0  0022               	movlb	2	; select bank2
 12121  05A1  00A1               	movwf	(_RF_Data^(0+256)+1)
 12122                           
 12123                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 12124  05A2  0020               	movlb	0	; select bank0
 12125  05A3  086E               	movf	_product,w
 12126  05A4  0086               	movwf	6
 12127  05A5  3001               	movlw	1	; select bank2/3
 12128  05A6  0087               	movwf	7
 12129  05A7  3001               	movlw	1	; select bank2/3
 12130  05A8  3F42               	moviw [2]fsr1
 12131  05A9  0022               	movlb	2	; select bank2
 12132  05AA  00A2               	movwf	(_RF_Data^(0+256)+2)
 12133                           
 12134                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 12135  05AB  0020               	movlb	0	; select bank0
 12136  05AC  086E               	movf	_product,w
 12137  05AD  0086               	movwf	6
 12138  05AE  3001               	movlw	1	; select bank2/3
 12139  05AF  0087               	movwf	7
 12140  05B0  3001               	movlw	1	; select bank2/3
 12141  05B1  3F43               	moviw [3]fsr1
 12142  05B2  0022               	movlb	2	; select bank2
 12143  05B3  00A3               	movwf	(_RF_Data^(0+256)+3)
 12144                           
 12145                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 12146  05B4  0020               	movlb	0	; select bank0
 12147  05B5  086E               	movf	_product,w
 12148  05B6  0086               	movwf	6
 12149  05B7  3001               	movlw	1	; select bank2/3
 12150  05B8  0087               	movwf	7
 12151  05B9  3001               	movlw	1	; select bank2/3
 12152  05BA  3F44               	moviw [4]fsr1
 12153  05BB  0022               	movlb	2	; select bank2
 12154  05BC  00A4               	movwf	(_RF_Data^(0+256)+4)
 12155                           
 12156                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 12157  05BD  0020               	movlb	0	; select bank0
 12158  05BE  086E               	movf	_product,w
 12159  05BF  0086               	movwf	6
 12160  05C0  3001               	movlw	1	; select bank2/3
 12161  05C1  0087               	movwf	7
 12162  05C2  3001               	movlw	1	; select bank2/3
 12163  05C3  3F45               	moviw [5]fsr1
 12164  05C4  0022               	movlb	2	; select bank2
 12165  05C5  00A5               	movwf	(_RF_Data^(0+256)+5)
 12166                           
 12167                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 12168  05C6  0020               	movlb	0	; select bank0
 12169  05C7  086E               	movf	_product,w
 12170  05C8  0086               	movwf	6
 12171  05C9  3001               	movlw	1	; select bank2/3
 12172  05CA  0087               	movwf	7
 12173  05CB  3001               	movlw	1	; select bank2/3
 12174  05CC  3F46               	moviw [6]fsr1
 12175  05CD  0022               	movlb	2	; select bank2
 12176  05CE  00A6               	movwf	(_RF_Data^(0+256)+6)
 12177                           
 12178                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 12179  05CF  0020               	movlb	0	; select bank0
 12180  05D0  086E               	movf	_product,w
 12181  05D1  0086               	movwf	6
 12182  05D2  3001               	movlw	1	; select bank2/3
 12183  05D3  0087               	movwf	7
 12184  05D4  3001               	movlw	1	; select bank2/3
 12185  05D5  3F47               	moviw [7]fsr1
 12186  05D6  0022               	movlb	2	; select bank2
 12187  05D7  00A7               	movwf	(_RF_Data^(0+256)+7)
 12188                           
 12189                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 12190  05D8  0020               	movlb	0	; select bank0
 12191  05D9  086E               	movf	_product,w
 12192  05DA  0086               	movwf	6
 12193  05DB  3001               	movlw	1	; select bank2/3
 12194  05DC  0087               	movwf	7
 12195  05DD  3001               	movlw	1	; select bank2/3
 12196  05DE  3F48               	moviw [8]fsr1
 12197  05DF  0022               	movlb	2	; select bank2
 12198  05E0  00A8               	movwf	(_RF_Data^(0+256)+8)
 12199                           
 12200                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 12201  05E1  0020               	movlb	0	; select bank0
 12202  05E2  086E               	movf	_product,w
 12203  05E3  0086               	movwf	6
 12204  05E4  3001               	movlw	1	; select bank2/3
 12205  05E5  0087               	movwf	7
 12206  05E6  3001               	movlw	1	; select bank2/3
 12207  05E7  3F49               	moviw [9]fsr1
 12208  05E8  0022               	movlb	2	; select bank2
 12209  05E9  00A9               	movwf	(_RF_Data^(0+256)+9)
 12210                           
 12211                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 12212  05EA  0020               	movlb	0	; select bank0
 12213  05EB  086E               	movf	_product,w
 12214  05EC  0086               	movwf	6
 12215  05ED  3001               	movlw	1	; select bank2/3
 12216  05EE  0087               	movwf	7
 12217  05EF  3001               	movlw	1	; select bank2/3
 12218  05F0  3F4A               	moviw [10]fsr1
 12219  05F1  0022               	movlb	2	; select bank2
 12220  05F2  00AA               	movwf	(_RF_Data^(0+256)+10)
 12221                           
 12222                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 12223  05F3  0020               	movlb	0	; select bank0
 12224  05F4  086E               	movf	_product,w
 12225  05F5  0086               	movwf	6
 12226  05F6  3001               	movlw	1	; select bank2/3
 12227  05F7  0087               	movwf	7
 12228  05F8  3001               	movlw	1	; select bank2/3
 12229  05F9  3F4B               	moviw [11]fsr1
 12230  05FA  0022               	movlb	2	; select bank2
 12231  05FB  00AB               	movwf	(_RF_Data^(0+256)+11)
 12232                           
 12233                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 12234  05FC  0020               	movlb	0	; select bank0
 12235  05FD  086E               	movf	_product,w
 12236  05FE  0086               	movwf	6
 12237  05FF  3001               	movlw	1	; select bank2/3
 12238  0600  0087               	movwf	7
 12239  0601  3001               	movlw	1	; select bank2/3
 12240  0602  3F4C               	moviw [12]fsr1
 12241  0603  0022               	movlb	2	; select bank2
 12242  0604  00AC               	movwf	(_RF_Data^(0+256)+12)
 12243                           
 12244                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 12245  0605  0020               	movlb	0	; select bank0
 12246  0606  086E               	movf	_product,w
 12247  0607  0086               	movwf	6
 12248  0608  3001               	movlw	1	; select bank2/3
 12249  0609  0087               	movwf	7
 12250  060A  3001               	movlw	1	; select bank2/3
 12251  060B  3F4D               	moviw [13]fsr1
 12252  060C  0022               	movlb	2	; select bank2
 12253  060D  00AD               	movwf	(_RF_Data^(0+256)+13)
 12254                           
 12255                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 12256  060E  0020               	movlb	0	; select bank0
 12257  060F  086E               	movf	_product,w
 12258  0610  0086               	movwf	6
 12259  0611  3001               	movlw	1	; select bank2/3
 12260  0612  0087               	movwf	7
 12261  0613  3001               	movlw	1	; select bank2/3
 12262  0614  3F4E               	moviw [14]fsr1
 12263  0615  0022               	movlb	2	; select bank2
 12264  0616  00AE               	movwf	(_RF_Data^(0+256)+14)
 12265                           
 12266                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 12267  0617  0020               	movlb	0	; select bank0
 12268  0618  086E               	movf	_product,w
 12269  0619  0086               	movwf	6
 12270  061A  3001               	movlw	1	; select bank2/3
 12271  061B  0087               	movwf	7
 12272  061C  3001               	movlw	1	; select bank2/3
 12273  061D  3F4F               	moviw [15]fsr1
 12274  061E  0022               	movlb	2	; select bank2
 12275  061F  00AF               	movwf	(_RF_Data^(0+256)+15)
 12276                           
 12277                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 12278  0620  0020               	movlb	0	; select bank0
 12279  0621  086E               	movf	_product,w
 12280  0622  0086               	movwf	6
 12281  0623  3001               	movlw	1	; select bank2/3
 12282  0624  0087               	movwf	7
 12283  0625  3001               	movlw	1	; select bank2/3
 12284  0626  3F50               	moviw [16]fsr1
 12285  0627  0022               	movlb	2	; select bank2
 12286  0628  00B0               	movwf	(_RF_Data^(0+256)+16)
 12287                           
 12288                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 12289  0629  0020               	movlb	0	; select bank0
 12290  062A  086E               	movf	_product,w
 12291  062B  0086               	movwf	6
 12292  062C  3001               	movlw	1	; select bank2/3
 12293  062D  0087               	movwf	7
 12294  062E  3001               	movlw	1	; select bank2/3
 12295  062F  3F51               	moviw [17]fsr1
 12296  0630  0022               	movlb	2	; select bank2
 12297  0631  00B1               	movwf	(_RF_Data^(0+256)+17)
 12298                           
 12299                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 12300  0632  0020               	movlb	0	; select bank0
 12301  0633  086E               	movf	_product,w
 12302  0634  0086               	movwf	6
 12303  0635  3001               	movlw	1	; select bank2/3
 12304  0636  0087               	movwf	7
 12305  0637  3001               	movlw	1	; select bank2/3
 12306  0638  3F52               	moviw [18]fsr1
 12307  0639  0022               	movlb	2	; select bank2
 12308  063A  00B2               	movwf	(_RF_Data^(0+256)+18)
 12309                           
 12310                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 12311  063B  0020               	movlb	0	; select bank0
 12312  063C  086E               	movf	_product,w
 12313  063D  0086               	movwf	6
 12314  063E  3001               	movlw	1	; select bank2/3
 12315  063F  0087               	movwf	7
 12316  0640  3001               	movlw	1	; select bank2/3
 12317  0641  3F53               	moviw [19]fsr1
 12318  0642  0022               	movlb	2	; select bank2
 12319  0643  00B3               	movwf	(_RF_Data^(0+256)+19)
 12320                           
 12321                           ;RF_Control_B1.c: 221: RF_Data[20] = 210;
 12322  0644  30D2               	movlw	210
 12323  0645  0020               	movlb	0	; select bank0
 12324  0646  00A0               	movwf	??_setTxData
 12325  0647  0820               	movf	??_setTxData,w
 12326  0648  0022               	movlb	2	; select bank2
 12327  0649  00B4               	movwf	(_RF_Data^(0+256)+20)
 12328  064A  0008               	return
 12329  064B                     __end_of_setTxData:	
 12330                           
 12331                           	psect	text74
 12332  1113                     __ptext74:	
 12333 ;; *************** function _setSw_Status *****************
 12334 ;; Defined at:
 12335 ;;		line 111 in file "../src/Switch_B1.c"
 12336 ;; Parameters:    Size  Location     Type
 12337 ;;  sw              1    wreg     unsigned char 
 12338 ;;  command         1    2[BANK0 ] unsigned char 
 12339 ;; Auto vars:     Size  Location     Type
 12340 ;;  sw              1    3[BANK0 ] unsigned char 
 12341 ;; Return value:  Size  Location     Type
 12342 ;;		None               void
 12343 ;; Registers used:
 12344 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12345 ;; Tracked objects:
 12346 ;;		On entry : 0/0
 12347 ;;		On exit  : 0/0
 12348 ;;		Unchanged: 0/0
 12349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12350 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12351 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12353 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12354 ;;Total ram usage:        2 bytes
 12355 ;; Hardware stack levels used:    1
 12356 ;; Hardware stack levels required when called:    6
 12357 ;; This function calls:
 12358 ;;		_SwPointSelect
 12359 ;; This function is called by:
 12360 ;;		_DlyOff_Main
 12361 ;;		_setControl_Lights_Table
 12362 ;;		_setRFSW_Control
 12363 ;;		_setDimmerLights_ERROR
 12364 ;; This function uses a non-reentrant model
 12365 ;;
 12366                           
 12367                           
 12368                           ;psect for function _setSw_Status
 12369  1113                     _setSw_Status:	
 12370                           
 12371                           ;incstack = 0
 12372                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12373                           ;setSw_Status@sw stored from wreg
 12374  1113  0020               	movlb	0	; select bank0
 12375  1114  00A3               	movwf	setSw_Status@sw
 12376                           
 12377                           ;Switch_B1.c: 112: SwPointSelect(sw);
 12378  1115  0823               	movf	setSw_Status@sw,w
 12379  1116  3192  2237         	fcall	_SwPointSelect
 12380                           
 12381                           ;Switch_B1.c: 113: Sw->Status = command;
 12382  1118  0020               	movlb	0	; select bank0
 12383  1119  086F               	movf	_Sw,w
 12384  111A  0086               	movwf	6
 12385  111B  3001               	movlw	1	; select bank2/3
 12386  111C  0087               	movwf	7
 12387  111D  0822               	movf	setSw_Status@command,w
 12388  111E  1301               	bcf	1,6
 12389  111F  1D03               	skipz
 12390  1120  1701               	bsf	1,6
 12391  1121  0008               	return
 12392  1122                     __end_of_setSw_Status:	
 12393                           
 12394                           	psect	text75
 12395  1237                     __ptext75:	
 12396 ;; *************** function _SwPointSelect *****************
 12397 ;; Defined at:
 12398 ;;		line 21 in file "../src/Switch_B1.c"
 12399 ;; Parameters:    Size  Location     Type
 12400 ;;  sw              1    wreg     unsigned char 
 12401 ;; Auto vars:     Size  Location     Type
 12402 ;;  sw              1    1[BANK0 ] unsigned char 
 12403 ;; Return value:  Size  Location     Type
 12404 ;;		None               void
 12405 ;; Registers used:
 12406 ;;		wreg
 12407 ;; Tracked objects:
 12408 ;;		On entry : 0/0
 12409 ;;		On exit  : 0/0
 12410 ;;		Unchanged: 0/0
 12411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12413 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12414 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12415 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12416 ;;Total ram usage:        2 bytes
 12417 ;; Hardware stack levels used:    1
 12418 ;; Hardware stack levels required when called:    5
 12419 ;; This function calls:
 12420 ;;		Nothing
 12421 ;; This function is called by:
 12422 ;;		_setSw_Enable
 12423 ;;		_setSw_Status
 12424 ;;		_setSw_Main
 12425 ;;		_Sw_Detect
 12426 ;; This function uses a non-reentrant model
 12427 ;;
 12428                           
 12429                           
 12430                           ;psect for function _SwPointSelect
 12431  1237                     _SwPointSelect:	
 12432                           
 12433                           ;incstack = 0
 12434                           ; Regs used in _SwPointSelect: [wreg]
 12435                           ;SwPointSelect@sw stored from wreg
 12436  1237  0020               	movlb	0	; select bank0
 12437  1238  00A1               	movwf	SwPointSelect@sw
 12438                           
 12439                           ;Switch_B1.c: 24: if (sw == 1) {
 12440  1239  0821               	movf	SwPointSelect@sw,w
 12441  123A  3A01               	xorlw	1
 12442  123B  1D03               	skipz
 12443  123C  2A42               	goto	l5569
 12444                           
 12445                           ;Switch_B1.c: 25: Sw = &Sw1;
 12446  123D  3053               	movlw	_Sw1& (0+255)
 12447  123E  00A0               	movwf	??_SwPointSelect
 12448  123F  0820               	movf	??_SwPointSelect,w
 12449  1240  00EF               	movwf	_Sw
 12450                           
 12451                           ;Switch_B1.c: 26: }
 12452  1241  0008               	return
 12453  1242                     l5569:	
 12454                           
 12455                           ;Switch_B1.c: 29: else if (sw == 2) {
 12456  1242  0821               	movf	SwPointSelect@sw,w
 12457  1243  3A02               	xorlw	2
 12458  1244  1D03               	skipz
 12459  1245  0008               	return
 12460                           
 12461                           ;Switch_B1.c: 30: Sw = &Sw2;
 12462  1246  305C               	movlw	_Sw2& (0+255)
 12463  1247  00A0               	movwf	??_SwPointSelect
 12464  1248  0820               	movf	??_SwPointSelect,w
 12465  1249  00EF               	movwf	_Sw
 12466  124A  0008               	return
 12467  124B                     __end_of_SwPointSelect:	
 12468                           
 12469                           	psect	text76
 12470  0BAA                     __ptext76:	
 12471 ;; *************** function _setRF_DimmerLights *****************
 12472 ;; Defined at:
 12473 ;;		line 452 in file "../src/RF_Control_B1.c"
 12474 ;; Parameters:    Size  Location     Type
 12475 ;;  lights          1    wreg     unsigned char 
 12476 ;;  on              1   61[BANK0 ] unsigned char 
 12477 ;; Auto vars:     Size  Location     Type
 12478 ;;  lights          1   65[BANK0 ] unsigned char 
 12479 ;;  status          1   64[BANK0 ] unsigned char 
 12480 ;; Return value:  Size  Location     Type
 12481 ;;		None               void
 12482 ;; Registers used:
 12483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12484 ;; Tracked objects:
 12485 ;;		On entry : 0/0
 12486 ;;		On exit  : 0/0
 12487 ;;		Unchanged: 0/0
 12488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12489 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12490 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12491 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12492 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12493 ;;Total ram usage:        5 bytes
 12494 ;; Hardware stack levels used:    1
 12495 ;; Hardware stack levels required when called:    8
 12496 ;; This function calls:
 12497 ;;		_setPercentValue
 12498 ;; This function is called by:
 12499 ;;		_DlyOff_Main
 12500 ;;		_setDimmerLights_Adj
 12501 ;;		_setRFSW_Control
 12502 ;;		_Sw_DimmerOnFunc
 12503 ;;		_Sw_DimmerOffFunc
 12504 ;; This function uses a non-reentrant model
 12505 ;;
 12506                           
 12507                           
 12508                           ;psect for function _setRF_DimmerLights
 12509  0BAA                     _setRF_DimmerLights:	
 12510                           
 12511                           ;incstack = 0
 12512                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12513                           ;setRF_DimmerLights@lights stored from wreg
 12514  0BAA  0020               	movlb	0	; select bank0
 12515  0BAB  00E1               	movwf	setRF_DimmerLights@lights
 12516                           
 12517                           ;RF_Control_B1.c: 453: char status;
 12518                           ;RF_Control_B1.c: 454: status = 1;
 12519  0BAC  01E0               	clrf	setRF_DimmerLights@status
 12520  0BAD  0AE0               	incf	setRF_DimmerLights@status,f
 12521                           
 12522                           ;RF_Control_B1.c: 455: status <<= (lights - 1);
 12523  0BAE  0861               	movf	setRF_DimmerLights@lights,w
 12524  0BAF  3EFF               	addlw	-1
 12525  0BB0  0A89               	incf	9,f
 12526  0BB1  2BB4               	goto	u4450
 12527  0BB2                     u4455:	
 12528  0BB2  1003               	clrc
 12529  0BB3  0DE0               	rlf	setRF_DimmerLights@status,f
 12530  0BB4                     u4450:	
 12531  0BB4  3EFF               	addlw	-1
 12532  0BB5  1D03               	skipz
 12533  0BB6  2BB2               	goto	u4455
 12534                           
 12535                           ;RF_Control_B1.c: 456: product->Data[11]=lights;
 12536  0BB7  0861               	movf	setRF_DimmerLights@lights,w
 12537  0BB8  00DE               	movwf	??_setRF_DimmerLights
 12538  0BB9  086E               	movf	_product,w
 12539  0BBA  3E0B               	addlw	11
 12540  0BBB  0086               	movwf	6
 12541  0BBC  3001               	movlw	1	; select bank2/3
 12542  0BBD  0087               	movwf	7
 12543  0BBE  085E               	movf	??_setRF_DimmerLights,w
 12544  0BBF  0081               	movwf	1
 12545                           
 12546                           ;RF_Control_B1.c: 459: product->Data[(20 + lights)]=setPercentValue(((char)(90*0.8)));
 12547  0BC0  3048               	movlw	72
 12548  0BC1  3197  2770  318B   	fcall	_setPercentValue
 12549  0BC4  0020               	movlb	0	; select bank0
 12550  0BC5  00DE               	movwf	??_setRF_DimmerLights
 12551  0BC6  0861               	movf	setRF_DimmerLights@lights,w
 12552  0BC7  3E14               	addlw	20
 12553  0BC8  076E               	addwf	_product,w
 12554  0BC9  00DF               	movwf	??_setRF_DimmerLights+1
 12555  0BCA  085F               	movf	??_setRF_DimmerLights+1,w
 12556  0BCB  0086               	movwf	6
 12557  0BCC  3001               	movlw	1	; select bank2/3
 12558  0BCD  0087               	movwf	7
 12559  0BCE  085E               	movf	??_setRF_DimmerLights,w
 12560  0BCF  0081               	movwf	1
 12561                           
 12562                           ;RF_Control_B1.c: 462: product->Data[9]=product->Data[20 + lights];
 12563  0BD0  0861               	movf	setRF_DimmerLights@lights,w
 12564  0BD1  3E14               	addlw	20
 12565  0BD2  076E               	addwf	_product,w
 12566  0BD3  00DE               	movwf	??_setRF_DimmerLights
 12567  0BD4  085E               	movf	??_setRF_DimmerLights,w
 12568  0BD5  0086               	movwf	6
 12569  0BD6  3001               	movlw	1	; select bank2/3
 12570  0BD7  0087               	movwf	7
 12571  0BD8  0801               	movf	1,w
 12572  0BD9  00DF               	movwf	??_setRF_DimmerLights+1
 12573  0BDA  086E               	movf	_product,w
 12574  0BDB  3E09               	addlw	9
 12575  0BDC  0086               	movwf	6
 12576  0BDD  3001               	movlw	1	; select bank2/3
 12577  0BDE  0087               	movwf	7
 12578  0BDF  085F               	movf	??_setRF_DimmerLights+1,w
 12579  0BE0  0081               	movwf	1
 12580                           
 12581                           ;RF_Control_B1.c: 463: product->Data[17]=product->Data[26 + lights];
 12582  0BE1  0861               	movf	setRF_DimmerLights@lights,w
 12583  0BE2  3E1A               	addlw	26
 12584  0BE3  076E               	addwf	_product,w
 12585  0BE4  00DE               	movwf	??_setRF_DimmerLights
 12586  0BE5  085E               	movf	??_setRF_DimmerLights,w
 12587  0BE6  0086               	movwf	6
 12588  0BE7  3001               	movlw	1	; select bank2/3
 12589  0BE8  0087               	movwf	7
 12590  0BE9  0801               	movf	1,w
 12591  0BEA  00DF               	movwf	??_setRF_DimmerLights+1
 12592  0BEB  086E               	movf	_product,w
 12593  0BEC  3E11               	addlw	17
 12594  0BED  0086               	movwf	6
 12595  0BEE  3001               	movlw	1	; select bank2/3
 12596  0BEF  0087               	movwf	7
 12597  0BF0  085F               	movf	??_setRF_DimmerLights+1,w
 12598  0BF1  0081               	movwf	1
 12599                           
 12600                           ;RF_Control_B1.c: 464: if (on == 1) {
 12601  0BF2  085D               	movf	setRF_DimmerLights@on,w
 12602  0BF3  3A01               	xorlw	1
 12603  0BF4  1D03               	skipz
 12604  0BF5  2C06               	goto	l5665
 12605                           
 12606                           ;RF_Control_B1.c: 465: product->Data[15]=(product->Data[15] | status);
 12607  0BF6  086E               	movf	_product,w
 12608  0BF7  3E0F               	addlw	15
 12609  0BF8  0086               	movwf	6
 12610  0BF9  3001               	movlw	1	; select bank2/3
 12611  0BFA  0087               	movwf	7
 12612  0BFB  0801               	movf	1,w
 12613  0BFC  0460               	iorwf	setRF_DimmerLights@status,w
 12614  0BFD  00DE               	movwf	??_setRF_DimmerLights
 12615  0BFE  086E               	movf	_product,w
 12616  0BFF  3E0F               	addlw	15
 12617  0C00  0086               	movwf	6
 12618  0C01  3001               	movlw	1	; select bank2/3
 12619  0C02  0087               	movwf	7
 12620  0C03  085E               	movf	??_setRF_DimmerLights,w
 12621  0C04  0081               	movwf	1
 12622                           
 12623                           ;RF_Control_B1.c: 466: } else {
 12624  0C05  0008               	return
 12625  0C06                     l5665:	
 12626                           
 12627                           ;RF_Control_B1.c: 467: product->Data[15]=(product->Data[15]&(~status));
 12628  0C06  086E               	movf	_product,w
 12629  0C07  3E0F               	addlw	15
 12630  0C08  0086               	movwf	6
 12631  0C09  3001               	movlw	1	; select bank2/3
 12632  0C0A  0087               	movwf	7
 12633  0C0B  0960               	comf	setRF_DimmerLights@status,w
 12634  0C0C  0501               	andwf	1,w
 12635  0C0D  00DE               	movwf	??_setRF_DimmerLights
 12636  0C0E  086E               	movf	_product,w
 12637  0C0F  3E0F               	addlw	15
 12638  0C10  0086               	movwf	6
 12639  0C11  3001               	movlw	1	; select bank2/3
 12640  0C12  0087               	movwf	7
 12641  0C13  085E               	movf	??_setRF_DimmerLights,w
 12642  0C14  0081               	movwf	1
 12643  0C15  0008               	return
 12644  0C16                     __end_of_setRF_DimmerLights:	
 12645                           
 12646                           	psect	text77
 12647  1770                     __ptext77:	
 12648 ;; *************** function _setPercentValue *****************
 12649 ;; Defined at:
 12650 ;;		line 779 in file "../src/Dimmer_B1.c"
 12651 ;; Parameters:    Size  Location     Type
 12652 ;;  value           1    wreg     unsigned char 
 12653 ;; Auto vars:     Size  Location     Type
 12654 ;;  value           1   57[BANK0 ] unsigned char 
 12655 ;;  i               3   58[BANK0 ] float 
 12656 ;; Return value:  Size  Location     Type
 12657 ;;                  1    wreg      unsigned char 
 12658 ;; Registers used:
 12659 ;;		wreg, status,2, status,0, pclath, cstack
 12660 ;; Tracked objects:
 12661 ;;		On entry : 0/0
 12662 ;;		On exit  : 0/0
 12663 ;;		Unchanged: 0/0
 12664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12666 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12668 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12669 ;;Total ram usage:        4 bytes
 12670 ;; Hardware stack levels used:    1
 12671 ;; Hardware stack levels required when called:    7
 12672 ;; This function calls:
 12673 ;;		___awtoft
 12674 ;;		___ftdiv
 12675 ;;		___fttol
 12676 ;; This function is called by:
 12677 ;;		_Flash_Memory_Initialization
 12678 ;;		_setRF_DimmerLights
 12679 ;; This function uses a non-reentrant model
 12680 ;;
 12681                           
 12682                           
 12683                           ;psect for function _setPercentValue
 12684  1770                     _setPercentValue:	
 12685                           
 12686                           ;incstack = 0
 12687                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 12688                           ;setPercentValue@value stored from wreg
 12689  1770  0020               	movlb	0	; select bank0
 12690  1771  00D9               	movwf	setPercentValue@value
 12691                           
 12692                           ;Dimmer_B1.c: 787: float i = ((char)(90*0.8)) - ((char)(25*0.8));
 12693  1772  3000               	movlw	0
 12694  1773  00DA               	movwf	setPercentValue@i
 12695  1774  3050               	movlw	80
 12696  1775  00DB               	movwf	setPercentValue@i+1
 12697  1776  3042               	movlw	66
 12698  1777  00DC               	movwf	setPercentValue@i+2
 12699                           
 12700                           ;Dimmer_B1.c: 788: i /= 100;
 12701  1778  3000               	movlw	0
 12702  1779  00AE               	movwf	___ftdiv@f2
 12703  177A  30C8               	movlw	200
 12704  177B  00AF               	movwf	___ftdiv@f2+1
 12705  177C  3042               	movlw	66
 12706  177D  00B0               	movwf	___ftdiv@f2+2
 12707  177E  085A               	movf	setPercentValue@i,w
 12708  177F  00B1               	movwf	___ftdiv@f1
 12709  1780  085B               	movf	setPercentValue@i+1,w
 12710  1781  00B2               	movwf	___ftdiv@f1+1
 12711  1782  085C               	movf	setPercentValue@i+2,w
 12712  1783  00B3               	movwf	___ftdiv@f1+2
 12713  1784  3186  26FF  3197   	fcall	___ftdiv
 12714  1787  0020               	movlb	0	; select bank0
 12715  1788  082E               	movf	?___ftdiv,w
 12716  1789  00DA               	movwf	setPercentValue@i
 12717  178A  082F               	movf	?___ftdiv+1,w
 12718  178B  00DB               	movwf	setPercentValue@i+1
 12719  178C  0830               	movf	?___ftdiv+2,w
 12720  178D  00DC               	movwf	setPercentValue@i+2
 12721                           
 12722                           ;Dimmer_B1.c: 790: return (100 - (char) ((value - ((char)(90*0.8))) / i));
 12723  178E  0859               	movf	setPercentValue@value,w
 12724  178F  3EB8               	addlw	184
 12725  1790  00A8               	movwf	___awtoft@c
 12726  1791  30FF               	movlw	255
 12727  1792  1803               	skipnc
 12728  1793  3000               	movlw	0
 12729  1794  00A9               	movwf	___awtoft@c+1
 12730  1795  3193  23FC  3197   	fcall	___awtoft
 12731  1798  0020               	movlb	0	; select bank0
 12732  1799  0828               	movf	?___awtoft,w
 12733  179A  00B1               	movwf	___ftdiv@f1
 12734  179B  0829               	movf	?___awtoft+1,w
 12735  179C  00B2               	movwf	___ftdiv@f1+1
 12736  179D  082A               	movf	?___awtoft+2,w
 12737  179E  00B3               	movwf	___ftdiv@f1+2
 12738  179F  085A               	movf	setPercentValue@i,w
 12739  17A0  00AE               	movwf	___ftdiv@f2
 12740  17A1  085B               	movf	setPercentValue@i+1,w
 12741  17A2  00AF               	movwf	___ftdiv@f2+1
 12742  17A3  085C               	movf	setPercentValue@i+2,w
 12743  17A4  00B0               	movwf	___ftdiv@f2+2
 12744  17A5  3186  26FF  3197   	fcall	___ftdiv
 12745  17A8  0020               	movlb	0	; select bank0
 12746  17A9  082E               	movf	?___ftdiv,w
 12747  17AA  00CB               	movwf	___fttol@f1
 12748  17AB  082F               	movf	?___ftdiv+1,w
 12749  17AC  00CC               	movwf	___fttol@f1+1
 12750  17AD  0830               	movf	?___ftdiv+2,w
 12751  17AE  00CD               	movwf	___fttol@f1+2
 12752  17AF  318E  265E         	fcall	___fttol
 12753  17B1  0020               	movlb	0	; select bank0
 12754  17B2  034B               	decf	?___fttol,w
 12755  17B3  3AFF               	xorlw	255
 12756  17B4  3E64               	addlw	100
 12757  17B5  0008               	return
 12758  17B6                     __end_of_setPercentValue:	
 12759                           
 12760                           	psect	text78
 12761  0E5E                     __ptext78:	
 12762 ;; *************** function ___fttol *****************
 12763 ;; Defined at:
 12764 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 12765 ;; Parameters:    Size  Location     Type
 12766 ;;  f1              3   43[BANK0 ] float 
 12767 ;; Auto vars:     Size  Location     Type
 12768 ;;  lval            4   52[BANK0 ] unsigned long 
 12769 ;;  exp1            1   56[BANK0 ] unsigned char 
 12770 ;;  sign1           1   51[BANK0 ] unsigned char 
 12771 ;; Return value:  Size  Location     Type
 12772 ;;                  4   43[BANK0 ] long 
 12773 ;; Registers used:
 12774 ;;		wreg, status,2, status,0
 12775 ;; Tracked objects:
 12776 ;;		On entry : 0/0
 12777 ;;		On exit  : 0/0
 12778 ;;		Unchanged: 0/0
 12779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12780 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12781 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12782 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12783 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12784 ;;Total ram usage:       14 bytes
 12785 ;; Hardware stack levels used:    1
 12786 ;; Hardware stack levels required when called:    5
 12787 ;; This function calls:
 12788 ;;		Nothing
 12789 ;; This function is called by:
 12790 ;;		_getPercentValue
 12791 ;;		_setPercentValue
 12792 ;; This function uses a non-reentrant model
 12793 ;;
 12794                           
 12795                           
 12796                           ;psect for function ___fttol
 12797  0E5E                     ___fttol:	
 12798                           
 12799                           ;incstack = 0
 12800                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 12801  0E5E  0020               	movlb	0	; select bank0
 12802  0E5F  084B               	movf	___fttol@f1,w
 12803  0E60  00CF               	movwf	??___fttol
 12804  0E61  084C               	movf	___fttol@f1+1,w
 12805  0E62  00D0               	movwf	??___fttol+1
 12806  0E63  084D               	movf	___fttol@f1+2,w
 12807  0E64  00D1               	movwf	??___fttol+2
 12808  0E65  1003               	clrc
 12809  0E66  0D50               	rlf	??___fttol+1,w
 12810  0E67  0D51               	rlf	??___fttol+2,w
 12811  0E68  00D2               	movwf	??___fttol+3
 12812  0E69  0852               	movf	??___fttol+3,w
 12813  0E6A  00D8               	movwf	___fttol@exp1
 12814  0E6B  08D8               	movf	___fttol@exp1,f
 12815  0E6C  1D03               	skipz
 12816  0E6D  2E77               	goto	l5445
 12817  0E6E  3000               	movlw	0
 12818  0E6F  00CE               	movwf	?___fttol+3
 12819  0E70  3000               	movlw	0
 12820  0E71  00CD               	movwf	?___fttol+2
 12821  0E72  3000               	movlw	0
 12822  0E73  00CC               	movwf	?___fttol+1
 12823  0E74  3000               	movlw	0
 12824  0E75  00CB               	movwf	?___fttol
 12825  0E76  0008               	return
 12826  0E77                     l5445:	
 12827  0E77  084B               	movf	___fttol@f1,w
 12828  0E78  00CF               	movwf	??___fttol
 12829  0E79  084C               	movf	___fttol@f1+1,w
 12830  0E7A  00D0               	movwf	??___fttol+1
 12831  0E7B  084D               	movf	___fttol@f1+2,w
 12832  0E7C  00D1               	movwf	??___fttol+2
 12833  0E7D  3017               	movlw	23
 12834  0E7E                     u4095:	
 12835  0E7E  36D1               	lsrf	??___fttol+2,f
 12836  0E7F  0CD0               	rrf	??___fttol+1,f
 12837  0E80  0CCF               	rrf	??___fttol,f
 12838  0E81  0B89               	decfsz	9,f
 12839  0E82  2E7E               	goto	u4095
 12840  0E83  084F               	movf	??___fttol,w
 12841  0E84  00D2               	movwf	??___fttol+3
 12842  0E85  0852               	movf	??___fttol+3,w
 12843  0E86  00D3               	movwf	___fttol@sign1
 12844  0E87  17CC               	bsf	___fttol@f1+1,7
 12845  0E88  30FF               	movlw	255
 12846  0E89  05CB               	andwf	___fttol@f1,f
 12847  0E8A  30FF               	movlw	255
 12848  0E8B  05CC               	andwf	___fttol@f1+1,f
 12849  0E8C  3000               	movlw	0
 12850  0E8D  05CD               	andwf	___fttol@f1+2,f
 12851  0E8E  084B               	movf	___fttol@f1,w
 12852  0E8F  00D4               	movwf	___fttol@lval
 12853  0E90  084C               	movf	___fttol@f1+1,w
 12854  0E91  00D5               	movwf	___fttol@lval+1
 12855  0E92  084D               	movf	___fttol@f1+2,w
 12856  0E93  00D6               	movwf	___fttol@lval+2
 12857  0E94  01D7               	clrf	___fttol@lval+3
 12858  0E95  308E               	movlw	142
 12859  0E96  02D8               	subwf	___fttol@exp1,f
 12860  0E97  1FD8               	btfss	___fttol@exp1,7
 12861  0E98  2EB5               	goto	l5465
 12862  0E99  0858               	movf	___fttol@exp1,w
 12863  0E9A  3A80               	xorlw	128
 12864  0E9B  3E8F               	addlw	143
 12865  0E9C  1803               	skipnc
 12866  0E9D  2EA7               	goto	l5463
 12867  0E9E  3000               	movlw	0
 12868  0E9F  00CE               	movwf	?___fttol+3
 12869  0EA0  3000               	movlw	0
 12870  0EA1  00CD               	movwf	?___fttol+2
 12871  0EA2  3000               	movlw	0
 12872  0EA3  00CC               	movwf	?___fttol+1
 12873  0EA4  3000               	movlw	0
 12874  0EA5  00CB               	movwf	?___fttol
 12875  0EA6  0008               	return
 12876  0EA7                     l5463:	
 12877  0EA7  3001               	movlw	1
 12878  0EA8                     u4125:	
 12879  0EA8  36D7               	lsrf	___fttol@lval+3,f
 12880  0EA9  0CD6               	rrf	___fttol@lval+2,f
 12881  0EAA  0CD5               	rrf	___fttol@lval+1,f
 12882  0EAB  0CD4               	rrf	___fttol@lval,f
 12883  0EAC  0B89               	decfsz	9,f
 12884  0EAD  2EA8               	goto	u4125
 12885  0EAE  3001               	movlw	1
 12886  0EAF  00CF               	movwf	??___fttol
 12887  0EB0  084F               	movf	??___fttol,w
 12888  0EB1  07D8               	addwf	___fttol@exp1,f
 12889  0EB2  1903               	btfsc	3,2
 12890  0EB3  2ECE               	goto	l5475
 12891  0EB4  2EA7               	goto	l5463
 12892  0EB5                     l5465:	
 12893  0EB5  3018               	movlw	24
 12894  0EB6  0258               	subwf	___fttol@exp1,w
 12895  0EB7  1C03               	skipc
 12896  0EB8  2ECB               	goto	l5473
 12897  0EB9  3000               	movlw	0
 12898  0EBA  00CE               	movwf	?___fttol+3
 12899  0EBB  3000               	movlw	0
 12900  0EBC  00CD               	movwf	?___fttol+2
 12901  0EBD  3000               	movlw	0
 12902  0EBE  00CC               	movwf	?___fttol+1
 12903  0EBF  3000               	movlw	0
 12904  0EC0  00CB               	movwf	?___fttol
 12905  0EC1  0008               	return
 12906  0EC2                     l5471:	
 12907  0EC2  3001               	movlw	1
 12908  0EC3                     u4155:	
 12909  0EC3  35D4               	lslf	___fttol@lval,f
 12910  0EC4  0DD5               	rlf	___fttol@lval+1,f
 12911  0EC5  0DD6               	rlf	___fttol@lval+2,f
 12912  0EC6  0DD7               	rlf	___fttol@lval+3,f
 12913  0EC7  0B89               	decfsz	9,f
 12914  0EC8  2EC3               	goto	u4155
 12915  0EC9  3001               	movlw	1
 12916  0ECA  02D8               	subwf	___fttol@exp1,f
 12917  0ECB                     l5473:	
 12918  0ECB  08D8               	movf	___fttol@exp1,f
 12919  0ECC  1D03               	skipz
 12920  0ECD  2EC2               	goto	l5471
 12921  0ECE                     l5475:	
 12922  0ECE  0853               	movf	___fttol@sign1,w
 12923  0ECF  1903               	btfsc	3,2
 12924  0ED0  2EDC               	goto	l5479
 12925  0ED1  09D4               	comf	___fttol@lval,f
 12926  0ED2  09D5               	comf	___fttol@lval+1,f
 12927  0ED3  09D6               	comf	___fttol@lval+2,f
 12928  0ED4  09D7               	comf	___fttol@lval+3,f
 12929  0ED5  0AD4               	incf	___fttol@lval,f
 12930  0ED6  1903               	skipnz
 12931  0ED7  0AD5               	incf	___fttol@lval+1,f
 12932  0ED8  1903               	skipnz
 12933  0ED9  0AD6               	incf	___fttol@lval+2,f
 12934  0EDA  1903               	skipnz
 12935  0EDB  0AD7               	incf	___fttol@lval+3,f
 12936  0EDC                     l5479:	
 12937  0EDC  0857               	movf	___fttol@lval+3,w
 12938  0EDD  00CE               	movwf	?___fttol+3
 12939  0EDE  0856               	movf	___fttol@lval+2,w
 12940  0EDF  00CD               	movwf	?___fttol+2
 12941  0EE0  0855               	movf	___fttol@lval+1,w
 12942  0EE1  00CC               	movwf	?___fttol+1
 12943  0EE2  0854               	movf	___fttol@lval,w
 12944  0EE3  00CB               	movwf	?___fttol
 12945  0EE4  0008               	return
 12946  0EE5                     __end_of___fttol:	
 12947                           
 12948                           	psect	text79
 12949  06FF                     __ptext79:	
 12950 ;; *************** function ___ftdiv *****************
 12951 ;; Defined at:
 12952 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 12953 ;; Parameters:    Size  Location     Type
 12954 ;;  f2              3   14[BANK0 ] float 
 12955 ;;  f1              3   17[BANK0 ] float 
 12956 ;; Auto vars:     Size  Location     Type
 12957 ;;  f3              3   25[BANK0 ] float 
 12958 ;;  sign            1   29[BANK0 ] unsigned char 
 12959 ;;  exp             1   28[BANK0 ] unsigned char 
 12960 ;;  cntr            1   24[BANK0 ] unsigned char 
 12961 ;; Return value:  Size  Location     Type
 12962 ;;                  3   14[BANK0 ] float 
 12963 ;; Registers used:
 12964 ;;		wreg, status,2, status,0, pclath, cstack
 12965 ;; Tracked objects:
 12966 ;;		On entry : 0/0
 12967 ;;		On exit  : 0/0
 12968 ;;		Unchanged: 0/0
 12969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12970 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12971 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12972 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12973 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12974 ;;Total ram usage:       16 bytes
 12975 ;; Hardware stack levels used:    1
 12976 ;; Hardware stack levels required when called:    6
 12977 ;; This function calls:
 12978 ;;		___ftpack
 12979 ;; This function is called by:
 12980 ;;		_getPercentValue
 12981 ;;		_setPercentValue
 12982 ;; This function uses a non-reentrant model
 12983 ;;
 12984                           
 12985                           
 12986                           ;psect for function ___ftdiv
 12987  06FF                     ___ftdiv:	
 12988                           
 12989                           ;incstack = 0
 12990                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 12991  06FF  0020               	movlb	0	; select bank0
 12992  0700  0831               	movf	___ftdiv@f1,w
 12993  0701  00B4               	movwf	??___ftdiv
 12994  0702  0832               	movf	___ftdiv@f1+1,w
 12995  0703  00B5               	movwf	??___ftdiv+1
 12996  0704  0833               	movf	___ftdiv@f1+2,w
 12997  0705  00B6               	movwf	??___ftdiv+2
 12998  0706  1003               	clrc
 12999  0707  0D35               	rlf	??___ftdiv+1,w
 13000  0708  0D36               	rlf	??___ftdiv+2,w
 13001  0709  00B7               	movwf	??___ftdiv+3
 13002  070A  0837               	movf	??___ftdiv+3,w
 13003  070B  00BC               	movwf	___ftdiv@exp
 13004  070C  08BC               	movf	___ftdiv@exp,f
 13005  070D  1D03               	skipz
 13006  070E  2F16               	goto	l5353
 13007  070F  3000               	movlw	0
 13008  0710  00AE               	movwf	?___ftdiv
 13009  0711  3000               	movlw	0
 13010  0712  00AF               	movwf	?___ftdiv+1
 13011  0713  3000               	movlw	0
 13012  0714  00B0               	movwf	?___ftdiv+2
 13013  0715  0008               	return
 13014  0716                     l5353:	
 13015  0716  082E               	movf	___ftdiv@f2,w
 13016  0717  00B4               	movwf	??___ftdiv
 13017  0718  082F               	movf	___ftdiv@f2+1,w
 13018  0719  00B5               	movwf	??___ftdiv+1
 13019  071A  0830               	movf	___ftdiv@f2+2,w
 13020  071B  00B6               	movwf	??___ftdiv+2
 13021  071C  1003               	clrc
 13022  071D  0D35               	rlf	??___ftdiv+1,w
 13023  071E  0D36               	rlf	??___ftdiv+2,w
 13024  071F  00B7               	movwf	??___ftdiv+3
 13025  0720  0837               	movf	??___ftdiv+3,w
 13026  0721  00BD               	movwf	___ftdiv@sign
 13027  0722  08BD               	movf	___ftdiv@sign,f
 13028  0723  1D03               	skipz
 13029  0724  2F2C               	goto	l5359
 13030  0725  3000               	movlw	0
 13031  0726  00AE               	movwf	?___ftdiv
 13032  0727  3000               	movlw	0
 13033  0728  00AF               	movwf	?___ftdiv+1
 13034  0729  3000               	movlw	0
 13035  072A  00B0               	movwf	?___ftdiv+2
 13036  072B  0008               	return
 13037  072C                     l5359:	
 13038  072C  3000               	movlw	0
 13039  072D  00B9               	movwf	___ftdiv@f3
 13040  072E  3000               	movlw	0
 13041  072F  00BA               	movwf	___ftdiv@f3+1
 13042  0730  3000               	movlw	0
 13043  0731  00BB               	movwf	___ftdiv@f3+2
 13044  0732  3089               	movlw	137
 13045  0733  073D               	addwf	___ftdiv@sign,w
 13046  0734  00B4               	movwf	??___ftdiv
 13047  0735  0834               	movf	??___ftdiv,w
 13048  0736  02BC               	subwf	___ftdiv@exp,f
 13049  0737  0831               	movf	___ftdiv@f1,w
 13050  0738  00B4               	movwf	??___ftdiv
 13051  0739  0832               	movf	___ftdiv@f1+1,w
 13052  073A  00B5               	movwf	??___ftdiv+1
 13053  073B  0833               	movf	___ftdiv@f1+2,w
 13054  073C  00B6               	movwf	??___ftdiv+2
 13055  073D  3010               	movlw	16
 13056  073E                     u3905:	
 13057  073E  36B6               	lsrf	??___ftdiv+2,f
 13058  073F  0CB5               	rrf	??___ftdiv+1,f
 13059  0740  0CB4               	rrf	??___ftdiv,f
 13060  0741  0B89               	decfsz	9,f
 13061  0742  2F3E               	goto	u3905
 13062  0743  0834               	movf	??___ftdiv,w
 13063  0744  00B7               	movwf	??___ftdiv+3
 13064  0745  0837               	movf	??___ftdiv+3,w
 13065  0746  00BD               	movwf	___ftdiv@sign
 13066  0747  082E               	movf	___ftdiv@f2,w
 13067  0748  00B4               	movwf	??___ftdiv
 13068  0749  082F               	movf	___ftdiv@f2+1,w
 13069  074A  00B5               	movwf	??___ftdiv+1
 13070  074B  0830               	movf	___ftdiv@f2+2,w
 13071  074C  00B6               	movwf	??___ftdiv+2
 13072  074D  3010               	movlw	16
 13073  074E                     u3915:	
 13074  074E  36B6               	lsrf	??___ftdiv+2,f
 13075  074F  0CB5               	rrf	??___ftdiv+1,f
 13076  0750  0CB4               	rrf	??___ftdiv,f
 13077  0751  0B89               	decfsz	9,f
 13078  0752  2F4E               	goto	u3915
 13079  0753  0834               	movf	??___ftdiv,w
 13080  0754  00B7               	movwf	??___ftdiv+3
 13081  0755  0837               	movf	??___ftdiv+3,w
 13082  0756  06BD               	xorwf	___ftdiv@sign,f
 13083  0757  3080               	movlw	128
 13084  0758  00B4               	movwf	??___ftdiv
 13085  0759  0834               	movf	??___ftdiv,w
 13086  075A  05BD               	andwf	___ftdiv@sign,f
 13087  075B  17B2               	bsf	___ftdiv@f1+1,7
 13088  075C  30FF               	movlw	255
 13089  075D  05B1               	andwf	___ftdiv@f1,f
 13090  075E  30FF               	movlw	255
 13091  075F  05B2               	andwf	___ftdiv@f1+1,f
 13092  0760  3000               	movlw	0
 13093  0761  05B3               	andwf	___ftdiv@f1+2,f
 13094  0762  17AF               	bsf	___ftdiv@f2+1,7
 13095  0763  30FF               	movlw	255
 13096  0764  05AE               	andwf	___ftdiv@f2,f
 13097  0765  30FF               	movlw	255
 13098  0766  05AF               	andwf	___ftdiv@f2+1,f
 13099  0767  3000               	movlw	0
 13100  0768  05B0               	andwf	___ftdiv@f2+2,f
 13101  0769  3018               	movlw	24
 13102  076A  00B4               	movwf	??___ftdiv
 13103  076B  0834               	movf	??___ftdiv,w
 13104  076C  00B8               	movwf	___ftdiv@cntr
 13105  076D                     l5373:	
 13106  076D  3001               	movlw	1
 13107  076E                     u3925:	
 13108  076E  35B9               	lslf	___ftdiv@f3,f
 13109  076F  0DBA               	rlf	___ftdiv@f3+1,f
 13110  0770  0DBB               	rlf	___ftdiv@f3+2,f
 13111  0771  0B89               	decfsz	9,f
 13112  0772  2F6E               	goto	u3925
 13113  0773  0830               	movf	___ftdiv@f2+2,w
 13114  0774  0233               	subwf	___ftdiv@f1+2,w
 13115  0775  1D03               	skipz
 13116  0776  2F7D               	goto	u3935
 13117  0777  082F               	movf	___ftdiv@f2+1,w
 13118  0778  0232               	subwf	___ftdiv@f1+1,w
 13119  0779  1D03               	skipz
 13120  077A  2F7D               	goto	u3935
 13121  077B  082E               	movf	___ftdiv@f2,w
 13122  077C  0231               	subwf	___ftdiv@f1,w
 13123  077D                     u3935:	
 13124  077D  1C03               	skipc
 13125  077E  2F86               	goto	l5381
 13126  077F  082E               	movf	___ftdiv@f2,w
 13127  0780  02B1               	subwf	___ftdiv@f1,f
 13128  0781  082F               	movf	___ftdiv@f2+1,w
 13129  0782  3BB2               	subwfb	___ftdiv@f1+1,f
 13130  0783  0830               	movf	___ftdiv@f2+2,w
 13131  0784  3BB3               	subwfb	___ftdiv@f1+2,f
 13132  0785  1439               	bsf	___ftdiv@f3,0
 13133  0786                     l5381:	
 13134  0786  3001               	movlw	1
 13135  0787                     u3945:	
 13136  0787  35B1               	lslf	___ftdiv@f1,f
 13137  0788  0DB2               	rlf	___ftdiv@f1+1,f
 13138  0789  0DB3               	rlf	___ftdiv@f1+2,f
 13139  078A  0B89               	decfsz	9,f
 13140  078B  2F87               	goto	u3945
 13141  078C  3001               	movlw	1
 13142  078D  02B8               	subwf	___ftdiv@cntr,f
 13143  078E  1D03               	btfss	3,2
 13144  078F  2F6D               	goto	l5373
 13145  0790  0839               	movf	___ftdiv@f3,w
 13146  0791  00A0               	movwf	___ftpack@arg
 13147  0792  083A               	movf	___ftdiv@f3+1,w
 13148  0793  00A1               	movwf	___ftpack@arg+1
 13149  0794  083B               	movf	___ftdiv@f3+2,w
 13150  0795  00A2               	movwf	___ftpack@arg+2
 13151  0796  083C               	movf	___ftdiv@exp,w
 13152  0797  00B4               	movwf	??___ftdiv
 13153  0798  0834               	movf	??___ftdiv,w
 13154  0799  00A3               	movwf	___ftpack@exp
 13155  079A  083D               	movf	___ftdiv@sign,w
 13156  079B  00B5               	movwf	??___ftdiv+1
 13157  079C  0835               	movf	??___ftdiv+1,w
 13158  079D  00A4               	movwf	___ftpack@sign
 13159  079E  318A  2210         	fcall	___ftpack
 13160  07A0  0020               	movlb	0	; select bank0
 13161  07A1  0820               	movf	?___ftpack,w
 13162  07A2  00AE               	movwf	?___ftdiv
 13163  07A3  0821               	movf	?___ftpack+1,w
 13164  07A4  00AF               	movwf	?___ftdiv+1
 13165  07A5  0822               	movf	?___ftpack+2,w
 13166  07A6  00B0               	movwf	?___ftdiv+2
 13167  07A7  0008               	return
 13168  07A8                     __end_of___ftdiv:	
 13169                           
 13170                           	psect	text80
 13171  13FC                     __ptext80:	
 13172 ;; *************** function ___awtoft *****************
 13173 ;; Defined at:
 13174 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 13175 ;; Parameters:    Size  Location     Type
 13176 ;;  c               2    8[BANK0 ] int 
 13177 ;; Auto vars:     Size  Location     Type
 13178 ;;  sign            1   13[BANK0 ] unsigned char 
 13179 ;; Return value:  Size  Location     Type
 13180 ;;                  3    8[BANK0 ] float 
 13181 ;; Registers used:
 13182 ;;		wreg, status,2, status,0, pclath, cstack
 13183 ;; Tracked objects:
 13184 ;;		On entry : 0/0
 13185 ;;		On exit  : 0/0
 13186 ;;		Unchanged: 0/0
 13187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13188 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13189 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13190 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13191 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13192 ;;Total ram usage:        6 bytes
 13193 ;; Hardware stack levels used:    1
 13194 ;; Hardware stack levels required when called:    6
 13195 ;; This function calls:
 13196 ;;		___ftpack
 13197 ;; This function is called by:
 13198 ;;		_getPercentValue
 13199 ;;		_setPercentValue
 13200 ;; This function uses a non-reentrant model
 13201 ;;
 13202                           
 13203                           
 13204                           ;psect for function ___awtoft
 13205  13FC                     ___awtoft:	
 13206                           
 13207                           ;incstack = 0
 13208                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13209  13FC  0020               	movlb	0	; select bank0
 13210  13FD  01AD               	clrf	___awtoft@sign
 13211  13FE  1FA9               	btfss	___awtoft@c+1,7
 13212  13FF  2C07               	goto	l5271
 13213  1400  09A8               	comf	___awtoft@c,f
 13214  1401  09A9               	comf	___awtoft@c+1,f
 13215  1402  0AA8               	incf	___awtoft@c,f
 13216  1403  1903               	skipnz
 13217  1404  0AA9               	incf	___awtoft@c+1,f
 13218  1405  01AD               	clrf	___awtoft@sign
 13219  1406  0AAD               	incf	___awtoft@sign,f
 13220  1407                     l5271:	
 13221  1407  0828               	movf	___awtoft@c,w
 13222  1408  00A0               	movwf	___ftpack@arg
 13223  1409  0829               	movf	___awtoft@c+1,w
 13224  140A  00A1               	movwf	___ftpack@arg+1
 13225  140B  01A2               	clrf	___ftpack@arg+2
 13226  140C  308E               	movlw	142
 13227  140D  00AB               	movwf	??___awtoft
 13228  140E  082B               	movf	??___awtoft,w
 13229  140F  00A3               	movwf	___ftpack@exp
 13230  1410  082D               	movf	___awtoft@sign,w
 13231  1411  00AC               	movwf	??___awtoft+1
 13232  1412  082C               	movf	??___awtoft+1,w
 13233  1413  00A4               	movwf	___ftpack@sign
 13234  1414  318A  2210         	fcall	___ftpack
 13235  1416  0020               	movlb	0	; select bank0
 13236  1417  0820               	movf	?___ftpack,w
 13237  1418  00A8               	movwf	?___awtoft
 13238  1419  0821               	movf	?___ftpack+1,w
 13239  141A  00A9               	movwf	?___awtoft+1
 13240  141B  0822               	movf	?___ftpack+2,w
 13241  141C  00AA               	movwf	?___awtoft+2
 13242  141D  0008               	return
 13243  141E                     __end_of___awtoft:	
 13244                           
 13245                           	psect	text81
 13246  0A10                     __ptext81:	
 13247 ;; *************** function ___ftpack *****************
 13248 ;; Defined at:
 13249 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 13250 ;; Parameters:    Size  Location     Type
 13251 ;;  arg             3    0[BANK0 ] unsigned um
 13252 ;;  exp             1    3[BANK0 ] unsigned char 
 13253 ;;  sign            1    4[BANK0 ] unsigned char 
 13254 ;; Auto vars:     Size  Location     Type
 13255 ;;		None
 13256 ;; Return value:  Size  Location     Type
 13257 ;;                  3    0[BANK0 ] float 
 13258 ;; Registers used:
 13259 ;;		wreg, status,2, status,0
 13260 ;; Tracked objects:
 13261 ;;		On entry : 0/0
 13262 ;;		On exit  : 0/0
 13263 ;;		Unchanged: 0/0
 13264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13265 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13267 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13268 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13269 ;;Total ram usage:        8 bytes
 13270 ;; Hardware stack levels used:    1
 13271 ;; Hardware stack levels required when called:    5
 13272 ;; This function calls:
 13273 ;;		Nothing
 13274 ;; This function is called by:
 13275 ;;		___awtoft
 13276 ;;		___ftadd
 13277 ;;		___ftdiv
 13278 ;;		___ftmul
 13279 ;; This function uses a non-reentrant model
 13280 ;;
 13281                           
 13282                           
 13283                           ;psect for function ___ftpack
 13284  0A10                     ___ftpack:	
 13285                           
 13286                           ;incstack = 0
 13287                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13288  0A10  0020               	movlb	0	; select bank0
 13289  0A11  0823               	movf	___ftpack@exp,w
 13290  0A12  1903               	btfsc	3,2
 13291  0A13  2A19               	goto	l5237
 13292  0A14  0822               	movf	___ftpack@arg+2,w
 13293  0A15  0421               	iorwf	___ftpack@arg+1,w
 13294  0A16  0420               	iorwf	___ftpack@arg,w
 13295  0A17  1D03               	skipz
 13296  0A18  2A2A               	goto	l5243
 13297  0A19                     l5237:	
 13298  0A19  3000               	movlw	0
 13299  0A1A  00A0               	movwf	?___ftpack
 13300  0A1B  3000               	movlw	0
 13301  0A1C  00A1               	movwf	?___ftpack+1
 13302  0A1D  3000               	movlw	0
 13303  0A1E  00A2               	movwf	?___ftpack+2
 13304  0A1F  0008               	return
 13305  0A20                     l5241:	
 13306  0A20  3001               	movlw	1
 13307  0A21  00A5               	movwf	??___ftpack
 13308  0A22  0825               	movf	??___ftpack,w
 13309  0A23  07A3               	addwf	___ftpack@exp,f
 13310  0A24  3001               	movlw	1
 13311  0A25                     u3555:	
 13312  0A25  36A2               	lsrf	___ftpack@arg+2,f
 13313  0A26  0CA1               	rrf	___ftpack@arg+1,f
 13314  0A27  0CA0               	rrf	___ftpack@arg,f
 13315  0A28  0B89               	decfsz	9,f
 13316  0A29  2A25               	goto	u3555
 13317  0A2A                     l5243:	
 13318  0A2A  30FE               	movlw	254
 13319  0A2B  0522               	andwf	___ftpack@arg+2,w
 13320  0A2C  1903               	btfsc	3,2
 13321  0A2D  2A43               	goto	l2789
 13322  0A2E  2A20               	goto	l5241
 13323  0A2F                     l5245:	
 13324  0A2F  3001               	movlw	1
 13325  0A30  00A5               	movwf	??___ftpack
 13326  0A31  0825               	movf	??___ftpack,w
 13327  0A32  07A3               	addwf	___ftpack@exp,f
 13328  0A33  3001               	movlw	1
 13329  0A34  07A0               	addwf	___ftpack@arg,f
 13330  0A35  3000               	movlw	0
 13331  0A36  1803               	skipnc
 13332  0A37  3001               	movlw	1
 13333  0A38  07A1               	addwf	___ftpack@arg+1,f
 13334  0A39  3000               	movlw	0
 13335  0A3A  1803               	skipnc
 13336  0A3B  3001               	movlw	1
 13337  0A3C  07A2               	addwf	___ftpack@arg+2,f
 13338  0A3D  3001               	movlw	1
 13339  0A3E                     u3575:	
 13340  0A3E  36A2               	lsrf	___ftpack@arg+2,f
 13341  0A3F  0CA1               	rrf	___ftpack@arg+1,f
 13342  0A40  0CA0               	rrf	___ftpack@arg,f
 13343  0A41  0B89               	decfsz	9,f
 13344  0A42  2A3E               	goto	u3575
 13345  0A43                     l2789:	
 13346  0A43  30FF               	movlw	255
 13347  0A44  0522               	andwf	___ftpack@arg+2,w
 13348  0A45  1903               	btfsc	3,2
 13349  0A46  2A50               	goto	l5253
 13350  0A47  2A2F               	goto	l5245
 13351  0A48                     l5251:	
 13352  0A48  3001               	movlw	1
 13353  0A49  02A3               	subwf	___ftpack@exp,f
 13354  0A4A  3001               	movlw	1
 13355  0A4B                     u3595:	
 13356  0A4B  35A0               	lslf	___ftpack@arg,f
 13357  0A4C  0DA1               	rlf	___ftpack@arg+1,f
 13358  0A4D  0DA2               	rlf	___ftpack@arg+2,f
 13359  0A4E  0B89               	decfsz	9,f
 13360  0A4F  2A4B               	goto	u3595
 13361  0A50                     l5253:	
 13362  0A50  1FA1               	btfss	___ftpack@arg+1,7
 13363  0A51  2A48               	goto	l5251
 13364  0A52  1823               	btfsc	___ftpack@exp,0
 13365  0A53  2A5A               	goto	l2795
 13366  0A54  30FF               	movlw	255
 13367  0A55  05A0               	andwf	___ftpack@arg,f
 13368  0A56  307F               	movlw	127
 13369  0A57  05A1               	andwf	___ftpack@arg+1,f
 13370  0A58  30FF               	movlw	255
 13371  0A59  05A2               	andwf	___ftpack@arg+2,f
 13372  0A5A                     l2795:	
 13373  0A5A  1003               	clrc
 13374  0A5B  0CA3               	rrf	___ftpack@exp,f
 13375  0A5C  0823               	movf	___ftpack@exp,w
 13376  0A5D  00A5               	movwf	??___ftpack
 13377  0A5E  01A6               	clrf	??___ftpack+1
 13378  0A5F  01A7               	clrf	??___ftpack+2
 13379  0A60  3010               	movlw	16
 13380  0A61                     u3625:	
 13381  0A61  35A5               	lslf	??___ftpack,f
 13382  0A62  0DA6               	rlf	??___ftpack+1,f
 13383  0A63  0DA7               	rlf	??___ftpack+2,f
 13384  0A64  0B89               	decfsz	9,f
 13385  0A65  2A61               	goto	u3625
 13386  0A66  0825               	movf	??___ftpack,w
 13387  0A67  04A0               	iorwf	___ftpack@arg,f
 13388  0A68  0826               	movf	??___ftpack+1,w
 13389  0A69  04A1               	iorwf	___ftpack@arg+1,f
 13390  0A6A  0827               	movf	??___ftpack+2,w
 13391  0A6B  04A2               	iorwf	___ftpack@arg+2,f
 13392  0A6C  0824               	movf	___ftpack@sign,w
 13393  0A6D  1903               	btfsc	3,2
 13394  0A6E  0008               	return
 13395  0A6F  17A2               	bsf	___ftpack@arg+2,7
 13396  0A70  0008               	return
 13397  0A71                     __end_of___ftpack:	
 13398                           
 13399                           	psect	text82
 13400  1104                     __ptext82:	
 13401 ;; *************** function _setRFSW_Status *****************
 13402 ;; Defined at:
 13403 ;;		line 434 in file "../src/RF_Control_B1.c"
 13404 ;; Parameters:    Size  Location     Type
 13405 ;;  sw              1    wreg     unsigned char 
 13406 ;;  command         1    2[BANK0 ] unsigned char 
 13407 ;; Auto vars:     Size  Location     Type
 13408 ;;  sw              1    3[BANK0 ] unsigned char 
 13409 ;; Return value:  Size  Location     Type
 13410 ;;		None               void
 13411 ;; Registers used:
 13412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13413 ;; Tracked objects:
 13414 ;;		On entry : 0/0
 13415 ;;		On exit  : 0/0
 13416 ;;		Unchanged: 0/0
 13417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13418 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13421 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13422 ;;Total ram usage:        2 bytes
 13423 ;; Hardware stack levels used:    1
 13424 ;; Hardware stack levels required when called:    6
 13425 ;; This function calls:
 13426 ;;		_RfSWPointSelect
 13427 ;; This function is called by:
 13428 ;;		_DlyOff_Main
 13429 ;;		_setControl_Lights_Table
 13430 ;;		_Sw_DimmerOnFunc
 13431 ;;		_Sw_DimmerAdjFunc
 13432 ;;		_setDimmerLights_ERROR
 13433 ;; This function uses a non-reentrant model
 13434 ;;
 13435                           
 13436                           
 13437                           ;psect for function _setRFSW_Status
 13438  1104                     _setRFSW_Status:	
 13439                           
 13440                           ;incstack = 0
 13441                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13442                           ;setRFSW_Status@sw stored from wreg
 13443  1104  0020               	movlb	0	; select bank0
 13444  1105  00A3               	movwf	setRFSW_Status@sw
 13445                           
 13446                           ;RF_Control_B1.c: 435: RfSWPointSelect(sw);
 13447  1106  0823               	movf	setRFSW_Status@sw,w
 13448  1107  3192  229E         	fcall	_RfSWPointSelect
 13449                           
 13450                           ;RF_Control_B1.c: 436: RFSW->Status = command;
 13451  1109  0021               	movlb	1	; select bank1
 13452  110A  0854               	movf	_RFSW^(0+128),w
 13453  110B  0086               	movwf	6
 13454  110C  0187               	clrf	7
 13455  110D  0020               	movlb	0	; select bank0
 13456  110E  0822               	movf	setRFSW_Status@command,w
 13457  110F  1001               	bcf	1,0
 13458  1110  1D03               	skipz
 13459  1111  1401               	bsf	1,0
 13460  1112  0008               	return
 13461  1113                     __end_of_setRFSW_Status:	
 13462                           
 13463                           	psect	text83
 13464  129E                     __ptext83:	
 13465 ;; *************** function _RfSWPointSelect *****************
 13466 ;; Defined at:
 13467 ;;		line 369 in file "../src/RF_Control_B1.c"
 13468 ;; Parameters:    Size  Location     Type
 13469 ;;  sw              1    wreg     unsigned char 
 13470 ;; Auto vars:     Size  Location     Type
 13471 ;;  sw              1    1[BANK0 ] unsigned char 
 13472 ;; Return value:  Size  Location     Type
 13473 ;;		None               void
 13474 ;; Registers used:
 13475 ;;		wreg
 13476 ;; Tracked objects:
 13477 ;;		On entry : 0/0
 13478 ;;		On exit  : 0/0
 13479 ;;		Unchanged: 0/0
 13480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13482 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13483 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13484 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13485 ;;Total ram usage:        2 bytes
 13486 ;; Hardware stack levels used:    1
 13487 ;; Hardware stack levels required when called:    5
 13488 ;; This function calls:
 13489 ;;		Nothing
 13490 ;; This function is called by:
 13491 ;;		_setRFSW_Control
 13492 ;;		_setRFSW_AdjControl
 13493 ;;		_setRFSW_Status
 13494 ;; This function uses a non-reentrant model
 13495 ;;
 13496                           
 13497                           
 13498                           ;psect for function _RfSWPointSelect
 13499  129E                     _RfSWPointSelect:	
 13500                           
 13501                           ;incstack = 0
 13502                           ; Regs used in _RfSWPointSelect: [wreg]
 13503                           ;RfSWPointSelect@sw stored from wreg
 13504  129E  0020               	movlb	0	; select bank0
 13505  129F  00A1               	movwf	RfSWPointSelect@sw
 13506                           
 13507                           ;RF_Control_B1.c: 371: if (sw == 1) {
 13508  12A0  0821               	movf	RfSWPointSelect@sw,w
 13509  12A1  3A01               	xorlw	1
 13510  12A2  1D03               	skipz
 13511  12A3  2AA9               	goto	l1951
 13512                           
 13513                           ;RF_Control_B1.c: 372: RFSW = &RFSW1;
 13514  12A4  30EE               	movlw	_RFSW1& (0+255)
 13515  12A5  00A0               	movwf	??_RfSWPointSelect
 13516  12A6  0820               	movf	??_RfSWPointSelect,w
 13517  12A7  0021               	movlb	1	; select bank1
 13518  12A8  00D4               	movwf	_RFSW^(0+128)
 13519  12A9                     l1951:	
 13520                           
 13521                           ;RF_Control_B1.c: 373: }
 13522                           ;RF_Control_B1.c: 376: if (sw == 2) {
 13523  12A9  0020               	movlb	0	; select bank0
 13524  12AA  0821               	movf	RfSWPointSelect@sw,w
 13525  12AB  3A02               	xorlw	2
 13526  12AC  1D03               	skipz
 13527  12AD  0008               	return
 13528                           
 13529                           ;RF_Control_B1.c: 377: RFSW = &RFSW2;
 13530  12AE  30EF               	movlw	_RFSW2& (0+255)
 13531  12AF  00A0               	movwf	??_RfSWPointSelect
 13532  12B0  0820               	movf	??_RfSWPointSelect,w
 13533  12B1  0021               	movlb	1	; select bank1
 13534  12B2  00D4               	movwf	_RFSW^(0+128)
 13535  12B3  0008               	return
 13536  12B4                     __end_of_RfSWPointSelect:	
 13537                           
 13538                           	psect	text84
 13539  1150                     __ptext84:	
 13540 ;; *************** function _setDimmerLights_Trigger *****************
 13541 ;; Defined at:
 13542 ;;		line 716 in file "../src/Dimmer_B1.c"
 13543 ;; Parameters:    Size  Location     Type
 13544 ;;  lights          1    wreg     unsigned char 
 13545 ;;  command         1    2[BANK0 ] unsigned char 
 13546 ;; Auto vars:     Size  Location     Type
 13547 ;;  lights          1    3[BANK0 ] unsigned char 
 13548 ;; Return value:  Size  Location     Type
 13549 ;;		None               void
 13550 ;; Registers used:
 13551 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13552 ;; Tracked objects:
 13553 ;;		On entry : 0/0
 13554 ;;		On exit  : 0/0
 13555 ;;		Unchanged: 0/0
 13556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13557 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13558 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13560 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13561 ;;Total ram usage:        2 bytes
 13562 ;; Hardware stack levels used:    1
 13563 ;; Hardware stack levels required when called:    6
 13564 ;; This function calls:
 13565 ;;		_DimmerLightsPointSelect
 13566 ;; This function is called by:
 13567 ;;		_DlyOff_Main
 13568 ;;		_setRFSW_Control
 13569 ;;		_Sw_DimmerOnFunc
 13570 ;;		_Sw_DimmerOffFunc
 13571 ;; This function uses a non-reentrant model
 13572 ;;
 13573                           
 13574                           
 13575                           ;psect for function _setDimmerLights_Trigger
 13576  1150                     _setDimmerLights_Trigger:	
 13577                           
 13578                           ;incstack = 0
 13579                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13580                           ;setDimmerLights_Trigger@lights stored from wreg
 13581  1150  0020               	movlb	0	; select bank0
 13582  1151  00A3               	movwf	setDimmerLights_Trigger@lights
 13583                           
 13584                           ;Dimmer_B1.c: 718: DimmerLightsPointSelect(lights);
 13585  1152  0823               	movf	setDimmerLights_Trigger@lights,w
 13586  1153  3191  21E8         	fcall	_DimmerLightsPointSelect
 13587                           
 13588                           ;Dimmer_B1.c: 719: DimmerLights->Trigger = command;
 13589  1155  0879               	movf	_DimmerLights,w
 13590  1156  3E08               	addlw	8
 13591  1157  0086               	movwf	6
 13592  1158  3001               	movlw	1	; select bank2/3
 13593  1159  0087               	movwf	7
 13594  115A  0020               	movlb	0	; select bank0
 13595  115B  0822               	movf	setDimmerLights_Trigger@command,w
 13596  115C  1101               	bcf	1,2
 13597  115D  1D03               	skipz
 13598  115E  1501               	bsf	1,2
 13599  115F  0008               	return
 13600  1160                     __end_of_setDimmerLights_Trigger:	
 13601                           
 13602                           	psect	text85
 13603  1140                     __ptext85:	
 13604 ;; *************** function _setDimmerLights_Switch *****************
 13605 ;; Defined at:
 13606 ;;		line 704 in file "../src/Dimmer_B1.c"
 13607 ;; Parameters:    Size  Location     Type
 13608 ;;  lights          1    wreg     unsigned char 
 13609 ;;  command         1    2[BANK0 ] unsigned char 
 13610 ;; Auto vars:     Size  Location     Type
 13611 ;;  lights          1    3[BANK0 ] unsigned char 
 13612 ;; Return value:  Size  Location     Type
 13613 ;;		None               void
 13614 ;; Registers used:
 13615 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13616 ;; Tracked objects:
 13617 ;;		On entry : 0/0
 13618 ;;		On exit  : 0/0
 13619 ;;		Unchanged: 0/0
 13620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13621 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13622 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13624 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13625 ;;Total ram usage:        2 bytes
 13626 ;; Hardware stack levels used:    1
 13627 ;; Hardware stack levels required when called:    6
 13628 ;; This function calls:
 13629 ;;		_DimmerLightsPointSelect
 13630 ;; This function is called by:
 13631 ;;		_DlyOff_Main
 13632 ;;		_setRFSW_Control
 13633 ;;		_Sw_DimmerOnFunc
 13634 ;;		_Sw_DimmerOffFunc
 13635 ;; This function uses a non-reentrant model
 13636 ;;
 13637                           
 13638                           
 13639                           ;psect for function _setDimmerLights_Switch
 13640  1140                     _setDimmerLights_Switch:	
 13641                           
 13642                           ;incstack = 0
 13643                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 13644                           ;setDimmerLights_Switch@lights stored from wreg
 13645  1140  0020               	movlb	0	; select bank0
 13646  1141  00A3               	movwf	setDimmerLights_Switch@lights
 13647                           
 13648                           ;Dimmer_B1.c: 706: DimmerLightsPointSelect(lights);
 13649  1142  0823               	movf	setDimmerLights_Switch@lights,w
 13650  1143  3191  21E8         	fcall	_DimmerLightsPointSelect
 13651                           
 13652                           ;Dimmer_B1.c: 707: DimmerLights->Switch = command;
 13653  1145  0879               	movf	_DimmerLights,w
 13654  1146  3E08               	addlw	8
 13655  1147  0086               	movwf	6
 13656  1148  3001               	movlw	1	; select bank2/3
 13657  1149  0087               	movwf	7
 13658  114A  0020               	movlb	0	; select bank0
 13659  114B  0822               	movf	setDimmerLights_Switch@command,w
 13660  114C  1081               	bcf	1,1
 13661  114D  1D03               	skipz
 13662  114E  1481               	bsf	1,1
 13663  114F  0008               	return
 13664  1150                     __end_of_setDimmerLights_Switch:	
 13665                           
 13666                           	psect	text86
 13667  11E8                     __ptext86:	
 13668 ;; *************** function _DimmerLightsPointSelect *****************
 13669 ;; Defined at:
 13670 ;;		line 326 in file "../src/Dimmer_B1.c"
 13671 ;; Parameters:    Size  Location     Type
 13672 ;;  lights          1    wreg     unsigned char 
 13673 ;; Auto vars:     Size  Location     Type
 13674 ;;  lights          1    1[BANK0 ] unsigned char 
 13675 ;; Return value:  Size  Location     Type
 13676 ;;		None               void
 13677 ;; Registers used:
 13678 ;;		wreg
 13679 ;; Tracked objects:
 13680 ;;		On entry : 0/0
 13681 ;;		On exit  : 0/0
 13682 ;;		Unchanged: 0/0
 13683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13685 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13686 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13687 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13688 ;;Total ram usage:        2 bytes
 13689 ;; Hardware stack levels used:    1
 13690 ;; Hardware stack levels required when called:    5
 13691 ;; This function calls:
 13692 ;;		Nothing
 13693 ;; This function is called by:
 13694 ;;		_setDimmerLights_Initialization
 13695 ;;		_setDimmerLights_Main
 13696 ;;		_setDimmerLights
 13697 ;;		_setDimmerLights_Adj
 13698 ;;		_setDimmerLights_AdjRF
 13699 ;;		_setDimmerLights_Switch
 13700 ;;		_setDimmerLights_AdjGo
 13701 ;;		_setDimmerLights_Trigger
 13702 ;;		_setDimmerLights_TriggerAdj
 13703 ;;		_setDimmerLights_ERROR
 13704 ;;		_setDimmerLights_TriggerERROR
 13705 ;;		_setDimmerLights_GO
 13706 ;;		_setDimmerLights_MaxmumValue
 13707 ;;		_setDimmerLights_Clear
 13708 ;; This function uses a non-reentrant model
 13709 ;;
 13710                           
 13711                           
 13712                           ;psect for function _DimmerLightsPointSelect
 13713  11E8                     _DimmerLightsPointSelect:	
 13714                           
 13715                           ;incstack = 0
 13716                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 13717                           ;DimmerLightsPointSelect@lights stored from wreg
 13718  11E8  0020               	movlb	0	; select bank0
 13719  11E9  00A1               	movwf	DimmerLightsPointSelect@lights
 13720                           
 13721                           ;Dimmer_B1.c: 328: if (lights == 1) {
 13722  11EA  0821               	movf	DimmerLightsPointSelect@lights,w
 13723  11EB  3A01               	xorlw	1
 13724  11EC  1D03               	skipz
 13725  11ED  29F2               	goto	l788
 13726                           
 13727                           ;Dimmer_B1.c: 329: DimmerLights = &DimmerLights1;
 13728  11EE  3035               	movlw	_DimmerLights1& (0+255)
 13729  11EF  00A0               	movwf	??_DimmerLightsPointSelect
 13730  11F0  0820               	movf	??_DimmerLightsPointSelect,w
 13731  11F1  00F9               	movwf	_DimmerLights
 13732  11F2                     l788:	
 13733                           
 13734                           ;Dimmer_B1.c: 330: }
 13735                           ;Dimmer_B1.c: 333: if (lights == 2) {
 13736  11F2  0821               	movf	DimmerLightsPointSelect@lights,w
 13737  11F3  3A02               	xorlw	2
 13738  11F4  1D03               	skipz
 13739  11F5  0008               	return
 13740                           
 13741                           ;Dimmer_B1.c: 334: DimmerLights = &DimmerLights2;
 13742  11F6  3044               	movlw	_DimmerLights2& (0+255)
 13743  11F7  00A0               	movwf	??_DimmerLightsPointSelect
 13744  11F8  0820               	movf	??_DimmerLightsPointSelect,w
 13745  11F9  00F9               	movwf	_DimmerLights
 13746  11FA  0008               	return
 13747  11FB                     __end_of_DimmerLightsPointSelect:	
 13748                           
 13749                           	psect	text87
 13750  08A2                     __ptext87:	
 13751 ;; *************** function _setBuz *****************
 13752 ;; Defined at:
 13753 ;;		line 22 in file "../src/Buzzer_B1.c"
 13754 ;; Parameters:    Size  Location     Type
 13755 ;;  count           1    wreg     unsigned char 
 13756 ;;  time            2    9[BANK0 ] int 
 13757 ;; Auto vars:     Size  Location     Type
 13758 ;;  count           1   12[BANK0 ] unsigned char 
 13759 ;; Return value:  Size  Location     Type
 13760 ;;		None               void
 13761 ;; Registers used:
 13762 ;;		wreg, status,2, status,0, pclath, cstack
 13763 ;; Tracked objects:
 13764 ;;		On entry : 0/0
 13765 ;;		On exit  : 0/0
 13766 ;;		Unchanged: 0/0
 13767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13768 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13769 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13770 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13771 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13772 ;;Total ram usage:        4 bytes
 13773 ;; Hardware stack levels used:    1
 13774 ;; Hardware stack levels required when called:    6
 13775 ;; This function calls:
 13776 ;;		___awdiv
 13777 ;; This function is called by:
 13778 ;;		_DlyOff_Main
 13779 ;;		_setDimmerLights_Main
 13780 ;;		_setLog_Code
 13781 ;;		_setControl_Lights_Table
 13782 ;;		_setRFSW_Control
 13783 ;;		_setSw_Main
 13784 ;;		_Sw_DimmerOnFunc
 13785 ;;		_my_MainTime
 13786 ;;		_DimmerLights_Exceptions
 13787 ;; This function uses a non-reentrant model
 13788 ;;
 13789                           
 13790                           
 13791                           ;psect for function _setBuz
 13792  08A2                     _setBuz:	
 13793                           
 13794                           ;incstack = 0
 13795                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 13796                           ;setBuz@count stored from wreg
 13797  08A2  0020               	movlb	0	; select bank0
 13798  08A3  00AC               	movwf	setBuz@count
 13799                           
 13800                           ;Buzzer_B1.c: 23: time /= 10;
 13801  08A4  300A               	movlw	10
 13802  08A5  00A0               	movwf	___awdiv@divisor
 13803  08A6  3000               	movlw	0
 13804  08A7  00A1               	movwf	___awdiv@divisor+1
 13805  08A8  082A               	movf	setBuz@time+1,w
 13806  08A9  01A3               	clrf	___awdiv@dividend+1
 13807  08AA  07A3               	addwf	___awdiv@dividend+1,f
 13808  08AB  0829               	movf	setBuz@time,w
 13809  08AC  01A2               	clrf	___awdiv@dividend
 13810  08AD  07A2               	addwf	___awdiv@dividend,f
 13811  08AE  3188  204E  3188   	fcall	___awdiv
 13812  08B1  0020               	movlb	0	; select bank0
 13813  08B2  0821               	movf	?___awdiv+1,w
 13814  08B3  01AA               	clrf	setBuz@time+1
 13815  08B4  07AA               	addwf	setBuz@time+1,f
 13816  08B5  0820               	movf	?___awdiv,w
 13817  08B6  01A9               	clrf	setBuz@time
 13818  08B7  07A9               	addwf	setBuz@time,f
 13819                           
 13820                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 13821  08B8  0021               	movlb	1	; select bank1
 13822  08B9  1C30               	btfss	_Buz1^(0+128),0
 13823  08BA  0008               	return
 13824                           
 13825                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 13826  08BB  18B0               	btfsc	_Buz1^(0+128),1
 13827  08BC  28D3               	goto	l98
 13828                           
 13829                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 13830  08BD  14B0               	bsf	_Buz1^(0+128),1
 13831                           
 13832                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 13833  08BE  01B1               	clrf	(_Buz1^(0+128)+1)
 13834  08BF  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 13835                           
 13836                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 13837  08C0  0020               	movlb	0	; select bank0
 13838  08C1  082C               	movf	setBuz@count,w
 13839  08C2  00AB               	movwf	??_setBuz
 13840  08C3  082B               	movf	??_setBuz,w
 13841  08C4  0021               	movlb	1	; select bank1
 13842  08C5  00B3               	movwf	(_Buz1^(0+128)+3)
 13843                           
 13844                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 13845  08C6  0020               	movlb	0	; select bank0
 13846  08C7  082A               	movf	setBuz@time+1,w
 13847  08C8  0021               	movlb	1	; select bank1
 13848  08C9  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 13849  08CA  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 13850  08CB  0020               	movlb	0	; select bank0
 13851  08CC  0829               	movf	setBuz@time,w
 13852  08CD  0021               	movlb	1	; select bank1
 13853  08CE  01B6               	clrf	(_Buz1^(0+128)+6)
 13854  08CF  07B6               	addwf	(_Buz1^(0+128)+6),f
 13855                           
 13856                           ;Buzzer_B1.c: 30: RB3 = 1;
 13857  08D0  0020               	movlb	0	; select bank0
 13858  08D1  158D               	bsf	13,3	;volatile
 13859                           
 13860                           ;Buzzer_B1.c: 31: } else {
 13861  08D2  0008               	return
 13862  08D3                     l98:	
 13863                           
 13864                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 13865  08D3  19B0               	btfsc	_Buz1^(0+128),3
 13866  08D4  28E7               	goto	l100
 13867                           
 13868                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 13869  08D5  15B0               	bsf	_Buz1^(0+128),3
 13870                           
 13871                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 13872  08D6  0020               	movlb	0	; select bank0
 13873  08D7  082C               	movf	setBuz@count,w
 13874  08D8  00AB               	movwf	??_setBuz
 13875  08D9  082B               	movf	??_setBuz,w
 13876  08DA  0021               	movlb	1	; select bank1
 13877  08DB  00B4               	movwf	(_Buz1^(0+128)+4)
 13878                           
 13879                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 13880  08DC  0020               	movlb	0	; select bank0
 13881  08DD  082A               	movf	setBuz@time+1,w
 13882  08DE  0021               	movlb	1	; select bank1
 13883  08DF  01B9               	clrf	((_Buz1+1)^(0+128)+8)
 13884  08E0  07B9               	addwf	((_Buz1+1)^(0+128)+8),f
 13885  08E1  0020               	movlb	0	; select bank0
 13886  08E2  0829               	movf	setBuz@time,w
 13887  08E3  0021               	movlb	1	; select bank1
 13888  08E4  01B8               	clrf	(_Buz1^(0+128)+8)
 13889  08E5  07B8               	addwf	(_Buz1^(0+128)+8),f
 13890                           
 13891                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 13892  08E6  0008               	return
 13893  08E7                     l100:	
 13894  08E7  1A30               	btfsc	_Buz1^(0+128),4
 13895  08E8  0008               	return
 13896                           
 13897                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 13898  08E9  1630               	bsf	_Buz1^(0+128),4
 13899                           
 13900                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 13901  08EA  0020               	movlb	0	; select bank0
 13902  08EB  082C               	movf	setBuz@count,w
 13903  08EC  00AB               	movwf	??_setBuz
 13904  08ED  082B               	movf	??_setBuz,w
 13905  08EE  0021               	movlb	1	; select bank1
 13906  08EF  00B5               	movwf	(_Buz1^(0+128)+5)
 13907                           
 13908                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 13909  08F0  0020               	movlb	0	; select bank0
 13910  08F1  082A               	movf	setBuz@time+1,w
 13911  08F2  0021               	movlb	1	; select bank1
 13912  08F3  01BB               	clrf	((_Buz1+1)^(0+128)+10)
 13913  08F4  07BB               	addwf	((_Buz1+1)^(0+128)+10),f
 13914  08F5  0020               	movlb	0	; select bank0
 13915  08F6  0829               	movf	setBuz@time,w
 13916  08F7  0021               	movlb	1	; select bank1
 13917  08F8  01BA               	clrf	(_Buz1^(0+128)+10)
 13918  08F9  07BA               	addwf	(_Buz1^(0+128)+10),f
 13919  08FA  0008               	return
 13920  08FB                     __end_of_setBuz:	
 13921                           
 13922                           	psect	text88
 13923  084E                     __ptext88:	
 13924 ;; *************** function ___awdiv *****************
 13925 ;; Defined at:
 13926 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 13927 ;; Parameters:    Size  Location     Type
 13928 ;;  divisor         2    0[BANK0 ] int 
 13929 ;;  dividend        2    2[BANK0 ] int 
 13930 ;; Auto vars:     Size  Location     Type
 13931 ;;  quotient        2    7[BANK0 ] int 
 13932 ;;  sign            1    6[BANK0 ] unsigned char 
 13933 ;;  counter         1    5[BANK0 ] unsigned char 
 13934 ;; Return value:  Size  Location     Type
 13935 ;;                  2    0[BANK0 ] int 
 13936 ;; Registers used:
 13937 ;;		wreg, status,2, status,0
 13938 ;; Tracked objects:
 13939 ;;		On entry : 0/0
 13940 ;;		On exit  : 0/0
 13941 ;;		Unchanged: 0/0
 13942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13943 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13944 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13945 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13946 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13947 ;;Total ram usage:        9 bytes
 13948 ;; Hardware stack levels used:    1
 13949 ;; Hardware stack levels required when called:    5
 13950 ;; This function calls:
 13951 ;;		Nothing
 13952 ;; This function is called by:
 13953 ;;		_setBuz
 13954 ;; This function uses a non-reentrant model
 13955 ;;
 13956                           
 13957                           
 13958                           ;psect for function ___awdiv
 13959  084E                     ___awdiv:	
 13960                           
 13961                           ;incstack = 0
 13962                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13963  084E  0020               	movlb	0	; select bank0
 13964  084F  01A6               	clrf	___awdiv@sign
 13965  0850  1FA1               	btfss	___awdiv@divisor+1,7
 13966  0851  2859               	goto	l5581
 13967  0852  09A0               	comf	___awdiv@divisor,f
 13968  0853  09A1               	comf	___awdiv@divisor+1,f
 13969  0854  0AA0               	incf	___awdiv@divisor,f
 13970  0855  1903               	skipnz
 13971  0856  0AA1               	incf	___awdiv@divisor+1,f
 13972  0857  01A6               	clrf	___awdiv@sign
 13973  0858  0AA6               	incf	___awdiv@sign,f
 13974  0859                     l5581:	
 13975  0859  1FA3               	btfss	___awdiv@dividend+1,7
 13976  085A  2864               	goto	l5587
 13977  085B  09A2               	comf	___awdiv@dividend,f
 13978  085C  09A3               	comf	___awdiv@dividend+1,f
 13979  085D  0AA2               	incf	___awdiv@dividend,f
 13980  085E  1903               	skipnz
 13981  085F  0AA3               	incf	___awdiv@dividend+1,f
 13982  0860  3001               	movlw	1
 13983  0861  00A4               	movwf	??___awdiv
 13984  0862  0824               	movf	??___awdiv,w
 13985  0863  06A6               	xorwf	___awdiv@sign,f
 13986  0864                     l5587:	
 13987  0864  01A7               	clrf	___awdiv@quotient
 13988  0865  01A8               	clrf	___awdiv@quotient+1
 13989  0866  0821               	movf	___awdiv@divisor+1,w
 13990  0867  0420               	iorwf	___awdiv@divisor,w
 13991  0868  1903               	skipnz
 13992  0869  2893               	goto	l5609
 13993  086A  01A5               	clrf	___awdiv@counter
 13994  086B  0AA5               	incf	___awdiv@counter,f
 13995  086C                     l5597:	
 13996  086C  1BA1               	btfsc	___awdiv@divisor+1,7
 13997  086D  2878               	goto	l5599
 13998  086E  3001               	movlw	1
 13999  086F                     u4345:	
 14000  086F  35A0               	lslf	___awdiv@divisor,f
 14001  0870  0DA1               	rlf	___awdiv@divisor+1,f
 14002  0871  0B89               	decfsz	9,f
 14003  0872  286F               	goto	u4345
 14004  0873  3001               	movlw	1
 14005  0874  00A4               	movwf	??___awdiv
 14006  0875  0824               	movf	??___awdiv,w
 14007  0876  07A5               	addwf	___awdiv@counter,f
 14008  0877  286C               	goto	l5597
 14009  0878                     l5599:	
 14010  0878  3001               	movlw	1
 14011  0879                     u4365:	
 14012  0879  35A7               	lslf	___awdiv@quotient,f
 14013  087A  0DA8               	rlf	___awdiv@quotient+1,f
 14014  087B  0B89               	decfsz	9,f
 14015  087C  2879               	goto	u4365
 14016  087D  0821               	movf	___awdiv@divisor+1,w
 14017  087E  0223               	subwf	___awdiv@dividend+1,w
 14018  087F  1D03               	skipz
 14019  0880  2883               	goto	u4375
 14020  0881  0820               	movf	___awdiv@divisor,w
 14021  0882  0222               	subwf	___awdiv@dividend,w
 14022  0883                     u4375:	
 14023  0883  1C03               	skipc
 14024  0884  288A               	goto	l5605
 14025  0885  0820               	movf	___awdiv@divisor,w
 14026  0886  02A2               	subwf	___awdiv@dividend,f
 14027  0887  0821               	movf	___awdiv@divisor+1,w
 14028  0888  3BA3               	subwfb	___awdiv@dividend+1,f
 14029  0889  1427               	bsf	___awdiv@quotient,0
 14030  088A                     l5605:	
 14031  088A  3001               	movlw	1
 14032  088B                     u4385:	
 14033  088B  36A1               	lsrf	___awdiv@divisor+1,f
 14034  088C  0CA0               	rrf	___awdiv@divisor,f
 14035  088D  0B89               	decfsz	9,f
 14036  088E  288B               	goto	u4385
 14037  088F  3001               	movlw	1
 14038  0890  02A5               	subwf	___awdiv@counter,f
 14039  0891  1D03               	btfss	3,2
 14040  0892  2878               	goto	l5599
 14041  0893                     l5609:	
 14042  0893  0826               	movf	___awdiv@sign,w
 14043  0894  1903               	btfsc	3,2
 14044  0895  289B               	goto	l5613
 14045  0896  09A7               	comf	___awdiv@quotient,f
 14046  0897  09A8               	comf	___awdiv@quotient+1,f
 14047  0898  0AA7               	incf	___awdiv@quotient,f
 14048  0899  1903               	skipnz
 14049  089A  0AA8               	incf	___awdiv@quotient+1,f
 14050  089B                     l5613:	
 14051  089B  0828               	movf	___awdiv@quotient+1,w
 14052  089C  01A1               	clrf	?___awdiv+1
 14053  089D  07A1               	addwf	?___awdiv+1,f
 14054  089E  0827               	movf	___awdiv@quotient,w
 14055  089F  01A0               	clrf	?___awdiv
 14056  08A0  07A0               	addwf	?___awdiv,f
 14057  08A1  0008               	return
 14058  08A2                     __end_of___awdiv:	
 14059                           
 14060                           	psect	text89
 14061  1FBC                     __ptext89:	
 14062 ;; *************** function _DelayOff_Initialization *****************
 14063 ;; Defined at:
 14064 ;;		line 26 in file "../src/DelayOff_B1.c"
 14065 ;; Parameters:    Size  Location     Type
 14066 ;;		None
 14067 ;; Auto vars:     Size  Location     Type
 14068 ;;		None
 14069 ;; Return value:  Size  Location     Type
 14070 ;;		None               void
 14071 ;; Registers used:
 14072 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14073 ;; Tracked objects:
 14074 ;;		On entry : 0/0
 14075 ;;		On exit  : 0/0
 14076 ;;		Unchanged: 0/0
 14077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14082 ;;Total ram usage:        0 bytes
 14083 ;; Hardware stack levels used:    1
 14084 ;; Hardware stack levels required when called:    7
 14085 ;; This function calls:
 14086 ;;		_DlyOff_Initialization
 14087 ;; This function is called by:
 14088 ;;		_main
 14089 ;; This function uses a non-reentrant model
 14090 ;;
 14091                           
 14092                           
 14093                           ;psect for function _DelayOff_Initialization
 14094  1FBC                     _DelayOff_Initialization:	
 14095                           
 14096                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 14097                           
 14098                           ;incstack = 0
 14099                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14100  1FBC  3001               	movlw	1
 14101  1FBD  319F  27F6  319F   	fcall	_DlyOff_Initialization
 14102                           
 14103                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 14104  1FC0  3002               	movlw	2
 14105  1FC1  319F  27F6         	fcall	_DlyOff_Initialization
 14106  1FC3  0008               	return
 14107  1FC4                     __end_of_DelayOff_Initialization:	
 14108                           
 14109                           	psect	text90
 14110  1FF6                     __ptext90:	
 14111 ;; *************** function _DlyOff_Initialization *****************
 14112 ;; Defined at:
 14113 ;;		line 56 in file "../src/DelayOff_B1.c"
 14114 ;; Parameters:    Size  Location     Type
 14115 ;;  sw              1    wreg     unsigned char 
 14116 ;; Auto vars:     Size  Location     Type
 14117 ;;  sw              1    2[BANK0 ] unsigned char 
 14118 ;; Return value:  Size  Location     Type
 14119 ;;		None               void
 14120 ;; Registers used:
 14121 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14122 ;; Tracked objects:
 14123 ;;		On entry : 0/0
 14124 ;;		On exit  : 0/0
 14125 ;;		Unchanged: 0/0
 14126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14128 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14130 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14131 ;;Total ram usage:        1 bytes
 14132 ;; Hardware stack levels used:    1
 14133 ;; Hardware stack levels required when called:    6
 14134 ;; This function calls:
 14135 ;;		_DelayOffPointSelect
 14136 ;; This function is called by:
 14137 ;;		_DelayOff_Initialization
 14138 ;; This function uses a non-reentrant model
 14139 ;;
 14140                           
 14141                           
 14142                           ;psect for function _DlyOff_Initialization
 14143  1FF6                     _DlyOff_Initialization:	
 14144                           
 14145                           ;incstack = 0
 14146                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14147                           ;DlyOff_Initialization@sw stored from wreg
 14148  1FF6  0020               	movlb	0	; select bank0
 14149  1FF7  00A2               	movwf	DlyOff_Initialization@sw
 14150                           
 14151                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 14152  1FF8  0822               	movf	DlyOff_Initialization@sw,w
 14153  1FF9  3192  2223         	fcall	_DelayOffPointSelect
 14154                           
 14155                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 14156  1FFB  0878               	movf	_DelayOff,w
 14157  1FFC  0086               	movwf	6
 14158  1FFD  0187               	clrf	7
 14159  1FFE  1401               	bsf	1,0
 14160  1FFF  0008               	return
 14161  2000                     __end_of_DlyOff_Initialization:	
 14162                           
 14163                           	psect	text91
 14164  1223                     __ptext91:	
 14165 ;; *************** function _DelayOffPointSelect *****************
 14166 ;; Defined at:
 14167 ;;		line 7 in file "../src/DelayOff_B1.c"
 14168 ;; Parameters:    Size  Location     Type
 14169 ;;  sw              1    wreg     unsigned char 
 14170 ;; Auto vars:     Size  Location     Type
 14171 ;;  sw              1    1[BANK0 ] unsigned char 
 14172 ;; Return value:  Size  Location     Type
 14173 ;;		None               void
 14174 ;; Registers used:
 14175 ;;		wreg
 14176 ;; Tracked objects:
 14177 ;;		On entry : 0/0
 14178 ;;		On exit  : 0/0
 14179 ;;		Unchanged: 0/0
 14180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14182 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14183 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14184 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14185 ;;Total ram usage:        2 bytes
 14186 ;; Hardware stack levels used:    1
 14187 ;; Hardware stack levels required when called:    5
 14188 ;; This function calls:
 14189 ;;		Nothing
 14190 ;; This function is called by:
 14191 ;;		_DlyOff_Initialization
 14192 ;;		_DlyOff_Main
 14193 ;;		_setDelayOff_GO
 14194 ;; This function uses a non-reentrant model
 14195 ;;
 14196                           
 14197                           
 14198                           ;psect for function _DelayOffPointSelect
 14199  1223                     _DelayOffPointSelect:	
 14200                           
 14201                           ;incstack = 0
 14202                           ; Regs used in _DelayOffPointSelect: [wreg]
 14203                           ;DelayOffPointSelect@sw stored from wreg
 14204  1223  0020               	movlb	0	; select bank0
 14205  1224  00A1               	movwf	DelayOffPointSelect@sw
 14206                           
 14207                           ;DelayOff_B1.c: 9: if (sw == 1) {
 14208  1225  0821               	movf	DelayOffPointSelect@sw,w
 14209  1226  3A01               	xorlw	1
 14210  1227  1D03               	skipz
 14211  1228  2A2E               	goto	l5517
 14212                           
 14213                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 14214  1229  30EA               	movlw	_DlySw1& (0+255)
 14215  122A  00A0               	movwf	??_DelayOffPointSelect
 14216  122B  0820               	movf	??_DelayOffPointSelect,w
 14217  122C  00F8               	movwf	_DelayOff
 14218                           
 14219                           ;DelayOff_B1.c: 11: }
 14220  122D  0008               	return
 14221  122E                     l5517:	
 14222                           
 14223                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 14224  122E  0821               	movf	DelayOffPointSelect@sw,w
 14225  122F  3A02               	xorlw	2
 14226  1230  1D03               	skipz
 14227  1231  0008               	return
 14228                           
 14229                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 14230  1232  30EC               	movlw	_DlySw2& (0+255)
 14231  1233  00A0               	movwf	??_DelayOffPointSelect
 14232  1234  0820               	movf	??_DelayOffPointSelect,w
 14233  1235  00F8               	movwf	_DelayOff
 14234  1236  0008               	return
 14235  1237                     __end_of_DelayOffPointSelect:	
 14236                           
 14237                           	psect	text92
 14238  1274                     __ptext92:	
 14239 ;; *************** function _CC2500_PowerOnInitial *****************
 14240 ;; Defined at:
 14241 ;;		line 122 in file "../src/CC2500_B1.c"
 14242 ;; Parameters:    Size  Location     Type
 14243 ;;		None
 14244 ;; Auto vars:     Size  Location     Type
 14245 ;;		None
 14246 ;; Return value:  Size  Location     Type
 14247 ;;		None               void
 14248 ;; Registers used:
 14249 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14250 ;; Tracked objects:
 14251 ;;		On entry : 0/0
 14252 ;;		On exit  : 0/0
 14253 ;;		Unchanged: 0/0
 14254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14259 ;;Total ram usage:        0 bytes
 14260 ;; Hardware stack levels used:    1
 14261 ;; Hardware stack levels required when called:    8
 14262 ;; This function calls:
 14263 ;;		_CC2500_ClearRXFIFO
 14264 ;;		_CC2500_ClearTXFIFO
 14265 ;;		_CC2500_FrequencyCabr
 14266 ;;		_CC2500_InitPATable
 14267 ;;		_CC2500_InitSetREG
 14268 ;;		_CC2500_PowerRST
 14269 ;;		_CC2500_SIDLEMode
 14270 ;; This function is called by:
 14271 ;;		_main
 14272 ;; This function uses a non-reentrant model
 14273 ;;
 14274                           
 14275                           
 14276                           ;psect for function _CC2500_PowerOnInitial
 14277  1274                     _CC2500_PowerOnInitial:	
 14278                           
 14279                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 14280                           
 14281                           ;incstack = 0
 14282                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14283  1274  3196  26E9  3192   	fcall	_CC2500_PowerRST
 14284                           
 14285                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 14286  1277  3194  24B1  3192   	fcall	_CC2500_InitSetREG
 14287                           
 14288                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 14289  127A  3193  237D  3192   	fcall	_CC2500_InitPATable
 14290                           
 14291                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 14292  127D  319F  2783  3192   	fcall	_CC2500_ClearTXFIFO
 14293                           
 14294                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 14295  1280  319F  277F  3192   	fcall	_CC2500_ClearRXFIFO
 14296                           
 14297                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 14298  1283  3190  2093  3192   	fcall	_CC2500_FrequencyCabr
 14299                           
 14300                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 14301  1286  319F  2787         	fcall	_CC2500_SIDLEMode
 14302  1288  0008               	return
 14303  1289                     __end_of_CC2500_PowerOnInitial:	
 14304                           
 14305                           	psect	text93
 14306  1F87                     __ptext93:	
 14307 ;; *************** function _CC2500_SIDLEMode *****************
 14308 ;; Defined at:
 14309 ;;		line 212 in file "../src/CC2500_B1.c"
 14310 ;; Parameters:    Size  Location     Type
 14311 ;;		None
 14312 ;; Auto vars:     Size  Location     Type
 14313 ;;		None
 14314 ;; Return value:  Size  Location     Type
 14315 ;;		None               void
 14316 ;; Registers used:
 14317 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14318 ;; Tracked objects:
 14319 ;;		On entry : 0/0
 14320 ;;		On exit  : 0/0
 14321 ;;		Unchanged: 0/0
 14322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14327 ;;Total ram usage:        0 bytes
 14328 ;; Hardware stack levels used:    1
 14329 ;; Hardware stack levels required when called:    7
 14330 ;; This function calls:
 14331 ;;		_CC2500_WriteCommand
 14332 ;; This function is called by:
 14333 ;;		_CC2500_PowerOnInitial
 14334 ;; This function uses a non-reentrant model
 14335 ;;
 14336                           
 14337                           
 14338                           ;psect for function _CC2500_SIDLEMode
 14339  1F87                     _CC2500_SIDLEMode:	
 14340                           
 14341                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 14342                           
 14343                           ;incstack = 0
 14344                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14345  1F87  3036               	movlw	54
 14346  1F88  3192  22F8         	fcall	_CC2500_WriteCommand
 14347  1F8A  0008               	return
 14348  1F8B                     __end_of_CC2500_SIDLEMode:	
 14349                           
 14350                           	psect	text94
 14351  16E9                     __ptext94:	
 14352 ;; *************** function _CC2500_PowerRST *****************
 14353 ;; Defined at:
 14354 ;;		line 135 in file "../src/CC2500_B1.c"
 14355 ;; Parameters:    Size  Location     Type
 14356 ;;		None
 14357 ;; Auto vars:     Size  Location     Type
 14358 ;;		None
 14359 ;; Return value:  Size  Location     Type
 14360 ;;		None               void
 14361 ;; Registers used:
 14362 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14363 ;; Tracked objects:
 14364 ;;		On entry : 0/0
 14365 ;;		On exit  : 0/0
 14366 ;;		Unchanged: 0/0
 14367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14370 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14371 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14372 ;;Total ram usage:        1 bytes
 14373 ;; Hardware stack levels used:    1
 14374 ;; Hardware stack levels required when called:    6
 14375 ;; This function calls:
 14376 ;;		_CC2500_WriteByte
 14377 ;;		_DelayTime_1us
 14378 ;;		_Timeout_Counter
 14379 ;;		_set_TimeoutCleared
 14380 ;; This function is called by:
 14381 ;;		_CC2500_PowerOnInitial
 14382 ;; This function uses a non-reentrant model
 14383 ;;
 14384                           
 14385                           
 14386                           ;psect for function _CC2500_PowerRST
 14387  16E9                     _CC2500_PowerRST:	
 14388                           
 14389                           ;CC2500_B1.c: 136: RC1 = 0;
 14390                           
 14391                           ;incstack = 0
 14392                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14393  16E9  0020               	movlb	0	; select bank0
 14394  16EA  108E               	bcf	14,1	;volatile
 14395                           
 14396                           ;CC2500_B1.c: 137: RC0 = 0;
 14397  16EB  100E               	bcf	14,0	;volatile
 14398                           
 14399                           ;CC2500_B1.c: 138: RC4 = 1;
 14400  16EC  160E               	bsf	14,4	;volatile
 14401                           
 14402                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 14403  16ED  300A               	movlw	10
 14404  16EE  00A0               	movwf	DelayTime_1us@count
 14405  16EF  3000               	movlw	0
 14406  16F0  00A1               	movwf	DelayTime_1us@count+1
 14407  16F1  3194  2463  3196   	fcall	_DelayTime_1us
 14408                           
 14409                           ;CC2500_B1.c: 140: RC4 = 0;
 14410  16F4  0020               	movlb	0	; select bank0
 14411  16F5  120E               	bcf	14,4	;volatile
 14412                           
 14413                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 14414  16F6  300A               	movlw	10
 14415  16F7  00A0               	movwf	DelayTime_1us@count
 14416  16F8  3000               	movlw	0
 14417  16F9  00A1               	movwf	DelayTime_1us@count+1
 14418  16FA  3194  2463  3196   	fcall	_DelayTime_1us
 14419                           
 14420                           ;CC2500_B1.c: 142: RC4 = 1;
 14421  16FD  0020               	movlb	0	; select bank0
 14422  16FE  160E               	bsf	14,4	;volatile
 14423                           
 14424                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 14425  16FF  3028               	movlw	40
 14426  1700  00A0               	movwf	DelayTime_1us@count
 14427  1701  3000               	movlw	0
 14428  1702  00A1               	movwf	DelayTime_1us@count+1
 14429  1703  3194  2463  3196   	fcall	_DelayTime_1us
 14430                           
 14431                           ;CC2500_B1.c: 144: RC4 = 0;
 14432  1706  0020               	movlb	0	; select bank0
 14433  1707  120E               	bcf	14,4	;volatile
 14434                           
 14435                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 14436  1708  3030               	movlw	48
 14437  1709  00A6               	movwf	??_CC2500_PowerRST
 14438  170A  0826               	movf	??_CC2500_PowerRST,w
 14439  170B  00FC               	movwf	_SPI0Buffer
 14440                           
 14441                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 14442  170C  2F10               	goto	l6443
 14443  170D                     l6441:	
 14444                           
 14445                           ;CC2500_B1.c: 147: Timeout_Counter();
 14446  170D  3192  225F  3196   	fcall	_Timeout_Counter
 14447  1710                     l6443:	
 14448  1710  0020               	movlb	0	; select bank0
 14449  1711  1D0E               	btfss	14,2	;volatile
 14450  1712  2F16               	goto	l6447
 14451  1713  0021               	movlb	1	; select bank1
 14452  1714  1D2D               	btfss	(_myMain^(0+128)+13),2
 14453  1715  2F0D               	goto	l6441
 14454  1716                     l6447:	
 14455                           
 14456                           ;CC2500_B1.c: 148: };
 14457                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 14458  1716  319F  278F  3196   	fcall	_set_TimeoutCleared
 14459                           
 14460                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 14461  1719  3192  220F  3196   	fcall	_CC2500_WriteByte
 14462                           
 14463                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 14464  171C  2F20               	goto	l6453
 14465  171D                     l6451:	
 14466                           
 14467                           ;CC2500_B1.c: 152: Timeout_Counter();
 14468  171D  3192  225F  3196   	fcall	_Timeout_Counter
 14469  1720                     l6453:	
 14470  1720  0020               	movlb	0	; select bank0
 14471  1721  1D0E               	btfss	14,2	;volatile
 14472  1722  2F26               	goto	l6457
 14473  1723  0021               	movlb	1	; select bank1
 14474  1724  1D2D               	btfss	(_myMain^(0+128)+13),2
 14475  1725  2F1D               	goto	l6451
 14476  1726                     l6457:	
 14477                           
 14478                           ;CC2500_B1.c: 153: };
 14479                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 14480  1726  319F  278F         	fcall	_set_TimeoutCleared
 14481                           
 14482                           ;CC2500_B1.c: 155: RC0 = 0;
 14483  1728  0020               	movlb	0	; select bank0
 14484  1729  100E               	bcf	14,0	;volatile
 14485                           
 14486                           ;CC2500_B1.c: 156: RC4 = 1;
 14487  172A  160E               	bsf	14,4	;volatile
 14488  172B  0008               	return
 14489  172C                     __end_of_CC2500_PowerRST:	
 14490                           
 14491                           	psect	text95
 14492  14B1                     __ptext95:	
 14493 ;; *************** function _CC2500_InitSetREG *****************
 14494 ;; Defined at:
 14495 ;;		line 162 in file "../src/CC2500_B1.c"
 14496 ;; Parameters:    Size  Location     Type
 14497 ;;		None
 14498 ;; Auto vars:     Size  Location     Type
 14499 ;;  loop_c          1    8[BANK0 ] unsigned char 
 14500 ;;  temp2           1    7[BANK0 ] unsigned char 
 14501 ;;  temp1           1    6[BANK0 ] unsigned char 
 14502 ;; Return value:  Size  Location     Type
 14503 ;;		None               void
 14504 ;; Registers used:
 14505 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14506 ;; Tracked objects:
 14507 ;;		On entry : 0/0
 14508 ;;		On exit  : 0/0
 14509 ;;		Unchanged: 0/0
 14510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14512 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14513 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14514 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14515 ;;Total ram usage:        4 bytes
 14516 ;; Hardware stack levels used:    1
 14517 ;; Hardware stack levels required when called:    7
 14518 ;; This function calls:
 14519 ;;		_CC2500_WriteREG
 14520 ;; This function is called by:
 14521 ;;		_CC2500_PowerOnInitial
 14522 ;; This function uses a non-reentrant model
 14523 ;;
 14524                           
 14525                           
 14526                           ;psect for function _CC2500_InitSetREG
 14527  14B1                     _CC2500_InitSetREG:	
 14528                           
 14529                           ;CC2500_B1.c: 163: unsigned char loop_c;
 14530                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 14531                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 14532                           
 14533                           ;incstack = 0
 14534                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14535  14B1  0020               	movlb	0	; select bank0
 14536  14B2  01A8               	clrf	CC2500_InitSetREG@loop_c
 14537  14B3                     L5:	
 14538  14B3  302F               	movlw	47
 14539  14B4  0228               	subwf	CC2500_InitSetREG@loop_c,w
 14540  14B5  1803               	btfsc	3,0
 14541  14B6  0008               	return
 14542                           
 14543                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 14544  14B7  0828               	movf	CC2500_InitSetREG@loop_c,w
 14545  14B8  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 14546  14B9  0084               	movwf	4
 14547  14BA  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 14548  14BB  1803               	skipnc
 14549  14BC  3E01               	addlw	1
 14550  14BD  0085               	movwf	5
 14551  14BE  0800               	movf	0,w	;code access
 14552  14BF  00A5               	movwf	??_CC2500_InitSetREG
 14553  14C0  0825               	movf	??_CC2500_InitSetREG,w
 14554  14C1  00A6               	movwf	CC2500_InitSetREG@temp1
 14555                           
 14556                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 14557  14C2  0828               	movf	CC2500_InitSetREG@loop_c,w
 14558  14C3  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 14559  14C4  0084               	movwf	4
 14560  14C5  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 14561  14C6  1803               	skipnc
 14562  14C7  3E01               	addlw	1
 14563  14C8  0085               	movwf	5
 14564  14C9  0800               	movf	0,w	;code access
 14565  14CA  00A5               	movwf	??_CC2500_InitSetREG
 14566  14CB  0825               	movf	??_CC2500_InitSetREG,w
 14567  14CC  00A7               	movwf	CC2500_InitSetREG@temp2
 14568                           
 14569                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 14570  14CD  0827               	movf	CC2500_InitSetREG@temp2,w
 14571  14CE  00A5               	movwf	??_CC2500_InitSetREG
 14572  14CF  0825               	movf	??_CC2500_InitSetREG,w
 14573  14D0  00A2               	movwf	CC2500_WriteREG@value
 14574  14D1  0826               	movf	CC2500_InitSetREG@temp1,w
 14575  14D2  3193  23DB  3194   	fcall	_CC2500_WriteREG
 14576  14D5  3001               	movlw	1
 14577  14D6  0020               	movlb	0	; select bank0
 14578  14D7  00A5               	movwf	??_CC2500_InitSetREG
 14579  14D8  0825               	movf	??_CC2500_InitSetREG,w
 14580  14D9  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 14581  14DA  2CB3               	goto	L5
 14582  14DB                     __end_of_CC2500_InitSetREG:	
 14583                           
 14584                           	psect	text96
 14585  137D                     __ptext96:	
 14586 ;; *************** function _CC2500_InitPATable *****************
 14587 ;; Defined at:
 14588 ;;		line 177 in file "../src/CC2500_B1.c"
 14589 ;; Parameters:    Size  Location     Type
 14590 ;;		None
 14591 ;; Auto vars:     Size  Location     Type
 14592 ;;  loop_d          1    7[BANK0 ] unsigned char 
 14593 ;;  temp            1    6[BANK0 ] unsigned char 
 14594 ;; Return value:  Size  Location     Type
 14595 ;;		None               void
 14596 ;; Registers used:
 14597 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14598 ;; Tracked objects:
 14599 ;;		On entry : 0/0
 14600 ;;		On exit  : 0/0
 14601 ;;		Unchanged: 0/0
 14602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14604 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14605 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14606 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14607 ;;Total ram usage:        3 bytes
 14608 ;; Hardware stack levels used:    1
 14609 ;; Hardware stack levels required when called:    7
 14610 ;; This function calls:
 14611 ;;		_CC2500_WriteREG
 14612 ;; This function is called by:
 14613 ;;		_CC2500_PowerOnInitial
 14614 ;; This function uses a non-reentrant model
 14615 ;;
 14616                           
 14617                           
 14618                           ;psect for function _CC2500_InitPATable
 14619  137D                     _CC2500_InitPATable:	
 14620                           
 14621                           ;CC2500_B1.c: 178: unsigned char loop_d;
 14622                           ;CC2500_B1.c: 179: unsigned char temp;
 14623                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 14624                           
 14625                           ;incstack = 0
 14626                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14627  137D  0020               	movlb	0	; select bank0
 14628  137E  01A7               	clrf	CC2500_InitPATable@loop_d
 14629  137F                     L6:	
 14630  137F  3008               	movlw	8
 14631  1380  0227               	subwf	CC2500_InitPATable@loop_d,w
 14632  1381  1803               	btfsc	3,0
 14633  1382  0008               	return
 14634                           
 14635                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 14636  1383  0827               	movf	CC2500_InitPATable@loop_d,w
 14637  1384  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 14638  1385  0084               	movwf	4
 14639  1386  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 14640  1387  1803               	skipnc
 14641  1388  3E01               	addlw	1
 14642  1389  0085               	movwf	5
 14643  138A  0800               	movf	0,w	;code access
 14644  138B  00A5               	movwf	??_CC2500_InitPATable
 14645  138C  0825               	movf	??_CC2500_InitPATable,w
 14646  138D  00A6               	movwf	CC2500_InitPATable@temp
 14647                           
 14648                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 14649  138E  0826               	movf	CC2500_InitPATable@temp,w
 14650  138F  00A5               	movwf	??_CC2500_InitPATable
 14651  1390  0825               	movf	??_CC2500_InitPATable,w
 14652  1391  00A2               	movwf	CC2500_WriteREG@value
 14653  1392  303E               	movlw	62
 14654  1393  3193  23DB  3193   	fcall	_CC2500_WriteREG
 14655  1396  3001               	movlw	1
 14656  1397  0020               	movlb	0	; select bank0
 14657  1398  00A5               	movwf	??_CC2500_InitPATable
 14658  1399  0825               	movf	??_CC2500_InitPATable,w
 14659  139A  07A7               	addwf	CC2500_InitPATable@loop_d,f
 14660  139B  2B7F               	goto	L6
 14661  139C                     __end_of_CC2500_InitPATable:	
 14662                           
 14663                           	psect	text97
 14664  13DB                     __ptext97:	
 14665 ;; *************** function _CC2500_WriteREG *****************
 14666 ;; Defined at:
 14667 ;;		line 254 in file "../src/CC2500_B1.c"
 14668 ;; Parameters:    Size  Location     Type
 14669 ;;  w_addr          1    wreg     unsigned char 
 14670 ;;  value           1    2[BANK0 ] unsigned char 
 14671 ;; Auto vars:     Size  Location     Type
 14672 ;;  w_addr          1    4[BANK0 ] unsigned char 
 14673 ;; Return value:  Size  Location     Type
 14674 ;;		None               void
 14675 ;; Registers used:
 14676 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14677 ;; Tracked objects:
 14678 ;;		On entry : 0/0
 14679 ;;		On exit  : 0/0
 14680 ;;		Unchanged: 0/0
 14681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14682 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14683 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14684 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14685 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14686 ;;Total ram usage:        3 bytes
 14687 ;; Hardware stack levels used:    1
 14688 ;; Hardware stack levels required when called:    6
 14689 ;; This function calls:
 14690 ;;		_CC2500_WriteByte
 14691 ;;		_Timeout_Counter
 14692 ;;		_set_TimeoutCleared
 14693 ;; This function is called by:
 14694 ;;		_CC2500_InitSetREG
 14695 ;;		_CC2500_InitPATable
 14696 ;; This function uses a non-reentrant model
 14697 ;;
 14698                           
 14699                           
 14700                           ;psect for function _CC2500_WriteREG
 14701  13DB                     _CC2500_WriteREG:	
 14702                           
 14703                           ;incstack = 0
 14704                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14705                           ;CC2500_WriteREG@w_addr stored from wreg
 14706  13DB  0020               	movlb	0	; select bank0
 14707  13DC  00A4               	movwf	CC2500_WriteREG@w_addr
 14708                           
 14709                           ;CC2500_B1.c: 255: RC4 = 0;
 14710  13DD  120E               	bcf	14,4	;volatile
 14711                           
 14712                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 14713  13DE  0824               	movf	CC2500_WriteREG@w_addr,w
 14714  13DF  00A3               	movwf	??_CC2500_WriteREG
 14715  13E0  0823               	movf	??_CC2500_WriteREG,w
 14716  13E1  00FC               	movwf	_SPI0Buffer
 14717                           
 14718                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 14719  13E2  2BE6               	goto	l6179
 14720  13E3                     l6177:	
 14721                           
 14722                           ;CC2500_B1.c: 258: Timeout_Counter();
 14723  13E3  3192  225F  3193   	fcall	_Timeout_Counter
 14724  13E6                     l6179:	
 14725  13E6  0020               	movlb	0	; select bank0
 14726  13E7  1D0E               	btfss	14,2	;volatile
 14727  13E8  2BEC               	goto	l6183
 14728  13E9  0021               	movlb	1	; select bank1
 14729  13EA  1D2D               	btfss	(_myMain^(0+128)+13),2
 14730  13EB  2BE3               	goto	l6177
 14731  13EC                     l6183:	
 14732                           
 14733                           ;CC2500_B1.c: 259: };
 14734                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 14735  13EC  319F  278F  3193   	fcall	_set_TimeoutCleared
 14736                           
 14737                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 14738  13EF  3192  220F  3193   	fcall	_CC2500_WriteByte
 14739                           
 14740                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 14741  13F2  0020               	movlb	0	; select bank0
 14742  13F3  0822               	movf	CC2500_WriteREG@value,w
 14743  13F4  00A3               	movwf	??_CC2500_WriteREG
 14744  13F5  0823               	movf	??_CC2500_WriteREG,w
 14745  13F6  00FC               	movwf	_SPI0Buffer
 14746                           
 14747                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 14748  13F7  3192  220F         	fcall	_CC2500_WriteByte
 14749                           
 14750                           ;CC2500_B1.c: 265: RC4 = 1;
 14751  13F9  0020               	movlb	0	; select bank0
 14752  13FA  160E               	bsf	14,4	;volatile
 14753  13FB  0008               	return
 14754  13FC                     __end_of_CC2500_WriteREG:	
 14755                           
 14756                           	psect	text98
 14757  1093                     __ptext98:	
 14758 ;; *************** function _CC2500_FrequencyCabr *****************
 14759 ;; Defined at:
 14760 ;;		line 204 in file "../src/CC2500_B1.c"
 14761 ;; Parameters:    Size  Location     Type
 14762 ;;		None
 14763 ;; Auto vars:     Size  Location     Type
 14764 ;;		None
 14765 ;; Return value:  Size  Location     Type
 14766 ;;		None               void
 14767 ;; Registers used:
 14768 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14769 ;; Tracked objects:
 14770 ;;		On entry : 0/0
 14771 ;;		On exit  : 0/0
 14772 ;;		Unchanged: 0/0
 14773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14778 ;;Total ram usage:        0 bytes
 14779 ;; Hardware stack levels used:    1
 14780 ;; Hardware stack levels required when called:    7
 14781 ;; This function calls:
 14782 ;;		_CC2500_WriteCommand
 14783 ;;		_DelayTime_1us
 14784 ;; This function is called by:
 14785 ;;		_CC2500_PowerOnInitial
 14786 ;; This function uses a non-reentrant model
 14787 ;;
 14788                           
 14789                           
 14790                           ;psect for function _CC2500_FrequencyCabr
 14791  1093                     _CC2500_FrequencyCabr:	
 14792                           
 14793                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 14794                           
 14795                           ;incstack = 0
 14796                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14797  1093  3033               	movlw	51
 14798  1094  3192  22F8  3190   	fcall	_CC2500_WriteCommand
 14799                           
 14800                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 14801  1097  30E8               	movlw	232
 14802  1098  0020               	movlb	0	; select bank0
 14803  1099  00A0               	movwf	DelayTime_1us@count
 14804  109A  3003               	movlw	3
 14805  109B  00A1               	movwf	DelayTime_1us@count+1
 14806  109C  3194  2463         	fcall	_DelayTime_1us
 14807  109E  0008               	return
 14808  109F                     __end_of_CC2500_FrequencyCabr:	
 14809                           
 14810                           	psect	text99
 14811  1463                     __ptext99:	
 14812 ;; *************** function _DelayTime_1us *****************
 14813 ;; Defined at:
 14814 ;;		line 323 in file "../src/CC2500_B1.c"
 14815 ;; Parameters:    Size  Location     Type
 14816 ;;  count           2    0[BANK0 ] int 
 14817 ;; Auto vars:     Size  Location     Type
 14818 ;;  j               2    4[BANK0 ] unsigned int 
 14819 ;;  i               2    2[BANK0 ] unsigned int 
 14820 ;; Return value:  Size  Location     Type
 14821 ;;		None               void
 14822 ;; Registers used:
 14823 ;;		wreg, status,2
 14824 ;; Tracked objects:
 14825 ;;		On entry : 0/0
 14826 ;;		On exit  : 0/0
 14827 ;;		Unchanged: 0/0
 14828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14829 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14830 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14832 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14833 ;;Total ram usage:        6 bytes
 14834 ;; Hardware stack levels used:    1
 14835 ;; Hardware stack levels required when called:    5
 14836 ;; This function calls:
 14837 ;;		Nothing
 14838 ;; This function is called by:
 14839 ;;		_CC2500_PowerRST
 14840 ;;		_CC2500_FrequencyCabr
 14841 ;; This function uses a non-reentrant model
 14842 ;;
 14843                           
 14844                           
 14845                           ;psect for function _DelayTime_1us
 14846  1463                     _DelayTime_1us:	
 14847                           
 14848                           ;CC2500_B1.c: 324: unsigned int i, j;
 14849                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 14850                           
 14851                           ;incstack = 0
 14852                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 14853  1463  3001               	movlw	1
 14854  1464  0020               	movlb	0	; select bank0
 14855  1465  00A2               	movwf	DelayTime_1us@i
 14856  1466  3000               	movlw	0
 14857  1467  00A3               	movwf	DelayTime_1us@i+1
 14858  1468                     l378:	
 14859  1468  0821               	movf	DelayTime_1us@count+1,w
 14860  1469  0223               	subwf	DelayTime_1us@i+1,w
 14861  146A  1D03               	skipz
 14862  146B  2C6E               	goto	u5155
 14863  146C  0820               	movf	DelayTime_1us@count,w
 14864  146D  0222               	subwf	DelayTime_1us@i,w
 14865  146E                     u5155:	
 14866  146E  1803               	btfsc	3,0
 14867  146F  0008               	return
 14868                           
 14869                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 14870  1470  01A4               	clrf	DelayTime_1us@j
 14871  1471  01A5               	clrf	DelayTime_1us@j+1
 14872  1472  3000               	movlw	0
 14873  1473  0225               	subwf	DelayTime_1us@j+1,w
 14874  1474  3002               	movlw	2
 14875  1475  1903               	skipnz
 14876  1476  0224               	subwf	DelayTime_1us@j,w
 14877  1477  1803               	btfsc	3,0
 14878  1478  2C84               	goto	l6171
 14879  1479                     l6169:	
 14880  1479  3001               	movlw	1
 14881  147A  07A4               	addwf	DelayTime_1us@j,f
 14882  147B  3000               	movlw	0
 14883  147C  3DA5               	addwfc	DelayTime_1us@j+1,f
 14884  147D  3000               	movlw	0
 14885  147E  0225               	subwf	DelayTime_1us@j+1,w
 14886  147F  3002               	movlw	2
 14887  1480  1903               	skipnz
 14888  1481  0224               	subwf	DelayTime_1us@j,w
 14889  1482  1C03               	skipc
 14890  1483  2C79               	goto	l6169
 14891  1484                     l6171:	
 14892  1484  3001               	movlw	1
 14893  1485  07A2               	addwf	DelayTime_1us@i,f
 14894  1486  3000               	movlw	0
 14895  1487  3DA3               	addwfc	DelayTime_1us@i+1,f
 14896  1488  2C68               	goto	l378
 14897  1489                     __end_of_DelayTime_1us:	
 14898                           
 14899                           	psect	text100
 14900  1F83                     __ptext100:	
 14901 ;; *************** function _CC2500_ClearTXFIFO *****************
 14902 ;; Defined at:
 14903 ;;		line 190 in file "../src/CC2500_B1.c"
 14904 ;; Parameters:    Size  Location     Type
 14905 ;;		None
 14906 ;; Auto vars:     Size  Location     Type
 14907 ;;		None
 14908 ;; Return value:  Size  Location     Type
 14909 ;;		None               void
 14910 ;; Registers used:
 14911 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14912 ;; Tracked objects:
 14913 ;;		On entry : 0/0
 14914 ;;		On exit  : 0/0
 14915 ;;		Unchanged: 0/0
 14916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14921 ;;Total ram usage:        0 bytes
 14922 ;; Hardware stack levels used:    1
 14923 ;; Hardware stack levels required when called:    7
 14924 ;; This function calls:
 14925 ;;		_CC2500_WriteCommand
 14926 ;; This function is called by:
 14927 ;;		_CC2500_PowerOnInitial
 14928 ;; This function uses a non-reentrant model
 14929 ;;
 14930                           
 14931                           
 14932                           ;psect for function _CC2500_ClearTXFIFO
 14933  1F83                     _CC2500_ClearTXFIFO:	
 14934                           
 14935                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 14936                           
 14937                           ;incstack = 0
 14938                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14939  1F83  303B               	movlw	59
 14940  1F84  3192  22F8         	fcall	_CC2500_WriteCommand
 14941  1F86  0008               	return
 14942  1F87                     __end_of_CC2500_ClearTXFIFO:	
 14943                           
 14944                           	psect	text101
 14945  1F7F                     __ptext101:	
 14946 ;; *************** function _CC2500_ClearRXFIFO *****************
 14947 ;; Defined at:
 14948 ;;		line 197 in file "../src/CC2500_B1.c"
 14949 ;; Parameters:    Size  Location     Type
 14950 ;;		None
 14951 ;; Auto vars:     Size  Location     Type
 14952 ;;		None
 14953 ;; Return value:  Size  Location     Type
 14954 ;;		None               void
 14955 ;; Registers used:
 14956 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14957 ;; Tracked objects:
 14958 ;;		On entry : 0/0
 14959 ;;		On exit  : 0/0
 14960 ;;		Unchanged: 0/0
 14961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14966 ;;Total ram usage:        0 bytes
 14967 ;; Hardware stack levels used:    1
 14968 ;; Hardware stack levels required when called:    7
 14969 ;; This function calls:
 14970 ;;		_CC2500_WriteCommand
 14971 ;; This function is called by:
 14972 ;;		_CC2500_PowerOnInitial
 14973 ;; This function uses a non-reentrant model
 14974 ;;
 14975                           
 14976                           
 14977                           ;psect for function _CC2500_ClearRXFIFO
 14978  1F7F                     _CC2500_ClearRXFIFO:	
 14979                           
 14980                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 14981                           
 14982                           ;incstack = 0
 14983                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14984  1F7F  303A               	movlw	58
 14985  1F80  3192  22F8         	fcall	_CC2500_WriteCommand
 14986  1F82  0008               	return
 14987  1F83                     __end_of_CC2500_ClearRXFIFO:	
 14988                           
 14989                           	psect	text102
 14990  12F8                     __ptext102:	
 14991 ;; *************** function _CC2500_WriteCommand *****************
 14992 ;; Defined at:
 14993 ;;		line 288 in file "../src/CC2500_B1.c"
 14994 ;; Parameters:    Size  Location     Type
 14995 ;;  command         1    wreg     unsigned char 
 14996 ;; Auto vars:     Size  Location     Type
 14997 ;;  command         1    3[BANK0 ] unsigned char 
 14998 ;; Return value:  Size  Location     Type
 14999 ;;		None               void
 15000 ;; Registers used:
 15001 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15002 ;; Tracked objects:
 15003 ;;		On entry : 0/0
 15004 ;;		On exit  : 0/0
 15005 ;;		Unchanged: 0/0
 15006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15008 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15009 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15010 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15011 ;;Total ram usage:        2 bytes
 15012 ;; Hardware stack levels used:    1
 15013 ;; Hardware stack levels required when called:    6
 15014 ;; This function calls:
 15015 ;;		_CC2500_WriteByte
 15016 ;;		_Timeout_Counter
 15017 ;;		_set_TimeoutCleared
 15018 ;; This function is called by:
 15019 ;;		_CC2500_TxData
 15020 ;;		_CC2500_ClearTXFIFO
 15021 ;;		_CC2500_ClearRXFIFO
 15022 ;;		_CC2500_FrequencyCabr
 15023 ;;		_CC2500_SIDLEMode
 15024 ;;		_setRF_Main
 15025 ;;		_RF_RxDisable
 15026 ;; This function uses a non-reentrant model
 15027 ;;
 15028                           
 15029                           
 15030                           ;psect for function _CC2500_WriteCommand
 15031  12F8                     _CC2500_WriteCommand:	
 15032                           
 15033                           ;incstack = 0
 15034                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15035                           ;CC2500_WriteCommand@command stored from wreg
 15036  12F8  0020               	movlb	0	; select bank0
 15037  12F9  00A3               	movwf	CC2500_WriteCommand@command
 15038                           
 15039                           ;CC2500_B1.c: 289: RC4 = 0;
 15040  12FA  120E               	bcf	14,4	;volatile
 15041                           
 15042                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 15043  12FB  0823               	movf	CC2500_WriteCommand@command,w
 15044  12FC  00A2               	movwf	??_CC2500_WriteCommand
 15045  12FD  0822               	movf	??_CC2500_WriteCommand,w
 15046  12FE  00FC               	movwf	_SPI0Buffer
 15047                           
 15048                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 15049  12FF  2B03               	goto	l5951
 15050  1300                     l5949:	
 15051                           
 15052                           ;CC2500_B1.c: 293: Timeout_Counter();
 15053  1300  3192  225F  3192   	fcall	_Timeout_Counter
 15054  1303                     l5951:	
 15055  1303  0020               	movlb	0	; select bank0
 15056  1304  1D0E               	btfss	14,2	;volatile
 15057  1305  2B09               	goto	l5955
 15058  1306  0021               	movlb	1	; select bank1
 15059  1307  1D2D               	btfss	(_myMain^(0+128)+13),2
 15060  1308  2B00               	goto	l5949
 15061  1309                     l5955:	
 15062                           
 15063                           ;CC2500_B1.c: 294: };
 15064                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 15065  1309  319F  278F  3192   	fcall	_set_TimeoutCleared
 15066                           
 15067                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 15068  130C  3192  220F         	fcall	_CC2500_WriteByte
 15069                           
 15070                           ;CC2500_B1.c: 298: RC4 = 1;
 15071  130E  0020               	movlb	0	; select bank0
 15072  130F  160E               	bsf	14,4	;volatile
 15073  1310  0008               	return
 15074  1311                     __end_of_CC2500_WriteCommand:	
 15075                           
 15076                           	psect	text103
 15077  1F8F                     __ptext103:	
 15078 ;; *************** function _set_TimeoutCleared *****************
 15079 ;; Defined at:
 15080 ;;		line 278 in file "../src/main_B1.c"
 15081 ;; Parameters:    Size  Location     Type
 15082 ;;		None
 15083 ;; Auto vars:     Size  Location     Type
 15084 ;;		None
 15085 ;; Return value:  Size  Location     Type
 15086 ;;		None               void
 15087 ;; Registers used:
 15088 ;;		status,2
 15089 ;; Tracked objects:
 15090 ;;		On entry : 0/0
 15091 ;;		On exit  : 0/0
 15092 ;;		Unchanged: 0/0
 15093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15098 ;;Total ram usage:        0 bytes
 15099 ;; Hardware stack levels used:    1
 15100 ;; Hardware stack levels required when called:    5
 15101 ;; This function calls:
 15102 ;;		Nothing
 15103 ;; This function is called by:
 15104 ;;		_CC2500_TxData
 15105 ;;		_CC2500_RxData
 15106 ;;		_CC2500_PowerRST
 15107 ;;		_CC2500_WriteREG
 15108 ;;		_CC2500_WriteCommand
 15109 ;;		_CC2500_ReadStatus
 15110 ;;		_TouchPower
 15111 ;;		_CC2500_ReadREG
 15112 ;;		_getAD
 15113 ;; This function uses a non-reentrant model
 15114 ;;
 15115                           
 15116                           
 15117                           ;psect for function _set_TimeoutCleared
 15118  1F8F                     _set_TimeoutCleared:	
 15119                           
 15120                           ;main_B1.c: 279: myMain.Timeout = 0;
 15121                           
 15122                           ;incstack = 0
 15123                           ; Regs used in _set_TimeoutCleared: [status,2]
 15124  1F8F  0021               	movlb	1	; select bank1
 15125  1F90  112D               	bcf	(_myMain^(0+128)+13),2
 15126                           
 15127                           ;main_B1.c: 280: myMain.Timeout_Counter = 0;
 15128  1F91  01AE               	clrf	(_myMain^(0+128)+14)
 15129  1F92  01AF               	clrf	((_myMain+1)^(0+128)+14)
 15130  1F93  0008               	return
 15131  1F94                     __end_of_set_TimeoutCleared:	
 15132                           
 15133                           	psect	text104
 15134  125F                     __ptext104:	
 15135 ;; *************** function _Timeout_Counter *****************
 15136 ;; Defined at:
 15137 ;;		line 268 in file "../src/main_B1.c"
 15138 ;; Parameters:    Size  Location     Type
 15139 ;;		None
 15140 ;; Auto vars:     Size  Location     Type
 15141 ;;		None
 15142 ;; Return value:  Size  Location     Type
 15143 ;;		None               void
 15144 ;; Registers used:
 15145 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15146 ;; Tracked objects:
 15147 ;;		On entry : 0/0
 15148 ;;		On exit  : 0/0
 15149 ;;		Unchanged: 0/0
 15150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15155 ;;Total ram usage:        0 bytes
 15156 ;; Hardware stack levels used:    1
 15157 ;; Hardware stack levels required when called:    5
 15158 ;; This function calls:
 15159 ;;		Nothing
 15160 ;; This function is called by:
 15161 ;;		_CC2500_TxData
 15162 ;;		_CC2500_RxData
 15163 ;;		_CC2500_PowerRST
 15164 ;;		_CC2500_WriteREG
 15165 ;;		_CC2500_WriteCommand
 15166 ;;		_CC2500_ReadStatus
 15167 ;;		_TouchPower
 15168 ;;		_CC2500_ReadREG
 15169 ;;		_getAD
 15170 ;; This function uses a non-reentrant model
 15171 ;;
 15172                           
 15173                           
 15174                           ;psect for function _Timeout_Counter
 15175  125F                     _Timeout_Counter:	
 15176                           
 15177                           ;main_B1.c: 269: myMain.Timeout_Counter++;
 15178                           
 15179                           ;incstack = 0
 15180                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 15181  125F  3001               	movlw	1
 15182  1260  0021               	movlb	1	; select bank1
 15183  1261  07AE               	addwf	(_myMain^(0+128)+14),f
 15184  1262  3000               	movlw	0
 15185  1263  3DAF               	addwfc	((_myMain+1)^(0+128)+14),f
 15186                           
 15187                           ;main_B1.c: 270: if (myMain.Timeout_Counter == 10000) {
 15188  1264  300E               	movlw	14
 15189  1265  3EA0               	addlw	_myMain& (0+255)
 15190  1266  0086               	movwf	6
 15191  1267  0187               	clrf	7
 15192  1268  3F40               	moviw [0]fsr1
 15193  1269  3A10               	xorlw	16
 15194  126A  1D03               	skipz
 15195  126B  2A6E               	goto	u4715
 15196  126C  3F41               	moviw [1]fsr1
 15197  126D  3A27               	xorlw	39
 15198  126E                     u4715:	
 15199  126E  1D03               	skipz
 15200  126F  0008               	return
 15201                           
 15202                           ;main_B1.c: 271: myMain.Timeout_Counter = 0;
 15203  1270  01AE               	clrf	(_myMain^(0+128)+14)
 15204  1271  01AF               	clrf	((_myMain+1)^(0+128)+14)
 15205                           
 15206                           ;main_B1.c: 272: myMain.Timeout = 1;
 15207  1272  152D               	bsf	(_myMain^(0+128)+13),2
 15208  1273  0008               	return
 15209  1274                     __end_of_Timeout_Counter:	
 15210                           
 15211                           	psect	text105
 15212  120F                     __ptext105:	
 15213 ;; *************** function _CC2500_WriteByte *****************
 15214 ;; Defined at:
 15215 ;;		line 222 in file "../src/CC2500_B1.c"
 15216 ;; Parameters:    Size  Location     Type
 15217 ;;		None
 15218 ;; Auto vars:     Size  Location     Type
 15219 ;;  loop_a          1    1[BANK0 ] unsigned char 
 15220 ;; Return value:  Size  Location     Type
 15221 ;;		None               void
 15222 ;; Registers used:
 15223 ;;		wreg, status,2, status,0
 15224 ;; Tracked objects:
 15225 ;;		On entry : 0/0
 15226 ;;		On exit  : 0/0
 15227 ;;		Unchanged: 0/0
 15228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15230 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15231 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15232 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15233 ;;Total ram usage:        2 bytes
 15234 ;; Hardware stack levels used:    1
 15235 ;; Hardware stack levels required when called:    5
 15236 ;; This function calls:
 15237 ;;		Nothing
 15238 ;; This function is called by:
 15239 ;;		_CC2500_TxData
 15240 ;;		_CC2500_RxData
 15241 ;;		_CC2500_PowerRST
 15242 ;;		_CC2500_WriteREG
 15243 ;;		_CC2500_WriteCommand
 15244 ;;		_CC2500_ReadStatus
 15245 ;;		_CC2500_ReadREG
 15246 ;; This function uses a non-reentrant model
 15247 ;;
 15248                           
 15249                           
 15250                           ;psect for function _CC2500_WriteByte
 15251  120F                     _CC2500_WriteByte:	
 15252                           
 15253                           ;CC2500_B1.c: 223: unsigned char loop_a;
 15254                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 15255                           
 15256                           ;incstack = 0
 15257                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 15258  120F  0020               	movlb	0	; select bank0
 15259  1210  01A1               	clrf	CC2500_WriteByte@loop_a
 15260  1211                     L7:	
 15261  1211  3008               	movlw	8
 15262  1212  0221               	subwf	CC2500_WriteByte@loop_a,w
 15263  1213  1803               	btfsc	3,0
 15264  1214  0008               	return
 15265                           
 15266                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 15267  1215  1FFC               	btfss	_SPI0Buffer,7
 15268  1216  2A19               	goto	l334
 15269                           
 15270                           ;CC2500_B1.c: 226: RC0 = 1;
 15271  1217  140E               	bsf	14,0	;volatile
 15272  1218  2A1A               	goto	l335
 15273  1219                     l334:	
 15274                           
 15275                           ;CC2500_B1.c: 227: else
 15276                           ;CC2500_B1.c: 228: RC0 = 0;
 15277  1219  100E               	bcf	14,0	;volatile
 15278  121A                     l335:	
 15279                           
 15280                           ;CC2500_B1.c: 229: RC1 = 1;
 15281  121A  148E               	bsf	14,1	;volatile
 15282                           
 15283                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 15284  121B  1003               	clrc
 15285  121C  0DFC               	rlf	_SPI0Buffer,f
 15286                           
 15287                           ;CC2500_B1.c: 231: RC1 = 0;
 15288  121D  108E               	bcf	14,1	;volatile
 15289  121E  3001               	movlw	1
 15290  121F  00A0               	movwf	??_CC2500_WriteByte
 15291  1220  0820               	movf	??_CC2500_WriteByte,w
 15292  1221  07A1               	addwf	CC2500_WriteByte@loop_a,f
 15293  1222  2A11               	goto	L7
 15294  1223                     __end_of_CC2500_WriteByte:	
 15295                           
 15296                           	psect	text106
 15297  17B6                     __ptext106:	
 15298 ;; *************** function _Buzzer_Main *****************
 15299 ;; Defined at:
 15300 ;;		line 46 in file "../src/Buzzer_B1.c"
 15301 ;; Parameters:    Size  Location     Type
 15302 ;;		None
 15303 ;; Auto vars:     Size  Location     Type
 15304 ;;		None
 15305 ;; Return value:  Size  Location     Type
 15306 ;;		None               void
 15307 ;; Registers used:
 15308 ;;		wreg, status,2, status,0
 15309 ;; Tracked objects:
 15310 ;;		On entry : 0/0
 15311 ;;		On exit  : 0/0
 15312 ;;		Unchanged: 0/0
 15313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15316 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15317 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15318 ;;Total ram usage:        1 bytes
 15319 ;; Hardware stack levels used:    1
 15320 ;; Hardware stack levels required when called:    5
 15321 ;; This function calls:
 15322 ;;		Nothing
 15323 ;; This function is called by:
 15324 ;;		_main
 15325 ;; This function uses a non-reentrant model
 15326 ;;
 15327                           
 15328                           
 15329                           ;psect for function _Buzzer_Main
 15330  17B6                     _Buzzer_Main:	
 15331                           
 15332                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 15333                           
 15334                           ;incstack = 0
 15335                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 15336  17B6  0021               	movlb	1	; select bank1
 15337  17B7  1CB0               	btfss	_Buz1^(0+128),1
 15338  17B8  0008               	return
 15339                           
 15340                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 15341  17B9  3001               	movlw	1
 15342  17BA  07B1               	addwf	(_Buz1^(0+128)+1),f
 15343  17BB  3000               	movlw	0
 15344  17BC  3DB2               	addwfc	((_Buz1+1)^(0+128)+1),f
 15345                           
 15346                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 15347  17BD  0837               	movf	((_Buz1+1)^(0+128)+6),w
 15348  17BE  0232               	subwf	((_Buz1+1)^(0+128)+1),w
 15349  17BF  1D03               	skipz
 15350  17C0  2FC3               	goto	u6565
 15351  17C1  0836               	movf	(_Buz1^(0+128)+6),w
 15352  17C2  0231               	subwf	(_Buz1^(0+128)+1),w
 15353  17C3                     u6565:	
 15354  17C3  1C03               	skipc
 15355  17C4  0008               	return
 15356                           
 15357                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 15358  17C5  01B1               	clrf	(_Buz1^(0+128)+1)
 15359  17C6  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 15360                           
 15361                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 15362  17C7  12B0               	bcf	_Buz1^(0+128),5
 15363  17C8  0020               	movlb	0	; select bank0
 15364  17C9  1D8D               	btfss	13,3	;volatile
 15365  17CA  2FCD               	goto	l7043
 15366  17CB  0021               	movlb	1	; select bank1
 15367  17CC  16B0               	bsf	_Buz1^(0+128),5
 15368  17CD                     l7043:	
 15369                           
 15370                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 15371  17CD  0021               	movlb	1	; select bank1
 15372  17CE  1AB0               	btfsc	_Buz1^(0+128),5
 15373  17CF  2FF9               	goto	l108
 15374                           
 15375                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 15376  17D0  08B3               	movf	(_Buz1^(0+128)+3),f
 15377  17D1  1D03               	skipz
 15378  17D2  2FF5               	goto	l109
 15379                           
 15380                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 15381  17D3  1DB0               	btfss	_Buz1^(0+128),3
 15382  17D4  2FE3               	goto	l110
 15383                           
 15384                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 15385  17D5  11B0               	bcf	_Buz1^(0+128),3
 15386                           
 15387                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 15388  17D6  0834               	movf	(_Buz1^(0+128)+4),w
 15389  17D7  0020               	movlb	0	; select bank0
 15390  17D8  00A0               	movwf	??_Buzzer_Main
 15391  17D9  0820               	movf	??_Buzzer_Main,w
 15392  17DA  0021               	movlb	1	; select bank1
 15393  17DB  00B3               	movwf	(_Buz1^(0+128)+3)
 15394                           
 15395                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 15396  17DC  0839               	movf	((_Buz1+1)^(0+128)+8),w
 15397  17DD  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 15398  17DE  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 15399  17DF  0838               	movf	(_Buz1^(0+128)+8),w
 15400  17E0  01B6               	clrf	(_Buz1^(0+128)+6)
 15401  17E1  07B6               	addwf	(_Buz1^(0+128)+6),f
 15402                           
 15403                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 15404  17E2  0008               	return
 15405  17E3                     l110:	
 15406  17E3  1E30               	btfss	_Buz1^(0+128),4
 15407  17E4  2FF3               	goto	l112
 15408                           
 15409                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 15410  17E5  1230               	bcf	_Buz1^(0+128),4
 15411                           
 15412                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 15413  17E6  0835               	movf	(_Buz1^(0+128)+5),w
 15414  17E7  0020               	movlb	0	; select bank0
 15415  17E8  00A0               	movwf	??_Buzzer_Main
 15416  17E9  0820               	movf	??_Buzzer_Main,w
 15417  17EA  0021               	movlb	1	; select bank1
 15418  17EB  00B3               	movwf	(_Buz1^(0+128)+3)
 15419                           
 15420                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 15421  17EC  083B               	movf	((_Buz1+1)^(0+128)+10),w
 15422  17ED  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 15423  17EE  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 15424  17EF  083A               	movf	(_Buz1^(0+128)+10),w
 15425  17F0  01B6               	clrf	(_Buz1^(0+128)+6)
 15426  17F1  07B6               	addwf	(_Buz1^(0+128)+6),f
 15427                           
 15428                           ;Buzzer_B1.c: 62: } else {
 15429  17F2  0008               	return
 15430  17F3                     l112:	
 15431                           
 15432                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 15433  17F3  10B0               	bcf	_Buz1^(0+128),1
 15434                           
 15435                           ;Buzzer_B1.c: 64: }
 15436                           ;Buzzer_B1.c: 65: } else {
 15437  17F4  0008               	return
 15438  17F5                     l109:	
 15439                           
 15440                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 15441  17F5  16B0               	bsf	_Buz1^(0+128),5
 15442                           
 15443                           ;Buzzer_B1.c: 68: RB3 = 1;
 15444  17F6  0020               	movlb	0	; select bank0
 15445  17F7  158D               	bsf	13,3	;volatile
 15446                           
 15447                           ;Buzzer_B1.c: 69: }
 15448                           ;Buzzer_B1.c: 70: } else {
 15449  17F8  0008               	return
 15450  17F9                     l108:	
 15451                           
 15452                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 15453  17F9  12B0               	bcf	_Buz1^(0+128),5
 15454                           
 15455                           ;Buzzer_B1.c: 73: RB3 = 0;
 15456  17FA  0020               	movlb	0	; select bank0
 15457  17FB  118D               	bcf	13,3	;volatile
 15458                           
 15459                           ;Buzzer_B1.c: 75: Buz1.Count--;
 15460  17FC  3001               	movlw	1
 15461  17FD  0021               	movlb	1	; select bank1
 15462  17FE  02B3               	subwf	(_Buz1^(0+128)+3),f
 15463  17FF  0008               	return
 15464  1800                     __end_of_Buzzer_Main:	
 15465                           
 15466                           	psect	text107
 15467  1F76                     __ptext107:	
 15468 ;; *************** function _Buzzer_Initialization *****************
 15469 ;; Defined at:
 15470 ;;		line 11 in file "../src/Buzzer_B1.c"
 15471 ;; Parameters:    Size  Location     Type
 15472 ;;		None
 15473 ;; Auto vars:     Size  Location     Type
 15474 ;;		None
 15475 ;; Return value:  Size  Location     Type
 15476 ;;		None               void
 15477 ;; Registers used:
 15478 ;;		None
 15479 ;; Tracked objects:
 15480 ;;		On entry : 0/0
 15481 ;;		On exit  : 0/0
 15482 ;;		Unchanged: 0/0
 15483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15488 ;;Total ram usage:        0 bytes
 15489 ;; Hardware stack levels used:    1
 15490 ;; Hardware stack levels required when called:    5
 15491 ;; This function calls:
 15492 ;;		Nothing
 15493 ;; This function is called by:
 15494 ;;		_main
 15495 ;; This function uses a non-reentrant model
 15496 ;;
 15497                           
 15498                           
 15499                           ;psect for function _Buzzer_Initialization
 15500  1F76                     _Buzzer_Initialization:	
 15501                           
 15502                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 15503                           
 15504                           ;incstack = 0
 15505                           ; Regs used in _Buzzer_Initialization: []
 15506  1F76  0021               	movlb	1	; select bank1
 15507  1F77  1430               	bsf	_Buz1^(0+128),0
 15508  1F78  0008               	return
 15509  1F79                     __end_of_Buzzer_Initialization:	
 15510                           
 15511                           	psect	intentry
 15512  0004                     __pintentry:	
 15513 ;; *************** function _ISR *****************
 15514 ;; Defined at:
 15515 ;;		line 107 in file "../src/MCU_B1.c"
 15516 ;; Parameters:    Size  Location     Type
 15517 ;;		None
 15518 ;; Auto vars:     Size  Location     Type
 15519 ;;		None
 15520 ;; Return value:  Size  Location     Type
 15521 ;;		None               void
 15522 ;; Registers used:
 15523 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15524 ;; Tracked objects:
 15525 ;;		On entry : 0/0
 15526 ;;		On exit  : 0/0
 15527 ;;		Unchanged: 0/0
 15528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15531 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15532 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15533 ;;Total ram usage:        1 bytes
 15534 ;; Hardware stack levels used:    1
 15535 ;; Hardware stack levels required when called:    4
 15536 ;; This function calls:
 15537 ;;		_INT_ISR
 15538 ;;		_IOC_ISR
 15539 ;;		_TMR1_ISR
 15540 ;; This function is called by:
 15541 ;;		Interrupt level 1
 15542 ;; This function uses a non-reentrant model
 15543 ;;
 15544                           
 15545  0004                     _ISR:	
 15546                           
 15547                           ;incstack = 0
 15548                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15549  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15550  0005  3180               	pagesel	$
 15551  0006  0020               	movlb	0	; select bank0
 15552  0007  087F               	movf	127,w
 15553  0008  00F7               	movwf	??_ISR
 15554                           
 15555                           ;MCU_B1.c: 109: IOC_ISR();
 15556  0009  3190  20CF  3180   	fcall	_IOC_ISR
 15557                           
 15558                           ;MCU_B1.c: 111: ;;
 15559                           ;MCU_B1.c: 113: TMR1_ISR();
 15560  000C  3194  2489  3180   	fcall	_TMR1_ISR
 15561                           
 15562                           ;MCU_B1.c: 115: ;;
 15563                           ;MCU_B1.c: 117: INT_ISR();
 15564  000F  319F  27E4         	fcall	_INT_ISR
 15565  0011  0877               	movf	??_ISR,w
 15566  0012  0020               	movlb	0	; select bank0
 15567  0013  00FF               	movwf	127
 15568  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 15569  0015  0009               	retfie
 15570  0016                     __end_of_ISR:	
 15571                           
 15572                           	psect	text109
 15573  1489                     __ptext109:	
 15574 ;; *************** function _TMR1_ISR *****************
 15575 ;; Defined at:
 15576 ;;		line 209 in file "../src/MCU_B1.c"
 15577 ;; Parameters:    Size  Location     Type
 15578 ;;		None
 15579 ;; Auto vars:     Size  Location     Type
 15580 ;;		None
 15581 ;; Return value:  Size  Location     Type
 15582 ;;		None               void
 15583 ;; Registers used:
 15584 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15585 ;; Tracked objects:
 15586 ;;		On entry : 0/0
 15587 ;;		On exit  : 0/0
 15588 ;;		Unchanged: 0/0
 15589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15594 ;;Total ram usage:        0 bytes
 15595 ;; Hardware stack levels used:    1
 15596 ;; Hardware stack levels required when called:    2
 15597 ;; This function calls:
 15598 ;;		_setDimmerLights_IntrControl
 15599 ;; This function is called by:
 15600 ;;		_ISR
 15601 ;; This function uses a non-reentrant model
 15602 ;;
 15603                           
 15604                           
 15605                           ;psect for function _TMR1_ISR
 15606  1489                     _TMR1_ISR:	
 15607                           
 15608                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 15609                           
 15610                           ;incstack = 0
 15611                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15612  1489  0021               	movlb	1	; select bank1
 15613  148A  1C11               	btfss	17,0	;volatile
 15614  148B  0008               	return
 15615  148C  0020               	movlb	0	; select bank0
 15616  148D  1C11               	btfss	17,0	;volatile
 15617  148E  0008               	return
 15618                           
 15619                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 15620  148F  30FA               	movlw	250
 15621  1490  0097               	movwf	23	;volatile
 15622                           
 15623                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 15624  1491  3038               	movlw	56
 15625  1492  0096               	movwf	22	;volatile
 15626                           
 15627                           ;MCU_B1.c: 214: TMR1IF = 0;
 15628  1493  1011               	bcf	17,0	;volatile
 15629                           
 15630                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 15631  1494  3001               	movlw	1
 15632  1495  3180  2046  3194   	fcall	_setDimmerLights_IntrControl
 15633                           
 15634                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 15635  1498  3002               	movlw	2
 15636  1499  3180  2046  3194   	fcall	_setDimmerLights_IntrControl
 15637                           
 15638                           ;MCU_B1.c: 234: Timer1.Count++;
 15639  149C  3001               	movlw	1
 15640  149D  0021               	movlb	1	; select bank1
 15641  149E  07C9               	addwf	(_Timer1^(0+128)+1),f
 15642  149F  3000               	movlw	0
 15643  14A0  3DCA               	addwfc	((_Timer1+1)^(0+128)+1),f
 15644                           
 15645                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 15646  14A1  3001               	movlw	1
 15647  14A2  3EC8               	addlw	_Timer1& (0+255)
 15648  14A3  0086               	movwf	6
 15649  14A4  0187               	clrf	7
 15650  14A5  3F40               	moviw [0]fsr1
 15651  14A6  3A64               	xorlw	100
 15652  14A7  1D03               	skipz
 15653  14A8  2CAB               	goto	u667_25
 15654  14A9  3F41               	moviw [1]fsr1
 15655  14AA  3A00               	xorlw	0
 15656  14AB                     u667_25:	
 15657  14AB  1D03               	skipz
 15658  14AC  0008               	return
 15659                           
 15660                           ;MCU_B1.c: 236: {
 15661                           ;MCU_B1.c: 237: Timer1.Count = 0;
 15662  14AD  01C9               	clrf	(_Timer1^(0+128)+1)
 15663  14AE  01CA               	clrf	((_Timer1+1)^(0+128)+1)
 15664                           
 15665                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 15666  14AF  1448               	bsf	_Timer1^(0+128),0
 15667  14B0  0008               	return
 15668  14B1                     __end_of_TMR1_ISR:	
 15669                           
 15670                           	psect	text110
 15671  0046                     __ptext110:	
 15672 ;; *************** function _setDimmerLights_IntrControl *****************
 15673 ;; Defined at:
 15674 ;;		line 94 in file "../src/Dimmer_B1.c"
 15675 ;; Parameters:    Size  Location     Type
 15676 ;;  lights          1    wreg     unsigned char 
 15677 ;; Auto vars:     Size  Location     Type
 15678 ;;  lights          1    6[COMMON] unsigned char 
 15679 ;; Return value:  Size  Location     Type
 15680 ;;		None               void
 15681 ;; Registers used:
 15682 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15683 ;; Tracked objects:
 15684 ;;		On entry : 0/0
 15685 ;;		On exit  : 0/0
 15686 ;;		Unchanged: 0/0
 15687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15689 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15690 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15691 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15692 ;;Total ram usage:        5 bytes
 15693 ;; Hardware stack levels used:    1
 15694 ;; Hardware stack levels required when called:    1
 15695 ;; This function calls:
 15696 ;;		_DimmerIntrPointSelect
 15697 ;; This function is called by:
 15698 ;;		_TMR1_ISR
 15699 ;; This function uses a non-reentrant model
 15700 ;;
 15701                           
 15702                           
 15703                           ;psect for function _setDimmerLights_IntrControl
 15704  0046                     _setDimmerLights_IntrControl:	
 15705                           
 15706                           ;incstack = 0
 15707                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15708                           ;setDimmerLights_IntrControl@lights stored from wreg
 15709  0046  00F6               	movwf	setDimmerLights_IntrControl@lights
 15710                           
 15711                           ;Dimmer_B1.c: 229: DimmerIntrPointSelect(lights);
 15712  0047  0876               	movf	setDimmerLights_IntrControl@lights,w
 15713  0048  3191  21B2  3180   	fcall	_DimmerIntrPointSelect
 15714                           
 15715                           ;Dimmer_B1.c: 230: if (DimmerLightsIntr->GO == 1) {
 15716  004B  087A               	movf	_DimmerLightsIntr,w
 15717  004C  0086               	movwf	6
 15718  004D  3001               	movlw	1	; select bank2/3
 15719  004E  0087               	movwf	7
 15720  004F  1C01               	btfss	1,0
 15721  0050  28CE               	goto	i1l6573
 15722                           
 15723                           ;Dimmer_B1.c: 231: DimmerLightsIntr->Count++;
 15724  0051  3001               	movlw	1
 15725  0052  00F2               	movwf	??_setDimmerLights_IntrControl
 15726  0053  087A               	movf	_DimmerLightsIntr,w
 15727  0054  3E03               	addlw	3
 15728  0055  0086               	movwf	6
 15729  0056  3001               	movlw	1	; select bank2/3
 15730  0057  0087               	movwf	7
 15731  0058  0872               	movf	??_setDimmerLights_IntrControl,w
 15732  0059  0781               	addwf	1,f
 15733                           
 15734                           ;Dimmer_B1.c: 232: if (DimmerLightsIntr->Count
 15735                           ;Dimmer_B1.c: 233: >= (DimmerLightsIntr->DimmingValue - Dimmer->Correction)) {
 15736  005A  0021               	movlb	1	; select bank1
 15737  005B  0850               	movf	_Dimmer^(0+128),w
 15738  005C  3E02               	addlw	2
 15739  005D  0086               	movwf	6
 15740  005E  0187               	clrf	7
 15741  005F  0801               	movf	1,w
 15742  0060  00F2               	movwf	??_setDimmerLights_IntrControl
 15743  0061  01F3               	clrf	??_setDimmerLights_IntrControl+1
 15744  0062  09F2               	comf	??_setDimmerLights_IntrControl,f
 15745  0063  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 15746  0064  0AF2               	incf	??_setDimmerLights_IntrControl,f
 15747  0065  1903               	skipnz
 15748  0066  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 15749  0067  087A               	movf	_DimmerLightsIntr,w
 15750  0068  3E04               	addlw	4
 15751  0069  0086               	movwf	6
 15752  006A  3001               	movlw	1	; select bank2/3
 15753  006B  0087               	movwf	7
 15754  006C  0801               	movf	1,w
 15755  006D  0772               	addwf	??_setDimmerLights_IntrControl,w
 15756  006E  00F4               	movwf	??_setDimmerLights_IntrControl+2
 15757  006F  0873               	movf	??_setDimmerLights_IntrControl+1,w
 15758  0070  1803               	skipnc
 15759  0071  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 15760  0072  00F5               	movwf	??_setDimmerLights_IntrControl+3
 15761  0073  087A               	movf	_DimmerLightsIntr,w
 15762  0074  3E03               	addlw	3
 15763  0075  0086               	movwf	6
 15764  0076  3001               	movlw	1	; select bank2/3
 15765  0077  0087               	movwf	7
 15766  0078  0875               	movf	??_setDimmerLights_IntrControl+3,w
 15767  0079  3A80               	xorlw	128
 15768  007A  3C80               	sublw	128
 15769  007B  1D03               	skipz
 15770  007C  287F               	goto	u568_25
 15771  007D  0874               	movf	??_setDimmerLights_IntrControl+2,w
 15772  007E  0201               	subwf	1,w
 15773  007F                     u568_25:	
 15774  007F  1C03               	skipc
 15775  0080  2982               	goto	i1l765
 15776                           
 15777                           ;Dimmer_B1.c: 234: DimmerLightsIntr->Count = 0;
 15778  0081  087A               	movf	_DimmerLightsIntr,w
 15779  0082  3E03               	addlw	3
 15780  0083  0086               	movwf	6
 15781  0084  3001               	movlw	1	; select bank2/3
 15782  0085  0087               	movwf	7
 15783  0086  0181               	clrf	1
 15784                           
 15785                           ;Dimmer_B1.c: 235: DimmerLightsIntr->GO = 0;
 15786  0087  087A               	movf	_DimmerLightsIntr,w
 15787  0088  0086               	movwf	6
 15788  0089  3001               	movlw	1	; select bank2/3
 15789  008A  0087               	movwf	7
 15790  008B  1001               	bcf	1,0
 15791                           
 15792                           ;Dimmer_B1.c: 236: DimmerLightsIntr->Flag = 1;
 15793  008C  087A               	movf	_DimmerLightsIntr,w
 15794  008D  3E08               	addlw	8
 15795  008E  0086               	movwf	6
 15796  008F  3001               	movlw	1	; select bank2/3
 15797  0090  0087               	movwf	7
 15798  0091  1401               	bsf	1,0
 15799                           
 15800                           ;Dimmer_B1.c: 237: if (DimmerLightsIntr->StatusFlag) {
 15801  0092  087A               	movf	_DimmerLightsIntr,w
 15802  0093  0086               	movwf	6
 15803  0094  3001               	movlw	1	; select bank2/3
 15804  0095  0087               	movwf	7
 15805  0096  1F01               	btfss	1,6
 15806  0097  2982               	goto	i1l765
 15807                           
 15808                           ;Dimmer_B1.c: 239: if (lights == 1) {
 15809  0098  0876               	movf	setDimmerLights_IntrControl@lights,w
 15810  0099  3A01               	xorlw	1
 15811  009A  1D03               	skipz
 15812  009B  289E               	goto	i1l6555
 15813                           
 15814                           ;Dimmer_B1.c: 240: RA7 = 0;
 15815  009C  0020               	movlb	0	; select bank0
 15816  009D  138C               	bcf	12,7	;volatile
 15817  009E                     i1l6555:	
 15818                           ;Dimmer_B1.c: 241: ;;
 15819                           
 15820                           
 15821                           ;Dimmer_B1.c: 242: }
 15822                           ;Dimmer_B1.c: 245: if (lights == 2) {
 15823  009E  0876               	movf	setDimmerLights_IntrControl@lights,w
 15824  009F  3A02               	xorlw	2
 15825  00A0  1D03               	skipz
 15826  00A1  28A4               	goto	i1l6559
 15827                           
 15828                           ;Dimmer_B1.c: 246: RB4 = 0;
 15829  00A2  0020               	movlb	0	; select bank0
 15830  00A3  120D               	bcf	13,4	;volatile
 15831  00A4                     i1l6559:	
 15832                           
 15833                           ;Dimmer_B1.c: 247: }
 15834                           ;Dimmer_B1.c: 249: if (DimmerLightsIntr->MosfetClose) {
 15835  00A4  087A               	movf	_DimmerLightsIntr,w
 15836  00A5  3E08               	addlw	8
 15837  00A6  0086               	movwf	6
 15838  00A7  3001               	movlw	1	; select bank2/3
 15839  00A8  0087               	movwf	7
 15840  00A9  1F81               	btfss	1,7
 15841  00AA  2982               	goto	i1l765
 15842                           
 15843                           ;Dimmer_B1.c: 250: DimmerLightsIntr->MosfetClose = 0;
 15844  00AB  087A               	movf	_DimmerLightsIntr,w
 15845  00AC  3E08               	addlw	8
 15846  00AD  0086               	movwf	6
 15847  00AE  3001               	movlw	1	; select bank2/3
 15848  00AF  0087               	movwf	7
 15849  00B0  1381               	bcf	1,7
 15850                           
 15851                           ;Dimmer_B1.c: 251: DimmerLightsIntr->StatusFlag = 0;
 15852  00B1  087A               	movf	_DimmerLightsIntr,w
 15853  00B2  0086               	movwf	6
 15854  00B3  3001               	movlw	1	; select bank2/3
 15855  00B4  0087               	movwf	7
 15856  00B5  1301               	bcf	1,6
 15857                           
 15858                           ;Dimmer_B1.c: 252: DimmerLightsIntr->Clear = 1;
 15859  00B6  087A               	movf	_DimmerLightsIntr,w
 15860  00B7  3E09               	addlw	9
 15861  00B8  0086               	movwf	6
 15862  00B9  3001               	movlw	1	; select bank2/3
 15863  00BA  0087               	movwf	7
 15864  00BB  1501               	bsf	1,2
 15865                           
 15866                           ;Dimmer_B1.c: 254: if (lights == 1) {
 15867  00BC  0876               	movf	setDimmerLights_IntrControl@lights,w
 15868  00BD  3A01               	xorlw	1
 15869  00BE  1D03               	skipz
 15870  00BF  28C2               	goto	i1l6567
 15871                           
 15872                           ;Dimmer_B1.c: 255: RA3 = 0;
 15873  00C0  0020               	movlb	0	; select bank0
 15874  00C1  118C               	bcf	12,3	;volatile
 15875  00C2                     i1l6567:	
 15876                           
 15877                           ;Dimmer_B1.c: 257: }
 15878                           ;Dimmer_B1.c: 260: if (lights == 2) {
 15879  00C2  0876               	movf	setDimmerLights_IntrControl@lights,w
 15880  00C3  3A02               	xorlw	2
 15881  00C4  1D03               	skipz
 15882  00C5  28C8               	goto	i1l6571
 15883                           
 15884                           ;Dimmer_B1.c: 261: RC7 = 0;
 15885  00C6  0020               	movlb	0	; select bank0
 15886  00C7  138E               	bcf	14,7	;volatile
 15887  00C8                     i1l6571:	
 15888                           
 15889                           ;Dimmer_B1.c: 262: }
 15890                           ;Dimmer_B1.c: 264: Dimmer->Detect = 1;
 15891  00C8  0021               	movlb	1	; select bank1
 15892  00C9  0850               	movf	_Dimmer^(0+128),w
 15893  00CA  0086               	movwf	6
 15894  00CB  0187               	clrf	7
 15895  00CC  1401               	bsf	1,0
 15896                           
 15897                           ;Dimmer_B1.c: 266: }
 15898                           ;Dimmer_B1.c: 267: }
 15899                           ;Dimmer_B1.c: 268: }
 15900                           ;Dimmer_B1.c: 269: } else {
 15901                           
 15902                           ;Dimmer_B1.c: 265: ;;
 15903  00CD  2982               	goto	i1l765
 15904  00CE                     i1l6573:	
 15905                           
 15906                           ;Dimmer_B1.c: 270: if (DimmerLightsIntr->Flag == 1) {
 15907  00CE  087A               	movf	_DimmerLightsIntr,w
 15908  00CF  3E08               	addlw	8
 15909  00D0  0086               	movwf	6
 15910  00D1  3001               	movlw	1	; select bank2/3
 15911  00D2  0087               	movwf	7
 15912  00D3  1C01               	btfss	1,0
 15913  00D4  2982               	goto	i1l765
 15914                           
 15915                           ;Dimmer_B1.c: 271: DimmerLightsIntr->Flag = 0;
 15916  00D5  087A               	movf	_DimmerLightsIntr,w
 15917  00D6  3E08               	addlw	8
 15918  00D7  0086               	movwf	6
 15919  00D8  3001               	movlw	1	; select bank2/3
 15920  00D9  0087               	movwf	7
 15921  00DA  1001               	bcf	1,0
 15922                           
 15923                           ;Dimmer_B1.c: 272: if (DimmerLightsIntr->Signal) {
 15924  00DB  087A               	movf	_DimmerLightsIntr,w
 15925  00DC  0086               	movwf	6
 15926  00DD  3001               	movlw	1	; select bank2/3
 15927  00DE  0087               	movwf	7
 15928  00DF  1C81               	btfss	1,1
 15929  00E0  2982               	goto	i1l765
 15930                           
 15931                           ;Dimmer_B1.c: 273: DimmerLightsIntr->DimmingTime++;
 15932  00E1  3001               	movlw	1
 15933  00E2  00F2               	movwf	??_setDimmerLights_IntrControl
 15934  00E3  0A7A               	incf	_DimmerLightsIntr,w
 15935  00E4  0086               	movwf	6
 15936  00E5  3001               	movlw	1	; select bank2/3
 15937  00E6  0087               	movwf	7
 15938  00E7  0872               	movf	??_setDimmerLights_IntrControl,w
 15939  00E8  0781               	addwf	1,f
 15940                           
 15941                           ;Dimmer_B1.c: 274: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 15942  00E9  0A7A               	incf	_DimmerLightsIntr,w
 15943  00EA  0086               	movwf	6
 15944  00EB  3001               	movlw	1	; select bank2/3
 15945  00EC  0087               	movwf	7
 15946  00ED  087A               	movf	_DimmerLightsIntr,w
 15947  00EE  3E02               	addlw	2
 15948  00EF  0084               	movwf	4
 15949  00F0  3001               	movlw	1	; select bank2/3
 15950  00F1  0085               	movwf	5
 15951  00F2  0800               	movf	0,w
 15952  00F3  0201               	subwf	1,w
 15953  00F4  1C03               	skipc
 15954  00F5  2982               	goto	i1l765
 15955                           
 15956                           ;Dimmer_B1.c: 275: DimmerLightsIntr->DimmingTime = 0;
 15957  00F6  0A7A               	incf	_DimmerLightsIntr,w
 15958  00F7  0086               	movwf	6
 15959  00F8  3001               	movlw	1	; select bank2/3
 15960  00F9  0087               	movwf	7
 15961  00FA  0181               	clrf	1
 15962                           
 15963                           ;Dimmer_B1.c: 276: if (DimmerLightsIntr->AdjFlag) {
 15964  00FB  087A               	movf	_DimmerLightsIntr,w
 15965  00FC  0086               	movwf	6
 15966  00FD  3001               	movlw	1	; select bank2/3
 15967  00FE  0087               	movwf	7
 15968  00FF  1D81               	btfss	1,3
 15969  0100  2937               	goto	i1l6599
 15970                           
 15971                           ;Dimmer_B1.c: 277: if (DimmerLightsIntr->AdjStatus == 0) {
 15972  0101  087A               	movf	_DimmerLightsIntr,w
 15973  0102  0086               	movwf	6
 15974  0103  3001               	movlw	1	; select bank2/3
 15975  0104  0087               	movwf	7
 15976  0105  1A01               	btfsc	1,4
 15977  0106  2920               	goto	i1l6593
 15978                           
 15979                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue < ((char)(90*0.8))) {
 15980  0107  087A               	movf	_DimmerLightsIntr,w
 15981  0108  3E04               	addlw	4
 15982  0109  0086               	movwf	6
 15983  010A  3001               	movlw	1	; select bank2/3
 15984  010B  0087               	movwf	7
 15985  010C  3048               	movlw	72
 15986  010D  0201               	subwf	1,w
 15987  010E  1803               	skipnc
 15988  010F  291A               	goto	i1l6591
 15989                           
 15990                           ;Dimmer_B1.c: 279: DimmerLightsIntr->DimmingValue++;
 15991  0110  3001               	movlw	1
 15992  0111  00F2               	movwf	??_setDimmerLights_IntrControl
 15993  0112  087A               	movf	_DimmerLightsIntr,w
 15994  0113  3E04               	addlw	4
 15995  0114  0086               	movwf	6
 15996  0115  3001               	movlw	1	; select bank2/3
 15997  0116  0087               	movwf	7
 15998  0117  0872               	movf	??_setDimmerLights_IntrControl,w
 15999  0118  0781               	addwf	1,f
 16000                           
 16001                           ;Dimmer_B1.c: 280: } else {
 16002  0119  2982               	goto	i1l765
 16003  011A                     i1l6591:	
 16004                           
 16005                           ;Dimmer_B1.c: 281: DimmerLightsIntr->AdjStatus = 1;
 16006  011A  087A               	movf	_DimmerLightsIntr,w
 16007  011B  0086               	movwf	6
 16008  011C  3001               	movlw	1	; select bank2/3
 16009  011D  0087               	movwf	7
 16010  011E  1601               	bsf	1,4
 16011                           
 16012                           ;Dimmer_B1.c: 282: }
 16013                           ;Dimmer_B1.c: 283: } else {
 16014  011F  2982               	goto	i1l765
 16015  0120                     i1l6593:	
 16016                           
 16017                           ;Dimmer_B1.c: 284: if (DimmerLightsIntr->DimmingValue > ((char)(25*0.8))) {
 16018  0120  087A               	movf	_DimmerLightsIntr,w
 16019  0121  3E04               	addlw	4
 16020  0122  0086               	movwf	6
 16021  0123  3001               	movlw	1	; select bank2/3
 16022  0124  0087               	movwf	7
 16023  0125  3015               	movlw	21
 16024  0126  0201               	subwf	1,w
 16025  0127  1C03               	skipc
 16026  0128  2931               	goto	i1l6597
 16027                           
 16028                           ;Dimmer_B1.c: 285: DimmerLightsIntr->DimmingValue--;
 16029  0129  087A               	movf	_DimmerLightsIntr,w
 16030  012A  3E04               	addlw	4
 16031  012B  0086               	movwf	6
 16032  012C  3001               	movlw	1	; select bank2/3
 16033  012D  0087               	movwf	7
 16034  012E  3001               	movlw	1
 16035  012F  0281               	subwf	1,f
 16036                           
 16037                           ;Dimmer_B1.c: 286: } else {
 16038  0130  2982               	goto	i1l765
 16039  0131                     i1l6597:	
 16040                           
 16041                           ;Dimmer_B1.c: 287: DimmerLightsIntr->AdjStatus = 0;
 16042  0131  087A               	movf	_DimmerLightsIntr,w
 16043  0132  0086               	movwf	6
 16044  0133  3001               	movlw	1	; select bank2/3
 16045  0134  0087               	movwf	7
 16046  0135  1201               	bcf	1,4
 16047                           
 16048                           ;Dimmer_B1.c: 288: }
 16049                           ;Dimmer_B1.c: 289: }
 16050                           ;Dimmer_B1.c: 290: } else if (DimmerLightsIntr->AdjRF) {
 16051  0136  2982               	goto	i1l765
 16052  0137                     i1l6599:	
 16053  0137  087A               	movf	_DimmerLightsIntr,w
 16054  0138  0086               	movwf	6
 16055  0139  3001               	movlw	1	; select bank2/3
 16056  013A  0087               	movwf	7
 16057  013B  1D01               	btfss	1,2
 16058  013C  297D               	goto	i1l6613
 16059                           
 16060                           ;Dimmer_B1.c: 291: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 16061  013D  087A               	movf	_DimmerLightsIntr,w
 16062  013E  3E04               	addlw	4
 16063  013F  0086               	movwf	6
 16064  0140  3001               	movlw	1	; select bank2/3
 16065  0141  0087               	movwf	7
 16066  0142  087A               	movf	_DimmerLightsIntr,w
 16067  0143  3E05               	addlw	5
 16068  0144  0084               	movwf	4
 16069  0145  3001               	movlw	1	; select bank2/3
 16070  0146  0085               	movwf	5
 16071  0147  0800               	movf	0,w
 16072  0148  0201               	subwf	1,w
 16073  0149  1803               	skipnc
 16074  014A  2955               	goto	i1l6605
 16075                           
 16076                           ;Dimmer_B1.c: 292: DimmerLightsIntr->DimmingValue++;
 16077  014B  3001               	movlw	1
 16078  014C  00F2               	movwf	??_setDimmerLights_IntrControl
 16079  014D  087A               	movf	_DimmerLightsIntr,w
 16080  014E  3E04               	addlw	4
 16081  014F  0086               	movwf	6
 16082  0150  3001               	movlw	1	; select bank2/3
 16083  0151  0087               	movwf	7
 16084  0152  0872               	movf	??_setDimmerLights_IntrControl,w
 16085  0153  0781               	addwf	1,f
 16086                           
 16087                           ;Dimmer_B1.c: 293: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 16088  0154  296A               	goto	i1l6609
 16089  0155                     i1l6605:	
 16090  0155  087A               	movf	_DimmerLightsIntr,w
 16091  0156  3E05               	addlw	5
 16092  0157  0086               	movwf	6
 16093  0158  3001               	movlw	1	; select bank2/3
 16094  0159  0087               	movwf	7
 16095  015A  087A               	movf	_DimmerLightsIntr,w
 16096  015B  3E04               	addlw	4
 16097  015C  0084               	movwf	4
 16098  015D  3001               	movlw	1	; select bank2/3
 16099  015E  0085               	movwf	5
 16100  015F  0800               	movf	0,w
 16101  0160  0201               	subwf	1,w
 16102  0161  1803               	skipnc
 16103  0162  296A               	goto	i1l6609
 16104                           
 16105                           ;Dimmer_B1.c: 294: DimmerLightsIntr->DimmingValue--;
 16106  0163  087A               	movf	_DimmerLightsIntr,w
 16107  0164  3E04               	addlw	4
 16108  0165  0086               	movwf	6
 16109  0166  3001               	movlw	1	; select bank2/3
 16110  0167  0087               	movwf	7
 16111  0168  3001               	movlw	1
 16112  0169  0281               	subwf	1,f
 16113  016A                     i1l6609:	
 16114                           
 16115                           ;Dimmer_B1.c: 295: }
 16116                           ;Dimmer_B1.c: 296: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 16117  016A  087A               	movf	_DimmerLightsIntr,w
 16118  016B  3E05               	addlw	5
 16119  016C  0086               	movwf	6
 16120  016D  3001               	movlw	1	; select bank2/3
 16121  016E  0087               	movwf	7
 16122  016F  087A               	movf	_DimmerLightsIntr,w
 16123  0170  3E04               	addlw	4
 16124  0171  0084               	movwf	4
 16125  0172  3001               	movlw	1	; select bank2/3
 16126  0173  0085               	movwf	5
 16127  0174  0800               	movf	0,w
 16128  0175  0601               	xorwf	1,w
 16129  0176  1D03               	skipz
 16130  0177  2982               	goto	i1l765
 16131                           
 16132                           ;Dimmer_B1.c: 297: DimmerLightsIntr->AdjRF = 0;
 16133  0178  087A               	movf	_DimmerLightsIntr,w
 16134  0179  0086               	movwf	6
 16135  017A  3001               	movlw	1	; select bank2/3
 16136  017B  0087               	movwf	7
 16137  017C  1101               	bcf	1,2
 16138  017D                     i1l6613:	
 16139                           ;Dimmer_B1.c: 299: }
 16140                           ;Dimmer_B1.c: 300: } else {
 16141                           
 16142                           ;Dimmer_B1.c: 298: DimmerLightsIntr->Signal = 0;
 16143                           
 16144                           
 16145                           ;Dimmer_B1.c: 301: DimmerLightsIntr->Signal = 0;
 16146  017D  087A               	movf	_DimmerLightsIntr,w
 16147  017E  0086               	movwf	6
 16148  017F  3001               	movlw	1	; select bank2/3
 16149  0180  0087               	movwf	7
 16150  0181  1081               	bcf	1,1
 16151  0182                     i1l765:	
 16152                           
 16153                           ;Dimmer_B1.c: 302: }
 16154                           ;Dimmer_B1.c: 303: }
 16155                           ;Dimmer_B1.c: 304: }
 16156                           ;Dimmer_B1.c: 305: }
 16157                           ;Dimmer_B1.c: 306: }
 16158                           ;Dimmer_B1.c: 307: if (DimmerLightsIntr->MosfetSignal == 1) {
 16159  0182  087A               	movf	_DimmerLightsIntr,w
 16160  0183  3E09               	addlw	9
 16161  0184  0086               	movwf	6
 16162  0185  3001               	movlw	1	; select bank2/3
 16163  0186  0087               	movwf	7
 16164  0187  1D81               	btfss	1,3
 16165  0188  0008               	return
 16166                           
 16167                           ;Dimmer_B1.c: 308: DimmerLightsIntr->MosfetSignalCount++;
 16168  0189  3001               	movlw	1
 16169  018A  00F2               	movwf	??_setDimmerLights_IntrControl
 16170  018B  087A               	movf	_DimmerLightsIntr,w
 16171  018C  3E0C               	addlw	12
 16172  018D  0086               	movwf	6
 16173  018E  3001               	movlw	1	; select bank2/3
 16174  018F  0087               	movwf	7
 16175  0190  0872               	movf	??_setDimmerLights_IntrControl,w
 16176  0191  0781               	addwf	1,f
 16177                           
 16178                           ;Dimmer_B1.c: 309: if (DimmerLightsIntr->MosfetSignalCount == 70) {
 16179  0192  087A               	movf	_DimmerLightsIntr,w
 16180  0193  3E0C               	addlw	12
 16181  0194  0086               	movwf	6
 16182  0195  3001               	movlw	1	; select bank2/3
 16183  0196  0087               	movwf	7
 16184  0197  0801               	movf	1,w
 16185  0198  3A46               	xorlw	70
 16186  0199  1D03               	skipz
 16187  019A  0008               	return
 16188                           
 16189                           ;Dimmer_B1.c: 311: DimmerLightsIntr->MosfetSignalCount = 0;
 16190  019B  087A               	movf	_DimmerLightsIntr,w
 16191  019C  3E0C               	addlw	12
 16192  019D  0086               	movwf	6
 16193  019E  3001               	movlw	1	; select bank2/3
 16194  019F  0087               	movwf	7
 16195  01A0  0181               	clrf	1
 16196                           
 16197                           ;Dimmer_B1.c: 312: DimmerLightsIntr->MosfetSignal = 0;
 16198  01A1  087A               	movf	_DimmerLightsIntr,w
 16199  01A2  3E09               	addlw	9
 16200  01A3  0086               	movwf	6
 16201  01A4  3001               	movlw	1	; select bank2/3
 16202  01A5  0087               	movwf	7
 16203  01A6  1181               	bcf	1,3
 16204  01A7  0008               	return
 16205  01A8                     __end_of_setDimmerLights_IntrControl:	
 16206                           
 16207                           	psect	text111
 16208  11B2                     __ptext111:	
 16209 ;; *************** function _DimmerIntrPointSelect *****************
 16210 ;; Defined at:
 16211 ;;		line 72 in file "../src/Dimmer_B1.c"
 16212 ;; Parameters:    Size  Location     Type
 16213 ;;  lights          1    wreg     unsigned char 
 16214 ;; Auto vars:     Size  Location     Type
 16215 ;;  lights          1    1[COMMON] unsigned char 
 16216 ;; Return value:  Size  Location     Type
 16217 ;;		None               void
 16218 ;; Registers used:
 16219 ;;		wreg
 16220 ;; Tracked objects:
 16221 ;;		On entry : 0/0
 16222 ;;		On exit  : 0/0
 16223 ;;		Unchanged: 0/0
 16224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16226 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16227 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16228 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16229 ;;Total ram usage:        2 bytes
 16230 ;; Hardware stack levels used:    1
 16231 ;; This function calls:
 16232 ;;		Nothing
 16233 ;; This function is called by:
 16234 ;;		_setDimmerLights_IntrControl
 16235 ;; This function uses a non-reentrant model
 16236 ;;
 16237                           
 16238                           
 16239                           ;psect for function _DimmerIntrPointSelect
 16240  11B2                     _DimmerIntrPointSelect:	
 16241                           
 16242                           ;incstack = 0
 16243                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 16244                           ;DimmerIntrPointSelect@lights stored from wreg
 16245  11B2  00F1               	movwf	DimmerIntrPointSelect@lights
 16246                           
 16247                           ;Dimmer_B1.c: 74: if (lights == 1) {
 16248  11B3  0871               	movf	DimmerIntrPointSelect@lights,w
 16249  11B4  3A01               	xorlw	1
 16250  11B5  1D03               	skipz
 16251  11B6  29BB               	goto	i1l752
 16252                           
 16253                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 16254  11B7  3035               	movlw	_DimmerLights1& (0+255)
 16255  11B8  00F0               	movwf	??_DimmerIntrPointSelect
 16256  11B9  0870               	movf	??_DimmerIntrPointSelect,w
 16257  11BA  00FA               	movwf	_DimmerLightsIntr
 16258  11BB                     i1l752:	
 16259                           
 16260                           ;Dimmer_B1.c: 76: }
 16261                           ;Dimmer_B1.c: 79: if (lights == 2) {
 16262  11BB  0871               	movf	DimmerIntrPointSelect@lights,w
 16263  11BC  3A02               	xorlw	2
 16264  11BD  1D03               	skipz
 16265  11BE  0008               	return
 16266                           
 16267                           ;Dimmer_B1.c: 80: DimmerLightsIntr = &DimmerLights2;
 16268  11BF  3044               	movlw	_DimmerLights2& (0+255)
 16269  11C0  00F0               	movwf	??_DimmerIntrPointSelect
 16270  11C1  0870               	movf	??_DimmerIntrPointSelect,w
 16271  11C2  00FA               	movwf	_DimmerLightsIntr
 16272  11C3  0008               	return
 16273  11C4                     __end_of_DimmerIntrPointSelect:	
 16274                           
 16275                           	psect	text112
 16276  10CF                     __ptext112:	
 16277 ;; *************** function _IOC_ISR *****************
 16278 ;; Defined at:
 16279 ;;		line 401 in file "../src/MCU_B1.c"
 16280 ;; Parameters:    Size  Location     Type
 16281 ;;		None
 16282 ;; Auto vars:     Size  Location     Type
 16283 ;;		None
 16284 ;; Return value:  Size  Location     Type
 16285 ;;		None               void
 16286 ;; Registers used:
 16287 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16288 ;; Tracked objects:
 16289 ;;		On entry : 0/0
 16290 ;;		On exit  : 0/0
 16291 ;;		Unchanged: 0/0
 16292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16297 ;;Total ram usage:        0 bytes
 16298 ;; Hardware stack levels used:    1
 16299 ;; Hardware stack levels required when called:    3
 16300 ;; This function calls:
 16301 ;;		_setDimmerReClock
 16302 ;; This function is called by:
 16303 ;;		_ISR
 16304 ;; This function uses a non-reentrant model
 16305 ;;
 16306                           
 16307                           
 16308                           ;psect for function _IOC_ISR
 16309  10CF                     _IOC_ISR:	
 16310                           
 16311                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCBF2 == 1) {
 16312                           
 16313                           ;incstack = 0
 16314                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16315  10CF  1D8B               	btfss	11,3	;volatile
 16316  10D0  0008               	return
 16317  10D1  0027               	movlb	7	; select bank7
 16318  10D2  1D16               	btfss	22,2	;volatile
 16319  10D3  0008               	return
 16320                           
 16321                           ;MCU_B1.c: 403: IOCBF2 = 0;
 16322  10D4  1116               	bcf	22,2	;volatile
 16323                           
 16324                           ;MCU_B1.c: 404: IOCIF = 0;
 16325  10D5  100B               	bcf	11,0	;volatile
 16326                           
 16327                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 16328  10D6  0021               	movlb	1	; select bank1
 16329  10D7  1C20               	btfss	_myMain^(0+128),0
 16330  10D8  0008               	return
 16331                           
 16332                           ;MCU_B1.c: 407: setDimmerReClock();
 16333  10D9  319F  27B4         	fcall	_setDimmerReClock
 16334  10DB  0008               	return
 16335  10DC                     __end_of_IOC_ISR:	
 16336                           
 16337                           	psect	text113
 16338  1FB4                     __ptext113:	
 16339 ;; *************** function _setDimmerReClock *****************
 16340 ;; Defined at:
 16341 ;;		line 244 in file "../src/MCU_B1.c"
 16342 ;; Parameters:    Size  Location     Type
 16343 ;;		None
 16344 ;; Auto vars:     Size  Location     Type
 16345 ;;		None
 16346 ;; Return value:  Size  Location     Type
 16347 ;;		None               void
 16348 ;; Registers used:
 16349 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16350 ;; Tracked objects:
 16351 ;;		On entry : 0/0
 16352 ;;		On exit  : 0/0
 16353 ;;		Unchanged: 0/0
 16354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16359 ;;Total ram usage:        0 bytes
 16360 ;; Hardware stack levels used:    1
 16361 ;; Hardware stack levels required when called:    2
 16362 ;; This function calls:
 16363 ;;		_setDimmerLights_IntrIOC_GO
 16364 ;; This function is called by:
 16365 ;;		_IOC_ISR
 16366 ;; This function uses a non-reentrant model
 16367 ;;
 16368                           
 16369                           
 16370                           ;psect for function _setDimmerReClock
 16371  1FB4                     _setDimmerReClock:	
 16372                           
 16373                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 16374                           
 16375                           ;incstack = 0
 16376                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16377  1FB4  3001               	movlw	1
 16378  1FB5  3195  2505  319F   	fcall	_setDimmerLights_IntrIOC_GO
 16379                           
 16380                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 16381  1FB8  3002               	movlw	2
 16382  1FB9  3195  2505         	fcall	_setDimmerLights_IntrIOC_GO
 16383  1FBB  0008               	return
 16384  1FBC                     __end_of_setDimmerReClock:	
 16385                           
 16386                           	psect	text114
 16387  1505                     __ptext114:	
 16388 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 16389 ;; Defined at:
 16390 ;;		line 28 in file "../src/Dimmer_B1.c"
 16391 ;; Parameters:    Size  Location     Type
 16392 ;;  lights          1    wreg     unsigned char 
 16393 ;; Auto vars:     Size  Location     Type
 16394 ;;  lights          1    2[COMMON] unsigned char 
 16395 ;; Return value:  Size  Location     Type
 16396 ;;		None               void
 16397 ;; Registers used:
 16398 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16399 ;; Tracked objects:
 16400 ;;		On entry : 0/0
 16401 ;;		On exit  : 0/0
 16402 ;;		Unchanged: 0/0
 16403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16405 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16407 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16408 ;;Total ram usage:        1 bytes
 16409 ;; Hardware stack levels used:    1
 16410 ;; Hardware stack levels required when called:    1
 16411 ;; This function calls:
 16412 ;;		_DimmerIntrIOCPointSelect
 16413 ;; This function is called by:
 16414 ;;		_setDimmerReClock
 16415 ;; This function uses a non-reentrant model
 16416 ;;
 16417                           
 16418                           
 16419                           ;psect for function _setDimmerLights_IntrIOC_GO
 16420  1505                     _setDimmerLights_IntrIOC_GO:	
 16421                           
 16422                           ;incstack = 0
 16423                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16424                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 16425  1505  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 16426                           
 16427                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 16428  1506  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 16429  1507  3191  21FB  3195   	fcall	_DimmerIntrIOCPointSelect
 16430                           
 16431                           ;Dimmer_B1.c: 46: if (DimmerLightsIntrIOC->MosfetSignal == 0) {
 16432  150A  0021               	movlb	1	; select bank1
 16433  150B  0853               	movf	_DimmerLightsIntrIOC^(0+128),w
 16434  150C  3E09               	addlw	9
 16435  150D  0086               	movwf	6
 16436  150E  3001               	movlw	1	; select bank2/3
 16437  150F  0087               	movwf	7
 16438  1510  1981               	btfsc	1,3
 16439  1511  0008               	return
 16440                           
 16441                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 16442  1512  0853               	movf	_DimmerLightsIntrIOC^(0+128),w
 16443  1513  3E09               	addlw	9
 16444  1514  0086               	movwf	6
 16445  1515  3001               	movlw	1	; select bank2/3
 16446  1516  0087               	movwf	7
 16447  1517  1581               	bsf	1,3
 16448                           
 16449                           ;Dimmer_B1.c: 50: DimmerLightsIntrIOC->GO = 1;
 16450  1518  0853               	movf	_DimmerLightsIntrIOC^(0+128),w
 16451  1519  0086               	movwf	6
 16452  151A  3001               	movlw	1	; select bank2/3
 16453  151B  0087               	movwf	7
 16454  151C  1401               	bsf	1,0
 16455                           
 16456                           ;Dimmer_B1.c: 51: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 16457  151D  0853               	movf	_DimmerLightsIntrIOC^(0+128),w
 16458  151E  0086               	movwf	6
 16459  151F  3001               	movlw	1	; select bank2/3
 16460  1520  0087               	movwf	7
 16461  1521  1F01               	btfss	1,6
 16462  1522  0008               	return
 16463                           
 16464                           ;Dimmer_B1.c: 54: if (lights == 1) {
 16465  1523  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 16466  1524  3A01               	xorlw	1
 16467  1525  1D03               	skipz
 16468  1526  2D29               	goto	i1l6201
 16469                           
 16470                           ;Dimmer_B1.c: 55: RA7 = 1;
 16471  1527  0020               	movlb	0	; select bank0
 16472  1528  178C               	bsf	12,7	;volatile
 16473  1529                     i1l6201:	
 16474                           ;Dimmer_B1.c: 56: ;;
 16475                           
 16476                           
 16477                           ;Dimmer_B1.c: 57: }
 16478                           ;Dimmer_B1.c: 60: if (lights == 2) {
 16479  1529  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 16480  152A  3A02               	xorlw	2
 16481  152B  1D03               	skipz
 16482  152C  0008               	return
 16483                           
 16484                           ;Dimmer_B1.c: 62: RB4 = 1;
 16485  152D  0020               	movlb	0	; select bank0
 16486  152E  160D               	bsf	13,4	;volatile
 16487  152F  0008               	return
 16488  1530                     __end_of_setDimmerLights_IntrIOC_GO:	
 16489                           
 16490                           	psect	text115
 16491  11FB                     __ptext115:	
 16492 ;; *************** function _DimmerIntrIOCPointSelect *****************
 16493 ;; Defined at:
 16494 ;;		line 8 in file "../src/Dimmer_B1.c"
 16495 ;; Parameters:    Size  Location     Type
 16496 ;;  lights          1    wreg     unsigned char 
 16497 ;; Auto vars:     Size  Location     Type
 16498 ;;  lights          1    1[COMMON] unsigned char 
 16499 ;; Return value:  Size  Location     Type
 16500 ;;		None               void
 16501 ;; Registers used:
 16502 ;;		wreg
 16503 ;; Tracked objects:
 16504 ;;		On entry : 0/0
 16505 ;;		On exit  : 0/0
 16506 ;;		Unchanged: 0/0
 16507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16509 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16510 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16511 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16512 ;;Total ram usage:        2 bytes
 16513 ;; Hardware stack levels used:    1
 16514 ;; This function calls:
 16515 ;;		Nothing
 16516 ;; This function is called by:
 16517 ;;		_setDimmerLights_IntrIOC_GO
 16518 ;; This function uses a non-reentrant model
 16519 ;;
 16520                           
 16521                           
 16522                           ;psect for function _DimmerIntrIOCPointSelect
 16523  11FB                     _DimmerIntrIOCPointSelect:	
 16524                           
 16525                           ;incstack = 0
 16526                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 16527                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 16528  11FB  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 16529                           
 16530                           ;Dimmer_B1.c: 10: if (lights == 1) {
 16531  11FC  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 16532  11FD  3A01               	xorlw	1
 16533  11FE  1D03               	skipz
 16534  11FF  2A05               	goto	i1l740
 16535                           
 16536                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 16537  1200  3035               	movlw	_DimmerLights1& (0+255)
 16538  1201  00F0               	movwf	??_DimmerIntrIOCPointSelect
 16539  1202  0870               	movf	??_DimmerIntrIOCPointSelect,w
 16540  1203  0021               	movlb	1	; select bank1
 16541  1204  00D3               	movwf	_DimmerLightsIntrIOC^(0+128)
 16542  1205                     i1l740:	
 16543                           
 16544                           ;Dimmer_B1.c: 12: }
 16545                           ;Dimmer_B1.c: 15: if (lights == 2) {
 16546  1205  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 16547  1206  3A02               	xorlw	2
 16548  1207  1D03               	skipz
 16549  1208  0008               	return
 16550                           
 16551                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 16552  1209  3044               	movlw	_DimmerLights2& (0+255)
 16553  120A  00F0               	movwf	??_DimmerIntrIOCPointSelect
 16554  120B  0870               	movf	??_DimmerIntrIOCPointSelect,w
 16555  120C  0021               	movlb	1	; select bank1
 16556  120D  00D3               	movwf	_DimmerLightsIntrIOC^(0+128)
 16557  120E  0008               	return
 16558  120F                     __end_of_DimmerIntrIOCPointSelect:	
 16559                           
 16560                           	psect	text116
 16561  1FE4                     __ptext116:	
 16562 ;; *************** function _INT_ISR *****************
 16563 ;; Defined at:
 16564 ;;		line 348 in file "../src/MCU_B1.c"
 16565 ;; Parameters:    Size  Location     Type
 16566 ;;		None
 16567 ;; Auto vars:     Size  Location     Type
 16568 ;;		None
 16569 ;; Return value:  Size  Location     Type
 16570 ;;		None               void
 16571 ;; Registers used:
 16572 ;;		wreg, status,2, status,0, pclath, cstack
 16573 ;; Tracked objects:
 16574 ;;		On entry : 0/0
 16575 ;;		On exit  : 0/0
 16576 ;;		Unchanged: 0/0
 16577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16582 ;;Total ram usage:        0 bytes
 16583 ;; Hardware stack levels used:    1
 16584 ;; Hardware stack levels required when called:    1
 16585 ;; This function calls:
 16586 ;;		_setRF_ReceiveGO
 16587 ;; This function is called by:
 16588 ;;		_ISR
 16589 ;; This function uses a non-reentrant model
 16590 ;;
 16591                           
 16592                           
 16593                           ;psect for function _INT_ISR
 16594  1FE4                     _INT_ISR:	
 16595                           
 16596                           ;MCU_B1.c: 349: if (INTE == 1 && INTF == 1) {
 16597                           
 16598                           ;incstack = 0
 16599                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
 16600  1FE4  1E0B               	btfss	11,4	;volatile
 16601  1FE5  0008               	return
 16602  1FE6  1C8B               	btfss	11,1	;volatile
 16603  1FE7  0008               	return
 16604                           
 16605                           ;MCU_B1.c: 350: INTF = 0;
 16606  1FE8  108B               	bcf	11,1	;volatile
 16607                           
 16608                           ;MCU_B1.c: 352: setRF_ReceiveGO(1);
 16609  1FE9  3001               	movlw	1
 16610  1FEA  3190  2067         	fcall	_setRF_ReceiveGO
 16611  1FEC  0008               	return
 16612  1FED                     __end_of_INT_ISR:	
 16613                           
 16614                           	psect	text117
 16615  1067                     __ptext117:	
 16616 ;; *************** function _setRF_ReceiveGO *****************
 16617 ;; Defined at:
 16618 ;;		line 28 in file "../src/RF_Control_B1.c"
 16619 ;; Parameters:    Size  Location     Type
 16620 ;;  command         1    wreg     unsigned char 
 16621 ;; Auto vars:     Size  Location     Type
 16622 ;;  command         1    0[COMMON] unsigned char 
 16623 ;; Return value:  Size  Location     Type
 16624 ;;		None               void
 16625 ;; Registers used:
 16626 ;;		wreg
 16627 ;; Tracked objects:
 16628 ;;		On entry : 0/0
 16629 ;;		On exit  : 0/0
 16630 ;;		Unchanged: 0/0
 16631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16633 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16635 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16636 ;;Total ram usage:        1 bytes
 16637 ;; Hardware stack levels used:    1
 16638 ;; This function calls:
 16639 ;;		Nothing
 16640 ;; This function is called by:
 16641 ;;		_INT_ISR
 16642 ;; This function uses a non-reentrant model
 16643 ;;
 16644                           
 16645                           
 16646                           ;psect for function _setRF_ReceiveGO
 16647  1067                     _setRF_ReceiveGO:	
 16648                           
 16649                           ;incstack = 0
 16650                           ; Regs used in _setRF_ReceiveGO: [wreg]
 16651                           ;setRF_ReceiveGO@command stored from wreg
 16652  1067  00F0               	movwf	setRF_ReceiveGO@command
 16653                           
 16654                           ;RF_Control_B1.c: 29: if (RF1.RxStatus == 1) {
 16655  1068  0021               	movlb	1	; select bank1
 16656  1069  1DBC               	btfss	_RF1^(0+128),3
 16657  106A  0008               	return
 16658                           
 16659                           ;RF_Control_B1.c: 30: RF1.RxStatus = 0;
 16660  106B  11BC               	bcf	_RF1^(0+128),3
 16661                           
 16662                           ;RF_Control_B1.c: 31: RF1.Run = 1;
 16663  106C  14BD               	bsf	(_RF1^(0+128)+1),1
 16664                           
 16665                           ;RF_Control_B1.c: 32: RF1.ReceiveGO = command;
 16666  106D  0870               	movf	setRF_ReceiveGO@command,w
 16667  106E  10BC               	bcf	_RF1^(0+128),1
 16668  106F  1D03               	skipz
 16669  1070  14BC               	bsf	_RF1^(0+128),1
 16670  1071  0008               	return
 16671  1072                     __end_of_setRF_ReceiveGO:	
 16672  007E                     btemp	set	126	;btemp
 16673  007E                     pic14e$flags	set	126
 16674  007E                     wtemp	set	126
 16675  007E                     wtemp0	set	126
 16676  0080                     wtemp1	set	128
 16677  0082                     wtemp2	set	130
 16678  0084                     wtemp3	set	132
 16679  0086                     wtemp4	set	134
 16680  0088                     wtemp5	set	136
 16681  007F                     wtemp6	set	127
 16682  007E                     ttemp	set	126
 16683  007E                     ttemp0	set	126
 16684  0081                     ttemp1	set	129
 16685  0084                     ttemp2	set	132
 16686  0087                     ttemp3	set	135
 16687  007F                     ttemp4	set	127
 16688  007E                     ltemp	set	126
 16689  007E                     ltemp0	set	126
 16690  0082                     ltemp1	set	130
 16691  0086                     ltemp2	set	134
 16692  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         192
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     78      80
    BANK1            80      0      80
    BANK2            80      0      69
    BANK3            80      0      69
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK2[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw2(BANK1[2]), DlySw1(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect
    _INT_ISR->_setRF_ReceiveGO

Critical Paths under _main in BANK0

    _my_MainTime->_setBuz
    _setSw_Enable->_SwPointSelect
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   97890
                                             74 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                           _WDT_Main
              _myMain_Initialization
                        _my_MainTime
 ---------------------------------------------------------------------------------
 (1) _my_MainTime                                          0     0      0    1633
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      88
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   26173
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   26173
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0   11696
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0   11330
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1378
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     266
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     266
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     752
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     752
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   34412
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   34412
                                             71 BANK0      2     2      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   33771
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1523
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   32248
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   13097
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1339
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     319
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     181
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   15011
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   14879
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14813
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14747
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4043
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     252
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     840
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     840
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     230
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     230
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    7601
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   11671
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   11557
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    8505
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1284
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     730
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     114
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   12315
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   12315
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     622
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    8217
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    7327
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     430
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     711
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     533
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     533
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1523
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     494
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     404
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     359
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     268
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     286
                                              7 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     154
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     154
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0      22
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _WDT_Main
     _WDT_Clearing
   _myMain_Initialization
   _my_MainTime
     _setBuz
       ___awdiv
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      45       9       86.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     138      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     138      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Nov 01 10:51:18 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 07FE             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       l98 08D3  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 13FC  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 006F       __end_of_getDimmerLights_StatusFlag 11A1  
             _getDimmerLights_StatusFlag 1190                   __end_of_setDelayOff_GO 0A10  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                     _setDimmerLights_Main 0C85  
                           ___ftadd@sign 0048                                      l100 08E7  
                                    l110 17E3                                      l112 17F3  
                                    l108 17F9                                      l109 17F5  
                                    l334 1219                                      l335 121A  
                                    l259 0AAA                                      l284 0D1D  
                                    l285 0D60                                      l378 1468  
                                    l788 11F2                                      _GIE 005F  
                                    _CRC 00CF                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0017  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RA4 0064  
                                    _LED 007B                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00BC  
                                    _ISR 0004                                      _WDT 00CD  
                                    _Sw1 0153                                      _Sw2 015C  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1223  
                  _Buzzer_Initialization 1F76                          __end_of_ADC_Set 1FB4  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0DD8  
                  _setDimmerLights_AdjRF 1440                    _setDimmerLights_AdjGo 1170  
                                   ?_ISR 0070                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 10DC                             ___ftdiv@sign 003D  
                                   l1340 1585                                     l1327 13B9  
               ?_DimmerLightsPointSelect 0070                                     l1349 1768  
                        __end_of_IOC_Set 10E9                                     l2605 07E9  
                                   l2288 1123                                     l1933 15BB  
                                   l1918 0AE6                                     l2590 16C6  
                                   l1951 12A9                                     l6111 0CF9  
                                   l5311 035F                                     l1928 0B3C  
                                   l5241 0A20                                     l6113 0CFC  
                                   l5313 0369                                     l5305 034C  
                                   l5401 0678                                     l7001 02A1  
                                   l2818 0393                                     l5251 0A48  
                                   l5243 0A2A                                     l6131 0D14  
                                   l5323 0385                                     l5315 036E  
                                   l6043 0F5E                                     l6035 0F4C  
                                   l1884 0443                                     l5253 0A50  
                                   l5245 0A2F                                     l5237 0A19  
                                   l6221 119A                                     l6117 0D02  
                                   l6061 0A7B                                     l5333 03B7  
                                   l5325 038F                                     l5317 0372  
                                   l5413 06B3                                     l1965 1619  
                                   l6029 0F31                                     l1885 043F  
                                   l5271 1407                                     l6119 0D05  
                                   l5343 03D2                                     l5503 11CD  
                                   l6047 0F67                                     l6039 0F55  
                                   l1887 047F                                     l1879 040B  
                                   l5353 0716                                     l6233 1644  
                                   l6145 0D2E                                     l6129 0D1A  
                                   l6065 0A81                                     l5329 03A5  
                                   l5425 06CF                                     l5417 06BB  
                                   l7043 17CD                                     l6171 1484  
                                   l2795 0A5A                                     l6147 0D46  
                                   l6091 0ABD                                     l6083 0AB0  
                                   l6059 0A78                                     l5283 031C  
                                   l6331 0B01                                     l5517 122E  
                                   l5613 089B                                     l5605 088A  
                                   l2789 0A43                                     l5381 0786  
                                   l5373 076D                                     l5445 0E77  
                                   l6093 0AC0                                     l6085 0AB3  
                                   l5293 0332                                     l5429 06D7  
                                   l5533 1503                                     l6341 0B27  
                                   l6183 13EC                                     l5359 072C  
                                   l5471 0EC2                                     l5463 0EA7  
                                   l7151 0539                                     l6159 0D62  
                                   l6079 0A92                                     l5287 0323  
                                   l6319 0AE9                                     l6169 1479  
                                   l6177 13E3                                     l6441 170D  
                                   l5609 0893                                     l5473 0ECB  
                                   l5465 0EB5                                     l5561 1374  
                                   l6097 0AC6                                     l6089 0AB9  
                                   l6179 13E6                                     l6451 171D  
                                   l6443 1710                                     l5475 0ECE  
                                   l5395 0662                                     l5811 15CB  
                                   l5731 09E6                                     l6347 0B32  
                                   l6427 0C61                                     l6363 0D85  
                                   l6453 1720                                     l5581 0859  
                                   l5557 136B                                     l6701 16A1  
                                   l5741 0A05                                     l7237 07D2  
                                   l6447 1716                                     l5479 0EDC  
                                   l6279 156D                                     l5735 09EC  
                                   l5903 0F8E                                     l6383 0DC6  
                                   l6359 0D78                                     l7247 07EA  
                                   l6457 1726                                     l5665 0C06  
                                   l5569 1242                                     l5737 09F9  
                                   l5913 0FB2                                     l6393 0814  
                                   l5587 0864                                     l5763 0911  
                                   l6651 0C99                                     l5499 11C7  
                                   l5597 086C                                     l5773 0921  
                                   l5781 092D                                     l5861 12F2  
                                   l5941 1607                                     l5917 0FC8  
                                   l6805 03FE                                     l6397 0821  
                                   l5951 1303                                     l5599 0878  
                                   l5759 090B                                     l5767 0917  
                                   l6663 0CC1                                     l6655 0CA3  
                                   l5793 0947                                     l5777 0927  
                                   l6665 0CC7                                     l6921 1128  
                                   l5955 1309                                     l6675 0CEF  
                                   l5859 12EE                                     l5971 1430  
                                   l6827 0422                                     l5949 1300  
                                   l5789 0941                                     l5797 094D  
                                   l5893 0E2C                                     l5965 1427  
                                   l6925 112E                                     l6941 01BF  
                                   l6775 1748                                     l5967 142A  
                                   l6863 0464                                     l6951 01CF  
                                   l6943 01C5                                     l6769 1733  
                                   l6697 169A                                     l6865 0466  
                                   l6881 0494                                     l6953 01D7  
                                   l6893 04B5                    _myMain_Initialization 1131  
                                   l6991 026F                                     l6967 0204  
                                   l6977 0231                                     _CFGS 0CAE  
                           __CFG_WDTE$ON 0000                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 1FED                                     _LATC 010E  
                                   u4015 06BC                                     u4025 06C2  
                                   u4125 0EA8                                     u4055 06D8  
                                   u4065 06DE                                     u4155 0EC3  
                                   u4095 0E7E                                     u4255 14EF  
                                   u4345 086F                                     u3625 0A61  
                                   u4450 0BB4                                     u5155 146E  
                                   u3555 0A25                                     _PEIE 005E  
                                   u4365 0879                                     u3805 0373  
                                   _INTE 005C                                     _INTF 0059  
                                   u4375 0883                                     u3575 0A3E  
                                   u4455 0BB2                                     u4385 088B  
                                   u3905 073E                                     u3745 034D  
                                   u6305 04A5                                     u4715 126E  
                                   u3595 0A4B                                     u3915 074E  
                                   u3835 0386                                     u3925 076E  
                                   u3935 077D                                     u3775 0360  
                                   u6175 041C                                     u3945 0787  
                                   u3985 0684                                     u3995 0694  
                                   u6565 17C3                                     u6805 07B9  
                                   u6815 07E1                                     u6835 07F9  
                                   u6765 13B0                                     _LWLO 0CAD  
                                   _RFSW 00D4                          __end_of_INT_Set 1F9A  
                                   _RSSI 00D5                                     _WREN 0CAA  
                                   _Buz1 00B0                                     _main 16A8  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 0BAA  
                        __end_of_RF_Main 1F7F                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                        __end_of_WDT_Set 1088                                     ltemp 007E  
          __size_of_setRF_Initialization 000B                         _setDimmerReClock 1FB4  
                                   start 0016                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 162E                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 10C3            __end_of_DimmerIntrPointSelect 11C4  
                  ?_setDimmerLights_Main 0070                          ?_setDelayOff_GO 002A  
                                  ?_main 006A                          __end_of___awdiv 08A2  
                        __end_of___ftadd 03EA                          __end_of___ftdiv 07A8  
                        __end_of___ftmul 06FF                          ___awdiv@divisor 0020  
                                  _T1CON 0018                          __end_of___fttol 0EE5  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                                  i1l740 1205                                    i1l752 11BB  
                                  i1l765 0182                   _setDimmerLights_Switch 1140  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00EE                                    _RFSW2 00EF  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0020                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB0 1068                                    _WPUB1 1069  
                                  _WPUB2 106A                  __end_of_Timeout_Counter 1274  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 1530  
             _setDimmerLights_IntrIOC_GO 1505                         __end_of_TMR1_ISR 14B1  
           __size_of_CC2500_WriteCommand 0019                         __end_of_TMR1_Set 10CF  
                          ___awtoft@sign 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 11E8  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E8                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0010  
          __end_of_setLED_Initialization 1170                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 0BAA  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003                           setSw_Status@sw 0023  
       __size_of_DelayOff_Initialization 0008                             ?_my_MainTime 0070  
              setDimmerLights_Main@clear 0065                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 0956                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0018                         ?_CC2500_PowerRST 0070  
                      ??_Sw_DimmerOnFunc 0062                        ??_setPercentValue 0059  
                           __end_of_main 16E9                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 1F8F                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0E5E  
                   _setSw_Initialization 1FCC                                   ??_main 006E  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0EE5                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 0014                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03E8                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 11FB                   ?_setDimmerLights_AdjRF 0070  
                              ??_INT_ISR 0071                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 0090                         ??_setRFSW_Status 0023  
                              ??_INT_Set 0020                  ??_Switch_Initialization 0025  
                   ??_setRF_DimmerLights 005E                              _DlyOff_Main 0B3F  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 0069  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 141E                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 0A71                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1150                                   i1l6201 1529  
                                 i1l6605 0155                                   i1l6613 017D  
                                 i1l6609 016A                                   i1l6571 00C8  
                                 i1l6555 009E                                   i1l6573 00CE  
                                 i1l6591 011A                                   i1l6567 00C2  
                                 i1l6559 00A4                                   i1l6593 0120  
                                 i1l6597 0131                                   i1l6599 0137  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                                   u568_25 007F  
                                 u667_25 14AB                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   _IO_Set 1311  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1FA6           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 1289                                   _Dimmer 00D0  
                                 _DlySw1 00EA                                   _DlySw2 00EC  
             __end_of_Mcu_Initialization 129E                      __end_of_Buzzer_Main 1800  
                                 _Memory 01A0                                   _Timer1 00C8  
     __end_of_setDimmerLights_TriggerAdj 1190               _setDimmerLights_TriggerAdj 1180  
                                 ___bmul 11C4            setDimmerLights_Switch@command 0022  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 0014                                ??___ftdiv 0034  
                  setDimmerLights@lights 0026                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00D9                                   _s_data 00DA  
                                 _setLED 08FB                                   _myMain 00A0  
                       _DimmerLightsIntr 007A                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0024                         ___awdiv@quotient 0027  
                                 _setBuz 08A2         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020      __end_of_setDimmerLights_IntrControl 01A8  
            _setDimmerLights_IntrControl 0046                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ?_Timeout_Counter 0070  
                  __end_of_SwPointSelect 124B                            ?_setRF_Enable 0070  
                        _RfSWPointSelect 129E             __size_of_Flash_Memory_Modify 0044  
      setDimmerLights_IntrControl@lights 0076              __size_of_DimmerLights_Close 0014  
                __size_of_LedPointSelect 001D                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 1122  
                      ?_Sw_DimmerAdjFunc 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 09B1  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0042  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                     ??_Sw_DimmerOffFunc 0062                             __pidataBANK3 13BB  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
           __size_of_setDimmerLights_Adj 003D                       _LED_Initialization 10AB  
              ??_setControl_Lights_Table 0067                         ??_DelayTimejudge 0024  
            ?_getDimmerLights_StatusFlag 0070            ??_Flash_Memory_Initialization 005D  
               __size_of_setRF_ReceiveGO 000B                         ?_setDimmerLights 0024  
                              ?_WDT_Main 0070                       __size_of_getBuz_GO 0011  
             __end_of_set_TimeoutCleared 1F94                 __end_of_setDimmerReClock 1FBC  
                     __size_of_getRxData 0069                      ?_LED_Initialization 0070  
                      ?_CC2500_WriteByte 0070                           ??_setRF_Enable 0020  
                         _DimmerLights11 00D1                           _DimmerLights22 00D2  
                   __size_of_setLED_Main 003D                ??_setDimmerLights_Trigger 0023  
                     ??_CC2500_WriteByte 0020             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006F                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                              ?_Fosc_Set 0070                              _Buzzer_Main 17B6  
                      ??_setRFSW_Control 0062                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                               ??_LED_Main 0025  
                          ?_setMemory_GO 0070                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1FBC                            ??_Switch_Main 006A  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 0079  
                      LedPointSelect@led 0021                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 0008                              setBuz@count 002C  
                             __pmaintext 16A8                      _CC2500_WriteCommand 12F8  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 002C                     __size_of_my_MainTime 0056  
          ??_DimmerLights_Initialization 0024                               ??_TMR1_ISR 0077  
                             ??_TMR1_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0070  
                     __size_of_setTxData 00BD                  ?_setDimmerLights_Switch 0022  
                   Sw_DimmerAdjFunc@Idle 0024                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 1FAD  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 1093                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 15F3                  __end_of_RfSWPointSelect 12B4  
                      Sw_DimmerOnFunc@sw 0063                                  _IOC_ISR 10CF  
                                _IOC_Set 10DC                     __size_of_setLog_Code 0032  
                                _INT_ISR 1FE4                                  _INT_Set 1F94  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 139C  
                      _Flash_Memory_Read 132A              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 0071                   __size_of_CC2500_TxData 0065  
                    ?_setRFSW_AdjControl 0070                                  _RF_Data 0120  
                                _RF_Main 1F7C                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 107D  
        __end_of_setControl_Lights_Table 0F70                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _Sw_DimmerOnFunc 0D66  
                        _setPercentValue 1770                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 00E7  
           __end_of_CC2500_FrequencyCabr 109F                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 11B2                      ??_Flash_Memory_Main 0026  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 00DF  
                                _VarLED2 00E3                        __end_of_getRxData 0B3F  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 120F  
        __end_of_setDimmerLights_Trigger 1160                     ??_setRFSW_AdjControl 0064  
                        __size_of___bmul 0012           __end_of_setDimmerLights_Switch 1150  
                                ___awdiv 084E                                  ___ftadd 02F4  
                         ??_setSw_Enable 0022                                  ___ftdiv 06FF  
                                ___ftmul 064B                                  ___fttol 0E5E  
                    __end_of_Switch_Main 1FE4                  ??_Buzzer_Initialization 0020  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005B                     setRFSW_AdjControl@sw 0066  
                        __size_of_setBuz 0059                           ??_setSw_Status 0023  
                                __ptext1 07A8                                  __ptext2 1344  
                                __ptext3 10F6                                  __ptext4 1131  
                                __ptext5 11D6                                  __ptext6 07FE  
                                __ptext7 1FDC                                  __ptext8 01A8  
                                __ptext9 1FD4                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                    Sw_DimmerOnFunc@Idle 0062                    _DimmerIntrPointSelect 11B2  
                           __size_of_ISR 0012                __end_of_Flash_Memory_Main 13BB  
              __end_of_Flash_Memory_Read 1344                               _setRF_Main 03EA  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1FC4  
                      _DimmerLights_Main 1072           __size_of_DlyOff_Initialization 000A  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 2000  
                      ??_setRF_ReceiveGO 0070               __end_of_CC2500_ClearRXFIFO 1F83  
             __end_of_CC2500_ClearTXFIFO 1F87            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006E                           _LedPointSelect 1360  
                    _DelayOffPointSelect 1223                                  clrloop0 1FA1  
         __size_of_Switch_Initialization 000D            __end_of_Switch_Initialization 10F6  
                   end_of_initialization 0042                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 14B1                            _DelayTime_1us 1463  
                      __end_of_setTxData 064B               __end_of_Flash_Memory_Write 158C  
                                init_ram 1F9A                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1F9B                               _setSw_Main 01A8  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 141E  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1160  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 0017  
                          _CC2500_RxData 0CF5                            _CC2500_TxData 0A71  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 1104  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 172C  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1FED  
                    ??_CC2500_ReadStatus 0022         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                      __size_of_TouchPower 000F  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 107D                       _Mcu_Initialization 1289  
               __size_of_CC2500_PowerRST 0043                           ?_DelayOff_Main 0070  
                       ?_RfSWPointSelect 0070                          _setSw_Main$5380 0067  
                        _setSw_Main$5381 0068                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 137D                  __end_of_Sw_DimmerOnFunc 0DD8  
                __end_of_setPercentValue 17B6                 __size_of_CC2500_WriteREG 0021  
              __end_of_CC2500_InitSetREG 14DB                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 162E  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1440  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 132A  
                   _setRF_Initialization 1088                              _Switch_Main 1FDC  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 11E8  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1274  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 11D6                __size_of_Sw_DimmerAdjFunc 004C  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 11FB  
                      __size_of_TMR1_ISR 0028                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR1_Set 000C                     __end_of_setMemory_GO 12CA  
          __size_of_setDimmerLights_Main 0070                           __end_of_setLED 0956  
                         __end_of_setBuz 08FB          _getDimmerLights_StatusFlag$2225 0022  
                   _CC2500_FrequencyCabr 1093                __size_of_Sw_DimmerOffFunc 006F  
             __size_of_Flash_Memory_Main 001F               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 0F70  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0070  
                    start_initialization 0018                        _setRF_DimmerValue 15BE  
                        ?_LedPointSelect 0070               __end_of_DimmerLights_Close 125F  
                            __end_of_ISR 0016                    ??_Flash_Memory_Modify 0024  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 139C                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setSw_Enable 1360  
                           ?_Buzzer_Main 0070                       _set_TimeoutCleared 1F8F  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0015  
                              _VarErrLED 00DB                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 1122                       Sw_DimmerAdjFunc@sw 0025  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
                __size_of_setRFSW_Status 000F                __size_of_CC2500_WriteByte 0014  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D6                  setRF_DimmerValue@lights 0063  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00D7  
                            __pdataBANK3 01C5                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                       _CC2500_SIDLEMode 1F87               __size_of_DimmerLights_Main 000B  
              __end_of_setRF_DimmerValue 15F3                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                        _setRF_Main$4463 0068                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                               ?_INT_ISR 0070                      setRF_Enable@command 0020  
                       ?_Sw_DimmerOnFunc 0070                            __pcstackBANK0 0020  
                   ??_set_TimeoutCleared 0020                                 ?_INT_Set 0070  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0086  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 006B  
             __size_of_CC2500_ReadStatus 0022                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 0135  
                          _DimmerLights2 0144                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
                  __size_of_setRF_Enable 000E                          ??_CC2500_RxData 0024  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006E  
                          ??_my_MainTime 002D              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                      __size_of_setRF_Main 00DD  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                              _getBuz_GO 11A1      __end_of_Flash_Memory_Initialization 058E  
            _Flash_Memory_Initialization 04C7                                 ?___awdiv 0020  
                              __ptext100 1F83                                __ptext101 1F7F  
                              __ptext110 0046                                __ptext102 12F8  
                              __ptext111 11B2                                __ptext103 1F8F  
                              __ptext112 10CF                                __ptext104 125F  
                              __ptext113 1FB4                                __ptext105 120F  
                              __ptext114 1505                                __ptext106 17B6  
                              __ptext115 11FB                                __ptext107 1F76  
                              __ptext116 1FE4                                __ptext117 1067  
                              __ptext109 1489                                 ?___ftadd 003E  
                              _getRxData 0AD6                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                __end_of_setRFSW_Control 1000                          _setRF_ReceiveGO 1067  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
          __end_of_Buzzer_Initialization 1F79                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 1131                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 014C  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 1463  
          __end_of_setDimmerLights_AdjGo 1180                   CC2500_WriteByte@loop_a 0021  
                              _r_address 00D8           __size_of_myMain_Initialization 000F  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1140  
                           _setRF_Enable 10F6                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 1237                       Sw_DimmerOffFunc@sw 0064  
                    __end_of_setLED_Main 16A8                      _DimmerLightsIntrIOC 00D3  
                 ??_setRF_Initialization 0020                        _CC2500_rfSettings 102F  
                               _LED_Main 10B7                          SwPointSelect@sw 0021  
                              clear_ram0 1FA0                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 058E      __end_of_DimmerLights_Initialization 12E1  
            _DimmerLights_Initialization 12CA                       _CC2500_ClearRXFIFO 1F7F  
                     _CC2500_ClearTXFIFO 1F83           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1FDC                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060                   setRF_ReceiveGO@command 0070  
            __size_of_setRFSW_AdjControl 003B                    __size_of_setMemory_GO 0016  
                     _Flash_Memory_Write 155D                               ?_getRxData 0070  
                               _TMR1_ISR 1489                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                                 _TMR1_Set 10C3  
                       _Sw_DimmerAdjFunc 0802                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070                      __end_of_my_MainTime 07FE  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00CB  
            __end_of_CC2500_WriteCommand 1311                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 11D6                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         _Sw_DimmerOffFunc 0C16  
                __size_of_setDelayOff_GO 005F                    __size_of_setSw_Enable 001C  
                               _DelayOff 0078                             setSw_Main@sw 0069  
       setDimmerLights_IntrIOC_GO@lights 0072                         __size_of_IOC_ISR 000D  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 10AB                           ?_SwPointSelect 0070  
                       __size_of_INT_ISR 0009                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0800                         __size_of_INT_Set 0006  
                    __end_of_setLog_Code 15BE                    _DlyOff_Initialization 1FF6  
                  __size_of_setSw_Status 000F                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1F8B  
                       __size_of_WDT_Set 000B                    _Switch_Initialization 10E9  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
                         _setRFSW_Status 1104                             _setMemory_GO 12B4  
                   __size_of_Buzzer_Main 004A                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 120F             Flash_Memory_Initialization@i 005E  
                __end_of_setRF_ReceiveGO 1072                        setRFSW_Control@sw 0063  
                              setLED@led 0023                  ??_DimmerIntrPointSelect 0070  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 1344                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                                 ___awtoft 13FC  
                       ??_LedPointSelect 0020                                 ___ftpack 0A10  
                           _setSw_Status 1113                             ??_setRF_Main 0067  
                   CC2500_WriteREG@value 0022                              _setLED_Main 166B  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 0C16  
               ?_DelayOff_Initialization 0070                         setDelayOff_GO@sw 002E  
                               __ptext10 0D66                                 __ptext11 0C16  
                               __ptext20 0AD6                                 __ptext12 0802  
                               __ptext21 158C                                 __ptext13 1180  
                               __ptext30 0956                                 __ptext22 0EE5  
                               __ptext14 1170                                 __ptext31 064B  
                               __ptext23 0F70                                 __ptext15 10E9  
                               __ptext40 1289                                 __ptext32 02F4  
                               __ptext24 09B1                                 __ptext16 1FCC  
                               __ptext41 107D                                 __ptext33 11A1  
                               __ptext25 14DB                                 __ptext17 1122  
                               __ptext50 10AB                                 __ptext42 10C3  
                               __ptext34 0A71                                 __ptext26 11C4  
                               __ptext18 1F7C                                 __ptext51 1160  
                               __ptext43 1311                                 __ptext35 0CF5  
                               __ptext27 15F3                                 __ptext19 03EA  
                               __ptext60 0C85                                 __ptext52 139C  
                               __ptext44 10DC                                 __ptext36 141E  
                               __ptext28 15BE                                 __ptext61 162E  
                               __ptext53 172C                                 __ptext45 1F94  
                               __ptext37 12E1                                 __ptext29 1440  
                               __ptext70 1FA6                                 __ptext62 0DD8  
                               __ptext54 109F                                 __ptext46 1F8B  
                               __ptext38 1F79                                 __ptext71 1FC4  
                               __ptext63 08FB                                 __ptext55 04C7  
                               __ptext47 1FAD                                 __ptext39 1088  
                               __ptext80 13FC                                 __ptext72 0B3F  
                               __ptext64 1360                                 __ptext56 155D  
                               __ptext48 10B7                                 __ptext81 0A10  
                               __ptext73 058E                                 __ptext65 124B  
                               __ptext57 1FED                                 __ptext49 166B  
                               __ptext90 1FF6                                 __ptext82 1104  
                               __ptext74 1113                                 __ptext66 12B4  
                               __ptext58 132A                                 __ptext91 1223  
                               __ptext83 129E                                 __ptext75 1237  
                               __ptext67 1190                                 __ptext59 1072  
                               __ptext92 1274                                 __ptext84 1150  
                               __ptext76 0BAA                                 __ptext68 12CA  
                               __ptext93 1F87                                 __ptext85 1140  
                               __ptext77 1770                                 __ptext69 1530  
                               __ptext94 16E9                                 __ptext86 11E8  
                               __ptext78 0E5E                                 __ptext95 14B1  
                               __ptext87 08A2                                 __ptext79 06FF  
                               __ptext96 137D                                 __ptext88 084E  
                               __ptext97 13DB                                 __ptext89 1FBC  
                               __ptext98 1093                                 __ptext99 1463  
                               __product 01C5            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 0016  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 1113  
          __end_of_Dimmer_Initialization 1FAD             __end_of_setDimmerLights_Main 0CF5  
                           ??_setSw_Main 0065                            setLED@command 0022  
                          __size_of_main 0041                              _setRF_Learn 1FD4  
               __end_of_CC2500_SIDLEMode 1F8B               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 1237               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 124B                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 0008                          _CC2500_ReadByte 12E1  
                            _my_MainTime 07A8                       _CC2500_InitPATable 137D  
    __size_of_getDimmerLights_StatusFlag 0011            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 04C7                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0015                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0067                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 006A  
                               main@argv 006C                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 16E9              __end_of_Flash_Memory_Modify 1770  
                      ??_getPercentValue 0059                              _setLog_Code 158C  
            __end_of_Flash_Memory_Unlock 1FF6                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 13DB                       __end_of_setSw_Main 02F4  
                          _Transceive_OK 03E9                   ?_DlyOff_Initialization 0070  
                         _DelayTimejudge 14DB                              pic14e$flags 007E  
                   ??_DimmerLights_Close 0023             ??_setDimmerLights_IntrIOC_GO 0072  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0070                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 155D  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 1530  
            __end_of_setDimmerLights_Adj 166B                              ??_setTxData 0020  
                       ?_setRF_ReceiveGO 0070                   CC2500_InitPATable@temp 0026  
                      _RF_Initialization 1F79     __size_of_setDimmerLights_IntrControl 0162  
                   _Flash_Memory_Erasing 109F                       ?_RF_Initialization 0070  
                             _SPI0Buffer 007C          __end_of_DelayOff_Initialization 1FC4  
    __size_of_setDimmerLights_IntrIOC_GO 002B                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1FCC                      ??_RF_Initialization 0021  
                         _setDelayOff_GO 09B1         __size_of_setControl_Lights_Table 008B  
                 __end_of_DelayTimejudge 1505     __size_of_Flash_Memory_Initialization 00C7  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0062  
                  __end_of_DelayTime_1us 1489                 __end_of_Sw_DimmerAdjFunc 084E  
                __end_of_CC2500_ReadByte 12F8             __end_of_setSw_Initialization 1FD4  
                        _Timeout_Counter 125F                     getPercentValue@value 005B  
             __end_of_LED_Initialization 10B7         __size_of_setDimmerLights_Trigger 0010  
               __size_of_Sw_DimmerOnFunc 0072                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 1F7C  
               __end_of_Sw_DimmerOffFunc 0C85          __size_of_setDimmerLights_Switch 0010  
                      ??_RfSWPointSelect 0020                    __end_of_CC2500_RxData 0D66  
                  __end_of_CC2500_TxData 0AD6                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 172C  
