

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Nov 18 16:56:48 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,inline,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,inline,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	intentry,global,class=CODE,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	dabs	1,0x7E,2
   153  0000                     	;# 
   154  0001                     	;# 
   155  0002                     	;# 
   156  0003                     	;# 
   157  0004                     	;# 
   158  0005                     	;# 
   159  0006                     	;# 
   160  0007                     	;# 
   161  0008                     	;# 
   162  0009                     	;# 
   163  000A                     	;# 
   164  000B                     	;# 
   165  000C                     	;# 
   166  000D                     	;# 
   167  000E                     	;# 
   168  0010                     	;# 
   169  0011                     	;# 
   170  0012                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  0090                     	;# 
   184  0091                     	;# 
   185  0092                     	;# 
   186  0095                     	;# 
   187  0096                     	;# 
   188  0097                     	;# 
   189  0099                     	;# 
   190  009A                     	;# 
   191  009B                     	;# 
   192  009B                     	;# 
   193  009C                     	;# 
   194  009D                     	;# 
   195  009E                     	;# 
   196  010C                     	;# 
   197  010D                     	;# 
   198  010E                     	;# 
   199  0116                     	;# 
   200  0117                     	;# 
   201  011D                     	;# 
   202  018C                     	;# 
   203  018D                     	;# 
   204  018E                     	;# 
   205  0191                     	;# 
   206  0191                     	;# 
   207  0192                     	;# 
   208  0193                     	;# 
   209  0193                     	;# 
   210  0194                     	;# 
   211  0195                     	;# 
   212  0196                     	;# 
   213  0197                     	;# 
   214  0199                     	;# 
   215  019A                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019B                     	;# 
   219  019B                     	;# 
   220  019C                     	;# 
   221  019C                     	;# 
   222  019D                     	;# 
   223  019E                     	;# 
   224  019F                     	;# 
   225  020D                     	;# 
   226  0210                     	;# 
   227  0211                     	;# 
   228  0211                     	;# 
   229  0212                     	;# 
   230  0212                     	;# 
   231  0213                     	;# 
   232  0213                     	;# 
   233  0214                     	;# 
   234  0214                     	;# 
   235  0215                     	;# 
   236  0215                     	;# 
   237  0215                     	;# 
   238  0216                     	;# 
   239  0216                     	;# 
   240  0217                     	;# 
   241  0217                     	;# 
   242  0291                     	;# 
   243  0291                     	;# 
   244  0292                     	;# 
   245  0293                     	;# 
   246  0298                     	;# 
   247  0298                     	;# 
   248  0299                     	;# 
   249  029A                     	;# 
   250  0394                     	;# 
   251  0395                     	;# 
   252  0396                     	;# 
   253  0FE4                     	;# 
   254  0FE5                     	;# 
   255  0FE6                     	;# 
   256  0FE7                     	;# 
   257  0FE8                     	;# 
   258  0FE9                     	;# 
   259  0FEA                     	;# 
   260  0FEB                     	;# 
   261  0FED                     	;# 
   262  0FEE                     	;# 
   263  0FEF                     	;# 
   264  0000                     	;# 
   265  0001                     	;# 
   266  0002                     	;# 
   267  0003                     	;# 
   268  0004                     	;# 
   269  0005                     	;# 
   270  0006                     	;# 
   271  0007                     	;# 
   272  0008                     	;# 
   273  0009                     	;# 
   274  000A                     	;# 
   275  000B                     	;# 
   276  000C                     	;# 
   277  000D                     	;# 
   278  000E                     	;# 
   279  0010                     	;# 
   280  0011                     	;# 
   281  0012                     	;# 
   282  0015                     	;# 
   283  0016                     	;# 
   284  0016                     	;# 
   285  0017                     	;# 
   286  0018                     	;# 
   287  0019                     	;# 
   288  001A                     	;# 
   289  001B                     	;# 
   290  001C                     	;# 
   291  008C                     	;# 
   292  008D                     	;# 
   293  008E                     	;# 
   294  0090                     	;# 
   295  0091                     	;# 
   296  0092                     	;# 
   297  0095                     	;# 
   298  0096                     	;# 
   299  0097                     	;# 
   300  0099                     	;# 
   301  009A                     	;# 
   302  009B                     	;# 
   303  009B                     	;# 
   304  009C                     	;# 
   305  009D                     	;# 
   306  009E                     	;# 
   307  010C                     	;# 
   308  010D                     	;# 
   309  010E                     	;# 
   310  0116                     	;# 
   311  0117                     	;# 
   312  011D                     	;# 
   313  018C                     	;# 
   314  018D                     	;# 
   315  018E                     	;# 
   316  0191                     	;# 
   317  0191                     	;# 
   318  0192                     	;# 
   319  0193                     	;# 
   320  0193                     	;# 
   321  0194                     	;# 
   322  0195                     	;# 
   323  0196                     	;# 
   324  0197                     	;# 
   325  0199                     	;# 
   326  019A                     	;# 
   327  019B                     	;# 
   328  019B                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019C                     	;# 
   332  019C                     	;# 
   333  019D                     	;# 
   334  019E                     	;# 
   335  019F                     	;# 
   336  020D                     	;# 
   337  0210                     	;# 
   338  0211                     	;# 
   339  0211                     	;# 
   340  0212                     	;# 
   341  0212                     	;# 
   342  0213                     	;# 
   343  0213                     	;# 
   344  0214                     	;# 
   345  0214                     	;# 
   346  0215                     	;# 
   347  0215                     	;# 
   348  0215                     	;# 
   349  0216                     	;# 
   350  0216                     	;# 
   351  0217                     	;# 
   352  0217                     	;# 
   353  0291                     	;# 
   354  0291                     	;# 
   355  0292                     	;# 
   356  0293                     	;# 
   357  0298                     	;# 
   358  0298                     	;# 
   359  0299                     	;# 
   360  029A                     	;# 
   361  0394                     	;# 
   362  0395                     	;# 
   363  0396                     	;# 
   364  0FE4                     	;# 
   365  0FE5                     	;# 
   366  0FE6                     	;# 
   367  0FE7                     	;# 
   368  0FE8                     	;# 
   369  0FE9                     	;# 
   370  0FEA                     	;# 
   371  0FEB                     	;# 
   372  0FED                     	;# 
   373  0FEE                     	;# 
   374  0FEF                     	;# 
   375  0000                     	;# 
   376  0001                     	;# 
   377  0002                     	;# 
   378  0003                     	;# 
   379  0004                     	;# 
   380  0005                     	;# 
   381  0006                     	;# 
   382  0007                     	;# 
   383  0008                     	;# 
   384  0009                     	;# 
   385  000A                     	;# 
   386  000B                     	;# 
   387  000C                     	;# 
   388  000D                     	;# 
   389  000E                     	;# 
   390  0010                     	;# 
   391  0011                     	;# 
   392  0012                     	;# 
   393  0015                     	;# 
   394  0016                     	;# 
   395  0016                     	;# 
   396  0017                     	;# 
   397  0018                     	;# 
   398  0019                     	;# 
   399  001A                     	;# 
   400  001B                     	;# 
   401  001C                     	;# 
   402  008C                     	;# 
   403  008D                     	;# 
   404  008E                     	;# 
   405  0090                     	;# 
   406  0091                     	;# 
   407  0092                     	;# 
   408  0095                     	;# 
   409  0096                     	;# 
   410  0097                     	;# 
   411  0099                     	;# 
   412  009A                     	;# 
   413  009B                     	;# 
   414  009B                     	;# 
   415  009C                     	;# 
   416  009D                     	;# 
   417  009E                     	;# 
   418  010C                     	;# 
   419  010D                     	;# 
   420  010E                     	;# 
   421  0116                     	;# 
   422  0117                     	;# 
   423  011D                     	;# 
   424  018C                     	;# 
   425  018D                     	;# 
   426  018E                     	;# 
   427  0191                     	;# 
   428  0191                     	;# 
   429  0192                     	;# 
   430  0193                     	;# 
   431  0193                     	;# 
   432  0194                     	;# 
   433  0195                     	;# 
   434  0196                     	;# 
   435  0197                     	;# 
   436  0199                     	;# 
   437  019A                     	;# 
   438  019B                     	;# 
   439  019B                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019C                     	;# 
   443  019C                     	;# 
   444  019D                     	;# 
   445  019E                     	;# 
   446  019F                     	;# 
   447  020D                     	;# 
   448  0210                     	;# 
   449  0211                     	;# 
   450  0211                     	;# 
   451  0212                     	;# 
   452  0212                     	;# 
   453  0213                     	;# 
   454  0213                     	;# 
   455  0214                     	;# 
   456  0214                     	;# 
   457  0215                     	;# 
   458  0215                     	;# 
   459  0215                     	;# 
   460  0216                     	;# 
   461  0216                     	;# 
   462  0217                     	;# 
   463  0217                     	;# 
   464  0291                     	;# 
   465  0291                     	;# 
   466  0292                     	;# 
   467  0293                     	;# 
   468  0298                     	;# 
   469  0298                     	;# 
   470  0299                     	;# 
   471  029A                     	;# 
   472  0394                     	;# 
   473  0395                     	;# 
   474  0396                     	;# 
   475  0FE4                     	;# 
   476  0FE5                     	;# 
   477  0FE6                     	;# 
   478  0FE7                     	;# 
   479  0FE8                     	;# 
   480  0FE9                     	;# 
   481  0FEA                     	;# 
   482  0FEB                     	;# 
   483  0FED                     	;# 
   484  0FEE                     	;# 
   485  0FEF                     	;# 
   486  0000                     	;# 
   487  0001                     	;# 
   488  0002                     	;# 
   489  0003                     	;# 
   490  0004                     	;# 
   491  0005                     	;# 
   492  0006                     	;# 
   493  0007                     	;# 
   494  0008                     	;# 
   495  0009                     	;# 
   496  000A                     	;# 
   497  000B                     	;# 
   498  000C                     	;# 
   499  000D                     	;# 
   500  000E                     	;# 
   501  0010                     	;# 
   502  0011                     	;# 
   503  0012                     	;# 
   504  0015                     	;# 
   505  0016                     	;# 
   506  0016                     	;# 
   507  0017                     	;# 
   508  0018                     	;# 
   509  0019                     	;# 
   510  001A                     	;# 
   511  001B                     	;# 
   512  001C                     	;# 
   513  008C                     	;# 
   514  008D                     	;# 
   515  008E                     	;# 
   516  0090                     	;# 
   517  0091                     	;# 
   518  0092                     	;# 
   519  0095                     	;# 
   520  0096                     	;# 
   521  0097                     	;# 
   522  0099                     	;# 
   523  009A                     	;# 
   524  009B                     	;# 
   525  009B                     	;# 
   526  009C                     	;# 
   527  009D                     	;# 
   528  009E                     	;# 
   529  010C                     	;# 
   530  010D                     	;# 
   531  010E                     	;# 
   532  0116                     	;# 
   533  0117                     	;# 
   534  011D                     	;# 
   535  018C                     	;# 
   536  018D                     	;# 
   537  018E                     	;# 
   538  0191                     	;# 
   539  0191                     	;# 
   540  0192                     	;# 
   541  0193                     	;# 
   542  0193                     	;# 
   543  0194                     	;# 
   544  0195                     	;# 
   545  0196                     	;# 
   546  0197                     	;# 
   547  0199                     	;# 
   548  019A                     	;# 
   549  019B                     	;# 
   550  019B                     	;# 
   551  019B                     	;# 
   552  019B                     	;# 
   553  019C                     	;# 
   554  019C                     	;# 
   555  019D                     	;# 
   556  019E                     	;# 
   557  019F                     	;# 
   558  020D                     	;# 
   559  0210                     	;# 
   560  0211                     	;# 
   561  0211                     	;# 
   562  0212                     	;# 
   563  0212                     	;# 
   564  0213                     	;# 
   565  0213                     	;# 
   566  0214                     	;# 
   567  0214                     	;# 
   568  0215                     	;# 
   569  0215                     	;# 
   570  0215                     	;# 
   571  0216                     	;# 
   572  0216                     	;# 
   573  0217                     	;# 
   574  0217                     	;# 
   575  0291                     	;# 
   576  0291                     	;# 
   577  0292                     	;# 
   578  0293                     	;# 
   579  0298                     	;# 
   580  0298                     	;# 
   581  0299                     	;# 
   582  029A                     	;# 
   583  0394                     	;# 
   584  0395                     	;# 
   585  0396                     	;# 
   586  0FE4                     	;# 
   587  0FE5                     	;# 
   588  0FE6                     	;# 
   589  0FE7                     	;# 
   590  0FE8                     	;# 
   591  0FE9                     	;# 
   592  0FEA                     	;# 
   593  0FEB                     	;# 
   594  0FED                     	;# 
   595  0FEE                     	;# 
   596  0FEF                     	;# 
   597  0000                     	;# 
   598  0001                     	;# 
   599  0002                     	;# 
   600  0003                     	;# 
   601  0004                     	;# 
   602  0005                     	;# 
   603  0006                     	;# 
   604  0007                     	;# 
   605  0008                     	;# 
   606  0009                     	;# 
   607  000A                     	;# 
   608  000B                     	;# 
   609  000C                     	;# 
   610  000D                     	;# 
   611  000E                     	;# 
   612  0010                     	;# 
   613  0011                     	;# 
   614  0012                     	;# 
   615  0015                     	;# 
   616  0016                     	;# 
   617  0016                     	;# 
   618  0017                     	;# 
   619  0018                     	;# 
   620  0019                     	;# 
   621  001A                     	;# 
   622  001B                     	;# 
   623  001C                     	;# 
   624  008C                     	;# 
   625  008D                     	;# 
   626  008E                     	;# 
   627  0090                     	;# 
   628  0091                     	;# 
   629  0092                     	;# 
   630  0095                     	;# 
   631  0096                     	;# 
   632  0097                     	;# 
   633  0099                     	;# 
   634  009A                     	;# 
   635  009B                     	;# 
   636  009B                     	;# 
   637  009C                     	;# 
   638  009D                     	;# 
   639  009E                     	;# 
   640  010C                     	;# 
   641  010D                     	;# 
   642  010E                     	;# 
   643  0116                     	;# 
   644  0117                     	;# 
   645  011D                     	;# 
   646  018C                     	;# 
   647  018D                     	;# 
   648  018E                     	;# 
   649  0191                     	;# 
   650  0191                     	;# 
   651  0192                     	;# 
   652  0193                     	;# 
   653  0193                     	;# 
   654  0194                     	;# 
   655  0195                     	;# 
   656  0196                     	;# 
   657  0197                     	;# 
   658  0199                     	;# 
   659  019A                     	;# 
   660  019B                     	;# 
   661  019B                     	;# 
   662  019B                     	;# 
   663  019B                     	;# 
   664  019C                     	;# 
   665  019C                     	;# 
   666  019D                     	;# 
   667  019E                     	;# 
   668  019F                     	;# 
   669  020D                     	;# 
   670  0210                     	;# 
   671  0211                     	;# 
   672  0211                     	;# 
   673  0212                     	;# 
   674  0212                     	;# 
   675  0213                     	;# 
   676  0213                     	;# 
   677  0214                     	;# 
   678  0214                     	;# 
   679  0215                     	;# 
   680  0215                     	;# 
   681  0215                     	;# 
   682  0216                     	;# 
   683  0216                     	;# 
   684  0217                     	;# 
   685  0217                     	;# 
   686  0291                     	;# 
   687  0291                     	;# 
   688  0292                     	;# 
   689  0293                     	;# 
   690  0298                     	;# 
   691  0298                     	;# 
   692  0299                     	;# 
   693  029A                     	;# 
   694  0394                     	;# 
   695  0395                     	;# 
   696  0396                     	;# 
   697  0FE4                     	;# 
   698  0FE5                     	;# 
   699  0FE6                     	;# 
   700  0FE7                     	;# 
   701  0FE8                     	;# 
   702  0FE9                     	;# 
   703  0FEA                     	;# 
   704  0FEB                     	;# 
   705  0FED                     	;# 
   706  0FEE                     	;# 
   707  0FEF                     	;# 
   708  0000                     	;# 
   709  0001                     	;# 
   710  0002                     	;# 
   711  0003                     	;# 
   712  0004                     	;# 
   713  0005                     	;# 
   714  0006                     	;# 
   715  0007                     	;# 
   716  0008                     	;# 
   717  0009                     	;# 
   718  000A                     	;# 
   719  000B                     	;# 
   720  000C                     	;# 
   721  000D                     	;# 
   722  000E                     	;# 
   723  0010                     	;# 
   724  0011                     	;# 
   725  0012                     	;# 
   726  0015                     	;# 
   727  0016                     	;# 
   728  0016                     	;# 
   729  0017                     	;# 
   730  0018                     	;# 
   731  0019                     	;# 
   732  001A                     	;# 
   733  001B                     	;# 
   734  001C                     	;# 
   735  008C                     	;# 
   736  008D                     	;# 
   737  008E                     	;# 
   738  0090                     	;# 
   739  0091                     	;# 
   740  0092                     	;# 
   741  0095                     	;# 
   742  0096                     	;# 
   743  0097                     	;# 
   744  0099                     	;# 
   745  009A                     	;# 
   746  009B                     	;# 
   747  009B                     	;# 
   748  009C                     	;# 
   749  009D                     	;# 
   750  009E                     	;# 
   751  010C                     	;# 
   752  010D                     	;# 
   753  010E                     	;# 
   754  0116                     	;# 
   755  0117                     	;# 
   756  011D                     	;# 
   757  018C                     	;# 
   758  018D                     	;# 
   759  018E                     	;# 
   760  0191                     	;# 
   761  0191                     	;# 
   762  0192                     	;# 
   763  0193                     	;# 
   764  0193                     	;# 
   765  0194                     	;# 
   766  0195                     	;# 
   767  0196                     	;# 
   768  0197                     	;# 
   769  0199                     	;# 
   770  019A                     	;# 
   771  019B                     	;# 
   772  019B                     	;# 
   773  019B                     	;# 
   774  019B                     	;# 
   775  019C                     	;# 
   776  019C                     	;# 
   777  019D                     	;# 
   778  019E                     	;# 
   779  019F                     	;# 
   780  020D                     	;# 
   781  0210                     	;# 
   782  0211                     	;# 
   783  0211                     	;# 
   784  0212                     	;# 
   785  0212                     	;# 
   786  0213                     	;# 
   787  0213                     	;# 
   788  0214                     	;# 
   789  0214                     	;# 
   790  0215                     	;# 
   791  0215                     	;# 
   792  0215                     	;# 
   793  0216                     	;# 
   794  0216                     	;# 
   795  0217                     	;# 
   796  0217                     	;# 
   797  0291                     	;# 
   798  0291                     	;# 
   799  0292                     	;# 
   800  0293                     	;# 
   801  0298                     	;# 
   802  0298                     	;# 
   803  0299                     	;# 
   804  029A                     	;# 
   805  0394                     	;# 
   806  0395                     	;# 
   807  0396                     	;# 
   808  0FE4                     	;# 
   809  0FE5                     	;# 
   810  0FE6                     	;# 
   811  0FE7                     	;# 
   812  0FE8                     	;# 
   813  0FE9                     	;# 
   814  0FEA                     	;# 
   815  0FEB                     	;# 
   816  0FED                     	;# 
   817  0FEE                     	;# 
   818  0FEF                     	;# 
   819  0000                     	;# 
   820  0001                     	;# 
   821  0002                     	;# 
   822  0003                     	;# 
   823  0004                     	;# 
   824  0005                     	;# 
   825  0006                     	;# 
   826  0007                     	;# 
   827  0008                     	;# 
   828  0009                     	;# 
   829  000A                     	;# 
   830  000B                     	;# 
   831  000C                     	;# 
   832  000D                     	;# 
   833  000E                     	;# 
   834  0010                     	;# 
   835  0011                     	;# 
   836  0012                     	;# 
   837  0015                     	;# 
   838  0016                     	;# 
   839  0016                     	;# 
   840  0017                     	;# 
   841  0018                     	;# 
   842  0019                     	;# 
   843  001A                     	;# 
   844  001B                     	;# 
   845  001C                     	;# 
   846  008C                     	;# 
   847  008D                     	;# 
   848  008E                     	;# 
   849  0090                     	;# 
   850  0091                     	;# 
   851  0092                     	;# 
   852  0095                     	;# 
   853  0096                     	;# 
   854  0097                     	;# 
   855  0099                     	;# 
   856  009A                     	;# 
   857  009B                     	;# 
   858  009B                     	;# 
   859  009C                     	;# 
   860  009D                     	;# 
   861  009E                     	;# 
   862  010C                     	;# 
   863  010D                     	;# 
   864  010E                     	;# 
   865  0116                     	;# 
   866  0117                     	;# 
   867  011D                     	;# 
   868  018C                     	;# 
   869  018D                     	;# 
   870  018E                     	;# 
   871  0191                     	;# 
   872  0191                     	;# 
   873  0192                     	;# 
   874  0193                     	;# 
   875  0193                     	;# 
   876  0194                     	;# 
   877  0195                     	;# 
   878  0196                     	;# 
   879  0197                     	;# 
   880  0199                     	;# 
   881  019A                     	;# 
   882  019B                     	;# 
   883  019B                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019C                     	;# 
   887  019C                     	;# 
   888  019D                     	;# 
   889  019E                     	;# 
   890  019F                     	;# 
   891  020D                     	;# 
   892  0210                     	;# 
   893  0211                     	;# 
   894  0211                     	;# 
   895  0212                     	;# 
   896  0212                     	;# 
   897  0213                     	;# 
   898  0213                     	;# 
   899  0214                     	;# 
   900  0214                     	;# 
   901  0215                     	;# 
   902  0215                     	;# 
   903  0215                     	;# 
   904  0216                     	;# 
   905  0216                     	;# 
   906  0217                     	;# 
   907  0217                     	;# 
   908  0291                     	;# 
   909  0291                     	;# 
   910  0292                     	;# 
   911  0293                     	;# 
   912  0298                     	;# 
   913  0298                     	;# 
   914  0299                     	;# 
   915  029A                     	;# 
   916  0394                     	;# 
   917  0395                     	;# 
   918  0396                     	;# 
   919  0FE4                     	;# 
   920  0FE5                     	;# 
   921  0FE6                     	;# 
   922  0FE7                     	;# 
   923  0FE8                     	;# 
   924  0FE9                     	;# 
   925  0FEA                     	;# 
   926  0FEB                     	;# 
   927  0FED                     	;# 
   928  0FEE                     	;# 
   929  0FEF                     	;# 
   930  0000                     	;# 
   931  0001                     	;# 
   932  0002                     	;# 
   933  0003                     	;# 
   934  0004                     	;# 
   935  0005                     	;# 
   936  0006                     	;# 
   937  0007                     	;# 
   938  0008                     	;# 
   939  0009                     	;# 
   940  000A                     	;# 
   941  000B                     	;# 
   942  000C                     	;# 
   943  000D                     	;# 
   944  000E                     	;# 
   945  0010                     	;# 
   946  0011                     	;# 
   947  0012                     	;# 
   948  0015                     	;# 
   949  0016                     	;# 
   950  0016                     	;# 
   951  0017                     	;# 
   952  0018                     	;# 
   953  0019                     	;# 
   954  001A                     	;# 
   955  001B                     	;# 
   956  001C                     	;# 
   957  008C                     	;# 
   958  008D                     	;# 
   959  008E                     	;# 
   960  0090                     	;# 
   961  0091                     	;# 
   962  0092                     	;# 
   963  0095                     	;# 
   964  0096                     	;# 
   965  0097                     	;# 
   966  0099                     	;# 
   967  009A                     	;# 
   968  009B                     	;# 
   969  009B                     	;# 
   970  009C                     	;# 
   971  009D                     	;# 
   972  009E                     	;# 
   973  010C                     	;# 
   974  010D                     	;# 
   975  010E                     	;# 
   976  0116                     	;# 
   977  0117                     	;# 
   978  011D                     	;# 
   979  018C                     	;# 
   980  018D                     	;# 
   981  018E                     	;# 
   982  0191                     	;# 
   983  0191                     	;# 
   984  0192                     	;# 
   985  0193                     	;# 
   986  0193                     	;# 
   987  0194                     	;# 
   988  0195                     	;# 
   989  0196                     	;# 
   990  0197                     	;# 
   991  0199                     	;# 
   992  019A                     	;# 
   993  019B                     	;# 
   994  019B                     	;# 
   995  019B                     	;# 
   996  019B                     	;# 
   997  019C                     	;# 
   998  019C                     	;# 
   999  019D                     	;# 
  1000  019E                     	;# 
  1001  019F                     	;# 
  1002  020D                     	;# 
  1003  0210                     	;# 
  1004  0211                     	;# 
  1005  0211                     	;# 
  1006  0212                     	;# 
  1007  0212                     	;# 
  1008  0213                     	;# 
  1009  0213                     	;# 
  1010  0214                     	;# 
  1011  0214                     	;# 
  1012  0215                     	;# 
  1013  0215                     	;# 
  1014  0215                     	;# 
  1015  0216                     	;# 
  1016  0216                     	;# 
  1017  0217                     	;# 
  1018  0217                     	;# 
  1019  0291                     	;# 
  1020  0291                     	;# 
  1021  0292                     	;# 
  1022  0293                     	;# 
  1023  0298                     	;# 
  1024  0298                     	;# 
  1025  0299                     	;# 
  1026  029A                     	;# 
  1027  0394                     	;# 
  1028  0395                     	;# 
  1029  0396                     	;# 
  1030  0FE4                     	;# 
  1031  0FE5                     	;# 
  1032  0FE6                     	;# 
  1033  0FE7                     	;# 
  1034  0FE8                     	;# 
  1035  0FE9                     	;# 
  1036  0FEA                     	;# 
  1037  0FEB                     	;# 
  1038  0FED                     	;# 
  1039  0FEE                     	;# 
  1040  0FEF                     	;# 
  1041  0000                     	;# 
  1042  0001                     	;# 
  1043  0002                     	;# 
  1044  0003                     	;# 
  1045  0004                     	;# 
  1046  0005                     	;# 
  1047  0006                     	;# 
  1048  0007                     	;# 
  1049  0008                     	;# 
  1050  0009                     	;# 
  1051  000A                     	;# 
  1052  000B                     	;# 
  1053  000C                     	;# 
  1054  000D                     	;# 
  1055  000E                     	;# 
  1056  0010                     	;# 
  1057  0011                     	;# 
  1058  0012                     	;# 
  1059  0015                     	;# 
  1060  0016                     	;# 
  1061  0016                     	;# 
  1062  0017                     	;# 
  1063  0018                     	;# 
  1064  0019                     	;# 
  1065  001A                     	;# 
  1066  001B                     	;# 
  1067  001C                     	;# 
  1068  008C                     	;# 
  1069  008D                     	;# 
  1070  008E                     	;# 
  1071  0090                     	;# 
  1072  0091                     	;# 
  1073  0092                     	;# 
  1074  0095                     	;# 
  1075  0096                     	;# 
  1076  0097                     	;# 
  1077  0099                     	;# 
  1078  009A                     	;# 
  1079  009B                     	;# 
  1080  009B                     	;# 
  1081  009C                     	;# 
  1082  009D                     	;# 
  1083  009E                     	;# 
  1084  010C                     	;# 
  1085  010D                     	;# 
  1086  010E                     	;# 
  1087  0116                     	;# 
  1088  0117                     	;# 
  1089  011D                     	;# 
  1090  018C                     	;# 
  1091  018D                     	;# 
  1092  018E                     	;# 
  1093  0191                     	;# 
  1094  0191                     	;# 
  1095  0192                     	;# 
  1096  0193                     	;# 
  1097  0193                     	;# 
  1098  0194                     	;# 
  1099  0195                     	;# 
  1100  0196                     	;# 
  1101  0197                     	;# 
  1102  0199                     	;# 
  1103  019A                     	;# 
  1104  019B                     	;# 
  1105  019B                     	;# 
  1106  019B                     	;# 
  1107  019B                     	;# 
  1108  019C                     	;# 
  1109  019C                     	;# 
  1110  019D                     	;# 
  1111  019E                     	;# 
  1112  019F                     	;# 
  1113  020D                     	;# 
  1114  0210                     	;# 
  1115  0211                     	;# 
  1116  0211                     	;# 
  1117  0212                     	;# 
  1118  0212                     	;# 
  1119  0213                     	;# 
  1120  0213                     	;# 
  1121  0214                     	;# 
  1122  0214                     	;# 
  1123  0215                     	;# 
  1124  0215                     	;# 
  1125  0215                     	;# 
  1126  0216                     	;# 
  1127  0216                     	;# 
  1128  0217                     	;# 
  1129  0217                     	;# 
  1130  0291                     	;# 
  1131  0291                     	;# 
  1132  0292                     	;# 
  1133  0293                     	;# 
  1134  0298                     	;# 
  1135  0298                     	;# 
  1136  0299                     	;# 
  1137  029A                     	;# 
  1138  0394                     	;# 
  1139  0395                     	;# 
  1140  0396                     	;# 
  1141  0FE4                     	;# 
  1142  0FE5                     	;# 
  1143  0FE6                     	;# 
  1144  0FE7                     	;# 
  1145  0FE8                     	;# 
  1146  0FE9                     	;# 
  1147  0FEA                     	;# 
  1148  0FEB                     	;# 
  1149  0FED                     	;# 
  1150  0FEE                     	;# 
  1151  0FEF                     	;# 
  1152  0000                     	;# 
  1153  0001                     	;# 
  1154  0002                     	;# 
  1155  0003                     	;# 
  1156  0004                     	;# 
  1157  0005                     	;# 
  1158  0006                     	;# 
  1159  0007                     	;# 
  1160  0008                     	;# 
  1161  0009                     	;# 
  1162  000A                     	;# 
  1163  000B                     	;# 
  1164  000C                     	;# 
  1165  000D                     	;# 
  1166  000E                     	;# 
  1167  0010                     	;# 
  1168  0011                     	;# 
  1169  0012                     	;# 
  1170  0015                     	;# 
  1171  0016                     	;# 
  1172  0016                     	;# 
  1173  0017                     	;# 
  1174  0018                     	;# 
  1175  0019                     	;# 
  1176  001A                     	;# 
  1177  001B                     	;# 
  1178  001C                     	;# 
  1179  008C                     	;# 
  1180  008D                     	;# 
  1181  008E                     	;# 
  1182  0090                     	;# 
  1183  0091                     	;# 
  1184  0092                     	;# 
  1185  0095                     	;# 
  1186  0096                     	;# 
  1187  0097                     	;# 
  1188  0099                     	;# 
  1189  009A                     	;# 
  1190  009B                     	;# 
  1191  009B                     	;# 
  1192  009C                     	;# 
  1193  009D                     	;# 
  1194  009E                     	;# 
  1195  010C                     	;# 
  1196  010D                     	;# 
  1197  010E                     	;# 
  1198  0116                     	;# 
  1199  0117                     	;# 
  1200  011D                     	;# 
  1201  018C                     	;# 
  1202  018D                     	;# 
  1203  018E                     	;# 
  1204  0191                     	;# 
  1205  0191                     	;# 
  1206  0192                     	;# 
  1207  0193                     	;# 
  1208  0193                     	;# 
  1209  0194                     	;# 
  1210  0195                     	;# 
  1211  0196                     	;# 
  1212  0197                     	;# 
  1213  0199                     	;# 
  1214  019A                     	;# 
  1215  019B                     	;# 
  1216  019B                     	;# 
  1217  019B                     	;# 
  1218  019B                     	;# 
  1219  019C                     	;# 
  1220  019C                     	;# 
  1221  019D                     	;# 
  1222  019E                     	;# 
  1223  019F                     	;# 
  1224  020D                     	;# 
  1225  0210                     	;# 
  1226  0211                     	;# 
  1227  0211                     	;# 
  1228  0212                     	;# 
  1229  0212                     	;# 
  1230  0213                     	;# 
  1231  0213                     	;# 
  1232  0214                     	;# 
  1233  0214                     	;# 
  1234  0215                     	;# 
  1235  0215                     	;# 
  1236  0215                     	;# 
  1237  0216                     	;# 
  1238  0216                     	;# 
  1239  0217                     	;# 
  1240  0217                     	;# 
  1241  0291                     	;# 
  1242  0291                     	;# 
  1243  0292                     	;# 
  1244  0293                     	;# 
  1245  0298                     	;# 
  1246  0298                     	;# 
  1247  0299                     	;# 
  1248  029A                     	;# 
  1249  0394                     	;# 
  1250  0395                     	;# 
  1251  0396                     	;# 
  1252  0FE4                     	;# 
  1253  0FE5                     	;# 
  1254  0FE6                     	;# 
  1255  0FE7                     	;# 
  1256  0FE8                     	;# 
  1257  0FE9                     	;# 
  1258  0FEA                     	;# 
  1259  0FEB                     	;# 
  1260  0FED                     	;# 
  1261  0FEE                     	;# 
  1262  0FEF                     	;# 
  1263  0000                     	;# 
  1264  0001                     	;# 
  1265  0002                     	;# 
  1266  0003                     	;# 
  1267  0004                     	;# 
  1268  0005                     	;# 
  1269  0006                     	;# 
  1270  0007                     	;# 
  1271  0008                     	;# 
  1272  0009                     	;# 
  1273  000A                     	;# 
  1274  000B                     	;# 
  1275  000C                     	;# 
  1276  000D                     	;# 
  1277  000E                     	;# 
  1278  0010                     	;# 
  1279  0011                     	;# 
  1280  0012                     	;# 
  1281  0015                     	;# 
  1282  0016                     	;# 
  1283  0016                     	;# 
  1284  0017                     	;# 
  1285  0018                     	;# 
  1286  0019                     	;# 
  1287  001A                     	;# 
  1288  001B                     	;# 
  1289  001C                     	;# 
  1290  008C                     	;# 
  1291  008D                     	;# 
  1292  008E                     	;# 
  1293  0090                     	;# 
  1294  0091                     	;# 
  1295  0092                     	;# 
  1296  0095                     	;# 
  1297  0096                     	;# 
  1298  0097                     	;# 
  1299  0099                     	;# 
  1300  009A                     	;# 
  1301  009B                     	;# 
  1302  009B                     	;# 
  1303  009C                     	;# 
  1304  009D                     	;# 
  1305  009E                     	;# 
  1306  010C                     	;# 
  1307  010D                     	;# 
  1308  010E                     	;# 
  1309  0116                     	;# 
  1310  0117                     	;# 
  1311  011D                     	;# 
  1312  018C                     	;# 
  1313  018D                     	;# 
  1314  018E                     	;# 
  1315  0191                     	;# 
  1316  0191                     	;# 
  1317  0192                     	;# 
  1318  0193                     	;# 
  1319  0193                     	;# 
  1320  0194                     	;# 
  1321  0195                     	;# 
  1322  0196                     	;# 
  1323  0197                     	;# 
  1324  0199                     	;# 
  1325  019A                     	;# 
  1326  019B                     	;# 
  1327  019B                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019C                     	;# 
  1331  019C                     	;# 
  1332  019D                     	;# 
  1333  019E                     	;# 
  1334  019F                     	;# 
  1335  020D                     	;# 
  1336  0210                     	;# 
  1337  0211                     	;# 
  1338  0211                     	;# 
  1339  0212                     	;# 
  1340  0212                     	;# 
  1341  0213                     	;# 
  1342  0213                     	;# 
  1343  0214                     	;# 
  1344  0214                     	;# 
  1345  0215                     	;# 
  1346  0215                     	;# 
  1347  0215                     	;# 
  1348  0216                     	;# 
  1349  0216                     	;# 
  1350  0217                     	;# 
  1351  0217                     	;# 
  1352  0291                     	;# 
  1353  0291                     	;# 
  1354  0292                     	;# 
  1355  0293                     	;# 
  1356  0298                     	;# 
  1357  0298                     	;# 
  1358  0299                     	;# 
  1359  029A                     	;# 
  1360  0394                     	;# 
  1361  0395                     	;# 
  1362  0396                     	;# 
  1363  0FE4                     	;# 
  1364  0FE5                     	;# 
  1365  0FE6                     	;# 
  1366  0FE7                     	;# 
  1367  0FE8                     	;# 
  1368  0FE9                     	;# 
  1369  0FEA                     	;# 
  1370  0FEB                     	;# 
  1371  0FED                     	;# 
  1372  0FEE                     	;# 
  1373  0FEF                     	;# 
  1374  0000                     	;# 
  1375  0001                     	;# 
  1376  0002                     	;# 
  1377  0003                     	;# 
  1378  0004                     	;# 
  1379  0005                     	;# 
  1380  0006                     	;# 
  1381  0007                     	;# 
  1382  0008                     	;# 
  1383  0009                     	;# 
  1384  000A                     	;# 
  1385  000B                     	;# 
  1386  000C                     	;# 
  1387  000D                     	;# 
  1388  000E                     	;# 
  1389  0010                     	;# 
  1390  0011                     	;# 
  1391  0012                     	;# 
  1392  0015                     	;# 
  1393  0016                     	;# 
  1394  0016                     	;# 
  1395  0017                     	;# 
  1396  0018                     	;# 
  1397  0019                     	;# 
  1398  001A                     	;# 
  1399  001B                     	;# 
  1400  001C                     	;# 
  1401  008C                     	;# 
  1402  008D                     	;# 
  1403  008E                     	;# 
  1404  0090                     	;# 
  1405  0091                     	;# 
  1406  0092                     	;# 
  1407  0095                     	;# 
  1408  0096                     	;# 
  1409  0097                     	;# 
  1410  0099                     	;# 
  1411  009A                     	;# 
  1412  009B                     	;# 
  1413  009B                     	;# 
  1414  009C                     	;# 
  1415  009D                     	;# 
  1416  009E                     	;# 
  1417  010C                     	;# 
  1418  010D                     	;# 
  1419  010E                     	;# 
  1420  0116                     	;# 
  1421  0117                     	;# 
  1422  011D                     	;# 
  1423  018C                     	;# 
  1424  018D                     	;# 
  1425  018E                     	;# 
  1426  0191                     	;# 
  1427  0191                     	;# 
  1428  0192                     	;# 
  1429  0193                     	;# 
  1430  0193                     	;# 
  1431  0194                     	;# 
  1432  0195                     	;# 
  1433  0196                     	;# 
  1434  0197                     	;# 
  1435  0199                     	;# 
  1436  019A                     	;# 
  1437  019B                     	;# 
  1438  019B                     	;# 
  1439  019B                     	;# 
  1440  019B                     	;# 
  1441  019C                     	;# 
  1442  019C                     	;# 
  1443  019D                     	;# 
  1444  019E                     	;# 
  1445  019F                     	;# 
  1446  020D                     	;# 
  1447  0210                     	;# 
  1448  0211                     	;# 
  1449  0211                     	;# 
  1450  0212                     	;# 
  1451  0212                     	;# 
  1452  0213                     	;# 
  1453  0213                     	;# 
  1454  0214                     	;# 
  1455  0214                     	;# 
  1456  0215                     	;# 
  1457  0215                     	;# 
  1458  0215                     	;# 
  1459  0216                     	;# 
  1460  0216                     	;# 
  1461  0217                     	;# 
  1462  0217                     	;# 
  1463  0291                     	;# 
  1464  0291                     	;# 
  1465  0292                     	;# 
  1466  0293                     	;# 
  1467  0298                     	;# 
  1468  0298                     	;# 
  1469  0299                     	;# 
  1470  029A                     	;# 
  1471  0394                     	;# 
  1472  0395                     	;# 
  1473  0396                     	;# 
  1474  0FE4                     	;# 
  1475  0FE5                     	;# 
  1476  0FE6                     	;# 
  1477  0FE7                     	;# 
  1478  0FE8                     	;# 
  1479  0FE9                     	;# 
  1480  0FEA                     	;# 
  1481  0FEB                     	;# 
  1482  0FED                     	;# 
  1483  0FEE                     	;# 
  1484  0FEF                     	;# 
  1485  0000                     	;# 
  1486  0001                     	;# 
  1487  0002                     	;# 
  1488  0003                     	;# 
  1489  0004                     	;# 
  1490  0005                     	;# 
  1491  0006                     	;# 
  1492  0007                     	;# 
  1493  0008                     	;# 
  1494  0009                     	;# 
  1495  000A                     	;# 
  1496  000B                     	;# 
  1497  000C                     	;# 
  1498  000D                     	;# 
  1499  000E                     	;# 
  1500  0010                     	;# 
  1501  0011                     	;# 
  1502  0012                     	;# 
  1503  0015                     	;# 
  1504  0016                     	;# 
  1505  0016                     	;# 
  1506  0017                     	;# 
  1507  0018                     	;# 
  1508  0019                     	;# 
  1509  001A                     	;# 
  1510  001B                     	;# 
  1511  001C                     	;# 
  1512  008C                     	;# 
  1513  008D                     	;# 
  1514  008E                     	;# 
  1515  0090                     	;# 
  1516  0091                     	;# 
  1517  0092                     	;# 
  1518  0095                     	;# 
  1519  0096                     	;# 
  1520  0097                     	;# 
  1521  0099                     	;# 
  1522  009A                     	;# 
  1523  009B                     	;# 
  1524  009B                     	;# 
  1525  009C                     	;# 
  1526  009D                     	;# 
  1527  009E                     	;# 
  1528  010C                     	;# 
  1529  010D                     	;# 
  1530  010E                     	;# 
  1531  0116                     	;# 
  1532  0117                     	;# 
  1533  011D                     	;# 
  1534  018C                     	;# 
  1535  018D                     	;# 
  1536  018E                     	;# 
  1537  0191                     	;# 
  1538  0191                     	;# 
  1539  0192                     	;# 
  1540  0193                     	;# 
  1541  0193                     	;# 
  1542  0194                     	;# 
  1543  0195                     	;# 
  1544  0196                     	;# 
  1545  0197                     	;# 
  1546  0199                     	;# 
  1547  019A                     	;# 
  1548  019B                     	;# 
  1549  019B                     	;# 
  1550  019B                     	;# 
  1551  019B                     	;# 
  1552  019C                     	;# 
  1553  019C                     	;# 
  1554  019D                     	;# 
  1555  019E                     	;# 
  1556  019F                     	;# 
  1557  020D                     	;# 
  1558  0210                     	;# 
  1559  0211                     	;# 
  1560  0211                     	;# 
  1561  0212                     	;# 
  1562  0212                     	;# 
  1563  0213                     	;# 
  1564  0213                     	;# 
  1565  0214                     	;# 
  1566  0214                     	;# 
  1567  0215                     	;# 
  1568  0215                     	;# 
  1569  0215                     	;# 
  1570  0216                     	;# 
  1571  0216                     	;# 
  1572  0217                     	;# 
  1573  0217                     	;# 
  1574  0291                     	;# 
  1575  0291                     	;# 
  1576  0292                     	;# 
  1577  0293                     	;# 
  1578  0298                     	;# 
  1579  0298                     	;# 
  1580  0299                     	;# 
  1581  029A                     	;# 
  1582  0394                     	;# 
  1583  0395                     	;# 
  1584  0396                     	;# 
  1585  0FE4                     	;# 
  1586  0FE5                     	;# 
  1587  0FE6                     	;# 
  1588  0FE7                     	;# 
  1589  0FE8                     	;# 
  1590  0FE9                     	;# 
  1591  0FEA                     	;# 
  1592  0FEB                     	;# 
  1593  0FED                     	;# 
  1594  0FEE                     	;# 
  1595  0FEF                     	;# 
  1596  0000                     	;# 
  1597  0001                     	;# 
  1598  0002                     	;# 
  1599  0003                     	;# 
  1600  0004                     	;# 
  1601  0005                     	;# 
  1602  0006                     	;# 
  1603  0007                     	;# 
  1604  0008                     	;# 
  1605  0009                     	;# 
  1606  000A                     	;# 
  1607  000B                     	;# 
  1608  000C                     	;# 
  1609  000D                     	;# 
  1610  000E                     	;# 
  1611  0010                     	;# 
  1612  0011                     	;# 
  1613  0012                     	;# 
  1614  0015                     	;# 
  1615  0016                     	;# 
  1616  0016                     	;# 
  1617  0017                     	;# 
  1618  0018                     	;# 
  1619  0019                     	;# 
  1620  001A                     	;# 
  1621  001B                     	;# 
  1622  001C                     	;# 
  1623  008C                     	;# 
  1624  008D                     	;# 
  1625  008E                     	;# 
  1626  0090                     	;# 
  1627  0091                     	;# 
  1628  0092                     	;# 
  1629  0095                     	;# 
  1630  0096                     	;# 
  1631  0097                     	;# 
  1632  0099                     	;# 
  1633  009A                     	;# 
  1634  009B                     	;# 
  1635  009B                     	;# 
  1636  009C                     	;# 
  1637  009D                     	;# 
  1638  009E                     	;# 
  1639  010C                     	;# 
  1640  010D                     	;# 
  1641  010E                     	;# 
  1642  0116                     	;# 
  1643  0117                     	;# 
  1644  011D                     	;# 
  1645  018C                     	;# 
  1646  018D                     	;# 
  1647  018E                     	;# 
  1648  0191                     	;# 
  1649  0191                     	;# 
  1650  0192                     	;# 
  1651  0193                     	;# 
  1652  0193                     	;# 
  1653  0194                     	;# 
  1654  0195                     	;# 
  1655  0196                     	;# 
  1656  0197                     	;# 
  1657  0199                     	;# 
  1658  019A                     	;# 
  1659  019B                     	;# 
  1660  019B                     	;# 
  1661  019B                     	;# 
  1662  019B                     	;# 
  1663  019C                     	;# 
  1664  019C                     	;# 
  1665  019D                     	;# 
  1666  019E                     	;# 
  1667  019F                     	;# 
  1668  020D                     	;# 
  1669  0210                     	;# 
  1670  0211                     	;# 
  1671  0211                     	;# 
  1672  0212                     	;# 
  1673  0212                     	;# 
  1674  0213                     	;# 
  1675  0213                     	;# 
  1676  0214                     	;# 
  1677  0214                     	;# 
  1678  0215                     	;# 
  1679  0215                     	;# 
  1680  0215                     	;# 
  1681  0216                     	;# 
  1682  0216                     	;# 
  1683  0217                     	;# 
  1684  0217                     	;# 
  1685  0291                     	;# 
  1686  0291                     	;# 
  1687  0292                     	;# 
  1688  0293                     	;# 
  1689  0298                     	;# 
  1690  0298                     	;# 
  1691  0299                     	;# 
  1692  029A                     	;# 
  1693  0394                     	;# 
  1694  0395                     	;# 
  1695  0396                     	;# 
  1696  0FE4                     	;# 
  1697  0FE5                     	;# 
  1698  0FE6                     	;# 
  1699  0FE7                     	;# 
  1700  0FE8                     	;# 
  1701  0FE9                     	;# 
  1702  0FEA                     	;# 
  1703  0FEB                     	;# 
  1704  0FED                     	;# 
  1705  0FEE                     	;# 
  1706  0FEF                     	;# 
  1707  0000                     	;# 
  1708  0001                     	;# 
  1709  0002                     	;# 
  1710  0003                     	;# 
  1711  0004                     	;# 
  1712  0005                     	;# 
  1713  0006                     	;# 
  1714  0007                     	;# 
  1715  0008                     	;# 
  1716  0009                     	;# 
  1717  000A                     	;# 
  1718  000B                     	;# 
  1719  000C                     	;# 
  1720  000D                     	;# 
  1721  000E                     	;# 
  1722  0010                     	;# 
  1723  0011                     	;# 
  1724  0012                     	;# 
  1725  0015                     	;# 
  1726  0016                     	;# 
  1727  0016                     	;# 
  1728  0017                     	;# 
  1729  0018                     	;# 
  1730  0019                     	;# 
  1731  001A                     	;# 
  1732  001B                     	;# 
  1733  001C                     	;# 
  1734  008C                     	;# 
  1735  008D                     	;# 
  1736  008E                     	;# 
  1737  0090                     	;# 
  1738  0091                     	;# 
  1739  0092                     	;# 
  1740  0095                     	;# 
  1741  0096                     	;# 
  1742  0097                     	;# 
  1743  0099                     	;# 
  1744  009A                     	;# 
  1745  009B                     	;# 
  1746  009B                     	;# 
  1747  009C                     	;# 
  1748  009D                     	;# 
  1749  009E                     	;# 
  1750  010C                     	;# 
  1751  010D                     	;# 
  1752  010E                     	;# 
  1753  0116                     	;# 
  1754  0117                     	;# 
  1755  011D                     	;# 
  1756  018C                     	;# 
  1757  018D                     	;# 
  1758  018E                     	;# 
  1759  0191                     	;# 
  1760  0191                     	;# 
  1761  0192                     	;# 
  1762  0193                     	;# 
  1763  0193                     	;# 
  1764  0194                     	;# 
  1765  0195                     	;# 
  1766  0196                     	;# 
  1767  0197                     	;# 
  1768  0199                     	;# 
  1769  019A                     	;# 
  1770  019B                     	;# 
  1771  019B                     	;# 
  1772  019B                     	;# 
  1773  019B                     	;# 
  1774  019C                     	;# 
  1775  019C                     	;# 
  1776  019D                     	;# 
  1777  019E                     	;# 
  1778  019F                     	;# 
  1779  020D                     	;# 
  1780  0210                     	;# 
  1781  0211                     	;# 
  1782  0211                     	;# 
  1783  0212                     	;# 
  1784  0212                     	;# 
  1785  0213                     	;# 
  1786  0213                     	;# 
  1787  0214                     	;# 
  1788  0214                     	;# 
  1789  0215                     	;# 
  1790  0215                     	;# 
  1791  0215                     	;# 
  1792  0216                     	;# 
  1793  0216                     	;# 
  1794  0217                     	;# 
  1795  0217                     	;# 
  1796  0291                     	;# 
  1797  0291                     	;# 
  1798  0292                     	;# 
  1799  0293                     	;# 
  1800  0298                     	;# 
  1801  0298                     	;# 
  1802  0299                     	;# 
  1803  029A                     	;# 
  1804  0394                     	;# 
  1805  0395                     	;# 
  1806  0396                     	;# 
  1807  0FE4                     	;# 
  1808  0FE5                     	;# 
  1809  0FE6                     	;# 
  1810  0FE7                     	;# 
  1811  0FE8                     	;# 
  1812  0FE9                     	;# 
  1813  0FEA                     	;# 
  1814  0FEB                     	;# 
  1815  0FED                     	;# 
  1816  0FEE                     	;# 
  1817  0FEF                     	;# 
  1818  0000                     	;# 
  1819  0001                     	;# 
  1820  0002                     	;# 
  1821  0003                     	;# 
  1822  0004                     	;# 
  1823  0005                     	;# 
  1824  0006                     	;# 
  1825  0007                     	;# 
  1826  0008                     	;# 
  1827  0009                     	;# 
  1828  000A                     	;# 
  1829  000B                     	;# 
  1830  000C                     	;# 
  1831  000D                     	;# 
  1832  000E                     	;# 
  1833  0010                     	;# 
  1834  0011                     	;# 
  1835  0012                     	;# 
  1836  0015                     	;# 
  1837  0016                     	;# 
  1838  0016                     	;# 
  1839  0017                     	;# 
  1840  0018                     	;# 
  1841  0019                     	;# 
  1842  001A                     	;# 
  1843  001B                     	;# 
  1844  001C                     	;# 
  1845  008C                     	;# 
  1846  008D                     	;# 
  1847  008E                     	;# 
  1848  0090                     	;# 
  1849  0091                     	;# 
  1850  0092                     	;# 
  1851  0095                     	;# 
  1852  0096                     	;# 
  1853  0097                     	;# 
  1854  0099                     	;# 
  1855  009A                     	;# 
  1856  009B                     	;# 
  1857  009B                     	;# 
  1858  009C                     	;# 
  1859  009D                     	;# 
  1860  009E                     	;# 
  1861  010C                     	;# 
  1862  010D                     	;# 
  1863  010E                     	;# 
  1864  0116                     	;# 
  1865  0117                     	;# 
  1866  011D                     	;# 
  1867  018C                     	;# 
  1868  018D                     	;# 
  1869  018E                     	;# 
  1870  0191                     	;# 
  1871  0191                     	;# 
  1872  0192                     	;# 
  1873  0193                     	;# 
  1874  0193                     	;# 
  1875  0194                     	;# 
  1876  0195                     	;# 
  1877  0196                     	;# 
  1878  0197                     	;# 
  1879  0199                     	;# 
  1880  019A                     	;# 
  1881  019B                     	;# 
  1882  019B                     	;# 
  1883  019B                     	;# 
  1884  019B                     	;# 
  1885  019C                     	;# 
  1886  019C                     	;# 
  1887  019D                     	;# 
  1888  019E                     	;# 
  1889  019F                     	;# 
  1890  020D                     	;# 
  1891  0210                     	;# 
  1892  0211                     	;# 
  1893  0211                     	;# 
  1894  0212                     	;# 
  1895  0212                     	;# 
  1896  0213                     	;# 
  1897  0213                     	;# 
  1898  0214                     	;# 
  1899  0214                     	;# 
  1900  0215                     	;# 
  1901  0215                     	;# 
  1902  0215                     	;# 
  1903  0216                     	;# 
  1904  0216                     	;# 
  1905  0217                     	;# 
  1906  0217                     	;# 
  1907  0291                     	;# 
  1908  0291                     	;# 
  1909  0292                     	;# 
  1910  0293                     	;# 
  1911  0298                     	;# 
  1912  0298                     	;# 
  1913  0299                     	;# 
  1914  029A                     	;# 
  1915  0394                     	;# 
  1916  0395                     	;# 
  1917  0396                     	;# 
  1918  0FE4                     	;# 
  1919  0FE5                     	;# 
  1920  0FE6                     	;# 
  1921  0FE7                     	;# 
  1922  0FE8                     	;# 
  1923  0FE9                     	;# 
  1924  0FEA                     	;# 
  1925  0FEB                     	;# 
  1926  0FED                     	;# 
  1927  0FEE                     	;# 
  1928  0FEF                     	;# 
  1929  0000                     	;# 
  1930  0001                     	;# 
  1931  0002                     	;# 
  1932  0003                     	;# 
  1933  0004                     	;# 
  1934  0005                     	;# 
  1935  0006                     	;# 
  1936  0007                     	;# 
  1937  0008                     	;# 
  1938  0009                     	;# 
  1939  000A                     	;# 
  1940  000B                     	;# 
  1941  000C                     	;# 
  1942  000D                     	;# 
  1943  000E                     	;# 
  1944  0010                     	;# 
  1945  0011                     	;# 
  1946  0012                     	;# 
  1947  0015                     	;# 
  1948  0016                     	;# 
  1949  0016                     	;# 
  1950  0017                     	;# 
  1951  0018                     	;# 
  1952  0019                     	;# 
  1953  001A                     	;# 
  1954  001B                     	;# 
  1955  001C                     	;# 
  1956  008C                     	;# 
  1957  008D                     	;# 
  1958  008E                     	;# 
  1959  0090                     	;# 
  1960  0091                     	;# 
  1961  0092                     	;# 
  1962  0095                     	;# 
  1963  0096                     	;# 
  1964  0097                     	;# 
  1965  0099                     	;# 
  1966  009A                     	;# 
  1967  009B                     	;# 
  1968  009B                     	;# 
  1969  009C                     	;# 
  1970  009D                     	;# 
  1971  009E                     	;# 
  1972  010C                     	;# 
  1973  010D                     	;# 
  1974  010E                     	;# 
  1975  0116                     	;# 
  1976  0117                     	;# 
  1977  011D                     	;# 
  1978  018C                     	;# 
  1979  018D                     	;# 
  1980  018E                     	;# 
  1981  0191                     	;# 
  1982  0191                     	;# 
  1983  0192                     	;# 
  1984  0193                     	;# 
  1985  0193                     	;# 
  1986  0194                     	;# 
  1987  0195                     	;# 
  1988  0196                     	;# 
  1989  0197                     	;# 
  1990  0199                     	;# 
  1991  019A                     	;# 
  1992  019B                     	;# 
  1993  019B                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019C                     	;# 
  1997  019C                     	;# 
  1998  019D                     	;# 
  1999  019E                     	;# 
  2000  019F                     	;# 
  2001  020D                     	;# 
  2002  0210                     	;# 
  2003  0211                     	;# 
  2004  0211                     	;# 
  2005  0212                     	;# 
  2006  0212                     	;# 
  2007  0213                     	;# 
  2008  0213                     	;# 
  2009  0214                     	;# 
  2010  0214                     	;# 
  2011  0215                     	;# 
  2012  0215                     	;# 
  2013  0215                     	;# 
  2014  0216                     	;# 
  2015  0216                     	;# 
  2016  0217                     	;# 
  2017  0217                     	;# 
  2018  0291                     	;# 
  2019  0291                     	;# 
  2020  0292                     	;# 
  2021  0293                     	;# 
  2022  0298                     	;# 
  2023  0298                     	;# 
  2024  0299                     	;# 
  2025  029A                     	;# 
  2026  0394                     	;# 
  2027  0395                     	;# 
  2028  0396                     	;# 
  2029  0FE4                     	;# 
  2030  0FE5                     	;# 
  2031  0FE6                     	;# 
  2032  0FE7                     	;# 
  2033  0FE8                     	;# 
  2034  0FE9                     	;# 
  2035  0FEA                     	;# 
  2036  0FEB                     	;# 
  2037  0FED                     	;# 
  2038  0FEE                     	;# 
  2039  0FEF                     	;# 
  2040                           
  2041                           	psect	idataBANK4
  2042  1EB9                     __pidataBANK4:	
  2043                           
  2044                           ;initializer for __product
  2045  1EB9  3463               	retlw	99
  2046  1EBA  3402               	retlw	2
  2047  1EBB  3400               	retlw	0
  2048  1EBC  3400               	retlw	0
  2049  1EBD  3400               	retlw	0
  2050  1EBE  3400               	retlw	0
  2051  1EBF  3400               	retlw	0
  2052  1EC0  3400               	retlw	0
  2053  1EC1  3400               	retlw	0
  2054  1EC2  3400               	retlw	0
  2055  1EC3  3400               	retlw	0
  2056  1EC4  3400               	retlw	0
  2057  1EC5  34FF               	retlw	255
  2058  1EC6  34FF               	retlw	255
  2059  1EC7  34FF               	retlw	255
  2060  1EC8  3400               	retlw	0
  2061  1EC9  3400               	retlw	0
  2062  1ECA  3400               	retlw	0
  2063  1ECB  3400               	retlw	0
  2064  1ECC  3400               	retlw	0
  2065  1ECD  3400               	retlw	0
  2066  1ECE  3400               	retlw	0
  2067  1ECF  3400               	retlw	0
  2068  1ED0  3400               	retlw	0
  2069  1ED1  3400               	retlw	0
  2070  1ED2  3400               	retlw	0
  2071  1ED3  3400               	retlw	0
  2072  1ED4  3400               	retlw	0
  2073  1ED5  3400               	retlw	0
  2074  1ED6  3400               	retlw	0
  2075  1ED7  3400               	retlw	0
  2076  1ED8  3400               	retlw	0
  2077                           
  2078                           	psect	stringtext
  2079  1000                     __pstringtext:	
  2080  1000                     _CC2500_registers_address:	
  2081  1000  3403               	retlw	3
  2082  1001  3416               	retlw	22
  2083  1002  3417               	retlw	23
  2084  1003  341E               	retlw	30
  2085  1004  341F               	retlw	31
  2086  1005  3420               	retlw	32
  2087  1006  342A               	retlw	42
  2088  1007  342B               	retlw	43
  2089  1008  340B               	retlw	11
  2090  1009  340C               	retlw	12
  2091  100A  340D               	retlw	13
  2092  100B  340E               	retlw	14
  2093  100C  340F               	retlw	15
  2094  100D  3410               	retlw	16
  2095  100E  3411               	retlw	17
  2096  100F  3412               	retlw	18
  2097  1010  3413               	retlw	19
  2098  1011  3414               	retlw	20
  2099  1012  340A               	retlw	10
  2100  1013  3415               	retlw	21
  2101  1014  3421               	retlw	33
  2102  1015  3422               	retlw	34
  2103  1016  3418               	retlw	24
  2104  1017  3419               	retlw	25
  2105  1018  341A               	retlw	26
  2106  1019  341B               	retlw	27
  2107  101A  341C               	retlw	28
  2108  101B  341D               	retlw	29
  2109  101C  3423               	retlw	35
  2110  101D  3424               	retlw	36
  2111  101E  3425               	retlw	37
  2112  101F  3426               	retlw	38
  2113  1020  3429               	retlw	41
  2114  1021  342C               	retlw	44
  2115  1022  342D               	retlw	45
  2116  1023  342E               	retlw	46
  2117  1024  3400               	retlw	0
  2118  1025  3401               	retlw	1
  2119  1026  3402               	retlw	2
  2120  1027  3407               	retlw	7
  2121  1028  3408               	retlw	8
  2122  1029  3409               	retlw	9
  2123  102A  3406               	retlw	6
  2124  102B  3404               	retlw	4
  2125  102C  3405               	retlw	5
  2126  102D  3427               	retlw	39
  2127  102E  3428               	retlw	40
  2128  102F                     __end_of_CC2500_registers_address:	
  2129  102F                     _CC2500_rfSettings:	
  2130  102F  3407               	retlw	7
  2131  1030  3407               	retlw	7
  2132  1031  3430               	retlw	48
  2133  1032  3487               	retlw	135
  2134  1033  346B               	retlw	107
  2135  1034  34F8               	retlw	248
  2136  1035  347F               	retlw	127
  2137  1036  343F               	retlw	63
  2138  1037  3409               	retlw	9
  2139  1038  3400               	retlw	0
  2140  1039  345C               	retlw	92
  2141  103A  34A7               	retlw	167
  2142  103B  3462               	retlw	98
  2143  103C  3486               	retlw	134
  2144  103D  3483               	retlw	131
  2145  103E  3403               	retlw	3
  2146  103F  3422               	retlw	34
  2147  1040  34F8               	retlw	248
  2148  1041  3400               	retlw	0
  2149  1042  3444               	retlw	68
  2150  1043  34B6               	retlw	182
  2151  1044  3410               	retlw	16
  2152  1045  3418               	retlw	24
  2153  1046  341D               	retlw	29
  2154  1047  341C               	retlw	28
  2155  1048  34C7               	retlw	199
  2156  1049  3400               	retlw	0
  2157  104A  34B2               	retlw	178
  2158  104B  34EA               	retlw	234
  2159  104C  340A               	retlw	10
  2160  104D  3400               	retlw	0
  2161  104E  3411               	retlw	17
  2162  104F  3459               	retlw	89
  2163  1050  3488               	retlw	136
  2164  1051  3431               	retlw	49
  2165  1052  340B               	retlw	11
  2166  1053  342F               	retlw	47
  2167  1054  342E               	retlw	46
  2168  1055  3406               	retlw	6
  2169  1056  3404               	retlw	4
  2170  1057  3405               	retlw	5
  2171  1058  3400               	retlw	0
  2172  1059  3430               	retlw	48
  2173  105A  34D3               	retlw	211
  2174  105B  3491               	retlw	145
  2175  105C  3441               	retlw	65
  2176  105D  3400               	retlw	0
  2177  105E                     __end_of_CC2500_rfSettings:	
  2178  105E                     _CC2500_patable_vaule:	
  2179  105E  34FE               	retlw	254
  2180  105F  34FE               	retlw	254
  2181  1060  34FE               	retlw	254
  2182  1061  34FE               	retlw	254
  2183  1062  34FE               	retlw	254
  2184  1063  34FE               	retlw	254
  2185  1064  34FE               	retlw	254
  2186  1065  34FE               	retlw	254
  2187  1066                     __end_of_CC2500_patable_vaule:	
  2188                           
  2189                           	psect	nvBANK0
  2190  006F                     __pnvBANK0:	
  2191  006F                     _product:	
  2192  006F                     	ds	1
  2193  000C                     _PORTA	set	12
  2194  000D                     _PORTB	set	13
  2195  000E                     _PORTC	set	14
  2196  0018                     _T1CON	set	24
  2197  0017                     _TMR1H	set	23
  2198  0016                     _TMR1L	set	22
  2199  005F                     _GIE	set	95
  2200  005B                     _IOCIE	set	91
  2201  0058                     _IOCIF	set	88
  2202  005E                     _PEIE	set	94
  2203  0060                     _RA0	set	96
  2204  0063                     _RA3	set	99
  2205  0064                     _RA4	set	100
  2206  0066                     _RA6	set	102
  2207  0067                     _RA7	set	103
  2208  0068                     _RB0	set	104
  2209  0069                     _RB1	set	105
  2210  006B                     _RB3	set	107
  2211  006C                     _RB4	set	108
  2212  006D                     _RB5	set	109
  2213  0070                     _RC0	set	112
  2214  0071                     _RC1	set	113
  2215  0072                     _RC2	set	114
  2216  0074                     _RC4	set	116
  2217  0075                     _RC5	set	117
  2218  0077                     _RC7	set	119
  2219  0088                     _TMR1IF	set	136
  2220  009D                     _ADCON0	set	157
  2221  009E                     _ADCON1	set	158
  2222  009C                     _ADRESH	set	156
  2223  009B                     _ADRESL	set	155
  2224  0099                     _OSCCON	set	153
  2225  008C                     _TRISA	set	140
  2226  008D                     _TRISB	set	141
  2227  008E                     _TRISC	set	142
  2228  0097                     _WDTCON	set	151
  2229  04E9                     _GO_nDONE	set	1257
  2230  0488                     _TMR1IE	set	1160
  2231  0117                     _FVRCON	set	279
  2232  010C                     _LATA	set	268
  2233  010D                     _LATB	set	269
  2234  010E                     _LATC	set	270
  2235  018C                     _ANSELA	set	396
  2236  018D                     _ANSELB	set	397
  2237  018E                     _ANSELC	set	398
  2238  0192                     _PMADRH	set	402
  2239  0191                     _PMADRL	set	401
  2240  0196                     _PMCON2	set	406
  2241  0194                     _PMDATH	set	404
  2242  0193                     _PMDATL	set	403
  2243  0CAE                     _CFGS	set	3246
  2244  0CAC                     _FREE	set	3244
  2245  0CAD                     _LWLO	set	3245
  2246  0CA8                     _RD	set	3240
  2247  0CA9                     _WR	set	3241
  2248  0CAA                     _WREN	set	3242
  2249  1069                     _WPUB1	set	4201
  2250  106A                     _WPUB2	set	4202
  2251  0396                     _IOCBF	set	918
  2252  0395                     _IOCBN	set	917
  2253  0394                     _IOCBP	set	916
  2254  1CB2                     _IOCBF2	set	7346
  2255                           
  2256                           ; #config settings
  2257  0000                     
  2258                           	psect	cinit
  2259  0015                     start_initialization:	
  2260  0015                     __initialization:	
  2261                           
  2262                           ; Clear objects allocated to BITCOMMON
  2263  0015  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2264                           
  2265                           ; Clear objects allocated to COMMON
  2266  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2267  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2268  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2269  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2270  001A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2271                           
  2272                           ; Clear objects allocated to BANK1
  2273  001B  30A0               	movlw	low __pbssBANK1
  2274  001C  0084               	movwf	4
  2275  001D  3000               	movlw	high __pbssBANK1
  2276  001E  0085               	movwf	5
  2277  001F  3046               	movlw	70
  2278  0020  319A  22B5  3180   	fcall	clear_ram0
  2279                           
  2280                           ; Clear objects allocated to BANK2
  2281  0023  3020               	movlw	low __pbssBANK2
  2282  0024  0084               	movwf	4
  2283  0025  3001               	movlw	high __pbssBANK2
  2284  0026  0085               	movwf	5
  2285  0027  3050               	movlw	80
  2286  0028  319A  22B5  3180   	fcall	clear_ram0
  2287                           
  2288                           ; Clear objects allocated to BANK3
  2289  002B  30A0               	movlw	low __pbssBANK3
  2290  002C  0084               	movwf	4
  2291  002D  3001               	movlw	high __pbssBANK3
  2292  002E  0085               	movwf	5
  2293  002F  3045               	movlw	69
  2294  0030  319A  22B5  3180   	fcall	clear_ram0
  2295                           
  2296                           ; Clear objects allocated to BANK4
  2297  0033  3020               	movlw	low __pbssBANK4
  2298  0034  0084               	movwf	4
  2299  0035  3002               	movlw	high __pbssBANK4
  2300  0036  0085               	movwf	5
  2301  0037  3025               	movlw	37
  2302  0038  319A  22B5  3180   	fcall	clear_ram0
  2303                           
  2304                           ; Initialize objects allocated to BANK4
  2305  003B  30B9               	movlw	low __pidataBANK4
  2306  003C  0084               	movwf	4
  2307  003D  309E               	movlw	(high __pidataBANK4)| (0+128)
  2308  003E  0085               	movwf	5
  2309  003F  3045               	movlw	low __pdataBANK4
  2310  0040  0086               	movwf	6
  2311  0041  3002               	movlw	high __pdataBANK4
  2312  0042  0087               	movwf	7
  2313  0043  3020               	movlw	32
  2314  0044  319A  22AF         	fcall	init_ram
  2315  0046                     end_of_initialization:	
  2316                           ;End of C runtime variable initialization code
  2317                           
  2318  0046                     __end_of__initialization:	
  2319  0046  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2320  0047  0020               	movlb	0
  2321  0048  3196  2E9A         	ljmp	_main	;jump to C main() function
  2322                           
  2323                           	psect	bitbssCOMMON
  2324  03E8                     __pbitbssCOMMON:	
  2325  03E8                     _Receive_OK:	
  2326  03E8                     	ds	1
  2327  03E9                     _Transceive_OK:	
  2328  03E9                     	ds	1
  2329                           
  2330                           	psect	bssCOMMON
  2331  0078                     __pbssCOMMON:	
  2332  0078                     _DelayOff:	
  2333  0078                     	ds	1
  2334  0079                     _DimmerLights:	
  2335  0079                     	ds	1
  2336  007A                     _DimmerLightsIntr:	
  2337  007A                     	ds	1
  2338  007B                     _LED:	
  2339  007B                     	ds	1
  2340  007C                     _Sw:	
  2341  007C                     	ds	1
  2342                           
  2343                           	psect	bssBANK1
  2344  00A0                     __pbssBANK1:	
  2345  00A0                     _myMain:	
  2346  00A0                     	ds	16
  2347  00B0                     _Buz1:	
  2348  00B0                     	ds	12
  2349  00BC                     _RF1:	
  2350  00BC                     	ds	12
  2351  00C8                     _CRC:	
  2352  00C8                     	ds	1
  2353  00C9                     _DimmerLights11:	
  2354  00C9                     	ds	1
  2355  00CA                     _DimmerLights22:	
  2356  00CA                     	ds	1
  2357  00CB                     _DimmerLightsIntrIOC:	
  2358  00CB                     	ds	1
  2359  00CC                     _RSSI:	
  2360  00CC                     	ds	1
  2361  00CD                     _Rx_Length:	
  2362  00CD                     	ds	1
  2363  00CE                     _SPI0Buffer:	
  2364  00CE                     	ds	1
  2365  00CF                     _SwDetect:	
  2366  00CF                     	ds	1
  2367  00D0                     _Tx_Length:	
  2368  00D0                     	ds	1
  2369  00D1                     _r_address:	
  2370  00D1                     	ds	1
  2371  00D2                     _r_data:	
  2372  00D2                     	ds	1
  2373  00D3                     _s_data:	
  2374  00D3                     	ds	1
  2375  00D4                     _Temp:	
  2376  00D4                     	ds	18
  2377                           
  2378                           	psect	bssBANK2
  2379  0120                     __pbssBANK2:	
  2380  0120                     _Dimmer:	
  2381  0120                     	ds	3
  2382  0123                     _Timer1:	
  2383  0123                     	ds	3
  2384  0126                     _RF_Count:	
  2385  0126                     	ds	2
  2386  0128                     _WDT:	
  2387  0128                     	ds	2
  2388  012A                     _Load:	
  2389  012A                     	ds	45
  2390  0157                     _Sw1:	
  2391  0157                     	ds	9
  2392  0160                     _VarErrLED:	
  2393  0160                     	ds	4
  2394  0164                     _VarLED1:	
  2395  0164                     	ds	4
  2396  0168                     _VarLED2:	
  2397  0168                     	ds	4
  2398  016C                     _DlySw1:	
  2399  016C                     	ds	2
  2400  016E                     _DlySw2:	
  2401  016E                     	ds	2
  2402                           
  2403                           	psect	bssBANK3
  2404  01A0                     __pbssBANK3:	
  2405  01A0                     _RF_Data:	
  2406  01A0                     	ds	30
  2407  01BE                     _DimmerLights1:	
  2408  01BE                     	ds	15
  2409  01CD                     _DimmerLights2:	
  2410  01CD                     	ds	15
  2411  01DC                     _Sw2:	
  2412  01DC                     	ds	9
  2413                           
  2414                           	psect	bssBANK4
  2415  0220                     __pbssBANK4:	
  2416  0220                     _Memory:	
  2417  0220                     	ds	37
  2418                           
  2419                           	psect	dataBANK4
  2420  0245                     __pdataBANK4:	
  2421  0245                     __product:	
  2422  0245                     	ds	32
  2423                           
  2424                           	psect	clrtext
  2425  1AB5                     clear_ram0:	
  2426                           ;	Called with FSR0 containing the base address, and
  2427                           ;	WREG with the size to clear
  2428                           
  2429  1AB5  0064               	clrwdt	;clear the watchdog before getting into this loop
  2430  1AB6                     clrloop0:	
  2431  1AB6  0180               	clrf	0	;clear RAM location pointed to by FSR
  2432  1AB7  3101               	addfsr 0,1
  2433  1AB8  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2434  1AB9  2AB6               	goto	clrloop0	;have we reached the end yet?
  2435  1ABA  3400               	retlw	0	;all done for this memory range, return
  2436                           
  2437                           	psect	inittext
  2438  1AAF                     init_ram:	
  2439  1AAF  00FE               	movwf	126
  2440  1AB0                     initloop:	
  2441  1AB0  0012               	moviw fsr0++
  2442  1AB1  001E               	movwi fsr1++
  2443  1AB2  0BFE               	decfsz	126,f
  2444  1AB3  2AB0               	goto	initloop
  2445  1AB4  3400               	retlw	0
  2446                           
  2447                           	psect	cstackBANK1
  2448  00E6                     __pcstackBANK1:	
  2449  00E6                     setMain_Exception@buz:	
  2450                           
  2451                           ; 1 bytes @ 0x0
  2452  00E6                     	ds	1
  2453  00E7                     _setMain_Exception$7062:	
  2454                           
  2455                           ; 2 bytes @ 0x1
  2456  00E7                     	ds	2
  2457  00E9                     setMain_Exception@status:	
  2458                           
  2459                           ; 1 bytes @ 0x3
  2460  00E9                     	ds	1
  2461  00EA                     setMain_Exception@command:	
  2462                           
  2463                           ; 1 bytes @ 0x4
  2464  00EA                     	ds	1
  2465  00EB                     ?_main:	
  2466  00EB                     main@argc:	
  2467                           ; 2 bytes @ 0x5
  2468                           
  2469                           
  2470                           ; 2 bytes @ 0x5
  2471  00EB                     	ds	2
  2472  00ED                     main@argv:	
  2473                           
  2474                           ; 2 bytes @ 0x7
  2475  00ED                     	ds	2
  2476                           
  2477                           	psect	cstackCOMMON
  2478  0070                     __pcstackCOMMON:	
  2479  0070                     ?_Timeout_Counter:	
  2480  0070                     ?_set_TimeoutCleared:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0070                     ?_CC2500_WriteByte:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0070                     ?_CC2500_WriteCommand:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0070                     ?_CC2500_ReadStatus:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0070                     ?_CC2500_ReadByte:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0070                     ?_CC2500_PowerRST:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0070                     ?_CC2500_InitSetREG:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0070                     ?_CC2500_InitPATable:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0070                     ?_CC2500_ClearTXFIFO:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0070                     ?_CC2500_ClearRXFIFO:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0070                     ?_CC2500_FrequencyCabr:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0070                     ?_CC2500_SIDLEMode:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0070                     ?_DlyOff_Initialization:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0070                     ?_DlyOff_Main:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0070                     ?_setDimmerLights_SwOn:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0070                     ?_setDimmerLights_SwOff:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0070                     ?_setDimmerLights_Initialization:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0070                     ?_Dimmer_Initialization:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0070                     ?_setDimmerLights_Main:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0070                     ?_setTxData:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0070                     ?_setDimmerLights_Line:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0070                     ?_setLED_Initialization:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0070                     ?_setLED_Main:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0070                     ?_Fosc_Set:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0070                     ?_IO_Set:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0070                     ?_TMR1_Set:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0070                     ?_ADC_Set:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0070                     ?_IOC_Set:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0070                     ?_WDT_Set:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0070                     ?_IOC_ISR:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0070                     ?_TMR1_ISR:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0070                     ?_Flash_Memory_Write:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_Flash_Memory_Modify:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_WDT_Clearing:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_setLoad_AH_AL_Restore:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_setTemp_Initialization:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_setTemp_Main:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_setRF_Initialization:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_setRF_Main:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_getRxData:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_setLog_Code:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_setControl_Lights_Table:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_setRFSW_Control:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_setRFSW_AdjControl:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_setRF_DimmerValue:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_setSw_Initialization:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_setMain_Exception:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_setSw_Main:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_myMain_Initialization:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_my_MainTimer:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_Buzzer_Initialization:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_Buzzer_Main:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_CC2500_TxData:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_CC2500_RxData:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_CC2500_PowerOnInitial:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_DelayOffPointSelect:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_DelayOff_Initialization:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_DelayOff_Main:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_DimmerIntrIOCPointSelect:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ??_DimmerIntrIOCPointSelect:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_DimmerIntrPointSelect:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ??_DimmerIntrPointSelect:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_setDimmerLights_IntrControl:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_DimmerLightsPointSelect:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_DimmerLights_Initialization:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_DimmerLights_Main:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_setDimmerLights_AdjControl:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_setDimmerLights_ErrorClose:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_setDimmerLights_AdjRF:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_LedPointSelect:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_LED_Initialization:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_LED_Main:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_Mcu_Initialization:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_ISR:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_setDimmerReClock:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_Flash_Memory_Initialization:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_Flash_Memory_Main:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_Flash_Memory_Unlock:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_Flash_Memory_Erasing:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_setMemory_Modify:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_setMemory_LoopSave:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_WDT_Main:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_Load_Initialization:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_getLoad_AD:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_Load_Main:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_Temp_Initialization:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_getTemp_AD:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_Temp_Main:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_RF_Initialization:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_RF_Main:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_setRF_Learn:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_TouchPower:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_SwPointSelect:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_Switch_Initialization:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_Switch_Main:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_getDimmerLights_Status:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_DelayTimejudge:	
  2772                           ; 1 bytes @ 0x0
  2773                           
  2774  0070                     ?_getMain_All_Error_Status:	
  2775                           ; 1 bytes @ 0x0
  2776                           
  2777  0070                     ?_getLoad_OK:	
  2778                           ; 1 bytes @ 0x0
  2779                           
  2780  0070                     ?_getMain_LightsStatus:	
  2781                           ; 1 bytes @ 0x0
  2782                           
  2783  0070                     ?_getPercentValue:	
  2784                           ; 1 bytes @ 0x0
  2785                           
  2786  0070                     ?_Flash_Memory_Read:	
  2787                           ; 1 bytes @ 0x0
  2788                           
  2789  0070                     ?_getMain_LoadOK:	
  2790                           ; 1 bytes @ 0x0
  2791                           
  2792  0070                     ?_getMain_Lights_Count:	
  2793                           ; 1 bytes @ 0x0
  2794                           
  2795  0070                     ?_getRF_KeyStatus:	
  2796                           ; 1 bytes @ 0x0
  2797                           
  2798  0070                     ?_getSw_KeyStatus:	
  2799                           ; 1 bytes @ 0x0
  2800                           
  2801  0070                     ?_getAll_DimmerLights_AdjGO:	
  2802                           ; 1 bytes @ 0x0
  2803                           
  2804  0070                     ?_getDimmer_LoadOK:	
  2805                           ; 1 bytes @ 0x0
  2806                           
  2807  0070                     ?_getDimmerLights_Line:	
  2808                           ; 1 bytes @ 0x0
  2809                           
  2810  0070                     ?_setPercentValue:	
  2811                           ; 1 bytes @ 0x0
  2812                           
  2813                           
  2814                           ; 1 bytes @ 0x0
  2815  0070                     	ds	1
  2816  0071                     DimmerIntrIOCPointSelect@lights:	
  2817  0071                     DimmerIntrPointSelect@lights:	
  2818                           ; 1 bytes @ 0x1
  2819                           
  2820                           
  2821                           ; 1 bytes @ 0x1
  2822  0071                     	ds	1
  2823  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2824  0072                     ??_setDimmerLights_IntrControl:	
  2825                           ; 0 bytes @ 0x2
  2826                           
  2827  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2828                           ; 0 bytes @ 0x2
  2829                           
  2830                           
  2831                           ; 1 bytes @ 0x2
  2832  0072                     	ds	1
  2833  0073                     ??_IOC_ISR:	
  2834  0073                     ??_setDimmerReClock:	
  2835                           ; 0 bytes @ 0x3
  2836                           
  2837                           
  2838                           ; 0 bytes @ 0x3
  2839  0073                     	ds	3
  2840  0076                     setDimmerLights_IntrControl@lights:	
  2841                           
  2842                           ; 1 bytes @ 0x6
  2843  0076                     	ds	1
  2844  0077                     ??_TMR1_ISR:	
  2845  0077                     ??_ISR:	
  2846                           ; 0 bytes @ 0x7
  2847                           
  2848                           
  2849                           ; 0 bytes @ 0x7
  2850  0077                     	ds	1
  2851                           
  2852                           	psect	cstackBANK0
  2853  0020                     __pcstackBANK0:	
  2854  0020                     ??_Timeout_Counter:	
  2855  0020                     ??_set_TimeoutCleared:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0020                     ??_CC2500_WriteByte:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0020                     ??_CC2500_ReadByte:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0020                     ?_DelayTime_1us:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0020                     ??_Dimmer_Initialization:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0020                     ??_getMain_All_Error_Status:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0020                     ??_getLoad_OK:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0020                     ??_setTxData:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0020                     ??_setDimmerLights_Line:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0020                     ??_Fosc_Set:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0020                     ??_IO_Set:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0020                     ??_TMR1_Set:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0020                     ??_ADC_Set:	
  2892                           ; 0 bytes @ 0x0
  2893                           
  2894  0020                     ??_IOC_Set:	
  2895                           ; 0 bytes @ 0x0
  2896                           
  2897  0020                     ??_WDT_Set:	
  2898                           ; 0 bytes @ 0x0
  2899                           
  2900  0020                     ??_Flash_Memory_Read:	
  2901                           ; 0 bytes @ 0x0
  2902                           
  2903  0020                     ?_setMemory_Data:	
  2904                           ; 0 bytes @ 0x0
  2905                           
  2906  0020                     ??_Flash_Memory_Write:	
  2907                           ; 0 bytes @ 0x0
  2908                           
  2909  0020                     ??_WDT_Clearing:	
  2910                           ; 0 bytes @ 0x0
  2911                           
  2912  0020                     ??_setLoad_AH_AL_Restore:	
  2913                           ; 0 bytes @ 0x0
  2914                           
  2915  0020                     ??_getMain_Lights_Count:	
  2916                           ; 0 bytes @ 0x0
  2917                           
  2918  0020                     ??_setTemp_Initialization:	
  2919                           ; 0 bytes @ 0x0
  2920                           
  2921  0020                     ??_setRF_Initialization:	
  2922                           ; 0 bytes @ 0x0
  2923                           
  2924  0020                     ??_getRF_KeyStatus:	
  2925                           ; 0 bytes @ 0x0
  2926                           
  2927  0020                     ??_getSw_KeyStatus:	
  2928                           ; 0 bytes @ 0x0
  2929                           
  2930  0020                     ??_myMain_Initialization:	
  2931                           ; 0 bytes @ 0x0
  2932                           
  2933  0020                     ??_Buzzer_Initialization:	
  2934                           ; 0 bytes @ 0x0
  2935                           
  2936  0020                     ??_Buzzer_Main:	
  2937                           ; 0 bytes @ 0x0
  2938                           
  2939  0020                     ??_DelayOffPointSelect:	
  2940                           ; 0 bytes @ 0x0
  2941                           
  2942  0020                     ??_DimmerLightsPointSelect:	
  2943                           ; 0 bytes @ 0x0
  2944                           
  2945  0020                     ??_getAll_DimmerLights_AdjGO:	
  2946                           ; 0 bytes @ 0x0
  2947                           
  2948  0020                     ??_getDimmer_LoadOK:	
  2949                           ; 0 bytes @ 0x0
  2950                           
  2951  0020                     ??_getDimmerLights_Line:	
  2952                           ; 0 bytes @ 0x0
  2953                           
  2954  0020                     ??_LedPointSelect:	
  2955                           ; 0 bytes @ 0x0
  2956                           
  2957  0020                     ??_Flash_Memory_Unlock:	
  2958                           ; 0 bytes @ 0x0
  2959                           
  2960  0020                     ??_Flash_Memory_Erasing:	
  2961                           ; 0 bytes @ 0x0
  2962                           
  2963  0020                     ??_setMemory_Modify:	
  2964                           ; 0 bytes @ 0x0
  2965                           
  2966  0020                     ??_setMemory_LoopSave:	
  2967                           ; 0 bytes @ 0x0
  2968                           
  2969  0020                     ??_WDT_Main:	
  2970                           ; 0 bytes @ 0x0
  2971                           
  2972  0020                     ??_Temp_Initialization:	
  2973                           ; 0 bytes @ 0x0
  2974                           
  2975  0020                     ??_setRF_Learn:	
  2976                           ; 0 bytes @ 0x0
  2977                           
  2978  0020                     ??_TouchPower:	
  2979                           ; 0 bytes @ 0x0
  2980                           
  2981  0020                     ??_SwPointSelect:	
  2982                           ; 0 bytes @ 0x0
  2983                           
  2984  0020                     ?___bmul:	
  2985                           ; 0 bytes @ 0x0
  2986                           
  2987  0020                     ?_getBuz_GO:	
  2988                           ; 1 bytes @ 0x0
  2989                           
  2990  0020                     ?_getAD:	
  2991                           ; 2 bytes @ 0x0
  2992                           
  2993  0020                     ?___awdiv:	
  2994                           ; 2 bytes @ 0x0
  2995                           
  2996  0020                     ?___ftpack:	
  2997                           ; 2 bytes @ 0x0
  2998                           
  2999  0020                     getDimmer_LoadOK@status:	
  3000                           ; 3 bytes @ 0x0
  3001                           
  3002  0020                     setDimmerLights_Line@lights:	
  3003                           ; 1 bytes @ 0x0
  3004                           
  3005  0020                     getAD@adcon1:	
  3006                           ; 1 bytes @ 0x0
  3007                           
  3008  0020                     setMemory_Data@data:	
  3009                           ; 1 bytes @ 0x0
  3010                           
  3011  0020                     getLoad_OK@ok:	
  3012                           ; 1 bytes @ 0x0
  3013                           
  3014  0020                     getMain_Lights_Count@count:	
  3015                           ; 1 bytes @ 0x0
  3016                           
  3017  0020                     ___bmul@multiplicand:	
  3018                           ; 1 bytes @ 0x0
  3019                           
  3020  0020                     DelayTime_1us@count:	
  3021                           ; 1 bytes @ 0x0
  3022                           
  3023  0020                     ___awdiv@divisor:	
  3024                           ; 2 bytes @ 0x0
  3025                           
  3026  0020                     ___ftpack@arg:	
  3027                           ; 2 bytes @ 0x0
  3028                           
  3029                           
  3030                           ; 3 bytes @ 0x0
  3031  0020                     	ds	1
  3032  0021                     ??_setMemory_Data:	
  3033  0021                     ??_getMain_LoadOK:	
  3034                           ; 0 bytes @ 0x1
  3035                           
  3036  0021                     ??_Mcu_Initialization:	
  3037                           ; 0 bytes @ 0x1
  3038                           
  3039  0021                     ??_RF_Initialization:	
  3040                           ; 0 bytes @ 0x1
  3041                           
  3042  0021                     ??___bmul:	
  3043                           ; 0 bytes @ 0x1
  3044                           
  3045  0021                     CC2500_WriteByte@loop_a:	
  3046                           ; 0 bytes @ 0x1
  3047                           
  3048  0021                     CC2500_ReadByte@loop_b:	
  3049                           ; 1 bytes @ 0x1
  3050                           
  3051  0021                     DelayOffPointSelect@sw:	
  3052                           ; 1 bytes @ 0x1
  3053                           
  3054  0021                     DimmerLightsPointSelect@lights:	
  3055                           ; 1 bytes @ 0x1
  3056                           
  3057  0021                     getAll_DimmerLights_AdjGO@adjgo:	
  3058                           ; 1 bytes @ 0x1
  3059                           
  3060  0021                     getDimmerLights_Line@line:	
  3061                           ; 1 bytes @ 0x1
  3062                           
  3063  0021                     LedPointSelect@led:	
  3064                           ; 1 bytes @ 0x1
  3065                           
  3066  0021                     Flash_Memory_Read@i:	
  3067                           ; 1 bytes @ 0x1
  3068                           
  3069  0021                     Flash_Memory_Write@i:	
  3070                           ; 1 bytes @ 0x1
  3071                           
  3072  0021                     setMemory_Modify@command:	
  3073                           ; 1 bytes @ 0x1
  3074                           
  3075  0021                     setMemory_LoopSave@command:	
  3076                           ; 1 bytes @ 0x1
  3077                           
  3078  0021                     setLoad_AH_AL_Restore@i:	
  3079                           ; 1 bytes @ 0x1
  3080                           
  3081  0021                     setRF_Learn@command:	
  3082                           ; 1 bytes @ 0x1
  3083                           
  3084  0021                     getRF_KeyStatus@key:	
  3085                           ; 1 bytes @ 0x1
  3086                           
  3087  0021                     SwPointSelect@sw:	
  3088                           ; 1 bytes @ 0x1
  3089                           
  3090  0021                     _getSw_KeyStatus$6326:	
  3091                           ; 1 bytes @ 0x1
  3092                           
  3093  0021                     getMain_Lights_Count@status3:	
  3094                           ; 1 bytes @ 0x1
  3095                           
  3096  0021                     _getMain_All_Error_Status$7073:	
  3097                           ; 1 bytes @ 0x1
  3098                           
  3099                           
  3100                           ; 2 bytes @ 0x1
  3101  0021                     	ds	1
  3102  0022                     ??_CC2500_WriteCommand:	
  3103  0022                     ??_CC2500_ReadStatus:	
  3104                           ; 0 bytes @ 0x2
  3105                           
  3106  0022                     ??_DelayTime_1us:	
  3107                           ; 0 bytes @ 0x2
  3108                           
  3109  0022                     ?_CC2500_WriteREG:	
  3110                           ; 0 bytes @ 0x2
  3111                           
  3112  0022                     ??_DlyOff_Initialization:	
  3113                           ; 0 bytes @ 0x2
  3114                           
  3115  0022                     ??_getDimmerLights_Status:	
  3116                           ; 0 bytes @ 0x2
  3117                           
  3118  0022                     ??_setDimmerLights_Initialization:	
  3119                           ; 0 bytes @ 0x2
  3120                           
  3121  0022                     ?_setDimmerLights_Trigger:	
  3122                           ; 0 bytes @ 0x2
  3123                           
  3124  0022                     ?_setDimmerLights_TriggerAdj:	
  3125                           ; 0 bytes @ 0x2
  3126                           
  3127  0022                     ?_setLED:	
  3128                           ; 0 bytes @ 0x2
  3129                           
  3130  0022                     ??_setLED_Main:	
  3131                           ; 0 bytes @ 0x2
  3132                           
  3133  0022                     ??_getBuz_GO:	
  3134                           ; 0 bytes @ 0x2
  3135                           
  3136  0022                     ??_Load_Initialization:	
  3137                           ; 0 bytes @ 0x2
  3138                           
  3139  0022                     CC2500_WriteREG@value:	
  3140                           ; 0 bytes @ 0x2
  3141                           
  3142  0022                     DlyOff_Initialization@sw:	
  3143                           ; 1 bytes @ 0x2
  3144                           
  3145  0022                     getDimmerLights_Status@lights:	
  3146                           ; 1 bytes @ 0x2
  3147                           
  3148  0022                     _getAll_DimmerLights_AdjGO$2557:	
  3149                           ; 1 bytes @ 0x2
  3150                           
  3151  0022                     setDimmerLights_Trigger@command:	
  3152                           ; 1 bytes @ 0x2
  3153                           
  3154  0022                     setDimmerLights_TriggerAdj@command:	
  3155                           ; 1 bytes @ 0x2
  3156                           
  3157  0022                     setLED@command:	
  3158                           ; 1 bytes @ 0x2
  3159                           
  3160  0022                     Flash_Memory_Read@address:	
  3161                           ; 1 bytes @ 0x2
  3162                           
  3163  0022                     setMemory_Data@address:	
  3164                           ; 1 bytes @ 0x2
  3165                           
  3166  0022                     _getRF_KeyStatus$5253:	
  3167                           ; 1 bytes @ 0x2
  3168                           
  3169  0022                     _getSw_KeyStatus$6327:	
  3170                           ; 1 bytes @ 0x2
  3171                           
  3172  0022                     getMain_Lights_Count@status1:	
  3173                           ; 1 bytes @ 0x2
  3174                           
  3175  0022                     getMain_LoadOK@ok:	
  3176                           ; 1 bytes @ 0x2
  3177                           
  3178  0022                     ___bmul@product:	
  3179                           ; 1 bytes @ 0x2
  3180                           
  3181  0022                     DelayTime_1us@i:	
  3182                           ; 1 bytes @ 0x2
  3183                           
  3184  0022                     ___awdiv@dividend:	
  3185                           ; 2 bytes @ 0x2
  3186                           
  3187                           
  3188                           ; 2 bytes @ 0x2
  3189  0022                     	ds	1
  3190  0023                     ??_CC2500_WriteREG:	
  3191  0023                     ??_setDimmerLights_Trigger:	
  3192                           ; 0 bytes @ 0x3
  3193                           
  3194  0023                     ??_setDimmerLights_TriggerAdj:	
  3195                           ; 0 bytes @ 0x3
  3196                           
  3197  0023                     ??_setLED:	
  3198                           ; 0 bytes @ 0x3
  3199                           
  3200  0023                     ??_DelayOff_Initialization:	
  3201                           ; 0 bytes @ 0x3
  3202                           
  3203  0023                     ??_getAD:	
  3204                           ; 0 bytes @ 0x3
  3205                           
  3206  0023                     CC2500_WriteCommand@command:	
  3207                           ; 0 bytes @ 0x3
  3208                           
  3209  0023                     CC2500_ReadStatus@status_addr:	
  3210                           ; 1 bytes @ 0x3
  3211                           
  3212  0023                     setDimmerLights_Initialization@lights:	
  3213                           ; 1 bytes @ 0x3
  3214                           
  3215  0023                     getDimmerLights_Status@status:	
  3216                           ; 1 bytes @ 0x3
  3217                           
  3218  0023                     setLED@led:	
  3219                           ; 1 bytes @ 0x3
  3220                           
  3221  0023                     getAD@adcon0:	
  3222                           ; 1 bytes @ 0x3
  3223                           
  3224  0023                     Flash_Memory_Read@ret:	
  3225                           ; 1 bytes @ 0x3
  3226                           
  3227  0023                     getSw_KeyStatus@status:	
  3228                           ; 1 bytes @ 0x3
  3229                           
  3230  0023                     getMain_Lights_Count@status2:	
  3231                           ; 1 bytes @ 0x3
  3232                           
  3233  0023                     ___bmul@multiplier:	
  3234                           ; 1 bytes @ 0x3
  3235                           
  3236  0023                     ___ftpack@exp:	
  3237                           ; 1 bytes @ 0x3
  3238                           
  3239  0023                     _getMain_All_Error_Status$7074:	
  3240                           ; 1 bytes @ 0x3
  3241                           
  3242                           
  3243                           ; 2 bytes @ 0x3
  3244  0023                     	ds	1
  3245  0024                     ??_CC2500_ClearTXFIFO:	
  3246  0024                     ??_CC2500_ClearRXFIFO:	
  3247                           ; 0 bytes @ 0x4
  3248                           
  3249  0024                     ??_CC2500_SIDLEMode:	
  3250                           ; 0 bytes @ 0x4
  3251                           
  3252  0024                     ??_DelayTimejudge:	
  3253                           ; 0 bytes @ 0x4
  3254                           
  3255  0024                     ??_getMain_LightsStatus:	
  3256                           ; 0 bytes @ 0x4
  3257                           
  3258  0024                     ??_setLED_Initialization:	
  3259                           ; 0 bytes @ 0x4
  3260                           
  3261  0024                     ??_Flash_Memory_Modify:	
  3262                           ; 0 bytes @ 0x4
  3263                           
  3264  0024                     ??_setSw_Initialization:	
  3265                           ; 0 bytes @ 0x4
  3266                           
  3267  0024                     ??_CC2500_TxData:	
  3268                           ; 0 bytes @ 0x4
  3269                           
  3270  0024                     ??_CC2500_RxData:	
  3271                           ; 0 bytes @ 0x4
  3272                           
  3273  0024                     ??_DimmerLights_Initialization:	
  3274                           ; 0 bytes @ 0x4
  3275                           
  3276  0024                     ??_getLoad_AD:	
  3277                           ; 0 bytes @ 0x4
  3278                           
  3279  0024                     ??_getTemp_AD:	
  3280                           ; 0 bytes @ 0x4
  3281                           
  3282  0024                     ??___awdiv:	
  3283                           ; 0 bytes @ 0x4
  3284                           
  3285  0024                     CC2500_WriteREG@w_addr:	
  3286                           ; 0 bytes @ 0x4
  3287                           
  3288  0024                     setDimmerLights_Trigger@lights:	
  3289                           ; 1 bytes @ 0x4
  3290                           
  3291  0024                     setDimmerLights_TriggerAdj@lights:	
  3292                           ; 1 bytes @ 0x4
  3293                           
  3294  0024                     setLED_Initialization@led:	
  3295                           ; 1 bytes @ 0x4
  3296                           
  3297  0024                     setLED_Main@led:	
  3298                           ; 1 bytes @ 0x4
  3299                           
  3300  0024                     setSw_Initialization@sw:	
  3301                           ; 1 bytes @ 0x4
  3302                           
  3303  0024                     getSw_KeyStatus@sw:	
  3304                           ; 1 bytes @ 0x4
  3305                           
  3306  0024                     ___ftpack@sign:	
  3307                           ; 1 bytes @ 0x4
  3308                           
  3309  0024                     getBuz_GO@i:	
  3310                           ; 1 bytes @ 0x4
  3311                           
  3312  0024                     DelayTime_1us@j:	
  3313                           ; 2 bytes @ 0x4
  3314                           
  3315                           
  3316                           ; 2 bytes @ 0x4
  3317  0024                     	ds	1
  3318  0025                     ??_CC2500_InitSetREG:	
  3319  0025                     ??_CC2500_InitPATable:	
  3320                           ; 0 bytes @ 0x5
  3321                           
  3322  0025                     ??___ftpack:	
  3323                           ; 0 bytes @ 0x5
  3324                           
  3325  0025                     ??_setDimmerLights_AdjControl:	
  3326                           ; 0 bytes @ 0x5
  3327                           
  3328  0025                     ??_LED_Initialization:	
  3329                           ; 0 bytes @ 0x5
  3330                           
  3331  0025                     ??_LED_Main:	
  3332                           ; 0 bytes @ 0x5
  3333                           
  3334  0025                     ??_Switch_Initialization:	
  3335                           ; 0 bytes @ 0x5
  3336                           
  3337  0025                     CC2500_TxData@loop_e:	
  3338                           ; 0 bytes @ 0x5
  3339                           
  3340  0025                     CC2500_RxData@loop_f:	
  3341                           ; 1 bytes @ 0x5
  3342                           
  3343  0025                     Flash_Memory_Modify@i:	
  3344                           ; 1 bytes @ 0x5
  3345                           
  3346  0025                     getTemp_AD@channel:	
  3347                           ; 1 bytes @ 0x5
  3348                           
  3349  0025                     getMain_LightsStatus@count:	
  3350                           ; 1 bytes @ 0x5
  3351                           
  3352  0025                     getMain_All_Error_Status@command:	
  3353                           ; 1 bytes @ 0x5
  3354                           
  3355  0025                     ___awdiv@counter:	
  3356                           ; 1 bytes @ 0x5
  3357                           
  3358                           
  3359                           ; 1 bytes @ 0x5
  3360  0025                     	ds	1
  3361  0026                     ??_CC2500_PowerRST:	
  3362  0026                     ??_CC2500_FrequencyCabr:	
  3363                           ; 0 bytes @ 0x6
  3364                           
  3365  0026                     CC2500_InitSetREG@temp1:	
  3366                           ; 0 bytes @ 0x6
  3367                           
  3368  0026                     CC2500_InitPATable@temp:	
  3369                           ; 1 bytes @ 0x6
  3370                           
  3371  0026                     DelayTimejudge@i:	
  3372                           ; 1 bytes @ 0x6
  3373                           
  3374  0026                     setDimmerLights_AdjControl@idle:	
  3375                           ; 1 bytes @ 0x6
  3376                           
  3377  0026                     getLoad_AD@channel:	
  3378                           ; 1 bytes @ 0x6
  3379                           
  3380  0026                     getMain_All_Error_Status@status:	
  3381                           ; 1 bytes @ 0x6
  3382                           
  3383  0026                     ___awdiv@sign:	
  3384                           ; 1 bytes @ 0x6
  3385                           
  3386  0026                     getMain_LightsStatus@i:	
  3387                           ; 1 bytes @ 0x6
  3388                           
  3389                           
  3390                           ; 2 bytes @ 0x6
  3391  0026                     	ds	1
  3392  0027                     ?_setDimmerLights:	
  3393  0027                     ??_setTemp_Main:	
  3394                           ; 0 bytes @ 0x7
  3395                           
  3396  0027                     CC2500_InitSetREG@temp2:	
  3397                           ; 0 bytes @ 0x7
  3398                           
  3399  0027                     CC2500_InitPATable@loop_d:	
  3400                           ; 1 bytes @ 0x7
  3401                           
  3402  0027                     DelayTimejudge@j:	
  3403                           ; 1 bytes @ 0x7
  3404                           
  3405  0027                     _setDimmerLights_AdjControl$2577:	
  3406                           ; 1 bytes @ 0x7
  3407                           
  3408  0027                     setDimmerLights@status:	
  3409                           ; 1 bytes @ 0x7
  3410                           
  3411  0027                     getLoad_AD@k:	
  3412                           ; 1 bytes @ 0x7
  3413                           
  3414  0027                     ___awdiv@quotient:	
  3415                           ; 1 bytes @ 0x7
  3416                           
  3417                           
  3418                           ; 2 bytes @ 0x7
  3419  0027                     	ds	1
  3420  0028                     ??_setDimmerLights:	
  3421  0028                     ?___awtoft:	
  3422                           ; 0 bytes @ 0x8
  3423                           
  3424  0028                     CC2500_InitSetREG@loop_c:	
  3425                           ; 3 bytes @ 0x8
  3426                           
  3427  0028                     DelayTimejudge@k:	
  3428                           ; 1 bytes @ 0x8
  3429                           
  3430  0028                     setDimmerLights_AdjControl@sw:	
  3431                           ; 1 bytes @ 0x8
  3432                           
  3433  0028                     getLoad_AD@j:	
  3434                           ; 1 bytes @ 0x8
  3435                           
  3436  0028                     getMain_LightsStatus@status:	
  3437                           ; 1 bytes @ 0x8
  3438                           
  3439  0028                     ___awtoft@c:	
  3440                           ; 1 bytes @ 0x8
  3441                           
  3442                           
  3443                           ; 2 bytes @ 0x8
  3444  0028                     	ds	1
  3445  0029                     ?_setBuz:	
  3446  0029                     ??_CC2500_PowerOnInitial:	
  3447                           ; 0 bytes @ 0x9
  3448                           
  3449  0029                     ??_Flash_Memory_Main:	
  3450                           ; 0 bytes @ 0x9
  3451                           
  3452  0029                     ??_Load_Main:	
  3453                           ; 0 bytes @ 0x9
  3454                           
  3455  0029                     ??_Temp_Main:	
  3456                           ; 0 bytes @ 0x9
  3457                           
  3458  0029                     DelayTimejudge@value:	
  3459                           ; 0 bytes @ 0x9
  3460                           
  3461  0029                     setDimmerLights@lights:	
  3462                           ; 1 bytes @ 0x9
  3463                           
  3464  0029                     getLoad_AD@i:	
  3465                           ; 1 bytes @ 0x9
  3466                           
  3467  0029                     setBuz@time:	
  3468                           ; 1 bytes @ 0x9
  3469                           
  3470                           
  3471                           ; 2 bytes @ 0x9
  3472  0029                     	ds	1
  3473  002A                     ?_setDelayOff_GO:	
  3474  002A                     setDelayOff_GO@command:	
  3475                           ; 0 bytes @ 0xA
  3476                           
  3477                           
  3478                           ; 1 bytes @ 0xA
  3479  002A                     	ds	1
  3480  002B                     ??_setBuz:	
  3481  002B                     ??___awtoft:	
  3482                           ; 0 bytes @ 0xB
  3483                           
  3484  002B                     setDelayOff_GO@value:	
  3485                           ; 0 bytes @ 0xB
  3486                           
  3487  002B                     Load_Main@j:	
  3488                           ; 1 bytes @ 0xB
  3489                           
  3490                           
  3491                           ; 1 bytes @ 0xB
  3492  002B                     	ds	1
  3493  002C                     ??_setDelayOff_GO:	
  3494  002C                     setBuz@count:	
  3495                           ; 0 bytes @ 0xC
  3496                           
  3497  002C                     Load_Main@adjgo:	
  3498                           ; 1 bytes @ 0xC
  3499                           
  3500                           
  3501                           ; 1 bytes @ 0xC
  3502  002C                     	ds	1
  3503  002D                     ??_setLog_Code:	
  3504  002D                     ??_my_MainTimer:	
  3505                           ; 0 bytes @ 0xD
  3506                           
  3507  002D                     _Load_Main$3848:	
  3508                           ; 0 bytes @ 0xD
  3509                           
  3510  002D                     ___awtoft@sign:	
  3511                           ; 1 bytes @ 0xD
  3512                           
  3513                           
  3514                           ; 1 bytes @ 0xD
  3515  002D                     	ds	1
  3516  002E                     ?___ftdiv:	
  3517  002E                     ?___ftmul:	
  3518                           ; 3 bytes @ 0xE
  3519                           
  3520  002E                     setDelayOff_GO@sw:	
  3521                           ; 3 bytes @ 0xE
  3522                           
  3523  002E                     Load_Main@error:	
  3524                           ; 1 bytes @ 0xE
  3525                           
  3526  002E                     ___ftdiv@f2:	
  3527                           ; 1 bytes @ 0xE
  3528                           
  3529  002E                     ___ftmul@f1:	
  3530                           ; 3 bytes @ 0xE
  3531                           
  3532                           
  3533                           ; 3 bytes @ 0xE
  3534  002E                     	ds	1
  3535  002F                     Load_Main@i:	
  3536                           
  3537                           ; 1 bytes @ 0xF
  3538  002F                     	ds	2
  3539  0031                     ___ftdiv@f1:	
  3540  0031                     ___ftmul@f2:	
  3541                           ; 3 bytes @ 0x11
  3542                           
  3543                           
  3544                           ; 3 bytes @ 0x11
  3545  0031                     	ds	3
  3546  0034                     ??___ftdiv:	
  3547  0034                     ??___ftmul:	
  3548                           ; 0 bytes @ 0x14
  3549                           
  3550                           
  3551                           ; 0 bytes @ 0x14
  3552  0034                     	ds	4
  3553  0038                     ___ftdiv@cntr:	
  3554  0038                     ___ftmul@exp:	
  3555                           ; 1 bytes @ 0x18
  3556                           
  3557                           
  3558                           ; 1 bytes @ 0x18
  3559  0038                     	ds	1
  3560  0039                     ___ftdiv@f3:	
  3561  0039                     ___ftmul@f3_as_product:	
  3562                           ; 3 bytes @ 0x19
  3563                           
  3564                           
  3565                           ; 3 bytes @ 0x19
  3566  0039                     	ds	3
  3567  003C                     ___ftdiv@exp:	
  3568  003C                     ___ftmul@cntr:	
  3569                           ; 1 bytes @ 0x1C
  3570                           
  3571                           
  3572                           ; 1 bytes @ 0x1C
  3573  003C                     	ds	1
  3574  003D                     ___ftdiv@sign:	
  3575  003D                     ___ftmul@sign:	
  3576                           ; 1 bytes @ 0x1D
  3577                           
  3578                           
  3579                           ; 1 bytes @ 0x1D
  3580  003D                     	ds	1
  3581  003E                     ?___ftadd:	
  3582  003E                     ___ftadd@f1:	
  3583                           ; 3 bytes @ 0x1E
  3584                           
  3585                           
  3586                           ; 3 bytes @ 0x1E
  3587  003E                     	ds	3
  3588  0041                     ___ftadd@f2:	
  3589                           
  3590                           ; 3 bytes @ 0x21
  3591  0041                     	ds	3
  3592  0044                     ??___ftadd:	
  3593                           
  3594                           ; 0 bytes @ 0x24
  3595  0044                     	ds	4
  3596  0048                     ___ftadd@sign:	
  3597                           
  3598                           ; 1 bytes @ 0x28
  3599  0048                     	ds	1
  3600  0049                     ___ftadd@exp2:	
  3601                           
  3602                           ; 1 bytes @ 0x29
  3603  0049                     	ds	1
  3604  004A                     ___ftadd@exp1:	
  3605                           
  3606                           ; 1 bytes @ 0x2A
  3607  004A                     	ds	1
  3608  004B                     ?___fttol:	
  3609  004B                     ___fttol@f1:	
  3610                           ; 4 bytes @ 0x2B
  3611                           
  3612                           
  3613                           ; 3 bytes @ 0x2B
  3614  004B                     	ds	4
  3615  004F                     ??___fttol:	
  3616                           
  3617                           ; 0 bytes @ 0x2F
  3618  004F                     	ds	4
  3619  0053                     ___fttol@sign1:	
  3620                           
  3621                           ; 1 bytes @ 0x33
  3622  0053                     	ds	1
  3623  0054                     ___fttol@lval:	
  3624                           
  3625                           ; 4 bytes @ 0x34
  3626  0054                     	ds	4
  3627  0058                     ___fttol@exp1:	
  3628                           
  3629                           ; 1 bytes @ 0x38
  3630  0058                     	ds	1
  3631  0059                     ??_getPercentValue:	
  3632  0059                     ??_setPercentValue:	
  3633                           ; 0 bytes @ 0x39
  3634                           
  3635  0059                     setPercentValue@value:	
  3636                           ; 0 bytes @ 0x39
  3637                           
  3638                           
  3639                           ; 1 bytes @ 0x39
  3640  0059                     	ds	1
  3641  005A                     setPercentValue@i:	
  3642                           
  3643                           ; 3 bytes @ 0x3A
  3644  005A                     	ds	1
  3645  005B                     getPercentValue@value:	
  3646                           
  3647                           ; 1 bytes @ 0x3B
  3648  005B                     	ds	1
  3649  005C                     getPercentValue@i:	
  3650                           
  3651                           ; 3 bytes @ 0x3C
  3652  005C                     	ds	1
  3653  005D                     ?_setRF_DimmerLights:	
  3654  005D                     ??_Flash_Memory_Initialization:	
  3655                           ; 0 bytes @ 0x3D
  3656                           
  3657  005D                     setRF_DimmerLights@on:	
  3658                           ; 0 bytes @ 0x3D
  3659                           
  3660                           
  3661                           ; 1 bytes @ 0x3D
  3662  005D                     	ds	1
  3663  005E                     ??_setRF_DimmerLights:	
  3664  005E                     Flash_Memory_Initialization@i:	
  3665                           ; 0 bytes @ 0x3E
  3666                           
  3667                           
  3668                           ; 1 bytes @ 0x3E
  3669  005E                     	ds	1
  3670  005F                     ??_setDimmerLights_AdjRF:	
  3671                           
  3672                           ; 0 bytes @ 0x3F
  3673  005F                     	ds	1
  3674  0060                     setDimmerLights_AdjRF@lights:	
  3675  0060                     setRF_DimmerLights@status:	
  3676                           ; 1 bytes @ 0x40
  3677                           
  3678                           
  3679                           ; 1 bytes @ 0x40
  3680  0060                     	ds	1
  3681  0061                     ??_setRF_DimmerValue:	
  3682  0061                     setRF_DimmerLights@lights:	
  3683                           ; 0 bytes @ 0x41
  3684                           
  3685                           
  3686                           ; 1 bytes @ 0x41
  3687  0061                     	ds	1
  3688  0062                     ??_setDimmerLights_SwOn:	
  3689  0062                     ??_setDimmerLights_SwOff:	
  3690                           ; 0 bytes @ 0x42
  3691                           
  3692  0062                     ?_setDimmerLights_Adj:	
  3693                           ; 0 bytes @ 0x42
  3694                           
  3695  0062                     setDimmerLights_Adj@status:	
  3696                           ; 0 bytes @ 0x42
  3697                           
  3698                           
  3699                           ; 1 bytes @ 0x42
  3700  0062                     	ds	1
  3701  0063                     ??_setDimmerLights_Adj:	
  3702  0063                     setDimmerLights_SwOn@idle:	
  3703                           ; 0 bytes @ 0x43
  3704                           
  3705  0063                     setRF_DimmerValue@lights:	
  3706                           ; 1 bytes @ 0x43
  3707                           
  3708                           
  3709                           ; 1 bytes @ 0x43
  3710  0063                     	ds	1
  3711  0064                     ??_setRFSW_AdjControl:	
  3712  0064                     setDimmerLights_SwOn@sw:	
  3713                           ; 0 bytes @ 0x44
  3714                           
  3715  0064                     setDimmerLights_SwOff@command:	
  3716                           ; 1 bytes @ 0x44
  3717                           
  3718  0064                     setDimmerLights_Adj@lights:	
  3719                           ; 1 bytes @ 0x44
  3720                           
  3721                           
  3722                           ; 1 bytes @ 0x44
  3723  0064                     	ds	1
  3724  0065                     ??_setDimmerLights_Main:	
  3725  0065                     setDimmerLights_Main@lights:	
  3726                           ; 0 bytes @ 0x45
  3727                           
  3728  0065                     setDimmerLights_SwOff@sw:	
  3729                           ; 1 bytes @ 0x45
  3730                           
  3731                           
  3732                           ; 1 bytes @ 0x45
  3733  0065                     	ds	1
  3734  0066                     ??_DlyOff_Main:	
  3735  0066                     ??_setRFSW_Control:	
  3736                           ; 0 bytes @ 0x46
  3737                           
  3738  0066                     ??_setSw_Main:	
  3739                           ; 0 bytes @ 0x46
  3740                           
  3741  0066                     ??_DimmerLights_Main:	
  3742                           ; 0 bytes @ 0x46
  3743                           
  3744  0066                     ??_setDimmerLights_ErrorClose:	
  3745                           ; 0 bytes @ 0x46
  3746                           
  3747  0066                     setRFSW_AdjControl@status:	
  3748                           ; 0 bytes @ 0x46
  3749                           
  3750                           
  3751                           ; 1 bytes @ 0x46
  3752  0066                     	ds	1
  3753  0067                     setDimmerLights_ErrorClose@count:	
  3754  0067                     setRFSW_Control@status:	
  3755                           ; 1 bytes @ 0x47
  3756                           
  3757  0067                     setRFSW_AdjControl@sw:	
  3758                           ; 1 bytes @ 0x47
  3759                           
  3760                           
  3761                           ; 1 bytes @ 0x47
  3762  0067                     	ds	1
  3763  0068                     DlyOff_Main@sw:	
  3764  0068                     setDimmerLights_ErrorClose@lights:	
  3765                           ; 1 bytes @ 0x48
  3766                           
  3767  0068                     setRFSW_Control@sw:	
  3768                           ; 1 bytes @ 0x48
  3769                           
  3770  0068                     setSw_Main@sw:	
  3771                           ; 1 bytes @ 0x48
  3772                           
  3773  0068                     _DimmerLights_Main$2494:	
  3774                           ; 1 bytes @ 0x48
  3775                           
  3776                           
  3777                           ; 2 bytes @ 0x48
  3778  0068                     	ds	1
  3779  0069                     ??_getRxData:	
  3780  0069                     ??_setControl_Lights_Table:	
  3781                           ; 0 bytes @ 0x49
  3782                           
  3783  0069                     ??_DelayOff_Main:	
  3784                           ; 0 bytes @ 0x49
  3785                           
  3786  0069                     setDimmerLights_ErrorClose@i:	
  3787                           ; 0 bytes @ 0x49
  3788                           
  3789                           
  3790                           ; 2 bytes @ 0x49
  3791  0069                     	ds	1
  3792  006A                     getRxData@error:	
  3793                           
  3794                           ; 1 bytes @ 0x4A
  3795  006A                     	ds	1
  3796  006B                     ??_setRF_Main:	
  3797  006B                     ??_setMain_Exception:	
  3798                           ; 0 bytes @ 0x4B
  3799                           
  3800                           
  3801                           ; 0 bytes @ 0x4B
  3802  006B                     	ds	1
  3803  006C                     setRF_Main@loop_f:	
  3804                           
  3805                           ; 1 bytes @ 0x4C
  3806  006C                     	ds	1
  3807  006D                     ??_Switch_Main:	
  3808  006D                     setRF_Main@Receive_OK:	
  3809                           ; 0 bytes @ 0x4D
  3810                           
  3811                           
  3812                           ; 1 bytes @ 0x4D
  3813  006D                     	ds	1
  3814  006E                     setRF_Main@error:	
  3815  006E                     Switch_Main@error:	
  3816                           ; 1 bytes @ 0x4E
  3817                           
  3818                           
  3819                           ; 1 bytes @ 0x4E
  3820  006E                     	ds	1
  3821  006F                     ??_RF_Main:	
  3822  006F                     ??_main:	
  3823                           ; 0 bytes @ 0x4F
  3824                           
  3825                           
  3826                           	psect	maintext
  3827  169A                     __pmaintext:	
  3828                           ; 0 bytes @ 0x4F
  3829 ;;
  3830 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3831 ;;
  3832 ;; *************** function _main *****************
  3833 ;; Defined at:
  3834 ;;		line 7 in file "../src/main_B1.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;  argc            2    5[BANK1 ] int 
  3837 ;;  argv            2    7[BANK1 ] PTR PTR unsigned char 
  3838 ;; Auto vars:     Size  Location     Type
  3839 ;;		None
  3840 ;; Return value:  Size  Location     Type
  3841 ;;                  2    5[BANK1 ] int 
  3842 ;; Registers used:
  3843 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3844 ;; Tracked objects:
  3845 ;;		On entry : 17F/0
  3846 ;;		On exit  : 0/0
  3847 ;;		Unchanged: 0/0
  3848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3849 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3852 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3853 ;;Total ram usage:        4 bytes
  3854 ;; Hardware stack levels required when called:   15
  3855 ;; This function calls:
  3856 ;;		_Buzzer_Initialization
  3857 ;;		_Buzzer_Main
  3858 ;;		_CC2500_PowerOnInitial
  3859 ;;		_DelayOff_Initialization
  3860 ;;		_DelayOff_Main
  3861 ;;		_DimmerLights_Initialization
  3862 ;;		_DimmerLights_Main
  3863 ;;		_Flash_Memory_Initialization
  3864 ;;		_Flash_Memory_Main
  3865 ;;		_LED_Initialization
  3866 ;;		_LED_Main
  3867 ;;		_Load_Initialization
  3868 ;;		_Load_Main
  3869 ;;		_Mcu_Initialization
  3870 ;;		_RF_Initialization
  3871 ;;		_RF_Main
  3872 ;;		_Switch_Initialization
  3873 ;;		_Switch_Main
  3874 ;;		_Temp_Initialization
  3875 ;;		_Temp_Main
  3876 ;;		_WDT_Main
  3877 ;;		_getLoad_AD
  3878 ;;		_getTemp_AD
  3879 ;;		_myMain_Initialization
  3880 ;;		_my_MainTimer
  3881 ;; This function is called by:
  3882 ;;		Startup code after reset
  3883 ;; This function uses a non-reentrant model
  3884 ;;
  3885                           
  3886                           
  3887                           ;psect for function _main
  3888  169A                     _main:	
  3889                           
  3890                           ;main_B1.c: 8: myMain_Initialization();
  3891                           
  3892                           ;incstack = 0
  3893                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3894  169A  319B  239B  3196   	fcall	_myMain_Initialization
  3895                           
  3896                           ;main_B1.c: 9: Mcu_Initialization();
  3897  169D  319C  2422  3196   	fcall	_Mcu_Initialization
  3898                           
  3899                           ;main_B1.c: 10: Flash_Memory_Initialization();
  3900  16A0  3186  26C3  3196   	fcall	_Flash_Memory_Initialization
  3901                           
  3902                           ;main_B1.c: 11: LED_Initialization();
  3903  16A3  319B  2335  3196   	fcall	_LED_Initialization
  3904                           
  3905                           ;main_B1.c: 12: Buzzer_Initialization();
  3906  16A6  319A  2286  3196   	fcall	_Buzzer_Initialization
  3907                           
  3908                           ;main_B1.c: 14: ;;
  3909                           ;main_B1.c: 15: Temp_Initialization();
  3910  16A9  319A  228F  3196   	fcall	_Temp_Initialization
  3911                           
  3912                           ;main_B1.c: 16: Load_Initialization();
  3913  16AC  319A  22AA  3196   	fcall	_Load_Initialization
  3914                           
  3915                           ;main_B1.c: 17: ;;
  3916                           ;main_B1.c: 18: DelayOff_Initialization();
  3917  16AF  319A  22CA  3196   	fcall	_DelayOff_Initialization
  3918                           
  3919                           ;main_B1.c: 20: DimmerLights_Initialization();
  3920  16B2  319D  254C  3196   	fcall	_DimmerLights_Initialization
  3921                           
  3922                           ;main_B1.c: 21: ;;
  3923                           ;main_B1.c: 22: ;;
  3924                           ;main_B1.c: 23: ;;
  3925                           ;main_B1.c: 24: Switch_Initialization();
  3926  16B5  319B  2371  3196   	fcall	_Switch_Initialization
  3927                           
  3928                           ;main_B1.c: 25: RF_Initialization();
  3929  16B8  319A  2289  3196   	fcall	_RF_Initialization
  3930                           
  3931                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  3932  16BB  319C  24F7  3196   	fcall	_CC2500_PowerOnInitial
  3933  16BE                     l8314:	
  3934                           ;main_B1.c: 27: ;;
  3935                           ;main_B1.c: 29: while (1) {
  3936                           
  3937                           
  3938                           ;main_B1.c: 31: if (myMain.PowerON == 1) {
  3939  16BE  0021               	movlb	1	; select bank1
  3940  16BF  1C20               	btfss	_myMain^(0+128),0
  3941  16C0  2EC9               	goto	l8318
  3942                           
  3943                           ;main_B1.c: 37: getLoad_AD(0x05);
  3944  16C1  3005               	movlw	5
  3945  16C2  318B  23B2  3196   	fcall	_getLoad_AD
  3946                           
  3947                           ;main_B1.c: 41: getTemp_AD(0x09);
  3948  16C5  3009               	movlw	9
  3949  16C6  3192  228B  3196   	fcall	_getTemp_AD
  3950  16C9                     l8318:	
  3951                           
  3952                           ;main_B1.c: 56: }
  3953                           ;main_B1.c: 92: if (Timer1.Timeout == 1) {
  3954  16C9  0022               	movlb	2	; select bank2
  3955  16CA  1C23               	btfss	_Timer1^(0+256),0
  3956  16CB  2EBE               	goto	l8314
  3957                           
  3958                           ;main_B1.c: 93: Timer1.Timeout = 0;
  3959  16CC  1023               	bcf	_Timer1^(0+256),0
  3960                           
  3961                           ;main_B1.c: 94: my_MainTimer();
  3962  16CD  3194  24A8  3196   	fcall	_my_MainTimer
  3963                           
  3964                           ;main_B1.c: 95: WDT_Main();
  3965  16D0  319C  2434  3196   	fcall	_WDT_Main
  3966                           
  3967                           ;main_B1.c: 96: ;;
  3968                           ;main_B1.c: 97: ;;
  3969                           ;main_B1.c: 98: if (myMain.PowerON == 1) {
  3970  16D3  0021               	movlb	1	; select bank1
  3971  16D4  1C20               	btfss	_myMain^(0+128),0
  3972  16D5  2EBE               	goto	l8314
  3973                           
  3974                           ;main_B1.c: 99: Flash_Memory_Main();
  3975  16D6  3191  21E8  3196   	fcall	_Flash_Memory_Main
  3976                           
  3977                           ;main_B1.c: 101: LED_Main();
  3978  16D9  319B  2341  3196   	fcall	_LED_Main
  3979                           
  3980                           ;main_B1.c: 102: Buzzer_Main();
  3981  16DC  3194  2410  3196   	fcall	_Buzzer_Main
  3982                           
  3983                           ;main_B1.c: 104: ;;
  3984                           ;main_B1.c: 105: Temp_Main();
  3985  16DF  319A  2292  3196   	fcall	_Temp_Main
  3986                           
  3987                           ;main_B1.c: 106: Load_Main();
  3988  16E2  3180  204A  3196   	fcall	_Load_Main
  3989                           
  3990                           ;main_B1.c: 107: ;;
  3991                           ;main_B1.c: 109: ;;
  3992                           ;main_B1.c: 110: DimmerLights_Main();
  3993  16E5  3191  214A  3196   	fcall	_DimmerLights_Main
  3994                           
  3995                           ;main_B1.c: 111: Switch_Main();
  3996  16E8  319F  2741  3196   	fcall	_Switch_Main
  3997                           
  3998                           ;main_B1.c: 112: ;;
  3999                           ;main_B1.c: 113: ;;
  4000                           ;main_B1.c: 115: RF_Main();
  4001  16EB  319A  228C  3196   	fcall	_RF_Main
  4002                           
  4003                           ;main_B1.c: 116: DelayOff_Main();
  4004  16EE  319A  22D2  3196   	fcall	_DelayOff_Main
  4005                           
  4006                           ;main_B1.c: 117: ;;
  4007  16F1  2EBE               	goto	l8314
  4008  16F2                     __end_of_main:	
  4009                           ;main_B1.c: 125: }
  4010                           ;main_B1.c: 126: }
  4011                           ;main_B1.c: 160: }
  4012                           ;main_B1.c: 161: return (0);
  4013                           ;	Return value of _main is never used
  4014                           
  4015                           
  4016                           	psect	text1
  4017  14A8                     __ptext1:	
  4018 ;; *************** function _my_MainTimer *****************
  4019 ;; Defined at:
  4020 ;;		line 180 in file "../src/main_B1.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;		None
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;		None
  4025 ;; Return value:  Size  Location     Type
  4026 ;;		None               void
  4027 ;; Registers used:
  4028 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4029 ;; Tracked objects:
  4030 ;;		On entry : 0/0
  4031 ;;		On exit  : 0/0
  4032 ;;		Unchanged: 0/0
  4033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4038 ;;Total ram usage:        0 bytes
  4039 ;; Hardware stack levels used:    1
  4040 ;; Hardware stack levels required when called:    7
  4041 ;; This function calls:
  4042 ;;		_setBuz
  4043 ;;		_setTxData
  4044 ;; This function is called by:
  4045 ;;		_main
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           
  4050                           ;psect for function _my_MainTimer
  4051  14A8                     _my_MainTimer:	
  4052                           
  4053                           ;main_B1.c: 182: if (myMain.PowerON == 0) {
  4054                           
  4055                           ;incstack = 0
  4056                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4057  14A8  0021               	movlb	1	; select bank1
  4058  14A9  1820               	btfsc	_myMain^(0+128),0
  4059  14AA  2CCA               	goto	l8170
  4060                           
  4061                           ;main_B1.c: 183: myMain.PowerCount++;
  4062  14AB  3001               	movlw	1
  4063  14AC  07A2               	addwf	(_myMain^(0+128)+2),f
  4064  14AD  3000               	movlw	0
  4065  14AE  3DA3               	addwfc	((_myMain+1)^(0+128)+2),f
  4066                           
  4067                           ;main_B1.c: 184: if (myMain.PowerCount == 150)
  4068  14AF  3002               	movlw	2
  4069  14B0  3EA0               	addlw	_myMain& (0+255)
  4070  14B1  0086               	movwf	6
  4071  14B2  0187               	clrf	7
  4072  14B3  3F40               	moviw [0]fsr1
  4073  14B4  3A96               	xorlw	150
  4074  14B5  1D03               	skipz
  4075  14B6  2CB9               	goto	u8235
  4076  14B7  3F41               	moviw [1]fsr1
  4077  14B8  3A00               	xorlw	0
  4078  14B9                     u8235:	
  4079  14B9  1D03               	skipz
  4080  14BA  2CE1               	goto	l8180
  4081                           
  4082                           ;main_B1.c: 185: {
  4083                           ;main_B1.c: 186: myMain.PowerCount = 0;
  4084  14BB  01A2               	clrf	(_myMain^(0+128)+2)
  4085  14BC  01A3               	clrf	((_myMain+1)^(0+128)+2)
  4086                           
  4087                           ;main_B1.c: 187: myMain.PowerON = 1;
  4088  14BD  1420               	bsf	_myMain^(0+128),0
  4089                           
  4090                           ;main_B1.c: 193: setBuz(3, 50);
  4091  14BE  3032               	movlw	50
  4092  14BF  0020               	movlb	0	; select bank0
  4093  14C0  00A9               	movwf	setBuz@time
  4094  14C1  3000               	movlw	0
  4095  14C2  00AA               	movwf	setBuz@time+1
  4096  14C3  3003               	movlw	3
  4097  14C4  3196  26F2  3194   	fcall	_setBuz
  4098                           
  4099                           ;main_B1.c: 194: myMain.SelfTest = 1;
  4100  14C7  0021               	movlb	1	; select bank1
  4101  14C8  1620               	bsf	_myMain^(0+128),4
  4102                           
  4103                           ;main_B1.c: 203: }
  4104                           ;main_B1.c: 204: } else {
  4105  14C9  2CE1               	goto	l8180
  4106  14CA                     l8170:	
  4107                           
  4108                           ;main_B1.c: 212: myMain.Count1++;
  4109  14CA  3001               	movlw	1
  4110  14CB  07A6               	addwf	(_myMain^(0+128)+6),f
  4111  14CC  3000               	movlw	0
  4112  14CD  3DA7               	addwfc	((_myMain+1)^(0+128)+6),f
  4113                           
  4114                           ;main_B1.c: 213: if (myMain.Count1 == 100)
  4115  14CE  3006               	movlw	6
  4116  14CF  3EA0               	addlw	_myMain& (0+255)
  4117  14D0  0086               	movwf	6
  4118  14D1  0187               	clrf	7
  4119  14D2  3F40               	moviw [0]fsr1
  4120  14D3  3A64               	xorlw	100
  4121  14D4  1D03               	skipz
  4122  14D5  2CD8               	goto	u8245
  4123  14D6  3F41               	moviw [1]fsr1
  4124  14D7  3A00               	xorlw	0
  4125  14D8                     u8245:	
  4126  14D8  1D03               	skipz
  4127  14D9  2CE1               	goto	l8180
  4128                           
  4129                           ;main_B1.c: 214: {
  4130                           ;main_B1.c: 215: myMain.Count1 = 0;
  4131  14DA  01A6               	clrf	(_myMain^(0+128)+6)
  4132  14DB  01A7               	clrf	((_myMain+1)^(0+128)+6)
  4133                           
  4134                           ;main_B1.c: 227: if (myMain.Flag) {
  4135  14DC  1CA0               	btfss	_myMain^(0+128),1
  4136  14DD  2CE0               	goto	l2675
  4137                           
  4138                           ;main_B1.c: 228: myMain.Flag = 0;
  4139  14DE  10A0               	bcf	_myMain^(0+128),1
  4140                           
  4141                           ;main_B1.c: 237: } else {
  4142  14DF  2CE1               	goto	l8180
  4143  14E0                     l2675:	
  4144                           
  4145                           ;main_B1.c: 238: myMain.Flag = 1;
  4146  14E0  14A0               	bsf	_myMain^(0+128),1
  4147  14E1                     l8180:	
  4148                           
  4149                           ;main_B1.c: 247: }
  4150                           ;main_B1.c: 248: }
  4151                           ;main_B1.c: 250: }
  4152                           ;main_B1.c: 252: myMain.Count2++;
  4153  14E1  3001               	movlw	1
  4154  14E2  07A8               	addwf	(_myMain^(0+128)+8),f
  4155  14E3  3000               	movlw	0
  4156  14E4  3DA9               	addwfc	((_myMain+1)^(0+128)+8),f
  4157                           
  4158                           ;main_B1.c: 253: if (myMain.Count2 == 100) {
  4159  14E5  3008               	movlw	8
  4160  14E6  3EA0               	addlw	_myMain& (0+255)
  4161  14E7  0086               	movwf	6
  4162  14E8  0187               	clrf	7
  4163  14E9  3F40               	moviw [0]fsr1
  4164  14EA  3A64               	xorlw	100
  4165  14EB  1D03               	skipz
  4166  14EC  2CEF               	goto	u8265
  4167  14ED  3F41               	moviw [1]fsr1
  4168  14EE  3A00               	xorlw	0
  4169  14EF                     u8265:	
  4170  14EF  1D03               	skipz
  4171  14F0  0008               	return
  4172                           
  4173                           ;main_B1.c: 254: myMain.Count2 = 0;
  4174  14F1  01A8               	clrf	(_myMain^(0+128)+8)
  4175  14F2  01A9               	clrf	((_myMain+1)^(0+128)+8)
  4176                           
  4177                           ;main_B1.c: 255: setTxData();
  4178  14F3  318F  2743         	fcall	_setTxData
  4179  14F5  0008               	return
  4180  14F6                     __end_of_my_MainTimer:	
  4181                           
  4182                           	psect	text2
  4183  1B9B                     __ptext2:	
  4184 ;; *************** function _myMain_Initialization *****************
  4185 ;; Defined at:
  4186 ;;		line 167 in file "../src/main_B1.c"
  4187 ;; Parameters:    Size  Location     Type
  4188 ;;		None
  4189 ;; Auto vars:     Size  Location     Type
  4190 ;;		None
  4191 ;; Return value:  Size  Location     Type
  4192 ;;		None               void
  4193 ;; Registers used:
  4194 ;;		wreg, fsr1l, fsr1h
  4195 ;; Tracked objects:
  4196 ;;		On entry : 0/0
  4197 ;;		On exit  : 0/0
  4198 ;;		Unchanged: 0/0
  4199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4202 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4203 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4204 ;;Total ram usage:        1 bytes
  4205 ;; Hardware stack levels used:    1
  4206 ;; Hardware stack levels required when called:    5
  4207 ;; This function calls:
  4208 ;;		Nothing
  4209 ;; This function is called by:
  4210 ;;		_main
  4211 ;; This function uses a non-reentrant model
  4212 ;;
  4213                           
  4214                           
  4215                           ;psect for function _myMain_Initialization
  4216  1B9B                     _myMain_Initialization:	
  4217                           
  4218                           ;main_B1.c: 169: product = &_product;
  4219                           
  4220                           ;incstack = 0
  4221                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4222  1B9B  3045               	movlw	__product& (0+255)
  4223  1B9C  0020               	movlb	0	; select bank0
  4224  1B9D  00A0               	movwf	??_myMain_Initialization
  4225  1B9E  0820               	movf	??_myMain_Initialization,w
  4226  1B9F  00EF               	movwf	_product
  4227                           
  4228                           ;main_B1.c: 170: product->Data[20] = 210;
  4229  1BA0  30D2               	movlw	210
  4230  1BA1  00A0               	movwf	??_myMain_Initialization
  4231  1BA2  086F               	movf	_product,w
  4232  1BA3  3E14               	addlw	20
  4233  1BA4  0086               	movwf	6
  4234  1BA5  3002               	movlw	2	; select bank4/5
  4235  1BA6  0087               	movwf	7
  4236  1BA7  0820               	movf	??_myMain_Initialization,w
  4237  1BA8  0081               	movwf	1
  4238  1BA9  0008               	return
  4239  1BAA                     __end_of_myMain_Initialization:	
  4240                           
  4241                           	psect	text3
  4242  128B                     __ptext3:	
  4243 ;; *************** function _getTemp_AD *****************
  4244 ;; Defined at:
  4245 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;  channel         1    wreg     unsigned char 
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;  channel         1    5[BANK0 ] unsigned char 
  4250 ;; Return value:  Size  Location     Type
  4251 ;;		None               void
  4252 ;; Registers used:
  4253 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4260 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4262 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4263 ;;Total ram usage:        2 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:    7
  4266 ;; This function calls:
  4267 ;;		_getAD
  4268 ;; This function is called by:
  4269 ;;		_main
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           
  4274                           ;psect for function _getTemp_AD
  4275  128B                     _getTemp_AD:	
  4276                           
  4277                           ;incstack = 0
  4278                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4279                           ;getTemp_AD@channel stored from wreg
  4280  128B  0020               	movlb	0	; select bank0
  4281  128C  00A5               	movwf	getTemp_AD@channel
  4282                           
  4283                           ;OverTemperature_B1.c: 33: if (Temp.ADtoGO == 1) {
  4284  128D  0021               	movlb	1	; select bank1
  4285  128E  1D54               	btfss	_Temp^(0+128),2
  4286  128F  0008               	return
  4287                           
  4288                           ;OverTemperature_B1.c: 34: Temp.GO = 1;
  4289  1290  1654               	bsf	_Temp^(0+128),4
  4290                           
  4291                           ;OverTemperature_B1.c: 35: Temp.ADRES = getAD(channel, 0xf0);
  4292  1291  30F0               	movlw	240
  4293  1292  0020               	movlb	0	; select bank0
  4294  1293  00A4               	movwf	??_getTemp_AD
  4295  1294  0824               	movf	??_getTemp_AD,w
  4296  1295  00A0               	movwf	getAD@adcon1
  4297  1296  0825               	movf	getTemp_AD@channel,w
  4298  1297  319E  2699  3192   	fcall	_getAD
  4299  129A  0020               	movlb	0	; select bank0
  4300  129B  0821               	movf	?_getAD+1,w
  4301  129C  0021               	movlb	1	; select bank1
  4302  129D  01E1               	clrf	((_Temp+1)^(0+128)+12)
  4303  129E  07E1               	addwf	((_Temp+1)^(0+128)+12),f
  4304  129F  0020               	movlb	0	; select bank0
  4305  12A0  0820               	movf	?_getAD,w
  4306  12A1  0021               	movlb	1	; select bank1
  4307  12A2  01E0               	clrf	(_Temp^(0+128)+12)
  4308  12A3  07E0               	addwf	(_Temp^(0+128)+12),f
  4309                           
  4310                           ;OverTemperature_B1.c: 36: if (Temp.ADH[0] < Temp.ADRES) {
  4311  12A4  0861               	movf	((_Temp+1)^(0+128)+12),w
  4312  12A5  025D               	subwf	((_Temp+1)^(0+128)+8),w
  4313  12A6  1D03               	skipz
  4314  12A7  2AAA               	goto	u8175
  4315  12A8  0860               	movf	(_Temp^(0+128)+12),w
  4316  12A9  025C               	subwf	(_Temp^(0+128)+8),w
  4317  12AA                     u8175:	
  4318  12AA  1803               	skipnc
  4319  12AB  2AB3               	goto	l8118
  4320                           
  4321                           ;OverTemperature_B1.c: 37: Temp.ADH[0] = Temp.ADRES;
  4322  12AC  0861               	movf	((_Temp+1)^(0+128)+12),w
  4323  12AD  01DD               	clrf	((_Temp+1)^(0+128)+8)
  4324  12AE  07DD               	addwf	((_Temp+1)^(0+128)+8),f
  4325  12AF  0860               	movf	(_Temp^(0+128)+12),w
  4326  12B0  01DC               	clrf	(_Temp^(0+128)+8)
  4327  12B1  07DC               	addwf	(_Temp^(0+128)+8),f
  4328                           
  4329                           ;OverTemperature_B1.c: 38: } else if (Temp.ADH[1] < Temp.ADRES) {
  4330  12B2  0008               	return
  4331  12B3                     l8118:	
  4332  12B3  0861               	movf	((_Temp+1)^(0+128)+12),w
  4333  12B4  025F               	subwf	((_Temp+1)^(0+128)+10),w
  4334  12B5  1D03               	skipz
  4335  12B6  2AB9               	goto	u8185
  4336  12B7  0860               	movf	(_Temp^(0+128)+12),w
  4337  12B8  025E               	subwf	(_Temp^(0+128)+10),w
  4338  12B9                     u8185:	
  4339  12B9  1803               	skipnc
  4340  12BA  0008               	return
  4341                           
  4342                           ;OverTemperature_B1.c: 39: Temp.ADH[1] = Temp.ADRES;
  4343  12BB  0861               	movf	((_Temp+1)^(0+128)+12),w
  4344  12BC  01DF               	clrf	((_Temp+1)^(0+128)+10)
  4345  12BD  07DF               	addwf	((_Temp+1)^(0+128)+10),f
  4346  12BE  0860               	movf	(_Temp^(0+128)+12),w
  4347  12BF  01DE               	clrf	(_Temp^(0+128)+10)
  4348  12C0  07DE               	addwf	(_Temp^(0+128)+10),f
  4349  12C1  0008               	return
  4350  12C2                     __end_of_getTemp_AD:	
  4351                           
  4352                           	psect	text4
  4353  0BB2                     __ptext4:	
  4354 ;; *************** function _getLoad_AD *****************
  4355 ;; Defined at:
  4356 ;;		line 15 in file "../src/OverLoad_B1.c"
  4357 ;; Parameters:    Size  Location     Type
  4358 ;;  channel         1    wreg     unsigned char 
  4359 ;; Auto vars:     Size  Location     Type
  4360 ;;  channel         1    6[BANK0 ] unsigned char 
  4361 ;;  i               1    9[BANK0 ] unsigned char 
  4362 ;;  j               1    8[BANK0 ] unsigned char 
  4363 ;;  k               1    7[BANK0 ] unsigned char 
  4364 ;; Return value:  Size  Location     Type
  4365 ;;		None               void
  4366 ;; Registers used:
  4367 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4368 ;; Tracked objects:
  4369 ;;		On entry : 0/0
  4370 ;;		On exit  : 0/0
  4371 ;;		Unchanged: 0/0
  4372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4374 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4375 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4376 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4377 ;;Total ram usage:        6 bytes
  4378 ;; Hardware stack levels used:    1
  4379 ;; Hardware stack levels required when called:    7
  4380 ;; This function calls:
  4381 ;;		_getAD
  4382 ;; This function is called by:
  4383 ;;		_main
  4384 ;; This function uses a non-reentrant model
  4385 ;;
  4386                           
  4387                           
  4388                           ;psect for function _getLoad_AD
  4389  0BB2                     _getLoad_AD:	
  4390                           
  4391                           ;incstack = 0
  4392                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4393                           ;getLoad_AD@channel stored from wreg
  4394  0BB2  0020               	movlb	0	; select bank0
  4395  0BB3  00A6               	movwf	getLoad_AD@channel
  4396                           
  4397                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4398  0BB4  01A9               	clrf	getLoad_AD@i
  4399  0BB5  01A8               	clrf	getLoad_AD@j
  4400  0BB6  01A7               	clrf	getLoad_AD@k
  4401                           
  4402                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4403  0BB7  0022               	movlb	2	; select bank2
  4404  0BB8  1E2A               	btfss	_Load^(0+256),4
  4405  0BB9  0008               	return
  4406                           
  4407                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4408  0BBA  30F3               	movlw	243
  4409  0BBB  0020               	movlb	0	; select bank0
  4410  0BBC  00A4               	movwf	??_getLoad_AD
  4411  0BBD  0824               	movf	??_getLoad_AD,w
  4412  0BBE  00A0               	movwf	getAD@adcon1
  4413  0BBF  0826               	movf	getLoad_AD@channel,w
  4414  0BC0  319E  2699  318B   	fcall	_getAD
  4415  0BC3  0020               	movlb	0	; select bank0
  4416  0BC4  0821               	movf	?_getAD+1,w
  4417  0BC5  0022               	movlb	2	; select bank2
  4418  0BC6  01CC               	clrf	((_Load+1)^(0+256)+33)
  4419  0BC7  07CC               	addwf	((_Load+1)^(0+256)+33),f
  4420  0BC8  0020               	movlb	0	; select bank0
  4421  0BC9  0820               	movf	?_getAD,w
  4422  0BCA  0022               	movlb	2	; select bank2
  4423  0BCB  01CB               	clrf	(_Load^(0+256)+33)
  4424  0BCC  07CB               	addwf	(_Load^(0+256)+33),f
  4425                           
  4426                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4427  0BCD  0020               	movlb	0	; select bank0
  4428  0BCE  01A9               	clrf	getLoad_AD@i
  4429  0BCF  3004               	movlw	4
  4430  0BD0  0229               	subwf	getLoad_AD@i,w
  4431  0BD1  1803               	btfsc	3,0
  4432  0BD2  2C00               	goto	l7912
  4433  0BD3                     l7900:	
  4434                           
  4435                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4436  0BD3  3529               	lslf	getLoad_AD@i,w
  4437  0BD4  3E35               	addlw	(_Load+11)& (0+255)
  4438  0BD5  0086               	movwf	6
  4439  0BD6  3001               	movlw	1	; select bank2/3
  4440  0BD7  0087               	movwf	7
  4441  0BD8  3F40               	moviw [0]fsr1
  4442  0BD9  00A4               	movwf	??_getLoad_AD
  4443  0BDA  3F41               	moviw [1]fsr1
  4444  0BDB  00A5               	movwf	??_getLoad_AD+1
  4445  0BDC  0022               	movlb	2	; select bank2
  4446  0BDD  084C               	movf	((_Load+1)^(0+256)+33),w
  4447  0BDE  0020               	movlb	0	; select bank0
  4448  0BDF  0225               	subwf	??_getLoad_AD+1,w
  4449  0BE0  1D03               	skipz
  4450  0BE1  2BE6               	goto	u7795
  4451  0BE2  0022               	movlb	2	; select bank2
  4452  0BE3  084B               	movf	(_Load^(0+256)+33),w
  4453  0BE4  0020               	movlb	0	; select bank0
  4454  0BE5  0224               	subwf	??_getLoad_AD,w
  4455  0BE6                     u7795:	
  4456  0BE6  1803               	skipnc
  4457  0BE7  2BF8               	goto	l7908
  4458  0BE8  08A8               	movf	getLoad_AD@j,f
  4459  0BE9  1D03               	skipz
  4460  0BEA  2BF8               	goto	l7908
  4461                           
  4462                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4463  0BEB  3529               	lslf	getLoad_AD@i,w
  4464  0BEC  3E35               	addlw	(_Load+11)& (0+255)
  4465  0BED  0086               	movwf	6
  4466  0BEE  3001               	movlw	1	; select bank2/3
  4467  0BEF  0087               	movwf	7
  4468  0BF0  0022               	movlb	2	; select bank2
  4469  0BF1  084B               	movf	(_Load^(0+256)+33),w
  4470  0BF2  3FC0               	movwi [0]fsr1
  4471  0BF3  084C               	movf	((_Load+1)^(0+256)+33),w
  4472  0BF4  3FC1               	movwi [1]fsr1
  4473                           
  4474                           ;OverLoad_B1.c: 24: j = 1;
  4475  0BF5  0020               	movlb	0	; select bank0
  4476  0BF6  01A8               	clrf	getLoad_AD@j
  4477  0BF7  0AA8               	incf	getLoad_AD@j,f
  4478  0BF8                     l7908:	
  4479  0BF8  3001               	movlw	1
  4480  0BF9  00A4               	movwf	??_getLoad_AD
  4481  0BFA  0824               	movf	??_getLoad_AD,w
  4482  0BFB  07A9               	addwf	getLoad_AD@i,f
  4483  0BFC  3004               	movlw	4
  4484  0BFD  0229               	subwf	getLoad_AD@i,w
  4485  0BFE  1C03               	skipc
  4486  0BFF  2BD3               	goto	l7900
  4487  0C00                     l7912:	
  4488                           
  4489                           ;OverLoad_B1.c: 25: }
  4490                           ;OverLoad_B1.c: 26: }
  4491                           ;OverLoad_B1.c: 27: if (j == 0) {
  4492  0C00  08A8               	movf	getLoad_AD@j,f
  4493  0C01  1D03               	skipz
  4494  0C02  0008               	return
  4495                           
  4496                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4497  0C03  01A9               	clrf	getLoad_AD@i
  4498  0C04                     L1:	
  4499  0C04  3004               	movlw	4
  4500  0C05  0229               	subwf	getLoad_AD@i,w
  4501  0C06  1803               	btfsc	3,0
  4502  0C07  0008               	return
  4503                           
  4504                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4505  0C08  3529               	lslf	getLoad_AD@i,w
  4506  0C09  3E3F               	addlw	(_Load+21)& (0+255)
  4507  0C0A  0086               	movwf	6
  4508  0C0B  3001               	movlw	1	; select bank2/3
  4509  0C0C  0087               	movwf	7
  4510  0C0D  3F40               	moviw [0]fsr1
  4511  0C0E  00A4               	movwf	??_getLoad_AD
  4512  0C0F  3F41               	moviw [1]fsr1
  4513  0C10  00A5               	movwf	??_getLoad_AD+1
  4514  0C11  0825               	movf	??_getLoad_AD+1,w
  4515  0C12  0022               	movlb	2	; select bank2
  4516  0C13  024C               	subwf	((_Load+1)^(0+256)+33),w
  4517  0C14  1D03               	skipz
  4518  0C15  2C1A               	goto	u7845
  4519  0C16  0020               	movlb	0	; select bank0
  4520  0C17  0824               	movf	??_getLoad_AD,w
  4521  0C18  0022               	movlb	2	; select bank2
  4522  0C19  024B               	subwf	(_Load^(0+256)+33),w
  4523  0C1A                     u7845:	
  4524  0C1A  1803               	skipnc
  4525  0C1B  2C2D               	goto	l7928
  4526  0C1C  0020               	movlb	0	; select bank0
  4527  0C1D  08A7               	movf	getLoad_AD@k,f
  4528  0C1E  1D03               	skipz
  4529  0C1F  2C2D               	goto	l7928
  4530                           
  4531                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4532  0C20  3529               	lslf	getLoad_AD@i,w
  4533  0C21  3E3F               	addlw	(_Load+21)& (0+255)
  4534  0C22  0086               	movwf	6
  4535  0C23  3001               	movlw	1	; select bank2/3
  4536  0C24  0087               	movwf	7
  4537  0C25  0022               	movlb	2	; select bank2
  4538  0C26  084B               	movf	(_Load^(0+256)+33),w
  4539  0C27  3FC0               	movwi [0]fsr1
  4540  0C28  084C               	movf	((_Load+1)^(0+256)+33),w
  4541  0C29  3FC1               	movwi [1]fsr1
  4542                           
  4543                           ;OverLoad_B1.c: 31: k = 1;
  4544  0C2A  0020               	movlb	0	; select bank0
  4545  0C2B  01A7               	clrf	getLoad_AD@k
  4546  0C2C  0AA7               	incf	getLoad_AD@k,f
  4547  0C2D                     l7928:	
  4548  0C2D  3001               	movlw	1
  4549  0C2E  0020               	movlb	0	; select bank0
  4550  0C2F  00A4               	movwf	??_getLoad_AD
  4551  0C30  0824               	movf	??_getLoad_AD,w
  4552  0C31  07A9               	addwf	getLoad_AD@i,f
  4553  0C32  2C04               	goto	L1
  4554  0C33                     __end_of_getLoad_AD:	
  4555                           
  4556                           	psect	text5
  4557  1E99                     __ptext5:	
  4558 ;; *************** function _getAD *****************
  4559 ;; Defined at:
  4560 ;;		line 454 in file "../src/MCU_B1.c"
  4561 ;; Parameters:    Size  Location     Type
  4562 ;;  adcon0          1    wreg     unsigned char 
  4563 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4566 ;; Return value:  Size  Location     Type
  4567 ;;                  2    0[BANK0 ] int 
  4568 ;; Registers used:
  4569 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 0/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4575 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4576 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4578 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4579 ;;Total ram usage:        4 bytes
  4580 ;; Hardware stack levels used:    1
  4581 ;; Hardware stack levels required when called:    6
  4582 ;; This function calls:
  4583 ;;		_Timeout_Counter
  4584 ;;		_set_TimeoutCleared
  4585 ;; This function is called by:
  4586 ;;		_getLoad_AD
  4587 ;;		_getTemp_AD
  4588 ;; This function uses a non-reentrant model
  4589 ;;
  4590                           
  4591                           
  4592                           ;psect for function _getAD
  4593  1E99                     _getAD:	
  4594                           
  4595                           ;incstack = 0
  4596                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4597                           ;getAD@adcon0 stored from wreg
  4598  1E99  0020               	movlb	0	; select bank0
  4599  1E9A  00A3               	movwf	getAD@adcon0
  4600                           
  4601                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4602  1E9B  0823               	movf	getAD@adcon0,w
  4603  1E9C  0021               	movlb	1	; select bank1
  4604  1E9D  009D               	movwf	29	;volatile
  4605                           
  4606                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4607  1E9E  0020               	movlb	0	; select bank0
  4608  1E9F  0820               	movf	getAD@adcon1,w
  4609  1EA0  0021               	movlb	1	; select bank1
  4610  1EA1  009E               	movwf	30	;volatile
  4611                           
  4612                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4613  1EA2  149D               	bsf	29,1	;volatile
  4614                           
  4615                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4616  1EA3  2EA7               	goto	l7328
  4617  1EA4                     l7326:	
  4618                           
  4619                           ;MCU_B1.c: 459: Timeout_Counter();
  4620  1EA4  319C  24E2  319E   	fcall	_Timeout_Counter
  4621  1EA7                     l7328:	
  4622  1EA7  0021               	movlb	1	; select bank1
  4623  1EA8  1C9D               	btfss	29,1	;volatile
  4624  1EA9  2EAC               	goto	l7332
  4625  1EAA  1D2D               	btfss	(_myMain^(0+128)+13),2
  4626  1EAB  2EA4               	goto	l7326
  4627  1EAC                     l7332:	
  4628                           
  4629                           ;MCU_B1.c: 460: };
  4630                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4631  1EAC  319A  22A5         	fcall	_set_TimeoutCleared
  4632                           
  4633                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4634  1EAE  0021               	movlb	1	; select bank1
  4635  1EAF  081C               	movf	28,w	;volatile
  4636  1EB0  0020               	movlb	0	; select bank0
  4637  1EB1  01A1               	clrf	?_getAD+1
  4638  1EB2  07A1               	addwf	?_getAD+1,f
  4639  1EB3  0021               	movlb	1	; select bank1
  4640  1EB4  081B               	movf	27,w	;volatile
  4641  1EB5  0020               	movlb	0	; select bank0
  4642  1EB6  01A0               	clrf	?_getAD
  4643  1EB7  07A0               	addwf	?_getAD,f
  4644  1EB8  0008               	return
  4645  1EB9                     __end_of_getAD:	
  4646                           
  4647                           	psect	text6
  4648  1C34                     __ptext6:	
  4649 ;; *************** function _WDT_Main *****************
  4650 ;; Defined at:
  4651 ;;		line 1033 in file "../src/MCU_B1.c"
  4652 ;; Parameters:    Size  Location     Type
  4653 ;;		None
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;		None
  4656 ;; Return value:  Size  Location     Type
  4657 ;;		None               void
  4658 ;; Registers used:
  4659 ;;		wreg, status,2, status,0, pclath, cstack
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 0/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4667 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4668 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4669 ;;Total ram usage:        1 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; Hardware stack levels required when called:    6
  4672 ;; This function calls:
  4673 ;;		_WDT_Clearing
  4674 ;; This function is called by:
  4675 ;;		_main
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           
  4680                           ;psect for function _WDT_Main
  4681  1C34                     _WDT_Main:	
  4682                           
  4683                           ;MCU_B1.c: 1034: if (WDT.Enable == 1) {
  4684                           
  4685                           ;incstack = 0
  4686                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4687  1C34  0022               	movlb	2	; select bank2
  4688  1C35  1C28               	btfss	_WDT^(0+256),0
  4689  1C36  0008               	return
  4690                           
  4691                           ;MCU_B1.c: 1035: if (WDT.Timer-- > 0) {
  4692  1C37  3001               	movlw	1
  4693  1C38  02A9               	subwf	(_WDT^(0+256)+1),f
  4694  1C39  0829               	movf	(_WDT^(0+256)+1),w
  4695  1C3A  3AFF               	xorlw	255
  4696  1C3B  1903               	skipnz
  4697  1C3C  0008               	return
  4698                           
  4699                           ;MCU_B1.c: 1036: WDT.Timer = 100;
  4700  1C3D  3064               	movlw	100
  4701  1C3E  0020               	movlb	0	; select bank0
  4702  1C3F  00A0               	movwf	??_WDT_Main
  4703  1C40  0820               	movf	??_WDT_Main,w
  4704  1C41  0022               	movlb	2	; select bank2
  4705  1C42  00A9               	movwf	(_WDT^(0+256)+1)
  4706                           
  4707                           ;MCU_B1.c: 1037: WDT_Clearing();
  4708  1C43  3180  2002         	fcall	_WDT_Clearing
  4709  1C45  0008               	return
  4710  1C46                     __end_of_WDT_Main:	
  4711                           
  4712                           	psect	text7
  4713  0002                     __ptext7:	
  4714 ;; *************** function _WDT_Clearing *****************
  4715 ;; Defined at:
  4716 ;;		line 1043 in file "../src/MCU_B1.c"
  4717 ;; Parameters:    Size  Location     Type
  4718 ;;		None
  4719 ;; Auto vars:     Size  Location     Type
  4720 ;;		None
  4721 ;; Return value:  Size  Location     Type
  4722 ;;		None               void
  4723 ;; Registers used:
  4724 ;;		None
  4725 ;; Tracked objects:
  4726 ;;		On entry : 0/0
  4727 ;;		On exit  : 0/0
  4728 ;;		Unchanged: 0/0
  4729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4734 ;;Total ram usage:        0 bytes
  4735 ;; Hardware stack levels used:    1
  4736 ;; Hardware stack levels required when called:    5
  4737 ;; This function calls:
  4738 ;;		Nothing
  4739 ;; This function is called by:
  4740 ;;		_WDT_Main
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744                           
  4745                           ;psect for function _WDT_Clearing
  4746  0002                     _WDT_Clearing:	
  4747                           
  4748                           ;incstack = 0
  4749                           ; Regs used in _WDT_Clearing: []
  4750  0002  0064               	clrwdt	;# 
  4751  0003  0008               	return
  4752  0004                     __end_of_WDT_Clearing:	
  4753                           
  4754                           	psect	text8
  4755  1A92                     __ptext8:	
  4756 ;; *************** function _Temp_Main *****************
  4757 ;; Defined at:
  4758 ;;		line 51 in file "../src/OverTemperature_B1.c"
  4759 ;; Parameters:    Size  Location     Type
  4760 ;;		None
  4761 ;; Auto vars:     Size  Location     Type
  4762 ;;		None
  4763 ;; Return value:  Size  Location     Type
  4764 ;;		None               void
  4765 ;; Registers used:
  4766 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4767 ;; Tracked objects:
  4768 ;;		On entry : 0/0
  4769 ;;		On exit  : 0/0
  4770 ;;		Unchanged: 0/0
  4771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4776 ;;Total ram usage:        0 bytes
  4777 ;; Hardware stack levels used:    1
  4778 ;; Hardware stack levels required when called:    7
  4779 ;; This function calls:
  4780 ;;		_setTemp_Main
  4781 ;; This function is called by:
  4782 ;;		_main
  4783 ;; This function uses a non-reentrant model
  4784 ;;
  4785                           
  4786                           
  4787                           ;psect for function _Temp_Main
  4788  1A92                     _Temp_Main:	
  4789                           
  4790                           ;OverTemperature_B1.c: 53: setTemp_Main();
  4791                           
  4792                           ;incstack = 0
  4793                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4794  1A92  318D  254D         	fcall	_setTemp_Main
  4795  1A94  0008               	return
  4796  1A95                     __end_of_Temp_Main:	
  4797                           
  4798                           	psect	text9
  4799  0D4D                     __ptext9:	
  4800 ;; *************** function _setTemp_Main *****************
  4801 ;; Defined at:
  4802 ;;		line 58 in file "../src/OverTemperature_B1.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;		None
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;		None
  4807 ;; Return value:  Size  Location     Type
  4808 ;;		None               void
  4809 ;; Registers used:
  4810 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4818 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4819 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4820 ;;Total ram usage:        2 bytes
  4821 ;; Hardware stack levels used:    1
  4822 ;; Hardware stack levels required when called:    6
  4823 ;; This function calls:
  4824 ;;		_getMain_All_Error_Status
  4825 ;; This function is called by:
  4826 ;;		_Temp_Main
  4827 ;; This function uses a non-reentrant model
  4828 ;;
  4829                           
  4830                           
  4831                           ;psect for function _setTemp_Main
  4832  0D4D                     _setTemp_Main:	
  4833                           
  4834                           ;OverTemperature_B1.c: 59: if (Temp.Enable == 1) {
  4835                           
  4836                           ;incstack = 0
  4837                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4838  0D4D  0021               	movlb	1	; select bank1
  4839  0D4E  1C54               	btfss	_Temp^(0+128),0
  4840  0D4F  2DE2               	goto	l1613
  4841                           
  4842                           ;OverTemperature_B1.c: 60: if (Temp.ADtoGO == 0) {
  4843  0D50  1954               	btfsc	_Temp^(0+128),2
  4844  0D51  2D61               	goto	l7404
  4845                           
  4846                           ;OverTemperature_B1.c: 61: Temp.Time++;
  4847  0D52  3001               	movlw	1
  4848  0D53  07D5               	addwf	(_Temp^(0+128)+1),f
  4849  0D54  3000               	movlw	0
  4850  0D55  3DD6               	addwfc	((_Temp+1)^(0+128)+1),f
  4851                           
  4852                           ;OverTemperature_B1.c: 62: if (Temp.Time >= 500) {
  4853  0D56  3001               	movlw	1
  4854  0D57  0256               	subwf	((_Temp+1)^(0+128)+1),w
  4855  0D58  30F4               	movlw	244
  4856  0D59  1903               	skipnz
  4857  0D5A  0255               	subwf	(_Temp^(0+128)+1),w
  4858  0D5B  1C03               	skipc
  4859  0D5C  0008               	return
  4860                           
  4861                           ;OverTemperature_B1.c: 63: Temp.Time = 0;
  4862  0D5D  01D5               	clrf	(_Temp^(0+128)+1)
  4863  0D5E  01D6               	clrf	((_Temp+1)^(0+128)+1)
  4864                           
  4865                           ;OverTemperature_B1.c: 64: Temp.ADtoGO = 1;
  4866  0D5F  1554               	bsf	_Temp^(0+128),2
  4867                           
  4868                           ;OverTemperature_B1.c: 65: }
  4869                           ;OverTemperature_B1.c: 66: } else {
  4870  0D60  0008               	return
  4871  0D61                     l7404:	
  4872                           
  4873                           ;OverTemperature_B1.c: 67: if (getMain_All_Error_Status(2) == 0) {
  4874  0D61  3002               	movlw	2
  4875  0D62  3191  2117  318D   	fcall	_getMain_All_Error_Status
  4876  0D65  3800               	iorlw	0
  4877  0D66  1D03               	skipz
  4878  0D67  0008               	return
  4879                           
  4880                           ;OverTemperature_B1.c: 68: Temp.Time++;
  4881  0D68  3001               	movlw	1
  4882  0D69  0021               	movlb	1	; select bank1
  4883  0D6A  07D5               	addwf	(_Temp^(0+128)+1),f
  4884  0D6B  3000               	movlw	0
  4885  0D6C  3DD6               	addwfc	((_Temp+1)^(0+128)+1),f
  4886                           
  4887                           ;OverTemperature_B1.c: 69: if (Temp.Time >= 5) {
  4888  0D6D  3000               	movlw	0
  4889  0D6E  0256               	subwf	((_Temp+1)^(0+128)+1),w
  4890  0D6F  3005               	movlw	5
  4891  0D70  1903               	skipnz
  4892  0D71  0255               	subwf	(_Temp^(0+128)+1),w
  4893  0D72  1C03               	skipc
  4894  0D73  0008               	return
  4895                           
  4896                           ;OverTemperature_B1.c: 70: Temp.Time = 0;
  4897  0D74  01D5               	clrf	(_Temp^(0+128)+1)
  4898  0D75  01D6               	clrf	((_Temp+1)^(0+128)+1)
  4899                           
  4900                           ;OverTemperature_B1.c: 71: if (Temp.GO == 1) {
  4901  0D76  1E54               	btfss	_Temp^(0+128),4
  4902  0D77  0008               	return
  4903                           
  4904                           ;OverTemperature_B1.c: 72: Temp.ADtoGO = 0;
  4905  0D78  1154               	bcf	_Temp^(0+128),2
  4906                           
  4907                           ;OverTemperature_B1.c: 73: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  4908  0D79  300A               	movlw	10
  4909  0D7A  3ED4               	addlw	_Temp& (0+255)
  4910  0D7B  0086               	movwf	6
  4911  0D7C  0187               	clrf	7
  4912  0D7D  3008               	movlw	8
  4913  0D7E  3ED4               	addlw	_Temp& (0+255)
  4914  0D7F  0084               	movwf	4
  4915  0D80  0185               	clrf	5
  4916  0D81  3F40               	moviw [0]fsr1
  4917  0D82  0700               	addwf	0,w
  4918  0D83  0020               	movlb	0	; select bank0
  4919  0D84  00A7               	movwf	??_setTemp_Main
  4920  0D85  3101               	addfsr 0,1
  4921  0D86  3F41               	moviw [1]fsr1
  4922  0D87  3D00               	addwfc	0,w
  4923  0D88  00A8               	movwf	??_setTemp_Main+1
  4924  0D89  36A8               	lsrf	??_setTemp_Main+1,f
  4925  0D8A  0CA7               	rrf	??_setTemp_Main,f
  4926  0D8B  0827               	movf	??_setTemp_Main,w
  4927  0D8C  0021               	movlb	1	; select bank1
  4928  0D8D  00DA               	movwf	(_Temp^(0+128)+6)
  4929  0D8E  0020               	movlb	0	; select bank0
  4930  0D8F  0828               	movf	??_setTemp_Main+1,w
  4931  0D90  0021               	movlb	1	; select bank1
  4932  0D91  00DB               	movwf	((_Temp+1)^(0+128)+6)
  4933                           
  4934                           ;OverTemperature_B1.c: 83: Temp.SafeValue = 600;
  4935  0D92  3058               	movlw	88
  4936  0D93  00E2               	movwf	(_Temp^(0+128)+14)
  4937  0D94  3002               	movlw	2
  4938  0D95  00E3               	movwf	(_Temp^(0+128)+15)
  4939                           
  4940                           ;OverTemperature_B1.c: 84: Temp.DangerValue = 550;
  4941  0D96  3026               	movlw	38
  4942  0D97  00E4               	movwf	(_Temp^(0+128)+16)
  4943  0D98  3002               	movlw	2
  4944  0D99  00E5               	movwf	(_Temp^(0+128)+17)
  4945                           
  4946                           ;OverTemperature_B1.c: 90: if (Temp.ERROR == 1) {
  4947  0D9A  1CD4               	btfss	_Temp^(0+128),1
  4948  0D9B  2DB1               	goto	l7434
  4949                           
  4950                           ;OverTemperature_B1.c: 91: if (Temp.AD >= Temp.SafeValue) {
  4951  0D9C  0863               	movf	((_Temp+1)^(0+128)+14),w
  4952  0D9D  025B               	subwf	((_Temp+1)^(0+128)+6),w
  4953  0D9E  1D03               	skipz
  4954  0D9F  2DA2               	goto	u6935
  4955  0DA0  0862               	movf	(_Temp^(0+128)+14),w
  4956  0DA1  025A               	subwf	(_Temp^(0+128)+6),w
  4957  0DA2                     u6935:	
  4958  0DA2  1C03               	skipc
  4959  0DA3  2DC6               	goto	l7444
  4960                           
  4961                           ;OverTemperature_B1.c: 92: Temp.Count++;
  4962  0DA4  3001               	movlw	1
  4963  0DA5  0020               	movlb	0	; select bank0
  4964  0DA6  00A7               	movwf	??_setTemp_Main
  4965  0DA7  0827               	movf	??_setTemp_Main,w
  4966  0DA8  0021               	movlb	1	; select bank1
  4967  0DA9  07D7               	addwf	(_Temp^(0+128)+3),f
  4968                           
  4969                           ;OverTemperature_B1.c: 93: if (Temp.Count >= 3) {
  4970  0DAA  3003               	movlw	3
  4971  0DAB  0257               	subwf	(_Temp^(0+128)+3),w
  4972  0DAC  1C03               	skipc
  4973  0DAD  2DC7               	goto	l7446
  4974                           
  4975                           ;OverTemperature_B1.c: 94: Temp.Count = 0;
  4976  0DAE  01D7               	clrf	(_Temp^(0+128)+3)
  4977                           
  4978                           ;OverTemperature_B1.c: 95: Temp.ERROR = 0;
  4979  0DAF  10D4               	bcf	_Temp^(0+128),1
  4980                           
  4981                           ;OverTemperature_B1.c: 96: }
  4982                           ;OverTemperature_B1.c: 97: } else {
  4983  0DB0  2DC7               	goto	l7446
  4984  0DB1                     l7434:	
  4985                           ;OverTemperature_B1.c: 99: }
  4986                           ;OverTemperature_B1.c: 100: } else {
  4987                           
  4988                           ;OverTemperature_B1.c: 98: Temp.Count = 0;
  4989                           
  4990                           
  4991                           ;OverTemperature_B1.c: 101: if (Temp.AD <= Temp.DangerValue) {
  4992  0DB1  085B               	movf	((_Temp+1)^(0+128)+6),w
  4993  0DB2  0265               	subwf	((_Temp+1)^(0+128)+16),w
  4994  0DB3  1D03               	skipz
  4995  0DB4  2DB7               	goto	u6955
  4996  0DB5  085A               	movf	(_Temp^(0+128)+6),w
  4997  0DB6  0264               	subwf	(_Temp^(0+128)+16),w
  4998  0DB7                     u6955:	
  4999  0DB7  1C03               	skipc
  5000  0DB8  2DC6               	goto	l7444
  5001                           
  5002                           ;OverTemperature_B1.c: 102: Temp.Count++;
  5003  0DB9  3001               	movlw	1
  5004  0DBA  0020               	movlb	0	; select bank0
  5005  0DBB  00A7               	movwf	??_setTemp_Main
  5006  0DBC  0827               	movf	??_setTemp_Main,w
  5007  0DBD  0021               	movlb	1	; select bank1
  5008  0DBE  07D7               	addwf	(_Temp^(0+128)+3),f
  5009                           
  5010                           ;OverTemperature_B1.c: 103: if (Temp.Count >= 3) {
  5011  0DBF  3003               	movlw	3
  5012  0DC0  0257               	subwf	(_Temp^(0+128)+3),w
  5013  0DC1  1C03               	skipc
  5014  0DC2  2DC7               	goto	l7446
  5015                           
  5016                           ;OverTemperature_B1.c: 104: Temp.Count = 0;
  5017  0DC3  01D7               	clrf	(_Temp^(0+128)+3)
  5018                           
  5019                           ;OverTemperature_B1.c: 105: Temp.ERROR = 1;
  5020  0DC4  14D4               	bsf	_Temp^(0+128),1
  5021                           
  5022                           ;OverTemperature_B1.c: 106: }
  5023                           ;OverTemperature_B1.c: 107: } else {
  5024  0DC5  2DC7               	goto	l7446
  5025  0DC6                     l7444:	
  5026                           
  5027                           ;OverTemperature_B1.c: 108: Temp.Count = 0;
  5028  0DC6  01D7               	clrf	(_Temp^(0+128)+3)
  5029  0DC7                     l7446:	
  5030                           
  5031                           ;OverTemperature_B1.c: 109: }
  5032                           ;OverTemperature_B1.c: 110: }
  5033                           ;OverTemperature_B1.c: 111: product->Data[24]=Temp.AD >> 8;
  5034  0DC7  085B               	movf	((_Temp+1)^(0+128)+6),w
  5035  0DC8  0020               	movlb	0	; select bank0
  5036  0DC9  00A7               	movwf	??_setTemp_Main
  5037  0DCA  086F               	movf	_product,w
  5038  0DCB  3E18               	addlw	24
  5039  0DCC  0086               	movwf	6
  5040  0DCD  3002               	movlw	2	; select bank4/5
  5041  0DCE  0087               	movwf	7
  5042  0DCF  0827               	movf	??_setTemp_Main,w
  5043  0DD0  0081               	movwf	1
  5044                           
  5045                           ;OverTemperature_B1.c: 112: product->Data[25]=Temp.AD;
  5046  0DD1  0021               	movlb	1	; select bank1
  5047  0DD2  085A               	movf	(_Temp^(0+128)+6),w
  5048  0DD3  0020               	movlb	0	; select bank0
  5049  0DD4  00A7               	movwf	??_setTemp_Main
  5050  0DD5  086F               	movf	_product,w
  5051  0DD6  3E19               	addlw	25
  5052  0DD7  0086               	movwf	6
  5053  0DD8  3002               	movlw	2	; select bank4/5
  5054  0DD9  0087               	movwf	7
  5055  0DDA  0827               	movf	??_setTemp_Main,w
  5056  0DDB  0081               	movwf	1
  5057                           
  5058                           ;OverTemperature_B1.c: 115: Temp.ADH[0] = 0;
  5059  0DDC  0021               	movlb	1	; select bank1
  5060  0DDD  01DC               	clrf	(_Temp^(0+128)+8)
  5061  0DDE  01DD               	clrf	((_Temp+1)^(0+128)+8)
  5062                           
  5063                           ;OverTemperature_B1.c: 116: Temp.ADH[1] = 0;
  5064  0DDF  01DE               	clrf	(_Temp^(0+128)+10)
  5065  0DE0  01DF               	clrf	((_Temp+1)^(0+128)+10)
  5066                           
  5067                           ;OverTemperature_B1.c: 117: }
  5068                           ;OverTemperature_B1.c: 118: }
  5069                           ;OverTemperature_B1.c: 119: }
  5070                           ;OverTemperature_B1.c: 120: }
  5071                           ;OverTemperature_B1.c: 121: } else {
  5072  0DE1  0008               	return
  5073  0DE2                     l1613:	
  5074                           
  5075                           ;OverTemperature_B1.c: 122: if (myMain.PowerON == 1) {
  5076  0DE2  1C20               	btfss	_myMain^(0+128),0
  5077  0DE3  0008               	return
  5078                           
  5079                           ;OverTemperature_B1.c: 123: Temp.Enable = 1;
  5080  0DE4  1454               	bsf	_Temp^(0+128),0
  5081  0DE5  0008               	return
  5082  0DE6                     __end_of_setTemp_Main:	
  5083                           
  5084                           	psect	text10
  5085  1A8F                     __ptext10:	
  5086 ;; *************** function _Temp_Initialization *****************
  5087 ;; Defined at:
  5088 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;		None
  5091 ;; Auto vars:     Size  Location     Type
  5092 ;;		None
  5093 ;; Return value:  Size  Location     Type
  5094 ;;		None               void
  5095 ;; Registers used:
  5096 ;;		status,2, status,0, pclath, cstack
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5106 ;;Total ram usage:        0 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; Hardware stack levels required when called:    6
  5109 ;; This function calls:
  5110 ;;		_setTemp_Initialization
  5111 ;; This function is called by:
  5112 ;;		_main
  5113 ;; This function uses a non-reentrant model
  5114 ;;
  5115                           
  5116                           
  5117                           ;psect for function _Temp_Initialization
  5118  1A8F                     _Temp_Initialization:	
  5119                           
  5120                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5121                           
  5122                           ;incstack = 0
  5123                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5124  1A8F  3188  2001         	fcall	_setTemp_Initialization
  5125  1A91  0008               	return
  5126  1A92                     __end_of_Temp_Initialization:	
  5127                           
  5128                           	psect	text11
  5129  0801                     __ptext11:	
  5130 ;; *************** function _setTemp_Initialization *****************
  5131 ;; Defined at:
  5132 ;;		line 46 in file "../src/OverTemperature_B1.c"
  5133 ;; Parameters:    Size  Location     Type
  5134 ;;		None
  5135 ;; Auto vars:     Size  Location     Type
  5136 ;;		None
  5137 ;; Return value:  Size  Location     Type
  5138 ;;		None               void
  5139 ;; Registers used:
  5140 ;;		None
  5141 ;; Tracked objects:
  5142 ;;		On entry : 0/0
  5143 ;;		On exit  : 0/0
  5144 ;;		Unchanged: 0/0
  5145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5150 ;;Total ram usage:        0 bytes
  5151 ;; Hardware stack levels used:    1
  5152 ;; Hardware stack levels required when called:    5
  5153 ;; This function calls:
  5154 ;;		Nothing
  5155 ;; This function is called by:
  5156 ;;		_Temp_Initialization
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           
  5161                           ;psect for function _setTemp_Initialization
  5162  0801                     _setTemp_Initialization:	
  5163                           
  5164                           ;incstack = 0
  5165                           ; Regs used in _setTemp_Initialization: []
  5166  0801  0008               	return
  5167  0802                     __end_of_setTemp_Initialization:	
  5168                           
  5169                           	psect	text12
  5170  1F41                     __ptext12:	
  5171 ;; *************** function _Switch_Main *****************
  5172 ;; Defined at:
  5173 ;;		line 72 in file "../src/Switch_B1.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;		None
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;  error           1   78[BANK0 ] unsigned char 
  5178 ;; Return value:  Size  Location     Type
  5179 ;;		None               void
  5180 ;; Registers used:
  5181 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5182 ;; Tracked objects:
  5183 ;;		On entry : 0/0
  5184 ;;		On exit  : 0/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5188 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5189 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5190 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5191 ;;Total ram usage:        2 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; Hardware stack levels required when called:   12
  5194 ;; This function calls:
  5195 ;;		_TouchPower
  5196 ;;		_getMain_All_Error_Status
  5197 ;;		_setMain_Exception
  5198 ;;		_setSw_Main
  5199 ;; This function is called by:
  5200 ;;		_main
  5201 ;; This function uses a non-reentrant model
  5202 ;;
  5203                           
  5204                           
  5205                           ;psect for function _Switch_Main
  5206  1F41                     _Switch_Main:	
  5207                           
  5208                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5209                           
  5210                           ;incstack = 0
  5211                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5212  1F41  3000               	movlw	0
  5213  1F42  3191  2117  319F   	fcall	_getMain_All_Error_Status
  5214  1F45  0020               	movlb	0	; select bank0
  5215  1F46  00ED               	movwf	??_Switch_Main
  5216  1F47  086D               	movf	??_Switch_Main,w
  5217  1F48  00EE               	movwf	Switch_Main@error
  5218                           
  5219                           ;Switch_B1.c: 74: if (error != 0) {
  5220  1F49  086E               	movf	Switch_Main@error,w
  5221  1F4A  1903               	btfsc	3,2
  5222  1F4B  2F51               	goto	l2379
  5223                           
  5224                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5225  1F4C  0021               	movlb	1	; select bank1
  5226  1F4D  184F               	btfsc	_SwDetect^(0+128),0
  5227  1F4E  2F5A               	goto	l8146
  5228                           
  5229                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5230  1F4F  144F               	bsf	_SwDetect^(0+128),0
  5231  1F50  2F55               	goto	L2
  5232  1F51                     l2379:	
  5233                           ;Switch_B1.c: 80: }
  5234                           ;Switch_B1.c: 81: } else {
  5235                           
  5236                           ;Switch_B1.c: 78: setMain_Exception(error);
  5237                           
  5238                           
  5239                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5240  1F51  0021               	movlb	1	; select bank1
  5241  1F52  1C4F               	btfss	_SwDetect^(0+128),0
  5242  1F53  2F5A               	goto	l8146
  5243                           
  5244                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5245  1F54  104F               	bcf	_SwDetect^(0+128),0
  5246  1F55                     L2:	
  5247                           
  5248                           ;Switch_B1.c: 85: setMain_Exception(error);
  5249  1F55  0020               	movlb	0	; select bank0
  5250  1F56  086E               	movf	Switch_Main@error,w
  5251  1F57  3189  2123  319F   	fcall	_setMain_Exception
  5252  1F5A                     l8146:	
  5253                           
  5254                           ;Switch_B1.c: 87: }
  5255                           ;Switch_B1.c: 88: }
  5256                           ;Switch_B1.c: 91: setSw_Main(1);
  5257  1F5A  3001               	movlw	1
  5258  1F5B  3182  2231  319F   	fcall	_setSw_Main
  5259                           
  5260                           ;Switch_B1.c: 95: setSw_Main(2);
  5261  1F5E  3002               	movlw	2
  5262  1F5F  3182  2231  319F   	fcall	_setSw_Main
  5263                           
  5264                           ;Switch_B1.c: 103: TouchPower();
  5265  1F62  319D  2521         	fcall	_TouchPower
  5266  1F64  0008               	return
  5267  1F65                     __end_of_Switch_Main:	
  5268                           
  5269                           	psect	text13
  5270  0231                     __ptext13:	
  5271 ;; *************** function _setSw_Main *****************
  5272 ;; Defined at:
  5273 ;;		line 137 in file "../src/Switch_B1.c"
  5274 ;; Parameters:    Size  Location     Type
  5275 ;;  sw              1    wreg     unsigned char 
  5276 ;; Auto vars:     Size  Location     Type
  5277 ;;  sw              1   72[BANK0 ] unsigned char 
  5278 ;; Return value:  Size  Location     Type
  5279 ;;		None               void
  5280 ;; Registers used:
  5281 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5282 ;; Tracked objects:
  5283 ;;		On entry : 0/0
  5284 ;;		On exit  : 0/0
  5285 ;;		Unchanged: 0/0
  5286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5289 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5290 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5291 ;;Total ram usage:        3 bytes
  5292 ;; Hardware stack levels used:    1
  5293 ;; Hardware stack levels required when called:   10
  5294 ;; This function calls:
  5295 ;;		_SwPointSelect
  5296 ;;		_getSw_KeyStatus
  5297 ;;		_setBuz
  5298 ;;		_setDimmerLights_AdjControl
  5299 ;;		_setDimmerLights_SwOff
  5300 ;;		_setDimmerLights_SwOn
  5301 ;;		_setRF_Learn
  5302 ;; This function is called by:
  5303 ;;		_Switch_Main
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           
  5308                           ;psect for function _setSw_Main
  5309  0231                     _setSw_Main:	
  5310                           
  5311                           ;incstack = 0
  5312                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5313                           ;setSw_Main@sw stored from wreg
  5314  0231  0020               	movlb	0	; select bank0
  5315  0232  00E8               	movwf	setSw_Main@sw
  5316                           
  5317                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5318  0233  0868               	movf	setSw_Main@sw,w
  5319  0234  319C  24BA  3182   	fcall	_SwPointSelect
  5320                           
  5321                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5322  0237  087C               	movf	_Sw,w
  5323  0238  0086               	movwf	6
  5324  0239  3001               	movlw	1	; select bank2/3
  5325  023A  0087               	movwf	7
  5326  023B  1C01               	btfss	1,0
  5327  023C  2B97               	goto	l2389
  5328                           
  5329                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5330  023D  0021               	movlb	1	; select bank1
  5331  023E  184F               	btfsc	_SwDetect^(0+128),0
  5332  023F  2A5B               	goto	l7620
  5333                           
  5334                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5335  0240  0A7C               	incf	_Sw,w
  5336  0241  0086               	movwf	6
  5337  0242  3001               	movlw	1	; select bank2/3
  5338  0243  0087               	movwf	7
  5339  0244  1081               	bcf	1,1
  5340                           
  5341                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5342  0245  0020               	movlb	0	; select bank0
  5343  0246  0868               	movf	setSw_Main@sw,w
  5344  0247  319E  265A  3182   	fcall	_getSw_KeyStatus
  5345  024A  3A01               	xorlw	1
  5346  024B  3000               	movlw	0
  5347  024C  1903               	skipnz
  5348  024D  3001               	movlw	1
  5349  024E  0020               	movlb	0	; select bank0
  5350  024F  00E6               	movwf	??_setSw_Main
  5351  0250  087C               	movf	_Sw,w
  5352  0251  0086               	movwf	6
  5353  0252  3001               	movlw	1	; select bank2/3
  5354  0253  0087               	movwf	7
  5355  0254  0DE6               	rlf	??_setSw_Main,f
  5356  0255  0801               	movf	1,w
  5357  0256  0666               	xorwf	??_setSw_Main,w
  5358  0257  39FD               	andlw	-3
  5359  0258  0666               	xorwf	??_setSw_Main,w
  5360  0259  0081               	movwf	1
  5361                           
  5362                           ;Switch_B1.c: 143: } else {
  5363  025A  2A70               	goto	l2391
  5364  025B                     l7620:	
  5365                           
  5366                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5367  025B  0A7C               	incf	_Sw,w
  5368  025C  0086               	movwf	6
  5369  025D  3001               	movlw	1	; select bank2/3
  5370  025E  0087               	movwf	7
  5371  025F  1881               	btfsc	1,1
  5372  0260  2A70               	goto	l2391
  5373                           
  5374                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5375  0261  0A7C               	incf	_Sw,w
  5376  0262  0086               	movwf	6
  5377  0263  3001               	movlw	1	; select bank2/3
  5378  0264  0087               	movwf	7
  5379  0265  1481               	bsf	1,1
  5380                           
  5381                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5382  0266  087C               	movf	_Sw,w
  5383  0267  0086               	movwf	6
  5384  0268  3001               	movlw	1	; select bank2/3
  5385  0269  0087               	movwf	7
  5386  026A  1081               	bcf	1,1
  5387                           
  5388                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5389  026B  087C               	movf	_Sw,w
  5390  026C  0086               	movwf	6
  5391  026D  3001               	movlw	1	; select bank2/3
  5392  026E  0087               	movwf	7
  5393  026F  1501               	bsf	1,2
  5394  0270                     l2391:	
  5395                           
  5396                           ;Switch_B1.c: 148: }
  5397                           ;Switch_B1.c: 149: }
  5398                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5399  0270  087C               	movf	_Sw,w
  5400  0271  0086               	movwf	6
  5401  0272  3001               	movlw	1	; select bank2/3
  5402  0273  0087               	movwf	7
  5403  0274  1C81               	btfss	1,1
  5404  0275  2B40               	goto	l7670
  5405                           
  5406                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5407  0276  087C               	movf	_Sw,w
  5408  0277  0086               	movwf	6
  5409  0278  3001               	movlw	1	; select bank2/3
  5410  0279  0087               	movwf	7
  5411  027A  1901               	btfsc	1,2
  5412  027B  2A9E               	goto	l7636
  5413                           
  5414                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5415  027C  3001               	movlw	1
  5416  027D  0020               	movlb	0	; select bank0
  5417  027E  00E6               	movwf	??_setSw_Main
  5418  027F  087C               	movf	_Sw,w
  5419  0280  3E02               	addlw	2
  5420  0281  0086               	movwf	6
  5421  0282  3001               	movlw	1	; select bank2/3
  5422  0283  0087               	movwf	7
  5423  0284  0866               	movf	??_setSw_Main,w
  5424  0285  0781               	addwf	1,f
  5425                           
  5426                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5427  0286  087C               	movf	_Sw,w
  5428  0287  3E02               	addlw	2
  5429  0288  0086               	movwf	6
  5430  0289  3001               	movlw	1	; select bank2/3
  5431  028A  0087               	movwf	7
  5432  028B  3005               	movlw	5
  5433  028C  0201               	subwf	1,w
  5434  028D  1C03               	skipc
  5435  028E  0008               	return
  5436                           
  5437                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5438  028F  087C               	movf	_Sw,w
  5439  0290  3E02               	addlw	2
  5440  0291  0086               	movwf	6
  5441  0292  3001               	movlw	1	; select bank2/3
  5442  0293  0087               	movwf	7
  5443  0294  0181               	clrf	1
  5444                           
  5445                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5446  0295  087C               	movf	_Sw,w
  5447  0296  0086               	movwf	6
  5448  0297  3001               	movlw	1	; select bank2/3
  5449  0298  0087               	movwf	7
  5450  0299  1501               	bsf	1,2
  5451                           
  5452                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5453  029A  0868               	movf	setSw_Main@sw,w
  5454  029B  3193  23CA         	fcall	_setDimmerLights_SwOn
  5455                           
  5456                           ;Switch_B1.c: 162: }
  5457                           ;Switch_B1.c: 163: } else {
  5458  029D  0008               	return
  5459  029E                     l7636:	
  5460                           
  5461                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5462  029E  087C               	movf	_Sw,w
  5463  029F  0086               	movwf	6
  5464  02A0  3001               	movlw	1	; select bank2/3
  5465  02A1  0087               	movwf	7
  5466  02A2  1981               	btfsc	1,3
  5467  02A3  2AD0               	goto	l7646
  5468                           
  5469                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5470  02A4  087C               	movf	_Sw,w
  5471  02A5  3E03               	addlw	3
  5472  02A6  0086               	movwf	6
  5473  02A7  3001               	movlw	1	; select bank2/3
  5474  02A8  0087               	movwf	7
  5475  02A9  3001               	movlw	1
  5476  02AA  0781               	addwf	1,f
  5477  02AB  3141               	addfsr 1,1
  5478  02AC  1803               	skipnc
  5479  02AD  0A81               	incf	1,f
  5480                           
  5481                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5482  02AE  087C               	movf	_Sw,w
  5483  02AF  3E03               	addlw	3
  5484  02B0  0086               	movwf	6
  5485  02B1  3001               	movlw	1	; select bank2/3
  5486  02B2  0087               	movwf	7
  5487  02B3  3F40               	moviw [0]fsr1
  5488  02B4  0020               	movlb	0	; select bank0
  5489  02B5  00E6               	movwf	??_setSw_Main
  5490  02B6  3F41               	moviw [1]fsr1
  5491  02B7  00E7               	movwf	??_setSw_Main+1
  5492  02B8  3000               	movlw	0
  5493  02B9  0267               	subwf	??_setSw_Main+1,w
  5494  02BA  3096               	movlw	150
  5495  02BB  1903               	skipnz
  5496  02BC  0266               	subwf	??_setSw_Main,w
  5497  02BD  1C03               	skipc
  5498  02BE  0008               	return
  5499                           
  5500                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5501  02BF  087C               	movf	_Sw,w
  5502  02C0  3E03               	addlw	3
  5503  02C1  0086               	movwf	6
  5504  02C2  3001               	movlw	1	; select bank2/3
  5505  02C3  0087               	movwf	7
  5506  02C4  3000               	movlw	0
  5507  02C5  3FC0               	movwi [0]fsr1
  5508  02C6  3FC1               	movwi [1]fsr1
  5509                           
  5510                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5511  02C7  087C               	movf	_Sw,w
  5512  02C8  0086               	movwf	6
  5513  02C9  3001               	movlw	1	; select bank2/3
  5514  02CA  0087               	movwf	7
  5515  02CB  1581               	bsf	1,3
  5516                           
  5517                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5518  02CC  0868               	movf	setSw_Main@sw,w
  5519  02CD  3191  21B3         	fcall	_setDimmerLights_AdjControl
  5520                           
  5521                           ;Switch_B1.c: 174: }
  5522                           ;Switch_B1.c: 175: } else {
  5523  02CF  0008               	return
  5524  02D0                     l7646:	
  5525                           
  5526                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5527  02D0  087C               	movf	_Sw,w
  5528  02D1  0086               	movwf	6
  5529  02D2  3001               	movlw	1	; select bank2/3
  5530  02D3  0087               	movwf	7
  5531  02D4  1A01               	btfsc	1,4
  5532  02D5  2B0E               	goto	l7660
  5533                           
  5534                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5535  02D6  087C               	movf	_Sw,w
  5536  02D7  3E05               	addlw	5
  5537  02D8  0086               	movwf	6
  5538  02D9  3001               	movlw	1	; select bank2/3
  5539  02DA  0087               	movwf	7
  5540  02DB  3001               	movlw	1
  5541  02DC  0781               	addwf	1,f
  5542  02DD  3141               	addfsr 1,1
  5543  02DE  1803               	skipnc
  5544  02DF  0A81               	incf	1,f
  5545                           
  5546                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5547  02E0  087C               	movf	_Sw,w
  5548  02E1  3E05               	addlw	5
  5549  02E2  0086               	movwf	6
  5550  02E3  3001               	movlw	1	; select bank2/3
  5551  02E4  0087               	movwf	7
  5552  02E5  3F40               	moviw [0]fsr1
  5553  02E6  0020               	movlb	0	; select bank0
  5554  02E7  00E6               	movwf	??_setSw_Main
  5555  02E8  3F41               	moviw [1]fsr1
  5556  02E9  00E7               	movwf	??_setSw_Main+1
  5557  02EA  3000               	movlw	0
  5558  02EB  0267               	subwf	??_setSw_Main+1,w
  5559  02EC  3096               	movlw	150
  5560  02ED  1903               	skipnz
  5561  02EE  0266               	subwf	??_setSw_Main,w
  5562  02EF  1C03               	skipc
  5563  02F0  0008               	return
  5564                           
  5565                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5566  02F1  087C               	movf	_Sw,w
  5567  02F2  3E05               	addlw	5
  5568  02F3  0086               	movwf	6
  5569  02F4  3001               	movlw	1	; select bank2/3
  5570  02F5  0087               	movwf	7
  5571  02F6  3000               	movlw	0
  5572  02F7  3FC0               	movwi [0]fsr1
  5573  02F8  3FC1               	movwi [1]fsr1
  5574                           
  5575                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5576  02F9  087C               	movf	_Sw,w
  5577  02FA  0086               	movwf	6
  5578  02FB  3001               	movlw	1	; select bank2/3
  5579  02FC  0087               	movwf	7
  5580  02FD  1601               	bsf	1,4
  5581                           
  5582                           ;Switch_B1.c: 183: setRF_Learn(1);
  5583  02FE  3001               	movlw	1
  5584  02FF  319C  24CE  3182   	fcall	_setRF_Learn
  5585                           
  5586                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5587  0302  0021               	movlb	1	; select bank1
  5588  0303  1EA0               	btfss	_myMain^(0+128),5
  5589  0304  0008               	return
  5590                           
  5591                           ;Switch_B1.c: 186: setBuz(2, 100);
  5592  0305  3064               	movlw	100
  5593  0306  0020               	movlb	0	; select bank0
  5594  0307  00A9               	movwf	setBuz@time
  5595  0308  3000               	movlw	0
  5596  0309  00AA               	movwf	setBuz@time+1
  5597  030A  3002               	movlw	2
  5598  030B  3196  26F2         	fcall	_setBuz
  5599                           
  5600                           ;Switch_B1.c: 187: }
  5601                           ;Switch_B1.c: 189: }
  5602                           ;Switch_B1.c: 190: } else {
  5603  030D  0008               	return
  5604  030E                     l7660:	
  5605                           
  5606                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5607  030E  087C               	movf	_Sw,w
  5608  030F  0086               	movwf	6
  5609  0310  3001               	movlw	1	; select bank2/3
  5610  0311  0087               	movwf	7
  5611  0312  1A81               	btfsc	1,5
  5612  0313  0008               	return
  5613                           
  5614                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5615  0314  087C               	movf	_Sw,w
  5616  0315  3E07               	addlw	7
  5617  0316  0086               	movwf	6
  5618  0317  3001               	movlw	1	; select bank2/3
  5619  0318  0087               	movwf	7
  5620  0319  3001               	movlw	1
  5621  031A  0781               	addwf	1,f
  5622  031B  3141               	addfsr 1,1
  5623  031C  1803               	skipnc
  5624  031D  0A81               	incf	1,f
  5625                           
  5626                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5627  031E  087C               	movf	_Sw,w
  5628  031F  3E07               	addlw	7
  5629  0320  0086               	movwf	6
  5630  0321  3001               	movlw	1	; select bank2/3
  5631  0322  0087               	movwf	7
  5632  0323  3F40               	moviw [0]fsr1
  5633  0324  0020               	movlb	0	; select bank0
  5634  0325  00E6               	movwf	??_setSw_Main
  5635  0326  3F41               	moviw [1]fsr1
  5636  0327  00E7               	movwf	??_setSw_Main+1
  5637  0328  3001               	movlw	1
  5638  0329  0267               	subwf	??_setSw_Main+1,w
  5639  032A  302C               	movlw	44
  5640  032B  1903               	skipnz
  5641  032C  0266               	subwf	??_setSw_Main,w
  5642  032D  1C03               	skipc
  5643  032E  0008               	return
  5644                           
  5645                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5646  032F  087C               	movf	_Sw,w
  5647  0330  3E07               	addlw	7
  5648  0331  0086               	movwf	6
  5649  0332  3001               	movlw	1	; select bank2/3
  5650  0333  0087               	movwf	7
  5651  0334  3000               	movlw	0
  5652  0335  3FC0               	movwi [0]fsr1
  5653  0336  3FC1               	movwi [1]fsr1
  5654                           
  5655                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5656  0337  087C               	movf	_Sw,w
  5657  0338  0086               	movwf	6
  5658  0339  3001               	movlw	1	; select bank2/3
  5659  033A  0087               	movwf	7
  5660  033B  1681               	bsf	1,5
  5661                           
  5662                           ;Switch_B1.c: 198: setRF_Learn(0);
  5663  033C  3000               	movlw	0
  5664  033D  319C  24CE         	fcall	_setRF_Learn
  5665                           
  5666                           ;Switch_B1.c: 201: }
  5667                           ;Switch_B1.c: 202: }
  5668                           ;Switch_B1.c: 203: }
  5669                           ;Switch_B1.c: 204: }
  5670                           ;Switch_B1.c: 205: }
  5671                           ;Switch_B1.c: 206: } else {
  5672  033F  0008               	return
  5673  0340                     l7670:	
  5674                           
  5675                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5676  0340  087C               	movf	_Sw,w
  5677  0341  0086               	movwf	6
  5678  0342  3001               	movlw	1	; select bank2/3
  5679  0343  0087               	movwf	7
  5680  0344  1D01               	btfss	1,2
  5681  0345  0008               	return
  5682                           
  5683                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5684  0346  3001               	movlw	1
  5685  0347  0020               	movlb	0	; select bank0
  5686  0348  00E6               	movwf	??_setSw_Main
  5687  0349  087C               	movf	_Sw,w
  5688  034A  3E02               	addlw	2
  5689  034B  0086               	movwf	6
  5690  034C  3001               	movlw	1	; select bank2/3
  5691  034D  0087               	movwf	7
  5692  034E  0866               	movf	??_setSw_Main,w
  5693  034F  0781               	addwf	1,f
  5694                           
  5695                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5696  0350  087C               	movf	_Sw,w
  5697  0351  3E02               	addlw	2
  5698  0352  0086               	movwf	6
  5699  0353  3001               	movlw	1	; select bank2/3
  5700  0354  0087               	movwf	7
  5701  0355  3005               	movlw	5
  5702  0356  0201               	subwf	1,w
  5703  0357  1C03               	skipc
  5704  0358  0008               	return
  5705                           
  5706                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5707  0359  087C               	movf	_Sw,w
  5708  035A  3E02               	addlw	2
  5709  035B  0086               	movwf	6
  5710  035C  3001               	movlw	1	; select bank2/3
  5711  035D  0087               	movwf	7
  5712  035E  0181               	clrf	1
  5713                           
  5714                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5715  035F  087C               	movf	_Sw,w
  5716  0360  0086               	movwf	6
  5717  0361  3001               	movlw	1	; select bank2/3
  5718  0362  0087               	movwf	7
  5719  0363  1101               	bcf	1,2
  5720                           
  5721                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5722  0364  087C               	movf	_Sw,w
  5723  0365  3E03               	addlw	3
  5724  0366  0086               	movwf	6
  5725  0367  3001               	movlw	1	; select bank2/3
  5726  0368  0087               	movwf	7
  5727  0369  3000               	movlw	0
  5728  036A  3FC0               	movwi [0]fsr1
  5729  036B  3FC1               	movwi [1]fsr1
  5730                           
  5731                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5732  036C  087C               	movf	_Sw,w
  5733  036D  0086               	movwf	6
  5734  036E  3001               	movlw	1	; select bank2/3
  5735  036F  0087               	movwf	7
  5736  0370  1181               	bcf	1,3
  5737                           
  5738                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5739  0371  087C               	movf	_Sw,w
  5740  0372  3E05               	addlw	5
  5741  0373  0086               	movwf	6
  5742  0374  3001               	movlw	1	; select bank2/3
  5743  0375  0087               	movwf	7
  5744  0376  3000               	movlw	0
  5745  0377  3FC0               	movwi [0]fsr1
  5746  0378  3FC1               	movwi [1]fsr1
  5747                           
  5748                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5749  0379  087C               	movf	_Sw,w
  5750  037A  0086               	movwf	6
  5751  037B  3001               	movlw	1	; select bank2/3
  5752  037C  0087               	movwf	7
  5753  037D  1201               	bcf	1,4
  5754                           
  5755                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5756  037E  087C               	movf	_Sw,w
  5757  037F  3E07               	addlw	7
  5758  0380  0086               	movwf	6
  5759  0381  3001               	movlw	1	; select bank2/3
  5760  0382  0087               	movwf	7
  5761  0383  3000               	movlw	0
  5762  0384  3FC0               	movwi [0]fsr1
  5763  0385  3FC1               	movwi [1]fsr1
  5764                           
  5765                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5766  0386  087C               	movf	_Sw,w
  5767  0387  0086               	movwf	6
  5768  0388  3001               	movlw	1	; select bank2/3
  5769  0389  0087               	movwf	7
  5770  038A  1281               	bcf	1,5
  5771                           
  5772                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5773  038B  0021               	movlb	1	; select bank1
  5774  038C  184F               	btfsc	_SwDetect^(0+128),0
  5775  038D  2B93               	goto	l7696
  5776                           
  5777                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5778  038E  0020               	movlb	0	; select bank0
  5779  038F  0868               	movf	setSw_Main@sw,w
  5780  0390  3188  2002  3182   	fcall	_setDimmerLights_SwOff
  5781  0393                     l7696:	
  5782                           
  5783                           ;Switch_B1.c: 221: }
  5784                           ;Switch_B1.c: 224: setRF_Learn(0);
  5785  0393  3000               	movlw	0
  5786  0394  319C  24CE         	fcall	_setRF_Learn
  5787                           
  5788                           ;Switch_B1.c: 226: }
  5789                           ;Switch_B1.c: 227: }
  5790                           ;Switch_B1.c: 228: }
  5791                           ;Switch_B1.c: 229: } else {
  5792  0396  0008               	return
  5793  0397                     l2389:	
  5794                           
  5795                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5796  0397  0021               	movlb	1	; select bank1
  5797  0398  1C20               	btfss	_myMain^(0+128),0
  5798  0399  0008               	return
  5799                           
  5800                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5801  039A  087C               	movf	_Sw,w
  5802  039B  0086               	movwf	6
  5803  039C  3001               	movlw	1	; select bank2/3
  5804  039D  0087               	movwf	7
  5805  039E  1401               	bsf	1,0
  5806  039F  0008               	return
  5807  03A0                     __end_of_setSw_Main:	
  5808                           
  5809                           	psect	text14
  5810  1CCE                     __ptext14:	
  5811 ;; *************** function _setRF_Learn *****************
  5812 ;; Defined at:
  5813 ;;		line 23 in file "../src/RF_Control_B1.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;  command         1    wreg     unsigned char 
  5816 ;; Auto vars:     Size  Location     Type
  5817 ;;  command         1    1[BANK0 ] unsigned char 
  5818 ;; Return value:  Size  Location     Type
  5819 ;;		None               void
  5820 ;; Registers used:
  5821 ;;		wreg, status,2, status,0
  5822 ;; Tracked objects:
  5823 ;;		On entry : 0/0
  5824 ;;		On exit  : 0/0
  5825 ;;		Unchanged: 0/0
  5826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5828 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5829 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5830 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5831 ;;Total ram usage:        2 bytes
  5832 ;; Hardware stack levels used:    1
  5833 ;; Hardware stack levels required when called:    5
  5834 ;; This function calls:
  5835 ;;		Nothing
  5836 ;; This function is called by:
  5837 ;;		_setSw_Main
  5838 ;; This function uses a non-reentrant model
  5839 ;;
  5840                           
  5841                           
  5842                           ;psect for function _setRF_Learn
  5843  1CCE                     _setRF_Learn:	
  5844                           
  5845                           ;incstack = 0
  5846                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5847                           ;setRF_Learn@command stored from wreg
  5848  1CCE  0020               	movlb	0	; select bank0
  5849  1CCF  00A1               	movwf	setRF_Learn@command
  5850                           
  5851                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5852  1CD0  0821               	movf	setRF_Learn@command,w
  5853  1CD1  3A01               	xorlw	1
  5854  1CD2  3000               	movlw	0
  5855  1CD3  1903               	skipnz
  5856  1CD4  3001               	movlw	1
  5857  1CD5  00A0               	movwf	??_setRF_Learn
  5858  1CD6  0EA0               	swapf	??_setRF_Learn,f
  5859  1CD7  0DA0               	rlf	??_setRF_Learn,f
  5860  1CD8  0DA0               	rlf	??_setRF_Learn,f
  5861  1CD9  0021               	movlb	1	; select bank1
  5862  1CDA  083C               	movf	_RF1^(0+128),w
  5863  1CDB  0020               	movlb	0	; select bank0
  5864  1CDC  0620               	xorwf	??_setRF_Learn,w
  5865  1CDD  39BF               	andlw	-65
  5866  1CDE  0620               	xorwf	??_setRF_Learn,w
  5867  1CDF  0021               	movlb	1	; select bank1
  5868  1CE0  00BC               	movwf	_RF1^(0+128)
  5869  1CE1  0008               	return
  5870  1CE2                     __end_of_setRF_Learn:	
  5871                           
  5872                           	psect	text15
  5873  11B3                     __ptext15:	
  5874 ;; *************** function _setDimmerLights_AdjControl *****************
  5875 ;; Defined at:
  5876 ;;		line 565 in file "../src/Dimmer_B1.c"
  5877 ;; Parameters:    Size  Location     Type
  5878 ;;  sw              1    wreg     unsigned char 
  5879 ;; Auto vars:     Size  Location     Type
  5880 ;;  sw              1    8[BANK0 ] unsigned char 
  5881 ;;  idle            1    6[BANK0 ] unsigned char 
  5882 ;; Return value:  Size  Location     Type
  5883 ;;		None               void
  5884 ;; Registers used:
  5885 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5886 ;; Tracked objects:
  5887 ;;		On entry : 0/0
  5888 ;;		On exit  : 0/0
  5889 ;;		Unchanged: 0/0
  5890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5892 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5893 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5894 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5895 ;;Total ram usage:        4 bytes
  5896 ;; Hardware stack levels used:    1
  5897 ;; Hardware stack levels required when called:    7
  5898 ;; This function calls:
  5899 ;;		_DimmerLightsPointSelect
  5900 ;;		_getAll_DimmerLights_AdjGO
  5901 ;;		_setDimmerLights_TriggerAdj
  5902 ;; This function is called by:
  5903 ;;		_setSw_Main
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           
  5908                           ;psect for function _setDimmerLights_AdjControl
  5909  11B3                     _setDimmerLights_AdjControl:	
  5910                           
  5911                           ;incstack = 0
  5912                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5913                           ;setDimmerLights_AdjControl@sw stored from wreg
  5914  11B3  0020               	movlb	0	; select bank0
  5915  11B4  00A8               	movwf	setDimmerLights_AdjControl@sw
  5916                           
  5917                           ;Dimmer_B1.c: 566: DimmerLightsPointSelect(sw);
  5918  11B5  0828               	movf	setDimmerLights_AdjControl@sw,w
  5919  11B6  319C  2446  3191   	fcall	_DimmerLightsPointSelect
  5920                           
  5921                           ;Dimmer_B1.c: 567: char idle = 0;
  5922  11B9  0020               	movlb	0	; select bank0
  5923  11BA  01A6               	clrf	setDimmerLights_AdjControl@idle
  5924                           
  5925                           ;Dimmer_B1.c: 569: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  5926  11BB  01A7               	clrf	_setDimmerLights_AdjControl$2577
  5927  11BC  319B  23BA  3191   	fcall	_getAll_DimmerLights_AdjGO
  5928  11BF  3A01               	xorlw	1
  5929  11C0  1D03               	skipz
  5930  11C1  29C8               	goto	l6812
  5931  11C2  0022               	movlb	2	; select bank2
  5932  11C3  1CA0               	btfss	_Dimmer^(0+256),1
  5933  11C4  29C8               	goto	l6812
  5934  11C5  0020               	movlb	0	; select bank0
  5935  11C6  01A7               	clrf	_setDimmerLights_AdjControl$2577
  5936  11C7  0AA7               	incf	_setDimmerLights_AdjControl$2577,f
  5937  11C8                     l6812:	
  5938  11C8  0020               	movlb	0	; select bank0
  5939  11C9  0827               	movf	_setDimmerLights_AdjControl$2577,w
  5940  11CA  00A5               	movwf	??_setDimmerLights_AdjControl
  5941  11CB  0825               	movf	??_setDimmerLights_AdjControl,w
  5942  11CC  00A6               	movwf	setDimmerLights_AdjControl@idle
  5943                           
  5944                           ;Dimmer_B1.c: 571: if (idle == 0) {
  5945  11CD  08A6               	movf	setDimmerLights_AdjControl@idle,f
  5946  11CE  1D03               	skipz
  5947  11CF  0008               	return
  5948                           
  5949                           ;Dimmer_B1.c: 572: if (DimmerLights->SwFlag == 1) {
  5950  11D0  0879               	movf	_DimmerLights,w
  5951  11D1  3E09               	addlw	9
  5952  11D2  0086               	movwf	6
  5953  11D3  3001               	movlw	1	; select bank2/3
  5954  11D4  0087               	movwf	7
  5955  11D5  1F01               	btfss	1,6
  5956  11D6  0008               	return
  5957                           
  5958                           ;Dimmer_B1.c: 573: DimmerLights->SwAdj = 1;
  5959  11D7  0879               	movf	_DimmerLights,w
  5960  11D8  3E09               	addlw	9
  5961  11D9  0086               	movwf	6
  5962  11DA  3001               	movlw	1	; select bank2/3
  5963  11DB  0087               	movwf	7
  5964  11DC  1781               	bsf	1,7
  5965                           
  5966                           ;Dimmer_B1.c: 574: DimmerLights->Status = 1;
  5967  11DD  0879               	movf	_DimmerLights,w
  5968  11DE  0086               	movwf	6
  5969  11DF  3001               	movlw	1	; select bank2/3
  5970  11E0  0087               	movwf	7
  5971  11E1  1681               	bsf	1,5
  5972                           
  5973                           ;Dimmer_B1.c: 575: setDimmerLights_TriggerAdj(sw, 1);
  5974  11E2  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5975  11E3  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5976  11E4  0828               	movf	setDimmerLights_AdjControl@sw,w
  5977  11E5  319E  2679         	fcall	_setDimmerLights_TriggerAdj
  5978  11E7  0008               	return
  5979  11E8                     __end_of_setDimmerLights_AdjControl:	
  5980                           
  5981                           	psect	text16
  5982  1E5A                     __ptext16:	
  5983 ;; *************** function _getSw_KeyStatus *****************
  5984 ;; Defined at:
  5985 ;;		line 237 in file "../src/Switch_B1.c"
  5986 ;; Parameters:    Size  Location     Type
  5987 ;;  sw              1    wreg     unsigned char 
  5988 ;; Auto vars:     Size  Location     Type
  5989 ;;  sw              1    4[BANK0 ] unsigned char 
  5990 ;;  status          1    3[BANK0 ] unsigned char 
  5991 ;; Return value:  Size  Location     Type
  5992 ;;                  1    wreg      unsigned char 
  5993 ;; Registers used:
  5994 ;;		wreg, status,2
  5995 ;; Tracked objects:
  5996 ;;		On entry : 0/0
  5997 ;;		On exit  : 0/0
  5998 ;;		Unchanged: 0/0
  5999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6001 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6002 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6003 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6004 ;;Total ram usage:        5 bytes
  6005 ;; Hardware stack levels used:    1
  6006 ;; Hardware stack levels required when called:    5
  6007 ;; This function calls:
  6008 ;;		Nothing
  6009 ;; This function is called by:
  6010 ;;		_setSw_Main
  6011 ;; This function uses a non-reentrant model
  6012 ;;
  6013                           
  6014                           
  6015                           ;psect for function _getSw_KeyStatus
  6016  1E5A                     _getSw_KeyStatus:	
  6017                           
  6018                           ;incstack = 0
  6019                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6020                           ;getSw_KeyStatus@sw stored from wreg
  6021  1E5A  0020               	movlb	0	; select bank0
  6022  1E5B  00A4               	movwf	getSw_KeyStatus@sw
  6023                           
  6024                           ;Switch_B1.c: 238: char status = 0;
  6025  1E5C  01A3               	clrf	getSw_KeyStatus@status
  6026                           
  6027                           ;Switch_B1.c: 250: if (sw == 1) {
  6028  1E5D  0824               	movf	getSw_KeyStatus@sw,w
  6029  1E5E  3A01               	xorlw	1
  6030  1E5F  1D03               	skipz
  6031  1E60  2E69               	goto	l7022
  6032                           
  6033                           ;Switch_B1.c: 251: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6034  1E61  01A1               	clrf	_getSw_KeyStatus$6326
  6035  1E62  0AA1               	incf	_getSw_KeyStatus$6326,f
  6036  1E63  1F0C               	btfss	12,6	;volatile
  6037  1E64  1A0C               	btfsc	12,4	;volatile
  6038  1E65  2E67               	goto	l7020
  6039  1E66  01A1               	clrf	_getSw_KeyStatus$6326
  6040  1E67                     l7020:	
  6041  1E67  0821               	movf	_getSw_KeyStatus$6326,w
  6042  1E68  2E74               	goto	L3
  6043  1E69                     l7022:	
  6044                           ;Switch_B1.c: 252: } else if (sw == 2) {
  6045                           
  6046  1E69  0824               	movf	getSw_KeyStatus@sw,w
  6047  1E6A  3A02               	xorlw	2
  6048  1E6B  1D03               	skipz
  6049  1E6C  2E77               	goto	l7032
  6050                           
  6051                           ;Switch_B1.c: 253: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6052  1E6D  01A2               	clrf	_getSw_KeyStatus$6327
  6053  1E6E  0AA2               	incf	_getSw_KeyStatus$6327,f
  6054  1E6F  1C0C               	btfss	12,0	;volatile
  6055  1E70  188D               	btfsc	13,1	;volatile
  6056  1E71  2E73               	goto	l7030
  6057  1E72  01A2               	clrf	_getSw_KeyStatus$6327
  6058  1E73                     l7030:	
  6059  1E73  0822               	movf	_getSw_KeyStatus$6327,w
  6060  1E74                     L3:	
  6061  1E74  00A0               	movwf	??_getSw_KeyStatus
  6062  1E75  0820               	movf	??_getSw_KeyStatus,w
  6063  1E76  00A3               	movwf	getSw_KeyStatus@status
  6064  1E77                     l7032:	
  6065                           
  6066                           ;Switch_B1.c: 254: }
  6067                           ;Switch_B1.c: 261: return status;
  6068  1E77  0823               	movf	getSw_KeyStatus@status,w
  6069  1E78  0008               	return
  6070  1E79                     __end_of_getSw_KeyStatus:	
  6071                           
  6072                           	psect	text17
  6073  1CBA                     __ptext17:	
  6074 ;; *************** function _SwPointSelect *****************
  6075 ;; Defined at:
  6076 ;;		line 25 in file "../src/Switch_B1.c"
  6077 ;; Parameters:    Size  Location     Type
  6078 ;;  sw              1    wreg     unsigned char 
  6079 ;; Auto vars:     Size  Location     Type
  6080 ;;  sw              1    1[BANK0 ] unsigned char 
  6081 ;; Return value:  Size  Location     Type
  6082 ;;		None               void
  6083 ;; Registers used:
  6084 ;;		wreg
  6085 ;; Tracked objects:
  6086 ;;		On entry : 0/0
  6087 ;;		On exit  : 0/0
  6088 ;;		Unchanged: 0/0
  6089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6091 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6092 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6093 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6094 ;;Total ram usage:        2 bytes
  6095 ;; Hardware stack levels used:    1
  6096 ;; Hardware stack levels required when called:    5
  6097 ;; This function calls:
  6098 ;;		Nothing
  6099 ;; This function is called by:
  6100 ;;		_setSw_Main
  6101 ;; This function uses a non-reentrant model
  6102 ;;
  6103                           
  6104                           
  6105                           ;psect for function _SwPointSelect
  6106  1CBA                     _SwPointSelect:	
  6107                           
  6108                           ;incstack = 0
  6109                           ; Regs used in _SwPointSelect: [wreg]
  6110                           ;SwPointSelect@sw stored from wreg
  6111  1CBA  0020               	movlb	0	; select bank0
  6112  1CBB  00A1               	movwf	SwPointSelect@sw
  6113                           
  6114                           ;Switch_B1.c: 28: if (sw == 1) {
  6115  1CBC  0821               	movf	SwPointSelect@sw,w
  6116  1CBD  3A01               	xorlw	1
  6117  1CBE  1D03               	skipz
  6118  1CBF  2CC5               	goto	l7006
  6119                           
  6120                           ;Switch_B1.c: 29: Sw = &Sw1;
  6121  1CC0  3057               	movlw	_Sw1& (0+255)
  6122  1CC1  00A0               	movwf	??_SwPointSelect
  6123  1CC2  0820               	movf	??_SwPointSelect,w
  6124  1CC3  00FC               	movwf	_Sw
  6125                           
  6126                           ;Switch_B1.c: 30: }
  6127  1CC4  0008               	return
  6128  1CC5                     l7006:	
  6129                           
  6130                           ;Switch_B1.c: 33: else if (sw == 2) {
  6131  1CC5  0821               	movf	SwPointSelect@sw,w
  6132  1CC6  3A02               	xorlw	2
  6133  1CC7  1D03               	skipz
  6134  1CC8  0008               	return
  6135                           
  6136                           ;Switch_B1.c: 34: Sw = &Sw2;
  6137  1CC9  30DC               	movlw	_Sw2& (0+255)
  6138  1CCA  00A0               	movwf	??_SwPointSelect
  6139  1CCB  0820               	movf	??_SwPointSelect,w
  6140  1CCC  00FC               	movwf	_Sw
  6141  1CCD  0008               	return
  6142  1CCE                     __end_of_SwPointSelect:	
  6143                           
  6144                           	psect	text18
  6145  0923                     __ptext18:	
  6146 ;; *************** function _setMain_Exception *****************
  6147 ;; Defined at:
  6148 ;;		line 276 in file "../src/main_B1.c"
  6149 ;; Parameters:    Size  Location     Type
  6150 ;;  command         1    wreg     unsigned char 
  6151 ;; Auto vars:     Size  Location     Type
  6152 ;;  command         1    4[BANK1 ] unsigned char 
  6153 ;;  status          1    3[BANK1 ] unsigned char 
  6154 ;;  buz             1    0[BANK1 ] unsigned char 
  6155 ;; Return value:  Size  Location     Type
  6156 ;;		None               void
  6157 ;; Registers used:
  6158 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6159 ;; Tracked objects:
  6160 ;;		On entry : 0/0
  6161 ;;		On exit  : 0/0
  6162 ;;		Unchanged: 0/0
  6163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6165 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6166 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6167 ;;      Totals:         0       2       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6168 ;;Total ram usage:        7 bytes
  6169 ;; Hardware stack levels used:    1
  6170 ;; Hardware stack levels required when called:   11
  6171 ;; This function calls:
  6172 ;;		_getDimmerLights_Line
  6173 ;;		_getMain_LightsStatus
  6174 ;;		_setBuz
  6175 ;;		_setDimmerLights_ErrorClose
  6176 ;;		_setLED
  6177 ;; This function is called by:
  6178 ;;		_Switch_Main
  6179 ;; This function uses a non-reentrant model
  6180 ;;
  6181                           
  6182                           
  6183                           ;psect for function _setMain_Exception
  6184  0923                     _setMain_Exception:	
  6185                           
  6186                           ;incstack = 0
  6187                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6188                           ;setMain_Exception@command stored from wreg
  6189  0923  0021               	movlb	1	; select bank1
  6190  0924  00EA               	movwf	setMain_Exception@command^(0+128)
  6191                           
  6192                           ;main_B1.c: 277: char status = 0, buz = 0;
  6193  0925  01E9               	clrf	setMain_Exception@status^(0+128)
  6194  0926  01E6               	clrf	setMain_Exception@buz^(0+128)
  6195                           
  6196                           ;main_B1.c: 292: status = command == 3 ? getDimmerLights_Line() : 255;
  6197  0927  086A               	movf	setMain_Exception@command^(0+128),w
  6198  0928  3A03               	xorlw	3
  6199  0929  1903               	skipnz
  6200  092A  2930               	goto	l7582
  6201  092B  30FF               	movlw	255
  6202  092C  00E7               	movwf	_setMain_Exception$7062^(0+128)
  6203  092D  3000               	movlw	0
  6204  092E  00E8               	movwf	(_setMain_Exception$7062^(0+128)+1)
  6205  092F  293D               	goto	l7584
  6206  0930                     l7582:	
  6207  0930  319C  247F  3189   	fcall	_getDimmerLights_Line
  6208  0933  0020               	movlb	0	; select bank0
  6209  0934  00EB               	movwf	??_setMain_Exception
  6210  0935  01EC               	clrf	??_setMain_Exception+1
  6211  0936  086B               	movf	??_setMain_Exception,w
  6212  0937  0021               	movlb	1	; select bank1
  6213  0938  00E7               	movwf	_setMain_Exception$7062^(0+128)
  6214  0939  0020               	movlb	0	; select bank0
  6215  093A  086C               	movf	??_setMain_Exception+1,w
  6216  093B  0021               	movlb	1	; select bank1
  6217  093C  00E8               	movwf	(_setMain_Exception$7062+1)^(0+128)
  6218  093D                     l7584:	
  6219  093D  0867               	movf	_setMain_Exception$7062^(0+128),w
  6220  093E  0020               	movlb	0	; select bank0
  6221  093F  00EB               	movwf	??_setMain_Exception
  6222  0940  086B               	movf	??_setMain_Exception,w
  6223  0941  0021               	movlb	1	; select bank1
  6224  0942  00E9               	movwf	setMain_Exception@status^(0+128)
  6225                           
  6226                           ;main_B1.c: 294: if (command == 0) {
  6227  0943  08EA               	movf	setMain_Exception@command^(0+128),f
  6228  0944  1D03               	skipz
  6229  0945  2948               	goto	l7590
  6230                           
  6231                           ;main_B1.c: 295: setLED(99, 10);
  6232  0946  300A               	movlw	10
  6233  0947  2949               	goto	L4
  6234  0948                     l7590:	
  6235                           ;main_B1.c: 296: } else {
  6236                           
  6237                           
  6238                           ;main_B1.c: 297: setLED(99, 11);
  6239  0948  300B               	movlw	11
  6240  0949                     L4:	
  6241  0949  0020               	movlb	0	; select bank0
  6242  094A  00EB               	movwf	??_setMain_Exception
  6243  094B  086B               	movf	??_setMain_Exception,w
  6244  094C  00A2               	movwf	setLED@command
  6245  094D  3063               	movlw	99
  6246  094E  3194  24F6  3189   	fcall	_setLED
  6247                           
  6248                           ;main_B1.c: 298: }
  6249                           ;main_B1.c: 300: if (command != 0) {
  6250  0951  0021               	movlb	1	; select bank1
  6251  0952  086A               	movf	setMain_Exception@command^(0+128),w
  6252  0953  1903               	btfsc	3,2
  6253  0954  0008               	return
  6254                           
  6255                           ;main_B1.c: 301: switch (command) {
  6256  0955  2976               	goto	l7606
  6257  0956                     l7596:	
  6258                           ;main_B1.c: 302: case 2:
  6259                           
  6260                           
  6261                           ;main_B1.c: 303: if (getMain_LightsStatus() == 1) {
  6262  0956  3190  20BC  3189   	fcall	_getMain_LightsStatus
  6263  0959  3A01               	xorlw	1
  6264  095A  1D03               	skipz
  6265  095B  297F               	goto	l7608
  6266                           
  6267                           ;main_B1.c: 304: setBuz(10, 300);
  6268  095C  302C               	movlw	44
  6269  095D  0020               	movlb	0	; select bank0
  6270  095E  00A9               	movwf	setBuz@time
  6271  095F  3001               	movlw	1
  6272  0960  00AA               	movwf	setBuz@time+1
  6273  0961  300A               	movlw	10
  6274  0962  3196  26F2  3189   	fcall	_setBuz
  6275                           
  6276                           ;main_B1.c: 305: }
  6277                           ;main_B1.c: 306: break;
  6278  0965  297F               	goto	l7608
  6279  0966                     l7600:	
  6280                           ;main_B1.c: 307: case 3:
  6281                           
  6282                           
  6283                           ;main_B1.c: 308: if (getMain_LightsStatus() == 1) {
  6284  0966  3190  20BC  3189   	fcall	_getMain_LightsStatus
  6285  0969  3A01               	xorlw	1
  6286  096A  1D03               	skipz
  6287  096B  297F               	goto	l7608
  6288                           
  6289                           ;main_B1.c: 309: setBuz(5, 300);
  6290  096C  302C               	movlw	44
  6291  096D  0020               	movlb	0	; select bank0
  6292  096E  00A9               	movwf	setBuz@time
  6293  096F  3001               	movlw	1
  6294  0970  00AA               	movwf	setBuz@time+1
  6295  0971  3005               	movlw	5
  6296  0972  3196  26F2  3189   	fcall	_setBuz
  6297                           
  6298                           ;main_B1.c: 312: }
  6299                           
  6300                           ;main_B1.c: 310: }
  6301                           ;main_B1.c: 311: break;
  6302  0975  297F               	goto	l7608
  6303  0976                     l7606:	
  6304  0976  0021               	movlb	1	; select bank1
  6305  0977  086A               	movf	setMain_Exception@command^(0+128),w
  6306                           
  6307                           ; Switch size 1, requested type "space"
  6308                           ; Number of cases is 2, Range of values is 2 to 3
  6309                           ; switch strategies available:
  6310                           ; Name         Instructions Cycles
  6311                           ; simple_byte            7     4 (average)
  6312                           ; direct_byte           13     9 (fixed)
  6313                           ; jumptable            263     9 (fixed)
  6314                           ;	Chosen strategy is simple_byte
  6315  0978  3A02               	xorlw	2	; case 2
  6316  0979  1903               	skipnz
  6317  097A  2956               	goto	l7596
  6318  097B  3A01               	xorlw	1	; case 3
  6319  097C  1903               	skipnz
  6320  097D  2966               	goto	l7600
  6321  097E  297F               	goto	l7608
  6322  097F                     l7608:	
  6323                           
  6324                           ;main_B1.c: 313: setDimmerLights_ErrorClose(status);
  6325  097F  0021               	movlb	1	; select bank1
  6326  0980  0869               	movf	setMain_Exception@status^(0+128),w
  6327  0981  3197  274B         	fcall	_setDimmerLights_ErrorClose
  6328  0983  0021               	movlb	1	; select bank1
  6329  0984  0008               	return
  6330  0985                     __end_of_setMain_Exception:	
  6331                           
  6332                           	psect	text19
  6333  174B                     __ptext19:	
  6334 ;; *************** function _setDimmerLights_ErrorClose *****************
  6335 ;; Defined at:
  6336 ;;		line 581 in file "../src/Dimmer_B1.c"
  6337 ;; Parameters:    Size  Location     Type
  6338 ;;  lights          1    wreg     unsigned char 
  6339 ;; Auto vars:     Size  Location     Type
  6340 ;;  lights          1   72[BANK0 ] unsigned char 
  6341 ;;  i               2   73[BANK0 ] int 
  6342 ;;  count           1   71[BANK0 ] unsigned char 
  6343 ;; Return value:  Size  Location     Type
  6344 ;;		None               void
  6345 ;; Registers used:
  6346 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6347 ;; Tracked objects:
  6348 ;;		On entry : 0/0
  6349 ;;		On exit  : 0/0
  6350 ;;		Unchanged: 0/0
  6351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6353 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6354 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6355 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6356 ;;Total ram usage:        5 bytes
  6357 ;; Hardware stack levels used:    1
  6358 ;; Hardware stack levels required when called:   10
  6359 ;; This function calls:
  6360 ;;		_DimmerLightsPointSelect
  6361 ;;		_getDimmerLights_Status
  6362 ;;		_setDimmerLights_SwOff
  6363 ;; This function is called by:
  6364 ;;		_setMain_Exception
  6365 ;; This function uses a non-reentrant model
  6366 ;;
  6367                           
  6368                           
  6369                           ;psect for function _setDimmerLights_ErrorClose
  6370  174B                     _setDimmerLights_ErrorClose:	
  6371                           
  6372                           ;incstack = 0
  6373                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6374                           ;setDimmerLights_ErrorClose@lights stored from wreg
  6375  174B  0020               	movlb	0	; select bank0
  6376  174C  00E8               	movwf	setDimmerLights_ErrorClose@lights
  6377                           
  6378                           ;Dimmer_B1.c: 582: if (lights == 255) {
  6379  174D  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6380  174E  3AFF               	xorlw	255
  6381  174F  1D03               	skipz
  6382  1750  2F88               	goto	l6840
  6383                           
  6384                           ;Dimmer_B1.c: 587: char count = 2;
  6385  1751  3002               	movlw	2
  6386  1752  00E6               	movwf	??_setDimmerLights_ErrorClose
  6387  1753  0866               	movf	??_setDimmerLights_ErrorClose,w
  6388  1754  00E7               	movwf	setDimmerLights_ErrorClose@count
  6389                           
  6390                           ;Dimmer_B1.c: 592: for (int i = 0; i < count; i++) {
  6391  1755  01E9               	clrf	setDimmerLights_ErrorClose@i
  6392  1756  01EA               	clrf	setDimmerLights_ErrorClose@i+1
  6393  1757                     l6838:	
  6394  1757  086A               	movf	setDimmerLights_ErrorClose@i+1,w
  6395  1758  3A80               	xorlw	128
  6396  1759  00E6               	movwf	??_setDimmerLights_ErrorClose
  6397  175A  3080               	movlw	128
  6398  175B  0266               	subwf	??_setDimmerLights_ErrorClose,w
  6399  175C  1D03               	skipz
  6400  175D  2F60               	goto	u6045
  6401  175E  0867               	movf	setDimmerLights_ErrorClose@count,w
  6402  175F  0269               	subwf	setDimmerLights_ErrorClose@i,w
  6403  1760                     u6045:	
  6404  1760  1803               	btfsc	3,0
  6405  1761  0008               	return
  6406                           
  6407                           ;Dimmer_B1.c: 593: DimmerLightsPointSelect(i + 1);
  6408  1762  0020               	movlb	0	; select bank0
  6409  1763  0869               	movf	setDimmerLights_ErrorClose@i,w
  6410  1764  3E01               	addlw	1
  6411  1765  319C  2446  3197   	fcall	_DimmerLightsPointSelect
  6412                           
  6413                           ;Dimmer_B1.c: 594: if (getDimmerLights_Status(i + 1) == 1) {
  6414  1768  0020               	movlb	0	; select bank0
  6415  1769  0869               	movf	setDimmerLights_ErrorClose@i,w
  6416  176A  3E01               	addlw	1
  6417  176B  319B  23AA  3197   	fcall	_getDimmerLights_Status
  6418  176E  3A01               	xorlw	1
  6419  176F  1D03               	skipz
  6420  1770  2F82               	goto	l6836
  6421                           
  6422                           ;Dimmer_B1.c: 595: DimmerLights->SwFlag = 1;
  6423  1771  0879               	movf	_DimmerLights,w
  6424  1772  3E09               	addlw	9
  6425  1773  0086               	movwf	6
  6426  1774  3001               	movlw	1	; select bank2/3
  6427  1775  0087               	movwf	7
  6428  1776  1701               	bsf	1,6
  6429                           
  6430                           ;Dimmer_B1.c: 596: DimmerLights->Status = 0;
  6431  1777  0879               	movf	_DimmerLights,w
  6432  1778  0086               	movwf	6
  6433  1779  3001               	movlw	1	; select bank2/3
  6434  177A  0087               	movwf	7
  6435  177B  1281               	bcf	1,5
  6436                           
  6437                           ;Dimmer_B1.c: 597: setDimmerLights_SwOff(i + 1);
  6438  177C  0020               	movlb	0	; select bank0
  6439  177D  0869               	movf	setDimmerLights_ErrorClose@i,w
  6440  177E  3E01               	addlw	1
  6441  177F  3188  2002  3197   	fcall	_setDimmerLights_SwOff
  6442  1782                     l6836:	
  6443  1782  3001               	movlw	1
  6444  1783  0020               	movlb	0	; select bank0
  6445  1784  07E9               	addwf	setDimmerLights_ErrorClose@i,f
  6446  1785  3000               	movlw	0
  6447  1786  3DEA               	addwfc	setDimmerLights_ErrorClose@i+1,f
  6448  1787  2F57               	goto	l6838
  6449  1788                     l6840:	
  6450                           ;Dimmer_B1.c: 598: }
  6451                           ;Dimmer_B1.c: 599: }
  6452                           ;Dimmer_B1.c: 600: } else {
  6453                           
  6454                           
  6455                           ;Dimmer_B1.c: 601: DimmerLightsPointSelect(lights);
  6456  1788  0020               	movlb	0	; select bank0
  6457  1789  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6458  178A  319C  2446  3197   	fcall	_DimmerLightsPointSelect
  6459                           
  6460                           ;Dimmer_B1.c: 602: if (getDimmerLights_Status(lights) == 1) {
  6461  178D  0020               	movlb	0	; select bank0
  6462  178E  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6463  178F  319B  23AA  3197   	fcall	_getDimmerLights_Status
  6464  1792  3A01               	xorlw	1
  6465  1793  1D03               	skipz
  6466  1794  0008               	return
  6467                           
  6468                           ;Dimmer_B1.c: 603: DimmerLights->SwFlag = 1;
  6469  1795  0879               	movf	_DimmerLights,w
  6470  1796  3E09               	addlw	9
  6471  1797  0086               	movwf	6
  6472  1798  3001               	movlw	1	; select bank2/3
  6473  1799  0087               	movwf	7
  6474  179A  1701               	bsf	1,6
  6475                           
  6476                           ;Dimmer_B1.c: 604: DimmerLights->Status = 0;
  6477  179B  0879               	movf	_DimmerLights,w
  6478  179C  0086               	movwf	6
  6479  179D  3001               	movlw	1	; select bank2/3
  6480  179E  0087               	movwf	7
  6481  179F  1281               	bcf	1,5
  6482                           
  6483                           ;Dimmer_B1.c: 605: setDimmerLights_SwOff(lights);
  6484  17A0  0020               	movlb	0	; select bank0
  6485  17A1  0868               	movf	setDimmerLights_ErrorClose@lights,w
  6486  17A2  3188  2002         	fcall	_setDimmerLights_SwOff
  6487  17A4  0008               	return
  6488  17A5                     __end_of_setDimmerLights_ErrorClose:	
  6489                           
  6490                           	psect	text20
  6491  1C7F                     __ptext20:	
  6492 ;; *************** function _getDimmerLights_Line *****************
  6493 ;; Defined at:
  6494 ;;		line 730 in file "../src/Dimmer_B1.c"
  6495 ;; Parameters:    Size  Location     Type
  6496 ;;		None
  6497 ;; Auto vars:     Size  Location     Type
  6498 ;;  line            1    1[BANK0 ] unsigned char 
  6499 ;; Return value:  Size  Location     Type
  6500 ;;                  1    wreg      unsigned char 
  6501 ;; Registers used:
  6502 ;;		wreg, status,2
  6503 ;; Tracked objects:
  6504 ;;		On entry : 0/0
  6505 ;;		On exit  : 0/0
  6506 ;;		Unchanged: 0/0
  6507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6509 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6510 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6511 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6512 ;;Total ram usage:        2 bytes
  6513 ;; Hardware stack levels used:    1
  6514 ;; Hardware stack levels required when called:    5
  6515 ;; This function calls:
  6516 ;;		Nothing
  6517 ;; This function is called by:
  6518 ;;		_setMain_Exception
  6519 ;; This function uses a non-reentrant model
  6520 ;;
  6521                           
  6522                           
  6523                           ;psect for function _getDimmerLights_Line
  6524  1C7F                     _getDimmerLights_Line:	
  6525                           
  6526                           ;Dimmer_B1.c: 731: char line = 0;
  6527                           
  6528                           ;incstack = 0
  6529                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6530  1C7F  0020               	movlb	0	; select bank0
  6531  1C80  01A1               	clrf	getDimmerLights_Line@line
  6532                           
  6533                           ;Dimmer_B1.c: 733: if (DimmerLights1.Line == 1) {
  6534  1C81  0023               	movlb	3	; select bank3
  6535  1C82  1C47               	btfss	(_DimmerLights1^(0+384)+9),0
  6536  1C83  2C88               	goto	l864
  6537                           
  6538                           ;Dimmer_B1.c: 734: line = 1;
  6539  1C84  0020               	movlb	0	; select bank0
  6540  1C85  01A1               	clrf	getDimmerLights_Line@line
  6541  1C86  0AA1               	incf	getDimmerLights_Line@line,f
  6542                           
  6543                           ;Dimmer_B1.c: 735: }
  6544  1C87  2C8F               	goto	l865
  6545  1C88                     l864:	
  6546                           
  6547                           ;Dimmer_B1.c: 738: else if (DimmerLights2.Line == 1) {
  6548  1C88  1C56               	btfss	(_DimmerLights2^(0+384)+9),0
  6549  1C89  2C8F               	goto	l865
  6550                           
  6551                           ;Dimmer_B1.c: 739: line = 2;
  6552  1C8A  3002               	movlw	2
  6553  1C8B  0020               	movlb	0	; select bank0
  6554  1C8C  00A0               	movwf	??_getDimmerLights_Line
  6555  1C8D  0820               	movf	??_getDimmerLights_Line,w
  6556  1C8E  00A1               	movwf	getDimmerLights_Line@line
  6557  1C8F                     l865:	
  6558                           
  6559                           ;Dimmer_B1.c: 740: }
  6560                           ;Dimmer_B1.c: 747: return line;
  6561  1C8F  0020               	movlb	0	; select bank0
  6562  1C90  0821               	movf	getDimmerLights_Line@line,w
  6563  1C91  0008               	return
  6564  1C92                     __end_of_getDimmerLights_Line:	
  6565                           
  6566                           	psect	text21
  6567  1B71                     __ptext21:	
  6568 ;; *************** function _Switch_Initialization *****************
  6569 ;; Defined at:
  6570 ;;		line 46 in file "../src/Switch_B1.c"
  6571 ;; Parameters:    Size  Location     Type
  6572 ;;		None
  6573 ;; Auto vars:     Size  Location     Type
  6574 ;;		None
  6575 ;; Return value:  Size  Location     Type
  6576 ;;		None               void
  6577 ;; Registers used:
  6578 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6579 ;; Tracked objects:
  6580 ;;		On entry : 0/0
  6581 ;;		On exit  : 0/0
  6582 ;;		Unchanged: 0/0
  6583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6588 ;;Total ram usage:        0 bytes
  6589 ;; Hardware stack levels used:    1
  6590 ;; Hardware stack levels required when called:    8
  6591 ;; This function calls:
  6592 ;;		_TouchPower
  6593 ;;		_setSw_Initialization
  6594 ;; This function is called by:
  6595 ;;		_main
  6596 ;; This function uses a non-reentrant model
  6597 ;;
  6598                           
  6599                           
  6600                           ;psect for function _Switch_Initialization
  6601  1B71                     _Switch_Initialization:	
  6602                           
  6603                           ;Switch_B1.c: 47: TouchPower();
  6604                           
  6605                           ;incstack = 0
  6606                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6607  1B71  319D  2521  319B   	fcall	_TouchPower
  6608                           
  6609                           ;Switch_B1.c: 49: WPUB1 = 0;
  6610  1B74  0024               	movlb	4	; select bank4
  6611  1B75  108D               	bcf	13,1	;volatile
  6612                           
  6613                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6614  1B76  3001               	movlw	1
  6615  1B77  319A  22EA  319B   	fcall	_setSw_Initialization
  6616                           
  6617                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6618  1B7A  3002               	movlw	2
  6619  1B7B  319A  22EA         	fcall	_setSw_Initialization
  6620  1B7D  0008               	return
  6621  1B7E                     __end_of_Switch_Initialization:	
  6622                           
  6623                           	psect	text22
  6624  1AEA                     __ptext22:	
  6625 ;; *************** function _setSw_Initialization *****************
  6626 ;; Defined at:
  6627 ;;		line 109 in file "../src/Switch_B1.c"
  6628 ;; Parameters:    Size  Location     Type
  6629 ;;  sw              1    wreg     unsigned char 
  6630 ;; Auto vars:     Size  Location     Type
  6631 ;;  sw              1    4[BANK0 ] unsigned char 
  6632 ;; Return value:  Size  Location     Type
  6633 ;;		None               void
  6634 ;; Registers used:
  6635 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6636 ;; Tracked objects:
  6637 ;;		On entry : 0/0
  6638 ;;		On exit  : 0/0
  6639 ;;		Unchanged: 0/0
  6640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6642 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6644 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6645 ;;Total ram usage:        1 bytes
  6646 ;; Hardware stack levels used:    1
  6647 ;; Hardware stack levels required when called:    7
  6648 ;; This function calls:
  6649 ;;		_setLED
  6650 ;; This function is called by:
  6651 ;;		_Switch_Initialization
  6652 ;; This function uses a non-reentrant model
  6653 ;;
  6654                           
  6655                           
  6656                           ;psect for function _setSw_Initialization
  6657  1AEA                     _setSw_Initialization:	
  6658                           
  6659                           ;incstack = 0
  6660                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6661                           ;setSw_Initialization@sw stored from wreg
  6662  1AEA  0020               	movlb	0	; select bank0
  6663  1AEB  00A4               	movwf	setSw_Initialization@sw
  6664                           
  6665                           ;Switch_B1.c: 110: setLED(sw, 1);
  6666  1AEC  01A2               	clrf	setLED@command
  6667  1AED  0AA2               	incf	setLED@command,f
  6668  1AEE  0824               	movf	setSw_Initialization@sw,w
  6669  1AEF  3194  24F6         	fcall	_setLED
  6670  1AF1  0008               	return
  6671  1AF2                     __end_of_setSw_Initialization:	
  6672                           
  6673                           	psect	text23
  6674  1D21                     __ptext23:	
  6675 ;; *************** function _TouchPower *****************
  6676 ;; Defined at:
  6677 ;;		line 10 in file "../src/Switch_B1.c"
  6678 ;; Parameters:    Size  Location     Type
  6679 ;;		None
  6680 ;; Auto vars:     Size  Location     Type
  6681 ;;		None
  6682 ;; Return value:  Size  Location     Type
  6683 ;;		None               void
  6684 ;; Registers used:
  6685 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6686 ;; Tracked objects:
  6687 ;;		On entry : 0/0
  6688 ;;		On exit  : 0/0
  6689 ;;		Unchanged: 0/0
  6690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6695 ;;Total ram usage:        0 bytes
  6696 ;; Hardware stack levels used:    1
  6697 ;; Hardware stack levels required when called:    6
  6698 ;; This function calls:
  6699 ;;		_Timeout_Counter
  6700 ;;		_set_TimeoutCleared
  6701 ;; This function is called by:
  6702 ;;		_Switch_Initialization
  6703 ;;		_Switch_Main
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           
  6708                           ;psect for function _TouchPower
  6709  1D21                     _TouchPower:	
  6710                           
  6711                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6712                           
  6713                           ;incstack = 0
  6714                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6715  1D21  0020               	movlb	0	; select bank0
  6716  1D22  1A8E               	btfsc	14,5	;volatile
  6717  1D23  0008               	return
  6718                           
  6719                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6720  1D24  0021               	movlb	1	; select bank1
  6721  1D25  1C20               	btfss	_myMain^(0+128),0
  6722  1D26  0008               	return
  6723  1D27  2D2D               	goto	l7568
  6724  1D28                     l2363:	
  6725                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6726                           
  6727                           
  6728                           ;Switch_B1.c: 14: RC5 = 1;
  6729  1D28  0020               	movlb	0	; select bank0
  6730  1D29  168E               	bsf	14,5	;volatile
  6731                           
  6732                           ;Switch_B1.c: 15: Timeout_Counter();
  6733  1D2A  319C  24E2  319D   	fcall	_Timeout_Counter
  6734  1D2D                     l7568:	
  6735  1D2D  0020               	movlb	0	; select bank0
  6736  1D2E  1A8E               	btfsc	14,5	;volatile
  6737  1D2F  2D33               	goto	l7572
  6738  1D30  0021               	movlb	1	; select bank1
  6739  1D31  1D2D               	btfss	(_myMain^(0+128)+13),2
  6740  1D32  2D28               	goto	l2363
  6741  1D33                     l7572:	
  6742                           
  6743                           ;Switch_B1.c: 16: }
  6744                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6745  1D33  319A  22A5         	fcall	_set_TimeoutCleared
  6746  1D35  0008               	return
  6747  1D36                     __end_of_TouchPower:	
  6748                           
  6749                           	psect	text24
  6750  1A8C                     __ptext24:	
  6751 ;; *************** function _RF_Main *****************
  6752 ;; Defined at:
  6753 ;;		line 16 in file "../src/RF_Control_B1.c"
  6754 ;; Parameters:    Size  Location     Type
  6755 ;;		None
  6756 ;; Auto vars:     Size  Location     Type
  6757 ;;		None
  6758 ;; Return value:  Size  Location     Type
  6759 ;;		None               void
  6760 ;; Registers used:
  6761 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6762 ;; Tracked objects:
  6763 ;;		On entry : 0/0
  6764 ;;		On exit  : 0/0
  6765 ;;		Unchanged: 0/0
  6766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6771 ;;Total ram usage:        0 bytes
  6772 ;; Hardware stack levels used:    1
  6773 ;; Hardware stack levels required when called:   14
  6774 ;; This function calls:
  6775 ;;		_setRF_Main
  6776 ;; This function is called by:
  6777 ;;		_main
  6778 ;; This function uses a non-reentrant model
  6779 ;;
  6780                           
  6781                           
  6782                           ;psect for function _RF_Main
  6783  1A8C                     _RF_Main:	
  6784                           
  6785                           ;RF_Control_B1.c: 18: setRF_Main();
  6786                           
  6787                           ;incstack = 0
  6788                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6789  1A8C  3185  25D2         	fcall	_setRF_Main
  6790  1A8E  0008               	return
  6791  1A8F                     __end_of_RF_Main:	
  6792                           
  6793                           	psect	text25
  6794  05D2                     __ptext25:	
  6795 ;; *************** function _setRF_Main *****************
  6796 ;; Defined at:
  6797 ;;		line 52 in file "../src/RF_Control_B1.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;		None
  6800 ;; Auto vars:     Size  Location     Type
  6801 ;;  error           1   78[BANK0 ] unsigned char 
  6802 ;;  Receive_OK      1   77[BANK0 ] unsigned char 
  6803 ;;  loop_f          1   76[BANK0 ] unsigned char 
  6804 ;; Return value:  Size  Location     Type
  6805 ;;		None               void
  6806 ;; Registers used:
  6807 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6808 ;; Tracked objects:
  6809 ;;		On entry : 0/0
  6810 ;;		On exit  : 0/0
  6811 ;;		Unchanged: 0/0
  6812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6814 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6815 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6816 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6817 ;;Total ram usage:        4 bytes
  6818 ;; Hardware stack levels used:    1
  6819 ;; Hardware stack levels required when called:   13
  6820 ;; This function calls:
  6821 ;;		_CC2500_ReadStatus
  6822 ;;		_CC2500_RxData
  6823 ;;		_CC2500_TxData
  6824 ;;		_CC2500_WriteCommand
  6825 ;;		_getBuz_GO
  6826 ;;		_getMain_All_Error_Status
  6827 ;;		_getRF_KeyStatus
  6828 ;;		_getRxData
  6829 ;; This function is called by:
  6830 ;;		_RF_Main
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834                           
  6835                           ;psect for function _setRF_Main
  6836  05D2                     _setRF_Main:	
  6837                           
  6838                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6839                           
  6840                           ;incstack = 0
  6841                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6842  05D2  0020               	movlb	0	; select bank0
  6843  05D3  01EC               	clrf	setRF_Main@loop_f
  6844  05D4  01ED               	clrf	setRF_Main@Receive_OK
  6845  05D5  01EE               	clrf	setRF_Main@error
  6846                           
  6847                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6848  05D6  0021               	movlb	1	; select bank1
  6849  05D7  1C3C               	btfss	_RF1^(0+128),0
  6850  05D8  2EBF               	goto	l1964
  6851                           
  6852                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6853  05D9  319B  23DC  3185   	fcall	_getBuz_GO
  6854  05DC  0020               	movlb	0	; select bank0
  6855  05DD  0821               	movf	?_getBuz_GO+1,w
  6856  05DE  0420               	iorwf	?_getBuz_GO,w
  6857  05DF  1D03               	skipz
  6858  05E0  0008               	return
  6859                           
  6860                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6861  05E1  3000               	movlw	0
  6862  05E2  3191  2117  3185   	fcall	_getMain_All_Error_Status
  6863  05E5  3800               	iorlw	0
  6864  05E6  1D03               	skipz
  6865  05E7  2DFC               	goto	l1966
  6866                           
  6867                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6868  05E8  319B  23ED  3185   	fcall	_getRF_KeyStatus
  6869  05EB  3A01               	xorlw	1
  6870  05EC  3000               	movlw	0
  6871  05ED  1903               	skipnz
  6872  05EE  3001               	movlw	1
  6873  05EF  0020               	movlb	0	; select bank0
  6874  05F0  00EB               	movwf	??_setRF_Main
  6875  05F1  0CEB               	rrf	??_setRF_Main,f
  6876  05F2  0CEB               	rrf	??_setRF_Main,f
  6877  05F3  0021               	movlb	1	; select bank1
  6878  05F4  083C               	movf	_RF1^(0+128),w
  6879  05F5  0020               	movlb	0	; select bank0
  6880  05F6  066B               	xorwf	??_setRF_Main,w
  6881  05F7  397F               	andlw	-129
  6882  05F8  066B               	xorwf	??_setRF_Main,w
  6883  05F9  0021               	movlb	1	; select bank1
  6884  05FA  00BC               	movwf	_RF1^(0+128)
  6885                           
  6886                           ;RF_Control_B1.c: 65: } else {
  6887  05FB  2DFE               	goto	l1967
  6888  05FC                     l1966:	
  6889                           
  6890                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6891  05FC  0021               	movlb	1	; select bank1
  6892  05FD  13BC               	bcf	_RF1^(0+128),7
  6893  05FE                     l1967:	
  6894                           
  6895                           ;RF_Control_B1.c: 70: }
  6896                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  6897  05FE  1BBC               	btfsc	_RF1^(0+128),7
  6898  05FF  1B3C               	btfsc	_RF1^(0+128),6
  6899  0600  2E06               	goto	l1968
  6900                           
  6901                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  6902  0601  01BE               	clrf	(_RF1^(0+128)+2)
  6903  0602  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6904                           
  6905                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  6906  0603  14BD               	bsf	(_RF1^(0+128)+1),1
  6907                           
  6908                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  6909  0604  11BC               	bcf	_RF1^(0+128),3
  6910                           
  6911                           ;RF_Control_B1.c: 76: } else {
  6912  0605  0008               	return
  6913  0606                     l1968:	
  6914                           
  6915                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6916  0606  18BD               	btfsc	(_RF1^(0+128)+1),1
  6917  0607  1B3C               	btfsc	_RF1^(0+128),6
  6918  0608  2E1D               	goto	l7484
  6919                           
  6920                           ;RF_Control_B1.c: 78: RF1.Count++;
  6921  0609  3001               	movlw	1
  6922  060A  07BE               	addwf	(_RF1^(0+128)+2),f
  6923  060B  3000               	movlw	0
  6924  060C  3DBF               	addwfc	((_RF1+1)^(0+128)+2),f
  6925                           
  6926                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6927  060D  3002               	movlw	2
  6928  060E  3EBC               	addlw	_RF1& (0+255)
  6929  060F  0086               	movwf	6
  6930  0610  0187               	clrf	7
  6931  0611  3F40               	moviw [0]fsr1
  6932  0612  0643               	xorwf	(_RF1^(0+128)+7),w
  6933  0613  1D03               	skipz
  6934  0614  2E17               	goto	u7055
  6935  0615  3F41               	moviw [1]fsr1
  6936  0616  0644               	xorwf	((_RF1+1)^(0+128)+7),w
  6937  0617                     u7055:	
  6938  0617  1D03               	skipz
  6939  0618  2E8C               	goto	l7536
  6940                           
  6941                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6942  0619  01BE               	clrf	(_RF1^(0+128)+2)
  6943  061A  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6944                           
  6945                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6946  061B  10BD               	bcf	(_RF1^(0+128)+1),1
  6947                           
  6948                           ;RF_Control_B1.c: 82: }
  6949                           ;RF_Control_B1.c: 83: } else {
  6950  061C  2E8C               	goto	l7536
  6951  061D                     l7484:	
  6952                           
  6953                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6954  061D  01BE               	clrf	(_RF1^(0+128)+2)
  6955  061E  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6956                           
  6957                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6958  061F  10BD               	bcf	(_RF1^(0+128)+1),1
  6959                           
  6960                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6961  0620  193C               	btfsc	_RF1^(0+128),2
  6962  0621  1B3C               	btfsc	_RF1^(0+128),6
  6963  0622  2E3E               	goto	l1973
  6964                           
  6965                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6966  0623  113C               	bcf	_RF1^(0+128),2
  6967                           
  6968                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6969  0624  11BC               	bcf	_RF1^(0+128),3
  6970                           
  6971                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6972  0625  10BC               	bcf	_RF1^(0+128),1
  6973                           
  6974                           ;RF_Control_B1.c: 92: CC2500_ReadStatus(0x3B);
  6975  0626  303B               	movlw	59
  6976  0627  319F  2765  3185   	fcall	_CC2500_ReadStatus
  6977                           
  6978                           ;RF_Control_B1.c: 93: if (s_data != 0) {
  6979  062A  0021               	movlb	1	; select bank1
  6980  062B  0853               	movf	_s_data^(0+128),w
  6981  062C  1903               	btfsc	3,2
  6982  062D  2E3A               	goto	l1974
  6983                           
  6984                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  6985  062E  3036               	movlw	54
  6986  062F  319D  2595  3185   	fcall	_CC2500_WriteCommand
  6987                           
  6988                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x3B);
  6989  0632  303B               	movlw	59
  6990  0633  319D  2595  3185   	fcall	_CC2500_WriteCommand
  6991                           
  6992                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x3A);
  6993  0636  303A               	movlw	58
  6994  0637  319D  2595  3185   	fcall	_CC2500_WriteCommand
  6995  063A                     l1974:	
  6996                           
  6997                           ;RF_Control_B1.c: 97: }
  6998                           ;RF_Control_B1.c: 98: CC2500_TxData();
  6999  063A  3189  2185  3185   	fcall	_CC2500_TxData
  7000                           
  7001                           ;RF_Control_B1.c: 100: } else {
  7002  063D  2E8C               	goto	l7536
  7003  063E                     l1973:	
  7004                           
  7005                           ;RF_Control_B1.c: 102: if (RF1.RxStatus == 1) {
  7006  063E  1DBC               	btfss	_RF1^(0+128),3
  7007  063F  2E77               	goto	l1976
  7008                           
  7009                           ;RF_Control_B1.c: 104: CC2500_RxData();
  7010  0640  318B  233C  3185   	fcall	_CC2500_RxData
  7011                           
  7012                           ;RF_Control_B1.c: 105: if (RF1.ReceiveGO == 1) {
  7013  0643  0021               	movlb	1	; select bank1
  7014  0644  1CBC               	btfss	_RF1^(0+128),1
  7015  0645  2E8C               	goto	l7536
  7016                           
  7017                           ;RF_Control_B1.c: 106: RF1.ReceiveGO = 0;
  7018  0646  10BC               	bcf	_RF1^(0+128),1
  7019                           
  7020                           ;RF_Control_B1.c: 107: RF1.Correction = 0;
  7021  0647  12BD               	bcf	(_RF1^(0+128)+1),5
  7022                           
  7023                           ;RF_Control_B1.c: 108: RF1.CorrectionCounter = 0;
  7024  0648  01C6               	clrf	(_RF1^(0+128)+10)
  7025  0649  01C7               	clrf	((_RF1+1)^(0+128)+10)
  7026                           
  7027                           ;RF_Control_B1.c: 117: getRxData();
  7028  064A  318A  22C8  3185   	fcall	_getRxData
  7029                           
  7030                           ;RF_Control_B1.c: 120: RF1.Run = 1;
  7031  064D  0021               	movlb	1	; select bank1
  7032  064E  14BD               	bsf	(_RF1^(0+128)+1),1
  7033                           
  7034                           ;RF_Control_B1.c: 122: if (RF1.Checked == 1) {
  7035  064F  1DBD               	btfss	(_RF1^(0+128)+1),3
  7036  0650  2E5E               	goto	l7520
  7037                           
  7038                           ;RF_Control_B1.c: 123: if (RF1.RunTime > 10) {
  7039  0651  3000               	movlw	0
  7040  0652  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7041  0653  300B               	movlw	11
  7042  0654  1903               	skipnz
  7043  0655  0243               	subwf	(_RF1^(0+128)+7),w
  7044  0656  1C03               	skipc
  7045  0657  2E5C               	goto	l7518
  7046                           
  7047                           ;RF_Control_B1.c: 124: RF1.RunTime = 10;
  7048  0658  300A               	movlw	10
  7049  0659  00C3               	movwf	(_RF1^(0+128)+7)
  7050  065A  3000               	movlw	0
  7051  065B  00C4               	movwf	(_RF1^(0+128)+8)
  7052  065C                     l7518:	
  7053                           
  7054                           ;RF_Control_B1.c: 125: }
  7055                           ;RF_Control_B1.c: 126: RF1.CheckCount = 0;
  7056  065C  01C0               	clrf	(_RF1^(0+128)+4)
  7057                           
  7058                           ;RF_Control_B1.c: 127: } else {
  7059  065D  2E8C               	goto	l7536
  7060  065E                     l7520:	
  7061                           
  7062                           ;RF_Control_B1.c: 128: RF1.CheckCount++;
  7063  065E  3001               	movlw	1
  7064  065F  0020               	movlb	0	; select bank0
  7065  0660  00EB               	movwf	??_setRF_Main
  7066  0661  086B               	movf	??_setRF_Main,w
  7067  0662  0021               	movlb	1	; select bank1
  7068  0663  07C0               	addwf	(_RF1^(0+128)+4),f
  7069                           
  7070                           ;RF_Control_B1.c: 129: if (RF1.CheckCount == 2) {
  7071  0664  0840               	movf	(_RF1^(0+128)+4),w
  7072  0665  3A02               	xorlw	2
  7073  0666  1D03               	skipz
  7074  0667  2E8C               	goto	l7536
  7075                           
  7076                           ;RF_Control_B1.c: 130: RF1.CheckCount = 0;
  7077  0668  01C0               	clrf	(_RF1^(0+128)+4)
  7078                           
  7079                           ;RF_Control_B1.c: 131: RF1.CheckedCounter = 0;
  7080  0669  01C1               	clrf	(_RF1^(0+128)+5)
  7081  066A  01C2               	clrf	((_RF1+1)^(0+128)+5)
  7082                           
  7083                           ;RF_Control_B1.c: 132: if (RF1.RunTime < 200) {
  7084  066B  3000               	movlw	0
  7085  066C  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7086  066D  30C8               	movlw	200
  7087  066E  1903               	skipnz
  7088  066F  0243               	subwf	(_RF1^(0+128)+7),w
  7089  0670  1803               	skipnc
  7090  0671  2E8C               	goto	l7536
  7091                           
  7092                           ;RF_Control_B1.c: 133: RF1.RunTime += 10;
  7093  0672  300A               	movlw	10
  7094  0673  07C3               	addwf	(_RF1^(0+128)+7),f
  7095  0674  3000               	movlw	0
  7096  0675  3DC4               	addwfc	((_RF1+1)^(0+128)+7),f
  7097                           
  7098                           ;RF_Control_B1.c: 134: }
  7099                           ;RF_Control_B1.c: 135: }
  7100                           ;RF_Control_B1.c: 136: }
  7101                           ;RF_Control_B1.c: 137: }
  7102                           ;RF_Control_B1.c: 138: } else {
  7103  0676  2E8C               	goto	l7536
  7104  0677                     l1976:	
  7105                           
  7106                           ;RF_Control_B1.c: 140: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7107  0677  1DBC               	btfss	_RF1^(0+128),3
  7108  0678  18BC               	btfsc	_RF1^(0+128),1
  7109  0679  2E8C               	goto	l7536
  7110                           
  7111                           ;RF_Control_B1.c: 141: RF1.RxStatus = 1;
  7112  067A  15BC               	bsf	_RF1^(0+128),3
  7113                           
  7114                           ;RF_Control_B1.c: 142: RF1.Correction = 1;
  7115  067B  16BD               	bsf	(_RF1^(0+128)+1),5
  7116                           
  7117                           ;RF_Control_B1.c: 144: CC2500_WriteCommand(0x36);
  7118  067C  3036               	movlw	54
  7119  067D  319D  2595  3185   	fcall	_CC2500_WriteCommand
  7120                           
  7121                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x3B);
  7122  0680  303B               	movlw	59
  7123  0681  319D  2595  3185   	fcall	_CC2500_WriteCommand
  7124                           
  7125                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x3A);
  7126  0684  303A               	movlw	58
  7127  0685  319D  2595  3185   	fcall	_CC2500_WriteCommand
  7128                           
  7129                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x34);
  7130  0688  3034               	movlw	52
  7131  0689  319D  2595  3185   	fcall	_CC2500_WriteCommand
  7132  068C                     l7536:	
  7133                           
  7134                           ;RF_Control_B1.c: 148: }
  7135                           ;RF_Control_B1.c: 150: }
  7136                           ;RF_Control_B1.c: 151: }
  7137                           ;RF_Control_B1.c: 152: }
  7138                           ;RF_Control_B1.c: 153: if (RF1.RxStatus == 1) {
  7139  068C  0021               	movlb	1	; select bank1
  7140  068D  1DBC               	btfss	_RF1^(0+128),3
  7141  068E  2EAD               	goto	l7548
  7142                           
  7143                           ;RF_Control_B1.c: 154: RF1.CheckedCounter++;
  7144  068F  3001               	movlw	1
  7145  0690  07C1               	addwf	(_RF1^(0+128)+5),f
  7146  0691  3000               	movlw	0
  7147  0692  3DC2               	addwfc	((_RF1+1)^(0+128)+5),f
  7148                           
  7149                           ;RF_Control_B1.c: 155: if (RF1.CheckedCounter == 100) {
  7150  0693  3005               	movlw	5
  7151  0694  3EBC               	addlw	_RF1& (0+255)
  7152  0695  0086               	movwf	6
  7153  0696  0187               	clrf	7
  7154  0697  3F40               	moviw [0]fsr1
  7155  0698  3A64               	xorlw	100
  7156  0699  1D03               	skipz
  7157  069A  2E9D               	goto	u7185
  7158  069B  3F41               	moviw [1]fsr1
  7159  069C  3A00               	xorlw	0
  7160  069D                     u7185:	
  7161  069D  1D03               	skipz
  7162  069E  2EAD               	goto	l7548
  7163                           
  7164                           ;RF_Control_B1.c: 156: RF1.CheckedCounter = 0;
  7165  069F  01C1               	clrf	(_RF1^(0+128)+5)
  7166  06A0  01C2               	clrf	((_RF1+1)^(0+128)+5)
  7167                           
  7168                           ;RF_Control_B1.c: 157: RF1.CheckCount = 0;
  7169  06A1  01C0               	clrf	(_RF1^(0+128)+4)
  7170                           
  7171                           ;RF_Control_B1.c: 158: if (RF1.RunTime > 10) {
  7172  06A2  3000               	movlw	0
  7173  06A3  0244               	subwf	((_RF1+1)^(0+128)+7),w
  7174  06A4  300B               	movlw	11
  7175  06A5  1903               	skipnz
  7176  06A6  0243               	subwf	(_RF1^(0+128)+7),w
  7177  06A7  1C03               	skipc
  7178  06A8  2EAD               	goto	l7548
  7179                           
  7180                           ;RF_Control_B1.c: 159: RF1.RunTime -= 10;
  7181  06A9  300A               	movlw	10
  7182  06AA  02C3               	subwf	(_RF1^(0+128)+7),f
  7183  06AB  3000               	movlw	0
  7184  06AC  3BC4               	subwfb	((_RF1+1)^(0+128)+7),f
  7185  06AD                     l7548:	
  7186                           
  7187                           ;RF_Control_B1.c: 160: }
  7188                           ;RF_Control_B1.c: 161: }
  7189                           ;RF_Control_B1.c: 162: }
  7190                           ;RF_Control_B1.c: 163: if (RF1.Correction == 1) {
  7191  06AD  1EBD               	btfss	(_RF1^(0+128)+1),5
  7192  06AE  0008               	return
  7193                           
  7194                           ;RF_Control_B1.c: 164: RF1.CorrectionCounter++;
  7195  06AF  3001               	movlw	1
  7196  06B0  07C6               	addwf	(_RF1^(0+128)+10),f
  7197  06B1  3000               	movlw	0
  7198  06B2  3DC7               	addwfc	((_RF1+1)^(0+128)+10),f
  7199                           
  7200                           ;RF_Control_B1.c: 165: if (RF1.CorrectionCounter >= 30000) {
  7201  06B3  3075               	movlw	117
  7202  06B4  0247               	subwf	((_RF1+1)^(0+128)+10),w
  7203  06B5  3030               	movlw	48
  7204  06B6  1903               	skipnz
  7205  06B7  0246               	subwf	(_RF1^(0+128)+10),w
  7206  06B8  1C03               	skipc
  7207  06B9  0008               	return
  7208                           
  7209                           ;RF_Control_B1.c: 166: RF1.CorrectionCounter = 0;
  7210  06BA  01C6               	clrf	(_RF1^(0+128)+10)
  7211  06BB  01C7               	clrf	((_RF1+1)^(0+128)+10)
  7212                           
  7213                           ;RF_Control_B1.c: 167: RF1.RxStatus = 0;
  7214  06BC  11BC               	bcf	_RF1^(0+128),3
  7215                           
  7216                           ;RF_Control_B1.c: 168: RF1.ReceiveGO = 0;
  7217  06BD  10BC               	bcf	_RF1^(0+128),1
  7218                           
  7219                           ;RF_Control_B1.c: 169: }
  7220                           ;RF_Control_B1.c: 170: }
  7221                           ;RF_Control_B1.c: 171: }
  7222                           ;RF_Control_B1.c: 172: }
  7223                           ;RF_Control_B1.c: 179: } else {
  7224  06BE  0008               	return
  7225  06BF                     l1964:	
  7226                           
  7227                           ;RF_Control_B1.c: 180: if (myMain.PowerON == 1) {
  7228  06BF  1C20               	btfss	_myMain^(0+128),0
  7229  06C0  0008               	return
  7230                           
  7231                           ;RF_Control_B1.c: 181: RF1.Enable = 1;
  7232  06C1  143C               	bsf	_RF1^(0+128),0
  7233  06C2  0008               	return
  7234  06C3                     __end_of_setRF_Main:	
  7235                           
  7236                           	psect	text26
  7237  0AC8                     __ptext26:	
  7238 ;; *************** function _getRxData *****************
  7239 ;; Defined at:
  7240 ;;		line 269 in file "../src/RF_Control_B1.c"
  7241 ;; Parameters:    Size  Location     Type
  7242 ;;		None
  7243 ;; Auto vars:     Size  Location     Type
  7244 ;;  error           1   74[BANK0 ] unsigned char 
  7245 ;; Return value:  Size  Location     Type
  7246 ;;		None               void
  7247 ;; Registers used:
  7248 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7249 ;; Tracked objects:
  7250 ;;		On entry : 0/0
  7251 ;;		On exit  : 0/0
  7252 ;;		Unchanged: 0/0
  7253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7255 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7256 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7257 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7258 ;;Total ram usage:        2 bytes
  7259 ;; Hardware stack levels used:    1
  7260 ;; Hardware stack levels required when called:   12
  7261 ;; This function calls:
  7262 ;;		_getMain_All_Error_Status
  7263 ;;		_setControl_Lights_Table
  7264 ;;		_setLog_Code
  7265 ;; This function is called by:
  7266 ;;		_setRF_Main
  7267 ;; This function uses a non-reentrant model
  7268 ;;
  7269                           
  7270                           
  7271                           ;psect for function _getRxData
  7272  0AC8                     _getRxData:	
  7273                           
  7274                           ;RF_Control_B1.c: 270: char error = getMain_All_Error_Status(0);
  7275                           
  7276                           ;incstack = 0
  7277                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7278  0AC8  3000               	movlw	0
  7279  0AC9  3191  2117  318A   	fcall	_getMain_All_Error_Status
  7280  0ACC  0020               	movlb	0	; select bank0
  7281  0ACD  00E9               	movwf	??_getRxData
  7282  0ACE  0869               	movf	??_getRxData,w
  7283  0ACF  00EA               	movwf	getRxData@error
  7284                           
  7285                           ;RF_Control_B1.c: 271: if (error == 0) {
  7286  0AD0  08EA               	movf	getRxData@error,f
  7287  0AD1  1D03               	skipz
  7288  0AD2  0008               	return
  7289                           
  7290                           ;RF_Control_B1.c: 272: if (RF1.Learn == 1) {
  7291  0AD3  0021               	movlb	1	; select bank1
  7292  0AD4  1F3C               	btfss	_RF1^(0+128),6
  7293  0AD5  2AE6               	goto	l6968
  7294                           
  7295                           ;RF_Control_B1.c: 273: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7296  0AD6  0023               	movlb	3	; select bank3
  7297  0AD7  08A0               	movf	_RF_Data^(0+384),f
  7298  0AD8  1D03               	skipz
  7299  0AD9  2AE3               	goto	l2015
  7300  0ADA  0821               	movf	(_RF_Data^(0+384)+1),w
  7301  0ADB  3A64               	xorlw	100
  7302  0ADC  1D03               	skipz
  7303  0ADD  2AE3               	goto	l2015
  7304                           
  7305                           ;RF_Control_B1.c: 274: setLog_Code();
  7306  0ADE  3192  221E         	fcall	_setLog_Code
  7307                           
  7308                           ;RF_Control_B1.c: 275: RF1.Checked = 1;
  7309  0AE0  0021               	movlb	1	; select bank1
  7310  0AE1  15BD               	bsf	(_RF1^(0+128)+1),3
  7311                           
  7312                           ;RF_Control_B1.c: 276: } else {
  7313  0AE2  0008               	return
  7314  0AE3                     l2015:	
  7315                           
  7316                           ;RF_Control_B1.c: 277: RF1.Checked = 0;
  7317  0AE3  0021               	movlb	1	; select bank1
  7318  0AE4  11BD               	bcf	(_RF1^(0+128)+1),3
  7319                           
  7320                           ;RF_Control_B1.c: 278: }
  7321                           ;RF_Control_B1.c: 279: } else {
  7322  0AE5  0008               	return
  7323  0AE6                     l6968:	
  7324                           
  7325                           ;RF_Control_B1.c: 280: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7326  0AE6  0023               	movlb	3	; select bank3
  7327  0AE7  08A0               	movf	_RF_Data^(0+384),f
  7328  0AE8  1D03               	skipz
  7329  0AE9  2B24               	goto	l6990
  7330  0AEA  0821               	movf	(_RF_Data^(0+384)+1),w
  7331  0AEB  3A02               	xorlw	2
  7332  0AEC  1D03               	skipz
  7333  0AED  2B24               	goto	l6990
  7334                           
  7335                           ;RF_Control_B1.c: 282: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7336  0AEE  082C               	movf	(_RF_Data^(0+384)+12),w
  7337  0AEF  3AFF               	xorlw	255
  7338  0AF0  1D03               	skipz
  7339  0AF1  2AFE               	goto	l6980
  7340  0AF2  082D               	movf	(_RF_Data^(0+384)+13),w
  7341  0AF3  3AFF               	xorlw	255
  7342  0AF4  1D03               	skipz
  7343  0AF5  2AFE               	goto	l6980
  7344  0AF6  082E               	movf	(_RF_Data^(0+384)+14),w
  7345  0AF7  3AFF               	xorlw	255
  7346  0AF8  1D03               	skipz
  7347  0AF9  2AFE               	goto	l6980
  7348                           
  7349                           ;RF_Control_B1.c: 283: __nop();
  7350  0AFA  0000               	nop
  7351                           
  7352                           ;RF_Control_B1.c: 284: RF1.Checked = 0;
  7353  0AFB  0021               	movlb	1	; select bank1
  7354  0AFC  11BD               	bcf	(_RF1^(0+128)+1),3
  7355                           
  7356                           ;RF_Control_B1.c: 285: } else {
  7357  0AFD  0008               	return
  7358  0AFE                     l6980:	
  7359                           
  7360                           ;RF_Control_B1.c: 286: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7361  0AFE  0020               	movlb	0	; select bank0
  7362  0AFF  086F               	movf	_product,w
  7363  0B00  3E0C               	addlw	12
  7364  0B01  0086               	movwf	6
  7365  0B02  3002               	movlw	2	; select bank4/5
  7366  0B03  0087               	movwf	7
  7367  0B04  0023               	movlb	3	; select bank3
  7368  0B05  082C               	movf	(_RF_Data^(0+384)+12),w
  7369  0B06  0601               	xorwf	1,w
  7370  0B07  1D03               	skipz
  7371  0B08  0008               	return
  7372  0B09  0020               	movlb	0	; select bank0
  7373  0B0A  086F               	movf	_product,w
  7374  0B0B  3E0D               	addlw	13
  7375  0B0C  0086               	movwf	6
  7376  0B0D  3002               	movlw	2	; select bank4/5
  7377  0B0E  0087               	movwf	7
  7378  0B0F  0023               	movlb	3	; select bank3
  7379  0B10  082D               	movf	(_RF_Data^(0+384)+13),w
  7380  0B11  0601               	xorwf	1,w
  7381  0B12  1D03               	skipz
  7382  0B13  0008               	return
  7383  0B14  0020               	movlb	0	; select bank0
  7384  0B15  086F               	movf	_product,w
  7385  0B16  3E0E               	addlw	14
  7386  0B17  0086               	movwf	6
  7387  0B18  3002               	movlw	2	; select bank4/5
  7388  0B19  0087               	movwf	7
  7389  0B1A  0023               	movlb	3	; select bank3
  7390  0B1B  082E               	movf	(_RF_Data^(0+384)+14),w
  7391  0B1C  0601               	xorwf	1,w
  7392  0B1D  1D03               	skipz
  7393  0B1E  0008               	return
  7394                           
  7395                           ;RF_Control_B1.c: 287: setControl_Lights_Table();
  7396  0B1F  318A  2259         	fcall	_setControl_Lights_Table
  7397                           
  7398                           ;RF_Control_B1.c: 288: RF1.Checked = 1;
  7399  0B21  0021               	movlb	1	; select bank1
  7400  0B22  15BD               	bsf	(_RF1^(0+128)+1),3
  7401                           
  7402                           ;RF_Control_B1.c: 289: }
  7403                           ;RF_Control_B1.c: 290: }
  7404                           ;RF_Control_B1.c: 291: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7405  0B23  0008               	return
  7406  0B24                     l6990:	
  7407  0B24  0023               	movlb	3	; select bank3
  7408  0B25  0820               	movf	_RF_Data^(0+384),w
  7409  0B26  3AFF               	xorlw	255
  7410  0B27  1D03               	skipz
  7411  0B28  2B2F               	goto	l6996
  7412  0B29  0821               	movf	(_RF_Data^(0+384)+1),w
  7413  0B2A  3A02               	xorlw	2
  7414  0B2B  1D03               	skipz
  7415  0B2C  2B2F               	goto	l6996
  7416                           
  7417                           ;RF_Control_B1.c: 292: __nop();
  7418  0B2D  0000               	nop
  7419                           
  7420                           ;RF_Control_B1.c: 293: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7421  0B2E  0008               	return
  7422  0B2F                     l6996:	
  7423  0B2F  0023               	movlb	3	; select bank3
  7424  0B30  08A0               	movf	_RF_Data^(0+384),f
  7425  0B31  1D03               	skipz
  7426  0B32  2B39               	goto	l2025
  7427  0B33  0821               	movf	(_RF_Data^(0+384)+1),w
  7428  0B34  3A65               	xorlw	101
  7429  0B35  1D03               	skipz
  7430  0B36  2B39               	goto	l2025
  7431                           
  7432                           ;RF_Control_B1.c: 294: __nop();
  7433  0B37  0000               	nop
  7434                           
  7435                           ;RF_Control_B1.c: 295: } else {
  7436  0B38  0008               	return
  7437  0B39                     l2025:	
  7438                           
  7439                           ;RF_Control_B1.c: 296: RF1.Checked = 0;
  7440  0B39  0021               	movlb	1	; select bank1
  7441  0B3A  11BD               	bcf	(_RF1^(0+128)+1),3
  7442                           
  7443                           ;RF_Control_B1.c: 297: }
  7444                           ;RF_Control_B1.c: 302: }
  7445                           ;RF_Control_B1.c: 303: } else {
  7446  0B3B  0008               	return
  7447  0B3C                     __end_of_getRxData:	
  7448                           ;RF_Control_B1.c: 304: ;
  7449                           
  7450                           
  7451                           	psect	text27
  7452  121E                     __ptext27:	
  7453 ;; *************** function _setLog_Code *****************
  7454 ;; Defined at:
  7455 ;;		line 309 in file "../src/RF_Control_B1.c"
  7456 ;; Parameters:    Size  Location     Type
  7457 ;;		None
  7458 ;; Auto vars:     Size  Location     Type
  7459 ;;		None
  7460 ;; Return value:  Size  Location     Type
  7461 ;;		None               void
  7462 ;; Registers used:
  7463 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7464 ;; Tracked objects:
  7465 ;;		On entry : 0/0
  7466 ;;		On exit  : 0/0
  7467 ;;		Unchanged: 0/0
  7468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7471 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7472 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7473 ;;Total ram usage:        1 bytes
  7474 ;; Hardware stack levels used:    1
  7475 ;; Hardware stack levels required when called:    7
  7476 ;; This function calls:
  7477 ;;		_setBuz
  7478 ;;		_setMemory_LoopSave
  7479 ;;		_setMemory_Modify
  7480 ;; This function is called by:
  7481 ;;		_getRxData
  7482 ;; This function uses a non-reentrant model
  7483 ;;
  7484                           
  7485                           
  7486                           ;psect for function _setLog_Code
  7487  121E                     _setLog_Code:	
  7488                           
  7489                           ;RF_Control_B1.c: 310: RF1.Learn = 0;
  7490                           
  7491                           ;incstack = 0
  7492                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7493  121E  0021               	movlb	1	; select bank1
  7494  121F  133C               	bcf	_RF1^(0+128),6
  7495                           
  7496                           ;RF_Control_B1.c: 311: product->Data[12]=RF_Data[12];
  7497  1220  0023               	movlb	3	; select bank3
  7498  1221  082C               	movf	(_RF_Data^(0+384)+12),w
  7499  1222  0020               	movlb	0	; select bank0
  7500  1223  00AD               	movwf	??_setLog_Code
  7501  1224  086F               	movf	_product,w
  7502  1225  3E0C               	addlw	12
  7503  1226  0086               	movwf	6
  7504  1227  3002               	movlw	2	; select bank4/5
  7505  1228  0087               	movwf	7
  7506  1229  082D               	movf	??_setLog_Code,w
  7507  122A  0081               	movwf	1
  7508                           
  7509                           ;RF_Control_B1.c: 312: product->Data[13]=RF_Data[13];
  7510  122B  0023               	movlb	3	; select bank3
  7511  122C  082D               	movf	(_RF_Data^(0+384)+13),w
  7512  122D  0020               	movlb	0	; select bank0
  7513  122E  00AD               	movwf	??_setLog_Code
  7514  122F  086F               	movf	_product,w
  7515  1230  3E0D               	addlw	13
  7516  1231  0086               	movwf	6
  7517  1232  3002               	movlw	2	; select bank4/5
  7518  1233  0087               	movwf	7
  7519  1234  082D               	movf	??_setLog_Code,w
  7520  1235  0081               	movwf	1
  7521                           
  7522                           ;RF_Control_B1.c: 313: product->Data[14]=RF_Data[14];
  7523  1236  0023               	movlb	3	; select bank3
  7524  1237  082E               	movf	(_RF_Data^(0+384)+14),w
  7525  1238  0020               	movlb	0	; select bank0
  7526  1239  00AD               	movwf	??_setLog_Code
  7527  123A  086F               	movf	_product,w
  7528  123B  3E0E               	addlw	14
  7529  123C  0086               	movwf	6
  7530  123D  3002               	movlw	2	; select bank4/5
  7531  123E  0087               	movwf	7
  7532  123F  082D               	movf	??_setLog_Code,w
  7533  1240  0081               	movwf	1
  7534                           
  7535                           ;RF_Control_B1.c: 314: setBuz(1, 100);
  7536  1241  3064               	movlw	100
  7537  1242  00A9               	movwf	setBuz@time
  7538  1243  3000               	movlw	0
  7539  1244  00AA               	movwf	setBuz@time+1
  7540  1245  3001               	movlw	1
  7541  1246  3196  26F2  3192   	fcall	_setBuz
  7542                           
  7543                           ;RF_Control_B1.c: 315: if (myMain.First == 1) {
  7544  1249  0021               	movlb	1	; select bank1
  7545  124A  1EA0               	btfss	_myMain^(0+128),5
  7546  124B  2A50               	goto	l2031
  7547                           
  7548                           ;RF_Control_B1.c: 316: setMemory_LoopSave(1);
  7549  124C  3001               	movlw	1
  7550  124D  319C  246C  3192   	fcall	_setMemory_LoopSave
  7551  1250                     l2031:	
  7552                           
  7553                           ;RF_Control_B1.c: 317: }
  7554                           ;RF_Control_B1.c: 318: setMemory_Modify(1);
  7555  1250  3001               	movlw	1
  7556  1251  319C  2459         	fcall	_setMemory_Modify
  7557  1253  0008               	return
  7558  1254                     __end_of_setLog_Code:	
  7559                           
  7560                           	psect	text28
  7561  1C6C                     __ptext28:	
  7562 ;; *************** function _setMemory_LoopSave *****************
  7563 ;; Defined at:
  7564 ;;		line 1006 in file "../src/MCU_B1.c"
  7565 ;; Parameters:    Size  Location     Type
  7566 ;;  command         1    wreg     unsigned char 
  7567 ;; Auto vars:     Size  Location     Type
  7568 ;;  command         1    1[BANK0 ] unsigned char 
  7569 ;; Return value:  Size  Location     Type
  7570 ;;		None               void
  7571 ;; Registers used:
  7572 ;;		wreg, status,2, status,0
  7573 ;; Tracked objects:
  7574 ;;		On entry : 0/0
  7575 ;;		On exit  : 0/0
  7576 ;;		Unchanged: 0/0
  7577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7579 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7580 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7581 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7582 ;;Total ram usage:        2 bytes
  7583 ;; Hardware stack levels used:    1
  7584 ;; Hardware stack levels required when called:    5
  7585 ;; This function calls:
  7586 ;;		Nothing
  7587 ;; This function is called by:
  7588 ;;		_setLog_Code
  7589 ;; This function uses a non-reentrant model
  7590 ;;
  7591                           
  7592                           
  7593                           ;psect for function _setMemory_LoopSave
  7594  1C6C                     _setMemory_LoopSave:	
  7595                           
  7596                           ;incstack = 0
  7597                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7598                           ;setMemory_LoopSave@command stored from wreg
  7599  1C6C  0020               	movlb	0	; select bank0
  7600  1C6D  00A1               	movwf	setMemory_LoopSave@command
  7601                           
  7602                           ;MCU_B1.c: 1007: Memory.LoopSave = command == 1 ? 1 : 0;
  7603  1C6E  0821               	movf	setMemory_LoopSave@command,w
  7604  1C6F  3A01               	xorlw	1
  7605  1C70  3000               	movlw	0
  7606  1C71  1903               	skipnz
  7607  1C72  3001               	movlw	1
  7608  1C73  00A0               	movwf	??_setMemory_LoopSave
  7609  1C74  0DA0               	rlf	??_setMemory_LoopSave,f
  7610  1C75  0DA0               	rlf	??_setMemory_LoopSave,f
  7611  1C76  0024               	movlb	4	; select bank4
  7612  1C77  0844               	movf	(_Memory^(0+512)+36),w
  7613  1C78  0020               	movlb	0	; select bank0
  7614  1C79  0620               	xorwf	??_setMemory_LoopSave,w
  7615  1C7A  39FB               	andlw	-5
  7616  1C7B  0620               	xorwf	??_setMemory_LoopSave,w
  7617  1C7C  0024               	movlb	4	; select bank4
  7618  1C7D  00C4               	movwf	(_Memory^(0+512)+36)
  7619  1C7E  0008               	return
  7620  1C7F                     __end_of_setMemory_LoopSave:	
  7621                           
  7622                           	psect	text29
  7623  0A59                     __ptext29:	
  7624 ;; *************** function _setControl_Lights_Table *****************
  7625 ;; Defined at:
  7626 ;;		line 322 in file "../src/RF_Control_B1.c"
  7627 ;; Parameters:    Size  Location     Type
  7628 ;;		None
  7629 ;; Auto vars:     Size  Location     Type
  7630 ;;		None
  7631 ;; Return value:  Size  Location     Type
  7632 ;;		None               void
  7633 ;; Registers used:
  7634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7635 ;; Tracked objects:
  7636 ;;		On entry : 0/0
  7637 ;;		On exit  : 0/0
  7638 ;;		Unchanged: 0/0
  7639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7644 ;;Total ram usage:        0 bytes
  7645 ;; Hardware stack levels used:    1
  7646 ;; Hardware stack levels required when called:   11
  7647 ;; This function calls:
  7648 ;;		_setBuz
  7649 ;;		_setRFSW_AdjControl
  7650 ;;		_setRFSW_Control
  7651 ;;		_setTxData
  7652 ;; This function is called by:
  7653 ;;		_getRxData
  7654 ;; This function uses a non-reentrant model
  7655 ;;
  7656                           
  7657                           
  7658                           ;psect for function _setControl_Lights_Table
  7659  0A59                     _setControl_Lights_Table:	
  7660                           
  7661                           ;RF_Control_B1.c: 323: switch (RF_Data[15]) {
  7662                           
  7663                           ;incstack = 0
  7664                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7665  0A59  2AAC               	goto	l6566
  7666  0A5A                     l6538:	
  7667                           ;RF_Control_B1.c: 324: case 0x00:
  7668                           
  7669                           
  7670                           ;RF_Control_B1.c: 327: setRFSW_Control(1);
  7671  0A5A  3001               	movlw	1
  7672  0A5B  3196  2642  318A   	fcall	_setRFSW_Control
  7673                           
  7674                           ;RF_Control_B1.c: 333: setRFSW_Control(2);
  7675  0A5E  3002               	movlw	2
  7676  0A5F  3196  2642  318A   	fcall	_setRFSW_Control
  7677                           
  7678                           ;RF_Control_B1.c: 341: product->Data[9]=0;
  7679  0A62  0020               	movlb	0	; select bank0
  7680  0A63  086F               	movf	_product,w
  7681  0A64  3E09               	addlw	9
  7682  0A65  0086               	movwf	6
  7683  0A66  3002               	movlw	2	; select bank4/5
  7684  0A67  0087               	movwf	7
  7685  0A68  0181               	clrf	1
  7686                           
  7687                           ;RF_Control_B1.c: 342: product->Data[11]=0;
  7688  0A69  086F               	movf	_product,w
  7689  0A6A  3E0B               	addlw	11
  7690  0A6B  0086               	movwf	6
  7691  0A6C  3002               	movlw	2	; select bank4/5
  7692  0A6D  0087               	movwf	7
  7693  0A6E  0181               	clrf	1
  7694                           
  7695                           ;RF_Control_B1.c: 343: product->Data[15]=0;
  7696  0A6F  086F               	movf	_product,w
  7697  0A70  3E0F               	addlw	15
  7698  0A71  0086               	movwf	6
  7699  0A72  3002               	movlw	2	; select bank4/5
  7700  0A73  0087               	movwf	7
  7701  0A74  0181               	clrf	1
  7702                           
  7703                           ;RF_Control_B1.c: 344: product->Data[17]=0;
  7704  0A75  086F               	movf	_product,w
  7705  0A76  3E11               	addlw	17
  7706  0A77  0086               	movwf	6
  7707  0A78  3002               	movlw	2	; select bank4/5
  7708  0A79  0087               	movwf	7
  7709  0A7A  0181               	clrf	1
  7710                           
  7711                           ;RF_Control_B1.c: 345: setBuz(1, 100);
  7712  0A7B  3064               	movlw	100
  7713  0A7C  00A9               	movwf	setBuz@time
  7714  0A7D  3000               	movlw	0
  7715  0A7E  00AA               	movwf	setBuz@time+1
  7716  0A7F  3001               	movlw	1
  7717  0A80  3196  26F2  318A   	fcall	_setBuz
  7718                           
  7719                           ;RF_Control_B1.c: 346: setTxData();
  7720  0A83  318F  2743         	fcall	_setTxData
  7721                           
  7722                           ;RF_Control_B1.c: 347: break;
  7723  0A85  0008               	return
  7724  0A86                     l6552:	
  7725                           ;RF_Control_B1.c: 348: case 0x20:
  7726                           
  7727                           
  7728                           ;RF_Control_B1.c: 349: product->Data[9]=0;
  7729  0A86  0020               	movlb	0	; select bank0
  7730  0A87  086F               	movf	_product,w
  7731  0A88  3E09               	addlw	9
  7732  0A89  0086               	movwf	6
  7733  0A8A  3002               	movlw	2	; select bank4/5
  7734  0A8B  0087               	movwf	7
  7735  0A8C  0181               	clrf	1
  7736                           
  7737                           ;RF_Control_B1.c: 350: product->Data[11]=0;
  7738  0A8D  086F               	movf	_product,w
  7739  0A8E  3E0B               	addlw	11
  7740  0A8F  0086               	movwf	6
  7741  0A90  3002               	movlw	2	; select bank4/5
  7742  0A91  0087               	movwf	7
  7743  0A92  0181               	clrf	1
  7744                           
  7745                           ;RF_Control_B1.c: 351: product->Data[17]=0;
  7746  0A93  086F               	movf	_product,w
  7747  0A94  3E11               	addlw	17
  7748  0A95  0086               	movwf	6
  7749  0A96  3002               	movlw	2	; select bank4/5
  7750  0A97  0087               	movwf	7
  7751  0A98  0181               	clrf	1
  7752                           
  7753                           ;RF_Control_B1.c: 352: setTxData();
  7754  0A99  318F  2743         	fcall	_setTxData
  7755                           
  7756                           ;RF_Control_B1.c: 353: break;
  7757  0A9B  0008               	return
  7758  0A9C                     l6556:	
  7759                           ;RF_Control_B1.c: 354: case 0x01:
  7760                           
  7761                           
  7762                           ;RF_Control_B1.c: 356: setRFSW_Control(1);
  7763  0A9C  3001               	movlw	1
  7764  0A9D  3196  2642         	fcall	_setRFSW_Control
  7765                           
  7766                           ;RF_Control_B1.c: 358: break;
  7767  0A9F  0008               	return
  7768  0AA0                     l6558:	
  7769                           ;RF_Control_B1.c: 359: case 0x02:
  7770                           
  7771                           
  7772                           ;RF_Control_B1.c: 361: setRFSW_Control(2);
  7773  0AA0  3002               	movlw	2
  7774  0AA1  3196  2642         	fcall	_setRFSW_Control
  7775                           
  7776                           ;RF_Control_B1.c: 368: break;
  7777                           
  7778                           ;RF_Control_B1.c: 364: case 0x03:
  7779                           
  7780                           ;RF_Control_B1.c: 363: break;
  7781  0AA3  0008               	return
  7782  0AA4                     l6560:	
  7783                           ;RF_Control_B1.c: 369: case 0x11:
  7784                           
  7785                           
  7786                           ;RF_Control_B1.c: 372: setRFSW_AdjControl(1);
  7787  0AA4  3001               	movlw	1
  7788  0AA5  3193  2300         	fcall	_setRFSW_AdjControl
  7789                           
  7790                           ;RF_Control_B1.c: 375: break;
  7791  0AA7  0008               	return
  7792  0AA8                     l6562:	
  7793                           ;RF_Control_B1.c: 376: case 0x21:
  7794                           
  7795                           
  7796                           ;RF_Control_B1.c: 379: setRFSW_AdjControl(2);
  7797  0AA8  3002               	movlw	2
  7798  0AA9  3193  2300         	fcall	_setRFSW_AdjControl
  7799                           
  7800                           ;RF_Control_B1.c: 390: }
  7801                           
  7802                           ;RF_Control_B1.c: 389: break;
  7803                           
  7804                           ;RF_Control_B1.c: 383: case 0x31:
  7805                           
  7806                           ;RF_Control_B1.c: 382: break;
  7807  0AAB  0008               	return
  7808  0AAC                     l6566:	
  7809  0AAC  0023               	movlb	3	; select bank3
  7810  0AAD  082F               	movf	(_RF_Data^(0+384)+15),w
  7811                           
  7812                           ; Switch size 1, requested type "space"
  7813                           ; Number of cases is 8, Range of values is 0 to 49
  7814                           ; switch strategies available:
  7815                           ; Name         Instructions Cycles
  7816                           ; simple_byte           25    13 (average)
  7817                           ; direct_byte          106     6 (fixed)
  7818                           ; jumptable            260     6 (fixed)
  7819                           ;	Chosen strategy is simple_byte
  7820  0AAE  3A00               	xorlw	0	; case 0
  7821  0AAF  1903               	skipnz
  7822  0AB0  2A5A               	goto	l6538
  7823  0AB1  3A01               	xorlw	1	; case 1
  7824  0AB2  1903               	skipnz
  7825  0AB3  2A9C               	goto	l6556
  7826  0AB4  3A03               	xorlw	3	; case 2
  7827  0AB5  1903               	skipnz
  7828  0AB6  2AA0               	goto	l6558
  7829  0AB7  3A01               	xorlw	1	; case 3
  7830  0AB8  1903               	skipnz
  7831  0AB9  2AC7               	goto	l2045
  7832  0ABA  3A12               	xorlw	18	; case 17
  7833  0ABB  1903               	skipnz
  7834  0ABC  2AA4               	goto	l6560
  7835  0ABD  3A31               	xorlw	49	; case 32
  7836  0ABE  1903               	skipnz
  7837  0ABF  2A86               	goto	l6552
  7838  0AC0  3A01               	xorlw	1	; case 33
  7839  0AC1  1903               	skipnz
  7840  0AC2  2AA8               	goto	l6562
  7841  0AC3  3A10               	xorlw	16	; case 49
  7842  0AC4  1903               	skipnz
  7843  0AC5  2AC7               	goto	l2045
  7844  0AC6  2AC7               	goto	l2045
  7845  0AC7                     l2045:	
  7846  0AC7  0008               	return
  7847  0AC8                     __end_of_setControl_Lights_Table:	
  7848                           
  7849                           	psect	text30
  7850  1642                     __ptext30:	
  7851 ;; *************** function _setRFSW_Control *****************
  7852 ;; Defined at:
  7853 ;;		line 473 in file "../src/RF_Control_B1.c"
  7854 ;; Parameters:    Size  Location     Type
  7855 ;;  sw              1    wreg     unsigned char 
  7856 ;; Auto vars:     Size  Location     Type
  7857 ;;  sw              1   72[BANK0 ] unsigned char 
  7858 ;;  status          1   71[BANK0 ] unsigned char 
  7859 ;; Return value:  Size  Location     Type
  7860 ;;		None               void
  7861 ;; Registers used:
  7862 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7863 ;; Tracked objects:
  7864 ;;		On entry : 0/0
  7865 ;;		On exit  : 0/0
  7866 ;;		Unchanged: 0/0
  7867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7869 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7870 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7871 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7872 ;;Total ram usage:        3 bytes
  7873 ;; Hardware stack levels used:    1
  7874 ;; Hardware stack levels required when called:   10
  7875 ;; This function calls:
  7876 ;;		_getDimmerLights_Status
  7877 ;;		_setDelayOff_GO
  7878 ;;		_setDimmerLights_SwOff
  7879 ;;		_setDimmerLights_SwOn
  7880 ;;		_setRF_DimmerLights
  7881 ;; This function is called by:
  7882 ;;		_setControl_Lights_Table
  7883 ;; This function uses a non-reentrant model
  7884 ;;
  7885                           
  7886                           
  7887                           ;psect for function _setRFSW_Control
  7888  1642                     _setRFSW_Control:	
  7889                           
  7890                           ;incstack = 0
  7891                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7892                           ;setRFSW_Control@sw stored from wreg
  7893  1642  0020               	movlb	0	; select bank0
  7894  1643  00E8               	movwf	setRFSW_Control@sw
  7895                           
  7896                           ;RF_Control_B1.c: 474: char status = 0;
  7897  1644  01E7               	clrf	setRFSW_Control@status
  7898                           
  7899                           ;RF_Control_B1.c: 478: setDimmerLights_SwOn(sw);
  7900  1645  0868               	movf	setRFSW_Control@sw,w
  7901  1646  3193  23CA  3196   	fcall	_setDimmerLights_SwOn
  7902                           
  7903                           ;RF_Control_B1.c: 479: status = getDimmerLights_Status(sw);
  7904  1649  0020               	movlb	0	; select bank0
  7905  164A  0868               	movf	setRFSW_Control@sw,w
  7906  164B  319B  23AA  3196   	fcall	_getDimmerLights_Status
  7907  164E  0020               	movlb	0	; select bank0
  7908  164F  00E6               	movwf	??_setRFSW_Control
  7909  1650  0866               	movf	??_setRFSW_Control,w
  7910  1651  00E7               	movwf	setRFSW_Control@status
  7911                           
  7912                           ;RF_Control_B1.c: 481: if (status == 1) {
  7913  1652  0867               	movf	setRFSW_Control@status,w
  7914  1653  3A01               	xorlw	1
  7915  1654  1D03               	skipz
  7916  1655  2E6F               	goto	l6372
  7917                           
  7918                           ;RF_Control_B1.c: 482: if (RF_Data[16] == 0x80) {
  7919  1656  0023               	movlb	3	; select bank3
  7920  1657  0830               	movf	(_RF_Data^(0+384)+16),w
  7921  1658  3A80               	xorlw	128
  7922  1659  1D03               	skipz
  7923  165A  2E68               	goto	l2049
  7924                           
  7925                           ;RF_Control_B1.c: 483: setDelayOff_GO(sw, 1, RF_Data[17]);
  7926  165B  0020               	movlb	0	; select bank0
  7927  165C  01AA               	clrf	setDelayOff_GO@command
  7928  165D  0AAA               	incf	setDelayOff_GO@command,f
  7929  165E  0023               	movlb	3	; select bank3
  7930  165F  0831               	movf	(_RF_Data^(0+384)+17),w
  7931  1660  0020               	movlb	0	; select bank0
  7932  1661  00E6               	movwf	??_setRFSW_Control
  7933  1662  0866               	movf	??_setRFSW_Control,w
  7934  1663  00AB               	movwf	setDelayOff_GO@value
  7935  1664  0868               	movf	setRFSW_Control@sw,w
  7936  1665  3188  2061  3196   	fcall	_setDelayOff_GO
  7937  1668                     l2049:	
  7938                           
  7939                           ;RF_Control_B1.c: 484: }
  7940                           ;RF_Control_B1.c: 486: setRF_DimmerLights(sw, 1);
  7941  1668  0020               	movlb	0	; select bank0
  7942  1669  01DD               	clrf	setRF_DimmerLights@on
  7943  166A  0ADD               	incf	setRF_DimmerLights@on,f
  7944  166B  0868               	movf	setRFSW_Control@sw,w
  7945  166C  3189  21ED         	fcall	_setRF_DimmerLights
  7946                           
  7947                           ;RF_Control_B1.c: 488: } else {
  7948  166E  0008               	return
  7949  166F                     l6372:	
  7950                           
  7951                           ;RF_Control_B1.c: 489: if (RF_Data[16] == 0x80) {
  7952  166F  0023               	movlb	3	; select bank3
  7953  1670  0830               	movf	(_RF_Data^(0+384)+16),w
  7954  1671  3A80               	xorlw	128
  7955  1672  1D03               	skipz
  7956  1673  2E88               	goto	l6376
  7957                           
  7958                           ;RF_Control_B1.c: 490: setDelayOff_GO(sw, 1, RF_Data[17]);
  7959  1674  0020               	movlb	0	; select bank0
  7960  1675  01AA               	clrf	setDelayOff_GO@command
  7961  1676  0AAA               	incf	setDelayOff_GO@command,f
  7962  1677  0023               	movlb	3	; select bank3
  7963  1678  0831               	movf	(_RF_Data^(0+384)+17),w
  7964  1679  0020               	movlb	0	; select bank0
  7965  167A  00E6               	movwf	??_setRFSW_Control
  7966  167B  0866               	movf	??_setRFSW_Control,w
  7967  167C  00AB               	movwf	setDelayOff_GO@value
  7968  167D  0868               	movf	setRFSW_Control@sw,w
  7969  167E  3188  2061  3196   	fcall	_setDelayOff_GO
  7970                           
  7971                           ;RF_Control_B1.c: 491: setRF_DimmerLights(sw, 1);
  7972  1681  0020               	movlb	0	; select bank0
  7973  1682  01DD               	clrf	setRF_DimmerLights@on
  7974  1683  0ADD               	incf	setRF_DimmerLights@on,f
  7975  1684  0868               	movf	setRFSW_Control@sw,w
  7976  1685  3189  21ED         	fcall	_setRF_DimmerLights
  7977                           
  7978                           ;RF_Control_B1.c: 492: } else {
  7979  1687  0008               	return
  7980  1688                     l6376:	
  7981                           
  7982                           ;RF_Control_B1.c: 494: setDimmerLights_SwOff(sw);
  7983  1688  0020               	movlb	0	; select bank0
  7984  1689  0868               	movf	setRFSW_Control@sw,w
  7985  168A  3188  2002  3196   	fcall	_setDimmerLights_SwOff
  7986                           
  7987                           ;RF_Control_B1.c: 495: setRF_DimmerLights(sw, 0);
  7988  168D  0020               	movlb	0	; select bank0
  7989  168E  01DD               	clrf	setRF_DimmerLights@on
  7990  168F  0868               	movf	setRFSW_Control@sw,w
  7991  1690  3189  21ED  3196   	fcall	_setRF_DimmerLights
  7992                           
  7993                           ;RF_Control_B1.c: 497: setDelayOff_GO(sw, 0, 0);
  7994  1693  0020               	movlb	0	; select bank0
  7995  1694  01AA               	clrf	setDelayOff_GO@command
  7996  1695  01AB               	clrf	setDelayOff_GO@value
  7997  1696  0868               	movf	setRFSW_Control@sw,w
  7998  1697  3188  2061         	fcall	_setDelayOff_GO
  7999  1699  0008               	return
  8000  169A                     __end_of_setRFSW_Control:	
  8001                           
  8002                           	psect	text31
  8003  1300                     __ptext31:	
  8004 ;; *************** function _setRFSW_AdjControl *****************
  8005 ;; Defined at:
  8006 ;;		line 503 in file "../src/RF_Control_B1.c"
  8007 ;; Parameters:    Size  Location     Type
  8008 ;;  sw              1    wreg     unsigned char 
  8009 ;; Auto vars:     Size  Location     Type
  8010 ;;  sw              1   71[BANK0 ] unsigned char 
  8011 ;;  status          1   70[BANK0 ] unsigned char 
  8012 ;; Return value:  Size  Location     Type
  8013 ;;		None               void
  8014 ;; Registers used:
  8015 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8016 ;; Tracked objects:
  8017 ;;		On entry : 0/0
  8018 ;;		On exit  : 0/0
  8019 ;;		Unchanged: 0/0
  8020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8022 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8023 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8024 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8025 ;;Total ram usage:        4 bytes
  8026 ;; Hardware stack levels used:    1
  8027 ;; Hardware stack levels required when called:   10
  8028 ;; This function calls:
  8029 ;;		_getDimmerLights_Status
  8030 ;;		_setMemory_Modify
  8031 ;;		_setRF_DimmerValue
  8032 ;;		_setTxData
  8033 ;; This function is called by:
  8034 ;;		_setControl_Lights_Table
  8035 ;; This function uses a non-reentrant model
  8036 ;;
  8037                           
  8038                           
  8039                           ;psect for function _setRFSW_AdjControl
  8040  1300                     _setRFSW_AdjControl:	
  8041                           
  8042                           ;incstack = 0
  8043                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8044                           ;setRFSW_AdjControl@sw stored from wreg
  8045  1300  0020               	movlb	0	; select bank0
  8046  1301  00E7               	movwf	setRFSW_AdjControl@sw
  8047                           
  8048                           ;RF_Control_B1.c: 504: char status = 0;
  8049  1302  01E6               	clrf	setRFSW_AdjControl@status
  8050                           
  8051                           ;RF_Control_B1.c: 506: status = getDimmerLights_Status(sw);
  8052  1303  0867               	movf	setRFSW_AdjControl@sw,w
  8053  1304  319B  23AA  3193   	fcall	_getDimmerLights_Status
  8054  1307  0020               	movlb	0	; select bank0
  8055  1308  00E4               	movwf	??_setRFSW_AdjControl
  8056  1309  0864               	movf	??_setRFSW_AdjControl,w
  8057  130A  00E6               	movwf	setRFSW_AdjControl@status
  8058                           
  8059                           ;RF_Control_B1.c: 509: if (status == 1) {
  8060  130B  0866               	movf	setRFSW_AdjControl@status,w
  8061  130C  3A01               	xorlw	1
  8062  130D  1D03               	skipz
  8063  130E  2B19               	goto	l6388
  8064                           
  8065                           ;RF_Control_B1.c: 510: setMemory_Modify(1);
  8066  130F  3001               	movlw	1
  8067  1310  319C  2459  3193   	fcall	_setMemory_Modify
  8068                           
  8069                           ;RF_Control_B1.c: 511: setRF_DimmerValue(sw);
  8070  1313  0020               	movlb	0	; select bank0
  8071  1314  0867               	movf	setRFSW_AdjControl@sw,w
  8072  1315  3191  217E  3193   	fcall	_setRF_DimmerValue
  8073                           
  8074                           ;RF_Control_B1.c: 512: } else {
  8075  1318  2B2B               	goto	l2057
  8076  1319                     l6388:	
  8077                           
  8078                           ;RF_Control_B1.c: 513: product->Data[9]=product->Data[20 + sw];
  8079  1319  0020               	movlb	0	; select bank0
  8080  131A  0867               	movf	setRFSW_AdjControl@sw,w
  8081  131B  3E14               	addlw	20
  8082  131C  076F               	addwf	_product,w
  8083  131D  00E4               	movwf	??_setRFSW_AdjControl
  8084  131E  0864               	movf	??_setRFSW_AdjControl,w
  8085  131F  0086               	movwf	6
  8086  1320  3002               	movlw	2	; select bank4/5
  8087  1321  0087               	movwf	7
  8088  1322  0801               	movf	1,w
  8089  1323  00E5               	movwf	??_setRFSW_AdjControl+1
  8090  1324  086F               	movf	_product,w
  8091  1325  3E09               	addlw	9
  8092  1326  0086               	movwf	6
  8093  1327  3002               	movlw	2	; select bank4/5
  8094  1328  0087               	movwf	7
  8095  1329  0865               	movf	??_setRFSW_AdjControl+1,w
  8096  132A  0081               	movwf	1
  8097  132B                     l2057:	
  8098                           
  8099                           ;RF_Control_B1.c: 514: }
  8100                           ;RF_Control_B1.c: 515: product->Data[17]=product->Data[26 + sw];
  8101  132B  0020               	movlb	0	; select bank0
  8102  132C  0867               	movf	setRFSW_AdjControl@sw,w
  8103  132D  3E1A               	addlw	26
  8104  132E  076F               	addwf	_product,w
  8105  132F  00E4               	movwf	??_setRFSW_AdjControl
  8106  1330  0864               	movf	??_setRFSW_AdjControl,w
  8107  1331  0086               	movwf	6
  8108  1332  3002               	movlw	2	; select bank4/5
  8109  1333  0087               	movwf	7
  8110  1334  0801               	movf	1,w
  8111  1335  00E5               	movwf	??_setRFSW_AdjControl+1
  8112  1336  086F               	movf	_product,w
  8113  1337  3E11               	addlw	17
  8114  1338  0086               	movwf	6
  8115  1339  3002               	movlw	2	; select bank4/5
  8116  133A  0087               	movwf	7
  8117  133B  0865               	movf	??_setRFSW_AdjControl+1,w
  8118  133C  0081               	movwf	1
  8119                           
  8120                           ;RF_Control_B1.c: 516: setTxData();
  8121  133D  318F  2743         	fcall	_setTxData
  8122  133F  0008               	return
  8123  1340                     __end_of_setRFSW_AdjControl:	
  8124                           
  8125                           	psect	text32
  8126  117E                     __ptext32:	
  8127 ;; *************** function _setRF_DimmerValue *****************
  8128 ;; Defined at:
  8129 ;;		line 521 in file "../src/RF_Control_B1.c"
  8130 ;; Parameters:    Size  Location     Type
  8131 ;;  lights          1    wreg     unsigned char 
  8132 ;; Auto vars:     Size  Location     Type
  8133 ;;  lights          1   67[BANK0 ] unsigned char 
  8134 ;; Return value:  Size  Location     Type
  8135 ;;		None               void
  8136 ;; Registers used:
  8137 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8138 ;; Tracked objects:
  8139 ;;		On entry : 0/0
  8140 ;;		On exit  : 0/0
  8141 ;;		Unchanged: 0/0
  8142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8144 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8145 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8146 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8147 ;;Total ram usage:        3 bytes
  8148 ;; Hardware stack levels used:    1
  8149 ;; Hardware stack levels required when called:    9
  8150 ;; This function calls:
  8151 ;;		_setDimmerLights_AdjRF
  8152 ;; This function is called by:
  8153 ;;		_setRFSW_AdjControl
  8154 ;; This function uses a non-reentrant model
  8155 ;;
  8156                           
  8157                           
  8158                           ;psect for function _setRF_DimmerValue
  8159  117E                     _setRF_DimmerValue:	
  8160                           
  8161                           ;incstack = 0
  8162                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8163                           ;setRF_DimmerValue@lights stored from wreg
  8164  117E  0020               	movlb	0	; select bank0
  8165  117F  00E3               	movwf	setRF_DimmerValue@lights
  8166                           
  8167                           ;RF_Control_B1.c: 522: if (RF_Data[9] > 0x64) {
  8168  1180  3065               	movlw	101
  8169  1181  0023               	movlb	3	; select bank3
  8170  1182  0229               	subwf	(_RF_Data^(0+384)+9),w
  8171  1183  1C03               	skipc
  8172  1184  298B               	goto	l6296
  8173                           
  8174                           ;RF_Control_B1.c: 523: RF_Data[9] = 0x64;
  8175  1185  3064               	movlw	100
  8176  1186  0020               	movlb	0	; select bank0
  8177  1187  00E1               	movwf	??_setRF_DimmerValue
  8178  1188  0861               	movf	??_setRF_DimmerValue,w
  8179  1189  0023               	movlb	3	; select bank3
  8180  118A  00A9               	movwf	(_RF_Data^(0+384)+9)
  8181  118B                     l6296:	
  8182                           
  8183                           ;RF_Control_B1.c: 524: }
  8184                           ;RF_Control_B1.c: 525: product->Data[9]=RF_Data[9];
  8185  118B  0829               	movf	(_RF_Data^(0+384)+9),w
  8186  118C  0020               	movlb	0	; select bank0
  8187  118D  00E1               	movwf	??_setRF_DimmerValue
  8188  118E  086F               	movf	_product,w
  8189  118F  3E09               	addlw	9
  8190  1190  0086               	movwf	6
  8191  1191  3002               	movlw	2	; select bank4/5
  8192  1192  0087               	movwf	7
  8193  1193  0861               	movf	??_setRF_DimmerValue,w
  8194  1194  0081               	movwf	1
  8195                           
  8196                           ;RF_Control_B1.c: 526: product->Data[11]=lights;
  8197  1195  0863               	movf	setRF_DimmerValue@lights,w
  8198  1196  00E1               	movwf	??_setRF_DimmerValue
  8199  1197  086F               	movf	_product,w
  8200  1198  3E0B               	addlw	11
  8201  1199  0086               	movwf	6
  8202  119A  3002               	movlw	2	; select bank4/5
  8203  119B  0087               	movwf	7
  8204  119C  0861               	movf	??_setRF_DimmerValue,w
  8205  119D  0081               	movwf	1
  8206                           
  8207                           ;RF_Control_B1.c: 527: product->Data[(20 + lights)]=product->Data[9];
  8208  119E  086F               	movf	_product,w
  8209  119F  3E09               	addlw	9
  8210  11A0  0086               	movwf	6
  8211  11A1  3002               	movlw	2	; select bank4/5
  8212  11A2  0087               	movwf	7
  8213  11A3  0801               	movf	1,w
  8214  11A4  00E1               	movwf	??_setRF_DimmerValue
  8215  11A5  0863               	movf	setRF_DimmerValue@lights,w
  8216  11A6  3E14               	addlw	20
  8217  11A7  076F               	addwf	_product,w
  8218  11A8  00E2               	movwf	??_setRF_DimmerValue+1
  8219  11A9  0862               	movf	??_setRF_DimmerValue+1,w
  8220  11AA  0086               	movwf	6
  8221  11AB  3002               	movlw	2	; select bank4/5
  8222  11AC  0087               	movwf	7
  8223  11AD  0861               	movf	??_setRF_DimmerValue,w
  8224  11AE  0081               	movwf	1
  8225                           
  8226                           ;RF_Control_B1.c: 528: setDimmerLights_AdjRF(lights);
  8227  11AF  0863               	movf	setRF_DimmerValue@lights,w
  8228  11B0  319F  271E         	fcall	_setDimmerLights_AdjRF
  8229  11B2  0008               	return
  8230  11B3                     __end_of_setRF_DimmerValue:	
  8231                           
  8232                           	psect	text33
  8233  1F1E                     __ptext33:	
  8234 ;; *************** function _setDimmerLights_AdjRF *****************
  8235 ;; Defined at:
  8236 ;;		line 780 in file "../src/Dimmer_B1.c"
  8237 ;; Parameters:    Size  Location     Type
  8238 ;;  lights          1    wreg     unsigned char 
  8239 ;; Auto vars:     Size  Location     Type
  8240 ;;  lights          1   64[BANK0 ] unsigned char 
  8241 ;; Return value:  Size  Location     Type
  8242 ;;		None               void
  8243 ;; Registers used:
  8244 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8245 ;; Tracked objects:
  8246 ;;		On entry : 0/0
  8247 ;;		On exit  : 0/0
  8248 ;;		Unchanged: 0/0
  8249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8251 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8252 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8253 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8254 ;;Total ram usage:        2 bytes
  8255 ;; Hardware stack levels used:    1
  8256 ;; Hardware stack levels required when called:    8
  8257 ;; This function calls:
  8258 ;;		_DimmerLightsPointSelect
  8259 ;;		_getPercentValue
  8260 ;; This function is called by:
  8261 ;;		_setRF_DimmerValue
  8262 ;; This function uses a non-reentrant model
  8263 ;;
  8264                           
  8265                           
  8266                           ;psect for function _setDimmerLights_AdjRF
  8267  1F1E                     _setDimmerLights_AdjRF:	
  8268                           
  8269                           ;incstack = 0
  8270                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8271                           ;setDimmerLights_AdjRF@lights stored from wreg
  8272  1F1E  0020               	movlb	0	; select bank0
  8273  1F1F  00E0               	movwf	setDimmerLights_AdjRF@lights
  8274                           
  8275                           ;Dimmer_B1.c: 781: DimmerLightsPointSelect(lights);
  8276  1F20  0860               	movf	setDimmerLights_AdjRF@lights,w
  8277  1F21  319C  2446  319F   	fcall	_DimmerLightsPointSelect
  8278                           
  8279                           ;Dimmer_B1.c: 782: DimmerLights->AdjRF = 1;
  8280  1F24  0879               	movf	_DimmerLights,w
  8281  1F25  0086               	movwf	6
  8282  1F26  3001               	movlw	1	; select bank2/3
  8283  1F27  0087               	movwf	7
  8284  1F28  1501               	bsf	1,2
  8285                           
  8286                           ;Dimmer_B1.c: 783: DimmerLights->Signal = 1;
  8287  1F29  0879               	movf	_DimmerLights,w
  8288  1F2A  0086               	movwf	6
  8289  1F2B  3001               	movlw	1	; select bank2/3
  8290  1F2C  0087               	movwf	7
  8291  1F2D  1481               	bsf	1,1
  8292                           
  8293                           ;Dimmer_B1.c: 784: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8294  1F2E  0020               	movlb	0	; select bank0
  8295  1F2F  086F               	movf	_product,w
  8296  1F30  3E09               	addlw	9
  8297  1F31  0086               	movwf	6
  8298  1F32  3002               	movlw	2	; select bank4/5
  8299  1F33  0087               	movwf	7
  8300  1F34  0801               	movf	1,w
  8301  1F35  3197  27A5         	fcall	_getPercentValue
  8302  1F37  0020               	movlb	0	; select bank0
  8303  1F38  00DF               	movwf	??_setDimmerLights_AdjRF
  8304  1F39  0879               	movf	_DimmerLights,w
  8305  1F3A  3E05               	addlw	5
  8306  1F3B  0086               	movwf	6
  8307  1F3C  3001               	movlw	1	; select bank2/3
  8308  1F3D  0087               	movwf	7
  8309  1F3E  085F               	movf	??_setDimmerLights_AdjRF,w
  8310  1F3F  0081               	movwf	1
  8311  1F40  0008               	return
  8312  1F41                     __end_of_setDimmerLights_AdjRF:	
  8313                           
  8314                           	psect	text34
  8315  17A5                     __ptext34:	
  8316 ;; *************** function _getPercentValue *****************
  8317 ;; Defined at:
  8318 ;;		line 892 in file "../src/Dimmer_B1.c"
  8319 ;; Parameters:    Size  Location     Type
  8320 ;;  value           1    wreg     unsigned char 
  8321 ;; Auto vars:     Size  Location     Type
  8322 ;;  value           1   59[BANK0 ] unsigned char 
  8323 ;;  i               3   60[BANK0 ] float 
  8324 ;; Return value:  Size  Location     Type
  8325 ;;                  1    wreg      unsigned char 
  8326 ;; Registers used:
  8327 ;;		wreg, status,2, status,0, pclath, cstack
  8328 ;; Tracked objects:
  8329 ;;		On entry : 0/0
  8330 ;;		On exit  : 0/0
  8331 ;;		Unchanged: 0/0
  8332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8334 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8335 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8336 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8337 ;;Total ram usage:        6 bytes
  8338 ;; Hardware stack levels used:    1
  8339 ;; Hardware stack levels required when called:    7
  8340 ;; This function calls:
  8341 ;;		___awtoft
  8342 ;;		___ftadd
  8343 ;;		___ftdiv
  8344 ;;		___ftmul
  8345 ;;		___fttol
  8346 ;; This function is called by:
  8347 ;;		_setDimmerLights_AdjRF
  8348 ;; This function uses a non-reentrant model
  8349 ;;
  8350                           
  8351                           
  8352                           ;psect for function _getPercentValue
  8353  17A5                     _getPercentValue:	
  8354                           
  8355                           ;incstack = 0
  8356                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8357                           ;getPercentValue@value stored from wreg
  8358  17A5  0020               	movlb	0	; select bank0
  8359  17A6  00DB               	movwf	getPercentValue@value
  8360                           
  8361                           ;Dimmer_B1.c: 900: float i = ((char)(80*0.8)) - ((char)(10*0.8));
  8362  17A7  3000               	movlw	0
  8363  17A8  00DC               	movwf	getPercentValue@i
  8364  17A9  3060               	movlw	96
  8365  17AA  00DD               	movwf	getPercentValue@i+1
  8366  17AB  3042               	movlw	66
  8367  17AC  00DE               	movwf	getPercentValue@i+2
  8368                           
  8369                           ;Dimmer_B1.c: 901: i /= 100;
  8370  17AD  3000               	movlw	0
  8371  17AE  00AE               	movwf	___ftdiv@f2
  8372  17AF  30C8               	movlw	200
  8373  17B0  00AF               	movwf	___ftdiv@f2+1
  8374  17B1  3042               	movlw	66
  8375  17B2  00B0               	movwf	___ftdiv@f2+2
  8376  17B3  085C               	movf	getPercentValue@i,w
  8377  17B4  00B1               	movwf	___ftdiv@f1
  8378  17B5  085D               	movf	getPercentValue@i+1,w
  8379  17B6  00B2               	movwf	___ftdiv@f1+1
  8380  17B7  085E               	movf	getPercentValue@i+2,w
  8381  17B8  00B3               	movwf	___ftdiv@f1+2
  8382  17B9  318D  25E6  3197   	fcall	___ftdiv
  8383  17BC  0020               	movlb	0	; select bank0
  8384  17BD  082E               	movf	?___ftdiv,w
  8385  17BE  00DC               	movwf	getPercentValue@i
  8386  17BF  082F               	movf	?___ftdiv+1,w
  8387  17C0  00DD               	movwf	getPercentValue@i+1
  8388  17C1  0830               	movf	?___ftdiv+2,w
  8389  17C2  00DE               	movwf	getPercentValue@i+2
  8390                           
  8391                           ;Dimmer_B1.c: 903: return (char) (((100 - value) * i) + ((char)(80*0.8)));
  8392  17C3  085B               	movf	getPercentValue@value,w
  8393  17C4  00D9               	movwf	??_getPercentValue
  8394  17C5  01DA               	clrf	??_getPercentValue+1
  8395  17C6  09D9               	comf	??_getPercentValue,f
  8396  17C7  09DA               	comf	??_getPercentValue+1,f
  8397  17C8  0AD9               	incf	??_getPercentValue,f
  8398  17C9  1903               	skipnz
  8399  17CA  0ADA               	incf	??_getPercentValue+1,f
  8400  17CB  0859               	movf	??_getPercentValue,w
  8401  17CC  3E64               	addlw	100
  8402  17CD  00A8               	movwf	___awtoft@c
  8403  17CE  3000               	movlw	0
  8404  17CF  3D5A               	addwfc	??_getPercentValue+1,w
  8405  17D0  00A9               	movwf	___awtoft@c+1
  8406  17D1  319E  26D9  3197   	fcall	___awtoft
  8407  17D4  0020               	movlb	0	; select bank0
  8408  17D5  0828               	movf	?___awtoft,w
  8409  17D6  00B1               	movwf	___ftmul@f2
  8410  17D7  0829               	movf	?___awtoft+1,w
  8411  17D8  00B2               	movwf	___ftmul@f2+1
  8412  17D9  082A               	movf	?___awtoft+2,w
  8413  17DA  00B3               	movwf	___ftmul@f2+2
  8414  17DB  085C               	movf	getPercentValue@i,w
  8415  17DC  00AE               	movwf	___ftmul@f1
  8416  17DD  085D               	movf	getPercentValue@i+1,w
  8417  17DE  00AF               	movwf	___ftmul@f1+1
  8418  17DF  085E               	movf	getPercentValue@i+2,w
  8419  17E0  00B0               	movwf	___ftmul@f1+2
  8420  17E1  318E  268F  3197   	fcall	___ftmul
  8421  17E4  0020               	movlb	0	; select bank0
  8422  17E5  082E               	movf	?___ftmul,w
  8423  17E6  00C1               	movwf	___ftadd@f2
  8424  17E7  082F               	movf	?___ftmul+1,w
  8425  17E8  00C2               	movwf	___ftadd@f2+1
  8426  17E9  0830               	movf	?___ftmul+2,w
  8427  17EA  00C3               	movwf	___ftadd@f2+2
  8428  17EB  3000               	movlw	0
  8429  17EC  00BE               	movwf	___ftadd@f1
  8430  17ED  3080               	movlw	128
  8431  17EE  00BF               	movwf	___ftadd@f1+1
  8432  17EF  3042               	movlw	66
  8433  17F0  00C0               	movwf	___ftadd@f1+2
  8434  17F1  3184  24DC  3197   	fcall	___ftadd
  8435  17F4  0020               	movlb	0	; select bank0
  8436  17F5  083E               	movf	?___ftadd,w
  8437  17F6  00CB               	movwf	___fttol@f1
  8438  17F7  083F               	movf	?___ftadd+1,w
  8439  17F8  00CC               	movwf	___fttol@f1+1
  8440  17F9  0840               	movf	?___ftadd+2,w
  8441  17FA  00CD               	movwf	___fttol@f1+2
  8442  17FB  318C  2433         	fcall	___fttol
  8443  17FD  0020               	movlb	0	; select bank0
  8444  17FE  084B               	movf	?___fttol,w
  8445  17FF  0008               	return
  8446  1800                     __end_of_getPercentValue:	
  8447                           
  8448                           	psect	text35
  8449  0E8F                     __ptext35:	
  8450 ;; *************** function ___ftmul *****************
  8451 ;; Defined at:
  8452 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8453 ;; Parameters:    Size  Location     Type
  8454 ;;  f1              3   14[BANK0 ] float 
  8455 ;;  f2              3   17[BANK0 ] float 
  8456 ;; Auto vars:     Size  Location     Type
  8457 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8458 ;;  sign            1   29[BANK0 ] unsigned char 
  8459 ;;  cntr            1   28[BANK0 ] unsigned char 
  8460 ;;  exp             1   24[BANK0 ] unsigned char 
  8461 ;; Return value:  Size  Location     Type
  8462 ;;                  3   14[BANK0 ] float 
  8463 ;; Registers used:
  8464 ;;		wreg, status,2, status,0, pclath, cstack
  8465 ;; Tracked objects:
  8466 ;;		On entry : 0/0
  8467 ;;		On exit  : 0/0
  8468 ;;		Unchanged: 0/0
  8469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8470 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8471 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8472 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8473 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8474 ;;Total ram usage:       16 bytes
  8475 ;; Hardware stack levels used:    1
  8476 ;; Hardware stack levels required when called:    6
  8477 ;; This function calls:
  8478 ;;		___ftpack
  8479 ;; This function is called by:
  8480 ;;		_getPercentValue
  8481 ;; This function uses a non-reentrant model
  8482 ;;
  8483                           
  8484                           
  8485                           ;psect for function ___ftmul
  8486  0E8F                     ___ftmul:	
  8487                           
  8488                           ;incstack = 0
  8489                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8490  0E8F  0020               	movlb	0	; select bank0
  8491  0E90  082E               	movf	___ftmul@f1,w
  8492  0E91  00B4               	movwf	??___ftmul
  8493  0E92  082F               	movf	___ftmul@f1+1,w
  8494  0E93  00B5               	movwf	??___ftmul+1
  8495  0E94  0830               	movf	___ftmul@f1+2,w
  8496  0E95  00B6               	movwf	??___ftmul+2
  8497  0E96  1003               	clrc
  8498  0E97  0D35               	rlf	??___ftmul+1,w
  8499  0E98  0D36               	rlf	??___ftmul+2,w
  8500  0E99  00B7               	movwf	??___ftmul+3
  8501  0E9A  0837               	movf	??___ftmul+3,w
  8502  0E9B  00B8               	movwf	___ftmul@exp
  8503  0E9C  08B8               	movf	___ftmul@exp,f
  8504  0E9D  1D03               	skipz
  8505  0E9E  2EA6               	goto	l5912
  8506  0E9F  3000               	movlw	0
  8507  0EA0  00AE               	movwf	?___ftmul
  8508  0EA1  3000               	movlw	0
  8509  0EA2  00AF               	movwf	?___ftmul+1
  8510  0EA3  3000               	movlw	0
  8511  0EA4  00B0               	movwf	?___ftmul+2
  8512  0EA5  0008               	return
  8513  0EA6                     l5912:	
  8514  0EA6  0831               	movf	___ftmul@f2,w
  8515  0EA7  00B4               	movwf	??___ftmul
  8516  0EA8  0832               	movf	___ftmul@f2+1,w
  8517  0EA9  00B5               	movwf	??___ftmul+1
  8518  0EAA  0833               	movf	___ftmul@f2+2,w
  8519  0EAB  00B6               	movwf	??___ftmul+2
  8520  0EAC  1003               	clrc
  8521  0EAD  0D35               	rlf	??___ftmul+1,w
  8522  0EAE  0D36               	rlf	??___ftmul+2,w
  8523  0EAF  00B7               	movwf	??___ftmul+3
  8524  0EB0  0837               	movf	??___ftmul+3,w
  8525  0EB1  00BD               	movwf	___ftmul@sign
  8526  0EB2  08BD               	movf	___ftmul@sign,f
  8527  0EB3  1D03               	skipz
  8528  0EB4  2EBC               	goto	l5918
  8529  0EB5  3000               	movlw	0
  8530  0EB6  00AE               	movwf	?___ftmul
  8531  0EB7  3000               	movlw	0
  8532  0EB8  00AF               	movwf	?___ftmul+1
  8533  0EB9  3000               	movlw	0
  8534  0EBA  00B0               	movwf	?___ftmul+2
  8535  0EBB  0008               	return
  8536  0EBC                     l5918:	
  8537  0EBC  083D               	movf	___ftmul@sign,w
  8538  0EBD  3E7B               	addlw	123
  8539  0EBE  00B4               	movwf	??___ftmul
  8540  0EBF  0834               	movf	??___ftmul,w
  8541  0EC0  07B8               	addwf	___ftmul@exp,f
  8542  0EC1  082E               	movf	___ftmul@f1,w
  8543  0EC2  00B4               	movwf	??___ftmul
  8544  0EC3  082F               	movf	___ftmul@f1+1,w
  8545  0EC4  00B5               	movwf	??___ftmul+1
  8546  0EC5  0830               	movf	___ftmul@f1+2,w
  8547  0EC6  00B6               	movwf	??___ftmul+2
  8548  0EC7  3010               	movlw	16
  8549  0EC8                     u4675:	
  8550  0EC8  36B6               	lsrf	??___ftmul+2,f
  8551  0EC9  0CB5               	rrf	??___ftmul+1,f
  8552  0ECA  0CB4               	rrf	??___ftmul,f
  8553  0ECB  0B89               	decfsz	9,f
  8554  0ECC  2EC8               	goto	u4675
  8555  0ECD  0834               	movf	??___ftmul,w
  8556  0ECE  00B7               	movwf	??___ftmul+3
  8557  0ECF  0837               	movf	??___ftmul+3,w
  8558  0ED0  00BD               	movwf	___ftmul@sign
  8559  0ED1  0831               	movf	___ftmul@f2,w
  8560  0ED2  00B4               	movwf	??___ftmul
  8561  0ED3  0832               	movf	___ftmul@f2+1,w
  8562  0ED4  00B5               	movwf	??___ftmul+1
  8563  0ED5  0833               	movf	___ftmul@f2+2,w
  8564  0ED6  00B6               	movwf	??___ftmul+2
  8565  0ED7  3010               	movlw	16
  8566  0ED8                     u4685:	
  8567  0ED8  36B6               	lsrf	??___ftmul+2,f
  8568  0ED9  0CB5               	rrf	??___ftmul+1,f
  8569  0EDA  0CB4               	rrf	??___ftmul,f
  8570  0EDB  0B89               	decfsz	9,f
  8571  0EDC  2ED8               	goto	u4685
  8572  0EDD  0834               	movf	??___ftmul,w
  8573  0EDE  00B7               	movwf	??___ftmul+3
  8574  0EDF  0837               	movf	??___ftmul+3,w
  8575  0EE0  06BD               	xorwf	___ftmul@sign,f
  8576  0EE1  3080               	movlw	128
  8577  0EE2  00B4               	movwf	??___ftmul
  8578  0EE3  0834               	movf	??___ftmul,w
  8579  0EE4  05BD               	andwf	___ftmul@sign,f
  8580  0EE5  17AF               	bsf	___ftmul@f1+1,7
  8581  0EE6  17B2               	bsf	___ftmul@f2+1,7
  8582  0EE7  30FF               	movlw	255
  8583  0EE8  05B1               	andwf	___ftmul@f2,f
  8584  0EE9  30FF               	movlw	255
  8585  0EEA  05B2               	andwf	___ftmul@f2+1,f
  8586  0EEB  3000               	movlw	0
  8587  0EEC  05B3               	andwf	___ftmul@f2+2,f
  8588  0EED  3000               	movlw	0
  8589  0EEE  00B9               	movwf	___ftmul@f3_as_product
  8590  0EEF  3000               	movlw	0
  8591  0EF0  00BA               	movwf	___ftmul@f3_as_product+1
  8592  0EF1  3000               	movlw	0
  8593  0EF2  00BB               	movwf	___ftmul@f3_as_product+2
  8594  0EF3  3007               	movlw	7
  8595  0EF4  00B4               	movwf	??___ftmul
  8596  0EF5  0834               	movf	??___ftmul,w
  8597  0EF6  00BC               	movwf	___ftmul@cntr
  8598  0EF7                     l5930:	
  8599  0EF7  1C2E               	btfss	___ftmul@f1,0
  8600  0EF8  2EFF               	goto	l5934
  8601  0EF9  0831               	movf	___ftmul@f2,w
  8602  0EFA  07B9               	addwf	___ftmul@f3_as_product,f
  8603  0EFB  0832               	movf	___ftmul@f2+1,w
  8604  0EFC  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8605  0EFD  0833               	movf	___ftmul@f2+2,w
  8606  0EFE  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8607  0EFF                     l5934:	
  8608  0EFF  3001               	movlw	1
  8609  0F00                     u4705:	
  8610  0F00  36B0               	lsrf	___ftmul@f1+2,f
  8611  0F01  0CAF               	rrf	___ftmul@f1+1,f
  8612  0F02  0CAE               	rrf	___ftmul@f1,f
  8613  0F03  0B89               	decfsz	9,f
  8614  0F04  2F00               	goto	u4705
  8615  0F05  3001               	movlw	1
  8616  0F06                     u4715:	
  8617  0F06  35B1               	lslf	___ftmul@f2,f
  8618  0F07  0DB2               	rlf	___ftmul@f2+1,f
  8619  0F08  0DB3               	rlf	___ftmul@f2+2,f
  8620  0F09  0B89               	decfsz	9,f
  8621  0F0A  2F06               	goto	u4715
  8622  0F0B  3001               	movlw	1
  8623  0F0C  02BC               	subwf	___ftmul@cntr,f
  8624  0F0D  1D03               	btfss	3,2
  8625  0F0E  2EF7               	goto	l5930
  8626  0F0F  3009               	movlw	9
  8627  0F10  00B4               	movwf	??___ftmul
  8628  0F11  0834               	movf	??___ftmul,w
  8629  0F12  00BC               	movwf	___ftmul@cntr
  8630  0F13                     l5942:	
  8631  0F13  1C2E               	btfss	___ftmul@f1,0
  8632  0F14  2F1B               	goto	l5946
  8633  0F15  0831               	movf	___ftmul@f2,w
  8634  0F16  07B9               	addwf	___ftmul@f3_as_product,f
  8635  0F17  0832               	movf	___ftmul@f2+1,w
  8636  0F18  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8637  0F19  0833               	movf	___ftmul@f2+2,w
  8638  0F1A  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8639  0F1B                     l5946:	
  8640  0F1B  3001               	movlw	1
  8641  0F1C                     u4745:	
  8642  0F1C  36B0               	lsrf	___ftmul@f1+2,f
  8643  0F1D  0CAF               	rrf	___ftmul@f1+1,f
  8644  0F1E  0CAE               	rrf	___ftmul@f1,f
  8645  0F1F  0B89               	decfsz	9,f
  8646  0F20  2F1C               	goto	u4745
  8647  0F21  3001               	movlw	1
  8648  0F22                     u4755:	
  8649  0F22  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8650  0F23  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8651  0F24  0CB9               	rrf	___ftmul@f3_as_product,f
  8652  0F25  0B89               	decfsz	9,f
  8653  0F26  2F22               	goto	u4755
  8654  0F27  3001               	movlw	1
  8655  0F28  02BC               	subwf	___ftmul@cntr,f
  8656  0F29  1D03               	btfss	3,2
  8657  0F2A  2F13               	goto	l5942
  8658  0F2B  0839               	movf	___ftmul@f3_as_product,w
  8659  0F2C  00A0               	movwf	___ftpack@arg
  8660  0F2D  083A               	movf	___ftmul@f3_as_product+1,w
  8661  0F2E  00A1               	movwf	___ftpack@arg+1
  8662  0F2F  083B               	movf	___ftmul@f3_as_product+2,w
  8663  0F30  00A2               	movwf	___ftpack@arg+2
  8664  0F31  0838               	movf	___ftmul@exp,w
  8665  0F32  00B4               	movwf	??___ftmul
  8666  0F33  0834               	movf	??___ftmul,w
  8667  0F34  00A3               	movwf	___ftpack@exp
  8668  0F35  083D               	movf	___ftmul@sign,w
  8669  0F36  00B5               	movwf	??___ftmul+1
  8670  0F37  0835               	movf	??___ftmul+1,w
  8671  0F38  00A4               	movwf	___ftpack@sign
  8672  0F39  3188  20C2         	fcall	___ftpack
  8673  0F3B  0020               	movlb	0	; select bank0
  8674  0F3C  0820               	movf	?___ftpack,w
  8675  0F3D  00AE               	movwf	?___ftmul
  8676  0F3E  0821               	movf	?___ftpack+1,w
  8677  0F3F  00AF               	movwf	?___ftmul+1
  8678  0F40  0822               	movf	?___ftpack+2,w
  8679  0F41  00B0               	movwf	?___ftmul+2
  8680  0F42  0008               	return
  8681  0F43                     __end_of___ftmul:	
  8682                           
  8683                           	psect	text36
  8684  04DC                     __ptext36:	
  8685 ;; *************** function ___ftadd *****************
  8686 ;; Defined at:
  8687 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8688 ;; Parameters:    Size  Location     Type
  8689 ;;  f1              3   30[BANK0 ] float 
  8690 ;;  f2              3   33[BANK0 ] float 
  8691 ;; Auto vars:     Size  Location     Type
  8692 ;;  exp1            1   42[BANK0 ] unsigned char 
  8693 ;;  exp2            1   41[BANK0 ] unsigned char 
  8694 ;;  sign            1   40[BANK0 ] unsigned char 
  8695 ;; Return value:  Size  Location     Type
  8696 ;;                  3   30[BANK0 ] float 
  8697 ;; Registers used:
  8698 ;;		wreg, status,2, status,0, pclath, cstack
  8699 ;; Tracked objects:
  8700 ;;		On entry : 0/0
  8701 ;;		On exit  : 0/0
  8702 ;;		Unchanged: 0/0
  8703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8704 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8705 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8708 ;;Total ram usage:       13 bytes
  8709 ;; Hardware stack levels used:    1
  8710 ;; Hardware stack levels required when called:    6
  8711 ;; This function calls:
  8712 ;;		___ftpack
  8713 ;; This function is called by:
  8714 ;;		_getPercentValue
  8715 ;; This function uses a non-reentrant model
  8716 ;;
  8717                           
  8718                           
  8719                           ;psect for function ___ftadd
  8720  04DC                     ___ftadd:	
  8721                           
  8722                           ;incstack = 0
  8723                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8724  04DC  0020               	movlb	0	; select bank0
  8725  04DD  083E               	movf	___ftadd@f1,w
  8726  04DE  00C4               	movwf	??___ftadd
  8727  04DF  083F               	movf	___ftadd@f1+1,w
  8728  04E0  00C5               	movwf	??___ftadd+1
  8729  04E1  0840               	movf	___ftadd@f1+2,w
  8730  04E2  00C6               	movwf	??___ftadd+2
  8731  04E3  1003               	clrc
  8732  04E4  0D45               	rlf	??___ftadd+1,w
  8733  04E5  0D46               	rlf	??___ftadd+2,w
  8734  04E6  00C7               	movwf	??___ftadd+3
  8735  04E7  0847               	movf	??___ftadd+3,w
  8736  04E8  00CA               	movwf	___ftadd@exp1
  8737  04E9  0841               	movf	___ftadd@f2,w
  8738  04EA  00C4               	movwf	??___ftadd
  8739  04EB  0842               	movf	___ftadd@f2+1,w
  8740  04EC  00C5               	movwf	??___ftadd+1
  8741  04ED  0843               	movf	___ftadd@f2+2,w
  8742  04EE  00C6               	movwf	??___ftadd+2
  8743  04EF  1003               	clrc
  8744  04F0  0D45               	rlf	??___ftadd+1,w
  8745  04F1  0D46               	rlf	??___ftadd+2,w
  8746  04F2  00C7               	movwf	??___ftadd+3
  8747  04F3  0847               	movf	??___ftadd+3,w
  8748  04F4  00C9               	movwf	___ftadd@exp2
  8749  04F5  084A               	movf	___ftadd@exp1,w
  8750  04F6  1903               	btfsc	3,2
  8751  04F7  2D04               	goto	l5800
  8752  04F8  0849               	movf	___ftadd@exp2,w
  8753  04F9  024A               	subwf	___ftadd@exp1,w
  8754  04FA  1803               	skipnc
  8755  04FB  2D0B               	goto	l5804
  8756  04FC  034A               	decf	___ftadd@exp1,w
  8757  04FD  3AFF               	xorlw	255
  8758  04FE  0749               	addwf	___ftadd@exp2,w
  8759  04FF  00C4               	movwf	??___ftadd
  8760  0500  3019               	movlw	25
  8761  0501  0244               	subwf	??___ftadd,w
  8762  0502  1C03               	skipc
  8763  0503  2D0B               	goto	l5804
  8764  0504                     l5800:	
  8765  0504  0841               	movf	___ftadd@f2,w
  8766  0505  00BE               	movwf	?___ftadd
  8767  0506  0842               	movf	___ftadd@f2+1,w
  8768  0507  00BF               	movwf	?___ftadd+1
  8769  0508  0843               	movf	___ftadd@f2+2,w
  8770  0509  00C0               	movwf	?___ftadd+2
  8771  050A  0008               	return
  8772  050B                     l5804:	
  8773  050B  0849               	movf	___ftadd@exp2,w
  8774  050C  1903               	btfsc	3,2
  8775  050D  0008               	return
  8776  050E  084A               	movf	___ftadd@exp1,w
  8777  050F  0249               	subwf	___ftadd@exp2,w
  8778  0510  1803               	skipnc
  8779  0511  2D1A               	goto	l5810
  8780  0512  0349               	decf	___ftadd@exp2,w
  8781  0513  3AFF               	xorlw	255
  8782  0514  074A               	addwf	___ftadd@exp1,w
  8783  0515  00C4               	movwf	??___ftadd
  8784  0516  3019               	movlw	25
  8785  0517  0244               	subwf	??___ftadd,w
  8786  0518  1803               	btfsc	3,0
  8787  0519  0008               	return
  8788  051A                     l5810:	
  8789  051A  3006               	movlw	6
  8790  051B  00C4               	movwf	??___ftadd
  8791  051C  0844               	movf	??___ftadd,w
  8792  051D  00C8               	movwf	___ftadd@sign
  8793  051E  1BC0               	btfsc	___ftadd@f1+2,7
  8794  051F  17C8               	bsf	___ftadd@sign,7
  8795  0520  1BC3               	btfsc	___ftadd@f2+2,7
  8796  0521  1748               	bsf	___ftadd@sign,6
  8797  0522  17BF               	bsf	___ftadd@f1+1,7
  8798  0523  30FF               	movlw	255
  8799  0524  05BE               	andwf	___ftadd@f1,f
  8800  0525  30FF               	movlw	255
  8801  0526  05BF               	andwf	___ftadd@f1+1,f
  8802  0527  3000               	movlw	0
  8803  0528  05C0               	andwf	___ftadd@f1+2,f
  8804  0529  17C2               	bsf	___ftadd@f2+1,7
  8805  052A  30FF               	movlw	255
  8806  052B  05C1               	andwf	___ftadd@f2,f
  8807  052C  30FF               	movlw	255
  8808  052D  05C2               	andwf	___ftadd@f2+1,f
  8809  052E  3000               	movlw	0
  8810  052F  05C3               	andwf	___ftadd@f2+2,f
  8811  0530  0849               	movf	___ftadd@exp2,w
  8812  0531  024A               	subwf	___ftadd@exp1,w
  8813  0532  1803               	skipnc
  8814  0533  2D56               	goto	l5832
  8815  0534                     l5822:	
  8816  0534  3001               	movlw	1
  8817  0535                     u4435:	
  8818  0535  35C1               	lslf	___ftadd@f2,f
  8819  0536  0DC2               	rlf	___ftadd@f2+1,f
  8820  0537  0DC3               	rlf	___ftadd@f2+2,f
  8821  0538  0B89               	decfsz	9,f
  8822  0539  2D35               	goto	u4435
  8823  053A  3001               	movlw	1
  8824  053B  02C9               	subwf	___ftadd@exp2,f
  8825  053C  0849               	movf	___ftadd@exp2,w
  8826  053D  064A               	xorwf	___ftadd@exp1,w
  8827  053E  1903               	skipnz
  8828  053F  2D51               	goto	l5830
  8829  0540  3001               	movlw	1
  8830  0541  02C8               	subwf	___ftadd@sign,f
  8831  0542  0848               	movf	___ftadd@sign,w
  8832  0543  3907               	andlw	7
  8833  0544  1903               	btfsc	3,2
  8834  0545  2D51               	goto	l5830
  8835  0546  2D34               	goto	l5822
  8836  0547                     l5828:	
  8837  0547  3001               	movlw	1
  8838  0548                     u4465:	
  8839  0548  36C0               	lsrf	___ftadd@f1+2,f
  8840  0549  0CBF               	rrf	___ftadd@f1+1,f
  8841  054A  0CBE               	rrf	___ftadd@f1,f
  8842  054B  0B89               	decfsz	9,f
  8843  054C  2D48               	goto	u4465
  8844  054D  3001               	movlw	1
  8845  054E  00C4               	movwf	??___ftadd
  8846  054F  0844               	movf	??___ftadd,w
  8847  0550  07CA               	addwf	___ftadd@exp1,f
  8848  0551                     l5830:	
  8849  0551  084A               	movf	___ftadd@exp1,w
  8850  0552  0649               	xorwf	___ftadd@exp2,w
  8851  0553  1903               	btfsc	3,2
  8852  0554  2D7B               	goto	l2925
  8853  0555  2D47               	goto	l5828
  8854  0556                     l5832:	
  8855  0556  084A               	movf	___ftadd@exp1,w
  8856  0557  0249               	subwf	___ftadd@exp2,w
  8857  0558  1803               	skipnc
  8858  0559  2D7B               	goto	l2925
  8859  055A                     l5834:	
  8860  055A  3001               	movlw	1
  8861  055B                     u4495:	
  8862  055B  35BE               	lslf	___ftadd@f1,f
  8863  055C  0DBF               	rlf	___ftadd@f1+1,f
  8864  055D  0DC0               	rlf	___ftadd@f1+2,f
  8865  055E  0B89               	decfsz	9,f
  8866  055F  2D5B               	goto	u4495
  8867  0560  3001               	movlw	1
  8868  0561  02CA               	subwf	___ftadd@exp1,f
  8869  0562  0849               	movf	___ftadd@exp2,w
  8870  0563  064A               	xorwf	___ftadd@exp1,w
  8871  0564  1903               	skipnz
  8872  0565  2D77               	goto	l5842
  8873  0566  3001               	movlw	1
  8874  0567  02C8               	subwf	___ftadd@sign,f
  8875  0568  0848               	movf	___ftadd@sign,w
  8876  0569  3907               	andlw	7
  8877  056A  1903               	btfsc	3,2
  8878  056B  2D77               	goto	l5842
  8879  056C  2D5A               	goto	l5834
  8880  056D                     l5840:	
  8881  056D  3001               	movlw	1
  8882  056E                     u4525:	
  8883  056E  36C3               	lsrf	___ftadd@f2+2,f
  8884  056F  0CC2               	rrf	___ftadd@f2+1,f
  8885  0570  0CC1               	rrf	___ftadd@f2,f
  8886  0571  0B89               	decfsz	9,f
  8887  0572  2D6E               	goto	u4525
  8888  0573  3001               	movlw	1
  8889  0574  00C4               	movwf	??___ftadd
  8890  0575  0844               	movf	??___ftadd,w
  8891  0576  07C9               	addwf	___ftadd@exp2,f
  8892  0577                     l5842:	
  8893  0577  084A               	movf	___ftadd@exp1,w
  8894  0578  0649               	xorwf	___ftadd@exp2,w
  8895  0579  1D03               	skipz
  8896  057A  2D6D               	goto	l5840
  8897  057B                     l2925:	
  8898  057B  1FC8               	btfss	___ftadd@sign,7
  8899  057C  2D8D               	goto	l5846
  8900  057D  30FF               	movlw	255
  8901  057E  06BE               	xorwf	___ftadd@f1,f
  8902  057F  30FF               	movlw	255
  8903  0580  06BF               	xorwf	___ftadd@f1+1,f
  8904  0581  30FF               	movlw	255
  8905  0582  06C0               	xorwf	___ftadd@f1+2,f
  8906  0583  3001               	movlw	1
  8907  0584  07BE               	addwf	___ftadd@f1,f
  8908  0585  3000               	movlw	0
  8909  0586  1803               	skipnc
  8910  0587  3001               	movlw	1
  8911  0588  07BF               	addwf	___ftadd@f1+1,f
  8912  0589  3000               	movlw	0
  8913  058A  1803               	skipnc
  8914  058B  3001               	movlw	1
  8915  058C  07C0               	addwf	___ftadd@f1+2,f
  8916  058D                     l5846:	
  8917  058D  1F48               	btfss	___ftadd@sign,6
  8918  058E  2D9F               	goto	l5850
  8919  058F  30FF               	movlw	255
  8920  0590  06C1               	xorwf	___ftadd@f2,f
  8921  0591  30FF               	movlw	255
  8922  0592  06C2               	xorwf	___ftadd@f2+1,f
  8923  0593  30FF               	movlw	255
  8924  0594  06C3               	xorwf	___ftadd@f2+2,f
  8925  0595  3001               	movlw	1
  8926  0596  07C1               	addwf	___ftadd@f2,f
  8927  0597  3000               	movlw	0
  8928  0598  1803               	skipnc
  8929  0599  3001               	movlw	1
  8930  059A  07C2               	addwf	___ftadd@f2+1,f
  8931  059B  3000               	movlw	0
  8932  059C  1803               	skipnc
  8933  059D  3001               	movlw	1
  8934  059E  07C3               	addwf	___ftadd@f2+2,f
  8935  059F                     l5850:	
  8936  059F  01C8               	clrf	___ftadd@sign
  8937  05A0  083E               	movf	___ftadd@f1,w
  8938  05A1  07C1               	addwf	___ftadd@f2,f
  8939  05A2  083F               	movf	___ftadd@f1+1,w
  8940  05A3  3DC2               	addwfc	___ftadd@f2+1,f
  8941  05A4  0840               	movf	___ftadd@f1+2,w
  8942  05A5  3DC3               	addwfc	___ftadd@f2+2,f
  8943  05A6  1FC3               	btfss	___ftadd@f2+2,7
  8944  05A7  2DBA               	goto	l5860
  8945  05A8  30FF               	movlw	255
  8946  05A9  06C1               	xorwf	___ftadd@f2,f
  8947  05AA  30FF               	movlw	255
  8948  05AB  06C2               	xorwf	___ftadd@f2+1,f
  8949  05AC  30FF               	movlw	255
  8950  05AD  06C3               	xorwf	___ftadd@f2+2,f
  8951  05AE  3001               	movlw	1
  8952  05AF  07C1               	addwf	___ftadd@f2,f
  8953  05B0  3000               	movlw	0
  8954  05B1  1803               	skipnc
  8955  05B2  3001               	movlw	1
  8956  05B3  07C2               	addwf	___ftadd@f2+1,f
  8957  05B4  3000               	movlw	0
  8958  05B5  1803               	skipnc
  8959  05B6  3001               	movlw	1
  8960  05B7  07C3               	addwf	___ftadd@f2+2,f
  8961  05B8  01C8               	clrf	___ftadd@sign
  8962  05B9  0AC8               	incf	___ftadd@sign,f
  8963  05BA                     l5860:	
  8964  05BA  0841               	movf	___ftadd@f2,w
  8965  05BB  00A0               	movwf	___ftpack@arg
  8966  05BC  0842               	movf	___ftadd@f2+1,w
  8967  05BD  00A1               	movwf	___ftpack@arg+1
  8968  05BE  0843               	movf	___ftadd@f2+2,w
  8969  05BF  00A2               	movwf	___ftpack@arg+2
  8970  05C0  084A               	movf	___ftadd@exp1,w
  8971  05C1  00C4               	movwf	??___ftadd
  8972  05C2  0844               	movf	??___ftadd,w
  8973  05C3  00A3               	movwf	___ftpack@exp
  8974  05C4  0848               	movf	___ftadd@sign,w
  8975  05C5  00C5               	movwf	??___ftadd+1
  8976  05C6  0845               	movf	??___ftadd+1,w
  8977  05C7  00A4               	movwf	___ftpack@sign
  8978  05C8  3188  20C2         	fcall	___ftpack
  8979  05CA  0020               	movlb	0	; select bank0
  8980  05CB  0820               	movf	?___ftpack,w
  8981  05CC  00BE               	movwf	?___ftadd
  8982  05CD  0821               	movf	?___ftpack+1,w
  8983  05CE  00BF               	movwf	?___ftadd+1
  8984  05CF  0822               	movf	?___ftpack+2,w
  8985  05D0  00C0               	movwf	?___ftadd+2
  8986  05D1  0008               	return
  8987  05D2                     __end_of___ftadd:	
  8988                           
  8989                           	psect	text37
  8990  1C59                     __ptext37:	
  8991 ;; *************** function _setMemory_Modify *****************
  8992 ;; Defined at:
  8993 ;;		line 1000 in file "../src/MCU_B1.c"
  8994 ;; Parameters:    Size  Location     Type
  8995 ;;  command         1    wreg     unsigned char 
  8996 ;; Auto vars:     Size  Location     Type
  8997 ;;  command         1    1[BANK0 ] unsigned char 
  8998 ;; Return value:  Size  Location     Type
  8999 ;;		None               void
  9000 ;; Registers used:
  9001 ;;		wreg, status,2, status,0
  9002 ;; Tracked objects:
  9003 ;;		On entry : 0/0
  9004 ;;		On exit  : 0/0
  9005 ;;		Unchanged: 0/0
  9006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9008 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9009 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9010 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9011 ;;Total ram usage:        2 bytes
  9012 ;; Hardware stack levels used:    1
  9013 ;; Hardware stack levels required when called:    5
  9014 ;; This function calls:
  9015 ;;		Nothing
  9016 ;; This function is called by:
  9017 ;;		_setLog_Code
  9018 ;;		_setRFSW_AdjControl
  9019 ;; This function uses a non-reentrant model
  9020 ;;
  9021                           
  9022                           
  9023                           ;psect for function _setMemory_Modify
  9024  1C59                     _setMemory_Modify:	
  9025                           
  9026                           ;incstack = 0
  9027                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  9028                           ;setMemory_Modify@command stored from wreg
  9029  1C59  0020               	movlb	0	; select bank0
  9030  1C5A  00A1               	movwf	setMemory_Modify@command
  9031                           
  9032                           ;MCU_B1.c: 1001: Memory.Modify = command == 1 ? 1 : 0;
  9033  1C5B  0821               	movf	setMemory_Modify@command,w
  9034  1C5C  3A01               	xorlw	1
  9035  1C5D  3000               	movlw	0
  9036  1C5E  1903               	skipnz
  9037  1C5F  3001               	movlw	1
  9038  1C60  00A0               	movwf	??_setMemory_Modify
  9039  1C61  0024               	movlb	4	; select bank4
  9040  1C62  0844               	movf	(_Memory^(0+512)+36),w
  9041  1C63  0020               	movlb	0	; select bank0
  9042  1C64  0620               	xorwf	??_setMemory_Modify,w
  9043  1C65  39FE               	andlw	-2
  9044  1C66  0620               	xorwf	??_setMemory_Modify,w
  9045  1C67  0024               	movlb	4	; select bank4
  9046  1C68  00C4               	movwf	(_Memory^(0+512)+36)
  9047                           
  9048                           ;MCU_B1.c: 1002: Memory.Time = 0;
  9049  1C69  01C2               	clrf	(_Memory^(0+512)+34)
  9050  1C6A  01C3               	clrf	((_Memory+1)^(0+512)+34)
  9051  1C6B  0008               	return
  9052  1C6C                     __end_of_setMemory_Modify:	
  9053                           
  9054                           	psect	text38
  9055  1BED                     __ptext38:	
  9056 ;; *************** function _getRF_KeyStatus *****************
  9057 ;; Defined at:
  9058 ;;		line 187 in file "../src/RF_Control_B1.c"
  9059 ;; Parameters:    Size  Location     Type
  9060 ;;		None
  9061 ;; Auto vars:     Size  Location     Type
  9062 ;;  key             1    1[BANK0 ] unsigned char 
  9063 ;; Return value:  Size  Location     Type
  9064 ;;                  1    wreg      unsigned char 
  9065 ;; Registers used:
  9066 ;;		wreg, status,2
  9067 ;; Tracked objects:
  9068 ;;		On entry : 0/0
  9069 ;;		On exit  : 0/0
  9070 ;;		Unchanged: 0/0
  9071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9073 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9074 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9075 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9076 ;;Total ram usage:        3 bytes
  9077 ;; Hardware stack levels used:    1
  9078 ;; Hardware stack levels required when called:    5
  9079 ;; This function calls:
  9080 ;;		Nothing
  9081 ;; This function is called by:
  9082 ;;		_setRF_Main
  9083 ;; This function uses a non-reentrant model
  9084 ;;
  9085                           
  9086                           
  9087                           ;psect for function _getRF_KeyStatus
  9088  1BED                     _getRF_KeyStatus:	
  9089                           
  9090                           ;RF_Control_B1.c: 188: char key = 0;
  9091                           
  9092                           ;incstack = 0
  9093                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  9094  1BED  0020               	movlb	0	; select bank0
  9095  1BEE  01A1               	clrf	getRF_KeyStatus@key
  9096                           
  9097                           ;RF_Control_B1.c: 194: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  9098  1BEF  01A2               	clrf	_getRF_KeyStatus$5253
  9099  1BF0  0AA2               	incf	_getRF_KeyStatus$5253,f
  9100  1BF1  1F0C               	btfss	12,6	;volatile
  9101  1BF2  1A0C               	btfsc	12,4	;volatile
  9102  1BF3  2BF8               	goto	l6948
  9103  1BF4  1C0C               	btfss	12,0	;volatile
  9104  1BF5  188D               	btfsc	13,1	;volatile
  9105  1BF6  2BF8               	goto	l6948
  9106  1BF7  01A2               	clrf	_getRF_KeyStatus$5253
  9107  1BF8                     l6948:	
  9108  1BF8  0822               	movf	_getRF_KeyStatus$5253,w
  9109  1BF9  00A0               	movwf	??_getRF_KeyStatus
  9110  1BFA  0820               	movf	??_getRF_KeyStatus,w
  9111  1BFB  00A1               	movwf	getRF_KeyStatus@key
  9112                           
  9113                           ;RF_Control_B1.c: 200: return key;
  9114  1BFC  0821               	movf	getRF_KeyStatus@key,w
  9115  1BFD  0008               	return
  9116  1BFE                     __end_of_getRF_KeyStatus:	
  9117                           
  9118                           	psect	text39
  9119  1BDC                     __ptext39:	
  9120 ;; *************** function _getBuz_GO *****************
  9121 ;; Defined at:
  9122 ;;		line 82 in file "../src/Buzzer_B1.c"
  9123 ;; Parameters:    Size  Location     Type
  9124 ;;		None
  9125 ;; Auto vars:     Size  Location     Type
  9126 ;;  i               2    4[BANK0 ] int 
  9127 ;; Return value:  Size  Location     Type
  9128 ;;                  2    0[BANK0 ] int 
  9129 ;; Registers used:
  9130 ;;		wreg, status,2, status,0
  9131 ;; Tracked objects:
  9132 ;;		On entry : 0/0
  9133 ;;		On exit  : 0/0
  9134 ;;		Unchanged: 0/0
  9135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9136 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9137 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9138 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9139 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9140 ;;Total ram usage:        6 bytes
  9141 ;; Hardware stack levels used:    1
  9142 ;; Hardware stack levels required when called:    5
  9143 ;; This function calls:
  9144 ;;		Nothing
  9145 ;; This function is called by:
  9146 ;;		_setRF_Main
  9147 ;; This function uses a non-reentrant model
  9148 ;;
  9149                           
  9150                           
  9151                           ;psect for function _getBuz_GO
  9152  1BDC                     _getBuz_GO:	
  9153                           
  9154                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  9155                           
  9156                           ;incstack = 0
  9157                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  9158  1BDC  0021               	movlb	1	; select bank1
  9159  1BDD  0C30               	rrf	_Buz1^(0+128),w
  9160  1BDE  3901               	andlw	1
  9161  1BDF  0020               	movlb	0	; select bank0
  9162  1BE0  00A2               	movwf	??_getBuz_GO
  9163  1BE1  01A3               	clrf	??_getBuz_GO+1
  9164  1BE2  0822               	movf	??_getBuz_GO,w
  9165  1BE3  00A4               	movwf	getBuz_GO@i
  9166  1BE4  0823               	movf	??_getBuz_GO+1,w
  9167  1BE5  00A5               	movwf	getBuz_GO@i+1
  9168                           
  9169                           ;Buzzer_B1.c: 84: return i;
  9170  1BE6  0825               	movf	getBuz_GO@i+1,w
  9171  1BE7  01A1               	clrf	?_getBuz_GO+1
  9172  1BE8  07A1               	addwf	?_getBuz_GO+1,f
  9173  1BE9  0824               	movf	getBuz_GO@i,w
  9174  1BEA  01A0               	clrf	?_getBuz_GO
  9175  1BEB  07A0               	addwf	?_getBuz_GO,f
  9176  1BEC  0008               	return
  9177  1BED                     __end_of_getBuz_GO:	
  9178                           
  9179                           	psect	text40
  9180  0985                     __ptext40:	
  9181 ;; *************** function _CC2500_TxData *****************
  9182 ;; Defined at:
  9183 ;;		line 32 in file "../src/CC2500_B1.c"
  9184 ;; Parameters:    Size  Location     Type
  9185 ;;		None
  9186 ;; Auto vars:     Size  Location     Type
  9187 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9188 ;; Return value:  Size  Location     Type
  9189 ;;		None               void
  9190 ;; Registers used:
  9191 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9192 ;; Tracked objects:
  9193 ;;		On entry : 0/0
  9194 ;;		On exit  : 0/0
  9195 ;;		Unchanged: 0/0
  9196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9198 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9199 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9201 ;;Total ram usage:        2 bytes
  9202 ;; Hardware stack levels used:    1
  9203 ;; Hardware stack levels required when called:    7
  9204 ;; This function calls:
  9205 ;;		_CC2500_WriteByte
  9206 ;;		_CC2500_WriteCommand
  9207 ;;		_Timeout_Counter
  9208 ;;		_set_TimeoutCleared
  9209 ;; This function is called by:
  9210 ;;		_setRF_Main
  9211 ;; This function uses a non-reentrant model
  9212 ;;
  9213                           
  9214                           
  9215                           ;psect for function _CC2500_TxData
  9216  0985                     _CC2500_TxData:	
  9217                           
  9218                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9219                           ;CC2500_B1.c: 35: RC4 = 0;
  9220                           
  9221                           ;incstack = 0
  9222                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9223  0985  0020               	movlb	0	; select bank0
  9224  0986  120E               	bcf	14,4	;volatile
  9225                           
  9226                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9227  0987  307F               	movlw	127
  9228  0988  00A4               	movwf	??_CC2500_TxData
  9229  0989  0824               	movf	??_CC2500_TxData,w
  9230  098A  0021               	movlb	1	; select bank1
  9231  098B  00CE               	movwf	_SPI0Buffer^(0+128)
  9232                           
  9233                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9234  098C  2990               	goto	l6578
  9235  098D                     l6576:	
  9236                           
  9237                           ;CC2500_B1.c: 38: Timeout_Counter();
  9238  098D  319C  24E2  3189   	fcall	_Timeout_Counter
  9239  0990                     l6578:	
  9240  0990  0020               	movlb	0	; select bank0
  9241  0991  1D0E               	btfss	14,2	;volatile
  9242  0992  2996               	goto	l6582
  9243  0993  0021               	movlb	1	; select bank1
  9244  0994  1D2D               	btfss	(_myMain^(0+128)+13),2
  9245  0995  298D               	goto	l6576
  9246  0996                     l6582:	
  9247                           
  9248                           ;CC2500_B1.c: 39: };
  9249                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9250  0996  319A  22A5  3189   	fcall	_set_TimeoutCleared
  9251                           
  9252                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9253  0999  319D  2563  3189   	fcall	_CC2500_WriteByte
  9254                           
  9255                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9256  099C  0021               	movlb	1	; select bank1
  9257  099D  0850               	movf	_Tx_Length^(0+128),w
  9258  099E  0020               	movlb	0	; select bank0
  9259  099F  00A4               	movwf	??_CC2500_TxData
  9260  09A0  0824               	movf	??_CC2500_TxData,w
  9261  09A1  0021               	movlb	1	; select bank1
  9262  09A2  00CE               	movwf	_SPI0Buffer^(0+128)
  9263                           
  9264                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9265  09A3  319D  2563  3189   	fcall	_CC2500_WriteByte
  9266                           
  9267                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9268  09A6  0020               	movlb	0	; select bank0
  9269  09A7  01A5               	clrf	CC2500_TxData@loop_e
  9270  09A8                     l6596:	
  9271  09A8  0021               	movlb	1	; select bank1
  9272  09A9  0850               	movf	_Tx_Length^(0+128),w
  9273  09AA  0020               	movlb	0	; select bank0
  9274  09AB  0225               	subwf	CC2500_TxData@loop_e,w
  9275  09AC  1803               	btfsc	3,0
  9276  09AD  29C1               	goto	l255
  9277                           
  9278                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9279  09AE  0825               	movf	CC2500_TxData@loop_e,w
  9280  09AF  3EA0               	addlw	_RF_Data& (0+255)
  9281  09B0  0086               	movwf	6
  9282  09B1  3001               	movlw	1	; select bank3/4
  9283  09B2  0087               	movwf	7
  9284  09B3  0801               	movf	1,w
  9285  09B4  00A4               	movwf	??_CC2500_TxData
  9286  09B5  0824               	movf	??_CC2500_TxData,w
  9287  09B6  0021               	movlb	1	; select bank1
  9288  09B7  00CE               	movwf	_SPI0Buffer^(0+128)
  9289                           
  9290                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9291  09B8  319D  2563  3189   	fcall	_CC2500_WriteByte
  9292  09BB  3001               	movlw	1
  9293  09BC  0020               	movlb	0	; select bank0
  9294  09BD  00A4               	movwf	??_CC2500_TxData
  9295  09BE  0824               	movf	??_CC2500_TxData,w
  9296  09BF  07A5               	addwf	CC2500_TxData@loop_e,f
  9297  09C0  29A8               	goto	l6596
  9298  09C1                     l255:	
  9299                           
  9300                           ;CC2500_B1.c: 48: }
  9301                           ;CC2500_B1.c: 49: RC4 = 1;
  9302  09C1  160E               	bsf	14,4	;volatile
  9303                           
  9304                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9305  09C2  3035               	movlw	53
  9306  09C3  319D  2595  3189   	fcall	_CC2500_WriteCommand
  9307                           
  9308                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9309  09C6  29CA               	goto	l6602
  9310  09C7                     l6600:	
  9311                           
  9312                           ;CC2500_B1.c: 52: Timeout_Counter();
  9313  09C7  319C  24E2  3189   	fcall	_Timeout_Counter
  9314  09CA                     l6602:	
  9315  09CA  0020               	movlb	0	; select bank0
  9316  09CB  180D               	btfsc	13,0	;volatile
  9317  09CC  29D0               	goto	l6606
  9318  09CD  0021               	movlb	1	; select bank1
  9319  09CE  1D2D               	btfss	(_myMain^(0+128)+13),2
  9320  09CF  29C7               	goto	l6600
  9321  09D0                     l6606:	
  9322                           
  9323                           ;CC2500_B1.c: 53: };
  9324                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9325  09D0  319A  22A5  3189   	fcall	_set_TimeoutCleared
  9326                           
  9327                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9328  09D3  29D7               	goto	l6610
  9329  09D4                     l6608:	
  9330                           
  9331                           ;CC2500_B1.c: 57: Timeout_Counter();
  9332  09D4  319C  24E2  3189   	fcall	_Timeout_Counter
  9333  09D7                     l6610:	
  9334  09D7  0020               	movlb	0	; select bank0
  9335  09D8  1C0D               	btfss	13,0	;volatile
  9336  09D9  29DD               	goto	l6614
  9337  09DA  0021               	movlb	1	; select bank1
  9338  09DB  1D2D               	btfss	(_myMain^(0+128)+13),2
  9339  09DC  29D4               	goto	l6608
  9340  09DD                     l6614:	
  9341                           
  9342                           ;CC2500_B1.c: 58: };
  9343                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9344  09DD  319A  22A5  3189   	fcall	_set_TimeoutCleared
  9345                           
  9346                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9347  09E0  3036               	movlw	54
  9348  09E1  319D  2595  3189   	fcall	_CC2500_WriteCommand
  9349                           
  9350                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9351  09E4  303B               	movlw	59
  9352  09E5  319D  2595  3189   	fcall	_CC2500_WriteCommand
  9353                           
  9354                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  9355  09E8  303A               	movlw	58
  9356  09E9  319D  2595         	fcall	_CC2500_WriteCommand
  9357                           
  9358                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9359  09EB  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9360  09EC  0008               	return
  9361  09ED                     __end_of_CC2500_TxData:	
  9362                           
  9363                           	psect	text41
  9364  0B3C                     __ptext41:	
  9365 ;; *************** function _CC2500_RxData *****************
  9366 ;; Defined at:
  9367 ;;		line 70 in file "../src/CC2500_B1.c"
  9368 ;; Parameters:    Size  Location     Type
  9369 ;;		None
  9370 ;; Auto vars:     Size  Location     Type
  9371 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9372 ;; Return value:  Size  Location     Type
  9373 ;;		None               void
  9374 ;; Registers used:
  9375 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9376 ;; Tracked objects:
  9377 ;;		On entry : 0/0
  9378 ;;		On exit  : 0/0
  9379 ;;		Unchanged: 0/0
  9380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9382 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9383 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9384 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9385 ;;Total ram usage:        2 bytes
  9386 ;; Hardware stack levels used:    1
  9387 ;; Hardware stack levels required when called:    7
  9388 ;; This function calls:
  9389 ;;		_CC2500_ReadByte
  9390 ;;		_CC2500_ReadStatus
  9391 ;;		_CC2500_WriteByte
  9392 ;;		_Timeout_Counter
  9393 ;;		_set_TimeoutCleared
  9394 ;; This function is called by:
  9395 ;;		_setRF_Main
  9396 ;; This function uses a non-reentrant model
  9397 ;;
  9398                           
  9399                           
  9400                           ;psect for function _CC2500_RxData
  9401  0B3C                     _CC2500_RxData:	
  9402                           
  9403                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9404                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9405                           
  9406                           ;incstack = 0
  9407                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9408  0B3C  0020               	movlb	0	; select bank0
  9409  0B3D  180D               	btfsc	13,0	;volatile
  9410  0B3E  2B43               	goto	l6630
  9411  0B3F  2B4C               	goto	l6636
  9412  0B40                     l6628:	
  9413                           ;CC2500_B1.c: 76: {
  9414                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9415                           
  9416                           
  9417                           ;CC2500_B1.c: 78: Timeout_Counter();
  9418  0B40  319C  24E2  318B   	fcall	_Timeout_Counter
  9419  0B43                     l6630:	
  9420  0B43  0020               	movlb	0	; select bank0
  9421  0B44  1C0D               	btfss	13,0	;volatile
  9422  0B45  2B49               	goto	l6634
  9423  0B46  0021               	movlb	1	; select bank1
  9424  0B47  1D2D               	btfss	(_myMain^(0+128)+13),2
  9425  0B48  2B40               	goto	l6628
  9426  0B49                     l6634:	
  9427                           
  9428                           ;CC2500_B1.c: 79: };
  9429                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9430  0B49  319A  22A5  318B   	fcall	_set_TimeoutCleared
  9431  0B4C                     l6636:	
  9432                           
  9433                           ;CC2500_B1.c: 81: }
  9434                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9435  0B4C  303B               	movlw	59
  9436  0B4D  319F  2765  318B   	fcall	_CC2500_ReadStatus
  9437                           
  9438                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9439  0B50  0021               	movlb	1	; select bank1
  9440  0B51  0853               	movf	_s_data^(0+128),w
  9441  0B52  1903               	btfsc	3,2
  9442  0B53  0008               	return
  9443                           
  9444                           ;CC2500_B1.c: 86: RC4 = 0;
  9445  0B54  0020               	movlb	0	; select bank0
  9446  0B55  120E               	bcf	14,4	;volatile
  9447                           
  9448                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9449  0B56  30FF               	movlw	255
  9450  0B57  00A4               	movwf	??_CC2500_RxData
  9451  0B58  0824               	movf	??_CC2500_RxData,w
  9452  0B59  0021               	movlb	1	; select bank1
  9453  0B5A  00CE               	movwf	_SPI0Buffer^(0+128)
  9454                           
  9455                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9456  0B5B  2B62               	goto	l6646
  9457  0B5C                     l6648:	
  9458  0B5C  0021               	movlb	1	; select bank1
  9459  0B5D  192D               	btfsc	(_myMain^(0+128)+13),2
  9460  0B5E  2B65               	goto	l280
  9461                           
  9462                           ;CC2500_B1.c: 89: Timeout_Counter();
  9463  0B5F  319C  24E2  318B   	fcall	_Timeout_Counter
  9464  0B62                     l6646:	
  9465  0B62  0020               	movlb	0	; select bank0
  9466  0B63  190E               	btfsc	14,2	;volatile
  9467  0B64  2B5C               	goto	l6648
  9468  0B65                     l280:	
  9469                           
  9470                           ;CC2500_B1.c: 90: };
  9471                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  9472  0B65  0021               	movlb	1	; select bank1
  9473  0B66  192D               	btfsc	(_myMain^(0+128)+13),2
  9474  0B67  2BAC               	goto	l281
  9475                           
  9476                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9477  0B68  319D  2563  318B   	fcall	_CC2500_WriteByte
  9478                           
  9479                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9480  0B6B  319E  2600  318B   	fcall	_CC2500_ReadByte
  9481                           
  9482                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9483  0B6E  0021               	movlb	1	; select bank1
  9484  0B6F  084E               	movf	_SPI0Buffer^(0+128),w
  9485  0B70  0020               	movlb	0	; select bank0
  9486  0B71  00A4               	movwf	??_CC2500_RxData
  9487  0B72  0824               	movf	??_CC2500_RxData,w
  9488  0B73  0021               	movlb	1	; select bank1
  9489  0B74  00CD               	movwf	_Rx_Length^(0+128)
  9490                           
  9491                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9492  0B75  0020               	movlb	0	; select bank0
  9493  0B76  01A5               	clrf	CC2500_RxData@loop_f
  9494  0B77                     l6662:	
  9495  0B77  0021               	movlb	1	; select bank1
  9496  0B78  084D               	movf	_Rx_Length^(0+128),w
  9497  0B79  0020               	movlb	0	; select bank0
  9498  0B7A  0225               	subwf	CC2500_RxData@loop_f,w
  9499  0B7B  1803               	btfsc	3,0
  9500  0B7C  2B90               	goto	l6664
  9501                           
  9502                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9503  0B7D  319E  2600  318B   	fcall	_CC2500_ReadByte
  9504                           
  9505                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9506  0B80  0021               	movlb	1	; select bank1
  9507  0B81  084E               	movf	_SPI0Buffer^(0+128),w
  9508  0B82  0020               	movlb	0	; select bank0
  9509  0B83  00A4               	movwf	??_CC2500_RxData
  9510  0B84  0825               	movf	CC2500_RxData@loop_f,w
  9511  0B85  3EA0               	addlw	_RF_Data& (0+255)
  9512  0B86  0086               	movwf	6
  9513  0B87  3001               	movlw	1	; select bank3/4
  9514  0B88  0087               	movwf	7
  9515  0B89  0824               	movf	??_CC2500_RxData,w
  9516  0B8A  0081               	movwf	1
  9517  0B8B  3001               	movlw	1
  9518  0B8C  00A4               	movwf	??_CC2500_RxData
  9519  0B8D  0824               	movf	??_CC2500_RxData,w
  9520  0B8E  07A5               	addwf	CC2500_RxData@loop_f,f
  9521  0B8F  2B77               	goto	l6662
  9522  0B90                     l6664:	
  9523                           
  9524                           ;CC2500_B1.c: 99: }
  9525                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9526  0B90  319E  2600  318B   	fcall	_CC2500_ReadByte
  9527                           
  9528                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9529  0B93  0021               	movlb	1	; select bank1
  9530  0B94  084E               	movf	_SPI0Buffer^(0+128),w
  9531  0B95  0020               	movlb	0	; select bank0
  9532  0B96  00A4               	movwf	??_CC2500_RxData
  9533  0B97  0824               	movf	??_CC2500_RxData,w
  9534  0B98  0021               	movlb	1	; select bank1
  9535  0B99  00CC               	movwf	_RSSI^(0+128)
  9536                           
  9537                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9538  0B9A  319E  2600  318B   	fcall	_CC2500_ReadByte
  9539                           
  9540                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9541  0B9D  0021               	movlb	1	; select bank1
  9542  0B9E  084E               	movf	_SPI0Buffer^(0+128),w
  9543  0B9F  0020               	movlb	0	; select bank0
  9544  0BA0  00A4               	movwf	??_CC2500_RxData
  9545  0BA1  0824               	movf	??_CC2500_RxData,w
  9546  0BA2  0021               	movlb	1	; select bank1
  9547  0BA3  00C8               	movwf	_CRC^(0+128)
  9548                           
  9549                           ;CC2500_B1.c: 104: RC4 = 1;
  9550  0BA4  0020               	movlb	0	; select bank0
  9551  0BA5  160E               	bsf	14,4	;volatile
  9552                           
  9553                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9554  0BA6  0021               	movlb	1	; select bank1
  9555  0BA7  1BC8               	btfsc	_CRC^(0+128),7
  9556                           
  9557                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9558  0BA8  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9559                           
  9560                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9561  0BA9  11BC               	bcf	_RF1^(0+128),3
  9562                           
  9563                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9564  0BAA  14BC               	bsf	_RF1^(0+128),1
  9565                           
  9566                           ;CC2500_B1.c: 110: } else {
  9567  0BAB  2BAE               	goto	l6676
  9568  0BAC                     l281:	
  9569                           
  9570                           ;CC2500_B1.c: 111: RC4 = 1;
  9571  0BAC  0020               	movlb	0	; select bank0
  9572  0BAD  160E               	bsf	14,4	;volatile
  9573  0BAE                     l6676:	
  9574                           
  9575                           ;CC2500_B1.c: 112: }
  9576                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  9577  0BAE  319A  22A5         	fcall	_set_TimeoutCleared
  9578  0BB0  0021               	movlb	1	; select bank1
  9579  0BB1  0008               	return
  9580  0BB2                     __end_of_CC2500_RxData:	
  9581                           
  9582                           	psect	text42
  9583  1F65                     __ptext42:	
  9584 ;; *************** function _CC2500_ReadStatus *****************
  9585 ;; Defined at:
  9586 ;;		line 304 in file "../src/CC2500_B1.c"
  9587 ;; Parameters:    Size  Location     Type
  9588 ;;  status_addr     1    wreg     unsigned char 
  9589 ;; Auto vars:     Size  Location     Type
  9590 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9591 ;; Return value:  Size  Location     Type
  9592 ;;		None               void
  9593 ;; Registers used:
  9594 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9595 ;; Tracked objects:
  9596 ;;		On entry : 0/0
  9597 ;;		On exit  : 0/0
  9598 ;;		Unchanged: 0/0
  9599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9601 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9602 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9603 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9604 ;;Total ram usage:        2 bytes
  9605 ;; Hardware stack levels used:    1
  9606 ;; Hardware stack levels required when called:    6
  9607 ;; This function calls:
  9608 ;;		_CC2500_ReadByte
  9609 ;;		_CC2500_WriteByte
  9610 ;;		_Timeout_Counter
  9611 ;;		_set_TimeoutCleared
  9612 ;; This function is called by:
  9613 ;;		_CC2500_RxData
  9614 ;;		_setRF_Main
  9615 ;; This function uses a non-reentrant model
  9616 ;;
  9617                           
  9618                           
  9619                           ;psect for function _CC2500_ReadStatus
  9620  1F65                     _CC2500_ReadStatus:	
  9621                           
  9622                           ;incstack = 0
  9623                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9624                           ;CC2500_ReadStatus@status_addr stored from wreg
  9625  1F65  0020               	movlb	0	; select bank0
  9626  1F66  00A3               	movwf	CC2500_ReadStatus@status_addr
  9627                           
  9628                           ;CC2500_B1.c: 305: RC4 = 0;
  9629  1F67  120E               	bcf	14,4	;volatile
  9630                           
  9631                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  9632  1F68  0823               	movf	CC2500_ReadStatus@status_addr,w
  9633  1F69  3EC0               	addlw	192
  9634  1F6A  00A2               	movwf	??_CC2500_ReadStatus
  9635  1F6B  0822               	movf	??_CC2500_ReadStatus,w
  9636  1F6C  0021               	movlb	1	; select bank1
  9637  1F6D  00CE               	movwf	_SPI0Buffer^(0+128)
  9638                           
  9639                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  9640  1F6E  2F72               	goto	l6414
  9641  1F6F                     l6412:	
  9642                           
  9643                           ;CC2500_B1.c: 309: Timeout_Counter();
  9644  1F6F  319C  24E2  319F   	fcall	_Timeout_Counter
  9645  1F72                     l6414:	
  9646  1F72  0020               	movlb	0	; select bank0
  9647  1F73  1D0E               	btfss	14,2	;volatile
  9648  1F74  2F78               	goto	l6418
  9649  1F75  0021               	movlb	1	; select bank1
  9650  1F76  1D2D               	btfss	(_myMain^(0+128)+13),2
  9651  1F77  2F6F               	goto	l6412
  9652  1F78                     l6418:	
  9653                           
  9654                           ;CC2500_B1.c: 310: };
  9655                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  9656  1F78  319A  22A5  319F   	fcall	_set_TimeoutCleared
  9657                           
  9658                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  9659  1F7B  319D  2563  319F   	fcall	_CC2500_WriteByte
  9660                           
  9661                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  9662  1F7E  319E  2600         	fcall	_CC2500_ReadByte
  9663                           
  9664                           ;CC2500_B1.c: 315: RC4 = 1;
  9665  1F80  0020               	movlb	0	; select bank0
  9666  1F81  160E               	bsf	14,4	;volatile
  9667                           
  9668                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  9669  1F82  0021               	movlb	1	; select bank1
  9670  1F83  084E               	movf	_SPI0Buffer^(0+128),w
  9671  1F84  0020               	movlb	0	; select bank0
  9672  1F85  00A2               	movwf	??_CC2500_ReadStatus
  9673  1F86  0822               	movf	??_CC2500_ReadStatus,w
  9674  1F87  0021               	movlb	1	; select bank1
  9675  1F88  00D3               	movwf	_s_data^(0+128)
  9676  1F89  0008               	return
  9677  1F8A                     __end_of_CC2500_ReadStatus:	
  9678                           
  9679                           	psect	text43
  9680  1E00                     __ptext43:	
  9681 ;; *************** function _CC2500_ReadByte *****************
  9682 ;; Defined at:
  9683 ;;		line 238 in file "../src/CC2500_B1.c"
  9684 ;; Parameters:    Size  Location     Type
  9685 ;;		None
  9686 ;; Auto vars:     Size  Location     Type
  9687 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9688 ;; Return value:  Size  Location     Type
  9689 ;;		None               void
  9690 ;; Registers used:
  9691 ;;		wreg, status,2, status,0
  9692 ;; Tracked objects:
  9693 ;;		On entry : 0/0
  9694 ;;		On exit  : 0/0
  9695 ;;		Unchanged: 0/0
  9696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9698 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9699 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9700 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;Total ram usage:        2 bytes
  9702 ;; Hardware stack levels used:    1
  9703 ;; Hardware stack levels required when called:    5
  9704 ;; This function calls:
  9705 ;;		Nothing
  9706 ;; This function is called by:
  9707 ;;		_CC2500_RxData
  9708 ;;		_CC2500_ReadStatus
  9709 ;;		_CC2500_ReadREG
  9710 ;; This function uses a non-reentrant model
  9711 ;;
  9712                           
  9713                           
  9714                           ;psect for function _CC2500_ReadByte
  9715  1E00                     _CC2500_ReadByte:	
  9716                           
  9717                           ;CC2500_B1.c: 239: unsigned char loop_b;
  9718                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  9719                           
  9720                           ;incstack = 0
  9721                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9722  1E00  0020               	movlb	0	; select bank0
  9723  1E01  01A1               	clrf	CC2500_ReadByte@loop_b
  9724  1E02                     L5:	
  9725  1E02  3008               	movlw	8
  9726  1E03  0221               	subwf	CC2500_ReadByte@loop_b,w
  9727  1E04  1803               	btfsc	3,0
  9728  1E05  0008               	return
  9729                           
  9730                           ;CC2500_B1.c: 241: RC1 = 1;
  9731  1E06  148E               	bsf	14,1	;volatile
  9732                           
  9733                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  9734  1E07  1003               	clrc
  9735  1E08  0021               	movlb	1	; select bank1
  9736  1E09  0DCE               	rlf	_SPI0Buffer^(0+128),f
  9737                           
  9738                           ;CC2500_B1.c: 243: if (RC2 == 1)
  9739  1E0A  0020               	movlb	0	; select bank0
  9740  1E0B  1D0E               	btfss	14,2	;volatile
  9741  1E0C  2E10               	goto	l6344
  9742                           
  9743                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  9744  1E0D  0021               	movlb	1	; select bank1
  9745  1E0E  144E               	bsf	_SPI0Buffer^(0+128),0
  9746  1E0F  2E16               	goto	l6346
  9747  1E10                     l6344:	
  9748                           
  9749                           ;CC2500_B1.c: 245: else
  9750                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  9751  1E10  30FE               	movlw	254
  9752  1E11  0020               	movlb	0	; select bank0
  9753  1E12  00A0               	movwf	??_CC2500_ReadByte
  9754  1E13  0820               	movf	??_CC2500_ReadByte,w
  9755  1E14  0021               	movlb	1	; select bank1
  9756  1E15  05CE               	andwf	_SPI0Buffer^(0+128),f
  9757  1E16                     l6346:	
  9758                           
  9759                           ;CC2500_B1.c: 247: RC1 = 0;
  9760  1E16  0020               	movlb	0	; select bank0
  9761  1E17  108E               	bcf	14,1	;volatile
  9762  1E18  3001               	movlw	1
  9763  1E19  00A0               	movwf	??_CC2500_ReadByte
  9764  1E1A  0820               	movf	??_CC2500_ReadByte,w
  9765  1E1B  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9766  1E1C  2E02               	goto	L5
  9767  1E1D                     __end_of_CC2500_ReadByte:	
  9768                           
  9769                           	psect	text44
  9770  1A89                     __ptext44:	
  9771 ;; *************** function _RF_Initialization *****************
  9772 ;; Defined at:
  9773 ;;		line 9 in file "../src/RF_Control_B1.c"
  9774 ;; Parameters:    Size  Location     Type
  9775 ;;		None
  9776 ;; Auto vars:     Size  Location     Type
  9777 ;;		None
  9778 ;; Return value:  Size  Location     Type
  9779 ;;		None               void
  9780 ;; Registers used:
  9781 ;;		wreg, status,2, status,0, pclath, cstack
  9782 ;; Tracked objects:
  9783 ;;		On entry : 0/0
  9784 ;;		On exit  : 0/0
  9785 ;;		Unchanged: 0/0
  9786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9791 ;;Total ram usage:        0 bytes
  9792 ;; Hardware stack levels used:    1
  9793 ;; Hardware stack levels required when called:    6
  9794 ;; This function calls:
  9795 ;;		_setRF_Initialization
  9796 ;; This function is called by:
  9797 ;;		_main
  9798 ;; This function uses a non-reentrant model
  9799 ;;
  9800                           
  9801                           
  9802                           ;psect for function _RF_Initialization
  9803  1A89                     _RF_Initialization:	
  9804                           
  9805                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9806                           
  9807                           ;incstack = 0
  9808                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9809  1A89  319B  2306         	fcall	_setRF_Initialization
  9810  1A8B  0008               	return
  9811  1A8C                     __end_of_RF_Initialization:	
  9812                           
  9813                           	psect	text45
  9814  1B06                     __ptext45:	
  9815 ;; *************** function _setRF_Initialization *****************
  9816 ;; Defined at:
  9817 ;;		line 43 in file "../src/RF_Control_B1.c"
  9818 ;; Parameters:    Size  Location     Type
  9819 ;;		None
  9820 ;; Auto vars:     Size  Location     Type
  9821 ;;		None
  9822 ;; Return value:  Size  Location     Type
  9823 ;;		None               void
  9824 ;; Registers used:
  9825 ;;		wreg
  9826 ;; Tracked objects:
  9827 ;;		On entry : 0/0
  9828 ;;		On exit  : 0/0
  9829 ;;		Unchanged: 0/0
  9830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9833 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9834 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9835 ;;Total ram usage:        1 bytes
  9836 ;; Hardware stack levels used:    1
  9837 ;; Hardware stack levels required when called:    5
  9838 ;; This function calls:
  9839 ;;		Nothing
  9840 ;; This function is called by:
  9841 ;;		_RF_Initialization
  9842 ;; This function uses a non-reentrant model
  9843 ;;
  9844                           
  9845                           
  9846                           ;psect for function _setRF_Initialization
  9847  1B06                     _setRF_Initialization:	
  9848                           
  9849                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9850                           
  9851                           ;incstack = 0
  9852                           ; Regs used in _setRF_Initialization: [wreg]
  9853  1B06  3015               	movlw	21
  9854  1B07  0020               	movlb	0	; select bank0
  9855  1B08  00A0               	movwf	??_setRF_Initialization
  9856  1B09  0820               	movf	??_setRF_Initialization,w
  9857  1B0A  0021               	movlb	1	; select bank1
  9858  1B0B  00D0               	movwf	_Tx_Length^(0+128)
  9859                           
  9860                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9861  1B0C  300A               	movlw	10
  9862  1B0D  00C3               	movwf	(_RF1^(0+128)+7)
  9863  1B0E  3000               	movlw	0
  9864  1B0F  00C4               	movwf	(_RF1^(0+128)+8)
  9865  1B10  0008               	return
  9866  1B11                     __end_of_setRF_Initialization:	
  9867                           
  9868                           	psect	text46
  9869  1C22                     __ptext46:	
  9870 ;; *************** function _Mcu_Initialization *****************
  9871 ;; Defined at:
  9872 ;;		line 30 in file "../src/MCU_B1.c"
  9873 ;; Parameters:    Size  Location     Type
  9874 ;;		None
  9875 ;; Auto vars:     Size  Location     Type
  9876 ;;		None
  9877 ;; Return value:  Size  Location     Type
  9878 ;;		None               void
  9879 ;; Registers used:
  9880 ;;		wreg, status,2, status,0, pclath, cstack
  9881 ;; Tracked objects:
  9882 ;;		On entry : 0/0
  9883 ;;		On exit  : 0/0
  9884 ;;		Unchanged: 0/0
  9885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9890 ;;Total ram usage:        0 bytes
  9891 ;; Hardware stack levels used:    1
  9892 ;; Hardware stack levels required when called:    6
  9893 ;; This function calls:
  9894 ;;		_ADC_Set
  9895 ;;		_Fosc_Set
  9896 ;;		_IOC_Set
  9897 ;;		_IO_Set
  9898 ;;		_TMR1_Set
  9899 ;;		_WDT_Set
  9900 ;; This function is called by:
  9901 ;;		_main
  9902 ;; This function uses a non-reentrant model
  9903 ;;
  9904                           
  9905                           
  9906                           ;psect for function _Mcu_Initialization
  9907  1C22                     _Mcu_Initialization:	
  9908                           
  9909                           ;MCU_B1.c: 32: Fosc_Set();
  9910                           
  9911                           ;incstack = 0
  9912                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9913  1C22  319A  22A1  319C   	fcall	_Fosc_Set
  9914                           
  9915                           ;MCU_B1.c: 34: IO_Set();
  9916  1C25  319D  257C  319C   	fcall	_IO_Set
  9917                           
  9918                           ;MCU_B1.c: 36: ;;
  9919                           ;MCU_B1.c: 38: TMR1_Set();
  9920  1C28  319B  2359  319C   	fcall	_TMR1_Set
  9921                           
  9922                           ;MCU_B1.c: 40: ADC_Set();
  9923  1C2B  319A  22BB  319C   	fcall	_ADC_Set
  9924                           
  9925                           ;MCU_B1.c: 42: ;;
  9926                           ;MCU_B1.c: 44: ;;
  9927                           ;MCU_B1.c: 46: IOC_Set();
  9928  1C2E  319B  234D  319C   	fcall	_IOC_Set
  9929                           
  9930                           ;MCU_B1.c: 48: ;;
  9931                           ;MCU_B1.c: 50: ;;
  9932                           ;MCU_B1.c: 52: WDT_Set();
  9933  1C31  319B  2365         	fcall	_WDT_Set
  9934  1C33  0008               	return
  9935  1C34                     __end_of_Mcu_Initialization:	
  9936                           
  9937                           	psect	text47
  9938  1B65                     __ptext47:	
  9939 ;; *************** function _WDT_Set *****************
  9940 ;; Defined at:
  9941 ;;		line 1019 in file "../src/MCU_B1.c"
  9942 ;; Parameters:    Size  Location     Type
  9943 ;;		None
  9944 ;; Auto vars:     Size  Location     Type
  9945 ;;		None
  9946 ;; Return value:  Size  Location     Type
  9947 ;;		None               void
  9948 ;; Registers used:
  9949 ;;		wreg
  9950 ;; Tracked objects:
  9951 ;;		On entry : 0/0
  9952 ;;		On exit  : 0/0
  9953 ;;		Unchanged: 0/0
  9954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9957 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9958 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9959 ;;Total ram usage:        1 bytes
  9960 ;; Hardware stack levels used:    1
  9961 ;; Hardware stack levels required when called:    5
  9962 ;; This function calls:
  9963 ;;		Nothing
  9964 ;; This function is called by:
  9965 ;;		_Mcu_Initialization
  9966 ;; This function uses a non-reentrant model
  9967 ;;
  9968                           
  9969                           
  9970                           ;psect for function _WDT_Set
  9971  1B65                     _WDT_Set:	
  9972                           
  9973                           ;MCU_B1.c: 1026: WDTCON = 0b00010111;;
  9974                           
  9975                           ;incstack = 0
  9976                           ; Regs used in _WDT_Set: [wreg]
  9977  1B65  3017               	movlw	23
  9978  1B66  0021               	movlb	1	; select bank1
  9979  1B67  0097               	movwf	23	;volatile
  9980                           
  9981                           ;MCU_B1.c: 1028: WDT.Enable = 1;
  9982  1B68  0022               	movlb	2	; select bank2
  9983  1B69  1428               	bsf	_WDT^(0+256),0
  9984                           
  9985                           ;MCU_B1.c: 1029: WDT.Timer = 10;
  9986  1B6A  300A               	movlw	10
  9987  1B6B  0020               	movlb	0	; select bank0
  9988  1B6C  00A0               	movwf	??_WDT_Set
  9989  1B6D  0820               	movf	??_WDT_Set,w
  9990  1B6E  0022               	movlb	2	; select bank2
  9991  1B6F  00A9               	movwf	(_WDT^(0+256)+1)
  9992  1B70  0008               	return
  9993  1B71                     __end_of_WDT_Set:	
  9994                           
  9995                           	psect	text48
  9996  1B59                     __ptext48:	
  9997 ;; *************** function _TMR1_Set *****************
  9998 ;; Defined at:
  9999 ;;		line 199 in file "../src/MCU_B1.c"
 10000 ;; Parameters:    Size  Location     Type
 10001 ;;		None
 10002 ;; Auto vars:     Size  Location     Type
 10003 ;;		None
 10004 ;; Return value:  Size  Location     Type
 10005 ;;		None               void
 10006 ;; Registers used:
 10007 ;;		wreg
 10008 ;; Tracked objects:
 10009 ;;		On entry : 0/0
 10010 ;;		On exit  : 0/0
 10011 ;;		Unchanged: 0/0
 10012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10017 ;;Total ram usage:        0 bytes
 10018 ;; Hardware stack levels used:    1
 10019 ;; Hardware stack levels required when called:    5
 10020 ;; This function calls:
 10021 ;;		Nothing
 10022 ;; This function is called by:
 10023 ;;		_Mcu_Initialization
 10024 ;; This function uses a non-reentrant model
 10025 ;;
 10026                           
 10027                           
 10028                           ;psect for function _TMR1_Set
 10029  1B59                     _TMR1_Set:	
 10030                           
 10031                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
 10032                           
 10033                           ;incstack = 0
 10034                           ; Regs used in _TMR1_Set: [wreg]
 10035  1B59  3041               	movlw	65
 10036  1B5A  0020               	movlb	0	; select bank0
 10037  1B5B  0098               	movwf	24	;volatile
 10038                           
 10039                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
 10040  1B5C  30FA               	movlw	250
 10041  1B5D  0097               	movwf	23	;volatile
 10042                           
 10043                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
 10044  1B5E  3038               	movlw	56
 10045  1B5F  0096               	movwf	22	;volatile
 10046                           
 10047                           ;MCU_B1.c: 203: TMR1IE = 1;
 10048  1B60  0021               	movlb	1	; select bank1
 10049  1B61  1411               	bsf	17,0	;volatile
 10050                           
 10051                           ;MCU_B1.c: 204: PEIE = 1;
 10052  1B62  170B               	bsf	11,6	;volatile
 10053                           
 10054                           ;MCU_B1.c: 205: GIE = 1;
 10055  1B63  178B               	bsf	11,7	;volatile
 10056  1B64  0008               	return
 10057  1B65                     __end_of_TMR1_Set:	
 10058                           
 10059                           	psect	text49
 10060  1D7C                     __ptext49:	
 10061 ;; *************** function _IO_Set *****************
 10062 ;; Defined at:
 10063 ;;		line 60 in file "../src/MCU_B1.c"
 10064 ;; Parameters:    Size  Location     Type
 10065 ;;		None
 10066 ;; Auto vars:     Size  Location     Type
 10067 ;;		None
 10068 ;; Return value:  Size  Location     Type
 10069 ;;		None               void
 10070 ;; Registers used:
 10071 ;;		wreg, status,2
 10072 ;; Tracked objects:
 10073 ;;		On entry : 0/0
 10074 ;;		On exit  : 0/0
 10075 ;;		Unchanged: 0/0
 10076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10081 ;;Total ram usage:        0 bytes
 10082 ;; Hardware stack levels used:    1
 10083 ;; Hardware stack levels required when called:    5
 10084 ;; This function calls:
 10085 ;;		Nothing
 10086 ;; This function is called by:
 10087 ;;		_Mcu_Initialization
 10088 ;; This function uses a non-reentrant model
 10089 ;;
 10090                           
 10091                           
 10092                           ;psect for function _IO_Set
 10093  1D7C                     _IO_Set:	
 10094                           
 10095                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10096                           
 10097                           ;incstack = 0
 10098                           ; Regs used in _IO_Set: [wreg+status,2]
 10099  1D7C  3077               	movlw	119
 10100  1D7D  0021               	movlb	1	; select bank1
 10101  1D7E  008C               	movwf	12	;volatile
 10102                           
 10103                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10104  1D7F  3007               	movlw	7
 10105  1D80  008D               	movwf	13	;volatile
 10106                           
 10107                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10108  1D81  300C               	movlw	12
 10109  1D82  008E               	movwf	14	;volatile
 10110                           
 10111                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10112  1D83  0022               	movlb	2	; select bank2
 10113  1D84  018C               	clrf	12	;volatile
 10114                           
 10115                           ;MCU_B1.c: 92: LATB = 0b00000010;;
 10116  1D85  3002               	movlw	2
 10117  1D86  008D               	movwf	13	;volatile
 10118                           
 10119                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10120  1D87  018E               	clrf	14	;volatile
 10121                           
 10122                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
 10123  1D88  3022               	movlw	34
 10124  1D89  0023               	movlb	3	; select bank3
 10125  1D8A  008C               	movwf	12	;volatile
 10126                           
 10127                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10128  1D8B  018D               	clrf	13	;volatile
 10129                           
 10130                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10131  1D8C  018E               	clrf	14	;volatile
 10132                           
 10133                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10134  1D8D  3077               	movlw	119
 10135  1D8E  0020               	movlb	0	; select bank0
 10136  1D8F  008C               	movwf	12	;volatile
 10137                           
 10138                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 10139  1D90  3007               	movlw	7
 10140  1D91  008D               	movwf	13	;volatile
 10141                           
 10142                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10143  1D92  300C               	movlw	12
 10144  1D93  008E               	movwf	14	;volatile
 10145  1D94  0008               	return
 10146  1D95                     __end_of_IO_Set:	
 10147                           
 10148                           	psect	text50
 10149  1B4D                     __ptext50:	
 10150 ;; *************** function _IOC_Set *****************
 10151 ;; Defined at:
 10152 ;;		line 366 in file "../src/MCU_B1.c"
 10153 ;; Parameters:    Size  Location     Type
 10154 ;;		None
 10155 ;; Auto vars:     Size  Location     Type
 10156 ;;		None
 10157 ;; Return value:  Size  Location     Type
 10158 ;;		None               void
 10159 ;; Registers used:
 10160 ;;		wreg, status,2
 10161 ;; Tracked objects:
 10162 ;;		On entry : 0/0
 10163 ;;		On exit  : 0/0
 10164 ;;		Unchanged: 0/0
 10165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10170 ;;Total ram usage:        0 bytes
 10171 ;; Hardware stack levels used:    1
 10172 ;; Hardware stack levels required when called:    5
 10173 ;; This function calls:
 10174 ;;		Nothing
 10175 ;; This function is called by:
 10176 ;;		_Mcu_Initialization
 10177 ;; This function uses a non-reentrant model
 10178 ;;
 10179                           
 10180                           
 10181                           ;psect for function _IOC_Set
 10182  1B4D                     _IOC_Set:	
 10183                           
 10184                           ;MCU_B1.c: 367: WPUB2 = 0;
 10185                           
 10186                           ;incstack = 0
 10187                           ; Regs used in _IOC_Set: [wreg+status,2]
 10188  1B4D  0024               	movlb	4	; select bank4
 10189  1B4E  110D               	bcf	13,2	;volatile
 10190                           
 10191                           ;MCU_B1.c: 387: IOCBP = 0b00000000;
 10192  1B4F  0027               	movlb	7	; select bank7
 10193  1B50  0194               	clrf	20	;volatile
 10194                           
 10195                           ;MCU_B1.c: 388: IOCBN = 0b00000100;
 10196  1B51  3004               	movlw	4
 10197  1B52  0095               	movwf	21	;volatile
 10198                           
 10199                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
 10200  1B53  0196               	clrf	22	;volatile
 10201                           
 10202                           ;MCU_B1.c: 394: IOCIE = 1;
 10203  1B54  158B               	bsf	11,3	;volatile
 10204                           
 10205                           ;MCU_B1.c: 395: IOCIF = 0;
 10206  1B55  100B               	bcf	11,0	;volatile
 10207                           
 10208                           ;MCU_B1.c: 396: PEIE = 1;
 10209  1B56  170B               	bsf	11,6	;volatile
 10210                           
 10211                           ;MCU_B1.c: 397: GIE = 1;
 10212  1B57  178B               	bsf	11,7	;volatile
 10213  1B58  0008               	return
 10214  1B59                     __end_of_IOC_Set:	
 10215                           
 10216                           	psect	text51
 10217  1AA1                     __ptext51:	
 10218 ;; *************** function _Fosc_Set *****************
 10219 ;; Defined at:
 10220 ;;		line 56 in file "../src/MCU_B1.c"
 10221 ;; Parameters:    Size  Location     Type
 10222 ;;		None
 10223 ;; Auto vars:     Size  Location     Type
 10224 ;;		None
 10225 ;; Return value:  Size  Location     Type
 10226 ;;		None               void
 10227 ;; Registers used:
 10228 ;;		wreg
 10229 ;; Tracked objects:
 10230 ;;		On entry : 0/0
 10231 ;;		On exit  : 0/0
 10232 ;;		Unchanged: 0/0
 10233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10238 ;;Total ram usage:        0 bytes
 10239 ;; Hardware stack levels used:    1
 10240 ;; Hardware stack levels required when called:    5
 10241 ;; This function calls:
 10242 ;;		Nothing
 10243 ;; This function is called by:
 10244 ;;		_Mcu_Initialization
 10245 ;; This function uses a non-reentrant model
 10246 ;;
 10247                           
 10248                           
 10249                           ;psect for function _Fosc_Set
 10250  1AA1                     _Fosc_Set:	
 10251                           
 10252                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10253                           
 10254                           ;incstack = 0
 10255                           ; Regs used in _Fosc_Set: [wreg]
 10256  1AA1  3078               	movlw	120
 10257  1AA2  0021               	movlb	1	; select bank1
 10258  1AA3  0099               	movwf	25	;volatile
 10259  1AA4  0008               	return
 10260  1AA5                     __end_of_Fosc_Set:	
 10261                           
 10262                           	psect	text52
 10263  1ABB                     __ptext52:	
 10264 ;; *************** function _ADC_Set *****************
 10265 ;; Defined at:
 10266 ;;		line 420 in file "../src/MCU_B1.c"
 10267 ;; Parameters:    Size  Location     Type
 10268 ;;		None
 10269 ;; Auto vars:     Size  Location     Type
 10270 ;;		None
 10271 ;; Return value:  Size  Location     Type
 10272 ;;		None               void
 10273 ;; Registers used:
 10274 ;;		wreg
 10275 ;; Tracked objects:
 10276 ;;		On entry : 0/0
 10277 ;;		On exit  : 0/0
 10278 ;;		Unchanged: 0/0
 10279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10284 ;;Total ram usage:        0 bytes
 10285 ;; Hardware stack levels used:    1
 10286 ;; Hardware stack levels required when called:    5
 10287 ;; This function calls:
 10288 ;;		Nothing
 10289 ;; This function is called by:
 10290 ;;		_Mcu_Initialization
 10291 ;; This function uses a non-reentrant model
 10292 ;;
 10293                           
 10294                           
 10295                           ;psect for function _ADC_Set
 10296  1ABB                     _ADC_Set:	
 10297                           
 10298                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
 10299                           
 10300                           ;incstack = 0
 10301                           ; Regs used in _ADC_Set: [wreg]
 10302  1ABB  30F3               	movlw	243
 10303  1ABC  0021               	movlb	1	; select bank1
 10304  1ABD  009E               	movwf	30	;volatile
 10305                           
 10306                           ;MCU_B1.c: 422: FVRCON = 0xc1;
 10307  1ABE  30C1               	movlw	193
 10308  1ABF  0022               	movlb	2	; select bank2
 10309  1AC0  0097               	movwf	23	;volatile
 10310  1AC1  0008               	return
 10311  1AC2                     __end_of_ADC_Set:	
 10312                           
 10313                           	psect	text53
 10314  004A                     __ptext53:	
 10315 ;; *************** function _Load_Main *****************
 10316 ;; Defined at:
 10317 ;;		line 39 in file "../src/OverLoad_B1.c"
 10318 ;; Parameters:    Size  Location     Type
 10319 ;;		None
 10320 ;; Auto vars:     Size  Location     Type
 10321 ;;  i               1   15[BANK0 ] unsigned char 
 10322 ;;  error           1   14[BANK0 ] unsigned char 
 10323 ;;  adjgo           1   12[BANK0 ] unsigned char 
 10324 ;;  j               1   11[BANK0 ] unsigned char 
 10325 ;; Return value:  Size  Location     Type
 10326 ;;		None               void
 10327 ;; Registers used:
 10328 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10329 ;; Tracked objects:
 10330 ;;		On entry : 0/0
 10331 ;;		On exit  : 0/0
 10332 ;;		Unchanged: 0/0
 10333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10335 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10336 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10337 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10338 ;;Total ram usage:        7 bytes
 10339 ;; Hardware stack levels used:    1
 10340 ;; Hardware stack levels required when called:    8
 10341 ;; This function calls:
 10342 ;;		_getAll_DimmerLights_AdjGO
 10343 ;;		_getMain_All_Error_Status
 10344 ;;		_getMain_LightsStatus
 10345 ;;		_getMain_Lights_Count
 10346 ;;		_getMain_LoadOK
 10347 ;;		_setLoad_AH_AL_Restore
 10348 ;; This function is called by:
 10349 ;;		_main
 10350 ;; This function uses a non-reentrant model
 10351 ;;
 10352                           
 10353                           
 10354                           ;psect for function _Load_Main
 10355  004A                     _Load_Main:	
 10356                           
 10357                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
 10358                           
 10359                           ;incstack = 0
 10360                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10361  004A  0020               	movlb	0	; select bank0
 10362  004B  01AF               	clrf	Load_Main@i
 10363  004C  01AB               	clrf	Load_Main@j
 10364  004D  3000               	movlw	0
 10365  004E  3191  2117  3180   	fcall	_getMain_All_Error_Status
 10366  0051  0020               	movlb	0	; select bank0
 10367  0052  00A9               	movwf	??_Load_Main
 10368  0053  0829               	movf	??_Load_Main,w
 10369  0054  00AE               	movwf	Load_Main@error
 10370  0055  01AC               	clrf	Load_Main@adjgo
 10371                           
 10372                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10373  0056  0022               	movlb	2	; select bank2
 10374  0057  1C2A               	btfss	_Load^(0+256),0
 10375  0058  2A2B               	goto	l1458
 10376                           
 10377                           ;OverLoad_B1.c: 44: adjgo = getAll_DimmerLights_AdjGO();
 10378  0059  319B  23BA  3180   	fcall	_getAll_DimmerLights_AdjGO
 10379  005C  0020               	movlb	0	; select bank0
 10380  005D  00A9               	movwf	??_Load_Main
 10381  005E  0829               	movf	??_Load_Main,w
 10382  005F  00AC               	movwf	Load_Main@adjgo
 10383                           
 10384                           ;OverLoad_B1.c: 46: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
 10385  0060  01AD               	clrf	_Load_Main$3848
 10386  0061  3190  20BC  3180   	fcall	_getMain_LightsStatus
 10387  0064  3A01               	xorlw	1
 10388  0065  1D03               	skipz
 10389  0066  2870               	goto	l7952
 10390  0067  0020               	movlb	0	; select bank0
 10391  0068  08AE               	movf	Load_Main@error,f
 10392  0069  1D03               	skipz
 10393  006A  2870               	goto	l7952
 10394  006B  08AC               	movf	Load_Main@adjgo,f
 10395  006C  1D03               	skipz
 10396  006D  2870               	goto	l7952
 10397  006E  01AD               	clrf	_Load_Main$3848
 10398  006F  0AAD               	incf	_Load_Main$3848,f
 10399  0070                     l7952:	
 10400  0070  0020               	movlb	0	; select bank0
 10401  0071  082D               	movf	_Load_Main$3848,w
 10402  0072  0022               	movlb	2	; select bank2
 10403  0073  10AA               	bcf	_Load^(0+256),1
 10404  0074  1D03               	skipz
 10405  0075  14AA               	bsf	_Load^(0+256),1
 10406                           
 10407                           ;OverLoad_B1.c: 47: if (getMain_LoadOK() == 1 && Load.Run == 0) {
 10408  0076  319B  237E  3180   	fcall	_getMain_LoadOK
 10409  0079  3A01               	xorlw	1
 10410  007A  1D03               	skipz
 10411  007B  2881               	goto	l1461
 10412  007C  0022               	movlb	2	; select bank2
 10413  007D  19AA               	btfsc	_Load^(0+256),3
 10414  007E  2881               	goto	l1461
 10415                           
 10416                           ;OverLoad_B1.c: 48: Load.Run = 1;
 10417  007F  15AA               	bsf	_Load^(0+256),3
 10418                           
 10419                           ;OverLoad_B1.c: 49: Load.OK = 0;
 10420  0080  13AA               	bcf	_Load^(0+256),7
 10421  0081                     l1461:	
 10422                           
 10423                           ;OverLoad_B1.c: 50: }
 10424                           ;OverLoad_B1.c: 53: if (Load.GO == 1) {
 10425  0081  0022               	movlb	2	; select bank2
 10426  0082  1CAA               	btfss	_Load^(0+256),1
 10427  0083  29C5               	goto	l1462
 10428                           
 10429                           ;OverLoad_B1.c: 54: Load.LightsON = 1;
 10430  0084  152A               	bsf	_Load^(0+256),2
 10431                           
 10432                           ;OverLoad_B1.c: 56: if (Load.ADtoGO == 1) {
 10433  0085  1E2A               	btfss	_Load^(0+256),4
 10434  0086  29C3               	goto	l1463
 10435                           
 10436                           ;OverLoad_B1.c: 57: Load.Time++;
 10437  0087  3001               	movlw	1
 10438  0088  07AB               	addwf	(_Load^(0+256)+1),f
 10439  0089  3000               	movlw	0
 10440  008A  3DAC               	addwfc	((_Load+1)^(0+256)+1),f
 10441                           
 10442                           ;OverLoad_B1.c: 58: if (Load.Time >= 5) {
 10443  008B  3000               	movlw	0
 10444  008C  022C               	subwf	((_Load+1)^(0+256)+1),w
 10445  008D  3005               	movlw	5
 10446  008E  1903               	skipnz
 10447  008F  022B               	subwf	(_Load^(0+256)+1),w
 10448  0090  1C03               	skipc
 10449  0091  0008               	return
 10450                           
 10451                           ;OverLoad_B1.c: 59: Load.Time = 0;
 10452  0092  01AB               	clrf	(_Load^(0+256)+1)
 10453  0093  01AC               	clrf	((_Load+1)^(0+256)+1)
 10454                           
 10455                           ;OverLoad_B1.c: 60: Load.ADtoGO = 0;
 10456  0094  122A               	bcf	_Load^(0+256),4
 10457                           
 10458                           ;OverLoad_B1.c: 62: for (i = 0; i < 4; i++) {
 10459  0095  0020               	movlb	0	; select bank0
 10460  0096  01AF               	clrf	Load_Main@i
 10461  0097  3004               	movlw	4
 10462  0098  022F               	subwf	Load_Main@i,w
 10463  0099  1803               	btfsc	3,0
 10464  009A  28C5               	goto	l7978
 10465  009B                     l7972:	
 10466                           
 10467                           ;OverLoad_B1.c: 63: Load.ADH += Load.AH[i];
 10468  009B  352F               	lslf	Load_Main@i,w
 10469  009C  3E35               	addlw	(_Load+11)& (0+255)
 10470  009D  0086               	movwf	6
 10471  009E  3001               	movlw	1	; select bank2/3
 10472  009F  0087               	movwf	7
 10473  00A0  3F40               	moviw [0]fsr1
 10474  00A1  00A9               	movwf	??_Load_Main
 10475  00A2  3F41               	moviw [1]fsr1
 10476  00A3  00AA               	movwf	??_Load_Main+1
 10477  00A4  0829               	movf	??_Load_Main,w
 10478  00A5  0022               	movlb	2	; select bank2
 10479  00A6  07AF               	addwf	(_Load^(0+256)+5),f
 10480  00A7  0020               	movlb	0	; select bank0
 10481  00A8  082A               	movf	??_Load_Main+1,w
 10482  00A9  0022               	movlb	2	; select bank2
 10483  00AA  3DB0               	addwfc	((_Load+1)^(0+256)+5),f
 10484                           
 10485                           ;OverLoad_B1.c: 64: Load.ADL += Load.AL[i];
 10486  00AB  0020               	movlb	0	; select bank0
 10487  00AC  352F               	lslf	Load_Main@i,w
 10488  00AD  3E3F               	addlw	(_Load+21)& (0+255)
 10489  00AE  0086               	movwf	6
 10490  00AF  3001               	movlw	1	; select bank2/3
 10491  00B0  0087               	movwf	7
 10492  00B1  3F40               	moviw [0]fsr1
 10493  00B2  00A9               	movwf	??_Load_Main
 10494  00B3  3F41               	moviw [1]fsr1
 10495  00B4  00AA               	movwf	??_Load_Main+1
 10496  00B5  0829               	movf	??_Load_Main,w
 10497  00B6  0022               	movlb	2	; select bank2
 10498  00B7  07B1               	addwf	(_Load^(0+256)+7),f
 10499  00B8  0020               	movlb	0	; select bank0
 10500  00B9  082A               	movf	??_Load_Main+1,w
 10501  00BA  0022               	movlb	2	; select bank2
 10502  00BB  3DB2               	addwfc	((_Load+1)^(0+256)+7),f
 10503  00BC  3001               	movlw	1
 10504  00BD  0020               	movlb	0	; select bank0
 10505  00BE  00A9               	movwf	??_Load_Main
 10506  00BF  0829               	movf	??_Load_Main,w
 10507  00C0  07AF               	addwf	Load_Main@i,f
 10508  00C1  3004               	movlw	4
 10509  00C2  022F               	subwf	Load_Main@i,w
 10510  00C3  1C03               	skipc
 10511  00C4  289B               	goto	l7972
 10512  00C5                     l7978:	
 10513                           
 10514                           ;OverLoad_B1.c: 65: }
 10515                           ;OverLoad_B1.c: 66: Load.ADH /= 4;
 10516  00C5  3002               	movlw	2
 10517  00C6  0022               	movlb	2	; select bank2
 10518  00C7                     u7985:	
 10519  00C7  36B0               	lsrf	((_Load+1)^(0+256)+5),f
 10520  00C8  0CAF               	rrf	(_Load^(0+256)+5),f
 10521  00C9  0B89               	decfsz	9,f
 10522  00CA  28C7               	goto	u7985
 10523                           
 10524                           ;OverLoad_B1.c: 67: Load.ADL /= 4;
 10525  00CB  3002               	movlw	2
 10526  00CC                     u7995:	
 10527  00CC  36B2               	lsrf	((_Load+1)^(0+256)+7),f
 10528  00CD  0CB1               	rrf	(_Load^(0+256)+7),f
 10529  00CE  0B89               	decfsz	9,f
 10530  00CF  28CC               	goto	u7995
 10531                           
 10532                           ;OverLoad_B1.c: 68: setLoad_AH_AL_Restore();
 10533  00D0  319D  25E4  3180   	fcall	_setLoad_AH_AL_Restore
 10534                           
 10535                           ;OverLoad_B1.c: 69: if (Load.ADH > Load.ADL) {
 10536  00D3  0022               	movlb	2	; select bank2
 10537  00D4  0830               	movf	((_Load+1)^(0+256)+5),w
 10538  00D5  0232               	subwf	((_Load+1)^(0+256)+7),w
 10539  00D6  1D03               	skipz
 10540  00D7  28DA               	goto	u8005
 10541  00D8  082F               	movf	(_Load^(0+256)+5),w
 10542  00D9  0231               	subwf	(_Load^(0+256)+7),w
 10543  00DA                     u8005:	
 10544  00DA  1803               	skipnc
 10545  00DB  0008               	return
 10546                           
 10547                           ;OverLoad_B1.c: 70: Load.AD = Load.ADH - Load.ADL;
 10548  00DC  3005               	movlw	5
 10549  00DD  3E2A               	addlw	_Load& (0+255)
 10550  00DE  0086               	movwf	6
 10551  00DF  3001               	movlw	1	; select bank2/3
 10552  00E0  0087               	movwf	7
 10553  00E1  0931               	comf	(_Load^(0+256)+7),w
 10554  00E2  0020               	movlb	0	; select bank0
 10555  00E3  00A9               	movwf	??_Load_Main
 10556  00E4  0022               	movlb	2	; select bank2
 10557  00E5  0932               	comf	((_Load+1)^(0+256)+7),w
 10558  00E6  0020               	movlb	0	; select bank0
 10559  00E7  00AA               	movwf	??_Load_Main+1
 10560  00E8  0AA9               	incf	??_Load_Main,f
 10561  00E9  1903               	skipnz
 10562  00EA  0AAA               	incf	??_Load_Main+1,f
 10563  00EB  3F40               	moviw [0]fsr1
 10564  00EC  0729               	addwf	??_Load_Main,w
 10565  00ED  0022               	movlb	2	; select bank2
 10566  00EE  00C9               	movwf	(_Load^(0+256)+31)
 10567  00EF  3F41               	moviw [1]fsr1
 10568  00F0  0020               	movlb	0	; select bank0
 10569  00F1  3D2A               	addwfc	??_Load_Main+1,w
 10570  00F2  0022               	movlb	2	; select bank2
 10571  00F3  00CA               	movwf	(_Load^(0+256)+32)
 10572                           
 10573                           ;OverLoad_B1.c: 71: Load.ADH = 0;
 10574  00F4  01AF               	clrf	(_Load^(0+256)+5)
 10575  00F5  01B0               	clrf	((_Load+1)^(0+256)+5)
 10576                           
 10577                           ;OverLoad_B1.c: 72: Load.ADL = 0;
 10578  00F6  01B1               	clrf	(_Load^(0+256)+7)
 10579  00F7  01B2               	clrf	((_Load+1)^(0+256)+7)
 10580                           
 10581                           ;OverLoad_B1.c: 73: Load.LightsCount = getMain_Lights_Count();
 10582  00F8  319D  2536  3180   	fcall	_getMain_Lights_Count
 10583  00FB  0020               	movlb	0	; select bank0
 10584  00FC  00A9               	movwf	??_Load_Main
 10585  00FD  0829               	movf	??_Load_Main,w
 10586  00FE  0022               	movlb	2	; select bank2
 10587  00FF  00D5               	movwf	(_Load^(0+256)+43)
 10588                           
 10589                           ;OverLoad_B1.c: 75: if (Load.Run == 1) {
 10590  0100  1DAA               	btfss	_Load^(0+256),3
 10591  0101  2927               	goto	l8010
 10592                           
 10593                           ;OverLoad_B1.c: 76: if (Load.Count < 2) {
 10594  0102  3002               	movlw	2
 10595  0103  0253               	subwf	(_Load^(0+256)+41),w
 10596  0104  1803               	skipnc
 10597  0105  2927               	goto	l8010
 10598                           
 10599                           ;OverLoad_B1.c: 77: Load.Count++;
 10600  0106  3001               	movlw	1
 10601  0107  0020               	movlb	0	; select bank0
 10602  0108  00A9               	movwf	??_Load_Main
 10603  0109  0829               	movf	??_Load_Main,w
 10604  010A  0022               	movlb	2	; select bank2
 10605  010B  07D3               	addwf	(_Load^(0+256)+41),f
 10606                           
 10607                           ;OverLoad_B1.c: 78: if (Load.Count == 1) {
 10608  010C  0853               	movf	(_Load^(0+256)+41),w
 10609  010D  3A01               	xorlw	1
 10610  010E  1D03               	skipz
 10611  010F  2914               	goto	l8002
 10612                           
 10613                           ;OverLoad_B1.c: 79: Load.JudgeValue = (20*55);
 10614  0110  304C               	movlw	76
 10615  0111  00CF               	movwf	(_Load^(0+256)+37)
 10616  0112  3004               	movlw	4
 10617  0113  291F               	goto	L6
 10618  0114                     l8002:	
 10619                           ;OverLoad_B1.c: 80: } else if (Load.Count == 2) {
 10620                           
 10621  0114  0853               	movf	(_Load^(0+256)+41),w
 10622  0115  3A02               	xorlw	2
 10623  0116  1D03               	skipz
 10624  0117  2927               	goto	l8010
 10625                           
 10626                           ;OverLoad_B1.c: 81: if (Load.LightsCount == 1) {
 10627  0118  0855               	movf	(_Load^(0+256)+43),w
 10628  0119  3A01               	xorlw	1
 10629  011A  1D03               	skipz
 10630  011B  2921               	goto	l8008
 10631                           
 10632                           ;OverLoad_B1.c: 82: Load.JudgeValue = (int)(1.8*55);
 10633  011C  3063               	movlw	99
 10634  011D  00CF               	movwf	(_Load^(0+256)+37)
 10635  011E  3000               	movlw	0
 10636  011F                     L6:	
 10637  011F  00D0               	movwf	(_Load^(0+256)+38)
 10638                           
 10639                           ;OverLoad_B1.c: 83: } else {
 10640  0120  2927               	goto	l8010
 10641  0121                     l8008:	
 10642                           
 10643                           ;OverLoad_B1.c: 84: Load.JudgeValue = (int)(1.8*55) + Load.TotalLoad;
 10644  0121  0833               	movf	(_Load^(0+256)+9),w
 10645  0122  3E63               	addlw	99
 10646  0123  00CF               	movwf	(_Load^(0+256)+37)
 10647  0124  3000               	movlw	0
 10648  0125  3D34               	addwfc	((_Load+1)^(0+256)+9),w
 10649  0126  00D0               	movwf	((_Load+1)^(0+256)+37)
 10650  0127                     l8010:	
 10651                           
 10652                           ;OverLoad_B1.c: 85: }
 10653                           ;OverLoad_B1.c: 86: }
 10654                           ;OverLoad_B1.c: 87: }
 10655                           ;OverLoad_B1.c: 88: }
 10656                           ;OverLoad_B1.c: 90: if (Load.AD >= Load.JudgeValue) {
 10657  0127  0850               	movf	((_Load+1)^(0+256)+37),w
 10658  0128  024A               	subwf	((_Load+1)^(0+256)+31),w
 10659  0129  1D03               	skipz
 10660  012A  292D               	goto	u8065
 10661  012B  084F               	movf	(_Load^(0+256)+37),w
 10662  012C  0249               	subwf	(_Load^(0+256)+31),w
 10663  012D                     u8065:	
 10664  012D  1C03               	skipc
 10665  012E  2972               	goto	l8028
 10666                           
 10667                           ;OverLoad_B1.c: 91: Load.ErrorCount++;
 10668  012F  3001               	movlw	1
 10669  0130  0020               	movlb	0	; select bank0
 10670  0131  00A9               	movwf	??_Load_Main
 10671  0132  0829               	movf	??_Load_Main,w
 10672  0133  0022               	movlb	2	; select bank2
 10673  0134  07D4               	addwf	(_Load^(0+256)+42),f
 10674                           
 10675                           ;OverLoad_B1.c: 92: if (Load.ErrorCount > 2) {
 10676  0135  3003               	movlw	3
 10677  0136  0254               	subwf	(_Load^(0+256)+42),w
 10678  0137  1C03               	skipc
 10679  0138  0008               	return
 10680                           
 10681                           ;OverLoad_B1.c: 93: Load.ErrorCount = 0;
 10682  0139  01D4               	clrf	(_Load^(0+256)+42)
 10683                           
 10684                           ;OverLoad_B1.c: 94: Load.ERROR = 1;
 10685  013A  16AA               	bsf	_Load^(0+256),5
 10686                           
 10687                           ;OverLoad_B1.c: 101: product->Data[4]=(Load.AD >> 8);
 10688  013B  084A               	movf	((_Load+1)^(0+256)+31),w
 10689  013C  0020               	movlb	0	; select bank0
 10690  013D  00A9               	movwf	??_Load_Main
 10691  013E  086F               	movf	_product,w
 10692  013F  3E04               	addlw	4
 10693  0140  0086               	movwf	6
 10694  0141  3002               	movlw	2	; select bank4/5
 10695  0142  0087               	movwf	7
 10696  0143  0829               	movf	??_Load_Main,w
 10697  0144  0081               	movwf	1
 10698                           
 10699                           ;OverLoad_B1.c: 102: product->Data[5]=Load.AD;
 10700  0145  0022               	movlb	2	; select bank2
 10701  0146  0849               	movf	(_Load^(0+256)+31),w
 10702  0147  0020               	movlb	0	; select bank0
 10703  0148  00A9               	movwf	??_Load_Main
 10704  0149  086F               	movf	_product,w
 10705  014A  3E05               	addlw	5
 10706  014B  0086               	movwf	6
 10707  014C  3002               	movlw	2	; select bank4/5
 10708  014D  0087               	movwf	7
 10709  014E  0829               	movf	??_Load_Main,w
 10710  014F  0081               	movwf	1
 10711                           
 10712                           ;OverLoad_B1.c: 103: product->Data[6]=(Load.JudgeValue >> 8);
 10713  0150  0022               	movlb	2	; select bank2
 10714  0151  0850               	movf	((_Load+1)^(0+256)+37),w
 10715  0152  0020               	movlb	0	; select bank0
 10716  0153  00A9               	movwf	??_Load_Main
 10717  0154  086F               	movf	_product,w
 10718  0155  3E06               	addlw	6
 10719  0156  0086               	movwf	6
 10720  0157  3002               	movlw	2	; select bank4/5
 10721  0158  0087               	movwf	7
 10722  0159  0829               	movf	??_Load_Main,w
 10723  015A  0081               	movwf	1
 10724                           
 10725                           ;OverLoad_B1.c: 104: product->Data[7]=Load.JudgeValue;
 10726  015B  0022               	movlb	2	; select bank2
 10727  015C  084F               	movf	(_Load^(0+256)+37),w
 10728  015D  0020               	movlb	0	; select bank0
 10729  015E  00A9               	movwf	??_Load_Main
 10730  015F  086F               	movf	_product,w
 10731  0160  3E07               	addlw	7
 10732  0161  0086               	movwf	6
 10733  0162  3002               	movlw	2	; select bank4/5
 10734  0163  0087               	movwf	7
 10735  0164  0829               	movf	??_Load_Main,w
 10736  0165  0081               	movwf	1
 10737                           
 10738                           ;OverLoad_B1.c: 105: product->Data[8]=Load.LightsCount;
 10739  0166  0022               	movlb	2	; select bank2
 10740  0167  0855               	movf	(_Load^(0+256)+43),w
 10741  0168  0020               	movlb	0	; select bank0
 10742  0169  00A9               	movwf	??_Load_Main
 10743  016A  086F               	movf	_product,w
 10744  016B  3E08               	addlw	8
 10745  016C  0086               	movwf	6
 10746  016D  3002               	movlw	2	; select bank4/5
 10747  016E  0087               	movwf	7
 10748  016F  0829               	movf	??_Load_Main,w
 10749  0170  0081               	movwf	1
 10750                           
 10751                           ;OverLoad_B1.c: 107: }
 10752                           ;OverLoad_B1.c: 108: } else {
 10753  0171  0008               	return
 10754  0172                     l8028:	
 10755                           
 10756                           ;OverLoad_B1.c: 109: Load.ErrorCount = 0;
 10757  0172  0022               	movlb	2	; select bank2
 10758  0173  01D4               	clrf	(_Load^(0+256)+42)
 10759                           
 10760                           ;OverLoad_B1.c: 110: if (Load.Run == 1) {
 10761  0174  1DAA               	btfss	_Load^(0+256),3
 10762  0175  0008               	return
 10763                           
 10764                           ;OverLoad_B1.c: 111: if (Load.OK == 0) {
 10765  0176  1BAA               	btfsc	_Load^(0+256),7
 10766  0177  0008               	return
 10767                           
 10768                           ;OverLoad_B1.c: 112: Load.SafeCount++;
 10769  0178  3001               	movlw	1
 10770  0179  0020               	movlb	0	; select bank0
 10771  017A  00A9               	movwf	??_Load_Main
 10772  017B  0829               	movf	??_Load_Main,w
 10773  017C  0022               	movlb	2	; select bank2
 10774  017D  07D6               	addwf	(_Load^(0+256)+44),f
 10775                           
 10776                           ;OverLoad_B1.c: 113: if (Load.SafeCount >= 3) {
 10777  017E  3003               	movlw	3
 10778  017F  0256               	subwf	(_Load^(0+256)+44),w
 10779  0180  1C03               	skipc
 10780  0181  0008               	return
 10781                           
 10782                           ;OverLoad_B1.c: 114: Load.SafeCount = 0;
 10783  0182  01D6               	clrf	(_Load^(0+256)+44)
 10784                           
 10785                           ;OverLoad_B1.c: 115: Load.OK = 1;
 10786  0183  17AA               	bsf	_Load^(0+256),7
 10787                           
 10788                           ;OverLoad_B1.c: 116: Load.Run = 0;
 10789  0184  11AA               	bcf	_Load^(0+256),3
 10790                           
 10791                           ;OverLoad_B1.c: 117: Load.Count = 0;
 10792  0185  01D3               	clrf	(_Load^(0+256)+41)
 10793                           
 10794                           ;OverLoad_B1.c: 118: Load.TotalLoad = Load.AD;
 10795  0186  084A               	movf	((_Load+1)^(0+256)+31),w
 10796  0187  01B4               	clrf	((_Load+1)^(0+256)+9)
 10797  0188  07B4               	addwf	((_Load+1)^(0+256)+9),f
 10798  0189  0849               	movf	(_Load^(0+256)+31),w
 10799  018A  01B3               	clrf	(_Load^(0+256)+9)
 10800  018B  07B3               	addwf	(_Load^(0+256)+9),f
 10801                           
 10802                           ;OverLoad_B1.c: 121: product->Data[4]=(Load.AD >> 8);
 10803  018C  084A               	movf	((_Load+1)^(0+256)+31),w
 10804  018D  0020               	movlb	0	; select bank0
 10805  018E  00A9               	movwf	??_Load_Main
 10806  018F  086F               	movf	_product,w
 10807  0190  3E04               	addlw	4
 10808  0191  0086               	movwf	6
 10809  0192  3002               	movlw	2	; select bank4/5
 10810  0193  0087               	movwf	7
 10811  0194  0829               	movf	??_Load_Main,w
 10812  0195  0081               	movwf	1
 10813                           
 10814                           ;OverLoad_B1.c: 122: product->Data[5]=Load.AD;
 10815  0196  0022               	movlb	2	; select bank2
 10816  0197  0849               	movf	(_Load^(0+256)+31),w
 10817  0198  0020               	movlb	0	; select bank0
 10818  0199  00A9               	movwf	??_Load_Main
 10819  019A  086F               	movf	_product,w
 10820  019B  3E05               	addlw	5
 10821  019C  0086               	movwf	6
 10822  019D  3002               	movlw	2	; select bank4/5
 10823  019E  0087               	movwf	7
 10824  019F  0829               	movf	??_Load_Main,w
 10825  01A0  0081               	movwf	1
 10826                           
 10827                           ;OverLoad_B1.c: 123: product->Data[6]=(Load.JudgeValue >> 8);
 10828  01A1  0022               	movlb	2	; select bank2
 10829  01A2  0850               	movf	((_Load+1)^(0+256)+37),w
 10830  01A3  0020               	movlb	0	; select bank0
 10831  01A4  00A9               	movwf	??_Load_Main
 10832  01A5  086F               	movf	_product,w
 10833  01A6  3E06               	addlw	6
 10834  01A7  0086               	movwf	6
 10835  01A8  3002               	movlw	2	; select bank4/5
 10836  01A9  0087               	movwf	7
 10837  01AA  0829               	movf	??_Load_Main,w
 10838  01AB  0081               	movwf	1
 10839                           
 10840                           ;OverLoad_B1.c: 124: product->Data[7]=Load.JudgeValue;
 10841  01AC  0022               	movlb	2	; select bank2
 10842  01AD  084F               	movf	(_Load^(0+256)+37),w
 10843  01AE  0020               	movlb	0	; select bank0
 10844  01AF  00A9               	movwf	??_Load_Main
 10845  01B0  086F               	movf	_product,w
 10846  01B1  3E07               	addlw	7
 10847  01B2  0086               	movwf	6
 10848  01B3  3002               	movlw	2	; select bank4/5
 10849  01B4  0087               	movwf	7
 10850  01B5  0829               	movf	??_Load_Main,w
 10851  01B6  0081               	movwf	1
 10852                           
 10853                           ;OverLoad_B1.c: 125: product->Data[8]=Load.LightsCount;
 10854  01B7  0022               	movlb	2	; select bank2
 10855  01B8  0855               	movf	(_Load^(0+256)+43),w
 10856  01B9  0020               	movlb	0	; select bank0
 10857  01BA  00A9               	movwf	??_Load_Main
 10858  01BB  086F               	movf	_product,w
 10859  01BC  3E08               	addlw	8
 10860  01BD  0086               	movwf	6
 10861  01BE  3002               	movlw	2	; select bank4/5
 10862  01BF  0087               	movwf	7
 10863  01C0  0829               	movf	??_Load_Main,w
 10864  01C1  0081               	movwf	1
 10865                           
 10866                           ;OverLoad_B1.c: 127: }
 10867                           ;OverLoad_B1.c: 128: }
 10868                           ;OverLoad_B1.c: 129: }
 10869                           ;OverLoad_B1.c: 130: }
 10870                           ;OverLoad_B1.c: 131: }
 10871                           ;OverLoad_B1.c: 132: }
 10872                           ;OverLoad_B1.c: 133: } else {
 10873  01C2  0008               	return
 10874  01C3                     l1463:	
 10875                           
 10876                           ;OverLoad_B1.c: 134: Load.ADtoGO = 1;
 10877  01C3  162A               	bsf	_Load^(0+256),4
 10878                           
 10879                           ;OverLoad_B1.c: 135: }
 10880                           ;OverLoad_B1.c: 136: } else {
 10881  01C4  0008               	return
 10882  01C5                     l1462:	
 10883                           
 10884                           ;OverLoad_B1.c: 137: if (Load.LightsON == 1 && error != 3) {
 10885  01C5  1D2A               	btfss	_Load^(0+256),2
 10886  01C6  2A19               	goto	l8096
 10887  01C7  0020               	movlb	0	; select bank0
 10888  01C8  082E               	movf	Load_Main@error,w
 10889  01C9  3A03               	xorlw	3
 10890  01CA  1903               	skipnz
 10891  01CB  2A19               	goto	l8096
 10892                           
 10893                           ;OverLoad_B1.c: 138: Load.LightsON = 0;
 10894  01CC  0022               	movlb	2	; select bank2
 10895  01CD  112A               	bcf	_Load^(0+256),2
 10896                           
 10897                           ;OverLoad_B1.c: 140: Load.Time = 0;
 10898  01CE  01AB               	clrf	(_Load^(0+256)+1)
 10899  01CF  01AC               	clrf	((_Load+1)^(0+256)+1)
 10900                           
 10901                           ;OverLoad_B1.c: 141: Load.ADtoGO = 0;
 10902  01D0  122A               	bcf	_Load^(0+256),4
 10903                           
 10904                           ;OverLoad_B1.c: 142: setLoad_AH_AL_Restore();
 10905  01D1  319D  25E4  3180   	fcall	_setLoad_AH_AL_Restore
 10906                           
 10907                           ;OverLoad_B1.c: 143: Load.Count = 0;
 10908  01D4  0022               	movlb	2	; select bank2
 10909  01D5  01D3               	clrf	(_Load^(0+256)+41)
 10910                           
 10911                           ;OverLoad_B1.c: 144: Load.ErrorCount = 0;
 10912  01D6  01D4               	clrf	(_Load^(0+256)+42)
 10913                           
 10914                           ;OverLoad_B1.c: 145: Load.SafeCount = 0;
 10915  01D7  01D6               	clrf	(_Load^(0+256)+44)
 10916                           
 10917                           ;OverLoad_B1.c: 147: Load.ADH = 0;
 10918  01D8  01AF               	clrf	(_Load^(0+256)+5)
 10919  01D9  01B0               	clrf	((_Load+1)^(0+256)+5)
 10920                           
 10921                           ;OverLoad_B1.c: 148: Load.ADL = 0;
 10922  01DA  01B1               	clrf	(_Load^(0+256)+7)
 10923  01DB  01B2               	clrf	((_Load+1)^(0+256)+7)
 10924                           
 10925                           ;OverLoad_B1.c: 149: Load.AD = 0;
 10926  01DC  01C9               	clrf	(_Load^(0+256)+31)
 10927  01DD  01CA               	clrf	((_Load+1)^(0+256)+31)
 10928                           
 10929                           ;OverLoad_B1.c: 150: Load.JudgeValue = 0;
 10930  01DE  01CF               	clrf	(_Load^(0+256)+37)
 10931  01DF  01D0               	clrf	((_Load+1)^(0+256)+37)
 10932                           
 10933                           ;OverLoad_B1.c: 151: Load.LightsCount = 0;
 10934  01E0  01D5               	clrf	(_Load^(0+256)+43)
 10935                           
 10936                           ;OverLoad_B1.c: 152: Load.Run = 0;
 10937  01E1  11AA               	bcf	_Load^(0+256),3
 10938                           
 10939                           ;OverLoad_B1.c: 153: Load.OK = 1;
 10940  01E2  17AA               	bsf	_Load^(0+256),7
 10941                           
 10942                           ;OverLoad_B1.c: 155: product->Data[4]=(Load.AD >> 8);
 10943  01E3  084A               	movf	((_Load+1)^(0+256)+31),w
 10944  01E4  0020               	movlb	0	; select bank0
 10945  01E5  00A9               	movwf	??_Load_Main
 10946  01E6  086F               	movf	_product,w
 10947  01E7  3E04               	addlw	4
 10948  01E8  0086               	movwf	6
 10949  01E9  3002               	movlw	2	; select bank4/5
 10950  01EA  0087               	movwf	7
 10951  01EB  0829               	movf	??_Load_Main,w
 10952  01EC  0081               	movwf	1
 10953                           
 10954                           ;OverLoad_B1.c: 156: product->Data[5]=Load.AD;
 10955  01ED  0022               	movlb	2	; select bank2
 10956  01EE  0849               	movf	(_Load^(0+256)+31),w
 10957  01EF  0020               	movlb	0	; select bank0
 10958  01F0  00A9               	movwf	??_Load_Main
 10959  01F1  086F               	movf	_product,w
 10960  01F2  3E05               	addlw	5
 10961  01F3  0086               	movwf	6
 10962  01F4  3002               	movlw	2	; select bank4/5
 10963  01F5  0087               	movwf	7
 10964  01F6  0829               	movf	??_Load_Main,w
 10965  01F7  0081               	movwf	1
 10966                           
 10967                           ;OverLoad_B1.c: 157: product->Data[6]=(Load.JudgeValue >> 8);
 10968  01F8  0022               	movlb	2	; select bank2
 10969  01F9  0850               	movf	((_Load+1)^(0+256)+37),w
 10970  01FA  0020               	movlb	0	; select bank0
 10971  01FB  00A9               	movwf	??_Load_Main
 10972  01FC  086F               	movf	_product,w
 10973  01FD  3E06               	addlw	6
 10974  01FE  0086               	movwf	6
 10975  01FF  3002               	movlw	2	; select bank4/5
 10976  0200  0087               	movwf	7
 10977  0201  0829               	movf	??_Load_Main,w
 10978  0202  0081               	movwf	1
 10979                           
 10980                           ;OverLoad_B1.c: 158: product->Data[7]=Load.JudgeValue;
 10981  0203  0022               	movlb	2	; select bank2
 10982  0204  084F               	movf	(_Load^(0+256)+37),w
 10983  0205  0020               	movlb	0	; select bank0
 10984  0206  00A9               	movwf	??_Load_Main
 10985  0207  086F               	movf	_product,w
 10986  0208  3E07               	addlw	7
 10987  0209  0086               	movwf	6
 10988  020A  3002               	movlw	2	; select bank4/5
 10989  020B  0087               	movwf	7
 10990  020C  0829               	movf	??_Load_Main,w
 10991  020D  0081               	movwf	1
 10992                           
 10993                           ;OverLoad_B1.c: 159: product->Data[8]=Load.LightsCount;
 10994  020E  0022               	movlb	2	; select bank2
 10995  020F  0855               	movf	(_Load^(0+256)+43),w
 10996  0210  0020               	movlb	0	; select bank0
 10997  0211  00A9               	movwf	??_Load_Main
 10998  0212  086F               	movf	_product,w
 10999  0213  3E08               	addlw	8
 11000  0214  0086               	movwf	6
 11001  0215  3002               	movlw	2	; select bank4/5
 11002  0216  0087               	movwf	7
 11003  0217  0829               	movf	??_Load_Main,w
 11004  0218  0081               	movwf	1
 11005  0219                     l8096:	
 11006                           
 11007                           ;OverLoad_B1.c: 161: }
 11008                           ;OverLoad_B1.c: 162: if (Load.ERROR == 1) {
 11009  0219  0022               	movlb	2	; select bank2
 11010  021A  1EAA               	btfss	_Load^(0+256),5
 11011  021B  0008               	return
 11012                           
 11013                           ;OverLoad_B1.c: 163: Load.ErrorTime++;
 11014  021C  3001               	movlw	1
 11015  021D  07AD               	addwf	(_Load^(0+256)+3),f
 11016  021E  3000               	movlw	0
 11017  021F  3DAE               	addwfc	((_Load+1)^(0+256)+3),f
 11018                           
 11019                           ;OverLoad_B1.c: 164: if (Load.ErrorTime >= 1000) {
 11020  0220  3003               	movlw	3
 11021  0221  022E               	subwf	((_Load+1)^(0+256)+3),w
 11022  0222  30E8               	movlw	232
 11023  0223  1903               	skipnz
 11024  0224  022D               	subwf	(_Load^(0+256)+3),w
 11025  0225  1C03               	skipc
 11026  0226  0008               	return
 11027                           
 11028                           ;OverLoad_B1.c: 165: Load.ErrorTime = 0;
 11029  0227  01AD               	clrf	(_Load^(0+256)+3)
 11030  0228  01AE               	clrf	((_Load+1)^(0+256)+3)
 11031                           
 11032                           ;OverLoad_B1.c: 172: Load.ERROR = 0;
 11033  0229  12AA               	bcf	_Load^(0+256),5
 11034                           
 11035                           ;OverLoad_B1.c: 173: }
 11036                           ;OverLoad_B1.c: 174: }
 11037                           ;OverLoad_B1.c: 175: }
 11038                           ;OverLoad_B1.c: 176: } else {
 11039  022A  0008               	return
 11040  022B                     l1458:	
 11041                           
 11042                           ;OverLoad_B1.c: 177: if (myMain.PowerON == 1) {
 11043  022B  0021               	movlb	1	; select bank1
 11044  022C  1C20               	btfss	_myMain^(0+128),0
 11045  022D  0008               	return
 11046                           
 11047                           ;OverLoad_B1.c: 178: Load.Enable = 1;
 11048  022E  0022               	movlb	2	; select bank2
 11049  022F  142A               	bsf	_Load^(0+256),0
 11050  0230  0008               	return
 11051  0231                     __end_of_Load_Main:	
 11052                           
 11053                           	psect	text54
 11054  1B7E                     __ptext54:	
 11055 ;; *************** function _getMain_LoadOK *****************
 11056 ;; Defined at:
 11057 ;;		line 432 in file "../src/main_B1.c"
 11058 ;; Parameters:    Size  Location     Type
 11059 ;;		None
 11060 ;; Auto vars:     Size  Location     Type
 11061 ;;  ok              1    2[BANK0 ] unsigned char 
 11062 ;; Return value:  Size  Location     Type
 11063 ;;                  1    wreg      unsigned char 
 11064 ;; Registers used:
 11065 ;;		wreg, status,2, pclath, cstack
 11066 ;; Tracked objects:
 11067 ;;		On entry : 0/0
 11068 ;;		On exit  : 0/0
 11069 ;;		Unchanged: 0/0
 11070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11072 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11073 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11074 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11075 ;;Total ram usage:        2 bytes
 11076 ;; Hardware stack levels used:    1
 11077 ;; Hardware stack levels required when called:    6
 11078 ;; This function calls:
 11079 ;;		_getDimmer_LoadOK
 11080 ;; This function is called by:
 11081 ;;		_Load_Main
 11082 ;; This function uses a non-reentrant model
 11083 ;;
 11084                           
 11085                           
 11086                           ;psect for function _getMain_LoadOK
 11087  1B7E                     _getMain_LoadOK:	
 11088                           
 11089                           ;main_B1.c: 433: char ok = 0;
 11090                           
 11091                           ;incstack = 0
 11092                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 11093  1B7E  0020               	movlb	0	; select bank0
 11094  1B7F  01A2               	clrf	getMain_LoadOK@ok
 11095                           
 11096                           ;main_B1.c: 439: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 11097  1B80  319A  22E2         	fcall	_getDimmer_LoadOK
 11098  1B82  3A01               	xorlw	1
 11099  1B83  3000               	movlw	0
 11100  1B84  1903               	skipnz
 11101  1B85  3001               	movlw	1
 11102  1B86  0020               	movlb	0	; select bank0
 11103  1B87  00A1               	movwf	??_getMain_LoadOK
 11104  1B88  0821               	movf	??_getMain_LoadOK,w
 11105  1B89  00A2               	movwf	getMain_LoadOK@ok
 11106                           
 11107                           ;main_B1.c: 441: return ok;
 11108  1B8A  0822               	movf	getMain_LoadOK@ok,w
 11109  1B8B  0008               	return
 11110  1B8C                     __end_of_getMain_LoadOK:	
 11111                           
 11112                           	psect	text55
 11113  1AE2                     __ptext55:	
 11114 ;; *************** function _getDimmer_LoadOK *****************
 11115 ;; Defined at:
 11116 ;;		line 618 in file "../src/Dimmer_B1.c"
 11117 ;; Parameters:    Size  Location     Type
 11118 ;;		None
 11119 ;; Auto vars:     Size  Location     Type
 11120 ;;  status          1    0[BANK0 ] unsigned char 
 11121 ;; Return value:  Size  Location     Type
 11122 ;;                  1    wreg      unsigned char 
 11123 ;; Registers used:
 11124 ;;		wreg, status,2
 11125 ;; Tracked objects:
 11126 ;;		On entry : 0/0
 11127 ;;		On exit  : 0/0
 11128 ;;		Unchanged: 0/0
 11129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11131 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11133 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11134 ;;Total ram usage:        1 bytes
 11135 ;; Hardware stack levels used:    1
 11136 ;; Hardware stack levels required when called:    5
 11137 ;; This function calls:
 11138 ;;		Nothing
 11139 ;; This function is called by:
 11140 ;;		_getMain_LoadOK
 11141 ;; This function uses a non-reentrant model
 11142 ;;
 11143                           
 11144                           
 11145                           ;psect for function _getDimmer_LoadOK
 11146  1AE2                     _getDimmer_LoadOK:	
 11147                           
 11148                           ;Dimmer_B1.c: 619: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 11149                           
 11150                           ;incstack = 0
 11151                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 11152  1AE2  3000               	movlw	0
 11153  1AE3  0022               	movlb	2	; select bank2
 11154  1AE4  18A0               	btfsc	_Dimmer^(0+256),1
 11155  1AE5  3001               	movlw	1
 11156  1AE6  0020               	movlb	0	; select bank0
 11157  1AE7  00A0               	movwf	getDimmer_LoadOK@status
 11158                           
 11159                           ;Dimmer_B1.c: 620: return status;
 11160  1AE8  0820               	movf	getDimmer_LoadOK@status,w
 11161  1AE9  0008               	return
 11162  1AEA                     __end_of_getDimmer_LoadOK:	
 11163                           
 11164                           	psect	text56
 11165  1D36                     __ptext56:	
 11166 ;; *************** function _getMain_Lights_Count *****************
 11167 ;; Defined at:
 11168 ;;		line 402 in file "../src/main_B1.c"
 11169 ;; Parameters:    Size  Location     Type
 11170 ;;		None
 11171 ;; Auto vars:     Size  Location     Type
 11172 ;;  status2         1    3[BANK0 ] unsigned char 
 11173 ;;  status1         1    2[BANK0 ] unsigned char 
 11174 ;;  status3         1    1[BANK0 ] unsigned char 
 11175 ;;  count           1    0[BANK0 ] unsigned char 
 11176 ;; Return value:  Size  Location     Type
 11177 ;;                  1    wreg      unsigned char 
 11178 ;; Registers used:
 11179 ;;		wreg, status,2, status,0
 11180 ;; Tracked objects:
 11181 ;;		On entry : 0/0
 11182 ;;		On exit  : 0/0
 11183 ;;		Unchanged: 0/0
 11184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11186 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11188 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11189 ;;Total ram usage:        4 bytes
 11190 ;; Hardware stack levels used:    1
 11191 ;; Hardware stack levels required when called:    5
 11192 ;; This function calls:
 11193 ;;		Nothing
 11194 ;; This function is called by:
 11195 ;;		_Load_Main
 11196 ;; This function uses a non-reentrant model
 11197 ;;
 11198                           
 11199                           
 11200                           ;psect for function _getMain_Lights_Count
 11201  1D36                     _getMain_Lights_Count:	
 11202                           
 11203                           ;main_B1.c: 403: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 11204                           
 11205                           ;incstack = 0
 11206                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11207  1D36  0020               	movlb	0	; select bank0
 11208  1D37  01A2               	clrf	getMain_Lights_Count@status1
 11209  1D38  01A3               	clrf	getMain_Lights_Count@status2
 11210  1D39  01A1               	clrf	getMain_Lights_Count@status3
 11211  1D3A  01A0               	clrf	getMain_Lights_Count@count
 11212                           
 11213                           ;main_B1.c: 407: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 11214  1D3B  3000               	movlw	0
 11215  1D3C  0023               	movlb	3	; select bank3
 11216  1D3D  18C7               	btfsc	(_DimmerLights1^(0+384)+9),1
 11217  1D3E  3001               	movlw	1
 11218  1D3F  0020               	movlb	0	; select bank0
 11219  1D40  00A2               	movwf	getMain_Lights_Count@status1
 11220                           
 11221                           ;main_B1.c: 410: status2 = DimmerLights2.Loop == 1 ? 1 : 0;
 11222  1D41  3000               	movlw	0
 11223  1D42  0023               	movlb	3	; select bank3
 11224  1D43  18D6               	btfsc	(_DimmerLights2^(0+384)+9),1
 11225  1D44  3001               	movlw	1
 11226  1D45  0020               	movlb	0	; select bank0
 11227  1D46  00A3               	movwf	getMain_Lights_Count@status2
 11228                           
 11229                           ;main_B1.c: 428: return count = (status1 + status2 + status3);
 11230  1D47  0822               	movf	getMain_Lights_Count@status1,w
 11231  1D48  0723               	addwf	getMain_Lights_Count@status2,w
 11232  1D49  0721               	addwf	getMain_Lights_Count@status3,w
 11233  1D4A  00A0               	movwf	getMain_Lights_Count@count
 11234  1D4B  0008               	return
 11235  1D4C                     __end_of_getMain_Lights_Count:	
 11236                           
 11237                           	psect	text57
 11238  1AAA                     __ptext57:	
 11239 ;; *************** function _Load_Initialization *****************
 11240 ;; Defined at:
 11241 ;;		line 9 in file "../src/OverLoad_B1.c"
 11242 ;; Parameters:    Size  Location     Type
 11243 ;;		None
 11244 ;; Auto vars:     Size  Location     Type
 11245 ;;		None
 11246 ;; Return value:  Size  Location     Type
 11247 ;;		None               void
 11248 ;; Registers used:
 11249 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11250 ;; Tracked objects:
 11251 ;;		On entry : 0/0
 11252 ;;		On exit  : 0/0
 11253 ;;		Unchanged: 0/0
 11254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11259 ;;Total ram usage:        0 bytes
 11260 ;; Hardware stack levels used:    1
 11261 ;; Hardware stack levels required when called:    6
 11262 ;; This function calls:
 11263 ;;		_setLoad_AH_AL_Restore
 11264 ;; This function is called by:
 11265 ;;		_main
 11266 ;; This function uses a non-reentrant model
 11267 ;;
 11268                           
 11269                           
 11270                           ;psect for function _Load_Initialization
 11271  1AAA                     _Load_Initialization:	
 11272                           
 11273                           ;OverLoad_B1.c: 10: Load.OK = 1;
 11274                           
 11275                           ;incstack = 0
 11276                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11277  1AAA  0022               	movlb	2	; select bank2
 11278  1AAB  17AA               	bsf	_Load^(0+256),7
 11279                           
 11280                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11281  1AAC  319D  25E4         	fcall	_setLoad_AH_AL_Restore
 11282  1AAE  0008               	return
 11283  1AAF                     __end_of_Load_Initialization:	
 11284                           
 11285                           	psect	text58
 11286  1DE4                     __ptext58:	
 11287 ;; *************** function _setLoad_AH_AL_Restore *****************
 11288 ;; Defined at:
 11289 ;;		line 284 in file "../src/OverLoad_B1.c"
 11290 ;; Parameters:    Size  Location     Type
 11291 ;;		None
 11292 ;; Auto vars:     Size  Location     Type
 11293 ;;  i               1    1[BANK0 ] unsigned char 
 11294 ;; Return value:  Size  Location     Type
 11295 ;;		None               void
 11296 ;; Registers used:
 11297 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11298 ;; Tracked objects:
 11299 ;;		On entry : 0/0
 11300 ;;		On exit  : 0/0
 11301 ;;		Unchanged: 0/0
 11302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11304 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11305 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11306 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11307 ;;Total ram usage:        2 bytes
 11308 ;; Hardware stack levels used:    1
 11309 ;; Hardware stack levels required when called:    5
 11310 ;; This function calls:
 11311 ;;		Nothing
 11312 ;; This function is called by:
 11313 ;;		_Load_Initialization
 11314 ;;		_Load_Main
 11315 ;; This function uses a non-reentrant model
 11316 ;;
 11317                           
 11318                           
 11319                           ;psect for function _setLoad_AH_AL_Restore
 11320  1DE4                     _setLoad_AH_AL_Restore:	
 11321                           
 11322                           ;OverLoad_B1.c: 285: char i;
 11323                           ;OverLoad_B1.c: 286: for (i = 0; i < 5; i++) {
 11324                           
 11325                           ;incstack = 0
 11326                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11327  1DE4  0020               	movlb	0	; select bank0
 11328  1DE5  01A1               	clrf	setLoad_AH_AL_Restore@i
 11329  1DE6                     L7:	
 11330  1DE6  3005               	movlw	5
 11331  1DE7  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11332  1DE8  1803               	btfsc	3,0
 11333  1DE9  0008               	return
 11334                           
 11335                           ;OverLoad_B1.c: 287: Load.AH[i] = 0;
 11336  1DEA  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11337  1DEB  3E35               	addlw	(_Load+11)& (0+255)
 11338  1DEC  0086               	movwf	6
 11339  1DED  3001               	movlw	1	; select bank2/3
 11340  1DEE  0087               	movwf	7
 11341  1DEF  3000               	movlw	0
 11342  1DF0  3FC0               	movwi [0]fsr1
 11343  1DF1  3FC1               	movwi [1]fsr1
 11344                           
 11345                           ;OverLoad_B1.c: 288: Load.AL[i] = 0xffff;
 11346  1DF2  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11347  1DF3  3E3F               	addlw	(_Load+21)& (0+255)
 11348  1DF4  0086               	movwf	6
 11349  1DF5  3001               	movlw	1	; select bank2/3
 11350  1DF6  0087               	movwf	7
 11351  1DF7  30FF               	movlw	255
 11352  1DF8  3FC0               	movwi [0]fsr1
 11353  1DF9  30FF               	movlw	255
 11354  1DFA  3FC1               	movwi [1]fsr1
 11355  1DFB  3001               	movlw	1
 11356  1DFC  00A0               	movwf	??_setLoad_AH_AL_Restore
 11357  1DFD  0820               	movf	??_setLoad_AH_AL_Restore,w
 11358  1DFE  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11359  1DFF  2DE6               	goto	L7
 11360  1E00                     __end_of_setLoad_AH_AL_Restore:	
 11361                           
 11362                           	psect	text59
 11363  1B41                     __ptext59:	
 11364 ;; *************** function _LED_Main *****************
 11365 ;; Defined at:
 11366 ;;		line 47 in file "../src/LED_B1.c"
 11367 ;; Parameters:    Size  Location     Type
 11368 ;;		None
 11369 ;; Auto vars:     Size  Location     Type
 11370 ;;		None
 11371 ;; Return value:  Size  Location     Type
 11372 ;;		None               void
 11373 ;; Registers used:
 11374 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11375 ;; Tracked objects:
 11376 ;;		On entry : 0/0
 11377 ;;		On exit  : 0/0
 11378 ;;		Unchanged: 0/0
 11379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11384 ;;Total ram usage:        0 bytes
 11385 ;; Hardware stack levels used:    1
 11386 ;; Hardware stack levels required when called:    7
 11387 ;; This function calls:
 11388 ;;		_setLED_Main
 11389 ;; This function is called by:
 11390 ;;		_main
 11391 ;; This function uses a non-reentrant model
 11392 ;;
 11393                           
 11394                           
 11395                           ;psect for function _LED_Main
 11396  1B41                     _LED_Main:	
 11397                           
 11398                           ;LED_B1.c: 49: setLED_Main(1);
 11399                           
 11400                           ;incstack = 0
 11401                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11402  1B41  3001               	movlw	1
 11403  1B42  3192  22C2  319B   	fcall	_setLED_Main
 11404                           
 11405                           ;LED_B1.c: 52: setLED_Main(2);
 11406  1B45  3002               	movlw	2
 11407  1B46  3192  22C2  319B   	fcall	_setLED_Main
 11408                           
 11409                           ;LED_B1.c: 58: setLED_Main(99);
 11410  1B49  3063               	movlw	99
 11411  1B4A  3192  22C2         	fcall	_setLED_Main
 11412  1B4C  0008               	return
 11413  1B4D                     __end_of_LED_Main:	
 11414                           
 11415                           	psect	text60
 11416  12C2                     __ptext60:	
 11417 ;; *************** function _setLED_Main *****************
 11418 ;; Defined at:
 11419 ;;		line 216 in file "../src/LED_B1.c"
 11420 ;; Parameters:    Size  Location     Type
 11421 ;;  led             1    wreg     unsigned char 
 11422 ;; Auto vars:     Size  Location     Type
 11423 ;;  led             1    4[BANK0 ] unsigned char 
 11424 ;; Return value:  Size  Location     Type
 11425 ;;		None               void
 11426 ;; Registers used:
 11427 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11428 ;; Tracked objects:
 11429 ;;		On entry : 0/0
 11430 ;;		On exit  : 0/0
 11431 ;;		Unchanged: 0/0
 11432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11434 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11435 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11436 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11437 ;;Total ram usage:        3 bytes
 11438 ;; Hardware stack levels used:    1
 11439 ;; Hardware stack levels required when called:    6
 11440 ;; This function calls:
 11441 ;;		_LedPointSelect
 11442 ;; This function is called by:
 11443 ;;		_LED_Main
 11444 ;; This function uses a non-reentrant model
 11445 ;;
 11446                           
 11447                           
 11448                           ;psect for function _setLED_Main
 11449  12C2                     _setLED_Main:	
 11450                           
 11451                           ;incstack = 0
 11452                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11453                           ;setLED_Main@led stored from wreg
 11454  12C2  0020               	movlb	0	; select bank0
 11455  12C3  00A4               	movwf	setLED_Main@led
 11456                           
 11457                           ;LED_B1.c: 217: LedPointSelect(led);
 11458  12C4  0824               	movf	setLED_Main@led,w
 11459  12C5  319D  25C9  3192   	fcall	_LedPointSelect
 11460                           
 11461                           ;LED_B1.c: 218: if (LED->GO == 1) {
 11462  12C8  087B               	movf	_LED,w
 11463  12C9  0086               	movwf	6
 11464  12CA  3001               	movlw	1	; select bank2/3
 11465  12CB  0087               	movwf	7
 11466  12CC  1C81               	btfss	1,1
 11467  12CD  0008               	return
 11468                           
 11469                           ;LED_B1.c: 219: LED->Time++;
 11470  12CE  0A7B               	incf	_LED,w
 11471  12CF  0086               	movwf	6
 11472  12D0  3001               	movlw	1	; select bank2/3
 11473  12D1  0087               	movwf	7
 11474  12D2  3001               	movlw	1
 11475  12D3  0781               	addwf	1,f
 11476  12D4  3141               	addfsr 1,1
 11477  12D5  1803               	skipnc
 11478  12D6  0A81               	incf	1,f
 11479                           
 11480                           ;LED_B1.c: 220: if (LED->Time >= 500 / 10) {
 11481  12D7  0A7B               	incf	_LED,w
 11482  12D8  0086               	movwf	6
 11483  12D9  3001               	movlw	1	; select bank2/3
 11484  12DA  0087               	movwf	7
 11485  12DB  3F40               	moviw [0]fsr1
 11486  12DC  0020               	movlb	0	; select bank0
 11487  12DD  00A2               	movwf	??_setLED_Main
 11488  12DE  3F41               	moviw [1]fsr1
 11489  12DF  00A3               	movwf	??_setLED_Main+1
 11490  12E0  3000               	movlw	0
 11491  12E1  0223               	subwf	??_setLED_Main+1,w
 11492  12E2  3032               	movlw	50
 11493  12E3  1903               	skipnz
 11494  12E4  0222               	subwf	??_setLED_Main,w
 11495  12E5  1C03               	skipc
 11496  12E6  0008               	return
 11497                           
 11498                           ;LED_B1.c: 221: LED->Time = 0;
 11499  12E7  0A7B               	incf	_LED,w
 11500  12E8  0086               	movwf	6
 11501  12E9  3001               	movlw	1	; select bank2/3
 11502  12EA  0087               	movwf	7
 11503  12EB  3000               	movlw	0
 11504  12EC  3FC0               	movwi [0]fsr1
 11505  12ED  3FC1               	movwi [1]fsr1
 11506                           
 11507                           ;LED_B1.c: 223: if (led == 1) {
 11508  12EE  0824               	movf	setLED_Main@led,w
 11509  12EF  3A01               	xorlw	1
 11510                           
 11511                           ;LED_B1.c: 224: RA3 = RA3 == 1 ? 0 : 1;
 11512  12F0  3008               	movlw	8
 11513  12F1  1903               	btfsc	3,2
 11514  12F2  068C               	xorwf	12,f
 11515                           
 11516                           ;LED_B1.c: 225: }
 11517                           ;LED_B1.c: 228: if (led == 2) {
 11518  12F3  0824               	movf	setLED_Main@led,w
 11519  12F4  3A02               	xorlw	2
 11520  12F5  1D03               	skipz
 11521  12F6  2AF9               	goto	l1031
 11522                           
 11523                           ;LED_B1.c: 229: RC7 = RC7 == 1 ? 0 : 1;
 11524  12F7  3080               	movlw	128
 11525  12F8  068E               	xorwf	14,f
 11526  12F9                     l1031:	
 11527                           
 11528                           ;LED_B1.c: 230: }
 11529                           ;LED_B1.c: 238: if (led == 99) {
 11530  12F9  0824               	movf	setLED_Main@led,w
 11531  12FA  3A63               	xorlw	99
 11532  12FB  1D03               	skipz
 11533  12FC  0008               	return
 11534                           
 11535                           ;LED_B1.c: 239: RB5 = RB5 == 1 ? 0 : 1;
 11536  12FD  3020               	movlw	32
 11537  12FE  068D               	xorwf	13,f
 11538  12FF  0008               	return
 11539  1300                     __end_of_setLED_Main:	
 11540                           
 11541                           	psect	text61
 11542  1B35                     __ptext61:	
 11543 ;; *************** function _LED_Initialization *****************
 11544 ;; Defined at:
 11545 ;;		line 31 in file "../src/LED_B1.c"
 11546 ;; Parameters:    Size  Location     Type
 11547 ;;		None
 11548 ;; Auto vars:     Size  Location     Type
 11549 ;;		None
 11550 ;; Return value:  Size  Location     Type
 11551 ;;		None               void
 11552 ;; Registers used:
 11553 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11554 ;; Tracked objects:
 11555 ;;		On entry : 0/0
 11556 ;;		On exit  : 0/0
 11557 ;;		Unchanged: 0/0
 11558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11562 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11563 ;;Total ram usage:        0 bytes
 11564 ;; Hardware stack levels used:    1
 11565 ;; Hardware stack levels required when called:    8
 11566 ;; This function calls:
 11567 ;;		_setLED_Initialization
 11568 ;; This function is called by:
 11569 ;;		_main
 11570 ;; This function uses a non-reentrant model
 11571 ;;
 11572                           
 11573                           
 11574                           ;psect for function _LED_Initialization
 11575  1B35                     _LED_Initialization:	
 11576                           
 11577                           ;LED_B1.c: 33: setLED_Initialization(1);
 11578                           
 11579                           ;incstack = 0
 11580                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11581  1B35  3001               	movlw	1
 11582  1B36  319B  23CB  319B   	fcall	_setLED_Initialization
 11583                           
 11584                           ;LED_B1.c: 36: setLED_Initialization(2);
 11585  1B39  3002               	movlw	2
 11586  1B3A  319B  23CB  319B   	fcall	_setLED_Initialization
 11587                           
 11588                           ;LED_B1.c: 42: setLED_Initialization(99);
 11589  1B3D  3063               	movlw	99
 11590  1B3E  319B  23CB         	fcall	_setLED_Initialization
 11591  1B40  0008               	return
 11592  1B41                     __end_of_LED_Initialization:	
 11593                           
 11594                           	psect	text62
 11595  1BCB                     __ptext62:	
 11596 ;; *************** function _setLED_Initialization *****************
 11597 ;; Defined at:
 11598 ;;		line 66 in file "../src/LED_B1.c"
 11599 ;; Parameters:    Size  Location     Type
 11600 ;;  led             1    wreg     unsigned char 
 11601 ;; Auto vars:     Size  Location     Type
 11602 ;;  led             1    4[BANK0 ] unsigned char 
 11603 ;; Return value:  Size  Location     Type
 11604 ;;		None               void
 11605 ;; Registers used:
 11606 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11607 ;; Tracked objects:
 11608 ;;		On entry : 0/0
 11609 ;;		On exit  : 0/0
 11610 ;;		Unchanged: 0/0
 11611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11613 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11615 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11616 ;;Total ram usage:        1 bytes
 11617 ;; Hardware stack levels used:    1
 11618 ;; Hardware stack levels required when called:    7
 11619 ;; This function calls:
 11620 ;;		_LedPointSelect
 11621 ;;		_setLED
 11622 ;; This function is called by:
 11623 ;;		_LED_Initialization
 11624 ;; This function uses a non-reentrant model
 11625 ;;
 11626                           
 11627                           
 11628                           ;psect for function _setLED_Initialization
 11629  1BCB                     _setLED_Initialization:	
 11630                           
 11631                           ;incstack = 0
 11632                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11633                           ;setLED_Initialization@led stored from wreg
 11634  1BCB  0020               	movlb	0	; select bank0
 11635  1BCC  00A4               	movwf	setLED_Initialization@led
 11636                           
 11637                           ;LED_B1.c: 67: LedPointSelect(led);
 11638  1BCD  0824               	movf	setLED_Initialization@led,w
 11639  1BCE  319D  25C9  319B   	fcall	_LedPointSelect
 11640                           
 11641                           ;LED_B1.c: 68: LED->Enable = 1;
 11642  1BD1  087B               	movf	_LED,w
 11643  1BD2  0086               	movwf	6
 11644  1BD3  3001               	movlw	1	; select bank2/3
 11645  1BD4  0087               	movwf	7
 11646  1BD5  1401               	bsf	1,0
 11647                           
 11648                           ;LED_B1.c: 69: setLED(led, 0);
 11649  1BD6  0020               	movlb	0	; select bank0
 11650  1BD7  01A2               	clrf	setLED@command
 11651  1BD8  0824               	movf	setLED_Initialization@led,w
 11652  1BD9  3194  24F6         	fcall	_setLED
 11653  1BDB  0008               	return
 11654  1BDC                     __end_of_setLED_Initialization:	
 11655                           
 11656                           	psect	text63
 11657  11E8                     __ptext63:	
 11658 ;; *************** function _Flash_Memory_Main *****************
 11659 ;; Defined at:
 11660 ;;		line 901 in file "../src/MCU_B1.c"
 11661 ;; Parameters:    Size  Location     Type
 11662 ;;		None
 11663 ;; Auto vars:     Size  Location     Type
 11664 ;;		None
 11665 ;; Return value:  Size  Location     Type
 11666 ;;		None               void
 11667 ;; Registers used:
 11668 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11669 ;; Tracked objects:
 11670 ;;		On entry : 0/0
 11671 ;;		On exit  : 0/0
 11672 ;;		Unchanged: 0/0
 11673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11676 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11677 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11678 ;;Total ram usage:        1 bytes
 11679 ;; Hardware stack levels used:    1
 11680 ;; Hardware stack levels required when called:    8
 11681 ;; This function calls:
 11682 ;;		_Flash_Memory_Modify
 11683 ;;		_getMain_LightsStatus
 11684 ;; This function is called by:
 11685 ;;		_main
 11686 ;; This function uses a non-reentrant model
 11687 ;;
 11688                           
 11689                           
 11690                           ;psect for function _Flash_Memory_Main
 11691  11E8                     _Flash_Memory_Main:	
 11692                           
 11693                           ;MCU_B1.c: 902: if (Memory.Modify == 1) {
 11694                           
 11695                           ;incstack = 0
 11696                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11697  11E8  0024               	movlb	4	; select bank4
 11698  11E9  1C44               	btfss	(_Memory^(0+512)+36),0
 11699  11EA  0008               	return
 11700                           
 11701                           ;MCU_B1.c: 903: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11702  11EB  3190  20BC  3191   	fcall	_getMain_LightsStatus
 11703  11EE  3A00               	xorlw	0
 11704  11EF  3000               	movlw	0
 11705  11F0  1903               	skipnz
 11706  11F1  3001               	movlw	1
 11707  11F2  0020               	movlb	0	; select bank0
 11708  11F3  00A9               	movwf	??_Flash_Memory_Main
 11709  11F4  0DA9               	rlf	??_Flash_Memory_Main,f
 11710  11F5  0024               	movlb	4	; select bank4
 11711  11F6  0844               	movf	(_Memory^(0+512)+36),w
 11712  11F7  0020               	movlb	0	; select bank0
 11713  11F8  0629               	xorwf	??_Flash_Memory_Main,w
 11714  11F9  39FD               	andlw	-3
 11715  11FA  0629               	xorwf	??_Flash_Memory_Main,w
 11716  11FB  0024               	movlb	4	; select bank4
 11717  11FC  00C4               	movwf	(_Memory^(0+512)+36)
 11718                           
 11719                           ;MCU_B1.c: 904: if (Memory.GO == 1) {
 11720  11FD  1CC4               	btfss	(_Memory^(0+512)+36),1
 11721  11FE  2A18               	goto	l1299
 11722                           
 11723                           ;MCU_B1.c: 905: Memory.Runtime = 1;
 11724  11FF  15C4               	bsf	(_Memory^(0+512)+36),3
 11725                           
 11726                           ;MCU_B1.c: 906: Memory.Time++;
 11727  1200  3001               	movlw	1
 11728  1201  07C2               	addwf	(_Memory^(0+512)+34),f
 11729  1202  3000               	movlw	0
 11730  1203  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11731                           
 11732                           ;MCU_B1.c: 907: if (Memory.Time == 25) {
 11733  1204  3022               	movlw	34
 11734  1205  3E20               	addlw	_Memory& (0+255)
 11735  1206  0086               	movwf	6
 11736  1207  3002               	movlw	2	; select bank4/5
 11737  1208  0087               	movwf	7
 11738  1209  3F40               	moviw [0]fsr1
 11739  120A  3A19               	xorlw	25
 11740  120B  1D03               	skipz
 11741  120C  2A0F               	goto	u7735
 11742  120D  3F41               	moviw [1]fsr1
 11743  120E  3A00               	xorlw	0
 11744  120F                     u7735:	
 11745  120F  1D03               	skipz
 11746  1210  0008               	return
 11747                           
 11748                           ;MCU_B1.c: 908: Memory.Time = 0;
 11749  1211  01C2               	clrf	(_Memory^(0+512)+34)
 11750  1212  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11751                           
 11752                           ;MCU_B1.c: 909: Memory.Modify = 0;
 11753  1213  1044               	bcf	(_Memory^(0+512)+36),0
 11754                           
 11755                           ;MCU_B1.c: 910: Memory.GO = 0;
 11756  1214  10C4               	bcf	(_Memory^(0+512)+36),1
 11757                           
 11758                           ;MCU_B1.c: 911: Flash_Memory_Modify();
 11759  1215  3194  245A         	fcall	_Flash_Memory_Modify
 11760                           
 11761                           ;MCU_B1.c: 912: }
 11762                           ;MCU_B1.c: 913: } else {
 11763  1217  0008               	return
 11764  1218                     l1299:	
 11765                           
 11766                           ;MCU_B1.c: 914: if (Memory.Runtime == 1) {
 11767  1218  1DC4               	btfss	(_Memory^(0+512)+36),3
 11768  1219  0008               	return
 11769                           
 11770                           ;MCU_B1.c: 915: Memory.Runtime = 0;
 11771  121A  11C4               	bcf	(_Memory^(0+512)+36),3
 11772                           
 11773                           ;MCU_B1.c: 916: Memory.Time = 0;
 11774  121B  01C2               	clrf	(_Memory^(0+512)+34)
 11775  121C  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11776  121D  0008               	return
 11777  121E                     __end_of_Flash_Memory_Main:	
 11778                           
 11779                           	psect	text64
 11780  145A                     __ptext64:	
 11781 ;; *************** function _Flash_Memory_Modify *****************
 11782 ;; Defined at:
 11783 ;;		line 974 in file "../src/MCU_B1.c"
 11784 ;; Parameters:    Size  Location     Type
 11785 ;;		None
 11786 ;; Auto vars:     Size  Location     Type
 11787 ;;  i               1    5[BANK0 ] unsigned char 
 11788 ;; Return value:  Size  Location     Type
 11789 ;;		None               void
 11790 ;; Registers used:
 11791 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11792 ;; Tracked objects:
 11793 ;;		On entry : 0/0
 11794 ;;		On exit  : 0/0
 11795 ;;		Unchanged: 0/0
 11796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11798 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11799 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11800 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11801 ;;Total ram usage:        2 bytes
 11802 ;; Hardware stack levels used:    1
 11803 ;; Hardware stack levels required when called:    7
 11804 ;; This function calls:
 11805 ;;		_Flash_Memory_Erasing
 11806 ;;		_Flash_Memory_Read
 11807 ;;		_Flash_Memory_Write
 11808 ;;		_setMemory_Data
 11809 ;; This function is called by:
 11810 ;;		_Flash_Memory_Main
 11811 ;; This function uses a non-reentrant model
 11812 ;;
 11813                           
 11814                           
 11815                           ;psect for function _Flash_Memory_Modify
 11816  145A                     _Flash_Memory_Modify:	
 11817                           
 11818                           ;MCU_B1.c: 975: char i = 0;
 11819                           
 11820                           ;incstack = 0
 11821                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11822  145A  0020               	movlb	0	; select bank0
 11823  145B  01A5               	clrf	Flash_Memory_Modify@i
 11824                           
 11825                           ;MCU_B1.c: 976: for (i = 0; i < 32; i++) {
 11826  145C  01A5               	clrf	Flash_Memory_Modify@i
 11827  145D  3020               	movlw	32
 11828  145E  0225               	subwf	Flash_Memory_Modify@i,w
 11829  145F  1803               	btfsc	3,0
 11830  1460  2C76               	goto	l7350
 11831  1461                     l7344:	
 11832                           
 11833                           ;MCU_B1.c: 977: Memory.Data[i] = Flash_Memory_Read(i);
 11834  1461  0825               	movf	Flash_Memory_Modify@i,w
 11835  1462  319D  25AF  3194   	fcall	_Flash_Memory_Read
 11836  1465  0020               	movlb	0	; select bank0
 11837  1466  00A4               	movwf	??_Flash_Memory_Modify
 11838  1467  0825               	movf	Flash_Memory_Modify@i,w
 11839  1468  3E20               	addlw	_Memory& (0+255)
 11840  1469  0086               	movwf	6
 11841  146A  3002               	movlw	2	; select bank4/5
 11842  146B  0087               	movwf	7
 11843  146C  0824               	movf	??_Flash_Memory_Modify,w
 11844  146D  0081               	movwf	1
 11845  146E  3001               	movlw	1
 11846  146F  00A4               	movwf	??_Flash_Memory_Modify
 11847  1470  0824               	movf	??_Flash_Memory_Modify,w
 11848  1471  07A5               	addwf	Flash_Memory_Modify@i,f
 11849  1472  3020               	movlw	32
 11850  1473  0225               	subwf	Flash_Memory_Modify@i,w
 11851  1474  1C03               	skipc
 11852  1475  2C61               	goto	l7344
 11853  1476                     l7350:	
 11854                           
 11855                           ;MCU_B1.c: 978: }
 11856                           ;MCU_B1.c: 979: setMemory_Data(0, product->Data[12]);
 11857  1476  086F               	movf	_product,w
 11858  1477  0086               	movwf	6
 11859  1478  3002               	movlw	2	; select bank4/5
 11860  1479  0087               	movwf	7
 11861  147A  3002               	movlw	2	; select bank4/5
 11862  147B  3F4C               	moviw [12]fsr1
 11863  147C  00A0               	movwf	setMemory_Data@data
 11864  147D  3000               	movlw	0
 11865  147E  319B  231D  3194   	fcall	_setMemory_Data
 11866                           
 11867                           ;MCU_B1.c: 980: setMemory_Data(1, product->Data[13]);
 11868  1481  0020               	movlb	0	; select bank0
 11869  1482  086F               	movf	_product,w
 11870  1483  0086               	movwf	6
 11871  1484  3002               	movlw	2	; select bank4/5
 11872  1485  0087               	movwf	7
 11873  1486  3002               	movlw	2	; select bank4/5
 11874  1487  3F4D               	moviw [13]fsr1
 11875  1488  00A0               	movwf	setMemory_Data@data
 11876  1489  3001               	movlw	1
 11877  148A  319B  231D  3194   	fcall	_setMemory_Data
 11878                           
 11879                           ;MCU_B1.c: 981: setMemory_Data(2, product->Data[14]);
 11880  148D  0020               	movlb	0	; select bank0
 11881  148E  086F               	movf	_product,w
 11882  148F  0086               	movwf	6
 11883  1490  3002               	movlw	2	; select bank4/5
 11884  1491  0087               	movwf	7
 11885  1492  3002               	movlw	2	; select bank4/5
 11886  1493  3F4E               	moviw [14]fsr1
 11887  1494  00A0               	movwf	setMemory_Data@data
 11888  1495  3002               	movlw	2
 11889  1496  319B  231D  3194   	fcall	_setMemory_Data
 11890                           
 11891                           ;MCU_B1.c: 987: if (Memory.LoopSave == 1) {
 11892  1499  0024               	movlb	4	; select bank4
 11893  149A  1D44               	btfss	(_Memory^(0+512)+36),2
 11894  149B  2CA0               	goto	l1322
 11895                           
 11896                           ;MCU_B1.c: 988: Memory.LoopSave = 0;
 11897  149C  1144               	bcf	(_Memory^(0+512)+36),2
 11898                           
 11899                           ;MCU_B1.c: 989: myMain.FirstOpen = 0;
 11900  149D  0021               	movlb	1	; select bank1
 11901  149E  11A0               	bcf	_myMain^(0+128),3
 11902                           
 11903                           ;MCU_B1.c: 990: myMain.First = 0;
 11904  149F  12A0               	bcf	_myMain^(0+128),5
 11905  14A0                     l1322:	
 11906                           
 11907                           ;MCU_B1.c: 992: }
 11908                           ;MCU_B1.c: 993: GIE = 0;
 11909  14A0  138B               	bcf	11,7	;volatile
 11910                           
 11911                           ;MCU_B1.c: 994: Flash_Memory_Erasing();
 11912  14A1  319B  2329  3194   	fcall	_Flash_Memory_Erasing
 11913                           
 11914                           ;MCU_B1.c: 995: Flash_Memory_Write();
 11915  14A4  3190  20E8         	fcall	_Flash_Memory_Write
 11916                           
 11917                           ;MCU_B1.c: 996: GIE = 1;
 11918  14A6  178B               	bsf	11,7	;volatile
 11919  14A7  0008               	return
 11920  14A8                     __end_of_Flash_Memory_Modify:	
 11921                           
 11922                           	psect	text65
 11923  1B29                     __ptext65:	
 11924 ;; *************** function _Flash_Memory_Erasing *****************
 11925 ;; Defined at:
 11926 ;;		line 963 in file "../src/MCU_B1.c"
 11927 ;; Parameters:    Size  Location     Type
 11928 ;;		None
 11929 ;; Auto vars:     Size  Location     Type
 11930 ;;		None
 11931 ;; Return value:  Size  Location     Type
 11932 ;;		None               void
 11933 ;; Registers used:
 11934 ;;		wreg, status,2, status,0, pclath, cstack
 11935 ;; Tracked objects:
 11936 ;;		On entry : 0/0
 11937 ;;		On exit  : 0/0
 11938 ;;		Unchanged: 0/0
 11939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11944 ;;Total ram usage:        0 bytes
 11945 ;; Hardware stack levels used:    1
 11946 ;; Hardware stack levels required when called:    6
 11947 ;; This function calls:
 11948 ;;		_Flash_Memory_Unlock
 11949 ;; This function is called by:
 11950 ;;		_Flash_Memory_Modify
 11951 ;; This function uses a non-reentrant model
 11952 ;;
 11953                           
 11954                           
 11955                           ;psect for function _Flash_Memory_Erasing
 11956  1B29                     _Flash_Memory_Erasing:	
 11957                           
 11958                           ;MCU_B1.c: 964: CFGS = 0;
 11959                           
 11960                           ;incstack = 0
 11961                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11962  1B29  0023               	movlb	3	; select bank3
 11963  1B2A  1315               	bcf	21,6	;volatile
 11964                           
 11965                           ;MCU_B1.c: 965: PMADRH = 0x30;
 11966  1B2B  3030               	movlw	48
 11967  1B2C  0092               	movwf	18	;volatile
 11968                           
 11969                           ;MCU_B1.c: 966: PMADRL = 0x00;
 11970  1B2D  0191               	clrf	17	;volatile
 11971                           
 11972                           ;MCU_B1.c: 967: FREE = 1;
 11973  1B2E  1615               	bsf	21,4	;volatile
 11974                           
 11975                           ;MCU_B1.c: 968: WREN = 1;
 11976  1B2F  1515               	bsf	21,2	;volatile
 11977                           
 11978                           ;MCU_B1.c: 969: Flash_Memory_Unlock();
 11979  1B30  319A  22F2         	fcall	_Flash_Memory_Unlock
 11980                           
 11981                           ;MCU_B1.c: 970: WREN = 0;
 11982  1B32  0023               	movlb	3	; select bank3
 11983  1B33  1115               	bcf	21,2	;volatile
 11984  1B34  0008               	return
 11985  1B35                     __end_of_Flash_Memory_Erasing:	
 11986                           
 11987                           	psect	text66
 11988  06C3                     __ptext66:	
 11989 ;; *************** function _Flash_Memory_Initialization *****************
 11990 ;; Defined at:
 11991 ;;		line 860 in file "../src/MCU_B1.c"
 11992 ;; Parameters:    Size  Location     Type
 11993 ;;		None
 11994 ;; Auto vars:     Size  Location     Type
 11995 ;;  i               1   62[BANK0 ] unsigned char 
 11996 ;; Return value:  Size  Location     Type
 11997 ;;		None               void
 11998 ;; Registers used:
 11999 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12000 ;; Tracked objects:
 12001 ;;		On entry : 0/0
 12002 ;;		On exit  : 0/0
 12003 ;;		Unchanged: 0/0
 12004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12006 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12007 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12008 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12009 ;;Total ram usage:        2 bytes
 12010 ;; Hardware stack levels used:    1
 12011 ;; Hardware stack levels required when called:    8
 12012 ;; This function calls:
 12013 ;;		_Flash_Memory_Read
 12014 ;;		_Flash_Memory_Write
 12015 ;;		_setMemory_Data
 12016 ;;		_setPercentValue
 12017 ;; This function is called by:
 12018 ;;		_main
 12019 ;; This function uses a non-reentrant model
 12020 ;;
 12021                           
 12022                           
 12023                           ;psect for function _Flash_Memory_Initialization
 12024  06C3                     _Flash_Memory_Initialization:	
 12025                           
 12026                           ;MCU_B1.c: 861: char i = 0;
 12027                           
 12028                           ;incstack = 0
 12029                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12030  06C3  0020               	movlb	0	; select bank0
 12031  06C4  01DE               	clrf	Flash_Memory_Initialization@i
 12032                           
 12033                           ;MCU_B1.c: 862: if (Flash_Memory_Read(31) == 0xaa) {
 12034  06C5  301F               	movlw	31
 12035  06C6  319D  25AF  3186   	fcall	_Flash_Memory_Read
 12036  06C9  3AAA               	xorlw	170
 12037  06CA  1D03               	skipz
 12038  06CB  2F35               	goto	l7820
 12039                           
 12040                           ;MCU_B1.c: 863: product->Data[12] = Flash_Memory_Read(0);
 12041  06CC  3000               	movlw	0
 12042  06CD  319D  25AF  3186   	fcall	_Flash_Memory_Read
 12043  06D0  0020               	movlb	0	; select bank0
 12044  06D1  00DD               	movwf	??_Flash_Memory_Initialization
 12045  06D2  086F               	movf	_product,w
 12046  06D3  3E0C               	addlw	12
 12047  06D4  0086               	movwf	6
 12048  06D5  3002               	movlw	2	; select bank4/5
 12049  06D6  0087               	movwf	7
 12050  06D7  085D               	movf	??_Flash_Memory_Initialization,w
 12051  06D8  0081               	movwf	1
 12052                           
 12053                           ;MCU_B1.c: 864: product->Data[13] = Flash_Memory_Read(1);
 12054  06D9  3001               	movlw	1
 12055  06DA  319D  25AF  3186   	fcall	_Flash_Memory_Read
 12056  06DD  0020               	movlb	0	; select bank0
 12057  06DE  00DD               	movwf	??_Flash_Memory_Initialization
 12058  06DF  086F               	movf	_product,w
 12059  06E0  3E0D               	addlw	13
 12060  06E1  0086               	movwf	6
 12061  06E2  3002               	movlw	2	; select bank4/5
 12062  06E3  0087               	movwf	7
 12063  06E4  085D               	movf	??_Flash_Memory_Initialization,w
 12064  06E5  0081               	movwf	1
 12065                           
 12066                           ;MCU_B1.c: 865: product->Data[14] = Flash_Memory_Read(2);
 12067  06E6  3002               	movlw	2
 12068  06E7  319D  25AF  3186   	fcall	_Flash_Memory_Read
 12069  06EA  0020               	movlb	0	; select bank0
 12070  06EB  00DD               	movwf	??_Flash_Memory_Initialization
 12071  06EC  086F               	movf	_product,w
 12072  06ED  3E0E               	addlw	14
 12073  06EE  0086               	movwf	6
 12074  06EF  3002               	movlw	2	; select bank4/5
 12075  06F0  0087               	movwf	7
 12076  06F1  085D               	movf	??_Flash_Memory_Initialization,w
 12077  06F2  0081               	movwf	1
 12078                           
 12079                           ;MCU_B1.c: 871: i = setPercentValue(((char)(80*0.8)));
 12080  06F3  3040               	movlw	64
 12081  06F4  3193  2384  3186   	fcall	_setPercentValue
 12082  06F7  0020               	movlb	0	; select bank0
 12083  06F8  00DD               	movwf	??_Flash_Memory_Initialization
 12084  06F9  085D               	movf	??_Flash_Memory_Initialization,w
 12085  06FA  00DE               	movwf	Flash_Memory_Initialization@i
 12086                           
 12087                           ;MCU_B1.c: 872: product->Data[21] = i;
 12088  06FB  085E               	movf	Flash_Memory_Initialization@i,w
 12089  06FC  00DD               	movwf	??_Flash_Memory_Initialization
 12090  06FD  086F               	movf	_product,w
 12091  06FE  3E15               	addlw	21
 12092  06FF  0086               	movwf	6
 12093  0700  3002               	movlw	2	; select bank4/5
 12094  0701  0087               	movwf	7
 12095  0702  085D               	movf	??_Flash_Memory_Initialization,w
 12096  0703  0081               	movwf	1
 12097                           
 12098                           ;MCU_B1.c: 873: product->Data[22] = i;
 12099  0704  085E               	movf	Flash_Memory_Initialization@i,w
 12100  0705  00DD               	movwf	??_Flash_Memory_Initialization
 12101  0706  086F               	movf	_product,w
 12102  0707  3E16               	addlw	22
 12103  0708  0086               	movwf	6
 12104  0709  3002               	movlw	2	; select bank4/5
 12105  070A  0087               	movwf	7
 12106  070B  085D               	movf	??_Flash_Memory_Initialization,w
 12107  070C  0081               	movwf	1
 12108                           
 12109                           ;MCU_B1.c: 874: product->Data[23] = i;
 12110  070D  085E               	movf	Flash_Memory_Initialization@i,w
 12111  070E  00DD               	movwf	??_Flash_Memory_Initialization
 12112  070F  086F               	movf	_product,w
 12113  0710  3E17               	addlw	23
 12114  0711  0086               	movwf	6
 12115  0712  3002               	movlw	2	; select bank4/5
 12116  0713  0087               	movwf	7
 12117  0714  085D               	movf	??_Flash_Memory_Initialization,w
 12118  0715  0081               	movwf	1
 12119                           
 12120                           ;MCU_B1.c: 876: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12121  0716  086F               	movf	_product,w
 12122  0717  3E0C               	addlw	12
 12123  0718  0086               	movwf	6
 12124  0719  3002               	movlw	2	; select bank4/5
 12125  071A  0087               	movwf	7
 12126  071B  0801               	movf	1,w
 12127  071C  3AFF               	xorlw	255
 12128  071D  1D03               	skipz
 12129  071E  0008               	return
 12130  071F  086F               	movf	_product,w
 12131  0720  3E0D               	addlw	13
 12132  0721  0086               	movwf	6
 12133  0722  3002               	movlw	2	; select bank4/5
 12134  0723  0087               	movwf	7
 12135  0724  0801               	movf	1,w
 12136  0725  3AFF               	xorlw	255
 12137  0726  1D03               	skipz
 12138  0727  0008               	return
 12139  0728  086F               	movf	_product,w
 12140  0729  3E0E               	addlw	14
 12141  072A  0086               	movwf	6
 12142  072B  3002               	movlw	2	; select bank4/5
 12143  072C  0087               	movwf	7
 12144  072D  0801               	movf	1,w
 12145  072E  3AFF               	xorlw	255
 12146  072F  1D03               	skipz
 12147  0730  0008               	return
 12148                           
 12149                           ;MCU_B1.c: 877: myMain.FirstOpen = 1;
 12150  0731  0021               	movlb	1	; select bank1
 12151  0732  15A0               	bsf	_myMain^(0+128),3
 12152                           
 12153                           ;MCU_B1.c: 878: myMain.First = 1;
 12154  0733  16A0               	bsf	_myMain^(0+128),5
 12155                           
 12156                           ;MCU_B1.c: 879: }
 12157                           ;MCU_B1.c: 880: } else {
 12158  0734  0008               	return
 12159  0735                     l7820:	
 12160                           
 12161                           ;MCU_B1.c: 881: i = setPercentValue(((char)(80*0.8)));
 12162  0735  3040               	movlw	64
 12163  0736  3193  2384  3186   	fcall	_setPercentValue
 12164  0739  0020               	movlb	0	; select bank0
 12165  073A  00DD               	movwf	??_Flash_Memory_Initialization
 12166  073B  085D               	movf	??_Flash_Memory_Initialization,w
 12167  073C  00DE               	movwf	Flash_Memory_Initialization@i
 12168                           
 12169                           ;MCU_B1.c: 882: setMemory_Data(0, 0xff);
 12170  073D  30FF               	movlw	255
 12171  073E  00DD               	movwf	??_Flash_Memory_Initialization
 12172  073F  085D               	movf	??_Flash_Memory_Initialization,w
 12173  0740  00A0               	movwf	setMemory_Data@data
 12174  0741  3000               	movlw	0
 12175  0742  319B  231D  3186   	fcall	_setMemory_Data
 12176                           
 12177                           ;MCU_B1.c: 883: setMemory_Data(1, 0xff);
 12178  0745  30FF               	movlw	255
 12179  0746  0020               	movlb	0	; select bank0
 12180  0747  00DD               	movwf	??_Flash_Memory_Initialization
 12181  0748  085D               	movf	??_Flash_Memory_Initialization,w
 12182  0749  00A0               	movwf	setMemory_Data@data
 12183  074A  3001               	movlw	1
 12184  074B  319B  231D  3186   	fcall	_setMemory_Data
 12185                           
 12186                           ;MCU_B1.c: 884: setMemory_Data(2, 0xff);
 12187  074E  30FF               	movlw	255
 12188  074F  0020               	movlb	0	; select bank0
 12189  0750  00DD               	movwf	??_Flash_Memory_Initialization
 12190  0751  085D               	movf	??_Flash_Memory_Initialization,w
 12191  0752  00A0               	movwf	setMemory_Data@data
 12192  0753  3002               	movlw	2
 12193  0754  319B  231D  3186   	fcall	_setMemory_Data
 12194                           
 12195                           ;MCU_B1.c: 885: setMemory_Data(3, 0xff);
 12196  0757  30FF               	movlw	255
 12197  0758  0020               	movlb	0	; select bank0
 12198  0759  00DD               	movwf	??_Flash_Memory_Initialization
 12199  075A  085D               	movf	??_Flash_Memory_Initialization,w
 12200  075B  00A0               	movwf	setMemory_Data@data
 12201  075C  3003               	movlw	3
 12202  075D  319B  231D  3186   	fcall	_setMemory_Data
 12203                           
 12204                           ;MCU_B1.c: 886: setMemory_Data(4, 0xff);
 12205  0760  30FF               	movlw	255
 12206  0761  0020               	movlb	0	; select bank0
 12207  0762  00DD               	movwf	??_Flash_Memory_Initialization
 12208  0763  085D               	movf	??_Flash_Memory_Initialization,w
 12209  0764  00A0               	movwf	setMemory_Data@data
 12210  0765  3004               	movlw	4
 12211  0766  319B  231D  3186   	fcall	_setMemory_Data
 12212                           
 12213                           ;MCU_B1.c: 887: setMemory_Data(5, 0xff);
 12214  0769  30FF               	movlw	255
 12215  076A  0020               	movlb	0	; select bank0
 12216  076B  00DD               	movwf	??_Flash_Memory_Initialization
 12217  076C  085D               	movf	??_Flash_Memory_Initialization,w
 12218  076D  00A0               	movwf	setMemory_Data@data
 12219  076E  3005               	movlw	5
 12220  076F  319B  231D  3186   	fcall	_setMemory_Data
 12221                           
 12222                           ;MCU_B1.c: 888: setMemory_Data(31, 0xaa);
 12223  0772  30AA               	movlw	170
 12224  0773  0020               	movlb	0	; select bank0
 12225  0774  00DD               	movwf	??_Flash_Memory_Initialization
 12226  0775  085D               	movf	??_Flash_Memory_Initialization,w
 12227  0776  00A0               	movwf	setMemory_Data@data
 12228  0777  301F               	movlw	31
 12229  0778  319B  231D  3186   	fcall	_setMemory_Data
 12230                           
 12231                           ;MCU_B1.c: 889: product->Data[21] = i;
 12232  077B  0020               	movlb	0	; select bank0
 12233  077C  085E               	movf	Flash_Memory_Initialization@i,w
 12234  077D  00DD               	movwf	??_Flash_Memory_Initialization
 12235  077E  086F               	movf	_product,w
 12236  077F  3E15               	addlw	21
 12237  0780  0086               	movwf	6
 12238  0781  3002               	movlw	2	; select bank4/5
 12239  0782  0087               	movwf	7
 12240  0783  085D               	movf	??_Flash_Memory_Initialization,w
 12241  0784  0081               	movwf	1
 12242                           
 12243                           ;MCU_B1.c: 890: product->Data[22] = i;
 12244  0785  085E               	movf	Flash_Memory_Initialization@i,w
 12245  0786  00DD               	movwf	??_Flash_Memory_Initialization
 12246  0787  086F               	movf	_product,w
 12247  0788  3E16               	addlw	22
 12248  0789  0086               	movwf	6
 12249  078A  3002               	movlw	2	; select bank4/5
 12250  078B  0087               	movwf	7
 12251  078C  085D               	movf	??_Flash_Memory_Initialization,w
 12252  078D  0081               	movwf	1
 12253                           
 12254                           ;MCU_B1.c: 891: product->Data[23] = i;
 12255  078E  085E               	movf	Flash_Memory_Initialization@i,w
 12256  078F  00DD               	movwf	??_Flash_Memory_Initialization
 12257  0790  086F               	movf	_product,w
 12258  0791  3E17               	addlw	23
 12259  0792  0086               	movwf	6
 12260  0793  3002               	movlw	2	; select bank4/5
 12261  0794  0087               	movwf	7
 12262  0795  085D               	movf	??_Flash_Memory_Initialization,w
 12263  0796  0081               	movwf	1
 12264                           
 12265                           ;MCU_B1.c: 892: GIE = 0;
 12266  0797  138B               	bcf	11,7	;volatile
 12267                           
 12268                           ;MCU_B1.c: 893: Flash_Memory_Write();
 12269  0798  3190  20E8         	fcall	_Flash_Memory_Write
 12270                           
 12271                           ;MCU_B1.c: 894: GIE = 1;
 12272  079A  178B               	bsf	11,7	;volatile
 12273                           
 12274                           ;MCU_B1.c: 895: myMain.FirstOpen = 1;
 12275  079B  0021               	movlb	1	; select bank1
 12276  079C  15A0               	bsf	_myMain^(0+128),3
 12277                           
 12278                           ;MCU_B1.c: 896: myMain.First = 1;
 12279  079D  16A0               	bsf	_myMain^(0+128),5
 12280  079E  0008               	return
 12281  079F                     __end_of_Flash_Memory_Initialization:	
 12282                           
 12283                           	psect	text67
 12284  1B1D                     __ptext67:	
 12285 ;; *************** function _setMemory_Data *****************
 12286 ;; Defined at:
 12287 ;;		line 1011 in file "../src/MCU_B1.c"
 12288 ;; Parameters:    Size  Location     Type
 12289 ;;  address         1    wreg     unsigned char 
 12290 ;;  data            1    0[BANK0 ] unsigned char 
 12291 ;; Auto vars:     Size  Location     Type
 12292 ;;  address         1    2[BANK0 ] unsigned char 
 12293 ;; Return value:  Size  Location     Type
 12294 ;;		None               void
 12295 ;; Registers used:
 12296 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12297 ;; Tracked objects:
 12298 ;;		On entry : 0/0
 12299 ;;		On exit  : 0/0
 12300 ;;		Unchanged: 0/0
 12301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12302 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12303 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12305 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12306 ;;Total ram usage:        3 bytes
 12307 ;; Hardware stack levels used:    1
 12308 ;; Hardware stack levels required when called:    5
 12309 ;; This function calls:
 12310 ;;		Nothing
 12311 ;; This function is called by:
 12312 ;;		_Flash_Memory_Initialization
 12313 ;;		_Flash_Memory_Modify
 12314 ;; This function uses a non-reentrant model
 12315 ;;
 12316                           
 12317                           
 12318                           ;psect for function _setMemory_Data
 12319  1B1D                     _setMemory_Data:	
 12320                           
 12321                           ;incstack = 0
 12322                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12323                           ;setMemory_Data@address stored from wreg
 12324  1B1D  0020               	movlb	0	; select bank0
 12325  1B1E  00A2               	movwf	setMemory_Data@address
 12326                           
 12327                           ;MCU_B1.c: 1012: Memory.Data[address] = data;
 12328  1B1F  0820               	movf	setMemory_Data@data,w
 12329  1B20  00A1               	movwf	??_setMemory_Data
 12330  1B21  0822               	movf	setMemory_Data@address,w
 12331  1B22  3E20               	addlw	_Memory& (0+255)
 12332  1B23  0086               	movwf	6
 12333  1B24  3002               	movlw	2	; select bank4/5
 12334  1B25  0087               	movwf	7
 12335  1B26  0821               	movf	??_setMemory_Data,w
 12336  1B27  0081               	movwf	1
 12337  1B28  0008               	return
 12338  1B29                     __end_of_setMemory_Data:	
 12339                           
 12340                           	psect	text68
 12341  10E8                     __ptext68:	
 12342 ;; *************** function _Flash_Memory_Write *****************
 12343 ;; Defined at:
 12344 ;;		line 944 in file "../src/MCU_B1.c"
 12345 ;; Parameters:    Size  Location     Type
 12346 ;;		None
 12347 ;; Auto vars:     Size  Location     Type
 12348 ;;  i               1    1[BANK0 ] unsigned char 
 12349 ;; Return value:  Size  Location     Type
 12350 ;;		None               void
 12351 ;; Registers used:
 12352 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12353 ;; Tracked objects:
 12354 ;;		On entry : 0/0
 12355 ;;		On exit  : 0/0
 12356 ;;		Unchanged: 0/0
 12357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12359 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12360 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12361 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12362 ;;Total ram usage:        2 bytes
 12363 ;; Hardware stack levels used:    1
 12364 ;; Hardware stack levels required when called:    6
 12365 ;; This function calls:
 12366 ;;		_Flash_Memory_Unlock
 12367 ;; This function is called by:
 12368 ;;		_Flash_Memory_Initialization
 12369 ;;		_Flash_Memory_Modify
 12370 ;; This function uses a non-reentrant model
 12371 ;;
 12372                           
 12373                           
 12374                           ;psect for function _Flash_Memory_Write
 12375  10E8                     _Flash_Memory_Write:	
 12376                           
 12377                           ;MCU_B1.c: 945: char i = 0;
 12378                           
 12379                           ;incstack = 0
 12380                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12381  10E8  0020               	movlb	0	; select bank0
 12382  10E9  01A1               	clrf	Flash_Memory_Write@i
 12383                           
 12384                           ;MCU_B1.c: 946: CFGS = 0;
 12385  10EA  0023               	movlb	3	; select bank3
 12386  10EB  1315               	bcf	21,6	;volatile
 12387                           
 12388                           ;MCU_B1.c: 947: PMADRH = 0x30;
 12389  10EC  3030               	movlw	48
 12390  10ED  0092               	movwf	18	;volatile
 12391                           
 12392                           ;MCU_B1.c: 948: PMDATH = 0;
 12393  10EE  0194               	clrf	20	;volatile
 12394                           
 12395                           ;MCU_B1.c: 949: FREE = 0;
 12396  10EF  1215               	bcf	21,4	;volatile
 12397                           
 12398                           ;MCU_B1.c: 950: LWLO = 1;
 12399  10F0  1695               	bsf	21,5	;volatile
 12400                           
 12401                           ;MCU_B1.c: 951: WREN = 1;
 12402  10F1  1515               	bsf	21,2	;volatile
 12403                           
 12404                           ;MCU_B1.c: 952: for (i = 0; i < 32; i++) {
 12405  10F2  0020               	movlb	0	; select bank0
 12406  10F3  01A1               	clrf	Flash_Memory_Write@i
 12407  10F4  3020               	movlw	32
 12408  10F5  0221               	subwf	Flash_Memory_Write@i,w
 12409  10F6  1803               	btfsc	3,0
 12410  10F7  2910               	goto	l1313
 12411  10F8                     l6904:	
 12412                           
 12413                           ;MCU_B1.c: 953: PMADRL = i;
 12414  10F8  0821               	movf	Flash_Memory_Write@i,w
 12415  10F9  0023               	movlb	3	; select bank3
 12416  10FA  0091               	movwf	17	;volatile
 12417                           
 12418                           ;MCU_B1.c: 954: PMDATL = Memory.Data[i];
 12419  10FB  0020               	movlb	0	; select bank0
 12420  10FC  0821               	movf	Flash_Memory_Write@i,w
 12421  10FD  3E20               	addlw	_Memory& (0+255)
 12422  10FE  0086               	movwf	6
 12423  10FF  3002               	movlw	2	; select bank4/5
 12424  1100  0087               	movwf	7
 12425  1101  0801               	movf	1,w
 12426  1102  0023               	movlb	3	; select bank3
 12427  1103  0093               	movwf	19	;volatile
 12428                           
 12429                           ;MCU_B1.c: 955: Flash_Memory_Unlock();
 12430  1104  319A  22F2  3190   	fcall	_Flash_Memory_Unlock
 12431  1107  3001               	movlw	1
 12432  1108  0020               	movlb	0	; select bank0
 12433  1109  00A0               	movwf	??_Flash_Memory_Write
 12434  110A  0820               	movf	??_Flash_Memory_Write,w
 12435  110B  07A1               	addwf	Flash_Memory_Write@i,f
 12436  110C  3020               	movlw	32
 12437  110D  0221               	subwf	Flash_Memory_Write@i,w
 12438  110E  1C03               	skipc
 12439  110F  28F8               	goto	l6904
 12440  1110                     l1313:	
 12441                           
 12442                           ;MCU_B1.c: 956: }
 12443                           ;MCU_B1.c: 957: LWLO = 0;
 12444  1110  0023               	movlb	3	; select bank3
 12445  1111  1295               	bcf	21,5	;volatile
 12446                           
 12447                           ;MCU_B1.c: 958: Flash_Memory_Unlock();
 12448  1112  319A  22F2         	fcall	_Flash_Memory_Unlock
 12449                           
 12450                           ;MCU_B1.c: 959: WREN = 0;
 12451  1114  0023               	movlb	3	; select bank3
 12452  1115  1115               	bcf	21,2	;volatile
 12453  1116  0008               	return
 12454  1117                     __end_of_Flash_Memory_Write:	
 12455                           
 12456                           	psect	text69
 12457  1AF2                     __ptext69:	
 12458 ;; *************** function _Flash_Memory_Unlock *****************
 12459 ;; Defined at:
 12460 ;;		line 923 in file "../src/MCU_B1.c"
 12461 ;; Parameters:    Size  Location     Type
 12462 ;;		None
 12463 ;; Auto vars:     Size  Location     Type
 12464 ;;		None
 12465 ;; Return value:  Size  Location     Type
 12466 ;;		None               void
 12467 ;; Registers used:
 12468 ;;		wreg
 12469 ;; Tracked objects:
 12470 ;;		On entry : 0/0
 12471 ;;		On exit  : 0/0
 12472 ;;		Unchanged: 0/0
 12473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12478 ;;Total ram usage:        0 bytes
 12479 ;; Hardware stack levels used:    1
 12480 ;; Hardware stack levels required when called:    5
 12481 ;; This function calls:
 12482 ;;		Nothing
 12483 ;; This function is called by:
 12484 ;;		_Flash_Memory_Write
 12485 ;;		_Flash_Memory_Erasing
 12486 ;; This function uses a non-reentrant model
 12487 ;;
 12488                           
 12489                           
 12490                           ;psect for function _Flash_Memory_Unlock
 12491  1AF2                     _Flash_Memory_Unlock:	
 12492                           
 12493                           ;MCU_B1.c: 924: PMCON2 = 0x55;
 12494                           
 12495                           ;incstack = 0
 12496                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12497  1AF2  3055               	movlw	85
 12498  1AF3  0023               	movlb	3	; select bank3
 12499  1AF4  0096               	movwf	22	;volatile
 12500                           
 12501                           ;MCU_B1.c: 925: PMCON2 = 0xaa;
 12502  1AF5  30AA               	movlw	170
 12503  1AF6  0096               	movwf	22	;volatile
 12504                           
 12505                           ;MCU_B1.c: 926: WR = 1;
 12506  1AF7  1495               	bsf	21,1	;volatile
 12507                           
 12508                           ;MCU_B1.c: 927: __nop();
 12509  1AF8  0000               	nop
 12510                           
 12511                           ;MCU_B1.c: 928: __nop();
 12512  1AF9  0000               	nop
 12513  1AFA  0008               	return
 12514  1AFB                     __end_of_Flash_Memory_Unlock:	
 12515                           
 12516                           	psect	text70
 12517  1DAF                     __ptext70:	
 12518 ;; *************** function _Flash_Memory_Read *****************
 12519 ;; Defined at:
 12520 ;;		line 932 in file "../src/MCU_B1.c"
 12521 ;; Parameters:    Size  Location     Type
 12522 ;;  address         1    wreg     unsigned char 
 12523 ;; Auto vars:     Size  Location     Type
 12524 ;;  address         1    2[BANK0 ] unsigned char 
 12525 ;;  ret             1    3[BANK0 ] unsigned char 
 12526 ;;  i               1    1[BANK0 ] unsigned char 
 12527 ;; Return value:  Size  Location     Type
 12528 ;;                  1    wreg      unsigned char 
 12529 ;; Registers used:
 12530 ;;		wreg, status,2
 12531 ;; Tracked objects:
 12532 ;;		On entry : 0/0
 12533 ;;		On exit  : 0/0
 12534 ;;		Unchanged: 0/0
 12535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12537 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12538 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12539 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12540 ;;Total ram usage:        4 bytes
 12541 ;; Hardware stack levels used:    1
 12542 ;; Hardware stack levels required when called:    5
 12543 ;; This function calls:
 12544 ;;		Nothing
 12545 ;; This function is called by:
 12546 ;;		_Flash_Memory_Initialization
 12547 ;;		_Flash_Memory_Modify
 12548 ;; This function uses a non-reentrant model
 12549 ;;
 12550                           
 12551                           
 12552                           ;psect for function _Flash_Memory_Read
 12553  1DAF                     _Flash_Memory_Read:	
 12554                           
 12555                           ;incstack = 0
 12556                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12557                           ;Flash_Memory_Read@address stored from wreg
 12558  1DAF  0020               	movlb	0	; select bank0
 12559  1DB0  00A2               	movwf	Flash_Memory_Read@address
 12560                           
 12561                           ;MCU_B1.c: 933: char i = 0, ret = 0;
 12562  1DB1  01A1               	clrf	Flash_Memory_Read@i
 12563  1DB2  01A3               	clrf	Flash_Memory_Read@ret
 12564                           
 12565                           ;MCU_B1.c: 934: PMADRH = 0x30;
 12566  1DB3  3030               	movlw	48
 12567  1DB4  0023               	movlb	3	; select bank3
 12568  1DB5  0092               	movwf	18	;volatile
 12569                           
 12570                           ;MCU_B1.c: 935: PMADRL = address;
 12571  1DB6  0020               	movlb	0	; select bank0
 12572  1DB7  0822               	movf	Flash_Memory_Read@address,w
 12573  1DB8  0023               	movlb	3	; select bank3
 12574  1DB9  0091               	movwf	17	;volatile
 12575                           
 12576                           ;MCU_B1.c: 936: CFGS = 0;
 12577  1DBA  1315               	bcf	21,6	;volatile
 12578                           
 12579                           ;MCU_B1.c: 937: RD = 1;
 12580  1DBB  1415               	bsf	21,0	;volatile
 12581                           
 12582                           ;MCU_B1.c: 938: i = PMDATH;
 12583  1DBC  0814               	movf	20,w	;volatile
 12584  1DBD  0020               	movlb	0	; select bank0
 12585  1DBE  00A0               	movwf	??_Flash_Memory_Read
 12586  1DBF  0820               	movf	??_Flash_Memory_Read,w
 12587  1DC0  00A1               	movwf	Flash_Memory_Read@i
 12588                           
 12589                           ;MCU_B1.c: 939: ret = PMDATL;
 12590  1DC1  0023               	movlb	3	; select bank3
 12591  1DC2  0813               	movf	19,w	;volatile
 12592  1DC3  0020               	movlb	0	; select bank0
 12593  1DC4  00A0               	movwf	??_Flash_Memory_Read
 12594  1DC5  0820               	movf	??_Flash_Memory_Read,w
 12595  1DC6  00A3               	movwf	Flash_Memory_Read@ret
 12596                           
 12597                           ;MCU_B1.c: 940: return ret;
 12598  1DC7  0823               	movf	Flash_Memory_Read@ret,w
 12599  1DC8  0008               	return
 12600  1DC9                     __end_of_Flash_Memory_Read:	
 12601                           
 12602                           	psect	text71
 12603  114A                     __ptext71:	
 12604 ;; *************** function _DimmerLights_Main *****************
 12605 ;; Defined at:
 12606 ;;		line 404 in file "../src/Dimmer_B1.c"
 12607 ;; Parameters:    Size  Location     Type
 12608 ;;		None
 12609 ;; Auto vars:     Size  Location     Type
 12610 ;;		None
 12611 ;; Return value:  Size  Location     Type
 12612 ;;		None               void
 12613 ;; Registers used:
 12614 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12615 ;; Tracked objects:
 12616 ;;		On entry : 0/0
 12617 ;;		On exit  : 0/0
 12618 ;;		Unchanged: 0/0
 12619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12621 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12622 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12623 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12624 ;;Total ram usage:        4 bytes
 12625 ;; Hardware stack levels used:    1
 12626 ;; Hardware stack levels required when called:   11
 12627 ;; This function calls:
 12628 ;;		_getLoad_OK
 12629 ;;		_getMain_All_Error_Status
 12630 ;;		_getMain_LightsStatus
 12631 ;;		_setDimmerLights_Main
 12632 ;; This function is called by:
 12633 ;;		_main
 12634 ;; This function uses a non-reentrant model
 12635 ;;
 12636                           
 12637                           
 12638                           ;psect for function _DimmerLights_Main
 12639  114A                     _DimmerLights_Main:	
 12640                           
 12641                           ;Dimmer_B1.c: 406: if (getMain_All_Error_Status(0) == 0) {
 12642                           
 12643                           ;incstack = 0
 12644                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12645  114A  3000               	movlw	0
 12646  114B  3191  2117  3191   	fcall	_getMain_All_Error_Status
 12647  114E  3800               	iorlw	0
 12648  114F  1D03               	skipz
 12649  1150  2974               	goto	l777
 12650                           
 12651                           ;Dimmer_B1.c: 407: if (Dimmer.LoadOK == 1) {
 12652  1151  0022               	movlb	2	; select bank2
 12653  1152  1CA0               	btfss	_Dimmer^(0+256),1
 12654  1153  2976               	goto	l7762
 12655                           
 12656                           ;Dimmer_B1.c: 408: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 12657  1154  319A  22DA  3191   	fcall	_getLoad_OK
 12658  1157  3A01               	xorlw	1
 12659  1158  1903               	skipnz
 12660  1159  296B               	goto	l7758
 12661  115A  3190  20BC  3191   	fcall	_getMain_LightsStatus
 12662  115D  3A00               	xorlw	0
 12663  115E  1903               	skipnz
 12664  115F  296B               	goto	l7758
 12665  1160  0022               	movlb	2	; select bank2
 12666  1161  0C20               	rrf	_Dimmer^(0+256),w
 12667  1162  3901               	andlw	1
 12668  1163  0020               	movlb	0	; select bank0
 12669  1164  00E6               	movwf	??_DimmerLights_Main
 12670  1165  01E7               	clrf	??_DimmerLights_Main+1
 12671  1166  0866               	movf	??_DimmerLights_Main,w
 12672  1167  00E8               	movwf	_DimmerLights_Main$2494
 12673  1168  0867               	movf	??_DimmerLights_Main+1,w
 12674  1169  00E9               	movwf	_DimmerLights_Main$2494+1
 12675  116A  296E               	goto	l7760
 12676  116B                     l7758:	
 12677  116B  0020               	movlb	0	; select bank0
 12678  116C  01E8               	clrf	_DimmerLights_Main$2494
 12679  116D  01E9               	clrf	_DimmerLights_Main$2494+1
 12680  116E                     l7760:	
 12681  116E  0868               	movf	_DimmerLights_Main$2494,w
 12682  116F  0022               	movlb	2	; select bank2
 12683  1170  10A0               	bcf	_Dimmer^(0+256),1
 12684  1171  1D03               	skipz
 12685  1172  14A0               	bsf	_Dimmer^(0+256),1
 12686                           
 12687                           ;Dimmer_B1.c: 409: }
 12688                           ;Dimmer_B1.c: 410: } else {
 12689  1173  2976               	goto	l7762
 12690  1174                     l777:	
 12691                           
 12692                           ;Dimmer_B1.c: 411: Dimmer.LoadOK = 0;
 12693  1174  0022               	movlb	2	; select bank2
 12694  1175  10A0               	bcf	_Dimmer^(0+256),1
 12695  1176                     l7762:	
 12696                           
 12697                           ;Dimmer_B1.c: 412: }
 12698                           ;Dimmer_B1.c: 416: setDimmerLights_Main(1);
 12699  1176  3001               	movlw	1
 12700  1177  3195  25EB  3191   	fcall	_setDimmerLights_Main
 12701                           
 12702                           ;Dimmer_B1.c: 420: setDimmerLights_Main(2);
 12703  117A  3002               	movlw	2
 12704  117B  3195  25EB         	fcall	_setDimmerLights_Main
 12705  117D  0008               	return
 12706  117E                     __end_of_DimmerLights_Main:	
 12707                           
 12708                           	psect	text72
 12709  15EB                     __ptext72:	
 12710 ;; *************** function _setDimmerLights_Main *****************
 12711 ;; Defined at:
 12712 ;;		line 430 in file "../src/Dimmer_B1.c"
 12713 ;; Parameters:    Size  Location     Type
 12714 ;;  lights          1    wreg     unsigned char 
 12715 ;; Auto vars:     Size  Location     Type
 12716 ;;  lights          1   69[BANK0 ] unsigned char 
 12717 ;; Return value:  Size  Location     Type
 12718 ;;		None               void
 12719 ;; Registers used:
 12720 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12721 ;; Tracked objects:
 12722 ;;		On entry : 0/0
 12723 ;;		On exit  : 0/0
 12724 ;;		Unchanged: 0/0
 12725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12727 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12729 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12730 ;;Total ram usage:        1 bytes
 12731 ;; Hardware stack levels used:    1
 12732 ;; Hardware stack levels required when called:   10
 12733 ;; This function calls:
 12734 ;;		_DimmerLightsPointSelect
 12735 ;;		_setBuz
 12736 ;;		_setDimmerLights
 12737 ;;		_setDimmerLights_Adj
 12738 ;; This function is called by:
 12739 ;;		_DimmerLights_Main
 12740 ;; This function uses a non-reentrant model
 12741 ;;
 12742                           
 12743                           
 12744                           ;psect for function _setDimmerLights_Main
 12745  15EB                     _setDimmerLights_Main:	
 12746                           
 12747                           ;incstack = 0
 12748                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12749                           ;setDimmerLights_Main@lights stored from wreg
 12750  15EB  0020               	movlb	0	; select bank0
 12751  15EC  00E5               	movwf	setDimmerLights_Main@lights
 12752                           
 12753                           ;Dimmer_B1.c: 431: DimmerLightsPointSelect(lights);
 12754  15ED  0865               	movf	setDimmerLights_Main@lights,w
 12755  15EE  319C  2446  3195   	fcall	_DimmerLightsPointSelect
 12756                           
 12757                           ;Dimmer_B1.c: 432: if (DimmerLights->Trigger == 1) {
 12758  15F1  0879               	movf	_DimmerLights,w
 12759  15F2  3E08               	addlw	8
 12760  15F3  0086               	movwf	6
 12761  15F4  3001               	movlw	1	; select bank2/3
 12762  15F5  0087               	movwf	7
 12763  15F6  1D01               	btfss	1,2
 12764  15F7  2E15               	goto	l7234
 12765                           
 12766                           ;Dimmer_B1.c: 434: if (Dimmer.LoadOK == 0) {
 12767  15F8  0022               	movlb	2	; select bank2
 12768  15F9  18A0               	btfsc	_Dimmer^(0+256),1
 12769  15FA  0008               	return
 12770                           
 12771                           ;Dimmer_B1.c: 435: DimmerLights->Trigger = 0;
 12772  15FB  0879               	movf	_DimmerLights,w
 12773  15FC  3E08               	addlw	8
 12774  15FD  0086               	movwf	6
 12775  15FE  3001               	movlw	1	; select bank2/3
 12776  15FF  0087               	movwf	7
 12777  1600  1101               	bcf	1,2
 12778                           
 12779                           ;Dimmer_B1.c: 437: if (DimmerLights->Switch == 1) {
 12780  1601  0879               	movf	_DimmerLights,w
 12781  1602  3E08               	addlw	8
 12782  1603  0086               	movwf	6
 12783  1604  3001               	movlw	1	; select bank2/3
 12784  1605  0087               	movwf	7
 12785  1606  1C81               	btfss	1,1
 12786  1607  2E0F               	goto	l7232
 12787                           
 12788                           ;Dimmer_B1.c: 438: setDimmerLights(lights, 1);
 12789  1608  0020               	movlb	0	; select bank0
 12790  1609  01A7               	clrf	setDimmerLights@status
 12791  160A  0AA7               	incf	setDimmerLights@status,f
 12792  160B  0865               	movf	setDimmerLights_Main@lights,w
 12793  160C  318C  24BA         	fcall	_setDimmerLights
 12794                           
 12795                           ;Dimmer_B1.c: 439: } else {
 12796  160E  0008               	return
 12797  160F                     l7232:	
 12798                           
 12799                           ;Dimmer_B1.c: 440: setDimmerLights(lights, 0);
 12800  160F  0020               	movlb	0	; select bank0
 12801  1610  01A7               	clrf	setDimmerLights@status
 12802  1611  0865               	movf	setDimmerLights_Main@lights,w
 12803  1612  318C  24BA         	fcall	_setDimmerLights
 12804                           
 12805                           ;Dimmer_B1.c: 441: }
 12806                           ;Dimmer_B1.c: 442: }
 12807                           ;Dimmer_B1.c: 443: } else {
 12808  1614  0008               	return
 12809  1615                     l7234:	
 12810                           
 12811                           ;Dimmer_B1.c: 444: if (DimmerLights->TriggerAdj == 1) {
 12812  1615  0879               	movf	_DimmerLights,w
 12813  1616  3E08               	addlw	8
 12814  1617  0086               	movwf	6
 12815  1618  3001               	movlw	1	; select bank2/3
 12816  1619  0087               	movwf	7
 12817  161A  1E01               	btfss	1,4
 12818  161B  0008               	return
 12819                           
 12820                           ;Dimmer_B1.c: 445: if (Dimmer.LoadOK == 0) {
 12821  161C  0022               	movlb	2	; select bank2
 12822  161D  18A0               	btfsc	_Dimmer^(0+256),1
 12823  161E  0008               	return
 12824                           
 12825                           ;Dimmer_B1.c: 446: DimmerLights->TriggerAdj = 0;
 12826  161F  0879               	movf	_DimmerLights,w
 12827  1620  3E08               	addlw	8
 12828  1621  0086               	movwf	6
 12829  1622  3001               	movlw	1	; select bank2/3
 12830  1623  0087               	movwf	7
 12831  1624  1201               	bcf	1,4
 12832                           
 12833                           ;Dimmer_B1.c: 447: if (DimmerLights->AdjGo == 1) {
 12834  1625  0879               	movf	_DimmerLights,w
 12835  1626  3E08               	addlw	8
 12836  1627  0086               	movwf	6
 12837  1628  3001               	movlw	1	; select bank2/3
 12838  1629  0087               	movwf	7
 12839  162A  1D81               	btfss	1,3
 12840  162B  2E3C               	goto	l7244
 12841                           
 12842                           ;Dimmer_B1.c: 448: setDimmerLights_Adj(lights, 1);
 12843  162C  0020               	movlb	0	; select bank0
 12844  162D  01E2               	clrf	setDimmerLights_Adj@status
 12845  162E  0AE2               	incf	setDimmerLights_Adj@status,f
 12846  162F  0865               	movf	setDimmerLights_Main@lights,w
 12847  1630  3195  2546  3195   	fcall	_setDimmerLights_Adj
 12848                           
 12849                           ;Dimmer_B1.c: 449: setBuz(1, 100);
 12850  1633  3064               	movlw	100
 12851  1634  0020               	movlb	0	; select bank0
 12852  1635  00A9               	movwf	setBuz@time
 12853  1636  3000               	movlw	0
 12854  1637  00AA               	movwf	setBuz@time+1
 12855  1638  3001               	movlw	1
 12856  1639  3196  26F2         	fcall	_setBuz
 12857                           
 12858                           ;Dimmer_B1.c: 450: } else {
 12859  163B  0008               	return
 12860  163C                     l7244:	
 12861                           
 12862                           ;Dimmer_B1.c: 451: setDimmerLights_Adj(lights, 0);
 12863  163C  0020               	movlb	0	; select bank0
 12864  163D  01E2               	clrf	setDimmerLights_Adj@status
 12865  163E  0865               	movf	setDimmerLights_Main@lights,w
 12866  163F  3195  2546         	fcall	_setDimmerLights_Adj
 12867  1641  0008               	return
 12868  1642                     __end_of_setDimmerLights_Main:	
 12869                           
 12870                           	psect	text73
 12871  1546                     __ptext73:	
 12872 ;; *************** function _setDimmerLights_Adj *****************
 12873 ;; Defined at:
 12874 ;;		line 751 in file "../src/Dimmer_B1.c"
 12875 ;; Parameters:    Size  Location     Type
 12876 ;;  lights          1    wreg     unsigned char 
 12877 ;;  status          1   66[BANK0 ] unsigned char 
 12878 ;; Auto vars:     Size  Location     Type
 12879 ;;  lights          1   68[BANK0 ] unsigned char 
 12880 ;; Return value:  Size  Location     Type
 12881 ;;		None               void
 12882 ;; Registers used:
 12883 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12884 ;; Tracked objects:
 12885 ;;		On entry : 0/0
 12886 ;;		On exit  : 0/0
 12887 ;;		Unchanged: 0/0
 12888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12889 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12890 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12892 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12893 ;;Total ram usage:        3 bytes
 12894 ;; Hardware stack levels used:    1
 12895 ;; Hardware stack levels required when called:    9
 12896 ;; This function calls:
 12897 ;;		_DimmerLightsPointSelect
 12898 ;;		_getMain_All_Error_Status
 12899 ;;		_setRF_DimmerLights
 12900 ;;		_setTxData
 12901 ;; This function is called by:
 12902 ;;		_setDimmerLights_Main
 12903 ;; This function uses a non-reentrant model
 12904 ;;
 12905                           
 12906                           
 12907                           ;psect for function _setDimmerLights_Adj
 12908  1546                     _setDimmerLights_Adj:	
 12909                           
 12910                           ;incstack = 0
 12911                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12912                           ;setDimmerLights_Adj@lights stored from wreg
 12913  1546  0020               	movlb	0	; select bank0
 12914  1547  00E4               	movwf	setDimmerLights_Adj@lights
 12915                           
 12916                           ;Dimmer_B1.c: 752: DimmerLightsPointSelect(lights);
 12917  1548  0864               	movf	setDimmerLights_Adj@lights,w
 12918  1549  319C  2446  3195   	fcall	_DimmerLightsPointSelect
 12919                           
 12920                           ;Dimmer_B1.c: 753: if (status == 1) {
 12921  154C  0020               	movlb	0	; select bank0
 12922  154D  0862               	movf	setDimmerLights_Adj@status,w
 12923  154E  3A01               	xorlw	1
 12924  154F  1D03               	skipz
 12925  1550  2D5C               	goto	l6790
 12926                           
 12927                           ;Dimmer_B1.c: 754: DimmerLights->AdjFlag = 1;
 12928  1551  0879               	movf	_DimmerLights,w
 12929  1552  0086               	movwf	6
 12930  1553  3001               	movlw	1	; select bank2/3
 12931  1554  0087               	movwf	7
 12932  1555  1581               	bsf	1,3
 12933                           
 12934                           ;Dimmer_B1.c: 755: DimmerLights->Signal = 1;
 12935  1556  0879               	movf	_DimmerLights,w
 12936  1557  0086               	movwf	6
 12937  1558  3001               	movlw	1	; select bank2/3
 12938  1559  0087               	movwf	7
 12939  155A  1481               	bsf	1,1
 12940                           
 12941                           ;Dimmer_B1.c: 756: } else {
 12942  155B  0008               	return
 12943  155C                     l6790:	
 12944                           
 12945                           ;Dimmer_B1.c: 757: if (DimmerLights->AdjFlag == 1) {
 12946  155C  0879               	movf	_DimmerLights,w
 12947  155D  0086               	movwf	6
 12948  155E  3001               	movlw	1	; select bank2/3
 12949  155F  0087               	movwf	7
 12950  1560  1D81               	btfss	1,3
 12951  1561  0008               	return
 12952                           
 12953                           ;Dimmer_B1.c: 758: DimmerLights->Signal = 0;
 12954  1562  0879               	movf	_DimmerLights,w
 12955  1563  0086               	movwf	6
 12956  1564  3001               	movlw	1	; select bank2/3
 12957  1565  0087               	movwf	7
 12958  1566  1081               	bcf	1,1
 12959                           
 12960                           ;Dimmer_B1.c: 759: DimmerLights->AdjFlag = 0;
 12961  1567  0879               	movf	_DimmerLights,w
 12962  1568  0086               	movwf	6
 12963  1569  3001               	movlw	1	; select bank2/3
 12964  156A  0087               	movwf	7
 12965  156B  1181               	bcf	1,3
 12966                           
 12967                           ;Dimmer_B1.c: 760: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12968  156C  0879               	movf	_DimmerLights,w
 12969  156D  3E04               	addlw	4
 12970  156E  0086               	movwf	6
 12971  156F  3001               	movlw	1	; select bank2/3
 12972  1570  0087               	movwf	7
 12973  1571  0801               	movf	1,w
 12974  1572  00E3               	movwf	??_setDimmerLights_Adj
 12975  1573  0879               	movf	_DimmerLights,w
 12976  1574  3E05               	addlw	5
 12977  1575  0086               	movwf	6
 12978  1576  3001               	movlw	1	; select bank2/3
 12979  1577  0087               	movwf	7
 12980  1578  0863               	movf	??_setDimmerLights_Adj,w
 12981  1579  0081               	movwf	1
 12982                           
 12983                           ;Dimmer_B1.c: 770: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12984  157A  3000               	movlw	0
 12985  157B  3191  2117  3195   	fcall	_getMain_All_Error_Status
 12986  157E  3A00               	xorlw	0
 12987  157F  3000               	movlw	0
 12988  1580  1903               	skipnz
 12989  1581  3001               	movlw	1
 12990  1582  0020               	movlb	0	; select bank0
 12991  1583  00E3               	movwf	??_setDimmerLights_Adj
 12992  1584  0DE3               	rlf	??_setDimmerLights_Adj,f
 12993  1585  0022               	movlb	2	; select bank2
 12994  1586  0820               	movf	_Dimmer^(0+256),w
 12995  1587  0020               	movlb	0	; select bank0
 12996  1588  0663               	xorwf	??_setDimmerLights_Adj,w
 12997  1589  39FD               	andlw	-3
 12998  158A  0663               	xorwf	??_setDimmerLights_Adj,w
 12999  158B  0022               	movlb	2	; select bank2
 13000  158C  00A0               	movwf	_Dimmer^(0+256)
 13001                           
 13002                           ;Dimmer_B1.c: 773: setRF_DimmerLights(lights, 1);
 13003  158D  0020               	movlb	0	; select bank0
 13004  158E  01DD               	clrf	setRF_DimmerLights@on
 13005  158F  0ADD               	incf	setRF_DimmerLights@on,f
 13006  1590  0864               	movf	setDimmerLights_Adj@lights,w
 13007  1591  3189  21ED  3195   	fcall	_setRF_DimmerLights
 13008                           
 13009                           ;Dimmer_B1.c: 774: setTxData();
 13010  1594  318F  2743         	fcall	_setTxData
 13011  1596  0008               	return
 13012  1597                     __end_of_setDimmerLights_Adj:	
 13013                           
 13014                           	psect	text74
 13015  0CBA                     __ptext74:	
 13016 ;; *************** function _setDimmerLights *****************
 13017 ;; Defined at:
 13018 ;;		line 630 in file "../src/Dimmer_B1.c"
 13019 ;; Parameters:    Size  Location     Type
 13020 ;;  lights          1    wreg     unsigned char 
 13021 ;;  status          1    7[BANK0 ] unsigned char 
 13022 ;; Auto vars:     Size  Location     Type
 13023 ;;  lights          1    9[BANK0 ] unsigned char 
 13024 ;; Return value:  Size  Location     Type
 13025 ;;		None               void
 13026 ;; Registers used:
 13027 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13028 ;; Tracked objects:
 13029 ;;		On entry : 0/0
 13030 ;;		On exit  : 0/0
 13031 ;;		Unchanged: 0/0
 13032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13033 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13034 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13035 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13036 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13037 ;;Total ram usage:        3 bytes
 13038 ;; Hardware stack levels used:    1
 13039 ;; Hardware stack levels required when called:    7
 13040 ;; This function calls:
 13041 ;;		_DimmerLightsPointSelect
 13042 ;;		_getMain_All_Error_Status
 13043 ;;		_setDimmerLights_Line
 13044 ;;		_setLED
 13045 ;; This function is called by:
 13046 ;;		_setDimmerLights_Main
 13047 ;; This function uses a non-reentrant model
 13048 ;;
 13049                           
 13050                           
 13051                           ;psect for function _setDimmerLights
 13052  0CBA                     _setDimmerLights:	
 13053                           
 13054                           ;incstack = 0
 13055                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13056                           ;setDimmerLights@lights stored from wreg
 13057  0CBA  0020               	movlb	0	; select bank0
 13058  0CBB  00A9               	movwf	setDimmerLights@lights
 13059                           
 13060                           ;Dimmer_B1.c: 631: DimmerLightsPointSelect(lights);
 13061  0CBC  0829               	movf	setDimmerLights@lights,w
 13062  0CBD  319C  2446  318C   	fcall	_DimmerLightsPointSelect
 13063                           
 13064                           ;Dimmer_B1.c: 634: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 13065  0CC0  3000               	movlw	0
 13066  0CC1  3191  2117  318C   	fcall	_getMain_All_Error_Status
 13067  0CC4  3A00               	xorlw	0
 13068  0CC5  3000               	movlw	0
 13069  0CC6  1903               	skipnz
 13070  0CC7  3001               	movlw	1
 13071  0CC8  0020               	movlb	0	; select bank0
 13072  0CC9  00A8               	movwf	??_setDimmerLights
 13073  0CCA  0DA8               	rlf	??_setDimmerLights,f
 13074  0CCB  0022               	movlb	2	; select bank2
 13075  0CCC  0820               	movf	_Dimmer^(0+256),w
 13076  0CCD  0020               	movlb	0	; select bank0
 13077  0CCE  0628               	xorwf	??_setDimmerLights,w
 13078  0CCF  39FD               	andlw	-3
 13079  0CD0  0628               	xorwf	??_setDimmerLights,w
 13080  0CD1  0022               	movlb	2	; select bank2
 13081  0CD2  00A0               	movwf	_Dimmer^(0+256)
 13082                           
 13083                           ;Dimmer_B1.c: 638: if (status == 1) {
 13084  0CD3  0020               	movlb	0	; select bank0
 13085  0CD4  0827               	movf	setDimmerLights@status,w
 13086  0CD5  3A01               	xorlw	1
 13087  0CD6  1D03               	skipz
 13088  0CD7  2D0E               	goto	l6768
 13089                           
 13090                           ;Dimmer_B1.c: 639: DimmerLights->Loop = 1;
 13091  0CD8  0879               	movf	_DimmerLights,w
 13092  0CD9  3E09               	addlw	9
 13093  0CDA  0086               	movwf	6
 13094  0CDB  3001               	movlw	1	; select bank2/3
 13095  0CDC  0087               	movwf	7
 13096  0CDD  1481               	bsf	1,1
 13097                           
 13098                           ;Dimmer_B1.c: 640: setLED(lights, 0);
 13099  0CDE  01A2               	clrf	setLED@command
 13100  0CDF  0829               	movf	setDimmerLights@lights,w
 13101  0CE0  3194  24F6  318C   	fcall	_setLED
 13102                           
 13103                           ;Dimmer_B1.c: 642: setDimmerLights_Line(lights);
 13104  0CE3  0020               	movlb	0	; select bank0
 13105  0CE4  0829               	movf	setDimmerLights@lights,w
 13106  0CE5  319D  250C         	fcall	_setDimmerLights_Line
 13107                           
 13108                           ;Dimmer_B1.c: 643: DimmerLights->StatusFlag = 1;
 13109  0CE7  0879               	movf	_DimmerLights,w
 13110  0CE8  0086               	movwf	6
 13111  0CE9  3001               	movlw	1	; select bank2/3
 13112  0CEA  0087               	movwf	7
 13113  0CEB  1701               	bsf	1,6
 13114                           
 13115                           ;Dimmer_B1.c: 645: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 13116  0CEC  0879               	movf	_DimmerLights,w
 13117  0CED  3E05               	addlw	5
 13118  0CEE  0086               	movwf	6
 13119  0CEF  3001               	movlw	1	; select bank2/3
 13120  0CF0  0087               	movwf	7
 13121  0CF1  0801               	movf	1,w
 13122  0CF2  0020               	movlb	0	; select bank0
 13123  0CF3  00A8               	movwf	??_setDimmerLights
 13124  0CF4  0879               	movf	_DimmerLights,w
 13125  0CF5  3E04               	addlw	4
 13126  0CF6  0086               	movwf	6
 13127  0CF7  3001               	movlw	1	; select bank2/3
 13128  0CF8  0087               	movwf	7
 13129  0CF9  0828               	movf	??_setDimmerLights,w
 13130  0CFA  0081               	movwf	1
 13131                           
 13132                           ;Dimmer_B1.c: 649: DimmerLights->DimmingValue = ((char)(80*0.8));
 13133  0CFB  3040               	movlw	64
 13134  0CFC  00A8               	movwf	??_setDimmerLights
 13135  0CFD  0879               	movf	_DimmerLights,w
 13136  0CFE  3E04               	addlw	4
 13137  0CFF  0086               	movwf	6
 13138  0D00  3001               	movlw	1	; select bank2/3
 13139  0D01  0087               	movwf	7
 13140  0D02  0828               	movf	??_setDimmerLights,w
 13141  0D03  0081               	movwf	1
 13142                           
 13143                           ;Dimmer_B1.c: 656: DimmerLights->DimmingTimeValue = 7;
 13144  0D04  3007               	movlw	7
 13145  0D05  00A8               	movwf	??_setDimmerLights
 13146  0D06  0879               	movf	_DimmerLights,w
 13147  0D07  3E02               	addlw	2
 13148  0D08  0086               	movwf	6
 13149  0D09  3001               	movlw	1	; select bank2/3
 13150  0D0A  0087               	movwf	7
 13151  0D0B  0828               	movf	??_setDimmerLights,w
 13152  0D0C  0081               	movwf	1
 13153                           
 13154                           ;Dimmer_B1.c: 658: } else {
 13155  0D0D  0008               	return
 13156  0D0E                     l6768:	
 13157                           
 13158                           ;Dimmer_B1.c: 659: DimmerLights->StatusFlag = 0;
 13159  0D0E  0879               	movf	_DimmerLights,w
 13160  0D0F  0086               	movwf	6
 13161  0D10  3001               	movlw	1	; select bank2/3
 13162  0D11  0087               	movwf	7
 13163  0D12  1301               	bcf	1,6
 13164                           
 13165                           ;Dimmer_B1.c: 660: DimmerLights->Loop = 0;
 13166  0D13  0879               	movf	_DimmerLights,w
 13167  0D14  3E09               	addlw	9
 13168  0D15  0086               	movwf	6
 13169  0D16  3001               	movlw	1	; select bank2/3
 13170  0D17  0087               	movwf	7
 13171  0D18  1081               	bcf	1,1
 13172                           
 13173                           ;Dimmer_B1.c: 661: setLED(lights, 1);
 13174  0D19  01A2               	clrf	setLED@command
 13175  0D1A  0AA2               	incf	setLED@command,f
 13176  0D1B  0829               	movf	setDimmerLights@lights,w
 13177  0D1C  3194  24F6  318C   	fcall	_setLED
 13178                           
 13179                           ;Dimmer_B1.c: 679: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13180  0D1F  0879               	movf	_DimmerLights,w
 13181  0D20  3E06               	addlw	6
 13182  0D21  0086               	movwf	6
 13183  0D22  3001               	movlw	1	; select bank2/3
 13184  0D23  0087               	movwf	7
 13185  0D24  0801               	movf	1,w
 13186  0D25  0020               	movlb	0	; select bank0
 13187  0D26  00A8               	movwf	??_setDimmerLights
 13188  0D27  0879               	movf	_DimmerLights,w
 13189  0D28  3E04               	addlw	4
 13190  0D29  0086               	movwf	6
 13191  0D2A  3001               	movlw	1	; select bank2/3
 13192  0D2B  0087               	movwf	7
 13193  0D2C  0828               	movf	??_setDimmerLights,w
 13194  0D2D  0081               	movwf	1
 13195                           
 13196                           ;Dimmer_B1.c: 684: DimmerLights->MosfetClose = 1;
 13197  0D2E  0879               	movf	_DimmerLights,w
 13198  0D2F  3E08               	addlw	8
 13199  0D30  0086               	movwf	6
 13200  0D31  3001               	movlw	1	; select bank2/3
 13201  0D32  0087               	movwf	7
 13202  0D33  1781               	bsf	1,7
 13203                           
 13204                           ;Dimmer_B1.c: 687: DimmerLights->AdjFlag = 0;
 13205  0D34  0879               	movf	_DimmerLights,w
 13206  0D35  0086               	movwf	6
 13207  0D36  3001               	movlw	1	; select bank2/3
 13208  0D37  0087               	movwf	7
 13209  0D38  1181               	bcf	1,3
 13210                           
 13211                           ;Dimmer_B1.c: 688: DimmerLights->AdjStatus = 0;
 13212  0D39  0879               	movf	_DimmerLights,w
 13213  0D3A  0086               	movwf	6
 13214  0D3B  3001               	movlw	1	; select bank2/3
 13215  0D3C  0087               	movwf	7
 13216  0D3D  1201               	bcf	1,4
 13217                           
 13218                           ;Dimmer_B1.c: 689: DimmerLights->AdjRF = 0;
 13219  0D3E  0879               	movf	_DimmerLights,w
 13220  0D3F  0086               	movwf	6
 13221  0D40  3001               	movlw	1	; select bank2/3
 13222  0D41  0087               	movwf	7
 13223  0D42  1101               	bcf	1,2
 13224                           
 13225                           ;Dimmer_B1.c: 690: DimmerLights->DimmingTimeValue = 7;
 13226  0D43  3007               	movlw	7
 13227  0D44  00A8               	movwf	??_setDimmerLights
 13228  0D45  0879               	movf	_DimmerLights,w
 13229  0D46  3E02               	addlw	2
 13230  0D47  0086               	movwf	6
 13231  0D48  3001               	movlw	1	; select bank2/3
 13232  0D49  0087               	movwf	7
 13233  0D4A  0828               	movf	??_setDimmerLights,w
 13234  0D4B  0081               	movwf	1
 13235  0D4C  0008               	return
 13236  0D4D                     __end_of_setDimmerLights:	
 13237                           
 13238                           	psect	text75
 13239  14F6                     __ptext75:	
 13240 ;; *************** function _setLED *****************
 13241 ;; Defined at:
 13242 ;;		line 73 in file "../src/LED_B1.c"
 13243 ;; Parameters:    Size  Location     Type
 13244 ;;  led             1    wreg     unsigned char 
 13245 ;;  command         1    2[BANK0 ] unsigned char 
 13246 ;; Auto vars:     Size  Location     Type
 13247 ;;  led             1    3[BANK0 ] unsigned char 
 13248 ;; Return value:  Size  Location     Type
 13249 ;;		None               void
 13250 ;; Registers used:
 13251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13252 ;; Tracked objects:
 13253 ;;		On entry : 0/0
 13254 ;;		On exit  : 0/0
 13255 ;;		Unchanged: 0/0
 13256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13257 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13260 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13261 ;;Total ram usage:        2 bytes
 13262 ;; Hardware stack levels used:    1
 13263 ;; Hardware stack levels required when called:    6
 13264 ;; This function calls:
 13265 ;;		_LedPointSelect
 13266 ;; This function is called by:
 13267 ;;		_setDimmerLights
 13268 ;;		_setLED_Initialization
 13269 ;;		_setSw_Initialization
 13270 ;;		_setMain_Exception
 13271 ;; This function uses a non-reentrant model
 13272 ;;
 13273                           
 13274                           
 13275                           ;psect for function _setLED
 13276  14F6                     _setLED:	
 13277                           
 13278                           ;incstack = 0
 13279                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13280                           ;setLED@led stored from wreg
 13281  14F6  0020               	movlb	0	; select bank0
 13282  14F7  00A3               	movwf	setLED@led
 13283                           
 13284                           ;LED_B1.c: 74: LedPointSelect(led);
 13285  14F8  0823               	movf	setLED@led,w
 13286  14F9  319D  25C9  3194   	fcall	_LedPointSelect
 13287                           
 13288                           ;LED_B1.c: 75: if (command == 0) {
 13289  14FC  0020               	movlb	0	; select bank0
 13290  14FD  08A2               	movf	setLED@command,f
 13291  14FE  1D03               	skipz
 13292  14FF  2D0D               	goto	l6474
 13293                           
 13294                           ;LED_B1.c: 77: if (led == 1) {
 13295  1500  0823               	movf	setLED@led,w
 13296  1501  3A01               	xorlw	1
 13297  1502  1D03               	skipz
 13298  1503  2D05               	goto	l6466
 13299                           
 13300                           ;LED_B1.c: 81: RA3 = 1;
 13301  1504  158C               	bsf	12,3	;volatile
 13302  1505                     l6466:	
 13303                           
 13304                           ;LED_B1.c: 83: }
 13305                           ;LED_B1.c: 86: if (led == 2) {
 13306  1505  0823               	movf	setLED@led,w
 13307  1506  3A02               	xorlw	2
 13308  1507  1903               	btfsc	3,2
 13309                           
 13310                           ;LED_B1.c: 90: RC7 = 1;
 13311  1508  178E               	bsf	14,7	;volatile
 13312                           
 13313                           ;LED_B1.c: 92: }
 13314                           ;LED_B1.c: 104: if (led == 99) {
 13315  1509  0823               	movf	setLED@led,w
 13316  150A  3A63               	xorlw	99
 13317  150B  1903               	btfsc	3,2
 13318                           
 13319                           ;LED_B1.c: 108: RB5 = 1;
 13320  150C  168D               	bsf	13,5	;volatile
 13321  150D                     l6474:	
 13322                           
 13323                           ;LED_B1.c: 110: }
 13324                           ;LED_B1.c: 112: } if (command == 1) {
 13325  150D  0822               	movf	setLED@command,w
 13326  150E  3A01               	xorlw	1
 13327  150F  1D03               	skipz
 13328  1510  2D1E               	goto	l6488
 13329                           
 13330                           ;LED_B1.c: 114: if (led == 1) {
 13331  1511  0823               	movf	setLED@led,w
 13332  1512  3A01               	xorlw	1
 13333  1513  1D03               	skipz
 13334  1514  2D16               	goto	l6480
 13335                           
 13336                           ;LED_B1.c: 118: RA3 = 0;
 13337  1515  118C               	bcf	12,3	;volatile
 13338  1516                     l6480:	
 13339                           
 13340                           ;LED_B1.c: 120: }
 13341                           ;LED_B1.c: 123: if (led == 2) {
 13342  1516  0823               	movf	setLED@led,w
 13343  1517  3A02               	xorlw	2
 13344  1518  1903               	btfsc	3,2
 13345                           
 13346                           ;LED_B1.c: 127: RC7 = 0;
 13347  1519  138E               	bcf	14,7	;volatile
 13348                           
 13349                           ;LED_B1.c: 129: }
 13350                           ;LED_B1.c: 141: if (led == 99) {
 13351  151A  0823               	movf	setLED@led,w
 13352  151B  3A63               	xorlw	99
 13353  151C  1903               	btfsc	3,2
 13354                           
 13355                           ;LED_B1.c: 145: RB5 = 0;
 13356  151D  128D               	bcf	13,5	;volatile
 13357  151E                     l6488:	
 13358                           
 13359                           ;LED_B1.c: 147: }
 13360                           ;LED_B1.c: 149: } if (command == 10) {
 13361  151E  0822               	movf	setLED@command,w
 13362  151F  3A0A               	xorlw	10
 13363  1520  1D03               	skipz
 13364  1521  2D3C               	goto	l6504
 13365                           
 13366                           ;LED_B1.c: 150: LED->GO = 0;
 13367  1522  087B               	movf	_LED,w
 13368  1523  0086               	movwf	6
 13369  1524  3001               	movlw	1	; select bank2/3
 13370  1525  0087               	movwf	7
 13371  1526  1081               	bcf	1,1
 13372                           
 13373                           ;LED_B1.c: 151: LED->Time = 0;
 13374  1527  0A7B               	incf	_LED,w
 13375  1528  0086               	movwf	6
 13376  1529  3001               	movlw	1	; select bank2/3
 13377  152A  0087               	movwf	7
 13378  152B  3000               	movlw	0
 13379  152C  3FC0               	movwi [0]fsr1
 13380  152D  3FC1               	movwi [1]fsr1
 13381                           
 13382                           ;LED_B1.c: 153: if (led == 1) {
 13383  152E  0823               	movf	setLED@led,w
 13384  152F  3A01               	xorlw	1
 13385  1530  1D03               	skipz
 13386  1531  2D34               	goto	l6496
 13387                           
 13388                           ;LED_B1.c: 157: RA3 = 1;
 13389  1532  158C               	bsf	12,3	;volatile
 13390                           
 13391                           ;LED_B1.c: 159: }
 13392  1533  2D38               	goto	l6500
 13393  1534                     l6496:	
 13394                           
 13395                           ;LED_B1.c: 162: else if (led == 2) {
 13396  1534  0823               	movf	setLED@led,w
 13397  1535  3A02               	xorlw	2
 13398  1536  1903               	btfsc	3,2
 13399                           
 13400                           ;LED_B1.c: 166: RC7 = 1;
 13401  1537  178E               	bsf	14,7	;volatile
 13402  1538                     l6500:	
 13403                           
 13404                           ;LED_B1.c: 168: }
 13405                           ;LED_B1.c: 180: if (led == 99) {
 13406  1538  0823               	movf	setLED@led,w
 13407  1539  3A63               	xorlw	99
 13408  153A  1903               	btfsc	3,2
 13409                           
 13410                           ;LED_B1.c: 184: RB5 = 1;
 13411  153B  168D               	bsf	13,5	;volatile
 13412  153C                     l6504:	
 13413                           
 13414                           ;LED_B1.c: 186: }
 13415                           ;LED_B1.c: 188: }
 13416                           ;LED_B1.c: 189: if (command == 11) {
 13417  153C  0822               	movf	setLED@command,w
 13418  153D  3A0B               	xorlw	11
 13419  153E  1D03               	skipz
 13420  153F  0008               	return
 13421                           
 13422                           ;LED_B1.c: 190: LED->GO = 1;
 13423  1540  087B               	movf	_LED,w
 13424  1541  0086               	movwf	6
 13425  1542  3001               	movlw	1	; select bank2/3
 13426  1543  0087               	movwf	7
 13427  1544  1481               	bsf	1,1
 13428  1545  0008               	return
 13429  1546                     __end_of_setLED:	
 13430                           
 13431                           	psect	text76
 13432  1DC9                     __ptext76:	
 13433 ;; *************** function _LedPointSelect *****************
 13434 ;; Defined at:
 13435 ;;		line 7 in file "../src/LED_B1.c"
 13436 ;; Parameters:    Size  Location     Type
 13437 ;;  led             1    wreg     unsigned char 
 13438 ;; Auto vars:     Size  Location     Type
 13439 ;;  led             1    1[BANK0 ] unsigned char 
 13440 ;; Return value:  Size  Location     Type
 13441 ;;		None               void
 13442 ;; Registers used:
 13443 ;;		wreg
 13444 ;; Tracked objects:
 13445 ;;		On entry : 0/0
 13446 ;;		On exit  : 0/0
 13447 ;;		Unchanged: 0/0
 13448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13450 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13451 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13452 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13453 ;;Total ram usage:        2 bytes
 13454 ;; Hardware stack levels used:    1
 13455 ;; Hardware stack levels required when called:    5
 13456 ;; This function calls:
 13457 ;;		Nothing
 13458 ;; This function is called by:
 13459 ;;		_setLED_Initialization
 13460 ;;		_setLED
 13461 ;;		_setLED_Main
 13462 ;; This function uses a non-reentrant model
 13463 ;;
 13464                           
 13465                           
 13466                           ;psect for function _LedPointSelect
 13467  1DC9                     _LedPointSelect:	
 13468                           
 13469                           ;incstack = 0
 13470                           ; Regs used in _LedPointSelect: [wreg]
 13471                           ;LedPointSelect@led stored from wreg
 13472  1DC9  0020               	movlb	0	; select bank0
 13473  1DCA  00A1               	movwf	LedPointSelect@led
 13474                           
 13475                           ;LED_B1.c: 9: if (led == 1) {
 13476  1DCB  0821               	movf	LedPointSelect@led,w
 13477  1DCC  3A01               	xorlw	1
 13478  1DCD  1D03               	skipz
 13479  1DCE  2DD3               	goto	l996
 13480                           
 13481                           ;LED_B1.c: 10: LED = &VarLED1;
 13482  1DCF  3064               	movlw	_VarLED1& (0+255)
 13483  1DD0  00A0               	movwf	??_LedPointSelect
 13484  1DD1  0820               	movf	??_LedPointSelect,w
 13485  1DD2  00FB               	movwf	_LED
 13486  1DD3                     l996:	
 13487                           
 13488                           ;LED_B1.c: 11: }
 13489                           ;LED_B1.c: 14: if (led == 2) {
 13490  1DD3  0821               	movf	LedPointSelect@led,w
 13491  1DD4  3A02               	xorlw	2
 13492  1DD5  1D03               	skipz
 13493  1DD6  2DDB               	goto	l997
 13494                           
 13495                           ;LED_B1.c: 15: LED = &VarLED2;
 13496  1DD7  3068               	movlw	_VarLED2& (0+255)
 13497  1DD8  00A0               	movwf	??_LedPointSelect
 13498  1DD9  0820               	movf	??_LedPointSelect,w
 13499  1DDA  00FB               	movwf	_LED
 13500  1DDB                     l997:	
 13501                           
 13502                           ;LED_B1.c: 16: }
 13503                           ;LED_B1.c: 24: if (led == 99) {
 13504  1DDB  0821               	movf	LedPointSelect@led,w
 13505  1DDC  3A63               	xorlw	99
 13506  1DDD  1D03               	skipz
 13507  1DDE  0008               	return
 13508                           
 13509                           ;LED_B1.c: 25: LED = &VarErrLED;
 13510  1DDF  3060               	movlw	_VarErrLED& (0+255)
 13511  1DE0  00A0               	movwf	??_LedPointSelect
 13512  1DE1  0820               	movf	??_LedPointSelect,w
 13513  1DE2  00FB               	movwf	_LED
 13514  1DE3  0008               	return
 13515  1DE4                     __end_of_LedPointSelect:	
 13516                           
 13517                           	psect	text77
 13518  1D0C                     __ptext77:	
 13519 ;; *************** function _setDimmerLights_Line *****************
 13520 ;; Defined at:
 13521 ;;		line 702 in file "../src/Dimmer_B1.c"
 13522 ;; Parameters:    Size  Location     Type
 13523 ;;  lights          1    wreg     unsigned char 
 13524 ;; Auto vars:     Size  Location     Type
 13525 ;;  lights          1    0[BANK0 ] unsigned char 
 13526 ;; Return value:  Size  Location     Type
 13527 ;;		None               void
 13528 ;; Registers used:
 13529 ;;		wreg
 13530 ;; Tracked objects:
 13531 ;;		On entry : 0/0
 13532 ;;		On exit  : 0/0
 13533 ;;		Unchanged: 0/0
 13534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13536 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13538 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13539 ;;Total ram usage:        1 bytes
 13540 ;; Hardware stack levels used:    1
 13541 ;; Hardware stack levels required when called:    5
 13542 ;; This function calls:
 13543 ;;		Nothing
 13544 ;; This function is called by:
 13545 ;;		_setDimmerLights
 13546 ;; This function uses a non-reentrant model
 13547 ;;
 13548                           
 13549                           
 13550                           ;psect for function _setDimmerLights_Line
 13551  1D0C                     _setDimmerLights_Line:	
 13552                           
 13553                           ;incstack = 0
 13554                           ; Regs used in _setDimmerLights_Line: [wreg]
 13555                           ;setDimmerLights_Line@lights stored from wreg
 13556  1D0C  0020               	movlb	0	; select bank0
 13557  1D0D  00A0               	movwf	setDimmerLights_Line@lights
 13558                           
 13559                           ;Dimmer_B1.c: 704: DimmerLights1.Line = 0;
 13560  1D0E  0023               	movlb	3	; select bank3
 13561  1D0F  1047               	bcf	(_DimmerLights1^(0+384)+9),0
 13562                           
 13563                           ;Dimmer_B1.c: 707: DimmerLights2.Line = 0;
 13564  1D10  1056               	bcf	(_DimmerLights2^(0+384)+9),0
 13565                           
 13566                           ;Dimmer_B1.c: 713: if (lights == 1) {
 13567  1D11  0020               	movlb	0	; select bank0
 13568  1D12  0820               	movf	setDimmerLights_Line@lights,w
 13569  1D13  3A01               	xorlw	1
 13570  1D14  1D03               	skipz
 13571  1D15  2D19               	goto	l6514
 13572                           
 13573                           ;Dimmer_B1.c: 714: DimmerLights1.Line = 1;
 13574  1D16  0023               	movlb	3	; select bank3
 13575  1D17  1447               	bsf	(_DimmerLights1^(0+384)+9),0
 13576                           
 13577                           ;Dimmer_B1.c: 715: }
 13578  1D18  0008               	return
 13579  1D19                     l6514:	
 13580                           
 13581                           ;Dimmer_B1.c: 718: else if (lights == 2) {
 13582  1D19  0020               	movlb	0	; select bank0
 13583  1D1A  0820               	movf	setDimmerLights_Line@lights,w
 13584  1D1B  3A02               	xorlw	2
 13585  1D1C  1D03               	skipz
 13586  1D1D  0008               	return
 13587                           
 13588                           ;Dimmer_B1.c: 719: DimmerLights2.Line = 1;
 13589  1D1E  0023               	movlb	3	; select bank3
 13590  1D1F  1456               	bsf	(_DimmerLights2^(0+384)+9),0
 13591  1D20  0008               	return
 13592  1D21                     __end_of_setDimmerLights_Line:	
 13593                           
 13594                           	psect	text78
 13595  1117                     __ptext78:	
 13596 ;; *************** function _getMain_All_Error_Status *****************
 13597 ;; Defined at:
 13598 ;;		line 361 in file "../src/main_B1.c"
 13599 ;; Parameters:    Size  Location     Type
 13600 ;;  command         1    wreg     unsigned char 
 13601 ;; Auto vars:     Size  Location     Type
 13602 ;;  command         1    5[BANK0 ] unsigned char 
 13603 ;;  status          1    6[BANK0 ] unsigned char 
 13604 ;; Return value:  Size  Location     Type
 13605 ;;                  1    wreg      unsigned char 
 13606 ;; Registers used:
 13607 ;;		wreg, status,2, status,0
 13608 ;; Tracked objects:
 13609 ;;		On entry : 0/0
 13610 ;;		On exit  : 0/0
 13611 ;;		Unchanged: 0/0
 13612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13614 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13615 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13616 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13617 ;;Total ram usage:        7 bytes
 13618 ;; Hardware stack levels used:    1
 13619 ;; Hardware stack levels required when called:    5
 13620 ;; This function calls:
 13621 ;;		Nothing
 13622 ;; This function is called by:
 13623 ;;		_DimmerLights_Main
 13624 ;;		_setDimmerLights
 13625 ;;		_setDimmerLights_Adj
 13626 ;;		_Load_Main
 13627 ;;		_setTemp_Main
 13628 ;;		_setRF_Main
 13629 ;;		_getRxData
 13630 ;;		_Switch_Main
 13631 ;; This function uses a non-reentrant model
 13632 ;;
 13633                           
 13634                           
 13635                           ;psect for function _getMain_All_Error_Status
 13636  1117                     _getMain_All_Error_Status:	
 13637                           
 13638                           ;incstack = 0
 13639                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 13640                           ;getMain_All_Error_Status@command stored from wreg
 13641  1117  0020               	movlb	0	; select bank0
 13642  1118  00A5               	movwf	getMain_All_Error_Status@command
 13643                           
 13644                           ;main_B1.c: 362: char status = 0;
 13645  1119  01A6               	clrf	getMain_All_Error_Status@status
 13646                           
 13647                           ;main_B1.c: 373: if (status == 0 && command != 2) {
 13648  111A  08A6               	movf	getMain_All_Error_Status@status,f
 13649  111B  1D03               	skipz
 13650  111C  2931               	goto	l6446
 13651  111D  0825               	movf	getMain_All_Error_Status@command,w
 13652  111E  3A02               	xorlw	2
 13653  111F  1903               	skipnz
 13654  1120  2931               	goto	l6446
 13655                           
 13656                           ;main_B1.c: 374: status = Temp.ERROR == 1 ? 2 : 0;
 13657  1121  0021               	movlb	1	; select bank1
 13658  1122  18D4               	btfsc	_Temp^(0+128),1
 13659  1123  2928               	goto	l6444
 13660  1124  0020               	movlb	0	; select bank0
 13661  1125  01A1               	clrf	_getMain_All_Error_Status$7073
 13662  1126  01A2               	clrf	_getMain_All_Error_Status$7073+1
 13663  1127  292D               	goto	l2719
 13664  1128                     l6444:	
 13665  1128  3002               	movlw	2
 13666  1129  0020               	movlb	0	; select bank0
 13667  112A  00A1               	movwf	_getMain_All_Error_Status$7073
 13668  112B  3000               	movlw	0
 13669  112C  00A2               	movwf	_getMain_All_Error_Status$7073+1
 13670  112D                     l2719:	
 13671  112D  0821               	movf	_getMain_All_Error_Status$7073,w
 13672  112E  00A0               	movwf	??_getMain_All_Error_Status
 13673  112F  0820               	movf	??_getMain_All_Error_Status,w
 13674  1130  00A6               	movwf	getMain_All_Error_Status@status
 13675  1131                     l6446:	
 13676                           
 13677                           ;main_B1.c: 375: }
 13678                           ;main_B1.c: 380: if (status == 0 && command != 3) {
 13679  1131  08A6               	movf	getMain_All_Error_Status@status,f
 13680  1132  1D03               	skipz
 13681  1133  2948               	goto	l2720
 13682  1134  0825               	movf	getMain_All_Error_Status@command,w
 13683  1135  3A03               	xorlw	3
 13684  1136  1903               	skipnz
 13685  1137  2948               	goto	l2720
 13686                           
 13687                           ;main_B1.c: 381: status = Load.ERROR == 1 ? 3 : 0;
 13688  1138  0022               	movlb	2	; select bank2
 13689  1139  1AAA               	btfsc	_Load^(0+256),5
 13690  113A  293F               	goto	l6454
 13691  113B  0020               	movlb	0	; select bank0
 13692  113C  01A3               	clrf	_getMain_All_Error_Status$7074
 13693  113D  01A4               	clrf	_getMain_All_Error_Status$7074+1
 13694  113E  2944               	goto	l2724
 13695  113F                     l6454:	
 13696  113F  3003               	movlw	3
 13697  1140  0020               	movlb	0	; select bank0
 13698  1141  00A3               	movwf	_getMain_All_Error_Status$7074
 13699  1142  3000               	movlw	0
 13700  1143  00A4               	movwf	_getMain_All_Error_Status$7074+1
 13701  1144                     l2724:	
 13702  1144  0823               	movf	_getMain_All_Error_Status$7074,w
 13703  1145  00A0               	movwf	??_getMain_All_Error_Status
 13704  1146  0820               	movf	??_getMain_All_Error_Status,w
 13705  1147  00A6               	movwf	getMain_All_Error_Status@status
 13706  1148                     l2720:	
 13707                           
 13708                           ;main_B1.c: 382: }
 13709                           ;main_B1.c: 398: return status;
 13710  1148  0826               	movf	getMain_All_Error_Status@status,w
 13711  1149  0008               	return
 13712  114A                     __end_of_getMain_All_Error_Status:	
 13713                           
 13714                           	psect	text79
 13715  10BC                     __ptext79:	
 13716 ;; *************** function _getMain_LightsStatus *****************
 13717 ;; Defined at:
 13718 ;;		line 334 in file "../src/main_B1.c"
 13719 ;; Parameters:    Size  Location     Type
 13720 ;;		None
 13721 ;; Auto vars:     Size  Location     Type
 13722 ;;  i               2    6[BANK0 ] int 
 13723 ;;  status          1    8[BANK0 ] unsigned char 
 13724 ;;  count           1    5[BANK0 ] unsigned char 
 13725 ;; Return value:  Size  Location     Type
 13726 ;;                  1    wreg      unsigned char 
 13727 ;; Registers used:
 13728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13729 ;; Tracked objects:
 13730 ;;		On entry : 0/0
 13731 ;;		On exit  : 0/0
 13732 ;;		Unchanged: 0/0
 13733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13738 ;;Total ram usage:        5 bytes
 13739 ;; Hardware stack levels used:    1
 13740 ;; Hardware stack levels required when called:    7
 13741 ;; This function calls:
 13742 ;;		_getDimmerLights_Status
 13743 ;; This function is called by:
 13744 ;;		_DimmerLights_Main
 13745 ;;		_Flash_Memory_Main
 13746 ;;		_Load_Main
 13747 ;;		_setMain_Exception
 13748 ;; This function uses a non-reentrant model
 13749 ;;
 13750                           
 13751                           
 13752                           ;psect for function _getMain_LightsStatus
 13753  10BC                     _getMain_LightsStatus:	
 13754                           
 13755                           ;main_B1.c: 335: char status = 0;
 13756                           
 13757                           ;incstack = 0
 13758                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13759  10BC  0020               	movlb	0	; select bank0
 13760  10BD  01A8               	clrf	getMain_LightsStatus@status
 13761                           
 13762                           ;main_B1.c: 341: char count = 2;
 13763  10BE  3002               	movlw	2
 13764  10BF  00A4               	movwf	??_getMain_LightsStatus
 13765  10C0  0824               	movf	??_getMain_LightsStatus,w
 13766  10C1  00A5               	movwf	getMain_LightsStatus@count
 13767                           
 13768                           ;main_B1.c: 347: for (int i = 0; i < count; i++) {
 13769  10C2  01A6               	clrf	getMain_LightsStatus@i
 13770  10C3  01A7               	clrf	getMain_LightsStatus@i+1
 13771  10C4                     l6744:	
 13772  10C4  0827               	movf	getMain_LightsStatus@i+1,w
 13773  10C5  3A80               	xorlw	128
 13774  10C6  00A4               	movwf	??_getMain_LightsStatus
 13775  10C7  3080               	movlw	128
 13776  10C8  0224               	subwf	??_getMain_LightsStatus,w
 13777  10C9  1D03               	skipz
 13778  10CA  28CD               	goto	u5945
 13779  10CB  0825               	movf	getMain_LightsStatus@count,w
 13780  10CC  0226               	subwf	getMain_LightsStatus@i,w
 13781  10CD                     u5945:	
 13782  10CD  1803               	btfsc	3,0
 13783  10CE  28E5               	goto	l6746
 13784                           
 13785                           ;main_B1.c: 348: if (status == 0) {
 13786  10CF  0020               	movlb	0	; select bank0
 13787  10D0  08A8               	movf	getMain_LightsStatus@status,f
 13788  10D1  1D03               	skipz
 13789  10D2  28E0               	goto	l6742
 13790                           
 13791                           ;main_B1.c: 353: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 13792  10D3  0826               	movf	getMain_LightsStatus@i,w
 13793  10D4  3E01               	addlw	1
 13794  10D5  319B  23AA  3190   	fcall	_getDimmerLights_Status
 13795  10D8  3A01               	xorlw	1
 13796  10D9  3000               	movlw	0
 13797  10DA  1903               	skipnz
 13798  10DB  3001               	movlw	1
 13799  10DC  0020               	movlb	0	; select bank0
 13800  10DD  00A4               	movwf	??_getMain_LightsStatus
 13801  10DE  0824               	movf	??_getMain_LightsStatus,w
 13802  10DF  00A8               	movwf	getMain_LightsStatus@status
 13803  10E0                     l6742:	
 13804  10E0  3001               	movlw	1
 13805  10E1  07A6               	addwf	getMain_LightsStatus@i,f
 13806  10E2  3000               	movlw	0
 13807  10E3  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 13808  10E4  28C4               	goto	l6744
 13809  10E5                     l6746:	
 13810                           
 13811                           ;main_B1.c: 355: }
 13812                           ;main_B1.c: 356: }
 13813                           ;main_B1.c: 357: return status;
 13814  10E5  0020               	movlb	0	; select bank0
 13815  10E6  0828               	movf	getMain_LightsStatus@status,w
 13816  10E7  0008               	return
 13817  10E8                     __end_of_getMain_LightsStatus:	
 13818                           
 13819                           	psect	text80
 13820  1ADA                     __ptext80:	
 13821 ;; *************** function _getLoad_OK *****************
 13822 ;; Defined at:
 13823 ;;		line 218 in file "../src/OverLoad_B1.c"
 13824 ;; Parameters:    Size  Location     Type
 13825 ;;		None
 13826 ;; Auto vars:     Size  Location     Type
 13827 ;;  ok              1    0[BANK0 ] unsigned char 
 13828 ;; Return value:  Size  Location     Type
 13829 ;;                  1    wreg      unsigned char 
 13830 ;; Registers used:
 13831 ;;		wreg, status,2
 13832 ;; Tracked objects:
 13833 ;;		On entry : 0/0
 13834 ;;		On exit  : 0/0
 13835 ;;		Unchanged: 0/0
 13836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13838 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13840 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13841 ;;Total ram usage:        1 bytes
 13842 ;; Hardware stack levels used:    1
 13843 ;; Hardware stack levels required when called:    5
 13844 ;; This function calls:
 13845 ;;		Nothing
 13846 ;; This function is called by:
 13847 ;;		_DimmerLights_Main
 13848 ;; This function uses a non-reentrant model
 13849 ;;
 13850                           
 13851                           
 13852                           ;psect for function _getLoad_OK
 13853  1ADA                     _getLoad_OK:	
 13854                           
 13855                           ;OverLoad_B1.c: 219: char ok = Load.OK == 1 ? 1 : 0;
 13856                           
 13857                           ;incstack = 0
 13858                           ; Regs used in _getLoad_OK: [wreg+status,2]
 13859  1ADA  3000               	movlw	0
 13860  1ADB  0022               	movlb	2	; select bank2
 13861  1ADC  1BAA               	btfsc	_Load^(0+256),7
 13862  1ADD  3001               	movlw	1
 13863  1ADE  0020               	movlb	0	; select bank0
 13864  1ADF  00A0               	movwf	getLoad_OK@ok
 13865                           
 13866                           ;OverLoad_B1.c: 220: return ok;
 13867  1AE0  0820               	movf	getLoad_OK@ok,w
 13868  1AE1  0008               	return
 13869  1AE2                     __end_of_getLoad_OK:	
 13870                           
 13871                           	psect	text81
 13872  1D4C                     __ptext81:	
 13873 ;; *************** function _DimmerLights_Initialization *****************
 13874 ;; Defined at:
 13875 ;;		line 343 in file "../src/Dimmer_B1.c"
 13876 ;; Parameters:    Size  Location     Type
 13877 ;;		None
 13878 ;; Auto vars:     Size  Location     Type
 13879 ;;		None
 13880 ;; Return value:  Size  Location     Type
 13881 ;;		None               void
 13882 ;; Registers used:
 13883 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13884 ;; Tracked objects:
 13885 ;;		On entry : 0/0
 13886 ;;		On exit  : 0/0
 13887 ;;		Unchanged: 0/0
 13888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13891 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13892 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13893 ;;Total ram usage:        1 bytes
 13894 ;; Hardware stack levels used:    1
 13895 ;; Hardware stack levels required when called:    7
 13896 ;; This function calls:
 13897 ;;		_Dimmer_Initialization
 13898 ;;		_setDimmerLights_Initialization
 13899 ;; This function is called by:
 13900 ;;		_main
 13901 ;; This function uses a non-reentrant model
 13902 ;;
 13903                           
 13904                           
 13905                           ;psect for function _DimmerLights_Initialization
 13906  1D4C                     _DimmerLights_Initialization:	
 13907                           
 13908                           ;Dimmer_B1.c: 345: DimmerLights11 = &DimmerLights1;
 13909                           
 13910                           ;incstack = 0
 13911                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13912  1D4C  30BE               	movlw	_DimmerLights1& (0+255)
 13913  1D4D  0020               	movlb	0	; select bank0
 13914  1D4E  00A4               	movwf	??_DimmerLights_Initialization
 13915  1D4F  0824               	movf	??_DimmerLights_Initialization,w
 13916  1D50  0021               	movlb	1	; select bank1
 13917  1D51  00C9               	movwf	_DimmerLights11^(0+128)
 13918                           
 13919                           ;Dimmer_B1.c: 346: setDimmerLights_Initialization(1);
 13920  1D52  3001               	movlw	1
 13921  1D53  319F  27B0  319D   	fcall	_setDimmerLights_Initialization
 13922                           
 13923                           ;Dimmer_B1.c: 350: DimmerLights22 = &DimmerLights2;
 13924  1D56  30CD               	movlw	_DimmerLights2& (0+255)
 13925  1D57  0020               	movlb	0	; select bank0
 13926  1D58  00A4               	movwf	??_DimmerLights_Initialization
 13927  1D59  0824               	movf	??_DimmerLights_Initialization,w
 13928  1D5A  0021               	movlb	1	; select bank1
 13929  1D5B  00CA               	movwf	_DimmerLights22^(0+128)
 13930                           
 13931                           ;Dimmer_B1.c: 351: setDimmerLights_Initialization(2);
 13932  1D5C  3002               	movlw	2
 13933  1D5D  319F  27B0  319D   	fcall	_setDimmerLights_Initialization
 13934                           
 13935                           ;Dimmer_B1.c: 360: Dimmer_Initialization();
 13936  1D60  3188  2000         	fcall	_Dimmer_Initialization
 13937  1D62  0008               	return
 13938  1D63                     __end_of_DimmerLights_Initialization:	
 13939                           
 13940                           	psect	text82
 13941  1FB0                     __ptext82:	
 13942 ;; *************** function _setDimmerLights_Initialization *****************
 13943 ;; Defined at:
 13944 ;;		line 366 in file "../src/Dimmer_B1.c"
 13945 ;; Parameters:    Size  Location     Type
 13946 ;;  lights          1    wreg     unsigned char 
 13947 ;; Auto vars:     Size  Location     Type
 13948 ;;  lights          1    3[BANK0 ] unsigned char 
 13949 ;; Return value:  Size  Location     Type
 13950 ;;		None               void
 13951 ;; Registers used:
 13952 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13953 ;; Tracked objects:
 13954 ;;		On entry : 0/0
 13955 ;;		On exit  : 0/0
 13956 ;;		Unchanged: 0/0
 13957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13959 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13960 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13961 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13962 ;;Total ram usage:        2 bytes
 13963 ;; Hardware stack levels used:    1
 13964 ;; Hardware stack levels required when called:    6
 13965 ;; This function calls:
 13966 ;;		_DimmerLightsPointSelect
 13967 ;; This function is called by:
 13968 ;;		_DimmerLights_Initialization
 13969 ;; This function uses a non-reentrant model
 13970 ;;
 13971                           
 13972                           
 13973                           ;psect for function _setDimmerLights_Initialization
 13974  1FB0                     _setDimmerLights_Initialization:	
 13975                           
 13976                           ;incstack = 0
 13977                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 13978                           ;setDimmerLights_Initialization@lights stored from wreg
 13979  1FB0  0020               	movlb	0	; select bank0
 13980  1FB1  00A3               	movwf	setDimmerLights_Initialization@lights
 13981                           
 13982                           ;Dimmer_B1.c: 368: DimmerLightsPointSelect(lights);
 13983  1FB2  0823               	movf	setDimmerLights_Initialization@lights,w
 13984  1FB3  319C  2446         	fcall	_DimmerLightsPointSelect
 13985                           
 13986                           ;Dimmer_B1.c: 374: DimmerLights->MaxmumValue = ((char)(80*0.8));
 13987  1FB5  3040               	movlw	64
 13988  1FB6  0020               	movlb	0	; select bank0
 13989  1FB7  00A2               	movwf	??_setDimmerLights_Initialization
 13990  1FB8  0879               	movf	_DimmerLights,w
 13991  1FB9  3E05               	addlw	5
 13992  1FBA  0086               	movwf	6
 13993  1FBB  3001               	movlw	1	; select bank2/3
 13994  1FBC  0087               	movwf	7
 13995  1FBD  0822               	movf	??_setDimmerLights_Initialization,w
 13996  1FBE  0081               	movwf	1
 13997                           
 13998                           ;Dimmer_B1.c: 375: DimmerLights->MinimumValue = ((char)(10*0.8));
 13999  1FBF  3008               	movlw	8
 14000  1FC0  00A2               	movwf	??_setDimmerLights_Initialization
 14001  1FC1  0879               	movf	_DimmerLights,w
 14002  1FC2  3E06               	addlw	6
 14003  1FC3  0086               	movwf	6
 14004  1FC4  3001               	movlw	1	; select bank2/3
 14005  1FC5  0087               	movwf	7
 14006  1FC6  0822               	movf	??_setDimmerLights_Initialization,w
 14007  1FC7  0081               	movwf	1
 14008                           
 14009                           ;Dimmer_B1.c: 389: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 14010  1FC8  0879               	movf	_DimmerLights,w
 14011  1FC9  3E05               	addlw	5
 14012  1FCA  0086               	movwf	6
 14013  1FCB  3001               	movlw	1	; select bank2/3
 14014  1FCC  0087               	movwf	7
 14015  1FCD  0801               	movf	1,w
 14016  1FCE  00A2               	movwf	??_setDimmerLights_Initialization
 14017  1FCF  0879               	movf	_DimmerLights,w
 14018  1FD0  3E04               	addlw	4
 14019  1FD1  0086               	movwf	6
 14020  1FD2  3001               	movlw	1	; select bank2/3
 14021  1FD3  0087               	movwf	7
 14022  1FD4  0822               	movf	??_setDimmerLights_Initialization,w
 14023  1FD5  0081               	movwf	1
 14024  1FD6  0008               	return
 14025  1FD7                     __end_of_setDimmerLights_Initialization:	
 14026                           
 14027                           	psect	text83
 14028  0800                     __ptext83:	
 14029 ;; *************** function _Dimmer_Initialization *****************
 14030 ;; Defined at:
 14031 ;;		line 926 in file "../src/Dimmer_B1.c"
 14032 ;; Parameters:    Size  Location     Type
 14033 ;;		None
 14034 ;; Auto vars:     Size  Location     Type
 14035 ;;		None
 14036 ;; Return value:  Size  Location     Type
 14037 ;;		None               void
 14038 ;; Registers used:
 14039 ;;		None
 14040 ;; Tracked objects:
 14041 ;;		On entry : 0/0
 14042 ;;		On exit  : 0/0
 14043 ;;		Unchanged: 0/0
 14044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14049 ;;Total ram usage:        0 bytes
 14050 ;; Hardware stack levels used:    1
 14051 ;; Hardware stack levels required when called:    5
 14052 ;; This function calls:
 14053 ;;		Nothing
 14054 ;; This function is called by:
 14055 ;;		_DimmerLights_Initialization
 14056 ;; This function uses a non-reentrant model
 14057 ;;
 14058                           
 14059                           
 14060                           ;psect for function _Dimmer_Initialization
 14061  0800                     _Dimmer_Initialization:	
 14062                           
 14063                           ;incstack = 0
 14064                           ; Regs used in _Dimmer_Initialization: []
 14065  0800  0008               	return
 14066  0801                     __end_of_Dimmer_Initialization:	
 14067                           
 14068                           	psect	text84
 14069  1AD2                     __ptext84:	
 14070 ;; *************** function _DelayOff_Main *****************
 14071 ;; Defined at:
 14072 ;;		line 41 in file "../src/DelayOff_B1.c"
 14073 ;; Parameters:    Size  Location     Type
 14074 ;;		None
 14075 ;; Auto vars:     Size  Location     Type
 14076 ;;		None
 14077 ;; Return value:  Size  Location     Type
 14078 ;;		None               void
 14079 ;; Registers used:
 14080 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14081 ;; Tracked objects:
 14082 ;;		On entry : 0/0
 14083 ;;		On exit  : 0/0
 14084 ;;		Unchanged: 0/0
 14085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14090 ;;Total ram usage:        0 bytes
 14091 ;; Hardware stack levels used:    1
 14092 ;; Hardware stack levels required when called:   11
 14093 ;; This function calls:
 14094 ;;		_DlyOff_Main
 14095 ;; This function is called by:
 14096 ;;		_main
 14097 ;; This function uses a non-reentrant model
 14098 ;;
 14099                           
 14100                           
 14101                           ;psect for function _DelayOff_Main
 14102  1AD2                     _DelayOff_Main:	
 14103                           
 14104                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 14105                           
 14106                           ;incstack = 0
 14107                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14108  1AD2  3001               	movlw	1
 14109  1AD3  3187  279F  319A   	fcall	_DlyOff_Main
 14110                           
 14111                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 14112  1AD6  3002               	movlw	2
 14113  1AD7  3187  279F         	fcall	_DlyOff_Main
 14114  1AD9  0008               	return
 14115  1ADA                     __end_of_DelayOff_Main:	
 14116                           
 14117                           	psect	text85
 14118  079F                     __ptext85:	
 14119 ;; *************** function _DlyOff_Main *****************
 14120 ;; Defined at:
 14121 ;;		line 62 in file "../src/DelayOff_B1.c"
 14122 ;; Parameters:    Size  Location     Type
 14123 ;;  sw              1    wreg     unsigned char 
 14124 ;; Auto vars:     Size  Location     Type
 14125 ;;  sw              1   72[BANK0 ] unsigned char 
 14126 ;; Return value:  Size  Location     Type
 14127 ;;		None               void
 14128 ;; Registers used:
 14129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14130 ;; Tracked objects:
 14131 ;;		On entry : 0/0
 14132 ;;		On exit  : 0/0
 14133 ;;		Unchanged: 0/0
 14134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14136 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14137 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14138 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14139 ;;Total ram usage:        3 bytes
 14140 ;; Hardware stack levels used:    1
 14141 ;; Hardware stack levels required when called:   10
 14142 ;; This function calls:
 14143 ;;		_DelayOffPointSelect
 14144 ;;		_getDimmerLights_Status
 14145 ;;		_setDimmerLights_SwOff
 14146 ;;		_setDimmerLights_SwOn
 14147 ;;		_setRF_DimmerLights
 14148 ;; This function is called by:
 14149 ;;		_DelayOff_Main
 14150 ;; This function uses a non-reentrant model
 14151 ;;
 14152                           
 14153                           
 14154                           ;psect for function _DlyOff_Main
 14155  079F                     _DlyOff_Main:	
 14156                           
 14157                           ;incstack = 0
 14158                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14159                           ;DlyOff_Main@sw stored from wreg
 14160  079F  0020               	movlb	0	; select bank0
 14161  07A0  00E8               	movwf	DlyOff_Main@sw
 14162                           
 14163                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 14164  07A1  0868               	movf	DlyOff_Main@sw,w
 14165  07A2  319C  24A6  3187   	fcall	_DelayOffPointSelect
 14166                           
 14167                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 14168  07A5  0878               	movf	_DelayOff,w
 14169  07A6  0086               	movwf	6
 14170  07A7  3001               	movlw	1	; select bank2/3
 14171  07A8  0087               	movwf	7
 14172  07A9  1C81               	btfss	1,1
 14173  07AA  0008               	return
 14174                           
 14175                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 14176  07AB  0878               	movf	_DelayOff,w
 14177  07AC  0086               	movwf	6
 14178  07AD  3001               	movlw	1	; select bank2/3
 14179  07AE  0087               	movwf	7
 14180  07AF  3001               	movlw	1
 14181  07B0  0781               	addwf	1,f
 14182  07B1  3141               	addfsr 1,1
 14183  07B2  1803               	skipnc
 14184  07B3  0A81               	incf	1,f
 14185                           
 14186                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 14187  07B4  0878               	movf	_DelayOff,w
 14188  07B5  0086               	movwf	6
 14189  07B6  3001               	movlw	1	; select bank2/3
 14190  07B7  0087               	movwf	7
 14191  07B8  3F40               	moviw [0]fsr1
 14192  07B9  0020               	movlb	0	; select bank0
 14193  07BA  00E6               	movwf	??_DlyOff_Main
 14194  07BB  3F41               	moviw [1]fsr1
 14195  07BC  00E7               	movwf	??_DlyOff_Main+1
 14196  07BD  3016               	movlw	22
 14197  07BE  0267               	subwf	??_DlyOff_Main+1,w
 14198  07BF  3012               	movlw	18
 14199  07C0  1903               	skipnz
 14200  07C1  0266               	subwf	??_DlyOff_Main,w
 14201  07C2  1C03               	skipc
 14202  07C3  0008               	return
 14203                           
 14204                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 14205  07C4  0878               	movf	_DelayOff,w
 14206  07C5  0086               	movwf	6
 14207  07C6  3001               	movlw	1	; select bank2/3
 14208  07C7  0087               	movwf	7
 14209  07C8  3000               	movlw	0
 14210  07C9  3FC0               	movwi [0]fsr1
 14211  07CA  3FC1               	movwi [1]fsr1
 14212                           
 14213                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 14214  07CB  3001               	movlw	1
 14215  07CC  00E6               	movwf	??_DlyOff_Main
 14216  07CD  0878               	movf	_DelayOff,w
 14217  07CE  0086               	movwf	6
 14218  07CF  3001               	movlw	1	; select bank2/3
 14219  07D0  0087               	movwf	7
 14220  07D1  0866               	movf	??_DlyOff_Main,w
 14221  07D2  0781               	addwf	1,f
 14222                           
 14223                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 14224  07D3  0878               	movf	_DelayOff,w
 14225  07D4  0086               	movwf	6
 14226  07D5  3001               	movlw	1	; select bank2/3
 14227  07D6  0087               	movwf	7
 14228  07D7  0878               	movf	_DelayOff,w
 14229  07D8  0084               	movwf	4
 14230  07D9  3001               	movlw	1	; select bank2/3
 14231  07DA  0085               	movwf	5
 14232  07DB  0800               	movf	0,w
 14233  07DC  0201               	subwf	1,w
 14234  07DD  1C03               	skipc
 14235  07DE  0008               	return
 14236                           
 14237                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 14238  07DF  0878               	movf	_DelayOff,w
 14239  07E0  0086               	movwf	6
 14240  07E1  3001               	movlw	1	; select bank2/3
 14241  07E2  0087               	movwf	7
 14242  07E3  0181               	clrf	1
 14243                           
 14244                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 14245  07E4  0878               	movf	_DelayOff,w
 14246  07E5  0086               	movwf	6
 14247  07E6  3001               	movlw	1	; select bank2/3
 14248  07E7  0087               	movwf	7
 14249  07E8  1081               	bcf	1,1
 14250                           
 14251                           ;DelayOff_B1.c: 74: setDimmerLights_SwOn(sw);
 14252  07E9  0868               	movf	DlyOff_Main@sw,w
 14253  07EA  3193  23CA  3187   	fcall	_setDimmerLights_SwOn
 14254                           
 14255                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 14256  07ED  0020               	movlb	0	; select bank0
 14257  07EE  0868               	movf	DlyOff_Main@sw,w
 14258  07EF  319B  23AA  3187   	fcall	_getDimmerLights_Status
 14259  07F2  3A01               	xorlw	1
 14260  07F3  1D03               	skipz
 14261  07F4  2FFA               	goto	l582
 14262                           
 14263                           ;DelayOff_B1.c: 76: setDimmerLights_SwOff(sw);
 14264  07F5  0020               	movlb	0	; select bank0
 14265  07F6  0868               	movf	DlyOff_Main@sw,w
 14266  07F7  3188  2002  3187   	fcall	_setDimmerLights_SwOff
 14267  07FA                     l582:	
 14268                           
 14269                           ;DelayOff_B1.c: 77: }
 14270                           ;DelayOff_B1.c: 78: setRF_DimmerLights(sw, 0);
 14271  07FA  0020               	movlb	0	; select bank0
 14272  07FB  01DD               	clrf	setRF_DimmerLights@on
 14273  07FC  0868               	movf	DlyOff_Main@sw,w
 14274  07FD  3189  21ED         	fcall	_setRF_DimmerLights
 14275  07FF  0008               	return
 14276  0800                     __end_of_DlyOff_Main:	
 14277                           
 14278                           	psect	text86
 14279  13CA                     __ptext86:	
 14280 ;; *************** function _setDimmerLights_SwOn *****************
 14281 ;; Defined at:
 14282 ;;		line 519 in file "../src/Dimmer_B1.c"
 14283 ;; Parameters:    Size  Location     Type
 14284 ;;  sw              1    wreg     unsigned char 
 14285 ;; Auto vars:     Size  Location     Type
 14286 ;;  sw              1   68[BANK0 ] unsigned char 
 14287 ;;  idle            1   67[BANK0 ] unsigned char 
 14288 ;; Return value:  Size  Location     Type
 14289 ;;		None               void
 14290 ;; Registers used:
 14291 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14292 ;; Tracked objects:
 14293 ;;		On entry : 0/0
 14294 ;;		On exit  : 0/0
 14295 ;;		Unchanged: 0/0
 14296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14298 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14299 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14300 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14301 ;;Total ram usage:        3 bytes
 14302 ;; Hardware stack levels used:    1
 14303 ;; Hardware stack levels required when called:    9
 14304 ;; This function calls:
 14305 ;;		_DimmerLightsPointSelect
 14306 ;;		_getAll_DimmerLights_AdjGO
 14307 ;;		_setBuz
 14308 ;;		_setDimmerLights_Trigger
 14309 ;;		_setRF_DimmerLights
 14310 ;;		_setTxData
 14311 ;; This function is called by:
 14312 ;;		_DlyOff_Main
 14313 ;;		_setRFSW_Control
 14314 ;;		_setSw_Main
 14315 ;; This function uses a non-reentrant model
 14316 ;;
 14317                           
 14318                           
 14319                           ;psect for function _setDimmerLights_SwOn
 14320  13CA                     _setDimmerLights_SwOn:	
 14321                           
 14322                           ;incstack = 0
 14323                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14324                           ;setDimmerLights_SwOn@sw stored from wreg
 14325  13CA  0020               	movlb	0	; select bank0
 14326  13CB  00E4               	movwf	setDimmerLights_SwOn@sw
 14327                           
 14328                           ;Dimmer_B1.c: 520: DimmerLightsPointSelect(sw);
 14329  13CC  0864               	movf	setDimmerLights_SwOn@sw,w
 14330  13CD  319C  2446  3193   	fcall	_DimmerLightsPointSelect
 14331                           
 14332                           ;Dimmer_B1.c: 521: char idle = 0;
 14333  13D0  0020               	movlb	0	; select bank0
 14334  13D1  01E3               	clrf	setDimmerLights_SwOn@idle
 14335                           
 14336                           ;Dimmer_B1.c: 523: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
 14337  13D2  319B  23BA  3193   	fcall	_getAll_DimmerLights_AdjGO
 14338  13D5  3A01               	xorlw	1
 14339  13D6  3000               	movlw	0
 14340  13D7  1903               	skipnz
 14341  13D8  3001               	movlw	1
 14342  13D9  0020               	movlb	0	; select bank0
 14343  13DA  00E2               	movwf	??_setDimmerLights_SwOn
 14344  13DB  0862               	movf	??_setDimmerLights_SwOn,w
 14345  13DC  00E3               	movwf	setDimmerLights_SwOn@idle
 14346                           
 14347                           ;Dimmer_B1.c: 525: if (idle == 0) {
 14348  13DD  08E3               	movf	setDimmerLights_SwOn@idle,f
 14349  13DE  1D03               	skipz
 14350  13DF  0008               	return
 14351                           
 14352                           ;Dimmer_B1.c: 526: DimmerLights->SwFlag = 1;
 14353  13E0  0879               	movf	_DimmerLights,w
 14354  13E1  3E09               	addlw	9
 14355  13E2  0086               	movwf	6
 14356  13E3  3001               	movlw	1	; select bank2/3
 14357  13E4  0087               	movwf	7
 14358  13E5  1701               	bsf	1,6
 14359                           
 14360                           ;Dimmer_B1.c: 527: setBuz(1, 100);
 14361  13E6  3064               	movlw	100
 14362  13E7  00A9               	movwf	setBuz@time
 14363  13E8  3000               	movlw	0
 14364  13E9  00AA               	movwf	setBuz@time+1
 14365  13EA  3001               	movlw	1
 14366  13EB  3196  26F2  3193   	fcall	_setBuz
 14367                           
 14368                           ;Dimmer_B1.c: 528: if (DimmerLights->Status == 0) {
 14369  13EE  0879               	movf	_DimmerLights,w
 14370  13EF  0086               	movwf	6
 14371  13F0  3001               	movlw	1	; select bank2/3
 14372  13F1  0087               	movwf	7
 14373  13F2  1A81               	btfsc	1,5
 14374  13F3  2C0A               	goto	l6260
 14375                           
 14376                           ;Dimmer_B1.c: 529: DimmerLights->Status = 1;
 14377  13F4  0879               	movf	_DimmerLights,w
 14378  13F5  0086               	movwf	6
 14379  13F6  3001               	movlw	1	; select bank2/3
 14380  13F7  0087               	movwf	7
 14381  13F8  1681               	bsf	1,5
 14382                           
 14383                           ;Dimmer_B1.c: 530: setDimmerLights_Trigger(sw, 1);
 14384  13F9  0020               	movlb	0	; select bank0
 14385  13FA  01A2               	clrf	setDimmerLights_Trigger@command
 14386  13FB  0AA2               	incf	setDimmerLights_Trigger@command,f
 14387  13FC  0864               	movf	setDimmerLights_SwOn@sw,w
 14388  13FD  319E  261D  3193   	fcall	_setDimmerLights_Trigger
 14389                           
 14390                           ;Dimmer_B1.c: 531: setRF_DimmerLights(sw, 1);
 14391  1400  0020               	movlb	0	; select bank0
 14392  1401  01DD               	clrf	setRF_DimmerLights@on
 14393  1402  0ADD               	incf	setRF_DimmerLights@on,f
 14394  1403  0864               	movf	setDimmerLights_SwOn@sw,w
 14395  1404  3189  21ED  3193   	fcall	_setRF_DimmerLights
 14396                           
 14397                           ;Dimmer_B1.c: 532: setTxData();
 14398  1407  318F  2743         	fcall	_setTxData
 14399                           
 14400                           ;Dimmer_B1.c: 533: } else {
 14401  1409  0008               	return
 14402  140A                     l6260:	
 14403                           
 14404                           ;Dimmer_B1.c: 534: DimmerLights->Status = 0;
 14405  140A  0879               	movf	_DimmerLights,w
 14406  140B  0086               	movwf	6
 14407  140C  3001               	movlw	1	; select bank2/3
 14408  140D  0087               	movwf	7
 14409  140E  1281               	bcf	1,5
 14410  140F  0008               	return
 14411  1410                     __end_of_setDimmerLights_SwOn:	
 14412                           
 14413                           	psect	text87
 14414  16F2                     __ptext87:	
 14415 ;; *************** function _setBuz *****************
 14416 ;; Defined at:
 14417 ;;		line 22 in file "../src/Buzzer_B1.c"
 14418 ;; Parameters:    Size  Location     Type
 14419 ;;  count           1    wreg     unsigned char 
 14420 ;;  time            2    9[BANK0 ] int 
 14421 ;; Auto vars:     Size  Location     Type
 14422 ;;  count           1   12[BANK0 ] unsigned char 
 14423 ;; Return value:  Size  Location     Type
 14424 ;;		None               void
 14425 ;; Registers used:
 14426 ;;		wreg, status,2, status,0, pclath, cstack
 14427 ;; Tracked objects:
 14428 ;;		On entry : 0/0
 14429 ;;		On exit  : 0/0
 14430 ;;		Unchanged: 0/0
 14431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14432 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14433 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14434 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14435 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14436 ;;Total ram usage:        4 bytes
 14437 ;; Hardware stack levels used:    1
 14438 ;; Hardware stack levels required when called:    6
 14439 ;; This function calls:
 14440 ;;		___awdiv
 14441 ;; This function is called by:
 14442 ;;		_setDimmerLights_Main
 14443 ;;		_setDimmerLights_SwOn
 14444 ;;		_setLog_Code
 14445 ;;		_setControl_Lights_Table
 14446 ;;		_setSw_Main
 14447 ;;		_my_MainTimer
 14448 ;;		_setMain_Exception
 14449 ;; This function uses a non-reentrant model
 14450 ;;
 14451                           
 14452                           
 14453                           ;psect for function _setBuz
 14454  16F2                     _setBuz:	
 14455                           
 14456                           ;incstack = 0
 14457                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 14458                           ;setBuz@count stored from wreg
 14459  16F2  0020               	movlb	0	; select bank0
 14460  16F3  00AC               	movwf	setBuz@count
 14461                           
 14462                           ;Buzzer_B1.c: 23: time /= 10;
 14463  16F4  300A               	movlw	10
 14464  16F5  00A0               	movwf	___awdiv@divisor
 14465  16F6  3000               	movlw	0
 14466  16F7  00A1               	movwf	___awdiv@divisor+1
 14467  16F8  082A               	movf	setBuz@time+1,w
 14468  16F9  01A3               	clrf	___awdiv@dividend+1
 14469  16FA  07A3               	addwf	___awdiv@dividend+1,f
 14470  16FB  0829               	movf	setBuz@time,w
 14471  16FC  01A2               	clrf	___awdiv@dividend
 14472  16FD  07A2               	addwf	___awdiv@dividend,f
 14473  16FE  3195  2597  3196   	fcall	___awdiv
 14474  1701  0020               	movlb	0	; select bank0
 14475  1702  0821               	movf	?___awdiv+1,w
 14476  1703  01AA               	clrf	setBuz@time+1
 14477  1704  07AA               	addwf	setBuz@time+1,f
 14478  1705  0820               	movf	?___awdiv,w
 14479  1706  01A9               	clrf	setBuz@time
 14480  1707  07A9               	addwf	setBuz@time,f
 14481                           
 14482                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 14483  1708  0021               	movlb	1	; select bank1
 14484  1709  1C30               	btfss	_Buz1^(0+128),0
 14485  170A  0008               	return
 14486                           
 14487                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 14488  170B  18B0               	btfsc	_Buz1^(0+128),1
 14489  170C  2F23               	goto	l96
 14490                           
 14491                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 14492  170D  14B0               	bsf	_Buz1^(0+128),1
 14493                           
 14494                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 14495  170E  01B1               	clrf	(_Buz1^(0+128)+1)
 14496  170F  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 14497                           
 14498                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 14499  1710  0020               	movlb	0	; select bank0
 14500  1711  082C               	movf	setBuz@count,w
 14501  1712  00AB               	movwf	??_setBuz
 14502  1713  082B               	movf	??_setBuz,w
 14503  1714  0021               	movlb	1	; select bank1
 14504  1715  00B3               	movwf	(_Buz1^(0+128)+3)
 14505                           
 14506                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 14507  1716  0020               	movlb	0	; select bank0
 14508  1717  082A               	movf	setBuz@time+1,w
 14509  1718  0021               	movlb	1	; select bank1
 14510  1719  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 14511  171A  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 14512  171B  0020               	movlb	0	; select bank0
 14513  171C  0829               	movf	setBuz@time,w
 14514  171D  0021               	movlb	1	; select bank1
 14515  171E  01B6               	clrf	(_Buz1^(0+128)+6)
 14516  171F  07B6               	addwf	(_Buz1^(0+128)+6),f
 14517                           
 14518                           ;Buzzer_B1.c: 30: RB3 = 1;
 14519  1720  0020               	movlb	0	; select bank0
 14520  1721  158D               	bsf	13,3	;volatile
 14521                           
 14522                           ;Buzzer_B1.c: 31: } else {
 14523  1722  0008               	return
 14524  1723                     l96:	
 14525                           
 14526                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 14527  1723  19B0               	btfsc	_Buz1^(0+128),3
 14528  1724  2F37               	goto	l98
 14529                           
 14530                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 14531  1725  15B0               	bsf	_Buz1^(0+128),3
 14532                           
 14533                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 14534  1726  0020               	movlb	0	; select bank0
 14535  1727  082C               	movf	setBuz@count,w
 14536  1728  00AB               	movwf	??_setBuz
 14537  1729  082B               	movf	??_setBuz,w
 14538  172A  0021               	movlb	1	; select bank1
 14539  172B  00B4               	movwf	(_Buz1^(0+128)+4)
 14540                           
 14541                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 14542  172C  0020               	movlb	0	; select bank0
 14543  172D  082A               	movf	setBuz@time+1,w
 14544  172E  0021               	movlb	1	; select bank1
 14545  172F  01B9               	clrf	((_Buz1+1)^(0+128)+8)
 14546  1730  07B9               	addwf	((_Buz1+1)^(0+128)+8),f
 14547  1731  0020               	movlb	0	; select bank0
 14548  1732  0829               	movf	setBuz@time,w
 14549  1733  0021               	movlb	1	; select bank1
 14550  1734  01B8               	clrf	(_Buz1^(0+128)+8)
 14551  1735  07B8               	addwf	(_Buz1^(0+128)+8),f
 14552                           
 14553                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 14554  1736  0008               	return
 14555  1737                     l98:	
 14556  1737  1A30               	btfsc	_Buz1^(0+128),4
 14557  1738  0008               	return
 14558                           
 14559                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 14560  1739  1630               	bsf	_Buz1^(0+128),4
 14561                           
 14562                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 14563  173A  0020               	movlb	0	; select bank0
 14564  173B  082C               	movf	setBuz@count,w
 14565  173C  00AB               	movwf	??_setBuz
 14566  173D  082B               	movf	??_setBuz,w
 14567  173E  0021               	movlb	1	; select bank1
 14568  173F  00B5               	movwf	(_Buz1^(0+128)+5)
 14569                           
 14570                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 14571  1740  0020               	movlb	0	; select bank0
 14572  1741  082A               	movf	setBuz@time+1,w
 14573  1742  0021               	movlb	1	; select bank1
 14574  1743  01BB               	clrf	((_Buz1+1)^(0+128)+10)
 14575  1744  07BB               	addwf	((_Buz1+1)^(0+128)+10),f
 14576  1745  0020               	movlb	0	; select bank0
 14577  1746  0829               	movf	setBuz@time,w
 14578  1747  0021               	movlb	1	; select bank1
 14579  1748  01BA               	clrf	(_Buz1^(0+128)+10)
 14580  1749  07BA               	addwf	(_Buz1^(0+128)+10),f
 14581  174A  0008               	return
 14582  174B                     __end_of_setBuz:	
 14583                           
 14584                           	psect	text88
 14585  1597                     __ptext88:	
 14586 ;; *************** function ___awdiv *****************
 14587 ;; Defined at:
 14588 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 14589 ;; Parameters:    Size  Location     Type
 14590 ;;  divisor         2    0[BANK0 ] int 
 14591 ;;  dividend        2    2[BANK0 ] int 
 14592 ;; Auto vars:     Size  Location     Type
 14593 ;;  quotient        2    7[BANK0 ] int 
 14594 ;;  sign            1    6[BANK0 ] unsigned char 
 14595 ;;  counter         1    5[BANK0 ] unsigned char 
 14596 ;; Return value:  Size  Location     Type
 14597 ;;                  2    0[BANK0 ] int 
 14598 ;; Registers used:
 14599 ;;		wreg, status,2, status,0
 14600 ;; Tracked objects:
 14601 ;;		On entry : 0/0
 14602 ;;		On exit  : 0/0
 14603 ;;		Unchanged: 0/0
 14604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14605 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14606 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14607 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14608 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14609 ;;Total ram usage:        9 bytes
 14610 ;; Hardware stack levels used:    1
 14611 ;; Hardware stack levels required when called:    5
 14612 ;; This function calls:
 14613 ;;		Nothing
 14614 ;; This function is called by:
 14615 ;;		_setBuz
 14616 ;; This function uses a non-reentrant model
 14617 ;;
 14618                           
 14619                           
 14620                           ;psect for function ___awdiv
 14621  1597                     ___awdiv:	
 14622                           
 14623                           ;incstack = 0
 14624                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14625  1597  0020               	movlb	0	; select bank0
 14626  1598  01A6               	clrf	___awdiv@sign
 14627  1599  1FA1               	btfss	___awdiv@divisor+1,7
 14628  159A  2DA2               	goto	l6054
 14629  159B  09A0               	comf	___awdiv@divisor,f
 14630  159C  09A1               	comf	___awdiv@divisor+1,f
 14631  159D  0AA0               	incf	___awdiv@divisor,f
 14632  159E  1903               	skipnz
 14633  159F  0AA1               	incf	___awdiv@divisor+1,f
 14634  15A0  01A6               	clrf	___awdiv@sign
 14635  15A1  0AA6               	incf	___awdiv@sign,f
 14636  15A2                     l6054:	
 14637  15A2  1FA3               	btfss	___awdiv@dividend+1,7
 14638  15A3  2DAD               	goto	l6060
 14639  15A4  09A2               	comf	___awdiv@dividend,f
 14640  15A5  09A3               	comf	___awdiv@dividend+1,f
 14641  15A6  0AA2               	incf	___awdiv@dividend,f
 14642  15A7  1903               	skipnz
 14643  15A8  0AA3               	incf	___awdiv@dividend+1,f
 14644  15A9  3001               	movlw	1
 14645  15AA  00A4               	movwf	??___awdiv
 14646  15AB  0824               	movf	??___awdiv,w
 14647  15AC  06A6               	xorwf	___awdiv@sign,f
 14648  15AD                     l6060:	
 14649  15AD  01A7               	clrf	___awdiv@quotient
 14650  15AE  01A8               	clrf	___awdiv@quotient+1
 14651  15AF  0821               	movf	___awdiv@divisor+1,w
 14652  15B0  0420               	iorwf	___awdiv@divisor,w
 14653  15B1  1903               	skipnz
 14654  15B2  2DDC               	goto	l6082
 14655  15B3  01A5               	clrf	___awdiv@counter
 14656  15B4  0AA5               	incf	___awdiv@counter,f
 14657  15B5                     l6070:	
 14658  15B5  1BA1               	btfsc	___awdiv@divisor+1,7
 14659  15B6  2DC1               	goto	l6072
 14660  15B7  3001               	movlw	1
 14661  15B8                     u4965:	
 14662  15B8  35A0               	lslf	___awdiv@divisor,f
 14663  15B9  0DA1               	rlf	___awdiv@divisor+1,f
 14664  15BA  0B89               	decfsz	9,f
 14665  15BB  2DB8               	goto	u4965
 14666  15BC  3001               	movlw	1
 14667  15BD  00A4               	movwf	??___awdiv
 14668  15BE  0824               	movf	??___awdiv,w
 14669  15BF  07A5               	addwf	___awdiv@counter,f
 14670  15C0  2DB5               	goto	l6070
 14671  15C1                     l6072:	
 14672  15C1  3001               	movlw	1
 14673  15C2                     u4985:	
 14674  15C2  35A7               	lslf	___awdiv@quotient,f
 14675  15C3  0DA8               	rlf	___awdiv@quotient+1,f
 14676  15C4  0B89               	decfsz	9,f
 14677  15C5  2DC2               	goto	u4985
 14678  15C6  0821               	movf	___awdiv@divisor+1,w
 14679  15C7  0223               	subwf	___awdiv@dividend+1,w
 14680  15C8  1D03               	skipz
 14681  15C9  2DCC               	goto	u4995
 14682  15CA  0820               	movf	___awdiv@divisor,w
 14683  15CB  0222               	subwf	___awdiv@dividend,w
 14684  15CC                     u4995:	
 14685  15CC  1C03               	skipc
 14686  15CD  2DD3               	goto	l6078
 14687  15CE  0820               	movf	___awdiv@divisor,w
 14688  15CF  02A2               	subwf	___awdiv@dividend,f
 14689  15D0  0821               	movf	___awdiv@divisor+1,w
 14690  15D1  3BA3               	subwfb	___awdiv@dividend+1,f
 14691  15D2  1427               	bsf	___awdiv@quotient,0
 14692  15D3                     l6078:	
 14693  15D3  3001               	movlw	1
 14694  15D4                     u5005:	
 14695  15D4  36A1               	lsrf	___awdiv@divisor+1,f
 14696  15D5  0CA0               	rrf	___awdiv@divisor,f
 14697  15D6  0B89               	decfsz	9,f
 14698  15D7  2DD4               	goto	u5005
 14699  15D8  3001               	movlw	1
 14700  15D9  02A5               	subwf	___awdiv@counter,f
 14701  15DA  1D03               	btfss	3,2
 14702  15DB  2DC1               	goto	l6072
 14703  15DC                     l6082:	
 14704  15DC  0826               	movf	___awdiv@sign,w
 14705  15DD  1903               	btfsc	3,2
 14706  15DE  2DE4               	goto	l6086
 14707  15DF  09A7               	comf	___awdiv@quotient,f
 14708  15E0  09A8               	comf	___awdiv@quotient+1,f
 14709  15E1  0AA7               	incf	___awdiv@quotient,f
 14710  15E2  1903               	skipnz
 14711  15E3  0AA8               	incf	___awdiv@quotient+1,f
 14712  15E4                     l6086:	
 14713  15E4  0828               	movf	___awdiv@quotient+1,w
 14714  15E5  01A1               	clrf	?___awdiv+1
 14715  15E6  07A1               	addwf	?___awdiv+1,f
 14716  15E7  0827               	movf	___awdiv@quotient,w
 14717  15E8  01A0               	clrf	?___awdiv
 14718  15E9  07A0               	addwf	?___awdiv,f
 14719  15EA  0008               	return
 14720  15EB                     __end_of___awdiv:	
 14721                           
 14722                           	psect	text89
 14723  1BBA                     __ptext89:	
 14724 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 14725 ;; Defined at:
 14726 ;;		line 504 in file "../src/Dimmer_B1.c"
 14727 ;; Parameters:    Size  Location     Type
 14728 ;;		None
 14729 ;; Auto vars:     Size  Location     Type
 14730 ;;  adjgo           1    1[BANK0 ] unsigned char 
 14731 ;; Return value:  Size  Location     Type
 14732 ;;                  1    wreg      unsigned char 
 14733 ;; Registers used:
 14734 ;;		wreg, status,2
 14735 ;; Tracked objects:
 14736 ;;		On entry : 0/0
 14737 ;;		On exit  : 0/0
 14738 ;;		Unchanged: 0/0
 14739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14741 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14742 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14743 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14744 ;;Total ram usage:        3 bytes
 14745 ;; Hardware stack levels used:    1
 14746 ;; Hardware stack levels required when called:    5
 14747 ;; This function calls:
 14748 ;;		Nothing
 14749 ;; This function is called by:
 14750 ;;		_setDimmerLights_SwOn
 14751 ;;		_setDimmerLights_AdjControl
 14752 ;;		_Load_Main
 14753 ;; This function uses a non-reentrant model
 14754 ;;
 14755                           
 14756                           
 14757                           ;psect for function _getAll_DimmerLights_AdjGO
 14758  1BBA                     _getAll_DimmerLights_AdjGO:	
 14759                           
 14760                           ;Dimmer_B1.c: 505: char adjgo = 0;
 14761                           
 14762                           ;incstack = 0
 14763                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 14764  1BBA  0020               	movlb	0	; select bank0
 14765  1BBB  01A1               	clrf	getAll_DimmerLights_AdjGO@adjgo
 14766                           
 14767                           ;Dimmer_B1.c: 510: adjgo = DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1 ? 1 : 0;
 14768  1BBC  01A2               	clrf	_getAll_DimmerLights_AdjGO$2557
 14769  1BBD  0AA2               	incf	_getAll_DimmerLights_AdjGO$2557,f
 14770  1BBE  0023               	movlb	3	; select bank3
 14771  1BBF  1DC6               	btfss	(_DimmerLights1^(0+384)+8),3
 14772  1BC0  19D5               	btfsc	(_DimmerLights2^(0+384)+8),3
 14773  1BC1  2BC4               	goto	l6172
 14774  1BC2  0020               	movlb	0	; select bank0
 14775  1BC3  01A2               	clrf	_getAll_DimmerLights_AdjGO$2557
 14776  1BC4                     l6172:	
 14777  1BC4  0020               	movlb	0	; select bank0
 14778  1BC5  0822               	movf	_getAll_DimmerLights_AdjGO$2557,w
 14779  1BC6  00A0               	movwf	??_getAll_DimmerLights_AdjGO
 14780  1BC7  0820               	movf	??_getAll_DimmerLights_AdjGO,w
 14781  1BC8  00A1               	movwf	getAll_DimmerLights_AdjGO@adjgo
 14782                           
 14783                           ;Dimmer_B1.c: 515: return adjgo;
 14784  1BC9  0821               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 14785  1BCA  0008               	return
 14786  1BCB                     __end_of_getAll_DimmerLights_AdjGO:	
 14787                           
 14788                           	psect	text90
 14789  0802                     __ptext90:	
 14790 ;; *************** function _setDimmerLights_SwOff *****************
 14791 ;; Defined at:
 14792 ;;		line 540 in file "../src/Dimmer_B1.c"
 14793 ;; Parameters:    Size  Location     Type
 14794 ;;  sw              1    wreg     unsigned char 
 14795 ;; Auto vars:     Size  Location     Type
 14796 ;;  sw              1   69[BANK0 ] unsigned char 
 14797 ;;  command         1   68[BANK0 ] unsigned char 
 14798 ;; Return value:  Size  Location     Type
 14799 ;;		None               void
 14800 ;; Registers used:
 14801 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14802 ;; Tracked objects:
 14803 ;;		On entry : 0/0
 14804 ;;		On exit  : 0/0
 14805 ;;		Unchanged: 0/0
 14806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14808 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14809 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14810 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14811 ;;Total ram usage:        4 bytes
 14812 ;; Hardware stack levels used:    1
 14813 ;; Hardware stack levels required when called:    9
 14814 ;; This function calls:
 14815 ;;		_DimmerLightsPointSelect
 14816 ;;		_setDelayOff_GO
 14817 ;;		_setDimmerLights_Trigger
 14818 ;;		_setDimmerLights_TriggerAdj
 14819 ;;		_setRF_DimmerLights
 14820 ;;		_setTxData
 14821 ;; This function is called by:
 14822 ;;		_DlyOff_Main
 14823 ;;		_setDimmerLights_ErrorClose
 14824 ;;		_setRFSW_Control
 14825 ;;		_setSw_Main
 14826 ;; This function uses a non-reentrant model
 14827 ;;
 14828                           
 14829                           
 14830                           ;psect for function _setDimmerLights_SwOff
 14831  0802                     _setDimmerLights_SwOff:	
 14832                           
 14833                           ;incstack = 0
 14834                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14835                           ;setDimmerLights_SwOff@sw stored from wreg
 14836  0802  0020               	movlb	0	; select bank0
 14837  0803  00E5               	movwf	setDimmerLights_SwOff@sw
 14838                           
 14839                           ;Dimmer_B1.c: 541: DimmerLightsPointSelect(sw);
 14840  0804  0865               	movf	setDimmerLights_SwOff@sw,w
 14841  0805  319C  2446  3188   	fcall	_DimmerLightsPointSelect
 14842                           
 14843                           ;Dimmer_B1.c: 542: char command = DimmerLights->Status == 1 ? 1 : 0;
 14844  0808  0879               	movf	_DimmerLights,w
 14845  0809  0086               	movwf	6
 14846  080A  3001               	movlw	1	; select bank2/3
 14847  080B  0087               	movwf	7
 14848  080C  3000               	movlw	0
 14849  080D  1A81               	btfsc	1,5
 14850  080E  3001               	movlw	1
 14851  080F  0020               	movlb	0	; select bank0
 14852  0810  00E4               	movwf	setDimmerLights_SwOff@command
 14853                           
 14854                           ;Dimmer_B1.c: 543: if (DimmerLights->SwFlag == 1) {
 14855  0811  0879               	movf	_DimmerLights,w
 14856  0812  3E09               	addlw	9
 14857  0813  0086               	movwf	6
 14858  0814  3001               	movlw	1	; select bank2/3
 14859  0815  0087               	movwf	7
 14860  0816  1F01               	btfss	1,6
 14861  0817  0008               	return
 14862                           
 14863                           ;Dimmer_B1.c: 544: DimmerLights->SwFlag = 0;
 14864  0818  0879               	movf	_DimmerLights,w
 14865  0819  3E09               	addlw	9
 14866  081A  0086               	movwf	6
 14867  081B  3001               	movlw	1	; select bank2/3
 14868  081C  0087               	movwf	7
 14869  081D  1301               	bcf	1,6
 14870                           
 14871                           ;Dimmer_B1.c: 545: if (DimmerLights->Status == 1) {
 14872  081E  0879               	movf	_DimmerLights,w
 14873  081F  0086               	movwf	6
 14874  0820  3001               	movlw	1	; select bank2/3
 14875  0821  0087               	movwf	7
 14876  0822  1E81               	btfss	1,5
 14877  0823  2849               	goto	l6286
 14878                           
 14879                           ;Dimmer_B1.c: 546: if (DimmerLights->SwAdj == 1) {
 14880  0824  0879               	movf	_DimmerLights,w
 14881  0825  3E09               	addlw	9
 14882  0826  0086               	movwf	6
 14883  0827  3001               	movlw	1	; select bank2/3
 14884  0828  0087               	movwf	7
 14885  0829  1F81               	btfss	1,7
 14886  082A  2855               	goto	l826
 14887                           
 14888                           ;Dimmer_B1.c: 547: DimmerLights->SwAdj = 0;
 14889  082B  0879               	movf	_DimmerLights,w
 14890  082C  3E09               	addlw	9
 14891  082D  0086               	movwf	6
 14892  082E  3001               	movlw	1	; select bank2/3
 14893  082F  0087               	movwf	7
 14894  0830  1381               	bcf	1,7
 14895                           
 14896                           ;Dimmer_B1.c: 548: setDimmerLights_TriggerAdj(sw, 0);
 14897  0831  01A2               	clrf	setDimmerLights_TriggerAdj@command
 14898  0832  0865               	movf	setDimmerLights_SwOff@sw,w
 14899  0833  319E  2679  3188   	fcall	_setDimmerLights_TriggerAdj
 14900                           
 14901                           ;Dimmer_B1.c: 549: product->Data[17]=product->Data[26 + sw];
 14902  0836  0020               	movlb	0	; select bank0
 14903  0837  0865               	movf	setDimmerLights_SwOff@sw,w
 14904  0838  3E1A               	addlw	26
 14905  0839  076F               	addwf	_product,w
 14906  083A  00E2               	movwf	??_setDimmerLights_SwOff
 14907  083B  0862               	movf	??_setDimmerLights_SwOff,w
 14908  083C  0086               	movwf	6
 14909  083D  3002               	movlw	2	; select bank4/5
 14910  083E  0087               	movwf	7
 14911  083F  0801               	movf	1,w
 14912  0840  00E3               	movwf	??_setDimmerLights_SwOff+1
 14913  0841  086F               	movf	_product,w
 14914  0842  3E11               	addlw	17
 14915  0843  0086               	movwf	6
 14916  0844  3002               	movlw	2	; select bank4/5
 14917  0845  0087               	movwf	7
 14918  0846  0863               	movf	??_setDimmerLights_SwOff+1,w
 14919  0847  0081               	movwf	1
 14920                           
 14921                           ;Dimmer_B1.c: 552: }
 14922                           ;Dimmer_B1.c: 553: } else {
 14923  0848  2855               	goto	l826
 14924  0849                     l6286:	
 14925                           
 14926                           ;Dimmer_B1.c: 554: setDimmerLights_Trigger(sw, 0);
 14927  0849  01A2               	clrf	setDimmerLights_Trigger@command
 14928  084A  0865               	movf	setDimmerLights_SwOff@sw,w
 14929  084B  319E  261D  3188   	fcall	_setDimmerLights_Trigger
 14930                           
 14931                           ;Dimmer_B1.c: 555: setDelayOff_GO(sw, 0, 0);
 14932  084E  0020               	movlb	0	; select bank0
 14933  084F  01AA               	clrf	setDelayOff_GO@command
 14934  0850  01AB               	clrf	setDelayOff_GO@value
 14935  0851  0865               	movf	setDimmerLights_SwOff@sw,w
 14936  0852  3188  2061  3188   	fcall	_setDelayOff_GO
 14937  0855                     l826:	
 14938                           
 14939                           ;Dimmer_B1.c: 558: }
 14940                           ;Dimmer_B1.c: 559: setRF_DimmerLights(sw, command);
 14941  0855  0020               	movlb	0	; select bank0
 14942  0856  0864               	movf	setDimmerLights_SwOff@command,w
 14943  0857  00E2               	movwf	??_setDimmerLights_SwOff
 14944  0858  0862               	movf	??_setDimmerLights_SwOff,w
 14945  0859  00DD               	movwf	setRF_DimmerLights@on
 14946  085A  0865               	movf	setDimmerLights_SwOff@sw,w
 14947  085B  3189  21ED  3188   	fcall	_setRF_DimmerLights
 14948                           
 14949                           ;Dimmer_B1.c: 560: setTxData();
 14950  085E  318F  2743         	fcall	_setTxData
 14951  0860  0008               	return
 14952  0861                     __end_of_setDimmerLights_SwOff:	
 14953                           
 14954                           	psect	text91
 14955  0F43                     __ptext91:	
 14956 ;; *************** function _setTxData *****************
 14957 ;; Defined at:
 14958 ;;		line 204 in file "../src/RF_Control_B1.c"
 14959 ;; Parameters:    Size  Location     Type
 14960 ;;		None
 14961 ;; Auto vars:     Size  Location     Type
 14962 ;;  i               1    0        unsigned char 
 14963 ;; Return value:  Size  Location     Type
 14964 ;;		None               void
 14965 ;; Registers used:
 14966 ;;		wreg, fsr1l, fsr1h
 14967 ;; Tracked objects:
 14968 ;;		On entry : 0/0
 14969 ;;		On exit  : 0/0
 14970 ;;		Unchanged: 0/0
 14971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14974 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14975 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14976 ;;Total ram usage:        1 bytes
 14977 ;; Hardware stack levels used:    1
 14978 ;; Hardware stack levels required when called:    5
 14979 ;; This function calls:
 14980 ;;		Nothing
 14981 ;; This function is called by:
 14982 ;;		_setDimmerLights_SwOn
 14983 ;;		_setDimmerLights_SwOff
 14984 ;;		_setDimmerLights_Adj
 14985 ;;		_setControl_Lights_Table
 14986 ;;		_setRFSW_AdjControl
 14987 ;;		_my_MainTimer
 14988 ;; This function uses a non-reentrant model
 14989 ;;
 14990                           
 14991                           
 14992                           ;psect for function _setTxData
 14993  0F43                     _setTxData:	
 14994                           
 14995                           ;RF_Control_B1.c: 205: char i;
 14996                           ;RF_Control_B1.c: 206: if (RF1.Enable == 1) {
 14997                           
 14998                           ;incstack = 0
 14999                           ; Regs used in _setTxData: [wregfsr1]
 15000  0F43  0021               	movlb	1	; select bank1
 15001  0F44  1C3C               	btfss	_RF1^(0+128),0
 15002  0F45  0008               	return
 15003                           
 15004                           ;RF_Control_B1.c: 208: RF1.TransceiveGO = 1;
 15005  0F46  153C               	bsf	_RF1^(0+128),2
 15006                           
 15007                           ;RF_Control_B1.c: 209: RF1.RunTime = 20;
 15008  0F47  3014               	movlw	20
 15009  0F48  00C3               	movwf	(_RF1^(0+128)+7)
 15010  0F49  3000               	movlw	0
 15011  0F4A  00C4               	movwf	(_RF1^(0+128)+8)
 15012                           
 15013                           ;RF_Control_B1.c: 218: RF_Data[0] = 0x63;
 15014  0F4B  3063               	movlw	99
 15015  0F4C  0020               	movlb	0	; select bank0
 15016  0F4D  00A0               	movwf	??_setTxData
 15017  0F4E  0820               	movf	??_setTxData,w
 15018  0F4F  0023               	movlb	3	; select bank3
 15019  0F50  00A0               	movwf	_RF_Data^(0+384)
 15020                           
 15021                           ;RF_Control_B1.c: 219: RF_Data[1] = 0x02;
 15022  0F51  3002               	movlw	2
 15023  0F52  0020               	movlb	0	; select bank0
 15024  0F53  00A0               	movwf	??_setTxData
 15025  0F54  0820               	movf	??_setTxData,w
 15026  0F55  0023               	movlb	3	; select bank3
 15027  0F56  00A1               	movwf	(_RF_Data^(0+384)+1)
 15028                           
 15029                           ;RF_Control_B1.c: 220: RF_Data[2] = product->Data[2];
 15030  0F57  0020               	movlb	0	; select bank0
 15031  0F58  086F               	movf	_product,w
 15032  0F59  0086               	movwf	6
 15033  0F5A  3002               	movlw	2	; select bank4/5
 15034  0F5B  0087               	movwf	7
 15035  0F5C  3002               	movlw	2	; select bank4/5
 15036  0F5D  3F42               	moviw [2]fsr1
 15037  0F5E  0023               	movlb	3	; select bank3
 15038  0F5F  00A2               	movwf	(_RF_Data^(0+384)+2)
 15039                           
 15040                           ;RF_Control_B1.c: 221: RF_Data[3] = product->Data[3];
 15041  0F60  0020               	movlb	0	; select bank0
 15042  0F61  086F               	movf	_product,w
 15043  0F62  0086               	movwf	6
 15044  0F63  3002               	movlw	2	; select bank4/5
 15045  0F64  0087               	movwf	7
 15046  0F65  3002               	movlw	2	; select bank4/5
 15047  0F66  3F43               	moviw [3]fsr1
 15048  0F67  0023               	movlb	3	; select bank3
 15049  0F68  00A3               	movwf	(_RF_Data^(0+384)+3)
 15050                           
 15051                           ;RF_Control_B1.c: 222: RF_Data[4] = product->Data[4];
 15052  0F69  0020               	movlb	0	; select bank0
 15053  0F6A  086F               	movf	_product,w
 15054  0F6B  0086               	movwf	6
 15055  0F6C  3002               	movlw	2	; select bank4/5
 15056  0F6D  0087               	movwf	7
 15057  0F6E  3002               	movlw	2	; select bank4/5
 15058  0F6F  3F44               	moviw [4]fsr1
 15059  0F70  0023               	movlb	3	; select bank3
 15060  0F71  00A4               	movwf	(_RF_Data^(0+384)+4)
 15061                           
 15062                           ;RF_Control_B1.c: 223: RF_Data[5] = product->Data[5];
 15063  0F72  0020               	movlb	0	; select bank0
 15064  0F73  086F               	movf	_product,w
 15065  0F74  0086               	movwf	6
 15066  0F75  3002               	movlw	2	; select bank4/5
 15067  0F76  0087               	movwf	7
 15068  0F77  3002               	movlw	2	; select bank4/5
 15069  0F78  3F45               	moviw [5]fsr1
 15070  0F79  0023               	movlb	3	; select bank3
 15071  0F7A  00A5               	movwf	(_RF_Data^(0+384)+5)
 15072                           
 15073                           ;RF_Control_B1.c: 224: RF_Data[6] = product->Data[6];
 15074  0F7B  0020               	movlb	0	; select bank0
 15075  0F7C  086F               	movf	_product,w
 15076  0F7D  0086               	movwf	6
 15077  0F7E  3002               	movlw	2	; select bank4/5
 15078  0F7F  0087               	movwf	7
 15079  0F80  3002               	movlw	2	; select bank4/5
 15080  0F81  3F46               	moviw [6]fsr1
 15081  0F82  0023               	movlb	3	; select bank3
 15082  0F83  00A6               	movwf	(_RF_Data^(0+384)+6)
 15083                           
 15084                           ;RF_Control_B1.c: 225: RF_Data[7] = product->Data[7];
 15085  0F84  0020               	movlb	0	; select bank0
 15086  0F85  086F               	movf	_product,w
 15087  0F86  0086               	movwf	6
 15088  0F87  3002               	movlw	2	; select bank4/5
 15089  0F88  0087               	movwf	7
 15090  0F89  3002               	movlw	2	; select bank4/5
 15091  0F8A  3F47               	moviw [7]fsr1
 15092  0F8B  0023               	movlb	3	; select bank3
 15093  0F8C  00A7               	movwf	(_RF_Data^(0+384)+7)
 15094                           
 15095                           ;RF_Control_B1.c: 226: RF_Data[8] = product->Data[8];
 15096  0F8D  0020               	movlb	0	; select bank0
 15097  0F8E  086F               	movf	_product,w
 15098  0F8F  0086               	movwf	6
 15099  0F90  3002               	movlw	2	; select bank4/5
 15100  0F91  0087               	movwf	7
 15101  0F92  3002               	movlw	2	; select bank4/5
 15102  0F93  3F48               	moviw [8]fsr1
 15103  0F94  0023               	movlb	3	; select bank3
 15104  0F95  00A8               	movwf	(_RF_Data^(0+384)+8)
 15105                           
 15106                           ;RF_Control_B1.c: 227: RF_Data[9] = product->Data[9];
 15107  0F96  0020               	movlb	0	; select bank0
 15108  0F97  086F               	movf	_product,w
 15109  0F98  0086               	movwf	6
 15110  0F99  3002               	movlw	2	; select bank4/5
 15111  0F9A  0087               	movwf	7
 15112  0F9B  3002               	movlw	2	; select bank4/5
 15113  0F9C  3F49               	moviw [9]fsr1
 15114  0F9D  0023               	movlb	3	; select bank3
 15115  0F9E  00A9               	movwf	(_RF_Data^(0+384)+9)
 15116                           
 15117                           ;RF_Control_B1.c: 228: RF_Data[10] = product->Data[10];
 15118  0F9F  0020               	movlb	0	; select bank0
 15119  0FA0  086F               	movf	_product,w
 15120  0FA1  0086               	movwf	6
 15121  0FA2  3002               	movlw	2	; select bank4/5
 15122  0FA3  0087               	movwf	7
 15123  0FA4  3002               	movlw	2	; select bank4/5
 15124  0FA5  3F4A               	moviw [10]fsr1
 15125  0FA6  0023               	movlb	3	; select bank3
 15126  0FA7  00AA               	movwf	(_RF_Data^(0+384)+10)
 15127                           
 15128                           ;RF_Control_B1.c: 229: RF_Data[11] = product->Data[11];
 15129  0FA8  0020               	movlb	0	; select bank0
 15130  0FA9  086F               	movf	_product,w
 15131  0FAA  0086               	movwf	6
 15132  0FAB  3002               	movlw	2	; select bank4/5
 15133  0FAC  0087               	movwf	7
 15134  0FAD  3002               	movlw	2	; select bank4/5
 15135  0FAE  3F4B               	moviw [11]fsr1
 15136  0FAF  0023               	movlb	3	; select bank3
 15137  0FB0  00AB               	movwf	(_RF_Data^(0+384)+11)
 15138                           
 15139                           ;RF_Control_B1.c: 230: RF_Data[12] = product->Data[12];
 15140  0FB1  0020               	movlb	0	; select bank0
 15141  0FB2  086F               	movf	_product,w
 15142  0FB3  0086               	movwf	6
 15143  0FB4  3002               	movlw	2	; select bank4/5
 15144  0FB5  0087               	movwf	7
 15145  0FB6  3002               	movlw	2	; select bank4/5
 15146  0FB7  3F4C               	moviw [12]fsr1
 15147  0FB8  0023               	movlb	3	; select bank3
 15148  0FB9  00AC               	movwf	(_RF_Data^(0+384)+12)
 15149                           
 15150                           ;RF_Control_B1.c: 231: RF_Data[13] = product->Data[13];
 15151  0FBA  0020               	movlb	0	; select bank0
 15152  0FBB  086F               	movf	_product,w
 15153  0FBC  0086               	movwf	6
 15154  0FBD  3002               	movlw	2	; select bank4/5
 15155  0FBE  0087               	movwf	7
 15156  0FBF  3002               	movlw	2	; select bank4/5
 15157  0FC0  3F4D               	moviw [13]fsr1
 15158  0FC1  0023               	movlb	3	; select bank3
 15159  0FC2  00AD               	movwf	(_RF_Data^(0+384)+13)
 15160                           
 15161                           ;RF_Control_B1.c: 232: RF_Data[14] = product->Data[14];
 15162  0FC3  0020               	movlb	0	; select bank0
 15163  0FC4  086F               	movf	_product,w
 15164  0FC5  0086               	movwf	6
 15165  0FC6  3002               	movlw	2	; select bank4/5
 15166  0FC7  0087               	movwf	7
 15167  0FC8  3002               	movlw	2	; select bank4/5
 15168  0FC9  3F4E               	moviw [14]fsr1
 15169  0FCA  0023               	movlb	3	; select bank3
 15170  0FCB  00AE               	movwf	(_RF_Data^(0+384)+14)
 15171                           
 15172                           ;RF_Control_B1.c: 233: RF_Data[15] = product->Data[15];
 15173  0FCC  0020               	movlb	0	; select bank0
 15174  0FCD  086F               	movf	_product,w
 15175  0FCE  0086               	movwf	6
 15176  0FCF  3002               	movlw	2	; select bank4/5
 15177  0FD0  0087               	movwf	7
 15178  0FD1  3002               	movlw	2	; select bank4/5
 15179  0FD2  3F4F               	moviw [15]fsr1
 15180  0FD3  0023               	movlb	3	; select bank3
 15181  0FD4  00AF               	movwf	(_RF_Data^(0+384)+15)
 15182                           
 15183                           ;RF_Control_B1.c: 234: RF_Data[16] = product->Data[16];
 15184  0FD5  0020               	movlb	0	; select bank0
 15185  0FD6  086F               	movf	_product,w
 15186  0FD7  0086               	movwf	6
 15187  0FD8  3002               	movlw	2	; select bank4/5
 15188  0FD9  0087               	movwf	7
 15189  0FDA  3002               	movlw	2	; select bank4/5
 15190  0FDB  3F50               	moviw [16]fsr1
 15191  0FDC  0023               	movlb	3	; select bank3
 15192  0FDD  00B0               	movwf	(_RF_Data^(0+384)+16)
 15193                           
 15194                           ;RF_Control_B1.c: 235: RF_Data[17] = product->Data[17];
 15195  0FDE  0020               	movlb	0	; select bank0
 15196  0FDF  086F               	movf	_product,w
 15197  0FE0  0086               	movwf	6
 15198  0FE1  3002               	movlw	2	; select bank4/5
 15199  0FE2  0087               	movwf	7
 15200  0FE3  3002               	movlw	2	; select bank4/5
 15201  0FE4  3F51               	moviw [17]fsr1
 15202  0FE5  0023               	movlb	3	; select bank3
 15203  0FE6  00B1               	movwf	(_RF_Data^(0+384)+17)
 15204                           
 15205                           ;RF_Control_B1.c: 236: RF_Data[18] = product->Data[18];
 15206  0FE7  0020               	movlb	0	; select bank0
 15207  0FE8  086F               	movf	_product,w
 15208  0FE9  0086               	movwf	6
 15209  0FEA  3002               	movlw	2	; select bank4/5
 15210  0FEB  0087               	movwf	7
 15211  0FEC  3002               	movlw	2	; select bank4/5
 15212  0FED  3F52               	moviw [18]fsr1
 15213  0FEE  0023               	movlb	3	; select bank3
 15214  0FEF  00B2               	movwf	(_RF_Data^(0+384)+18)
 15215                           
 15216                           ;RF_Control_B1.c: 237: RF_Data[19] = product->Data[19];
 15217  0FF0  0020               	movlb	0	; select bank0
 15218  0FF1  086F               	movf	_product,w
 15219  0FF2  0086               	movwf	6
 15220  0FF3  3002               	movlw	2	; select bank4/5
 15221  0FF4  0087               	movwf	7
 15222  0FF5  3002               	movlw	2	; select bank4/5
 15223  0FF6  3F53               	moviw [19]fsr1
 15224  0FF7  0023               	movlb	3	; select bank3
 15225  0FF8  00B3               	movwf	(_RF_Data^(0+384)+19)
 15226                           
 15227                           ;RF_Control_B1.c: 238: RF_Data[20] = 210;
 15228  0FF9  30D2               	movlw	210
 15229  0FFA  0020               	movlb	0	; select bank0
 15230  0FFB  00A0               	movwf	??_setTxData
 15231  0FFC  0820               	movf	??_setTxData,w
 15232  0FFD  0023               	movlb	3	; select bank3
 15233  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15234  0FFF  0008               	return
 15235  1000                     __end_of_setTxData:	
 15236                           
 15237                           	psect	text92
 15238  09ED                     __ptext92:	
 15239 ;; *************** function _setRF_DimmerLights *****************
 15240 ;; Defined at:
 15241 ;;		line 532 in file "../src/RF_Control_B1.c"
 15242 ;; Parameters:    Size  Location     Type
 15243 ;;  lights          1    wreg     unsigned char 
 15244 ;;  on              1   61[BANK0 ] unsigned char 
 15245 ;; Auto vars:     Size  Location     Type
 15246 ;;  lights          1   65[BANK0 ] unsigned char 
 15247 ;;  status          1   64[BANK0 ] unsigned char 
 15248 ;; Return value:  Size  Location     Type
 15249 ;;		None               void
 15250 ;; Registers used:
 15251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15252 ;; Tracked objects:
 15253 ;;		On entry : 0/0
 15254 ;;		On exit  : 0/0
 15255 ;;		Unchanged: 0/0
 15256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15257 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15258 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15259 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15260 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15261 ;;Total ram usage:        5 bytes
 15262 ;; Hardware stack levels used:    1
 15263 ;; Hardware stack levels required when called:    8
 15264 ;; This function calls:
 15265 ;;		_setPercentValue
 15266 ;; This function is called by:
 15267 ;;		_DlyOff_Main
 15268 ;;		_setDimmerLights_SwOn
 15269 ;;		_setDimmerLights_SwOff
 15270 ;;		_setDimmerLights_Adj
 15271 ;;		_setRFSW_Control
 15272 ;; This function uses a non-reentrant model
 15273 ;;
 15274                           
 15275                           
 15276                           ;psect for function _setRF_DimmerLights
 15277  09ED                     _setRF_DimmerLights:	
 15278                           
 15279                           ;incstack = 0
 15280                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15281                           ;setRF_DimmerLights@lights stored from wreg
 15282  09ED  0020               	movlb	0	; select bank0
 15283  09EE  00E1               	movwf	setRF_DimmerLights@lights
 15284                           
 15285                           ;RF_Control_B1.c: 533: char status = 1;
 15286  09EF  01E0               	clrf	setRF_DimmerLights@status
 15287  09F0  0AE0               	incf	setRF_DimmerLights@status,f
 15288                           
 15289                           ;RF_Control_B1.c: 534: status <<= (lights - 1);
 15290  09F1  0861               	movf	setRF_DimmerLights@lights,w
 15291  09F2  3EFF               	addlw	-1
 15292  09F3  0A89               	incf	9,f
 15293  09F4  29F7               	goto	u5070
 15294  09F5                     u5075:	
 15295  09F5  1003               	clrc
 15296  09F6  0DE0               	rlf	setRF_DimmerLights@status,f
 15297  09F7                     u5070:	
 15298  09F7  3EFF               	addlw	-1
 15299  09F8  1D03               	skipz
 15300  09F9  29F5               	goto	u5075
 15301                           
 15302                           ;RF_Control_B1.c: 535: product->Data[11]=lights;
 15303  09FA  0861               	movf	setRF_DimmerLights@lights,w
 15304  09FB  00DE               	movwf	??_setRF_DimmerLights
 15305  09FC  086F               	movf	_product,w
 15306  09FD  3E0B               	addlw	11
 15307  09FE  0086               	movwf	6
 15308  09FF  3002               	movlw	2	; select bank4/5
 15309  0A00  0087               	movwf	7
 15310  0A01  085E               	movf	??_setRF_DimmerLights,w
 15311  0A02  0081               	movwf	1
 15312                           
 15313                           ;RF_Control_B1.c: 538: product->Data[(20 + lights)]=setPercentValue(((char)(80*0.8)));
 15314  0A03  3040               	movlw	64
 15315  0A04  3193  2384  3189   	fcall	_setPercentValue
 15316  0A07  0020               	movlb	0	; select bank0
 15317  0A08  00DE               	movwf	??_setRF_DimmerLights
 15318  0A09  0861               	movf	setRF_DimmerLights@lights,w
 15319  0A0A  3E14               	addlw	20
 15320  0A0B  076F               	addwf	_product,w
 15321  0A0C  00DF               	movwf	??_setRF_DimmerLights+1
 15322  0A0D  085F               	movf	??_setRF_DimmerLights+1,w
 15323  0A0E  0086               	movwf	6
 15324  0A0F  3002               	movlw	2	; select bank4/5
 15325  0A10  0087               	movwf	7
 15326  0A11  085E               	movf	??_setRF_DimmerLights,w
 15327  0A12  0081               	movwf	1
 15328                           
 15329                           ;RF_Control_B1.c: 541: product->Data[9]=product->Data[20 + lights];
 15330  0A13  0861               	movf	setRF_DimmerLights@lights,w
 15331  0A14  3E14               	addlw	20
 15332  0A15  076F               	addwf	_product,w
 15333  0A16  00DE               	movwf	??_setRF_DimmerLights
 15334  0A17  085E               	movf	??_setRF_DimmerLights,w
 15335  0A18  0086               	movwf	6
 15336  0A19  3002               	movlw	2	; select bank4/5
 15337  0A1A  0087               	movwf	7
 15338  0A1B  0801               	movf	1,w
 15339  0A1C  00DF               	movwf	??_setRF_DimmerLights+1
 15340  0A1D  086F               	movf	_product,w
 15341  0A1E  3E09               	addlw	9
 15342  0A1F  0086               	movwf	6
 15343  0A20  3002               	movlw	2	; select bank4/5
 15344  0A21  0087               	movwf	7
 15345  0A22  085F               	movf	??_setRF_DimmerLights+1,w
 15346  0A23  0081               	movwf	1
 15347                           
 15348                           ;RF_Control_B1.c: 542: product->Data[17]=product->Data[26 + lights];
 15349  0A24  0861               	movf	setRF_DimmerLights@lights,w
 15350  0A25  3E1A               	addlw	26
 15351  0A26  076F               	addwf	_product,w
 15352  0A27  00DE               	movwf	??_setRF_DimmerLights
 15353  0A28  085E               	movf	??_setRF_DimmerLights,w
 15354  0A29  0086               	movwf	6
 15355  0A2A  3002               	movlw	2	; select bank4/5
 15356  0A2B  0087               	movwf	7
 15357  0A2C  0801               	movf	1,w
 15358  0A2D  00DF               	movwf	??_setRF_DimmerLights+1
 15359  0A2E  086F               	movf	_product,w
 15360  0A2F  3E11               	addlw	17
 15361  0A30  0086               	movwf	6
 15362  0A31  3002               	movlw	2	; select bank4/5
 15363  0A32  0087               	movwf	7
 15364  0A33  085F               	movf	??_setRF_DimmerLights+1,w
 15365  0A34  0081               	movwf	1
 15366                           
 15367                           ;RF_Control_B1.c: 543: if (on == 1) {
 15368  0A35  085D               	movf	setRF_DimmerLights@on,w
 15369  0A36  3A01               	xorlw	1
 15370  0A37  1D03               	skipz
 15371  0A38  2A49               	goto	l6134
 15372                           
 15373                           ;RF_Control_B1.c: 544: product->Data[15]=(product->Data[15] | status);
 15374  0A39  086F               	movf	_product,w
 15375  0A3A  3E0F               	addlw	15
 15376  0A3B  0086               	movwf	6
 15377  0A3C  3002               	movlw	2	; select bank4/5
 15378  0A3D  0087               	movwf	7
 15379  0A3E  0801               	movf	1,w
 15380  0A3F  0460               	iorwf	setRF_DimmerLights@status,w
 15381  0A40  00DE               	movwf	??_setRF_DimmerLights
 15382  0A41  086F               	movf	_product,w
 15383  0A42  3E0F               	addlw	15
 15384  0A43  0086               	movwf	6
 15385  0A44  3002               	movlw	2	; select bank4/5
 15386  0A45  0087               	movwf	7
 15387  0A46  085E               	movf	??_setRF_DimmerLights,w
 15388  0A47  0081               	movwf	1
 15389                           
 15390                           ;RF_Control_B1.c: 545: } else {
 15391  0A48  0008               	return
 15392  0A49                     l6134:	
 15393                           
 15394                           ;RF_Control_B1.c: 546: product->Data[15]=(product->Data[15]&(~status));
 15395  0A49  086F               	movf	_product,w
 15396  0A4A  3E0F               	addlw	15
 15397  0A4B  0086               	movwf	6
 15398  0A4C  3002               	movlw	2	; select bank4/5
 15399  0A4D  0087               	movwf	7
 15400  0A4E  0960               	comf	setRF_DimmerLights@status,w
 15401  0A4F  0501               	andwf	1,w
 15402  0A50  00DE               	movwf	??_setRF_DimmerLights
 15403  0A51  086F               	movf	_product,w
 15404  0A52  3E0F               	addlw	15
 15405  0A53  0086               	movwf	6
 15406  0A54  3002               	movlw	2	; select bank4/5
 15407  0A55  0087               	movwf	7
 15408  0A56  085E               	movf	??_setRF_DimmerLights,w
 15409  0A57  0081               	movwf	1
 15410  0A58  0008               	return
 15411  0A59                     __end_of_setRF_DimmerLights:	
 15412                           
 15413                           	psect	text93
 15414  1384                     __ptext93:	
 15415 ;; *************** function _setPercentValue *****************
 15416 ;; Defined at:
 15417 ;;		line 908 in file "../src/Dimmer_B1.c"
 15418 ;; Parameters:    Size  Location     Type
 15419 ;;  value           1    wreg     unsigned char 
 15420 ;; Auto vars:     Size  Location     Type
 15421 ;;  value           1   57[BANK0 ] unsigned char 
 15422 ;;  i               3   58[BANK0 ] float 
 15423 ;; Return value:  Size  Location     Type
 15424 ;;                  1    wreg      unsigned char 
 15425 ;; Registers used:
 15426 ;;		wreg, status,2, status,0, pclath, cstack
 15427 ;; Tracked objects:
 15428 ;;		On entry : 0/0
 15429 ;;		On exit  : 0/0
 15430 ;;		Unchanged: 0/0
 15431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15433 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15435 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15436 ;;Total ram usage:        4 bytes
 15437 ;; Hardware stack levels used:    1
 15438 ;; Hardware stack levels required when called:    7
 15439 ;; This function calls:
 15440 ;;		___awtoft
 15441 ;;		___ftdiv
 15442 ;;		___fttol
 15443 ;; This function is called by:
 15444 ;;		_Flash_Memory_Initialization
 15445 ;;		_setRF_DimmerLights
 15446 ;; This function uses a non-reentrant model
 15447 ;;
 15448                           
 15449                           
 15450                           ;psect for function _setPercentValue
 15451  1384                     _setPercentValue:	
 15452                           
 15453                           ;incstack = 0
 15454                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 15455                           ;setPercentValue@value stored from wreg
 15456  1384  0020               	movlb	0	; select bank0
 15457  1385  00D9               	movwf	setPercentValue@value
 15458                           
 15459                           ;Dimmer_B1.c: 916: float i = ((char)(80*0.8)) - ((char)(10*0.8));
 15460  1386  3000               	movlw	0
 15461  1387  00DA               	movwf	setPercentValue@i
 15462  1388  3060               	movlw	96
 15463  1389  00DB               	movwf	setPercentValue@i+1
 15464  138A  3042               	movlw	66
 15465  138B  00DC               	movwf	setPercentValue@i+2
 15466                           
 15467                           ;Dimmer_B1.c: 917: i /= 100;
 15468  138C  3000               	movlw	0
 15469  138D  00AE               	movwf	___ftdiv@f2
 15470  138E  30C8               	movlw	200
 15471  138F  00AF               	movwf	___ftdiv@f2+1
 15472  1390  3042               	movlw	66
 15473  1391  00B0               	movwf	___ftdiv@f2+2
 15474  1392  085A               	movf	setPercentValue@i,w
 15475  1393  00B1               	movwf	___ftdiv@f1
 15476  1394  085B               	movf	setPercentValue@i+1,w
 15477  1395  00B2               	movwf	___ftdiv@f1+1
 15478  1396  085C               	movf	setPercentValue@i+2,w
 15479  1397  00B3               	movwf	___ftdiv@f1+2
 15480  1398  318D  25E6  3193   	fcall	___ftdiv
 15481  139B  0020               	movlb	0	; select bank0
 15482  139C  082E               	movf	?___ftdiv,w
 15483  139D  00DA               	movwf	setPercentValue@i
 15484  139E  082F               	movf	?___ftdiv+1,w
 15485  139F  00DB               	movwf	setPercentValue@i+1
 15486  13A0  0830               	movf	?___ftdiv+2,w
 15487  13A1  00DC               	movwf	setPercentValue@i+2
 15488                           
 15489                           ;Dimmer_B1.c: 919: return (100 - (char) ((value - ((char)(80*0.8))) / i));
 15490  13A2  0859               	movf	setPercentValue@value,w
 15491  13A3  3EC0               	addlw	192
 15492  13A4  00A8               	movwf	___awtoft@c
 15493  13A5  30FF               	movlw	255
 15494  13A6  1803               	skipnc
 15495  13A7  3000               	movlw	0
 15496  13A8  00A9               	movwf	___awtoft@c+1
 15497  13A9  319E  26D9  3193   	fcall	___awtoft
 15498  13AC  0020               	movlb	0	; select bank0
 15499  13AD  0828               	movf	?___awtoft,w
 15500  13AE  00B1               	movwf	___ftdiv@f1
 15501  13AF  0829               	movf	?___awtoft+1,w
 15502  13B0  00B2               	movwf	___ftdiv@f1+1
 15503  13B1  082A               	movf	?___awtoft+2,w
 15504  13B2  00B3               	movwf	___ftdiv@f1+2
 15505  13B3  085A               	movf	setPercentValue@i,w
 15506  13B4  00AE               	movwf	___ftdiv@f2
 15507  13B5  085B               	movf	setPercentValue@i+1,w
 15508  13B6  00AF               	movwf	___ftdiv@f2+1
 15509  13B7  085C               	movf	setPercentValue@i+2,w
 15510  13B8  00B0               	movwf	___ftdiv@f2+2
 15511  13B9  318D  25E6  3193   	fcall	___ftdiv
 15512  13BC  0020               	movlb	0	; select bank0
 15513  13BD  082E               	movf	?___ftdiv,w
 15514  13BE  00CB               	movwf	___fttol@f1
 15515  13BF  082F               	movf	?___ftdiv+1,w
 15516  13C0  00CC               	movwf	___fttol@f1+1
 15517  13C1  0830               	movf	?___ftdiv+2,w
 15518  13C2  00CD               	movwf	___fttol@f1+2
 15519  13C3  318C  2433         	fcall	___fttol
 15520  13C5  0020               	movlb	0	; select bank0
 15521  13C6  034B               	decf	?___fttol,w
 15522  13C7  3AFF               	xorlw	255
 15523  13C8  3E64               	addlw	100
 15524  13C9  0008               	return
 15525  13CA                     __end_of_setPercentValue:	
 15526                           
 15527                           	psect	text94
 15528  0C33                     __ptext94:	
 15529 ;; *************** function ___fttol *****************
 15530 ;; Defined at:
 15531 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 15532 ;; Parameters:    Size  Location     Type
 15533 ;;  f1              3   43[BANK0 ] float 
 15534 ;; Auto vars:     Size  Location     Type
 15535 ;;  lval            4   52[BANK0 ] unsigned long 
 15536 ;;  exp1            1   56[BANK0 ] unsigned char 
 15537 ;;  sign1           1   51[BANK0 ] unsigned char 
 15538 ;; Return value:  Size  Location     Type
 15539 ;;                  4   43[BANK0 ] long 
 15540 ;; Registers used:
 15541 ;;		wreg, status,2, status,0
 15542 ;; Tracked objects:
 15543 ;;		On entry : 0/0
 15544 ;;		On exit  : 0/0
 15545 ;;		Unchanged: 0/0
 15546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15547 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15548 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15549 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15550 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15551 ;;Total ram usage:       14 bytes
 15552 ;; Hardware stack levels used:    1
 15553 ;; Hardware stack levels required when called:    5
 15554 ;; This function calls:
 15555 ;;		Nothing
 15556 ;; This function is called by:
 15557 ;;		_getPercentValue
 15558 ;;		_setPercentValue
 15559 ;; This function uses a non-reentrant model
 15560 ;;
 15561                           
 15562                           
 15563                           ;psect for function ___fttol
 15564  0C33                     ___fttol:	
 15565                           
 15566                           ;incstack = 0
 15567                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15568  0C33  0020               	movlb	0	; select bank0
 15569  0C34  084B               	movf	___fttol@f1,w
 15570  0C35  00CF               	movwf	??___fttol
 15571  0C36  084C               	movf	___fttol@f1+1,w
 15572  0C37  00D0               	movwf	??___fttol+1
 15573  0C38  084D               	movf	___fttol@f1+2,w
 15574  0C39  00D1               	movwf	??___fttol+2
 15575  0C3A  1003               	clrc
 15576  0C3B  0D50               	rlf	??___fttol+1,w
 15577  0C3C  0D51               	rlf	??___fttol+2,w
 15578  0C3D  00D2               	movwf	??___fttol+3
 15579  0C3E  0852               	movf	??___fttol+3,w
 15580  0C3F  00D8               	movwf	___fttol@exp1
 15581  0C40  08D8               	movf	___fttol@exp1,f
 15582  0C41  1D03               	skipz
 15583  0C42  2C4C               	goto	l5962
 15584  0C43  3000               	movlw	0
 15585  0C44  00CE               	movwf	?___fttol+3
 15586  0C45  3000               	movlw	0
 15587  0C46  00CD               	movwf	?___fttol+2
 15588  0C47  3000               	movlw	0
 15589  0C48  00CC               	movwf	?___fttol+1
 15590  0C49  3000               	movlw	0
 15591  0C4A  00CB               	movwf	?___fttol
 15592  0C4B  0008               	return
 15593  0C4C                     l5962:	
 15594  0C4C  084B               	movf	___fttol@f1,w
 15595  0C4D  00CF               	movwf	??___fttol
 15596  0C4E  084C               	movf	___fttol@f1+1,w
 15597  0C4F  00D0               	movwf	??___fttol+1
 15598  0C50  084D               	movf	___fttol@f1+2,w
 15599  0C51  00D1               	movwf	??___fttol+2
 15600  0C52  3017               	movlw	23
 15601  0C53                     u4785:	
 15602  0C53  36D1               	lsrf	??___fttol+2,f
 15603  0C54  0CD0               	rrf	??___fttol+1,f
 15604  0C55  0CCF               	rrf	??___fttol,f
 15605  0C56  0B89               	decfsz	9,f
 15606  0C57  2C53               	goto	u4785
 15607  0C58  084F               	movf	??___fttol,w
 15608  0C59  00D2               	movwf	??___fttol+3
 15609  0C5A  0852               	movf	??___fttol+3,w
 15610  0C5B  00D3               	movwf	___fttol@sign1
 15611  0C5C  17CC               	bsf	___fttol@f1+1,7
 15612  0C5D  30FF               	movlw	255
 15613  0C5E  05CB               	andwf	___fttol@f1,f
 15614  0C5F  30FF               	movlw	255
 15615  0C60  05CC               	andwf	___fttol@f1+1,f
 15616  0C61  3000               	movlw	0
 15617  0C62  05CD               	andwf	___fttol@f1+2,f
 15618  0C63  084B               	movf	___fttol@f1,w
 15619  0C64  00D4               	movwf	___fttol@lval
 15620  0C65  084C               	movf	___fttol@f1+1,w
 15621  0C66  00D5               	movwf	___fttol@lval+1
 15622  0C67  084D               	movf	___fttol@f1+2,w
 15623  0C68  00D6               	movwf	___fttol@lval+2
 15624  0C69  01D7               	clrf	___fttol@lval+3
 15625  0C6A  308E               	movlw	142
 15626  0C6B  02D8               	subwf	___fttol@exp1,f
 15627  0C6C  1FD8               	btfss	___fttol@exp1,7
 15628  0C6D  2C8A               	goto	l5982
 15629  0C6E  0858               	movf	___fttol@exp1,w
 15630  0C6F  3A80               	xorlw	128
 15631  0C70  3E8F               	addlw	143
 15632  0C71  1803               	skipnc
 15633  0C72  2C7C               	goto	l5980
 15634  0C73  3000               	movlw	0
 15635  0C74  00CE               	movwf	?___fttol+3
 15636  0C75  3000               	movlw	0
 15637  0C76  00CD               	movwf	?___fttol+2
 15638  0C77  3000               	movlw	0
 15639  0C78  00CC               	movwf	?___fttol+1
 15640  0C79  3000               	movlw	0
 15641  0C7A  00CB               	movwf	?___fttol
 15642  0C7B  0008               	return
 15643  0C7C                     l5980:	
 15644  0C7C  3001               	movlw	1
 15645  0C7D                     u4815:	
 15646  0C7D  36D7               	lsrf	___fttol@lval+3,f
 15647  0C7E  0CD6               	rrf	___fttol@lval+2,f
 15648  0C7F  0CD5               	rrf	___fttol@lval+1,f
 15649  0C80  0CD4               	rrf	___fttol@lval,f
 15650  0C81  0B89               	decfsz	9,f
 15651  0C82  2C7D               	goto	u4815
 15652  0C83  3001               	movlw	1
 15653  0C84  00CF               	movwf	??___fttol
 15654  0C85  084F               	movf	??___fttol,w
 15655  0C86  07D8               	addwf	___fttol@exp1,f
 15656  0C87  1903               	btfsc	3,2
 15657  0C88  2CA3               	goto	l5992
 15658  0C89  2C7C               	goto	l5980
 15659  0C8A                     l5982:	
 15660  0C8A  3018               	movlw	24
 15661  0C8B  0258               	subwf	___fttol@exp1,w
 15662  0C8C  1C03               	skipc
 15663  0C8D  2CA0               	goto	l5990
 15664  0C8E  3000               	movlw	0
 15665  0C8F  00CE               	movwf	?___fttol+3
 15666  0C90  3000               	movlw	0
 15667  0C91  00CD               	movwf	?___fttol+2
 15668  0C92  3000               	movlw	0
 15669  0C93  00CC               	movwf	?___fttol+1
 15670  0C94  3000               	movlw	0
 15671  0C95  00CB               	movwf	?___fttol
 15672  0C96  0008               	return
 15673  0C97                     l5988:	
 15674  0C97  3001               	movlw	1
 15675  0C98                     u4845:	
 15676  0C98  35D4               	lslf	___fttol@lval,f
 15677  0C99  0DD5               	rlf	___fttol@lval+1,f
 15678  0C9A  0DD6               	rlf	___fttol@lval+2,f
 15679  0C9B  0DD7               	rlf	___fttol@lval+3,f
 15680  0C9C  0B89               	decfsz	9,f
 15681  0C9D  2C98               	goto	u4845
 15682  0C9E  3001               	movlw	1
 15683  0C9F  02D8               	subwf	___fttol@exp1,f
 15684  0CA0                     l5990:	
 15685  0CA0  08D8               	movf	___fttol@exp1,f
 15686  0CA1  1D03               	skipz
 15687  0CA2  2C97               	goto	l5988
 15688  0CA3                     l5992:	
 15689  0CA3  0853               	movf	___fttol@sign1,w
 15690  0CA4  1903               	btfsc	3,2
 15691  0CA5  2CB1               	goto	l5996
 15692  0CA6  09D4               	comf	___fttol@lval,f
 15693  0CA7  09D5               	comf	___fttol@lval+1,f
 15694  0CA8  09D6               	comf	___fttol@lval+2,f
 15695  0CA9  09D7               	comf	___fttol@lval+3,f
 15696  0CAA  0AD4               	incf	___fttol@lval,f
 15697  0CAB  1903               	skipnz
 15698  0CAC  0AD5               	incf	___fttol@lval+1,f
 15699  0CAD  1903               	skipnz
 15700  0CAE  0AD6               	incf	___fttol@lval+2,f
 15701  0CAF  1903               	skipnz
 15702  0CB0  0AD7               	incf	___fttol@lval+3,f
 15703  0CB1                     l5996:	
 15704  0CB1  0857               	movf	___fttol@lval+3,w
 15705  0CB2  00CE               	movwf	?___fttol+3
 15706  0CB3  0856               	movf	___fttol@lval+2,w
 15707  0CB4  00CD               	movwf	?___fttol+2
 15708  0CB5  0855               	movf	___fttol@lval+1,w
 15709  0CB6  00CC               	movwf	?___fttol+1
 15710  0CB7  0854               	movf	___fttol@lval,w
 15711  0CB8  00CB               	movwf	?___fttol
 15712  0CB9  0008               	return
 15713  0CBA                     __end_of___fttol:	
 15714                           
 15715                           	psect	text95
 15716  0DE6                     __ptext95:	
 15717 ;; *************** function ___ftdiv *****************
 15718 ;; Defined at:
 15719 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 15720 ;; Parameters:    Size  Location     Type
 15721 ;;  f2              3   14[BANK0 ] float 
 15722 ;;  f1              3   17[BANK0 ] float 
 15723 ;; Auto vars:     Size  Location     Type
 15724 ;;  f3              3   25[BANK0 ] float 
 15725 ;;  sign            1   29[BANK0 ] unsigned char 
 15726 ;;  exp             1   28[BANK0 ] unsigned char 
 15727 ;;  cntr            1   24[BANK0 ] unsigned char 
 15728 ;; Return value:  Size  Location     Type
 15729 ;;                  3   14[BANK0 ] float 
 15730 ;; Registers used:
 15731 ;;		wreg, status,2, status,0, pclath, cstack
 15732 ;; Tracked objects:
 15733 ;;		On entry : 0/0
 15734 ;;		On exit  : 0/0
 15735 ;;		Unchanged: 0/0
 15736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15737 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15738 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15739 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15740 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15741 ;;Total ram usage:       16 bytes
 15742 ;; Hardware stack levels used:    1
 15743 ;; Hardware stack levels required when called:    6
 15744 ;; This function calls:
 15745 ;;		___ftpack
 15746 ;; This function is called by:
 15747 ;;		_getPercentValue
 15748 ;;		_setPercentValue
 15749 ;; This function uses a non-reentrant model
 15750 ;;
 15751                           
 15752                           
 15753                           ;psect for function ___ftdiv
 15754  0DE6                     ___ftdiv:	
 15755                           
 15756                           ;incstack = 0
 15757                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 15758  0DE6  0020               	movlb	0	; select bank0
 15759  0DE7  0831               	movf	___ftdiv@f1,w
 15760  0DE8  00B4               	movwf	??___ftdiv
 15761  0DE9  0832               	movf	___ftdiv@f1+1,w
 15762  0DEA  00B5               	movwf	??___ftdiv+1
 15763  0DEB  0833               	movf	___ftdiv@f1+2,w
 15764  0DEC  00B6               	movwf	??___ftdiv+2
 15765  0DED  1003               	clrc
 15766  0DEE  0D35               	rlf	??___ftdiv+1,w
 15767  0DEF  0D36               	rlf	??___ftdiv+2,w
 15768  0DF0  00B7               	movwf	??___ftdiv+3
 15769  0DF1  0837               	movf	??___ftdiv+3,w
 15770  0DF2  00BC               	movwf	___ftdiv@exp
 15771  0DF3  08BC               	movf	___ftdiv@exp,f
 15772  0DF4  1D03               	skipz
 15773  0DF5  2DFD               	goto	l5870
 15774  0DF6  3000               	movlw	0
 15775  0DF7  00AE               	movwf	?___ftdiv
 15776  0DF8  3000               	movlw	0
 15777  0DF9  00AF               	movwf	?___ftdiv+1
 15778  0DFA  3000               	movlw	0
 15779  0DFB  00B0               	movwf	?___ftdiv+2
 15780  0DFC  0008               	return
 15781  0DFD                     l5870:	
 15782  0DFD  082E               	movf	___ftdiv@f2,w
 15783  0DFE  00B4               	movwf	??___ftdiv
 15784  0DFF  082F               	movf	___ftdiv@f2+1,w
 15785  0E00  00B5               	movwf	??___ftdiv+1
 15786  0E01  0830               	movf	___ftdiv@f2+2,w
 15787  0E02  00B6               	movwf	??___ftdiv+2
 15788  0E03  1003               	clrc
 15789  0E04  0D35               	rlf	??___ftdiv+1,w
 15790  0E05  0D36               	rlf	??___ftdiv+2,w
 15791  0E06  00B7               	movwf	??___ftdiv+3
 15792  0E07  0837               	movf	??___ftdiv+3,w
 15793  0E08  00BD               	movwf	___ftdiv@sign
 15794  0E09  08BD               	movf	___ftdiv@sign,f
 15795  0E0A  1D03               	skipz
 15796  0E0B  2E13               	goto	l5876
 15797  0E0C  3000               	movlw	0
 15798  0E0D  00AE               	movwf	?___ftdiv
 15799  0E0E  3000               	movlw	0
 15800  0E0F  00AF               	movwf	?___ftdiv+1
 15801  0E10  3000               	movlw	0
 15802  0E11  00B0               	movwf	?___ftdiv+2
 15803  0E12  0008               	return
 15804  0E13                     l5876:	
 15805  0E13  3000               	movlw	0
 15806  0E14  00B9               	movwf	___ftdiv@f3
 15807  0E15  3000               	movlw	0
 15808  0E16  00BA               	movwf	___ftdiv@f3+1
 15809  0E17  3000               	movlw	0
 15810  0E18  00BB               	movwf	___ftdiv@f3+2
 15811  0E19  3089               	movlw	137
 15812  0E1A  073D               	addwf	___ftdiv@sign,w
 15813  0E1B  00B4               	movwf	??___ftdiv
 15814  0E1C  0834               	movf	??___ftdiv,w
 15815  0E1D  02BC               	subwf	___ftdiv@exp,f
 15816  0E1E  0831               	movf	___ftdiv@f1,w
 15817  0E1F  00B4               	movwf	??___ftdiv
 15818  0E20  0832               	movf	___ftdiv@f1+1,w
 15819  0E21  00B5               	movwf	??___ftdiv+1
 15820  0E22  0833               	movf	___ftdiv@f1+2,w
 15821  0E23  00B6               	movwf	??___ftdiv+2
 15822  0E24  3010               	movlw	16
 15823  0E25                     u4595:	
 15824  0E25  36B6               	lsrf	??___ftdiv+2,f
 15825  0E26  0CB5               	rrf	??___ftdiv+1,f
 15826  0E27  0CB4               	rrf	??___ftdiv,f
 15827  0E28  0B89               	decfsz	9,f
 15828  0E29  2E25               	goto	u4595
 15829  0E2A  0834               	movf	??___ftdiv,w
 15830  0E2B  00B7               	movwf	??___ftdiv+3
 15831  0E2C  0837               	movf	??___ftdiv+3,w
 15832  0E2D  00BD               	movwf	___ftdiv@sign
 15833  0E2E  082E               	movf	___ftdiv@f2,w
 15834  0E2F  00B4               	movwf	??___ftdiv
 15835  0E30  082F               	movf	___ftdiv@f2+1,w
 15836  0E31  00B5               	movwf	??___ftdiv+1
 15837  0E32  0830               	movf	___ftdiv@f2+2,w
 15838  0E33  00B6               	movwf	??___ftdiv+2
 15839  0E34  3010               	movlw	16
 15840  0E35                     u4605:	
 15841  0E35  36B6               	lsrf	??___ftdiv+2,f
 15842  0E36  0CB5               	rrf	??___ftdiv+1,f
 15843  0E37  0CB4               	rrf	??___ftdiv,f
 15844  0E38  0B89               	decfsz	9,f
 15845  0E39  2E35               	goto	u4605
 15846  0E3A  0834               	movf	??___ftdiv,w
 15847  0E3B  00B7               	movwf	??___ftdiv+3
 15848  0E3C  0837               	movf	??___ftdiv+3,w
 15849  0E3D  06BD               	xorwf	___ftdiv@sign,f
 15850  0E3E  3080               	movlw	128
 15851  0E3F  00B4               	movwf	??___ftdiv
 15852  0E40  0834               	movf	??___ftdiv,w
 15853  0E41  05BD               	andwf	___ftdiv@sign,f
 15854  0E42  17B2               	bsf	___ftdiv@f1+1,7
 15855  0E43  30FF               	movlw	255
 15856  0E44  05B1               	andwf	___ftdiv@f1,f
 15857  0E45  30FF               	movlw	255
 15858  0E46  05B2               	andwf	___ftdiv@f1+1,f
 15859  0E47  3000               	movlw	0
 15860  0E48  05B3               	andwf	___ftdiv@f1+2,f
 15861  0E49  17AF               	bsf	___ftdiv@f2+1,7
 15862  0E4A  30FF               	movlw	255
 15863  0E4B  05AE               	andwf	___ftdiv@f2,f
 15864  0E4C  30FF               	movlw	255
 15865  0E4D  05AF               	andwf	___ftdiv@f2+1,f
 15866  0E4E  3000               	movlw	0
 15867  0E4F  05B0               	andwf	___ftdiv@f2+2,f
 15868  0E50  3018               	movlw	24
 15869  0E51  00B4               	movwf	??___ftdiv
 15870  0E52  0834               	movf	??___ftdiv,w
 15871  0E53  00B8               	movwf	___ftdiv@cntr
 15872  0E54                     l5890:	
 15873  0E54  3001               	movlw	1
 15874  0E55                     u4615:	
 15875  0E55  35B9               	lslf	___ftdiv@f3,f
 15876  0E56  0DBA               	rlf	___ftdiv@f3+1,f
 15877  0E57  0DBB               	rlf	___ftdiv@f3+2,f
 15878  0E58  0B89               	decfsz	9,f
 15879  0E59  2E55               	goto	u4615
 15880  0E5A  0830               	movf	___ftdiv@f2+2,w
 15881  0E5B  0233               	subwf	___ftdiv@f1+2,w
 15882  0E5C  1D03               	skipz
 15883  0E5D  2E64               	goto	u4625
 15884  0E5E  082F               	movf	___ftdiv@f2+1,w
 15885  0E5F  0232               	subwf	___ftdiv@f1+1,w
 15886  0E60  1D03               	skipz
 15887  0E61  2E64               	goto	u4625
 15888  0E62  082E               	movf	___ftdiv@f2,w
 15889  0E63  0231               	subwf	___ftdiv@f1,w
 15890  0E64                     u4625:	
 15891  0E64  1C03               	skipc
 15892  0E65  2E6D               	goto	l5898
 15893  0E66  082E               	movf	___ftdiv@f2,w
 15894  0E67  02B1               	subwf	___ftdiv@f1,f
 15895  0E68  082F               	movf	___ftdiv@f2+1,w
 15896  0E69  3BB2               	subwfb	___ftdiv@f1+1,f
 15897  0E6A  0830               	movf	___ftdiv@f2+2,w
 15898  0E6B  3BB3               	subwfb	___ftdiv@f1+2,f
 15899  0E6C  1439               	bsf	___ftdiv@f3,0
 15900  0E6D                     l5898:	
 15901  0E6D  3001               	movlw	1
 15902  0E6E                     u4635:	
 15903  0E6E  35B1               	lslf	___ftdiv@f1,f
 15904  0E6F  0DB2               	rlf	___ftdiv@f1+1,f
 15905  0E70  0DB3               	rlf	___ftdiv@f1+2,f
 15906  0E71  0B89               	decfsz	9,f
 15907  0E72  2E6E               	goto	u4635
 15908  0E73  3001               	movlw	1
 15909  0E74  02B8               	subwf	___ftdiv@cntr,f
 15910  0E75  1D03               	btfss	3,2
 15911  0E76  2E54               	goto	l5890
 15912  0E77  0839               	movf	___ftdiv@f3,w
 15913  0E78  00A0               	movwf	___ftpack@arg
 15914  0E79  083A               	movf	___ftdiv@f3+1,w
 15915  0E7A  00A1               	movwf	___ftpack@arg+1
 15916  0E7B  083B               	movf	___ftdiv@f3+2,w
 15917  0E7C  00A2               	movwf	___ftpack@arg+2
 15918  0E7D  083C               	movf	___ftdiv@exp,w
 15919  0E7E  00B4               	movwf	??___ftdiv
 15920  0E7F  0834               	movf	??___ftdiv,w
 15921  0E80  00A3               	movwf	___ftpack@exp
 15922  0E81  083D               	movf	___ftdiv@sign,w
 15923  0E82  00B5               	movwf	??___ftdiv+1
 15924  0E83  0835               	movf	??___ftdiv+1,w
 15925  0E84  00A4               	movwf	___ftpack@sign
 15926  0E85  3188  20C2         	fcall	___ftpack
 15927  0E87  0020               	movlb	0	; select bank0
 15928  0E88  0820               	movf	?___ftpack,w
 15929  0E89  00AE               	movwf	?___ftdiv
 15930  0E8A  0821               	movf	?___ftpack+1,w
 15931  0E8B  00AF               	movwf	?___ftdiv+1
 15932  0E8C  0822               	movf	?___ftpack+2,w
 15933  0E8D  00B0               	movwf	?___ftdiv+2
 15934  0E8E  0008               	return
 15935  0E8F                     __end_of___ftdiv:	
 15936                           
 15937                           	psect	text96
 15938  1ED9                     __ptext96:	
 15939 ;; *************** function ___awtoft *****************
 15940 ;; Defined at:
 15941 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 15942 ;; Parameters:    Size  Location     Type
 15943 ;;  c               2    8[BANK0 ] int 
 15944 ;; Auto vars:     Size  Location     Type
 15945 ;;  sign            1   13[BANK0 ] unsigned char 
 15946 ;; Return value:  Size  Location     Type
 15947 ;;                  3    8[BANK0 ] float 
 15948 ;; Registers used:
 15949 ;;		wreg, status,2, status,0, pclath, cstack
 15950 ;; Tracked objects:
 15951 ;;		On entry : 0/0
 15952 ;;		On exit  : 0/0
 15953 ;;		Unchanged: 0/0
 15954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15955 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15956 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15957 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15958 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15959 ;;Total ram usage:        6 bytes
 15960 ;; Hardware stack levels used:    1
 15961 ;; Hardware stack levels required when called:    6
 15962 ;; This function calls:
 15963 ;;		___ftpack
 15964 ;; This function is called by:
 15965 ;;		_getPercentValue
 15966 ;;		_setPercentValue
 15967 ;; This function uses a non-reentrant model
 15968 ;;
 15969                           
 15970                           
 15971                           ;psect for function ___awtoft
 15972  1ED9                     ___awtoft:	
 15973                           
 15974                           ;incstack = 0
 15975                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15976  1ED9  0020               	movlb	0	; select bank0
 15977  1EDA  01AD               	clrf	___awtoft@sign
 15978  1EDB  1FA9               	btfss	___awtoft@c+1,7
 15979  1EDC  2EE4               	goto	l5788
 15980  1EDD  09A8               	comf	___awtoft@c,f
 15981  1EDE  09A9               	comf	___awtoft@c+1,f
 15982  1EDF  0AA8               	incf	___awtoft@c,f
 15983  1EE0  1903               	skipnz
 15984  1EE1  0AA9               	incf	___awtoft@c+1,f
 15985  1EE2  01AD               	clrf	___awtoft@sign
 15986  1EE3  0AAD               	incf	___awtoft@sign,f
 15987  1EE4                     l5788:	
 15988  1EE4  0828               	movf	___awtoft@c,w
 15989  1EE5  00A0               	movwf	___ftpack@arg
 15990  1EE6  0829               	movf	___awtoft@c+1,w
 15991  1EE7  00A1               	movwf	___ftpack@arg+1
 15992  1EE8  01A2               	clrf	___ftpack@arg+2
 15993  1EE9  308E               	movlw	142
 15994  1EEA  00AB               	movwf	??___awtoft
 15995  1EEB  082B               	movf	??___awtoft,w
 15996  1EEC  00A3               	movwf	___ftpack@exp
 15997  1EED  082D               	movf	___awtoft@sign,w
 15998  1EEE  00AC               	movwf	??___awtoft+1
 15999  1EEF  082C               	movf	??___awtoft+1,w
 16000  1EF0  00A4               	movwf	___ftpack@sign
 16001  1EF1  3188  20C2         	fcall	___ftpack
 16002  1EF3  0020               	movlb	0	; select bank0
 16003  1EF4  0820               	movf	?___ftpack,w
 16004  1EF5  00A8               	movwf	?___awtoft
 16005  1EF6  0821               	movf	?___ftpack+1,w
 16006  1EF7  00A9               	movwf	?___awtoft+1
 16007  1EF8  0822               	movf	?___ftpack+2,w
 16008  1EF9  00AA               	movwf	?___awtoft+2
 16009  1EFA  0008               	return
 16010  1EFB                     __end_of___awtoft:	
 16011                           
 16012                           	psect	text97
 16013  08C2                     __ptext97:	
 16014 ;; *************** function ___ftpack *****************
 16015 ;; Defined at:
 16016 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 16017 ;; Parameters:    Size  Location     Type
 16018 ;;  arg             3    0[BANK0 ] unsigned um
 16019 ;;  exp             1    3[BANK0 ] unsigned char 
 16020 ;;  sign            1    4[BANK0 ] unsigned char 
 16021 ;; Auto vars:     Size  Location     Type
 16022 ;;		None
 16023 ;; Return value:  Size  Location     Type
 16024 ;;                  3    0[BANK0 ] float 
 16025 ;; Registers used:
 16026 ;;		wreg, status,2, status,0
 16027 ;; Tracked objects:
 16028 ;;		On entry : 0/0
 16029 ;;		On exit  : 0/0
 16030 ;;		Unchanged: 0/0
 16031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16032 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16034 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16035 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16036 ;;Total ram usage:        8 bytes
 16037 ;; Hardware stack levels used:    1
 16038 ;; Hardware stack levels required when called:    5
 16039 ;; This function calls:
 16040 ;;		Nothing
 16041 ;; This function is called by:
 16042 ;;		___awtoft
 16043 ;;		___ftadd
 16044 ;;		___ftdiv
 16045 ;;		___ftmul
 16046 ;; This function uses a non-reentrant model
 16047 ;;
 16048                           
 16049                           
 16050                           ;psect for function ___ftpack
 16051  08C2                     ___ftpack:	
 16052                           
 16053                           ;incstack = 0
 16054                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 16055  08C2  0020               	movlb	0	; select bank0
 16056  08C3  0823               	movf	___ftpack@exp,w
 16057  08C4  1903               	btfsc	3,2
 16058  08C5  28CB               	goto	l5738
 16059  08C6  0822               	movf	___ftpack@arg+2,w
 16060  08C7  0421               	iorwf	___ftpack@arg+1,w
 16061  08C8  0420               	iorwf	___ftpack@arg,w
 16062  08C9  1D03               	skipz
 16063  08CA  28DC               	goto	l5744
 16064  08CB                     l5738:	
 16065  08CB  3000               	movlw	0
 16066  08CC  00A0               	movwf	?___ftpack
 16067  08CD  3000               	movlw	0
 16068  08CE  00A1               	movwf	?___ftpack+1
 16069  08CF  3000               	movlw	0
 16070  08D0  00A2               	movwf	?___ftpack+2
 16071  08D1  0008               	return
 16072  08D2                     l5742:	
 16073  08D2  3001               	movlw	1
 16074  08D3  00A5               	movwf	??___ftpack
 16075  08D4  0825               	movf	??___ftpack,w
 16076  08D5  07A3               	addwf	___ftpack@exp,f
 16077  08D6  3001               	movlw	1
 16078  08D7                     u4225:	
 16079  08D7  36A2               	lsrf	___ftpack@arg+2,f
 16080  08D8  0CA1               	rrf	___ftpack@arg+1,f
 16081  08D9  0CA0               	rrf	___ftpack@arg,f
 16082  08DA  0B89               	decfsz	9,f
 16083  08DB  28D7               	goto	u4225
 16084  08DC                     l5744:	
 16085  08DC  30FE               	movlw	254
 16086  08DD  0522               	andwf	___ftpack@arg+2,w
 16087  08DE  1903               	btfsc	3,2
 16088  08DF  28F5               	goto	l2896
 16089  08E0  28D2               	goto	l5742
 16090  08E1                     l5746:	
 16091  08E1  3001               	movlw	1
 16092  08E2  00A5               	movwf	??___ftpack
 16093  08E3  0825               	movf	??___ftpack,w
 16094  08E4  07A3               	addwf	___ftpack@exp,f
 16095  08E5  3001               	movlw	1
 16096  08E6  07A0               	addwf	___ftpack@arg,f
 16097  08E7  3000               	movlw	0
 16098  08E8  1803               	skipnc
 16099  08E9  3001               	movlw	1
 16100  08EA  07A1               	addwf	___ftpack@arg+1,f
 16101  08EB  3000               	movlw	0
 16102  08EC  1803               	skipnc
 16103  08ED  3001               	movlw	1
 16104  08EE  07A2               	addwf	___ftpack@arg+2,f
 16105  08EF  3001               	movlw	1
 16106  08F0                     u4245:	
 16107  08F0  36A2               	lsrf	___ftpack@arg+2,f
 16108  08F1  0CA1               	rrf	___ftpack@arg+1,f
 16109  08F2  0CA0               	rrf	___ftpack@arg,f
 16110  08F3  0B89               	decfsz	9,f
 16111  08F4  28F0               	goto	u4245
 16112  08F5                     l2896:	
 16113  08F5  30FF               	movlw	255
 16114  08F6  0522               	andwf	___ftpack@arg+2,w
 16115  08F7  1903               	btfsc	3,2
 16116  08F8  2902               	goto	l5754
 16117  08F9  28E1               	goto	l5746
 16118  08FA                     l5752:	
 16119  08FA  3001               	movlw	1
 16120  08FB  02A3               	subwf	___ftpack@exp,f
 16121  08FC  3001               	movlw	1
 16122  08FD                     u4265:	
 16123  08FD  35A0               	lslf	___ftpack@arg,f
 16124  08FE  0DA1               	rlf	___ftpack@arg+1,f
 16125  08FF  0DA2               	rlf	___ftpack@arg+2,f
 16126  0900  0B89               	decfsz	9,f
 16127  0901  28FD               	goto	u4265
 16128  0902                     l5754:	
 16129  0902  1FA1               	btfss	___ftpack@arg+1,7
 16130  0903  28FA               	goto	l5752
 16131  0904  1823               	btfsc	___ftpack@exp,0
 16132  0905  290C               	goto	l2902
 16133  0906  30FF               	movlw	255
 16134  0907  05A0               	andwf	___ftpack@arg,f
 16135  0908  307F               	movlw	127
 16136  0909  05A1               	andwf	___ftpack@arg+1,f
 16137  090A  30FF               	movlw	255
 16138  090B  05A2               	andwf	___ftpack@arg+2,f
 16139  090C                     l2902:	
 16140  090C  1003               	clrc
 16141  090D  0CA3               	rrf	___ftpack@exp,f
 16142  090E  0823               	movf	___ftpack@exp,w
 16143  090F  00A5               	movwf	??___ftpack
 16144  0910  01A6               	clrf	??___ftpack+1
 16145  0911  01A7               	clrf	??___ftpack+2
 16146  0912  3010               	movlw	16
 16147  0913                     u4295:	
 16148  0913  35A5               	lslf	??___ftpack,f
 16149  0914  0DA6               	rlf	??___ftpack+1,f
 16150  0915  0DA7               	rlf	??___ftpack+2,f
 16151  0916  0B89               	decfsz	9,f
 16152  0917  2913               	goto	u4295
 16153  0918  0825               	movf	??___ftpack,w
 16154  0919  04A0               	iorwf	___ftpack@arg,f
 16155  091A  0826               	movf	??___ftpack+1,w
 16156  091B  04A1               	iorwf	___ftpack@arg+1,f
 16157  091C  0827               	movf	??___ftpack+2,w
 16158  091D  04A2               	iorwf	___ftpack@arg+2,f
 16159  091E  0824               	movf	___ftpack@sign,w
 16160  091F  1903               	btfsc	3,2
 16161  0920  0008               	return
 16162  0921  17A2               	bsf	___ftpack@arg+2,7
 16163  0922  0008               	return
 16164  0923                     __end_of___ftpack:	
 16165                           
 16166                           	psect	text98
 16167  1E79                     __ptext98:	
 16168 ;; *************** function _setDimmerLights_TriggerAdj *****************
 16169 ;; Defined at:
 16170 ;;		line 807 in file "../src/Dimmer_B1.c"
 16171 ;; Parameters:    Size  Location     Type
 16172 ;;  lights          1    wreg     unsigned char 
 16173 ;;  command         1    2[BANK0 ] unsigned char 
 16174 ;; Auto vars:     Size  Location     Type
 16175 ;;  lights          1    4[BANK0 ] unsigned char 
 16176 ;; Return value:  Size  Location     Type
 16177 ;;		None               void
 16178 ;; Registers used:
 16179 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16180 ;; Tracked objects:
 16181 ;;		On entry : 0/0
 16182 ;;		On exit  : 0/0
 16183 ;;		Unchanged: 0/0
 16184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16185 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16186 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16187 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16188 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16189 ;;Total ram usage:        3 bytes
 16190 ;; Hardware stack levels used:    1
 16191 ;; Hardware stack levels required when called:    6
 16192 ;; This function calls:
 16193 ;;		_DimmerLightsPointSelect
 16194 ;; This function is called by:
 16195 ;;		_setDimmerLights_SwOff
 16196 ;;		_setDimmerLights_AdjControl
 16197 ;; This function uses a non-reentrant model
 16198 ;;
 16199                           
 16200                           
 16201                           ;psect for function _setDimmerLights_TriggerAdj
 16202  1E79                     _setDimmerLights_TriggerAdj:	
 16203                           
 16204                           ;incstack = 0
 16205                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16206                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 16207  1E79  0020               	movlb	0	; select bank0
 16208  1E7A  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 16209                           
 16210                           ;Dimmer_B1.c: 808: DimmerLightsPointSelect(lights);
 16211  1E7B  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 16212  1E7C  319C  2446         	fcall	_DimmerLightsPointSelect
 16213                           
 16214                           ;Dimmer_B1.c: 809: DimmerLights->TriggerAdj = 1;
 16215  1E7E  0879               	movf	_DimmerLights,w
 16216  1E7F  3E08               	addlw	8
 16217  1E80  0086               	movwf	6
 16218  1E81  3001               	movlw	1	; select bank2/3
 16219  1E82  0087               	movwf	7
 16220  1E83  1601               	bsf	1,4
 16221                           
 16222                           ;Dimmer_B1.c: 810: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 16223  1E84  0020               	movlb	0	; select bank0
 16224  1E85  0822               	movf	setDimmerLights_TriggerAdj@command,w
 16225  1E86  3A01               	xorlw	1
 16226  1E87  3000               	movlw	0
 16227  1E88  1903               	skipnz
 16228  1E89  3001               	movlw	1
 16229  1E8A  00A3               	movwf	??_setDimmerLights_TriggerAdj
 16230  1E8B  0879               	movf	_DimmerLights,w
 16231  1E8C  3E08               	addlw	8
 16232  1E8D  0086               	movwf	6
 16233  1E8E  3001               	movlw	1	; select bank2/3
 16234  1E8F  0087               	movwf	7
 16235  1E90  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16236  1E91  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16237  1E92  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16238  1E93  0801               	movf	1,w
 16239  1E94  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 16240  1E95  39F7               	andlw	-9
 16241  1E96  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 16242  1E97  0081               	movwf	1
 16243  1E98  0008               	return
 16244  1E99                     __end_of_setDimmerLights_TriggerAdj:	
 16245                           
 16246                           	psect	text99
 16247  1E1D                     __ptext99:	
 16248 ;; *************** function _setDimmerLights_Trigger *****************
 16249 ;; Defined at:
 16250 ;;		line 801 in file "../src/Dimmer_B1.c"
 16251 ;; Parameters:    Size  Location     Type
 16252 ;;  lights          1    wreg     unsigned char 
 16253 ;;  command         1    2[BANK0 ] unsigned char 
 16254 ;; Auto vars:     Size  Location     Type
 16255 ;;  lights          1    4[BANK0 ] unsigned char 
 16256 ;; Return value:  Size  Location     Type
 16257 ;;		None               void
 16258 ;; Registers used:
 16259 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16260 ;; Tracked objects:
 16261 ;;		On entry : 0/0
 16262 ;;		On exit  : 0/0
 16263 ;;		Unchanged: 0/0
 16264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16265 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16266 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16267 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16268 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16269 ;;Total ram usage:        3 bytes
 16270 ;; Hardware stack levels used:    1
 16271 ;; Hardware stack levels required when called:    6
 16272 ;; This function calls:
 16273 ;;		_DimmerLightsPointSelect
 16274 ;; This function is called by:
 16275 ;;		_setDimmerLights_SwOn
 16276 ;;		_setDimmerLights_SwOff
 16277 ;; This function uses a non-reentrant model
 16278 ;;
 16279                           
 16280                           
 16281                           ;psect for function _setDimmerLights_Trigger
 16282  1E1D                     _setDimmerLights_Trigger:	
 16283                           
 16284                           ;incstack = 0
 16285                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16286                           ;setDimmerLights_Trigger@lights stored from wreg
 16287  1E1D  0020               	movlb	0	; select bank0
 16288  1E1E  00A4               	movwf	setDimmerLights_Trigger@lights
 16289                           
 16290                           ;Dimmer_B1.c: 802: DimmerLightsPointSelect(lights);
 16291  1E1F  0824               	movf	setDimmerLights_Trigger@lights,w
 16292  1E20  319C  2446         	fcall	_DimmerLightsPointSelect
 16293                           
 16294                           ;Dimmer_B1.c: 803: DimmerLights->Trigger = 1;
 16295  1E22  0879               	movf	_DimmerLights,w
 16296  1E23  3E08               	addlw	8
 16297  1E24  0086               	movwf	6
 16298  1E25  3001               	movlw	1	; select bank2/3
 16299  1E26  0087               	movwf	7
 16300  1E27  1501               	bsf	1,2
 16301                           
 16302                           ;Dimmer_B1.c: 804: DimmerLights->Switch = command == 1 ? 1 : 0;
 16303  1E28  0020               	movlb	0	; select bank0
 16304  1E29  0822               	movf	setDimmerLights_Trigger@command,w
 16305  1E2A  3A01               	xorlw	1
 16306  1E2B  3000               	movlw	0
 16307  1E2C  1903               	skipnz
 16308  1E2D  3001               	movlw	1
 16309  1E2E  00A3               	movwf	??_setDimmerLights_Trigger
 16310  1E2F  0879               	movf	_DimmerLights,w
 16311  1E30  3E08               	addlw	8
 16312  1E31  0086               	movwf	6
 16313  1E32  3001               	movlw	1	; select bank2/3
 16314  1E33  0087               	movwf	7
 16315  1E34  0DA3               	rlf	??_setDimmerLights_Trigger,f
 16316  1E35  0801               	movf	1,w
 16317  1E36  0623               	xorwf	??_setDimmerLights_Trigger,w
 16318  1E37  39FD               	andlw	-3
 16319  1E38  0623               	xorwf	??_setDimmerLights_Trigger,w
 16320  1E39  0081               	movwf	1
 16321  1E3A  0008               	return
 16322  1E3B                     __end_of_setDimmerLights_Trigger:	
 16323                           
 16324                           	psect	text100
 16325  0861                     __ptext100:	
 16326 ;; *************** function _setDelayOff_GO *****************
 16327 ;; Defined at:
 16328 ;;		line 86 in file "../src/DelayOff_B1.c"
 16329 ;; Parameters:    Size  Location     Type
 16330 ;;  sw              1    wreg     unsigned char 
 16331 ;;  command         1   10[BANK0 ] unsigned char 
 16332 ;;  value           1   11[BANK0 ] unsigned char 
 16333 ;; Auto vars:     Size  Location     Type
 16334 ;;  sw              1   14[BANK0 ] unsigned char 
 16335 ;; Return value:  Size  Location     Type
 16336 ;;		None               void
 16337 ;; Registers used:
 16338 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16339 ;; Tracked objects:
 16340 ;;		On entry : 0/0
 16341 ;;		On exit  : 0/0
 16342 ;;		Unchanged: 0/0
 16343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16344 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16345 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16346 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16347 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16348 ;;Total ram usage:        5 bytes
 16349 ;; Hardware stack levels used:    1
 16350 ;; Hardware stack levels required when called:    7
 16351 ;; This function calls:
 16352 ;;		_DelayOffPointSelect
 16353 ;;		_DelayTimejudge
 16354 ;; This function is called by:
 16355 ;;		_setDimmerLights_SwOff
 16356 ;;		_setRFSW_Control
 16357 ;; This function uses a non-reentrant model
 16358 ;;
 16359                           
 16360                           
 16361                           ;psect for function _setDelayOff_GO
 16362  0861                     _setDelayOff_GO:	
 16363                           
 16364                           ;incstack = 0
 16365                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16366                           ;setDelayOff_GO@sw stored from wreg
 16367  0861  0020               	movlb	0	; select bank0
 16368  0862  00AE               	movwf	setDelayOff_GO@sw
 16369                           
 16370                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
 16371  0863  082E               	movf	setDelayOff_GO@sw,w
 16372  0864  319C  24A6  3188   	fcall	_DelayOffPointSelect
 16373                           
 16374                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
 16375  0867  0878               	movf	_DelayOff,w
 16376  0868  0086               	movwf	6
 16377  0869  3001               	movlw	1	; select bank2/3
 16378  086A  0087               	movwf	7
 16379  086B  1C01               	btfss	1,0
 16380  086C  0008               	return
 16381                           
 16382                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
 16383  086D  0020               	movlb	0	; select bank0
 16384  086E  082A               	movf	setDelayOff_GO@command,w
 16385  086F  3A01               	xorlw	1
 16386  0870  3000               	movlw	0
 16387  0871  1903               	skipnz
 16388  0872  3001               	movlw	1
 16389  0873  00AC               	movwf	??_setDelayOff_GO
 16390  0874  0878               	movf	_DelayOff,w
 16391  0875  0086               	movwf	6
 16392  0876  3001               	movlw	1	; select bank2/3
 16393  0877  0087               	movwf	7
 16394  0878  0DAC               	rlf	??_setDelayOff_GO,f
 16395  0879  0801               	movf	1,w
 16396  087A  062C               	xorwf	??_setDelayOff_GO,w
 16397  087B  39FD               	andlw	-3
 16398  087C  062C               	xorwf	??_setDelayOff_GO,w
 16399  087D  0081               	movwf	1
 16400                           
 16401                           ;DelayOff_B1.c: 90: if (command == 1) {
 16402  087E  082A               	movf	setDelayOff_GO@command,w
 16403  087F  3A01               	xorlw	1
 16404  0880  1D03               	skipz
 16405  0881  28AC               	goto	l6156
 16406                           
 16407                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
 16408  0882  082B               	movf	setDelayOff_GO@value,w
 16409  0883  3190  2092  3188   	fcall	_DelayTimejudge
 16410  0886  0020               	movlb	0	; select bank0
 16411  0887  00AC               	movwf	??_setDelayOff_GO
 16412  0888  0878               	movf	_DelayOff,w
 16413  0889  0086               	movwf	6
 16414  088A  3001               	movlw	1	; select bank2/3
 16415  088B  0087               	movwf	7
 16416  088C  082C               	movf	??_setDelayOff_GO,w
 16417  088D  0081               	movwf	1
 16418                           
 16419                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 16420  088E  300F               	movlw	15
 16421  088F  052B               	andwf	setDelayOff_GO@value,w
 16422  0890  00AC               	movwf	??_setDelayOff_GO
 16423  0891  082C               	movf	??_setDelayOff_GO,w
 16424  0892  3A05               	xorlw	5
 16425  0893  1903               	skipnz
 16426  0894  2899               	goto	l6150
 16427  0895  082B               	movf	setDelayOff_GO@value,w
 16428  0896  390F               	andlw	15
 16429  0897  1D03               	btfss	3,2
 16430  0898  289F               	goto	l6154
 16431  0899                     l6150:	
 16432  0899  3026               	movlw	38
 16433  089A  022B               	subwf	setDelayOff_GO@value,w
 16434  089B  1803               	skipnc
 16435  089C  289F               	goto	l6154
 16436                           
 16437                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
 16438  089D  082B               	movf	setDelayOff_GO@value,w
 16439  089E  28A0               	goto	L8
 16440  089F                     l6154:	
 16441                           ;DelayOff_B1.c: 94: } else {
 16442                           
 16443                           
 16444                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
 16445  089F  3005               	movlw	5
 16446  08A0                     L8:	
 16447  08A0  00AC               	movwf	??_setDelayOff_GO
 16448  08A1  082E               	movf	setDelayOff_GO@sw,w
 16449  08A2  3E1A               	addlw	26
 16450  08A3  076F               	addwf	_product,w
 16451  08A4  00AD               	movwf	??_setDelayOff_GO+1
 16452  08A5  082D               	movf	??_setDelayOff_GO+1,w
 16453  08A6  0086               	movwf	6
 16454  08A7  3002               	movlw	2	; select bank4/5
 16455  08A8  0087               	movwf	7
 16456  08A9  082C               	movf	??_setDelayOff_GO,w
 16457  08AA  0081               	movwf	1
 16458                           
 16459                           ;DelayOff_B1.c: 96: }
 16460                           ;DelayOff_B1.c: 97: } else {
 16461  08AB  28B5               	goto	l6158
 16462  08AC                     l6156:	
 16463                           
 16464                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
 16465  08AC  082E               	movf	setDelayOff_GO@sw,w
 16466  08AD  3E1A               	addlw	26
 16467  08AE  076F               	addwf	_product,w
 16468  08AF  00AC               	movwf	??_setDelayOff_GO
 16469  08B0  082C               	movf	??_setDelayOff_GO,w
 16470  08B1  0086               	movwf	6
 16471  08B2  3002               	movlw	2	; select bank4/5
 16472  08B3  0087               	movwf	7
 16473  08B4  0181               	clrf	1
 16474  08B5                     l6158:	
 16475                           
 16476                           ;DelayOff_B1.c: 99: }
 16477                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
 16478  08B5  0878               	movf	_DelayOff,w
 16479  08B6  0086               	movwf	6
 16480  08B7  3001               	movlw	1	; select bank2/3
 16481  08B8  0087               	movwf	7
 16482  08B9  3000               	movlw	0
 16483  08BA  3FC0               	movwi [0]fsr1
 16484  08BB  3FC1               	movwi [1]fsr1
 16485                           
 16486                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
 16487  08BC  0878               	movf	_DelayOff,w
 16488  08BD  0086               	movwf	6
 16489  08BE  3001               	movlw	1	; select bank2/3
 16490  08BF  0087               	movwf	7
 16491  08C0  0181               	clrf	1
 16492  08C1  0008               	return
 16493  08C2                     __end_of_setDelayOff_GO:	
 16494                           
 16495                           	psect	text101
 16496  1092                     __ptext101:	
 16497 ;; *************** function _DelayTimejudge *****************
 16498 ;; Defined at:
 16499 ;;		line 106 in file "../src/DelayOff_B1.c"
 16500 ;; Parameters:    Size  Location     Type
 16501 ;;  value           1    wreg     unsigned char 
 16502 ;; Auto vars:     Size  Location     Type
 16503 ;;  value           1    9[BANK0 ] unsigned char 
 16504 ;;  k               1    8[BANK0 ] unsigned char 
 16505 ;;  j               1    7[BANK0 ] unsigned char 
 16506 ;;  i               1    6[BANK0 ] unsigned char 
 16507 ;; Return value:  Size  Location     Type
 16508 ;;                  1    wreg      unsigned char 
 16509 ;; Registers used:
 16510 ;;		wreg, status,2, status,0, pclath, cstack
 16511 ;; Tracked objects:
 16512 ;;		On entry : 0/0
 16513 ;;		On exit  : 0/0
 16514 ;;		Unchanged: 0/0
 16515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16517 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16518 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16519 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16520 ;;Total ram usage:        6 bytes
 16521 ;; Hardware stack levels used:    1
 16522 ;; Hardware stack levels required when called:    6
 16523 ;; This function calls:
 16524 ;;		___bmul
 16525 ;; This function is called by:
 16526 ;;		_setDelayOff_GO
 16527 ;; This function uses a non-reentrant model
 16528 ;;
 16529                           
 16530                           
 16531                           ;psect for function _DelayTimejudge
 16532  1092                     _DelayTimejudge:	
 16533                           
 16534                           ;incstack = 0
 16535                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16536                           ;DelayTimejudge@value stored from wreg
 16537  1092  0020               	movlb	0	; select bank0
 16538  1093  00A9               	movwf	DelayTimejudge@value
 16539                           
 16540                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
 16541  1094  3005               	movlw	5
 16542  1095  00A4               	movwf	??_DelayTimejudge
 16543  1096  0824               	movf	??_DelayTimejudge,w
 16544  1097  00A6               	movwf	DelayTimejudge@i
 16545  1098  01A7               	clrf	DelayTimejudge@j
 16546  1099  01A8               	clrf	DelayTimejudge@k
 16547                           
 16548                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
 16549  109A  3031               	movlw	49
 16550  109B  0229               	subwf	DelayTimejudge@value,w
 16551  109C  1803               	skipnc
 16552  109D  28BA               	goto	l6020
 16553                           
 16554                           ;DelayOff_B1.c: 109: j = value & 0x0f;
 16555  109E  0829               	movf	DelayTimejudge@value,w
 16556  109F  390F               	andlw	15
 16557  10A0  00A4               	movwf	??_DelayTimejudge
 16558  10A1  0824               	movf	??_DelayTimejudge,w
 16559  10A2  00A7               	movwf	DelayTimejudge@j
 16560                           
 16561                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
 16562  10A3  0829               	movf	DelayTimejudge@value,w
 16563  10A4  00A4               	movwf	??_DelayTimejudge
 16564  10A5  3004               	movlw	4
 16565  10A6                     u4905:	
 16566  10A6  36A4               	lsrf	??_DelayTimejudge,f
 16567  10A7  0B89               	decfsz	9,f
 16568  10A8  28A6               	goto	u4905
 16569  10A9  0824               	movf	??_DelayTimejudge,w
 16570  10AA  390F               	andlw	15
 16571  10AB  00A5               	movwf	??_DelayTimejudge+1
 16572  10AC  0825               	movf	??_DelayTimejudge+1,w
 16573  10AD  00A8               	movwf	DelayTimejudge@k
 16574                           
 16575                           ;DelayOff_B1.c: 111: i = j + (k * 10);
 16576  10AE  300A               	movlw	10
 16577  10AF  00A4               	movwf	??_DelayTimejudge
 16578  10B0  0824               	movf	??_DelayTimejudge,w
 16579  10B1  00A0               	movwf	___bmul@multiplicand
 16580  10B2  0828               	movf	DelayTimejudge@k,w
 16581  10B3  319C  2410         	fcall	___bmul
 16582  10B5  0020               	movlb	0	; select bank0
 16583  10B6  0727               	addwf	DelayTimejudge@j,w
 16584  10B7  00A5               	movwf	??_DelayTimejudge+1
 16585  10B8  0825               	movf	??_DelayTimejudge+1,w
 16586  10B9  00A6               	movwf	DelayTimejudge@i
 16587  10BA                     l6020:	
 16588                           
 16589                           ;DelayOff_B1.c: 112: }
 16590                           ;DelayOff_B1.c: 133: return i;
 16591  10BA  0826               	movf	DelayTimejudge@i,w
 16592  10BB  0008               	return
 16593  10BC                     __end_of_DelayTimejudge:	
 16594                           
 16595                           	psect	text102
 16596  1C10                     __ptext102:	
 16597 ;; *************** function ___bmul *****************
 16598 ;; Defined at:
 16599 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16600 ;; Parameters:    Size  Location     Type
 16601 ;;  multiplier      1    wreg     unsigned char 
 16602 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16603 ;; Auto vars:     Size  Location     Type
 16604 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16605 ;;  product         1    2[BANK0 ] unsigned char 
 16606 ;; Return value:  Size  Location     Type
 16607 ;;                  1    wreg      unsigned char 
 16608 ;; Registers used:
 16609 ;;		wreg, status,2, status,0
 16610 ;; Tracked objects:
 16611 ;;		On entry : 0/0
 16612 ;;		On exit  : 0/0
 16613 ;;		Unchanged: 0/0
 16614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16615 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16616 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16617 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16618 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16619 ;;Total ram usage:        4 bytes
 16620 ;; Hardware stack levels used:    1
 16621 ;; Hardware stack levels required when called:    5
 16622 ;; This function calls:
 16623 ;;		Nothing
 16624 ;; This function is called by:
 16625 ;;		_DelayTimejudge
 16626 ;; This function uses a non-reentrant model
 16627 ;;
 16628                           
 16629                           
 16630                           ;psect for function ___bmul
 16631  1C10                     ___bmul:	
 16632                           
 16633                           ;incstack = 0
 16634                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16635                           ;___bmul@multiplier stored from wreg
 16636  1C10  0020               	movlb	0	; select bank0
 16637  1C11  00A3               	movwf	___bmul@multiplier
 16638  1C12  01A2               	clrf	___bmul@product
 16639  1C13                     l5766:	
 16640  1C13  1C23               	btfss	___bmul@multiplier,0
 16641  1C14  2C19               	goto	l5770
 16642  1C15  0820               	movf	___bmul@multiplicand,w
 16643  1C16  00A1               	movwf	??___bmul
 16644  1C17  0821               	movf	??___bmul,w
 16645  1C18  07A2               	addwf	___bmul@product,f
 16646  1C19                     l5770:	
 16647  1C19  1003               	clrc
 16648  1C1A  0DA0               	rlf	___bmul@multiplicand,f
 16649  1C1B  1003               	clrc
 16650  1C1C  0CA3               	rrf	___bmul@multiplier,f
 16651  1C1D  08A3               	movf	___bmul@multiplier,f
 16652  1C1E  1D03               	skipz
 16653  1C1F  2C13               	goto	l5766
 16654  1C20  0822               	movf	___bmul@product,w
 16655  1C21  0008               	return
 16656  1C22                     __end_of___bmul:	
 16657                           
 16658                           	psect	text103
 16659  1BAA                     __ptext103:	
 16660 ;; *************** function _getDimmerLights_Status *****************
 16661 ;; Defined at:
 16662 ;;		line 459 in file "../src/Dimmer_B1.c"
 16663 ;; Parameters:    Size  Location     Type
 16664 ;;  lights          1    wreg     unsigned char 
 16665 ;; Auto vars:     Size  Location     Type
 16666 ;;  lights          1    2[BANK0 ] unsigned char 
 16667 ;;  status          1    3[BANK0 ] unsigned char 
 16668 ;; Return value:  Size  Location     Type
 16669 ;;                  1    wreg      unsigned char 
 16670 ;; Registers used:
 16671 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16672 ;; Tracked objects:
 16673 ;;		On entry : 0/0
 16674 ;;		On exit  : 0/0
 16675 ;;		Unchanged: 0/0
 16676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16678 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16680 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16681 ;;Total ram usage:        2 bytes
 16682 ;; Hardware stack levels used:    1
 16683 ;; Hardware stack levels required when called:    6
 16684 ;; This function calls:
 16685 ;;		_DimmerLightsPointSelect
 16686 ;; This function is called by:
 16687 ;;		_DlyOff_Main
 16688 ;;		_setDimmerLights_ErrorClose
 16689 ;;		_setRFSW_Control
 16690 ;;		_setRFSW_AdjControl
 16691 ;;		_getMain_LightsStatus
 16692 ;; This function uses a non-reentrant model
 16693 ;;
 16694                           
 16695                           
 16696                           ;psect for function _getDimmerLights_Status
 16697  1BAA                     _getDimmerLights_Status:	
 16698                           
 16699                           ;incstack = 0
 16700                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16701                           ;getDimmerLights_Status@lights stored from wreg
 16702  1BAA  0020               	movlb	0	; select bank0
 16703  1BAB  00A2               	movwf	getDimmerLights_Status@lights
 16704                           
 16705                           ;Dimmer_B1.c: 460: DimmerLightsPointSelect(lights);
 16706  1BAC  0822               	movf	getDimmerLights_Status@lights,w
 16707  1BAD  319C  2446         	fcall	_DimmerLightsPointSelect
 16708                           
 16709                           ;Dimmer_B1.c: 461: char status = DimmerLights->Status == 1 ? 1 : 0;
 16710  1BAF  0879               	movf	_DimmerLights,w
 16711  1BB0  0086               	movwf	6
 16712  1BB1  3001               	movlw	1	; select bank2/3
 16713  1BB2  0087               	movwf	7
 16714  1BB3  3000               	movlw	0
 16715  1BB4  1A81               	btfsc	1,5
 16716  1BB5  3001               	movlw	1
 16717  1BB6  0020               	movlb	0	; select bank0
 16718  1BB7  00A3               	movwf	getDimmerLights_Status@status
 16719                           
 16720                           ;Dimmer_B1.c: 462: return status;
 16721  1BB8  0823               	movf	getDimmerLights_Status@status,w
 16722  1BB9  0008               	return
 16723  1BBA                     __end_of_getDimmerLights_Status:	
 16724                           
 16725                           	psect	text104
 16726  1C46                     __ptext104:	
 16727 ;; *************** function _DimmerLightsPointSelect *****************
 16728 ;; Defined at:
 16729 ;;		line 324 in file "../src/Dimmer_B1.c"
 16730 ;; Parameters:    Size  Location     Type
 16731 ;;  lights          1    wreg     unsigned char 
 16732 ;; Auto vars:     Size  Location     Type
 16733 ;;  lights          1    1[BANK0 ] unsigned char 
 16734 ;; Return value:  Size  Location     Type
 16735 ;;		None               void
 16736 ;; Registers used:
 16737 ;;		wreg
 16738 ;; Tracked objects:
 16739 ;;		On entry : 0/0
 16740 ;;		On exit  : 0/0
 16741 ;;		Unchanged: 0/0
 16742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16744 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16745 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16746 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16747 ;;Total ram usage:        2 bytes
 16748 ;; Hardware stack levels used:    1
 16749 ;; Hardware stack levels required when called:    5
 16750 ;; This function calls:
 16751 ;;		Nothing
 16752 ;; This function is called by:
 16753 ;;		_setDimmerLights_Initialization
 16754 ;;		_setDimmerLights_Main
 16755 ;;		_getDimmerLights_Status
 16756 ;;		_setDimmerLights_SwOn
 16757 ;;		_setDimmerLights_SwOff
 16758 ;;		_setDimmerLights_AdjControl
 16759 ;;		_setDimmerLights_ErrorClose
 16760 ;;		_setDimmerLights
 16761 ;;		_setDimmerLights_Adj
 16762 ;;		_setDimmerLights_AdjRF
 16763 ;;		_setDimmerLights_Trigger
 16764 ;;		_setDimmerLights_TriggerAdj
 16765 ;;		_setDimmerLights_Status
 16766 ;;		_setDimmerLights_GO
 16767 ;;		_setDimmerLights_MaxmumValue
 16768 ;; This function uses a non-reentrant model
 16769 ;;
 16770                           
 16771                           
 16772                           ;psect for function _DimmerLightsPointSelect
 16773  1C46                     _DimmerLightsPointSelect:	
 16774                           
 16775                           ;incstack = 0
 16776                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16777                           ;DimmerLightsPointSelect@lights stored from wreg
 16778  1C46  0020               	movlb	0	; select bank0
 16779  1C47  00A1               	movwf	DimmerLightsPointSelect@lights
 16780                           
 16781                           ;Dimmer_B1.c: 326: if (lights == 1) {
 16782  1C48  0821               	movf	DimmerLightsPointSelect@lights,w
 16783  1C49  3A01               	xorlw	1
 16784  1C4A  1D03               	skipz
 16785  1C4B  2C50               	goto	l766
 16786                           
 16787                           ;Dimmer_B1.c: 327: DimmerLights = &DimmerLights1;
 16788  1C4C  30BE               	movlw	_DimmerLights1& (0+255)
 16789  1C4D  00A0               	movwf	??_DimmerLightsPointSelect
 16790  1C4E  0820               	movf	??_DimmerLightsPointSelect,w
 16791  1C4F  00F9               	movwf	_DimmerLights
 16792  1C50                     l766:	
 16793                           
 16794                           ;Dimmer_B1.c: 328: }
 16795                           ;Dimmer_B1.c: 331: if (lights == 2) {
 16796  1C50  0821               	movf	DimmerLightsPointSelect@lights,w
 16797  1C51  3A02               	xorlw	2
 16798  1C52  1D03               	skipz
 16799  1C53  0008               	return
 16800                           
 16801                           ;Dimmer_B1.c: 332: DimmerLights = &DimmerLights2;
 16802  1C54  30CD               	movlw	_DimmerLights2& (0+255)
 16803  1C55  00A0               	movwf	??_DimmerLightsPointSelect
 16804  1C56  0820               	movf	??_DimmerLightsPointSelect,w
 16805  1C57  00F9               	movwf	_DimmerLights
 16806  1C58  0008               	return
 16807  1C59                     __end_of_DimmerLightsPointSelect:	
 16808                           
 16809                           	psect	text105
 16810  1ACA                     __ptext105:	
 16811 ;; *************** function _DelayOff_Initialization *****************
 16812 ;; Defined at:
 16813 ;;		line 26 in file "../src/DelayOff_B1.c"
 16814 ;; Parameters:    Size  Location     Type
 16815 ;;		None
 16816 ;; Auto vars:     Size  Location     Type
 16817 ;;		None
 16818 ;; Return value:  Size  Location     Type
 16819 ;;		None               void
 16820 ;; Registers used:
 16821 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16822 ;; Tracked objects:
 16823 ;;		On entry : 0/0
 16824 ;;		On exit  : 0/0
 16825 ;;		Unchanged: 0/0
 16826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16831 ;;Total ram usage:        0 bytes
 16832 ;; Hardware stack levels used:    1
 16833 ;; Hardware stack levels required when called:    7
 16834 ;; This function calls:
 16835 ;;		_DlyOff_Initialization
 16836 ;; This function is called by:
 16837 ;;		_main
 16838 ;; This function uses a non-reentrant model
 16839 ;;
 16840                           
 16841                           
 16842                           ;psect for function _DelayOff_Initialization
 16843  1ACA                     _DelayOff_Initialization:	
 16844                           
 16845                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16846                           
 16847                           ;incstack = 0
 16848                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16849  1ACA  3001               	movlw	1
 16850  1ACB  319A  22FB  319A   	fcall	_DlyOff_Initialization
 16851                           
 16852                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 16853  1ACE  3002               	movlw	2
 16854  1ACF  319A  22FB         	fcall	_DlyOff_Initialization
 16855  1AD1  0008               	return
 16856  1AD2                     __end_of_DelayOff_Initialization:	
 16857                           
 16858                           	psect	text106
 16859  1AFB                     __ptext106:	
 16860 ;; *************** function _DlyOff_Initialization *****************
 16861 ;; Defined at:
 16862 ;;		line 56 in file "../src/DelayOff_B1.c"
 16863 ;; Parameters:    Size  Location     Type
 16864 ;;  sw              1    wreg     unsigned char 
 16865 ;; Auto vars:     Size  Location     Type
 16866 ;;  sw              1    2[BANK0 ] unsigned char 
 16867 ;; Return value:  Size  Location     Type
 16868 ;;		None               void
 16869 ;; Registers used:
 16870 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16871 ;; Tracked objects:
 16872 ;;		On entry : 0/0
 16873 ;;		On exit  : 0/0
 16874 ;;		Unchanged: 0/0
 16875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16877 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16879 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16880 ;;Total ram usage:        1 bytes
 16881 ;; Hardware stack levels used:    1
 16882 ;; Hardware stack levels required when called:    6
 16883 ;; This function calls:
 16884 ;;		_DelayOffPointSelect
 16885 ;; This function is called by:
 16886 ;;		_DelayOff_Initialization
 16887 ;; This function uses a non-reentrant model
 16888 ;;
 16889                           
 16890                           
 16891                           ;psect for function _DlyOff_Initialization
 16892  1AFB                     _DlyOff_Initialization:	
 16893                           
 16894                           ;incstack = 0
 16895                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16896                           ;DlyOff_Initialization@sw stored from wreg
 16897  1AFB  0020               	movlb	0	; select bank0
 16898  1AFC  00A2               	movwf	DlyOff_Initialization@sw
 16899                           
 16900                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16901  1AFD  0822               	movf	DlyOff_Initialization@sw,w
 16902  1AFE  319C  24A6         	fcall	_DelayOffPointSelect
 16903                           
 16904                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 16905  1B00  0878               	movf	_DelayOff,w
 16906  1B01  0086               	movwf	6
 16907  1B02  3001               	movlw	1	; select bank2/3
 16908  1B03  0087               	movwf	7
 16909  1B04  1401               	bsf	1,0
 16910  1B05  0008               	return
 16911  1B06                     __end_of_DlyOff_Initialization:	
 16912                           
 16913                           	psect	text107
 16914  1CA6                     __ptext107:	
 16915 ;; *************** function _DelayOffPointSelect *****************
 16916 ;; Defined at:
 16917 ;;		line 7 in file "../src/DelayOff_B1.c"
 16918 ;; Parameters:    Size  Location     Type
 16919 ;;  sw              1    wreg     unsigned char 
 16920 ;; Auto vars:     Size  Location     Type
 16921 ;;  sw              1    1[BANK0 ] unsigned char 
 16922 ;; Return value:  Size  Location     Type
 16923 ;;		None               void
 16924 ;; Registers used:
 16925 ;;		wreg
 16926 ;; Tracked objects:
 16927 ;;		On entry : 0/0
 16928 ;;		On exit  : 0/0
 16929 ;;		Unchanged: 0/0
 16930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16932 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16933 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16934 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16935 ;;Total ram usage:        2 bytes
 16936 ;; Hardware stack levels used:    1
 16937 ;; Hardware stack levels required when called:    5
 16938 ;; This function calls:
 16939 ;;		Nothing
 16940 ;; This function is called by:
 16941 ;;		_DlyOff_Initialization
 16942 ;;		_DlyOff_Main
 16943 ;;		_setDelayOff_GO
 16944 ;; This function uses a non-reentrant model
 16945 ;;
 16946                           
 16947                           
 16948                           ;psect for function _DelayOffPointSelect
 16949  1CA6                     _DelayOffPointSelect:	
 16950                           
 16951                           ;incstack = 0
 16952                           ; Regs used in _DelayOffPointSelect: [wreg]
 16953                           ;DelayOffPointSelect@sw stored from wreg
 16954  1CA6  0020               	movlb	0	; select bank0
 16955  1CA7  00A1               	movwf	DelayOffPointSelect@sw
 16956                           
 16957                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16958  1CA8  0821               	movf	DelayOffPointSelect@sw,w
 16959  1CA9  3A01               	xorlw	1
 16960  1CAA  1D03               	skipz
 16961  1CAB  2CB1               	goto	l6004
 16962                           
 16963                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16964  1CAC  306C               	movlw	_DlySw1& (0+255)
 16965  1CAD  00A0               	movwf	??_DelayOffPointSelect
 16966  1CAE  0820               	movf	??_DelayOffPointSelect,w
 16967  1CAF  00F8               	movwf	_DelayOff
 16968                           
 16969                           ;DelayOff_B1.c: 11: }
 16970  1CB0  0008               	return
 16971  1CB1                     l6004:	
 16972                           
 16973                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 16974  1CB1  0821               	movf	DelayOffPointSelect@sw,w
 16975  1CB2  3A02               	xorlw	2
 16976  1CB3  1D03               	skipz
 16977  1CB4  0008               	return
 16978                           
 16979                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 16980  1CB5  306E               	movlw	_DlySw2& (0+255)
 16981  1CB6  00A0               	movwf	??_DelayOffPointSelect
 16982  1CB7  0820               	movf	??_DelayOffPointSelect,w
 16983  1CB8  00F8               	movwf	_DelayOff
 16984  1CB9  0008               	return
 16985  1CBA                     __end_of_DelayOffPointSelect:	
 16986                           
 16987                           	psect	text108
 16988  1CF7                     __ptext108:	
 16989 ;; *************** function _CC2500_PowerOnInitial *****************
 16990 ;; Defined at:
 16991 ;;		line 122 in file "../src/CC2500_B1.c"
 16992 ;; Parameters:    Size  Location     Type
 16993 ;;		None
 16994 ;; Auto vars:     Size  Location     Type
 16995 ;;		None
 16996 ;; Return value:  Size  Location     Type
 16997 ;;		None               void
 16998 ;; Registers used:
 16999 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17000 ;; Tracked objects:
 17001 ;;		On entry : 0/0
 17002 ;;		On exit  : 0/0
 17003 ;;		Unchanged: 0/0
 17004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17009 ;;Total ram usage:        0 bytes
 17010 ;; Hardware stack levels used:    1
 17011 ;; Hardware stack levels required when called:    8
 17012 ;; This function calls:
 17013 ;;		_CC2500_ClearRXFIFO
 17014 ;;		_CC2500_ClearTXFIFO
 17015 ;;		_CC2500_FrequencyCabr
 17016 ;;		_CC2500_InitPATable
 17017 ;;		_CC2500_InitSetREG
 17018 ;;		_CC2500_PowerRST
 17019 ;;		_CC2500_SIDLEMode
 17020 ;; This function is called by:
 17021 ;;		_main
 17022 ;; This function uses a non-reentrant model
 17023 ;;
 17024                           
 17025                           
 17026                           ;psect for function _CC2500_PowerOnInitial
 17027  1CF7                     _CC2500_PowerOnInitial:	
 17028                           
 17029                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 17030                           
 17031                           ;incstack = 0
 17032                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17033  1CF7  3193  2340  319C   	fcall	_CC2500_PowerRST
 17034                           
 17035                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 17036  1CFA  3190  2068  319C   	fcall	_CC2500_InitSetREG
 17037                           
 17038                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 17039  1CFD  319E  263B  319C   	fcall	_CC2500_InitPATable
 17040                           
 17041                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 17042  1D00  319A  2299  319C   	fcall	_CC2500_ClearTXFIFO
 17043                           
 17044                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 17045  1D03  319A  2295  319C   	fcall	_CC2500_ClearRXFIFO
 17046                           
 17047                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 17048  1D06  319B  2311  319C   	fcall	_CC2500_FrequencyCabr
 17049                           
 17050                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 17051  1D09  319A  229D         	fcall	_CC2500_SIDLEMode
 17052  1D0B  0008               	return
 17053  1D0C                     __end_of_CC2500_PowerOnInitial:	
 17054                           
 17055                           	psect	text109
 17056  1A9D                     __ptext109:	
 17057 ;; *************** function _CC2500_SIDLEMode *****************
 17058 ;; Defined at:
 17059 ;;		line 212 in file "../src/CC2500_B1.c"
 17060 ;; Parameters:    Size  Location     Type
 17061 ;;		None
 17062 ;; Auto vars:     Size  Location     Type
 17063 ;;		None
 17064 ;; Return value:  Size  Location     Type
 17065 ;;		None               void
 17066 ;; Registers used:
 17067 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17068 ;; Tracked objects:
 17069 ;;		On entry : 0/0
 17070 ;;		On exit  : 0/0
 17071 ;;		Unchanged: 0/0
 17072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17077 ;;Total ram usage:        0 bytes
 17078 ;; Hardware stack levels used:    1
 17079 ;; Hardware stack levels required when called:    7
 17080 ;; This function calls:
 17081 ;;		_CC2500_WriteCommand
 17082 ;; This function is called by:
 17083 ;;		_CC2500_PowerOnInitial
 17084 ;; This function uses a non-reentrant model
 17085 ;;
 17086                           
 17087                           
 17088                           ;psect for function _CC2500_SIDLEMode
 17089  1A9D                     _CC2500_SIDLEMode:	
 17090                           
 17091                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 17092                           
 17093                           ;incstack = 0
 17094                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17095  1A9D  3036               	movlw	54
 17096  1A9E  319D  2595         	fcall	_CC2500_WriteCommand
 17097  1AA0  0008               	return
 17098  1AA1                     __end_of_CC2500_SIDLEMode:	
 17099                           
 17100                           	psect	text110
 17101  1340                     __ptext110:	
 17102 ;; *************** function _CC2500_PowerRST *****************
 17103 ;; Defined at:
 17104 ;;		line 135 in file "../src/CC2500_B1.c"
 17105 ;; Parameters:    Size  Location     Type
 17106 ;;		None
 17107 ;; Auto vars:     Size  Location     Type
 17108 ;;		None
 17109 ;; Return value:  Size  Location     Type
 17110 ;;		None               void
 17111 ;; Registers used:
 17112 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17113 ;; Tracked objects:
 17114 ;;		On entry : 0/0
 17115 ;;		On exit  : 0/0
 17116 ;;		Unchanged: 0/0
 17117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17120 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17121 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17122 ;;Total ram usage:        1 bytes
 17123 ;; Hardware stack levels used:    1
 17124 ;; Hardware stack levels required when called:    6
 17125 ;; This function calls:
 17126 ;;		_CC2500_WriteByte
 17127 ;;		_DelayTime_1us
 17128 ;;		_Timeout_Counter
 17129 ;;		_set_TimeoutCleared
 17130 ;; This function is called by:
 17131 ;;		_CC2500_PowerOnInitial
 17132 ;; This function uses a non-reentrant model
 17133 ;;
 17134                           
 17135                           
 17136                           ;psect for function _CC2500_PowerRST
 17137  1340                     _CC2500_PowerRST:	
 17138                           
 17139                           ;CC2500_B1.c: 136: RC1 = 0;
 17140                           
 17141                           ;incstack = 0
 17142                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17143  1340  0020               	movlb	0	; select bank0
 17144  1341  108E               	bcf	14,1	;volatile
 17145                           
 17146                           ;CC2500_B1.c: 137: RC0 = 0;
 17147  1342  100E               	bcf	14,0	;volatile
 17148                           
 17149                           ;CC2500_B1.c: 138: RC4 = 1;
 17150  1343  160E               	bsf	14,4	;volatile
 17151                           
 17152                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 17153  1344  300A               	movlw	10
 17154  1345  00A0               	movwf	DelayTime_1us@count
 17155  1346  3000               	movlw	0
 17156  1347  00A1               	movwf	DelayTime_1us@count+1
 17157  1348  319F  278A  3193   	fcall	_DelayTime_1us
 17158                           
 17159                           ;CC2500_B1.c: 140: RC4 = 0;
 17160  134B  0020               	movlb	0	; select bank0
 17161  134C  120E               	bcf	14,4	;volatile
 17162                           
 17163                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 17164  134D  300A               	movlw	10
 17165  134E  00A0               	movwf	DelayTime_1us@count
 17166  134F  3000               	movlw	0
 17167  1350  00A1               	movwf	DelayTime_1us@count+1
 17168  1351  319F  278A  3193   	fcall	_DelayTime_1us
 17169                           
 17170                           ;CC2500_B1.c: 142: RC4 = 1;
 17171  1354  0020               	movlb	0	; select bank0
 17172  1355  160E               	bsf	14,4	;volatile
 17173                           
 17174                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 17175  1356  3028               	movlw	40
 17176  1357  00A0               	movwf	DelayTime_1us@count
 17177  1358  3000               	movlw	0
 17178  1359  00A1               	movwf	DelayTime_1us@count+1
 17179  135A  319F  278A  3193   	fcall	_DelayTime_1us
 17180                           
 17181                           ;CC2500_B1.c: 144: RC4 = 0;
 17182  135D  0020               	movlb	0	; select bank0
 17183  135E  120E               	bcf	14,4	;volatile
 17184                           
 17185                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 17186  135F  3030               	movlw	48
 17187  1360  00A6               	movwf	??_CC2500_PowerRST
 17188  1361  0826               	movf	??_CC2500_PowerRST,w
 17189  1362  0021               	movlb	1	; select bank1
 17190  1363  00CE               	movwf	_SPI0Buffer^(0+128)
 17191                           
 17192                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 17193  1364  2B68               	goto	l7050
 17194  1365                     l7048:	
 17195                           
 17196                           ;CC2500_B1.c: 147: Timeout_Counter();
 17197  1365  319C  24E2  3193   	fcall	_Timeout_Counter
 17198  1368                     l7050:	
 17199  1368  0020               	movlb	0	; select bank0
 17200  1369  1D0E               	btfss	14,2	;volatile
 17201  136A  2B6E               	goto	l7054
 17202  136B  0021               	movlb	1	; select bank1
 17203  136C  1D2D               	btfss	(_myMain^(0+128)+13),2
 17204  136D  2B65               	goto	l7048
 17205  136E                     l7054:	
 17206                           
 17207                           ;CC2500_B1.c: 148: };
 17208                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 17209  136E  319A  22A5  3193   	fcall	_set_TimeoutCleared
 17210                           
 17211                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 17212  1371  319D  2563  3193   	fcall	_CC2500_WriteByte
 17213                           
 17214                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 17215  1374  2B78               	goto	l7060
 17216  1375                     l7058:	
 17217                           
 17218                           ;CC2500_B1.c: 152: Timeout_Counter();
 17219  1375  319C  24E2  3193   	fcall	_Timeout_Counter
 17220  1378                     l7060:	
 17221  1378  0020               	movlb	0	; select bank0
 17222  1379  1D0E               	btfss	14,2	;volatile
 17223  137A  2B7E               	goto	l7064
 17224  137B  0021               	movlb	1	; select bank1
 17225  137C  1D2D               	btfss	(_myMain^(0+128)+13),2
 17226  137D  2B75               	goto	l7058
 17227  137E                     l7064:	
 17228                           
 17229                           ;CC2500_B1.c: 153: };
 17230                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 17231  137E  319A  22A5         	fcall	_set_TimeoutCleared
 17232                           
 17233                           ;CC2500_B1.c: 155: RC0 = 0;
 17234  1380  0020               	movlb	0	; select bank0
 17235  1381  100E               	bcf	14,0	;volatile
 17236                           
 17237                           ;CC2500_B1.c: 156: RC4 = 1;
 17238  1382  160E               	bsf	14,4	;volatile
 17239  1383  0008               	return
 17240  1384                     __end_of_CC2500_PowerRST:	
 17241                           
 17242                           	psect	text111
 17243  1068                     __ptext111:	
 17244 ;; *************** function _CC2500_InitSetREG *****************
 17245 ;; Defined at:
 17246 ;;		line 162 in file "../src/CC2500_B1.c"
 17247 ;; Parameters:    Size  Location     Type
 17248 ;;		None
 17249 ;; Auto vars:     Size  Location     Type
 17250 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17251 ;;  temp2           1    7[BANK0 ] unsigned char 
 17252 ;;  temp1           1    6[BANK0 ] unsigned char 
 17253 ;; Return value:  Size  Location     Type
 17254 ;;		None               void
 17255 ;; Registers used:
 17256 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17257 ;; Tracked objects:
 17258 ;;		On entry : 0/0
 17259 ;;		On exit  : 0/0
 17260 ;;		Unchanged: 0/0
 17261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17263 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17264 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17265 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17266 ;;Total ram usage:        4 bytes
 17267 ;; Hardware stack levels used:    1
 17268 ;; Hardware stack levels required when called:    7
 17269 ;; This function calls:
 17270 ;;		_CC2500_WriteREG
 17271 ;; This function is called by:
 17272 ;;		_CC2500_PowerOnInitial
 17273 ;; This function uses a non-reentrant model
 17274 ;;
 17275                           
 17276                           
 17277                           ;psect for function _CC2500_InitSetREG
 17278  1068                     _CC2500_InitSetREG:	
 17279                           
 17280                           ;CC2500_B1.c: 163: unsigned char loop_c;
 17281                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 17282                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 17283                           
 17284                           ;incstack = 0
 17285                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17286  1068  0020               	movlb	0	; select bank0
 17287  1069  01A8               	clrf	CC2500_InitSetREG@loop_c
 17288  106A                     L9:	
 17289  106A  302F               	movlw	47
 17290  106B  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17291  106C  1803               	btfsc	3,0
 17292  106D  0008               	return
 17293                           
 17294                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 17295  106E  0828               	movf	CC2500_InitSetREG@loop_c,w
 17296  106F  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17297  1070  0084               	movwf	4
 17298  1071  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17299  1072  1803               	skipnc
 17300  1073  3E01               	addlw	1
 17301  1074  0085               	movwf	5
 17302  1075  0800               	movf	0,w	;code access
 17303  1076  00A5               	movwf	??_CC2500_InitSetREG
 17304  1077  0825               	movf	??_CC2500_InitSetREG,w
 17305  1078  00A6               	movwf	CC2500_InitSetREG@temp1
 17306                           
 17307                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 17308  1079  0828               	movf	CC2500_InitSetREG@loop_c,w
 17309  107A  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17310  107B  0084               	movwf	4
 17311  107C  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17312  107D  1803               	skipnc
 17313  107E  3E01               	addlw	1
 17314  107F  0085               	movwf	5
 17315  1080  0800               	movf	0,w	;code access
 17316  1081  00A5               	movwf	??_CC2500_InitSetREG
 17317  1082  0825               	movf	??_CC2500_InitSetREG,w
 17318  1083  00A7               	movwf	CC2500_InitSetREG@temp2
 17319                           
 17320                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 17321  1084  0827               	movf	CC2500_InitSetREG@temp2,w
 17322  1085  00A5               	movwf	??_CC2500_InitSetREG
 17323  1086  0825               	movf	??_CC2500_InitSetREG,w
 17324  1087  00A2               	movwf	CC2500_WriteREG@value
 17325  1088  0826               	movf	CC2500_InitSetREG@temp1,w
 17326  1089  319E  26FB  3190   	fcall	_CC2500_WriteREG
 17327  108C  3001               	movlw	1
 17328  108D  0020               	movlb	0	; select bank0
 17329  108E  00A5               	movwf	??_CC2500_InitSetREG
 17330  108F  0825               	movf	??_CC2500_InitSetREG,w
 17331  1090  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17332  1091  286A               	goto	L9
 17333  1092                     __end_of_CC2500_InitSetREG:	
 17334                           
 17335                           	psect	text112
 17336  1E3B                     __ptext112:	
 17337 ;; *************** function _CC2500_InitPATable *****************
 17338 ;; Defined at:
 17339 ;;		line 177 in file "../src/CC2500_B1.c"
 17340 ;; Parameters:    Size  Location     Type
 17341 ;;		None
 17342 ;; Auto vars:     Size  Location     Type
 17343 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17344 ;;  temp            1    6[BANK0 ] unsigned char 
 17345 ;; Return value:  Size  Location     Type
 17346 ;;		None               void
 17347 ;; Registers used:
 17348 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17349 ;; Tracked objects:
 17350 ;;		On entry : 0/0
 17351 ;;		On exit  : 0/0
 17352 ;;		Unchanged: 0/0
 17353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17355 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17356 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17357 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17358 ;;Total ram usage:        3 bytes
 17359 ;; Hardware stack levels used:    1
 17360 ;; Hardware stack levels required when called:    7
 17361 ;; This function calls:
 17362 ;;		_CC2500_WriteREG
 17363 ;; This function is called by:
 17364 ;;		_CC2500_PowerOnInitial
 17365 ;; This function uses a non-reentrant model
 17366 ;;
 17367                           
 17368                           
 17369                           ;psect for function _CC2500_InitPATable
 17370  1E3B                     _CC2500_InitPATable:	
 17371                           
 17372                           ;CC2500_B1.c: 178: unsigned char loop_d;
 17373                           ;CC2500_B1.c: 179: unsigned char temp;
 17374                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 17375                           
 17376                           ;incstack = 0
 17377                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17378  1E3B  0020               	movlb	0	; select bank0
 17379  1E3C  01A7               	clrf	CC2500_InitPATable@loop_d
 17380  1E3D                     L10:	
 17381  1E3D  3008               	movlw	8
 17382  1E3E  0227               	subwf	CC2500_InitPATable@loop_d,w
 17383  1E3F  1803               	btfsc	3,0
 17384  1E40  0008               	return
 17385                           
 17386                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 17387  1E41  0827               	movf	CC2500_InitPATable@loop_d,w
 17388  1E42  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17389  1E43  0084               	movwf	4
 17390  1E44  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17391  1E45  1803               	skipnc
 17392  1E46  3E01               	addlw	1
 17393  1E47  0085               	movwf	5
 17394  1E48  0800               	movf	0,w	;code access
 17395  1E49  00A5               	movwf	??_CC2500_InitPATable
 17396  1E4A  0825               	movf	??_CC2500_InitPATable,w
 17397  1E4B  00A6               	movwf	CC2500_InitPATable@temp
 17398                           
 17399                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 17400  1E4C  0826               	movf	CC2500_InitPATable@temp,w
 17401  1E4D  00A5               	movwf	??_CC2500_InitPATable
 17402  1E4E  0825               	movf	??_CC2500_InitPATable,w
 17403  1E4F  00A2               	movwf	CC2500_WriteREG@value
 17404  1E50  303E               	movlw	62
 17405  1E51  319E  26FB  319E   	fcall	_CC2500_WriteREG
 17406  1E54  3001               	movlw	1
 17407  1E55  0020               	movlb	0	; select bank0
 17408  1E56  00A5               	movwf	??_CC2500_InitPATable
 17409  1E57  0825               	movf	??_CC2500_InitPATable,w
 17410  1E58  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17411  1E59  2E3D               	goto	L10
 17412  1E5A                     __end_of_CC2500_InitPATable:	
 17413                           
 17414                           	psect	text113
 17415  1EFB                     __ptext113:	
 17416 ;; *************** function _CC2500_WriteREG *****************
 17417 ;; Defined at:
 17418 ;;		line 254 in file "../src/CC2500_B1.c"
 17419 ;; Parameters:    Size  Location     Type
 17420 ;;  w_addr          1    wreg     unsigned char 
 17421 ;;  value           1    2[BANK0 ] unsigned char 
 17422 ;; Auto vars:     Size  Location     Type
 17423 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17424 ;; Return value:  Size  Location     Type
 17425 ;;		None               void
 17426 ;; Registers used:
 17427 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17428 ;; Tracked objects:
 17429 ;;		On entry : 0/0
 17430 ;;		On exit  : 0/0
 17431 ;;		Unchanged: 0/0
 17432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17433 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17434 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17435 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17436 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17437 ;;Total ram usage:        3 bytes
 17438 ;; Hardware stack levels used:    1
 17439 ;; Hardware stack levels required when called:    6
 17440 ;; This function calls:
 17441 ;;		_CC2500_WriteByte
 17442 ;;		_Timeout_Counter
 17443 ;;		_set_TimeoutCleared
 17444 ;; This function is called by:
 17445 ;;		_CC2500_InitSetREG
 17446 ;;		_CC2500_InitPATable
 17447 ;; This function uses a non-reentrant model
 17448 ;;
 17449                           
 17450                           
 17451                           ;psect for function _CC2500_WriteREG
 17452  1EFB                     _CC2500_WriteREG:	
 17453                           
 17454                           ;incstack = 0
 17455                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17456                           ;CC2500_WriteREG@w_addr stored from wreg
 17457  1EFB  0020               	movlb	0	; select bank0
 17458  1EFC  00A4               	movwf	CC2500_WriteREG@w_addr
 17459                           
 17460                           ;CC2500_B1.c: 255: RC4 = 0;
 17461  1EFD  120E               	bcf	14,4	;volatile
 17462                           
 17463                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 17464  1EFE  0824               	movf	CC2500_WriteREG@w_addr,w
 17465  1EFF  00A3               	movwf	??_CC2500_WriteREG
 17466  1F00  0823               	movf	??_CC2500_WriteREG,w
 17467  1F01  0021               	movlb	1	; select bank1
 17468  1F02  00CE               	movwf	_SPI0Buffer^(0+128)
 17469                           
 17470                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 17471  1F03  2F07               	goto	l6696
 17472  1F04                     l6694:	
 17473                           
 17474                           ;CC2500_B1.c: 258: Timeout_Counter();
 17475  1F04  319C  24E2  319E   	fcall	_Timeout_Counter
 17476  1F07                     l6696:	
 17477  1F07  0020               	movlb	0	; select bank0
 17478  1F08  1D0E               	btfss	14,2	;volatile
 17479  1F09  2F0D               	goto	l6700
 17480  1F0A  0021               	movlb	1	; select bank1
 17481  1F0B  1D2D               	btfss	(_myMain^(0+128)+13),2
 17482  1F0C  2F04               	goto	l6694
 17483  1F0D                     l6700:	
 17484                           
 17485                           ;CC2500_B1.c: 259: };
 17486                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 17487  1F0D  319A  22A5  319E   	fcall	_set_TimeoutCleared
 17488                           
 17489                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 17490  1F10  319D  2563  319E   	fcall	_CC2500_WriteByte
 17491                           
 17492                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 17493  1F13  0020               	movlb	0	; select bank0
 17494  1F14  0822               	movf	CC2500_WriteREG@value,w
 17495  1F15  00A3               	movwf	??_CC2500_WriteREG
 17496  1F16  0823               	movf	??_CC2500_WriteREG,w
 17497  1F17  0021               	movlb	1	; select bank1
 17498  1F18  00CE               	movwf	_SPI0Buffer^(0+128)
 17499                           
 17500                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 17501  1F19  319D  2563         	fcall	_CC2500_WriteByte
 17502                           
 17503                           ;CC2500_B1.c: 265: RC4 = 1;
 17504  1F1B  0020               	movlb	0	; select bank0
 17505  1F1C  160E               	bsf	14,4	;volatile
 17506  1F1D  0008               	return
 17507  1F1E                     __end_of_CC2500_WriteREG:	
 17508                           
 17509                           	psect	text114
 17510  1B11                     __ptext114:	
 17511 ;; *************** function _CC2500_FrequencyCabr *****************
 17512 ;; Defined at:
 17513 ;;		line 204 in file "../src/CC2500_B1.c"
 17514 ;; Parameters:    Size  Location     Type
 17515 ;;		None
 17516 ;; Auto vars:     Size  Location     Type
 17517 ;;		None
 17518 ;; Return value:  Size  Location     Type
 17519 ;;		None               void
 17520 ;; Registers used:
 17521 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17522 ;; Tracked objects:
 17523 ;;		On entry : 0/0
 17524 ;;		On exit  : 0/0
 17525 ;;		Unchanged: 0/0
 17526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17531 ;;Total ram usage:        0 bytes
 17532 ;; Hardware stack levels used:    1
 17533 ;; Hardware stack levels required when called:    7
 17534 ;; This function calls:
 17535 ;;		_CC2500_WriteCommand
 17536 ;;		_DelayTime_1us
 17537 ;; This function is called by:
 17538 ;;		_CC2500_PowerOnInitial
 17539 ;; This function uses a non-reentrant model
 17540 ;;
 17541                           
 17542                           
 17543                           ;psect for function _CC2500_FrequencyCabr
 17544  1B11                     _CC2500_FrequencyCabr:	
 17545                           
 17546                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 17547                           
 17548                           ;incstack = 0
 17549                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17550  1B11  3033               	movlw	51
 17551  1B12  319D  2595  319B   	fcall	_CC2500_WriteCommand
 17552                           
 17553                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 17554  1B15  30E8               	movlw	232
 17555  1B16  0020               	movlb	0	; select bank0
 17556  1B17  00A0               	movwf	DelayTime_1us@count
 17557  1B18  3003               	movlw	3
 17558  1B19  00A1               	movwf	DelayTime_1us@count+1
 17559  1B1A  319F  278A         	fcall	_DelayTime_1us
 17560  1B1C  0008               	return
 17561  1B1D                     __end_of_CC2500_FrequencyCabr:	
 17562                           
 17563                           	psect	text115
 17564  1F8A                     __ptext115:	
 17565 ;; *************** function _DelayTime_1us *****************
 17566 ;; Defined at:
 17567 ;;		line 323 in file "../src/CC2500_B1.c"
 17568 ;; Parameters:    Size  Location     Type
 17569 ;;  count           2    0[BANK0 ] int 
 17570 ;; Auto vars:     Size  Location     Type
 17571 ;;  j               2    4[BANK0 ] unsigned int 
 17572 ;;  i               2    2[BANK0 ] unsigned int 
 17573 ;; Return value:  Size  Location     Type
 17574 ;;		None               void
 17575 ;; Registers used:
 17576 ;;		wreg, status,2
 17577 ;; Tracked objects:
 17578 ;;		On entry : 0/0
 17579 ;;		On exit  : 0/0
 17580 ;;		Unchanged: 0/0
 17581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17582 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17583 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17585 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17586 ;;Total ram usage:        6 bytes
 17587 ;; Hardware stack levels used:    1
 17588 ;; Hardware stack levels required when called:    5
 17589 ;; This function calls:
 17590 ;;		Nothing
 17591 ;; This function is called by:
 17592 ;;		_CC2500_PowerRST
 17593 ;;		_CC2500_FrequencyCabr
 17594 ;; This function uses a non-reentrant model
 17595 ;;
 17596                           
 17597                           
 17598                           ;psect for function _DelayTime_1us
 17599  1F8A                     _DelayTime_1us:	
 17600                           
 17601                           ;CC2500_B1.c: 324: unsigned int i, j;
 17602                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 17603                           
 17604                           ;incstack = 0
 17605                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17606  1F8A  3001               	movlw	1
 17607  1F8B  0020               	movlb	0	; select bank0
 17608  1F8C  00A2               	movwf	DelayTime_1us@i
 17609  1F8D  3000               	movlw	0
 17610  1F8E  00A3               	movwf	DelayTime_1us@i+1
 17611  1F8F                     l374:	
 17612  1F8F  0821               	movf	DelayTime_1us@count+1,w
 17613  1F90  0223               	subwf	DelayTime_1us@i+1,w
 17614  1F91  1D03               	skipz
 17615  1F92  2F95               	goto	u5835
 17616  1F93  0820               	movf	DelayTime_1us@count,w
 17617  1F94  0222               	subwf	DelayTime_1us@i,w
 17618  1F95                     u5835:	
 17619  1F95  1803               	btfsc	3,0
 17620  1F96  0008               	return
 17621                           
 17622                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 17623  1F97  01A4               	clrf	DelayTime_1us@j
 17624  1F98  01A5               	clrf	DelayTime_1us@j+1
 17625  1F99  3000               	movlw	0
 17626  1F9A  0225               	subwf	DelayTime_1us@j+1,w
 17627  1F9B  3002               	movlw	2
 17628  1F9C  1903               	skipnz
 17629  1F9D  0224               	subwf	DelayTime_1us@j,w
 17630  1F9E  1803               	btfsc	3,0
 17631  1F9F  2FAB               	goto	l6688
 17632  1FA0                     l6686:	
 17633  1FA0  3001               	movlw	1
 17634  1FA1  07A4               	addwf	DelayTime_1us@j,f
 17635  1FA2  3000               	movlw	0
 17636  1FA3  3DA5               	addwfc	DelayTime_1us@j+1,f
 17637  1FA4  3000               	movlw	0
 17638  1FA5  0225               	subwf	DelayTime_1us@j+1,w
 17639  1FA6  3002               	movlw	2
 17640  1FA7  1903               	skipnz
 17641  1FA8  0224               	subwf	DelayTime_1us@j,w
 17642  1FA9  1C03               	skipc
 17643  1FAA  2FA0               	goto	l6686
 17644  1FAB                     l6688:	
 17645  1FAB  3001               	movlw	1
 17646  1FAC  07A2               	addwf	DelayTime_1us@i,f
 17647  1FAD  3000               	movlw	0
 17648  1FAE  3DA3               	addwfc	DelayTime_1us@i+1,f
 17649  1FAF  2F8F               	goto	l374
 17650  1FB0                     __end_of_DelayTime_1us:	
 17651                           
 17652                           	psect	text116
 17653  1A99                     __ptext116:	
 17654 ;; *************** function _CC2500_ClearTXFIFO *****************
 17655 ;; Defined at:
 17656 ;;		line 190 in file "../src/CC2500_B1.c"
 17657 ;; Parameters:    Size  Location     Type
 17658 ;;		None
 17659 ;; Auto vars:     Size  Location     Type
 17660 ;;		None
 17661 ;; Return value:  Size  Location     Type
 17662 ;;		None               void
 17663 ;; Registers used:
 17664 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17665 ;; Tracked objects:
 17666 ;;		On entry : 0/0
 17667 ;;		On exit  : 0/0
 17668 ;;		Unchanged: 0/0
 17669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17674 ;;Total ram usage:        0 bytes
 17675 ;; Hardware stack levels used:    1
 17676 ;; Hardware stack levels required when called:    7
 17677 ;; This function calls:
 17678 ;;		_CC2500_WriteCommand
 17679 ;; This function is called by:
 17680 ;;		_CC2500_PowerOnInitial
 17681 ;; This function uses a non-reentrant model
 17682 ;;
 17683                           
 17684                           
 17685                           ;psect for function _CC2500_ClearTXFIFO
 17686  1A99                     _CC2500_ClearTXFIFO:	
 17687                           
 17688                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 17689                           
 17690                           ;incstack = 0
 17691                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17692  1A99  303B               	movlw	59
 17693  1A9A  319D  2595         	fcall	_CC2500_WriteCommand
 17694  1A9C  0008               	return
 17695  1A9D                     __end_of_CC2500_ClearTXFIFO:	
 17696                           
 17697                           	psect	text117
 17698  1A95                     __ptext117:	
 17699 ;; *************** function _CC2500_ClearRXFIFO *****************
 17700 ;; Defined at:
 17701 ;;		line 197 in file "../src/CC2500_B1.c"
 17702 ;; Parameters:    Size  Location     Type
 17703 ;;		None
 17704 ;; Auto vars:     Size  Location     Type
 17705 ;;		None
 17706 ;; Return value:  Size  Location     Type
 17707 ;;		None               void
 17708 ;; Registers used:
 17709 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17710 ;; Tracked objects:
 17711 ;;		On entry : 0/0
 17712 ;;		On exit  : 0/0
 17713 ;;		Unchanged: 0/0
 17714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17719 ;;Total ram usage:        0 bytes
 17720 ;; Hardware stack levels used:    1
 17721 ;; Hardware stack levels required when called:    7
 17722 ;; This function calls:
 17723 ;;		_CC2500_WriteCommand
 17724 ;; This function is called by:
 17725 ;;		_CC2500_PowerOnInitial
 17726 ;; This function uses a non-reentrant model
 17727 ;;
 17728                           
 17729                           
 17730                           ;psect for function _CC2500_ClearRXFIFO
 17731  1A95                     _CC2500_ClearRXFIFO:	
 17732                           
 17733                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 17734                           
 17735                           ;incstack = 0
 17736                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17737  1A95  303A               	movlw	58
 17738  1A96  319D  2595         	fcall	_CC2500_WriteCommand
 17739  1A98  0008               	return
 17740  1A99                     __end_of_CC2500_ClearRXFIFO:	
 17741                           
 17742                           	psect	text118
 17743  1D95                     __ptext118:	
 17744 ;; *************** function _CC2500_WriteCommand *****************
 17745 ;; Defined at:
 17746 ;;		line 288 in file "../src/CC2500_B1.c"
 17747 ;; Parameters:    Size  Location     Type
 17748 ;;  command         1    wreg     unsigned char 
 17749 ;; Auto vars:     Size  Location     Type
 17750 ;;  command         1    3[BANK0 ] unsigned char 
 17751 ;; Return value:  Size  Location     Type
 17752 ;;		None               void
 17753 ;; Registers used:
 17754 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17755 ;; Tracked objects:
 17756 ;;		On entry : 0/0
 17757 ;;		On exit  : 0/0
 17758 ;;		Unchanged: 0/0
 17759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17761 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17762 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17763 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17764 ;;Total ram usage:        2 bytes
 17765 ;; Hardware stack levels used:    1
 17766 ;; Hardware stack levels required when called:    6
 17767 ;; This function calls:
 17768 ;;		_CC2500_WriteByte
 17769 ;;		_Timeout_Counter
 17770 ;;		_set_TimeoutCleared
 17771 ;; This function is called by:
 17772 ;;		_CC2500_TxData
 17773 ;;		_CC2500_ClearTXFIFO
 17774 ;;		_CC2500_ClearRXFIFO
 17775 ;;		_CC2500_FrequencyCabr
 17776 ;;		_CC2500_SIDLEMode
 17777 ;;		_setRF_Main
 17778 ;;		_RF_RxDisable
 17779 ;; This function uses a non-reentrant model
 17780 ;;
 17781                           
 17782                           
 17783                           ;psect for function _CC2500_WriteCommand
 17784  1D95                     _CC2500_WriteCommand:	
 17785                           
 17786                           ;incstack = 0
 17787                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17788                           ;CC2500_WriteCommand@command stored from wreg
 17789  1D95  0020               	movlb	0	; select bank0
 17790  1D96  00A3               	movwf	CC2500_WriteCommand@command
 17791                           
 17792                           ;CC2500_B1.c: 289: RC4 = 0;
 17793  1D97  120E               	bcf	14,4	;volatile
 17794                           
 17795                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 17796  1D98  0823               	movf	CC2500_WriteCommand@command,w
 17797  1D99  00A2               	movwf	??_CC2500_WriteCommand
 17798  1D9A  0822               	movf	??_CC2500_WriteCommand,w
 17799  1D9B  0021               	movlb	1	; select bank1
 17800  1D9C  00CE               	movwf	_SPI0Buffer^(0+128)
 17801                           
 17802                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 17803  1D9D  2DA1               	goto	l6398
 17804  1D9E                     l6396:	
 17805                           
 17806                           ;CC2500_B1.c: 293: Timeout_Counter();
 17807  1D9E  319C  24E2  319D   	fcall	_Timeout_Counter
 17808  1DA1                     l6398:	
 17809  1DA1  0020               	movlb	0	; select bank0
 17810  1DA2  1D0E               	btfss	14,2	;volatile
 17811  1DA3  2DA7               	goto	l6402
 17812  1DA4  0021               	movlb	1	; select bank1
 17813  1DA5  1D2D               	btfss	(_myMain^(0+128)+13),2
 17814  1DA6  2D9E               	goto	l6396
 17815  1DA7                     l6402:	
 17816                           
 17817                           ;CC2500_B1.c: 294: };
 17818                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 17819  1DA7  319A  22A5  319D   	fcall	_set_TimeoutCleared
 17820                           
 17821                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 17822  1DAA  319D  2563         	fcall	_CC2500_WriteByte
 17823                           
 17824                           ;CC2500_B1.c: 298: RC4 = 1;
 17825  1DAC  0020               	movlb	0	; select bank0
 17826  1DAD  160E               	bsf	14,4	;volatile
 17827  1DAE  0008               	return
 17828  1DAF                     __end_of_CC2500_WriteCommand:	
 17829                           
 17830                           	psect	text119
 17831  1AA5                     __ptext119:	
 17832 ;; *************** function _set_TimeoutCleared *****************
 17833 ;; Defined at:
 17834 ;;		line 270 in file "../src/main_B1.c"
 17835 ;; Parameters:    Size  Location     Type
 17836 ;;		None
 17837 ;; Auto vars:     Size  Location     Type
 17838 ;;		None
 17839 ;; Return value:  Size  Location     Type
 17840 ;;		None               void
 17841 ;; Registers used:
 17842 ;;		status,2
 17843 ;; Tracked objects:
 17844 ;;		On entry : 0/0
 17845 ;;		On exit  : 0/0
 17846 ;;		Unchanged: 0/0
 17847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17852 ;;Total ram usage:        0 bytes
 17853 ;; Hardware stack levels used:    1
 17854 ;; Hardware stack levels required when called:    5
 17855 ;; This function calls:
 17856 ;;		Nothing
 17857 ;; This function is called by:
 17858 ;;		_CC2500_TxData
 17859 ;;		_CC2500_RxData
 17860 ;;		_CC2500_PowerRST
 17861 ;;		_CC2500_WriteREG
 17862 ;;		_CC2500_WriteCommand
 17863 ;;		_CC2500_ReadStatus
 17864 ;;		_getAD
 17865 ;;		_TouchPower
 17866 ;;		_CC2500_ReadREG
 17867 ;; This function uses a non-reentrant model
 17868 ;;
 17869                           
 17870                           
 17871                           ;psect for function _set_TimeoutCleared
 17872  1AA5                     _set_TimeoutCleared:	
 17873                           
 17874                           ;main_B1.c: 271: myMain.Timeout = 0;
 17875                           
 17876                           ;incstack = 0
 17877                           ; Regs used in _set_TimeoutCleared: [status,2]
 17878  1AA5  0021               	movlb	1	; select bank1
 17879  1AA6  112D               	bcf	(_myMain^(0+128)+13),2
 17880                           
 17881                           ;main_B1.c: 272: myMain.Timeout_Counter = 0;
 17882  1AA7  01AE               	clrf	(_myMain^(0+128)+14)
 17883  1AA8  01AF               	clrf	((_myMain+1)^(0+128)+14)
 17884  1AA9  0008               	return
 17885  1AAA                     __end_of_set_TimeoutCleared:	
 17886                           
 17887                           	psect	text120
 17888  1CE2                     __ptext120:	
 17889 ;; *************** function _Timeout_Counter *****************
 17890 ;; Defined at:
 17891 ;;		line 261 in file "../src/main_B1.c"
 17892 ;; Parameters:    Size  Location     Type
 17893 ;;		None
 17894 ;; Auto vars:     Size  Location     Type
 17895 ;;		None
 17896 ;; Return value:  Size  Location     Type
 17897 ;;		None               void
 17898 ;; Registers used:
 17899 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17900 ;; Tracked objects:
 17901 ;;		On entry : 0/0
 17902 ;;		On exit  : 0/0
 17903 ;;		Unchanged: 0/0
 17904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17909 ;;Total ram usage:        0 bytes
 17910 ;; Hardware stack levels used:    1
 17911 ;; Hardware stack levels required when called:    5
 17912 ;; This function calls:
 17913 ;;		Nothing
 17914 ;; This function is called by:
 17915 ;;		_CC2500_TxData
 17916 ;;		_CC2500_RxData
 17917 ;;		_CC2500_PowerRST
 17918 ;;		_CC2500_WriteREG
 17919 ;;		_CC2500_WriteCommand
 17920 ;;		_CC2500_ReadStatus
 17921 ;;		_getAD
 17922 ;;		_TouchPower
 17923 ;;		_CC2500_ReadREG
 17924 ;; This function uses a non-reentrant model
 17925 ;;
 17926                           
 17927                           
 17928                           ;psect for function _Timeout_Counter
 17929  1CE2                     _Timeout_Counter:	
 17930                           
 17931                           ;main_B1.c: 262: myMain.Timeout_Counter++;
 17932                           
 17933                           ;incstack = 0
 17934                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17935  1CE2  3001               	movlw	1
 17936  1CE3  0021               	movlb	1	; select bank1
 17937  1CE4  07AE               	addwf	(_myMain^(0+128)+14),f
 17938  1CE5  3000               	movlw	0
 17939  1CE6  3DAF               	addwfc	((_myMain+1)^(0+128)+14),f
 17940                           
 17941                           ;main_B1.c: 263: if (myMain.Timeout_Counter == 10000) {
 17942  1CE7  300E               	movlw	14
 17943  1CE8  3EA0               	addlw	_myMain& (0+255)
 17944  1CE9  0086               	movwf	6
 17945  1CEA  0187               	clrf	7
 17946  1CEB  3F40               	moviw [0]fsr1
 17947  1CEC  3A10               	xorlw	16
 17948  1CED  1D03               	skipz
 17949  1CEE  2CF1               	goto	u5235
 17950  1CEF  3F41               	moviw [1]fsr1
 17951  1CF0  3A27               	xorlw	39
 17952  1CF1                     u5235:	
 17953  1CF1  1D03               	skipz
 17954  1CF2  0008               	return
 17955                           
 17956                           ;main_B1.c: 264: myMain.Timeout_Counter = 0;
 17957  1CF3  01AE               	clrf	(_myMain^(0+128)+14)
 17958  1CF4  01AF               	clrf	((_myMain+1)^(0+128)+14)
 17959                           
 17960                           ;main_B1.c: 265: myMain.Timeout = 1;
 17961  1CF5  152D               	bsf	(_myMain^(0+128)+13),2
 17962  1CF6  0008               	return
 17963  1CF7                     __end_of_Timeout_Counter:	
 17964                           
 17965                           	psect	text121
 17966  1D63                     __ptext121:	
 17967 ;; *************** function _CC2500_WriteByte *****************
 17968 ;; Defined at:
 17969 ;;		line 222 in file "../src/CC2500_B1.c"
 17970 ;; Parameters:    Size  Location     Type
 17971 ;;		None
 17972 ;; Auto vars:     Size  Location     Type
 17973 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17974 ;; Return value:  Size  Location     Type
 17975 ;;		None               void
 17976 ;; Registers used:
 17977 ;;		wreg, status,2, status,0
 17978 ;; Tracked objects:
 17979 ;;		On entry : 0/0
 17980 ;;		On exit  : 0/0
 17981 ;;		Unchanged: 0/0
 17982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17984 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17985 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17986 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17987 ;;Total ram usage:        2 bytes
 17988 ;; Hardware stack levels used:    1
 17989 ;; Hardware stack levels required when called:    5
 17990 ;; This function calls:
 17991 ;;		Nothing
 17992 ;; This function is called by:
 17993 ;;		_CC2500_TxData
 17994 ;;		_CC2500_RxData
 17995 ;;		_CC2500_PowerRST
 17996 ;;		_CC2500_WriteREG
 17997 ;;		_CC2500_WriteCommand
 17998 ;;		_CC2500_ReadStatus
 17999 ;;		_CC2500_ReadREG
 18000 ;; This function uses a non-reentrant model
 18001 ;;
 18002                           
 18003                           
 18004                           ;psect for function _CC2500_WriteByte
 18005  1D63                     _CC2500_WriteByte:	
 18006                           
 18007                           ;CC2500_B1.c: 223: unsigned char loop_a;
 18008                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 18009                           
 18010                           ;incstack = 0
 18011                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18012  1D63  0020               	movlb	0	; select bank0
 18013  1D64  01A1               	clrf	CC2500_WriteByte@loop_a
 18014  1D65                     L11:	
 18015  1D65  3008               	movlw	8
 18016  1D66  0221               	subwf	CC2500_WriteByte@loop_a,w
 18017  1D67  1803               	btfsc	3,0
 18018  1D68  0008               	return
 18019                           
 18020                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 18021  1D69  0021               	movlb	1	; select bank1
 18022  1D6A  1FCE               	btfss	_SPI0Buffer^(0+128),7
 18023  1D6B  2D6F               	goto	l330
 18024                           
 18025                           ;CC2500_B1.c: 226: RC0 = 1;
 18026  1D6C  0020               	movlb	0	; select bank0
 18027  1D6D  140E               	bsf	14,0	;volatile
 18028  1D6E  2D71               	goto	l331
 18029  1D6F                     l330:	
 18030                           
 18031                           ;CC2500_B1.c: 227: else
 18032                           ;CC2500_B1.c: 228: RC0 = 0;
 18033  1D6F  0020               	movlb	0	; select bank0
 18034  1D70  100E               	bcf	14,0	;volatile
 18035  1D71                     l331:	
 18036                           
 18037                           ;CC2500_B1.c: 229: RC1 = 1;
 18038  1D71  148E               	bsf	14,1	;volatile
 18039                           
 18040                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 18041  1D72  1003               	clrc
 18042  1D73  0021               	movlb	1	; select bank1
 18043  1D74  0DCE               	rlf	_SPI0Buffer^(0+128),f
 18044                           
 18045                           ;CC2500_B1.c: 231: RC1 = 0;
 18046  1D75  0020               	movlb	0	; select bank0
 18047  1D76  108E               	bcf	14,1	;volatile
 18048  1D77  3001               	movlw	1
 18049  1D78  00A0               	movwf	??_CC2500_WriteByte
 18050  1D79  0820               	movf	??_CC2500_WriteByte,w
 18051  1D7A  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18052  1D7B  2D65               	goto	L11
 18053  1D7C                     __end_of_CC2500_WriteByte:	
 18054                           
 18055                           	psect	text122
 18056  1410                     __ptext122:	
 18057 ;; *************** function _Buzzer_Main *****************
 18058 ;; Defined at:
 18059 ;;		line 46 in file "../src/Buzzer_B1.c"
 18060 ;; Parameters:    Size  Location     Type
 18061 ;;		None
 18062 ;; Auto vars:     Size  Location     Type
 18063 ;;		None
 18064 ;; Return value:  Size  Location     Type
 18065 ;;		None               void
 18066 ;; Registers used:
 18067 ;;		wreg, status,2, status,0
 18068 ;; Tracked objects:
 18069 ;;		On entry : 0/0
 18070 ;;		On exit  : 0/0
 18071 ;;		Unchanged: 0/0
 18072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18075 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18076 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18077 ;;Total ram usage:        1 bytes
 18078 ;; Hardware stack levels used:    1
 18079 ;; Hardware stack levels required when called:    5
 18080 ;; This function calls:
 18081 ;;		Nothing
 18082 ;; This function is called by:
 18083 ;;		_main
 18084 ;; This function uses a non-reentrant model
 18085 ;;
 18086                           
 18087                           
 18088                           ;psect for function _Buzzer_Main
 18089  1410                     _Buzzer_Main:	
 18090                           
 18091                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18092                           
 18093                           ;incstack = 0
 18094                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18095  1410  0021               	movlb	1	; select bank1
 18096  1411  1CB0               	btfss	_Buz1^(0+128),1
 18097  1412  0008               	return
 18098                           
 18099                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18100  1413  3001               	movlw	1
 18101  1414  07B1               	addwf	(_Buz1^(0+128)+1),f
 18102  1415  3000               	movlw	0
 18103  1416  3DB2               	addwfc	((_Buz1+1)^(0+128)+1),f
 18104                           
 18105                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18106  1417  0837               	movf	((_Buz1+1)^(0+128)+6),w
 18107  1418  0232               	subwf	((_Buz1+1)^(0+128)+1),w
 18108  1419  1D03               	skipz
 18109  141A  2C1D               	goto	u7505
 18110  141B  0836               	movf	(_Buz1^(0+128)+6),w
 18111  141C  0231               	subwf	(_Buz1^(0+128)+1),w
 18112  141D                     u7505:	
 18113  141D  1C03               	skipc
 18114  141E  0008               	return
 18115                           
 18116                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18117  141F  01B1               	clrf	(_Buz1^(0+128)+1)
 18118  1420  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 18119                           
 18120                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18121  1421  12B0               	bcf	_Buz1^(0+128),5
 18122  1422  0020               	movlb	0	; select bank0
 18123  1423  1D8D               	btfss	13,3	;volatile
 18124  1424  2C27               	goto	l7710
 18125  1425  0021               	movlb	1	; select bank1
 18126  1426  16B0               	bsf	_Buz1^(0+128),5
 18127  1427                     l7710:	
 18128                           
 18129                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18130  1427  0021               	movlb	1	; select bank1
 18131  1428  1AB0               	btfsc	_Buz1^(0+128),5
 18132  1429  2C53               	goto	l106
 18133                           
 18134                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18135  142A  08B3               	movf	(_Buz1^(0+128)+3),f
 18136  142B  1D03               	skipz
 18137  142C  2C4F               	goto	l107
 18138                           
 18139                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18140  142D  1DB0               	btfss	_Buz1^(0+128),3
 18141  142E  2C3D               	goto	l108
 18142                           
 18143                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18144  142F  11B0               	bcf	_Buz1^(0+128),3
 18145                           
 18146                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18147  1430  0834               	movf	(_Buz1^(0+128)+4),w
 18148  1431  0020               	movlb	0	; select bank0
 18149  1432  00A0               	movwf	??_Buzzer_Main
 18150  1433  0820               	movf	??_Buzzer_Main,w
 18151  1434  0021               	movlb	1	; select bank1
 18152  1435  00B3               	movwf	(_Buz1^(0+128)+3)
 18153                           
 18154                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18155  1436  0839               	movf	((_Buz1+1)^(0+128)+8),w
 18156  1437  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 18157  1438  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 18158  1439  0838               	movf	(_Buz1^(0+128)+8),w
 18159  143A  01B6               	clrf	(_Buz1^(0+128)+6)
 18160  143B  07B6               	addwf	(_Buz1^(0+128)+6),f
 18161                           
 18162                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18163  143C  0008               	return
 18164  143D                     l108:	
 18165  143D  1E30               	btfss	_Buz1^(0+128),4
 18166  143E  2C4D               	goto	l110
 18167                           
 18168                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18169  143F  1230               	bcf	_Buz1^(0+128),4
 18170                           
 18171                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18172  1440  0835               	movf	(_Buz1^(0+128)+5),w
 18173  1441  0020               	movlb	0	; select bank0
 18174  1442  00A0               	movwf	??_Buzzer_Main
 18175  1443  0820               	movf	??_Buzzer_Main,w
 18176  1444  0021               	movlb	1	; select bank1
 18177  1445  00B3               	movwf	(_Buz1^(0+128)+3)
 18178                           
 18179                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18180  1446  083B               	movf	((_Buz1+1)^(0+128)+10),w
 18181  1447  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 18182  1448  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 18183  1449  083A               	movf	(_Buz1^(0+128)+10),w
 18184  144A  01B6               	clrf	(_Buz1^(0+128)+6)
 18185  144B  07B6               	addwf	(_Buz1^(0+128)+6),f
 18186                           
 18187                           ;Buzzer_B1.c: 62: } else {
 18188  144C  0008               	return
 18189  144D                     l110:	
 18190                           
 18191                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18192  144D  10B0               	bcf	_Buz1^(0+128),1
 18193                           
 18194                           ;Buzzer_B1.c: 64: }
 18195                           ;Buzzer_B1.c: 65: } else {
 18196  144E  0008               	return
 18197  144F                     l107:	
 18198                           
 18199                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18200  144F  16B0               	bsf	_Buz1^(0+128),5
 18201                           
 18202                           ;Buzzer_B1.c: 68: RB3 = 1;
 18203  1450  0020               	movlb	0	; select bank0
 18204  1451  158D               	bsf	13,3	;volatile
 18205                           
 18206                           ;Buzzer_B1.c: 69: }
 18207                           ;Buzzer_B1.c: 70: } else {
 18208  1452  0008               	return
 18209  1453                     l106:	
 18210                           
 18211                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18212  1453  12B0               	bcf	_Buz1^(0+128),5
 18213                           
 18214                           ;Buzzer_B1.c: 73: RB3 = 0;
 18215  1454  0020               	movlb	0	; select bank0
 18216  1455  118D               	bcf	13,3	;volatile
 18217                           
 18218                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18219  1456  3001               	movlw	1
 18220  1457  0021               	movlb	1	; select bank1
 18221  1458  02B3               	subwf	(_Buz1^(0+128)+3),f
 18222  1459  0008               	return
 18223  145A                     __end_of_Buzzer_Main:	
 18224                           
 18225                           	psect	text123
 18226  1A86                     __ptext123:	
 18227 ;; *************** function _Buzzer_Initialization *****************
 18228 ;; Defined at:
 18229 ;;		line 11 in file "../src/Buzzer_B1.c"
 18230 ;; Parameters:    Size  Location     Type
 18231 ;;		None
 18232 ;; Auto vars:     Size  Location     Type
 18233 ;;		None
 18234 ;; Return value:  Size  Location     Type
 18235 ;;		None               void
 18236 ;; Registers used:
 18237 ;;		None
 18238 ;; Tracked objects:
 18239 ;;		On entry : 0/0
 18240 ;;		On exit  : 0/0
 18241 ;;		Unchanged: 0/0
 18242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18247 ;;Total ram usage:        0 bytes
 18248 ;; Hardware stack levels used:    1
 18249 ;; Hardware stack levels required when called:    5
 18250 ;; This function calls:
 18251 ;;		Nothing
 18252 ;; This function is called by:
 18253 ;;		_main
 18254 ;; This function uses a non-reentrant model
 18255 ;;
 18256                           
 18257                           
 18258                           ;psect for function _Buzzer_Initialization
 18259  1A86                     _Buzzer_Initialization:	
 18260                           
 18261                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18262                           
 18263                           ;incstack = 0
 18264                           ; Regs used in _Buzzer_Initialization: []
 18265  1A86  0021               	movlb	1	; select bank1
 18266  1A87  1430               	bsf	_Buz1^(0+128),0
 18267  1A88  0008               	return
 18268  1A89                     __end_of_Buzzer_Initialization:	
 18269                           
 18270                           	psect	intentry
 18271  0004                     __pintentry:	
 18272 ;; *************** function _ISR *****************
 18273 ;; Defined at:
 18274 ;;		line 107 in file "../src/MCU_B1.c"
 18275 ;; Parameters:    Size  Location     Type
 18276 ;;		None
 18277 ;; Auto vars:     Size  Location     Type
 18278 ;;		None
 18279 ;; Return value:  Size  Location     Type
 18280 ;;		None               void
 18281 ;; Registers used:
 18282 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18283 ;; Tracked objects:
 18284 ;;		On entry : 0/0
 18285 ;;		On exit  : 0/0
 18286 ;;		Unchanged: 0/0
 18287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18290 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18291 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18292 ;;Total ram usage:        1 bytes
 18293 ;; Hardware stack levels used:    1
 18294 ;; Hardware stack levels required when called:    4
 18295 ;; This function calls:
 18296 ;;		_IOC_ISR
 18297 ;;		_TMR1_ISR
 18298 ;; This function is called by:
 18299 ;;		Interrupt level 1
 18300 ;; This function uses a non-reentrant model
 18301 ;;
 18302                           
 18303  0004                     _ISR:	
 18304                           
 18305                           ;incstack = 0
 18306                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18307  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18308  0005  3180               	pagesel	$
 18309  0006  0020               	movlb	0	; select bank0
 18310  0007  087F               	movf	127,w
 18311  0008  00F7               	movwf	??_ISR
 18312                           
 18313                           ;MCU_B1.c: 109: IOC_ISR();
 18314  0009  319B  238C  3180   	fcall	_IOC_ISR
 18315                           
 18316                           ;MCU_B1.c: 111: ;;
 18317                           ;MCU_B1.c: 113: TMR1_ISR();
 18318  000C  319F  27D7         	fcall	_TMR1_ISR
 18319  000E  0877               	movf	??_ISR,w
 18320  000F  0020               	movlb	0	; select bank0
 18321  0010  00FF               	movwf	127
 18322  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18323  0012  0009               	retfie
 18324  0013                     __end_of_ISR:	
 18325                           
 18326                           	psect	text125
 18327  1FD7                     __ptext125:	
 18328 ;; *************** function _TMR1_ISR *****************
 18329 ;; Defined at:
 18330 ;;		line 209 in file "../src/MCU_B1.c"
 18331 ;; Parameters:    Size  Location     Type
 18332 ;;		None
 18333 ;; Auto vars:     Size  Location     Type
 18334 ;;		None
 18335 ;; Return value:  Size  Location     Type
 18336 ;;		None               void
 18337 ;; Registers used:
 18338 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18339 ;; Tracked objects:
 18340 ;;		On entry : 0/0
 18341 ;;		On exit  : 0/0
 18342 ;;		Unchanged: 0/0
 18343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18348 ;;Total ram usage:        0 bytes
 18349 ;; Hardware stack levels used:    1
 18350 ;; Hardware stack levels required when called:    2
 18351 ;; This function calls:
 18352 ;;		_setDimmerLights_IntrControl
 18353 ;; This function is called by:
 18354 ;;		_ISR
 18355 ;; This function uses a non-reentrant model
 18356 ;;
 18357                           
 18358                           
 18359                           ;psect for function _TMR1_ISR
 18360  1FD7                     _TMR1_ISR:	
 18361                           
 18362                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18363                           
 18364                           ;incstack = 0
 18365                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18366  1FD7  0021               	movlb	1	; select bank1
 18367  1FD8  1C11               	btfss	17,0	;volatile
 18368  1FD9  0008               	return
 18369  1FDA  0020               	movlb	0	; select bank0
 18370  1FDB  1C11               	btfss	17,0	;volatile
 18371  1FDC  0008               	return
 18372                           
 18373                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18374  1FDD  30FA               	movlw	250
 18375  1FDE  0097               	movwf	23	;volatile
 18376                           
 18377                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18378  1FDF  3038               	movlw	56
 18379  1FE0  0096               	movwf	22	;volatile
 18380                           
 18381                           ;MCU_B1.c: 214: TMR1IF = 0;
 18382  1FE1  1011               	bcf	17,0	;volatile
 18383                           
 18384                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18385  1FE2  3001               	movlw	1
 18386  1FE3  3183  23A0  319F   	fcall	_setDimmerLights_IntrControl
 18387                           
 18388                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18389  1FE6  3002               	movlw	2
 18390  1FE7  3183  23A0  319F   	fcall	_setDimmerLights_IntrControl
 18391                           
 18392                           ;MCU_B1.c: 234: Timer1.Count++;
 18393  1FEA  3001               	movlw	1
 18394  1FEB  0022               	movlb	2	; select bank2
 18395  1FEC  07A4               	addwf	(_Timer1^(0+256)+1),f
 18396  1FED  3000               	movlw	0
 18397  1FEE  3DA5               	addwfc	((_Timer1+1)^(0+256)+1),f
 18398                           
 18399                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 18400  1FEF  3001               	movlw	1
 18401  1FF0  3E23               	addlw	_Timer1& (0+255)
 18402  1FF1  0086               	movwf	6
 18403  1FF2  3001               	movlw	1	; select bank2/3
 18404  1FF3  0087               	movwf	7
 18405  1FF4  3F40               	moviw [0]fsr1
 18406  1FF5  3A64               	xorlw	100
 18407  1FF6  1D03               	skipz
 18408  1FF7  2FFA               	goto	u766_25
 18409  1FF8  3F41               	moviw [1]fsr1
 18410  1FF9  3A00               	xorlw	0
 18411  1FFA                     u766_25:	
 18412  1FFA  1D03               	skipz
 18413  1FFB  0008               	return
 18414                           
 18415                           ;MCU_B1.c: 236: {
 18416                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18417  1FFC  01A4               	clrf	(_Timer1^(0+256)+1)
 18418  1FFD  01A5               	clrf	((_Timer1+1)^(0+256)+1)
 18419                           
 18420                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18421  1FFE  1423               	bsf	_Timer1^(0+256),0
 18422  1FFF  0008               	return
 18423  2000                     __end_of_TMR1_ISR:	
 18424                           
 18425                           	psect	text126
 18426  03A0                     __ptext126:	
 18427 ;; *************** function _setDimmerLights_IntrControl *****************
 18428 ;; Defined at:
 18429 ;;		line 92 in file "../src/Dimmer_B1.c"
 18430 ;; Parameters:    Size  Location     Type
 18431 ;;  lights          1    wreg     unsigned char 
 18432 ;; Auto vars:     Size  Location     Type
 18433 ;;  lights          1    6[COMMON] unsigned char 
 18434 ;; Return value:  Size  Location     Type
 18435 ;;		None               void
 18436 ;; Registers used:
 18437 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18438 ;; Tracked objects:
 18439 ;;		On entry : 0/0
 18440 ;;		On exit  : 0/0
 18441 ;;		Unchanged: 0/0
 18442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18444 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18445 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18446 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18447 ;;Total ram usage:        5 bytes
 18448 ;; Hardware stack levels used:    1
 18449 ;; Hardware stack levels required when called:    1
 18450 ;; This function calls:
 18451 ;;		_DimmerIntrPointSelect
 18452 ;; This function is called by:
 18453 ;;		_TMR1_ISR
 18454 ;; This function uses a non-reentrant model
 18455 ;;
 18456                           
 18457                           
 18458                           ;psect for function _setDimmerLights_IntrControl
 18459  03A0                     _setDimmerLights_IntrControl:	
 18460                           
 18461                           ;incstack = 0
 18462                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18463                           ;setDimmerLights_IntrControl@lights stored from wreg
 18464  03A0  00F6               	movwf	setDimmerLights_IntrControl@lights
 18465                           
 18466                           ;Dimmer_B1.c: 228: DimmerIntrPointSelect(lights);
 18467  03A1  0876               	movf	setDimmerLights_IntrControl@lights,w
 18468  03A2  319B  23FE  3183   	fcall	_DimmerIntrPointSelect
 18469                           
 18470                           ;Dimmer_B1.c: 229: if (DimmerLightsIntr->GO == 1) {
 18471  03A5  087A               	movf	_DimmerLightsIntr,w
 18472  03A6  0086               	movwf	6
 18473  03A7  3001               	movlw	1	; select bank2/3
 18474  03A8  0087               	movwf	7
 18475  03A9  1C01               	btfss	1,0
 18476  03AA  2C02               	goto	i1l7160
 18477                           
 18478                           ;Dimmer_B1.c: 230: DimmerLightsIntr->Count++;
 18479  03AB  3001               	movlw	1
 18480  03AC  00F2               	movwf	??_setDimmerLights_IntrControl
 18481  03AD  087A               	movf	_DimmerLightsIntr,w
 18482  03AE  3E03               	addlw	3
 18483  03AF  0086               	movwf	6
 18484  03B0  3001               	movlw	1	; select bank2/3
 18485  03B1  0087               	movwf	7
 18486  03B2  0872               	movf	??_setDimmerLights_IntrControl,w
 18487  03B3  0781               	addwf	1,f
 18488                           
 18489                           ;Dimmer_B1.c: 231: if (DimmerLightsIntr->Count
 18490                           ;Dimmer_B1.c: 232: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 18491  03B4  0022               	movlb	2	; select bank2
 18492  03B5  0822               	movf	(_Dimmer^(0+256)+2),w
 18493  03B6  00F2               	movwf	??_setDimmerLights_IntrControl
 18494  03B7  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18495  03B8  09F2               	comf	??_setDimmerLights_IntrControl,f
 18496  03B9  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18497  03BA  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18498  03BB  1903               	skipnz
 18499  03BC  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18500  03BD  087A               	movf	_DimmerLightsIntr,w
 18501  03BE  3E04               	addlw	4
 18502  03BF  0086               	movwf	6
 18503  03C0  3001               	movlw	1	; select bank2/3
 18504  03C1  0087               	movwf	7
 18505  03C2  0801               	movf	1,w
 18506  03C3  0772               	addwf	??_setDimmerLights_IntrControl,w
 18507  03C4  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18508  03C5  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18509  03C6  1803               	skipnc
 18510  03C7  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18511  03C8  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18512  03C9  087A               	movf	_DimmerLightsIntr,w
 18513  03CA  3E03               	addlw	3
 18514  03CB  0086               	movwf	6
 18515  03CC  3001               	movlw	1	; select bank2/3
 18516  03CD  0087               	movwf	7
 18517  03CE  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18518  03CF  3A80               	xorlw	128
 18519  03D0  3C80               	sublw	128
 18520  03D1  1D03               	skipz
 18521  03D2  2BD5               	goto	u651_25
 18522  03D3  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18523  03D4  0201               	subwf	1,w
 18524  03D5                     u651_25:	
 18525  03D5  1C03               	skipc
 18526  03D6  0008               	return
 18527                           
 18528                           ;Dimmer_B1.c: 233: DimmerLightsIntr->Count = 0;
 18529  03D7  087A               	movf	_DimmerLightsIntr,w
 18530  03D8  3E03               	addlw	3
 18531  03D9  0086               	movwf	6
 18532  03DA  3001               	movlw	1	; select bank2/3
 18533  03DB  0087               	movwf	7
 18534  03DC  0181               	clrf	1
 18535                           
 18536                           ;Dimmer_B1.c: 234: DimmerLightsIntr->GO = 0;
 18537  03DD  087A               	movf	_DimmerLightsIntr,w
 18538  03DE  0086               	movwf	6
 18539  03DF  3001               	movlw	1	; select bank2/3
 18540  03E0  0087               	movwf	7
 18541  03E1  1001               	bcf	1,0
 18542                           
 18543                           ;Dimmer_B1.c: 235: DimmerLightsIntr->Flag = 1;
 18544  03E2  087A               	movf	_DimmerLightsIntr,w
 18545  03E3  3E08               	addlw	8
 18546  03E4  0086               	movwf	6
 18547  03E5  3001               	movlw	1	; select bank2/3
 18548  03E6  0087               	movwf	7
 18549  03E7  1401               	bsf	1,0
 18550                           
 18551                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->MOSFET == 1) {
 18552  03E8  087A               	movf	_DimmerLightsIntr,w
 18553  03E9  3E09               	addlw	9
 18554  03EA  0086               	movwf	6
 18555  03EB  3001               	movlw	1	; select bank2/3
 18556  03EC  0087               	movwf	7
 18557  03ED  1E01               	btfss	1,4
 18558  03EE  0008               	return
 18559                           
 18560                           ;Dimmer_B1.c: 237: DimmerLightsIntr->MOSFET = 0;
 18561  03EF  087A               	movf	_DimmerLightsIntr,w
 18562  03F0  3E09               	addlw	9
 18563  03F1  0086               	movwf	6
 18564  03F2  3001               	movlw	1	; select bank2/3
 18565  03F3  0087               	movwf	7
 18566  03F4  1201               	bcf	1,4
 18567                           
 18568                           ;Dimmer_B1.c: 239: if (lights == 1) {
 18569  03F5  0876               	movf	setDimmerLights_IntrControl@lights,w
 18570  03F6  3A01               	xorlw	1
 18571  03F7  1D03               	skipz
 18572  03F8  2BFB               	goto	i1l7156
 18573                           
 18574                           ;Dimmer_B1.c: 240: RA7 = 0;
 18575  03F9  0020               	movlb	0	; select bank0
 18576  03FA  138C               	bcf	12,7	;volatile
 18577  03FB                     i1l7156:	
 18578                           ;Dimmer_B1.c: 241: ;;
 18579                           
 18580                           
 18581                           ;Dimmer_B1.c: 242: }
 18582                           ;Dimmer_B1.c: 245: if (lights == 2) {
 18583  03FB  0876               	movf	setDimmerLights_IntrControl@lights,w
 18584  03FC  3A02               	xorlw	2
 18585  03FD  1D03               	skipz
 18586  03FE  0008               	return
 18587                           
 18588                           ;Dimmer_B1.c: 246: RB4 = 0;
 18589  03FF  0020               	movlb	0	; select bank0
 18590  0400  120D               	bcf	13,4	;volatile
 18591                           
 18592                           ;Dimmer_B1.c: 247: }
 18593                           ;Dimmer_B1.c: 249: }
 18594                           ;Dimmer_B1.c: 250: }
 18595                           ;Dimmer_B1.c: 251: } else {
 18596  0401  0008               	return
 18597  0402                     i1l7160:	
 18598                           
 18599                           ;Dimmer_B1.c: 252: if (DimmerLightsIntr->Flag == 1) {
 18600  0402  087A               	movf	_DimmerLightsIntr,w
 18601  0403  3E08               	addlw	8
 18602  0404  0086               	movwf	6
 18603  0405  3001               	movlw	1	; select bank2/3
 18604  0406  0087               	movwf	7
 18605  0407  1C01               	btfss	1,0
 18606  0408  2CB6               	goto	i1l745
 18607                           
 18608                           ;Dimmer_B1.c: 253: DimmerLightsIntr->Flag = 0;
 18609  0409  087A               	movf	_DimmerLightsIntr,w
 18610  040A  3E08               	addlw	8
 18611  040B  0086               	movwf	6
 18612  040C  3001               	movlw	1	; select bank2/3
 18613  040D  0087               	movwf	7
 18614  040E  1001               	bcf	1,0
 18615                           
 18616                           ;Dimmer_B1.c: 254: if (DimmerLightsIntr->Signal == 1) {
 18617  040F  087A               	movf	_DimmerLightsIntr,w
 18618  0410  0086               	movwf	6
 18619  0411  3001               	movlw	1	; select bank2/3
 18620  0412  0087               	movwf	7
 18621  0413  1C81               	btfss	1,1
 18622  0414  2CB6               	goto	i1l745
 18623                           
 18624                           ;Dimmer_B1.c: 255: DimmerLightsIntr->DimmingTime++;
 18625  0415  3001               	movlw	1
 18626  0416  00F2               	movwf	??_setDimmerLights_IntrControl
 18627  0417  0A7A               	incf	_DimmerLightsIntr,w
 18628  0418  0086               	movwf	6
 18629  0419  3001               	movlw	1	; select bank2/3
 18630  041A  0087               	movwf	7
 18631  041B  0872               	movf	??_setDimmerLights_IntrControl,w
 18632  041C  0781               	addwf	1,f
 18633                           
 18634                           ;Dimmer_B1.c: 256: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18635  041D  0A7A               	incf	_DimmerLightsIntr,w
 18636  041E  0086               	movwf	6
 18637  041F  3001               	movlw	1	; select bank2/3
 18638  0420  0087               	movwf	7
 18639  0421  087A               	movf	_DimmerLightsIntr,w
 18640  0422  3E02               	addlw	2
 18641  0423  0084               	movwf	4
 18642  0424  3001               	movlw	1	; select bank2/3
 18643  0425  0085               	movwf	5
 18644  0426  0800               	movf	0,w
 18645  0427  0201               	subwf	1,w
 18646  0428  1C03               	skipc
 18647  0429  2CB6               	goto	i1l745
 18648                           
 18649                           ;Dimmer_B1.c: 257: DimmerLightsIntr->DimmingTime = 0;
 18650  042A  0A7A               	incf	_DimmerLightsIntr,w
 18651  042B  0086               	movwf	6
 18652  042C  3001               	movlw	1	; select bank2/3
 18653  042D  0087               	movwf	7
 18654  042E  0181               	clrf	1
 18655                           
 18656                           ;Dimmer_B1.c: 258: if (DimmerLightsIntr->AdjFlag == 1) {
 18657  042F  087A               	movf	_DimmerLightsIntr,w
 18658  0430  0086               	movwf	6
 18659  0431  3001               	movlw	1	; select bank2/3
 18660  0432  0087               	movwf	7
 18661  0433  1D81               	btfss	1,3
 18662  0434  2C6B               	goto	i1l7186
 18663                           
 18664                           ;Dimmer_B1.c: 259: if (DimmerLightsIntr->AdjStatus == 0) {
 18665  0435  087A               	movf	_DimmerLightsIntr,w
 18666  0436  0086               	movwf	6
 18667  0437  3001               	movlw	1	; select bank2/3
 18668  0438  0087               	movwf	7
 18669  0439  1A01               	btfsc	1,4
 18670  043A  2C54               	goto	i1l7180
 18671                           
 18672                           ;Dimmer_B1.c: 260: if (DimmerLightsIntr->DimmingValue < ((char)(80*0.8))) {
 18673  043B  087A               	movf	_DimmerLightsIntr,w
 18674  043C  3E04               	addlw	4
 18675  043D  0086               	movwf	6
 18676  043E  3001               	movlw	1	; select bank2/3
 18677  043F  0087               	movwf	7
 18678  0440  3040               	movlw	64
 18679  0441  0201               	subwf	1,w
 18680  0442  1803               	skipnc
 18681  0443  2C4E               	goto	i1l7178
 18682                           
 18683                           ;Dimmer_B1.c: 261: DimmerLightsIntr->DimmingValue++;
 18684  0444  3001               	movlw	1
 18685  0445  00F2               	movwf	??_setDimmerLights_IntrControl
 18686  0446  087A               	movf	_DimmerLightsIntr,w
 18687  0447  3E04               	addlw	4
 18688  0448  0086               	movwf	6
 18689  0449  3001               	movlw	1	; select bank2/3
 18690  044A  0087               	movwf	7
 18691  044B  0872               	movf	??_setDimmerLights_IntrControl,w
 18692  044C  0781               	addwf	1,f
 18693                           
 18694                           ;Dimmer_B1.c: 262: } else {
 18695  044D  2CB6               	goto	i1l745
 18696  044E                     i1l7178:	
 18697                           
 18698                           ;Dimmer_B1.c: 263: DimmerLightsIntr->AdjStatus = 1;
 18699  044E  087A               	movf	_DimmerLightsIntr,w
 18700  044F  0086               	movwf	6
 18701  0450  3001               	movlw	1	; select bank2/3
 18702  0451  0087               	movwf	7
 18703  0452  1601               	bsf	1,4
 18704                           
 18705                           ;Dimmer_B1.c: 264: }
 18706                           ;Dimmer_B1.c: 265: } else {
 18707  0453  2CB6               	goto	i1l745
 18708  0454                     i1l7180:	
 18709                           
 18710                           ;Dimmer_B1.c: 266: if (DimmerLightsIntr->DimmingValue > ((char)(10*0.8))) {
 18711  0454  087A               	movf	_DimmerLightsIntr,w
 18712  0455  3E04               	addlw	4
 18713  0456  0086               	movwf	6
 18714  0457  3001               	movlw	1	; select bank2/3
 18715  0458  0087               	movwf	7
 18716  0459  3009               	movlw	9
 18717  045A  0201               	subwf	1,w
 18718  045B  1C03               	skipc
 18719  045C  2C65               	goto	i1l7184
 18720                           
 18721                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingValue--;
 18722  045D  087A               	movf	_DimmerLightsIntr,w
 18723  045E  3E04               	addlw	4
 18724  045F  0086               	movwf	6
 18725  0460  3001               	movlw	1	; select bank2/3
 18726  0461  0087               	movwf	7
 18727  0462  3001               	movlw	1
 18728  0463  0281               	subwf	1,f
 18729                           
 18730                           ;Dimmer_B1.c: 268: } else {
 18731  0464  2CB6               	goto	i1l745
 18732  0465                     i1l7184:	
 18733                           
 18734                           ;Dimmer_B1.c: 269: DimmerLightsIntr->AdjStatus = 0;
 18735  0465  087A               	movf	_DimmerLightsIntr,w
 18736  0466  0086               	movwf	6
 18737  0467  3001               	movlw	1	; select bank2/3
 18738  0468  0087               	movwf	7
 18739  0469  1201               	bcf	1,4
 18740                           
 18741                           ;Dimmer_B1.c: 270: }
 18742                           ;Dimmer_B1.c: 271: }
 18743                           ;Dimmer_B1.c: 272: } else if (DimmerLightsIntr->AdjRF == 1) {
 18744  046A  2CB6               	goto	i1l745
 18745  046B                     i1l7186:	
 18746  046B  087A               	movf	_DimmerLightsIntr,w
 18747  046C  0086               	movwf	6
 18748  046D  3001               	movlw	1	; select bank2/3
 18749  046E  0087               	movwf	7
 18750  046F  1D01               	btfss	1,2
 18751  0470  2CB6               	goto	i1l745
 18752                           
 18753                           ;Dimmer_B1.c: 273: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18754  0471  087A               	movf	_DimmerLightsIntr,w
 18755  0472  3E04               	addlw	4
 18756  0473  0086               	movwf	6
 18757  0474  3001               	movlw	1	; select bank2/3
 18758  0475  0087               	movwf	7
 18759  0476  087A               	movf	_DimmerLightsIntr,w
 18760  0477  3E05               	addlw	5
 18761  0478  0084               	movwf	4
 18762  0479  3001               	movlw	1	; select bank2/3
 18763  047A  0085               	movwf	5
 18764  047B  0800               	movf	0,w
 18765  047C  0201               	subwf	1,w
 18766  047D  1803               	skipnc
 18767  047E  2C89               	goto	i1l7192
 18768                           
 18769                           ;Dimmer_B1.c: 274: DimmerLightsIntr->DimmingValue++;
 18770  047F  3001               	movlw	1
 18771  0480  00F2               	movwf	??_setDimmerLights_IntrControl
 18772  0481  087A               	movf	_DimmerLightsIntr,w
 18773  0482  3E04               	addlw	4
 18774  0483  0086               	movwf	6
 18775  0484  3001               	movlw	1	; select bank2/3
 18776  0485  0087               	movwf	7
 18777  0486  0872               	movf	??_setDimmerLights_IntrControl,w
 18778  0487  0781               	addwf	1,f
 18779                           
 18780                           ;Dimmer_B1.c: 275: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18781  0488  2C9E               	goto	i1l7196
 18782  0489                     i1l7192:	
 18783  0489  087A               	movf	_DimmerLightsIntr,w
 18784  048A  3E05               	addlw	5
 18785  048B  0086               	movwf	6
 18786  048C  3001               	movlw	1	; select bank2/3
 18787  048D  0087               	movwf	7
 18788  048E  087A               	movf	_DimmerLightsIntr,w
 18789  048F  3E04               	addlw	4
 18790  0490  0084               	movwf	4
 18791  0491  3001               	movlw	1	; select bank2/3
 18792  0492  0085               	movwf	5
 18793  0493  0800               	movf	0,w
 18794  0494  0201               	subwf	1,w
 18795  0495  1803               	skipnc
 18796  0496  2C9E               	goto	i1l7196
 18797                           
 18798                           ;Dimmer_B1.c: 276: DimmerLightsIntr->DimmingValue--;
 18799  0497  087A               	movf	_DimmerLightsIntr,w
 18800  0498  3E04               	addlw	4
 18801  0499  0086               	movwf	6
 18802  049A  3001               	movlw	1	; select bank2/3
 18803  049B  0087               	movwf	7
 18804  049C  3001               	movlw	1
 18805  049D  0281               	subwf	1,f
 18806  049E                     i1l7196:	
 18807                           
 18808                           ;Dimmer_B1.c: 277: }
 18809                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18810  049E  087A               	movf	_DimmerLightsIntr,w
 18811  049F  3E05               	addlw	5
 18812  04A0  0086               	movwf	6
 18813  04A1  3001               	movlw	1	; select bank2/3
 18814  04A2  0087               	movwf	7
 18815  04A3  087A               	movf	_DimmerLightsIntr,w
 18816  04A4  3E04               	addlw	4
 18817  04A5  0084               	movwf	4
 18818  04A6  3001               	movlw	1	; select bank2/3
 18819  04A7  0085               	movwf	5
 18820  04A8  0800               	movf	0,w
 18821  04A9  0601               	xorwf	1,w
 18822  04AA  1D03               	skipz
 18823  04AB  2CB6               	goto	i1l745
 18824                           
 18825                           ;Dimmer_B1.c: 279: DimmerLightsIntr->AdjRF = 0;
 18826  04AC  087A               	movf	_DimmerLightsIntr,w
 18827  04AD  0086               	movwf	6
 18828  04AE  3001               	movlw	1	; select bank2/3
 18829  04AF  0087               	movwf	7
 18830  04B0  1101               	bcf	1,2
 18831                           
 18832                           ;Dimmer_B1.c: 280: DimmerLightsIntr->Signal = 0;
 18833  04B1  087A               	movf	_DimmerLightsIntr,w
 18834  04B2  0086               	movwf	6
 18835  04B3  3001               	movlw	1	; select bank2/3
 18836  04B4  0087               	movwf	7
 18837  04B5  1081               	bcf	1,1
 18838  04B6                     i1l745:	
 18839                           
 18840                           ;Dimmer_B1.c: 281: }
 18841                           ;Dimmer_B1.c: 282: }
 18842                           ;Dimmer_B1.c: 300: }
 18843                           ;Dimmer_B1.c: 301: }
 18844                           ;Dimmer_B1.c: 302: }
 18845                           ;Dimmer_B1.c: 304: if (DimmerLightsIntr->MosfetSignal == 1) {
 18846  04B6  087A               	movf	_DimmerLightsIntr,w
 18847  04B7  3E09               	addlw	9
 18848  04B8  0086               	movwf	6
 18849  04B9  3001               	movlw	1	; select bank2/3
 18850  04BA  0087               	movwf	7
 18851  04BB  1D81               	btfss	1,3
 18852  04BC  0008               	return
 18853                           
 18854                           ;Dimmer_B1.c: 305: DimmerLightsIntr->MosfetSignalCount++;
 18855  04BD  3001               	movlw	1
 18856  04BE  00F2               	movwf	??_setDimmerLights_IntrControl
 18857  04BF  087A               	movf	_DimmerLightsIntr,w
 18858  04C0  3E0C               	addlw	12
 18859  04C1  0086               	movwf	6
 18860  04C2  3001               	movlw	1	; select bank2/3
 18861  04C3  0087               	movwf	7
 18862  04C4  0872               	movf	??_setDimmerLights_IntrControl,w
 18863  04C5  0781               	addwf	1,f
 18864                           
 18865                           ;Dimmer_B1.c: 306: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 18866  04C6  087A               	movf	_DimmerLightsIntr,w
 18867  04C7  3E0C               	addlw	12
 18868  04C8  0086               	movwf	6
 18869  04C9  3001               	movlw	1	; select bank2/3
 18870  04CA  0087               	movwf	7
 18871  04CB  0801               	movf	1,w
 18872  04CC  3A05               	xorlw	5
 18873  04CD  1D03               	skipz
 18874  04CE  0008               	return
 18875                           
 18876                           ;Dimmer_B1.c: 307: DimmerLightsIntr->MosfetSignalCount = 0;
 18877  04CF  087A               	movf	_DimmerLightsIntr,w
 18878  04D0  3E0C               	addlw	12
 18879  04D1  0086               	movwf	6
 18880  04D2  3001               	movlw	1	; select bank2/3
 18881  04D3  0087               	movwf	7
 18882  04D4  0181               	clrf	1
 18883                           
 18884                           ;Dimmer_B1.c: 308: DimmerLightsIntr->MosfetSignal = 0;
 18885  04D5  087A               	movf	_DimmerLightsIntr,w
 18886  04D6  3E09               	addlw	9
 18887  04D7  0086               	movwf	6
 18888  04D8  3001               	movlw	1	; select bank2/3
 18889  04D9  0087               	movwf	7
 18890  04DA  1181               	bcf	1,3
 18891  04DB  0008               	return
 18892  04DC                     __end_of_setDimmerLights_IntrControl:	
 18893                           
 18894                           	psect	text127
 18895  1BFE                     __ptext127:	
 18896 ;; *************** function _DimmerIntrPointSelect *****************
 18897 ;; Defined at:
 18898 ;;		line 70 in file "../src/Dimmer_B1.c"
 18899 ;; Parameters:    Size  Location     Type
 18900 ;;  lights          1    wreg     unsigned char 
 18901 ;; Auto vars:     Size  Location     Type
 18902 ;;  lights          1    1[COMMON] unsigned char 
 18903 ;; Return value:  Size  Location     Type
 18904 ;;		None               void
 18905 ;; Registers used:
 18906 ;;		wreg
 18907 ;; Tracked objects:
 18908 ;;		On entry : 0/0
 18909 ;;		On exit  : 0/0
 18910 ;;		Unchanged: 0/0
 18911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18913 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18914 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18915 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18916 ;;Total ram usage:        2 bytes
 18917 ;; Hardware stack levels used:    1
 18918 ;; This function calls:
 18919 ;;		Nothing
 18920 ;; This function is called by:
 18921 ;;		_setDimmerLights_IntrControl
 18922 ;; This function uses a non-reentrant model
 18923 ;;
 18924                           
 18925                           
 18926                           ;psect for function _DimmerIntrPointSelect
 18927  1BFE                     _DimmerIntrPointSelect:	
 18928                           
 18929                           ;incstack = 0
 18930                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18931                           ;DimmerIntrPointSelect@lights stored from wreg
 18932  1BFE  00F1               	movwf	DimmerIntrPointSelect@lights
 18933                           
 18934                           ;Dimmer_B1.c: 72: if (lights == 1) {
 18935  1BFF  0871               	movf	DimmerIntrPointSelect@lights,w
 18936  1C00  3A01               	xorlw	1
 18937  1C01  1D03               	skipz
 18938  1C02  2C07               	goto	i1l734
 18939                           
 18940                           ;Dimmer_B1.c: 73: DimmerLightsIntr = &DimmerLights1;
 18941  1C03  30BE               	movlw	_DimmerLights1& (0+255)
 18942  1C04  00F0               	movwf	??_DimmerIntrPointSelect
 18943  1C05  0870               	movf	??_DimmerIntrPointSelect,w
 18944  1C06  00FA               	movwf	_DimmerLightsIntr
 18945  1C07                     i1l734:	
 18946                           
 18947                           ;Dimmer_B1.c: 74: }
 18948                           ;Dimmer_B1.c: 77: if (lights == 2) {
 18949  1C07  0871               	movf	DimmerIntrPointSelect@lights,w
 18950  1C08  3A02               	xorlw	2
 18951  1C09  1D03               	skipz
 18952  1C0A  0008               	return
 18953                           
 18954                           ;Dimmer_B1.c: 78: DimmerLightsIntr = &DimmerLights2;
 18955  1C0B  30CD               	movlw	_DimmerLights2& (0+255)
 18956  1C0C  00F0               	movwf	??_DimmerIntrPointSelect
 18957  1C0D  0870               	movf	??_DimmerIntrPointSelect,w
 18958  1C0E  00FA               	movwf	_DimmerLightsIntr
 18959  1C0F  0008               	return
 18960  1C10                     __end_of_DimmerIntrPointSelect:	
 18961                           
 18962                           	psect	text128
 18963  1B8C                     __ptext128:	
 18964 ;; *************** function _IOC_ISR *****************
 18965 ;; Defined at:
 18966 ;;		line 401 in file "../src/MCU_B1.c"
 18967 ;; Parameters:    Size  Location     Type
 18968 ;;		None
 18969 ;; Auto vars:     Size  Location     Type
 18970 ;;		None
 18971 ;; Return value:  Size  Location     Type
 18972 ;;		None               void
 18973 ;; Registers used:
 18974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18975 ;; Tracked objects:
 18976 ;;		On entry : 0/0
 18977 ;;		On exit  : 0/0
 18978 ;;		Unchanged: 0/0
 18979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18984 ;;Total ram usage:        0 bytes
 18985 ;; Hardware stack levels used:    1
 18986 ;; Hardware stack levels required when called:    3
 18987 ;; This function calls:
 18988 ;;		_setDimmerReClock
 18989 ;; This function is called by:
 18990 ;;		_ISR
 18991 ;; This function uses a non-reentrant model
 18992 ;;
 18993                           
 18994                           
 18995                           ;psect for function _IOC_ISR
 18996  1B8C                     _IOC_ISR:	
 18997                           
 18998                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18999                           
 19000                           ;incstack = 0
 19001                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19002  1B8C  1D8B               	btfss	11,3	;volatile
 19003  1B8D  0008               	return
 19004  1B8E  1C0B               	btfss	11,0	;volatile
 19005  1B8F  0008               	return
 19006  1B90  0027               	movlb	7	; select bank7
 19007  1B91  1D16               	btfss	22,2	;volatile
 19008  1B92  0008               	return
 19009                           
 19010                           ;MCU_B1.c: 403: IOCBF2 = 0;
 19011  1B93  1116               	bcf	22,2	;volatile
 19012                           
 19013                           ;MCU_B1.c: 404: IOCIF = 0;
 19014  1B94  100B               	bcf	11,0	;volatile
 19015                           
 19016                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 19017  1B95  0021               	movlb	1	; select bank1
 19018  1B96  1C20               	btfss	_myMain^(0+128),0
 19019  1B97  0008               	return
 19020                           
 19021                           ;MCU_B1.c: 408: setDimmerReClock();
 19022  1B98  319A  22C2         	fcall	_setDimmerReClock
 19023  1B9A  0008               	return
 19024  1B9B                     __end_of_IOC_ISR:	
 19025                           
 19026                           	psect	text129
 19027  1AC2                     __ptext129:	
 19028 ;; *************** function _setDimmerReClock *****************
 19029 ;; Defined at:
 19030 ;;		line 244 in file "../src/MCU_B1.c"
 19031 ;; Parameters:    Size  Location     Type
 19032 ;;		None
 19033 ;; Auto vars:     Size  Location     Type
 19034 ;;		None
 19035 ;; Return value:  Size  Location     Type
 19036 ;;		None               void
 19037 ;; Registers used:
 19038 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19039 ;; Tracked objects:
 19040 ;;		On entry : 0/0
 19041 ;;		On exit  : 0/0
 19042 ;;		Unchanged: 0/0
 19043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19048 ;;Total ram usage:        0 bytes
 19049 ;; Hardware stack levels used:    1
 19050 ;; Hardware stack levels required when called:    2
 19051 ;; This function calls:
 19052 ;;		_setDimmerLights_IntrIOC_GO
 19053 ;; This function is called by:
 19054 ;;		_IOC_ISR
 19055 ;; This function uses a non-reentrant model
 19056 ;;
 19057                           
 19058                           
 19059                           ;psect for function _setDimmerReClock
 19060  1AC2                     _setDimmerReClock:	
 19061                           
 19062                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 19063                           
 19064                           ;incstack = 0
 19065                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19066  1AC2  3001               	movlw	1
 19067  1AC3  3192  2254  319A   	fcall	_setDimmerLights_IntrIOC_GO
 19068                           
 19069                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 19070  1AC6  3002               	movlw	2
 19071  1AC7  3192  2254         	fcall	_setDimmerLights_IntrIOC_GO
 19072  1AC9  0008               	return
 19073  1ACA                     __end_of_setDimmerReClock:	
 19074                           
 19075                           	psect	text130
 19076  1254                     __ptext130:	
 19077 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19078 ;; Defined at:
 19079 ;;		line 28 in file "../src/Dimmer_B1.c"
 19080 ;; Parameters:    Size  Location     Type
 19081 ;;  lights          1    wreg     unsigned char 
 19082 ;; Auto vars:     Size  Location     Type
 19083 ;;  lights          1    2[COMMON] unsigned char 
 19084 ;; Return value:  Size  Location     Type
 19085 ;;		None               void
 19086 ;; Registers used:
 19087 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19088 ;; Tracked objects:
 19089 ;;		On entry : 0/0
 19090 ;;		On exit  : 0/0
 19091 ;;		Unchanged: 0/0
 19092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19094 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19096 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19097 ;;Total ram usage:        1 bytes
 19098 ;; Hardware stack levels used:    1
 19099 ;; Hardware stack levels required when called:    1
 19100 ;; This function calls:
 19101 ;;		_DimmerIntrIOCPointSelect
 19102 ;; This function is called by:
 19103 ;;		_setDimmerReClock
 19104 ;; This function uses a non-reentrant model
 19105 ;;
 19106                           
 19107                           
 19108                           ;psect for function _setDimmerLights_IntrIOC_GO
 19109  1254                     _setDimmerLights_IntrIOC_GO:	
 19110                           
 19111                           ;incstack = 0
 19112                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19113                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19114  1254  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19115                           
 19116                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 19117  1255  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19118  1256  319C  2492  3192   	fcall	_DimmerIntrIOCPointSelect
 19119                           
 19120                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0) {
 19121  1259  0021               	movlb	1	; select bank1
 19122  125A  084B               	movf	_DimmerLightsIntrIOC^(0+128),w
 19123  125B  0086               	movwf	6
 19124  125C  3001               	movlw	1	; select bank2/3
 19125  125D  0087               	movwf	7
 19126  125E  1801               	btfsc	1,0
 19127  125F  0008               	return
 19128  1260  084B               	movf	_DimmerLightsIntrIOC^(0+128),w
 19129  1261  3E09               	addlw	9
 19130  1262  0086               	movwf	6
 19131  1263  3001               	movlw	1	; select bank2/3
 19132  1264  0087               	movwf	7
 19133  1265  1981               	btfsc	1,3
 19134  1266  0008               	return
 19135                           
 19136                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 19137  1267  084B               	movf	_DimmerLightsIntrIOC^(0+128),w
 19138  1268  0086               	movwf	6
 19139  1269  3001               	movlw	1	; select bank2/3
 19140  126A  0087               	movwf	7
 19141  126B  1401               	bsf	1,0
 19142                           
 19143                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 19144  126C  084B               	movf	_DimmerLightsIntrIOC^(0+128),w
 19145  126D  3E09               	addlw	9
 19146  126E  0086               	movwf	6
 19147  126F  3001               	movlw	1	; select bank2/3
 19148  1270  0087               	movwf	7
 19149  1271  1581               	bsf	1,3
 19150                           
 19151                           ;Dimmer_B1.c: 48: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 19152  1272  084B               	movf	_DimmerLightsIntrIOC^(0+128),w
 19153  1273  0086               	movwf	6
 19154  1274  3001               	movlw	1	; select bank2/3
 19155  1275  0087               	movwf	7
 19156  1276  1F01               	btfss	1,6
 19157  1277  0008               	return
 19158                           
 19159                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MOSFET = 1;
 19160  1278  084B               	movf	_DimmerLightsIntrIOC^(0+128),w
 19161  1279  3E09               	addlw	9
 19162  127A  0086               	movwf	6
 19163  127B  3001               	movlw	1	; select bank2/3
 19164  127C  0087               	movwf	7
 19165  127D  1601               	bsf	1,4
 19166                           
 19167                           ;Dimmer_B1.c: 51: if (lights == 1) {
 19168  127E  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19169  127F  3A01               	xorlw	1
 19170  1280  1D03               	skipz
 19171  1281  2A84               	goto	i1l6722
 19172                           
 19173                           ;Dimmer_B1.c: 52: RA7 = 1;
 19174  1282  0020               	movlb	0	; select bank0
 19175  1283  178C               	bsf	12,7	;volatile
 19176  1284                     i1l6722:	
 19177                           ;Dimmer_B1.c: 53: ;;
 19178                           
 19179                           
 19180                           ;Dimmer_B1.c: 54: }
 19181                           ;Dimmer_B1.c: 57: if (lights == 2) {
 19182  1284  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19183  1285  3A02               	xorlw	2
 19184  1286  1D03               	skipz
 19185  1287  0008               	return
 19186                           
 19187                           ;Dimmer_B1.c: 58: RB4 = 1;
 19188  1288  0020               	movlb	0	; select bank0
 19189  1289  160D               	bsf	13,4	;volatile
 19190  128A  0008               	return
 19191  128B                     __end_of_setDimmerLights_IntrIOC_GO:	
 19192                           
 19193                           	psect	text131
 19194  1C92                     __ptext131:	
 19195 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19196 ;; Defined at:
 19197 ;;		line 8 in file "../src/Dimmer_B1.c"
 19198 ;; Parameters:    Size  Location     Type
 19199 ;;  lights          1    wreg     unsigned char 
 19200 ;; Auto vars:     Size  Location     Type
 19201 ;;  lights          1    1[COMMON] unsigned char 
 19202 ;; Return value:  Size  Location     Type
 19203 ;;		None               void
 19204 ;; Registers used:
 19205 ;;		wreg
 19206 ;; Tracked objects:
 19207 ;;		On entry : 0/0
 19208 ;;		On exit  : 0/0
 19209 ;;		Unchanged: 0/0
 19210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19212 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19213 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19214 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19215 ;;Total ram usage:        2 bytes
 19216 ;; Hardware stack levels used:    1
 19217 ;; This function calls:
 19218 ;;		Nothing
 19219 ;; This function is called by:
 19220 ;;		_setDimmerLights_IntrIOC_GO
 19221 ;; This function uses a non-reentrant model
 19222 ;;
 19223                           
 19224                           
 19225                           ;psect for function _DimmerIntrIOCPointSelect
 19226  1C92                     _DimmerIntrIOCPointSelect:	
 19227                           
 19228                           ;incstack = 0
 19229                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19230                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19231  1C92  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19232                           
 19233                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19234  1C93  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19235  1C94  3A01               	xorlw	1
 19236  1C95  1D03               	skipz
 19237  1C96  2C9C               	goto	i1l722
 19238                           
 19239                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19240  1C97  30BE               	movlw	_DimmerLights1& (0+255)
 19241  1C98  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19242  1C99  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19243  1C9A  0021               	movlb	1	; select bank1
 19244  1C9B  00CB               	movwf	_DimmerLightsIntrIOC^(0+128)
 19245  1C9C                     i1l722:	
 19246                           
 19247                           ;Dimmer_B1.c: 12: }
 19248                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19249  1C9C  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19250  1C9D  3A02               	xorlw	2
 19251  1C9E  1D03               	skipz
 19252  1C9F  0008               	return
 19253                           
 19254                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19255  1CA0  30CD               	movlw	_DimmerLights2& (0+255)
 19256  1CA1  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19257  1CA2  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19258  1CA3  0021               	movlb	1	; select bank1
 19259  1CA4  00CB               	movwf	_DimmerLightsIntrIOC^(0+128)
 19260  1CA5  0008               	return
 19261  1CA6                     __end_of_DimmerIntrIOCPointSelect:	
 19262  007E                     btemp	set	126	;btemp
 19263  007E                     pic14e$flags	set	126
 19264  007E                     wtemp	set	126
 19265  007E                     wtemp0	set	126
 19266  0080                     wtemp1	set	128
 19267  0082                     wtemp2	set	130
 19268  0084                     wtemp3	set	132
 19269  0086                     wtemp4	set	134
 19270  0088                     wtemp5	set	136
 19271  007F                     wtemp6	set	127
 19272  007E                     ttemp	set	126
 19273  007E                     ttemp0	set	126
 19274  0081                     ttemp1	set	129
 19275  0084                     ttemp2	set	132
 19276  0087                     ttemp3	set	135
 19277  007F                     ttemp4	set	127
 19278  007E                     ltemp	set	126
 19279  007E                     ltemp0	set	126
 19280  0082                     ltemp1	set	130
 19281  0086                     ltemp2	set	134
 19282  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         261
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     79      80
    BANK1            80      9      79
    BANK2            80      0      80
    BANK3            80      0      69
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK2[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw2(BANK2[2]), DlySw1(BANK2[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _main->_Switch_Main
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_getMain_All_Error_Status
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_getMain_All_Error_Status
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setRF_DimmerLights
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_setRF_DimmerLights
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _Switch_Main->_setMain_Exception

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  141902
                                              5 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1345
                             _setBuz
                          _setTxData
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     244
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     495
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0     161
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0     161
                                              7 BANK0      2     2      0
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   35542
                                             77 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0   22185
                                             70 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     450
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0   13129
                                             75 BANK0      2     2      0
                                              0 BANK1      5     5      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0   10510
                                             70 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   48702
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   48702
                                             75 BANK0      4     4      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   47873
                                             73 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1389
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   46300
                             _setBuz
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   29853
                                             70 BANK0      3     3      0
             _getDimmerLights_Status
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   15102
                                             68 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   14879
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14813
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14747
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4043
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     252
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0     808
                                              9 BANK0      7     7      0
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      73
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1368
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    8535
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   11933
                                             70 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   11521
                                             69 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    8577
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1    1445
                                              7 BANK0      3     2      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     204
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   28468
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   28468
                                             70 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    9921
                                             66 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1345
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                4     4      0   10176
                                             66 BANK0      4     4      0
            _DimmerLightsPointSelect
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    8128
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    7327
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     430
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     266
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     266
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1317
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     319
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     181
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0      89
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     494
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     404
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     359
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     268
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     110
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
               _setRF_DimmerLights
                 _setPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
               _setTxData
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setRF_DimmerLights
                 _setPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
               _setTxData
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
           _setRF_DimmerLights
             _setPercentValue
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
           _setTxData
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv
     _setTxData

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      9      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     187      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     187      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Nov 18 16:56:48 2014

                   __size_of_Switch_Main 0024                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l96 1723                                       l98 1737  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1F1E  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 007C                     _getDimmerLights_Line 1C7F  
                 __end_of_setDelayOff_GO 08C2                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 15EB  
                   _setDimmerLights_Line 1D0C                             ___ftadd@sign 0048  
                                    l110 144D                                      l106 1453  
                                    l107 144F                                      l108 143D  
                                    l330 1D6F                                      l331 1D71  
                   _setDimmerLights_SwOn 13CA                                      l255 09C1  
                                    l280 0B65                                      l281 0BAC  
                                    l374 1F8F                                      l582 07FA  
                                    l826 0855                                      l766 1C50  
                                    l864 1C88                                      l777 1174  
                                    l865 1C8F                                      _GIE 005F  
                                    _CRC 00C8                                      l996 1DD3  
                                    l997 1DDB                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0017  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RA4 0064  
                                    _LED 007B                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00BC  
                                    _ISR 0004                                      _WDT 0128  
           getDimmerLights_Status@lights 0022                                      _Sw1 0157  
                                    _Sw2 01DC                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1D7C                    _Buzzer_Initialization 1A86  
                        __end_of_ADC_Set 1AC2                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
           getDimmerLights_Status@status 0023                          _setDimmerLights 0CBA  
                 _setMain_Exception$7062 00E7                        ??_getSw_KeyStatus 0020  
                  _setDimmerLights_AdjRF 1F1E                                     ?_ISR 0070  
        setDimmerLights_ErrorClose@count 0067                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1B9B                               Load_Main@i 002F  
                             Load_Main@j 002B                             ___ftdiv@sign 003D  
                                   l1031 12F9                                     l2031 1250  
                                   l2015 0AE3                                     l1313 1110  
                                   l2025 0B39                                     l1322 14A0  
                                   l2045 0AC7                                     l2057 132B  
                                   l2049 1668                 ?_DimmerLightsPointSelect 0070  
                                   l1461 0081                                     l1613 0DE2  
                                   l1462 01C5                                     l1463 01C3  
                                   l1458 022B                                     l1299 1218  
                                   l2363 1D28                          __end_of_IOC_Set 1B59  
                                   l2391 0270                                     l2720 1148  
                                   l2379 1F51                                     l6004 1CB1  
                                   l6020 10BA                                     l2724 1144  
                                   l2389 0397                                     l2902 090C  
                                   l2719 112D                                     l2675 14E0  
                                   l6060 15AD                                     l1964 06BF  
                                   l7020 1E67                                     l2925 057B  
                                   l1973 063E                                     l6150 0899  
                                   l6134 0A49                                     l6070 15B5  
                                   l6054 15A2                                     l1974 063A  
                                   l1966 05FC                                     l7006 1CC5  
                                   l7030 1E73                                     l7022 1E69  
                         _Load_Main$3848 002D                                     l1967 05FE  
                                   l6072 15C1                                     l1976 0677  
                                   l1968 0606                                     l7032 1E77  
                                   l6402 1DA7                                     l7050 1368  
                                   l6154 089F                                     l6082 15DC  
                                   l8002 0114                                     l8010 0127  
                                   l7060 1378                                     l6156 08AC  
                                   l6172 1BC4                                     l6260 140A  
                                   l6500 1538                                     l6412 1F6F  
                                   l7054 136E                                     l6158 08B5  
                                   l6086 15E4                                     l6078 15D3  
                                   l6414 1F72                                     l7064 137E  
                                   l7048 1365                                     l2896 08F5  
                                   l6504 153C                                     l7232 160F  
                                   l8008 0121                                     l6344 1E10  
                                   l6600 09C7                                     l5800 0504  
                                   l7058 1375                                     l6514 1D19  
                                   l7234 1615                                     l6346 1E16  
                                   l6418 1F78                                     l6610 09D7  
                                   l6602 09CA                                     l5810 051A  
                                   l6700 1F0D                                     l6444 1128  
                                   l7244 163C                                     l8028 0172  
                                   l5804 050B                                     l6372 166F  
                                   l7404 0D61                                     l7332 1EAC  
                  _setDimmerLights_SwOff 0802                                     l5742 08D2  
                                   l6286 0849                                     l6454 113F  
                                   l6446 1131                                     l7350 1476  
                                   l6630 0B43                                     l6614 09DD  
                                   l6606 09D0                                     l5830 0551  
                                   l5822 0534                                     l7326 1EA4  
                                   l8118 12B3                                     l5752 08FA  
                                   l5744 08DC                                     l6480 1516  
                                   l7344 1461                                     l6608 09D4  
                                   l5840 056D                                     l5832 0556  
                                   l5912 0EA6                                     l6296 118B  
                                   l6376 1688                                     l6560 0AA4  
                                   l6552 0A86                                     l7520 065E  
                                   l7600 0966                                     l7328 1EA7  
                                   l5770 1C19                                     l5754 0902  
                                   l5746 08E1                                     l5738 08CB  
                                   l6466 1505                                     l6474 150D  
                                   l6634 0B49                                     l5850 059F  
                                   l5842 0577                                     l5834 055A  
                                   l5930 0EF7                                     l6562 0AA8  
                                   l6538 0A5A                                     l8146 1F5A  
                                   l7434 0DB1                                     l8170 14CA  
                                   l8314 16BE                                     l6396 1D9E  
                                   l6628 0B40                                     l6636 0B4C  
                                   l5860 05BA                                     l5828 0547  
                                   l6388 1319                                     l6556 0A9C  
                                   l6812 11C8                                     l7620 025B  
                                   l7444 0DC6                                     l8180 14E1  
                                   l7710 1427                                     l6398 1DA1  
                                   l5766 1C13                                     l5870 0DFD  
                                   l6742 10E0                                     l6662 0B77  
                                   l6646 0B62                                     l6582 0996  
                                   l5846 058D                                     l5942 0F13  
                                   l5934 0EFF                                     l5918 0EBC  
                                   l6558 0AA0                                     l6566 0AAC  
                                   l7518 065C                                     l7606 0976  
                                   l7446 0DC7                                     l8318 16C9  
                                   l6744 10C4                                     l6496 1534  
                                   l6488 151E                                     l6904 10F8  
                                   l8096 0219                                     l6664 0B90  
                                   l6648 0B5C                                     l6576 098D  
                                   l7536 068C                                     l6840 1788  
                                   l7608 097F                                     l5890 0E54  
                                   l5962 0C4C                                     l6746 10E5  
                                   l6578 0990                                     l5946 0F1B  
                                   l5788 1EE4                                     l5876 0E13  
                                   l5980 0C7C                                     l7820 0735  
                                   l6676 0BAE                                     l6596 09A8  
                                   l7548 06AD                                     l7484 061D  
                                   l7572 1D33                                     l6836 1782  
                                   l7660 030E                                     l7636 029E  
                                   l7900 0BD3                                     l6686 1FA0  
                                   l6694 1F04                                     l5990 0CA0  
                                   l5982 0C8A                                     l6790 155C  
                                   l6838 1757                                     l7590 0948  
                                   l7582 0930                                     l7646 02D0  
                                   l7670 0340                                     l6688 1FAB  
                                   l6696 1F07                                     l5992 0CA3  
                                   l6768 0D0E                                     l7760 116E  
                                   l7568 1D2D                                     l7584 093D  
                                   l7912 0C00                                     l5898 0E6D  
                                   l7762 1176                                     l5996 0CB1  
                                   l5988 0C97                                     l6948 1BF8  
                                   l6980 0AFE                                     l7596 0956  
                                   l7908 0BF8                    _myMain_Initialization 1B9B  
                                   l7758 116B                                     l6990 0B24  
                                   l7952 0070                                     l6968 0AE6  
                                   l7696 0393                                     l7928 0C2D  
                                   l7972 009B                                     l6996 0B2F  
                                   _CFGS 0CAE                                     l7978 00C5  
                           __CFG_WDTE$ON 0000                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     u5005 15D4  
                                   u4225 08D7                                     u4245 08F0  
                                   u5070 09F7                                     u4265 08FD  
                                   u5235 1CF1                                     u5075 09F5  
                                   u4435 0535                                     _PEIE 005E  
                                   u4605 0E35                                     u4525 056E  
                                   u6045 1760                                     u4295 0913  
                                   u4615 0E55                                     u4625 0E64  
                                   u4465 0548                                     u4705 0F00  
                                   u4635 0E6E                                     u4715 0F06  
                                   u8005 00DA                                     u4815 0C7D  
                                   u4495 055B                                     u7055 0617  
                                   u4905 10A6                                     u4745 0F1C  
                                   u4595 0E25                                     u4755 0F22  
                                   u4675 0EC8                                     u4845 0C98  
                                   u4685 0ED8                                     u7505 141D  
                                   u4785 0C53                                     u8065 012D  
                                   u7185 069D                                     u5835 1F95  
                                   u8235 14B9                                     u4965 15B8  
                                   u8245 14D8                                     u8175 12AA  
                                   u4985 15C2                                     u5945 10CD  
                                   u8185 12B9                                     u8265 14EF  
                                   u4995 15CC                                     u7735 120F  
                                   u6935 0DA2                                     u6955 0DB7  
                                   u7845 0C1A                                     u7795 0BE6  
                                   u7985 00C7                                     u7995 00CC  
                                   _LWLO 0CAD                                     _RSSI 00CC  
                                   _WREN 0CAA                                     _Buz1 00B0  
                                   _Load 012A                                     _Temp 00D4  
                                   _main 169A                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 0800                          __end_of_RF_Main 1A8F  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0020  
                                   btemp 007E                          __end_of_WDT_Set 1B71  
                                   ltemp 007E            __size_of_setRF_Initialization 000B  
                       _setDimmerReClock 1AC2                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 1340  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                      ?_getDimmer_LoadOK 0070                                    ??_ISR 0077  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
                 _getDimmerLights_Status 1BAA                       ??_getDimmer_LoadOK 0020  
         __size_of_DimmerIntrPointSelect 0012                         __end_of_LED_Main 1B4D  
       setDimmerLights_ErrorClose@lights 0068            __end_of_DimmerIntrPointSelect 1C10  
                  ?_getDimmerLights_Line 0070                    ?_setDimmerLights_Main 0070  
                  ?_setDimmerLights_Line 0070                          ?_setDelayOff_GO 002A  
                  ?_setDimmerLights_SwOn 0070                                    ?_main 00EB  
                        __end_of___awdiv 15EB                          __end_of___ftadd 05D2  
                        __end_of___ftdiv 0E8F                          __end_of___ftmul 0F43  
                        ___awdiv@divisor 0020                                    _T1CON 0018  
                        __end_of___fttol 0CBA                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                                  i1l722 1C9C                                    i1l734 1C07  
                                  i1l745 04B6                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _TMR1H 0017  
                                  _TMR1L 0016                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0021  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB1 1069  
                                  _WPUB2 106A                     setMain_Exception@buz 00E6  
                __end_of_Timeout_Counter 1CF7                            __CFG_WRT$HALF 0000  
     __end_of_setDimmerLights_IntrIOC_GO 128B               _setDimmerLights_IntrIOC_GO 1254  
                       __end_of_TMR1_ISR 2000             __size_of_CC2500_WriteCommand 001A  
     __end_of_setDimmerLights_ErrorClose 17A5               _setDimmerLights_ErrorClose 174B  
                       __end_of_TMR1_Set 1B65                                    _getAD 1E99  
                          ___awtoft@sign 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1C46  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E8                           __CFG_BOREN$OFF 0000  
           __end_of_getMain_Lights_Count 1D4C                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
           __end_of_getMain_LightsStatus 10E8            __end_of_setLED_Initialization 1BDC  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0070  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 09ED              __size_of_Flash_Memory_Write 002F  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0003  
       __size_of_DelayOff_Initialization 0008                   ?_setLoad_AH_AL_Restore 0070  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 17A5  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ?_setMemory_Modify 0070  
                      ??_setPercentValue 0059                             __end_of_main 16F2  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 1AA5  
                     ??_setMemory_Modify 0020                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0D4D  
                   _setSw_Initialization 1AEA                                   ??_main 006F  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0A59                           _setMemory_Data 1B1D  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 0014  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E8  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1C59  
                 ?_setDimmerLights_AdjRF 0070                 __size_of_setRFSW_Control 0058  
                ??_Switch_Initialization 0025                     ??_setRF_DimmerLights 005E  
                                 ?_getAD 0020             setDimmerLights_AdjControl@sw 0028  
                      ??_getRF_KeyStatus 0020                   ?_setDimmerLights_SwOff 0070  
                            _DlyOff_Main 079F                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006F                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 1EFB  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 0923  
               _getMain_All_Error_Status 1117                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1E1D                                   i1l7160 0402  
                                 i1l7180 0454                                   i1l7156 03FB  
                                 i1l7192 0489                                   i1l7184 0465  
                                 i1l6722 1284                                   i1l7178 044E  
                                 i1l7186 046B                                   i1l7196 049E  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                                   u651_25 03D5  
                     __size_of_Load_Main 01E7                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   u766_25 1FFA  
                                 _IO_Set 1D7C                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 0800  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1D0C  
                                 _Dimmer 0120                                   _DlySw1 016C  
                                 _DlySw2 016E               __end_of_Mcu_Initialization 1C34  
                    __end_of_Buzzer_Main 145A                                   _Memory 0220  
                                 _Timer1 0123       __end_of_setDimmerLights_TriggerAdj 1E99  
             _setDimmerLights_TriggerAdj 1E79                                   ___bmul 1C10  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 0014                                ??___ftdiv 0034  
                  setDimmerLights@lights 0029                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
                 ??_getDimmerLights_Line 0020              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                   ??_setDimmerLights_Line 0020  
                                 _r_data 00D2                                   _s_data 00D3  
                 ??_setDimmerLights_SwOn 0062                                   _setLED 14F6  
                                 _myMain 00A0                   __end_of_setMemory_Data 1B29  
                       _DimmerLightsIntr 007A                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0027                         ___awdiv@quotient 0027  
                                 _setBuz 16F2                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 1AAF         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
            ?_setDimmerLights_AdjControl 0070      __end_of_setDimmerLights_IntrControl 04DC  
            _setDimmerLights_IntrControl 03A0                 Flash_Memory_Read@address 0022  
                       ?_Timeout_Counter 0070               __end_of_setMemory_LoopSave 1C7F  
            getMain_Lights_Count@status1 0022              getMain_Lights_Count@status2 0023  
            getMain_Lights_Count@status3 0021                    __end_of_SwPointSelect 1CCE  
           __size_of_Flash_Memory_Modify 004E        setDimmerLights_IntrControl@lights 0076  
                __size_of_LedPointSelect 001B                  __size_of_getMain_LoadOK 000E  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
             getMain_LightsStatus@status 0028                               _TouchPower 1D21  
             ?_getAll_DimmerLights_AdjGO 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 1800  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0046  
                              ?_LED_Main 0070                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                     _getRF_KeyStatus$5253 0022  
                          ?_my_MainTimer 0070                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                           __pidataBANK4 1EB9                            __end_of_getAD 1EB9  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
                 setLoad_AH_AL_Restore@i 0021                setMemory_LoopSave@command 0021  
           __size_of_setDimmerLights_Adj 0051                       _LED_Initialization 1B35  
                        _getSw_KeyStatus 1E5A                ??_setControl_Lights_Table 0069  
                     getRF_KeyStatus@key 0021                         ??_DelayTimejudge 0024  
                        ?_setMemory_Data 0020            ??_Flash_Memory_Initialization 005D  
                       ?_setDimmerLights 0027                     _getMain_Lights_Count 1D36  
                              ?_WDT_Main 0070                        __end_of_Load_Main 0231  
                     __size_of_getBuz_GO 0011                     _getMain_LightsStatus 10BC  
             __end_of_set_TimeoutCleared 1AAA                 __end_of_setDimmerReClock 1ACA  
                     __size_of_getRxData 0074                      ?_LED_Initialization 0070  
                  getMain_LightsStatus@i 0026                        ?_CC2500_WriteByte 0070  
                         _DimmerLights11 00C9                           _DimmerLights22 00CA  
                   __size_of_setLED_Main 003E                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 1A8F  
                     ??_CC2500_WriteByte 0020                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 1410                        ??_setRFSW_Control 0066  
                      __end_of_Temp_Main 1A95                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                           ??_my_MainTimer 002D  
                             ??_LED_Main 0025                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1ACA                getMain_LightsStatus@count 0025  
                          ??_Switch_Main 006D                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 0079                        LedPointSelect@led 0021  
                 __size_of_DelayOff_Main 0008                     __size_of_setRF_Learn 0014  
                            setBuz@count 002C                  ?_getDimmerLights_Status 0070  
                             __pmaintext 169A                      _CC2500_WriteCommand 1D95  
                   ?_Temp_Initialization 0070                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 0013                         ??_setDelayOff_GO 002C  
          ??_DimmerLights_Initialization 0024                               ??_TMR1_ISR 0077  
                          ?_setTemp_Main 0070                               _getLoad_AD 0BB2  
                             ??_TMR1_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                               _getLoad_OK 1ADA  
                     __size_of_setTxData 00BD                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                    ?_getMain_Lights_Count 0070  
                                _ADC_Set 1ABB                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 128B                               ??_WDT_Main 0020  
                  ?_getMain_LightsStatus 0070             __end_of_setRF_Initialization 1B11  
                     _setRFSW_AdjControl 1300                                  _IOC_ISR 1B8C  
                                _IOC_Set 1B4D                     __size_of_setLog_Code 0036  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 11E8  
              __size_of_getDimmer_LoadOK 0008                        _Flash_Memory_Read 1DAF  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 0076  
                 __size_of_CC2500_TxData 0068              ?_setDimmerLights_ErrorClose 0070  
                    ?_setRFSW_AdjControl 0070                                  _RF_Data 01A0  
                                _RF_Main 1A8C                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1B65  
        __end_of_setControl_Lights_Table 0AC8                          setRF_Main@error 006E  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _setPercentValue 1384                  ??_setLoad_AH_AL_Restore 0020  
                       ?_getPercentValue 0070             __end_of_CC2500_FrequencyCabr 1B1D  
                        __size_of_IO_Set 0019                        __end_of_getBuz_GO 1BED  
                    ??_Flash_Memory_Main 0029                      ??_Flash_Memory_Read 0020  
                                _VarLED1 0164                                  _VarLED2 0168  
         __end_of_getDimmerLights_Status 1BBA                        __end_of_getRxData 0B3C  
                __end_of_getSw_KeyStatus 1E79                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1CA6                    ??_Temp_Initialization 0020  
        __end_of_setDimmerLights_Trigger 1E3B                     ??_setRFSW_AdjControl 0064  
                         ??_setTemp_Main 0027                          __size_of___bmul 0012  
                                ___awdiv 1597                                  ___ftadd 04DC  
                                ___ftdiv 0DE6                                  ___ftmul 0E8F  
                                ___fttol 0C33                      __end_of_Switch_Main 1F65  
                ??_Buzzer_Initialization 0020                          _getRF_KeyStatus 1BED  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0050                     setRFSW_AdjControl@sw 0067  
                        __size_of_setBuz 0059                                  __ptext1 14A8  
                                __ptext2 1B9B                                  __ptext3 128B  
                                __ptext4 0BB2                                  __ptext5 1E99  
                                __ptext6 1C34                                  __ptext7 0002  
                                __ptext8 1A92                                  __ptext9 0D4D  
                ??_setDimmerLights_AdjRF 005F                __size_of_CC2500_SIDLEMode 0004  
                  _DimmerIntrPointSelect 1BFE                             __size_of_ISR 000F  
             ??_getMain_All_Error_Status 0020                __end_of_Flash_Memory_Main 121E  
              __end_of_Flash_Memory_Read 1DC9                  ??_setDimmerLights_SwOff 0062  
                             _setRF_Main 05D2                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1AD2                        _DimmerLights_Main 114A  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
              __size_of_setMemory_Modify 0013            __end_of_DlyOff_Initialization 1B06  
             __end_of_CC2500_ClearRXFIFO 1A99                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1A9D            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006F                           _LedPointSelect 1DC9  
                    _DelayOffPointSelect 1CA6                           _getMain_LoadOK 1B7E  
                                clrloop0 1AB6           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 1B7E                     end_of_initialization 0046  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 1068  
                          _DelayTime_1us 1F8A                        __end_of_setTxData 1000  
             __end_of_Flash_Memory_Write 1117                                  init_ram 1AAF  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0066  
                   Flash_Memory_Read@ret 0023                                  initloop 1AB0  
                             _setSw_Main 0231                    CC2500_ReadByte@loop_b 0021  
                 setDimmerLights_SwOn@sw 0064                        _CC2500_ReadStatus 1F65  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1BCB  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 0B3C  
                          _CC2500_TxData 0985                      ??_CC2500_InitSetREG 0025  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 145A  
                            ?_getLoad_AD 0070                              ?_getLoad_OK 0070  
                 ??_getMain_Lights_Count 0020                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1AF2                      ??_CC2500_ReadStatus 0022  
                 ??_getMain_LightsStatus 0024                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                      __size_of_TouchPower 0015  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 117E                       _Mcu_Initialization 1C22  
               __size_of_CC2500_PowerRST 0044                     __end_of_my_MainTimer 14F6  
                         ?_DelayOff_Main 0070                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1DE4                  __end_of_setPercentValue 13CA  
                 __end_of_getMain_LoadOK 1B8C                 __size_of_CC2500_WriteREG 0023  
              __end_of_CC2500_InitSetREG 1092                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 1546  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1F8A  
            ??_getAll_DimmerLights_AdjGO 0020          getMain_All_Error_Status@command 0025  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1D95  
                   _setRF_Initialization 1B06                       _setMemory_LoopSave 1C6C  
                            _Switch_Main 1F41                        __size_of_LED_Main 000C  
                       ?_getSw_KeyStatus 0070                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1C46  
                __end_of_getRF_KeyStatus 1BFE                        _setMain_Exception 0923  
                       ??_setMemory_Data 0021                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1CF7                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                     ?_setMain_Exception 0070                      ?_setMemory_LoopSave 0070  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 1C22  
               setMain_Exception@command 00EA                     setRF_DimmerLights@on 005D  
               _DimmerIntrIOCPointSelect 1C92          _setDimmerLights_AdjControl$2577 0027  
                      getSw_KeyStatus@sw 0024                        __size_of_TMR1_ISR 0029  
          __size_of_getDimmerLights_Line 0013                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR1_Set 000C            __size_of_setDimmerLights_Main 0057  
                         __end_of_setLED 1546            __size_of_setDimmerLights_Line 0015  
          __size_of_setDimmerLights_SwOn 0046                           __end_of_setBuz 174B  
                    ??_setMain_Exception 006B                     _CC2500_FrequencyCabr 1B11  
             __size_of_Flash_Memory_Main 0036               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 1642  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 117E  
                        ?_LedPointSelect 0070                                _Load_Main 004A  
                            __end_of_ISR 0013                          ?_getMain_LoadOK 0070  
                       _getDimmer_LoadOK 1AE2                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 0005                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1E5A  
        __size_of_setTemp_Initialization 0001                     ??_setMemory_LoopSave 0020  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 0DE6                      __size_of_getLoad_AD 0081  
                           ?_Buzzer_Main 0070                      __size_of_getLoad_OK 0008  
                     _set_TimeoutCleared 1AA5                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 0160  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 0037                   ?_setLED_Initialization 0070  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              __end_of_setMain_Exception 0985                __size_of_CC2500_WriteByte 0019  
                              _Temp_Main 1A92                      ?_set_TimeoutCleared 0070  
                         ??_WDT_Clearing 0020                                _Rx_Length 00CD  
                setRF_DimmerValue@lights 0063                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 0014  
                              _Tx_Length 00D0                              __pdataBANK4 0245  
              _getAll_DimmerLights_AdjGO 1BBA                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0069                        ??_CC2500_ReadByte 0020  
       __end_of_getMain_All_Error_Status 114A                         _CC2500_SIDLEMode 1A9D  
             __size_of_DimmerLights_Main 0034                __end_of_setRF_DimmerValue 11B3  
                     setMemory_Data@data 0020                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
         _getAll_DimmerLights_AdjGO$2557 0022                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                       _setMemory_Modify 1C59                               ?_Load_Main 0070  
                          __pcstackBANK0 0020                            __pcstackBANK1 00E6  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0093                            DlyOff_Main@sw 0068  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 0061               __size_of_CC2500_ReadStatus 0025  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 01BE                            _DimmerLights2 01CD  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 001C  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1E00  
               setRFSW_AdjControl@status 0066                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006F                           getRxData@error 006A  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 00F1  
                         Load_Main@adjgo 002C                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                         ?_getRF_KeyStatus 0070  
                         Load_Main@error 002E                   _setTemp_Initialization 0801  
                              _getBuz_GO 1BDC      __end_of_Flash_Memory_Initialization 079F  
            _Flash_Memory_Initialization 06C3                                 ?___awdiv 0020  
                              __ptext100 0861                                __ptext101 1092  
                              __ptext110 1340                                __ptext102 1C10  
                              __ptext111 1068                                __ptext103 1BAA  
                              __ptext120 1CE2                                __ptext112 1E3B  
                              __ptext104 1C46                                __ptext121 1D63  
                              __ptext113 1EFB                                __ptext105 1ACA  
                              __ptext130 1254                                __ptext122 1410  
                              __ptext114 1B11                                __ptext106 1AFB  
                              __ptext131 1C92                                __ptext123 1A86  
                              __ptext115 1F8A                                __ptext107 1CA6  
                              __ptext116 1A99                                __ptext108 1CF7  
                              __ptext125 1FD7                                __ptext117 1A95  
                              __ptext109 1A9D                                 ?___ftadd 003E  
                              __ptext126 03A0                                __ptext118 1D95  
                              __ptext127 1BFE                                __ptext119 1AA5  
                              __ptext128 1B8C                                __ptext129 1AC2  
                              _getRxData 0AC8                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                  __size_of_my_MainTimer 004E                  __end_of_setRFSW_Control 169A  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
                       getMain_LoadOK@ok 0022            __end_of_Buzzer_Initialization 1A89  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                 getDimmerLights_Line@line 0021  
                     __end_of_TouchPower 1D36                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 016F  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
          __end_of_setDimmerLights_AdjRF 1F41                   CC2500_WriteByte@loop_a 0021  
                 _DimmerLights_Main$2494 0068                                _r_address 00D1  
         __size_of_setDimmerLights_SwOff 005F           __size_of_myMain_Initialization 000F  
          __end_of_setDimmerLights_SwOff 0861             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1BAA                           __size_of_getAD 0020  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1CBA  
                    __end_of_setLED_Main 1300                      _DimmerLightsIntrIOC 00CB  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1A92  
           setDimmerLights_SwOff@command 0064                        _CC2500_rfSettings 102F  
                               _LED_Main 1B41                          SwPointSelect@sw 0021  
                              clear_ram0 1AB5                 CC2500_InitPATable@loop_d 0027  
             __size_of_setMain_Exception 0062                             _my_MainTimer 14A8  
                              _setTxData 0F43      __end_of_DimmerLights_Initialization 1D63  
            _DimmerLights_Initialization 1D4C                       _CC2500_ClearRXFIFO 1A95  
                     _CC2500_ClearTXFIFO 1A99           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1CE2                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 10E8                               ?_getRxData 0070  
                           ??_getLoad_AD 0024                                 _TMR1_ISR 1FD7  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                           ??_getLoad_OK 0020                                 _TMR1_Set 1B59  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 0126  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1DAF  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1C34  
                DlyOff_Initialization@sw 0022                    getSw_KeyStatus@status 0023  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         setRF_Main@loop_f 006C  
                  __size_of_setTemp_Main 0099                  __size_of_setDelayOff_GO 0061  
           ??_setDimmerLights_AdjControl 0025                                 _DelayOff 0078  
                           setSw_Main@sw 0068         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0029                         __size_of_IOC_ISR 000F  
           ?_setDimmerLights_IntrControl 0070           getMain_All_Error_Status@status 0026  
                       __size_of_IOC_Set 000C             __end_of_Flash_Memory_Erasing 1B35  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 1254  
                  _DlyOff_Initialization 1AFB                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1AA1  
                       __size_of_WDT_Set 000C                    setRFSW_Control@status 0067  
                setMain_Exception@status 00E9                       __end_of_getLoad_AD 0C33  
                     __end_of_getLoad_OK 1AE2                    _Switch_Initialization 1B71  
      __size_of_getMain_All_Error_Status 0033                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0028                ?_getMain_All_Error_Status 0070  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 12C2  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1D63  
                      getLoad_AD@channel 0026             Flash_Memory_Initialization@i 005E  
                               _SwDetect 00CF                              ??_Temp_Main 0029  
                      setRFSW_Control@sw 0068            _getMain_All_Error_Status$7073 0021  
          _getMain_All_Error_Status$7074 0023                 __end_of_getDimmer_LoadOK 1AEA  
                    _Load_Initialization 1AAA                                setLED@led 0023  
                ??_DimmerIntrPointSelect 0070      __size_of_setDimmerLights_AdjControl 0035  
                           _setTemp_Main 0D4D                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                 setDimmerLights_SwOn@idle 0063  
                               ___awtoft 1ED9                         ??_LedPointSelect 0020  
                               ___ftpack 08C2            __size_of_getMain_Lights_Count 0016  
                       ??_getMain_LoadOK 0021            __size_of_getMain_LightsStatus 002C  
                      getTemp_AD@channel 0025                             ??_setRF_Main 006B  
                   CC2500_WriteREG@value 0022                              _setLED_Main 12C2  
             __end_of_setRF_DimmerLights 0A59                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 002E       __size_of_getAll_DimmerLights_AdjGO 0011  
                   ?_Load_Initialization 0070                                 __ptext10 1A8F  
                               __ptext11 0801                                 __ptext20 1C7F  
                               __ptext12 1F41                                 __ptext21 1B71  
                               __ptext13 0231                                 __ptext30 1642  
                               __ptext22 1AEA                                 __ptext14 1CCE  
                               __ptext31 1300                                 __ptext23 1D21  
                               __ptext15 11B3                                 __ptext40 0985  
                               __ptext32 117E                                 __ptext24 1A8C  
                               __ptext16 1E5A                                 __ptext41 0B3C  
                               __ptext33 1F1E                                 __ptext25 05D2  
                               __ptext17 1CBA                                 __ptext50 1B4D  
                               __ptext42 1F65                                 __ptext34 17A5  
                               __ptext26 0AC8                                 __ptext18 0923  
                               __ptext51 1AA1                                 __ptext43 1E00  
                               __ptext35 0E8F                                 __ptext27 121E  
                               __ptext19 174B                                 __ptext60 12C2  
                               __ptext52 1ABB                                 __ptext44 1A89  
                               __ptext36 04DC                                 __ptext28 1C6C  
                               __ptext61 1B35                                 __ptext53 004A  
                               __ptext45 1B06                                 __ptext37 1C59  
                               __ptext29 0A59                                 __ptext70 1DAF  
                               __ptext62 1BCB                                 __ptext54 1B7E  
                               __ptext46 1C22                                 __ptext38 1BED  
                               __ptext71 114A                                 __ptext63 11E8  
                               __ptext55 1AE2                                 __ptext47 1B65  
                               __ptext39 1BDC                                 __ptext80 1ADA  
                               __ptext72 15EB                                 __ptext64 145A  
                               __ptext56 1D36                                 __ptext48 1B59  
                               __ptext81 1D4C                                 __ptext73 1546  
                               __ptext65 1B29                                 __ptext57 1AAA  
                               __ptext49 1D7C                                 __ptext90 0802  
                               __ptext82 1FB0                                 __ptext74 0CBA  
                               __ptext66 06C3                                 __ptext58 1DE4  
                               __ptext91 0F43                                 __ptext83 0800  
                               __ptext75 14F6                                 __ptext67 1B1D  
                               __ptext59 1B41                                 __ptext92 09ED  
                               __ptext84 1AD2                                 __ptext76 1DC9  
                               __ptext68 10E8                                 __ptext93 1384  
                               __ptext85 079F                                 __ptext77 1D0C  
                               __ptext69 1AF2                                 __ptext94 0C33  
                               __ptext86 13CA                                 __ptext78 1117  
                               __ptext95 0DE6                                 __ptext87 16F2  
                               __ptext79 10BC                                 __ptext96 1ED9  
                               __ptext88 1597                                 __ptext97 08C2  
                               __ptext89 1BBA                                 __ptext98 1E79  
                               __ptext99 1E1D                                 __product 0245  
          ??_setDimmerLights_IntrControl 0072                  ??_setLED_Initialization 0024  
               ??_getDimmerLights_Status 0022           __size_of_Dimmer_Initialization 0001  
           __end_of_getDimmerLights_Line 1C92            __end_of_Dimmer_Initialization 0801  
           __end_of_setDimmerLights_Main 1642             __end_of_setDimmerLights_Line 1D21  
                       Switch_Main@error 006E             __end_of_setDimmerLights_SwOn 1410  
                 getDimmer_LoadOK@status 0020                             ??_setSw_Main 0066  
                          setLED@command 0022                            __size_of_main 0058  
                            _setRF_Learn 1CCE                 __end_of_CC2500_SIDLEMode 1AA1  
             setDimmerLights_Main@lights 0065              __end_of_DelayOffPointSelect 1CBA  
             CC2500_WriteCommand@command 0023                     setRF_Main@Receive_OK 006D  
              __size_of_setDimmerReClock 0008           setDimmerLights_AdjControl@idle 0026  
                        _CC2500_ReadByte 1E00                       _CC2500_InitPATable 1E3B  
               __end_of_setMemory_Modify 1C6C            setDimmerLights_Trigger@lights 0024  
                     __end_of_setRF_Main 06C3                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012              setDimmerLights_ErrorClose@i 0069  
                   _CC2500_patable_vaule 105E                              ??_getRxData 0069  
                           getLoad_OK@ok 0020         setDimmerLights_TriggerAdj@lights 0024  
                               main@argc 00EB                                 main@argv 00ED  
                    ?_CC2500_InitPATable 0070                     _getSw_KeyStatus$6326 0021  
                   _getSw_KeyStatus$6327 0022                          _CC2500_PowerRST 1340  
               __size_of_getSw_KeyStatus 001F              __end_of_Flash_Memory_Modify 14A8  
                      ??_getPercentValue 0059                              _setLog_Code 121E  
            __end_of_Flash_Memory_Unlock 1AFB                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1EFB                       __end_of_setSw_Main 03A0  
                  ??_Load_Initialization 0022                            _Transceive_OK 03E9  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 1092  
                            pic14e$flags 007E             ??_setDimmerLights_IntrIOC_GO 0072  
             setDimmerLights_Line@lights 0020             ??_setDimmerLights_ErrorClose 0066  
                setDimmerLights_SwOff@sw 0065        __end_of_getAll_DimmerLights_AdjGO 1BCB  
            __size_of_setMemory_LoopSave 0013                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1FD7  
__size_of_setDimmerLights_Initialization 0027           _setDimmerLights_Initialization 1FB0  
            __end_of_setDimmerLights_Adj 1597                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                      _RF_Initialization 1A89     __size_of_setDimmerLights_IntrControl 013C  
                            getLoad_AD@i 0029                              getLoad_AD@j 0028  
                            getLoad_AD@k 0027                     _Flash_Memory_Erasing 1B29  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00CE  
        __end_of_DelayOff_Initialization 1AD2      __size_of_setDimmerLights_IntrIOC_GO 0037  
    __size_of_setDimmerLights_ErrorClose 005A                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1ADA       __end_of_setDimmerLights_AdjControl 11E8  
             _setDimmerLights_AdjControl 11B3                      ??_RF_Initialization 0021  
                __size_of_setMemory_Data 000C                           _setDelayOff_GO 0861  
       __size_of_setControl_Lights_Table 006F                   __end_of_DelayTimejudge 10BC  
   __size_of_Flash_Memory_Initialization 00DC              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0066                    setMemory_Data@address 0022  
                  __end_of_DelayTime_1us 1FB0                  __end_of_CC2500_ReadByte 1E1D  
           __end_of_setSw_Initialization 1AF2                          _Timeout_Counter 1CE2  
        __size_of_getDimmerLights_Status 0010                     getPercentValue@value 005B  
             __end_of_LED_Initialization 1B41         __size_of_setDimmerLights_Trigger 001E  
         __end_of_setTemp_Initialization 0802                 __size_of_setPercentValue 0046  
                setMemory_Modify@command 0021                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1A8C                    __end_of_CC2500_RxData 0BB2  
                  __end_of_CC2500_TxData 09ED                    _setLoad_AH_AL_Restore 1DE4  
                __end_of_CC2500_PowerRST 1384           getAll_DimmerLights_AdjGO@adjgo 0021  
