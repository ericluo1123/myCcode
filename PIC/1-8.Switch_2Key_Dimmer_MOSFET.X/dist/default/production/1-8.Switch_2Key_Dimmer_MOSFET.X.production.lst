

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Nov 28 17:05:37 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	intentry,global,class=CODE,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   155                           	dabs	1,0x7E,2
   156  0000                     	;# 
   157  0001                     	;# 
   158  0002                     	;# 
   159  0003                     	;# 
   160  0004                     	;# 
   161  0005                     	;# 
   162  0006                     	;# 
   163  0007                     	;# 
   164  0008                     	;# 
   165  0009                     	;# 
   166  000A                     	;# 
   167  000B                     	;# 
   168  000C                     	;# 
   169  000D                     	;# 
   170  000E                     	;# 
   171  0010                     	;# 
   172  0011                     	;# 
   173  0012                     	;# 
   174  0015                     	;# 
   175  0016                     	;# 
   176  0016                     	;# 
   177  0017                     	;# 
   178  0018                     	;# 
   179  0019                     	;# 
   180  001A                     	;# 
   181  001B                     	;# 
   182  001C                     	;# 
   183  008C                     	;# 
   184  008D                     	;# 
   185  008E                     	;# 
   186  0090                     	;# 
   187  0091                     	;# 
   188  0092                     	;# 
   189  0095                     	;# 
   190  0096                     	;# 
   191  0097                     	;# 
   192  0099                     	;# 
   193  009A                     	;# 
   194  009B                     	;# 
   195  009B                     	;# 
   196  009C                     	;# 
   197  009D                     	;# 
   198  009E                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  0116                     	;# 
   203  0117                     	;# 
   204  011D                     	;# 
   205  018C                     	;# 
   206  018D                     	;# 
   207  018E                     	;# 
   208  0191                     	;# 
   209  0191                     	;# 
   210  0192                     	;# 
   211  0193                     	;# 
   212  0193                     	;# 
   213  0194                     	;# 
   214  0195                     	;# 
   215  0196                     	;# 
   216  0197                     	;# 
   217  0199                     	;# 
   218  019A                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019C                     	;# 
   224  019C                     	;# 
   225  019D                     	;# 
   226  019E                     	;# 
   227  019F                     	;# 
   228  020D                     	;# 
   229  0210                     	;# 
   230  0211                     	;# 
   231  0211                     	;# 
   232  0212                     	;# 
   233  0212                     	;# 
   234  0213                     	;# 
   235  0213                     	;# 
   236  0214                     	;# 
   237  0214                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0216                     	;# 
   242  0216                     	;# 
   243  0217                     	;# 
   244  0217                     	;# 
   245  0291                     	;# 
   246  0291                     	;# 
   247  0292                     	;# 
   248  0293                     	;# 
   249  0298                     	;# 
   250  0298                     	;# 
   251  0299                     	;# 
   252  029A                     	;# 
   253  0394                     	;# 
   254  0395                     	;# 
   255  0396                     	;# 
   256  0FE4                     	;# 
   257  0FE5                     	;# 
   258  0FE6                     	;# 
   259  0FE7                     	;# 
   260  0FE8                     	;# 
   261  0FE9                     	;# 
   262  0FEA                     	;# 
   263  0FEB                     	;# 
   264  0FED                     	;# 
   265  0FEE                     	;# 
   266  0FEF                     	;# 
   267  0000                     	;# 
   268  0001                     	;# 
   269  0002                     	;# 
   270  0003                     	;# 
   271  0004                     	;# 
   272  0005                     	;# 
   273  0006                     	;# 
   274  0007                     	;# 
   275  0008                     	;# 
   276  0009                     	;# 
   277  000A                     	;# 
   278  000B                     	;# 
   279  000C                     	;# 
   280  000D                     	;# 
   281  000E                     	;# 
   282  0010                     	;# 
   283  0011                     	;# 
   284  0012                     	;# 
   285  0015                     	;# 
   286  0016                     	;# 
   287  0016                     	;# 
   288  0017                     	;# 
   289  0018                     	;# 
   290  0019                     	;# 
   291  001A                     	;# 
   292  001B                     	;# 
   293  001C                     	;# 
   294  008C                     	;# 
   295  008D                     	;# 
   296  008E                     	;# 
   297  0090                     	;# 
   298  0091                     	;# 
   299  0092                     	;# 
   300  0095                     	;# 
   301  0096                     	;# 
   302  0097                     	;# 
   303  0099                     	;# 
   304  009A                     	;# 
   305  009B                     	;# 
   306  009B                     	;# 
   307  009C                     	;# 
   308  009D                     	;# 
   309  009E                     	;# 
   310  010C                     	;# 
   311  010D                     	;# 
   312  010E                     	;# 
   313  0116                     	;# 
   314  0117                     	;# 
   315  011D                     	;# 
   316  018C                     	;# 
   317  018D                     	;# 
   318  018E                     	;# 
   319  0191                     	;# 
   320  0191                     	;# 
   321  0192                     	;# 
   322  0193                     	;# 
   323  0193                     	;# 
   324  0194                     	;# 
   325  0195                     	;# 
   326  0196                     	;# 
   327  0197                     	;# 
   328  0199                     	;# 
   329  019A                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019C                     	;# 
   335  019C                     	;# 
   336  019D                     	;# 
   337  019E                     	;# 
   338  019F                     	;# 
   339  020D                     	;# 
   340  0210                     	;# 
   341  0211                     	;# 
   342  0211                     	;# 
   343  0212                     	;# 
   344  0212                     	;# 
   345  0213                     	;# 
   346  0213                     	;# 
   347  0214                     	;# 
   348  0214                     	;# 
   349  0215                     	;# 
   350  0215                     	;# 
   351  0215                     	;# 
   352  0216                     	;# 
   353  0216                     	;# 
   354  0217                     	;# 
   355  0217                     	;# 
   356  0291                     	;# 
   357  0291                     	;# 
   358  0292                     	;# 
   359  0293                     	;# 
   360  0298                     	;# 
   361  0298                     	;# 
   362  0299                     	;# 
   363  029A                     	;# 
   364  0394                     	;# 
   365  0395                     	;# 
   366  0396                     	;# 
   367  0FE4                     	;# 
   368  0FE5                     	;# 
   369  0FE6                     	;# 
   370  0FE7                     	;# 
   371  0FE8                     	;# 
   372  0FE9                     	;# 
   373  0FEA                     	;# 
   374  0FEB                     	;# 
   375  0FED                     	;# 
   376  0FEE                     	;# 
   377  0FEF                     	;# 
   378  0000                     	;# 
   379  0001                     	;# 
   380  0002                     	;# 
   381  0003                     	;# 
   382  0004                     	;# 
   383  0005                     	;# 
   384  0006                     	;# 
   385  0007                     	;# 
   386  0008                     	;# 
   387  0009                     	;# 
   388  000A                     	;# 
   389  000B                     	;# 
   390  000C                     	;# 
   391  000D                     	;# 
   392  000E                     	;# 
   393  0010                     	;# 
   394  0011                     	;# 
   395  0012                     	;# 
   396  0015                     	;# 
   397  0016                     	;# 
   398  0016                     	;# 
   399  0017                     	;# 
   400  0018                     	;# 
   401  0019                     	;# 
   402  001A                     	;# 
   403  001B                     	;# 
   404  001C                     	;# 
   405  008C                     	;# 
   406  008D                     	;# 
   407  008E                     	;# 
   408  0090                     	;# 
   409  0091                     	;# 
   410  0092                     	;# 
   411  0095                     	;# 
   412  0096                     	;# 
   413  0097                     	;# 
   414  0099                     	;# 
   415  009A                     	;# 
   416  009B                     	;# 
   417  009B                     	;# 
   418  009C                     	;# 
   419  009D                     	;# 
   420  009E                     	;# 
   421  010C                     	;# 
   422  010D                     	;# 
   423  010E                     	;# 
   424  0116                     	;# 
   425  0117                     	;# 
   426  011D                     	;# 
   427  018C                     	;# 
   428  018D                     	;# 
   429  018E                     	;# 
   430  0191                     	;# 
   431  0191                     	;# 
   432  0192                     	;# 
   433  0193                     	;# 
   434  0193                     	;# 
   435  0194                     	;# 
   436  0195                     	;# 
   437  0196                     	;# 
   438  0197                     	;# 
   439  0199                     	;# 
   440  019A                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019C                     	;# 
   446  019C                     	;# 
   447  019D                     	;# 
   448  019E                     	;# 
   449  019F                     	;# 
   450  020D                     	;# 
   451  0210                     	;# 
   452  0211                     	;# 
   453  0211                     	;# 
   454  0212                     	;# 
   455  0212                     	;# 
   456  0213                     	;# 
   457  0213                     	;# 
   458  0214                     	;# 
   459  0214                     	;# 
   460  0215                     	;# 
   461  0215                     	;# 
   462  0215                     	;# 
   463  0216                     	;# 
   464  0216                     	;# 
   465  0217                     	;# 
   466  0217                     	;# 
   467  0291                     	;# 
   468  0291                     	;# 
   469  0292                     	;# 
   470  0293                     	;# 
   471  0298                     	;# 
   472  0298                     	;# 
   473  0299                     	;# 
   474  029A                     	;# 
   475  0394                     	;# 
   476  0395                     	;# 
   477  0396                     	;# 
   478  0FE4                     	;# 
   479  0FE5                     	;# 
   480  0FE6                     	;# 
   481  0FE7                     	;# 
   482  0FE8                     	;# 
   483  0FE9                     	;# 
   484  0FEA                     	;# 
   485  0FEB                     	;# 
   486  0FED                     	;# 
   487  0FEE                     	;# 
   488  0FEF                     	;# 
   489  0000                     	;# 
   490  0001                     	;# 
   491  0002                     	;# 
   492  0003                     	;# 
   493  0004                     	;# 
   494  0005                     	;# 
   495  0006                     	;# 
   496  0007                     	;# 
   497  0008                     	;# 
   498  0009                     	;# 
   499  000A                     	;# 
   500  000B                     	;# 
   501  000C                     	;# 
   502  000D                     	;# 
   503  000E                     	;# 
   504  0010                     	;# 
   505  0011                     	;# 
   506  0012                     	;# 
   507  0015                     	;# 
   508  0016                     	;# 
   509  0016                     	;# 
   510  0017                     	;# 
   511  0018                     	;# 
   512  0019                     	;# 
   513  001A                     	;# 
   514  001B                     	;# 
   515  001C                     	;# 
   516  008C                     	;# 
   517  008D                     	;# 
   518  008E                     	;# 
   519  0090                     	;# 
   520  0091                     	;# 
   521  0092                     	;# 
   522  0095                     	;# 
   523  0096                     	;# 
   524  0097                     	;# 
   525  0099                     	;# 
   526  009A                     	;# 
   527  009B                     	;# 
   528  009B                     	;# 
   529  009C                     	;# 
   530  009D                     	;# 
   531  009E                     	;# 
   532  010C                     	;# 
   533  010D                     	;# 
   534  010E                     	;# 
   535  0116                     	;# 
   536  0117                     	;# 
   537  011D                     	;# 
   538  018C                     	;# 
   539  018D                     	;# 
   540  018E                     	;# 
   541  0191                     	;# 
   542  0191                     	;# 
   543  0192                     	;# 
   544  0193                     	;# 
   545  0193                     	;# 
   546  0194                     	;# 
   547  0195                     	;# 
   548  0196                     	;# 
   549  0197                     	;# 
   550  0199                     	;# 
   551  019A                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019B                     	;# 
   555  019B                     	;# 
   556  019C                     	;# 
   557  019C                     	;# 
   558  019D                     	;# 
   559  019E                     	;# 
   560  019F                     	;# 
   561  020D                     	;# 
   562  0210                     	;# 
   563  0211                     	;# 
   564  0211                     	;# 
   565  0212                     	;# 
   566  0212                     	;# 
   567  0213                     	;# 
   568  0213                     	;# 
   569  0214                     	;# 
   570  0214                     	;# 
   571  0215                     	;# 
   572  0215                     	;# 
   573  0215                     	;# 
   574  0216                     	;# 
   575  0216                     	;# 
   576  0217                     	;# 
   577  0217                     	;# 
   578  0291                     	;# 
   579  0291                     	;# 
   580  0292                     	;# 
   581  0293                     	;# 
   582  0298                     	;# 
   583  0298                     	;# 
   584  0299                     	;# 
   585  029A                     	;# 
   586  0394                     	;# 
   587  0395                     	;# 
   588  0396                     	;# 
   589  0FE4                     	;# 
   590  0FE5                     	;# 
   591  0FE6                     	;# 
   592  0FE7                     	;# 
   593  0FE8                     	;# 
   594  0FE9                     	;# 
   595  0FEA                     	;# 
   596  0FEB                     	;# 
   597  0FED                     	;# 
   598  0FEE                     	;# 
   599  0FEF                     	;# 
   600  0000                     	;# 
   601  0001                     	;# 
   602  0002                     	;# 
   603  0003                     	;# 
   604  0004                     	;# 
   605  0005                     	;# 
   606  0006                     	;# 
   607  0007                     	;# 
   608  0008                     	;# 
   609  0009                     	;# 
   610  000A                     	;# 
   611  000B                     	;# 
   612  000C                     	;# 
   613  000D                     	;# 
   614  000E                     	;# 
   615  0010                     	;# 
   616  0011                     	;# 
   617  0012                     	;# 
   618  0015                     	;# 
   619  0016                     	;# 
   620  0016                     	;# 
   621  0017                     	;# 
   622  0018                     	;# 
   623  0019                     	;# 
   624  001A                     	;# 
   625  001B                     	;# 
   626  001C                     	;# 
   627  008C                     	;# 
   628  008D                     	;# 
   629  008E                     	;# 
   630  0090                     	;# 
   631  0091                     	;# 
   632  0092                     	;# 
   633  0095                     	;# 
   634  0096                     	;# 
   635  0097                     	;# 
   636  0099                     	;# 
   637  009A                     	;# 
   638  009B                     	;# 
   639  009B                     	;# 
   640  009C                     	;# 
   641  009D                     	;# 
   642  009E                     	;# 
   643  010C                     	;# 
   644  010D                     	;# 
   645  010E                     	;# 
   646  0116                     	;# 
   647  0117                     	;# 
   648  011D                     	;# 
   649  018C                     	;# 
   650  018D                     	;# 
   651  018E                     	;# 
   652  0191                     	;# 
   653  0191                     	;# 
   654  0192                     	;# 
   655  0193                     	;# 
   656  0193                     	;# 
   657  0194                     	;# 
   658  0195                     	;# 
   659  0196                     	;# 
   660  0197                     	;# 
   661  0199                     	;# 
   662  019A                     	;# 
   663  019B                     	;# 
   664  019B                     	;# 
   665  019B                     	;# 
   666  019B                     	;# 
   667  019C                     	;# 
   668  019C                     	;# 
   669  019D                     	;# 
   670  019E                     	;# 
   671  019F                     	;# 
   672  020D                     	;# 
   673  0210                     	;# 
   674  0211                     	;# 
   675  0211                     	;# 
   676  0212                     	;# 
   677  0212                     	;# 
   678  0213                     	;# 
   679  0213                     	;# 
   680  0214                     	;# 
   681  0214                     	;# 
   682  0215                     	;# 
   683  0215                     	;# 
   684  0215                     	;# 
   685  0216                     	;# 
   686  0216                     	;# 
   687  0217                     	;# 
   688  0217                     	;# 
   689  0291                     	;# 
   690  0291                     	;# 
   691  0292                     	;# 
   692  0293                     	;# 
   693  0298                     	;# 
   694  0298                     	;# 
   695  0299                     	;# 
   696  029A                     	;# 
   697  0394                     	;# 
   698  0395                     	;# 
   699  0396                     	;# 
   700  0FE4                     	;# 
   701  0FE5                     	;# 
   702  0FE6                     	;# 
   703  0FE7                     	;# 
   704  0FE8                     	;# 
   705  0FE9                     	;# 
   706  0FEA                     	;# 
   707  0FEB                     	;# 
   708  0FED                     	;# 
   709  0FEE                     	;# 
   710  0FEF                     	;# 
   711  0000                     	;# 
   712  0001                     	;# 
   713  0002                     	;# 
   714  0003                     	;# 
   715  0004                     	;# 
   716  0005                     	;# 
   717  0006                     	;# 
   718  0007                     	;# 
   719  0008                     	;# 
   720  0009                     	;# 
   721  000A                     	;# 
   722  000B                     	;# 
   723  000C                     	;# 
   724  000D                     	;# 
   725  000E                     	;# 
   726  0010                     	;# 
   727  0011                     	;# 
   728  0012                     	;# 
   729  0015                     	;# 
   730  0016                     	;# 
   731  0016                     	;# 
   732  0017                     	;# 
   733  0018                     	;# 
   734  0019                     	;# 
   735  001A                     	;# 
   736  001B                     	;# 
   737  001C                     	;# 
   738  008C                     	;# 
   739  008D                     	;# 
   740  008E                     	;# 
   741  0090                     	;# 
   742  0091                     	;# 
   743  0092                     	;# 
   744  0095                     	;# 
   745  0096                     	;# 
   746  0097                     	;# 
   747  0099                     	;# 
   748  009A                     	;# 
   749  009B                     	;# 
   750  009B                     	;# 
   751  009C                     	;# 
   752  009D                     	;# 
   753  009E                     	;# 
   754  010C                     	;# 
   755  010D                     	;# 
   756  010E                     	;# 
   757  0116                     	;# 
   758  0117                     	;# 
   759  011D                     	;# 
   760  018C                     	;# 
   761  018D                     	;# 
   762  018E                     	;# 
   763  0191                     	;# 
   764  0191                     	;# 
   765  0192                     	;# 
   766  0193                     	;# 
   767  0193                     	;# 
   768  0194                     	;# 
   769  0195                     	;# 
   770  0196                     	;# 
   771  0197                     	;# 
   772  0199                     	;# 
   773  019A                     	;# 
   774  019B                     	;# 
   775  019B                     	;# 
   776  019B                     	;# 
   777  019B                     	;# 
   778  019C                     	;# 
   779  019C                     	;# 
   780  019D                     	;# 
   781  019E                     	;# 
   782  019F                     	;# 
   783  020D                     	;# 
   784  0210                     	;# 
   785  0211                     	;# 
   786  0211                     	;# 
   787  0212                     	;# 
   788  0212                     	;# 
   789  0213                     	;# 
   790  0213                     	;# 
   791  0214                     	;# 
   792  0214                     	;# 
   793  0215                     	;# 
   794  0215                     	;# 
   795  0215                     	;# 
   796  0216                     	;# 
   797  0216                     	;# 
   798  0217                     	;# 
   799  0217                     	;# 
   800  0291                     	;# 
   801  0291                     	;# 
   802  0292                     	;# 
   803  0293                     	;# 
   804  0298                     	;# 
   805  0298                     	;# 
   806  0299                     	;# 
   807  029A                     	;# 
   808  0394                     	;# 
   809  0395                     	;# 
   810  0396                     	;# 
   811  0FE4                     	;# 
   812  0FE5                     	;# 
   813  0FE6                     	;# 
   814  0FE7                     	;# 
   815  0FE8                     	;# 
   816  0FE9                     	;# 
   817  0FEA                     	;# 
   818  0FEB                     	;# 
   819  0FED                     	;# 
   820  0FEE                     	;# 
   821  0FEF                     	;# 
   822  0000                     	;# 
   823  0001                     	;# 
   824  0002                     	;# 
   825  0003                     	;# 
   826  0004                     	;# 
   827  0005                     	;# 
   828  0006                     	;# 
   829  0007                     	;# 
   830  0008                     	;# 
   831  0009                     	;# 
   832  000A                     	;# 
   833  000B                     	;# 
   834  000C                     	;# 
   835  000D                     	;# 
   836  000E                     	;# 
   837  0010                     	;# 
   838  0011                     	;# 
   839  0012                     	;# 
   840  0015                     	;# 
   841  0016                     	;# 
   842  0016                     	;# 
   843  0017                     	;# 
   844  0018                     	;# 
   845  0019                     	;# 
   846  001A                     	;# 
   847  001B                     	;# 
   848  001C                     	;# 
   849  008C                     	;# 
   850  008D                     	;# 
   851  008E                     	;# 
   852  0090                     	;# 
   853  0091                     	;# 
   854  0092                     	;# 
   855  0095                     	;# 
   856  0096                     	;# 
   857  0097                     	;# 
   858  0099                     	;# 
   859  009A                     	;# 
   860  009B                     	;# 
   861  009B                     	;# 
   862  009C                     	;# 
   863  009D                     	;# 
   864  009E                     	;# 
   865  010C                     	;# 
   866  010D                     	;# 
   867  010E                     	;# 
   868  0116                     	;# 
   869  0117                     	;# 
   870  011D                     	;# 
   871  018C                     	;# 
   872  018D                     	;# 
   873  018E                     	;# 
   874  0191                     	;# 
   875  0191                     	;# 
   876  0192                     	;# 
   877  0193                     	;# 
   878  0193                     	;# 
   879  0194                     	;# 
   880  0195                     	;# 
   881  0196                     	;# 
   882  0197                     	;# 
   883  0199                     	;# 
   884  019A                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019B                     	;# 
   889  019C                     	;# 
   890  019C                     	;# 
   891  019D                     	;# 
   892  019E                     	;# 
   893  019F                     	;# 
   894  020D                     	;# 
   895  0210                     	;# 
   896  0211                     	;# 
   897  0211                     	;# 
   898  0212                     	;# 
   899  0212                     	;# 
   900  0213                     	;# 
   901  0213                     	;# 
   902  0214                     	;# 
   903  0214                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0216                     	;# 
   908  0216                     	;# 
   909  0217                     	;# 
   910  0217                     	;# 
   911  0291                     	;# 
   912  0291                     	;# 
   913  0292                     	;# 
   914  0293                     	;# 
   915  0298                     	;# 
   916  0298                     	;# 
   917  0299                     	;# 
   918  029A                     	;# 
   919  0394                     	;# 
   920  0395                     	;# 
   921  0396                     	;# 
   922  0FE4                     	;# 
   923  0FE5                     	;# 
   924  0FE6                     	;# 
   925  0FE7                     	;# 
   926  0FE8                     	;# 
   927  0FE9                     	;# 
   928  0FEA                     	;# 
   929  0FEB                     	;# 
   930  0FED                     	;# 
   931  0FEE                     	;# 
   932  0FEF                     	;# 
   933  0000                     	;# 
   934  0001                     	;# 
   935  0002                     	;# 
   936  0003                     	;# 
   937  0004                     	;# 
   938  0005                     	;# 
   939  0006                     	;# 
   940  0007                     	;# 
   941  0008                     	;# 
   942  0009                     	;# 
   943  000A                     	;# 
   944  000B                     	;# 
   945  000C                     	;# 
   946  000D                     	;# 
   947  000E                     	;# 
   948  0010                     	;# 
   949  0011                     	;# 
   950  0012                     	;# 
   951  0015                     	;# 
   952  0016                     	;# 
   953  0016                     	;# 
   954  0017                     	;# 
   955  0018                     	;# 
   956  0019                     	;# 
   957  001A                     	;# 
   958  001B                     	;# 
   959  001C                     	;# 
   960  008C                     	;# 
   961  008D                     	;# 
   962  008E                     	;# 
   963  0090                     	;# 
   964  0091                     	;# 
   965  0092                     	;# 
   966  0095                     	;# 
   967  0096                     	;# 
   968  0097                     	;# 
   969  0099                     	;# 
   970  009A                     	;# 
   971  009B                     	;# 
   972  009B                     	;# 
   973  009C                     	;# 
   974  009D                     	;# 
   975  009E                     	;# 
   976  010C                     	;# 
   977  010D                     	;# 
   978  010E                     	;# 
   979  0116                     	;# 
   980  0117                     	;# 
   981  011D                     	;# 
   982  018C                     	;# 
   983  018D                     	;# 
   984  018E                     	;# 
   985  0191                     	;# 
   986  0191                     	;# 
   987  0192                     	;# 
   988  0193                     	;# 
   989  0193                     	;# 
   990  0194                     	;# 
   991  0195                     	;# 
   992  0196                     	;# 
   993  0197                     	;# 
   994  0199                     	;# 
   995  019A                     	;# 
   996  019B                     	;# 
   997  019B                     	;# 
   998  019B                     	;# 
   999  019B                     	;# 
  1000  019C                     	;# 
  1001  019C                     	;# 
  1002  019D                     	;# 
  1003  019E                     	;# 
  1004  019F                     	;# 
  1005  020D                     	;# 
  1006  0210                     	;# 
  1007  0211                     	;# 
  1008  0211                     	;# 
  1009  0212                     	;# 
  1010  0212                     	;# 
  1011  0213                     	;# 
  1012  0213                     	;# 
  1013  0214                     	;# 
  1014  0214                     	;# 
  1015  0215                     	;# 
  1016  0215                     	;# 
  1017  0215                     	;# 
  1018  0216                     	;# 
  1019  0216                     	;# 
  1020  0217                     	;# 
  1021  0217                     	;# 
  1022  0291                     	;# 
  1023  0291                     	;# 
  1024  0292                     	;# 
  1025  0293                     	;# 
  1026  0298                     	;# 
  1027  0298                     	;# 
  1028  0299                     	;# 
  1029  029A                     	;# 
  1030  0394                     	;# 
  1031  0395                     	;# 
  1032  0396                     	;# 
  1033  0FE4                     	;# 
  1034  0FE5                     	;# 
  1035  0FE6                     	;# 
  1036  0FE7                     	;# 
  1037  0FE8                     	;# 
  1038  0FE9                     	;# 
  1039  0FEA                     	;# 
  1040  0FEB                     	;# 
  1041  0FED                     	;# 
  1042  0FEE                     	;# 
  1043  0FEF                     	;# 
  1044  0000                     	;# 
  1045  0001                     	;# 
  1046  0002                     	;# 
  1047  0003                     	;# 
  1048  0004                     	;# 
  1049  0005                     	;# 
  1050  0006                     	;# 
  1051  0007                     	;# 
  1052  0008                     	;# 
  1053  0009                     	;# 
  1054  000A                     	;# 
  1055  000B                     	;# 
  1056  000C                     	;# 
  1057  000D                     	;# 
  1058  000E                     	;# 
  1059  0010                     	;# 
  1060  0011                     	;# 
  1061  0012                     	;# 
  1062  0015                     	;# 
  1063  0016                     	;# 
  1064  0016                     	;# 
  1065  0017                     	;# 
  1066  0018                     	;# 
  1067  0019                     	;# 
  1068  001A                     	;# 
  1069  001B                     	;# 
  1070  001C                     	;# 
  1071  008C                     	;# 
  1072  008D                     	;# 
  1073  008E                     	;# 
  1074  0090                     	;# 
  1075  0091                     	;# 
  1076  0092                     	;# 
  1077  0095                     	;# 
  1078  0096                     	;# 
  1079  0097                     	;# 
  1080  0099                     	;# 
  1081  009A                     	;# 
  1082  009B                     	;# 
  1083  009B                     	;# 
  1084  009C                     	;# 
  1085  009D                     	;# 
  1086  009E                     	;# 
  1087  010C                     	;# 
  1088  010D                     	;# 
  1089  010E                     	;# 
  1090  0116                     	;# 
  1091  0117                     	;# 
  1092  011D                     	;# 
  1093  018C                     	;# 
  1094  018D                     	;# 
  1095  018E                     	;# 
  1096  0191                     	;# 
  1097  0191                     	;# 
  1098  0192                     	;# 
  1099  0193                     	;# 
  1100  0193                     	;# 
  1101  0194                     	;# 
  1102  0195                     	;# 
  1103  0196                     	;# 
  1104  0197                     	;# 
  1105  0199                     	;# 
  1106  019A                     	;# 
  1107  019B                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019C                     	;# 
  1112  019C                     	;# 
  1113  019D                     	;# 
  1114  019E                     	;# 
  1115  019F                     	;# 
  1116  020D                     	;# 
  1117  0210                     	;# 
  1118  0211                     	;# 
  1119  0211                     	;# 
  1120  0212                     	;# 
  1121  0212                     	;# 
  1122  0213                     	;# 
  1123  0213                     	;# 
  1124  0214                     	;# 
  1125  0214                     	;# 
  1126  0215                     	;# 
  1127  0215                     	;# 
  1128  0215                     	;# 
  1129  0216                     	;# 
  1130  0216                     	;# 
  1131  0217                     	;# 
  1132  0217                     	;# 
  1133  0291                     	;# 
  1134  0291                     	;# 
  1135  0292                     	;# 
  1136  0293                     	;# 
  1137  0298                     	;# 
  1138  0298                     	;# 
  1139  0299                     	;# 
  1140  029A                     	;# 
  1141  0394                     	;# 
  1142  0395                     	;# 
  1143  0396                     	;# 
  1144  0FE4                     	;# 
  1145  0FE5                     	;# 
  1146  0FE6                     	;# 
  1147  0FE7                     	;# 
  1148  0FE8                     	;# 
  1149  0FE9                     	;# 
  1150  0FEA                     	;# 
  1151  0FEB                     	;# 
  1152  0FED                     	;# 
  1153  0FEE                     	;# 
  1154  0FEF                     	;# 
  1155  0000                     	;# 
  1156  0001                     	;# 
  1157  0002                     	;# 
  1158  0003                     	;# 
  1159  0004                     	;# 
  1160  0005                     	;# 
  1161  0006                     	;# 
  1162  0007                     	;# 
  1163  0008                     	;# 
  1164  0009                     	;# 
  1165  000A                     	;# 
  1166  000B                     	;# 
  1167  000C                     	;# 
  1168  000D                     	;# 
  1169  000E                     	;# 
  1170  0010                     	;# 
  1171  0011                     	;# 
  1172  0012                     	;# 
  1173  0015                     	;# 
  1174  0016                     	;# 
  1175  0016                     	;# 
  1176  0017                     	;# 
  1177  0018                     	;# 
  1178  0019                     	;# 
  1179  001A                     	;# 
  1180  001B                     	;# 
  1181  001C                     	;# 
  1182  008C                     	;# 
  1183  008D                     	;# 
  1184  008E                     	;# 
  1185  0090                     	;# 
  1186  0091                     	;# 
  1187  0092                     	;# 
  1188  0095                     	;# 
  1189  0096                     	;# 
  1190  0097                     	;# 
  1191  0099                     	;# 
  1192  009A                     	;# 
  1193  009B                     	;# 
  1194  009B                     	;# 
  1195  009C                     	;# 
  1196  009D                     	;# 
  1197  009E                     	;# 
  1198  010C                     	;# 
  1199  010D                     	;# 
  1200  010E                     	;# 
  1201  0116                     	;# 
  1202  0117                     	;# 
  1203  011D                     	;# 
  1204  018C                     	;# 
  1205  018D                     	;# 
  1206  018E                     	;# 
  1207  0191                     	;# 
  1208  0191                     	;# 
  1209  0192                     	;# 
  1210  0193                     	;# 
  1211  0193                     	;# 
  1212  0194                     	;# 
  1213  0195                     	;# 
  1214  0196                     	;# 
  1215  0197                     	;# 
  1216  0199                     	;# 
  1217  019A                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019B                     	;# 
  1222  019C                     	;# 
  1223  019C                     	;# 
  1224  019D                     	;# 
  1225  019E                     	;# 
  1226  019F                     	;# 
  1227  020D                     	;# 
  1228  0210                     	;# 
  1229  0211                     	;# 
  1230  0211                     	;# 
  1231  0212                     	;# 
  1232  0212                     	;# 
  1233  0213                     	;# 
  1234  0213                     	;# 
  1235  0214                     	;# 
  1236  0214                     	;# 
  1237  0215                     	;# 
  1238  0215                     	;# 
  1239  0215                     	;# 
  1240  0216                     	;# 
  1241  0216                     	;# 
  1242  0217                     	;# 
  1243  0217                     	;# 
  1244  0291                     	;# 
  1245  0291                     	;# 
  1246  0292                     	;# 
  1247  0293                     	;# 
  1248  0298                     	;# 
  1249  0298                     	;# 
  1250  0299                     	;# 
  1251  029A                     	;# 
  1252  0394                     	;# 
  1253  0395                     	;# 
  1254  0396                     	;# 
  1255  0FE4                     	;# 
  1256  0FE5                     	;# 
  1257  0FE6                     	;# 
  1258  0FE7                     	;# 
  1259  0FE8                     	;# 
  1260  0FE9                     	;# 
  1261  0FEA                     	;# 
  1262  0FEB                     	;# 
  1263  0FED                     	;# 
  1264  0FEE                     	;# 
  1265  0FEF                     	;# 
  1266  0000                     	;# 
  1267  0001                     	;# 
  1268  0002                     	;# 
  1269  0003                     	;# 
  1270  0004                     	;# 
  1271  0005                     	;# 
  1272  0006                     	;# 
  1273  0007                     	;# 
  1274  0008                     	;# 
  1275  0009                     	;# 
  1276  000A                     	;# 
  1277  000B                     	;# 
  1278  000C                     	;# 
  1279  000D                     	;# 
  1280  000E                     	;# 
  1281  0010                     	;# 
  1282  0011                     	;# 
  1283  0012                     	;# 
  1284  0015                     	;# 
  1285  0016                     	;# 
  1286  0016                     	;# 
  1287  0017                     	;# 
  1288  0018                     	;# 
  1289  0019                     	;# 
  1290  001A                     	;# 
  1291  001B                     	;# 
  1292  001C                     	;# 
  1293  008C                     	;# 
  1294  008D                     	;# 
  1295  008E                     	;# 
  1296  0090                     	;# 
  1297  0091                     	;# 
  1298  0092                     	;# 
  1299  0095                     	;# 
  1300  0096                     	;# 
  1301  0097                     	;# 
  1302  0099                     	;# 
  1303  009A                     	;# 
  1304  009B                     	;# 
  1305  009B                     	;# 
  1306  009C                     	;# 
  1307  009D                     	;# 
  1308  009E                     	;# 
  1309  010C                     	;# 
  1310  010D                     	;# 
  1311  010E                     	;# 
  1312  0116                     	;# 
  1313  0117                     	;# 
  1314  011D                     	;# 
  1315  018C                     	;# 
  1316  018D                     	;# 
  1317  018E                     	;# 
  1318  0191                     	;# 
  1319  0191                     	;# 
  1320  0192                     	;# 
  1321  0193                     	;# 
  1322  0193                     	;# 
  1323  0194                     	;# 
  1324  0195                     	;# 
  1325  0196                     	;# 
  1326  0197                     	;# 
  1327  0199                     	;# 
  1328  019A                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019B                     	;# 
  1333  019C                     	;# 
  1334  019C                     	;# 
  1335  019D                     	;# 
  1336  019E                     	;# 
  1337  019F                     	;# 
  1338  020D                     	;# 
  1339  0210                     	;# 
  1340  0211                     	;# 
  1341  0211                     	;# 
  1342  0212                     	;# 
  1343  0212                     	;# 
  1344  0213                     	;# 
  1345  0213                     	;# 
  1346  0214                     	;# 
  1347  0214                     	;# 
  1348  0215                     	;# 
  1349  0215                     	;# 
  1350  0215                     	;# 
  1351  0216                     	;# 
  1352  0216                     	;# 
  1353  0217                     	;# 
  1354  0217                     	;# 
  1355  0291                     	;# 
  1356  0291                     	;# 
  1357  0292                     	;# 
  1358  0293                     	;# 
  1359  0298                     	;# 
  1360  0298                     	;# 
  1361  0299                     	;# 
  1362  029A                     	;# 
  1363  0394                     	;# 
  1364  0395                     	;# 
  1365  0396                     	;# 
  1366  0FE4                     	;# 
  1367  0FE5                     	;# 
  1368  0FE6                     	;# 
  1369  0FE7                     	;# 
  1370  0FE8                     	;# 
  1371  0FE9                     	;# 
  1372  0FEA                     	;# 
  1373  0FEB                     	;# 
  1374  0FED                     	;# 
  1375  0FEE                     	;# 
  1376  0FEF                     	;# 
  1377  0000                     	;# 
  1378  0001                     	;# 
  1379  0002                     	;# 
  1380  0003                     	;# 
  1381  0004                     	;# 
  1382  0005                     	;# 
  1383  0006                     	;# 
  1384  0007                     	;# 
  1385  0008                     	;# 
  1386  0009                     	;# 
  1387  000A                     	;# 
  1388  000B                     	;# 
  1389  000C                     	;# 
  1390  000D                     	;# 
  1391  000E                     	;# 
  1392  0010                     	;# 
  1393  0011                     	;# 
  1394  0012                     	;# 
  1395  0015                     	;# 
  1396  0016                     	;# 
  1397  0016                     	;# 
  1398  0017                     	;# 
  1399  0018                     	;# 
  1400  0019                     	;# 
  1401  001A                     	;# 
  1402  001B                     	;# 
  1403  001C                     	;# 
  1404  008C                     	;# 
  1405  008D                     	;# 
  1406  008E                     	;# 
  1407  0090                     	;# 
  1408  0091                     	;# 
  1409  0092                     	;# 
  1410  0095                     	;# 
  1411  0096                     	;# 
  1412  0097                     	;# 
  1413  0099                     	;# 
  1414  009A                     	;# 
  1415  009B                     	;# 
  1416  009B                     	;# 
  1417  009C                     	;# 
  1418  009D                     	;# 
  1419  009E                     	;# 
  1420  010C                     	;# 
  1421  010D                     	;# 
  1422  010E                     	;# 
  1423  0116                     	;# 
  1424  0117                     	;# 
  1425  011D                     	;# 
  1426  018C                     	;# 
  1427  018D                     	;# 
  1428  018E                     	;# 
  1429  0191                     	;# 
  1430  0191                     	;# 
  1431  0192                     	;# 
  1432  0193                     	;# 
  1433  0193                     	;# 
  1434  0194                     	;# 
  1435  0195                     	;# 
  1436  0196                     	;# 
  1437  0197                     	;# 
  1438  0199                     	;# 
  1439  019A                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019B                     	;# 
  1444  019C                     	;# 
  1445  019C                     	;# 
  1446  019D                     	;# 
  1447  019E                     	;# 
  1448  019F                     	;# 
  1449  020D                     	;# 
  1450  0210                     	;# 
  1451  0211                     	;# 
  1452  0211                     	;# 
  1453  0212                     	;# 
  1454  0212                     	;# 
  1455  0213                     	;# 
  1456  0213                     	;# 
  1457  0214                     	;# 
  1458  0214                     	;# 
  1459  0215                     	;# 
  1460  0215                     	;# 
  1461  0215                     	;# 
  1462  0216                     	;# 
  1463  0216                     	;# 
  1464  0217                     	;# 
  1465  0217                     	;# 
  1466  0291                     	;# 
  1467  0291                     	;# 
  1468  0292                     	;# 
  1469  0293                     	;# 
  1470  0298                     	;# 
  1471  0298                     	;# 
  1472  0299                     	;# 
  1473  029A                     	;# 
  1474  0394                     	;# 
  1475  0395                     	;# 
  1476  0396                     	;# 
  1477  0FE4                     	;# 
  1478  0FE5                     	;# 
  1479  0FE6                     	;# 
  1480  0FE7                     	;# 
  1481  0FE8                     	;# 
  1482  0FE9                     	;# 
  1483  0FEA                     	;# 
  1484  0FEB                     	;# 
  1485  0FED                     	;# 
  1486  0FEE                     	;# 
  1487  0FEF                     	;# 
  1488  0000                     	;# 
  1489  0001                     	;# 
  1490  0002                     	;# 
  1491  0003                     	;# 
  1492  0004                     	;# 
  1493  0005                     	;# 
  1494  0006                     	;# 
  1495  0007                     	;# 
  1496  0008                     	;# 
  1497  0009                     	;# 
  1498  000A                     	;# 
  1499  000B                     	;# 
  1500  000C                     	;# 
  1501  000D                     	;# 
  1502  000E                     	;# 
  1503  0010                     	;# 
  1504  0011                     	;# 
  1505  0012                     	;# 
  1506  0015                     	;# 
  1507  0016                     	;# 
  1508  0016                     	;# 
  1509  0017                     	;# 
  1510  0018                     	;# 
  1511  0019                     	;# 
  1512  001A                     	;# 
  1513  001B                     	;# 
  1514  001C                     	;# 
  1515  008C                     	;# 
  1516  008D                     	;# 
  1517  008E                     	;# 
  1518  0090                     	;# 
  1519  0091                     	;# 
  1520  0092                     	;# 
  1521  0095                     	;# 
  1522  0096                     	;# 
  1523  0097                     	;# 
  1524  0099                     	;# 
  1525  009A                     	;# 
  1526  009B                     	;# 
  1527  009B                     	;# 
  1528  009C                     	;# 
  1529  009D                     	;# 
  1530  009E                     	;# 
  1531  010C                     	;# 
  1532  010D                     	;# 
  1533  010E                     	;# 
  1534  0116                     	;# 
  1535  0117                     	;# 
  1536  011D                     	;# 
  1537  018C                     	;# 
  1538  018D                     	;# 
  1539  018E                     	;# 
  1540  0191                     	;# 
  1541  0191                     	;# 
  1542  0192                     	;# 
  1543  0193                     	;# 
  1544  0193                     	;# 
  1545  0194                     	;# 
  1546  0195                     	;# 
  1547  0196                     	;# 
  1548  0197                     	;# 
  1549  0199                     	;# 
  1550  019A                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019C                     	;# 
  1556  019C                     	;# 
  1557  019D                     	;# 
  1558  019E                     	;# 
  1559  019F                     	;# 
  1560  020D                     	;# 
  1561  0210                     	;# 
  1562  0211                     	;# 
  1563  0211                     	;# 
  1564  0212                     	;# 
  1565  0212                     	;# 
  1566  0213                     	;# 
  1567  0213                     	;# 
  1568  0214                     	;# 
  1569  0214                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0215                     	;# 
  1573  0216                     	;# 
  1574  0216                     	;# 
  1575  0217                     	;# 
  1576  0217                     	;# 
  1577  0291                     	;# 
  1578  0291                     	;# 
  1579  0292                     	;# 
  1580  0293                     	;# 
  1581  0298                     	;# 
  1582  0298                     	;# 
  1583  0299                     	;# 
  1584  029A                     	;# 
  1585  0394                     	;# 
  1586  0395                     	;# 
  1587  0396                     	;# 
  1588  0FE4                     	;# 
  1589  0FE5                     	;# 
  1590  0FE6                     	;# 
  1591  0FE7                     	;# 
  1592  0FE8                     	;# 
  1593  0FE9                     	;# 
  1594  0FEA                     	;# 
  1595  0FEB                     	;# 
  1596  0FED                     	;# 
  1597  0FEE                     	;# 
  1598  0FEF                     	;# 
  1599  0000                     	;# 
  1600  0001                     	;# 
  1601  0002                     	;# 
  1602  0003                     	;# 
  1603  0004                     	;# 
  1604  0005                     	;# 
  1605  0006                     	;# 
  1606  0007                     	;# 
  1607  0008                     	;# 
  1608  0009                     	;# 
  1609  000A                     	;# 
  1610  000B                     	;# 
  1611  000C                     	;# 
  1612  000D                     	;# 
  1613  000E                     	;# 
  1614  0010                     	;# 
  1615  0011                     	;# 
  1616  0012                     	;# 
  1617  0015                     	;# 
  1618  0016                     	;# 
  1619  0016                     	;# 
  1620  0017                     	;# 
  1621  0018                     	;# 
  1622  0019                     	;# 
  1623  001A                     	;# 
  1624  001B                     	;# 
  1625  001C                     	;# 
  1626  008C                     	;# 
  1627  008D                     	;# 
  1628  008E                     	;# 
  1629  0090                     	;# 
  1630  0091                     	;# 
  1631  0092                     	;# 
  1632  0095                     	;# 
  1633  0096                     	;# 
  1634  0097                     	;# 
  1635  0099                     	;# 
  1636  009A                     	;# 
  1637  009B                     	;# 
  1638  009B                     	;# 
  1639  009C                     	;# 
  1640  009D                     	;# 
  1641  009E                     	;# 
  1642  010C                     	;# 
  1643  010D                     	;# 
  1644  010E                     	;# 
  1645  0116                     	;# 
  1646  0117                     	;# 
  1647  011D                     	;# 
  1648  018C                     	;# 
  1649  018D                     	;# 
  1650  018E                     	;# 
  1651  0191                     	;# 
  1652  0191                     	;# 
  1653  0192                     	;# 
  1654  0193                     	;# 
  1655  0193                     	;# 
  1656  0194                     	;# 
  1657  0195                     	;# 
  1658  0196                     	;# 
  1659  0197                     	;# 
  1660  0199                     	;# 
  1661  019A                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019B                     	;# 
  1666  019C                     	;# 
  1667  019C                     	;# 
  1668  019D                     	;# 
  1669  019E                     	;# 
  1670  019F                     	;# 
  1671  020D                     	;# 
  1672  0210                     	;# 
  1673  0211                     	;# 
  1674  0211                     	;# 
  1675  0212                     	;# 
  1676  0212                     	;# 
  1677  0213                     	;# 
  1678  0213                     	;# 
  1679  0214                     	;# 
  1680  0214                     	;# 
  1681  0215                     	;# 
  1682  0215                     	;# 
  1683  0215                     	;# 
  1684  0216                     	;# 
  1685  0216                     	;# 
  1686  0217                     	;# 
  1687  0217                     	;# 
  1688  0291                     	;# 
  1689  0291                     	;# 
  1690  0292                     	;# 
  1691  0293                     	;# 
  1692  0298                     	;# 
  1693  0298                     	;# 
  1694  0299                     	;# 
  1695  029A                     	;# 
  1696  0394                     	;# 
  1697  0395                     	;# 
  1698  0396                     	;# 
  1699  0FE4                     	;# 
  1700  0FE5                     	;# 
  1701  0FE6                     	;# 
  1702  0FE7                     	;# 
  1703  0FE8                     	;# 
  1704  0FE9                     	;# 
  1705  0FEA                     	;# 
  1706  0FEB                     	;# 
  1707  0FED                     	;# 
  1708  0FEE                     	;# 
  1709  0FEF                     	;# 
  1710  0000                     	;# 
  1711  0001                     	;# 
  1712  0002                     	;# 
  1713  0003                     	;# 
  1714  0004                     	;# 
  1715  0005                     	;# 
  1716  0006                     	;# 
  1717  0007                     	;# 
  1718  0008                     	;# 
  1719  0009                     	;# 
  1720  000A                     	;# 
  1721  000B                     	;# 
  1722  000C                     	;# 
  1723  000D                     	;# 
  1724  000E                     	;# 
  1725  0010                     	;# 
  1726  0011                     	;# 
  1727  0012                     	;# 
  1728  0015                     	;# 
  1729  0016                     	;# 
  1730  0016                     	;# 
  1731  0017                     	;# 
  1732  0018                     	;# 
  1733  0019                     	;# 
  1734  001A                     	;# 
  1735  001B                     	;# 
  1736  001C                     	;# 
  1737  008C                     	;# 
  1738  008D                     	;# 
  1739  008E                     	;# 
  1740  0090                     	;# 
  1741  0091                     	;# 
  1742  0092                     	;# 
  1743  0095                     	;# 
  1744  0096                     	;# 
  1745  0097                     	;# 
  1746  0099                     	;# 
  1747  009A                     	;# 
  1748  009B                     	;# 
  1749  009B                     	;# 
  1750  009C                     	;# 
  1751  009D                     	;# 
  1752  009E                     	;# 
  1753  010C                     	;# 
  1754  010D                     	;# 
  1755  010E                     	;# 
  1756  0116                     	;# 
  1757  0117                     	;# 
  1758  011D                     	;# 
  1759  018C                     	;# 
  1760  018D                     	;# 
  1761  018E                     	;# 
  1762  0191                     	;# 
  1763  0191                     	;# 
  1764  0192                     	;# 
  1765  0193                     	;# 
  1766  0193                     	;# 
  1767  0194                     	;# 
  1768  0195                     	;# 
  1769  0196                     	;# 
  1770  0197                     	;# 
  1771  0199                     	;# 
  1772  019A                     	;# 
  1773  019B                     	;# 
  1774  019B                     	;# 
  1775  019B                     	;# 
  1776  019B                     	;# 
  1777  019C                     	;# 
  1778  019C                     	;# 
  1779  019D                     	;# 
  1780  019E                     	;# 
  1781  019F                     	;# 
  1782  020D                     	;# 
  1783  0210                     	;# 
  1784  0211                     	;# 
  1785  0211                     	;# 
  1786  0212                     	;# 
  1787  0212                     	;# 
  1788  0213                     	;# 
  1789  0213                     	;# 
  1790  0214                     	;# 
  1791  0214                     	;# 
  1792  0215                     	;# 
  1793  0215                     	;# 
  1794  0215                     	;# 
  1795  0216                     	;# 
  1796  0216                     	;# 
  1797  0217                     	;# 
  1798  0217                     	;# 
  1799  0291                     	;# 
  1800  0291                     	;# 
  1801  0292                     	;# 
  1802  0293                     	;# 
  1803  0298                     	;# 
  1804  0298                     	;# 
  1805  0299                     	;# 
  1806  029A                     	;# 
  1807  0394                     	;# 
  1808  0395                     	;# 
  1809  0396                     	;# 
  1810  0FE4                     	;# 
  1811  0FE5                     	;# 
  1812  0FE6                     	;# 
  1813  0FE7                     	;# 
  1814  0FE8                     	;# 
  1815  0FE9                     	;# 
  1816  0FEA                     	;# 
  1817  0FEB                     	;# 
  1818  0FED                     	;# 
  1819  0FEE                     	;# 
  1820  0FEF                     	;# 
  1821  0000                     	;# 
  1822  0001                     	;# 
  1823  0002                     	;# 
  1824  0003                     	;# 
  1825  0004                     	;# 
  1826  0005                     	;# 
  1827  0006                     	;# 
  1828  0007                     	;# 
  1829  0008                     	;# 
  1830  0009                     	;# 
  1831  000A                     	;# 
  1832  000B                     	;# 
  1833  000C                     	;# 
  1834  000D                     	;# 
  1835  000E                     	;# 
  1836  0010                     	;# 
  1837  0011                     	;# 
  1838  0012                     	;# 
  1839  0015                     	;# 
  1840  0016                     	;# 
  1841  0016                     	;# 
  1842  0017                     	;# 
  1843  0018                     	;# 
  1844  0019                     	;# 
  1845  001A                     	;# 
  1846  001B                     	;# 
  1847  001C                     	;# 
  1848  008C                     	;# 
  1849  008D                     	;# 
  1850  008E                     	;# 
  1851  0090                     	;# 
  1852  0091                     	;# 
  1853  0092                     	;# 
  1854  0095                     	;# 
  1855  0096                     	;# 
  1856  0097                     	;# 
  1857  0099                     	;# 
  1858  009A                     	;# 
  1859  009B                     	;# 
  1860  009B                     	;# 
  1861  009C                     	;# 
  1862  009D                     	;# 
  1863  009E                     	;# 
  1864  010C                     	;# 
  1865  010D                     	;# 
  1866  010E                     	;# 
  1867  0116                     	;# 
  1868  0117                     	;# 
  1869  011D                     	;# 
  1870  018C                     	;# 
  1871  018D                     	;# 
  1872  018E                     	;# 
  1873  0191                     	;# 
  1874  0191                     	;# 
  1875  0192                     	;# 
  1876  0193                     	;# 
  1877  0193                     	;# 
  1878  0194                     	;# 
  1879  0195                     	;# 
  1880  0196                     	;# 
  1881  0197                     	;# 
  1882  0199                     	;# 
  1883  019A                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019B                     	;# 
  1887  019B                     	;# 
  1888  019C                     	;# 
  1889  019C                     	;# 
  1890  019D                     	;# 
  1891  019E                     	;# 
  1892  019F                     	;# 
  1893  020D                     	;# 
  1894  0210                     	;# 
  1895  0211                     	;# 
  1896  0211                     	;# 
  1897  0212                     	;# 
  1898  0212                     	;# 
  1899  0213                     	;# 
  1900  0213                     	;# 
  1901  0214                     	;# 
  1902  0214                     	;# 
  1903  0215                     	;# 
  1904  0215                     	;# 
  1905  0215                     	;# 
  1906  0216                     	;# 
  1907  0216                     	;# 
  1908  0217                     	;# 
  1909  0217                     	;# 
  1910  0291                     	;# 
  1911  0291                     	;# 
  1912  0292                     	;# 
  1913  0293                     	;# 
  1914  0298                     	;# 
  1915  0298                     	;# 
  1916  0299                     	;# 
  1917  029A                     	;# 
  1918  0394                     	;# 
  1919  0395                     	;# 
  1920  0396                     	;# 
  1921  0FE4                     	;# 
  1922  0FE5                     	;# 
  1923  0FE6                     	;# 
  1924  0FE7                     	;# 
  1925  0FE8                     	;# 
  1926  0FE9                     	;# 
  1927  0FEA                     	;# 
  1928  0FEB                     	;# 
  1929  0FED                     	;# 
  1930  0FEE                     	;# 
  1931  0FEF                     	;# 
  1932  0000                     	;# 
  1933  0001                     	;# 
  1934  0002                     	;# 
  1935  0003                     	;# 
  1936  0004                     	;# 
  1937  0005                     	;# 
  1938  0006                     	;# 
  1939  0007                     	;# 
  1940  0008                     	;# 
  1941  0009                     	;# 
  1942  000A                     	;# 
  1943  000B                     	;# 
  1944  000C                     	;# 
  1945  000D                     	;# 
  1946  000E                     	;# 
  1947  0010                     	;# 
  1948  0011                     	;# 
  1949  0012                     	;# 
  1950  0015                     	;# 
  1951  0016                     	;# 
  1952  0016                     	;# 
  1953  0017                     	;# 
  1954  0018                     	;# 
  1955  0019                     	;# 
  1956  001A                     	;# 
  1957  001B                     	;# 
  1958  001C                     	;# 
  1959  008C                     	;# 
  1960  008D                     	;# 
  1961  008E                     	;# 
  1962  0090                     	;# 
  1963  0091                     	;# 
  1964  0092                     	;# 
  1965  0095                     	;# 
  1966  0096                     	;# 
  1967  0097                     	;# 
  1968  0099                     	;# 
  1969  009A                     	;# 
  1970  009B                     	;# 
  1971  009B                     	;# 
  1972  009C                     	;# 
  1973  009D                     	;# 
  1974  009E                     	;# 
  1975  010C                     	;# 
  1976  010D                     	;# 
  1977  010E                     	;# 
  1978  0116                     	;# 
  1979  0117                     	;# 
  1980  011D                     	;# 
  1981  018C                     	;# 
  1982  018D                     	;# 
  1983  018E                     	;# 
  1984  0191                     	;# 
  1985  0191                     	;# 
  1986  0192                     	;# 
  1987  0193                     	;# 
  1988  0193                     	;# 
  1989  0194                     	;# 
  1990  0195                     	;# 
  1991  0196                     	;# 
  1992  0197                     	;# 
  1993  0199                     	;# 
  1994  019A                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019B                     	;# 
  1999  019C                     	;# 
  2000  019C                     	;# 
  2001  019D                     	;# 
  2002  019E                     	;# 
  2003  019F                     	;# 
  2004  020D                     	;# 
  2005  0210                     	;# 
  2006  0211                     	;# 
  2007  0211                     	;# 
  2008  0212                     	;# 
  2009  0212                     	;# 
  2010  0213                     	;# 
  2011  0213                     	;# 
  2012  0214                     	;# 
  2013  0214                     	;# 
  2014  0215                     	;# 
  2015  0215                     	;# 
  2016  0215                     	;# 
  2017  0216                     	;# 
  2018  0216                     	;# 
  2019  0217                     	;# 
  2020  0217                     	;# 
  2021  0291                     	;# 
  2022  0291                     	;# 
  2023  0292                     	;# 
  2024  0293                     	;# 
  2025  0298                     	;# 
  2026  0298                     	;# 
  2027  0299                     	;# 
  2028  029A                     	;# 
  2029  0394                     	;# 
  2030  0395                     	;# 
  2031  0396                     	;# 
  2032  0FE4                     	;# 
  2033  0FE5                     	;# 
  2034  0FE6                     	;# 
  2035  0FE7                     	;# 
  2036  0FE8                     	;# 
  2037  0FE9                     	;# 
  2038  0FEA                     	;# 
  2039  0FEB                     	;# 
  2040  0FED                     	;# 
  2041  0FEE                     	;# 
  2042  0FEF                     	;# 
  2043  0000                     	;# 
  2044  0001                     	;# 
  2045  0002                     	;# 
  2046  0003                     	;# 
  2047  0004                     	;# 
  2048  0005                     	;# 
  2049  0006                     	;# 
  2050  0007                     	;# 
  2051  0008                     	;# 
  2052  0009                     	;# 
  2053  000A                     	;# 
  2054  000B                     	;# 
  2055  000C                     	;# 
  2056  000D                     	;# 
  2057  000E                     	;# 
  2058  0010                     	;# 
  2059  0011                     	;# 
  2060  0012                     	;# 
  2061  0015                     	;# 
  2062  0016                     	;# 
  2063  0016                     	;# 
  2064  0017                     	;# 
  2065  0018                     	;# 
  2066  0019                     	;# 
  2067  001A                     	;# 
  2068  001B                     	;# 
  2069  001C                     	;# 
  2070  008C                     	;# 
  2071  008D                     	;# 
  2072  008E                     	;# 
  2073  0090                     	;# 
  2074  0091                     	;# 
  2075  0092                     	;# 
  2076  0095                     	;# 
  2077  0096                     	;# 
  2078  0097                     	;# 
  2079  0099                     	;# 
  2080  009A                     	;# 
  2081  009B                     	;# 
  2082  009B                     	;# 
  2083  009C                     	;# 
  2084  009D                     	;# 
  2085  009E                     	;# 
  2086  010C                     	;# 
  2087  010D                     	;# 
  2088  010E                     	;# 
  2089  0116                     	;# 
  2090  0117                     	;# 
  2091  011D                     	;# 
  2092  018C                     	;# 
  2093  018D                     	;# 
  2094  018E                     	;# 
  2095  0191                     	;# 
  2096  0191                     	;# 
  2097  0192                     	;# 
  2098  0193                     	;# 
  2099  0193                     	;# 
  2100  0194                     	;# 
  2101  0195                     	;# 
  2102  0196                     	;# 
  2103  0197                     	;# 
  2104  0199                     	;# 
  2105  019A                     	;# 
  2106  019B                     	;# 
  2107  019B                     	;# 
  2108  019B                     	;# 
  2109  019B                     	;# 
  2110  019C                     	;# 
  2111  019C                     	;# 
  2112  019D                     	;# 
  2113  019E                     	;# 
  2114  019F                     	;# 
  2115  020D                     	;# 
  2116  0210                     	;# 
  2117  0211                     	;# 
  2118  0211                     	;# 
  2119  0212                     	;# 
  2120  0212                     	;# 
  2121  0213                     	;# 
  2122  0213                     	;# 
  2123  0214                     	;# 
  2124  0214                     	;# 
  2125  0215                     	;# 
  2126  0215                     	;# 
  2127  0215                     	;# 
  2128  0216                     	;# 
  2129  0216                     	;# 
  2130  0217                     	;# 
  2131  0217                     	;# 
  2132  0291                     	;# 
  2133  0291                     	;# 
  2134  0292                     	;# 
  2135  0293                     	;# 
  2136  0298                     	;# 
  2137  0298                     	;# 
  2138  0299                     	;# 
  2139  029A                     	;# 
  2140  0394                     	;# 
  2141  0395                     	;# 
  2142  0396                     	;# 
  2143  0FE4                     	;# 
  2144  0FE5                     	;# 
  2145  0FE6                     	;# 
  2146  0FE7                     	;# 
  2147  0FE8                     	;# 
  2148  0FE9                     	;# 
  2149  0FEA                     	;# 
  2150  0FEB                     	;# 
  2151  0FED                     	;# 
  2152  0FEE                     	;# 
  2153  0FEF                     	;# 
  2154                           
  2155                           	psect	idataBANK4
  2156  1F58                     __pidataBANK4:	
  2157                           
  2158                           ;initializer for __product
  2159  1F58  3463               	retlw	99
  2160  1F59  3402               	retlw	2
  2161  1F5A  3400               	retlw	0
  2162  1F5B  3400               	retlw	0
  2163  1F5C  3400               	retlw	0
  2164  1F5D  3400               	retlw	0
  2165  1F5E  3400               	retlw	0
  2166  1F5F  3400               	retlw	0
  2167  1F60  3400               	retlw	0
  2168  1F61  3400               	retlw	0
  2169  1F62  3400               	retlw	0
  2170  1F63  3400               	retlw	0
  2171  1F64  34FF               	retlw	255
  2172  1F65  34FF               	retlw	255
  2173  1F66  34FF               	retlw	255
  2174  1F67  3400               	retlw	0
  2175  1F68  3400               	retlw	0
  2176  1F69  3400               	retlw	0
  2177  1F6A  3400               	retlw	0
  2178  1F6B  3400               	retlw	0
  2179  1F6C  3400               	retlw	0
  2180  1F6D  3400               	retlw	0
  2181  1F6E  3400               	retlw	0
  2182  1F6F  3400               	retlw	0
  2183  1F70  3400               	retlw	0
  2184  1F71  3400               	retlw	0
  2185  1F72  3400               	retlw	0
  2186  1F73  3400               	retlw	0
  2187  1F74  3400               	retlw	0
  2188  1F75  3400               	retlw	0
  2189  1F76  3400               	retlw	0
  2190  1F77  3400               	retlw	0
  2191                           
  2192                           	psect	stringtext
  2193  1000                     __pstringtext:	
  2194  1000                     _CC2500_registers_address:	
  2195  1000  3403               	retlw	3
  2196  1001  3416               	retlw	22
  2197  1002  3417               	retlw	23
  2198  1003  341E               	retlw	30
  2199  1004  341F               	retlw	31
  2200  1005  3420               	retlw	32
  2201  1006  342A               	retlw	42
  2202  1007  342B               	retlw	43
  2203  1008  340B               	retlw	11
  2204  1009  340C               	retlw	12
  2205  100A  340D               	retlw	13
  2206  100B  340E               	retlw	14
  2207  100C  340F               	retlw	15
  2208  100D  3410               	retlw	16
  2209  100E  3411               	retlw	17
  2210  100F  3412               	retlw	18
  2211  1010  3413               	retlw	19
  2212  1011  3414               	retlw	20
  2213  1012  340A               	retlw	10
  2214  1013  3415               	retlw	21
  2215  1014  3421               	retlw	33
  2216  1015  3422               	retlw	34
  2217  1016  3418               	retlw	24
  2218  1017  3419               	retlw	25
  2219  1018  341A               	retlw	26
  2220  1019  341B               	retlw	27
  2221  101A  341C               	retlw	28
  2222  101B  341D               	retlw	29
  2223  101C  3423               	retlw	35
  2224  101D  3424               	retlw	36
  2225  101E  3425               	retlw	37
  2226  101F  3426               	retlw	38
  2227  1020  3429               	retlw	41
  2228  1021  342C               	retlw	44
  2229  1022  342D               	retlw	45
  2230  1023  342E               	retlw	46
  2231  1024  3400               	retlw	0
  2232  1025  3401               	retlw	1
  2233  1026  3402               	retlw	2
  2234  1027  3407               	retlw	7
  2235  1028  3408               	retlw	8
  2236  1029  3409               	retlw	9
  2237  102A  3406               	retlw	6
  2238  102B  3404               	retlw	4
  2239  102C  3405               	retlw	5
  2240  102D  3427               	retlw	39
  2241  102E  3428               	retlw	40
  2242  102F                     __end_of_CC2500_registers_address:	
  2243  102F                     _CC2500_rfSettings:	
  2244  102F  3407               	retlw	7
  2245  1030  3407               	retlw	7
  2246  1031  3430               	retlw	48
  2247  1032  3487               	retlw	135
  2248  1033  346B               	retlw	107
  2249  1034  34F8               	retlw	248
  2250  1035  347F               	retlw	127
  2251  1036  343F               	retlw	63
  2252  1037  3409               	retlw	9
  2253  1038  3400               	retlw	0
  2254  1039  345C               	retlw	92
  2255  103A  34A7               	retlw	167
  2256  103B  3462               	retlw	98
  2257  103C  3486               	retlw	134
  2258  103D  3483               	retlw	131
  2259  103E  3403               	retlw	3
  2260  103F  3422               	retlw	34
  2261  1040  34F8               	retlw	248
  2262  1041  3400               	retlw	0
  2263  1042  3444               	retlw	68
  2264  1043  34B6               	retlw	182
  2265  1044  3410               	retlw	16
  2266  1045  3418               	retlw	24
  2267  1046  341D               	retlw	29
  2268  1047  341C               	retlw	28
  2269  1048  34C7               	retlw	199
  2270  1049  3400               	retlw	0
  2271  104A  34B2               	retlw	178
  2272  104B  34EA               	retlw	234
  2273  104C  340A               	retlw	10
  2274  104D  3400               	retlw	0
  2275  104E  3411               	retlw	17
  2276  104F  3459               	retlw	89
  2277  1050  3488               	retlw	136
  2278  1051  3431               	retlw	49
  2279  1052  340B               	retlw	11
  2280  1053  342F               	retlw	47
  2281  1054  342E               	retlw	46
  2282  1055  3406               	retlw	6
  2283  1056  3404               	retlw	4
  2284  1057  3405               	retlw	5
  2285  1058  3400               	retlw	0
  2286  1059  3430               	retlw	48
  2287  105A  34D3               	retlw	211
  2288  105B  3491               	retlw	145
  2289  105C  3441               	retlw	65
  2290  105D  3400               	retlw	0
  2291  105E                     __end_of_CC2500_rfSettings:	
  2292  105E                     _CC2500_patable_vaule:	
  2293  105E  34FE               	retlw	254
  2294  105F  34FE               	retlw	254
  2295  1060  34FE               	retlw	254
  2296  1061  34FE               	retlw	254
  2297  1062  34FE               	retlw	254
  2298  1063  34FE               	retlw	254
  2299  1064  34FE               	retlw	254
  2300  1065  34FE               	retlw	254
  2301  1066                     __end_of_CC2500_patable_vaule:	
  2302                           
  2303                           	psect	nvBANK0
  2304  006E                     __pnvBANK0:	
  2305  006E                     _product:	
  2306  006E                     	ds	1
  2307  000C                     _PORTA	set	12
  2308  000D                     _PORTB	set	13
  2309  000E                     _PORTC	set	14
  2310  0018                     _T1CON	set	24
  2311  0017                     _TMR1H	set	23
  2312  0016                     _TMR1L	set	22
  2313  005F                     _GIE	set	95
  2314  005B                     _IOCIE	set	91
  2315  0058                     _IOCIF	set	88
  2316  005E                     _PEIE	set	94
  2317  0060                     _RA0	set	96
  2318  0063                     _RA3	set	99
  2319  0064                     _RA4	set	100
  2320  0066                     _RA6	set	102
  2321  0067                     _RA7	set	103
  2322  0068                     _RB0	set	104
  2323  0069                     _RB1	set	105
  2324  006B                     _RB3	set	107
  2325  006C                     _RB4	set	108
  2326  006D                     _RB5	set	109
  2327  0070                     _RC0	set	112
  2328  0071                     _RC1	set	113
  2329  0072                     _RC2	set	114
  2330  0074                     _RC4	set	116
  2331  0075                     _RC5	set	117
  2332  0077                     _RC7	set	119
  2333  0088                     _TMR1IF	set	136
  2334  009D                     _ADCON0	set	157
  2335  009E                     _ADCON1	set	158
  2336  009C                     _ADRESH	set	156
  2337  009B                     _ADRESL	set	155
  2338  0099                     _OSCCON	set	153
  2339  008C                     _TRISA	set	140
  2340  008D                     _TRISB	set	141
  2341  008E                     _TRISC	set	142
  2342  0097                     _WDTCON	set	151
  2343  04E9                     _GO_nDONE	set	1257
  2344  0488                     _TMR1IE	set	1160
  2345  0117                     _FVRCON	set	279
  2346  010C                     _LATA	set	268
  2347  010D                     _LATB	set	269
  2348  010E                     _LATC	set	270
  2349  018C                     _ANSELA	set	396
  2350  018D                     _ANSELB	set	397
  2351  018E                     _ANSELC	set	398
  2352  0192                     _PMADRH	set	402
  2353  0191                     _PMADRL	set	401
  2354  0196                     _PMCON2	set	406
  2355  0194                     _PMDATH	set	404
  2356  0193                     _PMDATL	set	403
  2357  0CAE                     _CFGS	set	3246
  2358  0CAC                     _FREE	set	3244
  2359  0CAD                     _LWLO	set	3245
  2360  0CA8                     _RD	set	3240
  2361  0CA9                     _WR	set	3241
  2362  0CAA                     _WREN	set	3242
  2363  1069                     _WPUB1	set	4201
  2364  106A                     _WPUB2	set	4202
  2365  0396                     _IOCBF	set	918
  2366  0395                     _IOCBN	set	917
  2367  0394                     _IOCBP	set	916
  2368  1CB2                     _IOCBF2	set	7346
  2369                           
  2370                           ; #config settings
  2371  0000                     
  2372                           	psect	cinit
  2373  0015                     start_initialization:	
  2374  0015                     __initialization:	
  2375                           
  2376                           ; Clear objects allocated to BITCOMMON
  2377  0015  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2378                           
  2379                           ; Clear objects allocated to COMMON
  2380  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2381  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2382  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2383  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2384  001A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2385                           
  2386                           ; Clear objects allocated to BANK0
  2387  001B  01EF               	clrf	__pbssBANK0& (0+127)
  2388                           
  2389                           ; Clear objects allocated to BANK1
  2390  001C  30A0               	movlw	low __pbssBANK1
  2391  001D  0084               	movwf	4
  2392  001E  3000               	movlw	high __pbssBANK1
  2393  001F  0085               	movwf	5
  2394  0020  3049               	movlw	73
  2395  0021  3190  2066  3180   	fcall	clear_ram0
  2396                           
  2397                           ; Clear objects allocated to BANK2
  2398  0024  3020               	movlw	low __pbssBANK2
  2399  0025  0084               	movwf	4
  2400  0026  3001               	movlw	high __pbssBANK2
  2401  0027  0085               	movwf	5
  2402  0028  3050               	movlw	80
  2403  0029  3190  2066  3180   	fcall	clear_ram0
  2404                           
  2405                           ; Clear objects allocated to BANK3
  2406  002C  30A0               	movlw	low __pbssBANK3
  2407  002D  0084               	movwf	4
  2408  002E  3001               	movlw	high __pbssBANK3
  2409  002F  0085               	movwf	5
  2410  0030  3046               	movlw	70
  2411  0031  3190  2066  3180   	fcall	clear_ram0
  2412                           
  2413                           ; Clear objects allocated to BANK4
  2414  0034  3020               	movlw	low __pbssBANK4
  2415  0035  0084               	movwf	4
  2416  0036  3002               	movlw	high __pbssBANK4
  2417  0037  0085               	movwf	5
  2418  0038  3025               	movlw	37
  2419  0039  3190  2066  3180   	fcall	clear_ram0
  2420                           
  2421                           ; Initialize objects allocated to BANK4
  2422  003C  3058               	movlw	low __pidataBANK4
  2423  003D  0084               	movwf	4
  2424  003E  309F               	movlw	(high __pidataBANK4)| (0+128)
  2425  003F  0085               	movwf	5
  2426  0040  3045               	movlw	low __pdataBANK4
  2427  0041  0086               	movwf	6
  2428  0042  3002               	movlw	high __pdataBANK4
  2429  0043  0087               	movwf	7
  2430  0044  3020               	movlw	32
  2431  0045  319B  2353         	fcall	init_ram
  2432  0047                     end_of_initialization:	
  2433                           ;End of C runtime variable initialization code
  2434                           
  2435  0047                     __end_of__initialization:	
  2436  0047  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2437  0048  0020               	movlb	0
  2438  0049  3195  2DE1         	ljmp	_main	;jump to C main() function
  2439                           
  2440                           	psect	bitbssCOMMON
  2441  03E8                     __pbitbssCOMMON:	
  2442  03E8                     _Receive_OK:	
  2443  03E8                     	ds	1
  2444  03E9                     _Transceive_OK:	
  2445  03E9                     	ds	1
  2446                           
  2447                           	psect	bssCOMMON
  2448  0078                     __pbssCOMMON:	
  2449  0078                     _DelayOff:	
  2450  0078                     	ds	1
  2451  0079                     _DimmerLightsIntr:	
  2452  0079                     	ds	1
  2453  007A                     _LED:	
  2454  007A                     	ds	1
  2455  007B                     _SPI0Buffer:	
  2456  007B                     	ds	1
  2457  007C                     _Sw:	
  2458  007C                     	ds	1
  2459                           
  2460                           	psect	bssBANK0
  2461  006F                     __pbssBANK0:	
  2462  006F                     _DimmerLights:	
  2463  006F                     	ds	1
  2464                           
  2465                           	psect	bssBANK1
  2466  00A0                     __pbssBANK1:	
  2467  00A0                     _myMain:	
  2468  00A0                     	ds	15
  2469  00AF                     _Buz1:	
  2470  00AF                     	ds	12
  2471  00BB                     _RF1:	
  2472  00BB                     	ds	12
  2473  00C7                     _Timer1:	
  2474  00C7                     	ds	3
  2475  00CA                     _WDT:	
  2476  00CA                     	ds	2
  2477  00CC                     _CRC:	
  2478  00CC                     	ds	1
  2479  00CD                     _DimmerLights11:	
  2480  00CD                     	ds	1
  2481  00CE                     _DimmerLights22:	
  2482  00CE                     	ds	1
  2483  00CF                     _DimmerLightsIntrIOC:	
  2484  00CF                     	ds	1
  2485  00D0                     _RSSI:	
  2486  00D0                     	ds	1
  2487  00D1                     _Rx_Length:	
  2488  00D1                     	ds	1
  2489  00D2                     _SwDetect:	
  2490  00D2                     	ds	1
  2491  00D3                     _Tx_Length:	
  2492  00D3                     	ds	1
  2493  00D4                     _r_address:	
  2494  00D4                     	ds	1
  2495  00D5                     _r_data:	
  2496  00D5                     	ds	1
  2497  00D6                     _s_data:	
  2498  00D6                     	ds	1
  2499  00D7                     _Temp:	
  2500  00D7                     	ds	18
  2501                           
  2502                           	psect	bssBANK2
  2503  0120                     __pbssBANK2:	
  2504  0120                     _RF_Data:	
  2505  0120                     	ds	30
  2506  013E                     _Dimmer:	
  2507  013E                     	ds	3
  2508  0141                     _RF_Count:	
  2509  0141                     	ds	2
  2510  0143                     _Load:	
  2511  0143                     	ds	45
  2512                           
  2513                           	psect	bssBANK3
  2514  01A0                     __pbssBANK3:	
  2515  01A0                     _DimmerLights1:	
  2516  01A0                     	ds	15
  2517  01AF                     _DimmerLights2:	
  2518  01AF                     	ds	15
  2519  01BE                     _Sw1:	
  2520  01BE                     	ds	9
  2521  01C7                     _Sw2:	
  2522  01C7                     	ds	9
  2523  01D0                     _DlySw1:	
  2524  01D0                     	ds	5
  2525  01D5                     _DlySw2:	
  2526  01D5                     	ds	5
  2527  01DA                     _VarErrLED:	
  2528  01DA                     	ds	4
  2529  01DE                     _VarLED1:	
  2530  01DE                     	ds	4
  2531  01E2                     _VarLED2:	
  2532  01E2                     	ds	4
  2533                           
  2534                           	psect	bssBANK4
  2535  0220                     __pbssBANK4:	
  2536  0220                     _Memory:	
  2537  0220                     	ds	37
  2538                           
  2539                           	psect	dataBANK4
  2540  0245                     __pdataBANK4:	
  2541  0245                     __product:	
  2542  0245                     	ds	32
  2543                           
  2544                           	psect	clrtext
  2545  1066                     clear_ram0:	
  2546                           ;	Called with FSR0 containing the base address, and
  2547                           ;	WREG with the size to clear
  2548                           
  2549  1066  0064               	clrwdt	;clear the watchdog before getting into this loop
  2550  1067                     clrloop0:	
  2551  1067  0180               	clrf	0	;clear RAM location pointed to by FSR
  2552  1068  3101               	addfsr 0,1
  2553  1069  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2554  106A  2867               	goto	clrloop0	;have we reached the end yet?
  2555  106B  3400               	retlw	0	;all done for this memory range, return
  2556                           
  2557                           	psect	inittext
  2558  1B53                     init_ram:	
  2559  1B53  00FE               	movwf	126
  2560  1B54                     initloop:	
  2561  1B54  0012               	moviw fsr0++
  2562  1B55  001E               	movwi fsr1++
  2563  1B56  0BFE               	decfsz	126,f
  2564  1B57  2B54               	goto	initloop
  2565  1B58  3400               	retlw	0
  2566                           
  2567                           	psect	cstackBANK1
  2568  00E9                     __pcstackBANK1:	
  2569  00E9                     setRF_Main@loop_f:	
  2570                           
  2571                           ; 1 bytes @ 0x0
  2572  00E9                     	ds	1
  2573  00EA                     setRF_Main@Receive_OK:	
  2574                           
  2575                           ; 1 bytes @ 0x1
  2576  00EA                     	ds	1
  2577  00EB                     setRF_Main@error:	
  2578                           
  2579                           ; 1 bytes @ 0x2
  2580  00EB                     	ds	1
  2581  00EC                     ?_main:	
  2582  00EC                     main@argc:	
  2583                           ; 2 bytes @ 0x3
  2584                           
  2585                           
  2586                           ; 2 bytes @ 0x3
  2587  00EC                     	ds	2
  2588  00EE                     main@argv:	
  2589                           
  2590                           ; 2 bytes @ 0x5
  2591  00EE                     	ds	2
  2592                           
  2593                           	psect	cstackCOMMON
  2594  0070                     __pcstackCOMMON:	
  2595  0070                     ?_Timeout_Counter:	
  2596  0070                     ?_set_TimeoutCleared:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_CC2500_WriteByte:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_CC2500_WriteCommand:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_CC2500_ReadStatus:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_CC2500_ReadByte:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_CC2500_PowerRST:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_CC2500_InitSetREG:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_CC2500_InitPATable:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_CC2500_ClearTXFIFO:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_CC2500_ClearRXFIFO:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_CC2500_FrequencyCabr:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_CC2500_SIDLEMode:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_DlyOff_Initialization:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_DlyOff_Main:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_setDimmerLights_ErrorClose:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_setDimmerLights_Initialization:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_Dimmer_Initialization:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_setDimmerLights_Main:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_setDimmerLights_Line:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setTxData:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_setLED_Initialization:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setLED_Main:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_Fosc_Set:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_IO_Set:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_TMR1_Set:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_ADC_Set:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_IOC_Set:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_WDT_Set:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_IOC_ISR:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_TMR1_ISR:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_Flash_Memory_Write:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_Flash_Memory_Modify:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_WDT_Clearing:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_setLoad_AH_AL_Restore:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_setTemp_Initialization:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_setTemp_Main:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_setRF_Initialization:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_setRF_Main:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_getRxData:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_setLog_Code:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_setControl_Lights_Table:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_setRFSW_Control:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_setRFSW_AdjControl:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_setRF_DimmerValue:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_setSw_Initialization:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_setMain_Exception:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_setSw_Main:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_myMain_Initialization:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_my_MainTimer:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_Buzzer_Initialization:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_Buzzer_Main:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_CC2500_TxData:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_CC2500_RxData:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_CC2500_PowerOnInitial:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_DelayOffPointSelect:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_DelayOff_Initialization:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_DelayOff_Main:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_DimmerIntrIOCPointSelect:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ??_DimmerIntrIOCPointSelect:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_DimmerIntrPointSelect:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ??_DimmerIntrPointSelect:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_setDimmerLights_IntrControl:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_DimmerLightsPointSelect:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_DimmerLights_Initialization:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_DimmerLights_Main:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_setDimmerLights_SwOn:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_setDimmerLights_SwOff:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_setDimmerLights_AdjControl:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_setDimmerLights_AdjRF:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_LedPointSelect:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_LED_Initialization:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_LED_Main:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_Mcu_Initialization:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_ISR:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_setDimmerReClock:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_Flash_Memory_Initialization:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_Flash_Memory_Main:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_Flash_Memory_Unlock:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_Flash_Memory_Erasing:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_setMemory_Modify:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_setMemory_LoopSave:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_WDT_Main:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_Load_Initialization:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_getLoad_AD:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_Load_Main:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_Temp_Initialization:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_getTemp_AD:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_Temp_Main:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_RF_Initialization:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_RF_Main:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_setRF_Learn:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_TouchPower:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_SwPointSelect:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_Switch_Initialization:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_Switch_Main:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_DelayTimejudge:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_getMain_All_Error_Status:	
  2888                           ; 1 bytes @ 0x0
  2889                           
  2890  0070                     ?_getLoad_OK:	
  2891                           ; 1 bytes @ 0x0
  2892                           
  2893  0070                     ?_getMain_LightsStatus:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0070                     ?_setPercentValue:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0070                     ?_getPercentValue:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ?_Flash_Memory_Read:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getMain_LoadOK:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getMain_Lights_Count:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_getRF_KeyStatus:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?_getSw_KeyStatus:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_getDelayOff_GO:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_getDimmerLights_Status:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_getAll_DimmerLights_AdjGO:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getDimmer_LoadOK:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getDimmerLights_Line:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932                           
  2933                           ; 1 bytes @ 0x0
  2934  0070                     	ds	1
  2935  0071                     DimmerIntrIOCPointSelect@lights:	
  2936  0071                     DimmerIntrPointSelect@lights:	
  2937                           ; 1 bytes @ 0x1
  2938                           
  2939                           
  2940                           ; 1 bytes @ 0x1
  2941  0071                     	ds	1
  2942  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2943  0072                     ??_setDimmerLights_IntrControl:	
  2944                           ; 0 bytes @ 0x2
  2945                           
  2946  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2947                           ; 0 bytes @ 0x2
  2948                           
  2949                           
  2950                           ; 1 bytes @ 0x2
  2951  0072                     	ds	1
  2952  0073                     ??_IOC_ISR:	
  2953  0073                     ??_setDimmerReClock:	
  2954                           ; 0 bytes @ 0x3
  2955                           
  2956                           
  2957                           ; 0 bytes @ 0x3
  2958  0073                     	ds	3
  2959  0076                     setDimmerLights_IntrControl@lights:	
  2960                           
  2961                           ; 1 bytes @ 0x6
  2962  0076                     	ds	1
  2963  0077                     ??_TMR1_ISR:	
  2964  0077                     ??_ISR:	
  2965                           ; 0 bytes @ 0x7
  2966                           
  2967                           
  2968                           ; 0 bytes @ 0x7
  2969  0077                     	ds	1
  2970                           
  2971                           	psect	cstackBANK0
  2972  0020                     __pcstackBANK0:	
  2973  0020                     ??_Timeout_Counter:	
  2974  0020                     ??_set_TimeoutCleared:	
  2975                           ; 0 bytes @ 0x0
  2976                           
  2977  0020                     ??_CC2500_WriteByte:	
  2978                           ; 0 bytes @ 0x0
  2979                           
  2980  0020                     ??_CC2500_ReadByte:	
  2981                           ; 0 bytes @ 0x0
  2982                           
  2983  0020                     ?_DelayTime_1us:	
  2984                           ; 0 bytes @ 0x0
  2985                           
  2986  0020                     ??_Dimmer_Initialization:	
  2987                           ; 0 bytes @ 0x0
  2988                           
  2989  0020                     ??_getMain_All_Error_Status:	
  2990                           ; 0 bytes @ 0x0
  2991                           
  2992  0020                     ??_getLoad_OK:	
  2993                           ; 0 bytes @ 0x0
  2994                           
  2995  0020                     ??_setDimmerLights_Line:	
  2996                           ; 0 bytes @ 0x0
  2997                           
  2998  0020                     ?_setRF_DimmerLights:	
  2999                           ; 0 bytes @ 0x0
  3000                           
  3001  0020                     ??_setTxData:	
  3002                           ; 0 bytes @ 0x0
  3003                           
  3004  0020                     ??_Fosc_Set:	
  3005                           ; 0 bytes @ 0x0
  3006                           
  3007  0020                     ??_IO_Set:	
  3008                           ; 0 bytes @ 0x0
  3009                           
  3010  0020                     ??_TMR1_Set:	
  3011                           ; 0 bytes @ 0x0
  3012                           
  3013  0020                     ??_ADC_Set:	
  3014                           ; 0 bytes @ 0x0
  3015                           
  3016  0020                     ??_IOC_Set:	
  3017                           ; 0 bytes @ 0x0
  3018                           
  3019  0020                     ??_WDT_Set:	
  3020                           ; 0 bytes @ 0x0
  3021                           
  3022  0020                     ??_Flash_Memory_Read:	
  3023                           ; 0 bytes @ 0x0
  3024                           
  3025  0020                     ?_setMemory_Data:	
  3026                           ; 0 bytes @ 0x0
  3027                           
  3028  0020                     ??_Flash_Memory_Write:	
  3029                           ; 0 bytes @ 0x0
  3030                           
  3031  0020                     ??_WDT_Clearing:	
  3032                           ; 0 bytes @ 0x0
  3033                           
  3034  0020                     ??_setLoad_AH_AL_Restore:	
  3035                           ; 0 bytes @ 0x0
  3036                           
  3037  0020                     ??_getMain_Lights_Count:	
  3038                           ; 0 bytes @ 0x0
  3039                           
  3040  0020                     ??_setTemp_Initialization:	
  3041                           ; 0 bytes @ 0x0
  3042                           
  3043  0020                     ??_setRF_Initialization:	
  3044                           ; 0 bytes @ 0x0
  3045                           
  3046  0020                     ??_getRF_KeyStatus:	
  3047                           ; 0 bytes @ 0x0
  3048                           
  3049  0020                     ??_getSw_KeyStatus:	
  3050                           ; 0 bytes @ 0x0
  3051                           
  3052  0020                     ??_myMain_Initialization:	
  3053                           ; 0 bytes @ 0x0
  3054                           
  3055  0020                     ??_Buzzer_Initialization:	
  3056                           ; 0 bytes @ 0x0
  3057                           
  3058  0020                     ??_Buzzer_Main:	
  3059                           ; 0 bytes @ 0x0
  3060                           
  3061  0020                     ??_DelayOffPointSelect:	
  3062                           ; 0 bytes @ 0x0
  3063                           
  3064  0020                     ??_DimmerLightsPointSelect:	
  3065                           ; 0 bytes @ 0x0
  3066                           
  3067  0020                     ??_getAll_DimmerLights_AdjGO:	
  3068                           ; 0 bytes @ 0x0
  3069                           
  3070  0020                     ??_getDimmer_LoadOK:	
  3071                           ; 0 bytes @ 0x0
  3072                           
  3073  0020                     ??_getDimmerLights_Line:	
  3074                           ; 0 bytes @ 0x0
  3075                           
  3076  0020                     ??_LedPointSelect:	
  3077                           ; 0 bytes @ 0x0
  3078                           
  3079  0020                     ??_Flash_Memory_Unlock:	
  3080                           ; 0 bytes @ 0x0
  3081                           
  3082  0020                     ??_Flash_Memory_Erasing:	
  3083                           ; 0 bytes @ 0x0
  3084                           
  3085  0020                     ??_setMemory_Modify:	
  3086                           ; 0 bytes @ 0x0
  3087                           
  3088  0020                     ??_setMemory_LoopSave:	
  3089                           ; 0 bytes @ 0x0
  3090                           
  3091  0020                     ??_WDT_Main:	
  3092                           ; 0 bytes @ 0x0
  3093                           
  3094  0020                     ??_Temp_Initialization:	
  3095                           ; 0 bytes @ 0x0
  3096                           
  3097  0020                     ??_setRF_Learn:	
  3098                           ; 0 bytes @ 0x0
  3099                           
  3100  0020                     ??_TouchPower:	
  3101                           ; 0 bytes @ 0x0
  3102                           
  3103  0020                     ??_SwPointSelect:	
  3104                           ; 0 bytes @ 0x0
  3105                           
  3106  0020                     ?___bmul:	
  3107                           ; 0 bytes @ 0x0
  3108                           
  3109  0020                     ?_getBuz_GO:	
  3110                           ; 1 bytes @ 0x0
  3111                           
  3112  0020                     ?_getAD:	
  3113                           ; 2 bytes @ 0x0
  3114                           
  3115  0020                     ?___awdiv:	
  3116                           ; 2 bytes @ 0x0
  3117                           
  3118  0020                     ?___ftpack:	
  3119                           ; 2 bytes @ 0x0
  3120                           
  3121  0020                     getDimmer_LoadOK@status:	
  3122                           ; 3 bytes @ 0x0
  3123                           
  3124  0020                     setDimmerLights_Line@lights:	
  3125                           ; 1 bytes @ 0x0
  3126                           
  3127  0020                     getAD@adcon1:	
  3128                           ; 1 bytes @ 0x0
  3129                           
  3130  0020                     setMemory_Data@data:	
  3131                           ; 1 bytes @ 0x0
  3132                           
  3133  0020                     getLoad_OK@ok:	
  3134                           ; 1 bytes @ 0x0
  3135                           
  3136  0020                     setRF_DimmerLights@on:	
  3137                           ; 1 bytes @ 0x0
  3138                           
  3139  0020                     getMain_Lights_Count@count:	
  3140                           ; 1 bytes @ 0x0
  3141                           
  3142  0020                     ___bmul@multiplicand:	
  3143                           ; 1 bytes @ 0x0
  3144                           
  3145  0020                     DelayTime_1us@count:	
  3146                           ; 1 bytes @ 0x0
  3147                           
  3148  0020                     ___awdiv@divisor:	
  3149                           ; 2 bytes @ 0x0
  3150                           
  3151  0020                     ___ftpack@arg:	
  3152                           ; 2 bytes @ 0x0
  3153                           
  3154                           
  3155                           ; 3 bytes @ 0x0
  3156  0020                     	ds	1
  3157  0021                     ??_setRF_DimmerLights:	
  3158  0021                     ??_setMemory_Data:	
  3159                           ; 0 bytes @ 0x1
  3160                           
  3161  0021                     ??_getMain_LoadOK:	
  3162                           ; 0 bytes @ 0x1
  3163                           
  3164  0021                     ??_Mcu_Initialization:	
  3165                           ; 0 bytes @ 0x1
  3166                           
  3167  0021                     ??_RF_Initialization:	
  3168                           ; 0 bytes @ 0x1
  3169                           
  3170  0021                     ??___bmul:	
  3171                           ; 0 bytes @ 0x1
  3172                           
  3173  0021                     CC2500_WriteByte@loop_a:	
  3174                           ; 0 bytes @ 0x1
  3175                           
  3176  0021                     CC2500_ReadByte@loop_b:	
  3177                           ; 1 bytes @ 0x1
  3178                           
  3179  0021                     DelayOffPointSelect@sw:	
  3180                           ; 1 bytes @ 0x1
  3181                           
  3182  0021                     DimmerLightsPointSelect@lights:	
  3183                           ; 1 bytes @ 0x1
  3184                           
  3185  0021                     getAll_DimmerLights_AdjGO@adjgo:	
  3186                           ; 1 bytes @ 0x1
  3187                           
  3188  0021                     getDimmerLights_Line@line:	
  3189                           ; 1 bytes @ 0x1
  3190                           
  3191  0021                     LedPointSelect@led:	
  3192                           ; 1 bytes @ 0x1
  3193                           
  3194  0021                     Flash_Memory_Read@i:	
  3195                           ; 1 bytes @ 0x1
  3196                           
  3197  0021                     Flash_Memory_Write@i:	
  3198                           ; 1 bytes @ 0x1
  3199                           
  3200  0021                     setMemory_Modify@command:	
  3201                           ; 1 bytes @ 0x1
  3202                           
  3203  0021                     setMemory_LoopSave@command:	
  3204                           ; 1 bytes @ 0x1
  3205                           
  3206  0021                     setLoad_AH_AL_Restore@i:	
  3207                           ; 1 bytes @ 0x1
  3208                           
  3209  0021                     setRF_Learn@command:	
  3210                           ; 1 bytes @ 0x1
  3211                           
  3212  0021                     getRF_KeyStatus@key:	
  3213                           ; 1 bytes @ 0x1
  3214                           
  3215  0021                     SwPointSelect@sw:	
  3216                           ; 1 bytes @ 0x1
  3217                           
  3218  0021                     _getSw_KeyStatus$6345:	
  3219                           ; 1 bytes @ 0x1
  3220                           
  3221  0021                     getMain_Lights_Count@status3:	
  3222                           ; 1 bytes @ 0x1
  3223                           
  3224  0021                     _getMain_All_Error_Status$7093:	
  3225                           ; 1 bytes @ 0x1
  3226                           
  3227                           
  3228                           ; 2 bytes @ 0x1
  3229  0021                     	ds	1
  3230  0022                     ??_CC2500_WriteCommand:	
  3231  0022                     ??_CC2500_ReadStatus:	
  3232                           ; 0 bytes @ 0x2
  3233                           
  3234  0022                     ??_DelayTime_1us:	
  3235                           ; 0 bytes @ 0x2
  3236                           
  3237  0022                     ?_CC2500_WriteREG:	
  3238                           ; 0 bytes @ 0x2
  3239                           
  3240  0022                     ??_DlyOff_Initialization:	
  3241                           ; 0 bytes @ 0x2
  3242                           
  3243  0022                     ??_setDimmerLights_Initialization:	
  3244                           ; 0 bytes @ 0x2
  3245                           
  3246  0022                     ?_setDimmerLights_Trigger:	
  3247                           ; 0 bytes @ 0x2
  3248                           
  3249  0022                     ?_setDimmerLights_TriggerAdj:	
  3250                           ; 0 bytes @ 0x2
  3251                           
  3252  0022                     ?_setLED:	
  3253                           ; 0 bytes @ 0x2
  3254                           
  3255  0022                     ??_setLED_Main:	
  3256                           ; 0 bytes @ 0x2
  3257                           
  3258  0022                     ??_getBuz_GO:	
  3259                           ; 0 bytes @ 0x2
  3260                           
  3261  0022                     ??_getDelayOff_GO:	
  3262                           ; 0 bytes @ 0x2
  3263                           
  3264  0022                     ??_getDimmerLights_Status:	
  3265                           ; 0 bytes @ 0x2
  3266                           
  3267  0022                     ??_Load_Initialization:	
  3268                           ; 0 bytes @ 0x2
  3269                           
  3270  0022                     CC2500_WriteREG@value:	
  3271                           ; 0 bytes @ 0x2
  3272                           
  3273  0022                     DlyOff_Initialization@sw:	
  3274                           ; 1 bytes @ 0x2
  3275                           
  3276  0022                     getDelayOff_GO@sw:	
  3277                           ; 1 bytes @ 0x2
  3278                           
  3279  0022                     getDimmerLights_Status@lights:	
  3280                           ; 1 bytes @ 0x2
  3281                           
  3282  0022                     _getAll_DimmerLights_AdjGO$2562:	
  3283                           ; 1 bytes @ 0x2
  3284                           
  3285  0022                     setDimmerLights_Trigger@command:	
  3286                           ; 1 bytes @ 0x2
  3287                           
  3288  0022                     setDimmerLights_TriggerAdj@command:	
  3289                           ; 1 bytes @ 0x2
  3290                           
  3291  0022                     setLED@command:	
  3292                           ; 1 bytes @ 0x2
  3293                           
  3294  0022                     Flash_Memory_Read@address:	
  3295                           ; 1 bytes @ 0x2
  3296                           
  3297  0022                     setMemory_Data@address:	
  3298                           ; 1 bytes @ 0x2
  3299                           
  3300  0022                     _getRF_KeyStatus$5268:	
  3301                           ; 1 bytes @ 0x2
  3302                           
  3303  0022                     _getSw_KeyStatus$6346:	
  3304                           ; 1 bytes @ 0x2
  3305                           
  3306  0022                     getMain_Lights_Count@status1:	
  3307                           ; 1 bytes @ 0x2
  3308                           
  3309  0022                     getMain_LoadOK@ok:	
  3310                           ; 1 bytes @ 0x2
  3311                           
  3312  0022                     ___bmul@product:	
  3313                           ; 1 bytes @ 0x2
  3314                           
  3315  0022                     DelayTime_1us@i:	
  3316                           ; 1 bytes @ 0x2
  3317                           
  3318  0022                     ___awdiv@dividend:	
  3319                           ; 2 bytes @ 0x2
  3320                           
  3321                           
  3322                           ; 2 bytes @ 0x2
  3323  0022                     	ds	1
  3324  0023                     ??_CC2500_WriteREG:	
  3325  0023                     ??_setDimmerLights_Trigger:	
  3326                           ; 0 bytes @ 0x3
  3327                           
  3328  0023                     ??_setDimmerLights_TriggerAdj:	
  3329                           ; 0 bytes @ 0x3
  3330                           
  3331  0023                     ??_setLED:	
  3332                           ; 0 bytes @ 0x3
  3333                           
  3334  0023                     ??_DelayOff_Initialization:	
  3335                           ; 0 bytes @ 0x3
  3336                           
  3337  0023                     ??_getAD:	
  3338                           ; 0 bytes @ 0x3
  3339                           
  3340  0023                     CC2500_WriteCommand@command:	
  3341                           ; 0 bytes @ 0x3
  3342                           
  3343  0023                     CC2500_ReadStatus@status_addr:	
  3344                           ; 1 bytes @ 0x3
  3345                           
  3346  0023                     getDelayOff_GO@go:	
  3347                           ; 1 bytes @ 0x3
  3348                           
  3349  0023                     setDimmerLights_Initialization@lights:	
  3350                           ; 1 bytes @ 0x3
  3351                           
  3352  0023                     getDimmerLights_Status@status:	
  3353                           ; 1 bytes @ 0x3
  3354                           
  3355  0023                     setLED@led:	
  3356                           ; 1 bytes @ 0x3
  3357                           
  3358  0023                     getAD@adcon0:	
  3359                           ; 1 bytes @ 0x3
  3360                           
  3361  0023                     Flash_Memory_Read@ret:	
  3362                           ; 1 bytes @ 0x3
  3363                           
  3364  0023                     setRF_DimmerLights@status:	
  3365                           ; 1 bytes @ 0x3
  3366                           
  3367  0023                     getSw_KeyStatus@status:	
  3368                           ; 1 bytes @ 0x3
  3369                           
  3370  0023                     getMain_Lights_Count@status2:	
  3371                           ; 1 bytes @ 0x3
  3372                           
  3373  0023                     ___bmul@multiplier:	
  3374                           ; 1 bytes @ 0x3
  3375                           
  3376  0023                     ___ftpack@exp:	
  3377                           ; 1 bytes @ 0x3
  3378                           
  3379  0023                     _getMain_All_Error_Status$7094:	
  3380                           ; 1 bytes @ 0x3
  3381                           
  3382                           
  3383                           ; 2 bytes @ 0x3
  3384  0023                     	ds	1
  3385  0024                     ??_CC2500_ClearTXFIFO:	
  3386  0024                     ??_CC2500_ClearRXFIFO:	
  3387                           ; 0 bytes @ 0x4
  3388                           
  3389  0024                     ??_CC2500_SIDLEMode:	
  3390                           ; 0 bytes @ 0x4
  3391                           
  3392  0024                     ??_DelayTimejudge:	
  3393                           ; 0 bytes @ 0x4
  3394                           
  3395  0024                     ??_getMain_LightsStatus:	
  3396                           ; 0 bytes @ 0x4
  3397                           
  3398  0024                     ??_setLED_Initialization:	
  3399                           ; 0 bytes @ 0x4
  3400                           
  3401  0024                     ??_Flash_Memory_Modify:	
  3402                           ; 0 bytes @ 0x4
  3403                           
  3404  0024                     ??_setSw_Initialization:	
  3405                           ; 0 bytes @ 0x4
  3406                           
  3407  0024                     ??_CC2500_TxData:	
  3408                           ; 0 bytes @ 0x4
  3409                           
  3410  0024                     ??_CC2500_RxData:	
  3411                           ; 0 bytes @ 0x4
  3412                           
  3413  0024                     ??_DimmerLights_Initialization:	
  3414                           ; 0 bytes @ 0x4
  3415                           
  3416  0024                     ??_getLoad_AD:	
  3417                           ; 0 bytes @ 0x4
  3418                           
  3419  0024                     ??_getTemp_AD:	
  3420                           ; 0 bytes @ 0x4
  3421                           
  3422  0024                     ??___awdiv:	
  3423                           ; 0 bytes @ 0x4
  3424                           
  3425  0024                     CC2500_WriteREG@w_addr:	
  3426                           ; 0 bytes @ 0x4
  3427                           
  3428  0024                     setDimmerLights_Trigger@lights:	
  3429                           ; 1 bytes @ 0x4
  3430                           
  3431  0024                     setDimmerLights_TriggerAdj@lights:	
  3432                           ; 1 bytes @ 0x4
  3433                           
  3434  0024                     setLED_Initialization@led:	
  3435                           ; 1 bytes @ 0x4
  3436                           
  3437  0024                     setLED_Main@led:	
  3438                           ; 1 bytes @ 0x4
  3439                           
  3440  0024                     setRF_DimmerLights@lights:	
  3441                           ; 1 bytes @ 0x4
  3442                           
  3443  0024                     setSw_Initialization@sw:	
  3444                           ; 1 bytes @ 0x4
  3445                           
  3446  0024                     getSw_KeyStatus@sw:	
  3447                           ; 1 bytes @ 0x4
  3448                           
  3449  0024                     ___ftpack@sign:	
  3450                           ; 1 bytes @ 0x4
  3451                           
  3452  0024                     getBuz_GO@i:	
  3453                           ; 1 bytes @ 0x4
  3454                           
  3455  0024                     DelayTime_1us@j:	
  3456                           ; 2 bytes @ 0x4
  3457                           
  3458                           
  3459                           ; 2 bytes @ 0x4
  3460  0024                     	ds	1
  3461  0025                     ??_CC2500_InitSetREG:	
  3462  0025                     ??_CC2500_InitPATable:	
  3463                           ; 0 bytes @ 0x5
  3464                           
  3465  0025                     ??___ftpack:	
  3466                           ; 0 bytes @ 0x5
  3467                           
  3468  0025                     ??_setDimmerLights_AdjControl:	
  3469                           ; 0 bytes @ 0x5
  3470                           
  3471  0025                     ??_LED_Initialization:	
  3472                           ; 0 bytes @ 0x5
  3473                           
  3474  0025                     ??_LED_Main:	
  3475                           ; 0 bytes @ 0x5
  3476                           
  3477  0025                     ??_Switch_Initialization:	
  3478                           ; 0 bytes @ 0x5
  3479                           
  3480  0025                     CC2500_TxData@loop_e:	
  3481                           ; 0 bytes @ 0x5
  3482                           
  3483  0025                     CC2500_RxData@loop_f:	
  3484                           ; 1 bytes @ 0x5
  3485                           
  3486  0025                     Flash_Memory_Modify@i:	
  3487                           ; 1 bytes @ 0x5
  3488                           
  3489  0025                     getTemp_AD@channel:	
  3490                           ; 1 bytes @ 0x5
  3491                           
  3492  0025                     getMain_LightsStatus@count:	
  3493                           ; 1 bytes @ 0x5
  3494                           
  3495  0025                     getMain_All_Error_Status@command:	
  3496                           ; 1 bytes @ 0x5
  3497                           
  3498  0025                     ___awdiv@counter:	
  3499                           ; 1 bytes @ 0x5
  3500                           
  3501                           
  3502                           ; 1 bytes @ 0x5
  3503  0025                     	ds	1
  3504  0026                     ??_CC2500_PowerRST:	
  3505  0026                     ??_CC2500_FrequencyCabr:	
  3506                           ; 0 bytes @ 0x6
  3507                           
  3508  0026                     CC2500_InitSetREG@temp1:	
  3509                           ; 0 bytes @ 0x6
  3510                           
  3511  0026                     CC2500_InitPATable@temp:	
  3512                           ; 1 bytes @ 0x6
  3513                           
  3514  0026                     DelayTimejudge@i:	
  3515                           ; 1 bytes @ 0x6
  3516                           
  3517  0026                     setDimmerLights_AdjControl@idle:	
  3518                           ; 1 bytes @ 0x6
  3519                           
  3520  0026                     getLoad_AD@channel:	
  3521                           ; 1 bytes @ 0x6
  3522                           
  3523  0026                     getMain_All_Error_Status@status:	
  3524                           ; 1 bytes @ 0x6
  3525                           
  3526  0026                     ___awdiv@sign:	
  3527                           ; 1 bytes @ 0x6
  3528                           
  3529  0026                     getMain_LightsStatus@i:	
  3530                           ; 1 bytes @ 0x6
  3531                           
  3532                           
  3533                           ; 2 bytes @ 0x6
  3534  0026                     	ds	1
  3535  0027                     CC2500_InitSetREG@temp2:	
  3536  0027                     CC2500_InitPATable@loop_d:	
  3537                           ; 1 bytes @ 0x7
  3538                           
  3539  0027                     DelayTimejudge@j:	
  3540                           ; 1 bytes @ 0x7
  3541                           
  3542  0027                     _setDimmerLights_AdjControl$2583:	
  3543                           ; 1 bytes @ 0x7
  3544                           
  3545  0027                     getLoad_AD@k:	
  3546                           ; 1 bytes @ 0x7
  3547                           
  3548  0027                     ___awdiv@quotient:	
  3549                           ; 1 bytes @ 0x7
  3550                           
  3551                           
  3552                           ; 2 bytes @ 0x7
  3553  0027                     	ds	1
  3554  0028                     ?___awtoft:	
  3555  0028                     CC2500_InitSetREG@loop_c:	
  3556                           ; 3 bytes @ 0x8
  3557                           
  3558  0028                     DelayTimejudge@k:	
  3559                           ; 1 bytes @ 0x8
  3560                           
  3561  0028                     setDimmerLights_AdjControl@sw:	
  3562                           ; 1 bytes @ 0x8
  3563                           
  3564  0028                     getLoad_AD@j:	
  3565                           ; 1 bytes @ 0x8
  3566                           
  3567  0028                     getMain_LightsStatus@status:	
  3568                           ; 1 bytes @ 0x8
  3569                           
  3570  0028                     ___awtoft@c:	
  3571                           ; 1 bytes @ 0x8
  3572                           
  3573                           
  3574                           ; 2 bytes @ 0x8
  3575  0028                     	ds	1
  3576  0029                     ?_setBuz:	
  3577  0029                     ??_CC2500_PowerOnInitial:	
  3578                           ; 0 bytes @ 0x9
  3579                           
  3580  0029                     ??_Flash_Memory_Main:	
  3581                           ; 0 bytes @ 0x9
  3582                           
  3583  0029                     ??_Load_Main:	
  3584                           ; 0 bytes @ 0x9
  3585                           
  3586  0029                     DelayTimejudge@value:	
  3587                           ; 0 bytes @ 0x9
  3588                           
  3589  0029                     getLoad_AD@i:	
  3590                           ; 1 bytes @ 0x9
  3591                           
  3592  0029                     setBuz@time:	
  3593                           ; 1 bytes @ 0x9
  3594                           
  3595                           
  3596                           ; 2 bytes @ 0x9
  3597  0029                     	ds	1
  3598  002A                     ?_setDelayOff_GO:	
  3599  002A                     setDelayOff_GO@command:	
  3600                           ; 0 bytes @ 0xA
  3601                           
  3602                           
  3603                           ; 1 bytes @ 0xA
  3604  002A                     	ds	1
  3605  002B                     ??_setBuz:	
  3606  002B                     ??___awtoft:	
  3607                           ; 0 bytes @ 0xB
  3608                           
  3609  002B                     setDelayOff_GO@value:	
  3610                           ; 0 bytes @ 0xB
  3611                           
  3612  002B                     Load_Main@j:	
  3613                           ; 1 bytes @ 0xB
  3614                           
  3615                           
  3616                           ; 1 bytes @ 0xB
  3617  002B                     	ds	1
  3618  002C                     ??_setDelayOff_GO:	
  3619  002C                     setBuz@count:	
  3620                           ; 0 bytes @ 0xC
  3621                           
  3622  002C                     Load_Main@adjgo:	
  3623                           ; 1 bytes @ 0xC
  3624                           
  3625                           
  3626                           ; 1 bytes @ 0xC
  3627  002C                     	ds	1
  3628  002D                     ??_setTemp_Main:	
  3629  002D                     ??_setLog_Code:	
  3630                           ; 0 bytes @ 0xD
  3631                           
  3632  002D                     ??_my_MainTimer:	
  3633                           ; 0 bytes @ 0xD
  3634                           
  3635  002D                     ??_setDimmerLights_SwOn:	
  3636                           ; 0 bytes @ 0xD
  3637                           
  3638  002D                     _Load_Main$3859:	
  3639                           ; 0 bytes @ 0xD
  3640                           
  3641  002D                     ___awtoft@sign:	
  3642                           ; 1 bytes @ 0xD
  3643                           
  3644                           
  3645                           ; 1 bytes @ 0xD
  3646  002D                     	ds	1
  3647  002E                     ?___ftdiv:	
  3648  002E                     ?___ftmul:	
  3649                           ; 3 bytes @ 0xE
  3650                           
  3651  002E                     setDelayOff_GO@sw:	
  3652                           ; 3 bytes @ 0xE
  3653                           
  3654  002E                     setDimmerLights_SwOn@idle:	
  3655                           ; 1 bytes @ 0xE
  3656                           
  3657  002E                     Load_Main@error:	
  3658                           ; 1 bytes @ 0xE
  3659                           
  3660  002E                     ___ftdiv@f2:	
  3661                           ; 1 bytes @ 0xE
  3662                           
  3663  002E                     ___ftmul@f1:	
  3664                           ; 3 bytes @ 0xE
  3665                           
  3666                           
  3667                           ; 3 bytes @ 0xE
  3668  002E                     	ds	1
  3669  002F                     ??_setDimmerLights_SwOff:	
  3670  002F                     ??_Temp_Main:	
  3671                           ; 0 bytes @ 0xF
  3672                           
  3673  002F                     setDimmerLights_SwOn@sw:	
  3674                           ; 0 bytes @ 0xF
  3675                           
  3676  002F                     setDimmerLights_SwOff@command:	
  3677                           ; 1 bytes @ 0xF
  3678                           
  3679  002F                     Load_Main@i:	
  3680                           ; 1 bytes @ 0xF
  3681                           
  3682                           
  3683                           ; 1 bytes @ 0xF
  3684  002F                     	ds	1
  3685  0030                     setDimmerLights_SwOff@sw:	
  3686                           
  3687                           ; 1 bytes @ 0x10
  3688  0030                     	ds	1
  3689  0031                     ??_setDimmerLights_ErrorClose:	
  3690  0031                     ??_setRFSW_Control:	
  3691                           ; 0 bytes @ 0x11
  3692                           
  3693  0031                     ??_setSw_Main:	
  3694                           ; 0 bytes @ 0x11
  3695                           
  3696  0031                     ___ftdiv@f1:	
  3697                           ; 0 bytes @ 0x11
  3698                           
  3699  0031                     ___ftmul@f2:	
  3700                           ; 3 bytes @ 0x11
  3701                           
  3702                           
  3703                           ; 3 bytes @ 0x11
  3704  0031                     	ds	1
  3705  0032                     setDimmerLights_ErrorClose@count:	
  3706  0032                     setRFSW_Control@status:	
  3707                           ; 1 bytes @ 0x12
  3708                           
  3709                           
  3710                           ; 1 bytes @ 0x12
  3711  0032                     	ds	1
  3712  0033                     setDimmerLights_ErrorClose@lights:	
  3713  0033                     setRFSW_Control@sw:	
  3714                           ; 1 bytes @ 0x13
  3715                           
  3716  0033                     setSw_Main@sw:	
  3717                           ; 1 bytes @ 0x13
  3718                           
  3719                           
  3720                           ; 1 bytes @ 0x13
  3721  0033                     	ds	1
  3722  0034                     ??___ftdiv:	
  3723  0034                     ??___ftmul:	
  3724                           ; 0 bytes @ 0x14
  3725                           
  3726  0034                     setDimmerLights_ErrorClose@i:	
  3727                           ; 0 bytes @ 0x14
  3728                           
  3729                           
  3730                           ; 2 bytes @ 0x14
  3731  0034                     	ds	2
  3732  0036                     ??_DlyOff_Main:	
  3733  0036                     ??_setMain_Exception:	
  3734                           ; 0 bytes @ 0x16
  3735                           
  3736                           
  3737                           ; 0 bytes @ 0x16
  3738  0036                     	ds	2
  3739  0038                     DlyOff_Main@sw:	
  3740  0038                     setMain_Exception@buz:	
  3741                           ; 1 bytes @ 0x18
  3742                           
  3743  0038                     ___ftdiv@cntr:	
  3744                           ; 1 bytes @ 0x18
  3745                           
  3746  0038                     ___ftmul@exp:	
  3747                           ; 1 bytes @ 0x18
  3748                           
  3749                           
  3750                           ; 1 bytes @ 0x18
  3751  0038                     	ds	1
  3752  0039                     ??_DelayOff_Main:	
  3753  0039                     _setMain_Exception$7083:	
  3754                           ; 0 bytes @ 0x19
  3755                           
  3756  0039                     ___ftdiv@f3:	
  3757                           ; 2 bytes @ 0x19
  3758                           
  3759  0039                     ___ftmul@f3_as_product:	
  3760                           ; 3 bytes @ 0x19
  3761                           
  3762                           
  3763                           ; 3 bytes @ 0x19
  3764  0039                     	ds	2
  3765  003B                     setMain_Exception@status:	
  3766                           
  3767                           ; 1 bytes @ 0x1B
  3768  003B                     	ds	1
  3769  003C                     setMain_Exception@command:	
  3770  003C                     ___ftdiv@exp:	
  3771                           ; 1 bytes @ 0x1C
  3772                           
  3773  003C                     ___ftmul@cntr:	
  3774                           ; 1 bytes @ 0x1C
  3775                           
  3776                           
  3777                           ; 1 bytes @ 0x1C
  3778  003C                     	ds	1
  3779  003D                     ??_Switch_Main:	
  3780  003D                     ___ftdiv@sign:	
  3781                           ; 0 bytes @ 0x1D
  3782                           
  3783  003D                     ___ftmul@sign:	
  3784                           ; 1 bytes @ 0x1D
  3785                           
  3786                           
  3787                           ; 1 bytes @ 0x1D
  3788  003D                     	ds	1
  3789  003E                     ?___ftneg:	
  3790  003E                     Switch_Main@error:	
  3791                           ; 3 bytes @ 0x1E
  3792                           
  3793  003E                     ___ftneg@f1:	
  3794                           ; 1 bytes @ 0x1E
  3795                           
  3796                           
  3797                           ; 3 bytes @ 0x1E
  3798  003E                     	ds	3
  3799  0041                     ??___ftneg:	
  3800  0041                     ?___ftadd:	
  3801                           ; 0 bytes @ 0x21
  3802                           
  3803  0041                     ___ftadd@f1:	
  3804                           ; 3 bytes @ 0x21
  3805                           
  3806                           
  3807                           ; 3 bytes @ 0x21
  3808  0041                     	ds	3
  3809  0044                     ___ftadd@f2:	
  3810                           
  3811                           ; 3 bytes @ 0x24
  3812  0044                     	ds	3
  3813  0047                     ??___ftadd:	
  3814                           
  3815                           ; 0 bytes @ 0x27
  3816  0047                     	ds	4
  3817  004B                     ___ftadd@sign:	
  3818                           
  3819                           ; 1 bytes @ 0x2B
  3820  004B                     	ds	1
  3821  004C                     ___ftadd@exp2:	
  3822                           
  3823                           ; 1 bytes @ 0x2C
  3824  004C                     	ds	1
  3825  004D                     ___ftadd@exp1:	
  3826                           
  3827                           ; 1 bytes @ 0x2D
  3828  004D                     	ds	1
  3829  004E                     ?___fttol:	
  3830  004E                     ___fttol@f1:	
  3831                           ; 4 bytes @ 0x2E
  3832                           
  3833                           
  3834                           ; 3 bytes @ 0x2E
  3835  004E                     	ds	4
  3836  0052                     ??___fttol:	
  3837                           
  3838                           ; 0 bytes @ 0x32
  3839  0052                     	ds	4
  3840  0056                     ___fttol@sign1:	
  3841                           
  3842                           ; 1 bytes @ 0x36
  3843  0056                     	ds	1
  3844  0057                     ___fttol@lval:	
  3845                           
  3846                           ; 4 bytes @ 0x37
  3847  0057                     	ds	4
  3848  005B                     ___fttol@exp1:	
  3849                           
  3850                           ; 1 bytes @ 0x3B
  3851  005B                     	ds	1
  3852  005C                     ??_setPercentValue:	
  3853  005C                     ??_getPercentValue:	
  3854                           ; 0 bytes @ 0x3C
  3855                           
  3856                           
  3857                           ; 0 bytes @ 0x3C
  3858  005C                     	ds	2
  3859  005E                     getPercentValue@value:	
  3860  005E                     setPercentValue@value:	
  3861                           ; 1 bytes @ 0x3E
  3862                           
  3863                           
  3864                           ; 1 bytes @ 0x3E
  3865  005E                     	ds	1
  3866  005F                     getPercentValue@i:	
  3867  005F                     setPercentValue@i:	
  3868                           ; 3 bytes @ 0x3F
  3869                           
  3870                           
  3871                           ; 3 bytes @ 0x3F
  3872  005F                     	ds	3
  3873  0062                     ?_setDimmerLights:	
  3874  0062                     ?_setDimmerLights_Adj:	
  3875                           ; 0 bytes @ 0x42
  3876                           
  3877  0062                     ??_setDimmerLights_AdjRF:	
  3878                           ; 0 bytes @ 0x42
  3879                           
  3880  0062                     ??_Flash_Memory_Initialization:	
  3881                           ; 0 bytes @ 0x42
  3882                           
  3883  0062                     setDimmerLights@status:	
  3884                           ; 0 bytes @ 0x42
  3885                           
  3886  0062                     setDimmerLights_Adj@status:	
  3887                           ; 1 bytes @ 0x42
  3888                           
  3889                           
  3890                           ; 1 bytes @ 0x42
  3891  0062                     	ds	1
  3892  0063                     ??_setDimmerLights:	
  3893  0063                     ??_setDimmerLights_Adj:	
  3894                           ; 0 bytes @ 0x43
  3895                           
  3896  0063                     setDimmerLights_AdjRF@lights:	
  3897                           ; 0 bytes @ 0x43
  3898                           
  3899  0063                     Flash_Memory_Initialization@i:	
  3900                           ; 1 bytes @ 0x43
  3901                           
  3902                           
  3903                           ; 1 bytes @ 0x43
  3904  0063                     	ds	1
  3905  0064                     ??_setRF_DimmerValue:	
  3906                           
  3907                           ; 0 bytes @ 0x44
  3908  0064                     	ds	1
  3909  0065                     setDimmerLights@lights:	
  3910  0065                     setDimmerLights_Adj@lights:	
  3911                           ; 1 bytes @ 0x45
  3912                           
  3913                           
  3914                           ; 1 bytes @ 0x45
  3915  0065                     	ds	1
  3916  0066                     ??_setDimmerLights_Main:	
  3917  0066                     setDimmerLights_Main@lights:	
  3918                           ; 0 bytes @ 0x46
  3919                           
  3920  0066                     setRF_DimmerValue@lights:	
  3921                           ; 1 bytes @ 0x46
  3922                           
  3923                           
  3924                           ; 1 bytes @ 0x46
  3925  0066                     	ds	1
  3926  0067                     ??_setRFSW_AdjControl:	
  3927  0067                     ??_DimmerLights_Main:	
  3928                           ; 0 bytes @ 0x47
  3929                           
  3930                           
  3931                           ; 0 bytes @ 0x47
  3932  0067                     	ds	2
  3933  0069                     setRFSW_AdjControl@status:	
  3934  0069                     _DimmerLights_Main$2500:	
  3935                           ; 1 bytes @ 0x49
  3936                           
  3937                           
  3938                           ; 2 bytes @ 0x49
  3939  0069                     	ds	1
  3940  006A                     setRFSW_AdjControl@sw:	
  3941                           
  3942                           ; 1 bytes @ 0x4A
  3943  006A                     	ds	1
  3944  006B                     ??_getRxData:	
  3945  006B                     ??_setControl_Lights_Table:	
  3946                           ; 0 bytes @ 0x4B
  3947                           
  3948                           
  3949                           ; 0 bytes @ 0x4B
  3950  006B                     	ds	1
  3951  006C                     getRxData@error:	
  3952                           
  3953                           ; 1 bytes @ 0x4C
  3954  006C                     	ds	1
  3955  006D                     ??_setRF_Main:	
  3956                           
  3957                           ; 0 bytes @ 0x4D
  3958  006D                     	ds	1
  3959  006E                     ??_RF_Main:	
  3960  006E                     ??_main:	
  3961                           ; 0 bytes @ 0x4E
  3962                           
  3963                           
  3964                           	psect	maintext
  3965  15E1                     __pmaintext:	
  3966                           ; 0 bytes @ 0x4E
  3967 ;;
  3968 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3969 ;;
  3970 ;; *************** function _main *****************
  3971 ;; Defined at:
  3972 ;;		line 7 in file "../src/main_B1.c"
  3973 ;; Parameters:    Size  Location     Type
  3974 ;;  argc            2    3[BANK1 ] int 
  3975 ;;  argv            2    5[BANK1 ] PTR PTR unsigned char 
  3976 ;; Auto vars:     Size  Location     Type
  3977 ;;		None
  3978 ;; Return value:  Size  Location     Type
  3979 ;;                  2    3[BANK1 ] int 
  3980 ;; Registers used:
  3981 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3982 ;; Tracked objects:
  3983 ;;		On entry : 17F/0
  3984 ;;		On exit  : 0/0
  3985 ;;		Unchanged: 0/0
  3986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3987 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3990 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3991 ;;Total ram usage:        4 bytes
  3992 ;; Hardware stack levels required when called:   15
  3993 ;; This function calls:
  3994 ;;		_Buzzer_Initialization
  3995 ;;		_Buzzer_Main
  3996 ;;		_CC2500_PowerOnInitial
  3997 ;;		_DelayOff_Initialization
  3998 ;;		_DelayOff_Main
  3999 ;;		_DimmerLights_Initialization
  4000 ;;		_DimmerLights_Main
  4001 ;;		_Flash_Memory_Initialization
  4002 ;;		_Flash_Memory_Main
  4003 ;;		_LED_Initialization
  4004 ;;		_LED_Main
  4005 ;;		_Load_Initialization
  4006 ;;		_Load_Main
  4007 ;;		_Mcu_Initialization
  4008 ;;		_RF_Initialization
  4009 ;;		_RF_Main
  4010 ;;		_Switch_Initialization
  4011 ;;		_Switch_Main
  4012 ;;		_Temp_Initialization
  4013 ;;		_Temp_Main
  4014 ;;		_WDT_Main
  4015 ;;		_getLoad_AD
  4016 ;;		_getTemp_AD
  4017 ;;		_myMain_Initialization
  4018 ;;		_my_MainTimer
  4019 ;; This function is called by:
  4020 ;;		Startup code after reset
  4021 ;; This function uses a non-reentrant model
  4022 ;;
  4023                           
  4024                           
  4025                           ;psect for function _main
  4026  15E1                     _main:	
  4027                           
  4028                           ;main_B1.c: 8: myMain_Initialization();
  4029                           
  4030                           ;incstack = 0
  4031                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4032  15E1  319C  2436  3195   	fcall	_myMain_Initialization
  4033                           
  4034                           ;main_B1.c: 9: Mcu_Initialization();
  4035  15E4  319C  24CD  3195   	fcall	_Mcu_Initialization
  4036                           
  4037                           ;main_B1.c: 10: Flash_Memory_Initialization();
  4038  15E7  3186  2617  3195   	fcall	_Flash_Memory_Initialization
  4039                           
  4040                           ;main_B1.c: 11: LED_Initialization();
  4041  15EA  319B  23DC  3195   	fcall	_LED_Initialization
  4042                           
  4043                           ;main_B1.c: 12: Buzzer_Initialization();
  4044  15ED  319B  2324  3195   	fcall	_Buzzer_Initialization
  4045                           
  4046                           ;main_B1.c: 14: ;;
  4047                           ;main_B1.c: 15: Temp_Initialization();
  4048  15F0  319B  232D  3195   	fcall	_Temp_Initialization
  4049                           
  4050                           ;main_B1.c: 16: Load_Initialization();
  4051  15F3  319B  2348  3195   	fcall	_Load_Initialization
  4052                           
  4053                           ;main_B1.c: 17: ;;
  4054                           ;main_B1.c: 18: DelayOff_Initialization();
  4055  15F6  319B  2368  3195   	fcall	_DelayOff_Initialization
  4056                           
  4057                           ;main_B1.c: 20: DimmerLights_Initialization();
  4058  15F9  319E  260B  3195   	fcall	_DimmerLights_Initialization
  4059                           
  4060                           ;main_B1.c: 21: ;;
  4061                           ;main_B1.c: 22: ;;
  4062                           ;main_B1.c: 23: ;;
  4063                           ;main_B1.c: 24: Switch_Initialization();
  4064  15FC  319C  240C  3195   	fcall	_Switch_Initialization
  4065                           
  4066                           ;main_B1.c: 25: RF_Initialization();
  4067  15FF  319B  2327  3195   	fcall	_RF_Initialization
  4068                           
  4069                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  4070  1602  319D  25B6  3195   	fcall	_CC2500_PowerOnInitial
  4071  1605                     l8394:	
  4072                           ;main_B1.c: 27: ;;
  4073                           ;main_B1.c: 28: ;;
  4074                           ;main_B1.c: 30: while (1) {
  4075                           
  4076                           
  4077                           ;main_B1.c: 32: if (myMain.PowerON == 1) {
  4078  1605  0021               	movlb	1	; select bank1
  4079  1606  1C20               	btfss	_myMain^(0+128),0
  4080  1607  2E10               	goto	l8398
  4081                           
  4082                           ;main_B1.c: 38: getLoad_AD(0x05);
  4083  1608  3005               	movlw	5
  4084  1609  318B  23DD  3195   	fcall	_getLoad_AD
  4085                           
  4086                           ;main_B1.c: 42: getTemp_AD(0x09);
  4087  160C  3009               	movlw	9
  4088  160D  3193  2326  3195   	fcall	_getTemp_AD
  4089  1610                     l8398:	
  4090                           
  4091                           ;main_B1.c: 57: }
  4092                           ;main_B1.c: 93: if (Timer1.Timeout == 1) {
  4093  1610  0021               	movlb	1	; select bank1
  4094  1611  1C47               	btfss	_Timer1^(0+128),0
  4095  1612  2E05               	goto	l8394
  4096                           
  4097                           ;main_B1.c: 94: Timer1.Timeout = 0;
  4098  1613  1047               	bcf	_Timer1^(0+128),0
  4099                           
  4100                           ;main_B1.c: 95: my_MainTimer();
  4101  1614  3189  2179  3195   	fcall	_my_MainTimer
  4102                           
  4103                           ;main_B1.c: 96: WDT_Main();
  4104  1617  319C  24DF  3195   	fcall	_WDT_Main
  4105                           
  4106                           ;main_B1.c: 97: ;;
  4107                           ;main_B1.c: 98: ;;
  4108                           ;main_B1.c: 99: if (myMain.PowerON == 1) {
  4109  161A  0021               	movlb	1	; select bank1
  4110  161B  1C20               	btfss	_myMain^(0+128),0
  4111  161C  2E05               	goto	l8394
  4112                           
  4113                           ;main_B1.c: 100: Flash_Memory_Main();
  4114  161D  3192  2283  3195   	fcall	_Flash_Memory_Main
  4115                           
  4116                           ;main_B1.c: 102: LED_Main();
  4117  1620  319B  23E8  3195   	fcall	_LED_Main
  4118                           
  4119                           ;main_B1.c: 103: Buzzer_Main();
  4120  1623  3194  24A4  3195   	fcall	_Buzzer_Main
  4121                           
  4122                           ;main_B1.c: 105: ;;
  4123                           ;main_B1.c: 106: Temp_Main();
  4124  1626  319B  2330  3195   	fcall	_Temp_Main
  4125                           
  4126                           ;main_B1.c: 107: Load_Main();
  4127  1629  3181  21BA  3195   	fcall	_Load_Main
  4128                           
  4129                           ;main_B1.c: 108: ;;
  4130                           ;main_B1.c: 110: ;;
  4131                           ;main_B1.c: 111: DimmerLights_Main();
  4132  162C  3192  221A  3195   	fcall	_DimmerLights_Main
  4133                           
  4134                           ;main_B1.c: 112: Switch_Main();
  4135  162F  3190  206C  3195   	fcall	_Switch_Main
  4136                           
  4137                           ;main_B1.c: 113: ;;
  4138                           ;main_B1.c: 114: ;;
  4139                           ;main_B1.c: 116: RF_Main();
  4140  1632  319B  232A  3195   	fcall	_RF_Main
  4141                           
  4142                           ;main_B1.c: 117: DelayOff_Main();
  4143  1635  319B  2370  3195   	fcall	_DelayOff_Main
  4144                           
  4145                           ;main_B1.c: 118: ;;
  4146                           ;main_B1.c: 119: ;;
  4147  1638  2E05               	goto	l8394
  4148  1639                     __end_of_main:	
  4149                           ;main_B1.c: 126: }
  4150                           ;main_B1.c: 127: }
  4151                           ;main_B1.c: 161: }
  4152                           ;main_B1.c: 162: return (0);
  4153                           ;	Return value of _main is never used
  4154                           
  4155                           
  4156                           	psect	text1
  4157  0979                     __ptext1:	
  4158 ;; *************** function _my_MainTimer *****************
  4159 ;; Defined at:
  4160 ;;		line 181 in file "../src/main_B1.c"
  4161 ;; Parameters:    Size  Location     Type
  4162 ;;		None
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;		None
  4165 ;; Return value:  Size  Location     Type
  4166 ;;		None               void
  4167 ;; Registers used:
  4168 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4178 ;;Total ram usage:        0 bytes
  4179 ;; Hardware stack levels used:    1
  4180 ;; Hardware stack levels required when called:    7
  4181 ;; This function calls:
  4182 ;;		_setBuz
  4183 ;; This function is called by:
  4184 ;;		_main
  4185 ;; This function uses a non-reentrant model
  4186 ;;
  4187                           
  4188                           
  4189                           ;psect for function _my_MainTimer
  4190  0979                     _my_MainTimer:	
  4191                           
  4192                           ;main_B1.c: 183: if (myMain.PowerON == 0) {
  4193                           
  4194                           ;incstack = 0
  4195                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4196  0979  0021               	movlb	1	; select bank1
  4197  097A  1820               	btfsc	_myMain^(0+128),0
  4198  097B  299B               	goto	l8248
  4199                           
  4200                           ;main_B1.c: 184: myMain.PowerCount++;
  4201  097C  3001               	movlw	1
  4202  097D  07A1               	addwf	(_myMain^(0+128)+1),f
  4203  097E  3000               	movlw	0
  4204  097F  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4205                           
  4206                           ;main_B1.c: 185: if (myMain.PowerCount == 150)
  4207  0980  3001               	movlw	1
  4208  0981  3EA0               	addlw	_myMain& (0+255)
  4209  0982  0086               	movwf	6
  4210  0983  0187               	clrf	7
  4211  0984  3F40               	moviw [0]fsr1
  4212  0985  3A96               	xorlw	150
  4213  0986  1D03               	skipz
  4214  0987  298A               	goto	u8325
  4215  0988  3F41               	moviw [1]fsr1
  4216  0989  3A00               	xorlw	0
  4217  098A                     u8325:	
  4218  098A  1D03               	skipz
  4219  098B  29C8               	goto	l8266
  4220                           
  4221                           ;main_B1.c: 186: {
  4222                           ;main_B1.c: 187: myMain.PowerCount = 0;
  4223  098C  01A1               	clrf	(_myMain^(0+128)+1)
  4224  098D  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4225                           
  4226                           ;main_B1.c: 188: myMain.PowerON = 1;
  4227  098E  1420               	bsf	_myMain^(0+128),0
  4228                           
  4229                           ;main_B1.c: 194: setBuz(3, 50);
  4230  098F  3032               	movlw	50
  4231  0990  0020               	movlb	0	; select bank0
  4232  0991  00A9               	movwf	setBuz@time
  4233  0992  3000               	movlw	0
  4234  0993  00AA               	movwf	setBuz@time+1
  4235  0994  3003               	movlw	3
  4236  0995  3196  2639  3189   	fcall	_setBuz
  4237                           
  4238                           ;main_B1.c: 195: myMain.SelfTest = 1;
  4239  0998  0021               	movlb	1	; select bank1
  4240  0999  1620               	bsf	_myMain^(0+128),4
  4241                           
  4242                           ;main_B1.c: 204: }
  4243                           ;main_B1.c: 205: } else {
  4244  099A  29C8               	goto	l8266
  4245  099B                     l8248:	
  4246                           
  4247                           ;main_B1.c: 207: myMain.PowerCount++;
  4248  099B  3001               	movlw	1
  4249  099C  07A1               	addwf	(_myMain^(0+128)+1),f
  4250  099D  3000               	movlw	0
  4251  099E  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4252                           
  4253                           ;main_B1.c: 208: if (myMain.PowerCount == 100) {
  4254  099F  3001               	movlw	1
  4255  09A0  3EA0               	addlw	_myMain& (0+255)
  4256  09A1  0086               	movwf	6
  4257  09A2  0187               	clrf	7
  4258  09A3  3F40               	moviw [0]fsr1
  4259  09A4  3A64               	xorlw	100
  4260  09A5  1D03               	skipz
  4261  09A6  29A9               	goto	u8335
  4262  09A7  3F41               	moviw [1]fsr1
  4263  09A8  3A00               	xorlw	0
  4264  09A9                     u8335:	
  4265  09A9  1D03               	skipz
  4266  09AA  29B0               	goto	l8256
  4267                           
  4268                           ;main_B1.c: 209: myMain.PowerCount = 0;
  4269  09AB  01A1               	clrf	(_myMain^(0+128)+1)
  4270  09AC  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4271                           
  4272                           ;main_B1.c: 210: RB5 = RB5 == 1 ? 0 : 1;
  4273  09AD  3020               	movlw	32
  4274  09AE  0020               	movlb	0	; select bank0
  4275  09AF  068D               	xorwf	13,f
  4276  09B0                     l8256:	
  4277                           
  4278                           ;main_B1.c: 214: }
  4279                           ;main_B1.c: 222: myMain.Count1++;
  4280  09B0  3001               	movlw	1
  4281  09B1  0021               	movlb	1	; select bank1
  4282  09B2  07A5               	addwf	(_myMain^(0+128)+5),f
  4283  09B3  3000               	movlw	0
  4284  09B4  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  4285                           
  4286                           ;main_B1.c: 223: if (myMain.Count1 == 100)
  4287  09B5  3005               	movlw	5
  4288  09B6  3EA0               	addlw	_myMain& (0+255)
  4289  09B7  0086               	movwf	6
  4290  09B8  0187               	clrf	7
  4291  09B9  3F40               	moviw [0]fsr1
  4292  09BA  3A64               	xorlw	100
  4293  09BB  1D03               	skipz
  4294  09BC  29BF               	goto	u8345
  4295  09BD  3F41               	moviw [1]fsr1
  4296  09BE  3A00               	xorlw	0
  4297  09BF                     u8345:	
  4298  09BF  1D03               	skipz
  4299  09C0  29C8               	goto	l8266
  4300                           
  4301                           ;main_B1.c: 224: {
  4302                           ;main_B1.c: 225: myMain.Count1 = 0;
  4303  09C1  01A5               	clrf	(_myMain^(0+128)+5)
  4304  09C2  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4305                           
  4306                           ;main_B1.c: 237: if (myMain.Flag) {
  4307  09C3  1CA0               	btfss	_myMain^(0+128),1
  4308  09C4  29C7               	goto	l2683
  4309                           
  4310                           ;main_B1.c: 238: myMain.Flag = 0;
  4311  09C5  10A0               	bcf	_myMain^(0+128),1
  4312                           
  4313                           ;main_B1.c: 247: } else {
  4314  09C6  29C8               	goto	l8266
  4315  09C7                     l2683:	
  4316                           
  4317                           ;main_B1.c: 248: myMain.Flag = 1;
  4318  09C7  14A0               	bsf	_myMain^(0+128),1
  4319  09C8                     l8266:	
  4320                           
  4321                           ;main_B1.c: 257: }
  4322                           ;main_B1.c: 258: }
  4323                           ;main_B1.c: 260: }
  4324                           ;main_B1.c: 262: myMain.Count2++;
  4325  09C8  3001               	movlw	1
  4326  09C9  07A7               	addwf	(_myMain^(0+128)+7),f
  4327  09CA  3000               	movlw	0
  4328  09CB  3DA8               	addwfc	((_myMain+1)^(0+128)+7),f
  4329                           
  4330                           ;main_B1.c: 263: if (myMain.Count2 == 100) {
  4331  09CC  3007               	movlw	7
  4332  09CD  3EA0               	addlw	_myMain& (0+255)
  4333  09CE  0086               	movwf	6
  4334  09CF  0187               	clrf	7
  4335  09D0  3F40               	moviw [0]fsr1
  4336  09D1  3A64               	xorlw	100
  4337  09D2  1D03               	skipz
  4338  09D3  29D6               	goto	u8365
  4339  09D4  3F41               	moviw [1]fsr1
  4340  09D5  3A00               	xorlw	0
  4341  09D6                     u8365:	
  4342  09D6  1D03               	skipz
  4343  09D7  0008               	return
  4344                           
  4345                           ;main_B1.c: 264: myMain.Count2 = 0;
  4346  09D8  01A7               	clrf	(_myMain^(0+128)+7)
  4347  09D9  01A8               	clrf	((_myMain+1)^(0+128)+7)
  4348  09DA  0008               	return
  4349  09DB                     __end_of_my_MainTimer:	
  4350                           
  4351                           	psect	text2
  4352  1C36                     __ptext2:	
  4353 ;; *************** function _myMain_Initialization *****************
  4354 ;; Defined at:
  4355 ;;		line 168 in file "../src/main_B1.c"
  4356 ;; Parameters:    Size  Location     Type
  4357 ;;		None
  4358 ;; Auto vars:     Size  Location     Type
  4359 ;;		None
  4360 ;; Return value:  Size  Location     Type
  4361 ;;		None               void
  4362 ;; Registers used:
  4363 ;;		wreg, fsr1l, fsr1h
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4373 ;;Total ram usage:        1 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    5
  4376 ;; This function calls:
  4377 ;;		Nothing
  4378 ;; This function is called by:
  4379 ;;		_main
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           
  4384                           ;psect for function _myMain_Initialization
  4385  1C36                     _myMain_Initialization:	
  4386                           
  4387                           ;main_B1.c: 170: product = &_product;
  4388                           
  4389                           ;incstack = 0
  4390                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4391  1C36  3045               	movlw	__product& (0+255)
  4392  1C37  0020               	movlb	0	; select bank0
  4393  1C38  00A0               	movwf	??_myMain_Initialization
  4394  1C39  0820               	movf	??_myMain_Initialization,w
  4395  1C3A  00EE               	movwf	_product
  4396                           
  4397                           ;main_B1.c: 171: product->Data[20] = 210;
  4398  1C3B  30D2               	movlw	210
  4399  1C3C  00A0               	movwf	??_myMain_Initialization
  4400  1C3D  086E               	movf	_product,w
  4401  1C3E  3E14               	addlw	20
  4402  1C3F  0086               	movwf	6
  4403  1C40  3002               	movlw	2	; select bank4/5
  4404  1C41  0087               	movwf	7
  4405  1C42  0820               	movf	??_myMain_Initialization,w
  4406  1C43  0081               	movwf	1
  4407  1C44  0008               	return
  4408  1C45                     __end_of_myMain_Initialization:	
  4409                           
  4410                           	psect	text3
  4411  1326                     __ptext3:	
  4412 ;; *************** function _getTemp_AD *****************
  4413 ;; Defined at:
  4414 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4415 ;; Parameters:    Size  Location     Type
  4416 ;;  channel         1    wreg     unsigned char 
  4417 ;; Auto vars:     Size  Location     Type
  4418 ;;  channel         1    5[BANK0 ] unsigned char 
  4419 ;; Return value:  Size  Location     Type
  4420 ;;		None               void
  4421 ;; Registers used:
  4422 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4423 ;; Tracked objects:
  4424 ;;		On entry : 0/0
  4425 ;;		On exit  : 0/0
  4426 ;;		Unchanged: 0/0
  4427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4429 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4430 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4431 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4432 ;;Total ram usage:        2 bytes
  4433 ;; Hardware stack levels used:    1
  4434 ;; Hardware stack levels required when called:    7
  4435 ;; This function calls:
  4436 ;;		_getAD
  4437 ;; This function is called by:
  4438 ;;		_main
  4439 ;; This function uses a non-reentrant model
  4440 ;;
  4441                           
  4442                           
  4443                           ;psect for function _getTemp_AD
  4444  1326                     _getTemp_AD:	
  4445                           
  4446                           ;incstack = 0
  4447                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4448                           ;getTemp_AD@channel stored from wreg
  4449  1326  0020               	movlb	0	; select bank0
  4450  1327  00A5               	movwf	getTemp_AD@channel
  4451                           
  4452                           ;OverTemperature_B1.c: 32: if (Temp.ADtoGO == 1) {
  4453  1328  0021               	movlb	1	; select bank1
  4454  1329  1D57               	btfss	_Temp^(0+128),2
  4455  132A  0008               	return
  4456                           
  4457                           ;OverTemperature_B1.c: 33: Temp.GO = 1;
  4458  132B  1657               	bsf	_Temp^(0+128),4
  4459                           
  4460                           ;OverTemperature_B1.c: 34: Temp.ADRES = getAD(channel, 0xf0);
  4461  132C  30F0               	movlw	240
  4462  132D  0020               	movlb	0	; select bank0
  4463  132E  00A4               	movwf	??_getTemp_AD
  4464  132F  0824               	movf	??_getTemp_AD,w
  4465  1330  00A0               	movwf	getAD@adcon1
  4466  1331  0825               	movf	getTemp_AD@channel,w
  4467  1332  319F  2738  3193   	fcall	_getAD
  4468  1335  0020               	movlb	0	; select bank0
  4469  1336  0821               	movf	?_getAD+1,w
  4470  1337  0021               	movlb	1	; select bank1
  4471  1338  01E4               	clrf	((_Temp+1)^(0+128)+12)
  4472  1339  07E4               	addwf	((_Temp+1)^(0+128)+12),f
  4473  133A  0020               	movlb	0	; select bank0
  4474  133B  0820               	movf	?_getAD,w
  4475  133C  0021               	movlb	1	; select bank1
  4476  133D  01E3               	clrf	(_Temp^(0+128)+12)
  4477  133E  07E3               	addwf	(_Temp^(0+128)+12),f
  4478                           
  4479                           ;OverTemperature_B1.c: 35: if (Temp.ADH[0] < Temp.ADRES) {
  4480  133F  0864               	movf	((_Temp+1)^(0+128)+12),w
  4481  1340  0260               	subwf	((_Temp+1)^(0+128)+8),w
  4482  1341  1D03               	skipz
  4483  1342  2B45               	goto	u8265
  4484  1343  0863               	movf	(_Temp^(0+128)+12),w
  4485  1344  025F               	subwf	(_Temp^(0+128)+8),w
  4486  1345                     u8265:	
  4487  1345  1803               	skipnc
  4488  1346  2B4E               	goto	l8196
  4489                           
  4490                           ;OverTemperature_B1.c: 36: Temp.ADH[0] = Temp.ADRES;
  4491  1347  0864               	movf	((_Temp+1)^(0+128)+12),w
  4492  1348  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4493  1349  07E0               	addwf	((_Temp+1)^(0+128)+8),f
  4494  134A  0863               	movf	(_Temp^(0+128)+12),w
  4495  134B  01DF               	clrf	(_Temp^(0+128)+8)
  4496  134C  07DF               	addwf	(_Temp^(0+128)+8),f
  4497                           
  4498                           ;OverTemperature_B1.c: 37: } else if (Temp.ADH[1] < Temp.ADRES) {
  4499  134D  0008               	return
  4500  134E                     l8196:	
  4501  134E  0864               	movf	((_Temp+1)^(0+128)+12),w
  4502  134F  0262               	subwf	((_Temp+1)^(0+128)+10),w
  4503  1350  1D03               	skipz
  4504  1351  2B54               	goto	u8275
  4505  1352  0863               	movf	(_Temp^(0+128)+12),w
  4506  1353  0261               	subwf	(_Temp^(0+128)+10),w
  4507  1354                     u8275:	
  4508  1354  1803               	skipnc
  4509  1355  0008               	return
  4510                           
  4511                           ;OverTemperature_B1.c: 38: Temp.ADH[1] = Temp.ADRES;
  4512  1356  0864               	movf	((_Temp+1)^(0+128)+12),w
  4513  1357  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4514  1358  07E2               	addwf	((_Temp+1)^(0+128)+10),f
  4515  1359  0863               	movf	(_Temp^(0+128)+12),w
  4516  135A  01E1               	clrf	(_Temp^(0+128)+10)
  4517  135B  07E1               	addwf	(_Temp^(0+128)+10),f
  4518  135C  0008               	return
  4519  135D                     __end_of_getTemp_AD:	
  4520                           
  4521                           	psect	text4
  4522  0BDD                     __ptext4:	
  4523 ;; *************** function _getLoad_AD *****************
  4524 ;; Defined at:
  4525 ;;		line 15 in file "../src/OverLoad_B1.c"
  4526 ;; Parameters:    Size  Location     Type
  4527 ;;  channel         1    wreg     unsigned char 
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;  channel         1    6[BANK0 ] unsigned char 
  4530 ;;  i               1    9[BANK0 ] unsigned char 
  4531 ;;  j               1    8[BANK0 ] unsigned char 
  4532 ;;  k               1    7[BANK0 ] unsigned char 
  4533 ;; Return value:  Size  Location     Type
  4534 ;;		None               void
  4535 ;; Registers used:
  4536 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4537 ;; Tracked objects:
  4538 ;;		On entry : 0/0
  4539 ;;		On exit  : 0/0
  4540 ;;		Unchanged: 0/0
  4541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4543 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4544 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4545 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4546 ;;Total ram usage:        6 bytes
  4547 ;; Hardware stack levels used:    1
  4548 ;; Hardware stack levels required when called:    7
  4549 ;; This function calls:
  4550 ;;		_getAD
  4551 ;; This function is called by:
  4552 ;;		_main
  4553 ;; This function uses a non-reentrant model
  4554 ;;
  4555                           
  4556                           
  4557                           ;psect for function _getLoad_AD
  4558  0BDD                     _getLoad_AD:	
  4559                           
  4560                           ;incstack = 0
  4561                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4562                           ;getLoad_AD@channel stored from wreg
  4563  0BDD  0020               	movlb	0	; select bank0
  4564  0BDE  00A6               	movwf	getLoad_AD@channel
  4565                           
  4566                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4567  0BDF  01A9               	clrf	getLoad_AD@i
  4568  0BE0  01A8               	clrf	getLoad_AD@j
  4569  0BE1  01A7               	clrf	getLoad_AD@k
  4570                           
  4571                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4572  0BE2  0022               	movlb	2	; select bank2
  4573  0BE3  1E43               	btfss	_Load^(0+256),4
  4574  0BE4  0008               	return
  4575                           
  4576                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4577  0BE5  30F3               	movlw	243
  4578  0BE6  0020               	movlb	0	; select bank0
  4579  0BE7  00A4               	movwf	??_getLoad_AD
  4580  0BE8  0824               	movf	??_getLoad_AD,w
  4581  0BE9  00A0               	movwf	getAD@adcon1
  4582  0BEA  0826               	movf	getLoad_AD@channel,w
  4583  0BEB  319F  2738  318B   	fcall	_getAD
  4584  0BEE  0020               	movlb	0	; select bank0
  4585  0BEF  0821               	movf	?_getAD+1,w
  4586  0BF0  0022               	movlb	2	; select bank2
  4587  0BF1  01E5               	clrf	((_Load+1)^(0+256)+33)
  4588  0BF2  07E5               	addwf	((_Load+1)^(0+256)+33),f
  4589  0BF3  0020               	movlb	0	; select bank0
  4590  0BF4  0820               	movf	?_getAD,w
  4591  0BF5  0022               	movlb	2	; select bank2
  4592  0BF6  01E4               	clrf	(_Load^(0+256)+33)
  4593  0BF7  07E4               	addwf	(_Load^(0+256)+33),f
  4594                           
  4595                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4596  0BF8  0020               	movlb	0	; select bank0
  4597  0BF9  01A9               	clrf	getLoad_AD@i
  4598  0BFA  3004               	movlw	4
  4599  0BFB  0229               	subwf	getLoad_AD@i,w
  4600  0BFC  1803               	btfsc	3,0
  4601  0BFD  2C2B               	goto	l8018
  4602  0BFE                     l8006:	
  4603                           
  4604                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4605  0BFE  3529               	lslf	getLoad_AD@i,w
  4606  0BFF  3E4E               	addlw	(_Load+11)& (0+255)
  4607  0C00  0086               	movwf	6
  4608  0C01  3001               	movlw	1	; select bank2/3
  4609  0C02  0087               	movwf	7
  4610  0C03  3F40               	moviw [0]fsr1
  4611  0C04  00A4               	movwf	??_getLoad_AD
  4612  0C05  3F41               	moviw [1]fsr1
  4613  0C06  00A5               	movwf	??_getLoad_AD+1
  4614  0C07  0022               	movlb	2	; select bank2
  4615  0C08  0865               	movf	((_Load+1)^(0+256)+33),w
  4616  0C09  0020               	movlb	0	; select bank0
  4617  0C0A  0225               	subwf	??_getLoad_AD+1,w
  4618  0C0B  1D03               	skipz
  4619  0C0C  2C11               	goto	u7885
  4620  0C0D  0022               	movlb	2	; select bank2
  4621  0C0E  0864               	movf	(_Load^(0+256)+33),w
  4622  0C0F  0020               	movlb	0	; select bank0
  4623  0C10  0224               	subwf	??_getLoad_AD,w
  4624  0C11                     u7885:	
  4625  0C11  1803               	skipnc
  4626  0C12  2C23               	goto	l8014
  4627  0C13  08A8               	movf	getLoad_AD@j,f
  4628  0C14  1D03               	skipz
  4629  0C15  2C23               	goto	l8014
  4630                           
  4631                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4632  0C16  3529               	lslf	getLoad_AD@i,w
  4633  0C17  3E4E               	addlw	(_Load+11)& (0+255)
  4634  0C18  0086               	movwf	6
  4635  0C19  3001               	movlw	1	; select bank2/3
  4636  0C1A  0087               	movwf	7
  4637  0C1B  0022               	movlb	2	; select bank2
  4638  0C1C  0864               	movf	(_Load^(0+256)+33),w
  4639  0C1D  3FC0               	movwi [0]fsr1
  4640  0C1E  0865               	movf	((_Load+1)^(0+256)+33),w
  4641  0C1F  3FC1               	movwi [1]fsr1
  4642                           
  4643                           ;OverLoad_B1.c: 24: j = 1;
  4644  0C20  0020               	movlb	0	; select bank0
  4645  0C21  01A8               	clrf	getLoad_AD@j
  4646  0C22  0AA8               	incf	getLoad_AD@j,f
  4647  0C23                     l8014:	
  4648  0C23  3001               	movlw	1
  4649  0C24  00A4               	movwf	??_getLoad_AD
  4650  0C25  0824               	movf	??_getLoad_AD,w
  4651  0C26  07A9               	addwf	getLoad_AD@i,f
  4652  0C27  3004               	movlw	4
  4653  0C28  0229               	subwf	getLoad_AD@i,w
  4654  0C29  1C03               	skipc
  4655  0C2A  2BFE               	goto	l8006
  4656  0C2B                     l8018:	
  4657                           
  4658                           ;OverLoad_B1.c: 25: }
  4659                           ;OverLoad_B1.c: 26: }
  4660                           ;OverLoad_B1.c: 27: if (j == 0) {
  4661  0C2B  08A8               	movf	getLoad_AD@j,f
  4662  0C2C  1D03               	skipz
  4663  0C2D  0008               	return
  4664                           
  4665                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4666  0C2E  01A9               	clrf	getLoad_AD@i
  4667  0C2F                     L1:	
  4668  0C2F  3004               	movlw	4
  4669  0C30  0229               	subwf	getLoad_AD@i,w
  4670  0C31  1803               	btfsc	3,0
  4671  0C32  0008               	return
  4672                           
  4673                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4674  0C33  3529               	lslf	getLoad_AD@i,w
  4675  0C34  3E58               	addlw	(_Load+21)& (0+255)
  4676  0C35  0086               	movwf	6
  4677  0C36  3001               	movlw	1	; select bank2/3
  4678  0C37  0087               	movwf	7
  4679  0C38  3F40               	moviw [0]fsr1
  4680  0C39  00A4               	movwf	??_getLoad_AD
  4681  0C3A  3F41               	moviw [1]fsr1
  4682  0C3B  00A5               	movwf	??_getLoad_AD+1
  4683  0C3C  0825               	movf	??_getLoad_AD+1,w
  4684  0C3D  0022               	movlb	2	; select bank2
  4685  0C3E  0265               	subwf	((_Load+1)^(0+256)+33),w
  4686  0C3F  1D03               	skipz
  4687  0C40  2C45               	goto	u7935
  4688  0C41  0020               	movlb	0	; select bank0
  4689  0C42  0824               	movf	??_getLoad_AD,w
  4690  0C43  0022               	movlb	2	; select bank2
  4691  0C44  0264               	subwf	(_Load^(0+256)+33),w
  4692  0C45                     u7935:	
  4693  0C45  1803               	skipnc
  4694  0C46  2C58               	goto	l8034
  4695  0C47  0020               	movlb	0	; select bank0
  4696  0C48  08A7               	movf	getLoad_AD@k,f
  4697  0C49  1D03               	skipz
  4698  0C4A  2C58               	goto	l8034
  4699                           
  4700                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4701  0C4B  3529               	lslf	getLoad_AD@i,w
  4702  0C4C  3E58               	addlw	(_Load+21)& (0+255)
  4703  0C4D  0086               	movwf	6
  4704  0C4E  3001               	movlw	1	; select bank2/3
  4705  0C4F  0087               	movwf	7
  4706  0C50  0022               	movlb	2	; select bank2
  4707  0C51  0864               	movf	(_Load^(0+256)+33),w
  4708  0C52  3FC0               	movwi [0]fsr1
  4709  0C53  0865               	movf	((_Load+1)^(0+256)+33),w
  4710  0C54  3FC1               	movwi [1]fsr1
  4711                           
  4712                           ;OverLoad_B1.c: 31: k = 1;
  4713  0C55  0020               	movlb	0	; select bank0
  4714  0C56  01A7               	clrf	getLoad_AD@k
  4715  0C57  0AA7               	incf	getLoad_AD@k,f
  4716  0C58                     l8034:	
  4717  0C58  3001               	movlw	1
  4718  0C59  0020               	movlb	0	; select bank0
  4719  0C5A  00A4               	movwf	??_getLoad_AD
  4720  0C5B  0824               	movf	??_getLoad_AD,w
  4721  0C5C  07A9               	addwf	getLoad_AD@i,f
  4722  0C5D  2C2F               	goto	L1
  4723  0C5E                     __end_of_getLoad_AD:	
  4724                           
  4725                           	psect	text5
  4726  1F38                     __ptext5:	
  4727 ;; *************** function _getAD *****************
  4728 ;; Defined at:
  4729 ;;		line 454 in file "../src/MCU_B1.c"
  4730 ;; Parameters:    Size  Location     Type
  4731 ;;  adcon0          1    wreg     unsigned char 
  4732 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4733 ;; Auto vars:     Size  Location     Type
  4734 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4735 ;; Return value:  Size  Location     Type
  4736 ;;                  2    0[BANK0 ] int 
  4737 ;; Registers used:
  4738 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4739 ;; Tracked objects:
  4740 ;;		On entry : 0/0
  4741 ;;		On exit  : 0/0
  4742 ;;		Unchanged: 0/0
  4743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4744 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4745 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4747 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4748 ;;Total ram usage:        4 bytes
  4749 ;; Hardware stack levels used:    1
  4750 ;; Hardware stack levels required when called:    6
  4751 ;; This function calls:
  4752 ;;		_Timeout_Counter
  4753 ;;		_set_TimeoutCleared
  4754 ;; This function is called by:
  4755 ;;		_getLoad_AD
  4756 ;;		_getTemp_AD
  4757 ;; This function uses a non-reentrant model
  4758 ;;
  4759                           
  4760                           
  4761                           ;psect for function _getAD
  4762  1F38                     _getAD:	
  4763                           
  4764                           ;incstack = 0
  4765                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4766                           ;getAD@adcon0 stored from wreg
  4767  1F38  0020               	movlb	0	; select bank0
  4768  1F39  00A3               	movwf	getAD@adcon0
  4769                           
  4770                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4771  1F3A  0823               	movf	getAD@adcon0,w
  4772  1F3B  0021               	movlb	1	; select bank1
  4773  1F3C  009D               	movwf	29	;volatile
  4774                           
  4775                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4776  1F3D  0020               	movlb	0	; select bank0
  4777  1F3E  0820               	movf	getAD@adcon1,w
  4778  1F3F  0021               	movlb	1	; select bank1
  4779  1F40  009E               	movwf	30	;volatile
  4780                           
  4781                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4782  1F41  149D               	bsf	29,1	;volatile
  4783                           
  4784                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4785  1F42  2F46               	goto	l7432
  4786  1F43                     l7430:	
  4787                           
  4788                           ;MCU_B1.c: 459: Timeout_Counter();
  4789  1F43  319D  25A1  319F   	fcall	_Timeout_Counter
  4790  1F46                     l7432:	
  4791  1F46  0021               	movlb	1	; select bank1
  4792  1F47  1C9D               	btfss	29,1	;volatile
  4793  1F48  2F4B               	goto	l7436
  4794  1F49  1D2C               	btfss	(_myMain^(0+128)+12),2
  4795  1F4A  2F43               	goto	l7430
  4796  1F4B                     l7436:	
  4797                           
  4798                           ;MCU_B1.c: 460: };
  4799                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4800  1F4B  319B  2343         	fcall	_set_TimeoutCleared
  4801                           
  4802                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4803  1F4D  0021               	movlb	1	; select bank1
  4804  1F4E  081C               	movf	28,w	;volatile
  4805  1F4F  0020               	movlb	0	; select bank0
  4806  1F50  01A1               	clrf	?_getAD+1
  4807  1F51  07A1               	addwf	?_getAD+1,f
  4808  1F52  0021               	movlb	1	; select bank1
  4809  1F53  081B               	movf	27,w	;volatile
  4810  1F54  0020               	movlb	0	; select bank0
  4811  1F55  01A0               	clrf	?_getAD
  4812  1F56  07A0               	addwf	?_getAD,f
  4813  1F57  0008               	return
  4814  1F58                     __end_of_getAD:	
  4815                           
  4816                           	psect	text6
  4817  1CDF                     __ptext6:	
  4818 ;; *************** function _WDT_Main *****************
  4819 ;; Defined at:
  4820 ;;		line 1036 in file "../src/MCU_B1.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;		None
  4823 ;; Auto vars:     Size  Location     Type
  4824 ;;		None
  4825 ;; Return value:  Size  Location     Type
  4826 ;;		None               void
  4827 ;; Registers used:
  4828 ;;		wreg, status,2, status,0, pclath, cstack
  4829 ;; Tracked objects:
  4830 ;;		On entry : 0/0
  4831 ;;		On exit  : 0/0
  4832 ;;		Unchanged: 0/0
  4833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4836 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4837 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4838 ;;Total ram usage:        1 bytes
  4839 ;; Hardware stack levels used:    1
  4840 ;; Hardware stack levels required when called:    6
  4841 ;; This function calls:
  4842 ;;		_WDT_Clearing
  4843 ;; This function is called by:
  4844 ;;		_main
  4845 ;; This function uses a non-reentrant model
  4846 ;;
  4847                           
  4848                           
  4849                           ;psect for function _WDT_Main
  4850  1CDF                     _WDT_Main:	
  4851                           
  4852                           ;MCU_B1.c: 1037: if (WDT.Enable == 1) {
  4853                           
  4854                           ;incstack = 0
  4855                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4856  1CDF  0021               	movlb	1	; select bank1
  4857  1CE0  1C4A               	btfss	_WDT^(0+128),0
  4858  1CE1  0008               	return
  4859                           
  4860                           ;MCU_B1.c: 1038: if (WDT.Timer-- > 0) {
  4861  1CE2  3001               	movlw	1
  4862  1CE3  02CB               	subwf	(_WDT^(0+128)+1),f
  4863  1CE4  084B               	movf	(_WDT^(0+128)+1),w
  4864  1CE5  3AFF               	xorlw	255
  4865  1CE6  1903               	skipnz
  4866  1CE7  0008               	return
  4867                           
  4868                           ;MCU_B1.c: 1039: WDT.Timer = 100;
  4869  1CE8  3064               	movlw	100
  4870  1CE9  0020               	movlb	0	; select bank0
  4871  1CEA  00A0               	movwf	??_WDT_Main
  4872  1CEB  0820               	movf	??_WDT_Main,w
  4873  1CEC  0021               	movlb	1	; select bank1
  4874  1CED  00CB               	movwf	(_WDT^(0+128)+1)
  4875                           
  4876                           ;MCU_B1.c: 1040: WDT_Clearing();
  4877  1CEE  3180  2002         	fcall	_WDT_Clearing
  4878  1CF0  0008               	return
  4879  1CF1                     __end_of_WDT_Main:	
  4880                           
  4881                           	psect	text7
  4882  0002                     __ptext7:	
  4883 ;; *************** function _WDT_Clearing *****************
  4884 ;; Defined at:
  4885 ;;		line 1046 in file "../src/MCU_B1.c"
  4886 ;; Parameters:    Size  Location     Type
  4887 ;;		None
  4888 ;; Auto vars:     Size  Location     Type
  4889 ;;		None
  4890 ;; Return value:  Size  Location     Type
  4891 ;;		None               void
  4892 ;; Registers used:
  4893 ;;		None
  4894 ;; Tracked objects:
  4895 ;;		On entry : 0/0
  4896 ;;		On exit  : 0/0
  4897 ;;		Unchanged: 0/0
  4898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4903 ;;Total ram usage:        0 bytes
  4904 ;; Hardware stack levels used:    1
  4905 ;; Hardware stack levels required when called:    5
  4906 ;; This function calls:
  4907 ;;		Nothing
  4908 ;; This function is called by:
  4909 ;;		_WDT_Main
  4910 ;; This function uses a non-reentrant model
  4911 ;;
  4912                           
  4913                           
  4914                           ;psect for function _WDT_Clearing
  4915  0002                     _WDT_Clearing:	
  4916                           
  4917                           ;incstack = 0
  4918                           ; Regs used in _WDT_Clearing: []
  4919  0002  0064               	clrwdt	;# 
  4920  0003  0008               	return
  4921  0004                     __end_of_WDT_Clearing:	
  4922                           
  4923                           	psect	text8
  4924  1B30                     __ptext8:	
  4925 ;; *************** function _Temp_Main *****************
  4926 ;; Defined at:
  4927 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4928 ;; Parameters:    Size  Location     Type
  4929 ;;		None
  4930 ;; Auto vars:     Size  Location     Type
  4931 ;;		None
  4932 ;; Return value:  Size  Location     Type
  4933 ;;		None               void
  4934 ;; Registers used:
  4935 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4936 ;; Tracked objects:
  4937 ;;		On entry : 0/0
  4938 ;;		On exit  : 0/0
  4939 ;;		Unchanged: 0/0
  4940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4945 ;;Total ram usage:        0 bytes
  4946 ;; Hardware stack levels used:    1
  4947 ;; Hardware stack levels required when called:    8
  4948 ;; This function calls:
  4949 ;;		_setTemp_Main
  4950 ;; This function is called by:
  4951 ;;		_main
  4952 ;; This function uses a non-reentrant model
  4953 ;;
  4954                           
  4955                           
  4956                           ;psect for function _Temp_Main
  4957  1B30                     _Temp_Main:	
  4958                           
  4959                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4960                           
  4961                           ;incstack = 0
  4962                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4963  1B30  318D  25FE         	fcall	_setTemp_Main
  4964  1B32  0008               	return
  4965  1B33                     __end_of_Temp_Main:	
  4966                           
  4967                           	psect	text9
  4968  0DFE                     __ptext9:	
  4969 ;; *************** function _setTemp_Main *****************
  4970 ;; Defined at:
  4971 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;		None
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;		None
  4976 ;; Return value:  Size  Location     Type
  4977 ;;		None               void
  4978 ;; Registers used:
  4979 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4980 ;; Tracked objects:
  4981 ;;		On entry : 0/0
  4982 ;;		On exit  : 0/0
  4983 ;;		Unchanged: 0/0
  4984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4987 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4988 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4989 ;;Total ram usage:        2 bytes
  4990 ;; Hardware stack levels used:    1
  4991 ;; Hardware stack levels required when called:    7
  4992 ;; This function calls:
  4993 ;;		_getMain_All_Error_Status
  4994 ;;		_setBuz
  4995 ;; This function is called by:
  4996 ;;		_Temp_Main
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000                           
  5001                           ;psect for function _setTemp_Main
  5002  0DFE                     _setTemp_Main:	
  5003                           
  5004                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  5005                           
  5006                           ;incstack = 0
  5007                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5008  0DFE  0021               	movlb	1	; select bank1
  5009  0DFF  1C57               	btfss	_Temp^(0+128),0
  5010  0E00  2E9F               	goto	l1615
  5011                           
  5012                           ;OverTemperature_B1.c: 59: if (Temp.ADtoGO == 0) {
  5013  0E01  1957               	btfsc	_Temp^(0+128),2
  5014  0E02  2E12               	goto	l7508
  5015                           
  5016                           ;OverTemperature_B1.c: 60: Temp.Time++;
  5017  0E03  3001               	movlw	1
  5018  0E04  07D8               	addwf	(_Temp^(0+128)+1),f
  5019  0E05  3000               	movlw	0
  5020  0E06  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  5021                           
  5022                           ;OverTemperature_B1.c: 61: if (Temp.Time >= 500) {
  5023  0E07  3001               	movlw	1
  5024  0E08  0259               	subwf	((_Temp+1)^(0+128)+1),w
  5025  0E09  30F4               	movlw	244
  5026  0E0A  1903               	skipnz
  5027  0E0B  0258               	subwf	(_Temp^(0+128)+1),w
  5028  0E0C  1C03               	skipc
  5029  0E0D  0008               	return
  5030                           
  5031                           ;OverTemperature_B1.c: 62: Temp.Time = 0;
  5032  0E0E  01D8               	clrf	(_Temp^(0+128)+1)
  5033  0E0F  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5034                           
  5035                           ;OverTemperature_B1.c: 63: Temp.ADtoGO = 1;
  5036  0E10  1557               	bsf	_Temp^(0+128),2
  5037                           
  5038                           ;OverTemperature_B1.c: 64: }
  5039                           ;OverTemperature_B1.c: 65: } else {
  5040  0E11  0008               	return
  5041  0E12                     l7508:	
  5042                           
  5043                           ;OverTemperature_B1.c: 66: if (getMain_All_Error_Status(2) == 0) {
  5044  0E12  3002               	movlw	2
  5045  0E13  3191  21E7  318D   	fcall	_getMain_All_Error_Status
  5046  0E16  3800               	iorlw	0
  5047  0E17  1D03               	skipz
  5048  0E18  0008               	return
  5049                           
  5050                           ;OverTemperature_B1.c: 67: Temp.Time++;
  5051  0E19  3001               	movlw	1
  5052  0E1A  0021               	movlb	1	; select bank1
  5053  0E1B  07D8               	addwf	(_Temp^(0+128)+1),f
  5054  0E1C  3000               	movlw	0
  5055  0E1D  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  5056                           
  5057                           ;OverTemperature_B1.c: 68: if (Temp.Time >= 5) {
  5058  0E1E  3000               	movlw	0
  5059  0E1F  0259               	subwf	((_Temp+1)^(0+128)+1),w
  5060  0E20  3005               	movlw	5
  5061  0E21  1903               	skipnz
  5062  0E22  0258               	subwf	(_Temp^(0+128)+1),w
  5063  0E23  1C03               	skipc
  5064  0E24  0008               	return
  5065                           
  5066                           ;OverTemperature_B1.c: 69: Temp.Time = 0;
  5067  0E25  01D8               	clrf	(_Temp^(0+128)+1)
  5068  0E26  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5069                           
  5070                           ;OverTemperature_B1.c: 70: if (Temp.GO == 1) {
  5071  0E27  1E57               	btfss	_Temp^(0+128),4
  5072  0E28  0008               	return
  5073                           
  5074                           ;OverTemperature_B1.c: 71: Temp.ADtoGO = 0;
  5075  0E29  1157               	bcf	_Temp^(0+128),2
  5076                           
  5077                           ;OverTemperature_B1.c: 72: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5078  0E2A  300A               	movlw	10
  5079  0E2B  3ED7               	addlw	_Temp& (0+255)
  5080  0E2C  0086               	movwf	6
  5081  0E2D  0187               	clrf	7
  5082  0E2E  3008               	movlw	8
  5083  0E2F  3ED7               	addlw	_Temp& (0+255)
  5084  0E30  0084               	movwf	4
  5085  0E31  0185               	clrf	5
  5086  0E32  3F40               	moviw [0]fsr1
  5087  0E33  0700               	addwf	0,w
  5088  0E34  0020               	movlb	0	; select bank0
  5089  0E35  00AD               	movwf	??_setTemp_Main
  5090  0E36  3101               	addfsr 0,1
  5091  0E37  3F41               	moviw [1]fsr1
  5092  0E38  3D00               	addwfc	0,w
  5093  0E39  00AE               	movwf	??_setTemp_Main+1
  5094  0E3A  36AE               	lsrf	??_setTemp_Main+1,f
  5095  0E3B  0CAD               	rrf	??_setTemp_Main,f
  5096  0E3C  082D               	movf	??_setTemp_Main,w
  5097  0E3D  0021               	movlb	1	; select bank1
  5098  0E3E  00DD               	movwf	(_Temp^(0+128)+6)
  5099  0E3F  0020               	movlb	0	; select bank0
  5100  0E40  082E               	movf	??_setTemp_Main+1,w
  5101  0E41  0021               	movlb	1	; select bank1
  5102  0E42  00DE               	movwf	((_Temp+1)^(0+128)+6)
  5103                           
  5104                           ;OverTemperature_B1.c: 82: Temp.SafeValue = 455;
  5105  0E43  30C7               	movlw	199
  5106  0E44  00E5               	movwf	(_Temp^(0+128)+14)
  5107  0E45  3001               	movlw	1
  5108  0E46  00E6               	movwf	(_Temp^(0+128)+15)
  5109                           
  5110                           ;OverTemperature_B1.c: 83: Temp.DangerValue = 415;
  5111  0E47  309F               	movlw	159
  5112  0E48  00E7               	movwf	(_Temp^(0+128)+16)
  5113  0E49  3001               	movlw	1
  5114  0E4A  00E8               	movwf	(_Temp^(0+128)+17)
  5115                           
  5116                           ;OverTemperature_B1.c: 89: if (Temp.ERROR == 1) {
  5117  0E4B  1CD7               	btfss	_Temp^(0+128),1
  5118  0E4C  2E6D               	goto	l7540
  5119                           
  5120                           ;OverTemperature_B1.c: 90: if (Temp.AD >= Temp.SafeValue) {
  5121  0E4D  0866               	movf	((_Temp+1)^(0+128)+14),w
  5122  0E4E  025E               	subwf	((_Temp+1)^(0+128)+6),w
  5123  0E4F  1D03               	skipz
  5124  0E50  2E53               	goto	u7015
  5125  0E51  0865               	movf	(_Temp^(0+128)+14),w
  5126  0E52  025D               	subwf	(_Temp^(0+128)+6),w
  5127  0E53                     u7015:	
  5128  0E53  1C03               	skipc
  5129  0E54  2E6B               	goto	l7538
  5130                           
  5131                           ;OverTemperature_B1.c: 91: Temp.Count++;
  5132  0E55  3001               	movlw	1
  5133  0E56  0020               	movlb	0	; select bank0
  5134  0E57  00AD               	movwf	??_setTemp_Main
  5135  0E58  082D               	movf	??_setTemp_Main,w
  5136  0E59  0021               	movlb	1	; select bank1
  5137  0E5A  07DA               	addwf	(_Temp^(0+128)+3),f
  5138                           
  5139                           ;OverTemperature_B1.c: 92: if (Temp.Count >= 3) {
  5140  0E5B  3003               	movlw	3
  5141  0E5C  025A               	subwf	(_Temp^(0+128)+3),w
  5142  0E5D  1C03               	skipc
  5143  0E5E  2E83               	goto	l7552
  5144                           
  5145                           ;OverTemperature_B1.c: 93: Temp.Count = 0;
  5146  0E5F  01DA               	clrf	(_Temp^(0+128)+3)
  5147                           
  5148                           ;OverTemperature_B1.c: 94: Temp.ERROR = 0;
  5149  0E60  10D7               	bcf	_Temp^(0+128),1
  5150                           
  5151                           ;OverTemperature_B1.c: 95: setBuz(2, 100);
  5152  0E61  3064               	movlw	100
  5153  0E62  0020               	movlb	0	; select bank0
  5154  0E63  00A9               	movwf	setBuz@time
  5155  0E64  3000               	movlw	0
  5156  0E65  00AA               	movwf	setBuz@time+1
  5157  0E66  3002               	movlw	2
  5158  0E67  3196  2639  318D   	fcall	_setBuz
  5159                           
  5160                           ;OverTemperature_B1.c: 96: }
  5161                           ;OverTemperature_B1.c: 97: } else {
  5162  0E6A  2E83               	goto	l7552
  5163  0E6B                     l7538:	
  5164                           
  5165                           ;OverTemperature_B1.c: 98: Temp.Count = 0;
  5166  0E6B  0021               	movlb	1	; select bank1
  5167  0E6C  2E82               	goto	l7550
  5168  0E6D                     l7540:	
  5169                           ;OverTemperature_B1.c: 99: }
  5170                           ;OverTemperature_B1.c: 100: } else {
  5171                           
  5172                           
  5173                           ;OverTemperature_B1.c: 101: if (Temp.AD <= Temp.DangerValue) {
  5174  0E6D  085E               	movf	((_Temp+1)^(0+128)+6),w
  5175  0E6E  0268               	subwf	((_Temp+1)^(0+128)+16),w
  5176  0E6F  1D03               	skipz
  5177  0E70  2E73               	goto	u7035
  5178  0E71  085D               	movf	(_Temp^(0+128)+6),w
  5179  0E72  0267               	subwf	(_Temp^(0+128)+16),w
  5180  0E73                     u7035:	
  5181  0E73  1C03               	skipc
  5182  0E74  2E82               	goto	l7550
  5183                           
  5184                           ;OverTemperature_B1.c: 102: Temp.Count++;
  5185  0E75  3001               	movlw	1
  5186  0E76  0020               	movlb	0	; select bank0
  5187  0E77  00AD               	movwf	??_setTemp_Main
  5188  0E78  082D               	movf	??_setTemp_Main,w
  5189  0E79  0021               	movlb	1	; select bank1
  5190  0E7A  07DA               	addwf	(_Temp^(0+128)+3),f
  5191                           
  5192                           ;OverTemperature_B1.c: 103: if (Temp.Count >= 3) {
  5193  0E7B  3003               	movlw	3
  5194  0E7C  025A               	subwf	(_Temp^(0+128)+3),w
  5195  0E7D  1C03               	skipc
  5196  0E7E  2E83               	goto	l7552
  5197                           
  5198                           ;OverTemperature_B1.c: 104: Temp.Count = 0;
  5199  0E7F  01DA               	clrf	(_Temp^(0+128)+3)
  5200                           
  5201                           ;OverTemperature_B1.c: 105: Temp.ERROR = 1;
  5202  0E80  14D7               	bsf	_Temp^(0+128),1
  5203                           
  5204                           ;OverTemperature_B1.c: 106: }
  5205                           ;OverTemperature_B1.c: 107: } else {
  5206  0E81  2E83               	goto	l7552
  5207  0E82                     l7550:	
  5208                           
  5209                           ;OverTemperature_B1.c: 108: Temp.Count = 0;
  5210  0E82  01DA               	clrf	(_Temp^(0+128)+3)
  5211  0E83                     l7552:	
  5212                           
  5213                           ;OverTemperature_B1.c: 109: }
  5214                           ;OverTemperature_B1.c: 110: }
  5215                           ;OverTemperature_B1.c: 111: product->Data[24]=Temp.AD >> 8;
  5216  0E83  0021               	movlb	1	; select bank1
  5217  0E84  085E               	movf	((_Temp+1)^(0+128)+6),w
  5218  0E85  0020               	movlb	0	; select bank0
  5219  0E86  00AD               	movwf	??_setTemp_Main
  5220  0E87  086E               	movf	_product,w
  5221  0E88  3E18               	addlw	24
  5222  0E89  0086               	movwf	6
  5223  0E8A  3002               	movlw	2	; select bank4/5
  5224  0E8B  0087               	movwf	7
  5225  0E8C  082D               	movf	??_setTemp_Main,w
  5226  0E8D  0081               	movwf	1
  5227                           
  5228                           ;OverTemperature_B1.c: 112: product->Data[25]=Temp.AD;
  5229  0E8E  0021               	movlb	1	; select bank1
  5230  0E8F  085D               	movf	(_Temp^(0+128)+6),w
  5231  0E90  0020               	movlb	0	; select bank0
  5232  0E91  00AD               	movwf	??_setTemp_Main
  5233  0E92  086E               	movf	_product,w
  5234  0E93  3E19               	addlw	25
  5235  0E94  0086               	movwf	6
  5236  0E95  3002               	movlw	2	; select bank4/5
  5237  0E96  0087               	movwf	7
  5238  0E97  082D               	movf	??_setTemp_Main,w
  5239  0E98  0081               	movwf	1
  5240                           
  5241                           ;OverTemperature_B1.c: 118: Temp.ADH[0] = 0;
  5242  0E99  0021               	movlb	1	; select bank1
  5243  0E9A  01DF               	clrf	(_Temp^(0+128)+8)
  5244  0E9B  01E0               	clrf	((_Temp+1)^(0+128)+8)
  5245                           
  5246                           ;OverTemperature_B1.c: 119: Temp.ADH[1] = 0;
  5247  0E9C  01E1               	clrf	(_Temp^(0+128)+10)
  5248  0E9D  01E2               	clrf	((_Temp+1)^(0+128)+10)
  5249                           
  5250                           ;OverTemperature_B1.c: 120: }
  5251                           ;OverTemperature_B1.c: 121: }
  5252                           ;OverTemperature_B1.c: 122: }
  5253                           ;OverTemperature_B1.c: 123: }
  5254                           ;OverTemperature_B1.c: 124: } else {
  5255  0E9E  0008               	return
  5256  0E9F                     l1615:	
  5257                           
  5258                           ;OverTemperature_B1.c: 125: if (myMain.PowerON == 1) {
  5259  0E9F  1C20               	btfss	_myMain^(0+128),0
  5260  0EA0  0008               	return
  5261                           
  5262                           ;OverTemperature_B1.c: 126: Temp.Enable = 1;
  5263  0EA1  1457               	bsf	_Temp^(0+128),0
  5264  0EA2  0008               	return
  5265  0EA3                     __end_of_setTemp_Main:	
  5266                           
  5267                           	psect	text10
  5268  1B2D                     __ptext10:	
  5269 ;; *************** function _Temp_Initialization *****************
  5270 ;; Defined at:
  5271 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5272 ;; Parameters:    Size  Location     Type
  5273 ;;		None
  5274 ;; Auto vars:     Size  Location     Type
  5275 ;;		None
  5276 ;; Return value:  Size  Location     Type
  5277 ;;		None               void
  5278 ;; Registers used:
  5279 ;;		status,2, status,0, pclath, cstack
  5280 ;; Tracked objects:
  5281 ;;		On entry : 0/0
  5282 ;;		On exit  : 0/0
  5283 ;;		Unchanged: 0/0
  5284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5289 ;;Total ram usage:        0 bytes
  5290 ;; Hardware stack levels used:    1
  5291 ;; Hardware stack levels required when called:    6
  5292 ;; This function calls:
  5293 ;;		_setTemp_Initialization
  5294 ;; This function is called by:
  5295 ;;		_main
  5296 ;; This function uses a non-reentrant model
  5297 ;;
  5298                           
  5299                           
  5300                           ;psect for function _Temp_Initialization
  5301  1B2D                     _Temp_Initialization:	
  5302                           
  5303                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5304                           
  5305                           ;incstack = 0
  5306                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5307  1B2D  319B  2323         	fcall	_setTemp_Initialization
  5308  1B2F  0008               	return
  5309  1B30                     __end_of_Temp_Initialization:	
  5310                           
  5311                           	psect	text11
  5312  1B23                     __ptext11:	
  5313 ;; *************** function _setTemp_Initialization *****************
  5314 ;; Defined at:
  5315 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;		None
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;		None
  5320 ;; Return value:  Size  Location     Type
  5321 ;;		None               void
  5322 ;; Registers used:
  5323 ;;		None
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5332 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5333 ;;Total ram usage:        0 bytes
  5334 ;; Hardware stack levels used:    1
  5335 ;; Hardware stack levels required when called:    5
  5336 ;; This function calls:
  5337 ;;		Nothing
  5338 ;; This function is called by:
  5339 ;;		_Temp_Initialization
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343                           
  5344                           ;psect for function _setTemp_Initialization
  5345  1B23                     _setTemp_Initialization:	
  5346                           
  5347                           ;incstack = 0
  5348                           ; Regs used in _setTemp_Initialization: []
  5349  1B23  0008               	return
  5350  1B24                     __end_of_setTemp_Initialization:	
  5351                           
  5352                           	psect	text12
  5353  106C                     __ptext12:	
  5354 ;; *************** function _Switch_Main *****************
  5355 ;; Defined at:
  5356 ;;		line 72 in file "../src/Switch_B1.c"
  5357 ;; Parameters:    Size  Location     Type
  5358 ;;		None
  5359 ;; Auto vars:     Size  Location     Type
  5360 ;;  error           1   30[BANK0 ] unsigned char 
  5361 ;; Return value:  Size  Location     Type
  5362 ;;		None               void
  5363 ;; Registers used:
  5364 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5365 ;; Tracked objects:
  5366 ;;		On entry : 0/0
  5367 ;;		On exit  : 0/0
  5368 ;;		Unchanged: 0/0
  5369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5372 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5373 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5374 ;;Total ram usage:        2 bytes
  5375 ;; Hardware stack levels used:    1
  5376 ;; Hardware stack levels required when called:   11
  5377 ;; This function calls:
  5378 ;;		_TouchPower
  5379 ;;		_getMain_All_Error_Status
  5380 ;;		_setMain_Exception
  5381 ;;		_setSw_Main
  5382 ;; This function is called by:
  5383 ;;		_main
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387                           
  5388                           ;psect for function _Switch_Main
  5389  106C                     _Switch_Main:	
  5390                           
  5391                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5392                           
  5393                           ;incstack = 0
  5394                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5395  106C  3000               	movlw	0
  5396  106D  3191  21E7  3190   	fcall	_getMain_All_Error_Status
  5397  1070  0020               	movlb	0	; select bank0
  5398  1071  00BD               	movwf	??_Switch_Main
  5399  1072  083D               	movf	??_Switch_Main,w
  5400  1073  00BE               	movwf	Switch_Main@error
  5401                           
  5402                           ;Switch_B1.c: 74: if (error != 0) {
  5403  1074  083E               	movf	Switch_Main@error,w
  5404  1075  1903               	btfsc	3,2
  5405  1076  287C               	goto	l2386
  5406                           
  5407                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5408  1077  0021               	movlb	1	; select bank1
  5409  1078  1852               	btfsc	_SwDetect^(0+128),0
  5410  1079  2885               	goto	l8224
  5411                           
  5412                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5413  107A  1452               	bsf	_SwDetect^(0+128),0
  5414  107B  2880               	goto	L2
  5415  107C                     l2386:	
  5416                           ;Switch_B1.c: 80: }
  5417                           ;Switch_B1.c: 81: } else {
  5418                           
  5419                           ;Switch_B1.c: 78: setMain_Exception(error);
  5420                           
  5421                           
  5422                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5423  107C  0021               	movlb	1	; select bank1
  5424  107D  1C52               	btfss	_SwDetect^(0+128),0
  5425  107E  2885               	goto	l8224
  5426                           
  5427                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5428  107F  1052               	bcf	_SwDetect^(0+128),0
  5429  1080                     L2:	
  5430                           
  5431                           ;Switch_B1.c: 85: setMain_Exception(error);
  5432  1080  0020               	movlb	0	; select bank0
  5433  1081  083E               	movf	Switch_Main@error,w
  5434  1082  3197  2747  3190   	fcall	_setMain_Exception
  5435  1085                     l8224:	
  5436                           
  5437                           ;Switch_B1.c: 87: }
  5438                           ;Switch_B1.c: 88: }
  5439                           ;Switch_B1.c: 91: setSw_Main(1);
  5440  1085  3001               	movlw	1
  5441  1086  3180  204B  3190   	fcall	_setSw_Main
  5442                           
  5443                           ;Switch_B1.c: 95: setSw_Main(2);
  5444  1089  3002               	movlw	2
  5445  108A  3180  204B  3190   	fcall	_setSw_Main
  5446                           
  5447                           ;Switch_B1.c: 103: TouchPower();
  5448  108D  319D  25E0         	fcall	_TouchPower
  5449  108F  0008               	return
  5450  1090                     __end_of_Switch_Main:	
  5451                           
  5452                           	psect	text13
  5453  004B                     __ptext13:	
  5454 ;; *************** function _setSw_Main *****************
  5455 ;; Defined at:
  5456 ;;		line 137 in file "../src/Switch_B1.c"
  5457 ;; Parameters:    Size  Location     Type
  5458 ;;  sw              1    wreg     unsigned char 
  5459 ;; Auto vars:     Size  Location     Type
  5460 ;;  sw              1   19[BANK0 ] unsigned char 
  5461 ;; Return value:  Size  Location     Type
  5462 ;;		None               void
  5463 ;; Registers used:
  5464 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5465 ;; Tracked objects:
  5466 ;;		On entry : 0/0
  5467 ;;		On exit  : 0/0
  5468 ;;		Unchanged: 0/0
  5469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5471 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5472 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5473 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5474 ;;Total ram usage:        3 bytes
  5475 ;; Hardware stack levels used:    1
  5476 ;; Hardware stack levels required when called:    9
  5477 ;; This function calls:
  5478 ;;		_SwPointSelect
  5479 ;;		_getSw_KeyStatus
  5480 ;;		_setBuz
  5481 ;;		_setDimmerLights_AdjControl
  5482 ;;		_setDimmerLights_SwOff
  5483 ;;		_setDimmerLights_SwOn
  5484 ;;		_setRF_Learn
  5485 ;; This function is called by:
  5486 ;;		_Switch_Main
  5487 ;; This function uses a non-reentrant model
  5488 ;;
  5489                           
  5490                           
  5491                           ;psect for function _setSw_Main
  5492  004B                     _setSw_Main:	
  5493                           
  5494                           ;incstack = 0
  5495                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5496                           ;setSw_Main@sw stored from wreg
  5497  004B  0020               	movlb	0	; select bank0
  5498  004C  00B3               	movwf	setSw_Main@sw
  5499                           
  5500                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5501  004D  0833               	movf	setSw_Main@sw,w
  5502  004E  319D  2579  3180   	fcall	_SwPointSelect
  5503                           
  5504                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5505  0051  087C               	movf	_Sw,w
  5506  0052  0086               	movwf	6
  5507  0053  3001               	movlw	1	; select bank2/3
  5508  0054  0087               	movwf	7
  5509  0055  1C01               	btfss	1,0
  5510  0056  29B1               	goto	l2396
  5511                           
  5512                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5513  0057  0021               	movlb	1	; select bank1
  5514  0058  1852               	btfsc	_SwDetect^(0+128),0
  5515  0059  2875               	goto	l7726
  5516                           
  5517                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5518  005A  0A7C               	incf	_Sw,w
  5519  005B  0086               	movwf	6
  5520  005C  3001               	movlw	1	; select bank2/3
  5521  005D  0087               	movwf	7
  5522  005E  1081               	bcf	1,1
  5523                           
  5524                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5525  005F  0020               	movlb	0	; select bank0
  5526  0060  0833               	movf	setSw_Main@sw,w
  5527  0061  319E  26F9  3180   	fcall	_getSw_KeyStatus
  5528  0064  3A01               	xorlw	1
  5529  0065  3000               	movlw	0
  5530  0066  1903               	skipnz
  5531  0067  3001               	movlw	1
  5532  0068  0020               	movlb	0	; select bank0
  5533  0069  00B1               	movwf	??_setSw_Main
  5534  006A  087C               	movf	_Sw,w
  5535  006B  0086               	movwf	6
  5536  006C  3001               	movlw	1	; select bank2/3
  5537  006D  0087               	movwf	7
  5538  006E  0DB1               	rlf	??_setSw_Main,f
  5539  006F  0801               	movf	1,w
  5540  0070  0631               	xorwf	??_setSw_Main,w
  5541  0071  39FD               	andlw	-3
  5542  0072  0631               	xorwf	??_setSw_Main,w
  5543  0073  0081               	movwf	1
  5544                           
  5545                           ;Switch_B1.c: 143: } else {
  5546  0074  288A               	goto	l2398
  5547  0075                     l7726:	
  5548                           
  5549                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5550  0075  0A7C               	incf	_Sw,w
  5551  0076  0086               	movwf	6
  5552  0077  3001               	movlw	1	; select bank2/3
  5553  0078  0087               	movwf	7
  5554  0079  1881               	btfsc	1,1
  5555  007A  288A               	goto	l2398
  5556                           
  5557                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5558  007B  0A7C               	incf	_Sw,w
  5559  007C  0086               	movwf	6
  5560  007D  3001               	movlw	1	; select bank2/3
  5561  007E  0087               	movwf	7
  5562  007F  1481               	bsf	1,1
  5563                           
  5564                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5565  0080  087C               	movf	_Sw,w
  5566  0081  0086               	movwf	6
  5567  0082  3001               	movlw	1	; select bank2/3
  5568  0083  0087               	movwf	7
  5569  0084  1081               	bcf	1,1
  5570                           
  5571                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5572  0085  087C               	movf	_Sw,w
  5573  0086  0086               	movwf	6
  5574  0087  3001               	movlw	1	; select bank2/3
  5575  0088  0087               	movwf	7
  5576  0089  1501               	bsf	1,2
  5577  008A                     l2398:	
  5578                           
  5579                           ;Switch_B1.c: 148: }
  5580                           ;Switch_B1.c: 149: }
  5581                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5582  008A  087C               	movf	_Sw,w
  5583  008B  0086               	movwf	6
  5584  008C  3001               	movlw	1	; select bank2/3
  5585  008D  0087               	movwf	7
  5586  008E  1C81               	btfss	1,1
  5587  008F  295A               	goto	l7776
  5588                           
  5589                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5590  0090  087C               	movf	_Sw,w
  5591  0091  0086               	movwf	6
  5592  0092  3001               	movlw	1	; select bank2/3
  5593  0093  0087               	movwf	7
  5594  0094  1901               	btfsc	1,2
  5595  0095  28B8               	goto	l7742
  5596                           
  5597                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5598  0096  3001               	movlw	1
  5599  0097  0020               	movlb	0	; select bank0
  5600  0098  00B1               	movwf	??_setSw_Main
  5601  0099  087C               	movf	_Sw,w
  5602  009A  3E02               	addlw	2
  5603  009B  0086               	movwf	6
  5604  009C  3001               	movlw	1	; select bank2/3
  5605  009D  0087               	movwf	7
  5606  009E  0831               	movf	??_setSw_Main,w
  5607  009F  0781               	addwf	1,f
  5608                           
  5609                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5610  00A0  087C               	movf	_Sw,w
  5611  00A1  3E02               	addlw	2
  5612  00A2  0086               	movwf	6
  5613  00A3  3001               	movlw	1	; select bank2/3
  5614  00A4  0087               	movwf	7
  5615  00A5  3005               	movlw	5
  5616  00A6  0201               	subwf	1,w
  5617  00A7  1C03               	skipc
  5618  00A8  0008               	return
  5619                           
  5620                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5621  00A9  087C               	movf	_Sw,w
  5622  00AA  3E02               	addlw	2
  5623  00AB  0086               	movwf	6
  5624  00AC  3001               	movlw	1	; select bank2/3
  5625  00AD  0087               	movwf	7
  5626  00AE  0181               	clrf	1
  5627                           
  5628                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5629  00AF  087C               	movf	_Sw,w
  5630  00B0  0086               	movwf	6
  5631  00B1  3001               	movlw	1	; select bank2/3
  5632  00B2  0087               	movwf	7
  5633  00B3  1501               	bsf	1,2
  5634                           
  5635                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5636  00B4  0833               	movf	setSw_Main@sw,w
  5637  00B5  3193  235D         	fcall	_setDimmerLights_SwOn
  5638                           
  5639                           ;Switch_B1.c: 162: }
  5640                           ;Switch_B1.c: 163: } else {
  5641  00B7  0008               	return
  5642  00B8                     l7742:	
  5643                           
  5644                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5645  00B8  087C               	movf	_Sw,w
  5646  00B9  0086               	movwf	6
  5647  00BA  3001               	movlw	1	; select bank2/3
  5648  00BB  0087               	movwf	7
  5649  00BC  1981               	btfsc	1,3
  5650  00BD  28EA               	goto	l7752
  5651                           
  5652                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5653  00BE  087C               	movf	_Sw,w
  5654  00BF  3E03               	addlw	3
  5655  00C0  0086               	movwf	6
  5656  00C1  3001               	movlw	1	; select bank2/3
  5657  00C2  0087               	movwf	7
  5658  00C3  3001               	movlw	1
  5659  00C4  0781               	addwf	1,f
  5660  00C5  3141               	addfsr 1,1
  5661  00C6  1803               	skipnc
  5662  00C7  0A81               	incf	1,f
  5663                           
  5664                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5665  00C8  087C               	movf	_Sw,w
  5666  00C9  3E03               	addlw	3
  5667  00CA  0086               	movwf	6
  5668  00CB  3001               	movlw	1	; select bank2/3
  5669  00CC  0087               	movwf	7
  5670  00CD  3F40               	moviw [0]fsr1
  5671  00CE  0020               	movlb	0	; select bank0
  5672  00CF  00B1               	movwf	??_setSw_Main
  5673  00D0  3F41               	moviw [1]fsr1
  5674  00D1  00B2               	movwf	??_setSw_Main+1
  5675  00D2  3000               	movlw	0
  5676  00D3  0232               	subwf	??_setSw_Main+1,w
  5677  00D4  3096               	movlw	150
  5678  00D5  1903               	skipnz
  5679  00D6  0231               	subwf	??_setSw_Main,w
  5680  00D7  1C03               	skipc
  5681  00D8  0008               	return
  5682                           
  5683                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5684  00D9  087C               	movf	_Sw,w
  5685  00DA  3E03               	addlw	3
  5686  00DB  0086               	movwf	6
  5687  00DC  3001               	movlw	1	; select bank2/3
  5688  00DD  0087               	movwf	7
  5689  00DE  3000               	movlw	0
  5690  00DF  3FC0               	movwi [0]fsr1
  5691  00E0  3FC1               	movwi [1]fsr1
  5692                           
  5693                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5694  00E1  087C               	movf	_Sw,w
  5695  00E2  0086               	movwf	6
  5696  00E3  3001               	movlw	1	; select bank2/3
  5697  00E4  0087               	movwf	7
  5698  00E5  1581               	bsf	1,3
  5699                           
  5700                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5701  00E6  0833               	movf	setSw_Main@sw,w
  5702  00E7  3192  224E         	fcall	_setDimmerLights_AdjControl
  5703                           
  5704                           ;Switch_B1.c: 174: }
  5705                           ;Switch_B1.c: 175: } else {
  5706  00E9  0008               	return
  5707  00EA                     l7752:	
  5708                           
  5709                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5710  00EA  087C               	movf	_Sw,w
  5711  00EB  0086               	movwf	6
  5712  00EC  3001               	movlw	1	; select bank2/3
  5713  00ED  0087               	movwf	7
  5714  00EE  1A01               	btfsc	1,4
  5715  00EF  2928               	goto	l7766
  5716                           
  5717                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5718  00F0  087C               	movf	_Sw,w
  5719  00F1  3E05               	addlw	5
  5720  00F2  0086               	movwf	6
  5721  00F3  3001               	movlw	1	; select bank2/3
  5722  00F4  0087               	movwf	7
  5723  00F5  3001               	movlw	1
  5724  00F6  0781               	addwf	1,f
  5725  00F7  3141               	addfsr 1,1
  5726  00F8  1803               	skipnc
  5727  00F9  0A81               	incf	1,f
  5728                           
  5729                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5730  00FA  087C               	movf	_Sw,w
  5731  00FB  3E05               	addlw	5
  5732  00FC  0086               	movwf	6
  5733  00FD  3001               	movlw	1	; select bank2/3
  5734  00FE  0087               	movwf	7
  5735  00FF  3F40               	moviw [0]fsr1
  5736  0100  0020               	movlb	0	; select bank0
  5737  0101  00B1               	movwf	??_setSw_Main
  5738  0102  3F41               	moviw [1]fsr1
  5739  0103  00B2               	movwf	??_setSw_Main+1
  5740  0104  3000               	movlw	0
  5741  0105  0232               	subwf	??_setSw_Main+1,w
  5742  0106  3096               	movlw	150
  5743  0107  1903               	skipnz
  5744  0108  0231               	subwf	??_setSw_Main,w
  5745  0109  1C03               	skipc
  5746  010A  0008               	return
  5747                           
  5748                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5749  010B  087C               	movf	_Sw,w
  5750  010C  3E05               	addlw	5
  5751  010D  0086               	movwf	6
  5752  010E  3001               	movlw	1	; select bank2/3
  5753  010F  0087               	movwf	7
  5754  0110  3000               	movlw	0
  5755  0111  3FC0               	movwi [0]fsr1
  5756  0112  3FC1               	movwi [1]fsr1
  5757                           
  5758                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5759  0113  087C               	movf	_Sw,w
  5760  0114  0086               	movwf	6
  5761  0115  3001               	movlw	1	; select bank2/3
  5762  0116  0087               	movwf	7
  5763  0117  1601               	bsf	1,4
  5764                           
  5765                           ;Switch_B1.c: 183: setRF_Learn(1);
  5766  0118  3001               	movlw	1
  5767  0119  319D  258D  3180   	fcall	_setRF_Learn
  5768                           
  5769                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5770  011C  0021               	movlb	1	; select bank1
  5771  011D  1EA0               	btfss	_myMain^(0+128),5
  5772  011E  0008               	return
  5773                           
  5774                           ;Switch_B1.c: 186: setBuz(2, 100);
  5775  011F  3064               	movlw	100
  5776  0120  0020               	movlb	0	; select bank0
  5777  0121  00A9               	movwf	setBuz@time
  5778  0122  3000               	movlw	0
  5779  0123  00AA               	movwf	setBuz@time+1
  5780  0124  3002               	movlw	2
  5781  0125  3196  2639         	fcall	_setBuz
  5782                           
  5783                           ;Switch_B1.c: 187: }
  5784                           ;Switch_B1.c: 189: }
  5785                           ;Switch_B1.c: 190: } else {
  5786  0127  0008               	return
  5787  0128                     l7766:	
  5788                           
  5789                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5790  0128  087C               	movf	_Sw,w
  5791  0129  0086               	movwf	6
  5792  012A  3001               	movlw	1	; select bank2/3
  5793  012B  0087               	movwf	7
  5794  012C  1A81               	btfsc	1,5
  5795  012D  0008               	return
  5796                           
  5797                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5798  012E  087C               	movf	_Sw,w
  5799  012F  3E07               	addlw	7
  5800  0130  0086               	movwf	6
  5801  0131  3001               	movlw	1	; select bank2/3
  5802  0132  0087               	movwf	7
  5803  0133  3001               	movlw	1
  5804  0134  0781               	addwf	1,f
  5805  0135  3141               	addfsr 1,1
  5806  0136  1803               	skipnc
  5807  0137  0A81               	incf	1,f
  5808                           
  5809                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5810  0138  087C               	movf	_Sw,w
  5811  0139  3E07               	addlw	7
  5812  013A  0086               	movwf	6
  5813  013B  3001               	movlw	1	; select bank2/3
  5814  013C  0087               	movwf	7
  5815  013D  3F40               	moviw [0]fsr1
  5816  013E  0020               	movlb	0	; select bank0
  5817  013F  00B1               	movwf	??_setSw_Main
  5818  0140  3F41               	moviw [1]fsr1
  5819  0141  00B2               	movwf	??_setSw_Main+1
  5820  0142  3001               	movlw	1
  5821  0143  0232               	subwf	??_setSw_Main+1,w
  5822  0144  302C               	movlw	44
  5823  0145  1903               	skipnz
  5824  0146  0231               	subwf	??_setSw_Main,w
  5825  0147  1C03               	skipc
  5826  0148  0008               	return
  5827                           
  5828                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5829  0149  087C               	movf	_Sw,w
  5830  014A  3E07               	addlw	7
  5831  014B  0086               	movwf	6
  5832  014C  3001               	movlw	1	; select bank2/3
  5833  014D  0087               	movwf	7
  5834  014E  3000               	movlw	0
  5835  014F  3FC0               	movwi [0]fsr1
  5836  0150  3FC1               	movwi [1]fsr1
  5837                           
  5838                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5839  0151  087C               	movf	_Sw,w
  5840  0152  0086               	movwf	6
  5841  0153  3001               	movlw	1	; select bank2/3
  5842  0154  0087               	movwf	7
  5843  0155  1681               	bsf	1,5
  5844                           
  5845                           ;Switch_B1.c: 198: setRF_Learn(0);
  5846  0156  3000               	movlw	0
  5847  0157  319D  258D         	fcall	_setRF_Learn
  5848                           
  5849                           ;Switch_B1.c: 201: }
  5850                           ;Switch_B1.c: 202: }
  5851                           ;Switch_B1.c: 203: }
  5852                           ;Switch_B1.c: 204: }
  5853                           ;Switch_B1.c: 205: }
  5854                           ;Switch_B1.c: 206: } else {
  5855  0159  0008               	return
  5856  015A                     l7776:	
  5857                           
  5858                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5859  015A  087C               	movf	_Sw,w
  5860  015B  0086               	movwf	6
  5861  015C  3001               	movlw	1	; select bank2/3
  5862  015D  0087               	movwf	7
  5863  015E  1D01               	btfss	1,2
  5864  015F  0008               	return
  5865                           
  5866                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5867  0160  3001               	movlw	1
  5868  0161  0020               	movlb	0	; select bank0
  5869  0162  00B1               	movwf	??_setSw_Main
  5870  0163  087C               	movf	_Sw,w
  5871  0164  3E02               	addlw	2
  5872  0165  0086               	movwf	6
  5873  0166  3001               	movlw	1	; select bank2/3
  5874  0167  0087               	movwf	7
  5875  0168  0831               	movf	??_setSw_Main,w
  5876  0169  0781               	addwf	1,f
  5877                           
  5878                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5879  016A  087C               	movf	_Sw,w
  5880  016B  3E02               	addlw	2
  5881  016C  0086               	movwf	6
  5882  016D  3001               	movlw	1	; select bank2/3
  5883  016E  0087               	movwf	7
  5884  016F  3005               	movlw	5
  5885  0170  0201               	subwf	1,w
  5886  0171  1C03               	skipc
  5887  0172  0008               	return
  5888                           
  5889                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5890  0173  087C               	movf	_Sw,w
  5891  0174  3E02               	addlw	2
  5892  0175  0086               	movwf	6
  5893  0176  3001               	movlw	1	; select bank2/3
  5894  0177  0087               	movwf	7
  5895  0178  0181               	clrf	1
  5896                           
  5897                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5898  0179  087C               	movf	_Sw,w
  5899  017A  0086               	movwf	6
  5900  017B  3001               	movlw	1	; select bank2/3
  5901  017C  0087               	movwf	7
  5902  017D  1101               	bcf	1,2
  5903                           
  5904                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5905  017E  087C               	movf	_Sw,w
  5906  017F  3E03               	addlw	3
  5907  0180  0086               	movwf	6
  5908  0181  3001               	movlw	1	; select bank2/3
  5909  0182  0087               	movwf	7
  5910  0183  3000               	movlw	0
  5911  0184  3FC0               	movwi [0]fsr1
  5912  0185  3FC1               	movwi [1]fsr1
  5913                           
  5914                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5915  0186  087C               	movf	_Sw,w
  5916  0187  0086               	movwf	6
  5917  0188  3001               	movlw	1	; select bank2/3
  5918  0189  0087               	movwf	7
  5919  018A  1181               	bcf	1,3
  5920                           
  5921                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5922  018B  087C               	movf	_Sw,w
  5923  018C  3E05               	addlw	5
  5924  018D  0086               	movwf	6
  5925  018E  3001               	movlw	1	; select bank2/3
  5926  018F  0087               	movwf	7
  5927  0190  3000               	movlw	0
  5928  0191  3FC0               	movwi [0]fsr1
  5929  0192  3FC1               	movwi [1]fsr1
  5930                           
  5931                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5932  0193  087C               	movf	_Sw,w
  5933  0194  0086               	movwf	6
  5934  0195  3001               	movlw	1	; select bank2/3
  5935  0196  0087               	movwf	7
  5936  0197  1201               	bcf	1,4
  5937                           
  5938                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5939  0198  087C               	movf	_Sw,w
  5940  0199  3E07               	addlw	7
  5941  019A  0086               	movwf	6
  5942  019B  3001               	movlw	1	; select bank2/3
  5943  019C  0087               	movwf	7
  5944  019D  3000               	movlw	0
  5945  019E  3FC0               	movwi [0]fsr1
  5946  019F  3FC1               	movwi [1]fsr1
  5947                           
  5948                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5949  01A0  087C               	movf	_Sw,w
  5950  01A1  0086               	movwf	6
  5951  01A2  3001               	movlw	1	; select bank2/3
  5952  01A3  0087               	movwf	7
  5953  01A4  1281               	bcf	1,5
  5954                           
  5955                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5956  01A5  0021               	movlb	1	; select bank1
  5957  01A6  1852               	btfsc	_SwDetect^(0+128),0
  5958  01A7  29AD               	goto	l7802
  5959                           
  5960                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5961  01A8  0020               	movlb	0	; select bank0
  5962  01A9  0833               	movf	setSw_Main@sw,w
  5963  01AA  3194  245B  3180   	fcall	_setDimmerLights_SwOff
  5964  01AD                     l7802:	
  5965                           
  5966                           ;Switch_B1.c: 221: }
  5967                           ;Switch_B1.c: 224: setRF_Learn(0);
  5968  01AD  3000               	movlw	0
  5969  01AE  319D  258D         	fcall	_setRF_Learn
  5970                           
  5971                           ;Switch_B1.c: 226: }
  5972                           ;Switch_B1.c: 227: }
  5973                           ;Switch_B1.c: 228: }
  5974                           ;Switch_B1.c: 229: } else {
  5975  01B0  0008               	return
  5976  01B1                     l2396:	
  5977                           
  5978                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5979  01B1  0021               	movlb	1	; select bank1
  5980  01B2  1C20               	btfss	_myMain^(0+128),0
  5981  01B3  0008               	return
  5982                           
  5983                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5984  01B4  087C               	movf	_Sw,w
  5985  01B5  0086               	movwf	6
  5986  01B6  3001               	movlw	1	; select bank2/3
  5987  01B7  0087               	movwf	7
  5988  01B8  1401               	bsf	1,0
  5989  01B9  0008               	return
  5990  01BA                     __end_of_setSw_Main:	
  5991                           
  5992                           	psect	text14
  5993  1D8D                     __ptext14:	
  5994 ;; *************** function _setRF_Learn *****************
  5995 ;; Defined at:
  5996 ;;		line 23 in file "../src/RF_Control_B1.c"
  5997 ;; Parameters:    Size  Location     Type
  5998 ;;  command         1    wreg     unsigned char 
  5999 ;; Auto vars:     Size  Location     Type
  6000 ;;  command         1    1[BANK0 ] unsigned char 
  6001 ;; Return value:  Size  Location     Type
  6002 ;;		None               void
  6003 ;; Registers used:
  6004 ;;		wreg, status,2, status,0
  6005 ;; Tracked objects:
  6006 ;;		On entry : 0/0
  6007 ;;		On exit  : 0/0
  6008 ;;		Unchanged: 0/0
  6009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6011 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6012 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6013 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6014 ;;Total ram usage:        2 bytes
  6015 ;; Hardware stack levels used:    1
  6016 ;; Hardware stack levels required when called:    5
  6017 ;; This function calls:
  6018 ;;		Nothing
  6019 ;; This function is called by:
  6020 ;;		_setSw_Main
  6021 ;; This function uses a non-reentrant model
  6022 ;;
  6023                           
  6024                           
  6025                           ;psect for function _setRF_Learn
  6026  1D8D                     _setRF_Learn:	
  6027                           
  6028                           ;incstack = 0
  6029                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6030                           ;setRF_Learn@command stored from wreg
  6031  1D8D  0020               	movlb	0	; select bank0
  6032  1D8E  00A1               	movwf	setRF_Learn@command
  6033                           
  6034                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  6035  1D8F  0821               	movf	setRF_Learn@command,w
  6036  1D90  3A01               	xorlw	1
  6037  1D91  3000               	movlw	0
  6038  1D92  1903               	skipnz
  6039  1D93  3001               	movlw	1
  6040  1D94  00A0               	movwf	??_setRF_Learn
  6041  1D95  0EA0               	swapf	??_setRF_Learn,f
  6042  1D96  0DA0               	rlf	??_setRF_Learn,f
  6043  1D97  0DA0               	rlf	??_setRF_Learn,f
  6044  1D98  0021               	movlb	1	; select bank1
  6045  1D99  083B               	movf	_RF1^(0+128),w
  6046  1D9A  0020               	movlb	0	; select bank0
  6047  1D9B  0620               	xorwf	??_setRF_Learn,w
  6048  1D9C  39BF               	andlw	-65
  6049  1D9D  0620               	xorwf	??_setRF_Learn,w
  6050  1D9E  0021               	movlb	1	; select bank1
  6051  1D9F  00BB               	movwf	_RF1^(0+128)
  6052  1DA0  0008               	return
  6053  1DA1                     __end_of_setRF_Learn:	
  6054                           
  6055                           	psect	text15
  6056  124E                     __ptext15:	
  6057 ;; *************** function _setDimmerLights_AdjControl *****************
  6058 ;; Defined at:
  6059 ;;		line 558 in file "../src/Dimmer_B1.c"
  6060 ;; Parameters:    Size  Location     Type
  6061 ;;  sw              1    wreg     unsigned char 
  6062 ;; Auto vars:     Size  Location     Type
  6063 ;;  sw              1    8[BANK0 ] unsigned char 
  6064 ;;  idle            1    6[BANK0 ] unsigned char 
  6065 ;; Return value:  Size  Location     Type
  6066 ;;		None               void
  6067 ;; Registers used:
  6068 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6069 ;; Tracked objects:
  6070 ;;		On entry : 0/0
  6071 ;;		On exit  : 0/0
  6072 ;;		Unchanged: 0/0
  6073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6075 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6076 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6077 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6078 ;;Total ram usage:        4 bytes
  6079 ;; Hardware stack levels used:    1
  6080 ;; Hardware stack levels required when called:    7
  6081 ;; This function calls:
  6082 ;;		_DimmerLightsPointSelect
  6083 ;;		_getAll_DimmerLights_AdjGO
  6084 ;;		_setDimmerLights_TriggerAdj
  6085 ;; This function is called by:
  6086 ;;		_setSw_Main
  6087 ;; This function uses a non-reentrant model
  6088 ;;
  6089                           
  6090                           
  6091                           ;psect for function _setDimmerLights_AdjControl
  6092  124E                     _setDimmerLights_AdjControl:	
  6093                           
  6094                           ;incstack = 0
  6095                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6096                           ;setDimmerLights_AdjControl@sw stored from wreg
  6097  124E  0020               	movlb	0	; select bank0
  6098  124F  00A8               	movwf	setDimmerLights_AdjControl@sw
  6099                           
  6100                           ;Dimmer_B1.c: 559: DimmerLightsPointSelect(sw);
  6101  1250  0828               	movf	setDimmerLights_AdjControl@sw,w
  6102  1251  319C  24F1  3192   	fcall	_DimmerLightsPointSelect
  6103                           
  6104                           ;Dimmer_B1.c: 560: char idle = 0;
  6105  1254  0020               	movlb	0	; select bank0
  6106  1255  01A6               	clrf	setDimmerLights_AdjControl@idle
  6107                           
  6108                           ;Dimmer_B1.c: 562: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  6109  1256  01A7               	clrf	_setDimmerLights_AdjControl$2583
  6110  1257  319C  2476  3192   	fcall	_getAll_DimmerLights_AdjGO
  6111  125A  3A01               	xorlw	1
  6112  125B  1D03               	skipz
  6113  125C  2A63               	goto	l6936
  6114  125D  0022               	movlb	2	; select bank2
  6115  125E  1CBE               	btfss	_Dimmer^(0+256),1
  6116  125F  2A63               	goto	l6936
  6117  1260  0020               	movlb	0	; select bank0
  6118  1261  01A7               	clrf	_setDimmerLights_AdjControl$2583
  6119  1262  0AA7               	incf	_setDimmerLights_AdjControl$2583,f
  6120  1263                     l6936:	
  6121  1263  0020               	movlb	0	; select bank0
  6122  1264  0827               	movf	_setDimmerLights_AdjControl$2583,w
  6123  1265  00A5               	movwf	??_setDimmerLights_AdjControl
  6124  1266  0825               	movf	??_setDimmerLights_AdjControl,w
  6125  1267  00A6               	movwf	setDimmerLights_AdjControl@idle
  6126                           
  6127                           ;Dimmer_B1.c: 564: if (idle == 0) {
  6128  1268  08A6               	movf	setDimmerLights_AdjControl@idle,f
  6129  1269  1D03               	skipz
  6130  126A  0008               	return
  6131                           
  6132                           ;Dimmer_B1.c: 565: if (DimmerLights->SwFlag == 1) {
  6133  126B  086F               	movf	_DimmerLights,w
  6134  126C  3E09               	addlw	9
  6135  126D  0086               	movwf	6
  6136  126E  3001               	movlw	1	; select bank2/3
  6137  126F  0087               	movwf	7
  6138  1270  1F01               	btfss	1,6
  6139  1271  0008               	return
  6140                           
  6141                           ;Dimmer_B1.c: 566: DimmerLights->SwAdj = 1;
  6142  1272  086F               	movf	_DimmerLights,w
  6143  1273  3E09               	addlw	9
  6144  1274  0086               	movwf	6
  6145  1275  3001               	movlw	1	; select bank2/3
  6146  1276  0087               	movwf	7
  6147  1277  1781               	bsf	1,7
  6148                           
  6149                           ;Dimmer_B1.c: 567: DimmerLights->Status = 1;
  6150  1278  086F               	movf	_DimmerLights,w
  6151  1279  0086               	movwf	6
  6152  127A  3001               	movlw	1	; select bank2/3
  6153  127B  0087               	movwf	7
  6154  127C  1681               	bsf	1,5
  6155                           
  6156                           ;Dimmer_B1.c: 568: setDimmerLights_TriggerAdj(sw, 1);
  6157  127D  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6158  127E  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6159  127F  0828               	movf	setDimmerLights_AdjControl@sw,w
  6160  1280  319F  2718         	fcall	_setDimmerLights_TriggerAdj
  6161  1282  0008               	return
  6162  1283                     __end_of_setDimmerLights_AdjControl:	
  6163                           
  6164                           	psect	text16
  6165  1EF9                     __ptext16:	
  6166 ;; *************** function _getSw_KeyStatus *****************
  6167 ;; Defined at:
  6168 ;;		line 237 in file "../src/Switch_B1.c"
  6169 ;; Parameters:    Size  Location     Type
  6170 ;;  sw              1    wreg     unsigned char 
  6171 ;; Auto vars:     Size  Location     Type
  6172 ;;  sw              1    4[BANK0 ] unsigned char 
  6173 ;;  status          1    3[BANK0 ] unsigned char 
  6174 ;; Return value:  Size  Location     Type
  6175 ;;                  1    wreg      unsigned char 
  6176 ;; Registers used:
  6177 ;;		wreg, status,2
  6178 ;; Tracked objects:
  6179 ;;		On entry : 0/0
  6180 ;;		On exit  : 0/0
  6181 ;;		Unchanged: 0/0
  6182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6184 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6185 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6186 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6187 ;;Total ram usage:        5 bytes
  6188 ;; Hardware stack levels used:    1
  6189 ;; Hardware stack levels required when called:    5
  6190 ;; This function calls:
  6191 ;;		Nothing
  6192 ;; This function is called by:
  6193 ;;		_setSw_Main
  6194 ;; This function uses a non-reentrant model
  6195 ;;
  6196                           
  6197                           
  6198                           ;psect for function _getSw_KeyStatus
  6199  1EF9                     _getSw_KeyStatus:	
  6200                           
  6201                           ;incstack = 0
  6202                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6203                           ;getSw_KeyStatus@sw stored from wreg
  6204  1EF9  0020               	movlb	0	; select bank0
  6205  1EFA  00A4               	movwf	getSw_KeyStatus@sw
  6206                           
  6207                           ;Switch_B1.c: 238: char status = 0;
  6208  1EFB  01A3               	clrf	getSw_KeyStatus@status
  6209                           
  6210                           ;Switch_B1.c: 250: if (sw == 1) {
  6211  1EFC  0824               	movf	getSw_KeyStatus@sw,w
  6212  1EFD  3A01               	xorlw	1
  6213  1EFE  1D03               	skipz
  6214  1EFF  2F08               	goto	l7130
  6215                           
  6216                           ;Switch_B1.c: 251: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6217  1F00  01A1               	clrf	_getSw_KeyStatus$6345
  6218  1F01  0AA1               	incf	_getSw_KeyStatus$6345,f
  6219  1F02  1F0C               	btfss	12,6	;volatile
  6220  1F03  1A0C               	btfsc	12,4	;volatile
  6221  1F04  2F06               	goto	l7128
  6222  1F05  01A1               	clrf	_getSw_KeyStatus$6345
  6223  1F06                     l7128:	
  6224  1F06  0821               	movf	_getSw_KeyStatus$6345,w
  6225  1F07  2F13               	goto	L3
  6226  1F08                     l7130:	
  6227                           ;Switch_B1.c: 252: } else if (sw == 2) {
  6228                           
  6229  1F08  0824               	movf	getSw_KeyStatus@sw,w
  6230  1F09  3A02               	xorlw	2
  6231  1F0A  1D03               	skipz
  6232  1F0B  2F16               	goto	l7140
  6233                           
  6234                           ;Switch_B1.c: 253: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6235  1F0C  01A2               	clrf	_getSw_KeyStatus$6346
  6236  1F0D  0AA2               	incf	_getSw_KeyStatus$6346,f
  6237  1F0E  1C0C               	btfss	12,0	;volatile
  6238  1F0F  188D               	btfsc	13,1	;volatile
  6239  1F10  2F12               	goto	l7138
  6240  1F11  01A2               	clrf	_getSw_KeyStatus$6346
  6241  1F12                     l7138:	
  6242  1F12  0822               	movf	_getSw_KeyStatus$6346,w
  6243  1F13                     L3:	
  6244  1F13  00A0               	movwf	??_getSw_KeyStatus
  6245  1F14  0820               	movf	??_getSw_KeyStatus,w
  6246  1F15  00A3               	movwf	getSw_KeyStatus@status
  6247  1F16                     l7140:	
  6248                           
  6249                           ;Switch_B1.c: 254: }
  6250                           ;Switch_B1.c: 261: return status;
  6251  1F16  0823               	movf	getSw_KeyStatus@status,w
  6252  1F17  0008               	return
  6253  1F18                     __end_of_getSw_KeyStatus:	
  6254                           
  6255                           	psect	text17
  6256  1D79                     __ptext17:	
  6257 ;; *************** function _SwPointSelect *****************
  6258 ;; Defined at:
  6259 ;;		line 25 in file "../src/Switch_B1.c"
  6260 ;; Parameters:    Size  Location     Type
  6261 ;;  sw              1    wreg     unsigned char 
  6262 ;; Auto vars:     Size  Location     Type
  6263 ;;  sw              1    1[BANK0 ] unsigned char 
  6264 ;; Return value:  Size  Location     Type
  6265 ;;		None               void
  6266 ;; Registers used:
  6267 ;;		wreg
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : 0/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6274 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6275 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6276 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6277 ;;Total ram usage:        2 bytes
  6278 ;; Hardware stack levels used:    1
  6279 ;; Hardware stack levels required when called:    5
  6280 ;; This function calls:
  6281 ;;		Nothing
  6282 ;; This function is called by:
  6283 ;;		_setSw_Main
  6284 ;; This function uses a non-reentrant model
  6285 ;;
  6286                           
  6287                           
  6288                           ;psect for function _SwPointSelect
  6289  1D79                     _SwPointSelect:	
  6290                           
  6291                           ;incstack = 0
  6292                           ; Regs used in _SwPointSelect: [wreg]
  6293                           ;SwPointSelect@sw stored from wreg
  6294  1D79  0020               	movlb	0	; select bank0
  6295  1D7A  00A1               	movwf	SwPointSelect@sw
  6296                           
  6297                           ;Switch_B1.c: 28: if (sw == 1) {
  6298  1D7B  0821               	movf	SwPointSelect@sw,w
  6299  1D7C  3A01               	xorlw	1
  6300  1D7D  1D03               	skipz
  6301  1D7E  2D84               	goto	l7114
  6302                           
  6303                           ;Switch_B1.c: 29: Sw = &Sw1;
  6304  1D7F  30BE               	movlw	_Sw1& (0+255)
  6305  1D80  00A0               	movwf	??_SwPointSelect
  6306  1D81  0820               	movf	??_SwPointSelect,w
  6307  1D82  00FC               	movwf	_Sw
  6308                           
  6309                           ;Switch_B1.c: 30: }
  6310  1D83  0008               	return
  6311  1D84                     l7114:	
  6312                           
  6313                           ;Switch_B1.c: 33: else if (sw == 2) {
  6314  1D84  0821               	movf	SwPointSelect@sw,w
  6315  1D85  3A02               	xorlw	2
  6316  1D86  1D03               	skipz
  6317  1D87  0008               	return
  6318                           
  6319                           ;Switch_B1.c: 34: Sw = &Sw2;
  6320  1D88  30C7               	movlw	_Sw2& (0+255)
  6321  1D89  00A0               	movwf	??_SwPointSelect
  6322  1D8A  0820               	movf	??_SwPointSelect,w
  6323  1D8B  00FC               	movwf	_Sw
  6324  1D8C  0008               	return
  6325  1D8D                     __end_of_SwPointSelect:	
  6326                           
  6327                           	psect	text18
  6328  1747                     __ptext18:	
  6329 ;; *************** function _setMain_Exception *****************
  6330 ;; Defined at:
  6331 ;;		line 288 in file "../src/main_B1.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;  command         1    wreg     unsigned char 
  6334 ;; Auto vars:     Size  Location     Type
  6335 ;;  command         1   28[BANK0 ] unsigned char 
  6336 ;;  status          1   27[BANK0 ] unsigned char 
  6337 ;;  buz             1   24[BANK0 ] unsigned char 
  6338 ;; Return value:  Size  Location     Type
  6339 ;;		None               void
  6340 ;; Registers used:
  6341 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6342 ;; Tracked objects:
  6343 ;;		On entry : 0/0
  6344 ;;		On exit  : 0/0
  6345 ;;		Unchanged: 0/0
  6346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6348 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6349 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6350 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6351 ;;Total ram usage:        7 bytes
  6352 ;; Hardware stack levels used:    1
  6353 ;; Hardware stack levels required when called:   10
  6354 ;; This function calls:
  6355 ;;		_getDimmerLights_Line
  6356 ;;		_getMain_LightsStatus
  6357 ;;		_setBuz
  6358 ;;		_setDimmerLights_ErrorClose
  6359 ;;		_setLED
  6360 ;; This function is called by:
  6361 ;;		_Switch_Main
  6362 ;; This function uses a non-reentrant model
  6363 ;;
  6364                           
  6365                           
  6366                           ;psect for function _setMain_Exception
  6367  1747                     _setMain_Exception:	
  6368                           
  6369                           ;incstack = 0
  6370                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6371                           ;setMain_Exception@command stored from wreg
  6372  1747  0020               	movlb	0	; select bank0
  6373  1748  00BC               	movwf	setMain_Exception@command
  6374                           
  6375                           ;main_B1.c: 289: char status = 0, buz = 0;
  6376  1749  01BB               	clrf	setMain_Exception@status
  6377  174A  01B8               	clrf	setMain_Exception@buz
  6378                           
  6379                           ;main_B1.c: 306: status = command == 3 ? getDimmerLights_Line() : 255;
  6380  174B  083C               	movf	setMain_Exception@command,w
  6381  174C  3A03               	xorlw	3
  6382  174D  1903               	skipnz
  6383  174E  2F53               	goto	l7688
  6384  174F  30FF               	movlw	255
  6385  1750  00B9               	movwf	_setMain_Exception$7083
  6386  1751  3000               	movlw	0
  6387  1752  2F5C               	goto	L4
  6388  1753                     l7688:	
  6389  1753  319D  252A  3197   	fcall	_getDimmerLights_Line
  6390  1756  0020               	movlb	0	; select bank0
  6391  1757  00B6               	movwf	??_setMain_Exception
  6392  1758  01B7               	clrf	??_setMain_Exception+1
  6393  1759  0836               	movf	??_setMain_Exception,w
  6394  175A  00B9               	movwf	_setMain_Exception$7083
  6395  175B  0837               	movf	??_setMain_Exception+1,w
  6396  175C                     L4:	
  6397  175C  00BA               	movwf	_setMain_Exception$7083+1
  6398  175D  0839               	movf	_setMain_Exception$7083,w
  6399  175E  00B6               	movwf	??_setMain_Exception
  6400  175F  0836               	movf	??_setMain_Exception,w
  6401  1760  00BB               	movwf	setMain_Exception@status
  6402                           
  6403                           ;main_B1.c: 308: if (command == 0) {
  6404  1761  08BC               	movf	setMain_Exception@command,f
  6405  1762  1D03               	skipz
  6406  1763  2F66               	goto	l7696
  6407                           
  6408                           ;main_B1.c: 309: setLED(99, 10);
  6409  1764  300A               	movlw	10
  6410  1765  2F68               	goto	L5
  6411  1766                     l7696:	
  6412                           ;main_B1.c: 310: } else {
  6413                           
  6414                           
  6415                           ;main_B1.c: 311: setLED(99, 11);
  6416  1766  300B               	movlw	11
  6417  1767  0020               	movlb	0	; select bank0
  6418  1768                     L5:	
  6419  1768  00B6               	movwf	??_setMain_Exception
  6420  1769  0836               	movf	??_setMain_Exception,w
  6421  176A  00A2               	movwf	setLED@command
  6422  176B  3063               	movlw	99
  6423  176C  3195  253D  3197   	fcall	_setLED
  6424                           
  6425                           ;main_B1.c: 312: }
  6426                           ;main_B1.c: 314: if (command != 0) {
  6427  176F  0020               	movlb	0	; select bank0
  6428  1770  083C               	movf	setMain_Exception@command,w
  6429  1771  1903               	btfsc	3,2
  6430  1772  0008               	return
  6431                           
  6432                           ;main_B1.c: 315: switch (command) {
  6433  1773  2F94               	goto	l7712
  6434  1774                     l7702:	
  6435                           ;main_B1.c: 316: case 2:
  6436                           
  6437                           
  6438                           ;main_B1.c: 317: if (getMain_LightsStatus() == 1) {
  6439  1774  3191  2159  3197   	fcall	_getMain_LightsStatus
  6440  1777  3A01               	xorlw	1
  6441  1778  1D03               	skipz
  6442  1779  2F9D               	goto	l7714
  6443                           
  6444                           ;main_B1.c: 318: setBuz(10, 300);
  6445  177A  302C               	movlw	44
  6446  177B  0020               	movlb	0	; select bank0
  6447  177C  00A9               	movwf	setBuz@time
  6448  177D  3001               	movlw	1
  6449  177E  00AA               	movwf	setBuz@time+1
  6450  177F  300A               	movlw	10
  6451  1780  3196  2639  3197   	fcall	_setBuz
  6452                           
  6453                           ;main_B1.c: 319: }
  6454                           ;main_B1.c: 320: break;
  6455  1783  2F9D               	goto	l7714
  6456  1784                     l7706:	
  6457                           ;main_B1.c: 321: case 3:
  6458                           
  6459                           
  6460                           ;main_B1.c: 322: if (getMain_LightsStatus() == 1) {
  6461  1784  3191  2159  3197   	fcall	_getMain_LightsStatus
  6462  1787  3A01               	xorlw	1
  6463  1788  1D03               	skipz
  6464  1789  2F9D               	goto	l7714
  6465                           
  6466                           ;main_B1.c: 323: setBuz(5, 300);
  6467  178A  302C               	movlw	44
  6468  178B  0020               	movlb	0	; select bank0
  6469  178C  00A9               	movwf	setBuz@time
  6470  178D  3001               	movlw	1
  6471  178E  00AA               	movwf	setBuz@time+1
  6472  178F  3005               	movlw	5
  6473  1790  3196  2639  3197   	fcall	_setBuz
  6474                           
  6475                           ;main_B1.c: 326: }
  6476                           
  6477                           ;main_B1.c: 324: }
  6478                           ;main_B1.c: 325: break;
  6479  1793  2F9D               	goto	l7714
  6480  1794                     l7712:	
  6481  1794  0020               	movlb	0	; select bank0
  6482  1795  083C               	movf	setMain_Exception@command,w
  6483                           
  6484                           ; Switch size 1, requested type "space"
  6485                           ; Number of cases is 2, Range of values is 2 to 3
  6486                           ; switch strategies available:
  6487                           ; Name         Instructions Cycles
  6488                           ; simple_byte            7     4 (average)
  6489                           ; direct_byte           13     9 (fixed)
  6490                           ; jumptable            263     9 (fixed)
  6491                           ;	Chosen strategy is simple_byte
  6492  1796  3A02               	xorlw	2	; case 2
  6493  1797  1903               	skipnz
  6494  1798  2F74               	goto	l7702
  6495  1799  3A01               	xorlw	1	; case 3
  6496  179A  1903               	skipnz
  6497  179B  2F84               	goto	l7706
  6498  179C  2F9D               	goto	l7714
  6499  179D                     l7714:	
  6500                           
  6501                           ;main_B1.c: 327: setDimmerLights_ErrorClose(status);
  6502  179D  0020               	movlb	0	; select bank0
  6503  179E  083B               	movf	setMain_Exception@status,w
  6504  179F  3188  2000         	fcall	_setDimmerLights_ErrorClose
  6505  17A1  0020               	movlb	0	; select bank0
  6506  17A2  0008               	return
  6507  17A3                     __end_of_setMain_Exception:	
  6508                           
  6509                           	psect	text19
  6510  1D2A                     __ptext19:	
  6511 ;; *************** function _getDimmerLights_Line *****************
  6512 ;; Defined at:
  6513 ;;		line 707 in file "../src/Dimmer_B1.c"
  6514 ;; Parameters:    Size  Location     Type
  6515 ;;		None
  6516 ;; Auto vars:     Size  Location     Type
  6517 ;;  line            1    1[BANK0 ] unsigned char 
  6518 ;; Return value:  Size  Location     Type
  6519 ;;                  1    wreg      unsigned char 
  6520 ;; Registers used:
  6521 ;;		wreg, status,2
  6522 ;; Tracked objects:
  6523 ;;		On entry : 0/0
  6524 ;;		On exit  : 0/0
  6525 ;;		Unchanged: 0/0
  6526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6528 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6529 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6530 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6531 ;;Total ram usage:        2 bytes
  6532 ;; Hardware stack levels used:    1
  6533 ;; Hardware stack levels required when called:    5
  6534 ;; This function calls:
  6535 ;;		Nothing
  6536 ;; This function is called by:
  6537 ;;		_setMain_Exception
  6538 ;; This function uses a non-reentrant model
  6539 ;;
  6540                           
  6541                           
  6542                           ;psect for function _getDimmerLights_Line
  6543  1D2A                     _getDimmerLights_Line:	
  6544                           
  6545                           ;Dimmer_B1.c: 708: char line = 0;
  6546                           
  6547                           ;incstack = 0
  6548                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6549  1D2A  0020               	movlb	0	; select bank0
  6550  1D2B  01A1               	clrf	getDimmerLights_Line@line
  6551                           
  6552                           ;Dimmer_B1.c: 710: if (DimmerLights1.Line == 1) {
  6553  1D2C  0023               	movlb	3	; select bank3
  6554  1D2D  1C29               	btfss	(_DimmerLights1^(0+384)+9),0
  6555  1D2E  2D33               	goto	l864
  6556                           
  6557                           ;Dimmer_B1.c: 711: line = 1;
  6558  1D2F  0020               	movlb	0	; select bank0
  6559  1D30  01A1               	clrf	getDimmerLights_Line@line
  6560  1D31  0AA1               	incf	getDimmerLights_Line@line,f
  6561                           
  6562                           ;Dimmer_B1.c: 712: }
  6563  1D32  2D3A               	goto	l865
  6564  1D33                     l864:	
  6565                           
  6566                           ;Dimmer_B1.c: 715: else if (DimmerLights2.Line == 1) {
  6567  1D33  1C38               	btfss	(_DimmerLights2^(0+384)+9),0
  6568  1D34  2D3A               	goto	l865
  6569                           
  6570                           ;Dimmer_B1.c: 716: line = 2;
  6571  1D35  3002               	movlw	2
  6572  1D36  0020               	movlb	0	; select bank0
  6573  1D37  00A0               	movwf	??_getDimmerLights_Line
  6574  1D38  0820               	movf	??_getDimmerLights_Line,w
  6575  1D39  00A1               	movwf	getDimmerLights_Line@line
  6576  1D3A                     l865:	
  6577                           
  6578                           ;Dimmer_B1.c: 717: }
  6579                           ;Dimmer_B1.c: 724: return line;
  6580  1D3A  0020               	movlb	0	; select bank0
  6581  1D3B  0821               	movf	getDimmerLights_Line@line,w
  6582  1D3C  0008               	return
  6583  1D3D                     __end_of_getDimmerLights_Line:	
  6584                           
  6585                           	psect	text20
  6586  1C0C                     __ptext20:	
  6587 ;; *************** function _Switch_Initialization *****************
  6588 ;; Defined at:
  6589 ;;		line 46 in file "../src/Switch_B1.c"
  6590 ;; Parameters:    Size  Location     Type
  6591 ;;		None
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;		None
  6594 ;; Return value:  Size  Location     Type
  6595 ;;		None               void
  6596 ;; Registers used:
  6597 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6598 ;; Tracked objects:
  6599 ;;		On entry : 0/0
  6600 ;;		On exit  : 0/0
  6601 ;;		Unchanged: 0/0
  6602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6607 ;;Total ram usage:        0 bytes
  6608 ;; Hardware stack levels used:    1
  6609 ;; Hardware stack levels required when called:    8
  6610 ;; This function calls:
  6611 ;;		_TouchPower
  6612 ;;		_setSw_Initialization
  6613 ;; This function is called by:
  6614 ;;		_main
  6615 ;; This function uses a non-reentrant model
  6616 ;;
  6617                           
  6618                           
  6619                           ;psect for function _Switch_Initialization
  6620  1C0C                     _Switch_Initialization:	
  6621                           
  6622                           ;Switch_B1.c: 47: TouchPower();
  6623                           
  6624                           ;incstack = 0
  6625                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6626  1C0C  319D  25E0  319C   	fcall	_TouchPower
  6627                           
  6628                           ;Switch_B1.c: 49: WPUB1 = 0;
  6629  1C0F  0024               	movlb	4	; select bank4
  6630  1C10  108D               	bcf	13,1	;volatile
  6631                           
  6632                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6633  1C11  3001               	movlw	1
  6634  1C12  319B  2388  319C   	fcall	_setSw_Initialization
  6635                           
  6636                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6637  1C15  3002               	movlw	2
  6638  1C16  319B  2388         	fcall	_setSw_Initialization
  6639  1C18  0008               	return
  6640  1C19                     __end_of_Switch_Initialization:	
  6641                           
  6642                           	psect	text21
  6643  1B88                     __ptext21:	
  6644 ;; *************** function _setSw_Initialization *****************
  6645 ;; Defined at:
  6646 ;;		line 109 in file "../src/Switch_B1.c"
  6647 ;; Parameters:    Size  Location     Type
  6648 ;;  sw              1    wreg     unsigned char 
  6649 ;; Auto vars:     Size  Location     Type
  6650 ;;  sw              1    4[BANK0 ] unsigned char 
  6651 ;; Return value:  Size  Location     Type
  6652 ;;		None               void
  6653 ;; Registers used:
  6654 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6655 ;; Tracked objects:
  6656 ;;		On entry : 0/0
  6657 ;;		On exit  : 0/0
  6658 ;;		Unchanged: 0/0
  6659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6663 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6664 ;;Total ram usage:        1 bytes
  6665 ;; Hardware stack levels used:    1
  6666 ;; Hardware stack levels required when called:    7
  6667 ;; This function calls:
  6668 ;;		_setLED
  6669 ;; This function is called by:
  6670 ;;		_Switch_Initialization
  6671 ;; This function uses a non-reentrant model
  6672 ;;
  6673                           
  6674                           
  6675                           ;psect for function _setSw_Initialization
  6676  1B88                     _setSw_Initialization:	
  6677                           
  6678                           ;incstack = 0
  6679                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6680                           ;setSw_Initialization@sw stored from wreg
  6681  1B88  0020               	movlb	0	; select bank0
  6682  1B89  00A4               	movwf	setSw_Initialization@sw
  6683                           
  6684                           ;Switch_B1.c: 110: setLED(sw, 1);
  6685  1B8A  01A2               	clrf	setLED@command
  6686  1B8B  0AA2               	incf	setLED@command,f
  6687  1B8C  0824               	movf	setSw_Initialization@sw,w
  6688  1B8D  3195  253D         	fcall	_setLED
  6689  1B8F  0008               	return
  6690  1B90                     __end_of_setSw_Initialization:	
  6691                           
  6692                           	psect	text22
  6693  1DE0                     __ptext22:	
  6694 ;; *************** function _TouchPower *****************
  6695 ;; Defined at:
  6696 ;;		line 10 in file "../src/Switch_B1.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;		None
  6699 ;; Auto vars:     Size  Location     Type
  6700 ;;		None
  6701 ;; Return value:  Size  Location     Type
  6702 ;;		None               void
  6703 ;; Registers used:
  6704 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6714 ;;Total ram usage:        0 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; Hardware stack levels required when called:    6
  6717 ;; This function calls:
  6718 ;;		_Timeout_Counter
  6719 ;;		_set_TimeoutCleared
  6720 ;; This function is called by:
  6721 ;;		_Switch_Initialization
  6722 ;;		_Switch_Main
  6723 ;; This function uses a non-reentrant model
  6724 ;;
  6725                           
  6726                           
  6727                           ;psect for function _TouchPower
  6728  1DE0                     _TouchPower:	
  6729                           
  6730                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6731                           
  6732                           ;incstack = 0
  6733                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6734  1DE0  0020               	movlb	0	; select bank0
  6735  1DE1  1A8E               	btfsc	14,5	;volatile
  6736  1DE2  0008               	return
  6737                           
  6738                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6739  1DE3  0021               	movlb	1	; select bank1
  6740  1DE4  1C20               	btfss	_myMain^(0+128),0
  6741  1DE5  0008               	return
  6742  1DE6  2DEC               	goto	l7674
  6743  1DE7                     l2370:	
  6744                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6745                           
  6746                           
  6747                           ;Switch_B1.c: 14: RC5 = 1;
  6748  1DE7  0020               	movlb	0	; select bank0
  6749  1DE8  168E               	bsf	14,5	;volatile
  6750                           
  6751                           ;Switch_B1.c: 15: Timeout_Counter();
  6752  1DE9  319D  25A1  319D   	fcall	_Timeout_Counter
  6753  1DEC                     l7674:	
  6754  1DEC  0020               	movlb	0	; select bank0
  6755  1DED  1A8E               	btfsc	14,5	;volatile
  6756  1DEE  2DF2               	goto	l7678
  6757  1DEF  0021               	movlb	1	; select bank1
  6758  1DF0  1D2C               	btfss	(_myMain^(0+128)+12),2
  6759  1DF1  2DE7               	goto	l2370
  6760  1DF2                     l7678:	
  6761                           
  6762                           ;Switch_B1.c: 16: }
  6763                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6764  1DF2  319B  2343         	fcall	_set_TimeoutCleared
  6765  1DF4  0008               	return
  6766  1DF5                     __end_of_TouchPower:	
  6767                           
  6768                           	psect	text23
  6769  1B2A                     __ptext23:	
  6770 ;; *************** function _RF_Main *****************
  6771 ;; Defined at:
  6772 ;;		line 16 in file "../src/RF_Control_B1.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;		None
  6775 ;; Auto vars:     Size  Location     Type
  6776 ;;		None
  6777 ;; Return value:  Size  Location     Type
  6778 ;;		None               void
  6779 ;; Registers used:
  6780 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6781 ;; Tracked objects:
  6782 ;;		On entry : 0/0
  6783 ;;		On exit  : 0/0
  6784 ;;		Unchanged: 0/0
  6785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6790 ;;Total ram usage:        0 bytes
  6791 ;; Hardware stack levels used:    1
  6792 ;; Hardware stack levels required when called:   14
  6793 ;; This function calls:
  6794 ;;		_setRF_Main
  6795 ;; This function is called by:
  6796 ;;		_main
  6797 ;; This function uses a non-reentrant model
  6798 ;;
  6799                           
  6800                           
  6801                           ;psect for function _RF_Main
  6802  1B2A                     _RF_Main:	
  6803                           
  6804                           ;RF_Control_B1.c: 18: setRF_Main();
  6805                           
  6806                           ;incstack = 0
  6807                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6808  1B2A  3185  2530         	fcall	_setRF_Main
  6809  1B2C  0008               	return
  6810  1B2D                     __end_of_RF_Main:	
  6811                           
  6812                           	psect	text24
  6813  0530                     __ptext24:	
  6814 ;; *************** function _setRF_Main *****************
  6815 ;; Defined at:
  6816 ;;		line 52 in file "../src/RF_Control_B1.c"
  6817 ;; Parameters:    Size  Location     Type
  6818 ;;		None
  6819 ;; Auto vars:     Size  Location     Type
  6820 ;;  error           1    2[BANK1 ] unsigned char 
  6821 ;;  Receive_OK      1    1[BANK1 ] unsigned char 
  6822 ;;  loop_f          1    0[BANK1 ] unsigned char 
  6823 ;; Return value:  Size  Location     Type
  6824 ;;		None               void
  6825 ;; Registers used:
  6826 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6827 ;; Tracked objects:
  6828 ;;		On entry : 0/0
  6829 ;;		On exit  : 0/0
  6830 ;;		Unchanged: 0/0
  6831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6833 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6834 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6835 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6836 ;;Total ram usage:        4 bytes
  6837 ;; Hardware stack levels used:    1
  6838 ;; Hardware stack levels required when called:   13
  6839 ;; This function calls:
  6840 ;;		_CC2500_RxData
  6841 ;;		_CC2500_TxData
  6842 ;;		_CC2500_WriteCommand
  6843 ;;		_getBuz_GO
  6844 ;;		_getMain_All_Error_Status
  6845 ;;		_getRF_KeyStatus
  6846 ;;		_getRxData
  6847 ;; This function is called by:
  6848 ;;		_RF_Main
  6849 ;; This function uses a non-reentrant model
  6850 ;;
  6851                           
  6852                           
  6853                           ;psect for function _setRF_Main
  6854  0530                     _setRF_Main:	
  6855                           
  6856                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6857                           
  6858                           ;incstack = 0
  6859                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6860  0530  0021               	movlb	1	; select bank1
  6861  0531  01E9               	clrf	setRF_Main@loop_f^(0+128)
  6862  0532  01EA               	clrf	setRF_Main@Receive_OK^(0+128)
  6863  0533  01EB               	clrf	setRF_Main@error^(0+128)
  6864                           
  6865                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6866  0534  1C3B               	btfss	_RF1^(0+128),0
  6867  0535  2E13               	goto	l1966
  6868                           
  6869                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6870  0536  319C  2487  3185   	fcall	_getBuz_GO
  6871  0539  0020               	movlb	0	; select bank0
  6872  053A  0821               	movf	?_getBuz_GO+1,w
  6873  053B  0420               	iorwf	?_getBuz_GO,w
  6874  053C  1D03               	skipz
  6875  053D  0008               	return
  6876                           
  6877                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6878  053E  3000               	movlw	0
  6879  053F  3191  21E7  3185   	fcall	_getMain_All_Error_Status
  6880  0542  3800               	iorlw	0
  6881  0543  1D03               	skipz
  6882  0544  2D59               	goto	l1968
  6883                           
  6884                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6885  0545  319C  2498  3185   	fcall	_getRF_KeyStatus
  6886  0548  3A01               	xorlw	1
  6887  0549  3000               	movlw	0
  6888  054A  1903               	skipnz
  6889  054B  3001               	movlw	1
  6890  054C  0020               	movlb	0	; select bank0
  6891  054D  00ED               	movwf	??_setRF_Main
  6892  054E  0CED               	rrf	??_setRF_Main,f
  6893  054F  0CED               	rrf	??_setRF_Main,f
  6894  0550  0021               	movlb	1	; select bank1
  6895  0551  083B               	movf	_RF1^(0+128),w
  6896  0552  0020               	movlb	0	; select bank0
  6897  0553  066D               	xorwf	??_setRF_Main,w
  6898  0554  397F               	andlw	-129
  6899  0555  066D               	xorwf	??_setRF_Main,w
  6900  0556  0021               	movlb	1	; select bank1
  6901  0557  00BB               	movwf	_RF1^(0+128)
  6902                           
  6903                           ;RF_Control_B1.c: 65: } else {
  6904  0558  2D5B               	goto	l1969
  6905  0559                     l1968:	
  6906                           
  6907                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6908  0559  0021               	movlb	1	; select bank1
  6909  055A  13BB               	bcf	_RF1^(0+128),7
  6910  055B                     l1969:	
  6911                           
  6912                           ;RF_Control_B1.c: 70: }
  6913                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  6914  055B  1BBB               	btfsc	_RF1^(0+128),7
  6915  055C  1B3B               	btfsc	_RF1^(0+128),6
  6916  055D  2D63               	goto	l1970
  6917                           
  6918                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  6919  055E  01BD               	clrf	(_RF1^(0+128)+2)
  6920  055F  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6921                           
  6922                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  6923  0560  14BC               	bsf	(_RF1^(0+128)+1),1
  6924                           
  6925                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  6926  0561  11BB               	bcf	_RF1^(0+128),3
  6927                           
  6928                           ;RF_Control_B1.c: 76: } else {
  6929  0562  0008               	return
  6930  0563                     l1970:	
  6931                           
  6932                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6933  0563  18BC               	btfsc	(_RF1^(0+128)+1),1
  6934  0564  1B3B               	btfsc	_RF1^(0+128),6
  6935  0565  2D7A               	goto	l7590
  6936                           
  6937                           ;RF_Control_B1.c: 78: RF1.Count++;
  6938  0566  3001               	movlw	1
  6939  0567  07BD               	addwf	(_RF1^(0+128)+2),f
  6940  0568  3000               	movlw	0
  6941  0569  3DBE               	addwfc	((_RF1+1)^(0+128)+2),f
  6942                           
  6943                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6944  056A  3002               	movlw	2
  6945  056B  3EBB               	addlw	_RF1& (0+255)
  6946  056C  0086               	movwf	6
  6947  056D  0187               	clrf	7
  6948  056E  3F40               	moviw [0]fsr1
  6949  056F  0642               	xorwf	(_RF1^(0+128)+7),w
  6950  0570  1D03               	skipz
  6951  0571  2D74               	goto	u7135
  6952  0572  3F41               	moviw [1]fsr1
  6953  0573  0643               	xorwf	((_RF1+1)^(0+128)+7),w
  6954  0574                     u7135:	
  6955  0574  1D03               	skipz
  6956  0575  2DE0               	goto	l7642
  6957                           
  6958                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6959  0576  01BD               	clrf	(_RF1^(0+128)+2)
  6960  0577  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6961                           
  6962                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6963  0578  10BC               	bcf	(_RF1^(0+128)+1),1
  6964                           
  6965                           ;RF_Control_B1.c: 82: }
  6966                           ;RF_Control_B1.c: 83: } else {
  6967  0579  2DE0               	goto	l7642
  6968  057A                     l7590:	
  6969                           
  6970                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6971  057A  01BD               	clrf	(_RF1^(0+128)+2)
  6972  057B  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6973                           
  6974                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6975  057C  10BC               	bcf	(_RF1^(0+128)+1),1
  6976                           
  6977                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6978  057D  193B               	btfsc	_RF1^(0+128),2
  6979  057E  1B3B               	btfsc	_RF1^(0+128),6
  6980  057F  2D93               	goto	l1975
  6981                           
  6982                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6983  0580  113B               	bcf	_RF1^(0+128),2
  6984                           
  6985                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6986  0581  11BB               	bcf	_RF1^(0+128),3
  6987                           
  6988                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6989  0582  10BB               	bcf	_RF1^(0+128),1
  6990                           
  6991                           ;RF_Control_B1.c: 94: if (RF1.RxStatus == 1 || RF1.ReceiveGO == 1) {
  6992  0583  19BB               	btfsc	_RF1^(0+128),3
  6993  0584  2D87               	goto	l7602
  6994  0585  1CBB               	btfss	_RF1^(0+128),1
  6995  0586  2D8F               	goto	l1976
  6996  0587                     l7602:	
  6997                           
  6998                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x36);
  6999  0587  3036               	movlw	54
  7000  0588  319E  2639  3185   	fcall	_CC2500_WriteCommand
  7001                           
  7002                           ;RF_Control_B1.c: 97: CC2500_WriteCommand(0x3A);
  7003  058B  303A               	movlw	58
  7004  058C  319E  2639  3185   	fcall	_CC2500_WriteCommand
  7005  058F                     l1976:	
  7006                           
  7007                           ;RF_Control_B1.c: 99: }
  7008                           ;RF_Control_B1.c: 100: CC2500_TxData();
  7009  058F  3189  2118  3185   	fcall	_CC2500_TxData
  7010                           
  7011                           ;RF_Control_B1.c: 102: } else {
  7012  0592  2DE0               	goto	l7642
  7013  0593                     l1975:	
  7014                           
  7015                           ;RF_Control_B1.c: 104: if (RF1.RxStatus == 1) {
  7016  0593  1DBB               	btfss	_RF1^(0+128),3
  7017  0594  2DCF               	goto	l1980
  7018                           
  7019                           ;RF_Control_B1.c: 106: CC2500_RxData();
  7020  0595  318B  2373  3185   	fcall	_CC2500_RxData
  7021                           
  7022                           ;RF_Control_B1.c: 107: if (RF1.ReceiveGO == 1) {
  7023  0598  0021               	movlb	1	; select bank1
  7024  0599  1CBB               	btfss	_RF1^(0+128),1
  7025  059A  2DE0               	goto	l7642
  7026                           
  7027                           ;RF_Control_B1.c: 108: RF1.ReceiveGO = 0;
  7028  059B  10BB               	bcf	_RF1^(0+128),1
  7029                           
  7030                           ;RF_Control_B1.c: 109: RF1.Correction = 0;
  7031  059C  12BC               	bcf	(_RF1^(0+128)+1),5
  7032                           
  7033                           ;RF_Control_B1.c: 110: RF1.CorrectionCounter = 0;
  7034  059D  01C5               	clrf	(_RF1^(0+128)+10)
  7035  059E  01C6               	clrf	((_RF1+1)^(0+128)+10)
  7036                           
  7037                           ;RF_Control_B1.c: 119: getRxData();
  7038  059F  318D  256E  3185   	fcall	_getRxData
  7039                           
  7040                           ;RF_Control_B1.c: 121: getRxData();
  7041  05A2  318D  256E  3185   	fcall	_getRxData
  7042                           
  7043                           ;RF_Control_B1.c: 122: RF1.Run = 1;
  7044  05A5  0021               	movlb	1	; select bank1
  7045  05A6  14BC               	bsf	(_RF1^(0+128)+1),1
  7046                           
  7047                           ;RF_Control_B1.c: 124: if (RF1.Checked == 1) {
  7048  05A7  1DBC               	btfss	(_RF1^(0+128)+1),3
  7049  05A8  2DB6               	goto	l7626
  7050                           
  7051                           ;RF_Control_B1.c: 125: if (RF1.RunTime > 10) {
  7052  05A9  3000               	movlw	0
  7053  05AA  0243               	subwf	((_RF1+1)^(0+128)+7),w
  7054  05AB  300B               	movlw	11
  7055  05AC  1903               	skipnz
  7056  05AD  0242               	subwf	(_RF1^(0+128)+7),w
  7057  05AE  1C03               	skipc
  7058  05AF  2DB4               	goto	l7624
  7059                           
  7060                           ;RF_Control_B1.c: 126: RF1.RunTime = 10;
  7061  05B0  300A               	movlw	10
  7062  05B1  00C2               	movwf	(_RF1^(0+128)+7)
  7063  05B2  3000               	movlw	0
  7064  05B3  00C3               	movwf	(_RF1^(0+128)+8)
  7065  05B4                     l7624:	
  7066                           
  7067                           ;RF_Control_B1.c: 127: }
  7068                           ;RF_Control_B1.c: 128: RF1.CheckCount = 0;
  7069  05B4  01BF               	clrf	(_RF1^(0+128)+4)
  7070                           
  7071                           ;RF_Control_B1.c: 129: } else {
  7072  05B5  2DE0               	goto	l7642
  7073  05B6                     l7626:	
  7074                           
  7075                           ;RF_Control_B1.c: 130: RF1.CheckCount++;
  7076  05B6  3001               	movlw	1
  7077  05B7  0020               	movlb	0	; select bank0
  7078  05B8  00ED               	movwf	??_setRF_Main
  7079  05B9  086D               	movf	??_setRF_Main,w
  7080  05BA  0021               	movlb	1	; select bank1
  7081  05BB  07BF               	addwf	(_RF1^(0+128)+4),f
  7082                           
  7083                           ;RF_Control_B1.c: 131: if (RF1.CheckCount == 2) {
  7084  05BC  083F               	movf	(_RF1^(0+128)+4),w
  7085  05BD  3A02               	xorlw	2
  7086  05BE  1D03               	skipz
  7087  05BF  2DE0               	goto	l7642
  7088                           
  7089                           ;RF_Control_B1.c: 132: RF1.CheckCount = 0;
  7090  05C0  01BF               	clrf	(_RF1^(0+128)+4)
  7091                           
  7092                           ;RF_Control_B1.c: 133: RF1.CheckedCounter = 0;
  7093  05C1  01C0               	clrf	(_RF1^(0+128)+5)
  7094  05C2  01C1               	clrf	((_RF1+1)^(0+128)+5)
  7095                           
  7096                           ;RF_Control_B1.c: 134: if (RF1.RunTime < 200) {
  7097  05C3  3000               	movlw	0
  7098  05C4  0243               	subwf	((_RF1+1)^(0+128)+7),w
  7099  05C5  30C8               	movlw	200
  7100  05C6  1903               	skipnz
  7101  05C7  0242               	subwf	(_RF1^(0+128)+7),w
  7102  05C8  1803               	skipnc
  7103  05C9  2DE0               	goto	l7642
  7104                           
  7105                           ;RF_Control_B1.c: 135: RF1.RunTime += 10;
  7106  05CA  300A               	movlw	10
  7107  05CB  07C2               	addwf	(_RF1^(0+128)+7),f
  7108  05CC  3000               	movlw	0
  7109  05CD  3DC3               	addwfc	((_RF1+1)^(0+128)+7),f
  7110                           
  7111                           ;RF_Control_B1.c: 136: }
  7112                           ;RF_Control_B1.c: 137: }
  7113                           ;RF_Control_B1.c: 138: }
  7114                           ;RF_Control_B1.c: 139: }
  7115                           ;RF_Control_B1.c: 140: } else {
  7116  05CE  2DE0               	goto	l7642
  7117  05CF                     l1980:	
  7118                           
  7119                           ;RF_Control_B1.c: 142: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7120  05CF  1DBB               	btfss	_RF1^(0+128),3
  7121  05D0  18BB               	btfsc	_RF1^(0+128),1
  7122  05D1  2DE0               	goto	l7642
  7123                           
  7124                           ;RF_Control_B1.c: 143: RF1.RxStatus = 1;
  7125  05D2  15BB               	bsf	_RF1^(0+128),3
  7126                           
  7127                           ;RF_Control_B1.c: 144: RF1.Correction = 1;
  7128  05D3  16BC               	bsf	(_RF1^(0+128)+1),5
  7129                           
  7130                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x36);
  7131  05D4  3036               	movlw	54
  7132  05D5  319E  2639  3185   	fcall	_CC2500_WriteCommand
  7133                           
  7134                           ;RF_Control_B1.c: 148: CC2500_WriteCommand(0x3A);
  7135  05D8  303A               	movlw	58
  7136  05D9  319E  2639  3185   	fcall	_CC2500_WriteCommand
  7137                           
  7138                           ;RF_Control_B1.c: 149: CC2500_WriteCommand(0x34);
  7139  05DC  3034               	movlw	52
  7140  05DD  319E  2639  3185   	fcall	_CC2500_WriteCommand
  7141  05E0                     l7642:	
  7142                           
  7143                           ;RF_Control_B1.c: 151: }
  7144                           ;RF_Control_B1.c: 153: }
  7145                           ;RF_Control_B1.c: 154: }
  7146                           ;RF_Control_B1.c: 155: }
  7147                           ;RF_Control_B1.c: 156: if (RF1.RxStatus == 1) {
  7148  05E0  0021               	movlb	1	; select bank1
  7149  05E1  1DBB               	btfss	_RF1^(0+128),3
  7150  05E2  2E01               	goto	l7654
  7151                           
  7152                           ;RF_Control_B1.c: 157: RF1.CheckedCounter++;
  7153  05E3  3001               	movlw	1
  7154  05E4  07C0               	addwf	(_RF1^(0+128)+5),f
  7155  05E5  3000               	movlw	0
  7156  05E6  3DC1               	addwfc	((_RF1+1)^(0+128)+5),f
  7157                           
  7158                           ;RF_Control_B1.c: 158: if (RF1.CheckedCounter == 100) {
  7159  05E7  3005               	movlw	5
  7160  05E8  3EBB               	addlw	_RF1& (0+255)
  7161  05E9  0086               	movwf	6
  7162  05EA  0187               	clrf	7
  7163  05EB  3F40               	moviw [0]fsr1
  7164  05EC  3A64               	xorlw	100
  7165  05ED  1D03               	skipz
  7166  05EE  2DF1               	goto	u7275
  7167  05EF  3F41               	moviw [1]fsr1
  7168  05F0  3A00               	xorlw	0
  7169  05F1                     u7275:	
  7170  05F1  1D03               	skipz
  7171  05F2  2E01               	goto	l7654
  7172                           
  7173                           ;RF_Control_B1.c: 159: RF1.CheckedCounter = 0;
  7174  05F3  01C0               	clrf	(_RF1^(0+128)+5)
  7175  05F4  01C1               	clrf	((_RF1+1)^(0+128)+5)
  7176                           
  7177                           ;RF_Control_B1.c: 160: RF1.CheckCount = 0;
  7178  05F5  01BF               	clrf	(_RF1^(0+128)+4)
  7179                           
  7180                           ;RF_Control_B1.c: 161: if (RF1.RunTime > 10) {
  7181  05F6  3000               	movlw	0
  7182  05F7  0243               	subwf	((_RF1+1)^(0+128)+7),w
  7183  05F8  300B               	movlw	11
  7184  05F9  1903               	skipnz
  7185  05FA  0242               	subwf	(_RF1^(0+128)+7),w
  7186  05FB  1C03               	skipc
  7187  05FC  2E01               	goto	l7654
  7188                           
  7189                           ;RF_Control_B1.c: 162: RF1.RunTime -= 10;
  7190  05FD  300A               	movlw	10
  7191  05FE  02C2               	subwf	(_RF1^(0+128)+7),f
  7192  05FF  3000               	movlw	0
  7193  0600  3BC3               	subwfb	((_RF1+1)^(0+128)+7),f
  7194  0601                     l7654:	
  7195                           
  7196                           ;RF_Control_B1.c: 163: }
  7197                           ;RF_Control_B1.c: 164: }
  7198                           ;RF_Control_B1.c: 165: }
  7199                           ;RF_Control_B1.c: 166: if (RF1.Correction == 1) {
  7200  0601  1EBC               	btfss	(_RF1^(0+128)+1),5
  7201  0602  0008               	return
  7202                           
  7203                           ;RF_Control_B1.c: 167: RF1.CorrectionCounter++;
  7204  0603  3001               	movlw	1
  7205  0604  07C5               	addwf	(_RF1^(0+128)+10),f
  7206  0605  3000               	movlw	0
  7207  0606  3DC6               	addwfc	((_RF1+1)^(0+128)+10),f
  7208                           
  7209                           ;RF_Control_B1.c: 168: if (RF1.CorrectionCounter >= 30000) {
  7210  0607  3075               	movlw	117
  7211  0608  0246               	subwf	((_RF1+1)^(0+128)+10),w
  7212  0609  3030               	movlw	48
  7213  060A  1903               	skipnz
  7214  060B  0245               	subwf	(_RF1^(0+128)+10),w
  7215  060C  1C03               	skipc
  7216  060D  0008               	return
  7217                           
  7218                           ;RF_Control_B1.c: 169: RF1.CorrectionCounter = 0;
  7219  060E  01C5               	clrf	(_RF1^(0+128)+10)
  7220  060F  01C6               	clrf	((_RF1+1)^(0+128)+10)
  7221                           
  7222                           ;RF_Control_B1.c: 170: RF1.RxStatus = 0;
  7223  0610  11BB               	bcf	_RF1^(0+128),3
  7224                           
  7225                           ;RF_Control_B1.c: 171: RF1.ReceiveGO = 0;
  7226  0611  10BB               	bcf	_RF1^(0+128),1
  7227                           
  7228                           ;RF_Control_B1.c: 172: }
  7229                           ;RF_Control_B1.c: 173: }
  7230                           ;RF_Control_B1.c: 174: }
  7231                           ;RF_Control_B1.c: 175: }
  7232                           ;RF_Control_B1.c: 182: } else {
  7233  0612  0008               	return
  7234  0613                     l1966:	
  7235                           
  7236                           ;RF_Control_B1.c: 183: if (myMain.PowerON == 1) {
  7237  0613  1C20               	btfss	_myMain^(0+128),0
  7238  0614  0008               	return
  7239                           
  7240                           ;RF_Control_B1.c: 184: RF1.Enable = 1;
  7241  0615  143B               	bsf	_RF1^(0+128),0
  7242  0616  0008               	return
  7243  0617                     __end_of_setRF_Main:	
  7244                           
  7245                           	psect	text25
  7246  0D6E                     __ptext25:	
  7247 ;; *************** function _getRxData *****************
  7248 ;; Defined at:
  7249 ;;		line 274 in file "../src/RF_Control_B1.c"
  7250 ;; Parameters:    Size  Location     Type
  7251 ;;		None
  7252 ;; Auto vars:     Size  Location     Type
  7253 ;;  error           1   76[BANK0 ] unsigned char 
  7254 ;; Return value:  Size  Location     Type
  7255 ;;		None               void
  7256 ;; Registers used:
  7257 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7258 ;; Tracked objects:
  7259 ;;		On entry : 0/0
  7260 ;;		On exit  : 0/0
  7261 ;;		Unchanged: 0/0
  7262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7264 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7265 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7266 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7267 ;;Total ram usage:        2 bytes
  7268 ;; Hardware stack levels used:    1
  7269 ;; Hardware stack levels required when called:   12
  7270 ;; This function calls:
  7271 ;;		_getMain_All_Error_Status
  7272 ;;		_setControl_Lights_Table
  7273 ;;		_setLog_Code
  7274 ;;		_setTxData
  7275 ;; This function is called by:
  7276 ;;		_setRF_Main
  7277 ;; This function uses a non-reentrant model
  7278 ;;
  7279                           
  7280                           
  7281                           ;psect for function _getRxData
  7282  0D6E                     _getRxData:	
  7283                           
  7284                           ;RF_Control_B1.c: 275: char error = getMain_All_Error_Status(0);
  7285                           
  7286                           ;incstack = 0
  7287                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7288  0D6E  3000               	movlw	0
  7289  0D6F  3191  21E7  318D   	fcall	_getMain_All_Error_Status
  7290  0D72  0020               	movlb	0	; select bank0
  7291  0D73  00EB               	movwf	??_getRxData
  7292  0D74  086B               	movf	??_getRxData,w
  7293  0D75  00EC               	movwf	getRxData@error
  7294                           
  7295                           ;RF_Control_B1.c: 276: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7296  0D76  0022               	movlb	2	; select bank2
  7297  0D77  0820               	movf	_RF_Data^(0+256),w
  7298  0D78  3AAA               	xorlw	170
  7299  0D79  1D03               	skipz
  7300  0D7A  2D91               	goto	l7064
  7301  0D7B  0821               	movf	(_RF_Data^(0+256)+1),w
  7302  0D7C  3A01               	xorlw	1
  7303  0D7D  1D03               	skipz
  7304  0D7E  2D91               	goto	l7064
  7305                           
  7306                           ;RF_Control_B1.c: 278: product->Data[2] = 0x55;
  7307  0D7F  3055               	movlw	85
  7308  0D80  0020               	movlb	0	; select bank0
  7309  0D81  00EB               	movwf	??_getRxData
  7310  0D82  086E               	movf	_product,w
  7311  0D83  3E02               	addlw	2
  7312  0D84  0086               	movwf	6
  7313  0D85  3002               	movlw	2	; select bank4/5
  7314  0D86  0087               	movwf	7
  7315  0D87  086B               	movf	??_getRxData,w
  7316  0D88  0081               	movwf	1
  7317                           
  7318                           ;RF_Control_B1.c: 279: setTxData();
  7319  0D89  3186  26F3         	fcall	_setTxData
  7320                           
  7321                           ;RF_Control_B1.c: 280: RF1.RunTime = 10;
  7322  0D8B  300A               	movlw	10
  7323  0D8C  0021               	movlb	1	; select bank1
  7324  0D8D  00C2               	movwf	(_RF1^(0+128)+7)
  7325  0D8E  3000               	movlw	0
  7326  0D8F  00C3               	movwf	(_RF1^(0+128)+8)
  7327                           
  7328                           ;RF_Control_B1.c: 286: } else {
  7329  0D90  0008               	return
  7330  0D91                     l7064:	
  7331                           
  7332                           ;RF_Control_B1.c: 288: if (error == 0) {
  7333  0D91  0020               	movlb	0	; select bank0
  7334  0D92  08EC               	movf	getRxData@error,f
  7335  0D93  1D03               	skipz
  7336  0D94  0008               	return
  7337                           
  7338                           ;RF_Control_B1.c: 289: if (RF1.Learn == 1) {
  7339  0D95  0021               	movlb	1	; select bank1
  7340  0D96  1F3B               	btfss	_RF1^(0+128),6
  7341  0D97  2DA8               	goto	l7076
  7342                           
  7343                           ;RF_Control_B1.c: 290: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7344  0D98  0022               	movlb	2	; select bank2
  7345  0D99  08A0               	movf	_RF_Data^(0+256),f
  7346  0D9A  1D03               	skipz
  7347  0D9B  2DA5               	goto	l2022
  7348  0D9C  0821               	movf	(_RF_Data^(0+256)+1),w
  7349  0D9D  3A64               	xorlw	100
  7350  0D9E  1D03               	skipz
  7351  0D9F  2DA5               	goto	l2022
  7352                           
  7353                           ;RF_Control_B1.c: 291: setLog_Code();
  7354  0DA0  3192  22B9         	fcall	_setLog_Code
  7355                           
  7356                           ;RF_Control_B1.c: 292: RF1.Checked = 1;
  7357  0DA2  0021               	movlb	1	; select bank1
  7358  0DA3  15BC               	bsf	(_RF1^(0+128)+1),3
  7359                           
  7360                           ;RF_Control_B1.c: 293: } else {
  7361  0DA4  0008               	return
  7362  0DA5                     l2022:	
  7363                           
  7364                           ;RF_Control_B1.c: 294: RF1.Checked = 0;
  7365  0DA5  0021               	movlb	1	; select bank1
  7366  0DA6  11BC               	bcf	(_RF1^(0+128)+1),3
  7367                           
  7368                           ;RF_Control_B1.c: 295: }
  7369                           ;RF_Control_B1.c: 296: } else {
  7370  0DA7  0008               	return
  7371  0DA8                     l7076:	
  7372                           
  7373                           ;RF_Control_B1.c: 297: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7374  0DA8  0022               	movlb	2	; select bank2
  7375  0DA9  08A0               	movf	_RF_Data^(0+256),f
  7376  0DAA  1D03               	skipz
  7377  0DAB  2DE6               	goto	l7098
  7378  0DAC  0821               	movf	(_RF_Data^(0+256)+1),w
  7379  0DAD  3A02               	xorlw	2
  7380  0DAE  1D03               	skipz
  7381  0DAF  2DE6               	goto	l7098
  7382                           
  7383                           ;RF_Control_B1.c: 299: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7384  0DB0  082C               	movf	(_RF_Data^(0+256)+12),w
  7385  0DB1  3AFF               	xorlw	255
  7386  0DB2  1D03               	skipz
  7387  0DB3  2DC0               	goto	l7088
  7388  0DB4  082D               	movf	(_RF_Data^(0+256)+13),w
  7389  0DB5  3AFF               	xorlw	255
  7390  0DB6  1D03               	skipz
  7391  0DB7  2DC0               	goto	l7088
  7392  0DB8  082E               	movf	(_RF_Data^(0+256)+14),w
  7393  0DB9  3AFF               	xorlw	255
  7394  0DBA  1D03               	skipz
  7395  0DBB  2DC0               	goto	l7088
  7396                           
  7397                           ;RF_Control_B1.c: 300: __nop();
  7398  0DBC  0000               	nop
  7399                           
  7400                           ;RF_Control_B1.c: 301: RF1.Checked = 0;
  7401  0DBD  0021               	movlb	1	; select bank1
  7402  0DBE  11BC               	bcf	(_RF1^(0+128)+1),3
  7403                           
  7404                           ;RF_Control_B1.c: 302: } else {
  7405  0DBF  0008               	return
  7406  0DC0                     l7088:	
  7407                           
  7408                           ;RF_Control_B1.c: 303: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7409  0DC0  0020               	movlb	0	; select bank0
  7410  0DC1  086E               	movf	_product,w
  7411  0DC2  3E0C               	addlw	12
  7412  0DC3  0086               	movwf	6
  7413  0DC4  3002               	movlw	2	; select bank4/5
  7414  0DC5  0087               	movwf	7
  7415  0DC6  0022               	movlb	2	; select bank2
  7416  0DC7  082C               	movf	(_RF_Data^(0+256)+12),w
  7417  0DC8  0601               	xorwf	1,w
  7418  0DC9  1D03               	skipz
  7419  0DCA  0008               	return
  7420  0DCB  0020               	movlb	0	; select bank0
  7421  0DCC  086E               	movf	_product,w
  7422  0DCD  3E0D               	addlw	13
  7423  0DCE  0086               	movwf	6
  7424  0DCF  3002               	movlw	2	; select bank4/5
  7425  0DD0  0087               	movwf	7
  7426  0DD1  0022               	movlb	2	; select bank2
  7427  0DD2  082D               	movf	(_RF_Data^(0+256)+13),w
  7428  0DD3  0601               	xorwf	1,w
  7429  0DD4  1D03               	skipz
  7430  0DD5  0008               	return
  7431  0DD6  0020               	movlb	0	; select bank0
  7432  0DD7  086E               	movf	_product,w
  7433  0DD8  3E0E               	addlw	14
  7434  0DD9  0086               	movwf	6
  7435  0DDA  3002               	movlw	2	; select bank4/5
  7436  0DDB  0087               	movwf	7
  7437  0DDC  0022               	movlb	2	; select bank2
  7438  0DDD  082E               	movf	(_RF_Data^(0+256)+14),w
  7439  0DDE  0601               	xorwf	1,w
  7440  0DDF  1D03               	skipz
  7441  0DE0  0008               	return
  7442                           
  7443                           ;RF_Control_B1.c: 304: setControl_Lights_Table();
  7444  0DE1  318B  230B         	fcall	_setControl_Lights_Table
  7445                           
  7446                           ;RF_Control_B1.c: 305: RF1.Checked = 1;
  7447  0DE3  0021               	movlb	1	; select bank1
  7448  0DE4  15BC               	bsf	(_RF1^(0+128)+1),3
  7449                           
  7450                           ;RF_Control_B1.c: 306: }
  7451                           ;RF_Control_B1.c: 307: }
  7452                           ;RF_Control_B1.c: 308: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7453  0DE5  0008               	return
  7454  0DE6                     l7098:	
  7455  0DE6  0022               	movlb	2	; select bank2
  7456  0DE7  0820               	movf	_RF_Data^(0+256),w
  7457  0DE8  3AFF               	xorlw	255
  7458  0DE9  1D03               	skipz
  7459  0DEA  2DF1               	goto	l7104
  7460  0DEB  0821               	movf	(_RF_Data^(0+256)+1),w
  7461  0DEC  3A02               	xorlw	2
  7462  0DED  1D03               	skipz
  7463  0DEE  2DF1               	goto	l7104
  7464                           
  7465                           ;RF_Control_B1.c: 309: __nop();
  7466  0DEF  0000               	nop
  7467                           
  7468                           ;RF_Control_B1.c: 310: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7469  0DF0  0008               	return
  7470  0DF1                     l7104:	
  7471  0DF1  0022               	movlb	2	; select bank2
  7472  0DF2  08A0               	movf	_RF_Data^(0+256),f
  7473  0DF3  1D03               	skipz
  7474  0DF4  2DFB               	goto	l2032
  7475  0DF5  0821               	movf	(_RF_Data^(0+256)+1),w
  7476  0DF6  3A65               	xorlw	101
  7477  0DF7  1D03               	skipz
  7478  0DF8  2DFB               	goto	l2032
  7479                           
  7480                           ;RF_Control_B1.c: 311: __nop();
  7481  0DF9  0000               	nop
  7482                           
  7483                           ;RF_Control_B1.c: 312: } else {
  7484  0DFA  0008               	return
  7485  0DFB                     l2032:	
  7486                           
  7487                           ;RF_Control_B1.c: 313: RF1.Checked = 0;
  7488  0DFB  0021               	movlb	1	; select bank1
  7489  0DFC  11BC               	bcf	(_RF1^(0+128)+1),3
  7490                           
  7491                           ;RF_Control_B1.c: 321: ;
  7492                           
  7493                           ;RF_Control_B1.c: 314: }
  7494                           ;RF_Control_B1.c: 319: }
  7495                           ;RF_Control_B1.c: 320: } else {
  7496  0DFD  0008               	return
  7497  0DFE                     __end_of_getRxData:	
  7498                           
  7499                           	psect	text26
  7500  12B9                     __ptext26:	
  7501 ;; *************** function _setLog_Code *****************
  7502 ;; Defined at:
  7503 ;;		line 327 in file "../src/RF_Control_B1.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;		None
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;		None
  7508 ;; Return value:  Size  Location     Type
  7509 ;;		None               void
  7510 ;; Registers used:
  7511 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7512 ;; Tracked objects:
  7513 ;;		On entry : 0/0
  7514 ;;		On exit  : 0/0
  7515 ;;		Unchanged: 0/0
  7516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7520 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7521 ;;Total ram usage:        1 bytes
  7522 ;; Hardware stack levels used:    1
  7523 ;; Hardware stack levels required when called:    7
  7524 ;; This function calls:
  7525 ;;		_setBuz
  7526 ;;		_setMemory_LoopSave
  7527 ;;		_setMemory_Modify
  7528 ;; This function is called by:
  7529 ;;		_getRxData
  7530 ;; This function uses a non-reentrant model
  7531 ;;
  7532                           
  7533                           
  7534                           ;psect for function _setLog_Code
  7535  12B9                     _setLog_Code:	
  7536                           
  7537                           ;RF_Control_B1.c: 328: RF1.Learn = 0;
  7538                           
  7539                           ;incstack = 0
  7540                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7541  12B9  0021               	movlb	1	; select bank1
  7542  12BA  133B               	bcf	_RF1^(0+128),6
  7543                           
  7544                           ;RF_Control_B1.c: 329: product->Data[12]=RF_Data[12];
  7545  12BB  0022               	movlb	2	; select bank2
  7546  12BC  082C               	movf	(_RF_Data^(0+256)+12),w
  7547  12BD  0020               	movlb	0	; select bank0
  7548  12BE  00AD               	movwf	??_setLog_Code
  7549  12BF  086E               	movf	_product,w
  7550  12C0  3E0C               	addlw	12
  7551  12C1  0086               	movwf	6
  7552  12C2  3002               	movlw	2	; select bank4/5
  7553  12C3  0087               	movwf	7
  7554  12C4  082D               	movf	??_setLog_Code,w
  7555  12C5  0081               	movwf	1
  7556                           
  7557                           ;RF_Control_B1.c: 330: product->Data[13]=RF_Data[13];
  7558  12C6  0022               	movlb	2	; select bank2
  7559  12C7  082D               	movf	(_RF_Data^(0+256)+13),w
  7560  12C8  0020               	movlb	0	; select bank0
  7561  12C9  00AD               	movwf	??_setLog_Code
  7562  12CA  086E               	movf	_product,w
  7563  12CB  3E0D               	addlw	13
  7564  12CC  0086               	movwf	6
  7565  12CD  3002               	movlw	2	; select bank4/5
  7566  12CE  0087               	movwf	7
  7567  12CF  082D               	movf	??_setLog_Code,w
  7568  12D0  0081               	movwf	1
  7569                           
  7570                           ;RF_Control_B1.c: 331: product->Data[14]=RF_Data[14];
  7571  12D1  0022               	movlb	2	; select bank2
  7572  12D2  082E               	movf	(_RF_Data^(0+256)+14),w
  7573  12D3  0020               	movlb	0	; select bank0
  7574  12D4  00AD               	movwf	??_setLog_Code
  7575  12D5  086E               	movf	_product,w
  7576  12D6  3E0E               	addlw	14
  7577  12D7  0086               	movwf	6
  7578  12D8  3002               	movlw	2	; select bank4/5
  7579  12D9  0087               	movwf	7
  7580  12DA  082D               	movf	??_setLog_Code,w
  7581  12DB  0081               	movwf	1
  7582                           
  7583                           ;RF_Control_B1.c: 332: setBuz(1, 100);
  7584  12DC  3064               	movlw	100
  7585  12DD  00A9               	movwf	setBuz@time
  7586  12DE  3000               	movlw	0
  7587  12DF  00AA               	movwf	setBuz@time+1
  7588  12E0  3001               	movlw	1
  7589  12E1  3196  2639  3192   	fcall	_setBuz
  7590                           
  7591                           ;RF_Control_B1.c: 333: if (myMain.First == 1) {
  7592  12E4  0021               	movlb	1	; select bank1
  7593  12E5  1EA0               	btfss	_myMain^(0+128),5
  7594  12E6  2AEB               	goto	l2038
  7595                           
  7596                           ;RF_Control_B1.c: 334: setMemory_LoopSave(1);
  7597  12E7  3001               	movlw	1
  7598  12E8  319D  2517  3192   	fcall	_setMemory_LoopSave
  7599  12EB                     l2038:	
  7600                           
  7601                           ;RF_Control_B1.c: 335: }
  7602                           ;RF_Control_B1.c: 336: setMemory_Modify(1);
  7603  12EB  3001               	movlw	1
  7604  12EC  319D  2504         	fcall	_setMemory_Modify
  7605  12EE  0008               	return
  7606  12EF                     __end_of_setLog_Code:	
  7607                           
  7608                           	psect	text27
  7609  1D17                     __ptext27:	
  7610 ;; *************** function _setMemory_LoopSave *****************
  7611 ;; Defined at:
  7612 ;;		line 1009 in file "../src/MCU_B1.c"
  7613 ;; Parameters:    Size  Location     Type
  7614 ;;  command         1    wreg     unsigned char 
  7615 ;; Auto vars:     Size  Location     Type
  7616 ;;  command         1    1[BANK0 ] unsigned char 
  7617 ;; Return value:  Size  Location     Type
  7618 ;;		None               void
  7619 ;; Registers used:
  7620 ;;		wreg, status,2, status,0
  7621 ;; Tracked objects:
  7622 ;;		On entry : 0/0
  7623 ;;		On exit  : 0/0
  7624 ;;		Unchanged: 0/0
  7625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7627 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7628 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7629 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7630 ;;Total ram usage:        2 bytes
  7631 ;; Hardware stack levels used:    1
  7632 ;; Hardware stack levels required when called:    5
  7633 ;; This function calls:
  7634 ;;		Nothing
  7635 ;; This function is called by:
  7636 ;;		_setLog_Code
  7637 ;; This function uses a non-reentrant model
  7638 ;;
  7639                           
  7640                           
  7641                           ;psect for function _setMemory_LoopSave
  7642  1D17                     _setMemory_LoopSave:	
  7643                           
  7644                           ;incstack = 0
  7645                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7646                           ;setMemory_LoopSave@command stored from wreg
  7647  1D17  0020               	movlb	0	; select bank0
  7648  1D18  00A1               	movwf	setMemory_LoopSave@command
  7649                           
  7650                           ;MCU_B1.c: 1010: Memory.LoopSave = command == 1 ? 1 : 0;
  7651  1D19  0821               	movf	setMemory_LoopSave@command,w
  7652  1D1A  3A01               	xorlw	1
  7653  1D1B  3000               	movlw	0
  7654  1D1C  1903               	skipnz
  7655  1D1D  3001               	movlw	1
  7656  1D1E  00A0               	movwf	??_setMemory_LoopSave
  7657  1D1F  0DA0               	rlf	??_setMemory_LoopSave,f
  7658  1D20  0DA0               	rlf	??_setMemory_LoopSave,f
  7659  1D21  0024               	movlb	4	; select bank4
  7660  1D22  0844               	movf	(_Memory^(0+512)+36),w
  7661  1D23  0020               	movlb	0	; select bank0
  7662  1D24  0620               	xorwf	??_setMemory_LoopSave,w
  7663  1D25  39FB               	andlw	-5
  7664  1D26  0620               	xorwf	??_setMemory_LoopSave,w
  7665  1D27  0024               	movlb	4	; select bank4
  7666  1D28  00C4               	movwf	(_Memory^(0+512)+36)
  7667  1D29  0008               	return
  7668  1D2A                     __end_of_setMemory_LoopSave:	
  7669                           
  7670                           	psect	text28
  7671  0B0B                     __ptext28:	
  7672 ;; *************** function _setControl_Lights_Table *****************
  7673 ;; Defined at:
  7674 ;;		line 340 in file "../src/RF_Control_B1.c"
  7675 ;; Parameters:    Size  Location     Type
  7676 ;;		None
  7677 ;; Auto vars:     Size  Location     Type
  7678 ;;		None
  7679 ;; Return value:  Size  Location     Type
  7680 ;;		None               void
  7681 ;; Registers used:
  7682 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7683 ;; Tracked objects:
  7684 ;;		On entry : 0/0
  7685 ;;		On exit  : 0/0
  7686 ;;		Unchanged: 0/0
  7687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7692 ;;Total ram usage:        0 bytes
  7693 ;; Hardware stack levels used:    1
  7694 ;; Hardware stack levels required when called:   11
  7695 ;; This function calls:
  7696 ;;		_setBuz
  7697 ;;		_setDimmerLights_ErrorClose
  7698 ;;		_setRFSW_AdjControl
  7699 ;;		_setRFSW_Control
  7700 ;;		_setTxData
  7701 ;; This function is called by:
  7702 ;;		_getRxData
  7703 ;; This function uses a non-reentrant model
  7704 ;;
  7705                           
  7706                           
  7707                           ;psect for function _setControl_Lights_Table
  7708  0B0B                     _setControl_Lights_Table:	
  7709                           
  7710                           ;RF_Control_B1.c: 341: switch (RF_Data[15]) {
  7711                           
  7712                           ;incstack = 0
  7713                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7714  0B0B  2B57               	goto	l6690
  7715  0B0C                     l6664:	
  7716                           ;RF_Control_B1.c: 342: case 0x00:
  7717                           
  7718                           
  7719                           ;RF_Control_B1.c: 344: setDimmerLights_ErrorClose(255);
  7720  0B0C  30FF               	movlw	255
  7721  0B0D  3188  2000  318B   	fcall	_setDimmerLights_ErrorClose
  7722                           
  7723                           ;RF_Control_B1.c: 346: product->Data[9]=0;
  7724  0B10  0020               	movlb	0	; select bank0
  7725  0B11  086E               	movf	_product,w
  7726  0B12  3E09               	addlw	9
  7727  0B13  0086               	movwf	6
  7728  0B14  3002               	movlw	2	; select bank4/5
  7729  0B15  0087               	movwf	7
  7730  0B16  0181               	clrf	1
  7731                           
  7732                           ;RF_Control_B1.c: 347: product->Data[11]=0;
  7733  0B17  086E               	movf	_product,w
  7734  0B18  3E0B               	addlw	11
  7735  0B19  0086               	movwf	6
  7736  0B1A  3002               	movlw	2	; select bank4/5
  7737  0B1B  0087               	movwf	7
  7738  0B1C  0181               	clrf	1
  7739                           
  7740                           ;RF_Control_B1.c: 348: product->Data[15]=0;
  7741  0B1D  086E               	movf	_product,w
  7742  0B1E  3E0F               	addlw	15
  7743  0B1F  0086               	movwf	6
  7744  0B20  3002               	movlw	2	; select bank4/5
  7745  0B21  0087               	movwf	7
  7746  0B22  0181               	clrf	1
  7747                           
  7748                           ;RF_Control_B1.c: 349: product->Data[17]=0;
  7749  0B23  086E               	movf	_product,w
  7750  0B24  3E11               	addlw	17
  7751  0B25  0086               	movwf	6
  7752  0B26  3002               	movlw	2	; select bank4/5
  7753  0B27  0087               	movwf	7
  7754  0B28  0181               	clrf	1
  7755                           
  7756                           ;RF_Control_B1.c: 350: setBuz(1, 100);
  7757  0B29  3064               	movlw	100
  7758  0B2A  00A9               	movwf	setBuz@time
  7759  0B2B  3000               	movlw	0
  7760  0B2C  00AA               	movwf	setBuz@time+1
  7761  0B2D  3001               	movlw	1
  7762  0B2E  3196  2639         	fcall	_setBuz
  7763                           
  7764                           ;RF_Control_B1.c: 352: break;
  7765  0B30  0008               	return
  7766  0B31                     l6676:	
  7767                           ;RF_Control_B1.c: 353: case 0x20:
  7768                           
  7769                           
  7770                           ;RF_Control_B1.c: 354: product->Data[9]=0;
  7771  0B31  0020               	movlb	0	; select bank0
  7772  0B32  086E               	movf	_product,w
  7773  0B33  3E09               	addlw	9
  7774  0B34  0086               	movwf	6
  7775  0B35  3002               	movlw	2	; select bank4/5
  7776  0B36  0087               	movwf	7
  7777  0B37  0181               	clrf	1
  7778                           
  7779                           ;RF_Control_B1.c: 355: product->Data[11]=0;
  7780  0B38  086E               	movf	_product,w
  7781  0B39  3E0B               	addlw	11
  7782  0B3A  0086               	movwf	6
  7783  0B3B  3002               	movlw	2	; select bank4/5
  7784  0B3C  0087               	movwf	7
  7785  0B3D  0181               	clrf	1
  7786                           
  7787                           ;RF_Control_B1.c: 356: product->Data[17]=0;
  7788  0B3E  086E               	movf	_product,w
  7789  0B3F  3E11               	addlw	17
  7790  0B40  0086               	movwf	6
  7791  0B41  3002               	movlw	2	; select bank4/5
  7792  0B42  0087               	movwf	7
  7793  0B43  0181               	clrf	1
  7794                           
  7795                           ;RF_Control_B1.c: 357: setTxData();
  7796  0B44  3186  26F3         	fcall	_setTxData
  7797                           
  7798                           ;RF_Control_B1.c: 358: break;
  7799  0B46  0008               	return
  7800  0B47                     l6680:	
  7801                           ;RF_Control_B1.c: 359: case 0x01:
  7802                           
  7803                           
  7804                           ;RF_Control_B1.c: 361: setRFSW_Control(1);
  7805  0B47  3001               	movlw	1
  7806  0B48  3194  24EE         	fcall	_setRFSW_Control
  7807                           
  7808                           ;RF_Control_B1.c: 363: break;
  7809  0B4A  0008               	return
  7810  0B4B                     l6682:	
  7811                           ;RF_Control_B1.c: 364: case 0x02:
  7812                           
  7813                           
  7814                           ;RF_Control_B1.c: 366: setRFSW_Control(2);
  7815  0B4B  3002               	movlw	2
  7816  0B4C  3194  24EE         	fcall	_setRFSW_Control
  7817                           
  7818                           ;RF_Control_B1.c: 373: break;
  7819                           
  7820                           ;RF_Control_B1.c: 369: case 0x03:
  7821                           
  7822                           ;RF_Control_B1.c: 368: break;
  7823  0B4E  0008               	return
  7824  0B4F                     l6684:	
  7825                           ;RF_Control_B1.c: 374: case 0x11:
  7826                           
  7827                           
  7828                           ;RF_Control_B1.c: 377: setRFSW_AdjControl(1);
  7829  0B4F  3001               	movlw	1
  7830  0B50  3193  23D8         	fcall	_setRFSW_AdjControl
  7831                           
  7832                           ;RF_Control_B1.c: 380: break;
  7833  0B52  0008               	return
  7834  0B53                     l6686:	
  7835                           ;RF_Control_B1.c: 381: case 0x21:
  7836                           
  7837                           
  7838                           ;RF_Control_B1.c: 384: setRFSW_AdjControl(2);
  7839  0B53  3002               	movlw	2
  7840  0B54  3193  23D8         	fcall	_setRFSW_AdjControl
  7841                           
  7842                           ;RF_Control_B1.c: 395: }
  7843                           
  7844                           ;RF_Control_B1.c: 394: break;
  7845                           
  7846                           ;RF_Control_B1.c: 388: case 0x31:
  7847                           
  7848                           ;RF_Control_B1.c: 387: break;
  7849  0B56  0008               	return
  7850  0B57                     l6690:	
  7851  0B57  0022               	movlb	2	; select bank2
  7852  0B58  082F               	movf	(_RF_Data^(0+256)+15),w
  7853                           
  7854                           ; Switch size 1, requested type "space"
  7855                           ; Number of cases is 8, Range of values is 0 to 49
  7856                           ; switch strategies available:
  7857                           ; Name         Instructions Cycles
  7858                           ; simple_byte           25    13 (average)
  7859                           ; direct_byte          106     6 (fixed)
  7860                           ; jumptable            260     6 (fixed)
  7861                           ;	Chosen strategy is simple_byte
  7862  0B59  3A00               	xorlw	0	; case 0
  7863  0B5A  1903               	skipnz
  7864  0B5B  2B0C               	goto	l6664
  7865  0B5C  3A01               	xorlw	1	; case 1
  7866  0B5D  1903               	skipnz
  7867  0B5E  2B47               	goto	l6680
  7868  0B5F  3A03               	xorlw	3	; case 2
  7869  0B60  1903               	skipnz
  7870  0B61  2B4B               	goto	l6682
  7871  0B62  3A01               	xorlw	1	; case 3
  7872  0B63  1903               	skipnz
  7873  0B64  2B72               	goto	l2052
  7874  0B65  3A12               	xorlw	18	; case 17
  7875  0B66  1903               	skipnz
  7876  0B67  2B4F               	goto	l6684
  7877  0B68  3A31               	xorlw	49	; case 32
  7878  0B69  1903               	skipnz
  7879  0B6A  2B31               	goto	l6676
  7880  0B6B  3A01               	xorlw	1	; case 33
  7881  0B6C  1903               	skipnz
  7882  0B6D  2B53               	goto	l6686
  7883  0B6E  3A10               	xorlw	16	; case 49
  7884  0B6F  1903               	skipnz
  7885  0B70  2B72               	goto	l2052
  7886  0B71  2B72               	goto	l2052
  7887  0B72                     l2052:	
  7888  0B72  0008               	return
  7889  0B73                     __end_of_setControl_Lights_Table:	
  7890                           
  7891                           	psect	text29
  7892  14EE                     __ptext29:	
  7893 ;; *************** function _setRFSW_Control *****************
  7894 ;; Defined at:
  7895 ;;		line 422 in file "../src/RF_Control_B1.c"
  7896 ;; Parameters:    Size  Location     Type
  7897 ;;  sw              1    wreg     unsigned char 
  7898 ;; Auto vars:     Size  Location     Type
  7899 ;;  sw              1   19[BANK0 ] unsigned char 
  7900 ;;  status          1   18[BANK0 ] unsigned char 
  7901 ;; Return value:  Size  Location     Type
  7902 ;;		None               void
  7903 ;; Registers used:
  7904 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7905 ;; Tracked objects:
  7906 ;;		On entry : 0/0
  7907 ;;		On exit  : 0/0
  7908 ;;		Unchanged: 0/0
  7909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7911 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7912 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7913 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7914 ;;Total ram usage:        3 bytes
  7915 ;; Hardware stack levels used:    1
  7916 ;; Hardware stack levels required when called:    9
  7917 ;; This function calls:
  7918 ;;		_getDelayOff_GO
  7919 ;;		_getDimmerLights_Status
  7920 ;;		_setBuz
  7921 ;;		_setDelayOff_GO
  7922 ;;		_setDimmerLights_SwOff
  7923 ;;		_setDimmerLights_SwOn
  7924 ;;		_setRF_DimmerLights
  7925 ;;		_setTxData
  7926 ;; This function is called by:
  7927 ;;		_setControl_Lights_Table
  7928 ;; This function uses a non-reentrant model
  7929 ;;
  7930                           
  7931                           
  7932                           ;psect for function _setRFSW_Control
  7933  14EE                     _setRFSW_Control:	
  7934                           
  7935                           ;incstack = 0
  7936                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7937                           ;setRFSW_Control@sw stored from wreg
  7938  14EE  0020               	movlb	0	; select bank0
  7939  14EF  00B3               	movwf	setRFSW_Control@sw
  7940                           
  7941                           ;RF_Control_B1.c: 423: char status = 0;
  7942  14F0  01B2               	clrf	setRFSW_Control@status
  7943                           
  7944                           ;RF_Control_B1.c: 426: if (RF_Data[16] == 0x80) {
  7945  14F1  0022               	movlb	2	; select bank2
  7946  14F2  0830               	movf	(_RF_Data^(0+256)+16),w
  7947  14F3  3A80               	xorlw	128
  7948  14F4  1D03               	skipz
  7949  14F5  2D21               	goto	l6488
  7950                           
  7951                           ;RF_Control_B1.c: 427: setDelayOff_GO(sw, 1, RF_Data[17]);
  7952  14F6  0020               	movlb	0	; select bank0
  7953  14F7  01AA               	clrf	setDelayOff_GO@command
  7954  14F8  0AAA               	incf	setDelayOff_GO@command,f
  7955  14F9  0022               	movlb	2	; select bank2
  7956  14FA  0831               	movf	(_RF_Data^(0+256)+17),w
  7957  14FB  0020               	movlb	0	; select bank0
  7958  14FC  00B1               	movwf	??_setRFSW_Control
  7959  14FD  0831               	movf	??_setRFSW_Control,w
  7960  14FE  00AB               	movwf	setDelayOff_GO@value
  7961  14FF  0833               	movf	setRFSW_Control@sw,w
  7962  1500  3197  27A3  3194   	fcall	_setDelayOff_GO
  7963                           
  7964                           ;RF_Control_B1.c: 428: if (getDimmerLights_Status(sw) == 1) {
  7965  1503  0020               	movlb	0	; select bank0
  7966  1504  0833               	movf	setRFSW_Control@sw,w
  7967  1505  319C  2445  3194   	fcall	_getDimmerLights_Status
  7968  1508  3A01               	xorlw	1
  7969  1509  1D03               	skipz
  7970  150A  2D30               	goto	l6492
  7971                           
  7972                           ;RF_Control_B1.c: 429: setBuz(1, 100);
  7973  150B  3064               	movlw	100
  7974  150C  0020               	movlb	0	; select bank0
  7975  150D  00A9               	movwf	setBuz@time
  7976  150E  3000               	movlw	0
  7977  150F  00AA               	movwf	setBuz@time+1
  7978  1510  3001               	movlw	1
  7979  1511  3196  2639  3194   	fcall	_setBuz
  7980                           
  7981                           ;RF_Control_B1.c: 430: status = 1;
  7982  1514  0020               	movlb	0	; select bank0
  7983  1515  01B2               	clrf	setRFSW_Control@status
  7984  1516  0AB2               	incf	setRFSW_Control@status,f
  7985                           
  7986                           ;RF_Control_B1.c: 431: setRF_DimmerLights(sw, 1);
  7987  1517  01A0               	clrf	setRF_DimmerLights@on
  7988  1518  0AA0               	incf	setRF_DimmerLights@on,f
  7989  1519  0833               	movf	setRFSW_Control@sw,w
  7990  151A  3196  26EB  3194   	fcall	_setRF_DimmerLights
  7991                           
  7992                           ;RF_Control_B1.c: 432: setTxData();
  7993  151D  3186  26F3  3194   	fcall	_setTxData
  7994                           
  7995                           ;RF_Control_B1.c: 434: }
  7996                           ;RF_Control_B1.c: 435: } else {
  7997  1520  2D30               	goto	l6492
  7998  1521                     l6488:	
  7999                           
  8000                           ;RF_Control_B1.c: 437: if (getDelayOff_GO(sw) == 1) {
  8001  1521  0020               	movlb	0	; select bank0
  8002  1522  0833               	movf	setRFSW_Control@sw,w
  8003  1523  319C  2455  3194   	fcall	_getDelayOff_GO
  8004  1526  3A01               	xorlw	1
  8005  1527  1D03               	skipz
  8006  1528  2D30               	goto	l6492
  8007                           
  8008                           ;RF_Control_B1.c: 438: setDelayOff_GO(sw, 0, 0);
  8009  1529  0020               	movlb	0	; select bank0
  8010  152A  01AA               	clrf	setDelayOff_GO@command
  8011  152B  01AB               	clrf	setDelayOff_GO@value
  8012  152C  0833               	movf	setRFSW_Control@sw,w
  8013  152D  3197  27A3  3194   	fcall	_setDelayOff_GO
  8014  1530                     l6492:	
  8015                           
  8016                           ;RF_Control_B1.c: 439: }
  8017                           ;RF_Control_B1.c: 441: }
  8018                           ;RF_Control_B1.c: 442: if (status == 0) {
  8019  1530  0020               	movlb	0	; select bank0
  8020  1531  08B2               	movf	setRFSW_Control@status,f
  8021  1532  1D03               	skipz
  8022  1533  0008               	return
  8023                           
  8024                           ;RF_Control_B1.c: 444: setDimmerLights_SwOn(sw);
  8025  1534  0833               	movf	setRFSW_Control@sw,w
  8026  1535  3193  235D  3194   	fcall	_setDimmerLights_SwOn
  8027                           
  8028                           ;RF_Control_B1.c: 445: setDimmerLights_SwOff(sw);
  8029  1538  0020               	movlb	0	; select bank0
  8030  1539  0833               	movf	setRFSW_Control@sw,w
  8031  153A  3194  245B         	fcall	_setDimmerLights_SwOff
  8032  153C  0008               	return
  8033  153D                     __end_of_setRFSW_Control:	
  8034                           
  8035                           	psect	text30
  8036  135D                     __ptext30:	
  8037 ;; *************** function _setDimmerLights_SwOn *****************
  8038 ;; Defined at:
  8039 ;;		line 517 in file "../src/Dimmer_B1.c"
  8040 ;; Parameters:    Size  Location     Type
  8041 ;;  sw              1    wreg     unsigned char 
  8042 ;; Auto vars:     Size  Location     Type
  8043 ;;  sw              1   15[BANK0 ] unsigned char 
  8044 ;;  idle            1   14[BANK0 ] unsigned char 
  8045 ;; Return value:  Size  Location     Type
  8046 ;;		None               void
  8047 ;; Registers used:
  8048 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8049 ;; Tracked objects:
  8050 ;;		On entry : 0/0
  8051 ;;		On exit  : 0/0
  8052 ;;		Unchanged: 0/0
  8053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8055 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8056 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8057 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8058 ;;Total ram usage:        3 bytes
  8059 ;; Hardware stack levels used:    1
  8060 ;; Hardware stack levels required when called:    7
  8061 ;; This function calls:
  8062 ;;		_DimmerLightsPointSelect
  8063 ;;		_getAll_DimmerLights_AdjGO
  8064 ;;		_setBuz
  8065 ;;		_setDimmerLights_Trigger
  8066 ;; This function is called by:
  8067 ;;		_setRFSW_Control
  8068 ;;		_setSw_Main
  8069 ;; This function uses a non-reentrant model
  8070 ;;
  8071                           
  8072                           
  8073                           ;psect for function _setDimmerLights_SwOn
  8074  135D                     _setDimmerLights_SwOn:	
  8075                           
  8076                           ;incstack = 0
  8077                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8078                           ;setDimmerLights_SwOn@sw stored from wreg
  8079  135D  0020               	movlb	0	; select bank0
  8080  135E  00AF               	movwf	setDimmerLights_SwOn@sw
  8081                           
  8082                           ;Dimmer_B1.c: 518: DimmerLightsPointSelect(sw);
  8083  135F  082F               	movf	setDimmerLights_SwOn@sw,w
  8084  1360  319C  24F1  3193   	fcall	_DimmerLightsPointSelect
  8085                           
  8086                           ;Dimmer_B1.c: 519: char idle = 0;
  8087  1363  0020               	movlb	0	; select bank0
  8088  1364  01AE               	clrf	setDimmerLights_SwOn@idle
  8089                           
  8090                           ;Dimmer_B1.c: 521: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
  8091  1365  319C  2476  3193   	fcall	_getAll_DimmerLights_AdjGO
  8092  1368  3A01               	xorlw	1
  8093  1369  3000               	movlw	0
  8094  136A  1903               	skipnz
  8095  136B  3001               	movlw	1
  8096  136C  0020               	movlb	0	; select bank0
  8097  136D  00AD               	movwf	??_setDimmerLights_SwOn
  8098  136E  082D               	movf	??_setDimmerLights_SwOn,w
  8099  136F  00AE               	movwf	setDimmerLights_SwOn@idle
  8100                           
  8101                           ;Dimmer_B1.c: 523: if (idle == 0) {
  8102  1370  08AE               	movf	setDimmerLights_SwOn@idle,f
  8103  1371  1D03               	skipz
  8104  1372  0008               	return
  8105                           
  8106                           ;Dimmer_B1.c: 524: DimmerLights->SwFlag = 1;
  8107  1373  086F               	movf	_DimmerLights,w
  8108  1374  3E09               	addlw	9
  8109  1375  0086               	movwf	6
  8110  1376  3001               	movlw	1	; select bank2/3
  8111  1377  0087               	movwf	7
  8112  1378  1701               	bsf	1,6
  8113                           
  8114                           ;Dimmer_B1.c: 525: setBuz(1, 100);
  8115  1379  3064               	movlw	100
  8116  137A  00A9               	movwf	setBuz@time
  8117  137B  3000               	movlw	0
  8118  137C  00AA               	movwf	setBuz@time+1
  8119  137D  3001               	movlw	1
  8120  137E  3196  2639  3193   	fcall	_setBuz
  8121                           
  8122                           ;Dimmer_B1.c: 526: if (DimmerLights->Status == 0) {
  8123  1381  0020               	movlb	0	; select bank0
  8124  1382  086F               	movf	_DimmerLights,w
  8125  1383  0086               	movwf	6
  8126  1384  3001               	movlw	1	; select bank2/3
  8127  1385  0087               	movwf	7
  8128  1386  1A81               	btfsc	1,5
  8129  1387  2B93               	goto	l6296
  8130                           
  8131                           ;Dimmer_B1.c: 527: DimmerLights->Status = 1;
  8132  1388  086F               	movf	_DimmerLights,w
  8133  1389  0086               	movwf	6
  8134  138A  3001               	movlw	1	; select bank2/3
  8135  138B  0087               	movwf	7
  8136  138C  1681               	bsf	1,5
  8137                           
  8138                           ;Dimmer_B1.c: 528: setDimmerLights_Trigger(sw, 1);
  8139  138D  01A2               	clrf	setDimmerLights_Trigger@command
  8140  138E  0AA2               	incf	setDimmerLights_Trigger@command,f
  8141  138F  082F               	movf	setDimmerLights_SwOn@sw,w
  8142  1390  319E  26BC         	fcall	_setDimmerLights_Trigger
  8143                           
  8144                           ;Dimmer_B1.c: 529: } else {
  8145  1392  0008               	return
  8146  1393                     l6296:	
  8147                           
  8148                           ;Dimmer_B1.c: 530: DimmerLights->Status = 0;
  8149  1393  0020               	movlb	0	; select bank0
  8150  1394  086F               	movf	_DimmerLights,w
  8151  1395  0086               	movwf	6
  8152  1396  3001               	movlw	1	; select bank2/3
  8153  1397  0087               	movwf	7
  8154  1398  1281               	bcf	1,5
  8155  1399  0008               	return
  8156  139A                     __end_of_setDimmerLights_SwOn:	
  8157                           
  8158                           	psect	text31
  8159  13D8                     __ptext31:	
  8160 ;; *************** function _setRFSW_AdjControl *****************
  8161 ;; Defined at:
  8162 ;;		line 451 in file "../src/RF_Control_B1.c"
  8163 ;; Parameters:    Size  Location     Type
  8164 ;;  sw              1    wreg     unsigned char 
  8165 ;; Auto vars:     Size  Location     Type
  8166 ;;  sw              1   74[BANK0 ] unsigned char 
  8167 ;;  status          1   73[BANK0 ] unsigned char 
  8168 ;; Return value:  Size  Location     Type
  8169 ;;		None               void
  8170 ;; Registers used:
  8171 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8172 ;; Tracked objects:
  8173 ;;		On entry : 0/0
  8174 ;;		On exit  : 0/0
  8175 ;;		Unchanged: 0/0
  8176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8178 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8179 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8180 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8181 ;;Total ram usage:        4 bytes
  8182 ;; Hardware stack levels used:    1
  8183 ;; Hardware stack levels required when called:   10
  8184 ;; This function calls:
  8185 ;;		_getDimmerLights_Status
  8186 ;;		_setMemory_Modify
  8187 ;;		_setRF_DimmerValue
  8188 ;;		_setTxData
  8189 ;; This function is called by:
  8190 ;;		_setControl_Lights_Table
  8191 ;; This function uses a non-reentrant model
  8192 ;;
  8193                           
  8194                           
  8195                           ;psect for function _setRFSW_AdjControl
  8196  13D8                     _setRFSW_AdjControl:	
  8197                           
  8198                           ;incstack = 0
  8199                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8200                           ;setRFSW_AdjControl@sw stored from wreg
  8201  13D8  0020               	movlb	0	; select bank0
  8202  13D9  00EA               	movwf	setRFSW_AdjControl@sw
  8203                           
  8204                           ;RF_Control_B1.c: 452: char status = 0;
  8205  13DA  01E9               	clrf	setRFSW_AdjControl@status
  8206                           
  8207                           ;RF_Control_B1.c: 454: status = getDimmerLights_Status(sw);
  8208  13DB  086A               	movf	setRFSW_AdjControl@sw,w
  8209  13DC  319C  2445  3193   	fcall	_getDimmerLights_Status
  8210  13DF  0020               	movlb	0	; select bank0
  8211  13E0  00E7               	movwf	??_setRFSW_AdjControl
  8212  13E1  0867               	movf	??_setRFSW_AdjControl,w
  8213  13E2  00E9               	movwf	setRFSW_AdjControl@status
  8214                           
  8215                           ;RF_Control_B1.c: 457: if (status == 1) {
  8216  13E3  0869               	movf	setRFSW_AdjControl@status,w
  8217  13E4  3A01               	xorlw	1
  8218  13E5  1D03               	skipz
  8219  13E6  2BF1               	goto	l6506
  8220                           
  8221                           ;RF_Control_B1.c: 458: setMemory_Modify(1);
  8222  13E7  3001               	movlw	1
  8223  13E8  319D  2504  3193   	fcall	_setMemory_Modify
  8224                           
  8225                           ;RF_Control_B1.c: 459: setRF_DimmerValue(sw);
  8226  13EB  0020               	movlb	0	; select bank0
  8227  13EC  086A               	movf	setRFSW_AdjControl@sw,w
  8228  13ED  3191  21B5  3193   	fcall	_setRF_DimmerValue
  8229                           
  8230                           ;RF_Control_B1.c: 460: } else {
  8231  13F0  2C03               	goto	l2064
  8232  13F1                     l6506:	
  8233                           
  8234                           ;RF_Control_B1.c: 461: product->Data[9]=product->Data[20 + sw];
  8235  13F1  0020               	movlb	0	; select bank0
  8236  13F2  086A               	movf	setRFSW_AdjControl@sw,w
  8237  13F3  3E14               	addlw	20
  8238  13F4  076E               	addwf	_product,w
  8239  13F5  00E7               	movwf	??_setRFSW_AdjControl
  8240  13F6  0867               	movf	??_setRFSW_AdjControl,w
  8241  13F7  0086               	movwf	6
  8242  13F8  3002               	movlw	2	; select bank4/5
  8243  13F9  0087               	movwf	7
  8244  13FA  0801               	movf	1,w
  8245  13FB  00E8               	movwf	??_setRFSW_AdjControl+1
  8246  13FC  086E               	movf	_product,w
  8247  13FD  3E09               	addlw	9
  8248  13FE  0086               	movwf	6
  8249  13FF  3002               	movlw	2	; select bank4/5
  8250  1400  0087               	movwf	7
  8251  1401  0868               	movf	??_setRFSW_AdjControl+1,w
  8252  1402  0081               	movwf	1
  8253  1403                     l2064:	
  8254                           
  8255                           ;RF_Control_B1.c: 462: }
  8256                           ;RF_Control_B1.c: 463: product->Data[17]=product->Data[26 + sw];
  8257  1403  0020               	movlb	0	; select bank0
  8258  1404  086A               	movf	setRFSW_AdjControl@sw,w
  8259  1405  3E1A               	addlw	26
  8260  1406  076E               	addwf	_product,w
  8261  1407  00E7               	movwf	??_setRFSW_AdjControl
  8262  1408  0867               	movf	??_setRFSW_AdjControl,w
  8263  1409  0086               	movwf	6
  8264  140A  3002               	movlw	2	; select bank4/5
  8265  140B  0087               	movwf	7
  8266  140C  0801               	movf	1,w
  8267  140D  00E8               	movwf	??_setRFSW_AdjControl+1
  8268  140E  086E               	movf	_product,w
  8269  140F  3E11               	addlw	17
  8270  1410  0086               	movwf	6
  8271  1411  3002               	movlw	2	; select bank4/5
  8272  1412  0087               	movwf	7
  8273  1413  0868               	movf	??_setRFSW_AdjControl+1,w
  8274  1414  0081               	movwf	1
  8275                           
  8276                           ;RF_Control_B1.c: 464: setTxData();
  8277  1415  3186  26F3         	fcall	_setTxData
  8278  1417  0008               	return
  8279  1418                     __end_of_setRFSW_AdjControl:	
  8280                           
  8281                           	psect	text32
  8282  11B5                     __ptext32:	
  8283 ;; *************** function _setRF_DimmerValue *****************
  8284 ;; Defined at:
  8285 ;;		line 469 in file "../src/RF_Control_B1.c"
  8286 ;; Parameters:    Size  Location     Type
  8287 ;;  lights          1    wreg     unsigned char 
  8288 ;; Auto vars:     Size  Location     Type
  8289 ;;  lights          1   70[BANK0 ] unsigned char 
  8290 ;; Return value:  Size  Location     Type
  8291 ;;		None               void
  8292 ;; Registers used:
  8293 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8294 ;; Tracked objects:
  8295 ;;		On entry : 0/0
  8296 ;;		On exit  : 0/0
  8297 ;;		Unchanged: 0/0
  8298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8300 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8301 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8302 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8303 ;;Total ram usage:        3 bytes
  8304 ;; Hardware stack levels used:    1
  8305 ;; Hardware stack levels required when called:    9
  8306 ;; This function calls:
  8307 ;;		_setDimmerLights_AdjRF
  8308 ;; This function is called by:
  8309 ;;		_setRFSW_AdjControl
  8310 ;; This function uses a non-reentrant model
  8311 ;;
  8312                           
  8313                           
  8314                           ;psect for function _setRF_DimmerValue
  8315  11B5                     _setRF_DimmerValue:	
  8316                           
  8317                           ;incstack = 0
  8318                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8319                           ;setRF_DimmerValue@lights stored from wreg
  8320  11B5  0020               	movlb	0	; select bank0
  8321  11B6  00E6               	movwf	setRF_DimmerValue@lights
  8322                           
  8323                           ;RF_Control_B1.c: 470: if (RF_Data[9] > 0x64) {
  8324  11B7  3065               	movlw	101
  8325  11B8  0022               	movlb	2	; select bank2
  8326  11B9  0229               	subwf	(_RF_Data^(0+256)+9),w
  8327  11BA  1C03               	skipc
  8328  11BB  29C2               	goto	l6384
  8329                           
  8330                           ;RF_Control_B1.c: 471: RF_Data[9] = 0x64;
  8331  11BC  3064               	movlw	100
  8332  11BD  0020               	movlb	0	; select bank0
  8333  11BE  00E4               	movwf	??_setRF_DimmerValue
  8334  11BF  0864               	movf	??_setRF_DimmerValue,w
  8335  11C0  0022               	movlb	2	; select bank2
  8336  11C1  00A9               	movwf	(_RF_Data^(0+256)+9)
  8337  11C2                     l6384:	
  8338                           
  8339                           ;RF_Control_B1.c: 472: }
  8340                           ;RF_Control_B1.c: 473: product->Data[9]=RF_Data[9];
  8341  11C2  0829               	movf	(_RF_Data^(0+256)+9),w
  8342  11C3  0020               	movlb	0	; select bank0
  8343  11C4  00E4               	movwf	??_setRF_DimmerValue
  8344  11C5  086E               	movf	_product,w
  8345  11C6  3E09               	addlw	9
  8346  11C7  0086               	movwf	6
  8347  11C8  3002               	movlw	2	; select bank4/5
  8348  11C9  0087               	movwf	7
  8349  11CA  0864               	movf	??_setRF_DimmerValue,w
  8350  11CB  0081               	movwf	1
  8351                           
  8352                           ;RF_Control_B1.c: 474: product->Data[11]=lights;
  8353  11CC  0866               	movf	setRF_DimmerValue@lights,w
  8354  11CD  00E4               	movwf	??_setRF_DimmerValue
  8355  11CE  086E               	movf	_product,w
  8356  11CF  3E0B               	addlw	11
  8357  11D0  0086               	movwf	6
  8358  11D1  3002               	movlw	2	; select bank4/5
  8359  11D2  0087               	movwf	7
  8360  11D3  0864               	movf	??_setRF_DimmerValue,w
  8361  11D4  0081               	movwf	1
  8362                           
  8363                           ;RF_Control_B1.c: 475: product->Data[(20 + lights)]=RF_Data[9];
  8364  11D5  0022               	movlb	2	; select bank2
  8365  11D6  0829               	movf	(_RF_Data^(0+256)+9),w
  8366  11D7  0020               	movlb	0	; select bank0
  8367  11D8  00E4               	movwf	??_setRF_DimmerValue
  8368  11D9  0866               	movf	setRF_DimmerValue@lights,w
  8369  11DA  3E14               	addlw	20
  8370  11DB  076E               	addwf	_product,w
  8371  11DC  00E5               	movwf	??_setRF_DimmerValue+1
  8372  11DD  0865               	movf	??_setRF_DimmerValue+1,w
  8373  11DE  0086               	movwf	6
  8374  11DF  3002               	movlw	2	; select bank4/5
  8375  11E0  0087               	movwf	7
  8376  11E1  0864               	movf	??_setRF_DimmerValue,w
  8377  11E2  0081               	movwf	1
  8378                           
  8379                           ;RF_Control_B1.c: 476: setDimmerLights_AdjRF(lights);
  8380  11E3  0866               	movf	setRF_DimmerValue@lights,w
  8381  11E4  319F  27DD         	fcall	_setDimmerLights_AdjRF
  8382  11E6  0008               	return
  8383  11E7                     __end_of_setRF_DimmerValue:	
  8384                           
  8385                           	psect	text33
  8386  1FDD                     __ptext33:	
  8387 ;; *************** function _setDimmerLights_AdjRF *****************
  8388 ;; Defined at:
  8389 ;;		line 758 in file "../src/Dimmer_B1.c"
  8390 ;; Parameters:    Size  Location     Type
  8391 ;;  lights          1    wreg     unsigned char 
  8392 ;; Auto vars:     Size  Location     Type
  8393 ;;  lights          1   67[BANK0 ] unsigned char 
  8394 ;; Return value:  Size  Location     Type
  8395 ;;		None               void
  8396 ;; Registers used:
  8397 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8398 ;; Tracked objects:
  8399 ;;		On entry : 0/0
  8400 ;;		On exit  : 0/0
  8401 ;;		Unchanged: 0/0
  8402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8404 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8405 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8406 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8407 ;;Total ram usage:        2 bytes
  8408 ;; Hardware stack levels used:    1
  8409 ;; Hardware stack levels required when called:    8
  8410 ;; This function calls:
  8411 ;;		_DimmerLightsPointSelect
  8412 ;;		_getPercentValue
  8413 ;; This function is called by:
  8414 ;;		_setRF_DimmerValue
  8415 ;; This function uses a non-reentrant model
  8416 ;;
  8417                           
  8418                           
  8419                           ;psect for function _setDimmerLights_AdjRF
  8420  1FDD                     _setDimmerLights_AdjRF:	
  8421                           
  8422                           ;incstack = 0
  8423                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8424                           ;setDimmerLights_AdjRF@lights stored from wreg
  8425  1FDD  0020               	movlb	0	; select bank0
  8426  1FDE  00E3               	movwf	setDimmerLights_AdjRF@lights
  8427                           
  8428                           ;Dimmer_B1.c: 759: DimmerLightsPointSelect(lights);
  8429  1FDF  0863               	movf	setDimmerLights_AdjRF@lights,w
  8430  1FE0  319C  24F1  319F   	fcall	_DimmerLightsPointSelect
  8431                           
  8432                           ;Dimmer_B1.c: 760: DimmerLights->AdjRF = 1;
  8433  1FE3  0020               	movlb	0	; select bank0
  8434  1FE4  086F               	movf	_DimmerLights,w
  8435  1FE5  0086               	movwf	6
  8436  1FE6  3001               	movlw	1	; select bank2/3
  8437  1FE7  0087               	movwf	7
  8438  1FE8  1501               	bsf	1,2
  8439                           
  8440                           ;Dimmer_B1.c: 761: DimmerLights->Signal = 1;
  8441  1FE9  086F               	movf	_DimmerLights,w
  8442  1FEA  0086               	movwf	6
  8443  1FEB  3001               	movlw	1	; select bank2/3
  8444  1FEC  0087               	movwf	7
  8445  1FED  1481               	bsf	1,1
  8446                           
  8447                           ;Dimmer_B1.c: 762: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8448  1FEE  086E               	movf	_product,w
  8449  1FEF  3E09               	addlw	9
  8450  1FF0  0086               	movwf	6
  8451  1FF1  3002               	movlw	2	; select bank4/5
  8452  1FF2  0087               	movwf	7
  8453  1FF3  0801               	movf	1,w
  8454  1FF4  318A  2240         	fcall	_getPercentValue
  8455  1FF6  0020               	movlb	0	; select bank0
  8456  1FF7  00E2               	movwf	??_setDimmerLights_AdjRF
  8457  1FF8  086F               	movf	_DimmerLights,w
  8458  1FF9  3E05               	addlw	5
  8459  1FFA  0086               	movwf	6
  8460  1FFB  3001               	movlw	1	; select bank2/3
  8461  1FFC  0087               	movwf	7
  8462  1FFD  0862               	movf	??_setDimmerLights_AdjRF,w
  8463  1FFE  0081               	movwf	1
  8464  1FFF  0008               	return
  8465  2000                     __end_of_setDimmerLights_AdjRF:	
  8466                           
  8467                           	psect	text34
  8468  0A40                     __ptext34:	
  8469 ;; *************** function _getPercentValue *****************
  8470 ;; Defined at:
  8471 ;;		line 870 in file "../src/Dimmer_B1.c"
  8472 ;; Parameters:    Size  Location     Type
  8473 ;;  value           1    wreg     unsigned char 
  8474 ;; Auto vars:     Size  Location     Type
  8475 ;;  value           1   62[BANK0 ] unsigned char 
  8476 ;;  i               3   63[BANK0 ] float 
  8477 ;; Return value:  Size  Location     Type
  8478 ;;                  1    wreg      unsigned char 
  8479 ;; Registers used:
  8480 ;;		wreg, status,2, status,0, pclath, cstack
  8481 ;; Tracked objects:
  8482 ;;		On entry : 0/0
  8483 ;;		On exit  : 0/0
  8484 ;;		Unchanged: 0/0
  8485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8487 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8488 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;Total ram usage:        6 bytes
  8491 ;; Hardware stack levels used:    1
  8492 ;; Hardware stack levels required when called:    7
  8493 ;; This function calls:
  8494 ;;		___awtoft
  8495 ;;		___ftadd
  8496 ;;		___ftdiv
  8497 ;;		___ftmul
  8498 ;;		___ftneg
  8499 ;;		___fttol
  8500 ;; This function is called by:
  8501 ;;		_setDimmerLights_AdjRF
  8502 ;; This function uses a non-reentrant model
  8503 ;;
  8504                           
  8505                           
  8506                           ;psect for function _getPercentValue
  8507  0A40                     _getPercentValue:	
  8508                           
  8509                           ;incstack = 0
  8510                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8511                           ;getPercentValue@value stored from wreg
  8512  0A40  0020               	movlb	0	; select bank0
  8513  0A41  00DE               	movwf	getPercentValue@value
  8514                           
  8515                           ;Dimmer_B1.c: 878: float i = ((char)(80*0.8)) - ((char)(15*0.8));
  8516  0A42  3000               	movlw	0
  8517  0A43  00DF               	movwf	getPercentValue@i
  8518  0A44  3050               	movlw	80
  8519  0A45  00E0               	movwf	getPercentValue@i+1
  8520  0A46  3042               	movlw	66
  8521  0A47  00E1               	movwf	getPercentValue@i+2
  8522                           
  8523                           ;Dimmer_B1.c: 879: i /= 100;
  8524  0A48  3000               	movlw	0
  8525  0A49  00AE               	movwf	___ftdiv@f2
  8526  0A4A  30C8               	movlw	200
  8527  0A4B  00AF               	movwf	___ftdiv@f2+1
  8528  0A4C  3042               	movlw	66
  8529  0A4D  00B0               	movwf	___ftdiv@f2+2
  8530  0A4E  085F               	movf	getPercentValue@i,w
  8531  0A4F  00B1               	movwf	___ftdiv@f1
  8532  0A50  0860               	movf	getPercentValue@i+1,w
  8533  0A51  00B2               	movwf	___ftdiv@f1+1
  8534  0A52  0861               	movf	getPercentValue@i+2,w
  8535  0A53  00B3               	movwf	___ftdiv@f1+2
  8536  0A54  318E  26A3  318A   	fcall	___ftdiv
  8537  0A57  0020               	movlb	0	; select bank0
  8538  0A58  082E               	movf	?___ftdiv,w
  8539  0A59  00DF               	movwf	getPercentValue@i
  8540  0A5A  082F               	movf	?___ftdiv+1,w
  8541  0A5B  00E0               	movwf	getPercentValue@i+1
  8542  0A5C  0830               	movf	?___ftdiv+2,w
  8543  0A5D  00E1               	movwf	getPercentValue@i+2
  8544                           
  8545                           ;Dimmer_B1.c: 881: return (char) (((char)(80*0.8)) - ((100 - value) * i));
  8546  0A5E  085E               	movf	getPercentValue@value,w
  8547  0A5F  00DC               	movwf	??_getPercentValue
  8548  0A60  01DD               	clrf	??_getPercentValue+1
  8549  0A61  09DC               	comf	??_getPercentValue,f
  8550  0A62  09DD               	comf	??_getPercentValue+1,f
  8551  0A63  0ADC               	incf	??_getPercentValue,f
  8552  0A64  1903               	skipnz
  8553  0A65  0ADD               	incf	??_getPercentValue+1,f
  8554  0A66  085C               	movf	??_getPercentValue,w
  8555  0A67  3E64               	addlw	100
  8556  0A68  00A8               	movwf	___awtoft@c
  8557  0A69  3000               	movlw	0
  8558  0A6A  3D5D               	addwfc	??_getPercentValue+1,w
  8559  0A6B  00A9               	movwf	___awtoft@c+1
  8560  0A6C  319F  2799  318A   	fcall	___awtoft
  8561  0A6F  0020               	movlb	0	; select bank0
  8562  0A70  0828               	movf	?___awtoft,w
  8563  0A71  00B1               	movwf	___ftmul@f2
  8564  0A72  0829               	movf	?___awtoft+1,w
  8565  0A73  00B2               	movwf	___ftmul@f2+1
  8566  0A74  082A               	movf	?___awtoft+2,w
  8567  0A75  00B3               	movwf	___ftmul@f2+2
  8568  0A76  085F               	movf	getPercentValue@i,w
  8569  0A77  00AE               	movwf	___ftmul@f1
  8570  0A78  0860               	movf	getPercentValue@i+1,w
  8571  0A79  00AF               	movwf	___ftmul@f1+1
  8572  0A7A  0861               	movf	getPercentValue@i+2,w
  8573  0A7B  00B0               	movwf	___ftmul@f1+2
  8574  0A7C  318F  274C  318A   	fcall	___ftmul
  8575  0A7F  0020               	movlb	0	; select bank0
  8576  0A80  082E               	movf	?___ftmul,w
  8577  0A81  00BE               	movwf	___ftneg@f1
  8578  0A82  082F               	movf	?___ftmul+1,w
  8579  0A83  00BF               	movwf	___ftneg@f1+1
  8580  0A84  0830               	movf	?___ftmul+2,w
  8581  0A85  00C0               	movwf	___ftneg@f1+2
  8582  0A86  319B  2390  318A   	fcall	___ftneg
  8583  0A89  0020               	movlb	0	; select bank0
  8584  0A8A  083E               	movf	?___ftneg,w
  8585  0A8B  00C4               	movwf	___ftadd@f2
  8586  0A8C  083F               	movf	?___ftneg+1,w
  8587  0A8D  00C5               	movwf	___ftadd@f2+1
  8588  0A8E  0840               	movf	?___ftneg+2,w
  8589  0A8F  00C6               	movwf	___ftadd@f2+2
  8590  0A90  3000               	movlw	0
  8591  0A91  00C1               	movwf	___ftadd@f1
  8592  0A92  3080               	movlw	128
  8593  0A93  00C2               	movwf	___ftadd@f1+1
  8594  0A94  3042               	movlw	66
  8595  0A95  00C3               	movwf	___ftadd@f1+2
  8596  0A96  3184  243A  318A   	fcall	___ftadd
  8597  0A99  0020               	movlb	0	; select bank0
  8598  0A9A  0841               	movf	?___ftadd,w
  8599  0A9B  00CE               	movwf	___fttol@f1
  8600  0A9C  0842               	movf	?___ftadd+1,w
  8601  0A9D  00CF               	movwf	___fttol@f1+1
  8602  0A9E  0843               	movf	?___ftadd+2,w
  8603  0A9F  00D0               	movwf	___fttol@f1+2
  8604  0AA0  318C  245E         	fcall	___fttol
  8605  0AA2  0020               	movlb	0	; select bank0
  8606  0AA3  084E               	movf	?___fttol,w
  8607  0AA4  0008               	return
  8608  0AA5                     __end_of_getPercentValue:	
  8609                           
  8610                           	psect	text35
  8611  0F4C                     __ptext35:	
  8612 ;; *************** function ___ftmul *****************
  8613 ;; Defined at:
  8614 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8615 ;; Parameters:    Size  Location     Type
  8616 ;;  f1              3   14[BANK0 ] float 
  8617 ;;  f2              3   17[BANK0 ] float 
  8618 ;; Auto vars:     Size  Location     Type
  8619 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8620 ;;  sign            1   29[BANK0 ] unsigned char 
  8621 ;;  cntr            1   28[BANK0 ] unsigned char 
  8622 ;;  exp             1   24[BANK0 ] unsigned char 
  8623 ;; Return value:  Size  Location     Type
  8624 ;;                  3   14[BANK0 ] float 
  8625 ;; Registers used:
  8626 ;;		wreg, status,2, status,0, pclath, cstack
  8627 ;; Tracked objects:
  8628 ;;		On entry : 0/0
  8629 ;;		On exit  : 0/0
  8630 ;;		Unchanged: 0/0
  8631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8632 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8633 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8634 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8635 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8636 ;;Total ram usage:       16 bytes
  8637 ;; Hardware stack levels used:    1
  8638 ;; Hardware stack levels required when called:    6
  8639 ;; This function calls:
  8640 ;;		___ftpack
  8641 ;; This function is called by:
  8642 ;;		_getPercentValue
  8643 ;; This function uses a non-reentrant model
  8644 ;;
  8645                           
  8646                           
  8647                           ;psect for function ___ftmul
  8648  0F4C                     ___ftmul:	
  8649                           
  8650                           ;incstack = 0
  8651                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8652  0F4C  0020               	movlb	0	; select bank0
  8653  0F4D  082E               	movf	___ftmul@f1,w
  8654  0F4E  00B4               	movwf	??___ftmul
  8655  0F4F  082F               	movf	___ftmul@f1+1,w
  8656  0F50  00B5               	movwf	??___ftmul+1
  8657  0F51  0830               	movf	___ftmul@f1+2,w
  8658  0F52  00B6               	movwf	??___ftmul+2
  8659  0F53  1003               	clrc
  8660  0F54  0D35               	rlf	??___ftmul+1,w
  8661  0F55  0D36               	rlf	??___ftmul+2,w
  8662  0F56  00B7               	movwf	??___ftmul+3
  8663  0F57  0837               	movf	??___ftmul+3,w
  8664  0F58  00B8               	movwf	___ftmul@exp
  8665  0F59  08B8               	movf	___ftmul@exp,f
  8666  0F5A  1D03               	skipz
  8667  0F5B  2F63               	goto	l5998
  8668  0F5C  3000               	movlw	0
  8669  0F5D  00AE               	movwf	?___ftmul
  8670  0F5E  3000               	movlw	0
  8671  0F5F  00AF               	movwf	?___ftmul+1
  8672  0F60  3000               	movlw	0
  8673  0F61  00B0               	movwf	?___ftmul+2
  8674  0F62  0008               	return
  8675  0F63                     l5998:	
  8676  0F63  0831               	movf	___ftmul@f2,w
  8677  0F64  00B4               	movwf	??___ftmul
  8678  0F65  0832               	movf	___ftmul@f2+1,w
  8679  0F66  00B5               	movwf	??___ftmul+1
  8680  0F67  0833               	movf	___ftmul@f2+2,w
  8681  0F68  00B6               	movwf	??___ftmul+2
  8682  0F69  1003               	clrc
  8683  0F6A  0D35               	rlf	??___ftmul+1,w
  8684  0F6B  0D36               	rlf	??___ftmul+2,w
  8685  0F6C  00B7               	movwf	??___ftmul+3
  8686  0F6D  0837               	movf	??___ftmul+3,w
  8687  0F6E  00BD               	movwf	___ftmul@sign
  8688  0F6F  08BD               	movf	___ftmul@sign,f
  8689  0F70  1D03               	skipz
  8690  0F71  2F79               	goto	l6004
  8691  0F72  3000               	movlw	0
  8692  0F73  00AE               	movwf	?___ftmul
  8693  0F74  3000               	movlw	0
  8694  0F75  00AF               	movwf	?___ftmul+1
  8695  0F76  3000               	movlw	0
  8696  0F77  00B0               	movwf	?___ftmul+2
  8697  0F78  0008               	return
  8698  0F79                     l6004:	
  8699  0F79  083D               	movf	___ftmul@sign,w
  8700  0F7A  3E7B               	addlw	123
  8701  0F7B  00B4               	movwf	??___ftmul
  8702  0F7C  0834               	movf	??___ftmul,w
  8703  0F7D  07B8               	addwf	___ftmul@exp,f
  8704  0F7E  082E               	movf	___ftmul@f1,w
  8705  0F7F  00B4               	movwf	??___ftmul
  8706  0F80  082F               	movf	___ftmul@f1+1,w
  8707  0F81  00B5               	movwf	??___ftmul+1
  8708  0F82  0830               	movf	___ftmul@f1+2,w
  8709  0F83  00B6               	movwf	??___ftmul+2
  8710  0F84  3010               	movlw	16
  8711  0F85                     u4725:	
  8712  0F85  36B6               	lsrf	??___ftmul+2,f
  8713  0F86  0CB5               	rrf	??___ftmul+1,f
  8714  0F87  0CB4               	rrf	??___ftmul,f
  8715  0F88  0B89               	decfsz	9,f
  8716  0F89  2F85               	goto	u4725
  8717  0F8A  0834               	movf	??___ftmul,w
  8718  0F8B  00B7               	movwf	??___ftmul+3
  8719  0F8C  0837               	movf	??___ftmul+3,w
  8720  0F8D  00BD               	movwf	___ftmul@sign
  8721  0F8E  0831               	movf	___ftmul@f2,w
  8722  0F8F  00B4               	movwf	??___ftmul
  8723  0F90  0832               	movf	___ftmul@f2+1,w
  8724  0F91  00B5               	movwf	??___ftmul+1
  8725  0F92  0833               	movf	___ftmul@f2+2,w
  8726  0F93  00B6               	movwf	??___ftmul+2
  8727  0F94  3010               	movlw	16
  8728  0F95                     u4735:	
  8729  0F95  36B6               	lsrf	??___ftmul+2,f
  8730  0F96  0CB5               	rrf	??___ftmul+1,f
  8731  0F97  0CB4               	rrf	??___ftmul,f
  8732  0F98  0B89               	decfsz	9,f
  8733  0F99  2F95               	goto	u4735
  8734  0F9A  0834               	movf	??___ftmul,w
  8735  0F9B  00B7               	movwf	??___ftmul+3
  8736  0F9C  0837               	movf	??___ftmul+3,w
  8737  0F9D  06BD               	xorwf	___ftmul@sign,f
  8738  0F9E  3080               	movlw	128
  8739  0F9F  00B4               	movwf	??___ftmul
  8740  0FA0  0834               	movf	??___ftmul,w
  8741  0FA1  05BD               	andwf	___ftmul@sign,f
  8742  0FA2  17AF               	bsf	___ftmul@f1+1,7
  8743  0FA3  17B2               	bsf	___ftmul@f2+1,7
  8744  0FA4  30FF               	movlw	255
  8745  0FA5  05B1               	andwf	___ftmul@f2,f
  8746  0FA6  30FF               	movlw	255
  8747  0FA7  05B2               	andwf	___ftmul@f2+1,f
  8748  0FA8  3000               	movlw	0
  8749  0FA9  05B3               	andwf	___ftmul@f2+2,f
  8750  0FAA  3000               	movlw	0
  8751  0FAB  00B9               	movwf	___ftmul@f3_as_product
  8752  0FAC  3000               	movlw	0
  8753  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  8754  0FAE  3000               	movlw	0
  8755  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  8756  0FB0  3007               	movlw	7
  8757  0FB1  00B4               	movwf	??___ftmul
  8758  0FB2  0834               	movf	??___ftmul,w
  8759  0FB3  00BC               	movwf	___ftmul@cntr
  8760  0FB4                     l6016:	
  8761  0FB4  1C2E               	btfss	___ftmul@f1,0
  8762  0FB5  2FBC               	goto	l6020
  8763  0FB6  0831               	movf	___ftmul@f2,w
  8764  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  8765  0FB8  0832               	movf	___ftmul@f2+1,w
  8766  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8767  0FBA  0833               	movf	___ftmul@f2+2,w
  8768  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8769  0FBC                     l6020:	
  8770  0FBC  3001               	movlw	1
  8771  0FBD                     u4755:	
  8772  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  8773  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  8774  0FBF  0CAE               	rrf	___ftmul@f1,f
  8775  0FC0  0B89               	decfsz	9,f
  8776  0FC1  2FBD               	goto	u4755
  8777  0FC2  3001               	movlw	1
  8778  0FC3                     u4765:	
  8779  0FC3  35B1               	lslf	___ftmul@f2,f
  8780  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  8781  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  8782  0FC6  0B89               	decfsz	9,f
  8783  0FC7  2FC3               	goto	u4765
  8784  0FC8  3001               	movlw	1
  8785  0FC9  02BC               	subwf	___ftmul@cntr,f
  8786  0FCA  1D03               	btfss	3,2
  8787  0FCB  2FB4               	goto	l6016
  8788  0FCC  3009               	movlw	9
  8789  0FCD  00B4               	movwf	??___ftmul
  8790  0FCE  0834               	movf	??___ftmul,w
  8791  0FCF  00BC               	movwf	___ftmul@cntr
  8792  0FD0                     l6028:	
  8793  0FD0  1C2E               	btfss	___ftmul@f1,0
  8794  0FD1  2FD8               	goto	l6032
  8795  0FD2  0831               	movf	___ftmul@f2,w
  8796  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  8797  0FD4  0832               	movf	___ftmul@f2+1,w
  8798  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8799  0FD6  0833               	movf	___ftmul@f2+2,w
  8800  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8801  0FD8                     l6032:	
  8802  0FD8  3001               	movlw	1
  8803  0FD9                     u4795:	
  8804  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  8805  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  8806  0FDB  0CAE               	rrf	___ftmul@f1,f
  8807  0FDC  0B89               	decfsz	9,f
  8808  0FDD  2FD9               	goto	u4795
  8809  0FDE  3001               	movlw	1
  8810  0FDF                     u4805:	
  8811  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8812  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8813  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  8814  0FE2  0B89               	decfsz	9,f
  8815  0FE3  2FDF               	goto	u4805
  8816  0FE4  3001               	movlw	1
  8817  0FE5  02BC               	subwf	___ftmul@cntr,f
  8818  0FE6  1D03               	btfss	3,2
  8819  0FE7  2FD0               	goto	l6028
  8820  0FE8  0839               	movf	___ftmul@f3_as_product,w
  8821  0FE9  00A0               	movwf	___ftpack@arg
  8822  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  8823  0FEB  00A1               	movwf	___ftpack@arg+1
  8824  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  8825  0FED  00A2               	movwf	___ftpack@arg+2
  8826  0FEE  0838               	movf	___ftmul@exp,w
  8827  0FEF  00B4               	movwf	??___ftmul
  8828  0FF0  0834               	movf	??___ftmul,w
  8829  0FF1  00A3               	movwf	___ftpack@exp
  8830  0FF2  083D               	movf	___ftmul@sign,w
  8831  0FF3  00B5               	movwf	??___ftmul+1
  8832  0FF4  0835               	movf	??___ftmul+1,w
  8833  0FF5  00A4               	movwf	___ftpack@sign
  8834  0FF6  3188  20B7         	fcall	___ftpack
  8835  0FF8  0020               	movlb	0	; select bank0
  8836  0FF9  0820               	movf	?___ftpack,w
  8837  0FFA  00AE               	movwf	?___ftmul
  8838  0FFB  0821               	movf	?___ftpack+1,w
  8839  0FFC  00AF               	movwf	?___ftmul+1
  8840  0FFD  0822               	movf	?___ftpack+2,w
  8841  0FFE  00B0               	movwf	?___ftmul+2
  8842  0FFF  0008               	return
  8843  1000                     __end_of___ftmul:	
  8844                           
  8845                           	psect	text36
  8846  1D04                     __ptext36:	
  8847 ;; *************** function _setMemory_Modify *****************
  8848 ;; Defined at:
  8849 ;;		line 1003 in file "../src/MCU_B1.c"
  8850 ;; Parameters:    Size  Location     Type
  8851 ;;  command         1    wreg     unsigned char 
  8852 ;; Auto vars:     Size  Location     Type
  8853 ;;  command         1    1[BANK0 ] unsigned char 
  8854 ;; Return value:  Size  Location     Type
  8855 ;;		None               void
  8856 ;; Registers used:
  8857 ;;		wreg, status,2, status,0
  8858 ;; Tracked objects:
  8859 ;;		On entry : 0/0
  8860 ;;		On exit  : 0/0
  8861 ;;		Unchanged: 0/0
  8862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8864 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8865 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8866 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;Total ram usage:        2 bytes
  8868 ;; Hardware stack levels used:    1
  8869 ;; Hardware stack levels required when called:    5
  8870 ;; This function calls:
  8871 ;;		Nothing
  8872 ;; This function is called by:
  8873 ;;		_setLog_Code
  8874 ;;		_setRFSW_AdjControl
  8875 ;; This function uses a non-reentrant model
  8876 ;;
  8877                           
  8878                           
  8879                           ;psect for function _setMemory_Modify
  8880  1D04                     _setMemory_Modify:	
  8881                           
  8882                           ;incstack = 0
  8883                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8884                           ;setMemory_Modify@command stored from wreg
  8885  1D04  0020               	movlb	0	; select bank0
  8886  1D05  00A1               	movwf	setMemory_Modify@command
  8887                           
  8888                           ;MCU_B1.c: 1004: Memory.Modify = command == 1 ? 1 : 0;
  8889  1D06  0821               	movf	setMemory_Modify@command,w
  8890  1D07  3A01               	xorlw	1
  8891  1D08  3000               	movlw	0
  8892  1D09  1903               	skipnz
  8893  1D0A  3001               	movlw	1
  8894  1D0B  00A0               	movwf	??_setMemory_Modify
  8895  1D0C  0024               	movlb	4	; select bank4
  8896  1D0D  0844               	movf	(_Memory^(0+512)+36),w
  8897  1D0E  0020               	movlb	0	; select bank0
  8898  1D0F  0620               	xorwf	??_setMemory_Modify,w
  8899  1D10  39FE               	andlw	-2
  8900  1D11  0620               	xorwf	??_setMemory_Modify,w
  8901  1D12  0024               	movlb	4	; select bank4
  8902  1D13  00C4               	movwf	(_Memory^(0+512)+36)
  8903                           
  8904                           ;MCU_B1.c: 1005: Memory.Time = 0;
  8905  1D14  01C2               	clrf	(_Memory^(0+512)+34)
  8906  1D15  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8907  1D16  0008               	return
  8908  1D17                     __end_of_setMemory_Modify:	
  8909                           
  8910                           	psect	text37
  8911  1C98                     __ptext37:	
  8912 ;; *************** function _getRF_KeyStatus *****************
  8913 ;; Defined at:
  8914 ;;		line 190 in file "../src/RF_Control_B1.c"
  8915 ;; Parameters:    Size  Location     Type
  8916 ;;		None
  8917 ;; Auto vars:     Size  Location     Type
  8918 ;;  key             1    1[BANK0 ] unsigned char 
  8919 ;; Return value:  Size  Location     Type
  8920 ;;                  1    wreg      unsigned char 
  8921 ;; Registers used:
  8922 ;;		wreg, status,2
  8923 ;; Tracked objects:
  8924 ;;		On entry : 0/0
  8925 ;;		On exit  : 0/0
  8926 ;;		Unchanged: 0/0
  8927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8929 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8930 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8931 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8932 ;;Total ram usage:        3 bytes
  8933 ;; Hardware stack levels used:    1
  8934 ;; Hardware stack levels required when called:    5
  8935 ;; This function calls:
  8936 ;;		Nothing
  8937 ;; This function is called by:
  8938 ;;		_setRF_Main
  8939 ;; This function uses a non-reentrant model
  8940 ;;
  8941                           
  8942                           
  8943                           ;psect for function _getRF_KeyStatus
  8944  1C98                     _getRF_KeyStatus:	
  8945                           
  8946                           ;RF_Control_B1.c: 191: char key = 0;
  8947                           
  8948                           ;incstack = 0
  8949                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8950  1C98  0020               	movlb	0	; select bank0
  8951  1C99  01A1               	clrf	getRF_KeyStatus@key
  8952                           
  8953                           ;RF_Control_B1.c: 197: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8954  1C9A  01A2               	clrf	_getRF_KeyStatus$5268
  8955  1C9B  0AA2               	incf	_getRF_KeyStatus$5268,f
  8956  1C9C  1F0C               	btfss	12,6	;volatile
  8957  1C9D  1A0C               	btfsc	12,4	;volatile
  8958  1C9E  2CA3               	goto	l7046
  8959  1C9F  1C0C               	btfss	12,0	;volatile
  8960  1CA0  188D               	btfsc	13,1	;volatile
  8961  1CA1  2CA3               	goto	l7046
  8962  1CA2  01A2               	clrf	_getRF_KeyStatus$5268
  8963  1CA3                     l7046:	
  8964  1CA3  0822               	movf	_getRF_KeyStatus$5268,w
  8965  1CA4  00A0               	movwf	??_getRF_KeyStatus
  8966  1CA5  0820               	movf	??_getRF_KeyStatus,w
  8967  1CA6  00A1               	movwf	getRF_KeyStatus@key
  8968                           
  8969                           ;RF_Control_B1.c: 203: return key;
  8970  1CA7  0821               	movf	getRF_KeyStatus@key,w
  8971  1CA8  0008               	return
  8972  1CA9                     __end_of_getRF_KeyStatus:	
  8973                           
  8974                           	psect	text38
  8975  1C87                     __ptext38:	
  8976 ;; *************** function _getBuz_GO *****************
  8977 ;; Defined at:
  8978 ;;		line 82 in file "../src/Buzzer_B1.c"
  8979 ;; Parameters:    Size  Location     Type
  8980 ;;		None
  8981 ;; Auto vars:     Size  Location     Type
  8982 ;;  i               2    4[BANK0 ] int 
  8983 ;; Return value:  Size  Location     Type
  8984 ;;                  2    0[BANK0 ] int 
  8985 ;; Registers used:
  8986 ;;		wreg, status,2, status,0
  8987 ;; Tracked objects:
  8988 ;;		On entry : 0/0
  8989 ;;		On exit  : 0/0
  8990 ;;		Unchanged: 0/0
  8991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8992 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8993 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8994 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8995 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8996 ;;Total ram usage:        6 bytes
  8997 ;; Hardware stack levels used:    1
  8998 ;; Hardware stack levels required when called:    5
  8999 ;; This function calls:
  9000 ;;		Nothing
  9001 ;; This function is called by:
  9002 ;;		_setRF_Main
  9003 ;; This function uses a non-reentrant model
  9004 ;;
  9005                           
  9006                           
  9007                           ;psect for function _getBuz_GO
  9008  1C87                     _getBuz_GO:	
  9009                           
  9010                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  9011                           
  9012                           ;incstack = 0
  9013                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  9014  1C87  0021               	movlb	1	; select bank1
  9015  1C88  0C2F               	rrf	_Buz1^(0+128),w
  9016  1C89  3901               	andlw	1
  9017  1C8A  0020               	movlb	0	; select bank0
  9018  1C8B  00A2               	movwf	??_getBuz_GO
  9019  1C8C  01A3               	clrf	??_getBuz_GO+1
  9020  1C8D  0822               	movf	??_getBuz_GO,w
  9021  1C8E  00A4               	movwf	getBuz_GO@i
  9022  1C8F  0823               	movf	??_getBuz_GO+1,w
  9023  1C90  00A5               	movwf	getBuz_GO@i+1
  9024                           
  9025                           ;Buzzer_B1.c: 84: return i;
  9026  1C91  0825               	movf	getBuz_GO@i+1,w
  9027  1C92  01A1               	clrf	?_getBuz_GO+1
  9028  1C93  07A1               	addwf	?_getBuz_GO+1,f
  9029  1C94  0824               	movf	getBuz_GO@i,w
  9030  1C95  01A0               	clrf	?_getBuz_GO
  9031  1C96  07A0               	addwf	?_getBuz_GO,f
  9032  1C97  0008               	return
  9033  1C98                     __end_of_getBuz_GO:	
  9034                           
  9035                           	psect	text39
  9036  0918                     __ptext39:	
  9037 ;; *************** function _CC2500_TxData *****************
  9038 ;; Defined at:
  9039 ;;		line 32 in file "../src/CC2500_B1.c"
  9040 ;; Parameters:    Size  Location     Type
  9041 ;;		None
  9042 ;; Auto vars:     Size  Location     Type
  9043 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9044 ;; Return value:  Size  Location     Type
  9045 ;;		None               void
  9046 ;; Registers used:
  9047 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9048 ;; Tracked objects:
  9049 ;;		On entry : 0/0
  9050 ;;		On exit  : 0/0
  9051 ;;		Unchanged: 0/0
  9052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9054 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9055 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9056 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;Total ram usage:        2 bytes
  9058 ;; Hardware stack levels used:    1
  9059 ;; Hardware stack levels required when called:    7
  9060 ;; This function calls:
  9061 ;;		_CC2500_WriteByte
  9062 ;;		_CC2500_WriteCommand
  9063 ;;		_Timeout_Counter
  9064 ;;		_set_TimeoutCleared
  9065 ;; This function is called by:
  9066 ;;		_setRF_Main
  9067 ;; This function uses a non-reentrant model
  9068 ;;
  9069                           
  9070                           
  9071                           ;psect for function _CC2500_TxData
  9072  0918                     _CC2500_TxData:	
  9073                           
  9074                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9075                           ;CC2500_B1.c: 35: RC4 = 0;
  9076                           
  9077                           ;incstack = 0
  9078                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9079  0918  0020               	movlb	0	; select bank0
  9080  0919  120E               	bcf	14,4	;volatile
  9081                           
  9082                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9083  091A  307F               	movlw	127
  9084  091B  00A4               	movwf	??_CC2500_TxData
  9085  091C  0824               	movf	??_CC2500_TxData,w
  9086  091D  00FB               	movwf	_SPI0Buffer
  9087                           
  9088                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9089  091E  2922               	goto	l6702
  9090  091F                     l6700:	
  9091                           
  9092                           ;CC2500_B1.c: 38: Timeout_Counter();
  9093  091F  319D  25A1  3189   	fcall	_Timeout_Counter
  9094  0922                     l6702:	
  9095  0922  0020               	movlb	0	; select bank0
  9096  0923  1D0E               	btfss	14,2	;volatile
  9097  0924  2928               	goto	l6706
  9098  0925  0021               	movlb	1	; select bank1
  9099  0926  1D2C               	btfss	(_myMain^(0+128)+12),2
  9100  0927  291F               	goto	l6700
  9101  0928                     l6706:	
  9102                           
  9103                           ;CC2500_B1.c: 39: };
  9104                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9105  0928  319B  2343  3189   	fcall	_set_TimeoutCleared
  9106                           
  9107                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9108  092B  319D  2551  3189   	fcall	_CC2500_WriteByte
  9109                           
  9110                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9111  092E  0021               	movlb	1	; select bank1
  9112  092F  0853               	movf	_Tx_Length^(0+128),w
  9113  0930  0020               	movlb	0	; select bank0
  9114  0931  00A4               	movwf	??_CC2500_TxData
  9115  0932  0824               	movf	??_CC2500_TxData,w
  9116  0933  00FB               	movwf	_SPI0Buffer
  9117                           
  9118                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9119  0934  319D  2551  3189   	fcall	_CC2500_WriteByte
  9120                           
  9121                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9122  0937  0020               	movlb	0	; select bank0
  9123  0938  01A5               	clrf	CC2500_TxData@loop_e
  9124  0939                     l6720:	
  9125  0939  0021               	movlb	1	; select bank1
  9126  093A  0853               	movf	_Tx_Length^(0+128),w
  9127  093B  0020               	movlb	0	; select bank0
  9128  093C  0225               	subwf	CC2500_TxData@loop_e,w
  9129  093D  1803               	btfsc	3,0
  9130  093E  2951               	goto	l255
  9131                           
  9132                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9133  093F  0825               	movf	CC2500_TxData@loop_e,w
  9134  0940  3E20               	addlw	_RF_Data& (0+255)
  9135  0941  0086               	movwf	6
  9136  0942  3001               	movlw	1	; select bank2/3
  9137  0943  0087               	movwf	7
  9138  0944  0801               	movf	1,w
  9139  0945  00A4               	movwf	??_CC2500_TxData
  9140  0946  0824               	movf	??_CC2500_TxData,w
  9141  0947  00FB               	movwf	_SPI0Buffer
  9142                           
  9143                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9144  0948  319D  2551  3189   	fcall	_CC2500_WriteByte
  9145  094B  3001               	movlw	1
  9146  094C  0020               	movlb	0	; select bank0
  9147  094D  00A4               	movwf	??_CC2500_TxData
  9148  094E  0824               	movf	??_CC2500_TxData,w
  9149  094F  07A5               	addwf	CC2500_TxData@loop_e,f
  9150  0950  2939               	goto	l6720
  9151  0951                     l255:	
  9152                           
  9153                           ;CC2500_B1.c: 48: }
  9154                           ;CC2500_B1.c: 49: RC4 = 1;
  9155  0951  160E               	bsf	14,4	;volatile
  9156                           
  9157                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9158  0952  3035               	movlw	53
  9159  0953  319E  2639  3189   	fcall	_CC2500_WriteCommand
  9160                           
  9161                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9162  0956  295A               	goto	l6726
  9163  0957                     l6724:	
  9164                           
  9165                           ;CC2500_B1.c: 52: Timeout_Counter();
  9166  0957  319D  25A1  3189   	fcall	_Timeout_Counter
  9167  095A                     l6726:	
  9168  095A  0020               	movlb	0	; select bank0
  9169  095B  180D               	btfsc	13,0	;volatile
  9170  095C  2960               	goto	l6730
  9171  095D  0021               	movlb	1	; select bank1
  9172  095E  1D2C               	btfss	(_myMain^(0+128)+12),2
  9173  095F  2957               	goto	l6724
  9174  0960                     l6730:	
  9175                           
  9176                           ;CC2500_B1.c: 53: };
  9177                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9178  0960  319B  2343  3189   	fcall	_set_TimeoutCleared
  9179                           
  9180                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9181  0963  2967               	goto	l6734
  9182  0964                     l6732:	
  9183                           
  9184                           ;CC2500_B1.c: 57: Timeout_Counter();
  9185  0964  319D  25A1  3189   	fcall	_Timeout_Counter
  9186  0967                     l6734:	
  9187  0967  0020               	movlb	0	; select bank0
  9188  0968  1C0D               	btfss	13,0	;volatile
  9189  0969  296D               	goto	l6738
  9190  096A  0021               	movlb	1	; select bank1
  9191  096B  1D2C               	btfss	(_myMain^(0+128)+12),2
  9192  096C  2964               	goto	l6732
  9193  096D                     l6738:	
  9194                           
  9195                           ;CC2500_B1.c: 58: };
  9196                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9197  096D  319B  2343  3189   	fcall	_set_TimeoutCleared
  9198                           
  9199                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9200  0970  3036               	movlw	54
  9201  0971  319E  2639  3189   	fcall	_CC2500_WriteCommand
  9202                           
  9203                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9204  0974  303B               	movlw	59
  9205  0975  319E  2639         	fcall	_CC2500_WriteCommand
  9206                           
  9207                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9208  0977  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9209  0978  0008               	return
  9210  0979                     __end_of_CC2500_TxData:	
  9211                           
  9212                           	psect	text40
  9213  0B73                     __ptext40:	
  9214 ;; *************** function _CC2500_RxData *****************
  9215 ;; Defined at:
  9216 ;;		line 70 in file "../src/CC2500_B1.c"
  9217 ;; Parameters:    Size  Location     Type
  9218 ;;		None
  9219 ;; Auto vars:     Size  Location     Type
  9220 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9221 ;; Return value:  Size  Location     Type
  9222 ;;		None               void
  9223 ;; Registers used:
  9224 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9225 ;; Tracked objects:
  9226 ;;		On entry : 0/0
  9227 ;;		On exit  : 0/0
  9228 ;;		Unchanged: 0/0
  9229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9231 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9232 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9233 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9234 ;;Total ram usage:        2 bytes
  9235 ;; Hardware stack levels used:    1
  9236 ;; Hardware stack levels required when called:    7
  9237 ;; This function calls:
  9238 ;;		_CC2500_ReadByte
  9239 ;;		_CC2500_ReadStatus
  9240 ;;		_CC2500_WriteByte
  9241 ;;		_Timeout_Counter
  9242 ;;		_set_TimeoutCleared
  9243 ;; This function is called by:
  9244 ;;		_setRF_Main
  9245 ;; This function uses a non-reentrant model
  9246 ;;
  9247                           
  9248                           
  9249                           ;psect for function _CC2500_RxData
  9250  0B73                     _CC2500_RxData:	
  9251                           
  9252                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9253                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9254                           
  9255                           ;incstack = 0
  9256                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9257  0B73  0020               	movlb	0	; select bank0
  9258  0B74  180D               	btfsc	13,0	;volatile
  9259  0B75  2B7A               	goto	l6752
  9260  0B76  2B83               	goto	l6758
  9261  0B77                     l6750:	
  9262                           ;CC2500_B1.c: 76: {
  9263                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9264                           
  9265                           
  9266                           ;CC2500_B1.c: 78: Timeout_Counter();
  9267  0B77  319D  25A1  318B   	fcall	_Timeout_Counter
  9268  0B7A                     l6752:	
  9269  0B7A  0020               	movlb	0	; select bank0
  9270  0B7B  1C0D               	btfss	13,0	;volatile
  9271  0B7C  2B80               	goto	l6756
  9272  0B7D  0021               	movlb	1	; select bank1
  9273  0B7E  1D2C               	btfss	(_myMain^(0+128)+12),2
  9274  0B7F  2B77               	goto	l6750
  9275  0B80                     l6756:	
  9276                           
  9277                           ;CC2500_B1.c: 79: };
  9278                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9279  0B80  319B  2343  318B   	fcall	_set_TimeoutCleared
  9280  0B83                     l6758:	
  9281                           
  9282                           ;CC2500_B1.c: 81: }
  9283                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9284  0B83  303B               	movlw	59
  9285  0B84  319F  27BB  318B   	fcall	_CC2500_ReadStatus
  9286                           
  9287                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9288  0B87  0021               	movlb	1	; select bank1
  9289  0B88  0856               	movf	_s_data^(0+128),w
  9290  0B89  1903               	btfsc	3,2
  9291  0B8A  0008               	return
  9292                           
  9293                           ;CC2500_B1.c: 86: RC4 = 0;
  9294  0B8B  0020               	movlb	0	; select bank0
  9295  0B8C  120E               	bcf	14,4	;volatile
  9296                           
  9297                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9298  0B8D  30FF               	movlw	255
  9299  0B8E  00A4               	movwf	??_CC2500_RxData
  9300  0B8F  0824               	movf	??_CC2500_RxData,w
  9301  0B90  00FB               	movwf	_SPI0Buffer
  9302                           
  9303                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9304  0B91  2B95               	goto	l6768
  9305  0B92                     l6766:	
  9306                           
  9307                           ;CC2500_B1.c: 89: Timeout_Counter();
  9308  0B92  319D  25A1  318B   	fcall	_Timeout_Counter
  9309  0B95                     l6768:	
  9310  0B95  0020               	movlb	0	; select bank0
  9311  0B96  1D0E               	btfss	14,2	;volatile
  9312  0B97  2B9B               	goto	l6772
  9313  0B98  0021               	movlb	1	; select bank1
  9314  0B99  1D2C               	btfss	(_myMain^(0+128)+12),2
  9315  0B9A  2B92               	goto	l6766
  9316  0B9B                     l6772:	
  9317                           
  9318                           ;CC2500_B1.c: 90: };
  9319                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  9320  0B9B  319B  2343  318B   	fcall	_set_TimeoutCleared
  9321                           
  9322                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9323  0B9E  319D  2551  318B   	fcall	_CC2500_WriteByte
  9324                           
  9325                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9326  0BA1  319E  2622  318B   	fcall	_CC2500_ReadByte
  9327                           
  9328                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9329  0BA4  087B               	movf	_SPI0Buffer,w
  9330  0BA5  0020               	movlb	0	; select bank0
  9331  0BA6  00A4               	movwf	??_CC2500_RxData
  9332  0BA7  0824               	movf	??_CC2500_RxData,w
  9333  0BA8  0021               	movlb	1	; select bank1
  9334  0BA9  00D1               	movwf	_Rx_Length^(0+128)
  9335                           
  9336                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9337  0BAA  0020               	movlb	0	; select bank0
  9338  0BAB  01A5               	clrf	CC2500_RxData@loop_f
  9339  0BAC                     l6788:	
  9340  0BAC  0021               	movlb	1	; select bank1
  9341  0BAD  0851               	movf	_Rx_Length^(0+128),w
  9342  0BAE  0020               	movlb	0	; select bank0
  9343  0BAF  0225               	subwf	CC2500_RxData@loop_f,w
  9344  0BB0  1803               	btfsc	3,0
  9345  0BB1  2BC4               	goto	l6790
  9346                           
  9347                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9348  0BB2  319E  2622  318B   	fcall	_CC2500_ReadByte
  9349                           
  9350                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9351  0BB5  087B               	movf	_SPI0Buffer,w
  9352  0BB6  0020               	movlb	0	; select bank0
  9353  0BB7  00A4               	movwf	??_CC2500_RxData
  9354  0BB8  0825               	movf	CC2500_RxData@loop_f,w
  9355  0BB9  3E20               	addlw	_RF_Data& (0+255)
  9356  0BBA  0086               	movwf	6
  9357  0BBB  3001               	movlw	1	; select bank2/3
  9358  0BBC  0087               	movwf	7
  9359  0BBD  0824               	movf	??_CC2500_RxData,w
  9360  0BBE  0081               	movwf	1
  9361  0BBF  3001               	movlw	1
  9362  0BC0  00A4               	movwf	??_CC2500_RxData
  9363  0BC1  0824               	movf	??_CC2500_RxData,w
  9364  0BC2  07A5               	addwf	CC2500_RxData@loop_f,f
  9365  0BC3  2BAC               	goto	l6788
  9366  0BC4                     l6790:	
  9367                           
  9368                           ;CC2500_B1.c: 99: }
  9369                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9370  0BC4  319E  2622  318B   	fcall	_CC2500_ReadByte
  9371                           
  9372                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9373  0BC7  087B               	movf	_SPI0Buffer,w
  9374  0BC8  0020               	movlb	0	; select bank0
  9375  0BC9  00A4               	movwf	??_CC2500_RxData
  9376  0BCA  0824               	movf	??_CC2500_RxData,w
  9377  0BCB  0021               	movlb	1	; select bank1
  9378  0BCC  00D0               	movwf	_RSSI^(0+128)
  9379                           
  9380                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9381  0BCD  319E  2622         	fcall	_CC2500_ReadByte
  9382                           
  9383                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9384  0BCF  087B               	movf	_SPI0Buffer,w
  9385  0BD0  0020               	movlb	0	; select bank0
  9386  0BD1  00A4               	movwf	??_CC2500_RxData
  9387  0BD2  0824               	movf	??_CC2500_RxData,w
  9388  0BD3  0021               	movlb	1	; select bank1
  9389  0BD4  00CC               	movwf	_CRC^(0+128)
  9390                           
  9391                           ;CC2500_B1.c: 104: RC4 = 1;
  9392  0BD5  0020               	movlb	0	; select bank0
  9393  0BD6  160E               	bsf	14,4	;volatile
  9394                           
  9395                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9396  0BD7  0021               	movlb	1	; select bank1
  9397  0BD8  1BCC               	btfsc	_CRC^(0+128),7
  9398                           
  9399                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9400  0BD9  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9401                           
  9402                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9403  0BDA  11BB               	bcf	_RF1^(0+128),3
  9404                           
  9405                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9406  0BDB  14BB               	bsf	_RF1^(0+128),1
  9407  0BDC  0008               	return
  9408  0BDD                     __end_of_CC2500_RxData:	
  9409                           
  9410                           	psect	text41
  9411  1FBB                     __ptext41:	
  9412 ;; *************** function _CC2500_ReadStatus *****************
  9413 ;; Defined at:
  9414 ;;		line 301 in file "../src/CC2500_B1.c"
  9415 ;; Parameters:    Size  Location     Type
  9416 ;;  status_addr     1    wreg     unsigned char 
  9417 ;; Auto vars:     Size  Location     Type
  9418 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9419 ;; Return value:  Size  Location     Type
  9420 ;;		None               void
  9421 ;; Registers used:
  9422 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9423 ;; Tracked objects:
  9424 ;;		On entry : 0/0
  9425 ;;		On exit  : 0/0
  9426 ;;		Unchanged: 0/0
  9427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9429 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9430 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9431 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9432 ;;Total ram usage:        2 bytes
  9433 ;; Hardware stack levels used:    1
  9434 ;; Hardware stack levels required when called:    6
  9435 ;; This function calls:
  9436 ;;		_CC2500_ReadByte
  9437 ;;		_CC2500_WriteByte
  9438 ;;		_Timeout_Counter
  9439 ;;		_set_TimeoutCleared
  9440 ;; This function is called by:
  9441 ;;		_CC2500_RxData
  9442 ;; This function uses a non-reentrant model
  9443 ;;
  9444                           
  9445                           
  9446                           ;psect for function _CC2500_ReadStatus
  9447  1FBB                     _CC2500_ReadStatus:	
  9448                           
  9449                           ;incstack = 0
  9450                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9451                           ;CC2500_ReadStatus@status_addr stored from wreg
  9452  1FBB  0020               	movlb	0	; select bank0
  9453  1FBC  00A3               	movwf	CC2500_ReadStatus@status_addr
  9454                           
  9455                           ;CC2500_B1.c: 302: RC4 = 0;
  9456  1FBD  120E               	bcf	14,4	;volatile
  9457                           
  9458                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  9459  1FBE  0823               	movf	CC2500_ReadStatus@status_addr,w
  9460  1FBF  3EC0               	addlw	192
  9461  1FC0  00A2               	movwf	??_CC2500_ReadStatus
  9462  1FC1  0822               	movf	??_CC2500_ReadStatus,w
  9463  1FC2  00FB               	movwf	_SPI0Buffer
  9464                           
  9465                           ;CC2500_B1.c: 305: while (RC2 == 1 && myMain.Timeout == 0) {
  9466  1FC3  2FC7               	goto	l6532
  9467  1FC4                     l6530:	
  9468                           
  9469                           ;CC2500_B1.c: 306: Timeout_Counter();
  9470  1FC4  319D  25A1  319F   	fcall	_Timeout_Counter
  9471  1FC7                     l6532:	
  9472  1FC7  0020               	movlb	0	; select bank0
  9473  1FC8  1D0E               	btfss	14,2	;volatile
  9474  1FC9  2FCD               	goto	l6536
  9475  1FCA  0021               	movlb	1	; select bank1
  9476  1FCB  1D2C               	btfss	(_myMain^(0+128)+12),2
  9477  1FCC  2FC4               	goto	l6530
  9478  1FCD                     l6536:	
  9479                           
  9480                           ;CC2500_B1.c: 307: };
  9481                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  9482  1FCD  319B  2343  319F   	fcall	_set_TimeoutCleared
  9483                           
  9484                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  9485  1FD0  319D  2551  319F   	fcall	_CC2500_WriteByte
  9486                           
  9487                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  9488  1FD3  319E  2622         	fcall	_CC2500_ReadByte
  9489                           
  9490                           ;CC2500_B1.c: 312: RC4 = 1;
  9491  1FD5  0020               	movlb	0	; select bank0
  9492  1FD6  160E               	bsf	14,4	;volatile
  9493                           
  9494                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  9495  1FD7  087B               	movf	_SPI0Buffer,w
  9496  1FD8  00A2               	movwf	??_CC2500_ReadStatus
  9497  1FD9  0822               	movf	??_CC2500_ReadStatus,w
  9498  1FDA  0021               	movlb	1	; select bank1
  9499  1FDB  00D6               	movwf	_s_data^(0+128)
  9500  1FDC  0008               	return
  9501  1FDD                     __end_of_CC2500_ReadStatus:	
  9502                           
  9503                           	psect	text42
  9504  1E22                     __ptext42:	
  9505 ;; *************** function _CC2500_ReadByte *****************
  9506 ;; Defined at:
  9507 ;;		line 235 in file "../src/CC2500_B1.c"
  9508 ;; Parameters:    Size  Location     Type
  9509 ;;		None
  9510 ;; Auto vars:     Size  Location     Type
  9511 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9512 ;; Return value:  Size  Location     Type
  9513 ;;		None               void
  9514 ;; Registers used:
  9515 ;;		wreg, status,2, status,0
  9516 ;; Tracked objects:
  9517 ;;		On entry : 0/0
  9518 ;;		On exit  : 0/0
  9519 ;;		Unchanged: 0/0
  9520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9522 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9523 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9524 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9525 ;;Total ram usage:        2 bytes
  9526 ;; Hardware stack levels used:    1
  9527 ;; Hardware stack levels required when called:    5
  9528 ;; This function calls:
  9529 ;;		Nothing
  9530 ;; This function is called by:
  9531 ;;		_CC2500_RxData
  9532 ;;		_CC2500_ReadStatus
  9533 ;;		_CC2500_ReadREG
  9534 ;; This function uses a non-reentrant model
  9535 ;;
  9536                           
  9537                           
  9538                           ;psect for function _CC2500_ReadByte
  9539  1E22                     _CC2500_ReadByte:	
  9540                           
  9541                           ;CC2500_B1.c: 236: unsigned char loop_b;
  9542                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  9543                           
  9544                           ;incstack = 0
  9545                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9546  1E22  0020               	movlb	0	; select bank0
  9547  1E23  01A1               	clrf	CC2500_ReadByte@loop_b
  9548  1E24                     L6:	
  9549  1E24  3008               	movlw	8
  9550  1E25  0221               	subwf	CC2500_ReadByte@loop_b,w
  9551  1E26  1803               	btfsc	3,0
  9552  1E27  0008               	return
  9553                           
  9554                           ;CC2500_B1.c: 238: RC1 = 1;
  9555  1E28  148E               	bsf	14,1	;volatile
  9556                           
  9557                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  9558  1E29  1003               	clrc
  9559  1E2A  0DFB               	rlf	_SPI0Buffer,f
  9560                           
  9561                           ;CC2500_B1.c: 240: if (RC2 == 1)
  9562  1E2B  1D0E               	btfss	14,2	;volatile
  9563  1E2C  2E2F               	goto	l6432
  9564                           
  9565                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9566  1E2D  147B               	bsf	_SPI0Buffer,0
  9567  1E2E  2E33               	goto	l6434
  9568  1E2F                     l6432:	
  9569                           
  9570                           ;CC2500_B1.c: 242: else
  9571                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9572  1E2F  30FE               	movlw	254
  9573  1E30  00A0               	movwf	??_CC2500_ReadByte
  9574  1E31  0820               	movf	??_CC2500_ReadByte,w
  9575  1E32  05FB               	andwf	_SPI0Buffer,f
  9576  1E33                     l6434:	
  9577                           
  9578                           ;CC2500_B1.c: 244: RC1 = 0;
  9579  1E33  108E               	bcf	14,1	;volatile
  9580  1E34  3001               	movlw	1
  9581  1E35  00A0               	movwf	??_CC2500_ReadByte
  9582  1E36  0820               	movf	??_CC2500_ReadByte,w
  9583  1E37  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9584  1E38  2E24               	goto	L6
  9585  1E39                     __end_of_CC2500_ReadByte:	
  9586                           
  9587                           	psect	text43
  9588  1B27                     __ptext43:	
  9589 ;; *************** function _RF_Initialization *****************
  9590 ;; Defined at:
  9591 ;;		line 9 in file "../src/RF_Control_B1.c"
  9592 ;; Parameters:    Size  Location     Type
  9593 ;;		None
  9594 ;; Auto vars:     Size  Location     Type
  9595 ;;		None
  9596 ;; Return value:  Size  Location     Type
  9597 ;;		None               void
  9598 ;; Registers used:
  9599 ;;		wreg, status,2, status,0, pclath, cstack
  9600 ;; Tracked objects:
  9601 ;;		On entry : 0/0
  9602 ;;		On exit  : 0/0
  9603 ;;		Unchanged: 0/0
  9604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9609 ;;Total ram usage:        0 bytes
  9610 ;; Hardware stack levels used:    1
  9611 ;; Hardware stack levels required when called:    6
  9612 ;; This function calls:
  9613 ;;		_setRF_Initialization
  9614 ;; This function is called by:
  9615 ;;		_main
  9616 ;; This function uses a non-reentrant model
  9617 ;;
  9618                           
  9619                           
  9620                           ;psect for function _RF_Initialization
  9621  1B27                     _RF_Initialization:	
  9622                           
  9623                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9624                           
  9625                           ;incstack = 0
  9626                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9627  1B27  319B  23AD         	fcall	_setRF_Initialization
  9628  1B29  0008               	return
  9629  1B2A                     __end_of_RF_Initialization:	
  9630                           
  9631                           	psect	text44
  9632  1BAD                     __ptext44:	
  9633 ;; *************** function _setRF_Initialization *****************
  9634 ;; Defined at:
  9635 ;;		line 43 in file "../src/RF_Control_B1.c"
  9636 ;; Parameters:    Size  Location     Type
  9637 ;;		None
  9638 ;; Auto vars:     Size  Location     Type
  9639 ;;		None
  9640 ;; Return value:  Size  Location     Type
  9641 ;;		None               void
  9642 ;; Registers used:
  9643 ;;		wreg
  9644 ;; Tracked objects:
  9645 ;;		On entry : 0/0
  9646 ;;		On exit  : 0/0
  9647 ;;		Unchanged: 0/0
  9648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9651 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9652 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9653 ;;Total ram usage:        1 bytes
  9654 ;; Hardware stack levels used:    1
  9655 ;; Hardware stack levels required when called:    5
  9656 ;; This function calls:
  9657 ;;		Nothing
  9658 ;; This function is called by:
  9659 ;;		_RF_Initialization
  9660 ;; This function uses a non-reentrant model
  9661 ;;
  9662                           
  9663                           
  9664                           ;psect for function _setRF_Initialization
  9665  1BAD                     _setRF_Initialization:	
  9666                           
  9667                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9668                           
  9669                           ;incstack = 0
  9670                           ; Regs used in _setRF_Initialization: [wreg]
  9671  1BAD  3015               	movlw	21
  9672  1BAE  0020               	movlb	0	; select bank0
  9673  1BAF  00A0               	movwf	??_setRF_Initialization
  9674  1BB0  0820               	movf	??_setRF_Initialization,w
  9675  1BB1  0021               	movlb	1	; select bank1
  9676  1BB2  00D3               	movwf	_Tx_Length^(0+128)
  9677                           
  9678                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9679  1BB3  300A               	movlw	10
  9680  1BB4  00C2               	movwf	(_RF1^(0+128)+7)
  9681  1BB5  3000               	movlw	0
  9682  1BB6  00C3               	movwf	(_RF1^(0+128)+8)
  9683  1BB7  0008               	return
  9684  1BB8                     __end_of_setRF_Initialization:	
  9685                           
  9686                           	psect	text45
  9687  1CCD                     __ptext45:	
  9688 ;; *************** function _Mcu_Initialization *****************
  9689 ;; Defined at:
  9690 ;;		line 30 in file "../src/MCU_B1.c"
  9691 ;; Parameters:    Size  Location     Type
  9692 ;;		None
  9693 ;; Auto vars:     Size  Location     Type
  9694 ;;		None
  9695 ;; Return value:  Size  Location     Type
  9696 ;;		None               void
  9697 ;; Registers used:
  9698 ;;		wreg, status,2, status,0, pclath, cstack
  9699 ;; Tracked objects:
  9700 ;;		On entry : 0/0
  9701 ;;		On exit  : 0/0
  9702 ;;		Unchanged: 0/0
  9703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9708 ;;Total ram usage:        0 bytes
  9709 ;; Hardware stack levels used:    1
  9710 ;; Hardware stack levels required when called:    6
  9711 ;; This function calls:
  9712 ;;		_ADC_Set
  9713 ;;		_Fosc_Set
  9714 ;;		_IOC_Set
  9715 ;;		_IO_Set
  9716 ;;		_TMR1_Set
  9717 ;;		_WDT_Set
  9718 ;; This function is called by:
  9719 ;;		_main
  9720 ;; This function uses a non-reentrant model
  9721 ;;
  9722                           
  9723                           
  9724                           ;psect for function _Mcu_Initialization
  9725  1CCD                     _Mcu_Initialization:	
  9726                           
  9727                           ;MCU_B1.c: 32: Fosc_Set();
  9728                           
  9729                           ;incstack = 0
  9730                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9731  1CCD  319B  233F  319C   	fcall	_Fosc_Set
  9732                           
  9733                           ;MCU_B1.c: 34: IO_Set();
  9734  1CD0  319E  2652  319C   	fcall	_IO_Set
  9735                           
  9736                           ;MCU_B1.c: 36: ;;
  9737                           ;MCU_B1.c: 38: TMR1_Set();
  9738  1CD3  319C  2400  319C   	fcall	_TMR1_Set
  9739                           
  9740                           ;MCU_B1.c: 40: ADC_Set();
  9741  1CD6  319B  2359  319C   	fcall	_ADC_Set
  9742                           
  9743                           ;MCU_B1.c: 42: ;;
  9744                           ;MCU_B1.c: 44: ;;
  9745                           ;MCU_B1.c: 46: IOC_Set();
  9746  1CD9  319B  23F4  319C   	fcall	_IOC_Set
  9747                           
  9748                           ;MCU_B1.c: 48: ;;
  9749                           ;MCU_B1.c: 50: ;;
  9750                           ;MCU_B1.c: 52: WDT_Set();
  9751  1CDC  319B  23A2         	fcall	_WDT_Set
  9752  1CDE  0008               	return
  9753  1CDF                     __end_of_Mcu_Initialization:	
  9754                           
  9755                           	psect	text46
  9756  1BA2                     __ptext46:	
  9757 ;; *************** function _WDT_Set *****************
  9758 ;; Defined at:
  9759 ;;		line 1022 in file "../src/MCU_B1.c"
  9760 ;; Parameters:    Size  Location     Type
  9761 ;;		None
  9762 ;; Auto vars:     Size  Location     Type
  9763 ;;		None
  9764 ;; Return value:  Size  Location     Type
  9765 ;;		None               void
  9766 ;; Registers used:
  9767 ;;		wreg
  9768 ;; Tracked objects:
  9769 ;;		On entry : 0/0
  9770 ;;		On exit  : 0/0
  9771 ;;		Unchanged: 0/0
  9772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9775 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9776 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9777 ;;Total ram usage:        1 bytes
  9778 ;; Hardware stack levels used:    1
  9779 ;; Hardware stack levels required when called:    5
  9780 ;; This function calls:
  9781 ;;		Nothing
  9782 ;; This function is called by:
  9783 ;;		_Mcu_Initialization
  9784 ;; This function uses a non-reentrant model
  9785 ;;
  9786                           
  9787                           
  9788                           ;psect for function _WDT_Set
  9789  1BA2                     _WDT_Set:	
  9790                           
  9791                           ;MCU_B1.c: 1029: WDTCON = 0b00010111;;
  9792                           
  9793                           ;incstack = 0
  9794                           ; Regs used in _WDT_Set: [wreg]
  9795  1BA2  3017               	movlw	23
  9796  1BA3  0021               	movlb	1	; select bank1
  9797  1BA4  0097               	movwf	23	;volatile
  9798                           
  9799                           ;MCU_B1.c: 1031: WDT.Enable = 1;
  9800  1BA5  144A               	bsf	_WDT^(0+128),0
  9801                           
  9802                           ;MCU_B1.c: 1032: WDT.Timer = 10;
  9803  1BA6  300A               	movlw	10
  9804  1BA7  0020               	movlb	0	; select bank0
  9805  1BA8  00A0               	movwf	??_WDT_Set
  9806  1BA9  0820               	movf	??_WDT_Set,w
  9807  1BAA  0021               	movlb	1	; select bank1
  9808  1BAB  00CB               	movwf	(_WDT^(0+128)+1)
  9809  1BAC  0008               	return
  9810  1BAD                     __end_of_WDT_Set:	
  9811                           
  9812                           	psect	text47
  9813  1C00                     __ptext47:	
  9814 ;; *************** function _TMR1_Set *****************
  9815 ;; Defined at:
  9816 ;;		line 199 in file "../src/MCU_B1.c"
  9817 ;; Parameters:    Size  Location     Type
  9818 ;;		None
  9819 ;; Auto vars:     Size  Location     Type
  9820 ;;		None
  9821 ;; Return value:  Size  Location     Type
  9822 ;;		None               void
  9823 ;; Registers used:
  9824 ;;		wreg
  9825 ;; Tracked objects:
  9826 ;;		On entry : 0/0
  9827 ;;		On exit  : 0/0
  9828 ;;		Unchanged: 0/0
  9829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9834 ;;Total ram usage:        0 bytes
  9835 ;; Hardware stack levels used:    1
  9836 ;; Hardware stack levels required when called:    5
  9837 ;; This function calls:
  9838 ;;		Nothing
  9839 ;; This function is called by:
  9840 ;;		_Mcu_Initialization
  9841 ;; This function uses a non-reentrant model
  9842 ;;
  9843                           
  9844                           
  9845                           ;psect for function _TMR1_Set
  9846  1C00                     _TMR1_Set:	
  9847                           
  9848                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9849                           
  9850                           ;incstack = 0
  9851                           ; Regs used in _TMR1_Set: [wreg]
  9852  1C00  3041               	movlw	65
  9853  1C01  0020               	movlb	0	; select bank0
  9854  1C02  0098               	movwf	24	;volatile
  9855                           
  9856                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9857  1C03  30FA               	movlw	250
  9858  1C04  0097               	movwf	23	;volatile
  9859                           
  9860                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9861  1C05  3038               	movlw	56
  9862  1C06  0096               	movwf	22	;volatile
  9863                           
  9864                           ;MCU_B1.c: 203: TMR1IE = 1;
  9865  1C07  0021               	movlb	1	; select bank1
  9866  1C08  1411               	bsf	17,0	;volatile
  9867                           
  9868                           ;MCU_B1.c: 204: PEIE = 1;
  9869  1C09  170B               	bsf	11,6	;volatile
  9870                           
  9871                           ;MCU_B1.c: 205: GIE = 1;
  9872  1C0A  178B               	bsf	11,7	;volatile
  9873  1C0B  0008               	return
  9874  1C0C                     __end_of_TMR1_Set:	
  9875                           
  9876                           	psect	text48
  9877  1E52                     __ptext48:	
  9878 ;; *************** function _IO_Set *****************
  9879 ;; Defined at:
  9880 ;;		line 60 in file "../src/MCU_B1.c"
  9881 ;; Parameters:    Size  Location     Type
  9882 ;;		None
  9883 ;; Auto vars:     Size  Location     Type
  9884 ;;		None
  9885 ;; Return value:  Size  Location     Type
  9886 ;;		None               void
  9887 ;; Registers used:
  9888 ;;		wreg, status,2
  9889 ;; Tracked objects:
  9890 ;;		On entry : 0/0
  9891 ;;		On exit  : 0/0
  9892 ;;		Unchanged: 0/0
  9893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9898 ;;Total ram usage:        0 bytes
  9899 ;; Hardware stack levels used:    1
  9900 ;; Hardware stack levels required when called:    5
  9901 ;; This function calls:
  9902 ;;		Nothing
  9903 ;; This function is called by:
  9904 ;;		_Mcu_Initialization
  9905 ;; This function uses a non-reentrant model
  9906 ;;
  9907                           
  9908                           
  9909                           ;psect for function _IO_Set
  9910  1E52                     _IO_Set:	
  9911                           
  9912                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9913                           
  9914                           ;incstack = 0
  9915                           ; Regs used in _IO_Set: [wreg+status,2]
  9916  1E52  3077               	movlw	119
  9917  1E53  0021               	movlb	1	; select bank1
  9918  1E54  008C               	movwf	12	;volatile
  9919                           
  9920                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9921  1E55  3007               	movlw	7
  9922  1E56  008D               	movwf	13	;volatile
  9923                           
  9924                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9925  1E57  300C               	movlw	12
  9926  1E58  008E               	movwf	14	;volatile
  9927                           
  9928                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9929  1E59  0022               	movlb	2	; select bank2
  9930  1E5A  018C               	clrf	12	;volatile
  9931                           
  9932                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9933  1E5B  3002               	movlw	2
  9934  1E5C  008D               	movwf	13	;volatile
  9935                           
  9936                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9937  1E5D  018E               	clrf	14	;volatile
  9938                           
  9939                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9940  1E5E  3022               	movlw	34
  9941  1E5F  0023               	movlb	3	; select bank3
  9942  1E60  008C               	movwf	12	;volatile
  9943                           
  9944                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9945  1E61  018D               	clrf	13	;volatile
  9946                           
  9947                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9948  1E62  018E               	clrf	14	;volatile
  9949                           
  9950                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9951  1E63  3077               	movlw	119
  9952  1E64  0020               	movlb	0	; select bank0
  9953  1E65  008C               	movwf	12	;volatile
  9954                           
  9955                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  9956  1E66  3007               	movlw	7
  9957  1E67  008D               	movwf	13	;volatile
  9958                           
  9959                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9960  1E68  300C               	movlw	12
  9961  1E69  008E               	movwf	14	;volatile
  9962  1E6A  0008               	return
  9963  1E6B                     __end_of_IO_Set:	
  9964                           
  9965                           	psect	text49
  9966  1BF4                     __ptext49:	
  9967 ;; *************** function _IOC_Set *****************
  9968 ;; Defined at:
  9969 ;;		line 366 in file "../src/MCU_B1.c"
  9970 ;; Parameters:    Size  Location     Type
  9971 ;;		None
  9972 ;; Auto vars:     Size  Location     Type
  9973 ;;		None
  9974 ;; Return value:  Size  Location     Type
  9975 ;;		None               void
  9976 ;; Registers used:
  9977 ;;		wreg, status,2
  9978 ;; Tracked objects:
  9979 ;;		On entry : 0/0
  9980 ;;		On exit  : 0/0
  9981 ;;		Unchanged: 0/0
  9982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9987 ;;Total ram usage:        0 bytes
  9988 ;; Hardware stack levels used:    1
  9989 ;; Hardware stack levels required when called:    5
  9990 ;; This function calls:
  9991 ;;		Nothing
  9992 ;; This function is called by:
  9993 ;;		_Mcu_Initialization
  9994 ;; This function uses a non-reentrant model
  9995 ;;
  9996                           
  9997                           
  9998                           ;psect for function _IOC_Set
  9999  1BF4                     _IOC_Set:	
 10000                           
 10001                           ;MCU_B1.c: 367: WPUB2 = 0;
 10002                           
 10003                           ;incstack = 0
 10004                           ; Regs used in _IOC_Set: [wreg+status,2]
 10005  1BF4  0024               	movlb	4	; select bank4
 10006  1BF5  110D               	bcf	13,2	;volatile
 10007                           
 10008                           ;MCU_B1.c: 387: IOCBP = 0b00000000;
 10009  1BF6  0027               	movlb	7	; select bank7
 10010  1BF7  0194               	clrf	20	;volatile
 10011                           
 10012                           ;MCU_B1.c: 388: IOCBN = 0b00000100;
 10013  1BF8  3004               	movlw	4
 10014  1BF9  0095               	movwf	21	;volatile
 10015                           
 10016                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
 10017  1BFA  0196               	clrf	22	;volatile
 10018                           
 10019                           ;MCU_B1.c: 394: IOCIE = 1;
 10020  1BFB  158B               	bsf	11,3	;volatile
 10021                           
 10022                           ;MCU_B1.c: 395: IOCIF = 0;
 10023  1BFC  100B               	bcf	11,0	;volatile
 10024                           
 10025                           ;MCU_B1.c: 396: PEIE = 1;
 10026  1BFD  170B               	bsf	11,6	;volatile
 10027                           
 10028                           ;MCU_B1.c: 397: GIE = 1;
 10029  1BFE  178B               	bsf	11,7	;volatile
 10030  1BFF  0008               	return
 10031  1C00                     __end_of_IOC_Set:	
 10032                           
 10033                           	psect	text50
 10034  1B3F                     __ptext50:	
 10035 ;; *************** function _Fosc_Set *****************
 10036 ;; Defined at:
 10037 ;;		line 56 in file "../src/MCU_B1.c"
 10038 ;; Parameters:    Size  Location     Type
 10039 ;;		None
 10040 ;; Auto vars:     Size  Location     Type
 10041 ;;		None
 10042 ;; Return value:  Size  Location     Type
 10043 ;;		None               void
 10044 ;; Registers used:
 10045 ;;		wreg
 10046 ;; Tracked objects:
 10047 ;;		On entry : 0/0
 10048 ;;		On exit  : 0/0
 10049 ;;		Unchanged: 0/0
 10050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10054 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10055 ;;Total ram usage:        0 bytes
 10056 ;; Hardware stack levels used:    1
 10057 ;; Hardware stack levels required when called:    5
 10058 ;; This function calls:
 10059 ;;		Nothing
 10060 ;; This function is called by:
 10061 ;;		_Mcu_Initialization
 10062 ;; This function uses a non-reentrant model
 10063 ;;
 10064                           
 10065                           
 10066                           ;psect for function _Fosc_Set
 10067  1B3F                     _Fosc_Set:	
 10068                           
 10069                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10070                           
 10071                           ;incstack = 0
 10072                           ; Regs used in _Fosc_Set: [wreg]
 10073  1B3F  3078               	movlw	120
 10074  1B40  0021               	movlb	1	; select bank1
 10075  1B41  0099               	movwf	25	;volatile
 10076  1B42  0008               	return
 10077  1B43                     __end_of_Fosc_Set:	
 10078                           
 10079                           	psect	text51
 10080  1B59                     __ptext51:	
 10081 ;; *************** function _ADC_Set *****************
 10082 ;; Defined at:
 10083 ;;		line 420 in file "../src/MCU_B1.c"
 10084 ;; Parameters:    Size  Location     Type
 10085 ;;		None
 10086 ;; Auto vars:     Size  Location     Type
 10087 ;;		None
 10088 ;; Return value:  Size  Location     Type
 10089 ;;		None               void
 10090 ;; Registers used:
 10091 ;;		wreg
 10092 ;; Tracked objects:
 10093 ;;		On entry : 0/0
 10094 ;;		On exit  : 0/0
 10095 ;;		Unchanged: 0/0
 10096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10101 ;;Total ram usage:        0 bytes
 10102 ;; Hardware stack levels used:    1
 10103 ;; Hardware stack levels required when called:    5
 10104 ;; This function calls:
 10105 ;;		Nothing
 10106 ;; This function is called by:
 10107 ;;		_Mcu_Initialization
 10108 ;; This function uses a non-reentrant model
 10109 ;;
 10110                           
 10111                           
 10112                           ;psect for function _ADC_Set
 10113  1B59                     _ADC_Set:	
 10114                           
 10115                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
 10116                           
 10117                           ;incstack = 0
 10118                           ; Regs used in _ADC_Set: [wreg]
 10119  1B59  30F3               	movlw	243
 10120  1B5A  0021               	movlb	1	; select bank1
 10121  1B5B  009E               	movwf	30	;volatile
 10122                           
 10123                           ;MCU_B1.c: 422: FVRCON = 0xc1;
 10124  1B5C  30C1               	movlw	193
 10125  1B5D  0022               	movlb	2	; select bank2
 10126  1B5E  0097               	movwf	23	;volatile
 10127  1B5F  0008               	return
 10128  1B60                     __end_of_ADC_Set:	
 10129                           
 10130                           	psect	text52
 10131  01BA                     __ptext52:	
 10132 ;; *************** function _Load_Main *****************
 10133 ;; Defined at:
 10134 ;;		line 39 in file "../src/OverLoad_B1.c"
 10135 ;; Parameters:    Size  Location     Type
 10136 ;;		None
 10137 ;; Auto vars:     Size  Location     Type
 10138 ;;  i               1   15[BANK0 ] unsigned char 
 10139 ;;  error           1   14[BANK0 ] unsigned char 
 10140 ;;  adjgo           1   12[BANK0 ] unsigned char 
 10141 ;;  j               1   11[BANK0 ] unsigned char 
 10142 ;; Return value:  Size  Location     Type
 10143 ;;		None               void
 10144 ;; Registers used:
 10145 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10146 ;; Tracked objects:
 10147 ;;		On entry : 0/0
 10148 ;;		On exit  : 0/0
 10149 ;;		Unchanged: 0/0
 10150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10152 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10153 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10154 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10155 ;;Total ram usage:        7 bytes
 10156 ;; Hardware stack levels used:    1
 10157 ;; Hardware stack levels required when called:    8
 10158 ;; This function calls:
 10159 ;;		_getAll_DimmerLights_AdjGO
 10160 ;;		_getMain_All_Error_Status
 10161 ;;		_getMain_LightsStatus
 10162 ;;		_getMain_Lights_Count
 10163 ;;		_getMain_LoadOK
 10164 ;;		_setLoad_AH_AL_Restore
 10165 ;; This function is called by:
 10166 ;;		_main
 10167 ;; This function uses a non-reentrant model
 10168 ;;
 10169                           
 10170                           
 10171                           ;psect for function _Load_Main
 10172  01BA                     _Load_Main:	
 10173                           
 10174                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
 10175                           
 10176                           ;incstack = 0
 10177                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10178  01BA  0020               	movlb	0	; select bank0
 10179  01BB  01AF               	clrf	Load_Main@i
 10180  01BC  01AB               	clrf	Load_Main@j
 10181  01BD  3000               	movlw	0
 10182  01BE  3191  21E7  3181   	fcall	_getMain_All_Error_Status
 10183  01C1  0020               	movlb	0	; select bank0
 10184  01C2  00A9               	movwf	??_Load_Main
 10185  01C3  0829               	movf	??_Load_Main,w
 10186  01C4  00AE               	movwf	Load_Main@error
 10187  01C5  01AC               	clrf	Load_Main@adjgo
 10188                           
 10189                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10190  01C6  0022               	movlb	2	; select bank2
 10191  01C7  1C43               	btfss	_Load^(0+256),0
 10192  01C8  2AF8               	goto	l1458
 10193                           
 10194                           ;OverLoad_B1.c: 45: adjgo = getAll_DimmerLights_AdjGO();
 10195  01C9  319C  2476  3181   	fcall	_getAll_DimmerLights_AdjGO
 10196  01CC  0020               	movlb	0	; select bank0
 10197  01CD  00A9               	movwf	??_Load_Main
 10198  01CE  0829               	movf	??_Load_Main,w
 10199  01CF  00AC               	movwf	Load_Main@adjgo
 10200                           
 10201                           ;OverLoad_B1.c: 47: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
 10202  01D0  01AD               	clrf	_Load_Main$3859
 10203  01D1  3191  2159  3181   	fcall	_getMain_LightsStatus
 10204  01D4  3A01               	xorlw	1
 10205  01D5  1D03               	skipz
 10206  01D6  29E0               	goto	l8058
 10207  01D7  0020               	movlb	0	; select bank0
 10208  01D8  08AE               	movf	Load_Main@error,f
 10209  01D9  1D03               	skipz
 10210  01DA  29E0               	goto	l8058
 10211  01DB  08AC               	movf	Load_Main@adjgo,f
 10212  01DC  1D03               	skipz
 10213  01DD  29E0               	goto	l8058
 10214  01DE  01AD               	clrf	_Load_Main$3859
 10215  01DF  0AAD               	incf	_Load_Main$3859,f
 10216  01E0                     l8058:	
 10217  01E0  0020               	movlb	0	; select bank0
 10218  01E1  082D               	movf	_Load_Main$3859,w
 10219  01E2  0022               	movlb	2	; select bank2
 10220  01E3  10C3               	bcf	_Load^(0+256),1
 10221  01E4  1D03               	skipz
 10222  01E5  14C3               	bsf	_Load^(0+256),1
 10223                           
 10224                           ;OverLoad_B1.c: 48: if (getMain_LoadOK() == 1 && Load.Run == 0) {
 10225  01E6  319C  2419  3181   	fcall	_getMain_LoadOK
 10226  01E9  3A01               	xorlw	1
 10227  01EA  1D03               	skipz
 10228  01EB  29F1               	goto	l1461
 10229  01EC  0022               	movlb	2	; select bank2
 10230  01ED  19C3               	btfsc	_Load^(0+256),3
 10231  01EE  29F1               	goto	l1461
 10232                           
 10233                           ;OverLoad_B1.c: 49: Load.Run = 1;
 10234  01EF  15C3               	bsf	_Load^(0+256),3
 10235                           
 10236                           ;OverLoad_B1.c: 50: Load.OK = 0;
 10237  01F0  13C3               	bcf	_Load^(0+256),7
 10238  01F1                     l1461:	
 10239                           
 10240                           ;OverLoad_B1.c: 51: }
 10241                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
 10242  01F1  0022               	movlb	2	; select bank2
 10243  01F2  1CC3               	btfss	_Load^(0+256),1
 10244  01F3  2AC8               	goto	l1462
 10245                           
 10246                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
 10247  01F4  1543               	bsf	_Load^(0+256),2
 10248                           
 10249                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
 10250  01F5  1E43               	btfss	_Load^(0+256),4
 10251  01F6  2AC6               	goto	l1463
 10252                           
 10253                           ;OverLoad_B1.c: 58: Load.Time++;
 10254  01F7  3001               	movlw	1
 10255  01F8  07C4               	addwf	(_Load^(0+256)+1),f
 10256  01F9  3000               	movlw	0
 10257  01FA  3DC5               	addwfc	((_Load+1)^(0+256)+1),f
 10258                           
 10259                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
 10260  01FB  3000               	movlw	0
 10261  01FC  0245               	subwf	((_Load+1)^(0+256)+1),w
 10262  01FD  3005               	movlw	5
 10263  01FE  1903               	skipnz
 10264  01FF  0244               	subwf	(_Load^(0+256)+1),w
 10265  0200  1C03               	skipc
 10266  0201  0008               	return
 10267                           
 10268                           ;OverLoad_B1.c: 60: Load.Time = 0;
 10269  0202  01C4               	clrf	(_Load^(0+256)+1)
 10270  0203  01C5               	clrf	((_Load+1)^(0+256)+1)
 10271                           
 10272                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
 10273  0204  1243               	bcf	_Load^(0+256),4
 10274                           
 10275                           ;OverLoad_B1.c: 63: for (i = 0; i < 4; i++) {
 10276  0205  0020               	movlb	0	; select bank0
 10277  0206  01AF               	clrf	Load_Main@i
 10278  0207  3004               	movlw	4
 10279  0208  022F               	subwf	Load_Main@i,w
 10280  0209  1803               	btfsc	3,0
 10281  020A  2A35               	goto	l8084
 10282  020B                     l8078:	
 10283                           
 10284                           ;OverLoad_B1.c: 64: Load.ADH += Load.AH[i];
 10285  020B  352F               	lslf	Load_Main@i,w
 10286  020C  3E4E               	addlw	(_Load+11)& (0+255)
 10287  020D  0086               	movwf	6
 10288  020E  3001               	movlw	1	; select bank2/3
 10289  020F  0087               	movwf	7
 10290  0210  3F40               	moviw [0]fsr1
 10291  0211  00A9               	movwf	??_Load_Main
 10292  0212  3F41               	moviw [1]fsr1
 10293  0213  00AA               	movwf	??_Load_Main+1
 10294  0214  0829               	movf	??_Load_Main,w
 10295  0215  0022               	movlb	2	; select bank2
 10296  0216  07C8               	addwf	(_Load^(0+256)+5),f
 10297  0217  0020               	movlb	0	; select bank0
 10298  0218  082A               	movf	??_Load_Main+1,w
 10299  0219  0022               	movlb	2	; select bank2
 10300  021A  3DC9               	addwfc	((_Load+1)^(0+256)+5),f
 10301                           
 10302                           ;OverLoad_B1.c: 65: Load.ADL += Load.AL[i];
 10303  021B  0020               	movlb	0	; select bank0
 10304  021C  352F               	lslf	Load_Main@i,w
 10305  021D  3E58               	addlw	(_Load+21)& (0+255)
 10306  021E  0086               	movwf	6
 10307  021F  3001               	movlw	1	; select bank2/3
 10308  0220  0087               	movwf	7
 10309  0221  3F40               	moviw [0]fsr1
 10310  0222  00A9               	movwf	??_Load_Main
 10311  0223  3F41               	moviw [1]fsr1
 10312  0224  00AA               	movwf	??_Load_Main+1
 10313  0225  0829               	movf	??_Load_Main,w
 10314  0226  0022               	movlb	2	; select bank2
 10315  0227  07CA               	addwf	(_Load^(0+256)+7),f
 10316  0228  0020               	movlb	0	; select bank0
 10317  0229  082A               	movf	??_Load_Main+1,w
 10318  022A  0022               	movlb	2	; select bank2
 10319  022B  3DCB               	addwfc	((_Load+1)^(0+256)+7),f
 10320  022C  3001               	movlw	1
 10321  022D  0020               	movlb	0	; select bank0
 10322  022E  00A9               	movwf	??_Load_Main
 10323  022F  0829               	movf	??_Load_Main,w
 10324  0230  07AF               	addwf	Load_Main@i,f
 10325  0231  3004               	movlw	4
 10326  0232  022F               	subwf	Load_Main@i,w
 10327  0233  1C03               	skipc
 10328  0234  2A0B               	goto	l8078
 10329  0235                     l8084:	
 10330                           
 10331                           ;OverLoad_B1.c: 66: }
 10332                           ;OverLoad_B1.c: 67: Load.ADH /= 4;
 10333  0235  3002               	movlw	2
 10334  0236  0022               	movlb	2	; select bank2
 10335  0237                     u8075:	
 10336  0237  36C9               	lsrf	((_Load+1)^(0+256)+5),f
 10337  0238  0CC8               	rrf	(_Load^(0+256)+5),f
 10338  0239  0B89               	decfsz	9,f
 10339  023A  2A37               	goto	u8075
 10340                           
 10341                           ;OverLoad_B1.c: 68: Load.ADL /= 4;
 10342  023B  3002               	movlw	2
 10343  023C                     u8085:	
 10344  023C  36CB               	lsrf	((_Load+1)^(0+256)+7),f
 10345  023D  0CCA               	rrf	(_Load^(0+256)+7),f
 10346  023E  0B89               	decfsz	9,f
 10347  023F  2A3C               	goto	u8085
 10348                           
 10349                           ;OverLoad_B1.c: 69: setLoad_AH_AL_Restore();
 10350  0240  319E  26A0  3181   	fcall	_setLoad_AH_AL_Restore
 10351                           
 10352                           ;OverLoad_B1.c: 71: if (Load.ADH > Load.ADL) {
 10353  0243  0022               	movlb	2	; select bank2
 10354  0244  0849               	movf	((_Load+1)^(0+256)+5),w
 10355  0245  024B               	subwf	((_Load+1)^(0+256)+7),w
 10356  0246  1D03               	skipz
 10357  0247  2A4A               	goto	u8095
 10358  0248  0848               	movf	(_Load^(0+256)+5),w
 10359  0249  024A               	subwf	(_Load^(0+256)+7),w
 10360  024A                     u8095:	
 10361  024A  1803               	skipnc
 10362  024B  0008               	return
 10363                           
 10364                           ;OverLoad_B1.c: 72: Load.AD = Load.ADH - Load.ADL;
 10365  024C  3005               	movlw	5
 10366  024D  3E43               	addlw	_Load& (0+255)
 10367  024E  0086               	movwf	6
 10368  024F  3001               	movlw	1	; select bank2/3
 10369  0250  0087               	movwf	7
 10370  0251  094A               	comf	(_Load^(0+256)+7),w
 10371  0252  0020               	movlb	0	; select bank0
 10372  0253  00A9               	movwf	??_Load_Main
 10373  0254  0022               	movlb	2	; select bank2
 10374  0255  094B               	comf	((_Load+1)^(0+256)+7),w
 10375  0256  0020               	movlb	0	; select bank0
 10376  0257  00AA               	movwf	??_Load_Main+1
 10377  0258  0AA9               	incf	??_Load_Main,f
 10378  0259  1903               	skipnz
 10379  025A  0AAA               	incf	??_Load_Main+1,f
 10380  025B  3F40               	moviw [0]fsr1
 10381  025C  0729               	addwf	??_Load_Main,w
 10382  025D  0022               	movlb	2	; select bank2
 10383  025E  00E2               	movwf	(_Load^(0+256)+31)
 10384  025F  3F41               	moviw [1]fsr1
 10385  0260  0020               	movlb	0	; select bank0
 10386  0261  3D2A               	addwfc	??_Load_Main+1,w
 10387  0262  0022               	movlb	2	; select bank2
 10388  0263  00E3               	movwf	(_Load^(0+256)+32)
 10389                           
 10390                           ;OverLoad_B1.c: 73: Load.ADH = 0;
 10391  0264  01C8               	clrf	(_Load^(0+256)+5)
 10392  0265  01C9               	clrf	((_Load+1)^(0+256)+5)
 10393                           
 10394                           ;OverLoad_B1.c: 74: Load.ADL = 0;
 10395  0266  01CA               	clrf	(_Load^(0+256)+7)
 10396  0267  01CB               	clrf	((_Load+1)^(0+256)+7)
 10397                           
 10398                           ;OverLoad_B1.c: 75: Load.LightsCount = getMain_Lights_Count();
 10399  0268  319D  25F5  3181   	fcall	_getMain_Lights_Count
 10400  026B  0020               	movlb	0	; select bank0
 10401  026C  00A9               	movwf	??_Load_Main
 10402  026D  0829               	movf	??_Load_Main,w
 10403  026E  0022               	movlb	2	; select bank2
 10404  026F  00EE               	movwf	(_Load^(0+256)+43)
 10405                           
 10406                           ;OverLoad_B1.c: 77: if (Load.Run == 1) {
 10407  0270  1DC3               	btfss	_Load^(0+256),3
 10408  0271  2A97               	goto	l8116
 10409                           
 10410                           ;OverLoad_B1.c: 78: if (Load.Count < 2) {
 10411  0272  3002               	movlw	2
 10412  0273  026C               	subwf	(_Load^(0+256)+41),w
 10413  0274  1803               	skipnc
 10414  0275  2A97               	goto	l8116
 10415                           
 10416                           ;OverLoad_B1.c: 79: Load.Count++;
 10417  0276  3001               	movlw	1
 10418  0277  0020               	movlb	0	; select bank0
 10419  0278  00A9               	movwf	??_Load_Main
 10420  0279  0829               	movf	??_Load_Main,w
 10421  027A  0022               	movlb	2	; select bank2
 10422  027B  07EC               	addwf	(_Load^(0+256)+41),f
 10423                           
 10424                           ;OverLoad_B1.c: 80: if (Load.Count == 1) {
 10425  027C  086C               	movf	(_Load^(0+256)+41),w
 10426  027D  3A01               	xorlw	1
 10427  027E  1D03               	skipz
 10428  027F  2A84               	goto	l8108
 10429                           
 10430                           ;OverLoad_B1.c: 81: Load.JudgeValue = (20*50);
 10431  0280  30E8               	movlw	232
 10432  0281  00E8               	movwf	(_Load^(0+256)+37)
 10433  0282  3003               	movlw	3
 10434  0283  2A8F               	goto	L7
 10435  0284                     l8108:	
 10436                           ;OverLoad_B1.c: 82: } else if (Load.Count == 2) {
 10437                           
 10438  0284  086C               	movf	(_Load^(0+256)+41),w
 10439  0285  3A02               	xorlw	2
 10440  0286  1D03               	skipz
 10441  0287  2A97               	goto	l8116
 10442                           
 10443                           ;OverLoad_B1.c: 83: if (Load.LightsCount == 1) {
 10444  0288  086E               	movf	(_Load^(0+256)+43),w
 10445  0289  3A01               	xorlw	1
 10446  028A  1D03               	skipz
 10447  028B  2A91               	goto	l8114
 10448                           
 10449                           ;OverLoad_B1.c: 84: Load.JudgeValue = (int)(1.1*50);
 10450  028C  3037               	movlw	55
 10451  028D  00E8               	movwf	(_Load^(0+256)+37)
 10452  028E  3000               	movlw	0
 10453  028F                     L7:	
 10454  028F  00E9               	movwf	(_Load^(0+256)+38)
 10455                           
 10456                           ;OverLoad_B1.c: 85: } else {
 10457  0290  2A97               	goto	l8116
 10458  0291                     l8114:	
 10459                           
 10460                           ;OverLoad_B1.c: 86: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 10461  0291  084C               	movf	(_Load^(0+256)+9),w
 10462  0292  3E37               	addlw	55
 10463  0293  00E8               	movwf	(_Load^(0+256)+37)
 10464  0294  3000               	movlw	0
 10465  0295  3D4D               	addwfc	((_Load+1)^(0+256)+9),w
 10466  0296  00E9               	movwf	((_Load+1)^(0+256)+37)
 10467  0297                     l8116:	
 10468                           
 10469                           ;OverLoad_B1.c: 87: }
 10470                           ;OverLoad_B1.c: 88: }
 10471                           ;OverLoad_B1.c: 89: }
 10472                           ;OverLoad_B1.c: 90: }
 10473                           ;OverLoad_B1.c: 92: if (Load.AD >= Load.JudgeValue) {
 10474  0297  0869               	movf	((_Load+1)^(0+256)+37),w
 10475  0298  0263               	subwf	((_Load+1)^(0+256)+31),w
 10476  0299  1D03               	skipz
 10477  029A  2A9D               	goto	u8155
 10478  029B  0868               	movf	(_Load^(0+256)+37),w
 10479  029C  0262               	subwf	(_Load^(0+256)+31),w
 10480  029D                     u8155:	
 10481  029D  1C03               	skipc
 10482  029E  2AAC               	goto	l8126
 10483                           
 10484                           ;OverLoad_B1.c: 93: Load.ErrorCount++;
 10485  029F  3001               	movlw	1
 10486  02A0  0020               	movlb	0	; select bank0
 10487  02A1  00A9               	movwf	??_Load_Main
 10488  02A2  0829               	movf	??_Load_Main,w
 10489  02A3  0022               	movlb	2	; select bank2
 10490  02A4  07ED               	addwf	(_Load^(0+256)+42),f
 10491                           
 10492                           ;OverLoad_B1.c: 94: if (Load.ErrorCount > 2) {
 10493  02A5  3003               	movlw	3
 10494  02A6  026D               	subwf	(_Load^(0+256)+42),w
 10495  02A7  1C03               	skipc
 10496  02A8  0008               	return
 10497                           
 10498                           ;OverLoad_B1.c: 95: Load.ErrorCount = 0;
 10499  02A9  01ED               	clrf	(_Load^(0+256)+42)
 10500                           
 10501                           ;OverLoad_B1.c: 96: Load.ERROR = 1;
 10502  02AA  16C3               	bsf	_Load^(0+256),5
 10503                           
 10504                           ;OverLoad_B1.c: 109: }
 10505                           ;OverLoad_B1.c: 110: } else {
 10506  02AB  0008               	return
 10507  02AC                     l8126:	
 10508                           
 10509                           ;OverLoad_B1.c: 111: Load.ErrorCount = 0;
 10510  02AC  01ED               	clrf	(_Load^(0+256)+42)
 10511                           
 10512                           ;OverLoad_B1.c: 112: if (Load.Run == 1) {
 10513  02AD  1DC3               	btfss	_Load^(0+256),3
 10514  02AE  0008               	return
 10515                           
 10516                           ;OverLoad_B1.c: 113: if (Load.OK == 0) {
 10517  02AF  1BC3               	btfsc	_Load^(0+256),7
 10518  02B0  0008               	return
 10519                           
 10520                           ;OverLoad_B1.c: 114: Load.SafeCount++;
 10521  02B1  3001               	movlw	1
 10522  02B2  0020               	movlb	0	; select bank0
 10523  02B3  00A9               	movwf	??_Load_Main
 10524  02B4  0829               	movf	??_Load_Main,w
 10525  02B5  0022               	movlb	2	; select bank2
 10526  02B6  07EF               	addwf	(_Load^(0+256)+44),f
 10527                           
 10528                           ;OverLoad_B1.c: 115: if (Load.SafeCount >= 3) {
 10529  02B7  3003               	movlw	3
 10530  02B8  026F               	subwf	(_Load^(0+256)+44),w
 10531  02B9  1C03               	skipc
 10532  02BA  0008               	return
 10533                           
 10534                           ;OverLoad_B1.c: 116: Load.SafeCount = 0;
 10535  02BB  01EF               	clrf	(_Load^(0+256)+44)
 10536                           
 10537                           ;OverLoad_B1.c: 117: Load.OK = 1;
 10538  02BC  17C3               	bsf	_Load^(0+256),7
 10539                           
 10540                           ;OverLoad_B1.c: 118: Load.Run = 0;
 10541  02BD  11C3               	bcf	_Load^(0+256),3
 10542                           
 10543                           ;OverLoad_B1.c: 119: Load.Count = 0;
 10544  02BE  01EC               	clrf	(_Load^(0+256)+41)
 10545                           
 10546                           ;OverLoad_B1.c: 120: Load.TotalLoad = Load.AD;
 10547  02BF  0863               	movf	((_Load+1)^(0+256)+31),w
 10548  02C0  01CD               	clrf	((_Load+1)^(0+256)+9)
 10549  02C1  07CD               	addwf	((_Load+1)^(0+256)+9),f
 10550  02C2  0862               	movf	(_Load^(0+256)+31),w
 10551  02C3  01CC               	clrf	(_Load^(0+256)+9)
 10552  02C4  07CC               	addwf	(_Load^(0+256)+9),f
 10553                           
 10554                           ;OverLoad_B1.c: 130: }
 10555                           ;OverLoad_B1.c: 131: }
 10556                           ;OverLoad_B1.c: 132: }
 10557                           ;OverLoad_B1.c: 133: }
 10558                           ;OverLoad_B1.c: 134: }
 10559                           ;OverLoad_B1.c: 135: }
 10560                           ;OverLoad_B1.c: 136: } else {
 10561  02C5  0008               	return
 10562  02C6                     l1463:	
 10563                           
 10564                           ;OverLoad_B1.c: 137: Load.ADtoGO = 1;
 10565  02C6  1643               	bsf	_Load^(0+256),4
 10566                           
 10567                           ;OverLoad_B1.c: 138: }
 10568                           ;OverLoad_B1.c: 139: } else {
 10569  02C7  0008               	return
 10570  02C8                     l1462:	
 10571                           
 10572                           ;OverLoad_B1.c: 140: if (Load.LightsON == 1 && error != 3) {
 10573  02C8  1D43               	btfss	_Load^(0+256),2
 10574  02C9  2AE6               	goto	l8174
 10575  02CA  0020               	movlb	0	; select bank0
 10576  02CB  082E               	movf	Load_Main@error,w
 10577  02CC  3A03               	xorlw	3
 10578  02CD  1903               	skipnz
 10579  02CE  2AE6               	goto	l8174
 10580                           
 10581                           ;OverLoad_B1.c: 141: Load.LightsON = 0;
 10582  02CF  0022               	movlb	2	; select bank2
 10583  02D0  1143               	bcf	_Load^(0+256),2
 10584                           
 10585                           ;OverLoad_B1.c: 143: Load.Time = 0;
 10586  02D1  01C4               	clrf	(_Load^(0+256)+1)
 10587  02D2  01C5               	clrf	((_Load+1)^(0+256)+1)
 10588                           
 10589                           ;OverLoad_B1.c: 144: Load.ADtoGO = 0;
 10590  02D3  1243               	bcf	_Load^(0+256),4
 10591                           
 10592                           ;OverLoad_B1.c: 145: setLoad_AH_AL_Restore();
 10593  02D4  319E  26A0  3181   	fcall	_setLoad_AH_AL_Restore
 10594                           
 10595                           ;OverLoad_B1.c: 146: Load.Count = 0;
 10596  02D7  0022               	movlb	2	; select bank2
 10597  02D8  01EC               	clrf	(_Load^(0+256)+41)
 10598                           
 10599                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 10600  02D9  01ED               	clrf	(_Load^(0+256)+42)
 10601                           
 10602                           ;OverLoad_B1.c: 148: Load.SafeCount = 0;
 10603  02DA  01EF               	clrf	(_Load^(0+256)+44)
 10604                           
 10605                           ;OverLoad_B1.c: 150: Load.ADH = 0;
 10606  02DB  01C8               	clrf	(_Load^(0+256)+5)
 10607  02DC  01C9               	clrf	((_Load+1)^(0+256)+5)
 10608                           
 10609                           ;OverLoad_B1.c: 151: Load.ADL = 0;
 10610  02DD  01CA               	clrf	(_Load^(0+256)+7)
 10611  02DE  01CB               	clrf	((_Load+1)^(0+256)+7)
 10612                           
 10613                           ;OverLoad_B1.c: 152: Load.AD = 0;
 10614  02DF  01E2               	clrf	(_Load^(0+256)+31)
 10615  02E0  01E3               	clrf	((_Load+1)^(0+256)+31)
 10616                           
 10617                           ;OverLoad_B1.c: 153: Load.JudgeValue = 0;
 10618  02E1  01E8               	clrf	(_Load^(0+256)+37)
 10619  02E2  01E9               	clrf	((_Load+1)^(0+256)+37)
 10620                           
 10621                           ;OverLoad_B1.c: 154: Load.LightsCount = 0;
 10622  02E3  01EE               	clrf	(_Load^(0+256)+43)
 10623                           
 10624                           ;OverLoad_B1.c: 155: Load.Run = 0;
 10625  02E4  11C3               	bcf	_Load^(0+256),3
 10626                           
 10627                           ;OverLoad_B1.c: 156: Load.OK = 1;
 10628  02E5  17C3               	bsf	_Load^(0+256),7
 10629  02E6                     l8174:	
 10630                           
 10631                           ;OverLoad_B1.c: 164: }
 10632                           ;OverLoad_B1.c: 165: if (Load.ERROR == 1) {
 10633  02E6  0022               	movlb	2	; select bank2
 10634  02E7  1EC3               	btfss	_Load^(0+256),5
 10635  02E8  0008               	return
 10636                           
 10637                           ;OverLoad_B1.c: 166: Load.ErrorTime++;
 10638  02E9  3001               	movlw	1
 10639  02EA  07C6               	addwf	(_Load^(0+256)+3),f
 10640  02EB  3000               	movlw	0
 10641  02EC  3DC7               	addwfc	((_Load+1)^(0+256)+3),f
 10642                           
 10643                           ;OverLoad_B1.c: 167: if (Load.ErrorTime >= 1000) {
 10644  02ED  3003               	movlw	3
 10645  02EE  0247               	subwf	((_Load+1)^(0+256)+3),w
 10646  02EF  30E8               	movlw	232
 10647  02F0  1903               	skipnz
 10648  02F1  0246               	subwf	(_Load^(0+256)+3),w
 10649  02F2  1C03               	skipc
 10650  02F3  0008               	return
 10651                           
 10652                           ;OverLoad_B1.c: 168: Load.ErrorTime = 0;
 10653  02F4  01C6               	clrf	(_Load^(0+256)+3)
 10654  02F5  01C7               	clrf	((_Load+1)^(0+256)+3)
 10655                           
 10656                           ;OverLoad_B1.c: 175: Load.ERROR = 0;
 10657  02F6  12C3               	bcf	_Load^(0+256),5
 10658                           
 10659                           ;OverLoad_B1.c: 176: }
 10660                           ;OverLoad_B1.c: 177: }
 10661                           ;OverLoad_B1.c: 178: }
 10662                           ;OverLoad_B1.c: 179: } else {
 10663  02F7  0008               	return
 10664  02F8                     l1458:	
 10665                           
 10666                           ;OverLoad_B1.c: 180: if (myMain.PowerON == 1) {
 10667  02F8  0021               	movlb	1	; select bank1
 10668  02F9  1C20               	btfss	_myMain^(0+128),0
 10669  02FA  0008               	return
 10670                           
 10671                           ;OverLoad_B1.c: 181: Load.Enable = 1;
 10672  02FB  0022               	movlb	2	; select bank2
 10673  02FC  1443               	bsf	_Load^(0+256),0
 10674  02FD  0008               	return
 10675  02FE                     __end_of_Load_Main:	
 10676                           
 10677                           	psect	text53
 10678  1C19                     __ptext53:	
 10679 ;; *************** function _getMain_LoadOK *****************
 10680 ;; Defined at:
 10681 ;;		line 446 in file "../src/main_B1.c"
 10682 ;; Parameters:    Size  Location     Type
 10683 ;;		None
 10684 ;; Auto vars:     Size  Location     Type
 10685 ;;  ok              1    2[BANK0 ] unsigned char 
 10686 ;; Return value:  Size  Location     Type
 10687 ;;                  1    wreg      unsigned char 
 10688 ;; Registers used:
 10689 ;;		wreg, status,2, pclath, cstack
 10690 ;; Tracked objects:
 10691 ;;		On entry : 0/0
 10692 ;;		On exit  : 0/0
 10693 ;;		Unchanged: 0/0
 10694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10696 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10697 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10698 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10699 ;;Total ram usage:        2 bytes
 10700 ;; Hardware stack levels used:    1
 10701 ;; Hardware stack levels required when called:    6
 10702 ;; This function calls:
 10703 ;;		_getDimmer_LoadOK
 10704 ;; This function is called by:
 10705 ;;		_Load_Main
 10706 ;; This function uses a non-reentrant model
 10707 ;;
 10708                           
 10709                           
 10710                           ;psect for function _getMain_LoadOK
 10711  1C19                     _getMain_LoadOK:	
 10712                           
 10713                           ;main_B1.c: 447: char ok = 0;
 10714                           
 10715                           ;incstack = 0
 10716                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10717  1C19  0020               	movlb	0	; select bank0
 10718  1C1A  01A2               	clrf	getMain_LoadOK@ok
 10719                           
 10720                           ;main_B1.c: 453: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10721  1C1B  319B  2380         	fcall	_getDimmer_LoadOK
 10722  1C1D  3A01               	xorlw	1
 10723  1C1E  3000               	movlw	0
 10724  1C1F  1903               	skipnz
 10725  1C20  3001               	movlw	1
 10726  1C21  0020               	movlb	0	; select bank0
 10727  1C22  00A1               	movwf	??_getMain_LoadOK
 10728  1C23  0821               	movf	??_getMain_LoadOK,w
 10729  1C24  00A2               	movwf	getMain_LoadOK@ok
 10730                           
 10731                           ;main_B1.c: 455: return ok;
 10732  1C25  0822               	movf	getMain_LoadOK@ok,w
 10733  1C26  0008               	return
 10734  1C27                     __end_of_getMain_LoadOK:	
 10735                           
 10736                           	psect	text54
 10737  1B80                     __ptext54:	
 10738 ;; *************** function _getDimmer_LoadOK *****************
 10739 ;; Defined at:
 10740 ;;		line 611 in file "../src/Dimmer_B1.c"
 10741 ;; Parameters:    Size  Location     Type
 10742 ;;		None
 10743 ;; Auto vars:     Size  Location     Type
 10744 ;;  status          1    0[BANK0 ] unsigned char 
 10745 ;; Return value:  Size  Location     Type
 10746 ;;                  1    wreg      unsigned char 
 10747 ;; Registers used:
 10748 ;;		wreg, status,2
 10749 ;; Tracked objects:
 10750 ;;		On entry : 0/0
 10751 ;;		On exit  : 0/0
 10752 ;;		Unchanged: 0/0
 10753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10755 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10757 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10758 ;;Total ram usage:        1 bytes
 10759 ;; Hardware stack levels used:    1
 10760 ;; Hardware stack levels required when called:    5
 10761 ;; This function calls:
 10762 ;;		Nothing
 10763 ;; This function is called by:
 10764 ;;		_getMain_LoadOK
 10765 ;; This function uses a non-reentrant model
 10766 ;;
 10767                           
 10768                           
 10769                           ;psect for function _getDimmer_LoadOK
 10770  1B80                     _getDimmer_LoadOK:	
 10771                           
 10772                           ;Dimmer_B1.c: 612: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10773                           
 10774                           ;incstack = 0
 10775                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10776  1B80  3000               	movlw	0
 10777  1B81  0022               	movlb	2	; select bank2
 10778  1B82  18BE               	btfsc	_Dimmer^(0+256),1
 10779  1B83  3001               	movlw	1
 10780  1B84  0020               	movlb	0	; select bank0
 10781  1B85  00A0               	movwf	getDimmer_LoadOK@status
 10782                           
 10783                           ;Dimmer_B1.c: 613: return status;
 10784  1B86  0820               	movf	getDimmer_LoadOK@status,w
 10785  1B87  0008               	return
 10786  1B88                     __end_of_getDimmer_LoadOK:	
 10787                           
 10788                           	psect	text55
 10789  1DF5                     __ptext55:	
 10790 ;; *************** function _getMain_Lights_Count *****************
 10791 ;; Defined at:
 10792 ;;		line 416 in file "../src/main_B1.c"
 10793 ;; Parameters:    Size  Location     Type
 10794 ;;		None
 10795 ;; Auto vars:     Size  Location     Type
 10796 ;;  status2         1    3[BANK0 ] unsigned char 
 10797 ;;  status1         1    2[BANK0 ] unsigned char 
 10798 ;;  status3         1    1[BANK0 ] unsigned char 
 10799 ;;  count           1    0[BANK0 ] unsigned char 
 10800 ;; Return value:  Size  Location     Type
 10801 ;;                  1    wreg      unsigned char 
 10802 ;; Registers used:
 10803 ;;		wreg, status,2, status,0
 10804 ;; Tracked objects:
 10805 ;;		On entry : 0/0
 10806 ;;		On exit  : 0/0
 10807 ;;		Unchanged: 0/0
 10808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10810 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10812 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10813 ;;Total ram usage:        4 bytes
 10814 ;; Hardware stack levels used:    1
 10815 ;; Hardware stack levels required when called:    5
 10816 ;; This function calls:
 10817 ;;		Nothing
 10818 ;; This function is called by:
 10819 ;;		_Load_Main
 10820 ;; This function uses a non-reentrant model
 10821 ;;
 10822                           
 10823                           
 10824                           ;psect for function _getMain_Lights_Count
 10825  1DF5                     _getMain_Lights_Count:	
 10826                           
 10827                           ;main_B1.c: 417: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10828                           
 10829                           ;incstack = 0
 10830                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10831  1DF5  0020               	movlb	0	; select bank0
 10832  1DF6  01A2               	clrf	getMain_Lights_Count@status1
 10833  1DF7  01A3               	clrf	getMain_Lights_Count@status2
 10834  1DF8  01A1               	clrf	getMain_Lights_Count@status3
 10835  1DF9  01A0               	clrf	getMain_Lights_Count@count
 10836                           
 10837                           ;main_B1.c: 421: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10838  1DFA  3000               	movlw	0
 10839  1DFB  0023               	movlb	3	; select bank3
 10840  1DFC  18A9               	btfsc	(_DimmerLights1^(0+384)+9),1
 10841  1DFD  3001               	movlw	1
 10842  1DFE  0020               	movlb	0	; select bank0
 10843  1DFF  00A2               	movwf	getMain_Lights_Count@status1
 10844                           
 10845                           ;main_B1.c: 424: status2 = DimmerLights2.Loop == 1 ? 1 : 0;
 10846  1E00  3000               	movlw	0
 10847  1E01  0023               	movlb	3	; select bank3
 10848  1E02  18B8               	btfsc	(_DimmerLights2^(0+384)+9),1
 10849  1E03  3001               	movlw	1
 10850  1E04  0020               	movlb	0	; select bank0
 10851  1E05  00A3               	movwf	getMain_Lights_Count@status2
 10852                           
 10853                           ;main_B1.c: 442: return count = (status1 + status2 + status3);
 10854  1E06  0822               	movf	getMain_Lights_Count@status1,w
 10855  1E07  0723               	addwf	getMain_Lights_Count@status2,w
 10856  1E08  0721               	addwf	getMain_Lights_Count@status3,w
 10857  1E09  00A0               	movwf	getMain_Lights_Count@count
 10858  1E0A  0008               	return
 10859  1E0B                     __end_of_getMain_Lights_Count:	
 10860                           
 10861                           	psect	text56
 10862  1C76                     __ptext56:	
 10863 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 10864 ;; Defined at:
 10865 ;;		line 502 in file "../src/Dimmer_B1.c"
 10866 ;; Parameters:    Size  Location     Type
 10867 ;;		None
 10868 ;; Auto vars:     Size  Location     Type
 10869 ;;  adjgo           1    1[BANK0 ] unsigned char 
 10870 ;; Return value:  Size  Location     Type
 10871 ;;                  1    wreg      unsigned char 
 10872 ;; Registers used:
 10873 ;;		wreg, status,2
 10874 ;; Tracked objects:
 10875 ;;		On entry : 0/0
 10876 ;;		On exit  : 0/0
 10877 ;;		Unchanged: 0/0
 10878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10880 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10881 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10882 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10883 ;;Total ram usage:        3 bytes
 10884 ;; Hardware stack levels used:    1
 10885 ;; Hardware stack levels required when called:    5
 10886 ;; This function calls:
 10887 ;;		Nothing
 10888 ;; This function is called by:
 10889 ;;		_setDimmerLights_SwOn
 10890 ;;		_setDimmerLights_AdjControl
 10891 ;;		_Load_Main
 10892 ;; This function uses a non-reentrant model
 10893 ;;
 10894                           
 10895                           
 10896                           ;psect for function _getAll_DimmerLights_AdjGO
 10897  1C76                     _getAll_DimmerLights_AdjGO:	
 10898                           
 10899                           ;Dimmer_B1.c: 503: char adjgo = 0;
 10900                           
 10901                           ;incstack = 0
 10902                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 10903  1C76  0020               	movlb	0	; select bank0
 10904  1C77  01A1               	clrf	getAll_DimmerLights_AdjGO@adjgo
 10905                           
 10906                           ;Dimmer_B1.c: 508: adjgo = DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1 ? 1 : 0;
 10907  1C78  01A2               	clrf	_getAll_DimmerLights_AdjGO$2562
 10908  1C79  0AA2               	incf	_getAll_DimmerLights_AdjGO$2562,f
 10909  1C7A  0023               	movlb	3	; select bank3
 10910  1C7B  1DA8               	btfss	(_DimmerLights1^(0+384)+8),3
 10911  1C7C  19B7               	btfsc	(_DimmerLights2^(0+384)+8),3
 10912  1C7D  2C80               	goto	l6246
 10913  1C7E  0020               	movlb	0	; select bank0
 10914  1C7F  01A2               	clrf	_getAll_DimmerLights_AdjGO$2562
 10915  1C80                     l6246:	
 10916  1C80  0020               	movlb	0	; select bank0
 10917  1C81  0822               	movf	_getAll_DimmerLights_AdjGO$2562,w
 10918  1C82  00A0               	movwf	??_getAll_DimmerLights_AdjGO
 10919  1C83  0820               	movf	??_getAll_DimmerLights_AdjGO,w
 10920  1C84  00A1               	movwf	getAll_DimmerLights_AdjGO@adjgo
 10921                           
 10922                           ;Dimmer_B1.c: 513: return adjgo;
 10923  1C85  0821               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 10924  1C86  0008               	return
 10925  1C87                     __end_of_getAll_DimmerLights_AdjGO:	
 10926                           
 10927                           	psect	text57
 10928  1B48                     __ptext57:	
 10929 ;; *************** function _Load_Initialization *****************
 10930 ;; Defined at:
 10931 ;;		line 9 in file "../src/OverLoad_B1.c"
 10932 ;; Parameters:    Size  Location     Type
 10933 ;;		None
 10934 ;; Auto vars:     Size  Location     Type
 10935 ;;		None
 10936 ;; Return value:  Size  Location     Type
 10937 ;;		None               void
 10938 ;; Registers used:
 10939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10940 ;; Tracked objects:
 10941 ;;		On entry : 0/0
 10942 ;;		On exit  : 0/0
 10943 ;;		Unchanged: 0/0
 10944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10949 ;;Total ram usage:        0 bytes
 10950 ;; Hardware stack levels used:    1
 10951 ;; Hardware stack levels required when called:    6
 10952 ;; This function calls:
 10953 ;;		_setLoad_AH_AL_Restore
 10954 ;; This function is called by:
 10955 ;;		_main
 10956 ;; This function uses a non-reentrant model
 10957 ;;
 10958                           
 10959                           
 10960                           ;psect for function _Load_Initialization
 10961  1B48                     _Load_Initialization:	
 10962                           
 10963                           ;OverLoad_B1.c: 10: Load.OK = 1;
 10964                           
 10965                           ;incstack = 0
 10966                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10967  1B48  0022               	movlb	2	; select bank2
 10968  1B49  17C3               	bsf	_Load^(0+256),7
 10969                           
 10970                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10971  1B4A  319E  26A0         	fcall	_setLoad_AH_AL_Restore
 10972  1B4C  0008               	return
 10973  1B4D                     __end_of_Load_Initialization:	
 10974                           
 10975                           	psect	text58
 10976  1EA0                     __ptext58:	
 10977 ;; *************** function _setLoad_AH_AL_Restore *****************
 10978 ;; Defined at:
 10979 ;;		line 207 in file "../src/OverLoad_B1.c"
 10980 ;; Parameters:    Size  Location     Type
 10981 ;;		None
 10982 ;; Auto vars:     Size  Location     Type
 10983 ;;  i               1    1[BANK0 ] unsigned char 
 10984 ;; Return value:  Size  Location     Type
 10985 ;;		None               void
 10986 ;; Registers used:
 10987 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10988 ;; Tracked objects:
 10989 ;;		On entry : 0/0
 10990 ;;		On exit  : 0/0
 10991 ;;		Unchanged: 0/0
 10992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10994 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10995 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10996 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10997 ;;Total ram usage:        2 bytes
 10998 ;; Hardware stack levels used:    1
 10999 ;; Hardware stack levels required when called:    5
 11000 ;; This function calls:
 11001 ;;		Nothing
 11002 ;; This function is called by:
 11003 ;;		_Load_Initialization
 11004 ;;		_Load_Main
 11005 ;; This function uses a non-reentrant model
 11006 ;;
 11007                           
 11008                           
 11009                           ;psect for function _setLoad_AH_AL_Restore
 11010  1EA0                     _setLoad_AH_AL_Restore:	
 11011                           
 11012                           ;OverLoad_B1.c: 208: char i;
 11013                           ;OverLoad_B1.c: 209: for (i = 0; i < 5; i++) {
 11014                           
 11015                           ;incstack = 0
 11016                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11017  1EA0  0020               	movlb	0	; select bank0
 11018  1EA1  01A1               	clrf	setLoad_AH_AL_Restore@i
 11019  1EA2                     L8:	
 11020  1EA2  3005               	movlw	5
 11021  1EA3  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11022  1EA4  1803               	btfsc	3,0
 11023  1EA5  0008               	return
 11024                           
 11025                           ;OverLoad_B1.c: 210: Load.AH[i] = 0;
 11026  1EA6  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11027  1EA7  3E4E               	addlw	(_Load+11)& (0+255)
 11028  1EA8  0086               	movwf	6
 11029  1EA9  3001               	movlw	1	; select bank2/3
 11030  1EAA  0087               	movwf	7
 11031  1EAB  3000               	movlw	0
 11032  1EAC  3FC0               	movwi [0]fsr1
 11033  1EAD  3FC1               	movwi [1]fsr1
 11034                           
 11035                           ;OverLoad_B1.c: 211: Load.AL[i] = 0xffff;
 11036  1EAE  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11037  1EAF  3E58               	addlw	(_Load+21)& (0+255)
 11038  1EB0  0086               	movwf	6
 11039  1EB1  3001               	movlw	1	; select bank2/3
 11040  1EB2  0087               	movwf	7
 11041  1EB3  30FF               	movlw	255
 11042  1EB4  3FC0               	movwi [0]fsr1
 11043  1EB5  30FF               	movlw	255
 11044  1EB6  3FC1               	movwi [1]fsr1
 11045  1EB7  3001               	movlw	1
 11046  1EB8  00A0               	movwf	??_setLoad_AH_AL_Restore
 11047  1EB9  0820               	movf	??_setLoad_AH_AL_Restore,w
 11048  1EBA  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11049  1EBB  2EA2               	goto	L8
 11050  1EBC                     __end_of_setLoad_AH_AL_Restore:	
 11051                           
 11052                           	psect	text59
 11053  1BE8                     __ptext59:	
 11054 ;; *************** function _LED_Main *****************
 11055 ;; Defined at:
 11056 ;;		line 47 in file "../src/LED_B1.c"
 11057 ;; Parameters:    Size  Location     Type
 11058 ;;		None
 11059 ;; Auto vars:     Size  Location     Type
 11060 ;;		None
 11061 ;; Return value:  Size  Location     Type
 11062 ;;		None               void
 11063 ;; Registers used:
 11064 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11065 ;; Tracked objects:
 11066 ;;		On entry : 0/0
 11067 ;;		On exit  : 0/0
 11068 ;;		Unchanged: 0/0
 11069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11074 ;;Total ram usage:        0 bytes
 11075 ;; Hardware stack levels used:    1
 11076 ;; Hardware stack levels required when called:    7
 11077 ;; This function calls:
 11078 ;;		_setLED_Main
 11079 ;; This function is called by:
 11080 ;;		_main
 11081 ;; This function uses a non-reentrant model
 11082 ;;
 11083                           
 11084                           
 11085                           ;psect for function _LED_Main
 11086  1BE8                     _LED_Main:	
 11087                           
 11088                           ;LED_B1.c: 53: setLED_Main(1);
 11089                           
 11090                           ;incstack = 0
 11091                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11092  1BE8  3001               	movlw	1
 11093  1BE9  3193  239A  319B   	fcall	_setLED_Main
 11094                           
 11095                           ;LED_B1.c: 56: setLED_Main(2);
 11096  1BEC  3002               	movlw	2
 11097  1BED  3193  239A  319B   	fcall	_setLED_Main
 11098                           
 11099                           ;LED_B1.c: 62: setLED_Main(99);
 11100  1BF0  3063               	movlw	99
 11101  1BF1  3193  239A         	fcall	_setLED_Main
 11102  1BF3  0008               	return
 11103  1BF4                     __end_of_LED_Main:	
 11104                           
 11105                           	psect	text60
 11106  139A                     __ptext60:	
 11107 ;; *************** function _setLED_Main *****************
 11108 ;; Defined at:
 11109 ;;		line 221 in file "../src/LED_B1.c"
 11110 ;; Parameters:    Size  Location     Type
 11111 ;;  led             1    wreg     unsigned char 
 11112 ;; Auto vars:     Size  Location     Type
 11113 ;;  led             1    4[BANK0 ] unsigned char 
 11114 ;; Return value:  Size  Location     Type
 11115 ;;		None               void
 11116 ;; Registers used:
 11117 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11118 ;; Tracked objects:
 11119 ;;		On entry : 0/0
 11120 ;;		On exit  : 0/0
 11121 ;;		Unchanged: 0/0
 11122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11124 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11125 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11126 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11127 ;;Total ram usage:        3 bytes
 11128 ;; Hardware stack levels used:    1
 11129 ;; Hardware stack levels required when called:    6
 11130 ;; This function calls:
 11131 ;;		_LedPointSelect
 11132 ;; This function is called by:
 11133 ;;		_LED_Main
 11134 ;; This function uses a non-reentrant model
 11135 ;;
 11136                           
 11137                           
 11138                           ;psect for function _setLED_Main
 11139  139A                     _setLED_Main:	
 11140                           
 11141                           ;incstack = 0
 11142                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11143                           ;setLED_Main@led stored from wreg
 11144  139A  0020               	movlb	0	; select bank0
 11145  139B  00A4               	movwf	setLED_Main@led
 11146                           
 11147                           ;LED_B1.c: 222: LedPointSelect(led);
 11148  139C  0824               	movf	setLED_Main@led,w
 11149  139D  319E  2685  3193   	fcall	_LedPointSelect
 11150                           
 11151                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11152  13A0  087A               	movf	_LED,w
 11153  13A1  0086               	movwf	6
 11154  13A2  3001               	movlw	1	; select bank2/3
 11155  13A3  0087               	movwf	7
 11156  13A4  1C81               	btfss	1,1
 11157  13A5  0008               	return
 11158                           
 11159                           ;LED_B1.c: 224: LED->Time++;
 11160  13A6  0A7A               	incf	_LED,w
 11161  13A7  0086               	movwf	6
 11162  13A8  3001               	movlw	1	; select bank2/3
 11163  13A9  0087               	movwf	7
 11164  13AA  3001               	movlw	1
 11165  13AB  0781               	addwf	1,f
 11166  13AC  3141               	addfsr 1,1
 11167  13AD  1803               	skipnc
 11168  13AE  0A81               	incf	1,f
 11169                           
 11170                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 11171  13AF  0A7A               	incf	_LED,w
 11172  13B0  0086               	movwf	6
 11173  13B1  3001               	movlw	1	; select bank2/3
 11174  13B2  0087               	movwf	7
 11175  13B3  3F40               	moviw [0]fsr1
 11176  13B4  0020               	movlb	0	; select bank0
 11177  13B5  00A2               	movwf	??_setLED_Main
 11178  13B6  3F41               	moviw [1]fsr1
 11179  13B7  00A3               	movwf	??_setLED_Main+1
 11180  13B8  3000               	movlw	0
 11181  13B9  0223               	subwf	??_setLED_Main+1,w
 11182  13BA  3032               	movlw	50
 11183  13BB  1903               	skipnz
 11184  13BC  0222               	subwf	??_setLED_Main,w
 11185  13BD  1C03               	skipc
 11186  13BE  0008               	return
 11187                           
 11188                           ;LED_B1.c: 226: LED->Time = 0;
 11189  13BF  0A7A               	incf	_LED,w
 11190  13C0  0086               	movwf	6
 11191  13C1  3001               	movlw	1	; select bank2/3
 11192  13C2  0087               	movwf	7
 11193  13C3  3000               	movlw	0
 11194  13C4  3FC0               	movwi [0]fsr1
 11195  13C5  3FC1               	movwi [1]fsr1
 11196                           
 11197                           ;LED_B1.c: 228: if (led == 1) {
 11198  13C6  0824               	movf	setLED_Main@led,w
 11199  13C7  3A01               	xorlw	1
 11200                           
 11201                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 11202  13C8  3008               	movlw	8
 11203  13C9  1903               	btfsc	3,2
 11204  13CA  068C               	xorwf	12,f
 11205                           
 11206                           ;LED_B1.c: 230: }
 11207                           ;LED_B1.c: 233: if (led == 2) {
 11208  13CB  0824               	movf	setLED_Main@led,w
 11209  13CC  3A02               	xorlw	2
 11210  13CD  1D03               	skipz
 11211  13CE  2BD1               	goto	l1031
 11212                           
 11213                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 11214  13CF  3080               	movlw	128
 11215  13D0  068E               	xorwf	14,f
 11216  13D1                     l1031:	
 11217                           
 11218                           ;LED_B1.c: 235: }
 11219                           ;LED_B1.c: 243: if (led == 99) {
 11220  13D1  0824               	movf	setLED_Main@led,w
 11221  13D2  3A63               	xorlw	99
 11222  13D3  1D03               	skipz
 11223  13D4  0008               	return
 11224                           
 11225                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11226  13D5  3020               	movlw	32
 11227  13D6  068D               	xorwf	13,f
 11228  13D7  0008               	return
 11229  13D8                     __end_of_setLED_Main:	
 11230                           
 11231                           	psect	text61
 11232  1BDC                     __ptext61:	
 11233 ;; *************** function _LED_Initialization *****************
 11234 ;; Defined at:
 11235 ;;		line 31 in file "../src/LED_B1.c"
 11236 ;; Parameters:    Size  Location     Type
 11237 ;;		None
 11238 ;; Auto vars:     Size  Location     Type
 11239 ;;		None
 11240 ;; Return value:  Size  Location     Type
 11241 ;;		None               void
 11242 ;; Registers used:
 11243 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11244 ;; Tracked objects:
 11245 ;;		On entry : 0/0
 11246 ;;		On exit  : 0/0
 11247 ;;		Unchanged: 0/0
 11248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11253 ;;Total ram usage:        0 bytes
 11254 ;; Hardware stack levels used:    1
 11255 ;; Hardware stack levels required when called:    8
 11256 ;; This function calls:
 11257 ;;		_setLED_Initialization
 11258 ;; This function is called by:
 11259 ;;		_main
 11260 ;; This function uses a non-reentrant model
 11261 ;;
 11262                           
 11263                           
 11264                           ;psect for function _LED_Initialization
 11265  1BDC                     _LED_Initialization:	
 11266                           
 11267                           ;LED_B1.c: 33: setLED_Initialization(1);
 11268                           
 11269                           ;incstack = 0
 11270                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11271  1BDC  3001               	movlw	1
 11272  1BDD  319C  2465  319B   	fcall	_setLED_Initialization
 11273                           
 11274                           ;LED_B1.c: 36: setLED_Initialization(2);
 11275  1BE0  3002               	movlw	2
 11276  1BE1  319C  2465  319B   	fcall	_setLED_Initialization
 11277                           
 11278                           ;LED_B1.c: 42: setLED_Initialization(99);
 11279  1BE4  3063               	movlw	99
 11280  1BE5  319C  2465         	fcall	_setLED_Initialization
 11281  1BE7  0008               	return
 11282  1BE8                     __end_of_LED_Initialization:	
 11283                           
 11284                           	psect	text62
 11285  1C65                     __ptext62:	
 11286 ;; *************** function _setLED_Initialization *****************
 11287 ;; Defined at:
 11288 ;;		line 69 in file "../src/LED_B1.c"
 11289 ;; Parameters:    Size  Location     Type
 11290 ;;  led             1    wreg     unsigned char 
 11291 ;; Auto vars:     Size  Location     Type
 11292 ;;  led             1    4[BANK0 ] unsigned char 
 11293 ;; Return value:  Size  Location     Type
 11294 ;;		None               void
 11295 ;; Registers used:
 11296 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11297 ;; Tracked objects:
 11298 ;;		On entry : 0/0
 11299 ;;		On exit  : 0/0
 11300 ;;		Unchanged: 0/0
 11301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11303 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11305 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11306 ;;Total ram usage:        1 bytes
 11307 ;; Hardware stack levels used:    1
 11308 ;; Hardware stack levels required when called:    7
 11309 ;; This function calls:
 11310 ;;		_LedPointSelect
 11311 ;;		_setLED
 11312 ;; This function is called by:
 11313 ;;		_LED_Initialization
 11314 ;; This function uses a non-reentrant model
 11315 ;;
 11316                           
 11317                           
 11318                           ;psect for function _setLED_Initialization
 11319  1C65                     _setLED_Initialization:	
 11320                           
 11321                           ;incstack = 0
 11322                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11323                           ;setLED_Initialization@led stored from wreg
 11324  1C65  0020               	movlb	0	; select bank0
 11325  1C66  00A4               	movwf	setLED_Initialization@led
 11326                           
 11327                           ;LED_B1.c: 70: LedPointSelect(led);
 11328  1C67  0824               	movf	setLED_Initialization@led,w
 11329  1C68  319E  2685  319C   	fcall	_LedPointSelect
 11330                           
 11331                           ;LED_B1.c: 71: LED->Enable = 1;
 11332  1C6B  087A               	movf	_LED,w
 11333  1C6C  0086               	movwf	6
 11334  1C6D  3001               	movlw	1	; select bank2/3
 11335  1C6E  0087               	movwf	7
 11336  1C6F  1401               	bsf	1,0
 11337                           
 11338                           ;LED_B1.c: 72: setLED(led, 0);
 11339  1C70  0020               	movlb	0	; select bank0
 11340  1C71  01A2               	clrf	setLED@command
 11341  1C72  0824               	movf	setLED_Initialization@led,w
 11342  1C73  3195  253D         	fcall	_setLED
 11343  1C75  0008               	return
 11344  1C76                     __end_of_setLED_Initialization:	
 11345                           
 11346                           	psect	text63
 11347  1283                     __ptext63:	
 11348 ;; *************** function _Flash_Memory_Main *****************
 11349 ;; Defined at:
 11350 ;;		line 904 in file "../src/MCU_B1.c"
 11351 ;; Parameters:    Size  Location     Type
 11352 ;;		None
 11353 ;; Auto vars:     Size  Location     Type
 11354 ;;		None
 11355 ;; Return value:  Size  Location     Type
 11356 ;;		None               void
 11357 ;; Registers used:
 11358 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11359 ;; Tracked objects:
 11360 ;;		On entry : 0/0
 11361 ;;		On exit  : 0/0
 11362 ;;		Unchanged: 0/0
 11363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11366 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11367 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11368 ;;Total ram usage:        1 bytes
 11369 ;; Hardware stack levels used:    1
 11370 ;; Hardware stack levels required when called:    8
 11371 ;; This function calls:
 11372 ;;		_Flash_Memory_Modify
 11373 ;;		_getMain_LightsStatus
 11374 ;; This function is called by:
 11375 ;;		_main
 11376 ;; This function uses a non-reentrant model
 11377 ;;
 11378                           
 11379                           
 11380                           ;psect for function _Flash_Memory_Main
 11381  1283                     _Flash_Memory_Main:	
 11382                           
 11383                           ;MCU_B1.c: 905: if (Memory.Modify == 1) {
 11384                           
 11385                           ;incstack = 0
 11386                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11387  1283  0024               	movlb	4	; select bank4
 11388  1284  1C44               	btfss	(_Memory^(0+512)+36),0
 11389  1285  0008               	return
 11390                           
 11391                           ;MCU_B1.c: 906: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11392  1286  3191  2159  3192   	fcall	_getMain_LightsStatus
 11393  1289  3A00               	xorlw	0
 11394  128A  3000               	movlw	0
 11395  128B  1903               	skipnz
 11396  128C  3001               	movlw	1
 11397  128D  0020               	movlb	0	; select bank0
 11398  128E  00A9               	movwf	??_Flash_Memory_Main
 11399  128F  0DA9               	rlf	??_Flash_Memory_Main,f
 11400  1290  0024               	movlb	4	; select bank4
 11401  1291  0844               	movf	(_Memory^(0+512)+36),w
 11402  1292  0020               	movlb	0	; select bank0
 11403  1293  0629               	xorwf	??_Flash_Memory_Main,w
 11404  1294  39FD               	andlw	-3
 11405  1295  0629               	xorwf	??_Flash_Memory_Main,w
 11406  1296  0024               	movlb	4	; select bank4
 11407  1297  00C4               	movwf	(_Memory^(0+512)+36)
 11408                           
 11409                           ;MCU_B1.c: 907: if (Memory.GO == 1) {
 11410  1298  1CC4               	btfss	(_Memory^(0+512)+36),1
 11411  1299  2AB3               	goto	l1299
 11412                           
 11413                           ;MCU_B1.c: 908: Memory.Runtime = 1;
 11414  129A  15C4               	bsf	(_Memory^(0+512)+36),3
 11415                           
 11416                           ;MCU_B1.c: 909: Memory.Time++;
 11417  129B  3001               	movlw	1
 11418  129C  07C2               	addwf	(_Memory^(0+512)+34),f
 11419  129D  3000               	movlw	0
 11420  129E  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11421                           
 11422                           ;MCU_B1.c: 910: if (Memory.Time == 25) {
 11423  129F  3022               	movlw	34
 11424  12A0  3E20               	addlw	_Memory& (0+255)
 11425  12A1  0086               	movwf	6
 11426  12A2  3002               	movlw	2	; select bank4/5
 11427  12A3  0087               	movwf	7
 11428  12A4  3F40               	moviw [0]fsr1
 11429  12A5  3A19               	xorlw	25
 11430  12A6  1D03               	skipz
 11431  12A7  2AAA               	goto	u7825
 11432  12A8  3F41               	moviw [1]fsr1
 11433  12A9  3A00               	xorlw	0
 11434  12AA                     u7825:	
 11435  12AA  1D03               	skipz
 11436  12AB  0008               	return
 11437                           
 11438                           ;MCU_B1.c: 911: Memory.Time = 0;
 11439  12AC  01C2               	clrf	(_Memory^(0+512)+34)
 11440  12AD  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11441                           
 11442                           ;MCU_B1.c: 912: Memory.Modify = 0;
 11443  12AE  1044               	bcf	(_Memory^(0+512)+36),0
 11444                           
 11445                           ;MCU_B1.c: 913: Memory.GO = 0;
 11446  12AF  10C4               	bcf	(_Memory^(0+512)+36),1
 11447                           
 11448                           ;MCU_B1.c: 914: Flash_Memory_Modify();
 11449  12B0  3187  27B2         	fcall	_Flash_Memory_Modify
 11450                           
 11451                           ;MCU_B1.c: 915: }
 11452                           ;MCU_B1.c: 916: } else {
 11453  12B2  0008               	return
 11454  12B3                     l1299:	
 11455                           
 11456                           ;MCU_B1.c: 917: if (Memory.Runtime == 1) {
 11457  12B3  1DC4               	btfss	(_Memory^(0+512)+36),3
 11458  12B4  0008               	return
 11459                           
 11460                           ;MCU_B1.c: 918: Memory.Runtime = 0;
 11461  12B5  11C4               	bcf	(_Memory^(0+512)+36),3
 11462                           
 11463                           ;MCU_B1.c: 919: Memory.Time = 0;
 11464  12B6  01C2               	clrf	(_Memory^(0+512)+34)
 11465  12B7  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11466  12B8  0008               	return
 11467  12B9                     __end_of_Flash_Memory_Main:	
 11468                           
 11469                           	psect	text64
 11470  07B2                     __ptext64:	
 11471 ;; *************** function _Flash_Memory_Modify *****************
 11472 ;; Defined at:
 11473 ;;		line 977 in file "../src/MCU_B1.c"
 11474 ;; Parameters:    Size  Location     Type
 11475 ;;		None
 11476 ;; Auto vars:     Size  Location     Type
 11477 ;;  i               1    5[BANK0 ] unsigned char 
 11478 ;; Return value:  Size  Location     Type
 11479 ;;		None               void
 11480 ;; Registers used:
 11481 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11482 ;; Tracked objects:
 11483 ;;		On entry : 0/0
 11484 ;;		On exit  : 0/0
 11485 ;;		Unchanged: 0/0
 11486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11488 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11489 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11490 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11491 ;;Total ram usage:        2 bytes
 11492 ;; Hardware stack levels used:    1
 11493 ;; Hardware stack levels required when called:    7
 11494 ;; This function calls:
 11495 ;;		_Flash_Memory_Erasing
 11496 ;;		_Flash_Memory_Read
 11497 ;;		_Flash_Memory_Write
 11498 ;;		_setMemory_Data
 11499 ;; This function is called by:
 11500 ;;		_Flash_Memory_Main
 11501 ;; This function uses a non-reentrant model
 11502 ;;
 11503                           
 11504                           
 11505                           ;psect for function _Flash_Memory_Modify
 11506  07B2                     _Flash_Memory_Modify:	
 11507                           
 11508                           ;MCU_B1.c: 978: char i = 0;
 11509                           
 11510                           ;incstack = 0
 11511                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11512  07B2  0020               	movlb	0	; select bank0
 11513  07B3  01A5               	clrf	Flash_Memory_Modify@i
 11514                           
 11515                           ;MCU_B1.c: 979: for (i = 0; i < 32; i++) {
 11516  07B4  01A5               	clrf	Flash_Memory_Modify@i
 11517  07B5  3020               	movlw	32
 11518  07B6  0225               	subwf	Flash_Memory_Modify@i,w
 11519  07B7  1803               	btfsc	3,0
 11520  07B8  2FCE               	goto	l7454
 11521  07B9                     l7448:	
 11522                           
 11523                           ;MCU_B1.c: 980: Memory.Data[i] = Flash_Memory_Read(i);
 11524  07B9  0825               	movf	Flash_Memory_Modify@i,w
 11525  07BA  319E  266B  3187   	fcall	_Flash_Memory_Read
 11526  07BD  0020               	movlb	0	; select bank0
 11527  07BE  00A4               	movwf	??_Flash_Memory_Modify
 11528  07BF  0825               	movf	Flash_Memory_Modify@i,w
 11529  07C0  3E20               	addlw	_Memory& (0+255)
 11530  07C1  0086               	movwf	6
 11531  07C2  3002               	movlw	2	; select bank4/5
 11532  07C3  0087               	movwf	7
 11533  07C4  0824               	movf	??_Flash_Memory_Modify,w
 11534  07C5  0081               	movwf	1
 11535  07C6  3001               	movlw	1
 11536  07C7  00A4               	movwf	??_Flash_Memory_Modify
 11537  07C8  0824               	movf	??_Flash_Memory_Modify,w
 11538  07C9  07A5               	addwf	Flash_Memory_Modify@i,f
 11539  07CA  3020               	movlw	32
 11540  07CB  0225               	subwf	Flash_Memory_Modify@i,w
 11541  07CC  1C03               	skipc
 11542  07CD  2FB9               	goto	l7448
 11543  07CE                     l7454:	
 11544                           
 11545                           ;MCU_B1.c: 981: }
 11546                           ;MCU_B1.c: 982: setMemory_Data(0, product->Data[12]);
 11547  07CE  086E               	movf	_product,w
 11548  07CF  0086               	movwf	6
 11549  07D0  3002               	movlw	2	; select bank4/5
 11550  07D1  0087               	movwf	7
 11551  07D2  3002               	movlw	2	; select bank4/5
 11552  07D3  3F4C               	moviw [12]fsr1
 11553  07D4  00A0               	movwf	setMemory_Data@data
 11554  07D5  3000               	movlw	0
 11555  07D6  319B  23C4  3187   	fcall	_setMemory_Data
 11556                           
 11557                           ;MCU_B1.c: 983: setMemory_Data(1, product->Data[13]);
 11558  07D9  0020               	movlb	0	; select bank0
 11559  07DA  086E               	movf	_product,w
 11560  07DB  0086               	movwf	6
 11561  07DC  3002               	movlw	2	; select bank4/5
 11562  07DD  0087               	movwf	7
 11563  07DE  3002               	movlw	2	; select bank4/5
 11564  07DF  3F4D               	moviw [13]fsr1
 11565  07E0  00A0               	movwf	setMemory_Data@data
 11566  07E1  3001               	movlw	1
 11567  07E2  319B  23C4  3187   	fcall	_setMemory_Data
 11568                           
 11569                           ;MCU_B1.c: 984: setMemory_Data(2, product->Data[14]);
 11570  07E5  0020               	movlb	0	; select bank0
 11571  07E6  086E               	movf	_product,w
 11572  07E7  0086               	movwf	6
 11573  07E8  3002               	movlw	2	; select bank4/5
 11574  07E9  0087               	movwf	7
 11575  07EA  3002               	movlw	2	; select bank4/5
 11576  07EB  3F4E               	moviw [14]fsr1
 11577  07EC  00A0               	movwf	setMemory_Data@data
 11578  07ED  3002               	movlw	2
 11579  07EE  319B  23C4  3187   	fcall	_setMemory_Data
 11580                           
 11581                           ;MCU_B1.c: 990: if (Memory.LoopSave == 1) {
 11582  07F1  0024               	movlb	4	; select bank4
 11583  07F2  1D44               	btfss	(_Memory^(0+512)+36),2
 11584  07F3  2FF8               	goto	l1322
 11585                           
 11586                           ;MCU_B1.c: 991: Memory.LoopSave = 0;
 11587  07F4  1144               	bcf	(_Memory^(0+512)+36),2
 11588                           
 11589                           ;MCU_B1.c: 992: myMain.FirstOpen = 0;
 11590  07F5  0021               	movlb	1	; select bank1
 11591  07F6  11A0               	bcf	_myMain^(0+128),3
 11592                           
 11593                           ;MCU_B1.c: 993: myMain.First = 0;
 11594  07F7  12A0               	bcf	_myMain^(0+128),5
 11595  07F8                     l1322:	
 11596                           
 11597                           ;MCU_B1.c: 995: }
 11598                           ;MCU_B1.c: 996: GIE = 0;
 11599  07F8  138B               	bcf	11,7	;volatile
 11600                           
 11601                           ;MCU_B1.c: 997: Flash_Memory_Erasing();
 11602  07F9  319B  23D0  3187   	fcall	_Flash_Memory_Erasing
 11603                           
 11604                           ;MCU_B1.c: 998: Flash_Memory_Write();
 11605  07FC  3191  2186         	fcall	_Flash_Memory_Write
 11606                           
 11607                           ;MCU_B1.c: 999: GIE = 1;
 11608  07FE  178B               	bsf	11,7	;volatile
 11609  07FF  0008               	return
 11610  0800                     __end_of_Flash_Memory_Modify:	
 11611                           
 11612                           	psect	text65
 11613  1BD0                     __ptext65:	
 11614 ;; *************** function _Flash_Memory_Erasing *****************
 11615 ;; Defined at:
 11616 ;;		line 966 in file "../src/MCU_B1.c"
 11617 ;; Parameters:    Size  Location     Type
 11618 ;;		None
 11619 ;; Auto vars:     Size  Location     Type
 11620 ;;		None
 11621 ;; Return value:  Size  Location     Type
 11622 ;;		None               void
 11623 ;; Registers used:
 11624 ;;		wreg, status,2, status,0, pclath, cstack
 11625 ;; Tracked objects:
 11626 ;;		On entry : 0/0
 11627 ;;		On exit  : 0/0
 11628 ;;		Unchanged: 0/0
 11629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11634 ;;Total ram usage:        0 bytes
 11635 ;; Hardware stack levels used:    1
 11636 ;; Hardware stack levels required when called:    6
 11637 ;; This function calls:
 11638 ;;		_Flash_Memory_Unlock
 11639 ;; This function is called by:
 11640 ;;		_Flash_Memory_Modify
 11641 ;; This function uses a non-reentrant model
 11642 ;;
 11643                           
 11644                           
 11645                           ;psect for function _Flash_Memory_Erasing
 11646  1BD0                     _Flash_Memory_Erasing:	
 11647                           
 11648                           ;MCU_B1.c: 967: CFGS = 0;
 11649                           
 11650                           ;incstack = 0
 11651                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11652  1BD0  0023               	movlb	3	; select bank3
 11653  1BD1  1315               	bcf	21,6	;volatile
 11654                           
 11655                           ;MCU_B1.c: 968: PMADRH = 0x30;
 11656  1BD2  3030               	movlw	48
 11657  1BD3  0092               	movwf	18	;volatile
 11658                           
 11659                           ;MCU_B1.c: 969: PMADRL = 0x00;
 11660  1BD4  0191               	clrf	17	;volatile
 11661                           
 11662                           ;MCU_B1.c: 970: FREE = 1;
 11663  1BD5  1615               	bsf	21,4	;volatile
 11664                           
 11665                           ;MCU_B1.c: 971: WREN = 1;
 11666  1BD6  1515               	bsf	21,2	;volatile
 11667                           
 11668                           ;MCU_B1.c: 972: Flash_Memory_Unlock();
 11669  1BD7  319B  2399         	fcall	_Flash_Memory_Unlock
 11670                           
 11671                           ;MCU_B1.c: 973: WREN = 0;
 11672  1BD9  0023               	movlb	3	; select bank3
 11673  1BDA  1115               	bcf	21,2	;volatile
 11674  1BDB  0008               	return
 11675  1BDC                     __end_of_Flash_Memory_Erasing:	
 11676                           
 11677                           	psect	text66
 11678  0617                     __ptext66:	
 11679 ;; *************** function _Flash_Memory_Initialization *****************
 11680 ;; Defined at:
 11681 ;;		line 863 in file "../src/MCU_B1.c"
 11682 ;; Parameters:    Size  Location     Type
 11683 ;;		None
 11684 ;; Auto vars:     Size  Location     Type
 11685 ;;  i               1   67[BANK0 ] unsigned char 
 11686 ;; Return value:  Size  Location     Type
 11687 ;;		None               void
 11688 ;; Registers used:
 11689 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11690 ;; Tracked objects:
 11691 ;;		On entry : 0/0
 11692 ;;		On exit  : 0/0
 11693 ;;		Unchanged: 0/0
 11694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11696 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11697 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11698 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11699 ;;Total ram usage:        2 bytes
 11700 ;; Hardware stack levels used:    1
 11701 ;; Hardware stack levels required when called:    8
 11702 ;; This function calls:
 11703 ;;		_Flash_Memory_Read
 11704 ;;		_Flash_Memory_Write
 11705 ;;		_setMemory_Data
 11706 ;;		_setPercentValue
 11707 ;; This function is called by:
 11708 ;;		_main
 11709 ;; This function uses a non-reentrant model
 11710 ;;
 11711                           
 11712                           
 11713                           ;psect for function _Flash_Memory_Initialization
 11714  0617                     _Flash_Memory_Initialization:	
 11715                           
 11716                           ;MCU_B1.c: 864: char i = 0;
 11717                           
 11718                           ;incstack = 0
 11719                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11720  0617  0020               	movlb	0	; select bank0
 11721  0618  01E3               	clrf	Flash_Memory_Initialization@i
 11722                           
 11723                           ;MCU_B1.c: 865: if (Flash_Memory_Read(31) == 0xaa) {
 11724  0619  301F               	movlw	31
 11725  061A  319E  266B  3186   	fcall	_Flash_Memory_Read
 11726  061D  3AAA               	xorlw	170
 11727  061E  1D03               	skipz
 11728  061F  2E89               	goto	l7926
 11729                           
 11730                           ;MCU_B1.c: 866: product->Data[12] = Flash_Memory_Read(0);
 11731  0620  3000               	movlw	0
 11732  0621  319E  266B  3186   	fcall	_Flash_Memory_Read
 11733  0624  0020               	movlb	0	; select bank0
 11734  0625  00E2               	movwf	??_Flash_Memory_Initialization
 11735  0626  086E               	movf	_product,w
 11736  0627  3E0C               	addlw	12
 11737  0628  0086               	movwf	6
 11738  0629  3002               	movlw	2	; select bank4/5
 11739  062A  0087               	movwf	7
 11740  062B  0862               	movf	??_Flash_Memory_Initialization,w
 11741  062C  0081               	movwf	1
 11742                           
 11743                           ;MCU_B1.c: 867: product->Data[13] = Flash_Memory_Read(1);
 11744  062D  3001               	movlw	1
 11745  062E  319E  266B  3186   	fcall	_Flash_Memory_Read
 11746  0631  0020               	movlb	0	; select bank0
 11747  0632  00E2               	movwf	??_Flash_Memory_Initialization
 11748  0633  086E               	movf	_product,w
 11749  0634  3E0D               	addlw	13
 11750  0635  0086               	movwf	6
 11751  0636  3002               	movlw	2	; select bank4/5
 11752  0637  0087               	movwf	7
 11753  0638  0862               	movf	??_Flash_Memory_Initialization,w
 11754  0639  0081               	movwf	1
 11755                           
 11756                           ;MCU_B1.c: 868: product->Data[14] = Flash_Memory_Read(2);
 11757  063A  3002               	movlw	2
 11758  063B  319E  266B  3186   	fcall	_Flash_Memory_Read
 11759  063E  0020               	movlb	0	; select bank0
 11760  063F  00E2               	movwf	??_Flash_Memory_Initialization
 11761  0640  086E               	movf	_product,w
 11762  0641  3E0E               	addlw	14
 11763  0642  0086               	movwf	6
 11764  0643  3002               	movlw	2	; select bank4/5
 11765  0644  0087               	movwf	7
 11766  0645  0862               	movf	??_Flash_Memory_Initialization,w
 11767  0646  0081               	movwf	1
 11768                           
 11769                           ;MCU_B1.c: 874: i = setPercentValue(((char)(80*0.8)));
 11770  0647  3040               	movlw	64
 11771  0648  3189  21DB  3186   	fcall	_setPercentValue
 11772  064B  0020               	movlb	0	; select bank0
 11773  064C  00E2               	movwf	??_Flash_Memory_Initialization
 11774  064D  0862               	movf	??_Flash_Memory_Initialization,w
 11775  064E  00E3               	movwf	Flash_Memory_Initialization@i
 11776                           
 11777                           ;MCU_B1.c: 875: product->Data[21] = i;
 11778  064F  0863               	movf	Flash_Memory_Initialization@i,w
 11779  0650  00E2               	movwf	??_Flash_Memory_Initialization
 11780  0651  086E               	movf	_product,w
 11781  0652  3E15               	addlw	21
 11782  0653  0086               	movwf	6
 11783  0654  3002               	movlw	2	; select bank4/5
 11784  0655  0087               	movwf	7
 11785  0656  0862               	movf	??_Flash_Memory_Initialization,w
 11786  0657  0081               	movwf	1
 11787                           
 11788                           ;MCU_B1.c: 876: product->Data[22] = i;
 11789  0658  0863               	movf	Flash_Memory_Initialization@i,w
 11790  0659  00E2               	movwf	??_Flash_Memory_Initialization
 11791  065A  086E               	movf	_product,w
 11792  065B  3E16               	addlw	22
 11793  065C  0086               	movwf	6
 11794  065D  3002               	movlw	2	; select bank4/5
 11795  065E  0087               	movwf	7
 11796  065F  0862               	movf	??_Flash_Memory_Initialization,w
 11797  0660  0081               	movwf	1
 11798                           
 11799                           ;MCU_B1.c: 877: product->Data[23] = i;
 11800  0661  0863               	movf	Flash_Memory_Initialization@i,w
 11801  0662  00E2               	movwf	??_Flash_Memory_Initialization
 11802  0663  086E               	movf	_product,w
 11803  0664  3E17               	addlw	23
 11804  0665  0086               	movwf	6
 11805  0666  3002               	movlw	2	; select bank4/5
 11806  0667  0087               	movwf	7
 11807  0668  0862               	movf	??_Flash_Memory_Initialization,w
 11808  0669  0081               	movwf	1
 11809                           
 11810                           ;MCU_B1.c: 879: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11811  066A  086E               	movf	_product,w
 11812  066B  3E0C               	addlw	12
 11813  066C  0086               	movwf	6
 11814  066D  3002               	movlw	2	; select bank4/5
 11815  066E  0087               	movwf	7
 11816  066F  0801               	movf	1,w
 11817  0670  3AFF               	xorlw	255
 11818  0671  1D03               	skipz
 11819  0672  0008               	return
 11820  0673  086E               	movf	_product,w
 11821  0674  3E0D               	addlw	13
 11822  0675  0086               	movwf	6
 11823  0676  3002               	movlw	2	; select bank4/5
 11824  0677  0087               	movwf	7
 11825  0678  0801               	movf	1,w
 11826  0679  3AFF               	xorlw	255
 11827  067A  1D03               	skipz
 11828  067B  0008               	return
 11829  067C  086E               	movf	_product,w
 11830  067D  3E0E               	addlw	14
 11831  067E  0086               	movwf	6
 11832  067F  3002               	movlw	2	; select bank4/5
 11833  0680  0087               	movwf	7
 11834  0681  0801               	movf	1,w
 11835  0682  3AFF               	xorlw	255
 11836  0683  1D03               	skipz
 11837  0684  0008               	return
 11838                           
 11839                           ;MCU_B1.c: 880: myMain.FirstOpen = 1;
 11840  0685  0021               	movlb	1	; select bank1
 11841  0686  15A0               	bsf	_myMain^(0+128),3
 11842                           
 11843                           ;MCU_B1.c: 881: myMain.First = 1;
 11844  0687  16A0               	bsf	_myMain^(0+128),5
 11845                           
 11846                           ;MCU_B1.c: 882: }
 11847                           ;MCU_B1.c: 883: } else {
 11848  0688  0008               	return
 11849  0689                     l7926:	
 11850                           
 11851                           ;MCU_B1.c: 884: i = setPercentValue(((char)(80*0.8)));
 11852  0689  3040               	movlw	64
 11853  068A  3189  21DB  3186   	fcall	_setPercentValue
 11854  068D  0020               	movlb	0	; select bank0
 11855  068E  00E2               	movwf	??_Flash_Memory_Initialization
 11856  068F  0862               	movf	??_Flash_Memory_Initialization,w
 11857  0690  00E3               	movwf	Flash_Memory_Initialization@i
 11858                           
 11859                           ;MCU_B1.c: 885: setMemory_Data(0, 0xff);
 11860  0691  30FF               	movlw	255
 11861  0692  00E2               	movwf	??_Flash_Memory_Initialization
 11862  0693  0862               	movf	??_Flash_Memory_Initialization,w
 11863  0694  00A0               	movwf	setMemory_Data@data
 11864  0695  3000               	movlw	0
 11865  0696  319B  23C4  3186   	fcall	_setMemory_Data
 11866                           
 11867                           ;MCU_B1.c: 886: setMemory_Data(1, 0xff);
 11868  0699  30FF               	movlw	255
 11869  069A  0020               	movlb	0	; select bank0
 11870  069B  00E2               	movwf	??_Flash_Memory_Initialization
 11871  069C  0862               	movf	??_Flash_Memory_Initialization,w
 11872  069D  00A0               	movwf	setMemory_Data@data
 11873  069E  3001               	movlw	1
 11874  069F  319B  23C4  3186   	fcall	_setMemory_Data
 11875                           
 11876                           ;MCU_B1.c: 887: setMemory_Data(2, 0xff);
 11877  06A2  30FF               	movlw	255
 11878  06A3  0020               	movlb	0	; select bank0
 11879  06A4  00E2               	movwf	??_Flash_Memory_Initialization
 11880  06A5  0862               	movf	??_Flash_Memory_Initialization,w
 11881  06A6  00A0               	movwf	setMemory_Data@data
 11882  06A7  3002               	movlw	2
 11883  06A8  319B  23C4  3186   	fcall	_setMemory_Data
 11884                           
 11885                           ;MCU_B1.c: 888: setMemory_Data(3, 0xff);
 11886  06AB  30FF               	movlw	255
 11887  06AC  0020               	movlb	0	; select bank0
 11888  06AD  00E2               	movwf	??_Flash_Memory_Initialization
 11889  06AE  0862               	movf	??_Flash_Memory_Initialization,w
 11890  06AF  00A0               	movwf	setMemory_Data@data
 11891  06B0  3003               	movlw	3
 11892  06B1  319B  23C4  3186   	fcall	_setMemory_Data
 11893                           
 11894                           ;MCU_B1.c: 889: setMemory_Data(4, 0xff);
 11895  06B4  30FF               	movlw	255
 11896  06B5  0020               	movlb	0	; select bank0
 11897  06B6  00E2               	movwf	??_Flash_Memory_Initialization
 11898  06B7  0862               	movf	??_Flash_Memory_Initialization,w
 11899  06B8  00A0               	movwf	setMemory_Data@data
 11900  06B9  3004               	movlw	4
 11901  06BA  319B  23C4  3186   	fcall	_setMemory_Data
 11902                           
 11903                           ;MCU_B1.c: 890: setMemory_Data(5, 0xff);
 11904  06BD  30FF               	movlw	255
 11905  06BE  0020               	movlb	0	; select bank0
 11906  06BF  00E2               	movwf	??_Flash_Memory_Initialization
 11907  06C0  0862               	movf	??_Flash_Memory_Initialization,w
 11908  06C1  00A0               	movwf	setMemory_Data@data
 11909  06C2  3005               	movlw	5
 11910  06C3  319B  23C4  3186   	fcall	_setMemory_Data
 11911                           
 11912                           ;MCU_B1.c: 891: setMemory_Data(31, 0xaa);
 11913  06C6  30AA               	movlw	170
 11914  06C7  0020               	movlb	0	; select bank0
 11915  06C8  00E2               	movwf	??_Flash_Memory_Initialization
 11916  06C9  0862               	movf	??_Flash_Memory_Initialization,w
 11917  06CA  00A0               	movwf	setMemory_Data@data
 11918  06CB  301F               	movlw	31
 11919  06CC  319B  23C4  3186   	fcall	_setMemory_Data
 11920                           
 11921                           ;MCU_B1.c: 892: product->Data[21] = i;
 11922  06CF  0020               	movlb	0	; select bank0
 11923  06D0  0863               	movf	Flash_Memory_Initialization@i,w
 11924  06D1  00E2               	movwf	??_Flash_Memory_Initialization
 11925  06D2  086E               	movf	_product,w
 11926  06D3  3E15               	addlw	21
 11927  06D4  0086               	movwf	6
 11928  06D5  3002               	movlw	2	; select bank4/5
 11929  06D6  0087               	movwf	7
 11930  06D7  0862               	movf	??_Flash_Memory_Initialization,w
 11931  06D8  0081               	movwf	1
 11932                           
 11933                           ;MCU_B1.c: 893: product->Data[22] = i;
 11934  06D9  0863               	movf	Flash_Memory_Initialization@i,w
 11935  06DA  00E2               	movwf	??_Flash_Memory_Initialization
 11936  06DB  086E               	movf	_product,w
 11937  06DC  3E16               	addlw	22
 11938  06DD  0086               	movwf	6
 11939  06DE  3002               	movlw	2	; select bank4/5
 11940  06DF  0087               	movwf	7
 11941  06E0  0862               	movf	??_Flash_Memory_Initialization,w
 11942  06E1  0081               	movwf	1
 11943                           
 11944                           ;MCU_B1.c: 894: product->Data[23] = i;
 11945  06E2  0863               	movf	Flash_Memory_Initialization@i,w
 11946  06E3  00E2               	movwf	??_Flash_Memory_Initialization
 11947  06E4  086E               	movf	_product,w
 11948  06E5  3E17               	addlw	23
 11949  06E6  0086               	movwf	6
 11950  06E7  3002               	movlw	2	; select bank4/5
 11951  06E8  0087               	movwf	7
 11952  06E9  0862               	movf	??_Flash_Memory_Initialization,w
 11953  06EA  0081               	movwf	1
 11954                           
 11955                           ;MCU_B1.c: 895: GIE = 0;
 11956  06EB  138B               	bcf	11,7	;volatile
 11957                           
 11958                           ;MCU_B1.c: 896: Flash_Memory_Write();
 11959  06EC  3191  2186         	fcall	_Flash_Memory_Write
 11960                           
 11961                           ;MCU_B1.c: 897: GIE = 1;
 11962  06EE  178B               	bsf	11,7	;volatile
 11963                           
 11964                           ;MCU_B1.c: 898: myMain.FirstOpen = 1;
 11965  06EF  0021               	movlb	1	; select bank1
 11966  06F0  15A0               	bsf	_myMain^(0+128),3
 11967                           
 11968                           ;MCU_B1.c: 899: myMain.First = 1;
 11969  06F1  16A0               	bsf	_myMain^(0+128),5
 11970  06F2  0008               	return
 11971  06F3                     __end_of_Flash_Memory_Initialization:	
 11972                           
 11973                           	psect	text67
 11974  1BC4                     __ptext67:	
 11975 ;; *************** function _setMemory_Data *****************
 11976 ;; Defined at:
 11977 ;;		line 1014 in file "../src/MCU_B1.c"
 11978 ;; Parameters:    Size  Location     Type
 11979 ;;  address         1    wreg     unsigned char 
 11980 ;;  data            1    0[BANK0 ] unsigned char 
 11981 ;; Auto vars:     Size  Location     Type
 11982 ;;  address         1    2[BANK0 ] unsigned char 
 11983 ;; Return value:  Size  Location     Type
 11984 ;;		None               void
 11985 ;; Registers used:
 11986 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11987 ;; Tracked objects:
 11988 ;;		On entry : 0/0
 11989 ;;		On exit  : 0/0
 11990 ;;		Unchanged: 0/0
 11991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11992 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11993 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11994 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11995 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11996 ;;Total ram usage:        3 bytes
 11997 ;; Hardware stack levels used:    1
 11998 ;; Hardware stack levels required when called:    5
 11999 ;; This function calls:
 12000 ;;		Nothing
 12001 ;; This function is called by:
 12002 ;;		_Flash_Memory_Initialization
 12003 ;;		_Flash_Memory_Modify
 12004 ;; This function uses a non-reentrant model
 12005 ;;
 12006                           
 12007                           
 12008                           ;psect for function _setMemory_Data
 12009  1BC4                     _setMemory_Data:	
 12010                           
 12011                           ;incstack = 0
 12012                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12013                           ;setMemory_Data@address stored from wreg
 12014  1BC4  0020               	movlb	0	; select bank0
 12015  1BC5  00A2               	movwf	setMemory_Data@address
 12016                           
 12017                           ;MCU_B1.c: 1015: Memory.Data[address] = data;
 12018  1BC6  0820               	movf	setMemory_Data@data,w
 12019  1BC7  00A1               	movwf	??_setMemory_Data
 12020  1BC8  0822               	movf	setMemory_Data@address,w
 12021  1BC9  3E20               	addlw	_Memory& (0+255)
 12022  1BCA  0086               	movwf	6
 12023  1BCB  3002               	movlw	2	; select bank4/5
 12024  1BCC  0087               	movwf	7
 12025  1BCD  0821               	movf	??_setMemory_Data,w
 12026  1BCE  0081               	movwf	1
 12027  1BCF  0008               	return
 12028  1BD0                     __end_of_setMemory_Data:	
 12029                           
 12030                           	psect	text68
 12031  1186                     __ptext68:	
 12032 ;; *************** function _Flash_Memory_Write *****************
 12033 ;; Defined at:
 12034 ;;		line 947 in file "../src/MCU_B1.c"
 12035 ;; Parameters:    Size  Location     Type
 12036 ;;		None
 12037 ;; Auto vars:     Size  Location     Type
 12038 ;;  i               1    1[BANK0 ] unsigned char 
 12039 ;; Return value:  Size  Location     Type
 12040 ;;		None               void
 12041 ;; Registers used:
 12042 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12043 ;; Tracked objects:
 12044 ;;		On entry : 0/0
 12045 ;;		On exit  : 0/0
 12046 ;;		Unchanged: 0/0
 12047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12049 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12050 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12051 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12052 ;;Total ram usage:        2 bytes
 12053 ;; Hardware stack levels used:    1
 12054 ;; Hardware stack levels required when called:    6
 12055 ;; This function calls:
 12056 ;;		_Flash_Memory_Unlock
 12057 ;; This function is called by:
 12058 ;;		_Flash_Memory_Initialization
 12059 ;;		_Flash_Memory_Modify
 12060 ;; This function uses a non-reentrant model
 12061 ;;
 12062                           
 12063                           
 12064                           ;psect for function _Flash_Memory_Write
 12065  1186                     _Flash_Memory_Write:	
 12066                           
 12067                           ;MCU_B1.c: 948: char i = 0;
 12068                           
 12069                           ;incstack = 0
 12070                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12071  1186  0020               	movlb	0	; select bank0
 12072  1187  01A1               	clrf	Flash_Memory_Write@i
 12073                           
 12074                           ;MCU_B1.c: 949: CFGS = 0;
 12075  1188  0023               	movlb	3	; select bank3
 12076  1189  1315               	bcf	21,6	;volatile
 12077                           
 12078                           ;MCU_B1.c: 950: PMADRH = 0x30;
 12079  118A  3030               	movlw	48
 12080  118B  0092               	movwf	18	;volatile
 12081                           
 12082                           ;MCU_B1.c: 951: PMDATH = 0;
 12083  118C  0194               	clrf	20	;volatile
 12084                           
 12085                           ;MCU_B1.c: 952: FREE = 0;
 12086  118D  1215               	bcf	21,4	;volatile
 12087                           
 12088                           ;MCU_B1.c: 953: LWLO = 1;
 12089  118E  1695               	bsf	21,5	;volatile
 12090                           
 12091                           ;MCU_B1.c: 954: WREN = 1;
 12092  118F  1515               	bsf	21,2	;volatile
 12093                           
 12094                           ;MCU_B1.c: 955: for (i = 0; i < 32; i++) {
 12095  1190  0020               	movlb	0	; select bank0
 12096  1191  01A1               	clrf	Flash_Memory_Write@i
 12097  1192  3020               	movlw	32
 12098  1193  0221               	subwf	Flash_Memory_Write@i,w
 12099  1194  1803               	btfsc	3,0
 12100  1195  29AE               	goto	l1313
 12101  1196                     l7002:	
 12102                           
 12103                           ;MCU_B1.c: 956: PMADRL = i;
 12104  1196  0821               	movf	Flash_Memory_Write@i,w
 12105  1197  0023               	movlb	3	; select bank3
 12106  1198  0091               	movwf	17	;volatile
 12107                           
 12108                           ;MCU_B1.c: 957: PMDATL = Memory.Data[i];
 12109  1199  0020               	movlb	0	; select bank0
 12110  119A  0821               	movf	Flash_Memory_Write@i,w
 12111  119B  3E20               	addlw	_Memory& (0+255)
 12112  119C  0086               	movwf	6
 12113  119D  3002               	movlw	2	; select bank4/5
 12114  119E  0087               	movwf	7
 12115  119F  0801               	movf	1,w
 12116  11A0  0023               	movlb	3	; select bank3
 12117  11A1  0093               	movwf	19	;volatile
 12118                           
 12119                           ;MCU_B1.c: 958: Flash_Memory_Unlock();
 12120  11A2  319B  2399  3191   	fcall	_Flash_Memory_Unlock
 12121  11A5  3001               	movlw	1
 12122  11A6  0020               	movlb	0	; select bank0
 12123  11A7  00A0               	movwf	??_Flash_Memory_Write
 12124  11A8  0820               	movf	??_Flash_Memory_Write,w
 12125  11A9  07A1               	addwf	Flash_Memory_Write@i,f
 12126  11AA  3020               	movlw	32
 12127  11AB  0221               	subwf	Flash_Memory_Write@i,w
 12128  11AC  1C03               	skipc
 12129  11AD  2996               	goto	l7002
 12130  11AE                     l1313:	
 12131                           
 12132                           ;MCU_B1.c: 959: }
 12133                           ;MCU_B1.c: 960: LWLO = 0;
 12134  11AE  0023               	movlb	3	; select bank3
 12135  11AF  1295               	bcf	21,5	;volatile
 12136                           
 12137                           ;MCU_B1.c: 961: Flash_Memory_Unlock();
 12138  11B0  319B  2399         	fcall	_Flash_Memory_Unlock
 12139                           
 12140                           ;MCU_B1.c: 962: WREN = 0;
 12141  11B2  0023               	movlb	3	; select bank3
 12142  11B3  1115               	bcf	21,2	;volatile
 12143  11B4  0008               	return
 12144  11B5                     __end_of_Flash_Memory_Write:	
 12145                           
 12146                           	psect	text69
 12147  1B99                     __ptext69:	
 12148 ;; *************** function _Flash_Memory_Unlock *****************
 12149 ;; Defined at:
 12150 ;;		line 926 in file "../src/MCU_B1.c"
 12151 ;; Parameters:    Size  Location     Type
 12152 ;;		None
 12153 ;; Auto vars:     Size  Location     Type
 12154 ;;		None
 12155 ;; Return value:  Size  Location     Type
 12156 ;;		None               void
 12157 ;; Registers used:
 12158 ;;		wreg
 12159 ;; Tracked objects:
 12160 ;;		On entry : 0/0
 12161 ;;		On exit  : 0/0
 12162 ;;		Unchanged: 0/0
 12163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12168 ;;Total ram usage:        0 bytes
 12169 ;; Hardware stack levels used:    1
 12170 ;; Hardware stack levels required when called:    5
 12171 ;; This function calls:
 12172 ;;		Nothing
 12173 ;; This function is called by:
 12174 ;;		_Flash_Memory_Write
 12175 ;;		_Flash_Memory_Erasing
 12176 ;; This function uses a non-reentrant model
 12177 ;;
 12178                           
 12179                           
 12180                           ;psect for function _Flash_Memory_Unlock
 12181  1B99                     _Flash_Memory_Unlock:	
 12182                           
 12183                           ;MCU_B1.c: 927: PMCON2 = 0x55;
 12184                           
 12185                           ;incstack = 0
 12186                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12187  1B99  3055               	movlw	85
 12188  1B9A  0023               	movlb	3	; select bank3
 12189  1B9B  0096               	movwf	22	;volatile
 12190                           
 12191                           ;MCU_B1.c: 928: PMCON2 = 0xaa;
 12192  1B9C  30AA               	movlw	170
 12193  1B9D  0096               	movwf	22	;volatile
 12194                           
 12195                           ;MCU_B1.c: 929: WR = 1;
 12196  1B9E  1495               	bsf	21,1	;volatile
 12197                           
 12198                           ;MCU_B1.c: 930: __nop();
 12199  1B9F  0000               	nop
 12200                           
 12201                           ;MCU_B1.c: 931: __nop();
 12202  1BA0  0000               	nop
 12203  1BA1  0008               	return
 12204  1BA2                     __end_of_Flash_Memory_Unlock:	
 12205                           
 12206                           	psect	text70
 12207  1E6B                     __ptext70:	
 12208 ;; *************** function _Flash_Memory_Read *****************
 12209 ;; Defined at:
 12210 ;;		line 935 in file "../src/MCU_B1.c"
 12211 ;; Parameters:    Size  Location     Type
 12212 ;;  address         1    wreg     unsigned char 
 12213 ;; Auto vars:     Size  Location     Type
 12214 ;;  address         1    2[BANK0 ] unsigned char 
 12215 ;;  ret             1    3[BANK0 ] unsigned char 
 12216 ;;  i               1    1[BANK0 ] unsigned char 
 12217 ;; Return value:  Size  Location     Type
 12218 ;;                  1    wreg      unsigned char 
 12219 ;; Registers used:
 12220 ;;		wreg, status,2
 12221 ;; Tracked objects:
 12222 ;;		On entry : 0/0
 12223 ;;		On exit  : 0/0
 12224 ;;		Unchanged: 0/0
 12225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12227 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12228 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12229 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12230 ;;Total ram usage:        4 bytes
 12231 ;; Hardware stack levels used:    1
 12232 ;; Hardware stack levels required when called:    5
 12233 ;; This function calls:
 12234 ;;		Nothing
 12235 ;; This function is called by:
 12236 ;;		_Flash_Memory_Initialization
 12237 ;;		_Flash_Memory_Modify
 12238 ;; This function uses a non-reentrant model
 12239 ;;
 12240                           
 12241                           
 12242                           ;psect for function _Flash_Memory_Read
 12243  1E6B                     _Flash_Memory_Read:	
 12244                           
 12245                           ;incstack = 0
 12246                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12247                           ;Flash_Memory_Read@address stored from wreg
 12248  1E6B  0020               	movlb	0	; select bank0
 12249  1E6C  00A2               	movwf	Flash_Memory_Read@address
 12250                           
 12251                           ;MCU_B1.c: 936: char i = 0, ret = 0;
 12252  1E6D  01A1               	clrf	Flash_Memory_Read@i
 12253  1E6E  01A3               	clrf	Flash_Memory_Read@ret
 12254                           
 12255                           ;MCU_B1.c: 937: PMADRH = 0x30;
 12256  1E6F  3030               	movlw	48
 12257  1E70  0023               	movlb	3	; select bank3
 12258  1E71  0092               	movwf	18	;volatile
 12259                           
 12260                           ;MCU_B1.c: 938: PMADRL = address;
 12261  1E72  0020               	movlb	0	; select bank0
 12262  1E73  0822               	movf	Flash_Memory_Read@address,w
 12263  1E74  0023               	movlb	3	; select bank3
 12264  1E75  0091               	movwf	17	;volatile
 12265                           
 12266                           ;MCU_B1.c: 939: CFGS = 0;
 12267  1E76  1315               	bcf	21,6	;volatile
 12268                           
 12269                           ;MCU_B1.c: 940: RD = 1;
 12270  1E77  1415               	bsf	21,0	;volatile
 12271                           
 12272                           ;MCU_B1.c: 941: i = PMDATH;
 12273  1E78  0814               	movf	20,w	;volatile
 12274  1E79  0020               	movlb	0	; select bank0
 12275  1E7A  00A0               	movwf	??_Flash_Memory_Read
 12276  1E7B  0820               	movf	??_Flash_Memory_Read,w
 12277  1E7C  00A1               	movwf	Flash_Memory_Read@i
 12278                           
 12279                           ;MCU_B1.c: 942: ret = PMDATL;
 12280  1E7D  0023               	movlb	3	; select bank3
 12281  1E7E  0813               	movf	19,w	;volatile
 12282  1E7F  0020               	movlb	0	; select bank0
 12283  1E80  00A0               	movwf	??_Flash_Memory_Read
 12284  1E81  0820               	movf	??_Flash_Memory_Read,w
 12285  1E82  00A3               	movwf	Flash_Memory_Read@ret
 12286                           
 12287                           ;MCU_B1.c: 943: return ret;
 12288  1E83  0823               	movf	Flash_Memory_Read@ret,w
 12289  1E84  0008               	return
 12290  1E85                     __end_of_Flash_Memory_Read:	
 12291                           
 12292                           	psect	text71
 12293  121A                     __ptext71:	
 12294 ;; *************** function _DimmerLights_Main *****************
 12295 ;; Defined at:
 12296 ;;		line 402 in file "../src/Dimmer_B1.c"
 12297 ;; Parameters:    Size  Location     Type
 12298 ;;		None
 12299 ;; Auto vars:     Size  Location     Type
 12300 ;;		None
 12301 ;; Return value:  Size  Location     Type
 12302 ;;		None               void
 12303 ;; Registers used:
 12304 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12305 ;; Tracked objects:
 12306 ;;		On entry : 0/0
 12307 ;;		On exit  : 0/0
 12308 ;;		Unchanged: 0/0
 12309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12311 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12312 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12313 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12314 ;;Total ram usage:        4 bytes
 12315 ;; Hardware stack levels used:    1
 12316 ;; Hardware stack levels required when called:   10
 12317 ;; This function calls:
 12318 ;;		_getLoad_OK
 12319 ;;		_getMain_All_Error_Status
 12320 ;;		_getMain_LightsStatus
 12321 ;;		_setDimmerLights_Main
 12322 ;; This function is called by:
 12323 ;;		_main
 12324 ;; This function uses a non-reentrant model
 12325 ;;
 12326                           
 12327                           
 12328                           ;psect for function _DimmerLights_Main
 12329  121A                     _DimmerLights_Main:	
 12330                           
 12331                           ;Dimmer_B1.c: 404: if (getMain_All_Error_Status(0) == 0) {
 12332                           
 12333                           ;incstack = 0
 12334                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12335  121A  3000               	movlw	0
 12336  121B  3191  21E7  3192   	fcall	_getMain_All_Error_Status
 12337  121E  3800               	iorlw	0
 12338  121F  1D03               	skipz
 12339  1220  2A44               	goto	l776
 12340                           
 12341                           ;Dimmer_B1.c: 405: if (Dimmer.LoadOK == 1) {
 12342  1221  0022               	movlb	2	; select bank2
 12343  1222  1CBE               	btfss	_Dimmer^(0+256),1
 12344  1223  2A46               	goto	l7868
 12345                           
 12346                           ;Dimmer_B1.c: 406: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 12347  1224  319B  2378  3192   	fcall	_getLoad_OK
 12348  1227  3A01               	xorlw	1
 12349  1228  1903               	skipnz
 12350  1229  2A3B               	goto	l7864
 12351  122A  3191  2159  3192   	fcall	_getMain_LightsStatus
 12352  122D  3A00               	xorlw	0
 12353  122E  1903               	skipnz
 12354  122F  2A3B               	goto	l7864
 12355  1230  0022               	movlb	2	; select bank2
 12356  1231  0C3E               	rrf	_Dimmer^(0+256),w
 12357  1232  3901               	andlw	1
 12358  1233  0020               	movlb	0	; select bank0
 12359  1234  00E7               	movwf	??_DimmerLights_Main
 12360  1235  01E8               	clrf	??_DimmerLights_Main+1
 12361  1236  0867               	movf	??_DimmerLights_Main,w
 12362  1237  00E9               	movwf	_DimmerLights_Main$2500
 12363  1238  0868               	movf	??_DimmerLights_Main+1,w
 12364  1239  00EA               	movwf	_DimmerLights_Main$2500+1
 12365  123A  2A3E               	goto	l7866
 12366  123B                     l7864:	
 12367  123B  0020               	movlb	0	; select bank0
 12368  123C  01E9               	clrf	_DimmerLights_Main$2500
 12369  123D  01EA               	clrf	_DimmerLights_Main$2500+1
 12370  123E                     l7866:	
 12371  123E  0869               	movf	_DimmerLights_Main$2500,w
 12372  123F  0022               	movlb	2	; select bank2
 12373  1240  10BE               	bcf	_Dimmer^(0+256),1
 12374  1241  1D03               	skipz
 12375  1242  14BE               	bsf	_Dimmer^(0+256),1
 12376                           
 12377                           ;Dimmer_B1.c: 407: }
 12378                           ;Dimmer_B1.c: 408: } else {
 12379  1243  2A46               	goto	l7868
 12380  1244                     l776:	
 12381                           
 12382                           ;Dimmer_B1.c: 409: Dimmer.LoadOK = 0;
 12383  1244  0022               	movlb	2	; select bank2
 12384  1245  10BE               	bcf	_Dimmer^(0+256),1
 12385  1246                     l7868:	
 12386                           
 12387                           ;Dimmer_B1.c: 410: }
 12388                           ;Dimmer_B1.c: 414: setDimmerLights_Main(1);
 12389  1246  3001               	movlw	1
 12390  1247  3196  2692  3192   	fcall	_setDimmerLights_Main
 12391                           
 12392                           ;Dimmer_B1.c: 418: setDimmerLights_Main(2);
 12393  124A  3002               	movlw	2
 12394  124B  3196  2692         	fcall	_setDimmerLights_Main
 12395  124D  0008               	return
 12396  124E                     __end_of_DimmerLights_Main:	
 12397                           
 12398                           	psect	text72
 12399  1692                     __ptext72:	
 12400 ;; *************** function _setDimmerLights_Main *****************
 12401 ;; Defined at:
 12402 ;;		line 428 in file "../src/Dimmer_B1.c"
 12403 ;; Parameters:    Size  Location     Type
 12404 ;;  lights          1    wreg     unsigned char 
 12405 ;; Auto vars:     Size  Location     Type
 12406 ;;  lights          1   70[BANK0 ] unsigned char 
 12407 ;; Return value:  Size  Location     Type
 12408 ;;		None               void
 12409 ;; Registers used:
 12410 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12411 ;; Tracked objects:
 12412 ;;		On entry : 0/0
 12413 ;;		On exit  : 0/0
 12414 ;;		Unchanged: 0/0
 12415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12417 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12419 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12420 ;;Total ram usage:        1 bytes
 12421 ;; Hardware stack levels used:    1
 12422 ;; Hardware stack levels required when called:    9
 12423 ;; This function calls:
 12424 ;;		_DimmerLightsPointSelect
 12425 ;;		_setBuz
 12426 ;;		_setDimmerLights
 12427 ;;		_setDimmerLights_Adj
 12428 ;; This function is called by:
 12429 ;;		_DimmerLights_Main
 12430 ;; This function uses a non-reentrant model
 12431 ;;
 12432                           
 12433                           
 12434                           ;psect for function _setDimmerLights_Main
 12435  1692                     _setDimmerLights_Main:	
 12436                           
 12437                           ;incstack = 0
 12438                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12439                           ;setDimmerLights_Main@lights stored from wreg
 12440  1692  0020               	movlb	0	; select bank0
 12441  1693  00E6               	movwf	setDimmerLights_Main@lights
 12442                           
 12443                           ;Dimmer_B1.c: 429: DimmerLightsPointSelect(lights);
 12444  1694  0866               	movf	setDimmerLights_Main@lights,w
 12445  1695  319C  24F1  3196   	fcall	_DimmerLightsPointSelect
 12446                           
 12447                           ;Dimmer_B1.c: 430: if (DimmerLights->Trigger == 1) {
 12448  1698  0020               	movlb	0	; select bank0
 12449  1699  086F               	movf	_DimmerLights,w
 12450  169A  3E08               	addlw	8
 12451  169B  0086               	movwf	6
 12452  169C  3001               	movlw	1	; select bank2/3
 12453  169D  0087               	movwf	7
 12454  169E  1D01               	btfss	1,2
 12455  169F  2EBD               	goto	l7338
 12456                           
 12457                           ;Dimmer_B1.c: 432: if (Dimmer.LoadOK == 0) {
 12458  16A0  0022               	movlb	2	; select bank2
 12459  16A1  18BE               	btfsc	_Dimmer^(0+256),1
 12460  16A2  0008               	return
 12461                           
 12462                           ;Dimmer_B1.c: 433: DimmerLights->Trigger = 0;
 12463  16A3  0020               	movlb	0	; select bank0
 12464  16A4  086F               	movf	_DimmerLights,w
 12465  16A5  3E08               	addlw	8
 12466  16A6  0086               	movwf	6
 12467  16A7  3001               	movlw	1	; select bank2/3
 12468  16A8  0087               	movwf	7
 12469  16A9  1101               	bcf	1,2
 12470                           
 12471                           ;Dimmer_B1.c: 435: if (DimmerLights->Switch == 1) {
 12472  16AA  086F               	movf	_DimmerLights,w
 12473  16AB  3E08               	addlw	8
 12474  16AC  0086               	movwf	6
 12475  16AD  3001               	movlw	1	; select bank2/3
 12476  16AE  0087               	movwf	7
 12477  16AF  1C81               	btfss	1,1
 12478  16B0  2EB7               	goto	l7336
 12479                           
 12480                           ;Dimmer_B1.c: 436: setDimmerLights(lights, 1);
 12481  16B1  01E2               	clrf	setDimmerLights@status
 12482  16B2  0AE2               	incf	setDimmerLights@status,f
 12483  16B3  0866               	movf	setDimmerLights_Main@lights,w
 12484  16B4  318C  24E5         	fcall	_setDimmerLights
 12485                           
 12486                           ;Dimmer_B1.c: 437: } else {
 12487  16B6  0008               	return
 12488  16B7                     l7336:	
 12489                           
 12490                           ;Dimmer_B1.c: 438: setDimmerLights(lights, 0);
 12491  16B7  0020               	movlb	0	; select bank0
 12492  16B8  01E2               	clrf	setDimmerLights@status
 12493  16B9  0866               	movf	setDimmerLights_Main@lights,w
 12494  16BA  318C  24E5         	fcall	_setDimmerLights
 12495                           
 12496                           ;Dimmer_B1.c: 439: }
 12497                           ;Dimmer_B1.c: 440: }
 12498                           ;Dimmer_B1.c: 441: } else {
 12499  16BC  0008               	return
 12500  16BD                     l7338:	
 12501                           
 12502                           ;Dimmer_B1.c: 442: if (DimmerLights->TriggerAdj == 1) {
 12503  16BD  0020               	movlb	0	; select bank0
 12504  16BE  086F               	movf	_DimmerLights,w
 12505  16BF  3E08               	addlw	8
 12506  16C0  0086               	movwf	6
 12507  16C1  3001               	movlw	1	; select bank2/3
 12508  16C2  0087               	movwf	7
 12509  16C3  1E01               	btfss	1,4
 12510  16C4  0008               	return
 12511                           
 12512                           ;Dimmer_B1.c: 443: if (Dimmer.LoadOK == 0) {
 12513  16C5  0022               	movlb	2	; select bank2
 12514  16C6  18BE               	btfsc	_Dimmer^(0+256),1
 12515  16C7  0008               	return
 12516                           
 12517                           ;Dimmer_B1.c: 444: DimmerLights->TriggerAdj = 0;
 12518  16C8  0020               	movlb	0	; select bank0
 12519  16C9  086F               	movf	_DimmerLights,w
 12520  16CA  3E08               	addlw	8
 12521  16CB  0086               	movwf	6
 12522  16CC  3001               	movlw	1	; select bank2/3
 12523  16CD  0087               	movwf	7
 12524  16CE  1201               	bcf	1,4
 12525                           
 12526                           ;Dimmer_B1.c: 445: if (DimmerLights->AdjGo == 1) {
 12527  16CF  086F               	movf	_DimmerLights,w
 12528  16D0  3E08               	addlw	8
 12529  16D1  0086               	movwf	6
 12530  16D2  3001               	movlw	1	; select bank2/3
 12531  16D3  0087               	movwf	7
 12532  16D4  1D81               	btfss	1,3
 12533  16D5  2EE5               	goto	l7348
 12534                           
 12535                           ;Dimmer_B1.c: 446: setDimmerLights_Adj(lights, 1);
 12536  16D6  01E2               	clrf	setDimmerLights_Adj@status
 12537  16D7  0AE2               	incf	setDimmerLights_Adj@status,f
 12538  16D8  0866               	movf	setDimmerLights_Main@lights,w
 12539  16D9  318A  22A5  3196   	fcall	_setDimmerLights_Adj
 12540                           
 12541                           ;Dimmer_B1.c: 447: setBuz(1, 100);
 12542  16DC  3064               	movlw	100
 12543  16DD  0020               	movlb	0	; select bank0
 12544  16DE  00A9               	movwf	setBuz@time
 12545  16DF  3000               	movlw	0
 12546  16E0  00AA               	movwf	setBuz@time+1
 12547  16E1  3001               	movlw	1
 12548  16E2  3196  2639         	fcall	_setBuz
 12549                           
 12550                           ;Dimmer_B1.c: 448: } else {
 12551  16E4  0008               	return
 12552  16E5                     l7348:	
 12553                           
 12554                           ;Dimmer_B1.c: 449: setDimmerLights_Adj(lights, 0);
 12555  16E5  0020               	movlb	0	; select bank0
 12556  16E6  01E2               	clrf	setDimmerLights_Adj@status
 12557  16E7  0866               	movf	setDimmerLights_Main@lights,w
 12558  16E8  318A  22A5         	fcall	_setDimmerLights_Adj
 12559  16EA  0008               	return
 12560  16EB                     __end_of_setDimmerLights_Main:	
 12561                           
 12562                           	psect	text73
 12563  0AA5                     __ptext73:	
 12564 ;; *************** function _setDimmerLights_Adj *****************
 12565 ;; Defined at:
 12566 ;;		line 728 in file "../src/Dimmer_B1.c"
 12567 ;; Parameters:    Size  Location     Type
 12568 ;;  lights          1    wreg     unsigned char 
 12569 ;;  status          1   66[BANK0 ] unsigned char 
 12570 ;; Auto vars:     Size  Location     Type
 12571 ;;  lights          1   69[BANK0 ] unsigned char 
 12572 ;; Return value:  Size  Location     Type
 12573 ;;		None               void
 12574 ;; Registers used:
 12575 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12576 ;; Tracked objects:
 12577 ;;		On entry : 0/0
 12578 ;;		On exit  : 0/0
 12579 ;;		Unchanged: 0/0
 12580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12581 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12582 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12583 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12584 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12585 ;;Total ram usage:        4 bytes
 12586 ;; Hardware stack levels used:    1
 12587 ;; Hardware stack levels required when called:    8
 12588 ;; This function calls:
 12589 ;;		_DimmerLightsPointSelect
 12590 ;;		_getMain_All_Error_Status
 12591 ;;		_setPercentValue
 12592 ;;		_setRF_DimmerLights
 12593 ;;		_setTxData
 12594 ;; This function is called by:
 12595 ;;		_setDimmerLights_Main
 12596 ;; This function uses a non-reentrant model
 12597 ;;
 12598                           
 12599                           
 12600                           ;psect for function _setDimmerLights_Adj
 12601  0AA5                     _setDimmerLights_Adj:	
 12602                           
 12603                           ;incstack = 0
 12604                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12605                           ;setDimmerLights_Adj@lights stored from wreg
 12606  0AA5  0020               	movlb	0	; select bank0
 12607  0AA6  00E5               	movwf	setDimmerLights_Adj@lights
 12608                           
 12609                           ;Dimmer_B1.c: 729: DimmerLightsPointSelect(lights);
 12610  0AA7  0865               	movf	setDimmerLights_Adj@lights,w
 12611  0AA8  319C  24F1  318A   	fcall	_DimmerLightsPointSelect
 12612                           
 12613                           ;Dimmer_B1.c: 730: if (status == 1) {
 12614  0AAB  0020               	movlb	0	; select bank0
 12615  0AAC  0862               	movf	setDimmerLights_Adj@status,w
 12616  0AAD  3A01               	xorlw	1
 12617  0AAE  1D03               	skipz
 12618  0AAF  2ABB               	goto	l6912
 12619                           
 12620                           ;Dimmer_B1.c: 731: DimmerLights->AdjFlag = 1;
 12621  0AB0  086F               	movf	_DimmerLights,w
 12622  0AB1  0086               	movwf	6
 12623  0AB2  3001               	movlw	1	; select bank2/3
 12624  0AB3  0087               	movwf	7
 12625  0AB4  1581               	bsf	1,3
 12626                           
 12627                           ;Dimmer_B1.c: 732: DimmerLights->Signal = 1;
 12628  0AB5  086F               	movf	_DimmerLights,w
 12629  0AB6  0086               	movwf	6
 12630  0AB7  3001               	movlw	1	; select bank2/3
 12631  0AB8  0087               	movwf	7
 12632  0AB9  1481               	bsf	1,1
 12633                           
 12634                           ;Dimmer_B1.c: 733: } else {
 12635  0ABA  0008               	return
 12636  0ABB                     l6912:	
 12637                           
 12638                           ;Dimmer_B1.c: 734: if (DimmerLights->AdjFlag == 1) {
 12639  0ABB  086F               	movf	_DimmerLights,w
 12640  0ABC  0086               	movwf	6
 12641  0ABD  3001               	movlw	1	; select bank2/3
 12642  0ABE  0087               	movwf	7
 12643  0ABF  1D81               	btfss	1,3
 12644  0AC0  0008               	return
 12645                           
 12646                           ;Dimmer_B1.c: 735: DimmerLights->Signal = 0;
 12647  0AC1  086F               	movf	_DimmerLights,w
 12648  0AC2  0086               	movwf	6
 12649  0AC3  3001               	movlw	1	; select bank2/3
 12650  0AC4  0087               	movwf	7
 12651  0AC5  1081               	bcf	1,1
 12652                           
 12653                           ;Dimmer_B1.c: 736: DimmerLights->AdjFlag = 0;
 12654  0AC6  086F               	movf	_DimmerLights,w
 12655  0AC7  0086               	movwf	6
 12656  0AC8  3001               	movlw	1	; select bank2/3
 12657  0AC9  0087               	movwf	7
 12658  0ACA  1181               	bcf	1,3
 12659                           
 12660                           ;Dimmer_B1.c: 737: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12661  0ACB  086F               	movf	_DimmerLights,w
 12662  0ACC  3E04               	addlw	4
 12663  0ACD  0086               	movwf	6
 12664  0ACE  3001               	movlw	1	; select bank2/3
 12665  0ACF  0087               	movwf	7
 12666  0AD0  0801               	movf	1,w
 12667  0AD1  00E3               	movwf	??_setDimmerLights_Adj
 12668  0AD2  086F               	movf	_DimmerLights,w
 12669  0AD3  3E05               	addlw	5
 12670  0AD4  0086               	movwf	6
 12671  0AD5  3001               	movlw	1	; select bank2/3
 12672  0AD6  0087               	movwf	7
 12673  0AD7  0863               	movf	??_setDimmerLights_Adj,w
 12674  0AD8  0081               	movwf	1
 12675                           
 12676                           ;Dimmer_B1.c: 738: product->Data[(20 + lights)]=setPercentValue(DimmerLights->DimmingVal
      +                          ue);
 12677  0AD9  086F               	movf	_DimmerLights,w
 12678  0ADA  3E04               	addlw	4
 12679  0ADB  0086               	movwf	6
 12680  0ADC  3001               	movlw	1	; select bank2/3
 12681  0ADD  0087               	movwf	7
 12682  0ADE  0801               	movf	1,w
 12683  0ADF  3189  21DB  318A   	fcall	_setPercentValue
 12684  0AE2  0020               	movlb	0	; select bank0
 12685  0AE3  00E3               	movwf	??_setDimmerLights_Adj
 12686  0AE4  0865               	movf	setDimmerLights_Adj@lights,w
 12687  0AE5  3E14               	addlw	20
 12688  0AE6  076E               	addwf	_product,w
 12689  0AE7  00E4               	movwf	??_setDimmerLights_Adj+1
 12690  0AE8  0864               	movf	??_setDimmerLights_Adj+1,w
 12691  0AE9  0086               	movwf	6
 12692  0AEA  3002               	movlw	2	; select bank4/5
 12693  0AEB  0087               	movwf	7
 12694  0AEC  0863               	movf	??_setDimmerLights_Adj,w
 12695  0AED  0081               	movwf	1
 12696                           
 12697                           ;Dimmer_B1.c: 748: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12698  0AEE  3000               	movlw	0
 12699  0AEF  3191  21E7  318A   	fcall	_getMain_All_Error_Status
 12700  0AF2  3A00               	xorlw	0
 12701  0AF3  3000               	movlw	0
 12702  0AF4  1903               	skipnz
 12703  0AF5  3001               	movlw	1
 12704  0AF6  0020               	movlb	0	; select bank0
 12705  0AF7  00E3               	movwf	??_setDimmerLights_Adj
 12706  0AF8  0DE3               	rlf	??_setDimmerLights_Adj,f
 12707  0AF9  0022               	movlb	2	; select bank2
 12708  0AFA  083E               	movf	_Dimmer^(0+256),w
 12709  0AFB  0020               	movlb	0	; select bank0
 12710  0AFC  0663               	xorwf	??_setDimmerLights_Adj,w
 12711  0AFD  39FD               	andlw	-3
 12712  0AFE  0663               	xorwf	??_setDimmerLights_Adj,w
 12713  0AFF  0022               	movlb	2	; select bank2
 12714  0B00  00BE               	movwf	_Dimmer^(0+256)
 12715                           
 12716                           ;Dimmer_B1.c: 751: setRF_DimmerLights(lights, 1);
 12717  0B01  0020               	movlb	0	; select bank0
 12718  0B02  01A0               	clrf	setRF_DimmerLights@on
 12719  0B03  0AA0               	incf	setRF_DimmerLights@on,f
 12720  0B04  0865               	movf	setDimmerLights_Adj@lights,w
 12721  0B05  3196  26EB  318A   	fcall	_setRF_DimmerLights
 12722                           
 12723                           ;Dimmer_B1.c: 752: setTxData();
 12724  0B08  3186  26F3         	fcall	_setTxData
 12725  0B0A  0008               	return
 12726  0B0B                     __end_of_setDimmerLights_Adj:	
 12727                           
 12728                           	psect	text74
 12729  0CE5                     __ptext74:	
 12730 ;; *************** function _setDimmerLights *****************
 12731 ;; Defined at:
 12732 ;;		line 623 in file "../src/Dimmer_B1.c"
 12733 ;; Parameters:    Size  Location     Type
 12734 ;;  lights          1    wreg     unsigned char 
 12735 ;;  status          1   66[BANK0 ] unsigned char 
 12736 ;; Auto vars:     Size  Location     Type
 12737 ;;  lights          1   69[BANK0 ] unsigned char 
 12738 ;; Return value:  Size  Location     Type
 12739 ;;		None               void
 12740 ;; Registers used:
 12741 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12742 ;; Tracked objects:
 12743 ;;		On entry : 0/0
 12744 ;;		On exit  : 0/0
 12745 ;;		Unchanged: 0/0
 12746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12747 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12748 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12749 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12750 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12751 ;;Total ram usage:        4 bytes
 12752 ;; Hardware stack levels used:    1
 12753 ;; Hardware stack levels required when called:    8
 12754 ;; This function calls:
 12755 ;;		_DimmerLightsPointSelect
 12756 ;;		_getMain_All_Error_Status
 12757 ;;		_setDimmerLights_Line
 12758 ;;		_setLED
 12759 ;;		_setPercentValue
 12760 ;;		_setRF_DimmerLights
 12761 ;;		_setTxData
 12762 ;; This function is called by:
 12763 ;;		_setDimmerLights_Main
 12764 ;; This function uses a non-reentrant model
 12765 ;;
 12766                           
 12767                           
 12768                           ;psect for function _setDimmerLights
 12769  0CE5                     _setDimmerLights:	
 12770                           
 12771                           ;incstack = 0
 12772                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12773                           ;setDimmerLights@lights stored from wreg
 12774  0CE5  0020               	movlb	0	; select bank0
 12775  0CE6  00E5               	movwf	setDimmerLights@lights
 12776                           
 12777                           ;Dimmer_B1.c: 624: DimmerLightsPointSelect(lights);
 12778  0CE7  0865               	movf	setDimmerLights@lights,w
 12779  0CE8  319C  24F1  318C   	fcall	_DimmerLightsPointSelect
 12780                           
 12781                           ;Dimmer_B1.c: 627: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12782  0CEB  3000               	movlw	0
 12783  0CEC  3191  21E7  318C   	fcall	_getMain_All_Error_Status
 12784  0CEF  3A00               	xorlw	0
 12785  0CF0  3000               	movlw	0
 12786  0CF1  1903               	skipnz
 12787  0CF2  3001               	movlw	1
 12788  0CF3  0020               	movlb	0	; select bank0
 12789  0CF4  00E3               	movwf	??_setDimmerLights
 12790  0CF5  0DE3               	rlf	??_setDimmerLights,f
 12791  0CF6  0022               	movlb	2	; select bank2
 12792  0CF7  083E               	movf	_Dimmer^(0+256),w
 12793  0CF8  0020               	movlb	0	; select bank0
 12794  0CF9  0663               	xorwf	??_setDimmerLights,w
 12795  0CFA  39FD               	andlw	-3
 12796  0CFB  0663               	xorwf	??_setDimmerLights,w
 12797  0CFC  0022               	movlb	2	; select bank2
 12798  0CFD  00BE               	movwf	_Dimmer^(0+256)
 12799                           
 12800                           ;Dimmer_B1.c: 631: if (status == 1) {
 12801  0CFE  0020               	movlb	0	; select bank0
 12802  0CFF  0862               	movf	setDimmerLights@status,w
 12803  0D00  3A01               	xorlw	1
 12804  0D01  1D03               	skipz
 12805  0D02  2D33               	goto	l6892
 12806                           
 12807                           ;Dimmer_B1.c: 632: DimmerLights->Loop = 1;
 12808  0D03  086F               	movf	_DimmerLights,w
 12809  0D04  3E09               	addlw	9
 12810  0D05  0086               	movwf	6
 12811  0D06  3001               	movlw	1	; select bank2/3
 12812  0D07  0087               	movwf	7
 12813  0D08  1481               	bsf	1,1
 12814                           
 12815                           ;Dimmer_B1.c: 633: setLED(lights, 0);
 12816  0D09  01A2               	clrf	setLED@command
 12817  0D0A  0865               	movf	setDimmerLights@lights,w
 12818  0D0B  3195  253D  318C   	fcall	_setLED
 12819                           
 12820                           ;Dimmer_B1.c: 635: setDimmerLights_Line(lights);
 12821  0D0E  0020               	movlb	0	; select bank0
 12822  0D0F  0865               	movf	setDimmerLights@lights,w
 12823  0D10  319D  25CB  318C   	fcall	_setDimmerLights_Line
 12824                           
 12825                           ;Dimmer_B1.c: 636: DimmerLights->StatusFlag = 1;
 12826  0D13  0020               	movlb	0	; select bank0
 12827  0D14  086F               	movf	_DimmerLights,w
 12828  0D15  0086               	movwf	6
 12829  0D16  3001               	movlw	1	; select bank2/3
 12830  0D17  0087               	movwf	7
 12831  0D18  1701               	bsf	1,6
 12832                           
 12833                           ;Dimmer_B1.c: 643: DimmerLights->DimmingValue = ((char)(80*0.8));
 12834  0D19  3040               	movlw	64
 12835  0D1A  00E3               	movwf	??_setDimmerLights
 12836  0D1B  086F               	movf	_DimmerLights,w
 12837  0D1C  3E04               	addlw	4
 12838  0D1D  0086               	movwf	6
 12839  0D1E  3001               	movlw	1	; select bank2/3
 12840  0D1F  0087               	movwf	7
 12841  0D20  0863               	movf	??_setDimmerLights,w
 12842  0D21  0081               	movwf	1
 12843                           
 12844                           ;Dimmer_B1.c: 644: product->Data[(20 + lights)]=setPercentValue(((char)(80*0.8)));
 12845  0D22  3040               	movlw	64
 12846  0D23  3189  21DB  318C   	fcall	_setPercentValue
 12847  0D26  0020               	movlb	0	; select bank0
 12848  0D27  00E3               	movwf	??_setDimmerLights
 12849  0D28  0865               	movf	setDimmerLights@lights,w
 12850  0D29  3E14               	addlw	20
 12851  0D2A  076E               	addwf	_product,w
 12852  0D2B  00E4               	movwf	??_setDimmerLights+1
 12853  0D2C  0864               	movf	??_setDimmerLights+1,w
 12854  0D2D  0086               	movwf	6
 12855  0D2E  3002               	movlw	2	; select bank4/5
 12856  0D2F  0087               	movwf	7
 12857  0D30  0863               	movf	??_setDimmerLights,w
 12858  0D31  0081               	movwf	1
 12859  0D32  2D5A               	goto	l6904
 12860  0D33                     l6892:	
 12861                           ;Dimmer_B1.c: 654: } else {
 12862                           
 12863                           ;Dimmer_B1.c: 652: DimmerLights->DimmingTimeValue = 7;
 12864                           
 12865                           
 12866                           ;Dimmer_B1.c: 655: DimmerLights->StatusFlag = 0;
 12867  0D33  086F               	movf	_DimmerLights,w
 12868  0D34  0086               	movwf	6
 12869  0D35  3001               	movlw	1	; select bank2/3
 12870  0D36  0087               	movwf	7
 12871  0D37  1301               	bcf	1,6
 12872                           
 12873                           ;Dimmer_B1.c: 656: DimmerLights->Loop = 0;
 12874  0D38  086F               	movf	_DimmerLights,w
 12875  0D39  3E09               	addlw	9
 12876  0D3A  0086               	movwf	6
 12877  0D3B  3001               	movlw	1	; select bank2/3
 12878  0D3C  0087               	movwf	7
 12879  0D3D  1081               	bcf	1,1
 12880                           
 12881                           ;Dimmer_B1.c: 657: setLED(lights, 1);
 12882  0D3E  01A2               	clrf	setLED@command
 12883  0D3F  0AA2               	incf	setLED@command,f
 12884  0D40  0865               	movf	setDimmerLights@lights,w
 12885  0D41  3195  253D  318C   	fcall	_setLED
 12886                           
 12887                           ;Dimmer_B1.c: 665: DimmerLights->MosfetClose = 1;
 12888  0D44  0020               	movlb	0	; select bank0
 12889  0D45  086F               	movf	_DimmerLights,w
 12890  0D46  3E08               	addlw	8
 12891  0D47  0086               	movwf	6
 12892  0D48  3001               	movlw	1	; select bank2/3
 12893  0D49  0087               	movwf	7
 12894  0D4A  1781               	bsf	1,7
 12895                           
 12896                           ;Dimmer_B1.c: 668: DimmerLights->AdjFlag = 0;
 12897  0D4B  086F               	movf	_DimmerLights,w
 12898  0D4C  0086               	movwf	6
 12899  0D4D  3001               	movlw	1	; select bank2/3
 12900  0D4E  0087               	movwf	7
 12901  0D4F  1181               	bcf	1,3
 12902                           
 12903                           ;Dimmer_B1.c: 669: DimmerLights->AdjStatus = 0;
 12904  0D50  086F               	movf	_DimmerLights,w
 12905  0D51  0086               	movwf	6
 12906  0D52  3001               	movlw	1	; select bank2/3
 12907  0D53  0087               	movwf	7
 12908  0D54  1201               	bcf	1,4
 12909                           
 12910                           ;Dimmer_B1.c: 670: DimmerLights->AdjRF = 0;
 12911  0D55  086F               	movf	_DimmerLights,w
 12912  0D56  0086               	movwf	6
 12913  0D57  3001               	movlw	1	; select bank2/3
 12914  0D58  0087               	movwf	7
 12915  0D59  1101               	bcf	1,2
 12916  0D5A                     l6904:	
 12917                           
 12918                           ;Dimmer_B1.c: 671: DimmerLights->DimmingTimeValue = 7;
 12919  0D5A  3007               	movlw	7
 12920  0D5B  00E3               	movwf	??_setDimmerLights
 12921  0D5C  086F               	movf	_DimmerLights,w
 12922  0D5D  3E02               	addlw	2
 12923  0D5E  0086               	movwf	6
 12924  0D5F  3001               	movlw	1	; select bank2/3
 12925  0D60  0087               	movwf	7
 12926  0D61  0863               	movf	??_setDimmerLights,w
 12927  0D62  0081               	movwf	1
 12928                           
 12929                           ;Dimmer_B1.c: 673: }
 12930                           ;Dimmer_B1.c: 674: setRF_DimmerLights(lights, status);
 12931  0D63  0862               	movf	setDimmerLights@status,w
 12932  0D64  00E3               	movwf	??_setDimmerLights
 12933  0D65  0863               	movf	??_setDimmerLights,w
 12934  0D66  00A0               	movwf	setRF_DimmerLights@on
 12935  0D67  0865               	movf	setDimmerLights@lights,w
 12936  0D68  3196  26EB  318C   	fcall	_setRF_DimmerLights
 12937                           
 12938                           ;Dimmer_B1.c: 675: setTxData();
 12939  0D6B  3186  26F3         	fcall	_setTxData
 12940  0D6D  0008               	return
 12941  0D6E                     __end_of_setDimmerLights:	
 12942                           
 12943                           	psect	text75
 12944  06F3                     __ptext75:	
 12945 ;; *************** function _setTxData *****************
 12946 ;; Defined at:
 12947 ;;		line 207 in file "../src/RF_Control_B1.c"
 12948 ;; Parameters:    Size  Location     Type
 12949 ;;		None
 12950 ;; Auto vars:     Size  Location     Type
 12951 ;;  i               1    0        unsigned char 
 12952 ;; Return value:  Size  Location     Type
 12953 ;;		None               void
 12954 ;; Registers used:
 12955 ;;		wreg, fsr1l, fsr1h
 12956 ;; Tracked objects:
 12957 ;;		On entry : 0/0
 12958 ;;		On exit  : 0/0
 12959 ;;		Unchanged: 0/0
 12960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12963 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12964 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12965 ;;Total ram usage:        1 bytes
 12966 ;; Hardware stack levels used:    1
 12967 ;; Hardware stack levels required when called:    5
 12968 ;; This function calls:
 12969 ;;		Nothing
 12970 ;; This function is called by:
 12971 ;;		_setDimmerLights
 12972 ;;		_setDimmerLights_Adj
 12973 ;;		_getRxData
 12974 ;;		_setControl_Lights_Table
 12975 ;;		_setRFSW_Control
 12976 ;;		_setRFSW_AdjControl
 12977 ;; This function uses a non-reentrant model
 12978 ;;
 12979                           
 12980                           
 12981                           ;psect for function _setTxData
 12982  06F3                     _setTxData:	
 12983                           
 12984                           ;RF_Control_B1.c: 208: char i;
 12985                           ;RF_Control_B1.c: 209: if (RF1.Enable == 1) {
 12986                           
 12987                           ;incstack = 0
 12988                           ; Regs used in _setTxData: [wregfsr1]
 12989  06F3  0021               	movlb	1	; select bank1
 12990  06F4  1C3B               	btfss	_RF1^(0+128),0
 12991  06F5  0008               	return
 12992                           
 12993                           ;RF_Control_B1.c: 211: if (RF1.TransceiveGO == 0) {
 12994  06F6  193B               	btfsc	_RF1^(0+128),2
 12995  06F7  0008               	return
 12996                           
 12997                           ;RF_Control_B1.c: 212: RF1.TransceiveGO = 1;
 12998  06F8  153B               	bsf	_RF1^(0+128),2
 12999                           
 13000                           ;RF_Control_B1.c: 213: RF1.RunTime = 20;
 13001  06F9  3014               	movlw	20
 13002  06FA  00C2               	movwf	(_RF1^(0+128)+7)
 13003  06FB  3000               	movlw	0
 13004  06FC  00C3               	movwf	(_RF1^(0+128)+8)
 13005                           
 13006                           ;RF_Control_B1.c: 222: RF_Data[0] = 0x63;
 13007  06FD  3063               	movlw	99
 13008  06FE  0020               	movlb	0	; select bank0
 13009  06FF  00A0               	movwf	??_setTxData
 13010  0700  0820               	movf	??_setTxData,w
 13011  0701  0022               	movlb	2	; select bank2
 13012  0702  00A0               	movwf	_RF_Data^(0+256)
 13013                           
 13014                           ;RF_Control_B1.c: 223: RF_Data[1] = 0x02;
 13015  0703  3002               	movlw	2
 13016  0704  0020               	movlb	0	; select bank0
 13017  0705  00A0               	movwf	??_setTxData
 13018  0706  0820               	movf	??_setTxData,w
 13019  0707  0022               	movlb	2	; select bank2
 13020  0708  00A1               	movwf	(_RF_Data^(0+256)+1)
 13021                           
 13022                           ;RF_Control_B1.c: 224: RF_Data[2] = product->Data[2];
 13023  0709  0020               	movlb	0	; select bank0
 13024  070A  086E               	movf	_product,w
 13025  070B  0086               	movwf	6
 13026  070C  3002               	movlw	2	; select bank4/5
 13027  070D  0087               	movwf	7
 13028  070E  3002               	movlw	2	; select bank4/5
 13029  070F  3F42               	moviw [2]fsr1
 13030  0710  0022               	movlb	2	; select bank2
 13031  0711  00A2               	movwf	(_RF_Data^(0+256)+2)
 13032                           
 13033                           ;RF_Control_B1.c: 225: RF_Data[3] = product->Data[3];
 13034  0712  0020               	movlb	0	; select bank0
 13035  0713  086E               	movf	_product,w
 13036  0714  0086               	movwf	6
 13037  0715  3002               	movlw	2	; select bank4/5
 13038  0716  0087               	movwf	7
 13039  0717  3002               	movlw	2	; select bank4/5
 13040  0718  3F43               	moviw [3]fsr1
 13041  0719  0022               	movlb	2	; select bank2
 13042  071A  00A3               	movwf	(_RF_Data^(0+256)+3)
 13043                           
 13044                           ;RF_Control_B1.c: 226: RF_Data[4] = product->Data[4];
 13045  071B  0020               	movlb	0	; select bank0
 13046  071C  086E               	movf	_product,w
 13047  071D  0086               	movwf	6
 13048  071E  3002               	movlw	2	; select bank4/5
 13049  071F  0087               	movwf	7
 13050  0720  3002               	movlw	2	; select bank4/5
 13051  0721  3F44               	moviw [4]fsr1
 13052  0722  0022               	movlb	2	; select bank2
 13053  0723  00A4               	movwf	(_RF_Data^(0+256)+4)
 13054                           
 13055                           ;RF_Control_B1.c: 227: RF_Data[5] = product->Data[5];
 13056  0724  0020               	movlb	0	; select bank0
 13057  0725  086E               	movf	_product,w
 13058  0726  0086               	movwf	6
 13059  0727  3002               	movlw	2	; select bank4/5
 13060  0728  0087               	movwf	7
 13061  0729  3002               	movlw	2	; select bank4/5
 13062  072A  3F45               	moviw [5]fsr1
 13063  072B  0022               	movlb	2	; select bank2
 13064  072C  00A5               	movwf	(_RF_Data^(0+256)+5)
 13065                           
 13066                           ;RF_Control_B1.c: 228: RF_Data[6] = product->Data[6];
 13067  072D  0020               	movlb	0	; select bank0
 13068  072E  086E               	movf	_product,w
 13069  072F  0086               	movwf	6
 13070  0730  3002               	movlw	2	; select bank4/5
 13071  0731  0087               	movwf	7
 13072  0732  3002               	movlw	2	; select bank4/5
 13073  0733  3F46               	moviw [6]fsr1
 13074  0734  0022               	movlb	2	; select bank2
 13075  0735  00A6               	movwf	(_RF_Data^(0+256)+6)
 13076                           
 13077                           ;RF_Control_B1.c: 229: RF_Data[7] = product->Data[7];
 13078  0736  0020               	movlb	0	; select bank0
 13079  0737  086E               	movf	_product,w
 13080  0738  0086               	movwf	6
 13081  0739  3002               	movlw	2	; select bank4/5
 13082  073A  0087               	movwf	7
 13083  073B  3002               	movlw	2	; select bank4/5
 13084  073C  3F47               	moviw [7]fsr1
 13085  073D  0022               	movlb	2	; select bank2
 13086  073E  00A7               	movwf	(_RF_Data^(0+256)+7)
 13087                           
 13088                           ;RF_Control_B1.c: 230: RF_Data[8] = product->Data[8];
 13089  073F  0020               	movlb	0	; select bank0
 13090  0740  086E               	movf	_product,w
 13091  0741  0086               	movwf	6
 13092  0742  3002               	movlw	2	; select bank4/5
 13093  0743  0087               	movwf	7
 13094  0744  3002               	movlw	2	; select bank4/5
 13095  0745  3F48               	moviw [8]fsr1
 13096  0746  0022               	movlb	2	; select bank2
 13097  0747  00A8               	movwf	(_RF_Data^(0+256)+8)
 13098                           
 13099                           ;RF_Control_B1.c: 231: RF_Data[9] = product->Data[9];
 13100  0748  0020               	movlb	0	; select bank0
 13101  0749  086E               	movf	_product,w
 13102  074A  0086               	movwf	6
 13103  074B  3002               	movlw	2	; select bank4/5
 13104  074C  0087               	movwf	7
 13105  074D  3002               	movlw	2	; select bank4/5
 13106  074E  3F49               	moviw [9]fsr1
 13107  074F  0022               	movlb	2	; select bank2
 13108  0750  00A9               	movwf	(_RF_Data^(0+256)+9)
 13109                           
 13110                           ;RF_Control_B1.c: 232: RF_Data[10] = product->Data[10];
 13111  0751  0020               	movlb	0	; select bank0
 13112  0752  086E               	movf	_product,w
 13113  0753  0086               	movwf	6
 13114  0754  3002               	movlw	2	; select bank4/5
 13115  0755  0087               	movwf	7
 13116  0756  3002               	movlw	2	; select bank4/5
 13117  0757  3F4A               	moviw [10]fsr1
 13118  0758  0022               	movlb	2	; select bank2
 13119  0759  00AA               	movwf	(_RF_Data^(0+256)+10)
 13120                           
 13121                           ;RF_Control_B1.c: 233: RF_Data[11] = product->Data[11];
 13122  075A  0020               	movlb	0	; select bank0
 13123  075B  086E               	movf	_product,w
 13124  075C  0086               	movwf	6
 13125  075D  3002               	movlw	2	; select bank4/5
 13126  075E  0087               	movwf	7
 13127  075F  3002               	movlw	2	; select bank4/5
 13128  0760  3F4B               	moviw [11]fsr1
 13129  0761  0022               	movlb	2	; select bank2
 13130  0762  00AB               	movwf	(_RF_Data^(0+256)+11)
 13131                           
 13132                           ;RF_Control_B1.c: 234: RF_Data[12] = product->Data[12];
 13133  0763  0020               	movlb	0	; select bank0
 13134  0764  086E               	movf	_product,w
 13135  0765  0086               	movwf	6
 13136  0766  3002               	movlw	2	; select bank4/5
 13137  0767  0087               	movwf	7
 13138  0768  3002               	movlw	2	; select bank4/5
 13139  0769  3F4C               	moviw [12]fsr1
 13140  076A  0022               	movlb	2	; select bank2
 13141  076B  00AC               	movwf	(_RF_Data^(0+256)+12)
 13142                           
 13143                           ;RF_Control_B1.c: 235: RF_Data[13] = product->Data[13];
 13144  076C  0020               	movlb	0	; select bank0
 13145  076D  086E               	movf	_product,w
 13146  076E  0086               	movwf	6
 13147  076F  3002               	movlw	2	; select bank4/5
 13148  0770  0087               	movwf	7
 13149  0771  3002               	movlw	2	; select bank4/5
 13150  0772  3F4D               	moviw [13]fsr1
 13151  0773  0022               	movlb	2	; select bank2
 13152  0774  00AD               	movwf	(_RF_Data^(0+256)+13)
 13153                           
 13154                           ;RF_Control_B1.c: 236: RF_Data[14] = product->Data[14];
 13155  0775  0020               	movlb	0	; select bank0
 13156  0776  086E               	movf	_product,w
 13157  0777  0086               	movwf	6
 13158  0778  3002               	movlw	2	; select bank4/5
 13159  0779  0087               	movwf	7
 13160  077A  3002               	movlw	2	; select bank4/5
 13161  077B  3F4E               	moviw [14]fsr1
 13162  077C  0022               	movlb	2	; select bank2
 13163  077D  00AE               	movwf	(_RF_Data^(0+256)+14)
 13164                           
 13165                           ;RF_Control_B1.c: 237: RF_Data[15] = product->Data[15];
 13166  077E  0020               	movlb	0	; select bank0
 13167  077F  086E               	movf	_product,w
 13168  0780  0086               	movwf	6
 13169  0781  3002               	movlw	2	; select bank4/5
 13170  0782  0087               	movwf	7
 13171  0783  3002               	movlw	2	; select bank4/5
 13172  0784  3F4F               	moviw [15]fsr1
 13173  0785  0022               	movlb	2	; select bank2
 13174  0786  00AF               	movwf	(_RF_Data^(0+256)+15)
 13175                           
 13176                           ;RF_Control_B1.c: 238: RF_Data[16] = product->Data[16];
 13177  0787  0020               	movlb	0	; select bank0
 13178  0788  086E               	movf	_product,w
 13179  0789  0086               	movwf	6
 13180  078A  3002               	movlw	2	; select bank4/5
 13181  078B  0087               	movwf	7
 13182  078C  3002               	movlw	2	; select bank4/5
 13183  078D  3F50               	moviw [16]fsr1
 13184  078E  0022               	movlb	2	; select bank2
 13185  078F  00B0               	movwf	(_RF_Data^(0+256)+16)
 13186                           
 13187                           ;RF_Control_B1.c: 239: RF_Data[17] = product->Data[17];
 13188  0790  0020               	movlb	0	; select bank0
 13189  0791  086E               	movf	_product,w
 13190  0792  0086               	movwf	6
 13191  0793  3002               	movlw	2	; select bank4/5
 13192  0794  0087               	movwf	7
 13193  0795  3002               	movlw	2	; select bank4/5
 13194  0796  3F51               	moviw [17]fsr1
 13195  0797  0022               	movlb	2	; select bank2
 13196  0798  00B1               	movwf	(_RF_Data^(0+256)+17)
 13197                           
 13198                           ;RF_Control_B1.c: 240: RF_Data[18] = product->Data[18];
 13199  0799  0020               	movlb	0	; select bank0
 13200  079A  086E               	movf	_product,w
 13201  079B  0086               	movwf	6
 13202  079C  3002               	movlw	2	; select bank4/5
 13203  079D  0087               	movwf	7
 13204  079E  3002               	movlw	2	; select bank4/5
 13205  079F  3F52               	moviw [18]fsr1
 13206  07A0  0022               	movlb	2	; select bank2
 13207  07A1  00B2               	movwf	(_RF_Data^(0+256)+18)
 13208                           
 13209                           ;RF_Control_B1.c: 241: RF_Data[19] = product->Data[19];
 13210  07A2  0020               	movlb	0	; select bank0
 13211  07A3  086E               	movf	_product,w
 13212  07A4  0086               	movwf	6
 13213  07A5  3002               	movlw	2	; select bank4/5
 13214  07A6  0087               	movwf	7
 13215  07A7  3002               	movlw	2	; select bank4/5
 13216  07A8  3F53               	moviw [19]fsr1
 13217  07A9  0022               	movlb	2	; select bank2
 13218  07AA  00B3               	movwf	(_RF_Data^(0+256)+19)
 13219                           
 13220                           ;RF_Control_B1.c: 242: RF_Data[20] = 210;
 13221  07AB  30D2               	movlw	210
 13222  07AC  0020               	movlb	0	; select bank0
 13223  07AD  00A0               	movwf	??_setTxData
 13224  07AE  0820               	movf	??_setTxData,w
 13225  07AF  0022               	movlb	2	; select bank2
 13226  07B0  00B4               	movwf	(_RF_Data^(0+256)+20)
 13227  07B1  0008               	return
 13228  07B2                     __end_of_setTxData:	
 13229                           
 13230                           	psect	text76
 13231  16EB                     __ptext76:	
 13232 ;; *************** function _setRF_DimmerLights *****************
 13233 ;; Defined at:
 13234 ;;		line 480 in file "../src/RF_Control_B1.c"
 13235 ;; Parameters:    Size  Location     Type
 13236 ;;  lights          1    wreg     unsigned char 
 13237 ;;  on              1    0[BANK0 ] unsigned char 
 13238 ;; Auto vars:     Size  Location     Type
 13239 ;;  lights          1    4[BANK0 ] unsigned char 
 13240 ;;  status          1    3[BANK0 ] unsigned char 
 13241 ;; Return value:  Size  Location     Type
 13242 ;;		None               void
 13243 ;; Registers used:
 13244 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13245 ;; Tracked objects:
 13246 ;;		On entry : 0/0
 13247 ;;		On exit  : 0/0
 13248 ;;		Unchanged: 0/0
 13249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13250 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13251 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13252 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13253 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13254 ;;Total ram usage:        5 bytes
 13255 ;; Hardware stack levels used:    1
 13256 ;; Hardware stack levels required when called:    5
 13257 ;; This function calls:
 13258 ;;		Nothing
 13259 ;; This function is called by:
 13260 ;;		_setDimmerLights
 13261 ;;		_setDimmerLights_Adj
 13262 ;;		_setRFSW_Control
 13263 ;; This function uses a non-reentrant model
 13264 ;;
 13265                           
 13266                           
 13267                           ;psect for function _setRF_DimmerLights
 13268  16EB                     _setRF_DimmerLights:	
 13269                           
 13270                           ;incstack = 0
 13271                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 13272                           ;setRF_DimmerLights@lights stored from wreg
 13273  16EB  0020               	movlb	0	; select bank0
 13274  16EC  00A4               	movwf	setRF_DimmerLights@lights
 13275                           
 13276                           ;RF_Control_B1.c: 481: char status = 1;
 13277  16ED  01A3               	clrf	setRF_DimmerLights@status
 13278  16EE  0AA3               	incf	setRF_DimmerLights@status,f
 13279                           
 13280                           ;RF_Control_B1.c: 482: status <<= (lights - 1);
 13281  16EF  0824               	movf	setRF_DimmerLights@lights,w
 13282  16F0  3EFF               	addlw	-1
 13283  16F1  0A89               	incf	9,f
 13284  16F2  2EF5               	goto	u5250
 13285  16F3                     u5255:	
 13286  16F3  1003               	clrc
 13287  16F4  0DA3               	rlf	setRF_DimmerLights@status,f
 13288  16F5                     u5250:	
 13289  16F5  3EFF               	addlw	-1
 13290  16F6  1D03               	skipz
 13291  16F7  2EF3               	goto	u5255
 13292                           
 13293                           ;RF_Control_B1.c: 483: product->Data[11]=lights;
 13294  16F8  0824               	movf	setRF_DimmerLights@lights,w
 13295  16F9  00A1               	movwf	??_setRF_DimmerLights
 13296  16FA  086E               	movf	_product,w
 13297  16FB  3E0B               	addlw	11
 13298  16FC  0086               	movwf	6
 13299  16FD  3002               	movlw	2	; select bank4/5
 13300  16FE  0087               	movwf	7
 13301  16FF  0821               	movf	??_setRF_DimmerLights,w
 13302  1700  0081               	movwf	1
 13303                           
 13304                           ;RF_Control_B1.c: 491: product->Data[9]=product->Data[20 + lights];
 13305  1701  0824               	movf	setRF_DimmerLights@lights,w
 13306  1702  3E14               	addlw	20
 13307  1703  076E               	addwf	_product,w
 13308  1704  00A1               	movwf	??_setRF_DimmerLights
 13309  1705  0821               	movf	??_setRF_DimmerLights,w
 13310  1706  0086               	movwf	6
 13311  1707  3002               	movlw	2	; select bank4/5
 13312  1708  0087               	movwf	7
 13313  1709  0801               	movf	1,w
 13314  170A  00A2               	movwf	??_setRF_DimmerLights+1
 13315  170B  086E               	movf	_product,w
 13316  170C  3E09               	addlw	9
 13317  170D  0086               	movwf	6
 13318  170E  3002               	movlw	2	; select bank4/5
 13319  170F  0087               	movwf	7
 13320  1710  0822               	movf	??_setRF_DimmerLights+1,w
 13321  1711  0081               	movwf	1
 13322                           
 13323                           ;RF_Control_B1.c: 492: product->Data[17]=product->Data[26 + lights];
 13324  1712  0824               	movf	setRF_DimmerLights@lights,w
 13325  1713  3E1A               	addlw	26
 13326  1714  076E               	addwf	_product,w
 13327  1715  00A1               	movwf	??_setRF_DimmerLights
 13328  1716  0821               	movf	??_setRF_DimmerLights,w
 13329  1717  0086               	movwf	6
 13330  1718  3002               	movlw	2	; select bank4/5
 13331  1719  0087               	movwf	7
 13332  171A  0801               	movf	1,w
 13333  171B  00A2               	movwf	??_setRF_DimmerLights+1
 13334  171C  086E               	movf	_product,w
 13335  171D  3E11               	addlw	17
 13336  171E  0086               	movwf	6
 13337  171F  3002               	movlw	2	; select bank4/5
 13338  1720  0087               	movwf	7
 13339  1721  0822               	movf	??_setRF_DimmerLights+1,w
 13340  1722  0081               	movwf	1
 13341                           
 13342                           ;RF_Control_B1.c: 493: if (on == 1) {
 13343  1723  0820               	movf	setRF_DimmerLights@on,w
 13344  1724  3A01               	xorlw	1
 13345  1725  1D03               	skipz
 13346  1726  2F37               	goto	l6330
 13347                           
 13348                           ;RF_Control_B1.c: 494: product->Data[15]=(product->Data[15] | status);
 13349  1727  086E               	movf	_product,w
 13350  1728  3E0F               	addlw	15
 13351  1729  0086               	movwf	6
 13352  172A  3002               	movlw	2	; select bank4/5
 13353  172B  0087               	movwf	7
 13354  172C  0801               	movf	1,w
 13355  172D  0423               	iorwf	setRF_DimmerLights@status,w
 13356  172E  00A1               	movwf	??_setRF_DimmerLights
 13357  172F  086E               	movf	_product,w
 13358  1730  3E0F               	addlw	15
 13359  1731  0086               	movwf	6
 13360  1732  3002               	movlw	2	; select bank4/5
 13361  1733  0087               	movwf	7
 13362  1734  0821               	movf	??_setRF_DimmerLights,w
 13363  1735  0081               	movwf	1
 13364                           
 13365                           ;RF_Control_B1.c: 495: } else {
 13366  1736  0008               	return
 13367  1737                     l6330:	
 13368                           
 13369                           ;RF_Control_B1.c: 496: product->Data[15]=(product->Data[15]&(~status));
 13370  1737  086E               	movf	_product,w
 13371  1738  3E0F               	addlw	15
 13372  1739  0086               	movwf	6
 13373  173A  3002               	movlw	2	; select bank4/5
 13374  173B  0087               	movwf	7
 13375  173C  0923               	comf	setRF_DimmerLights@status,w
 13376  173D  0501               	andwf	1,w
 13377  173E  00A1               	movwf	??_setRF_DimmerLights
 13378  173F  086E               	movf	_product,w
 13379  1740  3E0F               	addlw	15
 13380  1741  0086               	movwf	6
 13381  1742  3002               	movlw	2	; select bank4/5
 13382  1743  0087               	movwf	7
 13383  1744  0821               	movf	??_setRF_DimmerLights,w
 13384  1745  0081               	movwf	1
 13385  1746  0008               	return
 13386  1747                     __end_of_setRF_DimmerLights:	
 13387                           
 13388                           	psect	text77
 13389  09DB                     __ptext77:	
 13390 ;; *************** function _setPercentValue *****************
 13391 ;; Defined at:
 13392 ;;		line 886 in file "../src/Dimmer_B1.c"
 13393 ;; Parameters:    Size  Location     Type
 13394 ;;  value           1    wreg     unsigned char 
 13395 ;; Auto vars:     Size  Location     Type
 13396 ;;  value           1   62[BANK0 ] unsigned char 
 13397 ;;  i               3   63[BANK0 ] float 
 13398 ;; Return value:  Size  Location     Type
 13399 ;;                  1    wreg      unsigned char 
 13400 ;; Registers used:
 13401 ;;		wreg, status,2, status,0, pclath, cstack
 13402 ;; Tracked objects:
 13403 ;;		On entry : 0/0
 13404 ;;		On exit  : 0/0
 13405 ;;		Unchanged: 0/0
 13406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13408 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13409 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13410 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13411 ;;Total ram usage:        6 bytes
 13412 ;; Hardware stack levels used:    1
 13413 ;; Hardware stack levels required when called:    7
 13414 ;; This function calls:
 13415 ;;		___awtoft
 13416 ;;		___ftadd
 13417 ;;		___ftdiv
 13418 ;;		___ftneg
 13419 ;;		___fttol
 13420 ;; This function is called by:
 13421 ;;		_setDimmerLights
 13422 ;;		_setDimmerLights_Adj
 13423 ;;		_Flash_Memory_Initialization
 13424 ;; This function uses a non-reentrant model
 13425 ;;
 13426                           
 13427                           
 13428                           ;psect for function _setPercentValue
 13429  09DB                     _setPercentValue:	
 13430                           
 13431                           ;incstack = 0
 13432                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13433                           ;setPercentValue@value stored from wreg
 13434  09DB  0020               	movlb	0	; select bank0
 13435  09DC  00DE               	movwf	setPercentValue@value
 13436                           
 13437                           ;Dimmer_B1.c: 894: float i = ((char)(80*0.8)) - ((char)(15*0.8));
 13438  09DD  3000               	movlw	0
 13439  09DE  00DF               	movwf	setPercentValue@i
 13440  09DF  3050               	movlw	80
 13441  09E0  00E0               	movwf	setPercentValue@i+1
 13442  09E1  3042               	movlw	66
 13443  09E2  00E1               	movwf	setPercentValue@i+2
 13444                           
 13445                           ;Dimmer_B1.c: 895: i /= 100;
 13446  09E3  3000               	movlw	0
 13447  09E4  00AE               	movwf	___ftdiv@f2
 13448  09E5  30C8               	movlw	200
 13449  09E6  00AF               	movwf	___ftdiv@f2+1
 13450  09E7  3042               	movlw	66
 13451  09E8  00B0               	movwf	___ftdiv@f2+2
 13452  09E9  085F               	movf	setPercentValue@i,w
 13453  09EA  00B1               	movwf	___ftdiv@f1
 13454  09EB  0860               	movf	setPercentValue@i+1,w
 13455  09EC  00B2               	movwf	___ftdiv@f1+1
 13456  09ED  0861               	movf	setPercentValue@i+2,w
 13457  09EE  00B3               	movwf	___ftdiv@f1+2
 13458  09EF  318E  26A3  3189   	fcall	___ftdiv
 13459  09F2  0020               	movlb	0	; select bank0
 13460  09F3  082E               	movf	?___ftdiv,w
 13461  09F4  00DF               	movwf	setPercentValue@i
 13462  09F5  082F               	movf	?___ftdiv+1,w
 13463  09F6  00E0               	movwf	setPercentValue@i+1
 13464  09F7  0830               	movf	?___ftdiv+2,w
 13465  09F8  00E1               	movwf	setPercentValue@i+2
 13466                           
 13467                           ;Dimmer_B1.c: 897: return (char) (100 - ((((char)(80*0.8)) - value) / i));
 13468  09F9  085E               	movf	setPercentValue@value,w
 13469  09FA  00DC               	movwf	??_setPercentValue
 13470  09FB  01DD               	clrf	??_setPercentValue+1
 13471  09FC  09DC               	comf	??_setPercentValue,f
 13472  09FD  09DD               	comf	??_setPercentValue+1,f
 13473  09FE  0ADC               	incf	??_setPercentValue,f
 13474  09FF  1903               	skipnz
 13475  0A00  0ADD               	incf	??_setPercentValue+1,f
 13476  0A01  085C               	movf	??_setPercentValue,w
 13477  0A02  3E40               	addlw	64
 13478  0A03  00A8               	movwf	___awtoft@c
 13479  0A04  3000               	movlw	0
 13480  0A05  3D5D               	addwfc	??_setPercentValue+1,w
 13481  0A06  00A9               	movwf	___awtoft@c+1
 13482  0A07  319F  2799  3189   	fcall	___awtoft
 13483  0A0A  0020               	movlb	0	; select bank0
 13484  0A0B  0828               	movf	?___awtoft,w
 13485  0A0C  00B1               	movwf	___ftdiv@f1
 13486  0A0D  0829               	movf	?___awtoft+1,w
 13487  0A0E  00B2               	movwf	___ftdiv@f1+1
 13488  0A0F  082A               	movf	?___awtoft+2,w
 13489  0A10  00B3               	movwf	___ftdiv@f1+2
 13490  0A11  085F               	movf	setPercentValue@i,w
 13491  0A12  00AE               	movwf	___ftdiv@f2
 13492  0A13  0860               	movf	setPercentValue@i+1,w
 13493  0A14  00AF               	movwf	___ftdiv@f2+1
 13494  0A15  0861               	movf	setPercentValue@i+2,w
 13495  0A16  00B0               	movwf	___ftdiv@f2+2
 13496  0A17  318E  26A3  3189   	fcall	___ftdiv
 13497  0A1A  0020               	movlb	0	; select bank0
 13498  0A1B  082E               	movf	?___ftdiv,w
 13499  0A1C  00BE               	movwf	___ftneg@f1
 13500  0A1D  082F               	movf	?___ftdiv+1,w
 13501  0A1E  00BF               	movwf	___ftneg@f1+1
 13502  0A1F  0830               	movf	?___ftdiv+2,w
 13503  0A20  00C0               	movwf	___ftneg@f1+2
 13504  0A21  319B  2390  3189   	fcall	___ftneg
 13505  0A24  0020               	movlb	0	; select bank0
 13506  0A25  083E               	movf	?___ftneg,w
 13507  0A26  00C4               	movwf	___ftadd@f2
 13508  0A27  083F               	movf	?___ftneg+1,w
 13509  0A28  00C5               	movwf	___ftadd@f2+1
 13510  0A29  0840               	movf	?___ftneg+2,w
 13511  0A2A  00C6               	movwf	___ftadd@f2+2
 13512  0A2B  3000               	movlw	0
 13513  0A2C  00C1               	movwf	___ftadd@f1
 13514  0A2D  30C8               	movlw	200
 13515  0A2E  00C2               	movwf	___ftadd@f1+1
 13516  0A2F  3042               	movlw	66
 13517  0A30  00C3               	movwf	___ftadd@f1+2
 13518  0A31  3184  243A  3189   	fcall	___ftadd
 13519  0A34  0020               	movlb	0	; select bank0
 13520  0A35  0841               	movf	?___ftadd,w
 13521  0A36  00CE               	movwf	___fttol@f1
 13522  0A37  0842               	movf	?___ftadd+1,w
 13523  0A38  00CF               	movwf	___fttol@f1+1
 13524  0A39  0843               	movf	?___ftadd+2,w
 13525  0A3A  00D0               	movwf	___fttol@f1+2
 13526  0A3B  318C  245E         	fcall	___fttol
 13527  0A3D  0020               	movlb	0	; select bank0
 13528  0A3E  084E               	movf	?___fttol,w
 13529  0A3F  0008               	return
 13530  0A40                     __end_of_setPercentValue:	
 13531                           
 13532                           	psect	text78
 13533  0C5E                     __ptext78:	
 13534 ;; *************** function ___fttol *****************
 13535 ;; Defined at:
 13536 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13537 ;; Parameters:    Size  Location     Type
 13538 ;;  f1              3   46[BANK0 ] float 
 13539 ;; Auto vars:     Size  Location     Type
 13540 ;;  lval            4   55[BANK0 ] unsigned long 
 13541 ;;  exp1            1   59[BANK0 ] unsigned char 
 13542 ;;  sign1           1   54[BANK0 ] unsigned char 
 13543 ;; Return value:  Size  Location     Type
 13544 ;;                  4   46[BANK0 ] long 
 13545 ;; Registers used:
 13546 ;;		wreg, status,2, status,0
 13547 ;; Tracked objects:
 13548 ;;		On entry : 0/0
 13549 ;;		On exit  : 0/0
 13550 ;;		Unchanged: 0/0
 13551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13552 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13553 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13554 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13555 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13556 ;;Total ram usage:       14 bytes
 13557 ;; Hardware stack levels used:    1
 13558 ;; Hardware stack levels required when called:    5
 13559 ;; This function calls:
 13560 ;;		Nothing
 13561 ;; This function is called by:
 13562 ;;		_getPercentValue
 13563 ;;		_setPercentValue
 13564 ;; This function uses a non-reentrant model
 13565 ;;
 13566                           
 13567                           
 13568                           ;psect for function ___fttol
 13569  0C5E                     ___fttol:	
 13570                           
 13571                           ;incstack = 0
 13572                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13573  0C5E  0020               	movlb	0	; select bank0
 13574  0C5F  084E               	movf	___fttol@f1,w
 13575  0C60  00D2               	movwf	??___fttol
 13576  0C61  084F               	movf	___fttol@f1+1,w
 13577  0C62  00D3               	movwf	??___fttol+1
 13578  0C63  0850               	movf	___fttol@f1+2,w
 13579  0C64  00D4               	movwf	??___fttol+2
 13580  0C65  1003               	clrc
 13581  0C66  0D53               	rlf	??___fttol+1,w
 13582  0C67  0D54               	rlf	??___fttol+2,w
 13583  0C68  00D5               	movwf	??___fttol+3
 13584  0C69  0855               	movf	??___fttol+3,w
 13585  0C6A  00DB               	movwf	___fttol@exp1
 13586  0C6B  08DB               	movf	___fttol@exp1,f
 13587  0C6C  1D03               	skipz
 13588  0C6D  2C77               	goto	l6056
 13589  0C6E  3000               	movlw	0
 13590  0C6F  00D1               	movwf	?___fttol+3
 13591  0C70  3000               	movlw	0
 13592  0C71  00D0               	movwf	?___fttol+2
 13593  0C72  3000               	movlw	0
 13594  0C73  00CF               	movwf	?___fttol+1
 13595  0C74  3000               	movlw	0
 13596  0C75  00CE               	movwf	?___fttol
 13597  0C76  0008               	return
 13598  0C77                     l6056:	
 13599  0C77  084E               	movf	___fttol@f1,w
 13600  0C78  00D2               	movwf	??___fttol
 13601  0C79  084F               	movf	___fttol@f1+1,w
 13602  0C7A  00D3               	movwf	??___fttol+1
 13603  0C7B  0850               	movf	___fttol@f1+2,w
 13604  0C7C  00D4               	movwf	??___fttol+2
 13605  0C7D  3017               	movlw	23
 13606  0C7E                     u4845:	
 13607  0C7E  36D4               	lsrf	??___fttol+2,f
 13608  0C7F  0CD3               	rrf	??___fttol+1,f
 13609  0C80  0CD2               	rrf	??___fttol,f
 13610  0C81  0B89               	decfsz	9,f
 13611  0C82  2C7E               	goto	u4845
 13612  0C83  0852               	movf	??___fttol,w
 13613  0C84  00D5               	movwf	??___fttol+3
 13614  0C85  0855               	movf	??___fttol+3,w
 13615  0C86  00D6               	movwf	___fttol@sign1
 13616  0C87  17CF               	bsf	___fttol@f1+1,7
 13617  0C88  30FF               	movlw	255
 13618  0C89  05CE               	andwf	___fttol@f1,f
 13619  0C8A  30FF               	movlw	255
 13620  0C8B  05CF               	andwf	___fttol@f1+1,f
 13621  0C8C  3000               	movlw	0
 13622  0C8D  05D0               	andwf	___fttol@f1+2,f
 13623  0C8E  084E               	movf	___fttol@f1,w
 13624  0C8F  00D7               	movwf	___fttol@lval
 13625  0C90  084F               	movf	___fttol@f1+1,w
 13626  0C91  00D8               	movwf	___fttol@lval+1
 13627  0C92  0850               	movf	___fttol@f1+2,w
 13628  0C93  00D9               	movwf	___fttol@lval+2
 13629  0C94  01DA               	clrf	___fttol@lval+3
 13630  0C95  308E               	movlw	142
 13631  0C96  02DB               	subwf	___fttol@exp1,f
 13632  0C97  1FDB               	btfss	___fttol@exp1,7
 13633  0C98  2CB5               	goto	l6076
 13634  0C99  085B               	movf	___fttol@exp1,w
 13635  0C9A  3A80               	xorlw	128
 13636  0C9B  3E8F               	addlw	143
 13637  0C9C  1803               	skipnc
 13638  0C9D  2CA7               	goto	l6074
 13639  0C9E  3000               	movlw	0
 13640  0C9F  00D1               	movwf	?___fttol+3
 13641  0CA0  3000               	movlw	0
 13642  0CA1  00D0               	movwf	?___fttol+2
 13643  0CA2  3000               	movlw	0
 13644  0CA3  00CF               	movwf	?___fttol+1
 13645  0CA4  3000               	movlw	0
 13646  0CA5  00CE               	movwf	?___fttol
 13647  0CA6  0008               	return
 13648  0CA7                     l6074:	
 13649  0CA7  3001               	movlw	1
 13650  0CA8                     u4875:	
 13651  0CA8  36DA               	lsrf	___fttol@lval+3,f
 13652  0CA9  0CD9               	rrf	___fttol@lval+2,f
 13653  0CAA  0CD8               	rrf	___fttol@lval+1,f
 13654  0CAB  0CD7               	rrf	___fttol@lval,f
 13655  0CAC  0B89               	decfsz	9,f
 13656  0CAD  2CA8               	goto	u4875
 13657  0CAE  3001               	movlw	1
 13658  0CAF  00D2               	movwf	??___fttol
 13659  0CB0  0852               	movf	??___fttol,w
 13660  0CB1  07DB               	addwf	___fttol@exp1,f
 13661  0CB2  1903               	btfsc	3,2
 13662  0CB3  2CCE               	goto	l6086
 13663  0CB4  2CA7               	goto	l6074
 13664  0CB5                     l6076:	
 13665  0CB5  3018               	movlw	24
 13666  0CB6  025B               	subwf	___fttol@exp1,w
 13667  0CB7  1C03               	skipc
 13668  0CB8  2CCB               	goto	l6084
 13669  0CB9  3000               	movlw	0
 13670  0CBA  00D1               	movwf	?___fttol+3
 13671  0CBB  3000               	movlw	0
 13672  0CBC  00D0               	movwf	?___fttol+2
 13673  0CBD  3000               	movlw	0
 13674  0CBE  00CF               	movwf	?___fttol+1
 13675  0CBF  3000               	movlw	0
 13676  0CC0  00CE               	movwf	?___fttol
 13677  0CC1  0008               	return
 13678  0CC2                     l6082:	
 13679  0CC2  3001               	movlw	1
 13680  0CC3                     u4905:	
 13681  0CC3  35D7               	lslf	___fttol@lval,f
 13682  0CC4  0DD8               	rlf	___fttol@lval+1,f
 13683  0CC5  0DD9               	rlf	___fttol@lval+2,f
 13684  0CC6  0DDA               	rlf	___fttol@lval+3,f
 13685  0CC7  0B89               	decfsz	9,f
 13686  0CC8  2CC3               	goto	u4905
 13687  0CC9  3001               	movlw	1
 13688  0CCA  02DB               	subwf	___fttol@exp1,f
 13689  0CCB                     l6084:	
 13690  0CCB  08DB               	movf	___fttol@exp1,f
 13691  0CCC  1D03               	skipz
 13692  0CCD  2CC2               	goto	l6082
 13693  0CCE                     l6086:	
 13694  0CCE  0856               	movf	___fttol@sign1,w
 13695  0CCF  1903               	btfsc	3,2
 13696  0CD0  2CDC               	goto	l6090
 13697  0CD1  09D7               	comf	___fttol@lval,f
 13698  0CD2  09D8               	comf	___fttol@lval+1,f
 13699  0CD3  09D9               	comf	___fttol@lval+2,f
 13700  0CD4  09DA               	comf	___fttol@lval+3,f
 13701  0CD5  0AD7               	incf	___fttol@lval,f
 13702  0CD6  1903               	skipnz
 13703  0CD7  0AD8               	incf	___fttol@lval+1,f
 13704  0CD8  1903               	skipnz
 13705  0CD9  0AD9               	incf	___fttol@lval+2,f
 13706  0CDA  1903               	skipnz
 13707  0CDB  0ADA               	incf	___fttol@lval+3,f
 13708  0CDC                     l6090:	
 13709  0CDC  085A               	movf	___fttol@lval+3,w
 13710  0CDD  00D1               	movwf	?___fttol+3
 13711  0CDE  0859               	movf	___fttol@lval+2,w
 13712  0CDF  00D0               	movwf	?___fttol+2
 13713  0CE0  0858               	movf	___fttol@lval+1,w
 13714  0CE1  00CF               	movwf	?___fttol+1
 13715  0CE2  0857               	movf	___fttol@lval,w
 13716  0CE3  00CE               	movwf	?___fttol
 13717  0CE4  0008               	return
 13718  0CE5                     __end_of___fttol:	
 13719                           
 13720                           	psect	text79
 13721  1B90                     __ptext79:	
 13722 ;; *************** function ___ftneg *****************
 13723 ;; Defined at:
 13724 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13725 ;; Parameters:    Size  Location     Type
 13726 ;;  f1              3   30[BANK0 ] float 
 13727 ;; Auto vars:     Size  Location     Type
 13728 ;;		None
 13729 ;; Return value:  Size  Location     Type
 13730 ;;                  3   30[BANK0 ] float 
 13731 ;; Registers used:
 13732 ;;		wreg
 13733 ;; Tracked objects:
 13734 ;;		On entry : 0/0
 13735 ;;		On exit  : 0/0
 13736 ;;		Unchanged: 0/0
 13737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13738 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13741 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13742 ;;Total ram usage:        3 bytes
 13743 ;; Hardware stack levels used:    1
 13744 ;; Hardware stack levels required when called:    5
 13745 ;; This function calls:
 13746 ;;		Nothing
 13747 ;; This function is called by:
 13748 ;;		_getPercentValue
 13749 ;;		_setPercentValue
 13750 ;; This function uses a non-reentrant model
 13751 ;;
 13752                           
 13753                           
 13754                           ;psect for function ___ftneg
 13755  1B90                     ___ftneg:	
 13756                           
 13757                           ;incstack = 0
 13758                           ; Regs used in ___ftneg: [wreg]
 13759  1B90  0020               	movlb	0	; select bank0
 13760  1B91  0840               	movf	___ftneg@f1+2,w
 13761  1B92  043F               	iorwf	___ftneg@f1+1,w
 13762  1B93  043E               	iorwf	___ftneg@f1,w
 13763  1B94  1903               	skipnz
 13764  1B95  0008               	return
 13765  1B96  3080               	movlw	128
 13766  1B97  06C0               	xorwf	___ftneg@f1+2,f
 13767  1B98  0008               	return
 13768  1B99                     __end_of___ftneg:	
 13769                           
 13770                           	psect	text80
 13771  0EA3                     __ptext80:	
 13772 ;; *************** function ___ftdiv *****************
 13773 ;; Defined at:
 13774 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13775 ;; Parameters:    Size  Location     Type
 13776 ;;  f2              3   14[BANK0 ] float 
 13777 ;;  f1              3   17[BANK0 ] float 
 13778 ;; Auto vars:     Size  Location     Type
 13779 ;;  f3              3   25[BANK0 ] float 
 13780 ;;  sign            1   29[BANK0 ] unsigned char 
 13781 ;;  exp             1   28[BANK0 ] unsigned char 
 13782 ;;  cntr            1   24[BANK0 ] unsigned char 
 13783 ;; Return value:  Size  Location     Type
 13784 ;;                  3   14[BANK0 ] float 
 13785 ;; Registers used:
 13786 ;;		wreg, status,2, status,0, pclath, cstack
 13787 ;; Tracked objects:
 13788 ;;		On entry : 0/0
 13789 ;;		On exit  : 0/0
 13790 ;;		Unchanged: 0/0
 13791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13792 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13793 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13794 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13795 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13796 ;;Total ram usage:       16 bytes
 13797 ;; Hardware stack levels used:    1
 13798 ;; Hardware stack levels required when called:    6
 13799 ;; This function calls:
 13800 ;;		___ftpack
 13801 ;; This function is called by:
 13802 ;;		_getPercentValue
 13803 ;;		_setPercentValue
 13804 ;; This function uses a non-reentrant model
 13805 ;;
 13806                           
 13807                           
 13808                           ;psect for function ___ftdiv
 13809  0EA3                     ___ftdiv:	
 13810                           
 13811                           ;incstack = 0
 13812                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13813  0EA3  0020               	movlb	0	; select bank0
 13814  0EA4  0831               	movf	___ftdiv@f1,w
 13815  0EA5  00B4               	movwf	??___ftdiv
 13816  0EA6  0832               	movf	___ftdiv@f1+1,w
 13817  0EA7  00B5               	movwf	??___ftdiv+1
 13818  0EA8  0833               	movf	___ftdiv@f1+2,w
 13819  0EA9  00B6               	movwf	??___ftdiv+2
 13820  0EAA  1003               	clrc
 13821  0EAB  0D35               	rlf	??___ftdiv+1,w
 13822  0EAC  0D36               	rlf	??___ftdiv+2,w
 13823  0EAD  00B7               	movwf	??___ftdiv+3
 13824  0EAE  0837               	movf	??___ftdiv+3,w
 13825  0EAF  00BC               	movwf	___ftdiv@exp
 13826  0EB0  08BC               	movf	___ftdiv@exp,f
 13827  0EB1  1D03               	skipz
 13828  0EB2  2EBA               	goto	l5956
 13829  0EB3  3000               	movlw	0
 13830  0EB4  00AE               	movwf	?___ftdiv
 13831  0EB5  3000               	movlw	0
 13832  0EB6  00AF               	movwf	?___ftdiv+1
 13833  0EB7  3000               	movlw	0
 13834  0EB8  00B0               	movwf	?___ftdiv+2
 13835  0EB9  0008               	return
 13836  0EBA                     l5956:	
 13837  0EBA  082E               	movf	___ftdiv@f2,w
 13838  0EBB  00B4               	movwf	??___ftdiv
 13839  0EBC  082F               	movf	___ftdiv@f2+1,w
 13840  0EBD  00B5               	movwf	??___ftdiv+1
 13841  0EBE  0830               	movf	___ftdiv@f2+2,w
 13842  0EBF  00B6               	movwf	??___ftdiv+2
 13843  0EC0  1003               	clrc
 13844  0EC1  0D35               	rlf	??___ftdiv+1,w
 13845  0EC2  0D36               	rlf	??___ftdiv+2,w
 13846  0EC3  00B7               	movwf	??___ftdiv+3
 13847  0EC4  0837               	movf	??___ftdiv+3,w
 13848  0EC5  00BD               	movwf	___ftdiv@sign
 13849  0EC6  08BD               	movf	___ftdiv@sign,f
 13850  0EC7  1D03               	skipz
 13851  0EC8  2ED0               	goto	l5962
 13852  0EC9  3000               	movlw	0
 13853  0ECA  00AE               	movwf	?___ftdiv
 13854  0ECB  3000               	movlw	0
 13855  0ECC  00AF               	movwf	?___ftdiv+1
 13856  0ECD  3000               	movlw	0
 13857  0ECE  00B0               	movwf	?___ftdiv+2
 13858  0ECF  0008               	return
 13859  0ED0                     l5962:	
 13860  0ED0  3000               	movlw	0
 13861  0ED1  00B9               	movwf	___ftdiv@f3
 13862  0ED2  3000               	movlw	0
 13863  0ED3  00BA               	movwf	___ftdiv@f3+1
 13864  0ED4  3000               	movlw	0
 13865  0ED5  00BB               	movwf	___ftdiv@f3+2
 13866  0ED6  3089               	movlw	137
 13867  0ED7  073D               	addwf	___ftdiv@sign,w
 13868  0ED8  00B4               	movwf	??___ftdiv
 13869  0ED9  0834               	movf	??___ftdiv,w
 13870  0EDA  02BC               	subwf	___ftdiv@exp,f
 13871  0EDB  0831               	movf	___ftdiv@f1,w
 13872  0EDC  00B4               	movwf	??___ftdiv
 13873  0EDD  0832               	movf	___ftdiv@f1+1,w
 13874  0EDE  00B5               	movwf	??___ftdiv+1
 13875  0EDF  0833               	movf	___ftdiv@f1+2,w
 13876  0EE0  00B6               	movwf	??___ftdiv+2
 13877  0EE1  3010               	movlw	16
 13878  0EE2                     u4645:	
 13879  0EE2  36B6               	lsrf	??___ftdiv+2,f
 13880  0EE3  0CB5               	rrf	??___ftdiv+1,f
 13881  0EE4  0CB4               	rrf	??___ftdiv,f
 13882  0EE5  0B89               	decfsz	9,f
 13883  0EE6  2EE2               	goto	u4645
 13884  0EE7  0834               	movf	??___ftdiv,w
 13885  0EE8  00B7               	movwf	??___ftdiv+3
 13886  0EE9  0837               	movf	??___ftdiv+3,w
 13887  0EEA  00BD               	movwf	___ftdiv@sign
 13888  0EEB  082E               	movf	___ftdiv@f2,w
 13889  0EEC  00B4               	movwf	??___ftdiv
 13890  0EED  082F               	movf	___ftdiv@f2+1,w
 13891  0EEE  00B5               	movwf	??___ftdiv+1
 13892  0EEF  0830               	movf	___ftdiv@f2+2,w
 13893  0EF0  00B6               	movwf	??___ftdiv+2
 13894  0EF1  3010               	movlw	16
 13895  0EF2                     u4655:	
 13896  0EF2  36B6               	lsrf	??___ftdiv+2,f
 13897  0EF3  0CB5               	rrf	??___ftdiv+1,f
 13898  0EF4  0CB4               	rrf	??___ftdiv,f
 13899  0EF5  0B89               	decfsz	9,f
 13900  0EF6  2EF2               	goto	u4655
 13901  0EF7  0834               	movf	??___ftdiv,w
 13902  0EF8  00B7               	movwf	??___ftdiv+3
 13903  0EF9  0837               	movf	??___ftdiv+3,w
 13904  0EFA  06BD               	xorwf	___ftdiv@sign,f
 13905  0EFB  3080               	movlw	128
 13906  0EFC  00B4               	movwf	??___ftdiv
 13907  0EFD  0834               	movf	??___ftdiv,w
 13908  0EFE  05BD               	andwf	___ftdiv@sign,f
 13909  0EFF  17B2               	bsf	___ftdiv@f1+1,7
 13910  0F00  30FF               	movlw	255
 13911  0F01  05B1               	andwf	___ftdiv@f1,f
 13912  0F02  30FF               	movlw	255
 13913  0F03  05B2               	andwf	___ftdiv@f1+1,f
 13914  0F04  3000               	movlw	0
 13915  0F05  05B3               	andwf	___ftdiv@f1+2,f
 13916  0F06  17AF               	bsf	___ftdiv@f2+1,7
 13917  0F07  30FF               	movlw	255
 13918  0F08  05AE               	andwf	___ftdiv@f2,f
 13919  0F09  30FF               	movlw	255
 13920  0F0A  05AF               	andwf	___ftdiv@f2+1,f
 13921  0F0B  3000               	movlw	0
 13922  0F0C  05B0               	andwf	___ftdiv@f2+2,f
 13923  0F0D  3018               	movlw	24
 13924  0F0E  00B4               	movwf	??___ftdiv
 13925  0F0F  0834               	movf	??___ftdiv,w
 13926  0F10  00B8               	movwf	___ftdiv@cntr
 13927  0F11                     l5976:	
 13928  0F11  3001               	movlw	1
 13929  0F12                     u4665:	
 13930  0F12  35B9               	lslf	___ftdiv@f3,f
 13931  0F13  0DBA               	rlf	___ftdiv@f3+1,f
 13932  0F14  0DBB               	rlf	___ftdiv@f3+2,f
 13933  0F15  0B89               	decfsz	9,f
 13934  0F16  2F12               	goto	u4665
 13935  0F17  0830               	movf	___ftdiv@f2+2,w
 13936  0F18  0233               	subwf	___ftdiv@f1+2,w
 13937  0F19  1D03               	skipz
 13938  0F1A  2F21               	goto	u4675
 13939  0F1B  082F               	movf	___ftdiv@f2+1,w
 13940  0F1C  0232               	subwf	___ftdiv@f1+1,w
 13941  0F1D  1D03               	skipz
 13942  0F1E  2F21               	goto	u4675
 13943  0F1F  082E               	movf	___ftdiv@f2,w
 13944  0F20  0231               	subwf	___ftdiv@f1,w
 13945  0F21                     u4675:	
 13946  0F21  1C03               	skipc
 13947  0F22  2F2A               	goto	l5984
 13948  0F23  082E               	movf	___ftdiv@f2,w
 13949  0F24  02B1               	subwf	___ftdiv@f1,f
 13950  0F25  082F               	movf	___ftdiv@f2+1,w
 13951  0F26  3BB2               	subwfb	___ftdiv@f1+1,f
 13952  0F27  0830               	movf	___ftdiv@f2+2,w
 13953  0F28  3BB3               	subwfb	___ftdiv@f1+2,f
 13954  0F29  1439               	bsf	___ftdiv@f3,0
 13955  0F2A                     l5984:	
 13956  0F2A  3001               	movlw	1
 13957  0F2B                     u4685:	
 13958  0F2B  35B1               	lslf	___ftdiv@f1,f
 13959  0F2C  0DB2               	rlf	___ftdiv@f1+1,f
 13960  0F2D  0DB3               	rlf	___ftdiv@f1+2,f
 13961  0F2E  0B89               	decfsz	9,f
 13962  0F2F  2F2B               	goto	u4685
 13963  0F30  3001               	movlw	1
 13964  0F31  02B8               	subwf	___ftdiv@cntr,f
 13965  0F32  1D03               	btfss	3,2
 13966  0F33  2F11               	goto	l5976
 13967  0F34  0839               	movf	___ftdiv@f3,w
 13968  0F35  00A0               	movwf	___ftpack@arg
 13969  0F36  083A               	movf	___ftdiv@f3+1,w
 13970  0F37  00A1               	movwf	___ftpack@arg+1
 13971  0F38  083B               	movf	___ftdiv@f3+2,w
 13972  0F39  00A2               	movwf	___ftpack@arg+2
 13973  0F3A  083C               	movf	___ftdiv@exp,w
 13974  0F3B  00B4               	movwf	??___ftdiv
 13975  0F3C  0834               	movf	??___ftdiv,w
 13976  0F3D  00A3               	movwf	___ftpack@exp
 13977  0F3E  083D               	movf	___ftdiv@sign,w
 13978  0F3F  00B5               	movwf	??___ftdiv+1
 13979  0F40  0835               	movf	??___ftdiv+1,w
 13980  0F41  00A4               	movwf	___ftpack@sign
 13981  0F42  3188  20B7         	fcall	___ftpack
 13982  0F44  0020               	movlb	0	; select bank0
 13983  0F45  0820               	movf	?___ftpack,w
 13984  0F46  00AE               	movwf	?___ftdiv
 13985  0F47  0821               	movf	?___ftpack+1,w
 13986  0F48  00AF               	movwf	?___ftdiv+1
 13987  0F49  0822               	movf	?___ftpack+2,w
 13988  0F4A  00B0               	movwf	?___ftdiv+2
 13989  0F4B  0008               	return
 13990  0F4C                     __end_of___ftdiv:	
 13991                           
 13992                           	psect	text81
 13993  043A                     __ptext81:	
 13994 ;; *************** function ___ftadd *****************
 13995 ;; Defined at:
 13996 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 13997 ;; Parameters:    Size  Location     Type
 13998 ;;  f1              3   33[BANK0 ] float 
 13999 ;;  f2              3   36[BANK0 ] float 
 14000 ;; Auto vars:     Size  Location     Type
 14001 ;;  exp1            1   45[BANK0 ] unsigned char 
 14002 ;;  exp2            1   44[BANK0 ] unsigned char 
 14003 ;;  sign            1   43[BANK0 ] unsigned char 
 14004 ;; Return value:  Size  Location     Type
 14005 ;;                  3   33[BANK0 ] float 
 14006 ;; Registers used:
 14007 ;;		wreg, status,2, status,0, pclath, cstack
 14008 ;; Tracked objects:
 14009 ;;		On entry : 0/0
 14010 ;;		On exit  : 0/0
 14011 ;;		Unchanged: 0/0
 14012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14013 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14014 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14015 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14016 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14017 ;;Total ram usage:       13 bytes
 14018 ;; Hardware stack levels used:    1
 14019 ;; Hardware stack levels required when called:    6
 14020 ;; This function calls:
 14021 ;;		___ftpack
 14022 ;; This function is called by:
 14023 ;;		_getPercentValue
 14024 ;;		_setPercentValue
 14025 ;; This function uses a non-reentrant model
 14026 ;;
 14027                           
 14028                           
 14029                           ;psect for function ___ftadd
 14030  043A                     ___ftadd:	
 14031                           
 14032                           ;incstack = 0
 14033                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14034  043A  0020               	movlb	0	; select bank0
 14035  043B  0841               	movf	___ftadd@f1,w
 14036  043C  00C7               	movwf	??___ftadd
 14037  043D  0842               	movf	___ftadd@f1+1,w
 14038  043E  00C8               	movwf	??___ftadd+1
 14039  043F  0843               	movf	___ftadd@f1+2,w
 14040  0440  00C9               	movwf	??___ftadd+2
 14041  0441  1003               	clrc
 14042  0442  0D48               	rlf	??___ftadd+1,w
 14043  0443  0D49               	rlf	??___ftadd+2,w
 14044  0444  00CA               	movwf	??___ftadd+3
 14045  0445  084A               	movf	??___ftadd+3,w
 14046  0446  00CD               	movwf	___ftadd@exp1
 14047  0447  0844               	movf	___ftadd@f2,w
 14048  0448  00C7               	movwf	??___ftadd
 14049  0449  0845               	movf	___ftadd@f2+1,w
 14050  044A  00C8               	movwf	??___ftadd+1
 14051  044B  0846               	movf	___ftadd@f2+2,w
 14052  044C  00C9               	movwf	??___ftadd+2
 14053  044D  1003               	clrc
 14054  044E  0D48               	rlf	??___ftadd+1,w
 14055  044F  0D49               	rlf	??___ftadd+2,w
 14056  0450  00CA               	movwf	??___ftadd+3
 14057  0451  084A               	movf	??___ftadd+3,w
 14058  0452  00CC               	movwf	___ftadd@exp2
 14059  0453  084D               	movf	___ftadd@exp1,w
 14060  0454  1903               	btfsc	3,2
 14061  0455  2C62               	goto	l5886
 14062  0456  084C               	movf	___ftadd@exp2,w
 14063  0457  024D               	subwf	___ftadd@exp1,w
 14064  0458  1803               	skipnc
 14065  0459  2C69               	goto	l5890
 14066  045A  034D               	decf	___ftadd@exp1,w
 14067  045B  3AFF               	xorlw	255
 14068  045C  074C               	addwf	___ftadd@exp2,w
 14069  045D  00C7               	movwf	??___ftadd
 14070  045E  3019               	movlw	25
 14071  045F  0247               	subwf	??___ftadd,w
 14072  0460  1C03               	skipc
 14073  0461  2C69               	goto	l5890
 14074  0462                     l5886:	
 14075  0462  0844               	movf	___ftadd@f2,w
 14076  0463  00C1               	movwf	?___ftadd
 14077  0464  0845               	movf	___ftadd@f2+1,w
 14078  0465  00C2               	movwf	?___ftadd+1
 14079  0466  0846               	movf	___ftadd@f2+2,w
 14080  0467  00C3               	movwf	?___ftadd+2
 14081  0468  0008               	return
 14082  0469                     l5890:	
 14083  0469  084C               	movf	___ftadd@exp2,w
 14084  046A  1903               	btfsc	3,2
 14085  046B  0008               	return
 14086  046C  084D               	movf	___ftadd@exp1,w
 14087  046D  024C               	subwf	___ftadd@exp2,w
 14088  046E  1803               	skipnc
 14089  046F  2C78               	goto	l5896
 14090  0470  034C               	decf	___ftadd@exp2,w
 14091  0471  3AFF               	xorlw	255
 14092  0472  074D               	addwf	___ftadd@exp1,w
 14093  0473  00C7               	movwf	??___ftadd
 14094  0474  3019               	movlw	25
 14095  0475  0247               	subwf	??___ftadd,w
 14096  0476  1803               	btfsc	3,0
 14097  0477  0008               	return
 14098  0478                     l5896:	
 14099  0478  3006               	movlw	6
 14100  0479  00C7               	movwf	??___ftadd
 14101  047A  0847               	movf	??___ftadd,w
 14102  047B  00CB               	movwf	___ftadd@sign
 14103  047C  1BC3               	btfsc	___ftadd@f1+2,7
 14104  047D  17CB               	bsf	___ftadd@sign,7
 14105  047E  1BC6               	btfsc	___ftadd@f2+2,7
 14106  047F  174B               	bsf	___ftadd@sign,6
 14107  0480  17C2               	bsf	___ftadd@f1+1,7
 14108  0481  30FF               	movlw	255
 14109  0482  05C1               	andwf	___ftadd@f1,f
 14110  0483  30FF               	movlw	255
 14111  0484  05C2               	andwf	___ftadd@f1+1,f
 14112  0485  3000               	movlw	0
 14113  0486  05C3               	andwf	___ftadd@f1+2,f
 14114  0487  17C5               	bsf	___ftadd@f2+1,7
 14115  0488  30FF               	movlw	255
 14116  0489  05C4               	andwf	___ftadd@f2,f
 14117  048A  30FF               	movlw	255
 14118  048B  05C5               	andwf	___ftadd@f2+1,f
 14119  048C  3000               	movlw	0
 14120  048D  05C6               	andwf	___ftadd@f2+2,f
 14121  048E  084C               	movf	___ftadd@exp2,w
 14122  048F  024D               	subwf	___ftadd@exp1,w
 14123  0490  1803               	skipnc
 14124  0491  2CB4               	goto	l5918
 14125  0492                     l5908:	
 14126  0492  3001               	movlw	1
 14127  0493                     u4485:	
 14128  0493  35C4               	lslf	___ftadd@f2,f
 14129  0494  0DC5               	rlf	___ftadd@f2+1,f
 14130  0495  0DC6               	rlf	___ftadd@f2+2,f
 14131  0496  0B89               	decfsz	9,f
 14132  0497  2C93               	goto	u4485
 14133  0498  3001               	movlw	1
 14134  0499  02CC               	subwf	___ftadd@exp2,f
 14135  049A  084C               	movf	___ftadd@exp2,w
 14136  049B  064D               	xorwf	___ftadd@exp1,w
 14137  049C  1903               	skipnz
 14138  049D  2CAF               	goto	l5916
 14139  049E  3001               	movlw	1
 14140  049F  02CB               	subwf	___ftadd@sign,f
 14141  04A0  084B               	movf	___ftadd@sign,w
 14142  04A1  3907               	andlw	7
 14143  04A2  1903               	btfsc	3,2
 14144  04A3  2CAF               	goto	l5916
 14145  04A4  2C92               	goto	l5908
 14146  04A5                     l5914:	
 14147  04A5  3001               	movlw	1
 14148  04A6                     u4515:	
 14149  04A6  36C3               	lsrf	___ftadd@f1+2,f
 14150  04A7  0CC2               	rrf	___ftadd@f1+1,f
 14151  04A8  0CC1               	rrf	___ftadd@f1,f
 14152  04A9  0B89               	decfsz	9,f
 14153  04AA  2CA6               	goto	u4515
 14154  04AB  3001               	movlw	1
 14155  04AC  00C7               	movwf	??___ftadd
 14156  04AD  0847               	movf	??___ftadd,w
 14157  04AE  07CD               	addwf	___ftadd@exp1,f
 14158  04AF                     l5916:	
 14159  04AF  084D               	movf	___ftadd@exp1,w
 14160  04B0  064C               	xorwf	___ftadd@exp2,w
 14161  04B1  1903               	btfsc	3,2
 14162  04B2  2CD9               	goto	l3017
 14163  04B3  2CA5               	goto	l5914
 14164  04B4                     l5918:	
 14165  04B4  084D               	movf	___ftadd@exp1,w
 14166  04B5  024C               	subwf	___ftadd@exp2,w
 14167  04B6  1803               	skipnc
 14168  04B7  2CD9               	goto	l3017
 14169  04B8                     l5920:	
 14170  04B8  3001               	movlw	1
 14171  04B9                     u4545:	
 14172  04B9  35C1               	lslf	___ftadd@f1,f
 14173  04BA  0DC2               	rlf	___ftadd@f1+1,f
 14174  04BB  0DC3               	rlf	___ftadd@f1+2,f
 14175  04BC  0B89               	decfsz	9,f
 14176  04BD  2CB9               	goto	u4545
 14177  04BE  3001               	movlw	1
 14178  04BF  02CD               	subwf	___ftadd@exp1,f
 14179  04C0  084C               	movf	___ftadd@exp2,w
 14180  04C1  064D               	xorwf	___ftadd@exp1,w
 14181  04C2  1903               	skipnz
 14182  04C3  2CD5               	goto	l5928
 14183  04C4  3001               	movlw	1
 14184  04C5  02CB               	subwf	___ftadd@sign,f
 14185  04C6  084B               	movf	___ftadd@sign,w
 14186  04C7  3907               	andlw	7
 14187  04C8  1903               	btfsc	3,2
 14188  04C9  2CD5               	goto	l5928
 14189  04CA  2CB8               	goto	l5920
 14190  04CB                     l5926:	
 14191  04CB  3001               	movlw	1
 14192  04CC                     u4575:	
 14193  04CC  36C6               	lsrf	___ftadd@f2+2,f
 14194  04CD  0CC5               	rrf	___ftadd@f2+1,f
 14195  04CE  0CC4               	rrf	___ftadd@f2,f
 14196  04CF  0B89               	decfsz	9,f
 14197  04D0  2CCC               	goto	u4575
 14198  04D1  3001               	movlw	1
 14199  04D2  00C7               	movwf	??___ftadd
 14200  04D3  0847               	movf	??___ftadd,w
 14201  04D4  07CC               	addwf	___ftadd@exp2,f
 14202  04D5                     l5928:	
 14203  04D5  084D               	movf	___ftadd@exp1,w
 14204  04D6  064C               	xorwf	___ftadd@exp2,w
 14205  04D7  1D03               	skipz
 14206  04D8  2CCB               	goto	l5926
 14207  04D9                     l3017:	
 14208  04D9  1FCB               	btfss	___ftadd@sign,7
 14209  04DA  2CEB               	goto	l5932
 14210  04DB  30FF               	movlw	255
 14211  04DC  06C1               	xorwf	___ftadd@f1,f
 14212  04DD  30FF               	movlw	255
 14213  04DE  06C2               	xorwf	___ftadd@f1+1,f
 14214  04DF  30FF               	movlw	255
 14215  04E0  06C3               	xorwf	___ftadd@f1+2,f
 14216  04E1  3001               	movlw	1
 14217  04E2  07C1               	addwf	___ftadd@f1,f
 14218  04E3  3000               	movlw	0
 14219  04E4  1803               	skipnc
 14220  04E5  3001               	movlw	1
 14221  04E6  07C2               	addwf	___ftadd@f1+1,f
 14222  04E7  3000               	movlw	0
 14223  04E8  1803               	skipnc
 14224  04E9  3001               	movlw	1
 14225  04EA  07C3               	addwf	___ftadd@f1+2,f
 14226  04EB                     l5932:	
 14227  04EB  1F4B               	btfss	___ftadd@sign,6
 14228  04EC  2CFD               	goto	l5936
 14229  04ED  30FF               	movlw	255
 14230  04EE  06C4               	xorwf	___ftadd@f2,f
 14231  04EF  30FF               	movlw	255
 14232  04F0  06C5               	xorwf	___ftadd@f2+1,f
 14233  04F1  30FF               	movlw	255
 14234  04F2  06C6               	xorwf	___ftadd@f2+2,f
 14235  04F3  3001               	movlw	1
 14236  04F4  07C4               	addwf	___ftadd@f2,f
 14237  04F5  3000               	movlw	0
 14238  04F6  1803               	skipnc
 14239  04F7  3001               	movlw	1
 14240  04F8  07C5               	addwf	___ftadd@f2+1,f
 14241  04F9  3000               	movlw	0
 14242  04FA  1803               	skipnc
 14243  04FB  3001               	movlw	1
 14244  04FC  07C6               	addwf	___ftadd@f2+2,f
 14245  04FD                     l5936:	
 14246  04FD  01CB               	clrf	___ftadd@sign
 14247  04FE  0841               	movf	___ftadd@f1,w
 14248  04FF  07C4               	addwf	___ftadd@f2,f
 14249  0500  0842               	movf	___ftadd@f1+1,w
 14250  0501  3DC5               	addwfc	___ftadd@f2+1,f
 14251  0502  0843               	movf	___ftadd@f1+2,w
 14252  0503  3DC6               	addwfc	___ftadd@f2+2,f
 14253  0504  1FC6               	btfss	___ftadd@f2+2,7
 14254  0505  2D18               	goto	l5946
 14255  0506  30FF               	movlw	255
 14256  0507  06C4               	xorwf	___ftadd@f2,f
 14257  0508  30FF               	movlw	255
 14258  0509  06C5               	xorwf	___ftadd@f2+1,f
 14259  050A  30FF               	movlw	255
 14260  050B  06C6               	xorwf	___ftadd@f2+2,f
 14261  050C  3001               	movlw	1
 14262  050D  07C4               	addwf	___ftadd@f2,f
 14263  050E  3000               	movlw	0
 14264  050F  1803               	skipnc
 14265  0510  3001               	movlw	1
 14266  0511  07C5               	addwf	___ftadd@f2+1,f
 14267  0512  3000               	movlw	0
 14268  0513  1803               	skipnc
 14269  0514  3001               	movlw	1
 14270  0515  07C6               	addwf	___ftadd@f2+2,f
 14271  0516  01CB               	clrf	___ftadd@sign
 14272  0517  0ACB               	incf	___ftadd@sign,f
 14273  0518                     l5946:	
 14274  0518  0844               	movf	___ftadd@f2,w
 14275  0519  00A0               	movwf	___ftpack@arg
 14276  051A  0845               	movf	___ftadd@f2+1,w
 14277  051B  00A1               	movwf	___ftpack@arg+1
 14278  051C  0846               	movf	___ftadd@f2+2,w
 14279  051D  00A2               	movwf	___ftpack@arg+2
 14280  051E  084D               	movf	___ftadd@exp1,w
 14281  051F  00C7               	movwf	??___ftadd
 14282  0520  0847               	movf	??___ftadd,w
 14283  0521  00A3               	movwf	___ftpack@exp
 14284  0522  084B               	movf	___ftadd@sign,w
 14285  0523  00C8               	movwf	??___ftadd+1
 14286  0524  0848               	movf	??___ftadd+1,w
 14287  0525  00A4               	movwf	___ftpack@sign
 14288  0526  3188  20B7         	fcall	___ftpack
 14289  0528  0020               	movlb	0	; select bank0
 14290  0529  0820               	movf	?___ftpack,w
 14291  052A  00C1               	movwf	?___ftadd
 14292  052B  0821               	movf	?___ftpack+1,w
 14293  052C  00C2               	movwf	?___ftadd+1
 14294  052D  0822               	movf	?___ftpack+2,w
 14295  052E  00C3               	movwf	?___ftadd+2
 14296  052F  0008               	return
 14297  0530                     __end_of___ftadd:	
 14298                           
 14299                           	psect	text82
 14300  1F99                     __ptext82:	
 14301 ;; *************** function ___awtoft *****************
 14302 ;; Defined at:
 14303 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14304 ;; Parameters:    Size  Location     Type
 14305 ;;  c               2    8[BANK0 ] int 
 14306 ;; Auto vars:     Size  Location     Type
 14307 ;;  sign            1   13[BANK0 ] unsigned char 
 14308 ;; Return value:  Size  Location     Type
 14309 ;;                  3    8[BANK0 ] float 
 14310 ;; Registers used:
 14311 ;;		wreg, status,2, status,0, pclath, cstack
 14312 ;; Tracked objects:
 14313 ;;		On entry : 0/0
 14314 ;;		On exit  : 0/0
 14315 ;;		Unchanged: 0/0
 14316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14317 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14318 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14319 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14320 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14321 ;;Total ram usage:        6 bytes
 14322 ;; Hardware stack levels used:    1
 14323 ;; Hardware stack levels required when called:    6
 14324 ;; This function calls:
 14325 ;;		___ftpack
 14326 ;; This function is called by:
 14327 ;;		_getPercentValue
 14328 ;;		_setPercentValue
 14329 ;; This function uses a non-reentrant model
 14330 ;;
 14331                           
 14332                           
 14333                           ;psect for function ___awtoft
 14334  1F99                     ___awtoft:	
 14335                           
 14336                           ;incstack = 0
 14337                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14338  1F99  0020               	movlb	0	; select bank0
 14339  1F9A  01AD               	clrf	___awtoft@sign
 14340  1F9B  1FA9               	btfss	___awtoft@c+1,7
 14341  1F9C  2FA4               	goto	l5874
 14342  1F9D  09A8               	comf	___awtoft@c,f
 14343  1F9E  09A9               	comf	___awtoft@c+1,f
 14344  1F9F  0AA8               	incf	___awtoft@c,f
 14345  1FA0  1903               	skipnz
 14346  1FA1  0AA9               	incf	___awtoft@c+1,f
 14347  1FA2  01AD               	clrf	___awtoft@sign
 14348  1FA3  0AAD               	incf	___awtoft@sign,f
 14349  1FA4                     l5874:	
 14350  1FA4  0828               	movf	___awtoft@c,w
 14351  1FA5  00A0               	movwf	___ftpack@arg
 14352  1FA6  0829               	movf	___awtoft@c+1,w
 14353  1FA7  00A1               	movwf	___ftpack@arg+1
 14354  1FA8  01A2               	clrf	___ftpack@arg+2
 14355  1FA9  308E               	movlw	142
 14356  1FAA  00AB               	movwf	??___awtoft
 14357  1FAB  082B               	movf	??___awtoft,w
 14358  1FAC  00A3               	movwf	___ftpack@exp
 14359  1FAD  082D               	movf	___awtoft@sign,w
 14360  1FAE  00AC               	movwf	??___awtoft+1
 14361  1FAF  082C               	movf	??___awtoft+1,w
 14362  1FB0  00A4               	movwf	___ftpack@sign
 14363  1FB1  3188  20B7         	fcall	___ftpack
 14364  1FB3  0020               	movlb	0	; select bank0
 14365  1FB4  0820               	movf	?___ftpack,w
 14366  1FB5  00A8               	movwf	?___awtoft
 14367  1FB6  0821               	movf	?___ftpack+1,w
 14368  1FB7  00A9               	movwf	?___awtoft+1
 14369  1FB8  0822               	movf	?___ftpack+2,w
 14370  1FB9  00AA               	movwf	?___awtoft+2
 14371  1FBA  0008               	return
 14372  1FBB                     __end_of___awtoft:	
 14373                           
 14374                           	psect	text83
 14375  08B7                     __ptext83:	
 14376 ;; *************** function ___ftpack *****************
 14377 ;; Defined at:
 14378 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14379 ;; Parameters:    Size  Location     Type
 14380 ;;  arg             3    0[BANK0 ] unsigned um
 14381 ;;  exp             1    3[BANK0 ] unsigned char 
 14382 ;;  sign            1    4[BANK0 ] unsigned char 
 14383 ;; Auto vars:     Size  Location     Type
 14384 ;;		None
 14385 ;; Return value:  Size  Location     Type
 14386 ;;                  3    0[BANK0 ] float 
 14387 ;; Registers used:
 14388 ;;		wreg, status,2, status,0
 14389 ;; Tracked objects:
 14390 ;;		On entry : 0/0
 14391 ;;		On exit  : 0/0
 14392 ;;		Unchanged: 0/0
 14393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14394 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14396 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14397 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14398 ;;Total ram usage:        8 bytes
 14399 ;; Hardware stack levels used:    1
 14400 ;; Hardware stack levels required when called:    5
 14401 ;; This function calls:
 14402 ;;		Nothing
 14403 ;; This function is called by:
 14404 ;;		___awtoft
 14405 ;;		___ftadd
 14406 ;;		___ftdiv
 14407 ;;		___ftmul
 14408 ;; This function uses a non-reentrant model
 14409 ;;
 14410                           
 14411                           
 14412                           ;psect for function ___ftpack
 14413  08B7                     ___ftpack:	
 14414                           
 14415                           ;incstack = 0
 14416                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14417  08B7  0020               	movlb	0	; select bank0
 14418  08B8  0823               	movf	___ftpack@exp,w
 14419  08B9  1903               	btfsc	3,2
 14420  08BA  28C0               	goto	l5824
 14421  08BB  0822               	movf	___ftpack@arg+2,w
 14422  08BC  0421               	iorwf	___ftpack@arg+1,w
 14423  08BD  0420               	iorwf	___ftpack@arg,w
 14424  08BE  1D03               	skipz
 14425  08BF  28D1               	goto	l5830
 14426  08C0                     l5824:	
 14427  08C0  3000               	movlw	0
 14428  08C1  00A0               	movwf	?___ftpack
 14429  08C2  3000               	movlw	0
 14430  08C3  00A1               	movwf	?___ftpack+1
 14431  08C4  3000               	movlw	0
 14432  08C5  00A2               	movwf	?___ftpack+2
 14433  08C6  0008               	return
 14434  08C7                     l5828:	
 14435  08C7  3001               	movlw	1
 14436  08C8  00A5               	movwf	??___ftpack
 14437  08C9  0825               	movf	??___ftpack,w
 14438  08CA  07A3               	addwf	___ftpack@exp,f
 14439  08CB  3001               	movlw	1
 14440  08CC                     u4275:	
 14441  08CC  36A2               	lsrf	___ftpack@arg+2,f
 14442  08CD  0CA1               	rrf	___ftpack@arg+1,f
 14443  08CE  0CA0               	rrf	___ftpack@arg,f
 14444  08CF  0B89               	decfsz	9,f
 14445  08D0  28CC               	goto	u4275
 14446  08D1                     l5830:	
 14447  08D1  30FE               	movlw	254
 14448  08D2  0522               	andwf	___ftpack@arg+2,w
 14449  08D3  1903               	btfsc	3,2
 14450  08D4  28EA               	goto	l2988
 14451  08D5  28C7               	goto	l5828
 14452  08D6                     l5832:	
 14453  08D6  3001               	movlw	1
 14454  08D7  00A5               	movwf	??___ftpack
 14455  08D8  0825               	movf	??___ftpack,w
 14456  08D9  07A3               	addwf	___ftpack@exp,f
 14457  08DA  3001               	movlw	1
 14458  08DB  07A0               	addwf	___ftpack@arg,f
 14459  08DC  3000               	movlw	0
 14460  08DD  1803               	skipnc
 14461  08DE  3001               	movlw	1
 14462  08DF  07A1               	addwf	___ftpack@arg+1,f
 14463  08E0  3000               	movlw	0
 14464  08E1  1803               	skipnc
 14465  08E2  3001               	movlw	1
 14466  08E3  07A2               	addwf	___ftpack@arg+2,f
 14467  08E4  3001               	movlw	1
 14468  08E5                     u4295:	
 14469  08E5  36A2               	lsrf	___ftpack@arg+2,f
 14470  08E6  0CA1               	rrf	___ftpack@arg+1,f
 14471  08E7  0CA0               	rrf	___ftpack@arg,f
 14472  08E8  0B89               	decfsz	9,f
 14473  08E9  28E5               	goto	u4295
 14474  08EA                     l2988:	
 14475  08EA  30FF               	movlw	255
 14476  08EB  0522               	andwf	___ftpack@arg+2,w
 14477  08EC  1903               	btfsc	3,2
 14478  08ED  28F7               	goto	l5840
 14479  08EE  28D6               	goto	l5832
 14480  08EF                     l5838:	
 14481  08EF  3001               	movlw	1
 14482  08F0  02A3               	subwf	___ftpack@exp,f
 14483  08F1  3001               	movlw	1
 14484  08F2                     u4315:	
 14485  08F2  35A0               	lslf	___ftpack@arg,f
 14486  08F3  0DA1               	rlf	___ftpack@arg+1,f
 14487  08F4  0DA2               	rlf	___ftpack@arg+2,f
 14488  08F5  0B89               	decfsz	9,f
 14489  08F6  28F2               	goto	u4315
 14490  08F7                     l5840:	
 14491  08F7  1FA1               	btfss	___ftpack@arg+1,7
 14492  08F8  28EF               	goto	l5838
 14493  08F9  1823               	btfsc	___ftpack@exp,0
 14494  08FA  2901               	goto	l2994
 14495  08FB  30FF               	movlw	255
 14496  08FC  05A0               	andwf	___ftpack@arg,f
 14497  08FD  307F               	movlw	127
 14498  08FE  05A1               	andwf	___ftpack@arg+1,f
 14499  08FF  30FF               	movlw	255
 14500  0900  05A2               	andwf	___ftpack@arg+2,f
 14501  0901                     l2994:	
 14502  0901  1003               	clrc
 14503  0902  0CA3               	rrf	___ftpack@exp,f
 14504  0903  0823               	movf	___ftpack@exp,w
 14505  0904  00A5               	movwf	??___ftpack
 14506  0905  01A6               	clrf	??___ftpack+1
 14507  0906  01A7               	clrf	??___ftpack+2
 14508  0907  3010               	movlw	16
 14509  0908                     u4345:	
 14510  0908  35A5               	lslf	??___ftpack,f
 14511  0909  0DA6               	rlf	??___ftpack+1,f
 14512  090A  0DA7               	rlf	??___ftpack+2,f
 14513  090B  0B89               	decfsz	9,f
 14514  090C  2908               	goto	u4345
 14515  090D  0825               	movf	??___ftpack,w
 14516  090E  04A0               	iorwf	___ftpack@arg,f
 14517  090F  0826               	movf	??___ftpack+1,w
 14518  0910  04A1               	iorwf	___ftpack@arg+1,f
 14519  0911  0827               	movf	??___ftpack+2,w
 14520  0912  04A2               	iorwf	___ftpack@arg+2,f
 14521  0913  0824               	movf	___ftpack@sign,w
 14522  0914  1903               	btfsc	3,2
 14523  0915  0008               	return
 14524  0916  17A2               	bsf	___ftpack@arg+2,7
 14525  0917  0008               	return
 14526  0918                     __end_of___ftpack:	
 14527                           
 14528                           	psect	text84
 14529  153D                     __ptext84:	
 14530 ;; *************** function _setLED *****************
 14531 ;; Defined at:
 14532 ;;		line 76 in file "../src/LED_B1.c"
 14533 ;; Parameters:    Size  Location     Type
 14534 ;;  led             1    wreg     unsigned char 
 14535 ;;  command         1    2[BANK0 ] unsigned char 
 14536 ;; Auto vars:     Size  Location     Type
 14537 ;;  led             1    3[BANK0 ] unsigned char 
 14538 ;; Return value:  Size  Location     Type
 14539 ;;		None               void
 14540 ;; Registers used:
 14541 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14542 ;; Tracked objects:
 14543 ;;		On entry : 0/0
 14544 ;;		On exit  : 0/0
 14545 ;;		Unchanged: 0/0
 14546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14547 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14548 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14550 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14551 ;;Total ram usage:        2 bytes
 14552 ;; Hardware stack levels used:    1
 14553 ;; Hardware stack levels required when called:    6
 14554 ;; This function calls:
 14555 ;;		_LedPointSelect
 14556 ;; This function is called by:
 14557 ;;		_setDimmerLights
 14558 ;;		_setLED_Initialization
 14559 ;;		_setSw_Initialization
 14560 ;;		_setMain_Exception
 14561 ;; This function uses a non-reentrant model
 14562 ;;
 14563                           
 14564                           
 14565                           ;psect for function _setLED
 14566  153D                     _setLED:	
 14567                           
 14568                           ;incstack = 0
 14569                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14570                           ;setLED@led stored from wreg
 14571  153D  0020               	movlb	0	; select bank0
 14572  153E  00A3               	movwf	setLED@led
 14573                           
 14574                           ;LED_B1.c: 77: LedPointSelect(led);
 14575  153F  0823               	movf	setLED@led,w
 14576  1540  319E  2685  3195   	fcall	_LedPointSelect
 14577                           
 14578                           ;LED_B1.c: 78: if (command == 0) {
 14579  1543  0020               	movlb	0	; select bank0
 14580  1544  08A2               	movf	setLED@command,f
 14581  1545  1D03               	skipz
 14582  1546  2D54               	goto	l6592
 14583                           
 14584                           ;LED_B1.c: 80: if (led == 1) {
 14585  1547  0823               	movf	setLED@led,w
 14586  1548  3A01               	xorlw	1
 14587  1549  1D03               	skipz
 14588  154A  2D4C               	goto	l6584
 14589                           
 14590                           ;LED_B1.c: 84: RA3 = 1;
 14591  154B  158C               	bsf	12,3	;volatile
 14592  154C                     l6584:	
 14593                           
 14594                           ;LED_B1.c: 86: }
 14595                           ;LED_B1.c: 89: if (led == 2) {
 14596  154C  0823               	movf	setLED@led,w
 14597  154D  3A02               	xorlw	2
 14598  154E  1903               	btfsc	3,2
 14599                           
 14600                           ;LED_B1.c: 93: RC7 = 1;
 14601  154F  178E               	bsf	14,7	;volatile
 14602                           
 14603                           ;LED_B1.c: 95: }
 14604                           ;LED_B1.c: 107: if (led == 99) {
 14605  1550  0823               	movf	setLED@led,w
 14606  1551  3A63               	xorlw	99
 14607  1552  1903               	btfsc	3,2
 14608                           
 14609                           ;LED_B1.c: 111: RB5 = 1;
 14610  1553  168D               	bsf	13,5	;volatile
 14611  1554                     l6592:	
 14612                           
 14613                           ;LED_B1.c: 113: }
 14614                           ;LED_B1.c: 115: }
 14615                           ;LED_B1.c: 116: if (command == 1) {
 14616  1554  0822               	movf	setLED@command,w
 14617  1555  3A01               	xorlw	1
 14618  1556  1D03               	skipz
 14619  1557  2D65               	goto	l6606
 14620                           
 14621                           ;LED_B1.c: 118: if (led == 1) {
 14622  1558  0823               	movf	setLED@led,w
 14623  1559  3A01               	xorlw	1
 14624  155A  1D03               	skipz
 14625  155B  2D5D               	goto	l6598
 14626                           
 14627                           ;LED_B1.c: 122: RA3 = 0;
 14628  155C  118C               	bcf	12,3	;volatile
 14629  155D                     l6598:	
 14630                           
 14631                           ;LED_B1.c: 124: }
 14632                           ;LED_B1.c: 127: if (led == 2) {
 14633  155D  0823               	movf	setLED@led,w
 14634  155E  3A02               	xorlw	2
 14635  155F  1903               	btfsc	3,2
 14636                           
 14637                           ;LED_B1.c: 131: RC7 = 0;
 14638  1560  138E               	bcf	14,7	;volatile
 14639                           
 14640                           ;LED_B1.c: 133: }
 14641                           ;LED_B1.c: 145: if (led == 99) {
 14642  1561  0823               	movf	setLED@led,w
 14643  1562  3A63               	xorlw	99
 14644  1563  1903               	btfsc	3,2
 14645                           
 14646                           ;LED_B1.c: 149: RB5 = 0;
 14647  1564  128D               	bcf	13,5	;volatile
 14648  1565                     l6606:	
 14649                           
 14650                           ;LED_B1.c: 151: }
 14651                           ;LED_B1.c: 153: }
 14652                           ;LED_B1.c: 154: if (command == 10) {
 14653  1565  0822               	movf	setLED@command,w
 14654  1566  3A0A               	xorlw	10
 14655  1567  1D03               	skipz
 14656  1568  2D83               	goto	l6622
 14657                           
 14658                           ;LED_B1.c: 155: LED->GO = 0;
 14659  1569  087A               	movf	_LED,w
 14660  156A  0086               	movwf	6
 14661  156B  3001               	movlw	1	; select bank2/3
 14662  156C  0087               	movwf	7
 14663  156D  1081               	bcf	1,1
 14664                           
 14665                           ;LED_B1.c: 156: LED->Time = 0;
 14666  156E  0A7A               	incf	_LED,w
 14667  156F  0086               	movwf	6
 14668  1570  3001               	movlw	1	; select bank2/3
 14669  1571  0087               	movwf	7
 14670  1572  3000               	movlw	0
 14671  1573  3FC0               	movwi [0]fsr1
 14672  1574  3FC1               	movwi [1]fsr1
 14673                           
 14674                           ;LED_B1.c: 158: if (led == 1) {
 14675  1575  0823               	movf	setLED@led,w
 14676  1576  3A01               	xorlw	1
 14677  1577  1D03               	skipz
 14678  1578  2D7B               	goto	l6614
 14679                           
 14680                           ;LED_B1.c: 162: RA3 = 1;
 14681  1579  158C               	bsf	12,3	;volatile
 14682                           
 14683                           ;LED_B1.c: 164: }
 14684  157A  2D7F               	goto	l6618
 14685  157B                     l6614:	
 14686                           
 14687                           ;LED_B1.c: 167: else if (led == 2) {
 14688  157B  0823               	movf	setLED@led,w
 14689  157C  3A02               	xorlw	2
 14690  157D  1903               	btfsc	3,2
 14691                           
 14692                           ;LED_B1.c: 171: RC7 = 1;
 14693  157E  178E               	bsf	14,7	;volatile
 14694  157F                     l6618:	
 14695                           
 14696                           ;LED_B1.c: 173: }
 14697                           ;LED_B1.c: 185: if (led == 99) {
 14698  157F  0823               	movf	setLED@led,w
 14699  1580  3A63               	xorlw	99
 14700  1581  1903               	btfsc	3,2
 14701                           
 14702                           ;LED_B1.c: 189: RB5 = 1;
 14703  1582  168D               	bsf	13,5	;volatile
 14704  1583                     l6622:	
 14705                           
 14706                           ;LED_B1.c: 191: }
 14707                           ;LED_B1.c: 193: }
 14708                           ;LED_B1.c: 194: if (command == 11) {
 14709  1583  0822               	movf	setLED@command,w
 14710  1584  3A0B               	xorlw	11
 14711  1585  1D03               	skipz
 14712  1586  0008               	return
 14713                           
 14714                           ;LED_B1.c: 195: LED->GO = 1;
 14715  1587  087A               	movf	_LED,w
 14716  1588  0086               	movwf	6
 14717  1589  3001               	movlw	1	; select bank2/3
 14718  158A  0087               	movwf	7
 14719  158B  1481               	bsf	1,1
 14720  158C  0008               	return
 14721  158D                     __end_of_setLED:	
 14722                           
 14723                           	psect	text85
 14724  1E85                     __ptext85:	
 14725 ;; *************** function _LedPointSelect *****************
 14726 ;; Defined at:
 14727 ;;		line 7 in file "../src/LED_B1.c"
 14728 ;; Parameters:    Size  Location     Type
 14729 ;;  led             1    wreg     unsigned char 
 14730 ;; Auto vars:     Size  Location     Type
 14731 ;;  led             1    1[BANK0 ] unsigned char 
 14732 ;; Return value:  Size  Location     Type
 14733 ;;		None               void
 14734 ;; Registers used:
 14735 ;;		wreg
 14736 ;; Tracked objects:
 14737 ;;		On entry : 0/0
 14738 ;;		On exit  : 0/0
 14739 ;;		Unchanged: 0/0
 14740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14742 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14743 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14744 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14745 ;;Total ram usage:        2 bytes
 14746 ;; Hardware stack levels used:    1
 14747 ;; Hardware stack levels required when called:    5
 14748 ;; This function calls:
 14749 ;;		Nothing
 14750 ;; This function is called by:
 14751 ;;		_setLED_Initialization
 14752 ;;		_setLED
 14753 ;;		_setLED_Main
 14754 ;; This function uses a non-reentrant model
 14755 ;;
 14756                           
 14757                           
 14758                           ;psect for function _LedPointSelect
 14759  1E85                     _LedPointSelect:	
 14760                           
 14761                           ;incstack = 0
 14762                           ; Regs used in _LedPointSelect: [wreg]
 14763                           ;LedPointSelect@led stored from wreg
 14764  1E85  0020               	movlb	0	; select bank0
 14765  1E86  00A1               	movwf	LedPointSelect@led
 14766                           
 14767                           ;LED_B1.c: 9: if (led == 1) {
 14768  1E87  0821               	movf	LedPointSelect@led,w
 14769  1E88  3A01               	xorlw	1
 14770  1E89  1D03               	skipz
 14771  1E8A  2E8F               	goto	l996
 14772                           
 14773                           ;LED_B1.c: 10: LED = &VarLED1;
 14774  1E8B  30DE               	movlw	_VarLED1& (0+255)
 14775  1E8C  00A0               	movwf	??_LedPointSelect
 14776  1E8D  0820               	movf	??_LedPointSelect,w
 14777  1E8E  00FA               	movwf	_LED
 14778  1E8F                     l996:	
 14779                           
 14780                           ;LED_B1.c: 11: }
 14781                           ;LED_B1.c: 14: if (led == 2) {
 14782  1E8F  0821               	movf	LedPointSelect@led,w
 14783  1E90  3A02               	xorlw	2
 14784  1E91  1D03               	skipz
 14785  1E92  2E97               	goto	l997
 14786                           
 14787                           ;LED_B1.c: 15: LED = &VarLED2;
 14788  1E93  30E2               	movlw	_VarLED2& (0+255)
 14789  1E94  00A0               	movwf	??_LedPointSelect
 14790  1E95  0820               	movf	??_LedPointSelect,w
 14791  1E96  00FA               	movwf	_LED
 14792  1E97                     l997:	
 14793                           
 14794                           ;LED_B1.c: 16: }
 14795                           ;LED_B1.c: 24: if (led == 99) {
 14796  1E97  0821               	movf	LedPointSelect@led,w
 14797  1E98  3A63               	xorlw	99
 14798  1E99  1D03               	skipz
 14799  1E9A  0008               	return
 14800                           
 14801                           ;LED_B1.c: 25: LED = &VarErrLED;
 14802  1E9B  30DA               	movlw	_VarErrLED& (0+255)
 14803  1E9C  00A0               	movwf	??_LedPointSelect
 14804  1E9D  0820               	movf	??_LedPointSelect,w
 14805  1E9E  00FA               	movwf	_LED
 14806  1E9F  0008               	return
 14807  1EA0                     __end_of_LedPointSelect:	
 14808                           
 14809                           	psect	text86
 14810  1DCB                     __ptext86:	
 14811 ;; *************** function _setDimmerLights_Line *****************
 14812 ;; Defined at:
 14813 ;;		line 679 in file "../src/Dimmer_B1.c"
 14814 ;; Parameters:    Size  Location     Type
 14815 ;;  lights          1    wreg     unsigned char 
 14816 ;; Auto vars:     Size  Location     Type
 14817 ;;  lights          1    0[BANK0 ] unsigned char 
 14818 ;; Return value:  Size  Location     Type
 14819 ;;		None               void
 14820 ;; Registers used:
 14821 ;;		wreg
 14822 ;; Tracked objects:
 14823 ;;		On entry : 0/0
 14824 ;;		On exit  : 0/0
 14825 ;;		Unchanged: 0/0
 14826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14828 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14830 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14831 ;;Total ram usage:        1 bytes
 14832 ;; Hardware stack levels used:    1
 14833 ;; Hardware stack levels required when called:    5
 14834 ;; This function calls:
 14835 ;;		Nothing
 14836 ;; This function is called by:
 14837 ;;		_setDimmerLights
 14838 ;; This function uses a non-reentrant model
 14839 ;;
 14840                           
 14841                           
 14842                           ;psect for function _setDimmerLights_Line
 14843  1DCB                     _setDimmerLights_Line:	
 14844                           
 14845                           ;incstack = 0
 14846                           ; Regs used in _setDimmerLights_Line: [wreg]
 14847                           ;setDimmerLights_Line@lights stored from wreg
 14848  1DCB  0020               	movlb	0	; select bank0
 14849  1DCC  00A0               	movwf	setDimmerLights_Line@lights
 14850                           
 14851                           ;Dimmer_B1.c: 681: DimmerLights1.Line = 0;
 14852  1DCD  0023               	movlb	3	; select bank3
 14853  1DCE  1029               	bcf	(_DimmerLights1^(0+384)+9),0
 14854                           
 14855                           ;Dimmer_B1.c: 684: DimmerLights2.Line = 0;
 14856  1DCF  1038               	bcf	(_DimmerLights2^(0+384)+9),0
 14857                           
 14858                           ;Dimmer_B1.c: 690: if (lights == 1) {
 14859  1DD0  0020               	movlb	0	; select bank0
 14860  1DD1  0820               	movf	setDimmerLights_Line@lights,w
 14861  1DD2  3A01               	xorlw	1
 14862  1DD3  1D03               	skipz
 14863  1DD4  2DD8               	goto	l6632
 14864                           
 14865                           ;Dimmer_B1.c: 691: DimmerLights1.Line = 1;
 14866  1DD5  0023               	movlb	3	; select bank3
 14867  1DD6  1429               	bsf	(_DimmerLights1^(0+384)+9),0
 14868                           
 14869                           ;Dimmer_B1.c: 692: }
 14870  1DD7  0008               	return
 14871  1DD8                     l6632:	
 14872                           
 14873                           ;Dimmer_B1.c: 695: else if (lights == 2) {
 14874  1DD8  0020               	movlb	0	; select bank0
 14875  1DD9  0820               	movf	setDimmerLights_Line@lights,w
 14876  1DDA  3A02               	xorlw	2
 14877  1DDB  1D03               	skipz
 14878  1DDC  0008               	return
 14879                           
 14880                           ;Dimmer_B1.c: 696: DimmerLights2.Line = 1;
 14881  1DDD  0023               	movlb	3	; select bank3
 14882  1DDE  1438               	bsf	(_DimmerLights2^(0+384)+9),0
 14883  1DDF  0008               	return
 14884  1DE0                     __end_of_setDimmerLights_Line:	
 14885                           
 14886                           	psect	text87
 14887  11E7                     __ptext87:	
 14888 ;; *************** function _getMain_All_Error_Status *****************
 14889 ;; Defined at:
 14890 ;;		line 375 in file "../src/main_B1.c"
 14891 ;; Parameters:    Size  Location     Type
 14892 ;;  command         1    wreg     unsigned char 
 14893 ;; Auto vars:     Size  Location     Type
 14894 ;;  command         1    5[BANK0 ] unsigned char 
 14895 ;;  status          1    6[BANK0 ] unsigned char 
 14896 ;; Return value:  Size  Location     Type
 14897 ;;                  1    wreg      unsigned char 
 14898 ;; Registers used:
 14899 ;;		wreg, status,2, status,0
 14900 ;; Tracked objects:
 14901 ;;		On entry : 0/0
 14902 ;;		On exit  : 0/0
 14903 ;;		Unchanged: 0/0
 14904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14906 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14907 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14908 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14909 ;;Total ram usage:        7 bytes
 14910 ;; Hardware stack levels used:    1
 14911 ;; Hardware stack levels required when called:    5
 14912 ;; This function calls:
 14913 ;;		Nothing
 14914 ;; This function is called by:
 14915 ;;		_DimmerLights_Main
 14916 ;;		_setDimmerLights
 14917 ;;		_setDimmerLights_Adj
 14918 ;;		_Load_Main
 14919 ;;		_setTemp_Main
 14920 ;;		_setRF_Main
 14921 ;;		_getRxData
 14922 ;;		_Switch_Main
 14923 ;; This function uses a non-reentrant model
 14924 ;;
 14925                           
 14926                           
 14927                           ;psect for function _getMain_All_Error_Status
 14928  11E7                     _getMain_All_Error_Status:	
 14929                           
 14930                           ;incstack = 0
 14931                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 14932                           ;getMain_All_Error_Status@command stored from wreg
 14933  11E7  0020               	movlb	0	; select bank0
 14934  11E8  00A5               	movwf	getMain_All_Error_Status@command
 14935                           
 14936                           ;main_B1.c: 376: char status = 0;
 14937  11E9  01A6               	clrf	getMain_All_Error_Status@status
 14938                           
 14939                           ;main_B1.c: 387: if (status == 0 && command != 2) {
 14940  11EA  08A6               	movf	getMain_All_Error_Status@status,f
 14941  11EB  1D03               	skipz
 14942  11EC  2A01               	goto	l6564
 14943  11ED  0825               	movf	getMain_All_Error_Status@command,w
 14944  11EE  3A02               	xorlw	2
 14945  11EF  1903               	skipnz
 14946  11F0  2A01               	goto	l6564
 14947                           
 14948                           ;main_B1.c: 388: status = Temp.ERROR == 1 ? 2 : 0;
 14949  11F1  0021               	movlb	1	; select bank1
 14950  11F2  18D7               	btfsc	_Temp^(0+128),1
 14951  11F3  29F8               	goto	l6562
 14952  11F4  0020               	movlb	0	; select bank0
 14953  11F5  01A1               	clrf	_getMain_All_Error_Status$7093
 14954  11F6  01A2               	clrf	_getMain_All_Error_Status$7093+1
 14955  11F7  29FD               	goto	l2727
 14956  11F8                     l6562:	
 14957  11F8  3002               	movlw	2
 14958  11F9  0020               	movlb	0	; select bank0
 14959  11FA  00A1               	movwf	_getMain_All_Error_Status$7093
 14960  11FB  3000               	movlw	0
 14961  11FC  00A2               	movwf	_getMain_All_Error_Status$7093+1
 14962  11FD                     l2727:	
 14963  11FD  0821               	movf	_getMain_All_Error_Status$7093,w
 14964  11FE  00A0               	movwf	??_getMain_All_Error_Status
 14965  11FF  0820               	movf	??_getMain_All_Error_Status,w
 14966  1200  00A6               	movwf	getMain_All_Error_Status@status
 14967  1201                     l6564:	
 14968                           
 14969                           ;main_B1.c: 389: }
 14970                           ;main_B1.c: 394: if (status == 0 && command != 3) {
 14971  1201  08A6               	movf	getMain_All_Error_Status@status,f
 14972  1202  1D03               	skipz
 14973  1203  2A18               	goto	l2728
 14974  1204  0825               	movf	getMain_All_Error_Status@command,w
 14975  1205  3A03               	xorlw	3
 14976  1206  1903               	skipnz
 14977  1207  2A18               	goto	l2728
 14978                           
 14979                           ;main_B1.c: 395: status = Load.ERROR == 1 ? 3 : 0;
 14980  1208  0022               	movlb	2	; select bank2
 14981  1209  1AC3               	btfsc	_Load^(0+256),5
 14982  120A  2A0F               	goto	l6572
 14983  120B  0020               	movlb	0	; select bank0
 14984  120C  01A3               	clrf	_getMain_All_Error_Status$7094
 14985  120D  01A4               	clrf	_getMain_All_Error_Status$7094+1
 14986  120E  2A14               	goto	l2732
 14987  120F                     l6572:	
 14988  120F  3003               	movlw	3
 14989  1210  0020               	movlb	0	; select bank0
 14990  1211  00A3               	movwf	_getMain_All_Error_Status$7094
 14991  1212  3000               	movlw	0
 14992  1213  00A4               	movwf	_getMain_All_Error_Status$7094+1
 14993  1214                     l2732:	
 14994  1214  0823               	movf	_getMain_All_Error_Status$7094,w
 14995  1215  00A0               	movwf	??_getMain_All_Error_Status
 14996  1216  0820               	movf	??_getMain_All_Error_Status,w
 14997  1217  00A6               	movwf	getMain_All_Error_Status@status
 14998  1218                     l2728:	
 14999                           
 15000                           ;main_B1.c: 396: }
 15001                           ;main_B1.c: 412: return status;
 15002  1218  0826               	movf	getMain_All_Error_Status@status,w
 15003  1219  0008               	return
 15004  121A                     __end_of_getMain_All_Error_Status:	
 15005                           
 15006                           	psect	text88
 15007  1159                     __ptext88:	
 15008 ;; *************** function _getMain_LightsStatus *****************
 15009 ;; Defined at:
 15010 ;;		line 348 in file "../src/main_B1.c"
 15011 ;; Parameters:    Size  Location     Type
 15012 ;;		None
 15013 ;; Auto vars:     Size  Location     Type
 15014 ;;  i               2    6[BANK0 ] int 
 15015 ;;  status          1    8[BANK0 ] unsigned char 
 15016 ;;  count           1    5[BANK0 ] unsigned char 
 15017 ;; Return value:  Size  Location     Type
 15018 ;;                  1    wreg      unsigned char 
 15019 ;; Registers used:
 15020 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15021 ;; Tracked objects:
 15022 ;;		On entry : 0/0
 15023 ;;		On exit  : 0/0
 15024 ;;		Unchanged: 0/0
 15025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15027 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15028 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15029 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15030 ;;Total ram usage:        5 bytes
 15031 ;; Hardware stack levels used:    1
 15032 ;; Hardware stack levels required when called:    7
 15033 ;; This function calls:
 15034 ;;		_getDimmerLights_Status
 15035 ;; This function is called by:
 15036 ;;		_DimmerLights_Main
 15037 ;;		_Flash_Memory_Main
 15038 ;;		_Load_Main
 15039 ;;		_setMain_Exception
 15040 ;; This function uses a non-reentrant model
 15041 ;;
 15042                           
 15043                           
 15044                           ;psect for function _getMain_LightsStatus
 15045  1159                     _getMain_LightsStatus:	
 15046                           
 15047                           ;main_B1.c: 349: char status = 0, count = 0;
 15048                           
 15049                           ;incstack = 0
 15050                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15051  1159  0020               	movlb	0	; select bank0
 15052  115A  01A8               	clrf	getMain_LightsStatus@status
 15053  115B  01A5               	clrf	getMain_LightsStatus@count
 15054                           
 15055                           ;main_B1.c: 355: count = 2;
 15056  115C  3002               	movlw	2
 15057  115D  00A4               	movwf	??_getMain_LightsStatus
 15058  115E  0824               	movf	??_getMain_LightsStatus,w
 15059  115F  00A5               	movwf	getMain_LightsStatus@count
 15060                           
 15061                           ;main_B1.c: 361: for (int i = 0; i < count; i++) {
 15062  1160  01A6               	clrf	getMain_LightsStatus@i
 15063  1161  01A7               	clrf	getMain_LightsStatus@i+1
 15064  1162                     l6868:	
 15065  1162  0827               	movf	getMain_LightsStatus@i+1,w
 15066  1163  3A80               	xorlw	128
 15067  1164  00A4               	movwf	??_getMain_LightsStatus
 15068  1165  3080               	movlw	128
 15069  1166  0224               	subwf	??_getMain_LightsStatus,w
 15070  1167  1D03               	skipz
 15071  1168  296B               	goto	u6055
 15072  1169  0825               	movf	getMain_LightsStatus@count,w
 15073  116A  0226               	subwf	getMain_LightsStatus@i,w
 15074  116B                     u6055:	
 15075  116B  1803               	btfsc	3,0
 15076  116C  2983               	goto	l6870
 15077                           
 15078                           ;main_B1.c: 362: if (status == 0) {
 15079  116D  0020               	movlb	0	; select bank0
 15080  116E  08A8               	movf	getMain_LightsStatus@status,f
 15081  116F  1D03               	skipz
 15082  1170  297E               	goto	l6866
 15083                           
 15084                           ;main_B1.c: 367: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 15085  1171  0826               	movf	getMain_LightsStatus@i,w
 15086  1172  3E01               	addlw	1
 15087  1173  319C  2445  3191   	fcall	_getDimmerLights_Status
 15088  1176  3A01               	xorlw	1
 15089  1177  3000               	movlw	0
 15090  1178  1903               	skipnz
 15091  1179  3001               	movlw	1
 15092  117A  0020               	movlb	0	; select bank0
 15093  117B  00A4               	movwf	??_getMain_LightsStatus
 15094  117C  0824               	movf	??_getMain_LightsStatus,w
 15095  117D  00A8               	movwf	getMain_LightsStatus@status
 15096  117E                     l6866:	
 15097  117E  3001               	movlw	1
 15098  117F  07A6               	addwf	getMain_LightsStatus@i,f
 15099  1180  3000               	movlw	0
 15100  1181  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 15101  1182  2962               	goto	l6868
 15102  1183                     l6870:	
 15103                           
 15104                           ;main_B1.c: 369: }
 15105                           ;main_B1.c: 370: }
 15106                           ;main_B1.c: 371: return status;
 15107  1183  0020               	movlb	0	; select bank0
 15108  1184  0828               	movf	getMain_LightsStatus@status,w
 15109  1185  0008               	return
 15110  1186                     __end_of_getMain_LightsStatus:	
 15111                           
 15112                           	psect	text89
 15113  1B78                     __ptext89:	
 15114 ;; *************** function _getLoad_OK *****************
 15115 ;; Defined at:
 15116 ;;		line 188 in file "../src/OverLoad_B1.c"
 15117 ;; Parameters:    Size  Location     Type
 15118 ;;		None
 15119 ;; Auto vars:     Size  Location     Type
 15120 ;;  ok              1    0[BANK0 ] unsigned char 
 15121 ;; Return value:  Size  Location     Type
 15122 ;;                  1    wreg      unsigned char 
 15123 ;; Registers used:
 15124 ;;		wreg, status,2
 15125 ;; Tracked objects:
 15126 ;;		On entry : 0/0
 15127 ;;		On exit  : 0/0
 15128 ;;		Unchanged: 0/0
 15129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15131 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15133 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15134 ;;Total ram usage:        1 bytes
 15135 ;; Hardware stack levels used:    1
 15136 ;; Hardware stack levels required when called:    5
 15137 ;; This function calls:
 15138 ;;		Nothing
 15139 ;; This function is called by:
 15140 ;;		_DimmerLights_Main
 15141 ;; This function uses a non-reentrant model
 15142 ;;
 15143                           
 15144                           
 15145                           ;psect for function _getLoad_OK
 15146  1B78                     _getLoad_OK:	
 15147                           
 15148                           ;OverLoad_B1.c: 189: char ok = Load.OK == 1 ? 1 : 0;
 15149                           
 15150                           ;incstack = 0
 15151                           ; Regs used in _getLoad_OK: [wreg+status,2]
 15152  1B78  3000               	movlw	0
 15153  1B79  0022               	movlb	2	; select bank2
 15154  1B7A  1BC3               	btfsc	_Load^(0+256),7
 15155  1B7B  3001               	movlw	1
 15156  1B7C  0020               	movlb	0	; select bank0
 15157  1B7D  00A0               	movwf	getLoad_OK@ok
 15158                           
 15159                           ;OverLoad_B1.c: 190: return ok;
 15160  1B7E  0820               	movf	getLoad_OK@ok,w
 15161  1B7F  0008               	return
 15162  1B80                     __end_of_getLoad_OK:	
 15163                           
 15164                           	psect	text90
 15165  1E0B                     __ptext90:	
 15166 ;; *************** function _DimmerLights_Initialization *****************
 15167 ;; Defined at:
 15168 ;;		line 341 in file "../src/Dimmer_B1.c"
 15169 ;; Parameters:    Size  Location     Type
 15170 ;;		None
 15171 ;; Auto vars:     Size  Location     Type
 15172 ;;		None
 15173 ;; Return value:  Size  Location     Type
 15174 ;;		None               void
 15175 ;; Registers used:
 15176 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15177 ;; Tracked objects:
 15178 ;;		On entry : 0/0
 15179 ;;		On exit  : 0/0
 15180 ;;		Unchanged: 0/0
 15181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15184 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15185 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15186 ;;Total ram usage:        1 bytes
 15187 ;; Hardware stack levels used:    1
 15188 ;; Hardware stack levels required when called:    7
 15189 ;; This function calls:
 15190 ;;		_Dimmer_Initialization
 15191 ;;		_setDimmerLights_Initialization
 15192 ;; This function is called by:
 15193 ;;		_main
 15194 ;; This function uses a non-reentrant model
 15195 ;;
 15196                           
 15197                           
 15198                           ;psect for function _DimmerLights_Initialization
 15199  1E0B                     _DimmerLights_Initialization:	
 15200                           
 15201                           ;Dimmer_B1.c: 343: DimmerLights11 = &DimmerLights1;
 15202                           
 15203                           ;incstack = 0
 15204                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15205  1E0B  30A0               	movlw	_DimmerLights1& (0+255)
 15206  1E0C  0020               	movlb	0	; select bank0
 15207  1E0D  00A4               	movwf	??_DimmerLights_Initialization
 15208  1E0E  0824               	movf	??_DimmerLights_Initialization,w
 15209  1E0F  0021               	movlb	1	; select bank1
 15210  1E10  00CD               	movwf	_DimmerLights11^(0+128)
 15211                           
 15212                           ;Dimmer_B1.c: 344: setDimmerLights_Initialization(1);
 15213  1E11  3001               	movlw	1
 15214  1E12  3190  20B6  319E   	fcall	_setDimmerLights_Initialization
 15215                           
 15216                           ;Dimmer_B1.c: 348: DimmerLights22 = &DimmerLights2;
 15217  1E15  30AF               	movlw	_DimmerLights2& (0+255)
 15218  1E16  0020               	movlb	0	; select bank0
 15219  1E17  00A4               	movwf	??_DimmerLights_Initialization
 15220  1E18  0824               	movf	??_DimmerLights_Initialization,w
 15221  1E19  0021               	movlb	1	; select bank1
 15222  1E1A  00CE               	movwf	_DimmerLights22^(0+128)
 15223                           
 15224                           ;Dimmer_B1.c: 349: setDimmerLights_Initialization(2);
 15225  1E1B  3002               	movlw	2
 15226  1E1C  3190  20B6  319E   	fcall	_setDimmerLights_Initialization
 15227                           
 15228                           ;Dimmer_B1.c: 358: Dimmer_Initialization();
 15229  1E1F  319B  2322         	fcall	_Dimmer_Initialization
 15230  1E21  0008               	return
 15231  1E22                     __end_of_DimmerLights_Initialization:	
 15232                           
 15233                           	psect	text91
 15234  10B6                     __ptext91:	
 15235 ;; *************** function _setDimmerLights_Initialization *****************
 15236 ;; Defined at:
 15237 ;;		line 364 in file "../src/Dimmer_B1.c"
 15238 ;; Parameters:    Size  Location     Type
 15239 ;;  lights          1    wreg     unsigned char 
 15240 ;; Auto vars:     Size  Location     Type
 15241 ;;  lights          1    3[BANK0 ] unsigned char 
 15242 ;; Return value:  Size  Location     Type
 15243 ;;		None               void
 15244 ;; Registers used:
 15245 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15246 ;; Tracked objects:
 15247 ;;		On entry : 0/0
 15248 ;;		On exit  : 0/0
 15249 ;;		Unchanged: 0/0
 15250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15252 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15253 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15254 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15255 ;;Total ram usage:        2 bytes
 15256 ;; Hardware stack levels used:    1
 15257 ;; Hardware stack levels required when called:    6
 15258 ;; This function calls:
 15259 ;;		_DimmerLightsPointSelect
 15260 ;; This function is called by:
 15261 ;;		_DimmerLights_Initialization
 15262 ;; This function uses a non-reentrant model
 15263 ;;
 15264                           
 15265                           
 15266                           ;psect for function _setDimmerLights_Initialization
 15267  10B6                     _setDimmerLights_Initialization:	
 15268                           
 15269                           ;incstack = 0
 15270                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15271                           ;setDimmerLights_Initialization@lights stored from wreg
 15272  10B6  0020               	movlb	0	; select bank0
 15273  10B7  00A3               	movwf	setDimmerLights_Initialization@lights
 15274                           
 15275                           ;Dimmer_B1.c: 366: DimmerLightsPointSelect(lights);
 15276  10B8  0823               	movf	setDimmerLights_Initialization@lights,w
 15277  10B9  319C  24F1         	fcall	_DimmerLightsPointSelect
 15278                           
 15279                           ;Dimmer_B1.c: 372: DimmerLights->MaxmumValue = ((char)(80*0.8));
 15280  10BB  3040               	movlw	64
 15281  10BC  0020               	movlb	0	; select bank0
 15282  10BD  00A2               	movwf	??_setDimmerLights_Initialization
 15283  10BE  086F               	movf	_DimmerLights,w
 15284  10BF  3E05               	addlw	5
 15285  10C0  0086               	movwf	6
 15286  10C1  3001               	movlw	1	; select bank2/3
 15287  10C2  0087               	movwf	7
 15288  10C3  0822               	movf	??_setDimmerLights_Initialization,w
 15289  10C4  0081               	movwf	1
 15290                           
 15291                           ;Dimmer_B1.c: 373: DimmerLights->MinimumValue = ((char)(15*0.8));
 15292  10C5  300C               	movlw	12
 15293  10C6  00A2               	movwf	??_setDimmerLights_Initialization
 15294  10C7  086F               	movf	_DimmerLights,w
 15295  10C8  3E06               	addlw	6
 15296  10C9  0086               	movwf	6
 15297  10CA  3001               	movlw	1	; select bank2/3
 15298  10CB  0087               	movwf	7
 15299  10CC  0822               	movf	??_setDimmerLights_Initialization,w
 15300  10CD  0081               	movwf	1
 15301                           
 15302                           ;Dimmer_B1.c: 387: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15303  10CE  086F               	movf	_DimmerLights,w
 15304  10CF  3E05               	addlw	5
 15305  10D0  0086               	movwf	6
 15306  10D1  3001               	movlw	1	; select bank2/3
 15307  10D2  0087               	movwf	7
 15308  10D3  0801               	movf	1,w
 15309  10D4  00A2               	movwf	??_setDimmerLights_Initialization
 15310  10D5  086F               	movf	_DimmerLights,w
 15311  10D6  3E04               	addlw	4
 15312  10D7  0086               	movwf	6
 15313  10D8  3001               	movlw	1	; select bank2/3
 15314  10D9  0087               	movwf	7
 15315  10DA  0822               	movf	??_setDimmerLights_Initialization,w
 15316  10DB  0081               	movwf	1
 15317  10DC  0008               	return
 15318  10DD                     __end_of_setDimmerLights_Initialization:	
 15319                           
 15320                           	psect	text92
 15321  1B22                     __ptext92:	
 15322 ;; *************** function _Dimmer_Initialization *****************
 15323 ;; Defined at:
 15324 ;;		line 904 in file "../src/Dimmer_B1.c"
 15325 ;; Parameters:    Size  Location     Type
 15326 ;;		None
 15327 ;; Auto vars:     Size  Location     Type
 15328 ;;		None
 15329 ;; Return value:  Size  Location     Type
 15330 ;;		None               void
 15331 ;; Registers used:
 15332 ;;		None
 15333 ;; Tracked objects:
 15334 ;;		On entry : 0/0
 15335 ;;		On exit  : 0/0
 15336 ;;		Unchanged: 0/0
 15337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15342 ;;Total ram usage:        0 bytes
 15343 ;; Hardware stack levels used:    1
 15344 ;; Hardware stack levels required when called:    5
 15345 ;; This function calls:
 15346 ;;		Nothing
 15347 ;; This function is called by:
 15348 ;;		_DimmerLights_Initialization
 15349 ;; This function uses a non-reentrant model
 15350 ;;
 15351                           
 15352                           
 15353                           ;psect for function _Dimmer_Initialization
 15354  1B22                     _Dimmer_Initialization:	
 15355                           
 15356                           ;incstack = 0
 15357                           ; Regs used in _Dimmer_Initialization: []
 15358  1B22  0008               	return
 15359  1B23                     __end_of_Dimmer_Initialization:	
 15360                           
 15361                           	psect	text93
 15362  1B70                     __ptext93:	
 15363 ;; *************** function _DelayOff_Main *****************
 15364 ;; Defined at:
 15365 ;;		line 41 in file "../src/DelayOff_B1.c"
 15366 ;; Parameters:    Size  Location     Type
 15367 ;;		None
 15368 ;; Auto vars:     Size  Location     Type
 15369 ;;		None
 15370 ;; Return value:  Size  Location     Type
 15371 ;;		None               void
 15372 ;; Registers used:
 15373 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15374 ;; Tracked objects:
 15375 ;;		On entry : 0/0
 15376 ;;		On exit  : 0/0
 15377 ;;		Unchanged: 0/0
 15378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15383 ;;Total ram usage:        0 bytes
 15384 ;; Hardware stack levels used:    1
 15385 ;; Hardware stack levels required when called:   11
 15386 ;; This function calls:
 15387 ;;		_DlyOff_Main
 15388 ;; This function is called by:
 15389 ;;		_main
 15390 ;; This function uses a non-reentrant model
 15391 ;;
 15392                           
 15393                           
 15394                           ;psect for function _DelayOff_Main
 15395  1B70                     _DelayOff_Main:	
 15396                           
 15397                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15398                           
 15399                           ;incstack = 0
 15400                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15401  1B70  3001               	movlw	1
 15402  1B71  3188  205A  319B   	fcall	_DlyOff_Main
 15403                           
 15404                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 15405  1B74  3002               	movlw	2
 15406  1B75  3188  205A         	fcall	_DlyOff_Main
 15407  1B77  0008               	return
 15408  1B78                     __end_of_DelayOff_Main:	
 15409                           
 15410                           	psect	text94
 15411  085A                     __ptext94:	
 15412 ;; *************** function _DlyOff_Main *****************
 15413 ;; Defined at:
 15414 ;;		line 61 in file "../src/DelayOff_B1.c"
 15415 ;; Parameters:    Size  Location     Type
 15416 ;;  sw              1    wreg     unsigned char 
 15417 ;; Auto vars:     Size  Location     Type
 15418 ;;  sw              1   24[BANK0 ] unsigned char 
 15419 ;; Return value:  Size  Location     Type
 15420 ;;		None               void
 15421 ;; Registers used:
 15422 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15423 ;; Tracked objects:
 15424 ;;		On entry : 0/0
 15425 ;;		On exit  : 0/0
 15426 ;;		Unchanged: 0/0
 15427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15429 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15430 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15431 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15432 ;;Total ram usage:        3 bytes
 15433 ;; Hardware stack levels used:    1
 15434 ;; Hardware stack levels required when called:   10
 15435 ;; This function calls:
 15436 ;;		_DelayOffPointSelect
 15437 ;;		_setBuz
 15438 ;;		_setDimmerLights_ErrorClose
 15439 ;; This function is called by:
 15440 ;;		_DelayOff_Main
 15441 ;; This function uses a non-reentrant model
 15442 ;;
 15443                           
 15444                           
 15445                           ;psect for function _DlyOff_Main
 15446  085A                     _DlyOff_Main:	
 15447                           
 15448                           ;incstack = 0
 15449                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15450                           ;DlyOff_Main@sw stored from wreg
 15451  085A  0020               	movlb	0	; select bank0
 15452  085B  00B8               	movwf	DlyOff_Main@sw
 15453                           
 15454                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15455  085C  0838               	movf	DlyOff_Main@sw,w
 15456  085D  319D  2565  3188   	fcall	_DelayOffPointSelect
 15457                           
 15458                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15459  0860  0878               	movf	_DelayOff,w
 15460  0861  0086               	movwf	6
 15461  0862  3001               	movlw	1	; select bank2/3
 15462  0863  0087               	movwf	7
 15463  0864  1C81               	btfss	1,1
 15464  0865  0008               	return
 15465                           
 15466                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15467  0866  0878               	movf	_DelayOff,w
 15468  0867  3E02               	addlw	2
 15469  0868  0086               	movwf	6
 15470  0869  3001               	movlw	1	; select bank2/3
 15471  086A  0087               	movwf	7
 15472  086B  3001               	movlw	1
 15473  086C  0781               	addwf	1,f
 15474  086D  3141               	addfsr 1,1
 15475  086E  1803               	skipnc
 15476  086F  0A81               	incf	1,f
 15477                           
 15478                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15479  0870  0878               	movf	_DelayOff,w
 15480  0871  3E02               	addlw	2
 15481  0872  0086               	movwf	6
 15482  0873  3001               	movlw	1	; select bank2/3
 15483  0874  0087               	movwf	7
 15484  0875  3F40               	moviw [0]fsr1
 15485  0876  0020               	movlb	0	; select bank0
 15486  0877  00B6               	movwf	??_DlyOff_Main
 15487  0878  3F41               	moviw [1]fsr1
 15488  0879  00B7               	movwf	??_DlyOff_Main+1
 15489  087A  3017               	movlw	23
 15490  087B  0237               	subwf	??_DlyOff_Main+1,w
 15491  087C  3070               	movlw	112
 15492  087D  1903               	skipnz
 15493  087E  0236               	subwf	??_DlyOff_Main,w
 15494  087F  1C03               	skipc
 15495  0880  0008               	return
 15496                           
 15497                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15498  0881  0878               	movf	_DelayOff,w
 15499  0882  3E02               	addlw	2
 15500  0883  0086               	movwf	6
 15501  0884  3001               	movlw	1	; select bank2/3
 15502  0885  0087               	movwf	7
 15503  0886  3000               	movlw	0
 15504  0887  3FC0               	movwi [0]fsr1
 15505  0888  3FC1               	movwi [1]fsr1
 15506                           
 15507                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15508  0889  3001               	movlw	1
 15509  088A  00B6               	movwf	??_DlyOff_Main
 15510  088B  0878               	movf	_DelayOff,w
 15511  088C  3E04               	addlw	4
 15512  088D  0086               	movwf	6
 15513  088E  3001               	movlw	1	; select bank2/3
 15514  088F  0087               	movwf	7
 15515  0890  0836               	movf	??_DlyOff_Main,w
 15516  0891  0781               	addwf	1,f
 15517                           
 15518                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15519  0892  0878               	movf	_DelayOff,w
 15520  0893  3E04               	addlw	4
 15521  0894  0086               	movwf	6
 15522  0895  3001               	movlw	1	; select bank2/3
 15523  0896  0087               	movwf	7
 15524  0897  0A78               	incf	_DelayOff,w
 15525  0898  0084               	movwf	4
 15526  0899  3001               	movlw	1	; select bank2/3
 15527  089A  0085               	movwf	5
 15528  089B  0800               	movf	0,w
 15529  089C  0201               	subwf	1,w
 15530  089D  1C03               	skipc
 15531  089E  0008               	return
 15532                           
 15533                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15534  089F  0878               	movf	_DelayOff,w
 15535  08A0  3E04               	addlw	4
 15536  08A1  0086               	movwf	6
 15537  08A2  3001               	movlw	1	; select bank2/3
 15538  08A3  0087               	movwf	7
 15539  08A4  0181               	clrf	1
 15540                           
 15541                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15542  08A5  0878               	movf	_DelayOff,w
 15543  08A6  0086               	movwf	6
 15544  08A7  3001               	movlw	1	; select bank2/3
 15545  08A8  0087               	movwf	7
 15546  08A9  1081               	bcf	1,1
 15547                           
 15548                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15549  08AA  3064               	movlw	100
 15550  08AB  00A9               	movwf	setBuz@time
 15551  08AC  3000               	movlw	0
 15552  08AD  00AA               	movwf	setBuz@time+1
 15553  08AE  3001               	movlw	1
 15554  08AF  3196  2639  3188   	fcall	_setBuz
 15555                           
 15556                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15557  08B2  0020               	movlb	0	; select bank0
 15558  08B3  0838               	movf	DlyOff_Main@sw,w
 15559  08B4  3188  2000         	fcall	_setDimmerLights_ErrorClose
 15560  08B6  0008               	return
 15561  08B7                     __end_of_DlyOff_Main:	
 15562                           
 15563                           	psect	text95
 15564  0800                     __ptext95:	
 15565 ;; *************** function _setDimmerLights_ErrorClose *****************
 15566 ;; Defined at:
 15567 ;;		line 574 in file "../src/Dimmer_B1.c"
 15568 ;; Parameters:    Size  Location     Type
 15569 ;;  lights          1    wreg     unsigned char 
 15570 ;; Auto vars:     Size  Location     Type
 15571 ;;  lights          1   19[BANK0 ] unsigned char 
 15572 ;;  i               2   20[BANK0 ] int 
 15573 ;;  count           1   18[BANK0 ] unsigned char 
 15574 ;; Return value:  Size  Location     Type
 15575 ;;		None               void
 15576 ;; Registers used:
 15577 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15578 ;; Tracked objects:
 15579 ;;		On entry : 0/0
 15580 ;;		On exit  : 0/0
 15581 ;;		Unchanged: 0/0
 15582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15584 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15585 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15586 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15587 ;;Total ram usage:        5 bytes
 15588 ;; Hardware stack levels used:    1
 15589 ;; Hardware stack levels required when called:    9
 15590 ;; This function calls:
 15591 ;;		_DimmerLightsPointSelect
 15592 ;;		_getDimmerLights_Status
 15593 ;;		_setDimmerLights_SwOff
 15594 ;; This function is called by:
 15595 ;;		_DlyOff_Main
 15596 ;;		_setControl_Lights_Table
 15597 ;;		_setMain_Exception
 15598 ;; This function uses a non-reentrant model
 15599 ;;
 15600                           
 15601                           
 15602                           ;psect for function _setDimmerLights_ErrorClose
 15603  0800                     _setDimmerLights_ErrorClose:	
 15604                           
 15605                           ;incstack = 0
 15606                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15607                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15608  0800  0020               	movlb	0	; select bank0
 15609  0801  00B3               	movwf	setDimmerLights_ErrorClose@lights
 15610                           
 15611                           ;Dimmer_B1.c: 575: if (lights == 255) {
 15612  0802  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15613  0803  3AFF               	xorlw	255
 15614  0804  1D03               	skipz
 15615  0805  283D               	goto	l6456
 15616                           
 15617                           ;Dimmer_B1.c: 580: char count = 2;
 15618  0806  3002               	movlw	2
 15619  0807  00B1               	movwf	??_setDimmerLights_ErrorClose
 15620  0808  0831               	movf	??_setDimmerLights_ErrorClose,w
 15621  0809  00B2               	movwf	setDimmerLights_ErrorClose@count
 15622                           
 15623                           ;Dimmer_B1.c: 585: for (int i = 0; i < count; i++) {
 15624  080A  01B4               	clrf	setDimmerLights_ErrorClose@i
 15625  080B  01B5               	clrf	setDimmerLights_ErrorClose@i+1
 15626  080C                     l6454:	
 15627  080C  0835               	movf	setDimmerLights_ErrorClose@i+1,w
 15628  080D  3A80               	xorlw	128
 15629  080E  00B1               	movwf	??_setDimmerLights_ErrorClose
 15630  080F  3080               	movlw	128
 15631  0810  0231               	subwf	??_setDimmerLights_ErrorClose,w
 15632  0811  1D03               	skipz
 15633  0812  2815               	goto	u5395
 15634  0813  0832               	movf	setDimmerLights_ErrorClose@count,w
 15635  0814  0234               	subwf	setDimmerLights_ErrorClose@i,w
 15636  0815                     u5395:	
 15637  0815  1803               	btfsc	3,0
 15638  0816  0008               	return
 15639                           
 15640                           ;Dimmer_B1.c: 586: DimmerLightsPointSelect(i + 1);
 15641  0817  0020               	movlb	0	; select bank0
 15642  0818  0834               	movf	setDimmerLights_ErrorClose@i,w
 15643  0819  3E01               	addlw	1
 15644  081A  319C  24F1  3188   	fcall	_DimmerLightsPointSelect
 15645                           
 15646                           ;Dimmer_B1.c: 587: if (getDimmerLights_Status(i + 1) == 1) {
 15647  081D  0020               	movlb	0	; select bank0
 15648  081E  0834               	movf	setDimmerLights_ErrorClose@i,w
 15649  081F  3E01               	addlw	1
 15650  0820  319C  2445  3188   	fcall	_getDimmerLights_Status
 15651  0823  3A01               	xorlw	1
 15652  0824  1D03               	skipz
 15653  0825  2837               	goto	l6452
 15654                           
 15655                           ;Dimmer_B1.c: 588: DimmerLights->SwFlag = 1;
 15656  0826  0020               	movlb	0	; select bank0
 15657  0827  086F               	movf	_DimmerLights,w
 15658  0828  3E09               	addlw	9
 15659  0829  0086               	movwf	6
 15660  082A  3001               	movlw	1	; select bank2/3
 15661  082B  0087               	movwf	7
 15662  082C  1701               	bsf	1,6
 15663                           
 15664                           ;Dimmer_B1.c: 589: DimmerLights->Status = 0;
 15665  082D  086F               	movf	_DimmerLights,w
 15666  082E  0086               	movwf	6
 15667  082F  3001               	movlw	1	; select bank2/3
 15668  0830  0087               	movwf	7
 15669  0831  1281               	bcf	1,5
 15670                           
 15671                           ;Dimmer_B1.c: 590: setDimmerLights_SwOff(i + 1);
 15672  0832  0834               	movf	setDimmerLights_ErrorClose@i,w
 15673  0833  3E01               	addlw	1
 15674  0834  3194  245B  3188   	fcall	_setDimmerLights_SwOff
 15675  0837                     l6452:	
 15676  0837  3001               	movlw	1
 15677  0838  0020               	movlb	0	; select bank0
 15678  0839  07B4               	addwf	setDimmerLights_ErrorClose@i,f
 15679  083A  3000               	movlw	0
 15680  083B  3DB5               	addwfc	setDimmerLights_ErrorClose@i+1,f
 15681  083C  280C               	goto	l6454
 15682  083D                     l6456:	
 15683                           ;Dimmer_B1.c: 591: }
 15684                           ;Dimmer_B1.c: 592: }
 15685                           ;Dimmer_B1.c: 593: } else {
 15686                           
 15687                           
 15688                           ;Dimmer_B1.c: 594: DimmerLightsPointSelect(lights);
 15689  083D  0020               	movlb	0	; select bank0
 15690  083E  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15691  083F  319C  24F1  3188   	fcall	_DimmerLightsPointSelect
 15692                           
 15693                           ;Dimmer_B1.c: 595: if (getDimmerLights_Status(lights) == 1) {
 15694  0842  0020               	movlb	0	; select bank0
 15695  0843  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15696  0844  319C  2445  3188   	fcall	_getDimmerLights_Status
 15697  0847  3A01               	xorlw	1
 15698  0848  1D03               	skipz
 15699  0849  0008               	return
 15700                           
 15701                           ;Dimmer_B1.c: 596: DimmerLights->SwFlag = 1;
 15702  084A  0020               	movlb	0	; select bank0
 15703  084B  086F               	movf	_DimmerLights,w
 15704  084C  3E09               	addlw	9
 15705  084D  0086               	movwf	6
 15706  084E  3001               	movlw	1	; select bank2/3
 15707  084F  0087               	movwf	7
 15708  0850  1701               	bsf	1,6
 15709                           
 15710                           ;Dimmer_B1.c: 597: DimmerLights->Status = 0;
 15711  0851  086F               	movf	_DimmerLights,w
 15712  0852  0086               	movwf	6
 15713  0853  3001               	movlw	1	; select bank2/3
 15714  0854  0087               	movwf	7
 15715  0855  1281               	bcf	1,5
 15716                           
 15717                           ;Dimmer_B1.c: 598: setDimmerLights_SwOff(lights);
 15718  0856  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15719  0857  3194  245B         	fcall	_setDimmerLights_SwOff
 15720  0859  0008               	return
 15721  085A                     __end_of_setDimmerLights_ErrorClose:	
 15722                           
 15723                           	psect	text96
 15724  145B                     __ptext96:	
 15725 ;; *************** function _setDimmerLights_SwOff *****************
 15726 ;; Defined at:
 15727 ;;		line 536 in file "../src/Dimmer_B1.c"
 15728 ;; Parameters:    Size  Location     Type
 15729 ;;  sw              1    wreg     unsigned char 
 15730 ;; Auto vars:     Size  Location     Type
 15731 ;;  sw              1   16[BANK0 ] unsigned char 
 15732 ;;  command         1   15[BANK0 ] unsigned char 
 15733 ;; Return value:  Size  Location     Type
 15734 ;;		None               void
 15735 ;; Registers used:
 15736 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15737 ;; Tracked objects:
 15738 ;;		On entry : 0/0
 15739 ;;		On exit  : 0/0
 15740 ;;		Unchanged: 0/0
 15741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15743 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15745 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15746 ;;Total ram usage:        2 bytes
 15747 ;; Hardware stack levels used:    1
 15748 ;; Hardware stack levels required when called:    8
 15749 ;; This function calls:
 15750 ;;		_DimmerLightsPointSelect
 15751 ;;		_getDelayOff_GO
 15752 ;;		_setDelayOff_GO
 15753 ;;		_setDimmerLights_Trigger
 15754 ;;		_setDimmerLights_TriggerAdj
 15755 ;; This function is called by:
 15756 ;;		_setDimmerLights_ErrorClose
 15757 ;;		_setRFSW_Control
 15758 ;;		_setSw_Main
 15759 ;; This function uses a non-reentrant model
 15760 ;;
 15761                           
 15762                           
 15763                           ;psect for function _setDimmerLights_SwOff
 15764  145B                     _setDimmerLights_SwOff:	
 15765                           
 15766                           ;incstack = 0
 15767                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15768                           ;setDimmerLights_SwOff@sw stored from wreg
 15769  145B  0020               	movlb	0	; select bank0
 15770  145C  00B0               	movwf	setDimmerLights_SwOff@sw
 15771                           
 15772                           ;Dimmer_B1.c: 537: DimmerLightsPointSelect(sw);
 15773  145D  0830               	movf	setDimmerLights_SwOff@sw,w
 15774  145E  319C  24F1  3194   	fcall	_DimmerLightsPointSelect
 15775                           
 15776                           ;Dimmer_B1.c: 538: char command = DimmerLights->Status == 1 ? 1 : 0;
 15777  1461  0020               	movlb	0	; select bank0
 15778  1462  086F               	movf	_DimmerLights,w
 15779  1463  0086               	movwf	6
 15780  1464  3001               	movlw	1	; select bank2/3
 15781  1465  0087               	movwf	7
 15782  1466  3000               	movlw	0
 15783  1467  1A81               	btfsc	1,5
 15784  1468  3001               	movlw	1
 15785  1469  00AF               	movwf	setDimmerLights_SwOff@command
 15786                           
 15787                           ;Dimmer_B1.c: 539: if (DimmerLights->SwFlag == 1) {
 15788  146A  086F               	movf	_DimmerLights,w
 15789  146B  3E09               	addlw	9
 15790  146C  0086               	movwf	6
 15791  146D  3001               	movlw	1	; select bank2/3
 15792  146E  0087               	movwf	7
 15793  146F  1F01               	btfss	1,6
 15794  1470  0008               	return
 15795                           
 15796                           ;Dimmer_B1.c: 540: DimmerLights->SwFlag = 0;
 15797  1471  086F               	movf	_DimmerLights,w
 15798  1472  3E09               	addlw	9
 15799  1473  0086               	movwf	6
 15800  1474  3001               	movlw	1	; select bank2/3
 15801  1475  0087               	movwf	7
 15802  1476  1301               	bcf	1,6
 15803                           
 15804                           ;Dimmer_B1.c: 541: if (DimmerLights->Status == 1) {
 15805  1477  086F               	movf	_DimmerLights,w
 15806  1478  0086               	movwf	6
 15807  1479  3001               	movlw	1	; select bank2/3
 15808  147A  0087               	movwf	7
 15809  147B  1E81               	btfss	1,5
 15810  147C  2C8F               	goto	l6312
 15811                           
 15812                           ;Dimmer_B1.c: 542: if (DimmerLights->SwAdj == 1) {
 15813  147D  086F               	movf	_DimmerLights,w
 15814  147E  3E09               	addlw	9
 15815  147F  0086               	movwf	6
 15816  1480  3001               	movlw	1	; select bank2/3
 15817  1481  0087               	movwf	7
 15818  1482  1F81               	btfss	1,7
 15819  1483  0008               	return
 15820                           
 15821                           ;Dimmer_B1.c: 543: DimmerLights->SwAdj = 0;
 15822  1484  086F               	movf	_DimmerLights,w
 15823  1485  3E09               	addlw	9
 15824  1486  0086               	movwf	6
 15825  1487  3001               	movlw	1	; select bank2/3
 15826  1488  0087               	movwf	7
 15827  1489  1381               	bcf	1,7
 15828                           
 15829                           ;Dimmer_B1.c: 544: setDimmerLights_TriggerAdj(sw, 0);
 15830  148A  01A2               	clrf	setDimmerLights_TriggerAdj@command
 15831  148B  0830               	movf	setDimmerLights_SwOff@sw,w
 15832  148C  319F  2718         	fcall	_setDimmerLights_TriggerAdj
 15833                           
 15834                           ;Dimmer_B1.c: 545: }
 15835                           ;Dimmer_B1.c: 546: } else {
 15836  148E  0008               	return
 15837  148F                     l6312:	
 15838                           
 15839                           ;Dimmer_B1.c: 547: setDimmerLights_Trigger(sw, 0);
 15840  148F  0020               	movlb	0	; select bank0
 15841  1490  01A2               	clrf	setDimmerLights_Trigger@command
 15842  1491  0830               	movf	setDimmerLights_SwOff@sw,w
 15843  1492  319E  26BC  3194   	fcall	_setDimmerLights_Trigger
 15844                           
 15845                           ;Dimmer_B1.c: 549: if (getDelayOff_GO(sw) == 1) {
 15846  1495  0020               	movlb	0	; select bank0
 15847  1496  0830               	movf	setDimmerLights_SwOff@sw,w
 15848  1497  319C  2455  3194   	fcall	_getDelayOff_GO
 15849  149A  3A01               	xorlw	1
 15850  149B  1D03               	skipz
 15851  149C  0008               	return
 15852                           
 15853                           ;Dimmer_B1.c: 550: setDelayOff_GO(sw, 0, 0);
 15854  149D  0020               	movlb	0	; select bank0
 15855  149E  01AA               	clrf	setDelayOff_GO@command
 15856  149F  01AB               	clrf	setDelayOff_GO@value
 15857  14A0  0830               	movf	setDimmerLights_SwOff@sw,w
 15858  14A1  3197  27A3         	fcall	_setDelayOff_GO
 15859  14A3  0008               	return
 15860  14A4                     __end_of_setDimmerLights_SwOff:	
 15861                           
 15862                           	psect	text97
 15863  1F18                     __ptext97:	
 15864 ;; *************** function _setDimmerLights_TriggerAdj *****************
 15865 ;; Defined at:
 15866 ;;		line 785 in file "../src/Dimmer_B1.c"
 15867 ;; Parameters:    Size  Location     Type
 15868 ;;  lights          1    wreg     unsigned char 
 15869 ;;  command         1    2[BANK0 ] unsigned char 
 15870 ;; Auto vars:     Size  Location     Type
 15871 ;;  lights          1    4[BANK0 ] unsigned char 
 15872 ;; Return value:  Size  Location     Type
 15873 ;;		None               void
 15874 ;; Registers used:
 15875 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15876 ;; Tracked objects:
 15877 ;;		On entry : 0/0
 15878 ;;		On exit  : 0/0
 15879 ;;		Unchanged: 0/0
 15880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15881 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15882 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15883 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15884 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15885 ;;Total ram usage:        3 bytes
 15886 ;; Hardware stack levels used:    1
 15887 ;; Hardware stack levels required when called:    6
 15888 ;; This function calls:
 15889 ;;		_DimmerLightsPointSelect
 15890 ;; This function is called by:
 15891 ;;		_setDimmerLights_SwOff
 15892 ;;		_setDimmerLights_AdjControl
 15893 ;; This function uses a non-reentrant model
 15894 ;;
 15895                           
 15896                           
 15897                           ;psect for function _setDimmerLights_TriggerAdj
 15898  1F18                     _setDimmerLights_TriggerAdj:	
 15899                           
 15900                           ;incstack = 0
 15901                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15902                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 15903  1F18  0020               	movlb	0	; select bank0
 15904  1F19  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 15905                           
 15906                           ;Dimmer_B1.c: 786: DimmerLightsPointSelect(lights);
 15907  1F1A  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 15908  1F1B  319C  24F1         	fcall	_DimmerLightsPointSelect
 15909                           
 15910                           ;Dimmer_B1.c: 787: DimmerLights->TriggerAdj = 1;
 15911  1F1D  0020               	movlb	0	; select bank0
 15912  1F1E  086F               	movf	_DimmerLights,w
 15913  1F1F  3E08               	addlw	8
 15914  1F20  0086               	movwf	6
 15915  1F21  3001               	movlw	1	; select bank2/3
 15916  1F22  0087               	movwf	7
 15917  1F23  1601               	bsf	1,4
 15918                           
 15919                           ;Dimmer_B1.c: 788: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 15920  1F24  0822               	movf	setDimmerLights_TriggerAdj@command,w
 15921  1F25  3A01               	xorlw	1
 15922  1F26  3000               	movlw	0
 15923  1F27  1903               	skipnz
 15924  1F28  3001               	movlw	1
 15925  1F29  00A3               	movwf	??_setDimmerLights_TriggerAdj
 15926  1F2A  086F               	movf	_DimmerLights,w
 15927  1F2B  3E08               	addlw	8
 15928  1F2C  0086               	movwf	6
 15929  1F2D  3001               	movlw	1	; select bank2/3
 15930  1F2E  0087               	movwf	7
 15931  1F2F  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15932  1F30  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15933  1F31  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15934  1F32  0801               	movf	1,w
 15935  1F33  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15936  1F34  39F7               	andlw	-9
 15937  1F35  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15938  1F36  0081               	movwf	1
 15939  1F37  0008               	return
 15940  1F38                     __end_of_setDimmerLights_TriggerAdj:	
 15941                           
 15942                           	psect	text98
 15943  1EBC                     __ptext98:	
 15944 ;; *************** function _setDimmerLights_Trigger *****************
 15945 ;; Defined at:
 15946 ;;		line 779 in file "../src/Dimmer_B1.c"
 15947 ;; Parameters:    Size  Location     Type
 15948 ;;  lights          1    wreg     unsigned char 
 15949 ;;  command         1    2[BANK0 ] unsigned char 
 15950 ;; Auto vars:     Size  Location     Type
 15951 ;;  lights          1    4[BANK0 ] unsigned char 
 15952 ;; Return value:  Size  Location     Type
 15953 ;;		None               void
 15954 ;; Registers used:
 15955 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15956 ;; Tracked objects:
 15957 ;;		On entry : 0/0
 15958 ;;		On exit  : 0/0
 15959 ;;		Unchanged: 0/0
 15960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15961 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15962 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15963 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15964 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15965 ;;Total ram usage:        3 bytes
 15966 ;; Hardware stack levels used:    1
 15967 ;; Hardware stack levels required when called:    6
 15968 ;; This function calls:
 15969 ;;		_DimmerLightsPointSelect
 15970 ;; This function is called by:
 15971 ;;		_setDimmerLights_SwOn
 15972 ;;		_setDimmerLights_SwOff
 15973 ;; This function uses a non-reentrant model
 15974 ;;
 15975                           
 15976                           
 15977                           ;psect for function _setDimmerLights_Trigger
 15978  1EBC                     _setDimmerLights_Trigger:	
 15979                           
 15980                           ;incstack = 0
 15981                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15982                           ;setDimmerLights_Trigger@lights stored from wreg
 15983  1EBC  0020               	movlb	0	; select bank0
 15984  1EBD  00A4               	movwf	setDimmerLights_Trigger@lights
 15985                           
 15986                           ;Dimmer_B1.c: 780: DimmerLightsPointSelect(lights);
 15987  1EBE  0824               	movf	setDimmerLights_Trigger@lights,w
 15988  1EBF  319C  24F1         	fcall	_DimmerLightsPointSelect
 15989                           
 15990                           ;Dimmer_B1.c: 781: DimmerLights->Trigger = 1;
 15991  1EC1  0020               	movlb	0	; select bank0
 15992  1EC2  086F               	movf	_DimmerLights,w
 15993  1EC3  3E08               	addlw	8
 15994  1EC4  0086               	movwf	6
 15995  1EC5  3001               	movlw	1	; select bank2/3
 15996  1EC6  0087               	movwf	7
 15997  1EC7  1501               	bsf	1,2
 15998                           
 15999                           ;Dimmer_B1.c: 782: DimmerLights->Switch = command == 1 ? 1 : 0;
 16000  1EC8  0822               	movf	setDimmerLights_Trigger@command,w
 16001  1EC9  3A01               	xorlw	1
 16002  1ECA  3000               	movlw	0
 16003  1ECB  1903               	skipnz
 16004  1ECC  3001               	movlw	1
 16005  1ECD  00A3               	movwf	??_setDimmerLights_Trigger
 16006  1ECE  086F               	movf	_DimmerLights,w
 16007  1ECF  3E08               	addlw	8
 16008  1ED0  0086               	movwf	6
 16009  1ED1  3001               	movlw	1	; select bank2/3
 16010  1ED2  0087               	movwf	7
 16011  1ED3  0DA3               	rlf	??_setDimmerLights_Trigger,f
 16012  1ED4  0801               	movf	1,w
 16013  1ED5  0623               	xorwf	??_setDimmerLights_Trigger,w
 16014  1ED6  39FD               	andlw	-3
 16015  1ED7  0623               	xorwf	??_setDimmerLights_Trigger,w
 16016  1ED8  0081               	movwf	1
 16017  1ED9  0008               	return
 16018  1EDA                     __end_of_setDimmerLights_Trigger:	
 16019                           
 16020                           	psect	text99
 16021  17A3                     __ptext99:	
 16022 ;; *************** function _setDelayOff_GO *****************
 16023 ;; Defined at:
 16024 ;;		line 83 in file "../src/DelayOff_B1.c"
 16025 ;; Parameters:    Size  Location     Type
 16026 ;;  sw              1    wreg     unsigned char 
 16027 ;;  command         1   10[BANK0 ] unsigned char 
 16028 ;;  value           1   11[BANK0 ] unsigned char 
 16029 ;; Auto vars:     Size  Location     Type
 16030 ;;  sw              1   14[BANK0 ] unsigned char 
 16031 ;; Return value:  Size  Location     Type
 16032 ;;		None               void
 16033 ;; Registers used:
 16034 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16035 ;; Tracked objects:
 16036 ;;		On entry : 0/0
 16037 ;;		On exit  : 0/0
 16038 ;;		Unchanged: 0/0
 16039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16040 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16041 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16042 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16043 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16044 ;;Total ram usage:        5 bytes
 16045 ;; Hardware stack levels used:    1
 16046 ;; Hardware stack levels required when called:    7
 16047 ;; This function calls:
 16048 ;;		_DelayOffPointSelect
 16049 ;;		_DelayTimejudge
 16050 ;; This function is called by:
 16051 ;;		_setDimmerLights_SwOff
 16052 ;;		_setRFSW_Control
 16053 ;; This function uses a non-reentrant model
 16054 ;;
 16055                           
 16056                           
 16057                           ;psect for function _setDelayOff_GO
 16058  17A3                     _setDelayOff_GO:	
 16059                           
 16060                           ;incstack = 0
 16061                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16062                           ;setDelayOff_GO@sw stored from wreg
 16063  17A3  0020               	movlb	0	; select bank0
 16064  17A4  00AE               	movwf	setDelayOff_GO@sw
 16065                           
 16066                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 16067  17A5  082E               	movf	setDelayOff_GO@sw,w
 16068  17A6  319D  2565  3197   	fcall	_DelayOffPointSelect
 16069                           
 16070                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 16071  17A9  0020               	movlb	0	; select bank0
 16072  17AA  082A               	movf	setDelayOff_GO@command,w
 16073  17AB  3A01               	xorlw	1
 16074  17AC  3000               	movlw	0
 16075  17AD  1903               	skipnz
 16076  17AE  3001               	movlw	1
 16077  17AF  00AC               	movwf	??_setDelayOff_GO
 16078  17B0  0878               	movf	_DelayOff,w
 16079  17B1  0086               	movwf	6
 16080  17B2  3001               	movlw	1	; select bank2/3
 16081  17B3  0087               	movwf	7
 16082  17B4  0DAC               	rlf	??_setDelayOff_GO,f
 16083  17B5  0801               	movf	1,w
 16084  17B6  062C               	xorwf	??_setDelayOff_GO,w
 16085  17B7  39FD               	andlw	-3
 16086  17B8  062C               	xorwf	??_setDelayOff_GO,w
 16087  17B9  0081               	movwf	1
 16088                           
 16089                           ;DelayOff_B1.c: 89: if (command == 1) {
 16090  17BA  082A               	movf	setDelayOff_GO@command,w
 16091  17BB  3A01               	xorlw	1
 16092  17BC  1D03               	skipz
 16093  17BD  2FE8               	goto	l6222
 16094                           
 16095                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 16096  17BE  082B               	movf	setDelayOff_GO@value,w
 16097  17BF  3191  212F  3197   	fcall	_DelayTimejudge
 16098  17C2  0020               	movlb	0	; select bank0
 16099  17C3  00AC               	movwf	??_setDelayOff_GO
 16100  17C4  0A78               	incf	_DelayOff,w
 16101  17C5  0086               	movwf	6
 16102  17C6  3001               	movlw	1	; select bank2/3
 16103  17C7  0087               	movwf	7
 16104  17C8  082C               	movf	??_setDelayOff_GO,w
 16105  17C9  0081               	movwf	1
 16106                           
 16107                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 16108  17CA  300F               	movlw	15
 16109  17CB  052B               	andwf	setDelayOff_GO@value,w
 16110  17CC  00AC               	movwf	??_setDelayOff_GO
 16111  17CD  082C               	movf	??_setDelayOff_GO,w
 16112  17CE  3A05               	xorlw	5
 16113  17CF  1903               	skipnz
 16114  17D0  2FD5               	goto	l6216
 16115  17D1  082B               	movf	setDelayOff_GO@value,w
 16116  17D2  390F               	andlw	15
 16117  17D3  1D03               	btfss	3,2
 16118  17D4  2FDB               	goto	l6220
 16119  17D5                     l6216:	
 16120  17D5  3026               	movlw	38
 16121  17D6  022B               	subwf	setDelayOff_GO@value,w
 16122  17D7  1803               	skipnc
 16123  17D8  2FDB               	goto	l6220
 16124                           
 16125                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
 16126  17D9  082B               	movf	setDelayOff_GO@value,w
 16127  17DA  2FDC               	goto	L9
 16128  17DB                     l6220:	
 16129                           ;DelayOff_B1.c: 93: } else {
 16130                           
 16131                           
 16132                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
 16133  17DB  3005               	movlw	5
 16134  17DC                     L9:	
 16135  17DC  00AC               	movwf	??_setDelayOff_GO
 16136  17DD  082E               	movf	setDelayOff_GO@sw,w
 16137  17DE  3E1A               	addlw	26
 16138  17DF  076E               	addwf	_product,w
 16139  17E0  00AD               	movwf	??_setDelayOff_GO+1
 16140  17E1  082D               	movf	??_setDelayOff_GO+1,w
 16141  17E2  0086               	movwf	6
 16142  17E3  3002               	movlw	2	; select bank4/5
 16143  17E4  0087               	movwf	7
 16144  17E5  082C               	movf	??_setDelayOff_GO,w
 16145  17E6  0081               	movwf	1
 16146                           
 16147                           ;DelayOff_B1.c: 95: }
 16148                           ;DelayOff_B1.c: 96: } else {
 16149  17E7  2FF1               	goto	l6224
 16150  17E8                     l6222:	
 16151                           
 16152                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
 16153  17E8  082E               	movf	setDelayOff_GO@sw,w
 16154  17E9  3E1A               	addlw	26
 16155  17EA  076E               	addwf	_product,w
 16156  17EB  00AC               	movwf	??_setDelayOff_GO
 16157  17EC  082C               	movf	??_setDelayOff_GO,w
 16158  17ED  0086               	movwf	6
 16159  17EE  3002               	movlw	2	; select bank4/5
 16160  17EF  0087               	movwf	7
 16161  17F0  0181               	clrf	1
 16162  17F1                     l6224:	
 16163                           
 16164                           ;DelayOff_B1.c: 98: }
 16165                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 16166  17F1  0878               	movf	_DelayOff,w
 16167  17F2  3E02               	addlw	2
 16168  17F3  0086               	movwf	6
 16169  17F4  3001               	movlw	1	; select bank2/3
 16170  17F5  0087               	movwf	7
 16171  17F6  3000               	movlw	0
 16172  17F7  3FC0               	movwi [0]fsr1
 16173  17F8  3FC1               	movwi [1]fsr1
 16174                           
 16175                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 16176  17F9  0878               	movf	_DelayOff,w
 16177  17FA  3E04               	addlw	4
 16178  17FB  0086               	movwf	6
 16179  17FC  3001               	movlw	1	; select bank2/3
 16180  17FD  0087               	movwf	7
 16181  17FE  0181               	clrf	1
 16182  17FF  0008               	return
 16183  1800                     __end_of_setDelayOff_GO:	
 16184                           
 16185                           	psect	text100
 16186  112F                     __ptext100:	
 16187 ;; *************** function _DelayTimejudge *****************
 16188 ;; Defined at:
 16189 ;;		line 112 in file "../src/DelayOff_B1.c"
 16190 ;; Parameters:    Size  Location     Type
 16191 ;;  value           1    wreg     unsigned char 
 16192 ;; Auto vars:     Size  Location     Type
 16193 ;;  value           1    9[BANK0 ] unsigned char 
 16194 ;;  k               1    8[BANK0 ] unsigned char 
 16195 ;;  j               1    7[BANK0 ] unsigned char 
 16196 ;;  i               1    6[BANK0 ] unsigned char 
 16197 ;; Return value:  Size  Location     Type
 16198 ;;                  1    wreg      unsigned char 
 16199 ;; Registers used:
 16200 ;;		wreg, status,2, status,0, pclath, cstack
 16201 ;; Tracked objects:
 16202 ;;		On entry : 0/0
 16203 ;;		On exit  : 0/0
 16204 ;;		Unchanged: 0/0
 16205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16207 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16208 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16209 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16210 ;;Total ram usage:        6 bytes
 16211 ;; Hardware stack levels used:    1
 16212 ;; Hardware stack levels required when called:    6
 16213 ;; This function calls:
 16214 ;;		___bmul
 16215 ;; This function is called by:
 16216 ;;		_setDelayOff_GO
 16217 ;; This function uses a non-reentrant model
 16218 ;;
 16219                           
 16220                           
 16221                           ;psect for function _DelayTimejudge
 16222  112F                     _DelayTimejudge:	
 16223                           
 16224                           ;incstack = 0
 16225                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16226                           ;DelayTimejudge@value stored from wreg
 16227  112F  0020               	movlb	0	; select bank0
 16228  1130  00A9               	movwf	DelayTimejudge@value
 16229                           
 16230                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16231  1131  3005               	movlw	5
 16232  1132  00A4               	movwf	??_DelayTimejudge
 16233  1133  0824               	movf	??_DelayTimejudge,w
 16234  1134  00A6               	movwf	DelayTimejudge@i
 16235  1135  01A7               	clrf	DelayTimejudge@j
 16236  1136  01A8               	clrf	DelayTimejudge@k
 16237                           
 16238                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16239  1137  3031               	movlw	49
 16240  1138  0229               	subwf	DelayTimejudge@value,w
 16241  1139  1803               	skipnc
 16242  113A  2957               	goto	l6114
 16243                           
 16244                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16245  113B  0829               	movf	DelayTimejudge@value,w
 16246  113C  390F               	andlw	15
 16247  113D  00A4               	movwf	??_DelayTimejudge
 16248  113E  0824               	movf	??_DelayTimejudge,w
 16249  113F  00A7               	movwf	DelayTimejudge@j
 16250                           
 16251                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16252  1140  0829               	movf	DelayTimejudge@value,w
 16253  1141  00A4               	movwf	??_DelayTimejudge
 16254  1142  3004               	movlw	4
 16255  1143                     u4965:	
 16256  1143  36A4               	lsrf	??_DelayTimejudge,f
 16257  1144  0B89               	decfsz	9,f
 16258  1145  2943               	goto	u4965
 16259  1146  0824               	movf	??_DelayTimejudge,w
 16260  1147  390F               	andlw	15
 16261  1148  00A5               	movwf	??_DelayTimejudge+1
 16262  1149  0825               	movf	??_DelayTimejudge+1,w
 16263  114A  00A8               	movwf	DelayTimejudge@k
 16264                           
 16265                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16266  114B  300A               	movlw	10
 16267  114C  00A4               	movwf	??_DelayTimejudge
 16268  114D  0824               	movf	??_DelayTimejudge,w
 16269  114E  00A0               	movwf	___bmul@multiplicand
 16270  114F  0828               	movf	DelayTimejudge@k,w
 16271  1150  319C  24BB         	fcall	___bmul
 16272  1152  0020               	movlb	0	; select bank0
 16273  1153  0727               	addwf	DelayTimejudge@j,w
 16274  1154  00A5               	movwf	??_DelayTimejudge+1
 16275  1155  0825               	movf	??_DelayTimejudge+1,w
 16276  1156  00A6               	movwf	DelayTimejudge@i
 16277  1157                     l6114:	
 16278                           
 16279                           ;DelayOff_B1.c: 118: }
 16280                           ;DelayOff_B1.c: 139: return i;
 16281  1157  0826               	movf	DelayTimejudge@i,w
 16282  1158  0008               	return
 16283  1159                     __end_of_DelayTimejudge:	
 16284                           
 16285                           	psect	text101
 16286  1CBB                     __ptext101:	
 16287 ;; *************** function ___bmul *****************
 16288 ;; Defined at:
 16289 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16290 ;; Parameters:    Size  Location     Type
 16291 ;;  multiplier      1    wreg     unsigned char 
 16292 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16293 ;; Auto vars:     Size  Location     Type
 16294 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16295 ;;  product         1    2[BANK0 ] unsigned char 
 16296 ;; Return value:  Size  Location     Type
 16297 ;;                  1    wreg      unsigned char 
 16298 ;; Registers used:
 16299 ;;		wreg, status,2, status,0
 16300 ;; Tracked objects:
 16301 ;;		On entry : 0/0
 16302 ;;		On exit  : 0/0
 16303 ;;		Unchanged: 0/0
 16304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16305 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16306 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16307 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16308 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16309 ;;Total ram usage:        4 bytes
 16310 ;; Hardware stack levels used:    1
 16311 ;; Hardware stack levels required when called:    5
 16312 ;; This function calls:
 16313 ;;		Nothing
 16314 ;; This function is called by:
 16315 ;;		_DelayTimejudge
 16316 ;; This function uses a non-reentrant model
 16317 ;;
 16318                           
 16319                           
 16320                           ;psect for function ___bmul
 16321  1CBB                     ___bmul:	
 16322                           
 16323                           ;incstack = 0
 16324                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16325                           ;___bmul@multiplier stored from wreg
 16326  1CBB  0020               	movlb	0	; select bank0
 16327  1CBC  00A3               	movwf	___bmul@multiplier
 16328  1CBD  01A2               	clrf	___bmul@product
 16329  1CBE                     l5852:	
 16330  1CBE  1C23               	btfss	___bmul@multiplier,0
 16331  1CBF  2CC4               	goto	l5856
 16332  1CC0  0820               	movf	___bmul@multiplicand,w
 16333  1CC1  00A1               	movwf	??___bmul
 16334  1CC2  0821               	movf	??___bmul,w
 16335  1CC3  07A2               	addwf	___bmul@product,f
 16336  1CC4                     l5856:	
 16337  1CC4  1003               	clrc
 16338  1CC5  0DA0               	rlf	___bmul@multiplicand,f
 16339  1CC6  1003               	clrc
 16340  1CC7  0CA3               	rrf	___bmul@multiplier,f
 16341  1CC8  08A3               	movf	___bmul@multiplier,f
 16342  1CC9  1D03               	skipz
 16343  1CCA  2CBE               	goto	l5852
 16344  1CCB  0822               	movf	___bmul@product,w
 16345  1CCC  0008               	return
 16346  1CCD                     __end_of___bmul:	
 16347                           
 16348                           	psect	text102
 16349  1C55                     __ptext102:	
 16350 ;; *************** function _getDelayOff_GO *****************
 16351 ;; Defined at:
 16352 ;;		line 105 in file "../src/DelayOff_B1.c"
 16353 ;; Parameters:    Size  Location     Type
 16354 ;;  sw              1    wreg     unsigned char 
 16355 ;; Auto vars:     Size  Location     Type
 16356 ;;  sw              1    2[BANK0 ] unsigned char 
 16357 ;;  go              1    3[BANK0 ] unsigned char 
 16358 ;; Return value:  Size  Location     Type
 16359 ;;                  1    wreg      unsigned char 
 16360 ;; Registers used:
 16361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16362 ;; Tracked objects:
 16363 ;;		On entry : 0/0
 16364 ;;		On exit  : 0/0
 16365 ;;		Unchanged: 0/0
 16366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16368 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16370 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16371 ;;Total ram usage:        2 bytes
 16372 ;; Hardware stack levels used:    1
 16373 ;; Hardware stack levels required when called:    6
 16374 ;; This function calls:
 16375 ;;		_DelayOffPointSelect
 16376 ;; This function is called by:
 16377 ;;		_setDimmerLights_SwOff
 16378 ;;		_setRFSW_Control
 16379 ;; This function uses a non-reentrant model
 16380 ;;
 16381                           
 16382                           
 16383                           ;psect for function _getDelayOff_GO
 16384  1C55                     _getDelayOff_GO:	
 16385                           
 16386                           ;incstack = 0
 16387                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16388                           ;getDelayOff_GO@sw stored from wreg
 16389  1C55  0020               	movlb	0	; select bank0
 16390  1C56  00A2               	movwf	getDelayOff_GO@sw
 16391                           
 16392                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16393  1C57  0822               	movf	getDelayOff_GO@sw,w
 16394  1C58  319D  2565         	fcall	_DelayOffPointSelect
 16395                           
 16396                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16397  1C5A  0878               	movf	_DelayOff,w
 16398  1C5B  0086               	movwf	6
 16399  1C5C  3001               	movlw	1	; select bank2/3
 16400  1C5D  0087               	movwf	7
 16401  1C5E  3000               	movlw	0
 16402  1C5F  1881               	btfsc	1,1
 16403  1C60  3001               	movlw	1
 16404  1C61  0020               	movlb	0	; select bank0
 16405  1C62  00A3               	movwf	getDelayOff_GO@go
 16406                           
 16407                           ;DelayOff_B1.c: 108: return go;
 16408  1C63  0823               	movf	getDelayOff_GO@go,w
 16409  1C64  0008               	return
 16410  1C65                     __end_of_getDelayOff_GO:	
 16411                           
 16412                           	psect	text103
 16413  1C45                     __ptext103:	
 16414 ;; *************** function _getDimmerLights_Status *****************
 16415 ;; Defined at:
 16416 ;;		line 457 in file "../src/Dimmer_B1.c"
 16417 ;; Parameters:    Size  Location     Type
 16418 ;;  lights          1    wreg     unsigned char 
 16419 ;; Auto vars:     Size  Location     Type
 16420 ;;  lights          1    2[BANK0 ] unsigned char 
 16421 ;;  status          1    3[BANK0 ] unsigned char 
 16422 ;; Return value:  Size  Location     Type
 16423 ;;                  1    wreg      unsigned char 
 16424 ;; Registers used:
 16425 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16426 ;; Tracked objects:
 16427 ;;		On entry : 0/0
 16428 ;;		On exit  : 0/0
 16429 ;;		Unchanged: 0/0
 16430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16432 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16434 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16435 ;;Total ram usage:        2 bytes
 16436 ;; Hardware stack levels used:    1
 16437 ;; Hardware stack levels required when called:    6
 16438 ;; This function calls:
 16439 ;;		_DimmerLightsPointSelect
 16440 ;; This function is called by:
 16441 ;;		_setDimmerLights_ErrorClose
 16442 ;;		_setRFSW_Control
 16443 ;;		_setRFSW_AdjControl
 16444 ;;		_getMain_LightsStatus
 16445 ;; This function uses a non-reentrant model
 16446 ;;
 16447                           
 16448                           
 16449                           ;psect for function _getDimmerLights_Status
 16450  1C45                     _getDimmerLights_Status:	
 16451                           
 16452                           ;incstack = 0
 16453                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16454                           ;getDimmerLights_Status@lights stored from wreg
 16455  1C45  0020               	movlb	0	; select bank0
 16456  1C46  00A2               	movwf	getDimmerLights_Status@lights
 16457                           
 16458                           ;Dimmer_B1.c: 458: DimmerLightsPointSelect(lights);
 16459  1C47  0822               	movf	getDimmerLights_Status@lights,w
 16460  1C48  319C  24F1         	fcall	_DimmerLightsPointSelect
 16461                           
 16462                           ;Dimmer_B1.c: 459: char status = DimmerLights->Status == 1 ? 1 : 0;
 16463  1C4A  0020               	movlb	0	; select bank0
 16464  1C4B  086F               	movf	_DimmerLights,w
 16465  1C4C  0086               	movwf	6
 16466  1C4D  3001               	movlw	1	; select bank2/3
 16467  1C4E  0087               	movwf	7
 16468  1C4F  3000               	movlw	0
 16469  1C50  1A81               	btfsc	1,5
 16470  1C51  3001               	movlw	1
 16471  1C52  00A3               	movwf	getDimmerLights_Status@status
 16472                           
 16473                           ;Dimmer_B1.c: 460: return status;
 16474  1C53  0823               	movf	getDimmerLights_Status@status,w
 16475  1C54  0008               	return
 16476  1C55                     __end_of_getDimmerLights_Status:	
 16477                           
 16478                           	psect	text104
 16479  1CF1                     __ptext104:	
 16480 ;; *************** function _DimmerLightsPointSelect *****************
 16481 ;; Defined at:
 16482 ;;		line 322 in file "../src/Dimmer_B1.c"
 16483 ;; Parameters:    Size  Location     Type
 16484 ;;  lights          1    wreg     unsigned char 
 16485 ;; Auto vars:     Size  Location     Type
 16486 ;;  lights          1    1[BANK0 ] unsigned char 
 16487 ;; Return value:  Size  Location     Type
 16488 ;;		None               void
 16489 ;; Registers used:
 16490 ;;		wreg
 16491 ;; Tracked objects:
 16492 ;;		On entry : 0/0
 16493 ;;		On exit  : 0/0
 16494 ;;		Unchanged: 0/0
 16495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16497 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16498 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16499 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16500 ;;Total ram usage:        2 bytes
 16501 ;; Hardware stack levels used:    1
 16502 ;; Hardware stack levels required when called:    5
 16503 ;; This function calls:
 16504 ;;		Nothing
 16505 ;; This function is called by:
 16506 ;;		_setDimmerLights_Initialization
 16507 ;;		_setDimmerLights_Main
 16508 ;;		_getDimmerLights_Status
 16509 ;;		_setDimmerLights_SwOn
 16510 ;;		_setDimmerLights_SwOff
 16511 ;;		_setDimmerLights_AdjControl
 16512 ;;		_setDimmerLights_ErrorClose
 16513 ;;		_setDimmerLights
 16514 ;;		_setDimmerLights_Adj
 16515 ;;		_setDimmerLights_AdjRF
 16516 ;;		_setDimmerLights_Trigger
 16517 ;;		_setDimmerLights_TriggerAdj
 16518 ;;		_setDimmerLights_Status
 16519 ;;		_setDimmerLights_GO
 16520 ;;		_setDimmerLights_MaxmumValue
 16521 ;; This function uses a non-reentrant model
 16522 ;;
 16523                           
 16524                           
 16525                           ;psect for function _DimmerLightsPointSelect
 16526  1CF1                     _DimmerLightsPointSelect:	
 16527                           
 16528                           ;incstack = 0
 16529                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16530                           ;DimmerLightsPointSelect@lights stored from wreg
 16531  1CF1  0020               	movlb	0	; select bank0
 16532  1CF2  00A1               	movwf	DimmerLightsPointSelect@lights
 16533                           
 16534                           ;Dimmer_B1.c: 324: if (lights == 1) {
 16535  1CF3  0821               	movf	DimmerLightsPointSelect@lights,w
 16536  1CF4  3A01               	xorlw	1
 16537  1CF5  1D03               	skipz
 16538  1CF6  2CFB               	goto	l765
 16539                           
 16540                           ;Dimmer_B1.c: 325: DimmerLights = &DimmerLights1;
 16541  1CF7  30A0               	movlw	_DimmerLights1& (0+255)
 16542  1CF8  00A0               	movwf	??_DimmerLightsPointSelect
 16543  1CF9  0820               	movf	??_DimmerLightsPointSelect,w
 16544  1CFA  00EF               	movwf	_DimmerLights
 16545  1CFB                     l765:	
 16546                           
 16547                           ;Dimmer_B1.c: 326: }
 16548                           ;Dimmer_B1.c: 329: if (lights == 2) {
 16549  1CFB  0821               	movf	DimmerLightsPointSelect@lights,w
 16550  1CFC  3A02               	xorlw	2
 16551  1CFD  1D03               	skipz
 16552  1CFE  0008               	return
 16553                           
 16554                           ;Dimmer_B1.c: 330: DimmerLights = &DimmerLights2;
 16555  1CFF  30AF               	movlw	_DimmerLights2& (0+255)
 16556  1D00  00A0               	movwf	??_DimmerLightsPointSelect
 16557  1D01  0820               	movf	??_DimmerLightsPointSelect,w
 16558  1D02  00EF               	movwf	_DimmerLights
 16559  1D03  0008               	return
 16560  1D04                     __end_of_DimmerLightsPointSelect:	
 16561                           
 16562                           	psect	text105
 16563  1639                     __ptext105:	
 16564 ;; *************** function _setBuz *****************
 16565 ;; Defined at:
 16566 ;;		line 22 in file "../src/Buzzer_B1.c"
 16567 ;; Parameters:    Size  Location     Type
 16568 ;;  count           1    wreg     unsigned char 
 16569 ;;  time            2    9[BANK0 ] int 
 16570 ;; Auto vars:     Size  Location     Type
 16571 ;;  count           1   12[BANK0 ] unsigned char 
 16572 ;; Return value:  Size  Location     Type
 16573 ;;		None               void
 16574 ;; Registers used:
 16575 ;;		wreg, status,2, status,0, pclath, cstack
 16576 ;; Tracked objects:
 16577 ;;		On entry : 0/0
 16578 ;;		On exit  : 0/0
 16579 ;;		Unchanged: 0/0
 16580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16581 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16582 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16583 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16584 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16585 ;;Total ram usage:        4 bytes
 16586 ;; Hardware stack levels used:    1
 16587 ;; Hardware stack levels required when called:    6
 16588 ;; This function calls:
 16589 ;;		___awdiv
 16590 ;; This function is called by:
 16591 ;;		_DlyOff_Main
 16592 ;;		_setDimmerLights_Main
 16593 ;;		_setDimmerLights_SwOn
 16594 ;;		_setTemp_Main
 16595 ;;		_setLog_Code
 16596 ;;		_setControl_Lights_Table
 16597 ;;		_setRFSW_Control
 16598 ;;		_setSw_Main
 16599 ;;		_my_MainTimer
 16600 ;;		_setMain_Exception
 16601 ;; This function uses a non-reentrant model
 16602 ;;
 16603                           
 16604                           
 16605                           ;psect for function _setBuz
 16606  1639                     _setBuz:	
 16607                           
 16608                           ;incstack = 0
 16609                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16610                           ;setBuz@count stored from wreg
 16611  1639  0020               	movlb	0	; select bank0
 16612  163A  00AC               	movwf	setBuz@count
 16613                           
 16614                           ;Buzzer_B1.c: 23: time /= 10;
 16615  163B  300A               	movlw	10
 16616  163C  00A0               	movwf	___awdiv@divisor
 16617  163D  3000               	movlw	0
 16618  163E  00A1               	movwf	___awdiv@divisor+1
 16619  163F  082A               	movf	setBuz@time+1,w
 16620  1640  01A3               	clrf	___awdiv@dividend+1
 16621  1641  07A3               	addwf	___awdiv@dividend+1,f
 16622  1642  0829               	movf	setBuz@time,w
 16623  1643  01A2               	clrf	___awdiv@dividend
 16624  1644  07A2               	addwf	___awdiv@dividend,f
 16625  1645  3195  258D  3196   	fcall	___awdiv
 16626  1648  0020               	movlb	0	; select bank0
 16627  1649  0821               	movf	?___awdiv+1,w
 16628  164A  01AA               	clrf	setBuz@time+1
 16629  164B  07AA               	addwf	setBuz@time+1,f
 16630  164C  0820               	movf	?___awdiv,w
 16631  164D  01A9               	clrf	setBuz@time
 16632  164E  07A9               	addwf	setBuz@time,f
 16633                           
 16634                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16635  164F  0021               	movlb	1	; select bank1
 16636  1650  1C2F               	btfss	_Buz1^(0+128),0
 16637  1651  0008               	return
 16638                           
 16639                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16640  1652  18AF               	btfsc	_Buz1^(0+128),1
 16641  1653  2E6A               	goto	l96
 16642                           
 16643                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16644  1654  14AF               	bsf	_Buz1^(0+128),1
 16645                           
 16646                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16647  1655  01B0               	clrf	(_Buz1^(0+128)+1)
 16648  1656  01B1               	clrf	((_Buz1+1)^(0+128)+1)
 16649                           
 16650                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16651  1657  0020               	movlb	0	; select bank0
 16652  1658  082C               	movf	setBuz@count,w
 16653  1659  00AB               	movwf	??_setBuz
 16654  165A  082B               	movf	??_setBuz,w
 16655  165B  0021               	movlb	1	; select bank1
 16656  165C  00B2               	movwf	(_Buz1^(0+128)+3)
 16657                           
 16658                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16659  165D  0020               	movlb	0	; select bank0
 16660  165E  082A               	movf	setBuz@time+1,w
 16661  165F  0021               	movlb	1	; select bank1
 16662  1660  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 16663  1661  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 16664  1662  0020               	movlb	0	; select bank0
 16665  1663  0829               	movf	setBuz@time,w
 16666  1664  0021               	movlb	1	; select bank1
 16667  1665  01B5               	clrf	(_Buz1^(0+128)+6)
 16668  1666  07B5               	addwf	(_Buz1^(0+128)+6),f
 16669                           
 16670                           ;Buzzer_B1.c: 30: RB3 = 1;
 16671  1667  0020               	movlb	0	; select bank0
 16672  1668  158D               	bsf	13,3	;volatile
 16673                           
 16674                           ;Buzzer_B1.c: 31: } else {
 16675  1669  0008               	return
 16676  166A                     l96:	
 16677                           
 16678                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16679  166A  19AF               	btfsc	_Buz1^(0+128),3
 16680  166B  2E7E               	goto	l98
 16681                           
 16682                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16683  166C  15AF               	bsf	_Buz1^(0+128),3
 16684                           
 16685                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16686  166D  0020               	movlb	0	; select bank0
 16687  166E  082C               	movf	setBuz@count,w
 16688  166F  00AB               	movwf	??_setBuz
 16689  1670  082B               	movf	??_setBuz,w
 16690  1671  0021               	movlb	1	; select bank1
 16691  1672  00B3               	movwf	(_Buz1^(0+128)+4)
 16692                           
 16693                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16694  1673  0020               	movlb	0	; select bank0
 16695  1674  082A               	movf	setBuz@time+1,w
 16696  1675  0021               	movlb	1	; select bank1
 16697  1676  01B8               	clrf	((_Buz1+1)^(0+128)+8)
 16698  1677  07B8               	addwf	((_Buz1+1)^(0+128)+8),f
 16699  1678  0020               	movlb	0	; select bank0
 16700  1679  0829               	movf	setBuz@time,w
 16701  167A  0021               	movlb	1	; select bank1
 16702  167B  01B7               	clrf	(_Buz1^(0+128)+8)
 16703  167C  07B7               	addwf	(_Buz1^(0+128)+8),f
 16704                           
 16705                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16706  167D  0008               	return
 16707  167E                     l98:	
 16708  167E  1A2F               	btfsc	_Buz1^(0+128),4
 16709  167F  0008               	return
 16710                           
 16711                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16712  1680  162F               	bsf	_Buz1^(0+128),4
 16713                           
 16714                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16715  1681  0020               	movlb	0	; select bank0
 16716  1682  082C               	movf	setBuz@count,w
 16717  1683  00AB               	movwf	??_setBuz
 16718  1684  082B               	movf	??_setBuz,w
 16719  1685  0021               	movlb	1	; select bank1
 16720  1686  00B4               	movwf	(_Buz1^(0+128)+5)
 16721                           
 16722                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16723  1687  0020               	movlb	0	; select bank0
 16724  1688  082A               	movf	setBuz@time+1,w
 16725  1689  0021               	movlb	1	; select bank1
 16726  168A  01BA               	clrf	((_Buz1+1)^(0+128)+10)
 16727  168B  07BA               	addwf	((_Buz1+1)^(0+128)+10),f
 16728  168C  0020               	movlb	0	; select bank0
 16729  168D  0829               	movf	setBuz@time,w
 16730  168E  0021               	movlb	1	; select bank1
 16731  168F  01B9               	clrf	(_Buz1^(0+128)+10)
 16732  1690  07B9               	addwf	(_Buz1^(0+128)+10),f
 16733  1691  0008               	return
 16734  1692                     __end_of_setBuz:	
 16735                           
 16736                           	psect	text106
 16737  158D                     __ptext106:	
 16738 ;; *************** function ___awdiv *****************
 16739 ;; Defined at:
 16740 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16741 ;; Parameters:    Size  Location     Type
 16742 ;;  divisor         2    0[BANK0 ] int 
 16743 ;;  dividend        2    2[BANK0 ] int 
 16744 ;; Auto vars:     Size  Location     Type
 16745 ;;  quotient        2    7[BANK0 ] int 
 16746 ;;  sign            1    6[BANK0 ] unsigned char 
 16747 ;;  counter         1    5[BANK0 ] unsigned char 
 16748 ;; Return value:  Size  Location     Type
 16749 ;;                  2    0[BANK0 ] int 
 16750 ;; Registers used:
 16751 ;;		wreg, status,2, status,0
 16752 ;; Tracked objects:
 16753 ;;		On entry : 0/0
 16754 ;;		On exit  : 0/0
 16755 ;;		Unchanged: 0/0
 16756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16757 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16758 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16759 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16760 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16761 ;;Total ram usage:        9 bytes
 16762 ;; Hardware stack levels used:    1
 16763 ;; Hardware stack levels required when called:    5
 16764 ;; This function calls:
 16765 ;;		Nothing
 16766 ;; This function is called by:
 16767 ;;		_setBuz
 16768 ;; This function uses a non-reentrant model
 16769 ;;
 16770                           
 16771                           
 16772                           ;psect for function ___awdiv
 16773  158D                     ___awdiv:	
 16774                           
 16775                           ;incstack = 0
 16776                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16777  158D  0020               	movlb	0	; select bank0
 16778  158E  01A6               	clrf	___awdiv@sign
 16779  158F  1FA1               	btfss	___awdiv@divisor+1,7
 16780  1590  2D98               	goto	l6140
 16781  1591  09A0               	comf	___awdiv@divisor,f
 16782  1592  09A1               	comf	___awdiv@divisor+1,f
 16783  1593  0AA0               	incf	___awdiv@divisor,f
 16784  1594  1903               	skipnz
 16785  1595  0AA1               	incf	___awdiv@divisor+1,f
 16786  1596  01A6               	clrf	___awdiv@sign
 16787  1597  0AA6               	incf	___awdiv@sign,f
 16788  1598                     l6140:	
 16789  1598  1FA3               	btfss	___awdiv@dividend+1,7
 16790  1599  2DA3               	goto	l6146
 16791  159A  09A2               	comf	___awdiv@dividend,f
 16792  159B  09A3               	comf	___awdiv@dividend+1,f
 16793  159C  0AA2               	incf	___awdiv@dividend,f
 16794  159D  1903               	skipnz
 16795  159E  0AA3               	incf	___awdiv@dividend+1,f
 16796  159F  3001               	movlw	1
 16797  15A0  00A4               	movwf	??___awdiv
 16798  15A1  0824               	movf	??___awdiv,w
 16799  15A2  06A6               	xorwf	___awdiv@sign,f
 16800  15A3                     l6146:	
 16801  15A3  01A7               	clrf	___awdiv@quotient
 16802  15A4  01A8               	clrf	___awdiv@quotient+1
 16803  15A5  0821               	movf	___awdiv@divisor+1,w
 16804  15A6  0420               	iorwf	___awdiv@divisor,w
 16805  15A7  1903               	skipnz
 16806  15A8  2DD2               	goto	l6168
 16807  15A9  01A5               	clrf	___awdiv@counter
 16808  15AA  0AA5               	incf	___awdiv@counter,f
 16809  15AB                     l6156:	
 16810  15AB  1BA1               	btfsc	___awdiv@divisor+1,7
 16811  15AC  2DB7               	goto	l6158
 16812  15AD  3001               	movlw	1
 16813  15AE                     u5025:	
 16814  15AE  35A0               	lslf	___awdiv@divisor,f
 16815  15AF  0DA1               	rlf	___awdiv@divisor+1,f
 16816  15B0  0B89               	decfsz	9,f
 16817  15B1  2DAE               	goto	u5025
 16818  15B2  3001               	movlw	1
 16819  15B3  00A4               	movwf	??___awdiv
 16820  15B4  0824               	movf	??___awdiv,w
 16821  15B5  07A5               	addwf	___awdiv@counter,f
 16822  15B6  2DAB               	goto	l6156
 16823  15B7                     l6158:	
 16824  15B7  3001               	movlw	1
 16825  15B8                     u5045:	
 16826  15B8  35A7               	lslf	___awdiv@quotient,f
 16827  15B9  0DA8               	rlf	___awdiv@quotient+1,f
 16828  15BA  0B89               	decfsz	9,f
 16829  15BB  2DB8               	goto	u5045
 16830  15BC  0821               	movf	___awdiv@divisor+1,w
 16831  15BD  0223               	subwf	___awdiv@dividend+1,w
 16832  15BE  1D03               	skipz
 16833  15BF  2DC2               	goto	u5055
 16834  15C0  0820               	movf	___awdiv@divisor,w
 16835  15C1  0222               	subwf	___awdiv@dividend,w
 16836  15C2                     u5055:	
 16837  15C2  1C03               	skipc
 16838  15C3  2DC9               	goto	l6164
 16839  15C4  0820               	movf	___awdiv@divisor,w
 16840  15C5  02A2               	subwf	___awdiv@dividend,f
 16841  15C6  0821               	movf	___awdiv@divisor+1,w
 16842  15C7  3BA3               	subwfb	___awdiv@dividend+1,f
 16843  15C8  1427               	bsf	___awdiv@quotient,0
 16844  15C9                     l6164:	
 16845  15C9  3001               	movlw	1
 16846  15CA                     u5065:	
 16847  15CA  36A1               	lsrf	___awdiv@divisor+1,f
 16848  15CB  0CA0               	rrf	___awdiv@divisor,f
 16849  15CC  0B89               	decfsz	9,f
 16850  15CD  2DCA               	goto	u5065
 16851  15CE  3001               	movlw	1
 16852  15CF  02A5               	subwf	___awdiv@counter,f
 16853  15D0  1D03               	btfss	3,2
 16854  15D1  2DB7               	goto	l6158
 16855  15D2                     l6168:	
 16856  15D2  0826               	movf	___awdiv@sign,w
 16857  15D3  1903               	btfsc	3,2
 16858  15D4  2DDA               	goto	l6172
 16859  15D5  09A7               	comf	___awdiv@quotient,f
 16860  15D6  09A8               	comf	___awdiv@quotient+1,f
 16861  15D7  0AA7               	incf	___awdiv@quotient,f
 16862  15D8  1903               	skipnz
 16863  15D9  0AA8               	incf	___awdiv@quotient+1,f
 16864  15DA                     l6172:	
 16865  15DA  0828               	movf	___awdiv@quotient+1,w
 16866  15DB  01A1               	clrf	?___awdiv+1
 16867  15DC  07A1               	addwf	?___awdiv+1,f
 16868  15DD  0827               	movf	___awdiv@quotient,w
 16869  15DE  01A0               	clrf	?___awdiv
 16870  15DF  07A0               	addwf	?___awdiv,f
 16871  15E0  0008               	return
 16872  15E1                     __end_of___awdiv:	
 16873                           
 16874                           	psect	text107
 16875  1B68                     __ptext107:	
 16876 ;; *************** function _DelayOff_Initialization *****************
 16877 ;; Defined at:
 16878 ;;		line 26 in file "../src/DelayOff_B1.c"
 16879 ;; Parameters:    Size  Location     Type
 16880 ;;		None
 16881 ;; Auto vars:     Size  Location     Type
 16882 ;;		None
 16883 ;; Return value:  Size  Location     Type
 16884 ;;		None               void
 16885 ;; Registers used:
 16886 ;;		wreg, status,2, status,0, pclath, cstack
 16887 ;; Tracked objects:
 16888 ;;		On entry : 0/0
 16889 ;;		On exit  : 0/0
 16890 ;;		Unchanged: 0/0
 16891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16896 ;;Total ram usage:        0 bytes
 16897 ;; Hardware stack levels used:    1
 16898 ;; Hardware stack levels required when called:    7
 16899 ;; This function calls:
 16900 ;;		_DlyOff_Initialization
 16901 ;; This function is called by:
 16902 ;;		_main
 16903 ;; This function uses a non-reentrant model
 16904 ;;
 16905                           
 16906                           
 16907                           ;psect for function _DelayOff_Initialization
 16908  1B68                     _DelayOff_Initialization:	
 16909                           
 16910                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16911                           
 16912                           ;incstack = 0
 16913                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16914  1B68  3001               	movlw	1
 16915  1B69  319B  234D  319B   	fcall	_DlyOff_Initialization
 16916                           
 16917                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 16918  1B6C  3002               	movlw	2
 16919  1B6D  319B  234D         	fcall	_DlyOff_Initialization
 16920  1B6F  0008               	return
 16921  1B70                     __end_of_DelayOff_Initialization:	
 16922                           
 16923                           	psect	text108
 16924  1B4D                     __ptext108:	
 16925 ;; *************** function _DlyOff_Initialization *****************
 16926 ;; Defined at:
 16927 ;;		line 56 in file "../src/DelayOff_B1.c"
 16928 ;; Parameters:    Size  Location     Type
 16929 ;;  sw              1    wreg     unsigned char 
 16930 ;; Auto vars:     Size  Location     Type
 16931 ;;  sw              1    2[BANK0 ] unsigned char 
 16932 ;; Return value:  Size  Location     Type
 16933 ;;		None               void
 16934 ;; Registers used:
 16935 ;;		wreg, status,2, status,0, pclath, cstack
 16936 ;; Tracked objects:
 16937 ;;		On entry : 0/0
 16938 ;;		On exit  : 0/0
 16939 ;;		Unchanged: 0/0
 16940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16942 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16944 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16945 ;;Total ram usage:        1 bytes
 16946 ;; Hardware stack levels used:    1
 16947 ;; Hardware stack levels required when called:    6
 16948 ;; This function calls:
 16949 ;;		_DelayOffPointSelect
 16950 ;; This function is called by:
 16951 ;;		_DelayOff_Initialization
 16952 ;; This function uses a non-reentrant model
 16953 ;;
 16954                           
 16955                           
 16956                           ;psect for function _DlyOff_Initialization
 16957  1B4D                     _DlyOff_Initialization:	
 16958                           
 16959                           ;incstack = 0
 16960                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16961                           ;DlyOff_Initialization@sw stored from wreg
 16962  1B4D  0020               	movlb	0	; select bank0
 16963  1B4E  00A2               	movwf	DlyOff_Initialization@sw
 16964                           
 16965                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16966  1B4F  0822               	movf	DlyOff_Initialization@sw,w
 16967  1B50  319D  2565         	fcall	_DelayOffPointSelect
 16968  1B52  0008               	return
 16969  1B53                     __end_of_DlyOff_Initialization:	
 16970                           
 16971                           	psect	text109
 16972  1D65                     __ptext109:	
 16973 ;; *************** function _DelayOffPointSelect *****************
 16974 ;; Defined at:
 16975 ;;		line 7 in file "../src/DelayOff_B1.c"
 16976 ;; Parameters:    Size  Location     Type
 16977 ;;  sw              1    wreg     unsigned char 
 16978 ;; Auto vars:     Size  Location     Type
 16979 ;;  sw              1    1[BANK0 ] unsigned char 
 16980 ;; Return value:  Size  Location     Type
 16981 ;;		None               void
 16982 ;; Registers used:
 16983 ;;		wreg
 16984 ;; Tracked objects:
 16985 ;;		On entry : 0/0
 16986 ;;		On exit  : 0/0
 16987 ;;		Unchanged: 0/0
 16988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16990 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16991 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16992 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16993 ;;Total ram usage:        2 bytes
 16994 ;; Hardware stack levels used:    1
 16995 ;; Hardware stack levels required when called:    5
 16996 ;; This function calls:
 16997 ;;		Nothing
 16998 ;; This function is called by:
 16999 ;;		_DlyOff_Initialization
 17000 ;;		_DlyOff_Main
 17001 ;;		_setDelayOff_GO
 17002 ;;		_getDelayOff_GO
 17003 ;; This function uses a non-reentrant model
 17004 ;;
 17005                           
 17006                           
 17007                           ;psect for function _DelayOffPointSelect
 17008  1D65                     _DelayOffPointSelect:	
 17009                           
 17010                           ;incstack = 0
 17011                           ; Regs used in _DelayOffPointSelect: [wreg]
 17012                           ;DelayOffPointSelect@sw stored from wreg
 17013  1D65  0020               	movlb	0	; select bank0
 17014  1D66  00A1               	movwf	DelayOffPointSelect@sw
 17015                           
 17016                           ;DelayOff_B1.c: 9: if (sw == 1) {
 17017  1D67  0821               	movf	DelayOffPointSelect@sw,w
 17018  1D68  3A01               	xorlw	1
 17019  1D69  1D03               	skipz
 17020  1D6A  2D70               	goto	l6098
 17021                           
 17022                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 17023  1D6B  30D0               	movlw	_DlySw1& (0+255)
 17024  1D6C  00A0               	movwf	??_DelayOffPointSelect
 17025  1D6D  0820               	movf	??_DelayOffPointSelect,w
 17026  1D6E  00F8               	movwf	_DelayOff
 17027                           
 17028                           ;DelayOff_B1.c: 11: }
 17029  1D6F  0008               	return
 17030  1D70                     l6098:	
 17031                           
 17032                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 17033  1D70  0821               	movf	DelayOffPointSelect@sw,w
 17034  1D71  3A02               	xorlw	2
 17035  1D72  1D03               	skipz
 17036  1D73  0008               	return
 17037                           
 17038                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 17039  1D74  30D5               	movlw	_DlySw2& (0+255)
 17040  1D75  00A0               	movwf	??_DelayOffPointSelect
 17041  1D76  0820               	movf	??_DelayOffPointSelect,w
 17042  1D77  00F8               	movwf	_DelayOff
 17043  1D78  0008               	return
 17044  1D79                     __end_of_DelayOffPointSelect:	
 17045                           
 17046                           	psect	text110
 17047  1DB6                     __ptext110:	
 17048 ;; *************** function _CC2500_PowerOnInitial *****************
 17049 ;; Defined at:
 17050 ;;		line 119 in file "../src/CC2500_B1.c"
 17051 ;; Parameters:    Size  Location     Type
 17052 ;;		None
 17053 ;; Auto vars:     Size  Location     Type
 17054 ;;		None
 17055 ;; Return value:  Size  Location     Type
 17056 ;;		None               void
 17057 ;; Registers used:
 17058 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17059 ;; Tracked objects:
 17060 ;;		On entry : 0/0
 17061 ;;		On exit  : 0/0
 17062 ;;		Unchanged: 0/0
 17063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17068 ;;Total ram usage:        0 bytes
 17069 ;; Hardware stack levels used:    1
 17070 ;; Hardware stack levels required when called:    8
 17071 ;; This function calls:
 17072 ;;		_CC2500_ClearRXFIFO
 17073 ;;		_CC2500_ClearTXFIFO
 17074 ;;		_CC2500_FrequencyCabr
 17075 ;;		_CC2500_InitPATable
 17076 ;;		_CC2500_InitSetREG
 17077 ;;		_CC2500_PowerRST
 17078 ;;		_CC2500_SIDLEMode
 17079 ;; This function is called by:
 17080 ;;		_main
 17081 ;; This function uses a non-reentrant model
 17082 ;;
 17083                           
 17084                           
 17085                           ;psect for function _CC2500_PowerOnInitial
 17086  1DB6                     _CC2500_PowerOnInitial:	
 17087                           
 17088                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 17089                           
 17090                           ;incstack = 0
 17091                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17092  1DB6  3194  2418  319D   	fcall	_CC2500_PowerRST
 17093                           
 17094                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 17095  1DB9  3191  2105  319D   	fcall	_CC2500_InitSetREG
 17096                           
 17097                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 17098  1DBC  319E  26DA  319D   	fcall	_CC2500_InitPATable
 17099                           
 17100                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 17101  1DBF  319B  2337  319D   	fcall	_CC2500_ClearTXFIFO
 17102                           
 17103                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 17104  1DC2  319B  2333  319D   	fcall	_CC2500_ClearRXFIFO
 17105                           
 17106                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 17107  1DC5  319B  23B8  319D   	fcall	_CC2500_FrequencyCabr
 17108                           
 17109                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 17110  1DC8  319B  233B         	fcall	_CC2500_SIDLEMode
 17111  1DCA  0008               	return
 17112  1DCB                     __end_of_CC2500_PowerOnInitial:	
 17113                           
 17114                           	psect	text111
 17115  1B3B                     __ptext111:	
 17116 ;; *************** function _CC2500_SIDLEMode *****************
 17117 ;; Defined at:
 17118 ;;		line 209 in file "../src/CC2500_B1.c"
 17119 ;; Parameters:    Size  Location     Type
 17120 ;;		None
 17121 ;; Auto vars:     Size  Location     Type
 17122 ;;		None
 17123 ;; Return value:  Size  Location     Type
 17124 ;;		None               void
 17125 ;; Registers used:
 17126 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17127 ;; Tracked objects:
 17128 ;;		On entry : 0/0
 17129 ;;		On exit  : 0/0
 17130 ;;		Unchanged: 0/0
 17131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17136 ;;Total ram usage:        0 bytes
 17137 ;; Hardware stack levels used:    1
 17138 ;; Hardware stack levels required when called:    7
 17139 ;; This function calls:
 17140 ;;		_CC2500_WriteCommand
 17141 ;; This function is called by:
 17142 ;;		_CC2500_PowerOnInitial
 17143 ;; This function uses a non-reentrant model
 17144 ;;
 17145                           
 17146                           
 17147                           ;psect for function _CC2500_SIDLEMode
 17148  1B3B                     _CC2500_SIDLEMode:	
 17149                           
 17150                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 17151                           
 17152                           ;incstack = 0
 17153                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17154  1B3B  3036               	movlw	54
 17155  1B3C  319E  2639         	fcall	_CC2500_WriteCommand
 17156  1B3E  0008               	return
 17157  1B3F                     __end_of_CC2500_SIDLEMode:	
 17158                           
 17159                           	psect	text112
 17160  1418                     __ptext112:	
 17161 ;; *************** function _CC2500_PowerRST *****************
 17162 ;; Defined at:
 17163 ;;		line 132 in file "../src/CC2500_B1.c"
 17164 ;; Parameters:    Size  Location     Type
 17165 ;;		None
 17166 ;; Auto vars:     Size  Location     Type
 17167 ;;		None
 17168 ;; Return value:  Size  Location     Type
 17169 ;;		None               void
 17170 ;; Registers used:
 17171 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17172 ;; Tracked objects:
 17173 ;;		On entry : 0/0
 17174 ;;		On exit  : 0/0
 17175 ;;		Unchanged: 0/0
 17176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17179 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17180 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17181 ;;Total ram usage:        1 bytes
 17182 ;; Hardware stack levels used:    1
 17183 ;; Hardware stack levels required when called:    6
 17184 ;; This function calls:
 17185 ;;		_CC2500_WriteByte
 17186 ;;		_DelayTime_1us
 17187 ;;		_Timeout_Counter
 17188 ;;		_set_TimeoutCleared
 17189 ;; This function is called by:
 17190 ;;		_CC2500_PowerOnInitial
 17191 ;; This function uses a non-reentrant model
 17192 ;;
 17193                           
 17194                           
 17195                           ;psect for function _CC2500_PowerRST
 17196  1418                     _CC2500_PowerRST:	
 17197                           
 17198                           ;CC2500_B1.c: 133: RC1 = 0;
 17199                           
 17200                           ;incstack = 0
 17201                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17202  1418  0020               	movlb	0	; select bank0
 17203  1419  108E               	bcf	14,1	;volatile
 17204                           
 17205                           ;CC2500_B1.c: 134: RC0 = 0;
 17206  141A  100E               	bcf	14,0	;volatile
 17207                           
 17208                           ;CC2500_B1.c: 135: RC4 = 1;
 17209  141B  160E               	bsf	14,4	;volatile
 17210                           
 17211                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 17212  141C  300A               	movlw	10
 17213  141D  00A0               	movwf	DelayTime_1us@count
 17214  141E  3000               	movlw	0
 17215  141F  00A1               	movwf	DelayTime_1us@count+1
 17216  1420  3190  2090  3194   	fcall	_DelayTime_1us
 17217                           
 17218                           ;CC2500_B1.c: 137: RC4 = 0;
 17219  1423  0020               	movlb	0	; select bank0
 17220  1424  120E               	bcf	14,4	;volatile
 17221                           
 17222                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 17223  1425  300A               	movlw	10
 17224  1426  00A0               	movwf	DelayTime_1us@count
 17225  1427  3000               	movlw	0
 17226  1428  00A1               	movwf	DelayTime_1us@count+1
 17227  1429  3190  2090  3194   	fcall	_DelayTime_1us
 17228                           
 17229                           ;CC2500_B1.c: 139: RC4 = 1;
 17230  142C  0020               	movlb	0	; select bank0
 17231  142D  160E               	bsf	14,4	;volatile
 17232                           
 17233                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 17234  142E  3028               	movlw	40
 17235  142F  00A0               	movwf	DelayTime_1us@count
 17236  1430  3000               	movlw	0
 17237  1431  00A1               	movwf	DelayTime_1us@count+1
 17238  1432  3190  2090  3194   	fcall	_DelayTime_1us
 17239                           
 17240                           ;CC2500_B1.c: 141: RC4 = 0;
 17241  1435  0020               	movlb	0	; select bank0
 17242  1436  120E               	bcf	14,4	;volatile
 17243                           
 17244                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 17245  1437  3030               	movlw	48
 17246  1438  00A6               	movwf	??_CC2500_PowerRST
 17247  1439  0826               	movf	??_CC2500_PowerRST,w
 17248  143A  00FB               	movwf	_SPI0Buffer
 17249                           
 17250                           ;CC2500_B1.c: 143: while (RC2 == 1 && myMain.Timeout == 0) {
 17251  143B  2C3F               	goto	l7158
 17252  143C                     l7156:	
 17253                           
 17254                           ;CC2500_B1.c: 144: Timeout_Counter();
 17255  143C  319D  25A1  3194   	fcall	_Timeout_Counter
 17256  143F                     l7158:	
 17257  143F  0020               	movlb	0	; select bank0
 17258  1440  1D0E               	btfss	14,2	;volatile
 17259  1441  2C45               	goto	l7162
 17260  1442  0021               	movlb	1	; select bank1
 17261  1443  1D2C               	btfss	(_myMain^(0+128)+12),2
 17262  1444  2C3C               	goto	l7156
 17263  1445                     l7162:	
 17264                           
 17265                           ;CC2500_B1.c: 145: };
 17266                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 17267  1445  319B  2343  3194   	fcall	_set_TimeoutCleared
 17268                           
 17269                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 17270  1448  319D  2551  3194   	fcall	_CC2500_WriteByte
 17271                           
 17272                           ;CC2500_B1.c: 148: while (RC2 == 1 && myMain.Timeout == 0) {
 17273  144B  2C4F               	goto	l7168
 17274  144C                     l7166:	
 17275                           
 17276                           ;CC2500_B1.c: 149: Timeout_Counter();
 17277  144C  319D  25A1  3194   	fcall	_Timeout_Counter
 17278  144F                     l7168:	
 17279  144F  0020               	movlb	0	; select bank0
 17280  1450  1D0E               	btfss	14,2	;volatile
 17281  1451  2C55               	goto	l7172
 17282  1452  0021               	movlb	1	; select bank1
 17283  1453  1D2C               	btfss	(_myMain^(0+128)+12),2
 17284  1454  2C4C               	goto	l7166
 17285  1455                     l7172:	
 17286                           
 17287                           ;CC2500_B1.c: 150: };
 17288                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17289  1455  319B  2343         	fcall	_set_TimeoutCleared
 17290                           
 17291                           ;CC2500_B1.c: 152: RC0 = 0;
 17292  1457  0020               	movlb	0	; select bank0
 17293  1458  100E               	bcf	14,0	;volatile
 17294                           
 17295                           ;CC2500_B1.c: 153: RC4 = 1;
 17296  1459  160E               	bsf	14,4	;volatile
 17297  145A  0008               	return
 17298  145B                     __end_of_CC2500_PowerRST:	
 17299                           
 17300                           	psect	text113
 17301  1105                     __ptext113:	
 17302 ;; *************** function _CC2500_InitSetREG *****************
 17303 ;; Defined at:
 17304 ;;		line 159 in file "../src/CC2500_B1.c"
 17305 ;; Parameters:    Size  Location     Type
 17306 ;;		None
 17307 ;; Auto vars:     Size  Location     Type
 17308 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17309 ;;  temp2           1    7[BANK0 ] unsigned char 
 17310 ;;  temp1           1    6[BANK0 ] unsigned char 
 17311 ;; Return value:  Size  Location     Type
 17312 ;;		None               void
 17313 ;; Registers used:
 17314 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17315 ;; Tracked objects:
 17316 ;;		On entry : 0/0
 17317 ;;		On exit  : 0/0
 17318 ;;		Unchanged: 0/0
 17319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17321 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17322 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17323 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17324 ;;Total ram usage:        4 bytes
 17325 ;; Hardware stack levels used:    1
 17326 ;; Hardware stack levels required when called:    7
 17327 ;; This function calls:
 17328 ;;		_CC2500_WriteREG
 17329 ;; This function is called by:
 17330 ;;		_CC2500_PowerOnInitial
 17331 ;; This function uses a non-reentrant model
 17332 ;;
 17333                           
 17334                           
 17335                           ;psect for function _CC2500_InitSetREG
 17336  1105                     _CC2500_InitSetREG:	
 17337                           
 17338                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17339                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17340                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17341                           
 17342                           ;incstack = 0
 17343                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17344  1105  0020               	movlb	0	; select bank0
 17345  1106  01A8               	clrf	CC2500_InitSetREG@loop_c
 17346  1107                     L10:	
 17347  1107  302F               	movlw	47
 17348  1108  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17349  1109  1803               	btfsc	3,0
 17350  110A  0008               	return
 17351                           
 17352                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17353  110B  0828               	movf	CC2500_InitSetREG@loop_c,w
 17354  110C  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17355  110D  0084               	movwf	4
 17356  110E  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17357  110F  1803               	skipnc
 17358  1110  3E01               	addlw	1
 17359  1111  0085               	movwf	5
 17360  1112  0800               	movf	0,w	;code access
 17361  1113  00A5               	movwf	??_CC2500_InitSetREG
 17362  1114  0825               	movf	??_CC2500_InitSetREG,w
 17363  1115  00A6               	movwf	CC2500_InitSetREG@temp1
 17364                           
 17365                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17366  1116  0828               	movf	CC2500_InitSetREG@loop_c,w
 17367  1117  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17368  1118  0084               	movwf	4
 17369  1119  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17370  111A  1803               	skipnc
 17371  111B  3E01               	addlw	1
 17372  111C  0085               	movwf	5
 17373  111D  0800               	movf	0,w	;code access
 17374  111E  00A5               	movwf	??_CC2500_InitSetREG
 17375  111F  0825               	movf	??_CC2500_InitSetREG,w
 17376  1120  00A7               	movwf	CC2500_InitSetREG@temp2
 17377                           
 17378                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17379  1121  0827               	movf	CC2500_InitSetREG@temp2,w
 17380  1122  00A5               	movwf	??_CC2500_InitSetREG
 17381  1123  0825               	movf	??_CC2500_InitSetREG,w
 17382  1124  00A2               	movwf	CC2500_WriteREG@value
 17383  1125  0826               	movf	CC2500_InitSetREG@temp1,w
 17384  1126  319F  2778  3191   	fcall	_CC2500_WriteREG
 17385  1129  3001               	movlw	1
 17386  112A  0020               	movlb	0	; select bank0
 17387  112B  00A5               	movwf	??_CC2500_InitSetREG
 17388  112C  0825               	movf	??_CC2500_InitSetREG,w
 17389  112D  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17390  112E  2907               	goto	L10
 17391  112F                     __end_of_CC2500_InitSetREG:	
 17392                           
 17393                           	psect	text114
 17394  1EDA                     __ptext114:	
 17395 ;; *************** function _CC2500_InitPATable *****************
 17396 ;; Defined at:
 17397 ;;		line 174 in file "../src/CC2500_B1.c"
 17398 ;; Parameters:    Size  Location     Type
 17399 ;;		None
 17400 ;; Auto vars:     Size  Location     Type
 17401 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17402 ;;  temp            1    6[BANK0 ] unsigned char 
 17403 ;; Return value:  Size  Location     Type
 17404 ;;		None               void
 17405 ;; Registers used:
 17406 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17407 ;; Tracked objects:
 17408 ;;		On entry : 0/0
 17409 ;;		On exit  : 0/0
 17410 ;;		Unchanged: 0/0
 17411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17413 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17414 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17415 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17416 ;;Total ram usage:        3 bytes
 17417 ;; Hardware stack levels used:    1
 17418 ;; Hardware stack levels required when called:    7
 17419 ;; This function calls:
 17420 ;;		_CC2500_WriteREG
 17421 ;; This function is called by:
 17422 ;;		_CC2500_PowerOnInitial
 17423 ;; This function uses a non-reentrant model
 17424 ;;
 17425                           
 17426                           
 17427                           ;psect for function _CC2500_InitPATable
 17428  1EDA                     _CC2500_InitPATable:	
 17429                           
 17430                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17431                           ;CC2500_B1.c: 176: unsigned char temp;
 17432                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17433                           
 17434                           ;incstack = 0
 17435                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17436  1EDA  0020               	movlb	0	; select bank0
 17437  1EDB  01A7               	clrf	CC2500_InitPATable@loop_d
 17438  1EDC                     L11:	
 17439  1EDC  3008               	movlw	8
 17440  1EDD  0227               	subwf	CC2500_InitPATable@loop_d,w
 17441  1EDE  1803               	btfsc	3,0
 17442  1EDF  0008               	return
 17443                           
 17444                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17445  1EE0  0827               	movf	CC2500_InitPATable@loop_d,w
 17446  1EE1  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17447  1EE2  0084               	movwf	4
 17448  1EE3  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17449  1EE4  1803               	skipnc
 17450  1EE5  3E01               	addlw	1
 17451  1EE6  0085               	movwf	5
 17452  1EE7  0800               	movf	0,w	;code access
 17453  1EE8  00A5               	movwf	??_CC2500_InitPATable
 17454  1EE9  0825               	movf	??_CC2500_InitPATable,w
 17455  1EEA  00A6               	movwf	CC2500_InitPATable@temp
 17456                           
 17457                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17458  1EEB  0826               	movf	CC2500_InitPATable@temp,w
 17459  1EEC  00A5               	movwf	??_CC2500_InitPATable
 17460  1EED  0825               	movf	??_CC2500_InitPATable,w
 17461  1EEE  00A2               	movwf	CC2500_WriteREG@value
 17462  1EEF  303E               	movlw	62
 17463  1EF0  319F  2778  319E   	fcall	_CC2500_WriteREG
 17464  1EF3  3001               	movlw	1
 17465  1EF4  0020               	movlb	0	; select bank0
 17466  1EF5  00A5               	movwf	??_CC2500_InitPATable
 17467  1EF6  0825               	movf	??_CC2500_InitPATable,w
 17468  1EF7  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17469  1EF8  2EDC               	goto	L11
 17470  1EF9                     __end_of_CC2500_InitPATable:	
 17471                           
 17472                           	psect	text115
 17473  1F78                     __ptext115:	
 17474 ;; *************** function _CC2500_WriteREG *****************
 17475 ;; Defined at:
 17476 ;;		line 251 in file "../src/CC2500_B1.c"
 17477 ;; Parameters:    Size  Location     Type
 17478 ;;  w_addr          1    wreg     unsigned char 
 17479 ;;  value           1    2[BANK0 ] unsigned char 
 17480 ;; Auto vars:     Size  Location     Type
 17481 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17482 ;; Return value:  Size  Location     Type
 17483 ;;		None               void
 17484 ;; Registers used:
 17485 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17486 ;; Tracked objects:
 17487 ;;		On entry : 0/0
 17488 ;;		On exit  : 0/0
 17489 ;;		Unchanged: 0/0
 17490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17491 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17492 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17493 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17494 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17495 ;;Total ram usage:        3 bytes
 17496 ;; Hardware stack levels used:    1
 17497 ;; Hardware stack levels required when called:    6
 17498 ;; This function calls:
 17499 ;;		_CC2500_WriteByte
 17500 ;;		_Timeout_Counter
 17501 ;;		_set_TimeoutCleared
 17502 ;; This function is called by:
 17503 ;;		_CC2500_InitSetREG
 17504 ;;		_CC2500_InitPATable
 17505 ;; This function uses a non-reentrant model
 17506 ;;
 17507                           
 17508                           
 17509                           ;psect for function _CC2500_WriteREG
 17510  1F78                     _CC2500_WriteREG:	
 17511                           
 17512                           ;incstack = 0
 17513                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17514                           ;CC2500_WriteREG@w_addr stored from wreg
 17515  1F78  0020               	movlb	0	; select bank0
 17516  1F79  00A4               	movwf	CC2500_WriteREG@w_addr
 17517                           
 17518                           ;CC2500_B1.c: 252: RC4 = 0;
 17519  1F7A  120E               	bcf	14,4	;volatile
 17520                           
 17521                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17522  1F7B  0824               	movf	CC2500_WriteREG@w_addr,w
 17523  1F7C  00A3               	movwf	??_CC2500_WriteREG
 17524  1F7D  0823               	movf	??_CC2500_WriteREG,w
 17525  1F7E  00FB               	movwf	_SPI0Buffer
 17526                           
 17527                           ;CC2500_B1.c: 254: while (RC2 == 1 && myMain.Timeout == 0) {
 17528  1F7F  2F83               	goto	l6820
 17529  1F80                     l6818:	
 17530                           
 17531                           ;CC2500_B1.c: 255: Timeout_Counter();
 17532  1F80  319D  25A1  319F   	fcall	_Timeout_Counter
 17533  1F83                     l6820:	
 17534  1F83  0020               	movlb	0	; select bank0
 17535  1F84  1D0E               	btfss	14,2	;volatile
 17536  1F85  2F89               	goto	l6824
 17537  1F86  0021               	movlb	1	; select bank1
 17538  1F87  1D2C               	btfss	(_myMain^(0+128)+12),2
 17539  1F88  2F80               	goto	l6818
 17540  1F89                     l6824:	
 17541                           
 17542                           ;CC2500_B1.c: 256: };
 17543                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17544  1F89  319B  2343  319F   	fcall	_set_TimeoutCleared
 17545                           
 17546                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17547  1F8C  319D  2551  319F   	fcall	_CC2500_WriteByte
 17548                           
 17549                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17550  1F8F  0020               	movlb	0	; select bank0
 17551  1F90  0822               	movf	CC2500_WriteREG@value,w
 17552  1F91  00A3               	movwf	??_CC2500_WriteREG
 17553  1F92  0823               	movf	??_CC2500_WriteREG,w
 17554  1F93  00FB               	movwf	_SPI0Buffer
 17555                           
 17556                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17557  1F94  319D  2551         	fcall	_CC2500_WriteByte
 17558                           
 17559                           ;CC2500_B1.c: 262: RC4 = 1;
 17560  1F96  0020               	movlb	0	; select bank0
 17561  1F97  160E               	bsf	14,4	;volatile
 17562  1F98  0008               	return
 17563  1F99                     __end_of_CC2500_WriteREG:	
 17564                           
 17565                           	psect	text116
 17566  1BB8                     __ptext116:	
 17567 ;; *************** function _CC2500_FrequencyCabr *****************
 17568 ;; Defined at:
 17569 ;;		line 201 in file "../src/CC2500_B1.c"
 17570 ;; Parameters:    Size  Location     Type
 17571 ;;		None
 17572 ;; Auto vars:     Size  Location     Type
 17573 ;;		None
 17574 ;; Return value:  Size  Location     Type
 17575 ;;		None               void
 17576 ;; Registers used:
 17577 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17578 ;; Tracked objects:
 17579 ;;		On entry : 0/0
 17580 ;;		On exit  : 0/0
 17581 ;;		Unchanged: 0/0
 17582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17587 ;;Total ram usage:        0 bytes
 17588 ;; Hardware stack levels used:    1
 17589 ;; Hardware stack levels required when called:    7
 17590 ;; This function calls:
 17591 ;;		_CC2500_WriteCommand
 17592 ;;		_DelayTime_1us
 17593 ;; This function is called by:
 17594 ;;		_CC2500_PowerOnInitial
 17595 ;; This function uses a non-reentrant model
 17596 ;;
 17597                           
 17598                           
 17599                           ;psect for function _CC2500_FrequencyCabr
 17600  1BB8                     _CC2500_FrequencyCabr:	
 17601                           
 17602                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17603                           
 17604                           ;incstack = 0
 17605                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17606  1BB8  3033               	movlw	51
 17607  1BB9  319E  2639  319B   	fcall	_CC2500_WriteCommand
 17608                           
 17609                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17610  1BBC  30E8               	movlw	232
 17611  1BBD  0020               	movlb	0	; select bank0
 17612  1BBE  00A0               	movwf	DelayTime_1us@count
 17613  1BBF  3003               	movlw	3
 17614  1BC0  00A1               	movwf	DelayTime_1us@count+1
 17615  1BC1  3190  2090         	fcall	_DelayTime_1us
 17616  1BC3  0008               	return
 17617  1BC4                     __end_of_CC2500_FrequencyCabr:	
 17618                           
 17619                           	psect	text117
 17620  1090                     __ptext117:	
 17621 ;; *************** function _DelayTime_1us *****************
 17622 ;; Defined at:
 17623 ;;		line 320 in file "../src/CC2500_B1.c"
 17624 ;; Parameters:    Size  Location     Type
 17625 ;;  count           2    0[BANK0 ] int 
 17626 ;; Auto vars:     Size  Location     Type
 17627 ;;  j               2    4[BANK0 ] unsigned int 
 17628 ;;  i               2    2[BANK0 ] unsigned int 
 17629 ;; Return value:  Size  Location     Type
 17630 ;;		None               void
 17631 ;; Registers used:
 17632 ;;		wreg, status,2
 17633 ;; Tracked objects:
 17634 ;;		On entry : 0/0
 17635 ;;		On exit  : 0/0
 17636 ;;		Unchanged: 0/0
 17637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17638 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17639 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17641 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17642 ;;Total ram usage:        6 bytes
 17643 ;; Hardware stack levels used:    1
 17644 ;; Hardware stack levels required when called:    5
 17645 ;; This function calls:
 17646 ;;		Nothing
 17647 ;; This function is called by:
 17648 ;;		_CC2500_PowerRST
 17649 ;;		_CC2500_FrequencyCabr
 17650 ;; This function uses a non-reentrant model
 17651 ;;
 17652                           
 17653                           
 17654                           ;psect for function _DelayTime_1us
 17655  1090                     _DelayTime_1us:	
 17656                           
 17657                           ;CC2500_B1.c: 321: unsigned int i, j;
 17658                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17659                           
 17660                           ;incstack = 0
 17661                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17662  1090  3001               	movlw	1
 17663  1091  0020               	movlb	0	; select bank0
 17664  1092  00A2               	movwf	DelayTime_1us@i
 17665  1093  3000               	movlw	0
 17666  1094  00A3               	movwf	DelayTime_1us@i+1
 17667  1095                     l372:	
 17668  1095  0821               	movf	DelayTime_1us@count+1,w
 17669  1096  0223               	subwf	DelayTime_1us@i+1,w
 17670  1097  1D03               	skipz
 17671  1098  289B               	goto	u5945
 17672  1099  0820               	movf	DelayTime_1us@count,w
 17673  109A  0222               	subwf	DelayTime_1us@i,w
 17674  109B                     u5945:	
 17675  109B  1803               	btfsc	3,0
 17676  109C  0008               	return
 17677                           
 17678                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17679  109D  01A4               	clrf	DelayTime_1us@j
 17680  109E  01A5               	clrf	DelayTime_1us@j+1
 17681  109F  3000               	movlw	0
 17682  10A0  0225               	subwf	DelayTime_1us@j+1,w
 17683  10A1  3002               	movlw	2
 17684  10A2  1903               	skipnz
 17685  10A3  0224               	subwf	DelayTime_1us@j,w
 17686  10A4  1803               	btfsc	3,0
 17687  10A5  28B1               	goto	l6812
 17688  10A6                     l6810:	
 17689  10A6  3001               	movlw	1
 17690  10A7  07A4               	addwf	DelayTime_1us@j,f
 17691  10A8  3000               	movlw	0
 17692  10A9  3DA5               	addwfc	DelayTime_1us@j+1,f
 17693  10AA  3000               	movlw	0
 17694  10AB  0225               	subwf	DelayTime_1us@j+1,w
 17695  10AC  3002               	movlw	2
 17696  10AD  1903               	skipnz
 17697  10AE  0224               	subwf	DelayTime_1us@j,w
 17698  10AF  1C03               	skipc
 17699  10B0  28A6               	goto	l6810
 17700  10B1                     l6812:	
 17701  10B1  3001               	movlw	1
 17702  10B2  07A2               	addwf	DelayTime_1us@i,f
 17703  10B3  3000               	movlw	0
 17704  10B4  3DA3               	addwfc	DelayTime_1us@i+1,f
 17705  10B5  2895               	goto	l372
 17706  10B6                     __end_of_DelayTime_1us:	
 17707                           
 17708                           	psect	text118
 17709  1B37                     __ptext118:	
 17710 ;; *************** function _CC2500_ClearTXFIFO *****************
 17711 ;; Defined at:
 17712 ;;		line 187 in file "../src/CC2500_B1.c"
 17713 ;; Parameters:    Size  Location     Type
 17714 ;;		None
 17715 ;; Auto vars:     Size  Location     Type
 17716 ;;		None
 17717 ;; Return value:  Size  Location     Type
 17718 ;;		None               void
 17719 ;; Registers used:
 17720 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17721 ;; Tracked objects:
 17722 ;;		On entry : 0/0
 17723 ;;		On exit  : 0/0
 17724 ;;		Unchanged: 0/0
 17725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17730 ;;Total ram usage:        0 bytes
 17731 ;; Hardware stack levels used:    1
 17732 ;; Hardware stack levels required when called:    7
 17733 ;; This function calls:
 17734 ;;		_CC2500_WriteCommand
 17735 ;; This function is called by:
 17736 ;;		_CC2500_PowerOnInitial
 17737 ;; This function uses a non-reentrant model
 17738 ;;
 17739                           
 17740                           
 17741                           ;psect for function _CC2500_ClearTXFIFO
 17742  1B37                     _CC2500_ClearTXFIFO:	
 17743                           
 17744                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17745                           
 17746                           ;incstack = 0
 17747                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17748  1B37  303B               	movlw	59
 17749  1B38  319E  2639         	fcall	_CC2500_WriteCommand
 17750  1B3A  0008               	return
 17751  1B3B                     __end_of_CC2500_ClearTXFIFO:	
 17752                           
 17753                           	psect	text119
 17754  1B33                     __ptext119:	
 17755 ;; *************** function _CC2500_ClearRXFIFO *****************
 17756 ;; Defined at:
 17757 ;;		line 194 in file "../src/CC2500_B1.c"
 17758 ;; Parameters:    Size  Location     Type
 17759 ;;		None
 17760 ;; Auto vars:     Size  Location     Type
 17761 ;;		None
 17762 ;; Return value:  Size  Location     Type
 17763 ;;		None               void
 17764 ;; Registers used:
 17765 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17766 ;; Tracked objects:
 17767 ;;		On entry : 0/0
 17768 ;;		On exit  : 0/0
 17769 ;;		Unchanged: 0/0
 17770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17775 ;;Total ram usage:        0 bytes
 17776 ;; Hardware stack levels used:    1
 17777 ;; Hardware stack levels required when called:    7
 17778 ;; This function calls:
 17779 ;;		_CC2500_WriteCommand
 17780 ;; This function is called by:
 17781 ;;		_CC2500_PowerOnInitial
 17782 ;; This function uses a non-reentrant model
 17783 ;;
 17784                           
 17785                           
 17786                           ;psect for function _CC2500_ClearRXFIFO
 17787  1B33                     _CC2500_ClearRXFIFO:	
 17788                           
 17789                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 17790                           
 17791                           ;incstack = 0
 17792                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17793  1B33  303A               	movlw	58
 17794  1B34  319E  2639         	fcall	_CC2500_WriteCommand
 17795  1B36  0008               	return
 17796  1B37                     __end_of_CC2500_ClearRXFIFO:	
 17797                           
 17798                           	psect	text120
 17799  1E39                     __ptext120:	
 17800 ;; *************** function _CC2500_WriteCommand *****************
 17801 ;; Defined at:
 17802 ;;		line 285 in file "../src/CC2500_B1.c"
 17803 ;; Parameters:    Size  Location     Type
 17804 ;;  command         1    wreg     unsigned char 
 17805 ;; Auto vars:     Size  Location     Type
 17806 ;;  command         1    3[BANK0 ] unsigned char 
 17807 ;; Return value:  Size  Location     Type
 17808 ;;		None               void
 17809 ;; Registers used:
 17810 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17811 ;; Tracked objects:
 17812 ;;		On entry : 0/0
 17813 ;;		On exit  : 0/0
 17814 ;;		Unchanged: 0/0
 17815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17817 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17818 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17819 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17820 ;;Total ram usage:        2 bytes
 17821 ;; Hardware stack levels used:    1
 17822 ;; Hardware stack levels required when called:    6
 17823 ;; This function calls:
 17824 ;;		_CC2500_WriteByte
 17825 ;;		_Timeout_Counter
 17826 ;;		_set_TimeoutCleared
 17827 ;; This function is called by:
 17828 ;;		_CC2500_TxData
 17829 ;;		_CC2500_ClearTXFIFO
 17830 ;;		_CC2500_ClearRXFIFO
 17831 ;;		_CC2500_FrequencyCabr
 17832 ;;		_CC2500_SIDLEMode
 17833 ;;		_setRF_Main
 17834 ;;		_RF_RxDisable
 17835 ;; This function uses a non-reentrant model
 17836 ;;
 17837                           
 17838                           
 17839                           ;psect for function _CC2500_WriteCommand
 17840  1E39                     _CC2500_WriteCommand:	
 17841                           
 17842                           ;incstack = 0
 17843                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17844                           ;CC2500_WriteCommand@command stored from wreg
 17845  1E39  0020               	movlb	0	; select bank0
 17846  1E3A  00A3               	movwf	CC2500_WriteCommand@command
 17847                           
 17848                           ;CC2500_B1.c: 286: RC4 = 0;
 17849  1E3B  120E               	bcf	14,4	;volatile
 17850                           
 17851                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 17852  1E3C  0823               	movf	CC2500_WriteCommand@command,w
 17853  1E3D  00A2               	movwf	??_CC2500_WriteCommand
 17854  1E3E  0822               	movf	??_CC2500_WriteCommand,w
 17855  1E3F  00FB               	movwf	_SPI0Buffer
 17856                           
 17857                           ;CC2500_B1.c: 289: while (RC2 == 1 && myMain.Timeout == 0) {
 17858  1E40  2E44               	goto	l6516
 17859  1E41                     l6514:	
 17860                           
 17861                           ;CC2500_B1.c: 290: Timeout_Counter();
 17862  1E41  319D  25A1  319E   	fcall	_Timeout_Counter
 17863  1E44                     l6516:	
 17864  1E44  0020               	movlb	0	; select bank0
 17865  1E45  1D0E               	btfss	14,2	;volatile
 17866  1E46  2E4A               	goto	l6520
 17867  1E47  0021               	movlb	1	; select bank1
 17868  1E48  1D2C               	btfss	(_myMain^(0+128)+12),2
 17869  1E49  2E41               	goto	l6514
 17870  1E4A                     l6520:	
 17871                           
 17872                           ;CC2500_B1.c: 291: };
 17873                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 17874  1E4A  319B  2343  319E   	fcall	_set_TimeoutCleared
 17875                           
 17876                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 17877  1E4D  319D  2551         	fcall	_CC2500_WriteByte
 17878                           
 17879                           ;CC2500_B1.c: 295: RC4 = 1;
 17880  1E4F  0020               	movlb	0	; select bank0
 17881  1E50  160E               	bsf	14,4	;volatile
 17882  1E51  0008               	return
 17883  1E52                     __end_of_CC2500_WriteCommand:	
 17884                           
 17885                           	psect	text121
 17886  1B43                     __ptext121:	
 17887 ;; *************** function _set_TimeoutCleared *****************
 17888 ;; Defined at:
 17889 ;;		line 282 in file "../src/main_B1.c"
 17890 ;; Parameters:    Size  Location     Type
 17891 ;;		None
 17892 ;; Auto vars:     Size  Location     Type
 17893 ;;		None
 17894 ;; Return value:  Size  Location     Type
 17895 ;;		None               void
 17896 ;; Registers used:
 17897 ;;		status,2
 17898 ;; Tracked objects:
 17899 ;;		On entry : 0/0
 17900 ;;		On exit  : 0/0
 17901 ;;		Unchanged: 0/0
 17902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17907 ;;Total ram usage:        0 bytes
 17908 ;; Hardware stack levels used:    1
 17909 ;; Hardware stack levels required when called:    5
 17910 ;; This function calls:
 17911 ;;		Nothing
 17912 ;; This function is called by:
 17913 ;;		_CC2500_TxData
 17914 ;;		_CC2500_RxData
 17915 ;;		_CC2500_PowerRST
 17916 ;;		_CC2500_WriteREG
 17917 ;;		_CC2500_WriteCommand
 17918 ;;		_CC2500_ReadStatus
 17919 ;;		_getAD
 17920 ;;		_TouchPower
 17921 ;;		_CC2500_ReadREG
 17922 ;; This function uses a non-reentrant model
 17923 ;;
 17924                           
 17925                           
 17926                           ;psect for function _set_TimeoutCleared
 17927  1B43                     _set_TimeoutCleared:	
 17928                           
 17929                           ;main_B1.c: 283: myMain.Timeout = 0;
 17930                           
 17931                           ;incstack = 0
 17932                           ; Regs used in _set_TimeoutCleared: [status,2]
 17933  1B43  0021               	movlb	1	; select bank1
 17934  1B44  112C               	bcf	(_myMain^(0+128)+12),2
 17935                           
 17936                           ;main_B1.c: 284: myMain.Timeout_Counter = 0;
 17937  1B45  01AD               	clrf	(_myMain^(0+128)+13)
 17938  1B46  01AE               	clrf	((_myMain+1)^(0+128)+13)
 17939  1B47  0008               	return
 17940  1B48                     __end_of_set_TimeoutCleared:	
 17941                           
 17942                           	psect	text122
 17943  1DA1                     __ptext122:	
 17944 ;; *************** function _Timeout_Counter *****************
 17945 ;; Defined at:
 17946 ;;		line 273 in file "../src/main_B1.c"
 17947 ;; Parameters:    Size  Location     Type
 17948 ;;		None
 17949 ;; Auto vars:     Size  Location     Type
 17950 ;;		None
 17951 ;; Return value:  Size  Location     Type
 17952 ;;		None               void
 17953 ;; Registers used:
 17954 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17955 ;; Tracked objects:
 17956 ;;		On entry : 0/0
 17957 ;;		On exit  : 0/0
 17958 ;;		Unchanged: 0/0
 17959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17964 ;;Total ram usage:        0 bytes
 17965 ;; Hardware stack levels used:    1
 17966 ;; Hardware stack levels required when called:    5
 17967 ;; This function calls:
 17968 ;;		Nothing
 17969 ;; This function is called by:
 17970 ;;		_CC2500_TxData
 17971 ;;		_CC2500_RxData
 17972 ;;		_CC2500_PowerRST
 17973 ;;		_CC2500_WriteREG
 17974 ;;		_CC2500_WriteCommand
 17975 ;;		_CC2500_ReadStatus
 17976 ;;		_getAD
 17977 ;;		_TouchPower
 17978 ;;		_CC2500_ReadREG
 17979 ;; This function uses a non-reentrant model
 17980 ;;
 17981                           
 17982                           
 17983                           ;psect for function _Timeout_Counter
 17984  1DA1                     _Timeout_Counter:	
 17985                           
 17986                           ;main_B1.c: 274: myMain.Timeout_Counter++;
 17987                           
 17988                           ;incstack = 0
 17989                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17990  1DA1  3001               	movlw	1
 17991  1DA2  0021               	movlb	1	; select bank1
 17992  1DA3  07AD               	addwf	(_myMain^(0+128)+13),f
 17993  1DA4  3000               	movlw	0
 17994  1DA5  3DAE               	addwfc	((_myMain+1)^(0+128)+13),f
 17995                           
 17996                           ;main_B1.c: 275: if (myMain.Timeout_Counter == 10000) {
 17997  1DA6  300D               	movlw	13
 17998  1DA7  3EA0               	addlw	_myMain& (0+255)
 17999  1DA8  0086               	movwf	6
 18000  1DA9  0187               	clrf	7
 18001  1DAA  3F40               	moviw [0]fsr1
 18002  1DAB  3A10               	xorlw	16
 18003  1DAC  1D03               	skipz
 18004  1DAD  2DB0               	goto	u5305
 18005  1DAE  3F41               	moviw [1]fsr1
 18006  1DAF  3A27               	xorlw	39
 18007  1DB0                     u5305:	
 18008  1DB0  1D03               	skipz
 18009  1DB1  0008               	return
 18010                           
 18011                           ;main_B1.c: 276: myMain.Timeout_Counter = 0;
 18012  1DB2  01AD               	clrf	(_myMain^(0+128)+13)
 18013  1DB3  01AE               	clrf	((_myMain+1)^(0+128)+13)
 18014                           
 18015                           ;main_B1.c: 277: myMain.Timeout = 1;
 18016  1DB4  152C               	bsf	(_myMain^(0+128)+12),2
 18017  1DB5  0008               	return
 18018  1DB6                     __end_of_Timeout_Counter:	
 18019                           
 18020                           	psect	text123
 18021  1D51                     __ptext123:	
 18022 ;; *************** function _CC2500_WriteByte *****************
 18023 ;; Defined at:
 18024 ;;		line 219 in file "../src/CC2500_B1.c"
 18025 ;; Parameters:    Size  Location     Type
 18026 ;;		None
 18027 ;; Auto vars:     Size  Location     Type
 18028 ;;  loop_a          1    1[BANK0 ] unsigned char 
 18029 ;; Return value:  Size  Location     Type
 18030 ;;		None               void
 18031 ;; Registers used:
 18032 ;;		wreg, status,2, status,0
 18033 ;; Tracked objects:
 18034 ;;		On entry : 0/0
 18035 ;;		On exit  : 0/0
 18036 ;;		Unchanged: 0/0
 18037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18039 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18040 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18041 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18042 ;;Total ram usage:        2 bytes
 18043 ;; Hardware stack levels used:    1
 18044 ;; Hardware stack levels required when called:    5
 18045 ;; This function calls:
 18046 ;;		Nothing
 18047 ;; This function is called by:
 18048 ;;		_CC2500_TxData
 18049 ;;		_CC2500_RxData
 18050 ;;		_CC2500_PowerRST
 18051 ;;		_CC2500_WriteREG
 18052 ;;		_CC2500_WriteCommand
 18053 ;;		_CC2500_ReadStatus
 18054 ;;		_CC2500_ReadREG
 18055 ;; This function uses a non-reentrant model
 18056 ;;
 18057                           
 18058                           
 18059                           ;psect for function _CC2500_WriteByte
 18060  1D51                     _CC2500_WriteByte:	
 18061                           
 18062                           ;CC2500_B1.c: 220: unsigned char loop_a;
 18063                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 18064                           
 18065                           ;incstack = 0
 18066                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18067  1D51  0020               	movlb	0	; select bank0
 18068  1D52  01A1               	clrf	CC2500_WriteByte@loop_a
 18069  1D53                     L12:	
 18070  1D53  3008               	movlw	8
 18071  1D54  0221               	subwf	CC2500_WriteByte@loop_a,w
 18072  1D55  1803               	btfsc	3,0
 18073  1D56  0008               	return
 18074                           
 18075                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 18076  1D57  1FFB               	btfss	_SPI0Buffer,7
 18077  1D58  2D5B               	goto	l328
 18078                           
 18079                           ;CC2500_B1.c: 223: RC0 = 1;
 18080  1D59  140E               	bsf	14,0	;volatile
 18081  1D5A  2D5C               	goto	l329
 18082  1D5B                     l328:	
 18083                           
 18084                           ;CC2500_B1.c: 224: else
 18085                           ;CC2500_B1.c: 225: RC0 = 0;
 18086  1D5B  100E               	bcf	14,0	;volatile
 18087  1D5C                     l329:	
 18088                           
 18089                           ;CC2500_B1.c: 226: RC1 = 1;
 18090  1D5C  148E               	bsf	14,1	;volatile
 18091                           
 18092                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 18093  1D5D  1003               	clrc
 18094  1D5E  0DFB               	rlf	_SPI0Buffer,f
 18095                           
 18096                           ;CC2500_B1.c: 228: RC1 = 0;
 18097  1D5F  108E               	bcf	14,1	;volatile
 18098  1D60  3001               	movlw	1
 18099  1D61  00A0               	movwf	??_CC2500_WriteByte
 18100  1D62  0820               	movf	??_CC2500_WriteByte,w
 18101  1D63  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18102  1D64  2D53               	goto	L12
 18103  1D65                     __end_of_CC2500_WriteByte:	
 18104                           
 18105                           	psect	text124
 18106  14A4                     __ptext124:	
 18107 ;; *************** function _Buzzer_Main *****************
 18108 ;; Defined at:
 18109 ;;		line 46 in file "../src/Buzzer_B1.c"
 18110 ;; Parameters:    Size  Location     Type
 18111 ;;		None
 18112 ;; Auto vars:     Size  Location     Type
 18113 ;;		None
 18114 ;; Return value:  Size  Location     Type
 18115 ;;		None               void
 18116 ;; Registers used:
 18117 ;;		wreg, status,2, status,0
 18118 ;; Tracked objects:
 18119 ;;		On entry : 0/0
 18120 ;;		On exit  : 0/0
 18121 ;;		Unchanged: 0/0
 18122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18126 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18127 ;;Total ram usage:        1 bytes
 18128 ;; Hardware stack levels used:    1
 18129 ;; Hardware stack levels required when called:    5
 18130 ;; This function calls:
 18131 ;;		Nothing
 18132 ;; This function is called by:
 18133 ;;		_main
 18134 ;; This function uses a non-reentrant model
 18135 ;;
 18136                           
 18137                           
 18138                           ;psect for function _Buzzer_Main
 18139  14A4                     _Buzzer_Main:	
 18140                           
 18141                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18142                           
 18143                           ;incstack = 0
 18144                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18145  14A4  0021               	movlb	1	; select bank1
 18146  14A5  1CAF               	btfss	_Buz1^(0+128),1
 18147  14A6  0008               	return
 18148                           
 18149                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18150  14A7  3001               	movlw	1
 18151  14A8  07B0               	addwf	(_Buz1^(0+128)+1),f
 18152  14A9  3000               	movlw	0
 18153  14AA  3DB1               	addwfc	((_Buz1+1)^(0+128)+1),f
 18154                           
 18155                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18156  14AB  0836               	movf	((_Buz1+1)^(0+128)+6),w
 18157  14AC  0231               	subwf	((_Buz1+1)^(0+128)+1),w
 18158  14AD  1D03               	skipz
 18159  14AE  2CB1               	goto	u7595
 18160  14AF  0835               	movf	(_Buz1^(0+128)+6),w
 18161  14B0  0230               	subwf	(_Buz1^(0+128)+1),w
 18162  14B1                     u7595:	
 18163  14B1  1C03               	skipc
 18164  14B2  0008               	return
 18165                           
 18166                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18167  14B3  01B0               	clrf	(_Buz1^(0+128)+1)
 18168  14B4  01B1               	clrf	((_Buz1+1)^(0+128)+1)
 18169                           
 18170                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18171  14B5  12AF               	bcf	_Buz1^(0+128),5
 18172  14B6  0020               	movlb	0	; select bank0
 18173  14B7  1D8D               	btfss	13,3	;volatile
 18174  14B8  2CBB               	goto	l7816
 18175  14B9  0021               	movlb	1	; select bank1
 18176  14BA  16AF               	bsf	_Buz1^(0+128),5
 18177  14BB                     l7816:	
 18178                           
 18179                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18180  14BB  0021               	movlb	1	; select bank1
 18181  14BC  1AAF               	btfsc	_Buz1^(0+128),5
 18182  14BD  2CE7               	goto	l106
 18183                           
 18184                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18185  14BE  08B2               	movf	(_Buz1^(0+128)+3),f
 18186  14BF  1D03               	skipz
 18187  14C0  2CE3               	goto	l107
 18188                           
 18189                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18190  14C1  1DAF               	btfss	_Buz1^(0+128),3
 18191  14C2  2CD1               	goto	l108
 18192                           
 18193                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18194  14C3  11AF               	bcf	_Buz1^(0+128),3
 18195                           
 18196                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18197  14C4  0833               	movf	(_Buz1^(0+128)+4),w
 18198  14C5  0020               	movlb	0	; select bank0
 18199  14C6  00A0               	movwf	??_Buzzer_Main
 18200  14C7  0820               	movf	??_Buzzer_Main,w
 18201  14C8  0021               	movlb	1	; select bank1
 18202  14C9  00B2               	movwf	(_Buz1^(0+128)+3)
 18203                           
 18204                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18205  14CA  0838               	movf	((_Buz1+1)^(0+128)+8),w
 18206  14CB  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 18207  14CC  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 18208  14CD  0837               	movf	(_Buz1^(0+128)+8),w
 18209  14CE  01B5               	clrf	(_Buz1^(0+128)+6)
 18210  14CF  07B5               	addwf	(_Buz1^(0+128)+6),f
 18211                           
 18212                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18213  14D0  0008               	return
 18214  14D1                     l108:	
 18215  14D1  1E2F               	btfss	_Buz1^(0+128),4
 18216  14D2  2CE1               	goto	l110
 18217                           
 18218                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18219  14D3  122F               	bcf	_Buz1^(0+128),4
 18220                           
 18221                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18222  14D4  0834               	movf	(_Buz1^(0+128)+5),w
 18223  14D5  0020               	movlb	0	; select bank0
 18224  14D6  00A0               	movwf	??_Buzzer_Main
 18225  14D7  0820               	movf	??_Buzzer_Main,w
 18226  14D8  0021               	movlb	1	; select bank1
 18227  14D9  00B2               	movwf	(_Buz1^(0+128)+3)
 18228                           
 18229                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18230  14DA  083A               	movf	((_Buz1+1)^(0+128)+10),w
 18231  14DB  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 18232  14DC  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 18233  14DD  0839               	movf	(_Buz1^(0+128)+10),w
 18234  14DE  01B5               	clrf	(_Buz1^(0+128)+6)
 18235  14DF  07B5               	addwf	(_Buz1^(0+128)+6),f
 18236                           
 18237                           ;Buzzer_B1.c: 62: } else {
 18238  14E0  0008               	return
 18239  14E1                     l110:	
 18240                           
 18241                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18242  14E1  10AF               	bcf	_Buz1^(0+128),1
 18243                           
 18244                           ;Buzzer_B1.c: 64: }
 18245                           ;Buzzer_B1.c: 65: } else {
 18246  14E2  0008               	return
 18247  14E3                     l107:	
 18248                           
 18249                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18250  14E3  16AF               	bsf	_Buz1^(0+128),5
 18251                           
 18252                           ;Buzzer_B1.c: 68: RB3 = 1;
 18253  14E4  0020               	movlb	0	; select bank0
 18254  14E5  158D               	bsf	13,3	;volatile
 18255                           
 18256                           ;Buzzer_B1.c: 69: }
 18257                           ;Buzzer_B1.c: 70: } else {
 18258  14E6  0008               	return
 18259  14E7                     l106:	
 18260                           
 18261                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18262  14E7  12AF               	bcf	_Buz1^(0+128),5
 18263                           
 18264                           ;Buzzer_B1.c: 73: RB3 = 0;
 18265  14E8  0020               	movlb	0	; select bank0
 18266  14E9  118D               	bcf	13,3	;volatile
 18267                           
 18268                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18269  14EA  3001               	movlw	1
 18270  14EB  0021               	movlb	1	; select bank1
 18271  14EC  02B2               	subwf	(_Buz1^(0+128)+3),f
 18272  14ED  0008               	return
 18273  14EE                     __end_of_Buzzer_Main:	
 18274                           
 18275                           	psect	text125
 18276  1B24                     __ptext125:	
 18277 ;; *************** function _Buzzer_Initialization *****************
 18278 ;; Defined at:
 18279 ;;		line 11 in file "../src/Buzzer_B1.c"
 18280 ;; Parameters:    Size  Location     Type
 18281 ;;		None
 18282 ;; Auto vars:     Size  Location     Type
 18283 ;;		None
 18284 ;; Return value:  Size  Location     Type
 18285 ;;		None               void
 18286 ;; Registers used:
 18287 ;;		None
 18288 ;; Tracked objects:
 18289 ;;		On entry : 0/0
 18290 ;;		On exit  : 0/0
 18291 ;;		Unchanged: 0/0
 18292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18297 ;;Total ram usage:        0 bytes
 18298 ;; Hardware stack levels used:    1
 18299 ;; Hardware stack levels required when called:    5
 18300 ;; This function calls:
 18301 ;;		Nothing
 18302 ;; This function is called by:
 18303 ;;		_main
 18304 ;; This function uses a non-reentrant model
 18305 ;;
 18306                           
 18307                           
 18308                           ;psect for function _Buzzer_Initialization
 18309  1B24                     _Buzzer_Initialization:	
 18310                           
 18311                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18312                           
 18313                           ;incstack = 0
 18314                           ; Regs used in _Buzzer_Initialization: []
 18315  1B24  0021               	movlb	1	; select bank1
 18316  1B25  142F               	bsf	_Buz1^(0+128),0
 18317  1B26  0008               	return
 18318  1B27                     __end_of_Buzzer_Initialization:	
 18319                           
 18320                           	psect	intentry
 18321  0004                     __pintentry:	
 18322 ;; *************** function _ISR *****************
 18323 ;; Defined at:
 18324 ;;		line 107 in file "../src/MCU_B1.c"
 18325 ;; Parameters:    Size  Location     Type
 18326 ;;		None
 18327 ;; Auto vars:     Size  Location     Type
 18328 ;;		None
 18329 ;; Return value:  Size  Location     Type
 18330 ;;		None               void
 18331 ;; Registers used:
 18332 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18333 ;; Tracked objects:
 18334 ;;		On entry : 0/0
 18335 ;;		On exit  : 0/0
 18336 ;;		Unchanged: 0/0
 18337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18340 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18341 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18342 ;;Total ram usage:        1 bytes
 18343 ;; Hardware stack levels used:    1
 18344 ;; Hardware stack levels required when called:    4
 18345 ;; This function calls:
 18346 ;;		_IOC_ISR
 18347 ;;		_TMR1_ISR
 18348 ;; This function is called by:
 18349 ;;		Interrupt level 1
 18350 ;; This function uses a non-reentrant model
 18351 ;;
 18352                           
 18353  0004                     _ISR:	
 18354                           
 18355                           ;incstack = 0
 18356                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18357  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18358  0005  3180               	pagesel	$
 18359  0006  0020               	movlb	0	; select bank0
 18360  0007  087F               	movf	127,w
 18361  0008  00F7               	movwf	??_ISR
 18362                           
 18363                           ;MCU_B1.c: 109: IOC_ISR();
 18364  0009  319C  2427  3180   	fcall	_IOC_ISR
 18365                           
 18366                           ;MCU_B1.c: 111: ;;
 18367                           ;MCU_B1.c: 113: TMR1_ISR();
 18368  000C  3190  20DD         	fcall	_TMR1_ISR
 18369  000E  0877               	movf	??_ISR,w
 18370  000F  0020               	movlb	0	; select bank0
 18371  0010  00FF               	movwf	127
 18372  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18373  0012  0009               	retfie
 18374  0013                     __end_of_ISR:	
 18375                           
 18376                           	psect	text127
 18377  10DD                     __ptext127:	
 18378 ;; *************** function _TMR1_ISR *****************
 18379 ;; Defined at:
 18380 ;;		line 209 in file "../src/MCU_B1.c"
 18381 ;; Parameters:    Size  Location     Type
 18382 ;;		None
 18383 ;; Auto vars:     Size  Location     Type
 18384 ;;		None
 18385 ;; Return value:  Size  Location     Type
 18386 ;;		None               void
 18387 ;; Registers used:
 18388 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18389 ;; Tracked objects:
 18390 ;;		On entry : 0/0
 18391 ;;		On exit  : 0/0
 18392 ;;		Unchanged: 0/0
 18393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18398 ;;Total ram usage:        0 bytes
 18399 ;; Hardware stack levels used:    1
 18400 ;; Hardware stack levels required when called:    2
 18401 ;; This function calls:
 18402 ;;		_setDimmerLights_IntrControl
 18403 ;; This function is called by:
 18404 ;;		_ISR
 18405 ;; This function uses a non-reentrant model
 18406 ;;
 18407                           
 18408                           
 18409                           ;psect for function _TMR1_ISR
 18410  10DD                     _TMR1_ISR:	
 18411                           
 18412                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18413                           
 18414                           ;incstack = 0
 18415                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18416  10DD  0021               	movlb	1	; select bank1
 18417  10DE  1C11               	btfss	17,0	;volatile
 18418  10DF  0008               	return
 18419  10E0  0020               	movlb	0	; select bank0
 18420  10E1  1C11               	btfss	17,0	;volatile
 18421  10E2  0008               	return
 18422                           
 18423                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18424  10E3  30FA               	movlw	250
 18425  10E4  0097               	movwf	23	;volatile
 18426                           
 18427                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18428  10E5  3038               	movlw	56
 18429  10E6  0096               	movwf	22	;volatile
 18430                           
 18431                           ;MCU_B1.c: 214: TMR1IF = 0;
 18432  10E7  1011               	bcf	17,0	;volatile
 18433                           
 18434                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18435  10E8  3001               	movlw	1
 18436  10E9  3182  22FE  3190   	fcall	_setDimmerLights_IntrControl
 18437                           
 18438                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18439  10EC  3002               	movlw	2
 18440  10ED  3182  22FE  3190   	fcall	_setDimmerLights_IntrControl
 18441                           
 18442                           ;MCU_B1.c: 234: Timer1.Count++;
 18443  10F0  3001               	movlw	1
 18444  10F1  0021               	movlb	1	; select bank1
 18445  10F2  07C8               	addwf	(_Timer1^(0+128)+1),f
 18446  10F3  3000               	movlw	0
 18447  10F4  3DC9               	addwfc	((_Timer1+1)^(0+128)+1),f
 18448                           
 18449                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 18450  10F5  3001               	movlw	1
 18451  10F6  3EC7               	addlw	_Timer1& (0+255)
 18452  10F7  0086               	movwf	6
 18453  10F8  0187               	clrf	7
 18454  10F9  3F40               	moviw [0]fsr1
 18455  10FA  3A64               	xorlw	100
 18456  10FB  1D03               	skipz
 18457  10FC  28FF               	goto	u775_25
 18458  10FD  3F41               	moviw [1]fsr1
 18459  10FE  3A00               	xorlw	0
 18460  10FF                     u775_25:	
 18461  10FF  1D03               	skipz
 18462  1100  0008               	return
 18463                           
 18464                           ;MCU_B1.c: 236: {
 18465                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18466  1101  01C8               	clrf	(_Timer1^(0+128)+1)
 18467  1102  01C9               	clrf	((_Timer1+1)^(0+128)+1)
 18468                           
 18469                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18470  1103  1447               	bsf	_Timer1^(0+128),0
 18471  1104  0008               	return
 18472  1105                     __end_of_TMR1_ISR:	
 18473                           
 18474                           	psect	text128
 18475  02FE                     __ptext128:	
 18476 ;; *************** function _setDimmerLights_IntrControl *****************
 18477 ;; Defined at:
 18478 ;;		line 92 in file "../src/Dimmer_B1.c"
 18479 ;; Parameters:    Size  Location     Type
 18480 ;;  lights          1    wreg     unsigned char 
 18481 ;; Auto vars:     Size  Location     Type
 18482 ;;  lights          1    6[COMMON] unsigned char 
 18483 ;; Return value:  Size  Location     Type
 18484 ;;		None               void
 18485 ;; Registers used:
 18486 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18487 ;; Tracked objects:
 18488 ;;		On entry : 0/0
 18489 ;;		On exit  : 0/0
 18490 ;;		Unchanged: 0/0
 18491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18493 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18494 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18495 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18496 ;;Total ram usage:        5 bytes
 18497 ;; Hardware stack levels used:    1
 18498 ;; Hardware stack levels required when called:    1
 18499 ;; This function calls:
 18500 ;;		_DimmerIntrPointSelect
 18501 ;; This function is called by:
 18502 ;;		_TMR1_ISR
 18503 ;; This function uses a non-reentrant model
 18504 ;;
 18505                           
 18506                           
 18507                           ;psect for function _setDimmerLights_IntrControl
 18508  02FE                     _setDimmerLights_IntrControl:	
 18509                           
 18510                           ;incstack = 0
 18511                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18512                           ;setDimmerLights_IntrControl@lights stored from wreg
 18513  02FE  00F6               	movwf	setDimmerLights_IntrControl@lights
 18514                           
 18515                           ;Dimmer_B1.c: 228: DimmerIntrPointSelect(lights);
 18516  02FF  0876               	movf	setDimmerLights_IntrControl@lights,w
 18517  0300  319C  24A9  3182   	fcall	_DimmerIntrPointSelect
 18518                           
 18519                           ;Dimmer_B1.c: 229: if (DimmerLightsIntr->GO == 1) {
 18520  0303  0879               	movf	_DimmerLightsIntr,w
 18521  0304  0086               	movwf	6
 18522  0305  3001               	movlw	1	; select bank2/3
 18523  0306  0087               	movwf	7
 18524  0307  1C01               	btfss	1,0
 18525  0308  2B60               	goto	i1l7264
 18526                           
 18527                           ;Dimmer_B1.c: 230: DimmerLightsIntr->Count++;
 18528  0309  3001               	movlw	1
 18529  030A  00F2               	movwf	??_setDimmerLights_IntrControl
 18530  030B  0879               	movf	_DimmerLightsIntr,w
 18531  030C  3E03               	addlw	3
 18532  030D  0086               	movwf	6
 18533  030E  3001               	movlw	1	; select bank2/3
 18534  030F  0087               	movwf	7
 18535  0310  0872               	movf	??_setDimmerLights_IntrControl,w
 18536  0311  0781               	addwf	1,f
 18537                           
 18538                           ;Dimmer_B1.c: 231: if (DimmerLightsIntr->Count
 18539                           ;Dimmer_B1.c: 232: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 18540  0312  0022               	movlb	2	; select bank2
 18541  0313  0840               	movf	(_Dimmer^(0+256)+2),w
 18542  0314  00F2               	movwf	??_setDimmerLights_IntrControl
 18543  0315  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18544  0316  09F2               	comf	??_setDimmerLights_IntrControl,f
 18545  0317  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18546  0318  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18547  0319  1903               	skipnz
 18548  031A  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18549  031B  0879               	movf	_DimmerLightsIntr,w
 18550  031C  3E04               	addlw	4
 18551  031D  0086               	movwf	6
 18552  031E  3001               	movlw	1	; select bank2/3
 18553  031F  0087               	movwf	7
 18554  0320  0801               	movf	1,w
 18555  0321  0772               	addwf	??_setDimmerLights_IntrControl,w
 18556  0322  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18557  0323  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18558  0324  1803               	skipnc
 18559  0325  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18560  0326  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18561  0327  0879               	movf	_DimmerLightsIntr,w
 18562  0328  3E03               	addlw	3
 18563  0329  0086               	movwf	6
 18564  032A  3001               	movlw	1	; select bank2/3
 18565  032B  0087               	movwf	7
 18566  032C  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18567  032D  3A80               	xorlw	128
 18568  032E  3C80               	sublw	128
 18569  032F  1D03               	skipz
 18570  0330  2B33               	goto	u659_25
 18571  0331  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18572  0332  0201               	subwf	1,w
 18573  0333                     u659_25:	
 18574  0333  1C03               	skipc
 18575  0334  0008               	return
 18576                           
 18577                           ;Dimmer_B1.c: 233: DimmerLightsIntr->Count = 0;
 18578  0335  0879               	movf	_DimmerLightsIntr,w
 18579  0336  3E03               	addlw	3
 18580  0337  0086               	movwf	6
 18581  0338  3001               	movlw	1	; select bank2/3
 18582  0339  0087               	movwf	7
 18583  033A  0181               	clrf	1
 18584                           
 18585                           ;Dimmer_B1.c: 234: DimmerLightsIntr->GO = 0;
 18586  033B  0879               	movf	_DimmerLightsIntr,w
 18587  033C  0086               	movwf	6
 18588  033D  3001               	movlw	1	; select bank2/3
 18589  033E  0087               	movwf	7
 18590  033F  1001               	bcf	1,0
 18591                           
 18592                           ;Dimmer_B1.c: 235: DimmerLightsIntr->Flag = 1;
 18593  0340  0879               	movf	_DimmerLightsIntr,w
 18594  0341  3E08               	addlw	8
 18595  0342  0086               	movwf	6
 18596  0343  3001               	movlw	1	; select bank2/3
 18597  0344  0087               	movwf	7
 18598  0345  1401               	bsf	1,0
 18599                           
 18600                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->MOSFET == 1) {
 18601  0346  0879               	movf	_DimmerLightsIntr,w
 18602  0347  3E09               	addlw	9
 18603  0348  0086               	movwf	6
 18604  0349  3001               	movlw	1	; select bank2/3
 18605  034A  0087               	movwf	7
 18606  034B  1E01               	btfss	1,4
 18607  034C  0008               	return
 18608                           
 18609                           ;Dimmer_B1.c: 237: DimmerLightsIntr->MOSFET = 0;
 18610  034D  0879               	movf	_DimmerLightsIntr,w
 18611  034E  3E09               	addlw	9
 18612  034F  0086               	movwf	6
 18613  0350  3001               	movlw	1	; select bank2/3
 18614  0351  0087               	movwf	7
 18615  0352  1201               	bcf	1,4
 18616                           
 18617                           ;Dimmer_B1.c: 239: if (lights == 1) {
 18618  0353  0876               	movf	setDimmerLights_IntrControl@lights,w
 18619  0354  3A01               	xorlw	1
 18620  0355  1D03               	skipz
 18621  0356  2B59               	goto	i1l7260
 18622                           
 18623                           ;Dimmer_B1.c: 240: RA7 = 0;
 18624  0357  0020               	movlb	0	; select bank0
 18625  0358  138C               	bcf	12,7	;volatile
 18626  0359                     i1l7260:	
 18627                           ;Dimmer_B1.c: 241: ;;
 18628                           
 18629                           
 18630                           ;Dimmer_B1.c: 242: }
 18631                           ;Dimmer_B1.c: 245: if (lights == 2) {
 18632  0359  0876               	movf	setDimmerLights_IntrControl@lights,w
 18633  035A  3A02               	xorlw	2
 18634  035B  1D03               	skipz
 18635  035C  0008               	return
 18636                           
 18637                           ;Dimmer_B1.c: 246: RB4 = 0;
 18638  035D  0020               	movlb	0	; select bank0
 18639  035E  120D               	bcf	13,4	;volatile
 18640                           
 18641                           ;Dimmer_B1.c: 247: }
 18642                           ;Dimmer_B1.c: 249: }
 18643                           ;Dimmer_B1.c: 250: }
 18644                           ;Dimmer_B1.c: 251: } else {
 18645  035F  0008               	return
 18646  0360                     i1l7264:	
 18647                           
 18648                           ;Dimmer_B1.c: 252: if (DimmerLightsIntr->Flag == 1) {
 18649  0360  0879               	movf	_DimmerLightsIntr,w
 18650  0361  3E08               	addlw	8
 18651  0362  0086               	movwf	6
 18652  0363  3001               	movlw	1	; select bank2/3
 18653  0364  0087               	movwf	7
 18654  0365  1C01               	btfss	1,0
 18655  0366  2C14               	goto	i1l744
 18656                           
 18657                           ;Dimmer_B1.c: 253: DimmerLightsIntr->Flag = 0;
 18658  0367  0879               	movf	_DimmerLightsIntr,w
 18659  0368  3E08               	addlw	8
 18660  0369  0086               	movwf	6
 18661  036A  3001               	movlw	1	; select bank2/3
 18662  036B  0087               	movwf	7
 18663  036C  1001               	bcf	1,0
 18664                           
 18665                           ;Dimmer_B1.c: 254: if (DimmerLightsIntr->Signal == 1) {
 18666  036D  0879               	movf	_DimmerLightsIntr,w
 18667  036E  0086               	movwf	6
 18668  036F  3001               	movlw	1	; select bank2/3
 18669  0370  0087               	movwf	7
 18670  0371  1C81               	btfss	1,1
 18671  0372  2C14               	goto	i1l744
 18672                           
 18673                           ;Dimmer_B1.c: 255: DimmerLightsIntr->DimmingTime++;
 18674  0373  3001               	movlw	1
 18675  0374  00F2               	movwf	??_setDimmerLights_IntrControl
 18676  0375  0A79               	incf	_DimmerLightsIntr,w
 18677  0376  0086               	movwf	6
 18678  0377  3001               	movlw	1	; select bank2/3
 18679  0378  0087               	movwf	7
 18680  0379  0872               	movf	??_setDimmerLights_IntrControl,w
 18681  037A  0781               	addwf	1,f
 18682                           
 18683                           ;Dimmer_B1.c: 256: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18684  037B  0A79               	incf	_DimmerLightsIntr,w
 18685  037C  0086               	movwf	6
 18686  037D  3001               	movlw	1	; select bank2/3
 18687  037E  0087               	movwf	7
 18688  037F  0879               	movf	_DimmerLightsIntr,w
 18689  0380  3E02               	addlw	2
 18690  0381  0084               	movwf	4
 18691  0382  3001               	movlw	1	; select bank2/3
 18692  0383  0085               	movwf	5
 18693  0384  0800               	movf	0,w
 18694  0385  0201               	subwf	1,w
 18695  0386  1C03               	skipc
 18696  0387  2C14               	goto	i1l744
 18697                           
 18698                           ;Dimmer_B1.c: 257: DimmerLightsIntr->DimmingTime = 0;
 18699  0388  0A79               	incf	_DimmerLightsIntr,w
 18700  0389  0086               	movwf	6
 18701  038A  3001               	movlw	1	; select bank2/3
 18702  038B  0087               	movwf	7
 18703  038C  0181               	clrf	1
 18704                           
 18705                           ;Dimmer_B1.c: 258: if (DimmerLightsIntr->AdjFlag == 1) {
 18706  038D  0879               	movf	_DimmerLightsIntr,w
 18707  038E  0086               	movwf	6
 18708  038F  3001               	movlw	1	; select bank2/3
 18709  0390  0087               	movwf	7
 18710  0391  1D81               	btfss	1,3
 18711  0392  2BC9               	goto	i1l7290
 18712                           
 18713                           ;Dimmer_B1.c: 259: if (DimmerLightsIntr->AdjStatus == 0) {
 18714  0393  0879               	movf	_DimmerLightsIntr,w
 18715  0394  0086               	movwf	6
 18716  0395  3001               	movlw	1	; select bank2/3
 18717  0396  0087               	movwf	7
 18718  0397  1A01               	btfsc	1,4
 18719  0398  2BB2               	goto	i1l7284
 18720                           
 18721                           ;Dimmer_B1.c: 260: if (DimmerLightsIntr->DimmingValue < ((char)(80*0.8))) {
 18722  0399  0879               	movf	_DimmerLightsIntr,w
 18723  039A  3E04               	addlw	4
 18724  039B  0086               	movwf	6
 18725  039C  3001               	movlw	1	; select bank2/3
 18726  039D  0087               	movwf	7
 18727  039E  3040               	movlw	64
 18728  039F  0201               	subwf	1,w
 18729  03A0  1803               	skipnc
 18730  03A1  2BAC               	goto	i1l7282
 18731                           
 18732                           ;Dimmer_B1.c: 261: DimmerLightsIntr->DimmingValue++;
 18733  03A2  3001               	movlw	1
 18734  03A3  00F2               	movwf	??_setDimmerLights_IntrControl
 18735  03A4  0879               	movf	_DimmerLightsIntr,w
 18736  03A5  3E04               	addlw	4
 18737  03A6  0086               	movwf	6
 18738  03A7  3001               	movlw	1	; select bank2/3
 18739  03A8  0087               	movwf	7
 18740  03A9  0872               	movf	??_setDimmerLights_IntrControl,w
 18741  03AA  0781               	addwf	1,f
 18742                           
 18743                           ;Dimmer_B1.c: 262: } else {
 18744  03AB  2C14               	goto	i1l744
 18745  03AC                     i1l7282:	
 18746                           
 18747                           ;Dimmer_B1.c: 263: DimmerLightsIntr->AdjStatus = 1;
 18748  03AC  0879               	movf	_DimmerLightsIntr,w
 18749  03AD  0086               	movwf	6
 18750  03AE  3001               	movlw	1	; select bank2/3
 18751  03AF  0087               	movwf	7
 18752  03B0  1601               	bsf	1,4
 18753                           
 18754                           ;Dimmer_B1.c: 264: }
 18755                           ;Dimmer_B1.c: 265: } else {
 18756  03B1  2C14               	goto	i1l744
 18757  03B2                     i1l7284:	
 18758                           
 18759                           ;Dimmer_B1.c: 266: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18760  03B2  0879               	movf	_DimmerLightsIntr,w
 18761  03B3  3E04               	addlw	4
 18762  03B4  0086               	movwf	6
 18763  03B5  3001               	movlw	1	; select bank2/3
 18764  03B6  0087               	movwf	7
 18765  03B7  300D               	movlw	13
 18766  03B8  0201               	subwf	1,w
 18767  03B9  1C03               	skipc
 18768  03BA  2BC3               	goto	i1l7288
 18769                           
 18770                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingValue--;
 18771  03BB  0879               	movf	_DimmerLightsIntr,w
 18772  03BC  3E04               	addlw	4
 18773  03BD  0086               	movwf	6
 18774  03BE  3001               	movlw	1	; select bank2/3
 18775  03BF  0087               	movwf	7
 18776  03C0  3001               	movlw	1
 18777  03C1  0281               	subwf	1,f
 18778                           
 18779                           ;Dimmer_B1.c: 268: } else {
 18780  03C2  2C14               	goto	i1l744
 18781  03C3                     i1l7288:	
 18782                           
 18783                           ;Dimmer_B1.c: 269: DimmerLightsIntr->AdjStatus = 0;
 18784  03C3  0879               	movf	_DimmerLightsIntr,w
 18785  03C4  0086               	movwf	6
 18786  03C5  3001               	movlw	1	; select bank2/3
 18787  03C6  0087               	movwf	7
 18788  03C7  1201               	bcf	1,4
 18789                           
 18790                           ;Dimmer_B1.c: 270: }
 18791                           ;Dimmer_B1.c: 271: }
 18792                           ;Dimmer_B1.c: 272: } else if (DimmerLightsIntr->AdjRF == 1) {
 18793  03C8  2C14               	goto	i1l744
 18794  03C9                     i1l7290:	
 18795  03C9  0879               	movf	_DimmerLightsIntr,w
 18796  03CA  0086               	movwf	6
 18797  03CB  3001               	movlw	1	; select bank2/3
 18798  03CC  0087               	movwf	7
 18799  03CD  1D01               	btfss	1,2
 18800  03CE  2C14               	goto	i1l744
 18801                           
 18802                           ;Dimmer_B1.c: 273: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18803  03CF  0879               	movf	_DimmerLightsIntr,w
 18804  03D0  3E04               	addlw	4
 18805  03D1  0086               	movwf	6
 18806  03D2  3001               	movlw	1	; select bank2/3
 18807  03D3  0087               	movwf	7
 18808  03D4  0879               	movf	_DimmerLightsIntr,w
 18809  03D5  3E05               	addlw	5
 18810  03D6  0084               	movwf	4
 18811  03D7  3001               	movlw	1	; select bank2/3
 18812  03D8  0085               	movwf	5
 18813  03D9  0800               	movf	0,w
 18814  03DA  0201               	subwf	1,w
 18815  03DB  1803               	skipnc
 18816  03DC  2BE7               	goto	i1l7296
 18817                           
 18818                           ;Dimmer_B1.c: 274: DimmerLightsIntr->DimmingValue++;
 18819  03DD  3001               	movlw	1
 18820  03DE  00F2               	movwf	??_setDimmerLights_IntrControl
 18821  03DF  0879               	movf	_DimmerLightsIntr,w
 18822  03E0  3E04               	addlw	4
 18823  03E1  0086               	movwf	6
 18824  03E2  3001               	movlw	1	; select bank2/3
 18825  03E3  0087               	movwf	7
 18826  03E4  0872               	movf	??_setDimmerLights_IntrControl,w
 18827  03E5  0781               	addwf	1,f
 18828                           
 18829                           ;Dimmer_B1.c: 275: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18830  03E6  2BFC               	goto	i1l7300
 18831  03E7                     i1l7296:	
 18832  03E7  0879               	movf	_DimmerLightsIntr,w
 18833  03E8  3E05               	addlw	5
 18834  03E9  0086               	movwf	6
 18835  03EA  3001               	movlw	1	; select bank2/3
 18836  03EB  0087               	movwf	7
 18837  03EC  0879               	movf	_DimmerLightsIntr,w
 18838  03ED  3E04               	addlw	4
 18839  03EE  0084               	movwf	4
 18840  03EF  3001               	movlw	1	; select bank2/3
 18841  03F0  0085               	movwf	5
 18842  03F1  0800               	movf	0,w
 18843  03F2  0201               	subwf	1,w
 18844  03F3  1803               	skipnc
 18845  03F4  2BFC               	goto	i1l7300
 18846                           
 18847                           ;Dimmer_B1.c: 276: DimmerLightsIntr->DimmingValue--;
 18848  03F5  0879               	movf	_DimmerLightsIntr,w
 18849  03F6  3E04               	addlw	4
 18850  03F7  0086               	movwf	6
 18851  03F8  3001               	movlw	1	; select bank2/3
 18852  03F9  0087               	movwf	7
 18853  03FA  3001               	movlw	1
 18854  03FB  0281               	subwf	1,f
 18855  03FC                     i1l7300:	
 18856                           
 18857                           ;Dimmer_B1.c: 277: }
 18858                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18859  03FC  0879               	movf	_DimmerLightsIntr,w
 18860  03FD  3E05               	addlw	5
 18861  03FE  0086               	movwf	6
 18862  03FF  3001               	movlw	1	; select bank2/3
 18863  0400  0087               	movwf	7
 18864  0401  0879               	movf	_DimmerLightsIntr,w
 18865  0402  3E04               	addlw	4
 18866  0403  0084               	movwf	4
 18867  0404  3001               	movlw	1	; select bank2/3
 18868  0405  0085               	movwf	5
 18869  0406  0800               	movf	0,w
 18870  0407  0601               	xorwf	1,w
 18871  0408  1D03               	skipz
 18872  0409  2C14               	goto	i1l744
 18873                           
 18874                           ;Dimmer_B1.c: 279: DimmerLightsIntr->AdjRF = 0;
 18875  040A  0879               	movf	_DimmerLightsIntr,w
 18876  040B  0086               	movwf	6
 18877  040C  3001               	movlw	1	; select bank2/3
 18878  040D  0087               	movwf	7
 18879  040E  1101               	bcf	1,2
 18880                           
 18881                           ;Dimmer_B1.c: 280: DimmerLightsIntr->Signal = 0;
 18882  040F  0879               	movf	_DimmerLightsIntr,w
 18883  0410  0086               	movwf	6
 18884  0411  3001               	movlw	1	; select bank2/3
 18885  0412  0087               	movwf	7
 18886  0413  1081               	bcf	1,1
 18887  0414                     i1l744:	
 18888                           
 18889                           ;Dimmer_B1.c: 281: }
 18890                           ;Dimmer_B1.c: 282: }
 18891                           ;Dimmer_B1.c: 300: }
 18892                           ;Dimmer_B1.c: 301: }
 18893                           ;Dimmer_B1.c: 302: }
 18894                           ;Dimmer_B1.c: 304: if (DimmerLightsIntr->MosfetSignal == 1) {
 18895  0414  0879               	movf	_DimmerLightsIntr,w
 18896  0415  3E09               	addlw	9
 18897  0416  0086               	movwf	6
 18898  0417  3001               	movlw	1	; select bank2/3
 18899  0418  0087               	movwf	7
 18900  0419  1D81               	btfss	1,3
 18901  041A  0008               	return
 18902                           
 18903                           ;Dimmer_B1.c: 305: DimmerLightsIntr->MosfetSignalCount++;
 18904  041B  3001               	movlw	1
 18905  041C  00F2               	movwf	??_setDimmerLights_IntrControl
 18906  041D  0879               	movf	_DimmerLightsIntr,w
 18907  041E  3E0C               	addlw	12
 18908  041F  0086               	movwf	6
 18909  0420  3001               	movlw	1	; select bank2/3
 18910  0421  0087               	movwf	7
 18911  0422  0872               	movf	??_setDimmerLights_IntrControl,w
 18912  0423  0781               	addwf	1,f
 18913                           
 18914                           ;Dimmer_B1.c: 306: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 18915  0424  0879               	movf	_DimmerLightsIntr,w
 18916  0425  3E0C               	addlw	12
 18917  0426  0086               	movwf	6
 18918  0427  3001               	movlw	1	; select bank2/3
 18919  0428  0087               	movwf	7
 18920  0429  0801               	movf	1,w
 18921  042A  3A05               	xorlw	5
 18922  042B  1D03               	skipz
 18923  042C  0008               	return
 18924                           
 18925                           ;Dimmer_B1.c: 307: DimmerLightsIntr->MosfetSignalCount = 0;
 18926  042D  0879               	movf	_DimmerLightsIntr,w
 18927  042E  3E0C               	addlw	12
 18928  042F  0086               	movwf	6
 18929  0430  3001               	movlw	1	; select bank2/3
 18930  0431  0087               	movwf	7
 18931  0432  0181               	clrf	1
 18932                           
 18933                           ;Dimmer_B1.c: 308: DimmerLightsIntr->MosfetSignal = 0;
 18934  0433  0879               	movf	_DimmerLightsIntr,w
 18935  0434  3E09               	addlw	9
 18936  0435  0086               	movwf	6
 18937  0436  3001               	movlw	1	; select bank2/3
 18938  0437  0087               	movwf	7
 18939  0438  1181               	bcf	1,3
 18940  0439  0008               	return
 18941  043A                     __end_of_setDimmerLights_IntrControl:	
 18942                           
 18943                           	psect	text129
 18944  1CA9                     __ptext129:	
 18945 ;; *************** function _DimmerIntrPointSelect *****************
 18946 ;; Defined at:
 18947 ;;		line 70 in file "../src/Dimmer_B1.c"
 18948 ;; Parameters:    Size  Location     Type
 18949 ;;  lights          1    wreg     unsigned char 
 18950 ;; Auto vars:     Size  Location     Type
 18951 ;;  lights          1    1[COMMON] unsigned char 
 18952 ;; Return value:  Size  Location     Type
 18953 ;;		None               void
 18954 ;; Registers used:
 18955 ;;		wreg
 18956 ;; Tracked objects:
 18957 ;;		On entry : 0/0
 18958 ;;		On exit  : 0/0
 18959 ;;		Unchanged: 0/0
 18960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18962 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18963 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18964 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18965 ;;Total ram usage:        2 bytes
 18966 ;; Hardware stack levels used:    1
 18967 ;; This function calls:
 18968 ;;		Nothing
 18969 ;; This function is called by:
 18970 ;;		_setDimmerLights_IntrControl
 18971 ;; This function uses a non-reentrant model
 18972 ;;
 18973                           
 18974                           
 18975                           ;psect for function _DimmerIntrPointSelect
 18976  1CA9                     _DimmerIntrPointSelect:	
 18977                           
 18978                           ;incstack = 0
 18979                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18980                           ;DimmerIntrPointSelect@lights stored from wreg
 18981  1CA9  00F1               	movwf	DimmerIntrPointSelect@lights
 18982                           
 18983                           ;Dimmer_B1.c: 72: if (lights == 1) {
 18984  1CAA  0871               	movf	DimmerIntrPointSelect@lights,w
 18985  1CAB  3A01               	xorlw	1
 18986  1CAC  1D03               	skipz
 18987  1CAD  2CB2               	goto	i1l733
 18988                           
 18989                           ;Dimmer_B1.c: 73: DimmerLightsIntr = &DimmerLights1;
 18990  1CAE  30A0               	movlw	_DimmerLights1& (0+255)
 18991  1CAF  00F0               	movwf	??_DimmerIntrPointSelect
 18992  1CB0  0870               	movf	??_DimmerIntrPointSelect,w
 18993  1CB1  00F9               	movwf	_DimmerLightsIntr
 18994  1CB2                     i1l733:	
 18995                           
 18996                           ;Dimmer_B1.c: 74: }
 18997                           ;Dimmer_B1.c: 77: if (lights == 2) {
 18998  1CB2  0871               	movf	DimmerIntrPointSelect@lights,w
 18999  1CB3  3A02               	xorlw	2
 19000  1CB4  1D03               	skipz
 19001  1CB5  0008               	return
 19002                           
 19003                           ;Dimmer_B1.c: 78: DimmerLightsIntr = &DimmerLights2;
 19004  1CB6  30AF               	movlw	_DimmerLights2& (0+255)
 19005  1CB7  00F0               	movwf	??_DimmerIntrPointSelect
 19006  1CB8  0870               	movf	??_DimmerIntrPointSelect,w
 19007  1CB9  00F9               	movwf	_DimmerLightsIntr
 19008  1CBA  0008               	return
 19009  1CBB                     __end_of_DimmerIntrPointSelect:	
 19010                           
 19011                           	psect	text130
 19012  1C27                     __ptext130:	
 19013 ;; *************** function _IOC_ISR *****************
 19014 ;; Defined at:
 19015 ;;		line 401 in file "../src/MCU_B1.c"
 19016 ;; Parameters:    Size  Location     Type
 19017 ;;		None
 19018 ;; Auto vars:     Size  Location     Type
 19019 ;;		None
 19020 ;; Return value:  Size  Location     Type
 19021 ;;		None               void
 19022 ;; Registers used:
 19023 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19024 ;; Tracked objects:
 19025 ;;		On entry : 0/0
 19026 ;;		On exit  : 0/0
 19027 ;;		Unchanged: 0/0
 19028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19033 ;;Total ram usage:        0 bytes
 19034 ;; Hardware stack levels used:    1
 19035 ;; Hardware stack levels required when called:    3
 19036 ;; This function calls:
 19037 ;;		_setDimmerReClock
 19038 ;; This function is called by:
 19039 ;;		_ISR
 19040 ;; This function uses a non-reentrant model
 19041 ;;
 19042                           
 19043                           
 19044                           ;psect for function _IOC_ISR
 19045  1C27                     _IOC_ISR:	
 19046                           
 19047                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19048                           
 19049                           ;incstack = 0
 19050                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19051  1C27  1D8B               	btfss	11,3	;volatile
 19052  1C28  0008               	return
 19053  1C29  1C0B               	btfss	11,0	;volatile
 19054  1C2A  0008               	return
 19055  1C2B  0027               	movlb	7	; select bank7
 19056  1C2C  1D16               	btfss	22,2	;volatile
 19057  1C2D  0008               	return
 19058                           
 19059                           ;MCU_B1.c: 403: IOCBF2 = 0;
 19060  1C2E  1116               	bcf	22,2	;volatile
 19061                           
 19062                           ;MCU_B1.c: 404: IOCIF = 0;
 19063  1C2F  100B               	bcf	11,0	;volatile
 19064                           
 19065                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 19066  1C30  0021               	movlb	1	; select bank1
 19067  1C31  1C20               	btfss	_myMain^(0+128),0
 19068  1C32  0008               	return
 19069                           
 19070                           ;MCU_B1.c: 408: setDimmerReClock();
 19071  1C33  319B  2360         	fcall	_setDimmerReClock
 19072  1C35  0008               	return
 19073  1C36                     __end_of_IOC_ISR:	
 19074                           
 19075                           	psect	text131
 19076  1B60                     __ptext131:	
 19077 ;; *************** function _setDimmerReClock *****************
 19078 ;; Defined at:
 19079 ;;		line 244 in file "../src/MCU_B1.c"
 19080 ;; Parameters:    Size  Location     Type
 19081 ;;		None
 19082 ;; Auto vars:     Size  Location     Type
 19083 ;;		None
 19084 ;; Return value:  Size  Location     Type
 19085 ;;		None               void
 19086 ;; Registers used:
 19087 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19088 ;; Tracked objects:
 19089 ;;		On entry : 0/0
 19090 ;;		On exit  : 0/0
 19091 ;;		Unchanged: 0/0
 19092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19097 ;;Total ram usage:        0 bytes
 19098 ;; Hardware stack levels used:    1
 19099 ;; Hardware stack levels required when called:    2
 19100 ;; This function calls:
 19101 ;;		_setDimmerLights_IntrIOC_GO
 19102 ;; This function is called by:
 19103 ;;		_IOC_ISR
 19104 ;; This function uses a non-reentrant model
 19105 ;;
 19106                           
 19107                           
 19108                           ;psect for function _setDimmerReClock
 19109  1B60                     _setDimmerReClock:	
 19110                           
 19111                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 19112                           
 19113                           ;incstack = 0
 19114                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19115  1B60  3001               	movlw	1
 19116  1B61  3192  22EF  319B   	fcall	_setDimmerLights_IntrIOC_GO
 19117                           
 19118                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 19119  1B64  3002               	movlw	2
 19120  1B65  3192  22EF         	fcall	_setDimmerLights_IntrIOC_GO
 19121  1B67  0008               	return
 19122  1B68                     __end_of_setDimmerReClock:	
 19123                           
 19124                           	psect	text132
 19125  12EF                     __ptext132:	
 19126 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19127 ;; Defined at:
 19128 ;;		line 28 in file "../src/Dimmer_B1.c"
 19129 ;; Parameters:    Size  Location     Type
 19130 ;;  lights          1    wreg     unsigned char 
 19131 ;; Auto vars:     Size  Location     Type
 19132 ;;  lights          1    2[COMMON] unsigned char 
 19133 ;; Return value:  Size  Location     Type
 19134 ;;		None               void
 19135 ;; Registers used:
 19136 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19137 ;; Tracked objects:
 19138 ;;		On entry : 0/0
 19139 ;;		On exit  : 0/0
 19140 ;;		Unchanged: 0/0
 19141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19143 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19145 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19146 ;;Total ram usage:        1 bytes
 19147 ;; Hardware stack levels used:    1
 19148 ;; Hardware stack levels required when called:    1
 19149 ;; This function calls:
 19150 ;;		_DimmerIntrIOCPointSelect
 19151 ;; This function is called by:
 19152 ;;		_setDimmerReClock
 19153 ;; This function uses a non-reentrant model
 19154 ;;
 19155                           
 19156                           
 19157                           ;psect for function _setDimmerLights_IntrIOC_GO
 19158  12EF                     _setDimmerLights_IntrIOC_GO:	
 19159                           
 19160                           ;incstack = 0
 19161                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19162                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19163  12EF  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19164                           
 19165                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 19166  12F0  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19167  12F1  319D  253D  3192   	fcall	_DimmerIntrIOCPointSelect
 19168                           
 19169                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0) {
 19170  12F4  0021               	movlb	1	; select bank1
 19171  12F5  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19172  12F6  0086               	movwf	6
 19173  12F7  3001               	movlw	1	; select bank2/3
 19174  12F8  0087               	movwf	7
 19175  12F9  1801               	btfsc	1,0
 19176  12FA  0008               	return
 19177  12FB  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19178  12FC  3E09               	addlw	9
 19179  12FD  0086               	movwf	6
 19180  12FE  3001               	movlw	1	; select bank2/3
 19181  12FF  0087               	movwf	7
 19182  1300  1981               	btfsc	1,3
 19183  1301  0008               	return
 19184                           
 19185                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 19186  1302  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19187  1303  0086               	movwf	6
 19188  1304  3001               	movlw	1	; select bank2/3
 19189  1305  0087               	movwf	7
 19190  1306  1401               	bsf	1,0
 19191                           
 19192                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 19193  1307  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19194  1308  3E09               	addlw	9
 19195  1309  0086               	movwf	6
 19196  130A  3001               	movlw	1	; select bank2/3
 19197  130B  0087               	movwf	7
 19198  130C  1581               	bsf	1,3
 19199                           
 19200                           ;Dimmer_B1.c: 48: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 19201  130D  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19202  130E  0086               	movwf	6
 19203  130F  3001               	movlw	1	; select bank2/3
 19204  1310  0087               	movwf	7
 19205  1311  1F01               	btfss	1,6
 19206  1312  0008               	return
 19207                           
 19208                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MOSFET = 1;
 19209  1313  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19210  1314  3E09               	addlw	9
 19211  1315  0086               	movwf	6
 19212  1316  3001               	movlw	1	; select bank2/3
 19213  1317  0087               	movwf	7
 19214  1318  1601               	bsf	1,4
 19215                           
 19216                           ;Dimmer_B1.c: 51: if (lights == 1) {
 19217  1319  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19218  131A  3A01               	xorlw	1
 19219  131B  1D03               	skipz
 19220  131C  2B1F               	goto	i1l6846
 19221                           
 19222                           ;Dimmer_B1.c: 52: RA7 = 1;
 19223  131D  0020               	movlb	0	; select bank0
 19224  131E  178C               	bsf	12,7	;volatile
 19225  131F                     i1l6846:	
 19226                           ;Dimmer_B1.c: 53: ;;
 19227                           
 19228                           
 19229                           ;Dimmer_B1.c: 54: }
 19230                           ;Dimmer_B1.c: 57: if (lights == 2) {
 19231  131F  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19232  1320  3A02               	xorlw	2
 19233  1321  1D03               	skipz
 19234  1322  0008               	return
 19235                           
 19236                           ;Dimmer_B1.c: 58: RB4 = 1;
 19237  1323  0020               	movlb	0	; select bank0
 19238  1324  160D               	bsf	13,4	;volatile
 19239  1325  0008               	return
 19240  1326                     __end_of_setDimmerLights_IntrIOC_GO:	
 19241                           
 19242                           	psect	text133
 19243  1D3D                     __ptext133:	
 19244 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19245 ;; Defined at:
 19246 ;;		line 8 in file "../src/Dimmer_B1.c"
 19247 ;; Parameters:    Size  Location     Type
 19248 ;;  lights          1    wreg     unsigned char 
 19249 ;; Auto vars:     Size  Location     Type
 19250 ;;  lights          1    1[COMMON] unsigned char 
 19251 ;; Return value:  Size  Location     Type
 19252 ;;		None               void
 19253 ;; Registers used:
 19254 ;;		wreg
 19255 ;; Tracked objects:
 19256 ;;		On entry : 0/0
 19257 ;;		On exit  : 0/0
 19258 ;;		Unchanged: 0/0
 19259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19261 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19262 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19263 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19264 ;;Total ram usage:        2 bytes
 19265 ;; Hardware stack levels used:    1
 19266 ;; This function calls:
 19267 ;;		Nothing
 19268 ;; This function is called by:
 19269 ;;		_setDimmerLights_IntrIOC_GO
 19270 ;; This function uses a non-reentrant model
 19271 ;;
 19272                           
 19273                           
 19274                           ;psect for function _DimmerIntrIOCPointSelect
 19275  1D3D                     _DimmerIntrIOCPointSelect:	
 19276                           
 19277                           ;incstack = 0
 19278                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19279                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19280  1D3D  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19281                           
 19282                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19283  1D3E  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19284  1D3F  3A01               	xorlw	1
 19285  1D40  1D03               	skipz
 19286  1D41  2D47               	goto	i1l721
 19287                           
 19288                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19289  1D42  30A0               	movlw	_DimmerLights1& (0+255)
 19290  1D43  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19291  1D44  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19292  1D45  0021               	movlb	1	; select bank1
 19293  1D46  00CF               	movwf	_DimmerLightsIntrIOC^(0+128)
 19294  1D47                     i1l721:	
 19295                           
 19296                           ;Dimmer_B1.c: 12: }
 19297                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19298  1D47  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19299  1D48  3A02               	xorlw	2
 19300  1D49  1D03               	skipz
 19301  1D4A  0008               	return
 19302                           
 19303                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19304  1D4B  30AF               	movlw	_DimmerLights2& (0+255)
 19305  1D4C  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19306  1D4D  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19307  1D4E  0021               	movlb	1	; select bank1
 19308  1D4F  00CF               	movwf	_DimmerLightsIntrIOC^(0+128)
 19309  1D50  0008               	return
 19310  1D51                     __end_of_DimmerIntrIOCPointSelect:	
 19311  007E                     btemp	set	126	;btemp
 19312  007E                     pic14e$flags	set	126
 19313  007E                     wtemp	set	126
 19314  007E                     wtemp0	set	126
 19315  0080                     wtemp1	set	128
 19316  0082                     wtemp2	set	130
 19317  0084                     wtemp3	set	132
 19318  0086                     wtemp4	set	134
 19319  0088                     wtemp5	set	136
 19320  007F                     wtemp6	set	127
 19321  007E                     ttemp	set	126
 19322  007E                     ttemp0	set	126
 19323  0081                     ttemp1	set	129
 19324  0084                     ttemp2	set	132
 19325  0087                     ttemp3	set	135
 19326  007F                     ttemp4	set	127
 19327  007E                     ltemp	set	126
 19328  007E                     ltemp0	set	126
 19329  0082                     ltemp1	set	130
 19330  0086                     ltemp2	set	134
 19331  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         266
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     78      80
    BANK1            80      7      80
    BANK2            80      0      80
    BANK3            80      0      70
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), VarLED2(BANK3[4]), VarLED1(BANK3[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setPercentValue
    _setDimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   97154
                                              3 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1612
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     244
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     495
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1773
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0    1773
                                             13 BANK0      2     2      0
           _getMain_All_Error_Status
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   11672
                                             29 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    6308
                                             17 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     450
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    5136
                                             22 BANK0      7     7      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29402
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   29402
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28687
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1656
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   26847
                             _setBuz
         _setDimmerLights_ErrorClose
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0    7483
                                             17 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    2038
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   15503
                                             71 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15280
                                             68 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   15214
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     252
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0     809
                                              9 BANK0      7     7      0
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      73
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1369
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12979
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   28549
                                             71 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   28136
                                             70 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  4     3      1   12665
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      4     3      1   13705
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1     423
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     205
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    3949
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    3949
                                             22 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0    2249
                                             17 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    1915
                                             15 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     266
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     266
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1139
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     319
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     181
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0      89
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1612
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     494
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     404
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     359
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     268
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     110
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
             _setRF_DimmerLights
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      46      11       87.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     189      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     189      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Nov 28 17:05:37 2014

                   __size_of_Switch_Main 0024                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l96 166A                                       l98 167E  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1F99  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 007C                     _getDimmerLights_Line 1D2A  
                 __end_of_setDelayOff_GO 1800                             ___ftadd@exp1 004D  
                           ___ftadd@exp2 004C                setDimmerLights_Adj@lights 0065  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 1692  
                   _setDimmerLights_Line 1DCB                             ___ftadd@sign 004B  
                                    l110 14E1                                      l106 14E7  
                                    l107 14E3                                      l108 14D1  
                   _setDimmerLights_SwOn 135D                                      l255 0951  
                                    l328 1D5B                                      l329 1D5C  
                                    l372 1095                                      l765 1CFB  
                                    l776 1244                                      l864 1D33  
                                    l865 1D3A                                      _GIE 005F  
                                    _CRC 00CC                                      l996 1E8F  
                                    l997 1E97                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0017  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RA4 0064  
                                    _LED 007A                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00BB  
                                    _ISR 0004                                      _WDT 00CA  
           getDimmerLights_Status@lights 0022                                      _Sw1 01BE  
                                    _Sw2 01C7                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1D65                    _Buzzer_Initialization 1B24  
                        __end_of_ADC_Set 1B60                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
           getDimmerLights_Status@status 0023                          _setDimmerLights 0CE5  
                 _setMain_Exception$7083 0039                        ??_getSw_KeyStatus 0020  
                  _setDimmerLights_AdjRF 1FDD                                     ?_ISR 0070  
        setDimmerLights_ErrorClose@count 0032                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1C36                               Load_Main@i 002F  
                             Load_Main@j 002B                             ___ftdiv@sign 003D  
                                   l1031 13D1                                     l2022 0DA5  
                                   l2032 0DFB                                     l1313 11AE  
                                   l1322 07F8                                     l2052 0B72  
                                   l2038 12EB                                     l2064 1403  
                                   l3017 04D9                 ?_DimmerLightsPointSelect 0070  
                                   l1461 01F1                                     l1462 02C8  
                                   l1463 02C6                                     l1615 0E9F  
                                   l1458 02F8                                     l2370 1DE7  
                                   l1299 12B3                          __end_of_IOC_Set 1C00  
                                   l2386 107C                                     l2732 1214  
                                   l6020 0FBC                                     l6004 0F79  
                                   l2396 01B1                                     l2398 008A  
                                   l2727 11FD                                     l2728 1218  
                                   l6032 0FD8                                     l6016 0FB4  
                                   l6114 1157                                     l7002 1196  
                                   l1970 0563                                     l2683 09C7  
                                   l6140 1598                                     l6220 17DB  
                                   l6028 0FD0                                     l1980 05CF  
                                   l6222 17E8                                     l1966 0613  
                                   l1975 0593                                     l6224 17F1  
                                   l6216 17D5                                     l6312 148F  
                                   l6056 0C77                                     l7104 0DF1  
                                   l1976 058F                                     l1968 0559  
                                   l1969 055B                           _Load_Main$3859 002D  
                                   l6146 15A3                                     l6090 0CDC  
                                   l6082 0CC2                                     l6074 0CA7  
                                   l6330 1737                                     l7114 1D84  
                                   l7130 1F08                                     l6172 15DA  
                                   l6164 15C9                                     l6156 15AB  
                                   l6084 0CCB                                     l6076 0CB5  
                                   l7140 1F16                                     l6158 15B7  
                                   l6086 0CCE                                     l6246 1C80  
                                   l7046 1CA3                                     l8014 0C23  
                                   l8006 0BFE                                     l6520 1E4A  
                                   l6168 15D2                                     l6432 1E2F  
                                   l7064 0D91                                     l7128 1F06  
                                   l6514 1E41                                     l7162 1445  
                                   l6098 1D70                                     l2994 0901  
                                   l8114 0291                                     l6434 1E33  
                                   l6530 1FC4                                     l6506 13F1  
                                   l7138 1F12                                     l8034 0C58  
                                   l8018 0C2B                                     l6516 1E44  
                                   l7172 1455                                     l7156 143C  
                                   l6452 0837                                     l2988 08EA  
                                   l8108 0284                                     l8116 0297  
                                   l6532 1FC7                                     l6700 091F  
                                   l7076 0DA8                    _setDimmerLights_SwOff 145B  
                                   l7166 144C                                     l7158 143F  
                                   l6454 080C                                     l6614 157B  
                                   l6622 1583                                     l6606 1565  
                                   l5830 08D1                                     l8126 02AC  
                                   l6702 0922                                     l7430 1F43  
                                   l7168 144F                                     l6456 083D  
                                   l6632 1DD8                                     l5840 08F7  
                                   l5832 08D6                                     l5824 08C0  
                                   l5920 04B8                                     l7336 16B7  
                                   l6536 1FCD                                     l6720 0939  
                                   l6384 11C2                                     l6296 1393  
                                   l7088 0DC0                                     l8224 1085  
                                   l7432 1F46                                     l6810 10A6  
                                   l6562 11F8                                     l6618 157F  
                                   l5914 04A5                                     l7338 16BD  
                                   l8058 01E0                                     l6730 0960  
                                   l6706 0928                                     l7098 0DE6  
                                   l7602 0587                                     l6812 10B1  
                                   l6820 1F83                                     l5852 1CBE  
                                   l6572 120F                                     l6564 1201  
                                   l5828 08C7                                     l5932 04EB  
                                   l5916 04AF                                     l5908 0492  
                                   l7348 16E5                                     l8084 0235  
                                   l6732 0964                                     l6724 0957  
                                   l6492 1530                                     l7540 0E6D  
                                   l7508 0E12                                     l7436 1F4B  
                                   l5838 08EF                                     l5926 04CB  
                                   l5918 04B4                                     l7454 07CE  
                                   l8174 02E6                                     l8078 020B  
                                   l6750 0B77                                     l6734 0967  
                                   l6726 095A                                     l7702 1774  
                                   l7550 0E82                                     l6824 1F89  
                                   l5856 1CC4                                     l6584 154C  
                                   l6592 1554                                     l5936 04FD  
                                   l5928 04D5                                     l6904 0D5A  
                                   l6912 0ABB                                     l7448 07B9  
                                   l6752 0B7A                                     l6488 1521  
                                   l6680 0B47                                     l6664 0B0C  
                                   l7624 05B4                                     l7712 1794  
                                   l7552 0E83                                     l8256 09B0  
                                   l8248 099B                                     l6818 1F80  
                                   l5874 1FA4                                     l5946 0518  
                                   l5890 0469                                     l5962 0ED0  
                                   l6738 096D                                     l6682 0B4B  
                                   l6690 0B57                                     l7626 05B6  
                                   l7642 05E0                                     l7706 1784  
                                   l7714 179D                                     l7802 01AD  
                                   l7538 0E6B                                     l8266 09C8  
                                   l5956 0EBA                                     l6772 0B9B  
                                   l6756 0B80                                     l6684 0B4F  
                                   l6676 0B31                                     l8196 134E  
                                   l6870 1183                                     l6598 155D  
                                   l5886 0462                                     l6790 0BC4  
                                   l6766 0B92                                     l6758 0B83  
                                   l6686 0B53                                     l7654 0601  
                                   l7590 057A                                     l7742 00B8  
                                   l7726 0075                                     l7816 14BB  
                                   l5896 0478                                     l5984 0F2A  
                                   l5976 0F11                                     l6768 0B95  
                                   l6936 1263                                     l7752 00EA  
                                   l6866 117E                                     l7674 1DEC  
                                   l8394 1605                                     l6868 1162  
                                   l6892 0D33                                     l6788 0BAC  
                  _myMain_Initialization 1C36                                     l7926 0689  
                                   l5998 0F63                                     l7678 1DF2  
                                   l7766 0128                                     l8398 1610  
                                   l7864 123B                                     l7696 1766  
                                   l7688 1753                                     l7776 015A  
                                   l7866 123E                                     l7868 1246  
                                   _CFGS 0CAE                             __CFG_WDTE$ON 0000  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   u5025 15AE                                     u4315 08F2  
                                   u5045 15B8                                     u5055 15C2  
                                   u5305 1DB0                                     u5065 15CA  
                                   u4345 0908                                     u5250 16F5  
                                   u4275 08CC                                     u4515 04A6  
                                   _PEIE 005E                                     u6055 116B  
                                   u4295 08E5                                     u5255 16F3  
                                   u7015 0E53                                     u4545 04B9  
                                   u7035 0E73                                     u4485 0493  
                                   u4645 0EE2                                     u4805 0FDF  
                                   u4725 0F85                                     u4575 04CC  
                                   u4655 0EF2                                     u4735 0F95  
                                   u7135 0574                                     u4665 0F12  
                                   u4905 0CC3                                     u5395 0815  
                                   u4675 0F21                                     u4755 0FBD  
                                   u4685 0F2B                                     u4845 0C7E  
                                   u4765 0FC3                                     u4875 0CA8  
                                   u8155 029D                                     u8075 0237  
                                   u4795 0FD9                                     u7275 05F1  
                                   u4965 1143                                     u8085 023C  
                                   u8325 098A                                     u8095 024A  
                                   u8335 09A9                                     u5945 109B  
                                   u8265 1345                                     u8345 09BF  
                                   u8275 1354                                     u8365 09D6  
                                   u7825 12AA                                     u7595 14B1  
                                   u7935 0C45                                     u7885 0C11  
                                   _LWLO 0CAD                                     _RSSI 00D0  
                                   _WREN 0CAA                                     _Buz1 00AF  
                                   _Load 0143                                     _Temp 00D7  
                                   _main 15E1                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 08B7                          __end_of_RF_Main 1B2D  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0020  
                                   btemp 007E                          __end_of_WDT_Set 1BAD  
                                   ltemp 007E            __size_of_setRF_Initialization 000B  
                       _setDimmerReClock 1B60                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 1418  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                      ?_getDimmer_LoadOK 0070                                    ??_ISR 0077  
                           ___fttol@exp1 005B                             ___fttol@lval 0057  
                 _getDimmerLights_Status 1C45                       ??_getDimmer_LoadOK 0020  
         __size_of_DimmerIntrPointSelect 0012                         __end_of_LED_Main 1BF4  
       setDimmerLights_ErrorClose@lights 0033            __end_of_DimmerIntrPointSelect 1CBB  
                  ?_getDimmerLights_Line 0070                    ?_setDimmerLights_Main 0070  
                  ?_setDimmerLights_Line 0070                          ?_setDelayOff_GO 002A  
                  ?_setDimmerLights_SwOn 0070                                    ?_main 00EC  
                        __end_of___awdiv 15E1                          __end_of___ftadd 0530  
                        __end_of___ftdiv 0F4C                          __end_of___ftneg 1B99  
                        __end_of___ftmul 1000                          ___awdiv@divisor 0020  
                                  _T1CON 0018                          __end_of___fttol 0CE5  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l721 1D47  
                                  i1l733 1CB2                                    i1l744 0414  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0021                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                   setMain_Exception@buz 0038                  __end_of_Timeout_Counter 1DB6  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 1326  
             _setDimmerLights_IntrIOC_GO 12EF                         __end_of_TMR1_ISR 1105  
           __size_of_CC2500_WriteCommand 0019       __end_of_setDimmerLights_ErrorClose 085A  
             _setDimmerLights_ErrorClose 0800                         __end_of_TMR1_Set 1C0C  
                                  _getAD 1F38                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1CF1              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E8  
                         __CFG_BOREN$OFF 0000             __end_of_getMain_Lights_Count 1E0B  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011             __end_of_getMain_LightsStatus 1186  
          __end_of_setLED_Initialization 1C76                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 16EB  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003         __size_of_DelayOff_Initialization 0008  
                 ?_setLoad_AH_AL_Restore 0070                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 0A40                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0070  
                      ?_setMemory_Modify 0070                  __size_of_getDelayOff_GO 0010  
                      ??_setPercentValue 005C                             __end_of_main 1639  
                    ?_setRF_DimmerLights 0020                         __end_of_Fosc_Set 1B43  
                     ??_setMemory_Modify 0020                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0D6E  
                   _setSw_Initialization 1B88                                   ??_main 006E  
                          ___fttol@sign1 0056                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0B0B                           _setMemory_Data 1BC4  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 0014  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E8  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1D04  
                 ?_setDimmerLights_AdjRF 0070                 __size_of_setRFSW_Control 004F  
                ??_Switch_Initialization 0025                     ??_setRF_DimmerLights 0021  
                                 ?_getAD 0020             setDimmerLights_AdjControl@sw 0028  
                      ??_getRF_KeyStatus 0020                   ?_setDimmerLights_SwOff 0070  
                            _DlyOff_Main 085A                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006E                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 1FBB  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 0918  
               _getMain_All_Error_Status 11E7                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1EBC                                   i1l7300 03FC  
                                 i1l7260 0359                                   i1l7264 0360  
                                 i1l7282 03AC                                   i1l7290 03C9  
                                 i1l7284 03B2                                   i1l7296 03E7  
                                 i1l7288 03C3                                   i1l6846 131F  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                       __size_of_Load_Main 0144  
                                 u659_25 0333                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   u775_25 10FF  
                                 _IO_Set 1E52                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1B22  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1DCB  
                                 _Dimmer 013E                                   _DlySw1 01D0  
                                 _DlySw2 01D5               __end_of_Mcu_Initialization 1CDF  
                    __end_of_Buzzer_Main 14EE                                   _Memory 0220  
                                 _Timer1 00C7       __end_of_setDimmerLights_TriggerAdj 1F38  
             _setDimmerLights_TriggerAdj 1F18                                   ___bmul 1CBB  
                              ??___awdiv 0024                                ??___ftadd 0047  
           __size_of_DelayOffPointSelect 0014                                ??___ftdiv 0034  
                              ??___ftneg 0041                    setDimmerLights@lights 0065  
                              ??___ftmul 0034                                ??___fttol 0052  
           ?_Flash_Memory_Initialization 0070                   ??_getDimmerLights_Line 0020  
            setDimmerLights_AdjRF@lights 0063                   ??_setDimmerLights_Main 0066  
                 ??_setDimmerLights_Line 0020                                   _r_data 00D5  
                                 _s_data 00D6                   ??_setDimmerLights_SwOn 002D  
                                 _setLED 153D                                   _myMain 00A0  
                 __end_of_setMemory_Data 1BD0                         _DimmerLightsIntr 0079  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0062  
                       ___awdiv@quotient 0027                                   _setBuz 1639  
                     __size_of_Temp_Main 0003              __end_of_Load_Initialization 1B4D  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039              ?_setDimmerLights_AdjControl 0070  
    __end_of_setDimmerLights_IntrControl 043A              _setDimmerLights_IntrControl 02FE  
               Flash_Memory_Read@address 0022                         ?_Timeout_Counter 0070  
             __end_of_setMemory_LoopSave 1D2A              getMain_Lights_Count@status1 0022  
            getMain_Lights_Count@status2 0023              getMain_Lights_Count@status3 0021  
                  __end_of_SwPointSelect 1D8D             __size_of_Flash_Memory_Modify 004E  
      setDimmerLights_IntrControl@lights 0076                  __size_of_LedPointSelect 001B  
                __size_of_getMain_LoadOK 000E                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009               getMain_LightsStatus@status 0028  
                             _TouchPower 1DE0               ?_getAll_DimmerLights_AdjGO 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 0AA5         __end_of_CC2500_registers_address 102F  
                __end_of__initialization 0047                                ?_LED_Main 0070  
                             ___ftadd@f1 0041                               ___ftadd@f2 0044  
                   _getRF_KeyStatus$5268 0022                            ?_my_MainTimer 0070  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                               ___ftneg@f1 003E  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004E  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                           __pidataBANK4 1F58                            __end_of_getAD 1F58  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
                 setLoad_AH_AL_Restore@i 0021                setMemory_LoopSave@command 0021  
           __size_of_setDimmerLights_Adj 0066                       _LED_Initialization 1BDC  
                        _getSw_KeyStatus 1EF9                ??_setControl_Lights_Table 006B  
                     getRF_KeyStatus@key 0021                         ??_DelayTimejudge 0024  
                        ?_setMemory_Data 0020            ??_Flash_Memory_Initialization 0062  
                       ?_setDimmerLights 0062                     _getMain_Lights_Count 1DF5  
                              ?_WDT_Main 0070                        __end_of_Load_Main 02FE  
                     __size_of_getBuz_GO 0011                     _getMain_LightsStatus 1159  
             __end_of_set_TimeoutCleared 1B48                 __end_of_setDimmerReClock 1B68  
                     __size_of_getRxData 0090                      ?_LED_Initialization 0070  
                  getMain_LightsStatus@i 0026                        ?_CC2500_WriteByte 0070  
                         _DimmerLights11 00CD                           _DimmerLights22 00CE  
                   __size_of_setLED_Main 003E                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 1B2D  
                     ??_CC2500_WriteByte 0020                               __pbssBANK0 006F  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                               __pbssBANK4 0220  
                              ?_Fosc_Set 0070                              _Buzzer_Main 14A4  
                      ??_setRFSW_Control 0031                        __end_of_Temp_Main 1B33  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                         ??_my_MainTimer 002D                               ??_LED_Main 0025  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1B68  
              getMain_LightsStatus@count 0025                            ??_Switch_Main 003D  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 006F  
                      LedPointSelect@led 0021                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 0014                              setBuz@count 002C  
                ?_getDimmerLights_Status 0070                               __pmaintext 15E1  
                         _getDelayOff_GO 1C55                      _CC2500_WriteCommand 1E39  
                   ?_Temp_Initialization 0070                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 0013                         ??_setDelayOff_GO 002C  
          ??_DimmerLights_Initialization 0024                               ??_TMR1_ISR 0077  
                          ?_setTemp_Main 0070                               _getLoad_AD 0BDD  
                             ??_TMR1_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                               _getLoad_OK 1B78  
                     __size_of_setTxData 00BF                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                    ?_getMain_Lights_Count 0070  
                                _ADC_Set 1B59                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 1326                               ??_WDT_Main 0020  
                  ?_getMain_LightsStatus 0070             __end_of_setRF_Initialization 1BB8  
                     _setRFSW_AdjControl 13D8                                  _IOC_ISR 1C27  
                                _IOC_Set 1BF4                     __size_of_setLog_Code 0036  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 1283  
              __size_of_getDimmer_LoadOK 0008                        _Flash_Memory_Read 1E6B  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 006A  
                 __size_of_CC2500_TxData 0061              ?_setDimmerLights_ErrorClose 0070  
                    ?_setRFSW_AdjControl 0070                                  _RF_Data 0120  
                                _RF_Main 1B2A                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1BA2  
        __end_of_setControl_Lights_Table 0B73                          setRF_Main@error 00EB  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _setPercentValue 09DB                  ??_setLoad_AH_AL_Restore 0020  
                       ?_getPercentValue 0070             __end_of_CC2500_FrequencyCabr 1BC4  
                        __size_of_IO_Set 0019                        __end_of_getBuz_GO 1C98  
                    ??_Flash_Memory_Main 0029                      ??_Flash_Memory_Read 0020  
                 __end_of_getDelayOff_GO 1C65                                  _VarLED1 01DE  
                                _VarLED2 01E2           __end_of_getDimmerLights_Status 1C55  
                      __end_of_getRxData 0DFE                  __end_of_getSw_KeyStatus 1F18  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1D51  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1EDA  
                   ??_setRFSW_AdjControl 0067                           ??_setTemp_Main 002D  
                        __size_of___bmul 0012                                  ___awdiv 158D  
                                ___ftadd 043A                                  ___ftdiv 0EA3  
                                ___ftneg 1B90                                  ___ftmul 0F4C  
                                ___fttol 0C5E                      __end_of_Switch_Main 1090  
                ??_Buzzer_Initialization 0020                          _getRF_KeyStatus 1C98  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0050                     setRFSW_AdjControl@sw 006A  
                        __size_of_setBuz 0059                                  __ptext1 0979  
                                __ptext2 1C36                                  __ptext3 1326  
                                __ptext4 0BDD                                  __ptext5 1F38  
                                __ptext6 1CDF                                  __ptext7 0002  
                                __ptext8 1B30                                  __ptext9 0DFE  
                ??_setDimmerLights_AdjRF 0062                __size_of_CC2500_SIDLEMode 0004  
                  _DimmerIntrPointSelect 1CA9                             __size_of_ISR 000F  
             ??_getMain_All_Error_Status 0020                __end_of_Flash_Memory_Main 12B9  
              __end_of_Flash_Memory_Read 1E85                  ??_setDimmerLights_SwOff 002F  
                             _setRF_Main 0530                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1B70                        _DimmerLights_Main 121A  
         __size_of_DlyOff_Initialization 0006                    ??_CC2500_WriteCommand 0022  
              __size_of_setMemory_Modify 0013            __end_of_DlyOff_Initialization 1B53  
             __end_of_CC2500_ClearRXFIFO 1B37                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1B3B            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006E                           _LedPointSelect 1E85  
                    _DelayOffPointSelect 1D65                           _getMain_LoadOK 1C19  
                                clrloop0 1067           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 1C19                     end_of_initialization 0047  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 1105  
                          _DelayTime_1us 1090                        __end_of_setTxData 07B2  
             __end_of_Flash_Memory_Write 11B5                                  init_ram 1B53  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 1B54  
                             _setSw_Main 004B                    CC2500_ReadByte@loop_b 0021  
                 setDimmerLights_SwOn@sw 002F                        _CC2500_ReadStatus 1FBB  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1C65  
                        ?_getDelayOff_GO 0070                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                 __size_of_CC2500_ReadByte 0017  
                          _CC2500_RxData 0B73                            _CC2500_TxData 0918  
                    ??_CC2500_InitSetREG 0025              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 07B2                              ?_getLoad_AD 0070  
                            ?_getLoad_OK 0070                   ??_getMain_Lights_Count 0020  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1B99  
                    ??_CC2500_ReadStatus 0022                   ??_getMain_LightsStatus 0024  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
                    __size_of_TouchPower 0015                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 124E  
                     _Mcu_Initialization 1CCD                 __size_of_CC2500_PowerRST 0043  
                   __end_of_my_MainTimer 09DB                           ?_DelayOff_Main 0070  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1EA0  
                __end_of_setPercentValue 0A40                   __end_of_getMain_LoadOK 1C27  
               __size_of_CC2500_WriteREG 0021                __end_of_CC2500_InitSetREG 112F  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 005C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 0AA5                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 1FDD              ??_getAll_DimmerLights_AdjGO 0020  
        getMain_All_Error_Status@command 0025                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1E6B                     _setRF_Initialization 1BAD  
                     _setMemory_LoopSave 1D17                              _Switch_Main 106C  
                      __size_of_LED_Main 000C                         ?_getSw_KeyStatus 0070  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1CF1                  __end_of_getRF_KeyStatus 1CA9  
                      _setMain_Exception 1747                         ??_setMemory_Data 0021  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1DB6  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                       ?_setMain_Exception 0070  
                    ?_setMemory_LoopSave 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1CCD                 setMain_Exception@command 003C  
                   setRF_DimmerLights@on 0020                 _DimmerIntrIOCPointSelect 1D3D  
        _setDimmerLights_AdjControl$2583 0027                        getSw_KeyStatus@sw 0024  
                      __size_of_TMR1_ISR 0028            __size_of_getDimmerLights_Line 0013  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR1_Set 000C  
          __size_of_setDimmerLights_Main 0059                           __end_of_setLED 158D  
          __size_of_setDimmerLights_Line 0015            __size_of_setDimmerLights_SwOn 003D  
                         __end_of_setBuz 1692                      ??_setMain_Exception 0036  
                   _CC2500_FrequencyCabr 1BB8               __size_of_Flash_Memory_Main 0036  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 14EE                        __size_of_WDT_Main 0012  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 11B5                          ?_LedPointSelect 0070  
                              _Load_Main 01BA                              __end_of_ISR 0013  
                        ?_getMain_LoadOK 0070                         _getDimmer_LoadOK 1B80  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 0005  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 1EF9          __size_of_setTemp_Initialization 0001  
                   ??_setMemory_LoopSave 0020                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0EA3  
                    __size_of_getLoad_AD 0081                             ?_Buzzer_Main 0070  
                    __size_of_getLoad_OK 0008                       _set_TimeoutCleared 1B43  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0015  
                              _VarErrLED 01DA                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0064                      __size_of_getTemp_AD 0037  
                 ?_setLED_Initialization 0070                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                __end_of_setMain_Exception 17A3  
              __size_of_CC2500_WriteByte 0014                                _Temp_Main 1B30  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D1                  setRF_DimmerValue@lights 0066  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00D3  
                            __pdataBANK4 0245                _getAll_DimmerLights_AdjGO 1C76  
                               ??_setLED 0023                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0039  
                      ??_CC2500_ReadByte 0020         __end_of_getMain_All_Error_Status 121A  
                       _CC2500_SIDLEMode 1B3B               __size_of_DimmerLights_Main 0034  
              __end_of_setRF_DimmerValue 11E7                       setMemory_Data@data 0020  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070           _getAll_DimmerLights_AdjGO$2562 0022  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                         _setMemory_Modify 1D04  
                             ?_Load_Main 0070                            __pcstackBANK0 0020  
                          __pcstackBANK1 00E9                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0089  
                          DlyOff_Main@sw 0038                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 005D  
             __size_of_CC2500_ReadStatus 0022                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 01A0  
                          _DimmerLights2 01AF                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 001C                          ??_CC2500_RxData 0024  
          __end_of_setLoad_AH_AL_Restore 1EBC                 setRFSW_AdjControl@status 0069  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006E  
                         getRxData@error 006C              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                               ?_Temp_Main 0070  
                    __size_of_setRF_Main 00E7                           Load_Main@adjgo 002C  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                       ?_getRF_KeyStatus 0070                           Load_Main@error 002E  
                 _setTemp_Initialization 1B23                                _getBuz_GO 1C87  
    __end_of_Flash_Memory_Initialization 06F3              _Flash_Memory_Initialization 0617  
                               ?___awdiv 0020                                __ptext100 112F  
                              __ptext101 1CBB                                __ptext110 1DB6  
                              __ptext102 1C55                                __ptext111 1B3B  
                              __ptext103 1C45                                __ptext120 1E39  
                              __ptext112 1418                                __ptext104 1CF1  
                              __ptext121 1B43                                __ptext113 1105  
                              __ptext105 1639                                __ptext130 1C27  
                              __ptext122 1DA1                                __ptext114 1EDA  
                              __ptext106 158D                                __ptext131 1B60  
                              __ptext123 1D51                                __ptext115 1F78  
                              __ptext107 1B68                                __ptext132 12EF  
                              __ptext124 14A4                                __ptext116 1BB8  
                              __ptext108 1B4D                                __ptext133 1D3D  
                              __ptext125 1B24                                __ptext117 1090  
                              __ptext109 1D65                                 ?___ftadd 0041  
                              __ptext118 1B37                                __ptext127 10DD  
                              __ptext119 1B33                                __ptext128 02FE  
                              __ptext129 1CA9                                _getRxData 0D6E  
                               ?___ftdiv 002E                                 ?___ftneg 003E  
                               ?___ftmul 002E                                 ?___fttol 004E  
                  __size_of_my_MainTimer 0062                  __end_of_setRFSW_Control 153D  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
                       getMain_LoadOK@ok 0022            __end_of_Buzzer_Initialization 1B27  
                       getPercentValue@i 005F                         setPercentValue@i 005F  
                          ??_setLog_Code 002D                 getDimmerLights_Line@line 0021  
                     __end_of_TouchPower 1DF5                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 016F  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
          __end_of_setDimmerLights_AdjRF 2000                   CC2500_WriteByte@loop_a 0021  
                 _DimmerLights_Main$2500 0069                                _r_address 00D4  
         __size_of_setDimmerLights_SwOff 0049           __size_of_myMain_Initialization 000F  
          __end_of_setDimmerLights_SwOff 14A4             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1C45                           __size_of_getAD 0020  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1D79  
                    __end_of_setLED_Main 13D8                         ??_getDelayOff_GO 0022  
                    _DimmerLightsIntrIOC 00CF                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 1B30             setDimmerLights_SwOff@command 002F  
                      _CC2500_rfSettings 102F                                 _LED_Main 1BE8  
                        SwPointSelect@sw 0021                                clear_ram0 1066  
               CC2500_InitPATable@loop_d 0027               __size_of_setMain_Exception 005C  
                           _my_MainTimer 0979                                _setTxData 06F3  
    __end_of_DimmerLights_Initialization 1E22              _DimmerLights_Initialization 1E0B  
                     _CC2500_ClearRXFIFO 1B33                       _CC2500_ClearTXFIFO 1B37  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0024  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1DA1  
                      ??_Timeout_Counter 0020                               ?_getBuz_GO 0020  
               __size_of_getPercentValue 0065                 setRF_DimmerLights@status 0023  
            __size_of_setRFSW_AdjControl 0040                       _Flash_Memory_Write 1186  
                             ?_getRxData 0070                             ??_getLoad_AD 0024  
                               _TMR1_ISR 10DD                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                             ??_getLoad_OK 0020  
                               _TMR1_Set 1C00                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 0141                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 1E52                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 1CDF                  DlyOff_Initialization@sw 0022  
                  getSw_KeyStatus@status 0023                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0032                      ?_Flash_Memory_Write 0070  
                       setRF_Main@loop_f 00E9                    __size_of_setTemp_Main 00A5  
                __size_of_setDelayOff_GO 005D             ??_setDimmerLights_AdjControl 0025  
                               _DelayOff 0078                             setSw_Main@sw 0033  
       setDimmerLights_IntrIOC_GO@lights 0072                              ??_Load_Main 0029  
                       __size_of_IOC_ISR 000F             ?_setDimmerLights_IntrControl 0070  
         getMain_All_Error_Status@status 0026                         __size_of_IOC_Set 000C  
           __end_of_Flash_Memory_Erasing 1BDC                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                         setLED_Main@led 0024                     __end_of_WDT_Clearing 0004  
                    __end_of_setLog_Code 12EF                    _DlyOff_Initialization 1B4D  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 1B3F                         __size_of_WDT_Set 000B  
                  setRFSW_Control@status 0032                  setMain_Exception@status 003B  
                     __end_of_getLoad_AD 0C5E                       __end_of_getLoad_OK 1B80  
                  _Switch_Initialization 1C0C        __size_of_getMain_All_Error_Status 0033  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0063  
              ?_getMain_All_Error_Status 0070                     __size_of_Buzzer_Main 004A  
                     __end_of_getTemp_AD 135D                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1D51                        getLoad_AD@channel 0026  
           Flash_Memory_Initialization@i 0063                                 _SwDetect 00D2  
                            ??_Temp_Main 002F                        setRFSW_Control@sw 0033  
          _getMain_All_Error_Status$7093 0021            _getMain_All_Error_Status$7094 0023  
               __end_of_getDimmer_LoadOK 1B88                      _Load_Initialization 1B48  
                              setLED@led 0023                  ??_DimmerIntrPointSelect 0070  
    __size_of_setDimmerLights_AdjControl 0035                             _setTemp_Main 0DFE  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                       __size_of___ftneg 0009                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                 setDimmerLights_SwOn@idle 002E  
                               ___awtoft 1F99                         ??_LedPointSelect 0020  
                               ___ftpack 08B7            __size_of_getMain_Lights_Count 0016  
                       ??_getMain_LoadOK 0021            __size_of_getMain_LightsStatus 002D  
                      getTemp_AD@channel 0025                             ??_setRF_Main 006D  
                   CC2500_WriteREG@value 0022                              _setLED_Main 139A  
             __end_of_setRF_DimmerLights 1747                 ?_DelayOff_Initialization 0070  
                       getDelayOff_GO@go 0023                         getDelayOff_GO@sw 0022  
                       setDelayOff_GO@sw 002E       __size_of_getAll_DimmerLights_AdjGO 0011  
                   ?_Load_Initialization 0070                                 __ptext10 1B2D  
                               __ptext11 1B23                                 __ptext20 1C0C  
                               __ptext12 106C                                 __ptext21 1B88  
                               __ptext13 004B                                 __ptext30 135D  
                               __ptext22 1DE0                                 __ptext14 1D8D  
                               __ptext31 13D8                                 __ptext23 1B2A  
                               __ptext15 124E                                 __ptext40 0B73  
                               __ptext32 11B5                                 __ptext24 0530  
                               __ptext16 1EF9                                 __ptext41 1FBB  
                               __ptext33 1FDD                                 __ptext25 0D6E  
                               __ptext17 1D79                                 __ptext50 1B3F  
                               __ptext42 1E22                                 __ptext34 0A40  
                               __ptext26 12B9                                 __ptext18 1747  
                               __ptext51 1B59                                 __ptext43 1B27  
                               __ptext35 0F4C                                 __ptext27 1D17  
                               __ptext19 1D2A                                 __ptext60 139A  
                               __ptext52 01BA                                 __ptext44 1BAD  
                               __ptext36 1D04                                 __ptext28 0B0B  
                               __ptext61 1BDC                                 __ptext53 1C19  
                               __ptext45 1CCD                                 __ptext37 1C98  
                               __ptext29 14EE                                 __ptext70 1E6B  
                               __ptext62 1C65                                 __ptext54 1B80  
                               __ptext46 1BA2                                 __ptext38 1C87  
                               __ptext71 121A                                 __ptext63 1283  
                               __ptext55 1DF5                                 __ptext47 1C00  
                               __ptext39 0918                                 __ptext80 0EA3  
                               __ptext72 1692                                 __ptext64 07B2  
                               __ptext56 1C76                                 __ptext48 1E52  
                               __ptext81 043A                                 __ptext73 0AA5  
                               __ptext65 1BD0                                 __ptext57 1B48  
                               __ptext49 1BF4                                 __ptext90 1E0B  
                               __ptext82 1F99                                 __ptext74 0CE5  
                               __ptext66 0617                                 __ptext58 1EA0  
                               __ptext91 10B6                                 __ptext83 08B7  
                               __ptext75 06F3                                 __ptext67 1BC4  
                               __ptext59 1BE8                                 __ptext92 1B22  
                               __ptext84 153D                                 __ptext76 16EB  
                               __ptext68 1186                                 __ptext93 1B70  
                               __ptext85 1E85                                 __ptext77 09DB  
                               __ptext69 1B99                                 __ptext94 085A  
                               __ptext86 1DCB                                 __ptext78 0C5E  
                               __ptext95 0800                                 __ptext87 11E7  
                               __ptext79 1B90                                 __ptext96 145B  
                               __ptext88 1159                                 __ptext97 1F18  
                               __ptext89 1B78                                 __ptext98 1EBC  
                               __ptext99 17A3                                 __product 0245  
          ??_setDimmerLights_IntrControl 0072                  ??_setLED_Initialization 0024  
               ??_getDimmerLights_Status 0022           __size_of_Dimmer_Initialization 0001  
           __end_of_getDimmerLights_Line 1D3D            __end_of_Dimmer_Initialization 1B23  
           __end_of_setDimmerLights_Main 16EB             __end_of_setDimmerLights_Line 1DE0  
                       Switch_Main@error 003E             __end_of_setDimmerLights_SwOn 139A  
                 getDimmer_LoadOK@status 0020                             ??_setSw_Main 0031  
                          setLED@command 0022                            __size_of_main 0058  
                            _setRF_Learn 1D8D                 __end_of_CC2500_SIDLEMode 1B3F  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 1D79  
             CC2500_WriteCommand@command 0023                     setRF_Main@Receive_OK 00EA  
              __size_of_setDimmerReClock 0008           setDimmerLights_AdjControl@idle 0026  
                        _CC2500_ReadByte 1E22                       _CC2500_InitPATable 1EDA  
               __end_of_setMemory_Modify 1D17            setDimmerLights_Trigger@lights 0024  
                     __end_of_setRF_Main 0617                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012              setDimmerLights_ErrorClose@i 0034  
                   _CC2500_patable_vaule 105E                              ??_getRxData 006B  
                           getLoad_OK@ok 0020         setDimmerLights_TriggerAdj@lights 0024  
                               main@argc 00EC                                 main@argv 00EE  
                    ?_CC2500_InitPATable 0070                     _getSw_KeyStatus$6345 0021  
                   _getSw_KeyStatus$6346 0022                          _CC2500_PowerRST 1418  
               __size_of_getSw_KeyStatus 001F              __end_of_Flash_Memory_Modify 0800  
                      ??_getPercentValue 005C                              _setLog_Code 12B9  
            __end_of_Flash_Memory_Unlock 1BA2                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1F78                       __end_of_setSw_Main 01BA  
                  ??_Load_Initialization 0022                            _Transceive_OK 03E9  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 112F  
                            pic14e$flags 007E             ??_setDimmerLights_IntrIOC_GO 0072  
             setDimmerLights_Line@lights 0020             ??_setDimmerLights_ErrorClose 0031  
                setDimmerLights_SwOff@sw 0030        __end_of_getAll_DimmerLights_AdjGO 1C87  
            __size_of_setMemory_LoopSave 0013                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 10DD  
__size_of_setDimmerLights_Initialization 0027           _setDimmerLights_Initialization 10B6  
            __end_of_setDimmerLights_Adj 0B0B                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                      _RF_Initialization 1B27     __size_of_setDimmerLights_IntrControl 013C  
                            getLoad_AD@i 0029                              getLoad_AD@j 0028  
                            getLoad_AD@k 0027                     _Flash_Memory_Erasing 1BD0  
                     ?_RF_Initialization 0070                               _SPI0Buffer 007B  
        __end_of_DelayOff_Initialization 1B70      __size_of_setDimmerLights_IntrIOC_GO 0037  
    __size_of_setDimmerLights_ErrorClose 005A                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1B78       __end_of_setDimmerLights_AdjControl 1283  
             _setDimmerLights_AdjControl 124E                      ??_RF_Initialization 0021  
                __size_of_setMemory_Data 000C                           _setDelayOff_GO 17A3  
       __size_of_setControl_Lights_Table 0068                   __end_of_DelayTimejudge 1159  
   __size_of_Flash_Memory_Initialization 00DC              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0036                    setMemory_Data@address 0022  
                  __end_of_DelayTime_1us 10B6                  __end_of_CC2500_ReadByte 1E39  
           __end_of_setSw_Initialization 1B90                          _Timeout_Counter 1DA1  
        __size_of_getDimmerLights_Status 0010                     getPercentValue@value 005E  
             __end_of_LED_Initialization 1BE8         __size_of_setDimmerLights_Trigger 001E  
         __end_of_setTemp_Initialization 1B24                 __size_of_setPercentValue 0065  
                setMemory_Modify@command 0021                     setPercentValue@value 005E  
              __end_of_RF_Initialization 1B2A                    __end_of_CC2500_RxData 0BDD  
                  __end_of_CC2500_TxData 0979                    _setLoad_AH_AL_Restore 1EA0  
                __end_of_CC2500_PowerRST 145B           getAll_DimmerLights_AdjGO@adjgo 0021  
