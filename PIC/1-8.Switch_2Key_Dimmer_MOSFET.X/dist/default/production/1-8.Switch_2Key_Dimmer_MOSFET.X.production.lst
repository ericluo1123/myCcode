

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Nov 20 17:16:46 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,inline,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,inline,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	intentry,global,class=CODE,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   140                           	dabs	1,0x7E,2
   141  0000                     	;# 
   142  0001                     	;# 
   143  0002                     	;# 
   144  0003                     	;# 
   145  0004                     	;# 
   146  0005                     	;# 
   147  0006                     	;# 
   148  0007                     	;# 
   149  0008                     	;# 
   150  0009                     	;# 
   151  000A                     	;# 
   152  000B                     	;# 
   153  000C                     	;# 
   154  000D                     	;# 
   155  000E                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0015                     	;# 
   160  0016                     	;# 
   161  0016                     	;# 
   162  0017                     	;# 
   163  0018                     	;# 
   164  0019                     	;# 
   165  001A                     	;# 
   166  001B                     	;# 
   167  001C                     	;# 
   168  008C                     	;# 
   169  008D                     	;# 
   170  008E                     	;# 
   171  0090                     	;# 
   172  0091                     	;# 
   173  0092                     	;# 
   174  0095                     	;# 
   175  0096                     	;# 
   176  0097                     	;# 
   177  0099                     	;# 
   178  009A                     	;# 
   179  009B                     	;# 
   180  009B                     	;# 
   181  009C                     	;# 
   182  009D                     	;# 
   183  009E                     	;# 
   184  010C                     	;# 
   185  010D                     	;# 
   186  010E                     	;# 
   187  0116                     	;# 
   188  0117                     	;# 
   189  011D                     	;# 
   190  018C                     	;# 
   191  018D                     	;# 
   192  018E                     	;# 
   193  0191                     	;# 
   194  0191                     	;# 
   195  0192                     	;# 
   196  0193                     	;# 
   197  0193                     	;# 
   198  0194                     	;# 
   199  0195                     	;# 
   200  0196                     	;# 
   201  0197                     	;# 
   202  0199                     	;# 
   203  019A                     	;# 
   204  019B                     	;# 
   205  019B                     	;# 
   206  019B                     	;# 
   207  019B                     	;# 
   208  019C                     	;# 
   209  019C                     	;# 
   210  019D                     	;# 
   211  019E                     	;# 
   212  019F                     	;# 
   213  020D                     	;# 
   214  0210                     	;# 
   215  0211                     	;# 
   216  0211                     	;# 
   217  0212                     	;# 
   218  0212                     	;# 
   219  0213                     	;# 
   220  0213                     	;# 
   221  0214                     	;# 
   222  0214                     	;# 
   223  0215                     	;# 
   224  0215                     	;# 
   225  0215                     	;# 
   226  0216                     	;# 
   227  0216                     	;# 
   228  0217                     	;# 
   229  0217                     	;# 
   230  0291                     	;# 
   231  0291                     	;# 
   232  0292                     	;# 
   233  0293                     	;# 
   234  0298                     	;# 
   235  0298                     	;# 
   236  0299                     	;# 
   237  029A                     	;# 
   238  0394                     	;# 
   239  0395                     	;# 
   240  0396                     	;# 
   241  0FE4                     	;# 
   242  0FE5                     	;# 
   243  0FE6                     	;# 
   244  0FE7                     	;# 
   245  0FE8                     	;# 
   246  0FE9                     	;# 
   247  0FEA                     	;# 
   248  0FEB                     	;# 
   249  0FED                     	;# 
   250  0FEE                     	;# 
   251  0FEF                     	;# 
   252  0000                     	;# 
   253  0001                     	;# 
   254  0002                     	;# 
   255  0003                     	;# 
   256  0004                     	;# 
   257  0005                     	;# 
   258  0006                     	;# 
   259  0007                     	;# 
   260  0008                     	;# 
   261  0009                     	;# 
   262  000A                     	;# 
   263  000B                     	;# 
   264  000C                     	;# 
   265  000D                     	;# 
   266  000E                     	;# 
   267  0010                     	;# 
   268  0011                     	;# 
   269  0012                     	;# 
   270  0015                     	;# 
   271  0016                     	;# 
   272  0016                     	;# 
   273  0017                     	;# 
   274  0018                     	;# 
   275  0019                     	;# 
   276  001A                     	;# 
   277  001B                     	;# 
   278  001C                     	;# 
   279  008C                     	;# 
   280  008D                     	;# 
   281  008E                     	;# 
   282  0090                     	;# 
   283  0091                     	;# 
   284  0092                     	;# 
   285  0095                     	;# 
   286  0096                     	;# 
   287  0097                     	;# 
   288  0099                     	;# 
   289  009A                     	;# 
   290  009B                     	;# 
   291  009B                     	;# 
   292  009C                     	;# 
   293  009D                     	;# 
   294  009E                     	;# 
   295  010C                     	;# 
   296  010D                     	;# 
   297  010E                     	;# 
   298  0116                     	;# 
   299  0117                     	;# 
   300  011D                     	;# 
   301  018C                     	;# 
   302  018D                     	;# 
   303  018E                     	;# 
   304  0191                     	;# 
   305  0191                     	;# 
   306  0192                     	;# 
   307  0193                     	;# 
   308  0193                     	;# 
   309  0194                     	;# 
   310  0195                     	;# 
   311  0196                     	;# 
   312  0197                     	;# 
   313  0199                     	;# 
   314  019A                     	;# 
   315  019B                     	;# 
   316  019B                     	;# 
   317  019B                     	;# 
   318  019B                     	;# 
   319  019C                     	;# 
   320  019C                     	;# 
   321  019D                     	;# 
   322  019E                     	;# 
   323  019F                     	;# 
   324  020D                     	;# 
   325  0210                     	;# 
   326  0211                     	;# 
   327  0211                     	;# 
   328  0212                     	;# 
   329  0212                     	;# 
   330  0213                     	;# 
   331  0213                     	;# 
   332  0214                     	;# 
   333  0214                     	;# 
   334  0215                     	;# 
   335  0215                     	;# 
   336  0215                     	;# 
   337  0216                     	;# 
   338  0216                     	;# 
   339  0217                     	;# 
   340  0217                     	;# 
   341  0291                     	;# 
   342  0291                     	;# 
   343  0292                     	;# 
   344  0293                     	;# 
   345  0298                     	;# 
   346  0298                     	;# 
   347  0299                     	;# 
   348  029A                     	;# 
   349  0394                     	;# 
   350  0395                     	;# 
   351  0396                     	;# 
   352  0FE4                     	;# 
   353  0FE5                     	;# 
   354  0FE6                     	;# 
   355  0FE7                     	;# 
   356  0FE8                     	;# 
   357  0FE9                     	;# 
   358  0FEA                     	;# 
   359  0FEB                     	;# 
   360  0FED                     	;# 
   361  0FEE                     	;# 
   362  0FEF                     	;# 
   363  0000                     	;# 
   364  0001                     	;# 
   365  0002                     	;# 
   366  0003                     	;# 
   367  0004                     	;# 
   368  0005                     	;# 
   369  0006                     	;# 
   370  0007                     	;# 
   371  0008                     	;# 
   372  0009                     	;# 
   373  000A                     	;# 
   374  000B                     	;# 
   375  000C                     	;# 
   376  000D                     	;# 
   377  000E                     	;# 
   378  0010                     	;# 
   379  0011                     	;# 
   380  0012                     	;# 
   381  0015                     	;# 
   382  0016                     	;# 
   383  0016                     	;# 
   384  0017                     	;# 
   385  0018                     	;# 
   386  0019                     	;# 
   387  001A                     	;# 
   388  001B                     	;# 
   389  001C                     	;# 
   390  008C                     	;# 
   391  008D                     	;# 
   392  008E                     	;# 
   393  0090                     	;# 
   394  0091                     	;# 
   395  0092                     	;# 
   396  0095                     	;# 
   397  0096                     	;# 
   398  0097                     	;# 
   399  0099                     	;# 
   400  009A                     	;# 
   401  009B                     	;# 
   402  009B                     	;# 
   403  009C                     	;# 
   404  009D                     	;# 
   405  009E                     	;# 
   406  010C                     	;# 
   407  010D                     	;# 
   408  010E                     	;# 
   409  0116                     	;# 
   410  0117                     	;# 
   411  011D                     	;# 
   412  018C                     	;# 
   413  018D                     	;# 
   414  018E                     	;# 
   415  0191                     	;# 
   416  0191                     	;# 
   417  0192                     	;# 
   418  0193                     	;# 
   419  0193                     	;# 
   420  0194                     	;# 
   421  0195                     	;# 
   422  0196                     	;# 
   423  0197                     	;# 
   424  0199                     	;# 
   425  019A                     	;# 
   426  019B                     	;# 
   427  019B                     	;# 
   428  019B                     	;# 
   429  019B                     	;# 
   430  019C                     	;# 
   431  019C                     	;# 
   432  019D                     	;# 
   433  019E                     	;# 
   434  019F                     	;# 
   435  020D                     	;# 
   436  0210                     	;# 
   437  0211                     	;# 
   438  0211                     	;# 
   439  0212                     	;# 
   440  0212                     	;# 
   441  0213                     	;# 
   442  0213                     	;# 
   443  0214                     	;# 
   444  0214                     	;# 
   445  0215                     	;# 
   446  0215                     	;# 
   447  0215                     	;# 
   448  0216                     	;# 
   449  0216                     	;# 
   450  0217                     	;# 
   451  0217                     	;# 
   452  0291                     	;# 
   453  0291                     	;# 
   454  0292                     	;# 
   455  0293                     	;# 
   456  0298                     	;# 
   457  0298                     	;# 
   458  0299                     	;# 
   459  029A                     	;# 
   460  0394                     	;# 
   461  0395                     	;# 
   462  0396                     	;# 
   463  0FE4                     	;# 
   464  0FE5                     	;# 
   465  0FE6                     	;# 
   466  0FE7                     	;# 
   467  0FE8                     	;# 
   468  0FE9                     	;# 
   469  0FEA                     	;# 
   470  0FEB                     	;# 
   471  0FED                     	;# 
   472  0FEE                     	;# 
   473  0FEF                     	;# 
   474  0000                     	;# 
   475  0001                     	;# 
   476  0002                     	;# 
   477  0003                     	;# 
   478  0004                     	;# 
   479  0005                     	;# 
   480  0006                     	;# 
   481  0007                     	;# 
   482  0008                     	;# 
   483  0009                     	;# 
   484  000A                     	;# 
   485  000B                     	;# 
   486  000C                     	;# 
   487  000D                     	;# 
   488  000E                     	;# 
   489  0010                     	;# 
   490  0011                     	;# 
   491  0012                     	;# 
   492  0015                     	;# 
   493  0016                     	;# 
   494  0016                     	;# 
   495  0017                     	;# 
   496  0018                     	;# 
   497  0019                     	;# 
   498  001A                     	;# 
   499  001B                     	;# 
   500  001C                     	;# 
   501  008C                     	;# 
   502  008D                     	;# 
   503  008E                     	;# 
   504  0090                     	;# 
   505  0091                     	;# 
   506  0092                     	;# 
   507  0095                     	;# 
   508  0096                     	;# 
   509  0097                     	;# 
   510  0099                     	;# 
   511  009A                     	;# 
   512  009B                     	;# 
   513  009B                     	;# 
   514  009C                     	;# 
   515  009D                     	;# 
   516  009E                     	;# 
   517  010C                     	;# 
   518  010D                     	;# 
   519  010E                     	;# 
   520  0116                     	;# 
   521  0117                     	;# 
   522  011D                     	;# 
   523  018C                     	;# 
   524  018D                     	;# 
   525  018E                     	;# 
   526  0191                     	;# 
   527  0191                     	;# 
   528  0192                     	;# 
   529  0193                     	;# 
   530  0193                     	;# 
   531  0194                     	;# 
   532  0195                     	;# 
   533  0196                     	;# 
   534  0197                     	;# 
   535  0199                     	;# 
   536  019A                     	;# 
   537  019B                     	;# 
   538  019B                     	;# 
   539  019B                     	;# 
   540  019B                     	;# 
   541  019C                     	;# 
   542  019C                     	;# 
   543  019D                     	;# 
   544  019E                     	;# 
   545  019F                     	;# 
   546  020D                     	;# 
   547  0210                     	;# 
   548  0211                     	;# 
   549  0211                     	;# 
   550  0212                     	;# 
   551  0212                     	;# 
   552  0213                     	;# 
   553  0213                     	;# 
   554  0214                     	;# 
   555  0214                     	;# 
   556  0215                     	;# 
   557  0215                     	;# 
   558  0215                     	;# 
   559  0216                     	;# 
   560  0216                     	;# 
   561  0217                     	;# 
   562  0217                     	;# 
   563  0291                     	;# 
   564  0291                     	;# 
   565  0292                     	;# 
   566  0293                     	;# 
   567  0298                     	;# 
   568  0298                     	;# 
   569  0299                     	;# 
   570  029A                     	;# 
   571  0394                     	;# 
   572  0395                     	;# 
   573  0396                     	;# 
   574  0FE4                     	;# 
   575  0FE5                     	;# 
   576  0FE6                     	;# 
   577  0FE7                     	;# 
   578  0FE8                     	;# 
   579  0FE9                     	;# 
   580  0FEA                     	;# 
   581  0FEB                     	;# 
   582  0FED                     	;# 
   583  0FEE                     	;# 
   584  0FEF                     	;# 
   585  0000                     	;# 
   586  0001                     	;# 
   587  0002                     	;# 
   588  0003                     	;# 
   589  0004                     	;# 
   590  0005                     	;# 
   591  0006                     	;# 
   592  0007                     	;# 
   593  0008                     	;# 
   594  0009                     	;# 
   595  000A                     	;# 
   596  000B                     	;# 
   597  000C                     	;# 
   598  000D                     	;# 
   599  000E                     	;# 
   600  0010                     	;# 
   601  0011                     	;# 
   602  0012                     	;# 
   603  0015                     	;# 
   604  0016                     	;# 
   605  0016                     	;# 
   606  0017                     	;# 
   607  0018                     	;# 
   608  0019                     	;# 
   609  001A                     	;# 
   610  001B                     	;# 
   611  001C                     	;# 
   612  008C                     	;# 
   613  008D                     	;# 
   614  008E                     	;# 
   615  0090                     	;# 
   616  0091                     	;# 
   617  0092                     	;# 
   618  0095                     	;# 
   619  0096                     	;# 
   620  0097                     	;# 
   621  0099                     	;# 
   622  009A                     	;# 
   623  009B                     	;# 
   624  009B                     	;# 
   625  009C                     	;# 
   626  009D                     	;# 
   627  009E                     	;# 
   628  010C                     	;# 
   629  010D                     	;# 
   630  010E                     	;# 
   631  0116                     	;# 
   632  0117                     	;# 
   633  011D                     	;# 
   634  018C                     	;# 
   635  018D                     	;# 
   636  018E                     	;# 
   637  0191                     	;# 
   638  0191                     	;# 
   639  0192                     	;# 
   640  0193                     	;# 
   641  0193                     	;# 
   642  0194                     	;# 
   643  0195                     	;# 
   644  0196                     	;# 
   645  0197                     	;# 
   646  0199                     	;# 
   647  019A                     	;# 
   648  019B                     	;# 
   649  019B                     	;# 
   650  019B                     	;# 
   651  019B                     	;# 
   652  019C                     	;# 
   653  019C                     	;# 
   654  019D                     	;# 
   655  019E                     	;# 
   656  019F                     	;# 
   657  020D                     	;# 
   658  0210                     	;# 
   659  0211                     	;# 
   660  0211                     	;# 
   661  0212                     	;# 
   662  0212                     	;# 
   663  0213                     	;# 
   664  0213                     	;# 
   665  0214                     	;# 
   666  0214                     	;# 
   667  0215                     	;# 
   668  0215                     	;# 
   669  0215                     	;# 
   670  0216                     	;# 
   671  0216                     	;# 
   672  0217                     	;# 
   673  0217                     	;# 
   674  0291                     	;# 
   675  0291                     	;# 
   676  0292                     	;# 
   677  0293                     	;# 
   678  0298                     	;# 
   679  0298                     	;# 
   680  0299                     	;# 
   681  029A                     	;# 
   682  0394                     	;# 
   683  0395                     	;# 
   684  0396                     	;# 
   685  0FE4                     	;# 
   686  0FE5                     	;# 
   687  0FE6                     	;# 
   688  0FE7                     	;# 
   689  0FE8                     	;# 
   690  0FE9                     	;# 
   691  0FEA                     	;# 
   692  0FEB                     	;# 
   693  0FED                     	;# 
   694  0FEE                     	;# 
   695  0FEF                     	;# 
   696  0000                     	;# 
   697  0001                     	;# 
   698  0002                     	;# 
   699  0003                     	;# 
   700  0004                     	;# 
   701  0005                     	;# 
   702  0006                     	;# 
   703  0007                     	;# 
   704  0008                     	;# 
   705  0009                     	;# 
   706  000A                     	;# 
   707  000B                     	;# 
   708  000C                     	;# 
   709  000D                     	;# 
   710  000E                     	;# 
   711  0010                     	;# 
   712  0011                     	;# 
   713  0012                     	;# 
   714  0015                     	;# 
   715  0016                     	;# 
   716  0016                     	;# 
   717  0017                     	;# 
   718  0018                     	;# 
   719  0019                     	;# 
   720  001A                     	;# 
   721  001B                     	;# 
   722  001C                     	;# 
   723  008C                     	;# 
   724  008D                     	;# 
   725  008E                     	;# 
   726  0090                     	;# 
   727  0091                     	;# 
   728  0092                     	;# 
   729  0095                     	;# 
   730  0096                     	;# 
   731  0097                     	;# 
   732  0099                     	;# 
   733  009A                     	;# 
   734  009B                     	;# 
   735  009B                     	;# 
   736  009C                     	;# 
   737  009D                     	;# 
   738  009E                     	;# 
   739  010C                     	;# 
   740  010D                     	;# 
   741  010E                     	;# 
   742  0116                     	;# 
   743  0117                     	;# 
   744  011D                     	;# 
   745  018C                     	;# 
   746  018D                     	;# 
   747  018E                     	;# 
   748  0191                     	;# 
   749  0191                     	;# 
   750  0192                     	;# 
   751  0193                     	;# 
   752  0193                     	;# 
   753  0194                     	;# 
   754  0195                     	;# 
   755  0196                     	;# 
   756  0197                     	;# 
   757  0199                     	;# 
   758  019A                     	;# 
   759  019B                     	;# 
   760  019B                     	;# 
   761  019B                     	;# 
   762  019B                     	;# 
   763  019C                     	;# 
   764  019C                     	;# 
   765  019D                     	;# 
   766  019E                     	;# 
   767  019F                     	;# 
   768  020D                     	;# 
   769  0210                     	;# 
   770  0211                     	;# 
   771  0211                     	;# 
   772  0212                     	;# 
   773  0212                     	;# 
   774  0213                     	;# 
   775  0213                     	;# 
   776  0214                     	;# 
   777  0214                     	;# 
   778  0215                     	;# 
   779  0215                     	;# 
   780  0215                     	;# 
   781  0216                     	;# 
   782  0216                     	;# 
   783  0217                     	;# 
   784  0217                     	;# 
   785  0291                     	;# 
   786  0291                     	;# 
   787  0292                     	;# 
   788  0293                     	;# 
   789  0298                     	;# 
   790  0298                     	;# 
   791  0299                     	;# 
   792  029A                     	;# 
   793  0394                     	;# 
   794  0395                     	;# 
   795  0396                     	;# 
   796  0FE4                     	;# 
   797  0FE5                     	;# 
   798  0FE6                     	;# 
   799  0FE7                     	;# 
   800  0FE8                     	;# 
   801  0FE9                     	;# 
   802  0FEA                     	;# 
   803  0FEB                     	;# 
   804  0FED                     	;# 
   805  0FEE                     	;# 
   806  0FEF                     	;# 
   807  0000                     	;# 
   808  0001                     	;# 
   809  0002                     	;# 
   810  0003                     	;# 
   811  0004                     	;# 
   812  0005                     	;# 
   813  0006                     	;# 
   814  0007                     	;# 
   815  0008                     	;# 
   816  0009                     	;# 
   817  000A                     	;# 
   818  000B                     	;# 
   819  000C                     	;# 
   820  000D                     	;# 
   821  000E                     	;# 
   822  0010                     	;# 
   823  0011                     	;# 
   824  0012                     	;# 
   825  0015                     	;# 
   826  0016                     	;# 
   827  0016                     	;# 
   828  0017                     	;# 
   829  0018                     	;# 
   830  0019                     	;# 
   831  001A                     	;# 
   832  001B                     	;# 
   833  001C                     	;# 
   834  008C                     	;# 
   835  008D                     	;# 
   836  008E                     	;# 
   837  0090                     	;# 
   838  0091                     	;# 
   839  0092                     	;# 
   840  0095                     	;# 
   841  0096                     	;# 
   842  0097                     	;# 
   843  0099                     	;# 
   844  009A                     	;# 
   845  009B                     	;# 
   846  009B                     	;# 
   847  009C                     	;# 
   848  009D                     	;# 
   849  009E                     	;# 
   850  010C                     	;# 
   851  010D                     	;# 
   852  010E                     	;# 
   853  0116                     	;# 
   854  0117                     	;# 
   855  011D                     	;# 
   856  018C                     	;# 
   857  018D                     	;# 
   858  018E                     	;# 
   859  0191                     	;# 
   860  0191                     	;# 
   861  0192                     	;# 
   862  0193                     	;# 
   863  0193                     	;# 
   864  0194                     	;# 
   865  0195                     	;# 
   866  0196                     	;# 
   867  0197                     	;# 
   868  0199                     	;# 
   869  019A                     	;# 
   870  019B                     	;# 
   871  019B                     	;# 
   872  019B                     	;# 
   873  019B                     	;# 
   874  019C                     	;# 
   875  019C                     	;# 
   876  019D                     	;# 
   877  019E                     	;# 
   878  019F                     	;# 
   879  020D                     	;# 
   880  0210                     	;# 
   881  0211                     	;# 
   882  0211                     	;# 
   883  0212                     	;# 
   884  0212                     	;# 
   885  0213                     	;# 
   886  0213                     	;# 
   887  0214                     	;# 
   888  0214                     	;# 
   889  0215                     	;# 
   890  0215                     	;# 
   891  0215                     	;# 
   892  0216                     	;# 
   893  0216                     	;# 
   894  0217                     	;# 
   895  0217                     	;# 
   896  0291                     	;# 
   897  0291                     	;# 
   898  0292                     	;# 
   899  0293                     	;# 
   900  0298                     	;# 
   901  0298                     	;# 
   902  0299                     	;# 
   903  029A                     	;# 
   904  0394                     	;# 
   905  0395                     	;# 
   906  0396                     	;# 
   907  0FE4                     	;# 
   908  0FE5                     	;# 
   909  0FE6                     	;# 
   910  0FE7                     	;# 
   911  0FE8                     	;# 
   912  0FE9                     	;# 
   913  0FEA                     	;# 
   914  0FEB                     	;# 
   915  0FED                     	;# 
   916  0FEE                     	;# 
   917  0FEF                     	;# 
   918  0000                     	;# 
   919  0001                     	;# 
   920  0002                     	;# 
   921  0003                     	;# 
   922  0004                     	;# 
   923  0005                     	;# 
   924  0006                     	;# 
   925  0007                     	;# 
   926  0008                     	;# 
   927  0009                     	;# 
   928  000A                     	;# 
   929  000B                     	;# 
   930  000C                     	;# 
   931  000D                     	;# 
   932  000E                     	;# 
   933  0010                     	;# 
   934  0011                     	;# 
   935  0012                     	;# 
   936  0015                     	;# 
   937  0016                     	;# 
   938  0016                     	;# 
   939  0017                     	;# 
   940  0018                     	;# 
   941  0019                     	;# 
   942  001A                     	;# 
   943  001B                     	;# 
   944  001C                     	;# 
   945  008C                     	;# 
   946  008D                     	;# 
   947  008E                     	;# 
   948  0090                     	;# 
   949  0091                     	;# 
   950  0092                     	;# 
   951  0095                     	;# 
   952  0096                     	;# 
   953  0097                     	;# 
   954  0099                     	;# 
   955  009A                     	;# 
   956  009B                     	;# 
   957  009B                     	;# 
   958  009C                     	;# 
   959  009D                     	;# 
   960  009E                     	;# 
   961  010C                     	;# 
   962  010D                     	;# 
   963  010E                     	;# 
   964  0116                     	;# 
   965  0117                     	;# 
   966  011D                     	;# 
   967  018C                     	;# 
   968  018D                     	;# 
   969  018E                     	;# 
   970  0191                     	;# 
   971  0191                     	;# 
   972  0192                     	;# 
   973  0193                     	;# 
   974  0193                     	;# 
   975  0194                     	;# 
   976  0195                     	;# 
   977  0196                     	;# 
   978  0197                     	;# 
   979  0199                     	;# 
   980  019A                     	;# 
   981  019B                     	;# 
   982  019B                     	;# 
   983  019B                     	;# 
   984  019B                     	;# 
   985  019C                     	;# 
   986  019C                     	;# 
   987  019D                     	;# 
   988  019E                     	;# 
   989  019F                     	;# 
   990  020D                     	;# 
   991  0210                     	;# 
   992  0211                     	;# 
   993  0211                     	;# 
   994  0212                     	;# 
   995  0212                     	;# 
   996  0213                     	;# 
   997  0213                     	;# 
   998  0214                     	;# 
   999  0214                     	;# 
  1000  0215                     	;# 
  1001  0215                     	;# 
  1002  0215                     	;# 
  1003  0216                     	;# 
  1004  0216                     	;# 
  1005  0217                     	;# 
  1006  0217                     	;# 
  1007  0291                     	;# 
  1008  0291                     	;# 
  1009  0292                     	;# 
  1010  0293                     	;# 
  1011  0298                     	;# 
  1012  0298                     	;# 
  1013  0299                     	;# 
  1014  029A                     	;# 
  1015  0394                     	;# 
  1016  0395                     	;# 
  1017  0396                     	;# 
  1018  0FE4                     	;# 
  1019  0FE5                     	;# 
  1020  0FE6                     	;# 
  1021  0FE7                     	;# 
  1022  0FE8                     	;# 
  1023  0FE9                     	;# 
  1024  0FEA                     	;# 
  1025  0FEB                     	;# 
  1026  0FED                     	;# 
  1027  0FEE                     	;# 
  1028  0FEF                     	;# 
  1029  0000                     	;# 
  1030  0001                     	;# 
  1031  0002                     	;# 
  1032  0003                     	;# 
  1033  0004                     	;# 
  1034  0005                     	;# 
  1035  0006                     	;# 
  1036  0007                     	;# 
  1037  0008                     	;# 
  1038  0009                     	;# 
  1039  000A                     	;# 
  1040  000B                     	;# 
  1041  000C                     	;# 
  1042  000D                     	;# 
  1043  000E                     	;# 
  1044  0010                     	;# 
  1045  0011                     	;# 
  1046  0012                     	;# 
  1047  0015                     	;# 
  1048  0016                     	;# 
  1049  0016                     	;# 
  1050  0017                     	;# 
  1051  0018                     	;# 
  1052  0019                     	;# 
  1053  001A                     	;# 
  1054  001B                     	;# 
  1055  001C                     	;# 
  1056  008C                     	;# 
  1057  008D                     	;# 
  1058  008E                     	;# 
  1059  0090                     	;# 
  1060  0091                     	;# 
  1061  0092                     	;# 
  1062  0095                     	;# 
  1063  0096                     	;# 
  1064  0097                     	;# 
  1065  0099                     	;# 
  1066  009A                     	;# 
  1067  009B                     	;# 
  1068  009B                     	;# 
  1069  009C                     	;# 
  1070  009D                     	;# 
  1071  009E                     	;# 
  1072  010C                     	;# 
  1073  010D                     	;# 
  1074  010E                     	;# 
  1075  0116                     	;# 
  1076  0117                     	;# 
  1077  011D                     	;# 
  1078  018C                     	;# 
  1079  018D                     	;# 
  1080  018E                     	;# 
  1081  0191                     	;# 
  1082  0191                     	;# 
  1083  0192                     	;# 
  1084  0193                     	;# 
  1085  0193                     	;# 
  1086  0194                     	;# 
  1087  0195                     	;# 
  1088  0196                     	;# 
  1089  0197                     	;# 
  1090  0199                     	;# 
  1091  019A                     	;# 
  1092  019B                     	;# 
  1093  019B                     	;# 
  1094  019B                     	;# 
  1095  019B                     	;# 
  1096  019C                     	;# 
  1097  019C                     	;# 
  1098  019D                     	;# 
  1099  019E                     	;# 
  1100  019F                     	;# 
  1101  020D                     	;# 
  1102  0210                     	;# 
  1103  0211                     	;# 
  1104  0211                     	;# 
  1105  0212                     	;# 
  1106  0212                     	;# 
  1107  0213                     	;# 
  1108  0213                     	;# 
  1109  0214                     	;# 
  1110  0214                     	;# 
  1111  0215                     	;# 
  1112  0215                     	;# 
  1113  0215                     	;# 
  1114  0216                     	;# 
  1115  0216                     	;# 
  1116  0217                     	;# 
  1117  0217                     	;# 
  1118  0291                     	;# 
  1119  0291                     	;# 
  1120  0292                     	;# 
  1121  0293                     	;# 
  1122  0298                     	;# 
  1123  0298                     	;# 
  1124  0299                     	;# 
  1125  029A                     	;# 
  1126  0394                     	;# 
  1127  0395                     	;# 
  1128  0396                     	;# 
  1129  0FE4                     	;# 
  1130  0FE5                     	;# 
  1131  0FE6                     	;# 
  1132  0FE7                     	;# 
  1133  0FE8                     	;# 
  1134  0FE9                     	;# 
  1135  0FEA                     	;# 
  1136  0FEB                     	;# 
  1137  0FED                     	;# 
  1138  0FEE                     	;# 
  1139  0FEF                     	;# 
  1140  0000                     	;# 
  1141  0001                     	;# 
  1142  0002                     	;# 
  1143  0003                     	;# 
  1144  0004                     	;# 
  1145  0005                     	;# 
  1146  0006                     	;# 
  1147  0007                     	;# 
  1148  0008                     	;# 
  1149  0009                     	;# 
  1150  000A                     	;# 
  1151  000B                     	;# 
  1152  000C                     	;# 
  1153  000D                     	;# 
  1154  000E                     	;# 
  1155  0010                     	;# 
  1156  0011                     	;# 
  1157  0012                     	;# 
  1158  0015                     	;# 
  1159  0016                     	;# 
  1160  0016                     	;# 
  1161  0017                     	;# 
  1162  0018                     	;# 
  1163  0019                     	;# 
  1164  001A                     	;# 
  1165  001B                     	;# 
  1166  001C                     	;# 
  1167  008C                     	;# 
  1168  008D                     	;# 
  1169  008E                     	;# 
  1170  0090                     	;# 
  1171  0091                     	;# 
  1172  0092                     	;# 
  1173  0095                     	;# 
  1174  0096                     	;# 
  1175  0097                     	;# 
  1176  0099                     	;# 
  1177  009A                     	;# 
  1178  009B                     	;# 
  1179  009B                     	;# 
  1180  009C                     	;# 
  1181  009D                     	;# 
  1182  009E                     	;# 
  1183  010C                     	;# 
  1184  010D                     	;# 
  1185  010E                     	;# 
  1186  0116                     	;# 
  1187  0117                     	;# 
  1188  011D                     	;# 
  1189  018C                     	;# 
  1190  018D                     	;# 
  1191  018E                     	;# 
  1192  0191                     	;# 
  1193  0191                     	;# 
  1194  0192                     	;# 
  1195  0193                     	;# 
  1196  0193                     	;# 
  1197  0194                     	;# 
  1198  0195                     	;# 
  1199  0196                     	;# 
  1200  0197                     	;# 
  1201  0199                     	;# 
  1202  019A                     	;# 
  1203  019B                     	;# 
  1204  019B                     	;# 
  1205  019B                     	;# 
  1206  019B                     	;# 
  1207  019C                     	;# 
  1208  019C                     	;# 
  1209  019D                     	;# 
  1210  019E                     	;# 
  1211  019F                     	;# 
  1212  020D                     	;# 
  1213  0210                     	;# 
  1214  0211                     	;# 
  1215  0211                     	;# 
  1216  0212                     	;# 
  1217  0212                     	;# 
  1218  0213                     	;# 
  1219  0213                     	;# 
  1220  0214                     	;# 
  1221  0214                     	;# 
  1222  0215                     	;# 
  1223  0215                     	;# 
  1224  0215                     	;# 
  1225  0216                     	;# 
  1226  0216                     	;# 
  1227  0217                     	;# 
  1228  0217                     	;# 
  1229  0291                     	;# 
  1230  0291                     	;# 
  1231  0292                     	;# 
  1232  0293                     	;# 
  1233  0298                     	;# 
  1234  0298                     	;# 
  1235  0299                     	;# 
  1236  029A                     	;# 
  1237  0394                     	;# 
  1238  0395                     	;# 
  1239  0396                     	;# 
  1240  0FE4                     	;# 
  1241  0FE5                     	;# 
  1242  0FE6                     	;# 
  1243  0FE7                     	;# 
  1244  0FE8                     	;# 
  1245  0FE9                     	;# 
  1246  0FEA                     	;# 
  1247  0FEB                     	;# 
  1248  0FED                     	;# 
  1249  0FEE                     	;# 
  1250  0FEF                     	;# 
  1251  0000                     	;# 
  1252  0001                     	;# 
  1253  0002                     	;# 
  1254  0003                     	;# 
  1255  0004                     	;# 
  1256  0005                     	;# 
  1257  0006                     	;# 
  1258  0007                     	;# 
  1259  0008                     	;# 
  1260  0009                     	;# 
  1261  000A                     	;# 
  1262  000B                     	;# 
  1263  000C                     	;# 
  1264  000D                     	;# 
  1265  000E                     	;# 
  1266  0010                     	;# 
  1267  0011                     	;# 
  1268  0012                     	;# 
  1269  0015                     	;# 
  1270  0016                     	;# 
  1271  0016                     	;# 
  1272  0017                     	;# 
  1273  0018                     	;# 
  1274  0019                     	;# 
  1275  001A                     	;# 
  1276  001B                     	;# 
  1277  001C                     	;# 
  1278  008C                     	;# 
  1279  008D                     	;# 
  1280  008E                     	;# 
  1281  0090                     	;# 
  1282  0091                     	;# 
  1283  0092                     	;# 
  1284  0095                     	;# 
  1285  0096                     	;# 
  1286  0097                     	;# 
  1287  0099                     	;# 
  1288  009A                     	;# 
  1289  009B                     	;# 
  1290  009B                     	;# 
  1291  009C                     	;# 
  1292  009D                     	;# 
  1293  009E                     	;# 
  1294  010C                     	;# 
  1295  010D                     	;# 
  1296  010E                     	;# 
  1297  0116                     	;# 
  1298  0117                     	;# 
  1299  011D                     	;# 
  1300  018C                     	;# 
  1301  018D                     	;# 
  1302  018E                     	;# 
  1303  0191                     	;# 
  1304  0191                     	;# 
  1305  0192                     	;# 
  1306  0193                     	;# 
  1307  0193                     	;# 
  1308  0194                     	;# 
  1309  0195                     	;# 
  1310  0196                     	;# 
  1311  0197                     	;# 
  1312  0199                     	;# 
  1313  019A                     	;# 
  1314  019B                     	;# 
  1315  019B                     	;# 
  1316  019B                     	;# 
  1317  019B                     	;# 
  1318  019C                     	;# 
  1319  019C                     	;# 
  1320  019D                     	;# 
  1321  019E                     	;# 
  1322  019F                     	;# 
  1323  020D                     	;# 
  1324  0210                     	;# 
  1325  0211                     	;# 
  1326  0211                     	;# 
  1327  0212                     	;# 
  1328  0212                     	;# 
  1329  0213                     	;# 
  1330  0213                     	;# 
  1331  0214                     	;# 
  1332  0214                     	;# 
  1333  0215                     	;# 
  1334  0215                     	;# 
  1335  0215                     	;# 
  1336  0216                     	;# 
  1337  0216                     	;# 
  1338  0217                     	;# 
  1339  0217                     	;# 
  1340  0291                     	;# 
  1341  0291                     	;# 
  1342  0292                     	;# 
  1343  0293                     	;# 
  1344  0298                     	;# 
  1345  0298                     	;# 
  1346  0299                     	;# 
  1347  029A                     	;# 
  1348  0394                     	;# 
  1349  0395                     	;# 
  1350  0396                     	;# 
  1351  0FE4                     	;# 
  1352  0FE5                     	;# 
  1353  0FE6                     	;# 
  1354  0FE7                     	;# 
  1355  0FE8                     	;# 
  1356  0FE9                     	;# 
  1357  0FEA                     	;# 
  1358  0FEB                     	;# 
  1359  0FED                     	;# 
  1360  0FEE                     	;# 
  1361  0FEF                     	;# 
  1362  0000                     	;# 
  1363  0001                     	;# 
  1364  0002                     	;# 
  1365  0003                     	;# 
  1366  0004                     	;# 
  1367  0005                     	;# 
  1368  0006                     	;# 
  1369  0007                     	;# 
  1370  0008                     	;# 
  1371  0009                     	;# 
  1372  000A                     	;# 
  1373  000B                     	;# 
  1374  000C                     	;# 
  1375  000D                     	;# 
  1376  000E                     	;# 
  1377  0010                     	;# 
  1378  0011                     	;# 
  1379  0012                     	;# 
  1380  0015                     	;# 
  1381  0016                     	;# 
  1382  0016                     	;# 
  1383  0017                     	;# 
  1384  0018                     	;# 
  1385  0019                     	;# 
  1386  001A                     	;# 
  1387  001B                     	;# 
  1388  001C                     	;# 
  1389  008C                     	;# 
  1390  008D                     	;# 
  1391  008E                     	;# 
  1392  0090                     	;# 
  1393  0091                     	;# 
  1394  0092                     	;# 
  1395  0095                     	;# 
  1396  0096                     	;# 
  1397  0097                     	;# 
  1398  0099                     	;# 
  1399  009A                     	;# 
  1400  009B                     	;# 
  1401  009B                     	;# 
  1402  009C                     	;# 
  1403  009D                     	;# 
  1404  009E                     	;# 
  1405  010C                     	;# 
  1406  010D                     	;# 
  1407  010E                     	;# 
  1408  0116                     	;# 
  1409  0117                     	;# 
  1410  011D                     	;# 
  1411  018C                     	;# 
  1412  018D                     	;# 
  1413  018E                     	;# 
  1414  0191                     	;# 
  1415  0191                     	;# 
  1416  0192                     	;# 
  1417  0193                     	;# 
  1418  0193                     	;# 
  1419  0194                     	;# 
  1420  0195                     	;# 
  1421  0196                     	;# 
  1422  0197                     	;# 
  1423  0199                     	;# 
  1424  019A                     	;# 
  1425  019B                     	;# 
  1426  019B                     	;# 
  1427  019B                     	;# 
  1428  019B                     	;# 
  1429  019C                     	;# 
  1430  019C                     	;# 
  1431  019D                     	;# 
  1432  019E                     	;# 
  1433  019F                     	;# 
  1434  020D                     	;# 
  1435  0210                     	;# 
  1436  0211                     	;# 
  1437  0211                     	;# 
  1438  0212                     	;# 
  1439  0212                     	;# 
  1440  0213                     	;# 
  1441  0213                     	;# 
  1442  0214                     	;# 
  1443  0214                     	;# 
  1444  0215                     	;# 
  1445  0215                     	;# 
  1446  0215                     	;# 
  1447  0216                     	;# 
  1448  0216                     	;# 
  1449  0217                     	;# 
  1450  0217                     	;# 
  1451  0291                     	;# 
  1452  0291                     	;# 
  1453  0292                     	;# 
  1454  0293                     	;# 
  1455  0298                     	;# 
  1456  0298                     	;# 
  1457  0299                     	;# 
  1458  029A                     	;# 
  1459  0394                     	;# 
  1460  0395                     	;# 
  1461  0396                     	;# 
  1462  0FE4                     	;# 
  1463  0FE5                     	;# 
  1464  0FE6                     	;# 
  1465  0FE7                     	;# 
  1466  0FE8                     	;# 
  1467  0FE9                     	;# 
  1468  0FEA                     	;# 
  1469  0FEB                     	;# 
  1470  0FED                     	;# 
  1471  0FEE                     	;# 
  1472  0FEF                     	;# 
  1473  0000                     	;# 
  1474  0001                     	;# 
  1475  0002                     	;# 
  1476  0003                     	;# 
  1477  0004                     	;# 
  1478  0005                     	;# 
  1479  0006                     	;# 
  1480  0007                     	;# 
  1481  0008                     	;# 
  1482  0009                     	;# 
  1483  000A                     	;# 
  1484  000B                     	;# 
  1485  000C                     	;# 
  1486  000D                     	;# 
  1487  000E                     	;# 
  1488  0010                     	;# 
  1489  0011                     	;# 
  1490  0012                     	;# 
  1491  0015                     	;# 
  1492  0016                     	;# 
  1493  0016                     	;# 
  1494  0017                     	;# 
  1495  0018                     	;# 
  1496  0019                     	;# 
  1497  001A                     	;# 
  1498  001B                     	;# 
  1499  001C                     	;# 
  1500  008C                     	;# 
  1501  008D                     	;# 
  1502  008E                     	;# 
  1503  0090                     	;# 
  1504  0091                     	;# 
  1505  0092                     	;# 
  1506  0095                     	;# 
  1507  0096                     	;# 
  1508  0097                     	;# 
  1509  0099                     	;# 
  1510  009A                     	;# 
  1511  009B                     	;# 
  1512  009B                     	;# 
  1513  009C                     	;# 
  1514  009D                     	;# 
  1515  009E                     	;# 
  1516  010C                     	;# 
  1517  010D                     	;# 
  1518  010E                     	;# 
  1519  0116                     	;# 
  1520  0117                     	;# 
  1521  011D                     	;# 
  1522  018C                     	;# 
  1523  018D                     	;# 
  1524  018E                     	;# 
  1525  0191                     	;# 
  1526  0191                     	;# 
  1527  0192                     	;# 
  1528  0193                     	;# 
  1529  0193                     	;# 
  1530  0194                     	;# 
  1531  0195                     	;# 
  1532  0196                     	;# 
  1533  0197                     	;# 
  1534  0199                     	;# 
  1535  019A                     	;# 
  1536  019B                     	;# 
  1537  019B                     	;# 
  1538  019B                     	;# 
  1539  019B                     	;# 
  1540  019C                     	;# 
  1541  019C                     	;# 
  1542  019D                     	;# 
  1543  019E                     	;# 
  1544  019F                     	;# 
  1545  020D                     	;# 
  1546  0210                     	;# 
  1547  0211                     	;# 
  1548  0211                     	;# 
  1549  0212                     	;# 
  1550  0212                     	;# 
  1551  0213                     	;# 
  1552  0213                     	;# 
  1553  0214                     	;# 
  1554  0214                     	;# 
  1555  0215                     	;# 
  1556  0215                     	;# 
  1557  0215                     	;# 
  1558  0216                     	;# 
  1559  0216                     	;# 
  1560  0217                     	;# 
  1561  0217                     	;# 
  1562  0291                     	;# 
  1563  0291                     	;# 
  1564  0292                     	;# 
  1565  0293                     	;# 
  1566  0298                     	;# 
  1567  0298                     	;# 
  1568  0299                     	;# 
  1569  029A                     	;# 
  1570  0394                     	;# 
  1571  0395                     	;# 
  1572  0396                     	;# 
  1573  0FE4                     	;# 
  1574  0FE5                     	;# 
  1575  0FE6                     	;# 
  1576  0FE7                     	;# 
  1577  0FE8                     	;# 
  1578  0FE9                     	;# 
  1579  0FEA                     	;# 
  1580  0FEB                     	;# 
  1581  0FED                     	;# 
  1582  0FEE                     	;# 
  1583  0FEF                     	;# 
  1584  0000                     	;# 
  1585  0001                     	;# 
  1586  0002                     	;# 
  1587  0003                     	;# 
  1588  0004                     	;# 
  1589  0005                     	;# 
  1590  0006                     	;# 
  1591  0007                     	;# 
  1592  0008                     	;# 
  1593  0009                     	;# 
  1594  000A                     	;# 
  1595  000B                     	;# 
  1596  000C                     	;# 
  1597  000D                     	;# 
  1598  000E                     	;# 
  1599  0010                     	;# 
  1600  0011                     	;# 
  1601  0012                     	;# 
  1602  0015                     	;# 
  1603  0016                     	;# 
  1604  0016                     	;# 
  1605  0017                     	;# 
  1606  0018                     	;# 
  1607  0019                     	;# 
  1608  001A                     	;# 
  1609  001B                     	;# 
  1610  001C                     	;# 
  1611  008C                     	;# 
  1612  008D                     	;# 
  1613  008E                     	;# 
  1614  0090                     	;# 
  1615  0091                     	;# 
  1616  0092                     	;# 
  1617  0095                     	;# 
  1618  0096                     	;# 
  1619  0097                     	;# 
  1620  0099                     	;# 
  1621  009A                     	;# 
  1622  009B                     	;# 
  1623  009B                     	;# 
  1624  009C                     	;# 
  1625  009D                     	;# 
  1626  009E                     	;# 
  1627  010C                     	;# 
  1628  010D                     	;# 
  1629  010E                     	;# 
  1630  0116                     	;# 
  1631  0117                     	;# 
  1632  011D                     	;# 
  1633  018C                     	;# 
  1634  018D                     	;# 
  1635  018E                     	;# 
  1636  0191                     	;# 
  1637  0191                     	;# 
  1638  0192                     	;# 
  1639  0193                     	;# 
  1640  0193                     	;# 
  1641  0194                     	;# 
  1642  0195                     	;# 
  1643  0196                     	;# 
  1644  0197                     	;# 
  1645  0199                     	;# 
  1646  019A                     	;# 
  1647  019B                     	;# 
  1648  019B                     	;# 
  1649  019B                     	;# 
  1650  019B                     	;# 
  1651  019C                     	;# 
  1652  019C                     	;# 
  1653  019D                     	;# 
  1654  019E                     	;# 
  1655  019F                     	;# 
  1656  020D                     	;# 
  1657  0210                     	;# 
  1658  0211                     	;# 
  1659  0211                     	;# 
  1660  0212                     	;# 
  1661  0212                     	;# 
  1662  0213                     	;# 
  1663  0213                     	;# 
  1664  0214                     	;# 
  1665  0214                     	;# 
  1666  0215                     	;# 
  1667  0215                     	;# 
  1668  0215                     	;# 
  1669  0216                     	;# 
  1670  0216                     	;# 
  1671  0217                     	;# 
  1672  0217                     	;# 
  1673  0291                     	;# 
  1674  0291                     	;# 
  1675  0292                     	;# 
  1676  0293                     	;# 
  1677  0298                     	;# 
  1678  0298                     	;# 
  1679  0299                     	;# 
  1680  029A                     	;# 
  1681  0394                     	;# 
  1682  0395                     	;# 
  1683  0396                     	;# 
  1684  0FE4                     	;# 
  1685  0FE5                     	;# 
  1686  0FE6                     	;# 
  1687  0FE7                     	;# 
  1688  0FE8                     	;# 
  1689  0FE9                     	;# 
  1690  0FEA                     	;# 
  1691  0FEB                     	;# 
  1692  0FED                     	;# 
  1693  0FEE                     	;# 
  1694  0FEF                     	;# 
  1695  0000                     	;# 
  1696  0001                     	;# 
  1697  0002                     	;# 
  1698  0003                     	;# 
  1699  0004                     	;# 
  1700  0005                     	;# 
  1701  0006                     	;# 
  1702  0007                     	;# 
  1703  0008                     	;# 
  1704  0009                     	;# 
  1705  000A                     	;# 
  1706  000B                     	;# 
  1707  000C                     	;# 
  1708  000D                     	;# 
  1709  000E                     	;# 
  1710  0010                     	;# 
  1711  0011                     	;# 
  1712  0012                     	;# 
  1713  0015                     	;# 
  1714  0016                     	;# 
  1715  0016                     	;# 
  1716  0017                     	;# 
  1717  0018                     	;# 
  1718  0019                     	;# 
  1719  001A                     	;# 
  1720  001B                     	;# 
  1721  001C                     	;# 
  1722  008C                     	;# 
  1723  008D                     	;# 
  1724  008E                     	;# 
  1725  0090                     	;# 
  1726  0091                     	;# 
  1727  0092                     	;# 
  1728  0095                     	;# 
  1729  0096                     	;# 
  1730  0097                     	;# 
  1731  0099                     	;# 
  1732  009A                     	;# 
  1733  009B                     	;# 
  1734  009B                     	;# 
  1735  009C                     	;# 
  1736  009D                     	;# 
  1737  009E                     	;# 
  1738  010C                     	;# 
  1739  010D                     	;# 
  1740  010E                     	;# 
  1741  0116                     	;# 
  1742  0117                     	;# 
  1743  011D                     	;# 
  1744  018C                     	;# 
  1745  018D                     	;# 
  1746  018E                     	;# 
  1747  0191                     	;# 
  1748  0191                     	;# 
  1749  0192                     	;# 
  1750  0193                     	;# 
  1751  0193                     	;# 
  1752  0194                     	;# 
  1753  0195                     	;# 
  1754  0196                     	;# 
  1755  0197                     	;# 
  1756  0199                     	;# 
  1757  019A                     	;# 
  1758  019B                     	;# 
  1759  019B                     	;# 
  1760  019B                     	;# 
  1761  019B                     	;# 
  1762  019C                     	;# 
  1763  019C                     	;# 
  1764  019D                     	;# 
  1765  019E                     	;# 
  1766  019F                     	;# 
  1767  020D                     	;# 
  1768  0210                     	;# 
  1769  0211                     	;# 
  1770  0211                     	;# 
  1771  0212                     	;# 
  1772  0212                     	;# 
  1773  0213                     	;# 
  1774  0213                     	;# 
  1775  0214                     	;# 
  1776  0214                     	;# 
  1777  0215                     	;# 
  1778  0215                     	;# 
  1779  0215                     	;# 
  1780  0216                     	;# 
  1781  0216                     	;# 
  1782  0217                     	;# 
  1783  0217                     	;# 
  1784  0291                     	;# 
  1785  0291                     	;# 
  1786  0292                     	;# 
  1787  0293                     	;# 
  1788  0298                     	;# 
  1789  0298                     	;# 
  1790  0299                     	;# 
  1791  029A                     	;# 
  1792  0394                     	;# 
  1793  0395                     	;# 
  1794  0396                     	;# 
  1795  0FE4                     	;# 
  1796  0FE5                     	;# 
  1797  0FE6                     	;# 
  1798  0FE7                     	;# 
  1799  0FE8                     	;# 
  1800  0FE9                     	;# 
  1801  0FEA                     	;# 
  1802  0FEB                     	;# 
  1803  0FED                     	;# 
  1804  0FEE                     	;# 
  1805  0FEF                     	;# 
  1806  0000                     	;# 
  1807  0001                     	;# 
  1808  0002                     	;# 
  1809  0003                     	;# 
  1810  0004                     	;# 
  1811  0005                     	;# 
  1812  0006                     	;# 
  1813  0007                     	;# 
  1814  0008                     	;# 
  1815  0009                     	;# 
  1816  000A                     	;# 
  1817  000B                     	;# 
  1818  000C                     	;# 
  1819  000D                     	;# 
  1820  000E                     	;# 
  1821  0010                     	;# 
  1822  0011                     	;# 
  1823  0012                     	;# 
  1824  0015                     	;# 
  1825  0016                     	;# 
  1826  0016                     	;# 
  1827  0017                     	;# 
  1828  0018                     	;# 
  1829  0019                     	;# 
  1830  001A                     	;# 
  1831  001B                     	;# 
  1832  001C                     	;# 
  1833  008C                     	;# 
  1834  008D                     	;# 
  1835  008E                     	;# 
  1836  0090                     	;# 
  1837  0091                     	;# 
  1838  0092                     	;# 
  1839  0095                     	;# 
  1840  0096                     	;# 
  1841  0097                     	;# 
  1842  0099                     	;# 
  1843  009A                     	;# 
  1844  009B                     	;# 
  1845  009B                     	;# 
  1846  009C                     	;# 
  1847  009D                     	;# 
  1848  009E                     	;# 
  1849  010C                     	;# 
  1850  010D                     	;# 
  1851  010E                     	;# 
  1852  0116                     	;# 
  1853  0117                     	;# 
  1854  011D                     	;# 
  1855  018C                     	;# 
  1856  018D                     	;# 
  1857  018E                     	;# 
  1858  0191                     	;# 
  1859  0191                     	;# 
  1860  0192                     	;# 
  1861  0193                     	;# 
  1862  0193                     	;# 
  1863  0194                     	;# 
  1864  0195                     	;# 
  1865  0196                     	;# 
  1866  0197                     	;# 
  1867  0199                     	;# 
  1868  019A                     	;# 
  1869  019B                     	;# 
  1870  019B                     	;# 
  1871  019B                     	;# 
  1872  019B                     	;# 
  1873  019C                     	;# 
  1874  019C                     	;# 
  1875  019D                     	;# 
  1876  019E                     	;# 
  1877  019F                     	;# 
  1878  020D                     	;# 
  1879  0210                     	;# 
  1880  0211                     	;# 
  1881  0211                     	;# 
  1882  0212                     	;# 
  1883  0212                     	;# 
  1884  0213                     	;# 
  1885  0213                     	;# 
  1886  0214                     	;# 
  1887  0214                     	;# 
  1888  0215                     	;# 
  1889  0215                     	;# 
  1890  0215                     	;# 
  1891  0216                     	;# 
  1892  0216                     	;# 
  1893  0217                     	;# 
  1894  0217                     	;# 
  1895  0291                     	;# 
  1896  0291                     	;# 
  1897  0292                     	;# 
  1898  0293                     	;# 
  1899  0298                     	;# 
  1900  0298                     	;# 
  1901  0299                     	;# 
  1902  029A                     	;# 
  1903  0394                     	;# 
  1904  0395                     	;# 
  1905  0396                     	;# 
  1906  0FE4                     	;# 
  1907  0FE5                     	;# 
  1908  0FE6                     	;# 
  1909  0FE7                     	;# 
  1910  0FE8                     	;# 
  1911  0FE9                     	;# 
  1912  0FEA                     	;# 
  1913  0FEB                     	;# 
  1914  0FED                     	;# 
  1915  0FEE                     	;# 
  1916  0FEF                     	;# 
  1917  0000                     	;# 
  1918  0001                     	;# 
  1919  0002                     	;# 
  1920  0003                     	;# 
  1921  0004                     	;# 
  1922  0005                     	;# 
  1923  0006                     	;# 
  1924  0007                     	;# 
  1925  0008                     	;# 
  1926  0009                     	;# 
  1927  000A                     	;# 
  1928  000B                     	;# 
  1929  000C                     	;# 
  1930  000D                     	;# 
  1931  000E                     	;# 
  1932  0010                     	;# 
  1933  0011                     	;# 
  1934  0012                     	;# 
  1935  0015                     	;# 
  1936  0016                     	;# 
  1937  0016                     	;# 
  1938  0017                     	;# 
  1939  0018                     	;# 
  1940  0019                     	;# 
  1941  001A                     	;# 
  1942  001B                     	;# 
  1943  001C                     	;# 
  1944  008C                     	;# 
  1945  008D                     	;# 
  1946  008E                     	;# 
  1947  0090                     	;# 
  1948  0091                     	;# 
  1949  0092                     	;# 
  1950  0095                     	;# 
  1951  0096                     	;# 
  1952  0097                     	;# 
  1953  0099                     	;# 
  1954  009A                     	;# 
  1955  009B                     	;# 
  1956  009B                     	;# 
  1957  009C                     	;# 
  1958  009D                     	;# 
  1959  009E                     	;# 
  1960  010C                     	;# 
  1961  010D                     	;# 
  1962  010E                     	;# 
  1963  0116                     	;# 
  1964  0117                     	;# 
  1965  011D                     	;# 
  1966  018C                     	;# 
  1967  018D                     	;# 
  1968  018E                     	;# 
  1969  0191                     	;# 
  1970  0191                     	;# 
  1971  0192                     	;# 
  1972  0193                     	;# 
  1973  0193                     	;# 
  1974  0194                     	;# 
  1975  0195                     	;# 
  1976  0196                     	;# 
  1977  0197                     	;# 
  1978  0199                     	;# 
  1979  019A                     	;# 
  1980  019B                     	;# 
  1981  019B                     	;# 
  1982  019B                     	;# 
  1983  019B                     	;# 
  1984  019C                     	;# 
  1985  019C                     	;# 
  1986  019D                     	;# 
  1987  019E                     	;# 
  1988  019F                     	;# 
  1989  020D                     	;# 
  1990  0210                     	;# 
  1991  0211                     	;# 
  1992  0211                     	;# 
  1993  0212                     	;# 
  1994  0212                     	;# 
  1995  0213                     	;# 
  1996  0213                     	;# 
  1997  0214                     	;# 
  1998  0214                     	;# 
  1999  0215                     	;# 
  2000  0215                     	;# 
  2001  0215                     	;# 
  2002  0216                     	;# 
  2003  0216                     	;# 
  2004  0217                     	;# 
  2005  0217                     	;# 
  2006  0291                     	;# 
  2007  0291                     	;# 
  2008  0292                     	;# 
  2009  0293                     	;# 
  2010  0298                     	;# 
  2011  0298                     	;# 
  2012  0299                     	;# 
  2013  029A                     	;# 
  2014  0394                     	;# 
  2015  0395                     	;# 
  2016  0396                     	;# 
  2017  0FE4                     	;# 
  2018  0FE5                     	;# 
  2019  0FE6                     	;# 
  2020  0FE7                     	;# 
  2021  0FE8                     	;# 
  2022  0FE9                     	;# 
  2023  0FEA                     	;# 
  2024  0FEB                     	;# 
  2025  0FED                     	;# 
  2026  0FEE                     	;# 
  2027  0FEF                     	;# 
  2028                           
  2029                           	psect	idataBANK3
  2030  134A                     __pidataBANK3:	
  2031                           
  2032                           ;initializer for __product
  2033  134A  3463               	retlw	99
  2034  134B  3402               	retlw	2
  2035  134C  3400               	retlw	0
  2036  134D  3400               	retlw	0
  2037  134E  3400               	retlw	0
  2038  134F  3400               	retlw	0
  2039  1350  3400               	retlw	0
  2040  1351  3400               	retlw	0
  2041  1352  3400               	retlw	0
  2042  1353  3400               	retlw	0
  2043  1354  3400               	retlw	0
  2044  1355  3400               	retlw	0
  2045  1356  34FF               	retlw	255
  2046  1357  34FF               	retlw	255
  2047  1358  34FF               	retlw	255
  2048  1359  3400               	retlw	0
  2049  135A  3400               	retlw	0
  2050  135B  3400               	retlw	0
  2051  135C  3400               	retlw	0
  2052  135D  3400               	retlw	0
  2053  135E  3400               	retlw	0
  2054  135F  3400               	retlw	0
  2055  1360  3400               	retlw	0
  2056  1361  3400               	retlw	0
  2057  1362  3400               	retlw	0
  2058  1363  3400               	retlw	0
  2059  1364  3400               	retlw	0
  2060  1365  3400               	retlw	0
  2061  1366  3400               	retlw	0
  2062  1367  3400               	retlw	0
  2063  1368  3400               	retlw	0
  2064  1369  3400               	retlw	0
  2065                           
  2066                           	psect	stringtext
  2067  1000                     __pstringtext:	
  2068  1000                     _CC2500_registers_address:	
  2069  1000  3403               	retlw	3
  2070  1001  3416               	retlw	22
  2071  1002  3417               	retlw	23
  2072  1003  341E               	retlw	30
  2073  1004  341F               	retlw	31
  2074  1005  3420               	retlw	32
  2075  1006  342A               	retlw	42
  2076  1007  342B               	retlw	43
  2077  1008  340B               	retlw	11
  2078  1009  340C               	retlw	12
  2079  100A  340D               	retlw	13
  2080  100B  340E               	retlw	14
  2081  100C  340F               	retlw	15
  2082  100D  3410               	retlw	16
  2083  100E  3411               	retlw	17
  2084  100F  3412               	retlw	18
  2085  1010  3413               	retlw	19
  2086  1011  3414               	retlw	20
  2087  1012  340A               	retlw	10
  2088  1013  3415               	retlw	21
  2089  1014  3421               	retlw	33
  2090  1015  3422               	retlw	34
  2091  1016  3418               	retlw	24
  2092  1017  3419               	retlw	25
  2093  1018  341A               	retlw	26
  2094  1019  341B               	retlw	27
  2095  101A  341C               	retlw	28
  2096  101B  341D               	retlw	29
  2097  101C  3423               	retlw	35
  2098  101D  3424               	retlw	36
  2099  101E  3425               	retlw	37
  2100  101F  3426               	retlw	38
  2101  1020  3429               	retlw	41
  2102  1021  342C               	retlw	44
  2103  1022  342D               	retlw	45
  2104  1023  342E               	retlw	46
  2105  1024  3400               	retlw	0
  2106  1025  3401               	retlw	1
  2107  1026  3402               	retlw	2
  2108  1027  3407               	retlw	7
  2109  1028  3408               	retlw	8
  2110  1029  3409               	retlw	9
  2111  102A  3406               	retlw	6
  2112  102B  3404               	retlw	4
  2113  102C  3405               	retlw	5
  2114  102D  3427               	retlw	39
  2115  102E  3428               	retlw	40
  2116  102F                     __end_of_CC2500_registers_address:	
  2117  102F                     _CC2500_rfSettings:	
  2118  102F  3407               	retlw	7
  2119  1030  3407               	retlw	7
  2120  1031  3430               	retlw	48
  2121  1032  3487               	retlw	135
  2122  1033  346B               	retlw	107
  2123  1034  34F8               	retlw	248
  2124  1035  347F               	retlw	127
  2125  1036  343F               	retlw	63
  2126  1037  3409               	retlw	9
  2127  1038  3400               	retlw	0
  2128  1039  345C               	retlw	92
  2129  103A  34A7               	retlw	167
  2130  103B  3462               	retlw	98
  2131  103C  3486               	retlw	134
  2132  103D  3483               	retlw	131
  2133  103E  3403               	retlw	3
  2134  103F  3422               	retlw	34
  2135  1040  34F8               	retlw	248
  2136  1041  3400               	retlw	0
  2137  1042  3444               	retlw	68
  2138  1043  34B6               	retlw	182
  2139  1044  3410               	retlw	16
  2140  1045  3418               	retlw	24
  2141  1046  341D               	retlw	29
  2142  1047  341C               	retlw	28
  2143  1048  34C7               	retlw	199
  2144  1049  3400               	retlw	0
  2145  104A  34B2               	retlw	178
  2146  104B  34EA               	retlw	234
  2147  104C  340A               	retlw	10
  2148  104D  3400               	retlw	0
  2149  104E  3411               	retlw	17
  2150  104F  3459               	retlw	89
  2151  1050  3488               	retlw	136
  2152  1051  3431               	retlw	49
  2153  1052  340B               	retlw	11
  2154  1053  342F               	retlw	47
  2155  1054  342E               	retlw	46
  2156  1055  3406               	retlw	6
  2157  1056  3404               	retlw	4
  2158  1057  3405               	retlw	5
  2159  1058  3400               	retlw	0
  2160  1059  3430               	retlw	48
  2161  105A  34D3               	retlw	211
  2162  105B  3491               	retlw	145
  2163  105C  3441               	retlw	65
  2164  105D  3400               	retlw	0
  2165  105E                     __end_of_CC2500_rfSettings:	
  2166  105E                     _CC2500_patable_vaule:	
  2167  105E  34FE               	retlw	254
  2168  105F  34FE               	retlw	254
  2169  1060  34FE               	retlw	254
  2170  1061  34FE               	retlw	254
  2171  1062  34FE               	retlw	254
  2172  1063  34FE               	retlw	254
  2173  1064  34FE               	retlw	254
  2174  1065  34FE               	retlw	254
  2175  1066                     __end_of_CC2500_patable_vaule:	
  2176                           
  2177                           	psect	nvBANK0
  2178  006E                     __pnvBANK0:	
  2179  006E                     _product:	
  2180  006E                     	ds	1
  2181  000C                     _PORTA	set	12
  2182  000D                     _PORTB	set	13
  2183  000E                     _PORTC	set	14
  2184  0018                     _T1CON	set	24
  2185  0017                     _TMR1H	set	23
  2186  0016                     _TMR1L	set	22
  2187  005F                     _GIE	set	95
  2188  005B                     _IOCIE	set	91
  2189  0058                     _IOCIF	set	88
  2190  005E                     _PEIE	set	94
  2191  0060                     _RA0	set	96
  2192  0063                     _RA3	set	99
  2193  0064                     _RA4	set	100
  2194  0066                     _RA6	set	102
  2195  0067                     _RA7	set	103
  2196  0068                     _RB0	set	104
  2197  0069                     _RB1	set	105
  2198  006B                     _RB3	set	107
  2199  006C                     _RB4	set	108
  2200  006D                     _RB5	set	109
  2201  0070                     _RC0	set	112
  2202  0071                     _RC1	set	113
  2203  0072                     _RC2	set	114
  2204  0074                     _RC4	set	116
  2205  0075                     _RC5	set	117
  2206  0077                     _RC7	set	119
  2207  0088                     _TMR1IF	set	136
  2208  009D                     _ADCON0	set	157
  2209  009E                     _ADCON1	set	158
  2210  009C                     _ADRESH	set	156
  2211  009B                     _ADRESL	set	155
  2212  0099                     _OSCCON	set	153
  2213  008C                     _TRISA	set	140
  2214  008D                     _TRISB	set	141
  2215  008E                     _TRISC	set	142
  2216  0097                     _WDTCON	set	151
  2217  04E9                     _GO_nDONE	set	1257
  2218  0488                     _TMR1IE	set	1160
  2219  0117                     _FVRCON	set	279
  2220  010C                     _LATA	set	268
  2221  010D                     _LATB	set	269
  2222  010E                     _LATC	set	270
  2223  018C                     _ANSELA	set	396
  2224  018D                     _ANSELB	set	397
  2225  018E                     _ANSELC	set	398
  2226  0192                     _PMADRH	set	402
  2227  0191                     _PMADRL	set	401
  2228  0196                     _PMCON2	set	406
  2229  0194                     _PMDATH	set	404
  2230  0193                     _PMDATL	set	403
  2231  0CAE                     _CFGS	set	3246
  2232  0CAC                     _FREE	set	3244
  2233  0CAD                     _LWLO	set	3245
  2234  0CA8                     _RD	set	3240
  2235  0CA9                     _WR	set	3241
  2236  0CAA                     _WREN	set	3242
  2237  1069                     _WPUB1	set	4201
  2238  106A                     _WPUB2	set	4202
  2239  0396                     _IOCBF	set	918
  2240  0395                     _IOCBN	set	917
  2241  0394                     _IOCBP	set	916
  2242  1CB2                     _IOCBF2	set	7346
  2243                           
  2244                           ; #config settings
  2245  0000                     
  2246                           	psect	cinit
  2247  0015                     start_initialization:	
  2248  0015                     __initialization:	
  2249                           
  2250                           ; Clear objects allocated to BITCOMMON
  2251  0015  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2252                           
  2253                           ; Clear objects allocated to COMMON
  2254  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2255  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2256  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2257  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2258                           
  2259                           ; Clear objects allocated to BANK0
  2260  001A  01EF               	clrf	__pbssBANK0& (0+127)
  2261                           
  2262                           ; Clear objects allocated to BANK1
  2263  001B  30A0               	movlw	low __pbssBANK1
  2264  001C  0084               	movwf	4
  2265  001D  3000               	movlw	high __pbssBANK1
  2266  001E  0085               	movwf	5
  2267  001F  3047               	movlw	71
  2268  0020  319F  2742  3180   	fcall	clear_ram0
  2269                           
  2270                           ; Clear objects allocated to BANK2
  2271  0023  3020               	movlw	low __pbssBANK2
  2272  0024  0084               	movwf	4
  2273  0025  3001               	movlw	high __pbssBANK2
  2274  0026  0085               	movwf	5
  2275  0027  304D               	movlw	77
  2276  0028  319F  2742  3180   	fcall	clear_ram0
  2277                           
  2278                           ; Clear objects allocated to BANK3
  2279  002B  30A0               	movlw	low __pbssBANK3
  2280  002C  0084               	movwf	4
  2281  002D  3001               	movlw	high __pbssBANK3
  2282  002E  0085               	movwf	5
  2283  002F  302E               	movlw	46
  2284  0030  319F  2742  3180   	fcall	clear_ram0
  2285                           
  2286                           ; Initialize objects allocated to BANK3
  2287  0033  304A               	movlw	low __pidataBANK3
  2288  0034  0084               	movwf	4
  2289  0035  3093               	movlw	(high __pidataBANK3)| (0+128)
  2290  0036  0085               	movwf	5
  2291  0037  30CE               	movlw	low __pdataBANK3
  2292  0038  0086               	movwf	6
  2293  0039  3001               	movlw	high __pdataBANK3
  2294  003A  0087               	movwf	7
  2295  003B  3020               	movlw	32
  2296  003C  319F  273C         	fcall	init_ram
  2297  003E                     end_of_initialization:	
  2298                           ;End of C runtime variable initialization code
  2299                           
  2300  003E                     __end_of__initialization:	
  2301  003E  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2302  003F  0020               	movlb	0
  2303  0040  3196  2E5E         	ljmp	_main	;jump to C main() function
  2304                           
  2305                           	psect	bitbssCOMMON
  2306  03E0                     __pbitbssCOMMON:	
  2307  03E0                     _Receive_OK:	
  2308  03E0                     	ds	1
  2309  03E1                     _Transceive_OK:	
  2310  03E1                     	ds	1
  2311                           
  2312                           	psect	bssCOMMON
  2313  0078                     __pbssCOMMON:	
  2314  0078                     _DelayOff:	
  2315  0078                     	ds	1
  2316  0079                     _DimmerLightsIntr:	
  2317  0079                     	ds	1
  2318  007A                     _SPI0Buffer:	
  2319  007A                     	ds	1
  2320  007B                     _Sw:	
  2321  007B                     	ds	1
  2322                           
  2323                           	psect	bssBANK0
  2324  006F                     __pbssBANK0:	
  2325  006F                     _DimmerLights:	
  2326  006F                     	ds	1
  2327                           
  2328                           	psect	bssBANK1
  2329  00A0                     __pbssBANK1:	
  2330  00A0                     _myMain:	
  2331  00A0                     	ds	16
  2332  00B0                     _Buz1:	
  2333  00B0                     	ds	12
  2334  00BC                     _RF1:	
  2335  00BC                     	ds	12
  2336  00C8                     _Dimmer:	
  2337  00C8                     	ds	3
  2338  00CB                     _Timer1:	
  2339  00CB                     	ds	3
  2340  00CE                     _LED:	
  2341  00CE                     	ds	2
  2342  00D0                     _RF_Count:	
  2343  00D0                     	ds	2
  2344  00D2                     _WDT:	
  2345  00D2                     	ds	2
  2346  00D4                     _CRC:	
  2347  00D4                     	ds	1
  2348  00D5                     _DimmerLights11:	
  2349  00D5                     	ds	1
  2350  00D6                     _DimmerLights22:	
  2351  00D6                     	ds	1
  2352  00D7                     _DimmerLightsIntrIOC:	
  2353  00D7                     	ds	1
  2354  00D8                     _RSSI:	
  2355  00D8                     	ds	1
  2356  00D9                     _Rx_Length:	
  2357  00D9                     	ds	1
  2358  00DA                     _SwDetect:	
  2359  00DA                     	ds	1
  2360  00DB                     _Tx_Length:	
  2361  00DB                     	ds	1
  2362  00DC                     _r_address:	
  2363  00DC                     	ds	1
  2364  00DD                     _r_data:	
  2365  00DD                     	ds	1
  2366  00DE                     _s_data:	
  2367  00DE                     	ds	1
  2368  00DF                     _VarErrLED:	
  2369  00DF                     	ds	4
  2370  00E3                     _DlySw1:	
  2371  00E3                     	ds	2
  2372  00E5                     _DlySw2:	
  2373  00E5                     	ds	2
  2374                           
  2375                           	psect	bssBANK2
  2376  0120                     __pbssBANK2:	
  2377  0120                     _RF_Data:	
  2378  0120                     	ds	30
  2379  013E                     _DimmerLights1:	
  2380  013E                     	ds	15
  2381  014D                     _DimmerLights2:	
  2382  014D                     	ds	15
  2383  015C                     _Sw1:	
  2384  015C                     	ds	9
  2385  0165                     _VarLED1:	
  2386  0165                     	ds	4
  2387  0169                     _VarLED2:	
  2388  0169                     	ds	4
  2389                           
  2390                           	psect	bssBANK3
  2391  01A0                     __pbssBANK3:	
  2392  01A0                     _Memory:	
  2393  01A0                     	ds	37
  2394  01C5                     _Sw2:	
  2395  01C5                     	ds	9
  2396                           
  2397                           	psect	dataBANK3
  2398  01CE                     __pdataBANK3:	
  2399  01CE                     __product:	
  2400  01CE                     	ds	32
  2401                           
  2402                           	psect	clrtext
  2403  1F42                     clear_ram0:	
  2404                           ;	Called with FSR0 containing the base address, and
  2405                           ;	WREG with the size to clear
  2406                           
  2407  1F42  0064               	clrwdt	;clear the watchdog before getting into this loop
  2408  1F43                     clrloop0:	
  2409  1F43  0180               	clrf	0	;clear RAM location pointed to by FSR
  2410  1F44  3101               	addfsr 0,1
  2411  1F45  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2412  1F46  2F43               	goto	clrloop0	;have we reached the end yet?
  2413  1F47  3400               	retlw	0	;all done for this memory range, return
  2414                           
  2415                           	psect	inittext
  2416  1F3C                     init_ram:	
  2417  1F3C  00FE               	movwf	126
  2418  1F3D                     initloop:	
  2419  1F3D  0012               	moviw fsr0++
  2420  1F3E  001E               	movwi fsr1++
  2421  1F3F  0BFE               	decfsz	126,f
  2422  1F40  2F3D               	goto	initloop
  2423  1F41  3400               	retlw	0
  2424                           
  2425                           	psect	cstackBANK1
  2426  00E7                     __pcstackBANK1:	
  2427  00E7                     setRF_Main@loop_f:	
  2428                           
  2429                           ; 1 bytes @ 0x0
  2430  00E7                     	ds	1
  2431  00E8                     setRF_Main@Receive_OK:	
  2432                           
  2433                           ; 1 bytes @ 0x1
  2434  00E8                     	ds	1
  2435  00E9                     setRF_Main@error:	
  2436                           
  2437                           ; 1 bytes @ 0x2
  2438  00E9                     	ds	1
  2439  00EA                     ?_main:	
  2440  00EA                     main@argc:	
  2441                           ; 2 bytes @ 0x3
  2442                           
  2443                           
  2444                           ; 2 bytes @ 0x3
  2445  00EA                     	ds	2
  2446  00EC                     main@argv:	
  2447                           
  2448                           ; 2 bytes @ 0x5
  2449  00EC                     	ds	2
  2450                           
  2451                           	psect	cstackCOMMON
  2452  0070                     __pcstackCOMMON:	
  2453  0070                     ?_Timeout_Counter:	
  2454  0070                     ?_set_TimeoutCleared:	
  2455                           ; 0 bytes @ 0x0
  2456                           
  2457  0070                     ?_CC2500_WriteByte:	
  2458                           ; 0 bytes @ 0x0
  2459                           
  2460  0070                     ?_CC2500_WriteCommand:	
  2461                           ; 0 bytes @ 0x0
  2462                           
  2463  0070                     ?_CC2500_ReadStatus:	
  2464                           ; 0 bytes @ 0x0
  2465                           
  2466  0070                     ?_CC2500_ReadByte:	
  2467                           ; 0 bytes @ 0x0
  2468                           
  2469  0070                     ?_CC2500_PowerRST:	
  2470                           ; 0 bytes @ 0x0
  2471                           
  2472  0070                     ?_CC2500_InitSetREG:	
  2473                           ; 0 bytes @ 0x0
  2474                           
  2475  0070                     ?_CC2500_InitPATable:	
  2476                           ; 0 bytes @ 0x0
  2477                           
  2478  0070                     ?_CC2500_ClearTXFIFO:	
  2479                           ; 0 bytes @ 0x0
  2480                           
  2481  0070                     ?_CC2500_ClearRXFIFO:	
  2482                           ; 0 bytes @ 0x0
  2483                           
  2484  0070                     ?_CC2500_FrequencyCabr:	
  2485                           ; 0 bytes @ 0x0
  2486                           
  2487  0070                     ?_CC2500_SIDLEMode:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0070                     ?_DlyOff_Initialization:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0070                     ?_DlyOff_Main:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0070                     ?_setDimmerLights_ErrorClose:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0070                     ?_setDimmerLights_Initialization:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0070                     ?_Dimmer_Initialization:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0070                     ?_setDimmerLights_Main:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0070                     ?_setDimmerLights_Line:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0070                     ?_setTxData:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0070                     ?_setLED_Initialization:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0070                     ?_setLED_Main:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0070                     ?_Fosc_Set:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0070                     ?_IO_Set:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0070                     ?_TMR1_Set:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0070                     ?_ADC_Set:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0070                     ?_IOC_Set:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0070                     ?_WDT_Set:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0070                     ?_IOC_ISR:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0070                     ?_TMR1_ISR:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0070                     ?_Flash_Memory_Write:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0070                     ?_Flash_Memory_Modify:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0070                     ?_WDT_Clearing:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0070                     ?_setRF_Initialization:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0070                     ?_setRF_Main:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0070                     ?_getRxData:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0070                     ?_setLog_Code:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0070                     ?_setControl_Lights_Table:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0070                     ?_setRFSW_Control:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0070                     ?_setRFSW_AdjControl:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0070                     ?_setRF_DimmerValue:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0070                     ?_setSw_Initialization:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0070                     ?_setMain_Exception:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0070                     ?_setSw_Main:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0070                     ?_myMain_Initialization:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0070                     ?_my_MainTimer:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0070                     ?_Buzzer_Initialization:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_Buzzer_Main:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_CC2500_TxData:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_CC2500_RxData:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_CC2500_PowerOnInitial:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_DelayOffPointSelect:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_DelayOff_Initialization:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_DelayOff_Main:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_DimmerIntrIOCPointSelect:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ??_DimmerIntrIOCPointSelect:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_DimmerIntrPointSelect:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ??_DimmerIntrPointSelect:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_setDimmerLights_IntrControl:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_DimmerLightsPointSelect:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_DimmerLights_Initialization:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_DimmerLights_Main:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_setDimmerLights_SwOn:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_setDimmerLights_SwOff:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_setDimmerLights_AdjControl:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_setDimmerLights_AdjRF:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_LedPointSelect:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_LED_Initialization:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_LED_Main:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_Mcu_Initialization:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_ISR:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_setDimmerReClock:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_Flash_Memory_Initialization:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_Flash_Memory_Main:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_Flash_Memory_Unlock:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_Flash_Memory_Erasing:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_setMemory_Modify:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_setMemory_LoopSave:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_WDT_Main:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_RF_Initialization:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_RF_Main:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_setRF_Learn:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_TouchPower:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_SwPointSelect:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_Switch_Initialization:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_Switch_Main:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_DelayTimejudge:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_setPercentValue:	
  2719                           ; 1 bytes @ 0x0
  2720                           
  2721  0070                     ?_getPercentValue:	
  2722                           ; 1 bytes @ 0x0
  2723                           
  2724  0070                     ?_Flash_Memory_Read:	
  2725                           ; 1 bytes @ 0x0
  2726                           
  2727  0070                     ?_getMain_LightsStatus:	
  2728                           ; 1 bytes @ 0x0
  2729                           
  2730  0070                     ?_getMain_All_Error_Status:	
  2731                           ; 1 bytes @ 0x0
  2732                           
  2733  0070                     ?_getRF_KeyStatus:	
  2734                           ; 1 bytes @ 0x0
  2735                           
  2736  0070                     ?_getSw_KeyStatus:	
  2737                           ; 1 bytes @ 0x0
  2738                           
  2739  0070                     ?_getDelayOff_GO:	
  2740                           ; 1 bytes @ 0x0
  2741                           
  2742  0070                     ?_getDimmerLights_Status:	
  2743                           ; 1 bytes @ 0x0
  2744                           
  2745  0070                     ?_getAll_DimmerLights_AdjGO:	
  2746                           ; 1 bytes @ 0x0
  2747                           
  2748  0070                     ?_getDimmerLights_Line:	
  2749                           ; 1 bytes @ 0x0
  2750                           
  2751  0070                     getMain_All_Error_Status@command:	
  2752                           ; 1 bytes @ 0x0
  2753                           
  2754                           
  2755                           ; 1 bytes @ 0x0
  2756  0070                     	ds	1
  2757  0071                     DimmerIntrIOCPointSelect@lights:	
  2758  0071                     DimmerIntrPointSelect@lights:	
  2759                           ; 1 bytes @ 0x1
  2760                           
  2761                           
  2762                           ; 1 bytes @ 0x1
  2763  0071                     	ds	1
  2764  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2765  0072                     ??_setDimmerLights_IntrControl:	
  2766                           ; 0 bytes @ 0x2
  2767                           
  2768  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2769                           ; 0 bytes @ 0x2
  2770                           
  2771                           
  2772                           ; 1 bytes @ 0x2
  2773  0072                     	ds	1
  2774  0073                     ??_IOC_ISR:	
  2775  0073                     ??_setDimmerReClock:	
  2776                           ; 0 bytes @ 0x3
  2777                           
  2778                           
  2779                           ; 0 bytes @ 0x3
  2780  0073                     	ds	3
  2781  0076                     setDimmerLights_IntrControl@lights:	
  2782                           
  2783                           ; 1 bytes @ 0x6
  2784  0076                     	ds	1
  2785  0077                     ??_TMR1_ISR:	
  2786  0077                     ??_ISR:	
  2787                           ; 0 bytes @ 0x7
  2788                           
  2789                           
  2790                           ; 0 bytes @ 0x7
  2791  0077                     	ds	1
  2792                           
  2793                           	psect	cstackBANK0
  2794  0020                     __pcstackBANK0:	
  2795  0020                     ??_Timeout_Counter:	
  2796  0020                     ??_set_TimeoutCleared:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0020                     ??_CC2500_WriteByte:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0020                     ??_CC2500_ReadByte:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0020                     ?_DelayTime_1us:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0020                     ??_Dimmer_Initialization:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0020                     ??_setDimmerLights_Line:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0020                     ?_setRF_DimmerLights:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0020                     ??_setTxData:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0020                     ??_Fosc_Set:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0020                     ??_IO_Set:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0020                     ??_TMR1_Set:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0020                     ??_ADC_Set:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0020                     ??_IOC_Set:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0020                     ??_WDT_Set:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0020                     ??_Flash_Memory_Read:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0020                     ?_setMemory_Data:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0020                     ??_Flash_Memory_Write:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0020                     ??_WDT_Clearing:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0020                     ??_setRF_Initialization:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0020                     ??_getMain_All_Error_Status:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0020                     ??_getRF_KeyStatus:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0020                     ??_getSw_KeyStatus:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_myMain_Initialization:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_Buzzer_Initialization:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ??_Buzzer_Main:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_DelayOffPointSelect:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ??_DimmerLightsPointSelect:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_getAll_DimmerLights_AdjGO:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_getDimmerLights_Line:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_LedPointSelect:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_Flash_Memory_Unlock:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ??_Flash_Memory_Erasing:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ??_setMemory_Modify:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ??_setMemory_LoopSave:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0020                     ??_WDT_Main:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0020                     ??_setRF_Learn:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0020                     ??_TouchPower:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0020                     ??_SwPointSelect:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0020                     ?___bmul:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0020                     ?_getBuz_GO:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0020                     ?___awdiv:	
  2917                           ; 2 bytes @ 0x0
  2918                           
  2919  0020                     ?___ftpack:	
  2920                           ; 2 bytes @ 0x0
  2921                           
  2922  0020                     setDimmerLights_Line@lights:	
  2923                           ; 3 bytes @ 0x0
  2924                           
  2925  0020                     LedPointSelect@led:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0020                     setMemory_Data@data:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0020                     setRF_DimmerLights@on:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0020                     getMain_All_Error_Status@status:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0020                     ___bmul@multiplicand:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0020                     DelayTime_1us@count:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0020                     ___awdiv@divisor:	
  2944                           ; 2 bytes @ 0x0
  2945                           
  2946  0020                     ___ftpack@arg:	
  2947                           ; 2 bytes @ 0x0
  2948                           
  2949                           
  2950                           ; 3 bytes @ 0x0
  2951  0020                     	ds	1
  2952  0021                     ?_setLED:	
  2953  0021                     ??_setRF_DimmerLights:	
  2954                           ; 0 bytes @ 0x1
  2955                           
  2956  0021                     ??_setLED_Main:	
  2957                           ; 0 bytes @ 0x1
  2958                           
  2959  0021                     ??_setMemory_Data:	
  2960                           ; 0 bytes @ 0x1
  2961                           
  2962  0021                     ??_Mcu_Initialization:	
  2963                           ; 0 bytes @ 0x1
  2964                           
  2965  0021                     ??_RF_Initialization:	
  2966                           ; 0 bytes @ 0x1
  2967                           
  2968  0021                     ??___bmul:	
  2969                           ; 0 bytes @ 0x1
  2970                           
  2971  0021                     CC2500_WriteByte@loop_a:	
  2972                           ; 0 bytes @ 0x1
  2973                           
  2974  0021                     CC2500_ReadByte@loop_b:	
  2975                           ; 1 bytes @ 0x1
  2976                           
  2977  0021                     DelayOffPointSelect@sw:	
  2978                           ; 1 bytes @ 0x1
  2979                           
  2980  0021                     DimmerLightsPointSelect@lights:	
  2981                           ; 1 bytes @ 0x1
  2982                           
  2983  0021                     getAll_DimmerLights_AdjGO@adjgo:	
  2984                           ; 1 bytes @ 0x1
  2985                           
  2986  0021                     getDimmerLights_Line@line:	
  2987                           ; 1 bytes @ 0x1
  2988                           
  2989  0021                     setLED@command:	
  2990                           ; 1 bytes @ 0x1
  2991                           
  2992  0021                     Flash_Memory_Read@i:	
  2993                           ; 1 bytes @ 0x1
  2994                           
  2995  0021                     Flash_Memory_Write@i:	
  2996                           ; 1 bytes @ 0x1
  2997                           
  2998  0021                     setMemory_Modify@command:	
  2999                           ; 1 bytes @ 0x1
  3000                           
  3001  0021                     setMemory_LoopSave@command:	
  3002                           ; 1 bytes @ 0x1
  3003                           
  3004  0021                     setRF_Learn@command:	
  3005                           ; 1 bytes @ 0x1
  3006                           
  3007  0021                     getRF_KeyStatus@key:	
  3008                           ; 1 bytes @ 0x1
  3009                           
  3010  0021                     SwPointSelect@sw:	
  3011                           ; 1 bytes @ 0x1
  3012                           
  3013  0021                     _getSw_KeyStatus$5440:	
  3014                           ; 1 bytes @ 0x1
  3015                           
  3016                           
  3017                           ; 1 bytes @ 0x1
  3018  0021                     	ds	1
  3019  0022                     ??_CC2500_WriteCommand:	
  3020  0022                     ??_CC2500_ReadStatus:	
  3021                           ; 0 bytes @ 0x2
  3022                           
  3023  0022                     ??_DelayTime_1us:	
  3024                           ; 0 bytes @ 0x2
  3025                           
  3026  0022                     ?_CC2500_WriteREG:	
  3027                           ; 0 bytes @ 0x2
  3028                           
  3029  0022                     ??_DlyOff_Initialization:	
  3030                           ; 0 bytes @ 0x2
  3031                           
  3032  0022                     ??_setDimmerLights_Initialization:	
  3033                           ; 0 bytes @ 0x2
  3034                           
  3035  0022                     ?_setDimmerLights_Trigger:	
  3036                           ; 0 bytes @ 0x2
  3037                           
  3038  0022                     ?_setDimmerLights_TriggerAdj:	
  3039                           ; 0 bytes @ 0x2
  3040                           
  3041  0022                     ??_setLED:	
  3042                           ; 0 bytes @ 0x2
  3043                           
  3044  0022                     ??_getBuz_GO:	
  3045                           ; 0 bytes @ 0x2
  3046                           
  3047  0022                     ??_getDelayOff_GO:	
  3048                           ; 0 bytes @ 0x2
  3049                           
  3050  0022                     ??_getDimmerLights_Status:	
  3051                           ; 0 bytes @ 0x2
  3052                           
  3053  0022                     CC2500_WriteREG@value:	
  3054                           ; 0 bytes @ 0x2
  3055                           
  3056  0022                     DlyOff_Initialization@sw:	
  3057                           ; 1 bytes @ 0x2
  3058                           
  3059  0022                     getDelayOff_GO@sw:	
  3060                           ; 1 bytes @ 0x2
  3061                           
  3062  0022                     getDimmerLights_Status@lights:	
  3063                           ; 1 bytes @ 0x2
  3064                           
  3065  0022                     _getAll_DimmerLights_AdjGO$2244:	
  3066                           ; 1 bytes @ 0x2
  3067                           
  3068  0022                     setDimmerLights_Trigger@command:	
  3069                           ; 1 bytes @ 0x2
  3070                           
  3071  0022                     setDimmerLights_TriggerAdj@command:	
  3072                           ; 1 bytes @ 0x2
  3073                           
  3074  0022                     setLED@led:	
  3075                           ; 1 bytes @ 0x2
  3076                           
  3077  0022                     Flash_Memory_Read@address:	
  3078                           ; 1 bytes @ 0x2
  3079                           
  3080  0022                     setMemory_Data@address:	
  3081                           ; 1 bytes @ 0x2
  3082                           
  3083  0022                     _getRF_KeyStatus$4519:	
  3084                           ; 1 bytes @ 0x2
  3085                           
  3086  0022                     _getSw_KeyStatus$5441:	
  3087                           ; 1 bytes @ 0x2
  3088                           
  3089  0022                     ___bmul@product:	
  3090                           ; 1 bytes @ 0x2
  3091                           
  3092  0022                     DelayTime_1us@i:	
  3093                           ; 1 bytes @ 0x2
  3094                           
  3095  0022                     ___awdiv@dividend:	
  3096                           ; 2 bytes @ 0x2
  3097                           
  3098                           
  3099                           ; 2 bytes @ 0x2
  3100  0022                     	ds	1
  3101  0023                     ??_CC2500_WriteREG:	
  3102  0023                     ??_setDimmerLights_Trigger:	
  3103                           ; 0 bytes @ 0x3
  3104                           
  3105  0023                     ??_setDimmerLights_TriggerAdj:	
  3106                           ; 0 bytes @ 0x3
  3107                           
  3108  0023                     ??_setLED_Initialization:	
  3109                           ; 0 bytes @ 0x3
  3110                           
  3111  0023                     ??_setSw_Initialization:	
  3112                           ; 0 bytes @ 0x3
  3113                           
  3114  0023                     ??_DelayOff_Initialization:	
  3115                           ; 0 bytes @ 0x3
  3116                           
  3117  0023                     CC2500_WriteCommand@command:	
  3118                           ; 0 bytes @ 0x3
  3119                           
  3120  0023                     CC2500_ReadStatus@status_addr:	
  3121                           ; 1 bytes @ 0x3
  3122                           
  3123  0023                     getDelayOff_GO@go:	
  3124                           ; 1 bytes @ 0x3
  3125                           
  3126  0023                     setDimmerLights_Initialization@lights:	
  3127                           ; 1 bytes @ 0x3
  3128                           
  3129  0023                     getDimmerLights_Status@status:	
  3130                           ; 1 bytes @ 0x3
  3131                           
  3132  0023                     setLED_Initialization@led:	
  3133                           ; 1 bytes @ 0x3
  3134                           
  3135  0023                     setLED_Main@led:	
  3136                           ; 1 bytes @ 0x3
  3137                           
  3138  0023                     Flash_Memory_Read@ret:	
  3139                           ; 1 bytes @ 0x3
  3140                           
  3141  0023                     setRF_DimmerLights@status:	
  3142                           ; 1 bytes @ 0x3
  3143                           
  3144  0023                     setSw_Initialization@sw:	
  3145                           ; 1 bytes @ 0x3
  3146                           
  3147  0023                     getSw_KeyStatus@status:	
  3148                           ; 1 bytes @ 0x3
  3149                           
  3150  0023                     ___bmul@multiplier:	
  3151                           ; 1 bytes @ 0x3
  3152                           
  3153  0023                     ___ftpack@exp:	
  3154                           ; 1 bytes @ 0x3
  3155                           
  3156                           
  3157                           ; 1 bytes @ 0x3
  3158  0023                     	ds	1
  3159  0024                     ??_CC2500_ClearTXFIFO:	
  3160  0024                     ??_CC2500_ClearRXFIFO:	
  3161                           ; 0 bytes @ 0x4
  3162                           
  3163  0024                     ??_CC2500_SIDLEMode:	
  3164                           ; 0 bytes @ 0x4
  3165                           
  3166  0024                     ??_DelayTimejudge:	
  3167                           ; 0 bytes @ 0x4
  3168                           
  3169  0024                     ??_getMain_LightsStatus:	
  3170                           ; 0 bytes @ 0x4
  3171                           
  3172  0024                     ??_Flash_Memory_Modify:	
  3173                           ; 0 bytes @ 0x4
  3174                           
  3175  0024                     ??_CC2500_TxData:	
  3176                           ; 0 bytes @ 0x4
  3177                           
  3178  0024                     ??_CC2500_RxData:	
  3179                           ; 0 bytes @ 0x4
  3180                           
  3181  0024                     ??_DimmerLights_Initialization:	
  3182                           ; 0 bytes @ 0x4
  3183                           
  3184  0024                     ??_LED_Initialization:	
  3185                           ; 0 bytes @ 0x4
  3186                           
  3187  0024                     ??_LED_Main:	
  3188                           ; 0 bytes @ 0x4
  3189                           
  3190  0024                     ??_Switch_Initialization:	
  3191                           ; 0 bytes @ 0x4
  3192                           
  3193  0024                     ??___awdiv:	
  3194                           ; 0 bytes @ 0x4
  3195                           
  3196  0024                     CC2500_WriteREG@w_addr:	
  3197                           ; 0 bytes @ 0x4
  3198                           
  3199  0024                     setDimmerLights_Trigger@lights:	
  3200                           ; 1 bytes @ 0x4
  3201                           
  3202  0024                     setDimmerLights_TriggerAdj@lights:	
  3203                           ; 1 bytes @ 0x4
  3204                           
  3205  0024                     setRF_DimmerLights@lights:	
  3206                           ; 1 bytes @ 0x4
  3207                           
  3208  0024                     getSw_KeyStatus@sw:	
  3209                           ; 1 bytes @ 0x4
  3210                           
  3211  0024                     ___ftpack@sign:	
  3212                           ; 1 bytes @ 0x4
  3213                           
  3214  0024                     getBuz_GO@i:	
  3215                           ; 1 bytes @ 0x4
  3216                           
  3217  0024                     DelayTime_1us@j:	
  3218                           ; 2 bytes @ 0x4
  3219                           
  3220                           
  3221                           ; 2 bytes @ 0x4
  3222  0024                     	ds	1
  3223  0025                     ??_CC2500_InitSetREG:	
  3224  0025                     ??_CC2500_InitPATable:	
  3225                           ; 0 bytes @ 0x5
  3226                           
  3227  0025                     ??___ftpack:	
  3228                           ; 0 bytes @ 0x5
  3229                           
  3230  0025                     ??_setDimmerLights_AdjControl:	
  3231                           ; 0 bytes @ 0x5
  3232                           
  3233  0025                     CC2500_TxData@loop_e:	
  3234                           ; 0 bytes @ 0x5
  3235                           
  3236  0025                     CC2500_RxData@loop_f:	
  3237                           ; 1 bytes @ 0x5
  3238                           
  3239  0025                     Flash_Memory_Modify@i:	
  3240                           ; 1 bytes @ 0x5
  3241                           
  3242  0025                     getMain_LightsStatus@count:	
  3243                           ; 1 bytes @ 0x5
  3244                           
  3245  0025                     ___awdiv@counter:	
  3246                           ; 1 bytes @ 0x5
  3247                           
  3248                           
  3249                           ; 1 bytes @ 0x5
  3250  0025                     	ds	1
  3251  0026                     ??_CC2500_PowerRST:	
  3252  0026                     ??_CC2500_FrequencyCabr:	
  3253                           ; 0 bytes @ 0x6
  3254                           
  3255  0026                     CC2500_InitSetREG@temp1:	
  3256                           ; 0 bytes @ 0x6
  3257                           
  3258  0026                     CC2500_InitPATable@temp:	
  3259                           ; 1 bytes @ 0x6
  3260                           
  3261  0026                     DelayTimejudge@i:	
  3262                           ; 1 bytes @ 0x6
  3263                           
  3264  0026                     setDimmerLights_AdjControl@idle:	
  3265                           ; 1 bytes @ 0x6
  3266                           
  3267  0026                     ___awdiv@sign:	
  3268                           ; 1 bytes @ 0x6
  3269                           
  3270  0026                     getMain_LightsStatus@i:	
  3271                           ; 1 bytes @ 0x6
  3272                           
  3273                           
  3274                           ; 2 bytes @ 0x6
  3275  0026                     	ds	1
  3276  0027                     CC2500_InitSetREG@temp2:	
  3277  0027                     CC2500_InitPATable@loop_d:	
  3278                           ; 1 bytes @ 0x7
  3279                           
  3280  0027                     DelayTimejudge@j:	
  3281                           ; 1 bytes @ 0x7
  3282                           
  3283  0027                     _setDimmerLights_AdjControl$2265:	
  3284                           ; 1 bytes @ 0x7
  3285                           
  3286  0027                     ___awdiv@quotient:	
  3287                           ; 1 bytes @ 0x7
  3288                           
  3289                           
  3290                           ; 2 bytes @ 0x7
  3291  0027                     	ds	1
  3292  0028                     ?___awtoft:	
  3293  0028                     CC2500_InitSetREG@loop_c:	
  3294                           ; 3 bytes @ 0x8
  3295                           
  3296  0028                     DelayTimejudge@k:	
  3297                           ; 1 bytes @ 0x8
  3298                           
  3299  0028                     setDimmerLights_AdjControl@sw:	
  3300                           ; 1 bytes @ 0x8
  3301                           
  3302  0028                     getMain_LightsStatus@status:	
  3303                           ; 1 bytes @ 0x8
  3304                           
  3305  0028                     ___awtoft@c:	
  3306                           ; 1 bytes @ 0x8
  3307                           
  3308                           
  3309                           ; 2 bytes @ 0x8
  3310  0028                     	ds	1
  3311  0029                     ?_setBuz:	
  3312  0029                     ??_CC2500_PowerOnInitial:	
  3313                           ; 0 bytes @ 0x9
  3314                           
  3315  0029                     ??_Flash_Memory_Main:	
  3316                           ; 0 bytes @ 0x9
  3317                           
  3318  0029                     DelayTimejudge@value:	
  3319                           ; 0 bytes @ 0x9
  3320                           
  3321  0029                     setBuz@time:	
  3322                           ; 1 bytes @ 0x9
  3323                           
  3324                           
  3325                           ; 2 bytes @ 0x9
  3326  0029                     	ds	1
  3327  002A                     ?_setDelayOff_GO:	
  3328  002A                     setDelayOff_GO@command:	
  3329                           ; 0 bytes @ 0xA
  3330                           
  3331                           
  3332                           ; 1 bytes @ 0xA
  3333  002A                     	ds	1
  3334  002B                     ??_setBuz:	
  3335  002B                     ??___awtoft:	
  3336                           ; 0 bytes @ 0xB
  3337                           
  3338  002B                     setDelayOff_GO@value:	
  3339                           ; 0 bytes @ 0xB
  3340                           
  3341                           
  3342                           ; 1 bytes @ 0xB
  3343  002B                     	ds	1
  3344  002C                     ??_setDelayOff_GO:	
  3345  002C                     setBuz@count:	
  3346                           ; 0 bytes @ 0xC
  3347                           
  3348                           
  3349                           ; 1 bytes @ 0xC
  3350  002C                     	ds	1
  3351  002D                     ??_setLog_Code:	
  3352  002D                     ??_my_MainTimer:	
  3353                           ; 0 bytes @ 0xD
  3354                           
  3355  002D                     ??_setDimmerLights_SwOn:	
  3356                           ; 0 bytes @ 0xD
  3357                           
  3358  002D                     ___awtoft@sign:	
  3359                           ; 0 bytes @ 0xD
  3360                           
  3361                           
  3362                           ; 1 bytes @ 0xD
  3363  002D                     	ds	1
  3364  002E                     ?___ftdiv:	
  3365  002E                     ?___ftmul:	
  3366                           ; 3 bytes @ 0xE
  3367                           
  3368  002E                     setDelayOff_GO@sw:	
  3369                           ; 3 bytes @ 0xE
  3370                           
  3371  002E                     setDimmerLights_SwOn@idle:	
  3372                           ; 1 bytes @ 0xE
  3373                           
  3374  002E                     ___ftdiv@f2:	
  3375                           ; 1 bytes @ 0xE
  3376                           
  3377  002E                     ___ftmul@f1:	
  3378                           ; 3 bytes @ 0xE
  3379                           
  3380                           
  3381                           ; 3 bytes @ 0xE
  3382  002E                     	ds	1
  3383  002F                     ??_setDimmerLights_SwOff:	
  3384  002F                     setDimmerLights_SwOn@sw:	
  3385                           ; 0 bytes @ 0xF
  3386                           
  3387  002F                     setDimmerLights_SwOff@command:	
  3388                           ; 1 bytes @ 0xF
  3389                           
  3390                           
  3391                           ; 1 bytes @ 0xF
  3392  002F                     	ds	1
  3393  0030                     setDimmerLights_SwOff@sw:	
  3394                           
  3395                           ; 1 bytes @ 0x10
  3396  0030                     	ds	1
  3397  0031                     ??_setDimmerLights_ErrorClose:	
  3398  0031                     ??_setRFSW_Control:	
  3399                           ; 0 bytes @ 0x11
  3400                           
  3401  0031                     ??_setSw_Main:	
  3402                           ; 0 bytes @ 0x11
  3403                           
  3404  0031                     ___ftdiv@f1:	
  3405                           ; 0 bytes @ 0x11
  3406                           
  3407  0031                     ___ftmul@f2:	
  3408                           ; 3 bytes @ 0x11
  3409                           
  3410                           
  3411                           ; 3 bytes @ 0x11
  3412  0031                     	ds	1
  3413  0032                     setDimmerLights_ErrorClose@count:	
  3414  0032                     setRFSW_Control@status:	
  3415                           ; 1 bytes @ 0x12
  3416                           
  3417                           
  3418                           ; 1 bytes @ 0x12
  3419  0032                     	ds	1
  3420  0033                     setDimmerLights_ErrorClose@lights:	
  3421  0033                     setRFSW_Control@sw:	
  3422                           ; 1 bytes @ 0x13
  3423                           
  3424  0033                     setSw_Main@sw:	
  3425                           ; 1 bytes @ 0x13
  3426                           
  3427                           
  3428                           ; 1 bytes @ 0x13
  3429  0033                     	ds	1
  3430  0034                     ??___ftdiv:	
  3431  0034                     ??___ftmul:	
  3432                           ; 0 bytes @ 0x14
  3433                           
  3434  0034                     setDimmerLights_ErrorClose@i:	
  3435                           ; 0 bytes @ 0x14
  3436                           
  3437                           
  3438                           ; 2 bytes @ 0x14
  3439  0034                     	ds	2
  3440  0036                     ??_DlyOff_Main:	
  3441  0036                     ??_setMain_Exception:	
  3442                           ; 0 bytes @ 0x16
  3443                           
  3444                           
  3445                           ; 0 bytes @ 0x16
  3446  0036                     	ds	2
  3447  0038                     DlyOff_Main@sw:	
  3448  0038                     setMain_Exception@buz:	
  3449                           ; 1 bytes @ 0x18
  3450                           
  3451  0038                     ___ftdiv@cntr:	
  3452                           ; 1 bytes @ 0x18
  3453                           
  3454  0038                     ___ftmul@exp:	
  3455                           ; 1 bytes @ 0x18
  3456                           
  3457                           
  3458                           ; 1 bytes @ 0x18
  3459  0038                     	ds	1
  3460  0039                     ??_DelayOff_Main:	
  3461  0039                     _setMain_Exception$6055:	
  3462                           ; 0 bytes @ 0x19
  3463                           
  3464  0039                     ___ftdiv@f3:	
  3465                           ; 2 bytes @ 0x19
  3466                           
  3467  0039                     ___ftmul@f3_as_product:	
  3468                           ; 3 bytes @ 0x19
  3469                           
  3470                           
  3471                           ; 3 bytes @ 0x19
  3472  0039                     	ds	2
  3473  003B                     setMain_Exception@status:	
  3474                           
  3475                           ; 1 bytes @ 0x1B
  3476  003B                     	ds	1
  3477  003C                     setMain_Exception@command:	
  3478  003C                     ___ftdiv@exp:	
  3479                           ; 1 bytes @ 0x1C
  3480                           
  3481  003C                     ___ftmul@cntr:	
  3482                           ; 1 bytes @ 0x1C
  3483                           
  3484                           
  3485                           ; 1 bytes @ 0x1C
  3486  003C                     	ds	1
  3487  003D                     ??_Switch_Main:	
  3488  003D                     ___ftdiv@sign:	
  3489                           ; 0 bytes @ 0x1D
  3490                           
  3491  003D                     ___ftmul@sign:	
  3492                           ; 1 bytes @ 0x1D
  3493                           
  3494                           
  3495                           ; 1 bytes @ 0x1D
  3496  003D                     	ds	1
  3497  003E                     ?___ftneg:	
  3498  003E                     Switch_Main@error:	
  3499                           ; 3 bytes @ 0x1E
  3500                           
  3501  003E                     ___ftneg@f1:	
  3502                           ; 1 bytes @ 0x1E
  3503                           
  3504                           
  3505                           ; 3 bytes @ 0x1E
  3506  003E                     	ds	3
  3507  0041                     ??___ftneg:	
  3508  0041                     ?___ftadd:	
  3509                           ; 0 bytes @ 0x21
  3510                           
  3511  0041                     ___ftadd@f1:	
  3512                           ; 3 bytes @ 0x21
  3513                           
  3514                           
  3515                           ; 3 bytes @ 0x21
  3516  0041                     	ds	3
  3517  0044                     ___ftadd@f2:	
  3518                           
  3519                           ; 3 bytes @ 0x24
  3520  0044                     	ds	3
  3521  0047                     ??___ftadd:	
  3522                           
  3523                           ; 0 bytes @ 0x27
  3524  0047                     	ds	4
  3525  004B                     ___ftadd@sign:	
  3526                           
  3527                           ; 1 bytes @ 0x2B
  3528  004B                     	ds	1
  3529  004C                     ___ftadd@exp2:	
  3530                           
  3531                           ; 1 bytes @ 0x2C
  3532  004C                     	ds	1
  3533  004D                     ___ftadd@exp1:	
  3534                           
  3535                           ; 1 bytes @ 0x2D
  3536  004D                     	ds	1
  3537  004E                     ?___fttol:	
  3538  004E                     ___fttol@f1:	
  3539                           ; 4 bytes @ 0x2E
  3540                           
  3541                           
  3542                           ; 3 bytes @ 0x2E
  3543  004E                     	ds	4
  3544  0052                     ??___fttol:	
  3545                           
  3546                           ; 0 bytes @ 0x32
  3547  0052                     	ds	4
  3548  0056                     ___fttol@sign1:	
  3549                           
  3550                           ; 1 bytes @ 0x36
  3551  0056                     	ds	1
  3552  0057                     ___fttol@lval:	
  3553                           
  3554                           ; 4 bytes @ 0x37
  3555  0057                     	ds	4
  3556  005B                     ___fttol@exp1:	
  3557                           
  3558                           ; 1 bytes @ 0x3B
  3559  005B                     	ds	1
  3560  005C                     ??_setPercentValue:	
  3561  005C                     ??_getPercentValue:	
  3562                           ; 0 bytes @ 0x3C
  3563                           
  3564                           
  3565                           ; 0 bytes @ 0x3C
  3566  005C                     	ds	2
  3567  005E                     getPercentValue@value:	
  3568  005E                     setPercentValue@value:	
  3569                           ; 1 bytes @ 0x3E
  3570                           
  3571                           
  3572                           ; 1 bytes @ 0x3E
  3573  005E                     	ds	1
  3574  005F                     getPercentValue@i:	
  3575  005F                     setPercentValue@i:	
  3576                           ; 3 bytes @ 0x3F
  3577                           
  3578                           
  3579                           ; 3 bytes @ 0x3F
  3580  005F                     	ds	3
  3581  0062                     ?_setDimmerLights:	
  3582  0062                     ?_setDimmerLights_Adj:	
  3583                           ; 0 bytes @ 0x42
  3584                           
  3585  0062                     ??_setDimmerLights_AdjRF:	
  3586                           ; 0 bytes @ 0x42
  3587                           
  3588  0062                     ??_Flash_Memory_Initialization:	
  3589                           ; 0 bytes @ 0x42
  3590                           
  3591  0062                     setDimmerLights@status:	
  3592                           ; 0 bytes @ 0x42
  3593                           
  3594  0062                     setDimmerLights_Adj@status:	
  3595                           ; 1 bytes @ 0x42
  3596                           
  3597                           
  3598                           ; 1 bytes @ 0x42
  3599  0062                     	ds	1
  3600  0063                     ??_setDimmerLights:	
  3601  0063                     ??_setDimmerLights_Adj:	
  3602                           ; 0 bytes @ 0x43
  3603                           
  3604  0063                     setDimmerLights_AdjRF@lights:	
  3605                           ; 0 bytes @ 0x43
  3606                           
  3607  0063                     Flash_Memory_Initialization@i:	
  3608                           ; 1 bytes @ 0x43
  3609                           
  3610                           
  3611                           ; 1 bytes @ 0x43
  3612  0063                     	ds	1
  3613  0064                     ??_setRF_DimmerValue:	
  3614                           
  3615                           ; 0 bytes @ 0x44
  3616  0064                     	ds	1
  3617  0065                     setDimmerLights@lights:	
  3618  0065                     setDimmerLights_Adj@lights:	
  3619                           ; 1 bytes @ 0x45
  3620                           
  3621                           
  3622                           ; 1 bytes @ 0x45
  3623  0065                     	ds	1
  3624  0066                     ??_setDimmerLights_Main:	
  3625  0066                     setDimmerLights_Main@lights:	
  3626                           ; 0 bytes @ 0x46
  3627                           
  3628  0066                     setRF_DimmerValue@lights:	
  3629                           ; 1 bytes @ 0x46
  3630                           
  3631                           
  3632                           ; 1 bytes @ 0x46
  3633  0066                     	ds	1
  3634  0067                     ??_setRFSW_AdjControl:	
  3635  0067                     ??_DimmerLights_Main:	
  3636                           ; 0 bytes @ 0x47
  3637                           
  3638                           
  3639                           ; 0 bytes @ 0x47
  3640  0067                     	ds	2
  3641  0069                     setRFSW_AdjControl@status:	
  3642                           
  3643                           ; 1 bytes @ 0x49
  3644  0069                     	ds	1
  3645  006A                     setRFSW_AdjControl@sw:	
  3646                           
  3647                           ; 1 bytes @ 0x4A
  3648  006A                     	ds	1
  3649  006B                     ??_getRxData:	
  3650  006B                     ??_setControl_Lights_Table:	
  3651                           ; 0 bytes @ 0x4B
  3652                           
  3653                           
  3654                           ; 0 bytes @ 0x4B
  3655  006B                     	ds	1
  3656  006C                     getRxData@error:	
  3657                           
  3658                           ; 1 bytes @ 0x4C
  3659  006C                     	ds	1
  3660  006D                     ??_setRF_Main:	
  3661                           
  3662                           ; 0 bytes @ 0x4D
  3663  006D                     	ds	1
  3664  006E                     ??_RF_Main:	
  3665  006E                     ??_main:	
  3666                           ; 0 bytes @ 0x4E
  3667                           
  3668                           
  3669                           	psect	maintext
  3670  165E                     __pmaintext:	
  3671                           ; 0 bytes @ 0x4E
  3672 ;;
  3673 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3674 ;;
  3675 ;; *************** function _main *****************
  3676 ;; Defined at:
  3677 ;;		line 7 in file "../src/main_B1.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;  argc            2    3[BANK1 ] int 
  3680 ;;  argv            2    5[BANK1 ] PTR PTR unsigned char 
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;		None
  3683 ;; Return value:  Size  Location     Type
  3684 ;;                  2    3[BANK1 ] int 
  3685 ;; Registers used:
  3686 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3687 ;; Tracked objects:
  3688 ;;		On entry : 17F/0
  3689 ;;		On exit  : 0/0
  3690 ;;		Unchanged: 0/0
  3691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3692 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3695 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3696 ;;Total ram usage:        4 bytes
  3697 ;; Hardware stack levels required when called:   15
  3698 ;; This function calls:
  3699 ;;		_Buzzer_Initialization
  3700 ;;		_Buzzer_Main
  3701 ;;		_CC2500_PowerOnInitial
  3702 ;;		_DelayOff_Initialization
  3703 ;;		_DelayOff_Main
  3704 ;;		_DimmerLights_Initialization
  3705 ;;		_DimmerLights_Main
  3706 ;;		_Flash_Memory_Initialization
  3707 ;;		_Flash_Memory_Main
  3708 ;;		_LED_Initialization
  3709 ;;		_LED_Main
  3710 ;;		_Mcu_Initialization
  3711 ;;		_RF_Initialization
  3712 ;;		_RF_Main
  3713 ;;		_Switch_Initialization
  3714 ;;		_Switch_Main
  3715 ;;		_WDT_Main
  3716 ;;		_myMain_Initialization
  3717 ;;		_my_MainTimer
  3718 ;; This function is called by:
  3719 ;;		Startup code after reset
  3720 ;; This function uses a non-reentrant model
  3721 ;;
  3722                           
  3723                           
  3724                           ;psect for function _main
  3725  165E                     _main:	
  3726                           
  3727                           ;main_B1.c: 8: myMain_Initialization();
  3728                           
  3729                           ;incstack = 0
  3730                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3731  165E  3190  2084  3196   	fcall	_myMain_Initialization
  3732                           
  3733                           ;main_B1.c: 9: Mcu_Initialization();
  3734  1661  3191  210C  3196   	fcall	_Mcu_Initialization
  3735                           
  3736                           ;main_B1.c: 10: Flash_Memory_Initialization();
  3737  1664  3184  24D3  3196   	fcall	_Flash_Memory_Initialization
  3738                           
  3739                           ;main_B1.c: 11: LED_Initialization();
  3740  1667  319F  27C3  3196   	fcall	_LED_Initialization
  3741                           
  3742                           ;main_B1.c: 12: Buzzer_Initialization();
  3743  166A  319F  2717  3196   	fcall	_Buzzer_Initialization
  3744                           
  3745                           ;main_B1.c: 14: ;;
  3746                           ;main_B1.c: 15: ;;
  3747                           ;main_B1.c: 16: ;;
  3748                           ;main_B1.c: 17: ;;
  3749                           ;main_B1.c: 18: DelayOff_Initialization();
  3750  166D  319F  2757  3196   	fcall	_DelayOff_Initialization
  3751                           
  3752                           ;main_B1.c: 20: DimmerLights_Initialization();
  3753  1670  3192  2234  3196   	fcall	_DimmerLights_Initialization
  3754                           
  3755                           ;main_B1.c: 21: ;;
  3756                           ;main_B1.c: 22: ;;
  3757                           ;main_B1.c: 23: ;;
  3758                           ;main_B1.c: 24: Switch_Initialization();
  3759  1673  319F  27F3  3196   	fcall	_Switch_Initialization
  3760                           
  3761                           ;main_B1.c: 25: RF_Initialization();
  3762  1676  319F  271A  3196   	fcall	_RF_Initialization
  3763                           
  3764                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  3765  1679  3191  21F5  3196   	fcall	_CC2500_PowerOnInitial
  3766  167C                     l2450:	
  3767                           ;main_B1.c: 27: ;;
  3768                           ;main_B1.c: 29: while (1) {
  3769                           
  3770                           
  3771                           ;main_B1.c: 56: }
  3772                           ;main_B1.c: 92: if (Timer1.Timeout == 1) {
  3773  167C  0021               	movlb	1	; select bank1
  3774  167D  1C4B               	btfss	_Timer1^(0+128),0
  3775  167E  2E7C               	goto	l2450
  3776                           
  3777                           ;main_B1.c: 93: Timer1.Timeout = 0;
  3778  167F  104B               	bcf	_Timer1^(0+128),0
  3779                           
  3780                           ;main_B1.c: 94: my_MainTimer();
  3781  1680  3188  2032  3196   	fcall	_my_MainTimer
  3782                           
  3783                           ;main_B1.c: 95: WDT_Main();
  3784  1683  3191  211E  3196   	fcall	_WDT_Main
  3785                           
  3786                           ;main_B1.c: 96: ;;
  3787                           ;main_B1.c: 97: ;;
  3788                           ;main_B1.c: 98: if (myMain.PowerON == 1) {
  3789  1686  0021               	movlb	1	; select bank1
  3790  1687  1C20               	btfss	_myMain^(0+128),0
  3791  1688  2E7C               	goto	l2450
  3792                           
  3793                           ;main_B1.c: 99: Flash_Memory_Main();
  3794  1689  3195  2575  3196   	fcall	_Flash_Memory_Main
  3795                           
  3796                           ;main_B1.c: 101: LED_Main();
  3797  168C  319F  27CF  3196   	fcall	_LED_Main
  3798                           
  3799                           ;main_B1.c: 102: Buzzer_Main();
  3800  168F  3197  27B6  3196   	fcall	_Buzzer_Main
  3801                           
  3802                           ;main_B1.c: 104: ;;
  3803                           ;main_B1.c: 105: ;;
  3804                           ;main_B1.c: 106: ;;
  3805                           ;main_B1.c: 107: ;;
  3806                           ;main_B1.c: 109: ;;
  3807                           ;main_B1.c: 110: DimmerLights_Main();
  3808  1692  319F  2767  3196   	fcall	_DimmerLights_Main
  3809                           
  3810                           ;main_B1.c: 111: Switch_Main();
  3811  1695  3193  23F2  3196   	fcall	_Switch_Main
  3812                           
  3813                           ;main_B1.c: 112: ;;
  3814                           ;main_B1.c: 113: ;;
  3815                           ;main_B1.c: 115: RF_Main();
  3816  1698  3188  2000  3196   	fcall	_RF_Main
  3817                           
  3818                           ;main_B1.c: 116: DelayOff_Main();
  3819  169B  319F  275F  3196   	fcall	_DelayOff_Main
  3820                           
  3821                           ;main_B1.c: 117: ;;
  3822  169E  2E7C               	goto	l2450
  3823  169F                     __end_of_main:	
  3824                           ;main_B1.c: 125: }
  3825                           ;main_B1.c: 126: }
  3826                           ;main_B1.c: 160: }
  3827                           ;main_B1.c: 161: return (0);
  3828                           ;	Return value of _main is never used
  3829                           
  3830                           
  3831                           	psect	text1
  3832  0832                     __ptext1:	
  3833 ;; *************** function _my_MainTimer *****************
  3834 ;; Defined at:
  3835 ;;		line 180 in file "../src/main_B1.c"
  3836 ;; Parameters:    Size  Location     Type
  3837 ;;		None
  3838 ;; Auto vars:     Size  Location     Type
  3839 ;;		None
  3840 ;; Return value:  Size  Location     Type
  3841 ;;		None               void
  3842 ;; Registers used:
  3843 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3844 ;; Tracked objects:
  3845 ;;		On entry : 0/0
  3846 ;;		On exit  : 0/0
  3847 ;;		Unchanged: 0/0
  3848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3853 ;;Total ram usage:        0 bytes
  3854 ;; Hardware stack levels used:    1
  3855 ;; Hardware stack levels required when called:    7
  3856 ;; This function calls:
  3857 ;;		_setBuz
  3858 ;; This function is called by:
  3859 ;;		_main
  3860 ;; This function uses a non-reentrant model
  3861 ;;
  3862                           
  3863                           
  3864                           ;psect for function _my_MainTimer
  3865  0832                     _my_MainTimer:	
  3866                           
  3867                           ;main_B1.c: 182: if (myMain.PowerON == 0) {
  3868                           
  3869                           ;incstack = 0
  3870                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3871  0832  0021               	movlb	1	; select bank1
  3872  0833  1820               	btfsc	_myMain^(0+128),0
  3873  0834  2854               	goto	l7205
  3874                           
  3875                           ;main_B1.c: 183: myMain.PowerCount++;
  3876  0835  3001               	movlw	1
  3877  0836  07A2               	addwf	(_myMain^(0+128)+2),f
  3878  0837  3000               	movlw	0
  3879  0838  3DA3               	addwfc	((_myMain+1)^(0+128)+2),f
  3880                           
  3881                           ;main_B1.c: 184: if (myMain.PowerCount == 150)
  3882  0839  3002               	movlw	2
  3883  083A  3EA0               	addlw	_myMain& (0+255)
  3884  083B  0086               	movwf	6
  3885  083C  0187               	clrf	7
  3886  083D  3F40               	moviw [0]fsr1
  3887  083E  3A96               	xorlw	150
  3888  083F  1D03               	skipz
  3889  0840  2843               	goto	u6905
  3890  0841  3F41               	moviw [1]fsr1
  3891  0842  3A00               	xorlw	0
  3892  0843                     u6905:	
  3893  0843  1D03               	skipz
  3894  0844  286B               	goto	l7215
  3895                           
  3896                           ;main_B1.c: 185: {
  3897                           ;main_B1.c: 186: myMain.PowerCount = 0;
  3898  0845  01A2               	clrf	(_myMain^(0+128)+2)
  3899  0846  01A3               	clrf	((_myMain+1)^(0+128)+2)
  3900                           
  3901                           ;main_B1.c: 187: myMain.PowerON = 1;
  3902  0847  1420               	bsf	_myMain^(0+128),0
  3903                           
  3904                           ;main_B1.c: 193: setBuz(3, 50);
  3905  0848  3032               	movlw	50
  3906  0849  0020               	movlb	0	; select bank0
  3907  084A  00A9               	movwf	setBuz@time
  3908  084B  3000               	movlw	0
  3909  084C  00AA               	movwf	setBuz@time+1
  3910  084D  3003               	movlw	3
  3911  084E  318A  226C  3188   	fcall	_setBuz
  3912                           
  3913                           ;main_B1.c: 194: myMain.SelfTest = 1;
  3914  0851  0021               	movlb	1	; select bank1
  3915  0852  1620               	bsf	_myMain^(0+128),4
  3916                           
  3917                           ;main_B1.c: 203: }
  3918                           ;main_B1.c: 204: } else {
  3919  0853  286B               	goto	l7215
  3920  0854                     l7205:	
  3921                           
  3922                           ;main_B1.c: 212: myMain.Count1++;
  3923  0854  3001               	movlw	1
  3924  0855  07A6               	addwf	(_myMain^(0+128)+6),f
  3925  0856  3000               	movlw	0
  3926  0857  3DA7               	addwfc	((_myMain+1)^(0+128)+6),f
  3927                           
  3928                           ;main_B1.c: 213: if (myMain.Count1 == 100)
  3929  0858  3006               	movlw	6
  3930  0859  3EA0               	addlw	_myMain& (0+255)
  3931  085A  0086               	movwf	6
  3932  085B  0187               	clrf	7
  3933  085C  3F40               	moviw [0]fsr1
  3934  085D  3A64               	xorlw	100
  3935  085E  1D03               	skipz
  3936  085F  2862               	goto	u6915
  3937  0860  3F41               	moviw [1]fsr1
  3938  0861  3A00               	xorlw	0
  3939  0862                     u6915:	
  3940  0862  1D03               	skipz
  3941  0863  286B               	goto	l7215
  3942                           
  3943                           ;main_B1.c: 214: {
  3944                           ;main_B1.c: 215: myMain.Count1 = 0;
  3945  0864  01A6               	clrf	(_myMain^(0+128)+6)
  3946  0865  01A7               	clrf	((_myMain+1)^(0+128)+6)
  3947                           
  3948                           ;main_B1.c: 227: if (myMain.Flag) {
  3949  0866  1CA0               	btfss	_myMain^(0+128),1
  3950  0867  286A               	goto	l2465
  3951                           
  3952                           ;main_B1.c: 228: myMain.Flag = 0;
  3953  0868  10A0               	bcf	_myMain^(0+128),1
  3954                           
  3955                           ;main_B1.c: 237: } else {
  3956  0869  286B               	goto	l7215
  3957  086A                     l2465:	
  3958                           
  3959                           ;main_B1.c: 238: myMain.Flag = 1;
  3960  086A  14A0               	bsf	_myMain^(0+128),1
  3961  086B                     l7215:	
  3962                           
  3963                           ;main_B1.c: 247: }
  3964                           ;main_B1.c: 248: }
  3965                           ;main_B1.c: 250: }
  3966                           ;main_B1.c: 252: myMain.Count2++;
  3967  086B  3001               	movlw	1
  3968  086C  07A8               	addwf	(_myMain^(0+128)+8),f
  3969  086D  3000               	movlw	0
  3970  086E  3DA9               	addwfc	((_myMain+1)^(0+128)+8),f
  3971                           
  3972                           ;main_B1.c: 253: if (myMain.Count2 == 100) {
  3973  086F  3008               	movlw	8
  3974  0870  3EA0               	addlw	_myMain& (0+255)
  3975  0871  0086               	movwf	6
  3976  0872  0187               	clrf	7
  3977  0873  3F40               	moviw [0]fsr1
  3978  0874  3A64               	xorlw	100
  3979  0875  1D03               	skipz
  3980  0876  2879               	goto	u6935
  3981  0877  3F41               	moviw [1]fsr1
  3982  0878  3A00               	xorlw	0
  3983  0879                     u6935:	
  3984  0879  1D03               	skipz
  3985  087A  0008               	return
  3986                           
  3987                           ;main_B1.c: 254: myMain.Count2 = 0;
  3988  087B  01A8               	clrf	(_myMain^(0+128)+8)
  3989  087C  01A9               	clrf	((_myMain+1)^(0+128)+8)
  3990  087D  0008               	return
  3991  087E                     __end_of_my_MainTimer:	
  3992                           
  3993                           	psect	text2
  3994  1084                     __ptext2:	
  3995 ;; *************** function _myMain_Initialization *****************
  3996 ;; Defined at:
  3997 ;;		line 167 in file "../src/main_B1.c"
  3998 ;; Parameters:    Size  Location     Type
  3999 ;;		None
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;		None
  4002 ;; Return value:  Size  Location     Type
  4003 ;;		None               void
  4004 ;; Registers used:
  4005 ;;		wreg, fsr1l, fsr1h
  4006 ;; Tracked objects:
  4007 ;;		On entry : 0/0
  4008 ;;		On exit  : 0/0
  4009 ;;		Unchanged: 0/0
  4010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4013 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4014 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4015 ;;Total ram usage:        1 bytes
  4016 ;; Hardware stack levels used:    1
  4017 ;; Hardware stack levels required when called:    5
  4018 ;; This function calls:
  4019 ;;		Nothing
  4020 ;; This function is called by:
  4021 ;;		_main
  4022 ;; This function uses a non-reentrant model
  4023 ;;
  4024                           
  4025                           
  4026                           ;psect for function _myMain_Initialization
  4027  1084                     _myMain_Initialization:	
  4028                           
  4029                           ;main_B1.c: 169: product = &_product;
  4030                           
  4031                           ;incstack = 0
  4032                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4033  1084  30CE               	movlw	__product& (0+255)
  4034  1085  0020               	movlb	0	; select bank0
  4035  1086  00A0               	movwf	??_myMain_Initialization
  4036  1087  0820               	movf	??_myMain_Initialization,w
  4037  1088  00EE               	movwf	_product
  4038                           
  4039                           ;main_B1.c: 170: product->Data[20] = 210;
  4040  1089  30D2               	movlw	210
  4041  108A  00A0               	movwf	??_myMain_Initialization
  4042  108B  086E               	movf	_product,w
  4043  108C  3E14               	addlw	20
  4044  108D  0086               	movwf	6
  4045  108E  3001               	movlw	1	; select bank2/3
  4046  108F  0087               	movwf	7
  4047  1090  0820               	movf	??_myMain_Initialization,w
  4048  1091  0081               	movwf	1
  4049  1092  0008               	return
  4050  1093                     __end_of_myMain_Initialization:	
  4051                           
  4052                           	psect	text3
  4053  111E                     __ptext3:	
  4054 ;; *************** function _WDT_Main *****************
  4055 ;; Defined at:
  4056 ;;		line 1033 in file "../src/MCU_B1.c"
  4057 ;; Parameters:    Size  Location     Type
  4058 ;;		None
  4059 ;; Auto vars:     Size  Location     Type
  4060 ;;		None
  4061 ;; Return value:  Size  Location     Type
  4062 ;;		None               void
  4063 ;; Registers used:
  4064 ;;		wreg, status,2, status,0, pclath, cstack
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4072 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4073 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4074 ;;Total ram usage:        1 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; Hardware stack levels required when called:    6
  4077 ;; This function calls:
  4078 ;;		_WDT_Clearing
  4079 ;; This function is called by:
  4080 ;;		_main
  4081 ;; This function uses a non-reentrant model
  4082 ;;
  4083                           
  4084                           
  4085                           ;psect for function _WDT_Main
  4086  111E                     _WDT_Main:	
  4087                           
  4088                           ;MCU_B1.c: 1034: if (WDT.Enable == 1) {
  4089                           
  4090                           ;incstack = 0
  4091                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4092  111E  0021               	movlb	1	; select bank1
  4093  111F  1C52               	btfss	_WDT^(0+128),0
  4094  1120  0008               	return
  4095                           
  4096                           ;MCU_B1.c: 1035: if (WDT.Timer-- > 0) {
  4097  1121  3001               	movlw	1
  4098  1122  02D3               	subwf	(_WDT^(0+128)+1),f
  4099  1123  0853               	movf	(_WDT^(0+128)+1),w
  4100  1124  3AFF               	xorlw	255
  4101  1125  1903               	skipnz
  4102  1126  0008               	return
  4103                           
  4104                           ;MCU_B1.c: 1036: WDT.Timer = 100;
  4105  1127  3064               	movlw	100
  4106  1128  0020               	movlb	0	; select bank0
  4107  1129  00A0               	movwf	??_WDT_Main
  4108  112A  0820               	movf	??_WDT_Main,w
  4109  112B  0021               	movlb	1	; select bank1
  4110  112C  00D3               	movwf	(_WDT^(0+128)+1)
  4111                           
  4112                           ;MCU_B1.c: 1037: WDT_Clearing();
  4113  112D  3180  2002         	fcall	_WDT_Clearing
  4114  112F  0008               	return
  4115  1130                     __end_of_WDT_Main:	
  4116                           
  4117                           	psect	text4
  4118  0002                     __ptext4:	
  4119 ;; *************** function _WDT_Clearing *****************
  4120 ;; Defined at:
  4121 ;;		line 1043 in file "../src/MCU_B1.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;		None
  4124 ;; Auto vars:     Size  Location     Type
  4125 ;;		None
  4126 ;; Return value:  Size  Location     Type
  4127 ;;		None               void
  4128 ;; Registers used:
  4129 ;;		None
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4139 ;;Total ram usage:        0 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; Hardware stack levels required when called:    5
  4142 ;; This function calls:
  4143 ;;		Nothing
  4144 ;; This function is called by:
  4145 ;;		_WDT_Main
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           
  4150                           ;psect for function _WDT_Clearing
  4151  0002                     _WDT_Clearing:	
  4152                           
  4153                           ;incstack = 0
  4154                           ; Regs used in _WDT_Clearing: []
  4155  0002  0064               	clrwdt	;# 
  4156  0003  0008               	return
  4157  0004                     __end_of_WDT_Clearing:	
  4158                           
  4159                           	psect	text5
  4160  13F2                     __ptext5:	
  4161 ;; *************** function _Switch_Main *****************
  4162 ;; Defined at:
  4163 ;;		line 72 in file "../src/Switch_B1.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;		None
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;  error           1   30[BANK0 ] unsigned char 
  4168 ;; Return value:  Size  Location     Type
  4169 ;;		None               void
  4170 ;; Registers used:
  4171 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4172 ;; Tracked objects:
  4173 ;;		On entry : 0/0
  4174 ;;		On exit  : 0/0
  4175 ;;		Unchanged: 0/0
  4176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4178 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4179 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4180 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4181 ;;Total ram usage:        2 bytes
  4182 ;; Hardware stack levels used:    1
  4183 ;; Hardware stack levels required when called:   11
  4184 ;; This function calls:
  4185 ;;		_TouchPower
  4186 ;;		_getMain_All_Error_Status
  4187 ;;		_setMain_Exception
  4188 ;;		_setSw_Main
  4189 ;; This function is called by:
  4190 ;;		_main
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           
  4195                           ;psect for function _Switch_Main
  4196  13F2                     _Switch_Main:	
  4197                           
  4198                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  4199                           
  4200                           ;incstack = 0
  4201                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4202  13F2  3000               	movlw	0
  4203  13F3  319F  272D  3193   	fcall	_getMain_All_Error_Status
  4204  13F6  0020               	movlb	0	; select bank0
  4205  13F7  00BD               	movwf	??_Switch_Main
  4206  13F8  083D               	movf	??_Switch_Main,w
  4207  13F9  00BE               	movwf	Switch_Main@error
  4208                           
  4209                           ;Switch_B1.c: 74: if (error != 0) {
  4210  13FA  083E               	movf	Switch_Main@error,w
  4211  13FB  1903               	btfsc	3,2
  4212  13FC  2C02               	goto	l2191
  4213                           
  4214                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  4215  13FD  0021               	movlb	1	; select bank1
  4216  13FE  185A               	btfsc	_SwDetect^(0+128),0
  4217  13FF  2C0B               	goto	l7593
  4218                           
  4219                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  4220  1400  145A               	bsf	_SwDetect^(0+128),0
  4221  1401  2C06               	goto	L1
  4222  1402                     l2191:	
  4223                           ;Switch_B1.c: 80: }
  4224                           ;Switch_B1.c: 81: } else {
  4225                           
  4226                           ;Switch_B1.c: 78: setMain_Exception(error);
  4227                           
  4228                           
  4229                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  4230  1402  0021               	movlb	1	; select bank1
  4231  1403  1C5A               	btfss	_SwDetect^(0+128),0
  4232  1404  2C0B               	goto	l7593
  4233                           
  4234                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  4235  1405  105A               	bcf	_SwDetect^(0+128),0
  4236  1406                     L1:	
  4237                           
  4238                           ;Switch_B1.c: 85: setMain_Exception(error);
  4239  1406  0020               	movlb	0	; select bank0
  4240  1407  083E               	movf	Switch_Main@error,w
  4241  1408  318C  242F  3193   	fcall	_setMain_Exception
  4242  140B                     l7593:	
  4243                           
  4244                           ;Switch_B1.c: 87: }
  4245                           ;Switch_B1.c: 88: }
  4246                           ;Switch_B1.c: 91: setSw_Main(1);
  4247  140B  3001               	movlw	1
  4248  140C  3180  2042  3193   	fcall	_setSw_Main
  4249                           
  4250                           ;Switch_B1.c: 95: setSw_Main(2);
  4251  140F  3002               	movlw	2
  4252  1410  3180  2042  3193   	fcall	_setSw_Main
  4253                           
  4254                           ;Switch_B1.c: 103: TouchPower();
  4255  1413  3192  221F         	fcall	_TouchPower
  4256  1415  0008               	return
  4257  1416                     __end_of_Switch_Main:	
  4258                           
  4259                           	psect	text6
  4260  0042                     __ptext6:	
  4261 ;; *************** function _setSw_Main *****************
  4262 ;; Defined at:
  4263 ;;		line 137 in file "../src/Switch_B1.c"
  4264 ;; Parameters:    Size  Location     Type
  4265 ;;  sw              1    wreg     unsigned char 
  4266 ;; Auto vars:     Size  Location     Type
  4267 ;;  sw              1   19[BANK0 ] unsigned char 
  4268 ;; Return value:  Size  Location     Type
  4269 ;;		None               void
  4270 ;; Registers used:
  4271 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4272 ;; Tracked objects:
  4273 ;;		On entry : 0/0
  4274 ;;		On exit  : 0/0
  4275 ;;		Unchanged: 0/0
  4276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4278 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4279 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4280 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4281 ;;Total ram usage:        3 bytes
  4282 ;; Hardware stack levels used:    1
  4283 ;; Hardware stack levels required when called:    9
  4284 ;; This function calls:
  4285 ;;		_SwPointSelect
  4286 ;;		_getSw_KeyStatus
  4287 ;;		_setBuz
  4288 ;;		_setDimmerLights_AdjControl
  4289 ;;		_setDimmerLights_SwOff
  4290 ;;		_setDimmerLights_SwOn
  4291 ;;		_setRF_Learn
  4292 ;; This function is called by:
  4293 ;;		_Switch_Main
  4294 ;; This function uses a non-reentrant model
  4295 ;;
  4296                           
  4297                           
  4298                           ;psect for function _setSw_Main
  4299  0042                     _setSw_Main:	
  4300                           
  4301                           ;incstack = 0
  4302                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4303                           ;setSw_Main@sw stored from wreg
  4304  0042  0020               	movlb	0	; select bank0
  4305  0043  00B3               	movwf	setSw_Main@sw
  4306                           
  4307                           ;Switch_B1.c: 138: SwPointSelect(sw);
  4308  0044  0833               	movf	setSw_Main@sw,w
  4309  0045  3191  21B8  3180   	fcall	_SwPointSelect
  4310                           
  4311                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  4312  0048  087B               	movf	_Sw,w
  4313  0049  0086               	movwf	6
  4314  004A  3001               	movlw	1	; select bank2/3
  4315  004B  0087               	movwf	7
  4316  004C  1C01               	btfss	1,0
  4317  004D  29A8               	goto	l2201
  4318                           
  4319                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  4320  004E  0021               	movlb	1	; select bank1
  4321  004F  185A               	btfsc	_SwDetect^(0+128),0
  4322  0050  286C               	goto	l6903
  4323                           
  4324                           ;Switch_B1.c: 141: Sw->Detect = 0;
  4325  0051  0A7B               	incf	_Sw,w
  4326  0052  0086               	movwf	6
  4327  0053  3001               	movlw	1	; select bank2/3
  4328  0054  0087               	movwf	7
  4329  0055  1081               	bcf	1,1
  4330                           
  4331                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  4332  0056  0020               	movlb	0	; select bank0
  4333  0057  0833               	movf	setSw_Main@sw,w
  4334  0058  3192  22EB  3180   	fcall	_getSw_KeyStatus
  4335  005B  3A01               	xorlw	1
  4336  005C  3000               	movlw	0
  4337  005D  1903               	skipnz
  4338  005E  3001               	movlw	1
  4339  005F  0020               	movlb	0	; select bank0
  4340  0060  00B1               	movwf	??_setSw_Main
  4341  0061  087B               	movf	_Sw,w
  4342  0062  0086               	movwf	6
  4343  0063  3001               	movlw	1	; select bank2/3
  4344  0064  0087               	movwf	7
  4345  0065  0DB1               	rlf	??_setSw_Main,f
  4346  0066  0801               	movf	1,w
  4347  0067  0631               	xorwf	??_setSw_Main,w
  4348  0068  39FD               	andlw	-3
  4349  0069  0631               	xorwf	??_setSw_Main,w
  4350  006A  0081               	movwf	1
  4351                           
  4352                           ;Switch_B1.c: 143: } else {
  4353  006B  2881               	goto	l2203
  4354  006C                     l6903:	
  4355                           
  4356                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  4357  006C  0A7B               	incf	_Sw,w
  4358  006D  0086               	movwf	6
  4359  006E  3001               	movlw	1	; select bank2/3
  4360  006F  0087               	movwf	7
  4361  0070  1881               	btfsc	1,1
  4362  0071  2881               	goto	l2203
  4363                           
  4364                           ;Switch_B1.c: 145: Sw->Detect = 1;
  4365  0072  0A7B               	incf	_Sw,w
  4366  0073  0086               	movwf	6
  4367  0074  3001               	movlw	1	; select bank2/3
  4368  0075  0087               	movwf	7
  4369  0076  1481               	bsf	1,1
  4370                           
  4371                           ;Switch_B1.c: 146: Sw->Touch = 0;
  4372  0077  087B               	movf	_Sw,w
  4373  0078  0086               	movwf	6
  4374  0079  3001               	movlw	1	; select bank2/3
  4375  007A  0087               	movwf	7
  4376  007B  1081               	bcf	1,1
  4377                           
  4378                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  4379  007C  087B               	movf	_Sw,w
  4380  007D  0086               	movwf	6
  4381  007E  3001               	movlw	1	; select bank2/3
  4382  007F  0087               	movwf	7
  4383  0080  1501               	bsf	1,2
  4384  0081                     l2203:	
  4385                           
  4386                           ;Switch_B1.c: 148: }
  4387                           ;Switch_B1.c: 149: }
  4388                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  4389  0081  087B               	movf	_Sw,w
  4390  0082  0086               	movwf	6
  4391  0083  3001               	movlw	1	; select bank2/3
  4392  0084  0087               	movwf	7
  4393  0085  1C81               	btfss	1,1
  4394  0086  2951               	goto	l6953
  4395                           
  4396                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  4397  0087  087B               	movf	_Sw,w
  4398  0088  0086               	movwf	6
  4399  0089  3001               	movlw	1	; select bank2/3
  4400  008A  0087               	movwf	7
  4401  008B  1901               	btfsc	1,2
  4402  008C  28AF               	goto	l6919
  4403                           
  4404                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  4405  008D  3001               	movlw	1
  4406  008E  0020               	movlb	0	; select bank0
  4407  008F  00B1               	movwf	??_setSw_Main
  4408  0090  087B               	movf	_Sw,w
  4409  0091  3E02               	addlw	2
  4410  0092  0086               	movwf	6
  4411  0093  3001               	movlw	1	; select bank2/3
  4412  0094  0087               	movwf	7
  4413  0095  0831               	movf	??_setSw_Main,w
  4414  0096  0781               	addwf	1,f
  4415                           
  4416                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  4417  0097  087B               	movf	_Sw,w
  4418  0098  3E02               	addlw	2
  4419  0099  0086               	movwf	6
  4420  009A  3001               	movlw	1	; select bank2/3
  4421  009B  0087               	movwf	7
  4422  009C  3005               	movlw	5
  4423  009D  0201               	subwf	1,w
  4424  009E  1C03               	skipc
  4425  009F  0008               	return
  4426                           
  4427                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  4428  00A0  087B               	movf	_Sw,w
  4429  00A1  3E02               	addlw	2
  4430  00A2  0086               	movwf	6
  4431  00A3  3001               	movlw	1	; select bank2/3
  4432  00A4  0087               	movwf	7
  4433  00A5  0181               	clrf	1
  4434                           
  4435                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  4436  00A6  087B               	movf	_Sw,w
  4437  00A7  0086               	movwf	6
  4438  00A8  3001               	movlw	1	; select bank2/3
  4439  00A9  0087               	movwf	7
  4440  00AA  1501               	bsf	1,2
  4441                           
  4442                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  4443  00AB  0833               	movf	setSw_Main@sw,w
  4444  00AC  3195  25E1         	fcall	_setDimmerLights_SwOn
  4445                           
  4446                           ;Switch_B1.c: 162: }
  4447                           ;Switch_B1.c: 163: } else {
  4448  00AE  0008               	return
  4449  00AF                     l6919:	
  4450                           
  4451                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  4452  00AF  087B               	movf	_Sw,w
  4453  00B0  0086               	movwf	6
  4454  00B1  3001               	movlw	1	; select bank2/3
  4455  00B2  0087               	movwf	7
  4456  00B3  1981               	btfsc	1,3
  4457  00B4  28E1               	goto	l6929
  4458                           
  4459                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  4460  00B5  087B               	movf	_Sw,w
  4461  00B6  3E03               	addlw	3
  4462  00B7  0086               	movwf	6
  4463  00B8  3001               	movlw	1	; select bank2/3
  4464  00B9  0087               	movwf	7
  4465  00BA  3001               	movlw	1
  4466  00BB  0781               	addwf	1,f
  4467  00BC  3141               	addfsr 1,1
  4468  00BD  1803               	skipnc
  4469  00BE  0A81               	incf	1,f
  4470                           
  4471                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  4472  00BF  087B               	movf	_Sw,w
  4473  00C0  3E03               	addlw	3
  4474  00C1  0086               	movwf	6
  4475  00C2  3001               	movlw	1	; select bank2/3
  4476  00C3  0087               	movwf	7
  4477  00C4  3F40               	moviw [0]fsr1
  4478  00C5  0020               	movlb	0	; select bank0
  4479  00C6  00B1               	movwf	??_setSw_Main
  4480  00C7  3F41               	moviw [1]fsr1
  4481  00C8  00B2               	movwf	??_setSw_Main+1
  4482  00C9  3000               	movlw	0
  4483  00CA  0232               	subwf	??_setSw_Main+1,w
  4484  00CB  3096               	movlw	150
  4485  00CC  1903               	skipnz
  4486  00CD  0231               	subwf	??_setSw_Main,w
  4487  00CE  1C03               	skipc
  4488  00CF  0008               	return
  4489                           
  4490                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  4491  00D0  087B               	movf	_Sw,w
  4492  00D1  3E03               	addlw	3
  4493  00D2  0086               	movwf	6
  4494  00D3  3001               	movlw	1	; select bank2/3
  4495  00D4  0087               	movwf	7
  4496  00D5  3000               	movlw	0
  4497  00D6  3FC0               	movwi [0]fsr1
  4498  00D7  3FC1               	movwi [1]fsr1
  4499                           
  4500                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  4501  00D8  087B               	movf	_Sw,w
  4502  00D9  0086               	movwf	6
  4503  00DA  3001               	movlw	1	; select bank2/3
  4504  00DB  0087               	movwf	7
  4505  00DC  1581               	bsf	1,3
  4506                           
  4507                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  4508  00DD  0833               	movf	setSw_Main@sw,w
  4509  00DE  3195  2540         	fcall	_setDimmerLights_AdjControl
  4510                           
  4511                           ;Switch_B1.c: 174: }
  4512                           ;Switch_B1.c: 175: } else {
  4513  00E0  0008               	return
  4514  00E1                     l6929:	
  4515                           
  4516                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  4517  00E1  087B               	movf	_Sw,w
  4518  00E2  0086               	movwf	6
  4519  00E3  3001               	movlw	1	; select bank2/3
  4520  00E4  0087               	movwf	7
  4521  00E5  1A01               	btfsc	1,4
  4522  00E6  291F               	goto	l6943
  4523                           
  4524                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  4525  00E7  087B               	movf	_Sw,w
  4526  00E8  3E05               	addlw	5
  4527  00E9  0086               	movwf	6
  4528  00EA  3001               	movlw	1	; select bank2/3
  4529  00EB  0087               	movwf	7
  4530  00EC  3001               	movlw	1
  4531  00ED  0781               	addwf	1,f
  4532  00EE  3141               	addfsr 1,1
  4533  00EF  1803               	skipnc
  4534  00F0  0A81               	incf	1,f
  4535                           
  4536                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  4537  00F1  087B               	movf	_Sw,w
  4538  00F2  3E05               	addlw	5
  4539  00F3  0086               	movwf	6
  4540  00F4  3001               	movlw	1	; select bank2/3
  4541  00F5  0087               	movwf	7
  4542  00F6  3F40               	moviw [0]fsr1
  4543  00F7  0020               	movlb	0	; select bank0
  4544  00F8  00B1               	movwf	??_setSw_Main
  4545  00F9  3F41               	moviw [1]fsr1
  4546  00FA  00B2               	movwf	??_setSw_Main+1
  4547  00FB  3000               	movlw	0
  4548  00FC  0232               	subwf	??_setSw_Main+1,w
  4549  00FD  3096               	movlw	150
  4550  00FE  1903               	skipnz
  4551  00FF  0231               	subwf	??_setSw_Main,w
  4552  0100  1C03               	skipc
  4553  0101  0008               	return
  4554                           
  4555                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  4556  0102  087B               	movf	_Sw,w
  4557  0103  3E05               	addlw	5
  4558  0104  0086               	movwf	6
  4559  0105  3001               	movlw	1	; select bank2/3
  4560  0106  0087               	movwf	7
  4561  0107  3000               	movlw	0
  4562  0108  3FC0               	movwi [0]fsr1
  4563  0109  3FC1               	movwi [1]fsr1
  4564                           
  4565                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  4566  010A  087B               	movf	_Sw,w
  4567  010B  0086               	movwf	6
  4568  010C  3001               	movlw	1	; select bank2/3
  4569  010D  0087               	movwf	7
  4570  010E  1601               	bsf	1,4
  4571                           
  4572                           ;Switch_B1.c: 183: setRF_Learn(1);
  4573  010F  3001               	movlw	1
  4574  0110  3191  21CC  3180   	fcall	_setRF_Learn
  4575                           
  4576                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  4577  0113  0021               	movlb	1	; select bank1
  4578  0114  1EA0               	btfss	_myMain^(0+128),5
  4579  0115  0008               	return
  4580                           
  4581                           ;Switch_B1.c: 186: setBuz(2, 100);
  4582  0116  3064               	movlw	100
  4583  0117  0020               	movlb	0	; select bank0
  4584  0118  00A9               	movwf	setBuz@time
  4585  0119  3000               	movlw	0
  4586  011A  00AA               	movwf	setBuz@time+1
  4587  011B  3002               	movlw	2
  4588  011C  318A  226C         	fcall	_setBuz
  4589                           
  4590                           ;Switch_B1.c: 187: }
  4591                           ;Switch_B1.c: 189: }
  4592                           ;Switch_B1.c: 190: } else {
  4593  011E  0008               	return
  4594  011F                     l6943:	
  4595                           
  4596                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  4597  011F  087B               	movf	_Sw,w
  4598  0120  0086               	movwf	6
  4599  0121  3001               	movlw	1	; select bank2/3
  4600  0122  0087               	movwf	7
  4601  0123  1A81               	btfsc	1,5
  4602  0124  0008               	return
  4603                           
  4604                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  4605  0125  087B               	movf	_Sw,w
  4606  0126  3E07               	addlw	7
  4607  0127  0086               	movwf	6
  4608  0128  3001               	movlw	1	; select bank2/3
  4609  0129  0087               	movwf	7
  4610  012A  3001               	movlw	1
  4611  012B  0781               	addwf	1,f
  4612  012C  3141               	addfsr 1,1
  4613  012D  1803               	skipnc
  4614  012E  0A81               	incf	1,f
  4615                           
  4616                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  4617  012F  087B               	movf	_Sw,w
  4618  0130  3E07               	addlw	7
  4619  0131  0086               	movwf	6
  4620  0132  3001               	movlw	1	; select bank2/3
  4621  0133  0087               	movwf	7
  4622  0134  3F40               	moviw [0]fsr1
  4623  0135  0020               	movlb	0	; select bank0
  4624  0136  00B1               	movwf	??_setSw_Main
  4625  0137  3F41               	moviw [1]fsr1
  4626  0138  00B2               	movwf	??_setSw_Main+1
  4627  0139  3001               	movlw	1
  4628  013A  0232               	subwf	??_setSw_Main+1,w
  4629  013B  302C               	movlw	44
  4630  013C  1903               	skipnz
  4631  013D  0231               	subwf	??_setSw_Main,w
  4632  013E  1C03               	skipc
  4633  013F  0008               	return
  4634                           
  4635                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  4636  0140  087B               	movf	_Sw,w
  4637  0141  3E07               	addlw	7
  4638  0142  0086               	movwf	6
  4639  0143  3001               	movlw	1	; select bank2/3
  4640  0144  0087               	movwf	7
  4641  0145  3000               	movlw	0
  4642  0146  3FC0               	movwi [0]fsr1
  4643  0147  3FC1               	movwi [1]fsr1
  4644                           
  4645                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  4646  0148  087B               	movf	_Sw,w
  4647  0149  0086               	movwf	6
  4648  014A  3001               	movlw	1	; select bank2/3
  4649  014B  0087               	movwf	7
  4650  014C  1681               	bsf	1,5
  4651                           
  4652                           ;Switch_B1.c: 198: setRF_Learn(0);
  4653  014D  3000               	movlw	0
  4654  014E  3191  21CC         	fcall	_setRF_Learn
  4655                           
  4656                           ;Switch_B1.c: 201: }
  4657                           ;Switch_B1.c: 202: }
  4658                           ;Switch_B1.c: 203: }
  4659                           ;Switch_B1.c: 204: }
  4660                           ;Switch_B1.c: 205: }
  4661                           ;Switch_B1.c: 206: } else {
  4662  0150  0008               	return
  4663  0151                     l6953:	
  4664                           
  4665                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  4666  0151  087B               	movf	_Sw,w
  4667  0152  0086               	movwf	6
  4668  0153  3001               	movlw	1	; select bank2/3
  4669  0154  0087               	movwf	7
  4670  0155  1D01               	btfss	1,2
  4671  0156  0008               	return
  4672                           
  4673                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  4674  0157  3001               	movlw	1
  4675  0158  0020               	movlb	0	; select bank0
  4676  0159  00B1               	movwf	??_setSw_Main
  4677  015A  087B               	movf	_Sw,w
  4678  015B  3E02               	addlw	2
  4679  015C  0086               	movwf	6
  4680  015D  3001               	movlw	1	; select bank2/3
  4681  015E  0087               	movwf	7
  4682  015F  0831               	movf	??_setSw_Main,w
  4683  0160  0781               	addwf	1,f
  4684                           
  4685                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  4686  0161  087B               	movf	_Sw,w
  4687  0162  3E02               	addlw	2
  4688  0163  0086               	movwf	6
  4689  0164  3001               	movlw	1	; select bank2/3
  4690  0165  0087               	movwf	7
  4691  0166  3005               	movlw	5
  4692  0167  0201               	subwf	1,w
  4693  0168  1C03               	skipc
  4694  0169  0008               	return
  4695                           
  4696                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  4697  016A  087B               	movf	_Sw,w
  4698  016B  3E02               	addlw	2
  4699  016C  0086               	movwf	6
  4700  016D  3001               	movlw	1	; select bank2/3
  4701  016E  0087               	movwf	7
  4702  016F  0181               	clrf	1
  4703                           
  4704                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  4705  0170  087B               	movf	_Sw,w
  4706  0171  0086               	movwf	6
  4707  0172  3001               	movlw	1	; select bank2/3
  4708  0173  0087               	movwf	7
  4709  0174  1101               	bcf	1,2
  4710                           
  4711                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  4712  0175  087B               	movf	_Sw,w
  4713  0176  3E03               	addlw	3
  4714  0177  0086               	movwf	6
  4715  0178  3001               	movlw	1	; select bank2/3
  4716  0179  0087               	movwf	7
  4717  017A  3000               	movlw	0
  4718  017B  3FC0               	movwi [0]fsr1
  4719  017C  3FC1               	movwi [1]fsr1
  4720                           
  4721                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  4722  017D  087B               	movf	_Sw,w
  4723  017E  0086               	movwf	6
  4724  017F  3001               	movlw	1	; select bank2/3
  4725  0180  0087               	movwf	7
  4726  0181  1181               	bcf	1,3
  4727                           
  4728                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  4729  0182  087B               	movf	_Sw,w
  4730  0183  3E05               	addlw	5
  4731  0184  0086               	movwf	6
  4732  0185  3001               	movlw	1	; select bank2/3
  4733  0186  0087               	movwf	7
  4734  0187  3000               	movlw	0
  4735  0188  3FC0               	movwi [0]fsr1
  4736  0189  3FC1               	movwi [1]fsr1
  4737                           
  4738                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  4739  018A  087B               	movf	_Sw,w
  4740  018B  0086               	movwf	6
  4741  018C  3001               	movlw	1	; select bank2/3
  4742  018D  0087               	movwf	7
  4743  018E  1201               	bcf	1,4
  4744                           
  4745                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  4746  018F  087B               	movf	_Sw,w
  4747  0190  3E07               	addlw	7
  4748  0191  0086               	movwf	6
  4749  0192  3001               	movlw	1	; select bank2/3
  4750  0193  0087               	movwf	7
  4751  0194  3000               	movlw	0
  4752  0195  3FC0               	movwi [0]fsr1
  4753  0196  3FC1               	movwi [1]fsr1
  4754                           
  4755                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  4756  0197  087B               	movf	_Sw,w
  4757  0198  0086               	movwf	6
  4758  0199  3001               	movlw	1	; select bank2/3
  4759  019A  0087               	movwf	7
  4760  019B  1281               	bcf	1,5
  4761                           
  4762                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  4763  019C  0021               	movlb	1	; select bank1
  4764  019D  185A               	btfsc	_SwDetect^(0+128),0
  4765  019E  29A4               	goto	l6979
  4766                           
  4767                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  4768  019F  0020               	movlb	0	; select bank0
  4769  01A0  0833               	movf	setSw_Main@sw,w
  4770  01A1  3197  276D  3180   	fcall	_setDimmerLights_SwOff
  4771  01A4                     l6979:	
  4772                           
  4773                           ;Switch_B1.c: 221: }
  4774                           ;Switch_B1.c: 224: setRF_Learn(0);
  4775  01A4  3000               	movlw	0
  4776  01A5  3191  21CC         	fcall	_setRF_Learn
  4777                           
  4778                           ;Switch_B1.c: 226: }
  4779                           ;Switch_B1.c: 227: }
  4780                           ;Switch_B1.c: 228: }
  4781                           ;Switch_B1.c: 229: } else {
  4782  01A7  0008               	return
  4783  01A8                     l2201:	
  4784                           
  4785                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  4786  01A8  0021               	movlb	1	; select bank1
  4787  01A9  1C20               	btfss	_myMain^(0+128),0
  4788  01AA  0008               	return
  4789                           
  4790                           ;Switch_B1.c: 231: Sw->Enable = 1;
  4791  01AB  087B               	movf	_Sw,w
  4792  01AC  0086               	movwf	6
  4793  01AD  3001               	movlw	1	; select bank2/3
  4794  01AE  0087               	movwf	7
  4795  01AF  1401               	bsf	1,0
  4796  01B0  0008               	return
  4797  01B1                     __end_of_setSw_Main:	
  4798                           
  4799                           	psect	text7
  4800  11CC                     __ptext7:	
  4801 ;; *************** function _setRF_Learn *****************
  4802 ;; Defined at:
  4803 ;;		line 23 in file "../src/RF_Control_B1.c"
  4804 ;; Parameters:    Size  Location     Type
  4805 ;;  command         1    wreg     unsigned char 
  4806 ;; Auto vars:     Size  Location     Type
  4807 ;;  command         1    1[BANK0 ] unsigned char 
  4808 ;; Return value:  Size  Location     Type
  4809 ;;		None               void
  4810 ;; Registers used:
  4811 ;;		wreg, status,2, status,0
  4812 ;; Tracked objects:
  4813 ;;		On entry : 0/0
  4814 ;;		On exit  : 0/0
  4815 ;;		Unchanged: 0/0
  4816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4818 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4819 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4820 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4821 ;;Total ram usage:        2 bytes
  4822 ;; Hardware stack levels used:    1
  4823 ;; Hardware stack levels required when called:    5
  4824 ;; This function calls:
  4825 ;;		Nothing
  4826 ;; This function is called by:
  4827 ;;		_setSw_Main
  4828 ;; This function uses a non-reentrant model
  4829 ;;
  4830                           
  4831                           
  4832                           ;psect for function _setRF_Learn
  4833  11CC                     _setRF_Learn:	
  4834                           
  4835                           ;incstack = 0
  4836                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  4837                           ;setRF_Learn@command stored from wreg
  4838  11CC  0020               	movlb	0	; select bank0
  4839  11CD  00A1               	movwf	setRF_Learn@command
  4840                           
  4841                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  4842  11CE  0821               	movf	setRF_Learn@command,w
  4843  11CF  3A01               	xorlw	1
  4844  11D0  3000               	movlw	0
  4845  11D1  1903               	skipnz
  4846  11D2  3001               	movlw	1
  4847  11D3  00A0               	movwf	??_setRF_Learn
  4848  11D4  0EA0               	swapf	??_setRF_Learn,f
  4849  11D5  0DA0               	rlf	??_setRF_Learn,f
  4850  11D6  0DA0               	rlf	??_setRF_Learn,f
  4851  11D7  0021               	movlb	1	; select bank1
  4852  11D8  083C               	movf	_RF1^(0+128),w
  4853  11D9  0020               	movlb	0	; select bank0
  4854  11DA  0620               	xorwf	??_setRF_Learn,w
  4855  11DB  39BF               	andlw	-65
  4856  11DC  0620               	xorwf	??_setRF_Learn,w
  4857  11DD  0021               	movlb	1	; select bank1
  4858  11DE  00BC               	movwf	_RF1^(0+128)
  4859  11DF  0008               	return
  4860  11E0                     __end_of_setRF_Learn:	
  4861                           
  4862                           	psect	text8
  4863  1540                     __ptext8:	
  4864 ;; *************** function _setDimmerLights_AdjControl *****************
  4865 ;; Defined at:
  4866 ;;		line 558 in file "../src/Dimmer_B1.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;  sw              1    wreg     unsigned char 
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;  sw              1    8[BANK0 ] unsigned char 
  4871 ;;  idle            1    6[BANK0 ] unsigned char 
  4872 ;; Return value:  Size  Location     Type
  4873 ;;		None               void
  4874 ;; Registers used:
  4875 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4876 ;; Tracked objects:
  4877 ;;		On entry : 0/0
  4878 ;;		On exit  : 0/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4882 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4883 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4884 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4885 ;;Total ram usage:        4 bytes
  4886 ;; Hardware stack levels used:    1
  4887 ;; Hardware stack levels required when called:    7
  4888 ;; This function calls:
  4889 ;;		_DimmerLightsPointSelect
  4890 ;;		_getAll_DimmerLights_AdjGO
  4891 ;;		_setDimmerLights_TriggerAdj
  4892 ;; This function is called by:
  4893 ;;		_setSw_Main
  4894 ;; This function uses a non-reentrant model
  4895 ;;
  4896                           
  4897                           
  4898                           ;psect for function _setDimmerLights_AdjControl
  4899  1540                     _setDimmerLights_AdjControl:	
  4900                           
  4901                           ;incstack = 0
  4902                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4903                           ;setDimmerLights_AdjControl@sw stored from wreg
  4904  1540  0020               	movlb	0	; select bank0
  4905  1541  00A8               	movwf	setDimmerLights_AdjControl@sw
  4906                           
  4907                           ;Dimmer_B1.c: 559: DimmerLightsPointSelect(sw);
  4908  1542  0828               	movf	setDimmerLights_AdjControl@sw,w
  4909  1543  3191  2130  3195   	fcall	_DimmerLightsPointSelect
  4910                           
  4911                           ;Dimmer_B1.c: 560: char idle = 0;
  4912  1546  0020               	movlb	0	; select bank0
  4913  1547  01A6               	clrf	setDimmerLights_AdjControl@idle
  4914                           
  4915                           ;Dimmer_B1.c: 562: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  4916  1548  01A7               	clrf	_setDimmerLights_AdjControl$2265
  4917  1549  3190  20C5  3195   	fcall	_getAll_DimmerLights_AdjGO
  4918  154C  3A01               	xorlw	1
  4919  154D  1D03               	skipz
  4920  154E  2D55               	goto	l6225
  4921  154F  0021               	movlb	1	; select bank1
  4922  1550  1CC8               	btfss	_Dimmer^(0+128),1
  4923  1551  2D55               	goto	l6225
  4924  1552  0020               	movlb	0	; select bank0
  4925  1553  01A7               	clrf	_setDimmerLights_AdjControl$2265
  4926  1554  0AA7               	incf	_setDimmerLights_AdjControl$2265,f
  4927  1555                     l6225:	
  4928  1555  0020               	movlb	0	; select bank0
  4929  1556  0827               	movf	_setDimmerLights_AdjControl$2265,w
  4930  1557  00A5               	movwf	??_setDimmerLights_AdjControl
  4931  1558  0825               	movf	??_setDimmerLights_AdjControl,w
  4932  1559  00A6               	movwf	setDimmerLights_AdjControl@idle
  4933                           
  4934                           ;Dimmer_B1.c: 564: if (idle == 0) {
  4935  155A  08A6               	movf	setDimmerLights_AdjControl@idle,f
  4936  155B  1D03               	skipz
  4937  155C  0008               	return
  4938                           
  4939                           ;Dimmer_B1.c: 565: if (DimmerLights->SwFlag == 1) {
  4940  155D  086F               	movf	_DimmerLights,w
  4941  155E  3E09               	addlw	9
  4942  155F  0086               	movwf	6
  4943  1560  3001               	movlw	1	; select bank2/3
  4944  1561  0087               	movwf	7
  4945  1562  1F01               	btfss	1,6
  4946  1563  0008               	return
  4947                           
  4948                           ;Dimmer_B1.c: 566: DimmerLights->SwAdj = 1;
  4949  1564  086F               	movf	_DimmerLights,w
  4950  1565  3E09               	addlw	9
  4951  1566  0086               	movwf	6
  4952  1567  3001               	movlw	1	; select bank2/3
  4953  1568  0087               	movwf	7
  4954  1569  1781               	bsf	1,7
  4955                           
  4956                           ;Dimmer_B1.c: 567: DimmerLights->Status = 1;
  4957  156A  086F               	movf	_DimmerLights,w
  4958  156B  0086               	movwf	6
  4959  156C  3001               	movlw	1	; select bank2/3
  4960  156D  0087               	movwf	7
  4961  156E  1681               	bsf	1,5
  4962                           
  4963                           ;Dimmer_B1.c: 568: setDimmerLights_TriggerAdj(sw, 1);
  4964  156F  01A2               	clrf	setDimmerLights_TriggerAdj@command
  4965  1570  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  4966  1571  0828               	movf	setDimmerLights_AdjControl@sw,w
  4967  1572  3193  230A         	fcall	_setDimmerLights_TriggerAdj
  4968  1574  0008               	return
  4969  1575                     __end_of_setDimmerLights_AdjControl:	
  4970                           
  4971                           	psect	text9
  4972  12EB                     __ptext9:	
  4973 ;; *************** function _getSw_KeyStatus *****************
  4974 ;; Defined at:
  4975 ;;		line 237 in file "../src/Switch_B1.c"
  4976 ;; Parameters:    Size  Location     Type
  4977 ;;  sw              1    wreg     unsigned char 
  4978 ;; Auto vars:     Size  Location     Type
  4979 ;;  sw              1    4[BANK0 ] unsigned char 
  4980 ;;  status          1    3[BANK0 ] unsigned char 
  4981 ;; Return value:  Size  Location     Type
  4982 ;;                  1    wreg      unsigned char 
  4983 ;; Registers used:
  4984 ;;		wreg, status,2
  4985 ;; Tracked objects:
  4986 ;;		On entry : 0/0
  4987 ;;		On exit  : 0/0
  4988 ;;		Unchanged: 0/0
  4989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4991 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4992 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4993 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4994 ;;Total ram usage:        5 bytes
  4995 ;; Hardware stack levels used:    1
  4996 ;; Hardware stack levels required when called:    5
  4997 ;; This function calls:
  4998 ;;		Nothing
  4999 ;; This function is called by:
  5000 ;;		_setSw_Main
  5001 ;; This function uses a non-reentrant model
  5002 ;;
  5003                           
  5004                           
  5005                           ;psect for function _getSw_KeyStatus
  5006  12EB                     _getSw_KeyStatus:	
  5007                           
  5008                           ;incstack = 0
  5009                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  5010                           ;getSw_KeyStatus@sw stored from wreg
  5011  12EB  0020               	movlb	0	; select bank0
  5012  12EC  00A4               	movwf	getSw_KeyStatus@sw
  5013                           
  5014                           ;Switch_B1.c: 238: char status = 0;
  5015  12ED  01A3               	clrf	getSw_KeyStatus@status
  5016                           
  5017                           ;Switch_B1.c: 250: if (sw == 1) {
  5018  12EE  0824               	movf	getSw_KeyStatus@sw,w
  5019  12EF  3A01               	xorlw	1
  5020  12F0  1D03               	skipz
  5021  12F1  2AFA               	goto	l6421
  5022                           
  5023                           ;Switch_B1.c: 251: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  5024  12F2  01A1               	clrf	_getSw_KeyStatus$5440
  5025  12F3  0AA1               	incf	_getSw_KeyStatus$5440,f
  5026  12F4  1F0C               	btfss	12,6	;volatile
  5027  12F5  1A0C               	btfsc	12,4	;volatile
  5028  12F6  2AF8               	goto	l6419
  5029  12F7  01A1               	clrf	_getSw_KeyStatus$5440
  5030  12F8                     l6419:	
  5031  12F8  0821               	movf	_getSw_KeyStatus$5440,w
  5032  12F9  2B05               	goto	L2
  5033  12FA                     l6421:	
  5034                           ;Switch_B1.c: 252: } else if (sw == 2) {
  5035                           
  5036  12FA  0824               	movf	getSw_KeyStatus@sw,w
  5037  12FB  3A02               	xorlw	2
  5038  12FC  1D03               	skipz
  5039  12FD  2B08               	goto	l6431
  5040                           
  5041                           ;Switch_B1.c: 253: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  5042  12FE  01A2               	clrf	_getSw_KeyStatus$5441
  5043  12FF  0AA2               	incf	_getSw_KeyStatus$5441,f
  5044  1300  1C0C               	btfss	12,0	;volatile
  5045  1301  188D               	btfsc	13,1	;volatile
  5046  1302  2B04               	goto	l6429
  5047  1303  01A2               	clrf	_getSw_KeyStatus$5441
  5048  1304                     l6429:	
  5049  1304  0822               	movf	_getSw_KeyStatus$5441,w
  5050  1305                     L2:	
  5051  1305  00A0               	movwf	??_getSw_KeyStatus
  5052  1306  0820               	movf	??_getSw_KeyStatus,w
  5053  1307  00A3               	movwf	getSw_KeyStatus@status
  5054  1308                     l6431:	
  5055                           
  5056                           ;Switch_B1.c: 254: }
  5057                           ;Switch_B1.c: 261: return status;
  5058  1308  0823               	movf	getSw_KeyStatus@status,w
  5059  1309  0008               	return
  5060  130A                     __end_of_getSw_KeyStatus:	
  5061                           
  5062                           	psect	text10
  5063  11B8                     __ptext10:	
  5064 ;; *************** function _SwPointSelect *****************
  5065 ;; Defined at:
  5066 ;;		line 25 in file "../src/Switch_B1.c"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;  sw              1    wreg     unsigned char 
  5069 ;; Auto vars:     Size  Location     Type
  5070 ;;  sw              1    1[BANK0 ] unsigned char 
  5071 ;; Return value:  Size  Location     Type
  5072 ;;		None               void
  5073 ;; Registers used:
  5074 ;;		wreg
  5075 ;; Tracked objects:
  5076 ;;		On entry : 0/0
  5077 ;;		On exit  : 0/0
  5078 ;;		Unchanged: 0/0
  5079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5081 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5082 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5083 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5084 ;;Total ram usage:        2 bytes
  5085 ;; Hardware stack levels used:    1
  5086 ;; Hardware stack levels required when called:    5
  5087 ;; This function calls:
  5088 ;;		Nothing
  5089 ;; This function is called by:
  5090 ;;		_setSw_Main
  5091 ;; This function uses a non-reentrant model
  5092 ;;
  5093                           
  5094                           
  5095                           ;psect for function _SwPointSelect
  5096  11B8                     _SwPointSelect:	
  5097                           
  5098                           ;incstack = 0
  5099                           ; Regs used in _SwPointSelect: [wreg]
  5100                           ;SwPointSelect@sw stored from wreg
  5101  11B8  0020               	movlb	0	; select bank0
  5102  11B9  00A1               	movwf	SwPointSelect@sw
  5103                           
  5104                           ;Switch_B1.c: 28: if (sw == 1) {
  5105  11BA  0821               	movf	SwPointSelect@sw,w
  5106  11BB  3A01               	xorlw	1
  5107  11BC  1D03               	skipz
  5108  11BD  29C3               	goto	l6405
  5109                           
  5110                           ;Switch_B1.c: 29: Sw = &Sw1;
  5111  11BE  305C               	movlw	_Sw1& (0+255)
  5112  11BF  00A0               	movwf	??_SwPointSelect
  5113  11C0  0820               	movf	??_SwPointSelect,w
  5114  11C1  00FB               	movwf	_Sw
  5115                           
  5116                           ;Switch_B1.c: 30: }
  5117  11C2  0008               	return
  5118  11C3                     l6405:	
  5119                           
  5120                           ;Switch_B1.c: 33: else if (sw == 2) {
  5121  11C3  0821               	movf	SwPointSelect@sw,w
  5122  11C4  3A02               	xorlw	2
  5123  11C5  1D03               	skipz
  5124  11C6  0008               	return
  5125                           
  5126                           ;Switch_B1.c: 34: Sw = &Sw2;
  5127  11C7  30C5               	movlw	_Sw2& (0+255)
  5128  11C8  00A0               	movwf	??_SwPointSelect
  5129  11C9  0820               	movf	??_SwPointSelect,w
  5130  11CA  00FB               	movwf	_Sw
  5131  11CB  0008               	return
  5132  11CC                     __end_of_SwPointSelect:	
  5133                           
  5134                           	psect	text11
  5135  0C2F                     __ptext11:	
  5136 ;; *************** function _setMain_Exception *****************
  5137 ;; Defined at:
  5138 ;;		line 278 in file "../src/main_B1.c"
  5139 ;; Parameters:    Size  Location     Type
  5140 ;;  command         1    wreg     unsigned char 
  5141 ;; Auto vars:     Size  Location     Type
  5142 ;;  command         1   28[BANK0 ] unsigned char 
  5143 ;;  status          1   27[BANK0 ] unsigned char 
  5144 ;;  buz             1   24[BANK0 ] unsigned char 
  5145 ;; Return value:  Size  Location     Type
  5146 ;;		None               void
  5147 ;; Registers used:
  5148 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5149 ;; Tracked objects:
  5150 ;;		On entry : 0/0
  5151 ;;		On exit  : 0/0
  5152 ;;		Unchanged: 0/0
  5153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5155 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5156 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5157 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5158 ;;Total ram usage:        7 bytes
  5159 ;; Hardware stack levels used:    1
  5160 ;; Hardware stack levels required when called:   10
  5161 ;; This function calls:
  5162 ;;		_getDimmerLights_Line
  5163 ;;		_getMain_LightsStatus
  5164 ;;		_setBuz
  5165 ;;		_setDimmerLights_ErrorClose
  5166 ;;		_setLED
  5167 ;; This function is called by:
  5168 ;;		_Switch_Main
  5169 ;; This function uses a non-reentrant model
  5170 ;;
  5171                           
  5172                           
  5173                           ;psect for function _setMain_Exception
  5174  0C2F                     _setMain_Exception:	
  5175                           
  5176                           ;incstack = 0
  5177                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5178                           ;setMain_Exception@command stored from wreg
  5179  0C2F  0020               	movlb	0	; select bank0
  5180  0C30  00BC               	movwf	setMain_Exception@command
  5181                           
  5182                           ;main_B1.c: 279: char status = 0, buz = 0;
  5183  0C31  01BB               	clrf	setMain_Exception@status
  5184  0C32  01B8               	clrf	setMain_Exception@buz
  5185                           
  5186                           ;main_B1.c: 294: status = command == 3 ? getDimmerLights_Line() : 255;
  5187  0C33  083C               	movf	setMain_Exception@command,w
  5188  0C34  3A03               	xorlw	3
  5189  0C35  1903               	skipnz
  5190  0C36  2C3B               	goto	l7541
  5191  0C37  30FF               	movlw	255
  5192  0C38  00B9               	movwf	_setMain_Exception$6055
  5193  0C39  3000               	movlw	0
  5194  0C3A  2C44               	goto	L3
  5195  0C3B                     l7541:	
  5196  0C3B  3191  2169  318C   	fcall	_getDimmerLights_Line
  5197  0C3E  0020               	movlb	0	; select bank0
  5198  0C3F  00B6               	movwf	??_setMain_Exception
  5199  0C40  01B7               	clrf	??_setMain_Exception+1
  5200  0C41  0836               	movf	??_setMain_Exception,w
  5201  0C42  00B9               	movwf	_setMain_Exception$6055
  5202  0C43  0837               	movf	??_setMain_Exception+1,w
  5203  0C44                     L3:	
  5204  0C44  00BA               	movwf	_setMain_Exception$6055+1
  5205  0C45  0839               	movf	_setMain_Exception$6055,w
  5206  0C46  00B6               	movwf	??_setMain_Exception
  5207  0C47  0836               	movf	??_setMain_Exception,w
  5208  0C48  00BB               	movwf	setMain_Exception@status
  5209                           
  5210                           ;main_B1.c: 296: if (command == 0) {
  5211  0C49  08BC               	movf	setMain_Exception@command,f
  5212  0C4A  1D03               	skipz
  5213  0C4B  2C4E               	goto	l7549
  5214                           
  5215                           ;main_B1.c: 297: setLED(99, 10);
  5216  0C4C  300A               	movlw	10
  5217  0C4D  2C50               	goto	L4
  5218  0C4E                     l7549:	
  5219                           ;main_B1.c: 298: } else {
  5220                           
  5221                           
  5222                           ;main_B1.c: 299: setLED(99, 11);
  5223  0C4E  300B               	movlw	11
  5224  0C4F  0020               	movlb	0	; select bank0
  5225  0C50                     L4:	
  5226  0C50  00B6               	movwf	??_setMain_Exception
  5227  0C51  0836               	movf	??_setMain_Exception,w
  5228  0C52  00A1               	movwf	setLED@command
  5229  0C53  3063               	movlw	99
  5230  0C54  3189  21C1  318C   	fcall	_setLED
  5231                           
  5232                           ;main_B1.c: 300: }
  5233                           ;main_B1.c: 302: if (command != 0) {
  5234  0C57  0020               	movlb	0	; select bank0
  5235  0C58  083C               	movf	setMain_Exception@command,w
  5236  0C59  1903               	btfsc	3,2
  5237  0C5A  0008               	return
  5238                           
  5239                           ;main_B1.c: 303: switch (command) {
  5240  0C5B  2C7C               	goto	l7565
  5241  0C5C                     l7555:	
  5242                           ;main_B1.c: 304: case 2:
  5243                           
  5244                           
  5245                           ;main_B1.c: 305: if (getMain_LightsStatus() == 1) {
  5246  0C5C  3194  24DF  318C   	fcall	_getMain_LightsStatus
  5247  0C5F  3A01               	xorlw	1
  5248  0C60  1D03               	skipz
  5249  0C61  2C85               	goto	l7567
  5250                           
  5251                           ;main_B1.c: 306: setBuz(10, 300);
  5252  0C62  302C               	movlw	44
  5253  0C63  0020               	movlb	0	; select bank0
  5254  0C64  00A9               	movwf	setBuz@time
  5255  0C65  3001               	movlw	1
  5256  0C66  00AA               	movwf	setBuz@time+1
  5257  0C67  300A               	movlw	10
  5258  0C68  318A  226C  318C   	fcall	_setBuz
  5259                           
  5260                           ;main_B1.c: 307: }
  5261                           ;main_B1.c: 308: break;
  5262  0C6B  2C85               	goto	l7567
  5263  0C6C                     l7559:	
  5264                           ;main_B1.c: 309: case 3:
  5265                           
  5266                           
  5267                           ;main_B1.c: 310: if (getMain_LightsStatus() == 1) {
  5268  0C6C  3194  24DF  318C   	fcall	_getMain_LightsStatus
  5269  0C6F  3A01               	xorlw	1
  5270  0C70  1D03               	skipz
  5271  0C71  2C85               	goto	l7567
  5272                           
  5273                           ;main_B1.c: 311: setBuz(5, 300);
  5274  0C72  302C               	movlw	44
  5275  0C73  0020               	movlb	0	; select bank0
  5276  0C74  00A9               	movwf	setBuz@time
  5277  0C75  3001               	movlw	1
  5278  0C76  00AA               	movwf	setBuz@time+1
  5279  0C77  3005               	movlw	5
  5280  0C78  318A  226C  318C   	fcall	_setBuz
  5281                           
  5282                           ;main_B1.c: 314: }
  5283                           
  5284                           ;main_B1.c: 312: }
  5285                           ;main_B1.c: 313: break;
  5286  0C7B  2C85               	goto	l7567
  5287  0C7C                     l7565:	
  5288  0C7C  0020               	movlb	0	; select bank0
  5289  0C7D  083C               	movf	setMain_Exception@command,w
  5290                           
  5291                           ; Switch size 1, requested type "space"
  5292                           ; Number of cases is 2, Range of values is 2 to 3
  5293                           ; switch strategies available:
  5294                           ; Name         Instructions Cycles
  5295                           ; simple_byte            7     4 (average)
  5296                           ; direct_byte           13     9 (fixed)
  5297                           ; jumptable            263     9 (fixed)
  5298                           ;	Chosen strategy is simple_byte
  5299  0C7E  3A02               	xorlw	2	; case 2
  5300  0C7F  1903               	skipnz
  5301  0C80  2C5C               	goto	l7555
  5302  0C81  3A01               	xorlw	1	; case 3
  5303  0C82  1903               	skipnz
  5304  0C83  2C6C               	goto	l7559
  5305  0C84  2C85               	goto	l7567
  5306  0C85                     l7567:	
  5307                           
  5308                           ;main_B1.c: 315: setDimmerLights_ErrorClose(status);
  5309  0C85  0020               	movlb	0	; select bank0
  5310  0C86  083B               	movf	setMain_Exception@status,w
  5311  0C87  318B  231E         	fcall	_setDimmerLights_ErrorClose
  5312  0C89  0020               	movlb	0	; select bank0
  5313  0C8A  0008               	return
  5314  0C8B                     __end_of_setMain_Exception:	
  5315                           
  5316                           	psect	text12
  5317  1169                     __ptext12:	
  5318 ;; *************** function _getDimmerLights_Line *****************
  5319 ;; Defined at:
  5320 ;;		line 707 in file "../src/Dimmer_B1.c"
  5321 ;; Parameters:    Size  Location     Type
  5322 ;;		None
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;  line            1    1[BANK0 ] unsigned char 
  5325 ;; Return value:  Size  Location     Type
  5326 ;;                  1    wreg      unsigned char 
  5327 ;; Registers used:
  5328 ;;		wreg, status,2
  5329 ;; Tracked objects:
  5330 ;;		On entry : 0/0
  5331 ;;		On exit  : 0/0
  5332 ;;		Unchanged: 0/0
  5333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5335 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5336 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5337 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5338 ;;Total ram usage:        2 bytes
  5339 ;; Hardware stack levels used:    1
  5340 ;; Hardware stack levels required when called:    5
  5341 ;; This function calls:
  5342 ;;		Nothing
  5343 ;; This function is called by:
  5344 ;;		_setMain_Exception
  5345 ;; This function uses a non-reentrant model
  5346 ;;
  5347                           
  5348                           
  5349                           ;psect for function _getDimmerLights_Line
  5350  1169                     _getDimmerLights_Line:	
  5351                           
  5352                           ;Dimmer_B1.c: 708: char line = 0;
  5353                           
  5354                           ;incstack = 0
  5355                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  5356  1169  0020               	movlb	0	; select bank0
  5357  116A  01A1               	clrf	getDimmerLights_Line@line
  5358                           
  5359                           ;Dimmer_B1.c: 710: if (DimmerLights1.Line == 1) {
  5360  116B  0022               	movlb	2	; select bank2
  5361  116C  1C47               	btfss	(_DimmerLights1^(0+256)+9),0
  5362  116D  2972               	goto	l833
  5363                           
  5364                           ;Dimmer_B1.c: 711: line = 1;
  5365  116E  0020               	movlb	0	; select bank0
  5366  116F  01A1               	clrf	getDimmerLights_Line@line
  5367  1170  0AA1               	incf	getDimmerLights_Line@line,f
  5368                           
  5369                           ;Dimmer_B1.c: 712: }
  5370  1171  2979               	goto	l834
  5371  1172                     l833:	
  5372                           
  5373                           ;Dimmer_B1.c: 715: else if (DimmerLights2.Line == 1) {
  5374  1172  1C56               	btfss	(_DimmerLights2^(0+256)+9),0
  5375  1173  2979               	goto	l834
  5376                           
  5377                           ;Dimmer_B1.c: 716: line = 2;
  5378  1174  3002               	movlw	2
  5379  1175  0020               	movlb	0	; select bank0
  5380  1176  00A0               	movwf	??_getDimmerLights_Line
  5381  1177  0820               	movf	??_getDimmerLights_Line,w
  5382  1178  00A1               	movwf	getDimmerLights_Line@line
  5383  1179                     l834:	
  5384                           
  5385                           ;Dimmer_B1.c: 717: }
  5386                           ;Dimmer_B1.c: 724: return line;
  5387  1179  0020               	movlb	0	; select bank0
  5388  117A  0821               	movf	getDimmerLights_Line@line,w
  5389  117B  0008               	return
  5390  117C                     __end_of_getDimmerLights_Line:	
  5391                           
  5392                           	psect	text13
  5393  1FF3                     __ptext13:	
  5394 ;; *************** function _Switch_Initialization *****************
  5395 ;; Defined at:
  5396 ;;		line 46 in file "../src/Switch_B1.c"
  5397 ;; Parameters:    Size  Location     Type
  5398 ;;		None
  5399 ;; Auto vars:     Size  Location     Type
  5400 ;;		None
  5401 ;; Return value:  Size  Location     Type
  5402 ;;		None               void
  5403 ;; Registers used:
  5404 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5405 ;; Tracked objects:
  5406 ;;		On entry : 0/0
  5407 ;;		On exit  : 0/0
  5408 ;;		Unchanged: 0/0
  5409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5414 ;;Total ram usage:        0 bytes
  5415 ;; Hardware stack levels used:    1
  5416 ;; Hardware stack levels required when called:    8
  5417 ;; This function calls:
  5418 ;;		_TouchPower
  5419 ;;		_setSw_Initialization
  5420 ;; This function is called by:
  5421 ;;		_main
  5422 ;; This function uses a non-reentrant model
  5423 ;;
  5424                           
  5425                           
  5426                           ;psect for function _Switch_Initialization
  5427  1FF3                     _Switch_Initialization:	
  5428                           
  5429                           ;Switch_B1.c: 47: TouchPower();
  5430                           
  5431                           ;incstack = 0
  5432                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5433  1FF3  3192  221F  319F   	fcall	_TouchPower
  5434                           
  5435                           ;Switch_B1.c: 49: WPUB1 = 0;
  5436  1FF6  0024               	movlb	4	; select bank4
  5437  1FF7  108D               	bcf	13,1	;volatile
  5438                           
  5439                           ;Switch_B1.c: 58: setSw_Initialization(1);
  5440  1FF8  3001               	movlw	1
  5441  1FF9  319F  276F  319F   	fcall	_setSw_Initialization
  5442                           
  5443                           ;Switch_B1.c: 62: setSw_Initialization(2);
  5444  1FFC  3002               	movlw	2
  5445  1FFD  319F  276F         	fcall	_setSw_Initialization
  5446  1FFF  0008               	return
  5447  2000                     __end_of_Switch_Initialization:	
  5448                           
  5449                           	psect	text14
  5450  1F6F                     __ptext14:	
  5451 ;; *************** function _setSw_Initialization *****************
  5452 ;; Defined at:
  5453 ;;		line 109 in file "../src/Switch_B1.c"
  5454 ;; Parameters:    Size  Location     Type
  5455 ;;  sw              1    wreg     unsigned char 
  5456 ;; Auto vars:     Size  Location     Type
  5457 ;;  sw              1    3[BANK0 ] unsigned char 
  5458 ;; Return value:  Size  Location     Type
  5459 ;;		None               void
  5460 ;; Registers used:
  5461 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5462 ;; Tracked objects:
  5463 ;;		On entry : 0/0
  5464 ;;		On exit  : 0/0
  5465 ;;		Unchanged: 0/0
  5466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5468 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5470 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5471 ;;Total ram usage:        1 bytes
  5472 ;; Hardware stack levels used:    1
  5473 ;; Hardware stack levels required when called:    7
  5474 ;; This function calls:
  5475 ;;		_setLED
  5476 ;; This function is called by:
  5477 ;;		_Switch_Initialization
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481                           
  5482                           ;psect for function _setSw_Initialization
  5483  1F6F                     _setSw_Initialization:	
  5484                           
  5485                           ;incstack = 0
  5486                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5487                           ;setSw_Initialization@sw stored from wreg
  5488  1F6F  0020               	movlb	0	; select bank0
  5489  1F70  00A3               	movwf	setSw_Initialization@sw
  5490                           
  5491                           ;Switch_B1.c: 110: setLED(sw, 1);
  5492  1F71  01A1               	clrf	setLED@command
  5493  1F72  0AA1               	incf	setLED@command,f
  5494  1F73  0823               	movf	setSw_Initialization@sw,w
  5495  1F74  3189  21C1         	fcall	_setLED
  5496  1F76  0008               	return
  5497  1F77                     __end_of_setSw_Initialization:	
  5498                           
  5499                           	psect	text15
  5500  121F                     __ptext15:	
  5501 ;; *************** function _TouchPower *****************
  5502 ;; Defined at:
  5503 ;;		line 10 in file "../src/Switch_B1.c"
  5504 ;; Parameters:    Size  Location     Type
  5505 ;;		None
  5506 ;; Auto vars:     Size  Location     Type
  5507 ;;		None
  5508 ;; Return value:  Size  Location     Type
  5509 ;;		None               void
  5510 ;; Registers used:
  5511 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5512 ;; Tracked objects:
  5513 ;;		On entry : 0/0
  5514 ;;		On exit  : 0/0
  5515 ;;		Unchanged: 0/0
  5516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5521 ;;Total ram usage:        0 bytes
  5522 ;; Hardware stack levels used:    1
  5523 ;; Hardware stack levels required when called:    6
  5524 ;; This function calls:
  5525 ;;		_Timeout_Counter
  5526 ;;		_set_TimeoutCleared
  5527 ;; This function is called by:
  5528 ;;		_Switch_Initialization
  5529 ;;		_Switch_Main
  5530 ;; This function uses a non-reentrant model
  5531 ;;
  5532                           
  5533                           
  5534                           ;psect for function _TouchPower
  5535  121F                     _TouchPower:	
  5536                           
  5537                           ;Switch_B1.c: 11: if (RC5 == 0) {
  5538                           
  5539                           ;incstack = 0
  5540                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5541  121F  0020               	movlb	0	; select bank0
  5542  1220  1A8E               	btfsc	14,5	;volatile
  5543  1221  0008               	return
  5544                           
  5545                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  5546  1222  0021               	movlb	1	; select bank1
  5547  1223  1C20               	btfss	_myMain^(0+128),0
  5548  1224  0008               	return
  5549  1225  2A2B               	goto	l6851
  5550  1226                     l2175:	
  5551                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  5552                           
  5553                           
  5554                           ;Switch_B1.c: 14: RC5 = 1;
  5555  1226  0020               	movlb	0	; select bank0
  5556  1227  168E               	bsf	14,5	;volatile
  5557                           
  5558                           ;Switch_B1.c: 15: Timeout_Counter();
  5559  1228  3191  21E0  3192   	fcall	_Timeout_Counter
  5560  122B                     l6851:	
  5561  122B  0020               	movlb	0	; select bank0
  5562  122C  1A8E               	btfsc	14,5	;volatile
  5563  122D  2A31               	goto	l6855
  5564  122E  0021               	movlb	1	; select bank1
  5565  122F  1D2D               	btfss	(_myMain^(0+128)+13),2
  5566  1230  2A26               	goto	l2175
  5567  1231                     l6855:	
  5568                           
  5569                           ;Switch_B1.c: 16: }
  5570                           ;Switch_B1.c: 17: set_TimeoutCleared();
  5571  1231  319F  2731         	fcall	_set_TimeoutCleared
  5572  1233  0008               	return
  5573  1234                     __end_of_TouchPower:	
  5574                           
  5575                           	psect	text16
  5576  0800                     __ptext16:	
  5577 ;; *************** function _RF_Main *****************
  5578 ;; Defined at:
  5579 ;;		line 16 in file "../src/RF_Control_B1.c"
  5580 ;; Parameters:    Size  Location     Type
  5581 ;;		None
  5582 ;; Auto vars:     Size  Location     Type
  5583 ;;		None
  5584 ;; Return value:  Size  Location     Type
  5585 ;;		None               void
  5586 ;; Registers used:
  5587 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5588 ;; Tracked objects:
  5589 ;;		On entry : 0/0
  5590 ;;		On exit  : 0/0
  5591 ;;		Unchanged: 0/0
  5592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5597 ;;Total ram usage:        0 bytes
  5598 ;; Hardware stack levels used:    1
  5599 ;; Hardware stack levels required when called:   14
  5600 ;; This function calls:
  5601 ;;		_setRF_Main
  5602 ;; This function is called by:
  5603 ;;		_main
  5604 ;; This function uses a non-reentrant model
  5605 ;;
  5606                           
  5607                           
  5608                           ;psect for function _RF_Main
  5609  0800                     _RF_Main:	
  5610                           
  5611                           ;RF_Control_B1.c: 18: setRF_Main();
  5612                           
  5613                           ;incstack = 0
  5614                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5615  0800  3183  23E3         	fcall	_setRF_Main
  5616  0802  0008               	return
  5617  0803                     __end_of_RF_Main:	
  5618                           
  5619                           	psect	text17
  5620  03E3                     __ptext17:	
  5621 ;; *************** function _setRF_Main *****************
  5622 ;; Defined at:
  5623 ;;		line 52 in file "../src/RF_Control_B1.c"
  5624 ;; Parameters:    Size  Location     Type
  5625 ;;		None
  5626 ;; Auto vars:     Size  Location     Type
  5627 ;;  error           1    2[BANK1 ] unsigned char 
  5628 ;;  Receive_OK      1    1[BANK1 ] unsigned char 
  5629 ;;  loop_f          1    0[BANK1 ] unsigned char 
  5630 ;; Return value:  Size  Location     Type
  5631 ;;		None               void
  5632 ;; Registers used:
  5633 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5634 ;; Tracked objects:
  5635 ;;		On entry : 0/0
  5636 ;;		On exit  : 0/0
  5637 ;;		Unchanged: 0/0
  5638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5640 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  5641 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5642 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  5643 ;;Total ram usage:        4 bytes
  5644 ;; Hardware stack levels used:    1
  5645 ;; Hardware stack levels required when called:   13
  5646 ;; This function calls:
  5647 ;;		_CC2500_ReadStatus
  5648 ;;		_CC2500_RxData
  5649 ;;		_CC2500_TxData
  5650 ;;		_CC2500_WriteCommand
  5651 ;;		_getBuz_GO
  5652 ;;		_getMain_All_Error_Status
  5653 ;;		_getRF_KeyStatus
  5654 ;;		_getRxData
  5655 ;; This function is called by:
  5656 ;;		_RF_Main
  5657 ;; This function uses a non-reentrant model
  5658 ;;
  5659                           
  5660                           
  5661                           ;psect for function _setRF_Main
  5662  03E3                     _setRF_Main:	
  5663                           
  5664                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  5665                           
  5666                           ;incstack = 0
  5667                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5668  03E3  0021               	movlb	1	; select bank1
  5669  03E4  01E7               	clrf	setRF_Main@loop_f^(0+128)
  5670  03E5  01E8               	clrf	setRF_Main@Receive_OK^(0+128)
  5671  03E6  01E9               	clrf	setRF_Main@error^(0+128)
  5672                           
  5673                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  5674  03E7  1C3C               	btfss	_RF1^(0+128),0
  5675  03E8  2CCF               	goto	l1788
  5676                           
  5677                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  5678  03E9  3190  20A3  3183   	fcall	_getBuz_GO
  5679  03EC  0020               	movlb	0	; select bank0
  5680  03ED  0821               	movf	?_getBuz_GO+1,w
  5681  03EE  0420               	iorwf	?_getBuz_GO,w
  5682  03EF  1D03               	skipz
  5683  03F0  0008               	return
  5684                           
  5685                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  5686  03F1  3000               	movlw	0
  5687  03F2  319F  272D  3183   	fcall	_getMain_All_Error_Status
  5688  03F5  3800               	iorlw	0
  5689  03F6  1D03               	skipz
  5690  03F7  2C0C               	goto	l1790
  5691                           
  5692                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  5693  03F8  3190  20B4  3183   	fcall	_getRF_KeyStatus
  5694  03FB  3A01               	xorlw	1
  5695  03FC  3000               	movlw	0
  5696  03FD  1903               	skipnz
  5697  03FE  3001               	movlw	1
  5698  03FF  0020               	movlb	0	; select bank0
  5699  0400  00ED               	movwf	??_setRF_Main
  5700  0401  0CED               	rrf	??_setRF_Main,f
  5701  0402  0CED               	rrf	??_setRF_Main,f
  5702  0403  0021               	movlb	1	; select bank1
  5703  0404  083C               	movf	_RF1^(0+128),w
  5704  0405  0020               	movlb	0	; select bank0
  5705  0406  066D               	xorwf	??_setRF_Main,w
  5706  0407  397F               	andlw	-129
  5707  0408  066D               	xorwf	??_setRF_Main,w
  5708  0409  0021               	movlb	1	; select bank1
  5709  040A  00BC               	movwf	_RF1^(0+128)
  5710                           
  5711                           ;RF_Control_B1.c: 65: } else {
  5712  040B  2C0E               	goto	l1791
  5713  040C                     l1790:	
  5714                           
  5715                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  5716  040C  0021               	movlb	1	; select bank1
  5717  040D  13BC               	bcf	_RF1^(0+128),7
  5718  040E                     l1791:	
  5719                           
  5720                           ;RF_Control_B1.c: 70: }
  5721                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  5722  040E  1BBC               	btfsc	_RF1^(0+128),7
  5723  040F  1B3C               	btfsc	_RF1^(0+128),6
  5724  0410  2C16               	goto	l1792
  5725                           
  5726                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  5727  0411  01BE               	clrf	(_RF1^(0+128)+2)
  5728  0412  01BF               	clrf	((_RF1+1)^(0+128)+2)
  5729                           
  5730                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  5731  0413  14BD               	bsf	(_RF1^(0+128)+1),1
  5732                           
  5733                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  5734  0414  11BC               	bcf	_RF1^(0+128),3
  5735                           
  5736                           ;RF_Control_B1.c: 76: } else {
  5737  0415  0008               	return
  5738  0416                     l1792:	
  5739                           
  5740                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  5741  0416  18BD               	btfsc	(_RF1^(0+128)+1),1
  5742  0417  1B3C               	btfsc	_RF1^(0+128),6
  5743  0418  2C2D               	goto	l6767
  5744                           
  5745                           ;RF_Control_B1.c: 78: RF1.Count++;
  5746  0419  3001               	movlw	1
  5747  041A  07BE               	addwf	(_RF1^(0+128)+2),f
  5748  041B  3000               	movlw	0
  5749  041C  3DBF               	addwfc	((_RF1+1)^(0+128)+2),f
  5750                           
  5751                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  5752  041D  3002               	movlw	2
  5753  041E  3EBC               	addlw	_RF1& (0+255)
  5754  041F  0086               	movwf	6
  5755  0420  0187               	clrf	7
  5756  0421  3F40               	moviw [0]fsr1
  5757  0422  0643               	xorwf	(_RF1^(0+128)+7),w
  5758  0423  1D03               	skipz
  5759  0424  2C27               	goto	u6185
  5760  0425  3F41               	moviw [1]fsr1
  5761  0426  0644               	xorwf	((_RF1+1)^(0+128)+7),w
  5762  0427                     u6185:	
  5763  0427  1D03               	skipz
  5764  0428  2C9C               	goto	l6819
  5765                           
  5766                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  5767  0429  01BE               	clrf	(_RF1^(0+128)+2)
  5768  042A  01BF               	clrf	((_RF1+1)^(0+128)+2)
  5769                           
  5770                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  5771  042B  10BD               	bcf	(_RF1^(0+128)+1),1
  5772                           
  5773                           ;RF_Control_B1.c: 82: }
  5774                           ;RF_Control_B1.c: 83: } else {
  5775  042C  2C9C               	goto	l6819
  5776  042D                     l6767:	
  5777                           
  5778                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  5779  042D  01BE               	clrf	(_RF1^(0+128)+2)
  5780  042E  01BF               	clrf	((_RF1+1)^(0+128)+2)
  5781                           
  5782                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  5783  042F  10BD               	bcf	(_RF1^(0+128)+1),1
  5784                           
  5785                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  5786  0430  193C               	btfsc	_RF1^(0+128),2
  5787  0431  1B3C               	btfsc	_RF1^(0+128),6
  5788  0432  2C4E               	goto	l1797
  5789                           
  5790                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  5791  0433  113C               	bcf	_RF1^(0+128),2
  5792                           
  5793                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  5794  0434  11BC               	bcf	_RF1^(0+128),3
  5795                           
  5796                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  5797  0435  10BC               	bcf	_RF1^(0+128),1
  5798                           
  5799                           ;RF_Control_B1.c: 92: CC2500_ReadStatus(0x3B);
  5800  0436  303B               	movlw	59
  5801  0437  3193  23AD  3183   	fcall	_CC2500_ReadStatus
  5802                           
  5803                           ;RF_Control_B1.c: 93: if (s_data != 0) {
  5804  043A  0021               	movlb	1	; select bank1
  5805  043B  085E               	movf	_s_data^(0+128),w
  5806  043C  1903               	btfsc	3,2
  5807  043D  2C4A               	goto	l1798
  5808                           
  5809                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  5810  043E  3036               	movlw	54
  5811  043F  3192  2262  3183   	fcall	_CC2500_WriteCommand
  5812                           
  5813                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x3B);
  5814  0442  303B               	movlw	59
  5815  0443  3192  2262  3183   	fcall	_CC2500_WriteCommand
  5816                           
  5817                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x3A);
  5818  0446  303A               	movlw	58
  5819  0447  3192  2262  3183   	fcall	_CC2500_WriteCommand
  5820  044A                     l1798:	
  5821                           
  5822                           ;RF_Control_B1.c: 97: }
  5823                           ;RF_Control_B1.c: 98: CC2500_TxData();
  5824  044A  318D  2551  3183   	fcall	_CC2500_TxData
  5825                           
  5826                           ;RF_Control_B1.c: 100: } else {
  5827  044D  2C9C               	goto	l6819
  5828  044E                     l1797:	
  5829                           
  5830                           ;RF_Control_B1.c: 102: if (RF1.RxStatus == 1) {
  5831  044E  1DBC               	btfss	_RF1^(0+128),3
  5832  044F  2C87               	goto	l1800
  5833                           
  5834                           ;RF_Control_B1.c: 104: CC2500_RxData();
  5835  0450  318E  261E  3183   	fcall	_CC2500_RxData
  5836                           
  5837                           ;RF_Control_B1.c: 105: if (RF1.ReceiveGO == 1) {
  5838  0453  0021               	movlb	1	; select bank1
  5839  0454  1CBC               	btfss	_RF1^(0+128),1
  5840  0455  2C9C               	goto	l6819
  5841                           
  5842                           ;RF_Control_B1.c: 106: RF1.ReceiveGO = 0;
  5843  0456  10BC               	bcf	_RF1^(0+128),1
  5844                           
  5845                           ;RF_Control_B1.c: 107: RF1.Correction = 0;
  5846  0457  12BD               	bcf	(_RF1^(0+128)+1),5
  5847                           
  5848                           ;RF_Control_B1.c: 108: RF1.CorrectionCounter = 0;
  5849  0458  01C6               	clrf	(_RF1^(0+128)+10)
  5850  0459  01C7               	clrf	((_RF1+1)^(0+128)+10)
  5851                           
  5852                           ;RF_Control_B1.c: 117: getRxData();
  5853  045A  318E  268F  3183   	fcall	_getRxData
  5854                           
  5855                           ;RF_Control_B1.c: 120: RF1.Run = 1;
  5856  045D  0021               	movlb	1	; select bank1
  5857  045E  14BD               	bsf	(_RF1^(0+128)+1),1
  5858                           
  5859                           ;RF_Control_B1.c: 122: if (RF1.Checked == 1) {
  5860  045F  1DBD               	btfss	(_RF1^(0+128)+1),3
  5861  0460  2C6E               	goto	l6803
  5862                           
  5863                           ;RF_Control_B1.c: 123: if (RF1.RunTime > 10) {
  5864  0461  3000               	movlw	0
  5865  0462  0244               	subwf	((_RF1+1)^(0+128)+7),w
  5866  0463  300B               	movlw	11
  5867  0464  1903               	skipnz
  5868  0465  0243               	subwf	(_RF1^(0+128)+7),w
  5869  0466  1C03               	skipc
  5870  0467  2C6C               	goto	l6801
  5871                           
  5872                           ;RF_Control_B1.c: 124: RF1.RunTime = 10;
  5873  0468  300A               	movlw	10
  5874  0469  00C3               	movwf	(_RF1^(0+128)+7)
  5875  046A  3000               	movlw	0
  5876  046B  00C4               	movwf	(_RF1^(0+128)+8)
  5877  046C                     l6801:	
  5878                           
  5879                           ;RF_Control_B1.c: 125: }
  5880                           ;RF_Control_B1.c: 126: RF1.CheckCount = 0;
  5881  046C  01C0               	clrf	(_RF1^(0+128)+4)
  5882                           
  5883                           ;RF_Control_B1.c: 127: } else {
  5884  046D  2C9C               	goto	l6819
  5885  046E                     l6803:	
  5886                           
  5887                           ;RF_Control_B1.c: 128: RF1.CheckCount++;
  5888  046E  3001               	movlw	1
  5889  046F  0020               	movlb	0	; select bank0
  5890  0470  00ED               	movwf	??_setRF_Main
  5891  0471  086D               	movf	??_setRF_Main,w
  5892  0472  0021               	movlb	1	; select bank1
  5893  0473  07C0               	addwf	(_RF1^(0+128)+4),f
  5894                           
  5895                           ;RF_Control_B1.c: 129: if (RF1.CheckCount == 2) {
  5896  0474  0840               	movf	(_RF1^(0+128)+4),w
  5897  0475  3A02               	xorlw	2
  5898  0476  1D03               	skipz
  5899  0477  2C9C               	goto	l6819
  5900                           
  5901                           ;RF_Control_B1.c: 130: RF1.CheckCount = 0;
  5902  0478  01C0               	clrf	(_RF1^(0+128)+4)
  5903                           
  5904                           ;RF_Control_B1.c: 131: RF1.CheckedCounter = 0;
  5905  0479  01C1               	clrf	(_RF1^(0+128)+5)
  5906  047A  01C2               	clrf	((_RF1+1)^(0+128)+5)
  5907                           
  5908                           ;RF_Control_B1.c: 132: if (RF1.RunTime < 200) {
  5909  047B  3000               	movlw	0
  5910  047C  0244               	subwf	((_RF1+1)^(0+128)+7),w
  5911  047D  30C8               	movlw	200
  5912  047E  1903               	skipnz
  5913  047F  0243               	subwf	(_RF1^(0+128)+7),w
  5914  0480  1803               	skipnc
  5915  0481  2C9C               	goto	l6819
  5916                           
  5917                           ;RF_Control_B1.c: 133: RF1.RunTime += 10;
  5918  0482  300A               	movlw	10
  5919  0483  07C3               	addwf	(_RF1^(0+128)+7),f
  5920  0484  3000               	movlw	0
  5921  0485  3DC4               	addwfc	((_RF1+1)^(0+128)+7),f
  5922                           
  5923                           ;RF_Control_B1.c: 134: }
  5924                           ;RF_Control_B1.c: 135: }
  5925                           ;RF_Control_B1.c: 136: }
  5926                           ;RF_Control_B1.c: 137: }
  5927                           ;RF_Control_B1.c: 138: } else {
  5928  0486  2C9C               	goto	l6819
  5929  0487                     l1800:	
  5930                           
  5931                           ;RF_Control_B1.c: 140: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  5932  0487  1DBC               	btfss	_RF1^(0+128),3
  5933  0488  18BC               	btfsc	_RF1^(0+128),1
  5934  0489  2C9C               	goto	l6819
  5935                           
  5936                           ;RF_Control_B1.c: 141: RF1.RxStatus = 1;
  5937  048A  15BC               	bsf	_RF1^(0+128),3
  5938                           
  5939                           ;RF_Control_B1.c: 142: RF1.Correction = 1;
  5940  048B  16BD               	bsf	(_RF1^(0+128)+1),5
  5941                           
  5942                           ;RF_Control_B1.c: 144: CC2500_WriteCommand(0x36);
  5943  048C  3036               	movlw	54
  5944  048D  3192  2262  3183   	fcall	_CC2500_WriteCommand
  5945                           
  5946                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x3B);
  5947  0490  303B               	movlw	59
  5948  0491  3192  2262  3183   	fcall	_CC2500_WriteCommand
  5949                           
  5950                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x3A);
  5951  0494  303A               	movlw	58
  5952  0495  3192  2262  3183   	fcall	_CC2500_WriteCommand
  5953                           
  5954                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x34);
  5955  0498  3034               	movlw	52
  5956  0499  3192  2262  3183   	fcall	_CC2500_WriteCommand
  5957  049C                     l6819:	
  5958                           
  5959                           ;RF_Control_B1.c: 148: }
  5960                           ;RF_Control_B1.c: 150: }
  5961                           ;RF_Control_B1.c: 151: }
  5962                           ;RF_Control_B1.c: 152: }
  5963                           ;RF_Control_B1.c: 153: if (RF1.RxStatus == 1) {
  5964  049C  0021               	movlb	1	; select bank1
  5965  049D  1DBC               	btfss	_RF1^(0+128),3
  5966  049E  2CBD               	goto	l6831
  5967                           
  5968                           ;RF_Control_B1.c: 154: RF1.CheckedCounter++;
  5969  049F  3001               	movlw	1
  5970  04A0  07C1               	addwf	(_RF1^(0+128)+5),f
  5971  04A1  3000               	movlw	0
  5972  04A2  3DC2               	addwfc	((_RF1+1)^(0+128)+5),f
  5973                           
  5974                           ;RF_Control_B1.c: 155: if (RF1.CheckedCounter == 100) {
  5975  04A3  3005               	movlw	5
  5976  04A4  3EBC               	addlw	_RF1& (0+255)
  5977  04A5  0086               	movwf	6
  5978  04A6  0187               	clrf	7
  5979  04A7  3F40               	moviw [0]fsr1
  5980  04A8  3A64               	xorlw	100
  5981  04A9  1D03               	skipz
  5982  04AA  2CAD               	goto	u6315
  5983  04AB  3F41               	moviw [1]fsr1
  5984  04AC  3A00               	xorlw	0
  5985  04AD                     u6315:	
  5986  04AD  1D03               	skipz
  5987  04AE  2CBD               	goto	l6831
  5988                           
  5989                           ;RF_Control_B1.c: 156: RF1.CheckedCounter = 0;
  5990  04AF  01C1               	clrf	(_RF1^(0+128)+5)
  5991  04B0  01C2               	clrf	((_RF1+1)^(0+128)+5)
  5992                           
  5993                           ;RF_Control_B1.c: 157: RF1.CheckCount = 0;
  5994  04B1  01C0               	clrf	(_RF1^(0+128)+4)
  5995                           
  5996                           ;RF_Control_B1.c: 158: if (RF1.RunTime > 10) {
  5997  04B2  3000               	movlw	0
  5998  04B3  0244               	subwf	((_RF1+1)^(0+128)+7),w
  5999  04B4  300B               	movlw	11
  6000  04B5  1903               	skipnz
  6001  04B6  0243               	subwf	(_RF1^(0+128)+7),w
  6002  04B7  1C03               	skipc
  6003  04B8  2CBD               	goto	l6831
  6004                           
  6005                           ;RF_Control_B1.c: 159: RF1.RunTime -= 10;
  6006  04B9  300A               	movlw	10
  6007  04BA  02C3               	subwf	(_RF1^(0+128)+7),f
  6008  04BB  3000               	movlw	0
  6009  04BC  3BC4               	subwfb	((_RF1+1)^(0+128)+7),f
  6010  04BD                     l6831:	
  6011                           
  6012                           ;RF_Control_B1.c: 160: }
  6013                           ;RF_Control_B1.c: 161: }
  6014                           ;RF_Control_B1.c: 162: }
  6015                           ;RF_Control_B1.c: 163: if (RF1.Correction == 1) {
  6016  04BD  1EBD               	btfss	(_RF1^(0+128)+1),5
  6017  04BE  0008               	return
  6018                           
  6019                           ;RF_Control_B1.c: 164: RF1.CorrectionCounter++;
  6020  04BF  3001               	movlw	1
  6021  04C0  07C6               	addwf	(_RF1^(0+128)+10),f
  6022  04C1  3000               	movlw	0
  6023  04C2  3DC7               	addwfc	((_RF1+1)^(0+128)+10),f
  6024                           
  6025                           ;RF_Control_B1.c: 165: if (RF1.CorrectionCounter >= 30000) {
  6026  04C3  3075               	movlw	117
  6027  04C4  0247               	subwf	((_RF1+1)^(0+128)+10),w
  6028  04C5  3030               	movlw	48
  6029  04C6  1903               	skipnz
  6030  04C7  0246               	subwf	(_RF1^(0+128)+10),w
  6031  04C8  1C03               	skipc
  6032  04C9  0008               	return
  6033                           
  6034                           ;RF_Control_B1.c: 166: RF1.CorrectionCounter = 0;
  6035  04CA  01C6               	clrf	(_RF1^(0+128)+10)
  6036  04CB  01C7               	clrf	((_RF1+1)^(0+128)+10)
  6037                           
  6038                           ;RF_Control_B1.c: 167: RF1.RxStatus = 0;
  6039  04CC  11BC               	bcf	_RF1^(0+128),3
  6040                           
  6041                           ;RF_Control_B1.c: 168: RF1.ReceiveGO = 0;
  6042  04CD  10BC               	bcf	_RF1^(0+128),1
  6043                           
  6044                           ;RF_Control_B1.c: 169: }
  6045                           ;RF_Control_B1.c: 170: }
  6046                           ;RF_Control_B1.c: 171: }
  6047                           ;RF_Control_B1.c: 172: }
  6048                           ;RF_Control_B1.c: 179: } else {
  6049  04CE  0008               	return
  6050  04CF                     l1788:	
  6051                           
  6052                           ;RF_Control_B1.c: 180: if (myMain.PowerON == 1) {
  6053  04CF  1C20               	btfss	_myMain^(0+128),0
  6054  04D0  0008               	return
  6055                           
  6056                           ;RF_Control_B1.c: 181: RF1.Enable = 1;
  6057  04D1  143C               	bsf	_RF1^(0+128),0
  6058  04D2  0008               	return
  6059  04D3                     __end_of_setRF_Main:	
  6060                           
  6061                           	psect	text18
  6062  0E8F                     __ptext18:	
  6063 ;; *************** function _getRxData *****************
  6064 ;; Defined at:
  6065 ;;		line 269 in file "../src/RF_Control_B1.c"
  6066 ;; Parameters:    Size  Location     Type
  6067 ;;		None
  6068 ;; Auto vars:     Size  Location     Type
  6069 ;;  error           1   76[BANK0 ] unsigned char 
  6070 ;; Return value:  Size  Location     Type
  6071 ;;		None               void
  6072 ;; Registers used:
  6073 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6074 ;; Tracked objects:
  6075 ;;		On entry : 0/0
  6076 ;;		On exit  : 0/0
  6077 ;;		Unchanged: 0/0
  6078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6080 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6081 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6082 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6083 ;;Total ram usage:        2 bytes
  6084 ;; Hardware stack levels used:    1
  6085 ;; Hardware stack levels required when called:   12
  6086 ;; This function calls:
  6087 ;;		_getMain_All_Error_Status
  6088 ;;		_setControl_Lights_Table
  6089 ;;		_setLog_Code
  6090 ;; This function is called by:
  6091 ;;		_setRF_Main
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           
  6096                           ;psect for function _getRxData
  6097  0E8F                     _getRxData:	
  6098                           
  6099                           ;RF_Control_B1.c: 270: char error = getMain_All_Error_Status(0);
  6100                           
  6101                           ;incstack = 0
  6102                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6103  0E8F  3000               	movlw	0
  6104  0E90  319F  272D  318E   	fcall	_getMain_All_Error_Status
  6105  0E93  0020               	movlb	0	; select bank0
  6106  0E94  00EB               	movwf	??_getRxData
  6107  0E95  086B               	movf	??_getRxData,w
  6108  0E96  00EC               	movwf	getRxData@error
  6109                           
  6110                           ;RF_Control_B1.c: 271: if (error == 0) {
  6111  0E97  08EC               	movf	getRxData@error,f
  6112  0E98  1D03               	skipz
  6113  0E99  0008               	return
  6114                           
  6115                           ;RF_Control_B1.c: 272: if (RF1.Learn == 1) {
  6116  0E9A  0021               	movlb	1	; select bank1
  6117  0E9B  1F3C               	btfss	_RF1^(0+128),6
  6118  0E9C  2EAD               	goto	l6367
  6119                           
  6120                           ;RF_Control_B1.c: 273: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6121  0E9D  0022               	movlb	2	; select bank2
  6122  0E9E  08A0               	movf	_RF_Data^(0+256),f
  6123  0E9F  1D03               	skipz
  6124  0EA0  2EAA               	goto	l1839
  6125  0EA1  0821               	movf	(_RF_Data^(0+256)+1),w
  6126  0EA2  3A64               	xorlw	100
  6127  0EA3  1D03               	skipz
  6128  0EA4  2EAA               	goto	l1839
  6129                           
  6130                           ;RF_Control_B1.c: 274: setLog_Code();
  6131  0EA5  3195  25AB         	fcall	_setLog_Code
  6132                           
  6133                           ;RF_Control_B1.c: 275: RF1.Checked = 1;
  6134  0EA7  0021               	movlb	1	; select bank1
  6135  0EA8  15BD               	bsf	(_RF1^(0+128)+1),3
  6136                           
  6137                           ;RF_Control_B1.c: 276: } else {
  6138  0EA9  0008               	return
  6139  0EAA                     l1839:	
  6140                           
  6141                           ;RF_Control_B1.c: 277: RF1.Checked = 0;
  6142  0EAA  0021               	movlb	1	; select bank1
  6143  0EAB  11BD               	bcf	(_RF1^(0+128)+1),3
  6144                           
  6145                           ;RF_Control_B1.c: 278: }
  6146                           ;RF_Control_B1.c: 279: } else {
  6147  0EAC  0008               	return
  6148  0EAD                     l6367:	
  6149                           
  6150                           ;RF_Control_B1.c: 280: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6151  0EAD  0022               	movlb	2	; select bank2
  6152  0EAE  08A0               	movf	_RF_Data^(0+256),f
  6153  0EAF  1D03               	skipz
  6154  0EB0  2EEB               	goto	l6389
  6155  0EB1  0821               	movf	(_RF_Data^(0+256)+1),w
  6156  0EB2  3A02               	xorlw	2
  6157  0EB3  1D03               	skipz
  6158  0EB4  2EEB               	goto	l6389
  6159                           
  6160                           ;RF_Control_B1.c: 282: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6161  0EB5  082C               	movf	(_RF_Data^(0+256)+12),w
  6162  0EB6  3AFF               	xorlw	255
  6163  0EB7  1D03               	skipz
  6164  0EB8  2EC5               	goto	l6379
  6165  0EB9  082D               	movf	(_RF_Data^(0+256)+13),w
  6166  0EBA  3AFF               	xorlw	255
  6167  0EBB  1D03               	skipz
  6168  0EBC  2EC5               	goto	l6379
  6169  0EBD  082E               	movf	(_RF_Data^(0+256)+14),w
  6170  0EBE  3AFF               	xorlw	255
  6171  0EBF  1D03               	skipz
  6172  0EC0  2EC5               	goto	l6379
  6173                           
  6174                           ;RF_Control_B1.c: 283: __nop();
  6175  0EC1  0000               	nop
  6176                           
  6177                           ;RF_Control_B1.c: 284: RF1.Checked = 0;
  6178  0EC2  0021               	movlb	1	; select bank1
  6179  0EC3  11BD               	bcf	(_RF1^(0+128)+1),3
  6180                           
  6181                           ;RF_Control_B1.c: 285: } else {
  6182  0EC4  0008               	return
  6183  0EC5                     l6379:	
  6184                           
  6185                           ;RF_Control_B1.c: 286: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6186  0EC5  0020               	movlb	0	; select bank0
  6187  0EC6  086E               	movf	_product,w
  6188  0EC7  3E0C               	addlw	12
  6189  0EC8  0086               	movwf	6
  6190  0EC9  3001               	movlw	1	; select bank2/3
  6191  0ECA  0087               	movwf	7
  6192  0ECB  0022               	movlb	2	; select bank2
  6193  0ECC  082C               	movf	(_RF_Data^(0+256)+12),w
  6194  0ECD  0601               	xorwf	1,w
  6195  0ECE  1D03               	skipz
  6196  0ECF  0008               	return
  6197  0ED0  0020               	movlb	0	; select bank0
  6198  0ED1  086E               	movf	_product,w
  6199  0ED2  3E0D               	addlw	13
  6200  0ED3  0086               	movwf	6
  6201  0ED4  3001               	movlw	1	; select bank2/3
  6202  0ED5  0087               	movwf	7
  6203  0ED6  0022               	movlb	2	; select bank2
  6204  0ED7  082D               	movf	(_RF_Data^(0+256)+13),w
  6205  0ED8  0601               	xorwf	1,w
  6206  0ED9  1D03               	skipz
  6207  0EDA  0008               	return
  6208  0EDB  0020               	movlb	0	; select bank0
  6209  0EDC  086E               	movf	_product,w
  6210  0EDD  3E0E               	addlw	14
  6211  0EDE  0086               	movwf	6
  6212  0EDF  3001               	movlw	1	; select bank2/3
  6213  0EE0  0087               	movwf	7
  6214  0EE1  0022               	movlb	2	; select bank2
  6215  0EE2  082E               	movf	(_RF_Data^(0+256)+14),w
  6216  0EE3  0601               	xorwf	1,w
  6217  0EE4  1D03               	skipz
  6218  0EE5  0008               	return
  6219                           
  6220                           ;RF_Control_B1.c: 287: setControl_Lights_Table();
  6221  0EE6  318D  25B6         	fcall	_setControl_Lights_Table
  6222                           
  6223                           ;RF_Control_B1.c: 288: RF1.Checked = 1;
  6224  0EE8  0021               	movlb	1	; select bank1
  6225  0EE9  15BD               	bsf	(_RF1^(0+128)+1),3
  6226                           
  6227                           ;RF_Control_B1.c: 289: }
  6228                           ;RF_Control_B1.c: 290: }
  6229                           ;RF_Control_B1.c: 291: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6230  0EEA  0008               	return
  6231  0EEB                     l6389:	
  6232  0EEB  0022               	movlb	2	; select bank2
  6233  0EEC  0820               	movf	_RF_Data^(0+256),w
  6234  0EED  3AFF               	xorlw	255
  6235  0EEE  1D03               	skipz
  6236  0EEF  2EF6               	goto	l6395
  6237  0EF0  0821               	movf	(_RF_Data^(0+256)+1),w
  6238  0EF1  3A02               	xorlw	2
  6239  0EF2  1D03               	skipz
  6240  0EF3  2EF6               	goto	l6395
  6241                           
  6242                           ;RF_Control_B1.c: 292: __nop();
  6243  0EF4  0000               	nop
  6244                           
  6245                           ;RF_Control_B1.c: 293: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6246  0EF5  0008               	return
  6247  0EF6                     l6395:	
  6248  0EF6  0022               	movlb	2	; select bank2
  6249  0EF7  08A0               	movf	_RF_Data^(0+256),f
  6250  0EF8  1D03               	skipz
  6251  0EF9  2F00               	goto	l1849
  6252  0EFA  0821               	movf	(_RF_Data^(0+256)+1),w
  6253  0EFB  3A65               	xorlw	101
  6254  0EFC  1D03               	skipz
  6255  0EFD  2F00               	goto	l1849
  6256                           
  6257                           ;RF_Control_B1.c: 294: __nop();
  6258  0EFE  0000               	nop
  6259                           
  6260                           ;RF_Control_B1.c: 295: } else {
  6261  0EFF  0008               	return
  6262  0F00                     l1849:	
  6263                           
  6264                           ;RF_Control_B1.c: 296: RF1.Checked = 0;
  6265  0F00  0021               	movlb	1	; select bank1
  6266  0F01  11BD               	bcf	(_RF1^(0+128)+1),3
  6267                           
  6268                           ;RF_Control_B1.c: 297: }
  6269                           ;RF_Control_B1.c: 302: }
  6270                           ;RF_Control_B1.c: 303: } else {
  6271  0F02  0008               	return
  6272  0F03                     __end_of_getRxData:	
  6273                           ;RF_Control_B1.c: 304: ;
  6274                           
  6275                           
  6276                           	psect	text19
  6277  15AB                     __ptext19:	
  6278 ;; *************** function _setLog_Code *****************
  6279 ;; Defined at:
  6280 ;;		line 309 in file "../src/RF_Control_B1.c"
  6281 ;; Parameters:    Size  Location     Type
  6282 ;;		None
  6283 ;; Auto vars:     Size  Location     Type
  6284 ;;		None
  6285 ;; Return value:  Size  Location     Type
  6286 ;;		None               void
  6287 ;; Registers used:
  6288 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6289 ;; Tracked objects:
  6290 ;;		On entry : 0/0
  6291 ;;		On exit  : 0/0
  6292 ;;		Unchanged: 0/0
  6293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6296 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6297 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6298 ;;Total ram usage:        1 bytes
  6299 ;; Hardware stack levels used:    1
  6300 ;; Hardware stack levels required when called:    7
  6301 ;; This function calls:
  6302 ;;		_setBuz
  6303 ;;		_setMemory_LoopSave
  6304 ;;		_setMemory_Modify
  6305 ;; This function is called by:
  6306 ;;		_getRxData
  6307 ;; This function uses a non-reentrant model
  6308 ;;
  6309                           
  6310                           
  6311                           ;psect for function _setLog_Code
  6312  15AB                     _setLog_Code:	
  6313                           
  6314                           ;RF_Control_B1.c: 310: RF1.Learn = 0;
  6315                           
  6316                           ;incstack = 0
  6317                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6318  15AB  0021               	movlb	1	; select bank1
  6319  15AC  133C               	bcf	_RF1^(0+128),6
  6320                           
  6321                           ;RF_Control_B1.c: 311: product->Data[12]=RF_Data[12];
  6322  15AD  0022               	movlb	2	; select bank2
  6323  15AE  082C               	movf	(_RF_Data^(0+256)+12),w
  6324  15AF  0020               	movlb	0	; select bank0
  6325  15B0  00AD               	movwf	??_setLog_Code
  6326  15B1  086E               	movf	_product,w
  6327  15B2  3E0C               	addlw	12
  6328  15B3  0086               	movwf	6
  6329  15B4  3001               	movlw	1	; select bank2/3
  6330  15B5  0087               	movwf	7
  6331  15B6  082D               	movf	??_setLog_Code,w
  6332  15B7  0081               	movwf	1
  6333                           
  6334                           ;RF_Control_B1.c: 312: product->Data[13]=RF_Data[13];
  6335  15B8  0022               	movlb	2	; select bank2
  6336  15B9  082D               	movf	(_RF_Data^(0+256)+13),w
  6337  15BA  0020               	movlb	0	; select bank0
  6338  15BB  00AD               	movwf	??_setLog_Code
  6339  15BC  086E               	movf	_product,w
  6340  15BD  3E0D               	addlw	13
  6341  15BE  0086               	movwf	6
  6342  15BF  3001               	movlw	1	; select bank2/3
  6343  15C0  0087               	movwf	7
  6344  15C1  082D               	movf	??_setLog_Code,w
  6345  15C2  0081               	movwf	1
  6346                           
  6347                           ;RF_Control_B1.c: 313: product->Data[14]=RF_Data[14];
  6348  15C3  0022               	movlb	2	; select bank2
  6349  15C4  082E               	movf	(_RF_Data^(0+256)+14),w
  6350  15C5  0020               	movlb	0	; select bank0
  6351  15C6  00AD               	movwf	??_setLog_Code
  6352  15C7  086E               	movf	_product,w
  6353  15C8  3E0E               	addlw	14
  6354  15C9  0086               	movwf	6
  6355  15CA  3001               	movlw	1	; select bank2/3
  6356  15CB  0087               	movwf	7
  6357  15CC  082D               	movf	??_setLog_Code,w
  6358  15CD  0081               	movwf	1
  6359                           
  6360                           ;RF_Control_B1.c: 314: setBuz(1, 100);
  6361  15CE  3064               	movlw	100
  6362  15CF  00A9               	movwf	setBuz@time
  6363  15D0  3000               	movlw	0
  6364  15D1  00AA               	movwf	setBuz@time+1
  6365  15D2  3001               	movlw	1
  6366  15D3  318A  226C  3195   	fcall	_setBuz
  6367                           
  6368                           ;RF_Control_B1.c: 315: if (myMain.First == 1) {
  6369  15D6  0021               	movlb	1	; select bank1
  6370  15D7  1EA0               	btfss	_myMain^(0+128),5
  6371  15D8  2DDD               	goto	l1855
  6372                           
  6373                           ;RF_Control_B1.c: 316: setMemory_LoopSave(1);
  6374  15D9  3001               	movlw	1
  6375  15DA  3191  2156  3195   	fcall	_setMemory_LoopSave
  6376  15DD                     l1855:	
  6377                           
  6378                           ;RF_Control_B1.c: 317: }
  6379                           ;RF_Control_B1.c: 318: setMemory_Modify(1);
  6380  15DD  3001               	movlw	1
  6381  15DE  3191  2143         	fcall	_setMemory_Modify
  6382  15E0  0008               	return
  6383  15E1                     __end_of_setLog_Code:	
  6384                           
  6385                           	psect	text20
  6386  1156                     __ptext20:	
  6387 ;; *************** function _setMemory_LoopSave *****************
  6388 ;; Defined at:
  6389 ;;		line 1006 in file "../src/MCU_B1.c"
  6390 ;; Parameters:    Size  Location     Type
  6391 ;;  command         1    wreg     unsigned char 
  6392 ;; Auto vars:     Size  Location     Type
  6393 ;;  command         1    1[BANK0 ] unsigned char 
  6394 ;; Return value:  Size  Location     Type
  6395 ;;		None               void
  6396 ;; Registers used:
  6397 ;;		wreg, status,2, status,0
  6398 ;; Tracked objects:
  6399 ;;		On entry : 0/0
  6400 ;;		On exit  : 0/0
  6401 ;;		Unchanged: 0/0
  6402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6404 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6405 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6406 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6407 ;;Total ram usage:        2 bytes
  6408 ;; Hardware stack levels used:    1
  6409 ;; Hardware stack levels required when called:    5
  6410 ;; This function calls:
  6411 ;;		Nothing
  6412 ;; This function is called by:
  6413 ;;		_setLog_Code
  6414 ;; This function uses a non-reentrant model
  6415 ;;
  6416                           
  6417                           
  6418                           ;psect for function _setMemory_LoopSave
  6419  1156                     _setMemory_LoopSave:	
  6420                           
  6421                           ;incstack = 0
  6422                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  6423                           ;setMemory_LoopSave@command stored from wreg
  6424  1156  0020               	movlb	0	; select bank0
  6425  1157  00A1               	movwf	setMemory_LoopSave@command
  6426                           
  6427                           ;MCU_B1.c: 1007: Memory.LoopSave = command == 1 ? 1 : 0;
  6428  1158  0821               	movf	setMemory_LoopSave@command,w
  6429  1159  3A01               	xorlw	1
  6430  115A  3000               	movlw	0
  6431  115B  1903               	skipnz
  6432  115C  3001               	movlw	1
  6433  115D  00A0               	movwf	??_setMemory_LoopSave
  6434  115E  0DA0               	rlf	??_setMemory_LoopSave,f
  6435  115F  0DA0               	rlf	??_setMemory_LoopSave,f
  6436  1160  0023               	movlb	3	; select bank3
  6437  1161  0844               	movf	(_Memory^(0+384)+36),w
  6438  1162  0020               	movlb	0	; select bank0
  6439  1163  0620               	xorwf	??_setMemory_LoopSave,w
  6440  1164  39FB               	andlw	-5
  6441  1165  0620               	xorwf	??_setMemory_LoopSave,w
  6442  1166  0023               	movlb	3	; select bank3
  6443  1167  00C4               	movwf	(_Memory^(0+384)+36)
  6444  1168  0008               	return
  6445  1169                     __end_of_setMemory_LoopSave:	
  6446                           
  6447                           	psect	text21
  6448  0DB6                     __ptext21:	
  6449 ;; *************** function _setControl_Lights_Table *****************
  6450 ;; Defined at:
  6451 ;;		line 322 in file "../src/RF_Control_B1.c"
  6452 ;; Parameters:    Size  Location     Type
  6453 ;;		None
  6454 ;; Auto vars:     Size  Location     Type
  6455 ;;		None
  6456 ;; Return value:  Size  Location     Type
  6457 ;;		None               void
  6458 ;; Registers used:
  6459 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6460 ;; Tracked objects:
  6461 ;;		On entry : 0/0
  6462 ;;		On exit  : 0/0
  6463 ;;		Unchanged: 0/0
  6464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6469 ;;Total ram usage:        0 bytes
  6470 ;; Hardware stack levels used:    1
  6471 ;; Hardware stack levels required when called:   11
  6472 ;; This function calls:
  6473 ;;		_setBuz
  6474 ;;		_setDimmerLights_ErrorClose
  6475 ;;		_setRFSW_AdjControl
  6476 ;;		_setRFSW_Control
  6477 ;;		_setTxData
  6478 ;; This function is called by:
  6479 ;;		_getRxData
  6480 ;; This function uses a non-reentrant model
  6481 ;;
  6482                           
  6483                           
  6484                           ;psect for function _setControl_Lights_Table
  6485  0DB6                     _setControl_Lights_Table:	
  6486                           
  6487                           ;RF_Control_B1.c: 323: switch (RF_Data[15]) {
  6488                           
  6489                           ;incstack = 0
  6490                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6491  0DB6  2E02               	goto	l5999
  6492  0DB7                     l5973:	
  6493                           ;RF_Control_B1.c: 324: case 0x00:
  6494                           
  6495                           
  6496                           ;RF_Control_B1.c: 326: setDimmerLights_ErrorClose(255);
  6497  0DB7  30FF               	movlw	255
  6498  0DB8  318B  231E  318D   	fcall	_setDimmerLights_ErrorClose
  6499                           
  6500                           ;RF_Control_B1.c: 328: product->Data[9]=0;
  6501  0DBB  0020               	movlb	0	; select bank0
  6502  0DBC  086E               	movf	_product,w
  6503  0DBD  3E09               	addlw	9
  6504  0DBE  0086               	movwf	6
  6505  0DBF  3001               	movlw	1	; select bank2/3
  6506  0DC0  0087               	movwf	7
  6507  0DC1  0181               	clrf	1
  6508                           
  6509                           ;RF_Control_B1.c: 329: product->Data[11]=0;
  6510  0DC2  086E               	movf	_product,w
  6511  0DC3  3E0B               	addlw	11
  6512  0DC4  0086               	movwf	6
  6513  0DC5  3001               	movlw	1	; select bank2/3
  6514  0DC6  0087               	movwf	7
  6515  0DC7  0181               	clrf	1
  6516                           
  6517                           ;RF_Control_B1.c: 330: product->Data[15]=0;
  6518  0DC8  086E               	movf	_product,w
  6519  0DC9  3E0F               	addlw	15
  6520  0DCA  0086               	movwf	6
  6521  0DCB  3001               	movlw	1	; select bank2/3
  6522  0DCC  0087               	movwf	7
  6523  0DCD  0181               	clrf	1
  6524                           
  6525                           ;RF_Control_B1.c: 331: product->Data[17]=0;
  6526  0DCE  086E               	movf	_product,w
  6527  0DCF  3E11               	addlw	17
  6528  0DD0  0086               	movwf	6
  6529  0DD1  3001               	movlw	1	; select bank2/3
  6530  0DD2  0087               	movwf	7
  6531  0DD3  0181               	clrf	1
  6532                           
  6533                           ;RF_Control_B1.c: 332: setBuz(1, 100);
  6534  0DD4  3064               	movlw	100
  6535  0DD5  00A9               	movwf	setBuz@time
  6536  0DD6  3000               	movlw	0
  6537  0DD7  00AA               	movwf	setBuz@time+1
  6538  0DD8  3001               	movlw	1
  6539  0DD9  318A  226C         	fcall	_setBuz
  6540                           
  6541                           ;RF_Control_B1.c: 334: break;
  6542  0DDB  0008               	return
  6543  0DDC                     l5985:	
  6544                           ;RF_Control_B1.c: 335: case 0x20:
  6545                           
  6546                           
  6547                           ;RF_Control_B1.c: 336: product->Data[9]=0;
  6548  0DDC  0020               	movlb	0	; select bank0
  6549  0DDD  086E               	movf	_product,w
  6550  0DDE  3E09               	addlw	9
  6551  0DDF  0086               	movwf	6
  6552  0DE0  3001               	movlw	1	; select bank2/3
  6553  0DE1  0087               	movwf	7
  6554  0DE2  0181               	clrf	1
  6555                           
  6556                           ;RF_Control_B1.c: 337: product->Data[11]=0;
  6557  0DE3  086E               	movf	_product,w
  6558  0DE4  3E0B               	addlw	11
  6559  0DE5  0086               	movwf	6
  6560  0DE6  3001               	movlw	1	; select bank2/3
  6561  0DE7  0087               	movwf	7
  6562  0DE8  0181               	clrf	1
  6563                           
  6564                           ;RF_Control_B1.c: 338: product->Data[17]=0;
  6565  0DE9  086E               	movf	_product,w
  6566  0DEA  3E11               	addlw	17
  6567  0DEB  0086               	movwf	6
  6568  0DEC  3001               	movlw	1	; select bank2/3
  6569  0DED  0087               	movwf	7
  6570  0DEE  0181               	clrf	1
  6571                           
  6572                           ;RF_Control_B1.c: 339: setTxData();
  6573  0DEF  3185  25AF         	fcall	_setTxData
  6574                           
  6575                           ;RF_Control_B1.c: 340: break;
  6576  0DF1  0008               	return
  6577  0DF2                     l5989:	
  6578                           ;RF_Control_B1.c: 341: case 0x01:
  6579                           
  6580                           
  6581                           ;RF_Control_B1.c: 343: setRFSW_Control(1);
  6582  0DF2  3001               	movlw	1
  6583  0DF3  3188  20CC         	fcall	_setRFSW_Control
  6584                           
  6585                           ;RF_Control_B1.c: 345: break;
  6586  0DF5  0008               	return
  6587  0DF6                     l5991:	
  6588                           ;RF_Control_B1.c: 346: case 0x02:
  6589                           
  6590                           
  6591                           ;RF_Control_B1.c: 348: setRFSW_Control(2);
  6592  0DF6  3002               	movlw	2
  6593  0DF7  3188  20CC         	fcall	_setRFSW_Control
  6594                           
  6595                           ;RF_Control_B1.c: 355: break;
  6596                           
  6597                           ;RF_Control_B1.c: 351: case 0x03:
  6598                           
  6599                           ;RF_Control_B1.c: 350: break;
  6600  0DF9  0008               	return
  6601  0DFA                     l5993:	
  6602                           ;RF_Control_B1.c: 356: case 0x11:
  6603                           
  6604                           
  6605                           ;RF_Control_B1.c: 359: setRFSW_AdjControl(1);
  6606  0DFA  3001               	movlw	1
  6607  0DFB  3196  261E         	fcall	_setRFSW_AdjControl
  6608                           
  6609                           ;RF_Control_B1.c: 362: break;
  6610  0DFD  0008               	return
  6611  0DFE                     l5995:	
  6612                           ;RF_Control_B1.c: 363: case 0x21:
  6613                           
  6614                           
  6615                           ;RF_Control_B1.c: 366: setRFSW_AdjControl(2);
  6616  0DFE  3002               	movlw	2
  6617  0DFF  3196  261E         	fcall	_setRFSW_AdjControl
  6618                           
  6619                           ;RF_Control_B1.c: 377: }
  6620                           
  6621                           ;RF_Control_B1.c: 376: break;
  6622                           
  6623                           ;RF_Control_B1.c: 370: case 0x31:
  6624                           
  6625                           ;RF_Control_B1.c: 369: break;
  6626  0E01  0008               	return
  6627  0E02                     l5999:	
  6628  0E02  0022               	movlb	2	; select bank2
  6629  0E03  082F               	movf	(_RF_Data^(0+256)+15),w
  6630                           
  6631                           ; Switch size 1, requested type "space"
  6632                           ; Number of cases is 8, Range of values is 0 to 49
  6633                           ; switch strategies available:
  6634                           ; Name         Instructions Cycles
  6635                           ; simple_byte           25    13 (average)
  6636                           ; direct_byte          106     6 (fixed)
  6637                           ; jumptable            260     6 (fixed)
  6638                           ;	Chosen strategy is simple_byte
  6639  0E04  3A00               	xorlw	0	; case 0
  6640  0E05  1903               	skipnz
  6641  0E06  2DB7               	goto	l5973
  6642  0E07  3A01               	xorlw	1	; case 1
  6643  0E08  1903               	skipnz
  6644  0E09  2DF2               	goto	l5989
  6645  0E0A  3A03               	xorlw	3	; case 2
  6646  0E0B  1903               	skipnz
  6647  0E0C  2DF6               	goto	l5991
  6648  0E0D  3A01               	xorlw	1	; case 3
  6649  0E0E  1903               	skipnz
  6650  0E0F  2E1D               	goto	l1869
  6651  0E10  3A12               	xorlw	18	; case 17
  6652  0E11  1903               	skipnz
  6653  0E12  2DFA               	goto	l5993
  6654  0E13  3A31               	xorlw	49	; case 32
  6655  0E14  1903               	skipnz
  6656  0E15  2DDC               	goto	l5985
  6657  0E16  3A01               	xorlw	1	; case 33
  6658  0E17  1903               	skipnz
  6659  0E18  2DFE               	goto	l5995
  6660  0E19  3A10               	xorlw	16	; case 49
  6661  0E1A  1903               	skipnz
  6662  0E1B  2E1D               	goto	l1869
  6663  0E1C  2E1D               	goto	l1869
  6664  0E1D                     l1869:	
  6665  0E1D  0008               	return
  6666  0E1E                     __end_of_setControl_Lights_Table:	
  6667                           
  6668                           	psect	text22
  6669  08CC                     __ptext22:	
  6670 ;; *************** function _setRFSW_Control *****************
  6671 ;; Defined at:
  6672 ;;		line 460 in file "../src/RF_Control_B1.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;  sw              1    wreg     unsigned char 
  6675 ;; Auto vars:     Size  Location     Type
  6676 ;;  sw              1   19[BANK0 ] unsigned char 
  6677 ;;  status          1   18[BANK0 ] unsigned char 
  6678 ;; Return value:  Size  Location     Type
  6679 ;;		None               void
  6680 ;; Registers used:
  6681 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6682 ;; Tracked objects:
  6683 ;;		On entry : 0/0
  6684 ;;		On exit  : 0/0
  6685 ;;		Unchanged: 0/0
  6686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6688 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6689 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6691 ;;Total ram usage:        3 bytes
  6692 ;; Hardware stack levels used:    1
  6693 ;; Hardware stack levels required when called:    9
  6694 ;; This function calls:
  6695 ;;		_getDelayOff_GO
  6696 ;;		_getDimmerLights_Status
  6697 ;;		_setBuz
  6698 ;;		_setDelayOff_GO
  6699 ;;		_setDimmerLights_SwOff
  6700 ;;		_setDimmerLights_SwOn
  6701 ;;		_setRF_DimmerLights
  6702 ;;		_setTxData
  6703 ;; This function is called by:
  6704 ;;		_setControl_Lights_Table
  6705 ;; This function uses a non-reentrant model
  6706 ;;
  6707                           
  6708                           
  6709                           ;psect for function _setRFSW_Control
  6710  08CC                     _setRFSW_Control:	
  6711                           
  6712                           ;incstack = 0
  6713                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6714                           ;setRFSW_Control@sw stored from wreg
  6715  08CC  0020               	movlb	0	; select bank0
  6716  08CD  00B3               	movwf	setRFSW_Control@sw
  6717                           
  6718                           ;RF_Control_B1.c: 461: char status = 0;
  6719  08CE  01B2               	clrf	setRFSW_Control@status
  6720                           
  6721                           ;RF_Control_B1.c: 464: if (RF_Data[16] == 0x80) {
  6722  08CF  0022               	movlb	2	; select bank2
  6723  08D0  0830               	movf	(_RF_Data^(0+256)+16),w
  6724  08D1  3A80               	xorlw	128
  6725  08D2  1D03               	skipz
  6726  08D3  28FF               	goto	l5807
  6727                           
  6728                           ;RF_Control_B1.c: 465: setDelayOff_GO(sw, 1, RF_Data[17]);
  6729  08D4  0020               	movlb	0	; select bank0
  6730  08D5  01AA               	clrf	setDelayOff_GO@command
  6731  08D6  0AAA               	incf	setDelayOff_GO@command,f
  6732  08D7  0022               	movlb	2	; select bank2
  6733  08D8  0831               	movf	(_RF_Data^(0+256)+17),w
  6734  08D9  0020               	movlb	0	; select bank0
  6735  08DA  00B1               	movwf	??_setRFSW_Control
  6736  08DB  0831               	movf	??_setRFSW_Control,w
  6737  08DC  00AB               	movwf	setDelayOff_GO@value
  6738  08DD  0833               	movf	setRFSW_Control@sw,w
  6739  08DE  318A  2215  3188   	fcall	_setDelayOff_GO
  6740                           
  6741                           ;RF_Control_B1.c: 466: if (getDimmerLights_Status(sw) == 1) {
  6742  08E1  0020               	movlb	0	; select bank0
  6743  08E2  0833               	movf	setRFSW_Control@sw,w
  6744  08E3  3190  2093  3188   	fcall	_getDimmerLights_Status
  6745  08E6  3A01               	xorlw	1
  6746  08E7  1D03               	skipz
  6747  08E8  290E               	goto	l5811
  6748                           
  6749                           ;RF_Control_B1.c: 467: setBuz(1, 100);
  6750  08E9  3064               	movlw	100
  6751  08EA  0020               	movlb	0	; select bank0
  6752  08EB  00A9               	movwf	setBuz@time
  6753  08EC  3000               	movlw	0
  6754  08ED  00AA               	movwf	setBuz@time+1
  6755  08EE  3001               	movlw	1
  6756  08EF  318A  226C  3188   	fcall	_setBuz
  6757                           
  6758                           ;RF_Control_B1.c: 468: status = 1;
  6759  08F2  0020               	movlb	0	; select bank0
  6760  08F3  01B2               	clrf	setRFSW_Control@status
  6761  08F4  0AB2               	incf	setRFSW_Control@status,f
  6762                           
  6763                           ;RF_Control_B1.c: 469: setRF_DimmerLights(sw, 1);
  6764  08F5  01A0               	clrf	setRF_DimmerLights@on
  6765  08F6  0AA0               	incf	setRF_DimmerLights@on,f
  6766  08F7  0833               	movf	setRFSW_Control@sw,w
  6767  08F8  318B  23D3  3188   	fcall	_setRF_DimmerLights
  6768                           
  6769                           ;RF_Control_B1.c: 470: setTxData();
  6770  08FB  3185  25AF  3188   	fcall	_setTxData
  6771                           
  6772                           ;RF_Control_B1.c: 472: }
  6773                           ;RF_Control_B1.c: 473: } else {
  6774  08FE  290E               	goto	l5811
  6775  08FF                     l5807:	
  6776                           
  6777                           ;RF_Control_B1.c: 475: if (getDelayOff_GO(sw) == 1) {
  6778  08FF  0020               	movlb	0	; select bank0
  6779  0900  0833               	movf	setRFSW_Control@sw,w
  6780  0901  3190  2075  3188   	fcall	_getDelayOff_GO
  6781  0904  3A01               	xorlw	1
  6782  0905  1D03               	skipz
  6783  0906  290E               	goto	l5811
  6784                           
  6785                           ;RF_Control_B1.c: 476: setDelayOff_GO(sw, 0, 0);
  6786  0907  0020               	movlb	0	; select bank0
  6787  0908  01AA               	clrf	setDelayOff_GO@command
  6788  0909  01AB               	clrf	setDelayOff_GO@value
  6789  090A  0833               	movf	setRFSW_Control@sw,w
  6790  090B  318A  2215  3188   	fcall	_setDelayOff_GO
  6791  090E                     l5811:	
  6792                           
  6793                           ;RF_Control_B1.c: 478: }
  6794                           ;RF_Control_B1.c: 480: }
  6795                           ;RF_Control_B1.c: 482: if (status == 0) {
  6796  090E  0020               	movlb	0	; select bank0
  6797  090F  08B2               	movf	setRFSW_Control@status,f
  6798  0910  1D03               	skipz
  6799  0911  0008               	return
  6800                           
  6801                           ;RF_Control_B1.c: 484: setDimmerLights_SwOn(sw);
  6802  0912  0833               	movf	setRFSW_Control@sw,w
  6803  0913  3195  25E1  3188   	fcall	_setDimmerLights_SwOn
  6804                           
  6805                           ;RF_Control_B1.c: 485: setDimmerLights_SwOff(sw);
  6806  0916  0020               	movlb	0	; select bank0
  6807  0917  0833               	movf	setRFSW_Control@sw,w
  6808  0918  3197  276D         	fcall	_setDimmerLights_SwOff
  6809  091A  0008               	return
  6810  091B                     __end_of_setRFSW_Control:	
  6811                           
  6812                           	psect	text23
  6813  15E1                     __ptext23:	
  6814 ;; *************** function _setDimmerLights_SwOn *****************
  6815 ;; Defined at:
  6816 ;;		line 517 in file "../src/Dimmer_B1.c"
  6817 ;; Parameters:    Size  Location     Type
  6818 ;;  sw              1    wreg     unsigned char 
  6819 ;; Auto vars:     Size  Location     Type
  6820 ;;  sw              1   15[BANK0 ] unsigned char 
  6821 ;;  idle            1   14[BANK0 ] unsigned char 
  6822 ;; Return value:  Size  Location     Type
  6823 ;;		None               void
  6824 ;; Registers used:
  6825 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6826 ;; Tracked objects:
  6827 ;;		On entry : 0/0
  6828 ;;		On exit  : 0/0
  6829 ;;		Unchanged: 0/0
  6830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6832 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6833 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6834 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6835 ;;Total ram usage:        3 bytes
  6836 ;; Hardware stack levels used:    1
  6837 ;; Hardware stack levels required when called:    7
  6838 ;; This function calls:
  6839 ;;		_DimmerLightsPointSelect
  6840 ;;		_getAll_DimmerLights_AdjGO
  6841 ;;		_setBuz
  6842 ;;		_setDimmerLights_Trigger
  6843 ;; This function is called by:
  6844 ;;		_setRFSW_Control
  6845 ;;		_setSw_Main
  6846 ;; This function uses a non-reentrant model
  6847 ;;
  6848                           
  6849                           
  6850                           ;psect for function _setDimmerLights_SwOn
  6851  15E1                     _setDimmerLights_SwOn:	
  6852                           
  6853                           ;incstack = 0
  6854                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6855                           ;setDimmerLights_SwOn@sw stored from wreg
  6856  15E1  0020               	movlb	0	; select bank0
  6857  15E2  00AF               	movwf	setDimmerLights_SwOn@sw
  6858                           
  6859                           ;Dimmer_B1.c: 518: DimmerLightsPointSelect(sw);
  6860  15E3  082F               	movf	setDimmerLights_SwOn@sw,w
  6861  15E4  3191  2130  3195   	fcall	_DimmerLightsPointSelect
  6862                           
  6863                           ;Dimmer_B1.c: 519: char idle = 0;
  6864  15E7  0020               	movlb	0	; select bank0
  6865  15E8  01AE               	clrf	setDimmerLights_SwOn@idle
  6866                           
  6867                           ;Dimmer_B1.c: 521: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
  6868  15E9  3190  20C5  3195   	fcall	_getAll_DimmerLights_AdjGO
  6869  15EC  3A01               	xorlw	1
  6870  15ED  3000               	movlw	0
  6871  15EE  1903               	skipnz
  6872  15EF  3001               	movlw	1
  6873  15F0  0020               	movlb	0	; select bank0
  6874  15F1  00AD               	movwf	??_setDimmerLights_SwOn
  6875  15F2  082D               	movf	??_setDimmerLights_SwOn,w
  6876  15F3  00AE               	movwf	setDimmerLights_SwOn@idle
  6877                           
  6878                           ;Dimmer_B1.c: 523: if (idle == 0) {
  6879  15F4  08AE               	movf	setDimmerLights_SwOn@idle,f
  6880  15F5  1D03               	skipz
  6881  15F6  0008               	return
  6882                           
  6883                           ;Dimmer_B1.c: 524: DimmerLights->SwFlag = 1;
  6884  15F7  086F               	movf	_DimmerLights,w
  6885  15F8  3E09               	addlw	9
  6886  15F9  0086               	movwf	6
  6887  15FA  3001               	movlw	1	; select bank2/3
  6888  15FB  0087               	movwf	7
  6889  15FC  1701               	bsf	1,6
  6890                           
  6891                           ;Dimmer_B1.c: 525: setBuz(1, 100);
  6892  15FD  3064               	movlw	100
  6893  15FE  00A9               	movwf	setBuz@time
  6894  15FF  3000               	movlw	0
  6895  1600  00AA               	movwf	setBuz@time+1
  6896  1601  3001               	movlw	1
  6897  1602  318A  226C  3195   	fcall	_setBuz
  6898                           
  6899                           ;Dimmer_B1.c: 526: if (DimmerLights->Status == 0) {
  6900  1605  0020               	movlb	0	; select bank0
  6901  1606  086F               	movf	_DimmerLights,w
  6902  1607  0086               	movwf	6
  6903  1608  3001               	movlw	1	; select bank2/3
  6904  1609  0087               	movwf	7
  6905  160A  1A81               	btfsc	1,5
  6906  160B  2E17               	goto	l5613
  6907                           
  6908                           ;Dimmer_B1.c: 527: DimmerLights->Status = 1;
  6909  160C  086F               	movf	_DimmerLights,w
  6910  160D  0086               	movwf	6
  6911  160E  3001               	movlw	1	; select bank2/3
  6912  160F  0087               	movwf	7
  6913  1610  1681               	bsf	1,5
  6914                           
  6915                           ;Dimmer_B1.c: 528: setDimmerLights_Trigger(sw, 1);
  6916  1611  01A2               	clrf	setDimmerLights_Trigger@command
  6917  1612  0AA2               	incf	setDimmerLights_Trigger@command,f
  6918  1613  082F               	movf	setDimmerLights_SwOn@sw,w
  6919  1614  3192  22AE         	fcall	_setDimmerLights_Trigger
  6920                           
  6921                           ;Dimmer_B1.c: 529: } else {
  6922  1616  0008               	return
  6923  1617                     l5613:	
  6924                           
  6925                           ;Dimmer_B1.c: 530: DimmerLights->Status = 0;
  6926  1617  0020               	movlb	0	; select bank0
  6927  1618  086F               	movf	_DimmerLights,w
  6928  1619  0086               	movwf	6
  6929  161A  3001               	movlw	1	; select bank2/3
  6930  161B  0087               	movwf	7
  6931  161C  1281               	bcf	1,5
  6932  161D  0008               	return
  6933  161E                     __end_of_setDimmerLights_SwOn:	
  6934                           
  6935                           	psect	text24
  6936  10C5                     __ptext24:	
  6937 ;; *************** function _getAll_DimmerLights_AdjGO *****************
  6938 ;; Defined at:
  6939 ;;		line 502 in file "../src/Dimmer_B1.c"
  6940 ;; Parameters:    Size  Location     Type
  6941 ;;		None
  6942 ;; Auto vars:     Size  Location     Type
  6943 ;;  adjgo           1    1[BANK0 ] unsigned char 
  6944 ;; Return value:  Size  Location     Type
  6945 ;;                  1    wreg      unsigned char 
  6946 ;; Registers used:
  6947 ;;		wreg, status,2
  6948 ;; Tracked objects:
  6949 ;;		On entry : 0/0
  6950 ;;		On exit  : 0/0
  6951 ;;		Unchanged: 0/0
  6952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6954 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6955 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6956 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6957 ;;Total ram usage:        3 bytes
  6958 ;; Hardware stack levels used:    1
  6959 ;; Hardware stack levels required when called:    5
  6960 ;; This function calls:
  6961 ;;		Nothing
  6962 ;; This function is called by:
  6963 ;;		_setDimmerLights_SwOn
  6964 ;;		_setDimmerLights_AdjControl
  6965 ;; This function uses a non-reentrant model
  6966 ;;
  6967                           
  6968                           
  6969                           ;psect for function _getAll_DimmerLights_AdjGO
  6970  10C5                     _getAll_DimmerLights_AdjGO:	
  6971                           
  6972                           ;Dimmer_B1.c: 503: char adjgo = 0;
  6973                           
  6974                           ;incstack = 0
  6975                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
  6976  10C5  0020               	movlb	0	; select bank0
  6977  10C6  01A1               	clrf	getAll_DimmerLights_AdjGO@adjgo
  6978                           
  6979                           ;Dimmer_B1.c: 508: adjgo = DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1 ? 1 : 0;
  6980  10C7  01A2               	clrf	_getAll_DimmerLights_AdjGO$2244
  6981  10C8  0AA2               	incf	_getAll_DimmerLights_AdjGO$2244,f
  6982  10C9  0022               	movlb	2	; select bank2
  6983  10CA  1DC6               	btfss	(_DimmerLights1^(0+256)+8),3
  6984  10CB  19D5               	btfsc	(_DimmerLights2^(0+256)+8),3
  6985  10CC  28CF               	goto	l5563
  6986  10CD  0020               	movlb	0	; select bank0
  6987  10CE  01A2               	clrf	_getAll_DimmerLights_AdjGO$2244
  6988  10CF                     l5563:	
  6989  10CF  0020               	movlb	0	; select bank0
  6990  10D0  0822               	movf	_getAll_DimmerLights_AdjGO$2244,w
  6991  10D1  00A0               	movwf	??_getAll_DimmerLights_AdjGO
  6992  10D2  0820               	movf	??_getAll_DimmerLights_AdjGO,w
  6993  10D3  00A1               	movwf	getAll_DimmerLights_AdjGO@adjgo
  6994                           
  6995                           ;Dimmer_B1.c: 513: return adjgo;
  6996  10D4  0821               	movf	getAll_DimmerLights_AdjGO@adjgo,w
  6997  10D5  0008               	return
  6998  10D6                     __end_of_getAll_DimmerLights_AdjGO:	
  6999                           
  7000                           	psect	text25
  7001  161E                     __ptext25:	
  7002 ;; *************** function _setRFSW_AdjControl *****************
  7003 ;; Defined at:
  7004 ;;		line 513 in file "../src/RF_Control_B1.c"
  7005 ;; Parameters:    Size  Location     Type
  7006 ;;  sw              1    wreg     unsigned char 
  7007 ;; Auto vars:     Size  Location     Type
  7008 ;;  sw              1   74[BANK0 ] unsigned char 
  7009 ;;  status          1   73[BANK0 ] unsigned char 
  7010 ;; Return value:  Size  Location     Type
  7011 ;;		None               void
  7012 ;; Registers used:
  7013 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7014 ;; Tracked objects:
  7015 ;;		On entry : 0/0
  7016 ;;		On exit  : 0/0
  7017 ;;		Unchanged: 0/0
  7018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7020 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7021 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7022 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7023 ;;Total ram usage:        4 bytes
  7024 ;; Hardware stack levels used:    1
  7025 ;; Hardware stack levels required when called:   10
  7026 ;; This function calls:
  7027 ;;		_getDimmerLights_Status
  7028 ;;		_setMemory_Modify
  7029 ;;		_setRF_DimmerValue
  7030 ;;		_setTxData
  7031 ;; This function is called by:
  7032 ;;		_setControl_Lights_Table
  7033 ;; This function uses a non-reentrant model
  7034 ;;
  7035                           
  7036                           
  7037                           ;psect for function _setRFSW_AdjControl
  7038  161E                     _setRFSW_AdjControl:	
  7039                           
  7040                           ;incstack = 0
  7041                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7042                           ;setRFSW_AdjControl@sw stored from wreg
  7043  161E  0020               	movlb	0	; select bank0
  7044  161F  00EA               	movwf	setRFSW_AdjControl@sw
  7045                           
  7046                           ;RF_Control_B1.c: 514: char status = 0;
  7047  1620  01E9               	clrf	setRFSW_AdjControl@status
  7048                           
  7049                           ;RF_Control_B1.c: 516: status = getDimmerLights_Status(sw);
  7050  1621  086A               	movf	setRFSW_AdjControl@sw,w
  7051  1622  3190  2093  3196   	fcall	_getDimmerLights_Status
  7052  1625  0020               	movlb	0	; select bank0
  7053  1626  00E7               	movwf	??_setRFSW_AdjControl
  7054  1627  0867               	movf	??_setRFSW_AdjControl,w
  7055  1628  00E9               	movwf	setRFSW_AdjControl@status
  7056                           
  7057                           ;RF_Control_B1.c: 519: if (status == 1) {
  7058  1629  0869               	movf	setRFSW_AdjControl@status,w
  7059  162A  3A01               	xorlw	1
  7060  162B  1D03               	skipz
  7061  162C  2E37               	goto	l5825
  7062                           
  7063                           ;RF_Control_B1.c: 520: setMemory_Modify(1);
  7064  162D  3001               	movlw	1
  7065  162E  3191  2143  3196   	fcall	_setMemory_Modify
  7066                           
  7067                           ;RF_Control_B1.c: 521: setRF_DimmerValue(sw);
  7068  1631  0020               	movlb	0	; select bank0
  7069  1632  086A               	movf	setRFSW_AdjControl@sw,w
  7070  1633  3195  250B  3196   	fcall	_setRF_DimmerValue
  7071                           
  7072                           ;RF_Control_B1.c: 522: } else {
  7073  1636  2E49               	goto	l1881
  7074  1637                     l5825:	
  7075                           
  7076                           ;RF_Control_B1.c: 523: product->Data[9]=product->Data[20 + sw];
  7077  1637  0020               	movlb	0	; select bank0
  7078  1638  086A               	movf	setRFSW_AdjControl@sw,w
  7079  1639  3E14               	addlw	20
  7080  163A  076E               	addwf	_product,w
  7081  163B  00E7               	movwf	??_setRFSW_AdjControl
  7082  163C  0867               	movf	??_setRFSW_AdjControl,w
  7083  163D  0086               	movwf	6
  7084  163E  3001               	movlw	1	; select bank2/3
  7085  163F  0087               	movwf	7
  7086  1640  0801               	movf	1,w
  7087  1641  00E8               	movwf	??_setRFSW_AdjControl+1
  7088  1642  086E               	movf	_product,w
  7089  1643  3E09               	addlw	9
  7090  1644  0086               	movwf	6
  7091  1645  3001               	movlw	1	; select bank2/3
  7092  1646  0087               	movwf	7
  7093  1647  0868               	movf	??_setRFSW_AdjControl+1,w
  7094  1648  0081               	movwf	1
  7095  1649                     l1881:	
  7096                           
  7097                           ;RF_Control_B1.c: 524: }
  7098                           ;RF_Control_B1.c: 525: product->Data[17]=product->Data[26 + sw];
  7099  1649  0020               	movlb	0	; select bank0
  7100  164A  086A               	movf	setRFSW_AdjControl@sw,w
  7101  164B  3E1A               	addlw	26
  7102  164C  076E               	addwf	_product,w
  7103  164D  00E7               	movwf	??_setRFSW_AdjControl
  7104  164E  0867               	movf	??_setRFSW_AdjControl,w
  7105  164F  0086               	movwf	6
  7106  1650  3001               	movlw	1	; select bank2/3
  7107  1651  0087               	movwf	7
  7108  1652  0801               	movf	1,w
  7109  1653  00E8               	movwf	??_setRFSW_AdjControl+1
  7110  1654  086E               	movf	_product,w
  7111  1655  3E11               	addlw	17
  7112  1656  0086               	movwf	6
  7113  1657  3001               	movlw	1	; select bank2/3
  7114  1658  0087               	movwf	7
  7115  1659  0868               	movf	??_setRFSW_AdjControl+1,w
  7116  165A  0081               	movwf	1
  7117                           
  7118                           ;RF_Control_B1.c: 526: setTxData();
  7119  165B  3185  25AF         	fcall	_setTxData
  7120  165D  0008               	return
  7121  165E                     __end_of_setRFSW_AdjControl:	
  7122                           
  7123                           	psect	text26
  7124  150B                     __ptext26:	
  7125 ;; *************** function _setRF_DimmerValue *****************
  7126 ;; Defined at:
  7127 ;;		line 531 in file "../src/RF_Control_B1.c"
  7128 ;; Parameters:    Size  Location     Type
  7129 ;;  lights          1    wreg     unsigned char 
  7130 ;; Auto vars:     Size  Location     Type
  7131 ;;  lights          1   70[BANK0 ] unsigned char 
  7132 ;; Return value:  Size  Location     Type
  7133 ;;		None               void
  7134 ;; Registers used:
  7135 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7136 ;; Tracked objects:
  7137 ;;		On entry : 0/0
  7138 ;;		On exit  : 0/0
  7139 ;;		Unchanged: 0/0
  7140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7142 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7143 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7144 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7145 ;;Total ram usage:        3 bytes
  7146 ;; Hardware stack levels used:    1
  7147 ;; Hardware stack levels required when called:    9
  7148 ;; This function calls:
  7149 ;;		_setDimmerLights_AdjRF
  7150 ;; This function is called by:
  7151 ;;		_setRFSW_AdjControl
  7152 ;; This function uses a non-reentrant model
  7153 ;;
  7154                           
  7155                           
  7156                           ;psect for function _setRF_DimmerValue
  7157  150B                     _setRF_DimmerValue:	
  7158                           
  7159                           ;incstack = 0
  7160                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7161                           ;setRF_DimmerValue@lights stored from wreg
  7162  150B  0020               	movlb	0	; select bank0
  7163  150C  00E6               	movwf	setRF_DimmerValue@lights
  7164                           
  7165                           ;RF_Control_B1.c: 532: if (RF_Data[9] > 0x64) {
  7166  150D  3065               	movlw	101
  7167  150E  0022               	movlb	2	; select bank2
  7168  150F  0229               	subwf	(_RF_Data^(0+256)+9),w
  7169  1510  1C03               	skipc
  7170  1511  2D18               	goto	l5699
  7171                           
  7172                           ;RF_Control_B1.c: 533: RF_Data[9] = 0x64;
  7173  1512  3064               	movlw	100
  7174  1513  0020               	movlb	0	; select bank0
  7175  1514  00E4               	movwf	??_setRF_DimmerValue
  7176  1515  0864               	movf	??_setRF_DimmerValue,w
  7177  1516  0022               	movlb	2	; select bank2
  7178  1517  00A9               	movwf	(_RF_Data^(0+256)+9)
  7179  1518                     l5699:	
  7180                           
  7181                           ;RF_Control_B1.c: 534: }
  7182                           ;RF_Control_B1.c: 535: product->Data[9]=RF_Data[9];
  7183  1518  0829               	movf	(_RF_Data^(0+256)+9),w
  7184  1519  0020               	movlb	0	; select bank0
  7185  151A  00E4               	movwf	??_setRF_DimmerValue
  7186  151B  086E               	movf	_product,w
  7187  151C  3E09               	addlw	9
  7188  151D  0086               	movwf	6
  7189  151E  3001               	movlw	1	; select bank2/3
  7190  151F  0087               	movwf	7
  7191  1520  0864               	movf	??_setRF_DimmerValue,w
  7192  1521  0081               	movwf	1
  7193                           
  7194                           ;RF_Control_B1.c: 536: product->Data[11]=lights;
  7195  1522  0866               	movf	setRF_DimmerValue@lights,w
  7196  1523  00E4               	movwf	??_setRF_DimmerValue
  7197  1524  086E               	movf	_product,w
  7198  1525  3E0B               	addlw	11
  7199  1526  0086               	movwf	6
  7200  1527  3001               	movlw	1	; select bank2/3
  7201  1528  0087               	movwf	7
  7202  1529  0864               	movf	??_setRF_DimmerValue,w
  7203  152A  0081               	movwf	1
  7204                           
  7205                           ;RF_Control_B1.c: 537: product->Data[(20 + lights)]=product->Data[9];
  7206  152B  086E               	movf	_product,w
  7207  152C  3E09               	addlw	9
  7208  152D  0086               	movwf	6
  7209  152E  3001               	movlw	1	; select bank2/3
  7210  152F  0087               	movwf	7
  7211  1530  0801               	movf	1,w
  7212  1531  00E4               	movwf	??_setRF_DimmerValue
  7213  1532  0866               	movf	setRF_DimmerValue@lights,w
  7214  1533  3E14               	addlw	20
  7215  1534  076E               	addwf	_product,w
  7216  1535  00E5               	movwf	??_setRF_DimmerValue+1
  7217  1536  0865               	movf	??_setRF_DimmerValue+1,w
  7218  1537  0086               	movwf	6
  7219  1538  3001               	movlw	1	; select bank2/3
  7220  1539  0087               	movwf	7
  7221  153A  0864               	movf	??_setRF_DimmerValue,w
  7222  153B  0081               	movwf	1
  7223                           
  7224                           ;RF_Control_B1.c: 538: setDimmerLights_AdjRF(lights);
  7225  153C  0866               	movf	setRF_DimmerValue@lights,w
  7226  153D  3193  23CF         	fcall	_setDimmerLights_AdjRF
  7227  153F  0008               	return
  7228  1540                     __end_of_setRF_DimmerValue:	
  7229                           
  7230                           	psect	text27
  7231  13CF                     __ptext27:	
  7232 ;; *************** function _setDimmerLights_AdjRF *****************
  7233 ;; Defined at:
  7234 ;;		line 758 in file "../src/Dimmer_B1.c"
  7235 ;; Parameters:    Size  Location     Type
  7236 ;;  lights          1    wreg     unsigned char 
  7237 ;; Auto vars:     Size  Location     Type
  7238 ;;  lights          1   67[BANK0 ] unsigned char 
  7239 ;; Return value:  Size  Location     Type
  7240 ;;		None               void
  7241 ;; Registers used:
  7242 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7243 ;; Tracked objects:
  7244 ;;		On entry : 0/0
  7245 ;;		On exit  : 0/0
  7246 ;;		Unchanged: 0/0
  7247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7249 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7250 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7251 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7252 ;;Total ram usage:        2 bytes
  7253 ;; Hardware stack levels used:    1
  7254 ;; Hardware stack levels required when called:    8
  7255 ;; This function calls:
  7256 ;;		_DimmerLightsPointSelect
  7257 ;;		_getPercentValue
  7258 ;; This function is called by:
  7259 ;;		_setRF_DimmerValue
  7260 ;; This function uses a non-reentrant model
  7261 ;;
  7262                           
  7263                           
  7264                           ;psect for function _setDimmerLights_AdjRF
  7265  13CF                     _setDimmerLights_AdjRF:	
  7266                           
  7267                           ;incstack = 0
  7268                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7269                           ;setDimmerLights_AdjRF@lights stored from wreg
  7270  13CF  0020               	movlb	0	; select bank0
  7271  13D0  00E3               	movwf	setDimmerLights_AdjRF@lights
  7272                           
  7273                           ;Dimmer_B1.c: 759: DimmerLightsPointSelect(lights);
  7274  13D1  0863               	movf	setDimmerLights_AdjRF@lights,w
  7275  13D2  3191  2130  3193   	fcall	_DimmerLightsPointSelect
  7276                           
  7277                           ;Dimmer_B1.c: 760: DimmerLights->AdjRF = 1;
  7278  13D5  0020               	movlb	0	; select bank0
  7279  13D6  086F               	movf	_DimmerLights,w
  7280  13D7  0086               	movwf	6
  7281  13D8  3001               	movlw	1	; select bank2/3
  7282  13D9  0087               	movwf	7
  7283  13DA  1501               	bsf	1,2
  7284                           
  7285                           ;Dimmer_B1.c: 761: DimmerLights->Signal = 1;
  7286  13DB  086F               	movf	_DimmerLights,w
  7287  13DC  0086               	movwf	6
  7288  13DD  3001               	movlw	1	; select bank2/3
  7289  13DE  0087               	movwf	7
  7290  13DF  1481               	bsf	1,1
  7291                           
  7292                           ;Dimmer_B1.c: 762: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7293  13E0  086E               	movf	_product,w
  7294  13E1  3E09               	addlw	9
  7295  13E2  0086               	movwf	6
  7296  13E3  3001               	movlw	1	; select bank2/3
  7297  13E4  0087               	movwf	7
  7298  13E5  0801               	movf	1,w
  7299  13E6  318B  2378         	fcall	_getPercentValue
  7300  13E8  0020               	movlb	0	; select bank0
  7301  13E9  00E2               	movwf	??_setDimmerLights_AdjRF
  7302  13EA  086F               	movf	_DimmerLights,w
  7303  13EB  3E05               	addlw	5
  7304  13EC  0086               	movwf	6
  7305  13ED  3001               	movlw	1	; select bank2/3
  7306  13EE  0087               	movwf	7
  7307  13EF  0862               	movf	??_setDimmerLights_AdjRF,w
  7308  13F0  0081               	movwf	1
  7309  13F1  0008               	return
  7310  13F2                     __end_of_setDimmerLights_AdjRF:	
  7311                           
  7312                           	psect	text28
  7313  0B78                     __ptext28:	
  7314 ;; *************** function _getPercentValue *****************
  7315 ;; Defined at:
  7316 ;;		line 870 in file "../src/Dimmer_B1.c"
  7317 ;; Parameters:    Size  Location     Type
  7318 ;;  value           1    wreg     unsigned char 
  7319 ;; Auto vars:     Size  Location     Type
  7320 ;;  value           1   62[BANK0 ] unsigned char 
  7321 ;;  i               3   63[BANK0 ] float 
  7322 ;; Return value:  Size  Location     Type
  7323 ;;                  1    wreg      unsigned char 
  7324 ;; Registers used:
  7325 ;;		wreg, status,2, status,0, pclath, cstack
  7326 ;; Tracked objects:
  7327 ;;		On entry : 0/0
  7328 ;;		On exit  : 0/0
  7329 ;;		Unchanged: 0/0
  7330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7332 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7333 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7334 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7335 ;;Total ram usage:        6 bytes
  7336 ;; Hardware stack levels used:    1
  7337 ;; Hardware stack levels required when called:    7
  7338 ;; This function calls:
  7339 ;;		___awtoft
  7340 ;;		___ftadd
  7341 ;;		___ftdiv
  7342 ;;		___ftmul
  7343 ;;		___fttol
  7344 ;; This function is called by:
  7345 ;;		_setDimmerLights_AdjRF
  7346 ;; This function uses a non-reentrant model
  7347 ;;
  7348                           
  7349                           
  7350                           ;psect for function _getPercentValue
  7351  0B78                     _getPercentValue:	
  7352                           
  7353                           ;incstack = 0
  7354                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7355                           ;getPercentValue@value stored from wreg
  7356  0B78  0020               	movlb	0	; select bank0
  7357  0B79  00DE               	movwf	getPercentValue@value
  7358                           
  7359                           ;Dimmer_B1.c: 878: float i = ((char)(80*0.8)) - ((char)(15*0.8));
  7360  0B7A  3000               	movlw	0
  7361  0B7B  00DF               	movwf	getPercentValue@i
  7362  0B7C  3050               	movlw	80
  7363  0B7D  00E0               	movwf	getPercentValue@i+1
  7364  0B7E  3042               	movlw	66
  7365  0B7F  00E1               	movwf	getPercentValue@i+2
  7366                           
  7367                           ;Dimmer_B1.c: 879: i /= 100;
  7368  0B80  3000               	movlw	0
  7369  0B81  00AE               	movwf	___ftdiv@f2
  7370  0B82  30C8               	movlw	200
  7371  0B83  00AF               	movwf	___ftdiv@f2+1
  7372  0B84  3042               	movlw	66
  7373  0B85  00B0               	movwf	___ftdiv@f2+2
  7374  0B86  085F               	movf	getPercentValue@i,w
  7375  0B87  00B1               	movwf	___ftdiv@f1
  7376  0B88  0860               	movf	getPercentValue@i+1,w
  7377  0B89  00B2               	movwf	___ftdiv@f1+1
  7378  0B8A  0861               	movf	getPercentValue@i+2,w
  7379  0B8B  00B3               	movwf	___ftdiv@f1+2
  7380  0B8C  3187  2720  318B   	fcall	___ftdiv
  7381  0B8F  0020               	movlb	0	; select bank0
  7382  0B90  082E               	movf	?___ftdiv,w
  7383  0B91  00DF               	movwf	getPercentValue@i
  7384  0B92  082F               	movf	?___ftdiv+1,w
  7385  0B93  00E0               	movwf	getPercentValue@i+1
  7386  0B94  0830               	movf	?___ftdiv+2,w
  7387  0B95  00E1               	movwf	getPercentValue@i+2
  7388                           
  7389                           ;Dimmer_B1.c: 881: return (char) (((100 - value) * i) + ((char)(80*0.8)));
  7390  0B96  085E               	movf	getPercentValue@value,w
  7391  0B97  00DC               	movwf	??_getPercentValue
  7392  0B98  01DD               	clrf	??_getPercentValue+1
  7393  0B99  09DC               	comf	??_getPercentValue,f
  7394  0B9A  09DD               	comf	??_getPercentValue+1,f
  7395  0B9B  0ADC               	incf	??_getPercentValue,f
  7396  0B9C  1903               	skipnz
  7397  0B9D  0ADD               	incf	??_getPercentValue+1,f
  7398  0B9E  085C               	movf	??_getPercentValue,w
  7399  0B9F  3E64               	addlw	100
  7400  0BA0  00A8               	movwf	___awtoft@c
  7401  0BA1  3000               	movlw	0
  7402  0BA2  3D5D               	addwfc	??_getPercentValue+1,w
  7403  0BA3  00A9               	movwf	___awtoft@c+1
  7404  0BA4  3193  238B  318B   	fcall	___awtoft
  7405  0BA7  0020               	movlb	0	; select bank0
  7406  0BA8  0828               	movf	?___awtoft,w
  7407  0BA9  00B1               	movwf	___ftmul@f2
  7408  0BAA  0829               	movf	?___awtoft+1,w
  7409  0BAB  00B2               	movwf	___ftmul@f2+1
  7410  0BAC  082A               	movf	?___awtoft+2,w
  7411  0BAD  00B3               	movwf	___ftmul@f2+2
  7412  0BAE  085F               	movf	getPercentValue@i,w
  7413  0BAF  00AE               	movwf	___ftmul@f1
  7414  0BB0  0860               	movf	getPercentValue@i+1,w
  7415  0BB1  00AF               	movwf	___ftmul@f1+1
  7416  0BB2  0861               	movf	getPercentValue@i+2,w
  7417  0BB3  00B0               	movwf	___ftmul@f1+2
  7418  0BB4  3186  266C  318B   	fcall	___ftmul
  7419  0BB7  0020               	movlb	0	; select bank0
  7420  0BB8  082E               	movf	?___ftmul,w
  7421  0BB9  00C4               	movwf	___ftadd@f2
  7422  0BBA  082F               	movf	?___ftmul+1,w
  7423  0BBB  00C5               	movwf	___ftadd@f2+1
  7424  0BBC  0830               	movf	?___ftmul+2,w
  7425  0BBD  00C6               	movwf	___ftadd@f2+2
  7426  0BBE  3000               	movlw	0
  7427  0BBF  00C1               	movwf	___ftadd@f1
  7428  0BC0  3080               	movlw	128
  7429  0BC1  00C2               	movwf	___ftadd@f1+1
  7430  0BC2  3042               	movlw	66
  7431  0BC3  00C3               	movwf	___ftadd@f1+2
  7432  0BC4  3182  22ED  318B   	fcall	___ftadd
  7433  0BC7  0020               	movlb	0	; select bank0
  7434  0BC8  0841               	movf	?___ftadd,w
  7435  0BC9  00CE               	movwf	___fttol@f1
  7436  0BCA  0842               	movf	?___ftadd+1,w
  7437  0BCB  00CF               	movwf	___fttol@f1+1
  7438  0BCC  0843               	movf	?___ftadd+2,w
  7439  0BCD  00D0               	movwf	___fttol@f1+2
  7440  0BCE  318F  2779         	fcall	___fttol
  7441  0BD0  0020               	movlb	0	; select bank0
  7442  0BD1  084E               	movf	?___fttol,w
  7443  0BD2  0008               	return
  7444  0BD3                     __end_of_getPercentValue:	
  7445                           
  7446                           	psect	text29
  7447  066C                     __ptext29:	
  7448 ;; *************** function ___ftmul *****************
  7449 ;; Defined at:
  7450 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7451 ;; Parameters:    Size  Location     Type
  7452 ;;  f1              3   14[BANK0 ] float 
  7453 ;;  f2              3   17[BANK0 ] float 
  7454 ;; Auto vars:     Size  Location     Type
  7455 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7456 ;;  sign            1   29[BANK0 ] unsigned char 
  7457 ;;  cntr            1   28[BANK0 ] unsigned char 
  7458 ;;  exp             1   24[BANK0 ] unsigned char 
  7459 ;; Return value:  Size  Location     Type
  7460 ;;                  3   14[BANK0 ] float 
  7461 ;; Registers used:
  7462 ;;		wreg, status,2, status,0, pclath, cstack
  7463 ;; Tracked objects:
  7464 ;;		On entry : 0/0
  7465 ;;		On exit  : 0/0
  7466 ;;		Unchanged: 0/0
  7467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7468 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7469 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7470 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7471 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7472 ;;Total ram usage:       16 bytes
  7473 ;; Hardware stack levels used:    1
  7474 ;; Hardware stack levels required when called:    6
  7475 ;; This function calls:
  7476 ;;		___ftpack
  7477 ;; This function is called by:
  7478 ;;		_getPercentValue
  7479 ;; This function uses a non-reentrant model
  7480 ;;
  7481                           
  7482                           
  7483                           ;psect for function ___ftmul
  7484  066C                     ___ftmul:	
  7485                           
  7486                           ;incstack = 0
  7487                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7488  066C  0020               	movlb	0	; select bank0
  7489  066D  082E               	movf	___ftmul@f1,w
  7490  066E  00B4               	movwf	??___ftmul
  7491  066F  082F               	movf	___ftmul@f1+1,w
  7492  0670  00B5               	movwf	??___ftmul+1
  7493  0671  0830               	movf	___ftmul@f1+2,w
  7494  0672  00B6               	movwf	??___ftmul+2
  7495  0673  1003               	clrc
  7496  0674  0D35               	rlf	??___ftmul+1,w
  7497  0675  0D36               	rlf	??___ftmul+2,w
  7498  0676  00B7               	movwf	??___ftmul+3
  7499  0677  0837               	movf	??___ftmul+3,w
  7500  0678  00B8               	movwf	___ftmul@exp
  7501  0679  08B8               	movf	___ftmul@exp,f
  7502  067A  1D03               	skipz
  7503  067B  2E83               	goto	l5323
  7504  067C  3000               	movlw	0
  7505  067D  00AE               	movwf	?___ftmul
  7506  067E  3000               	movlw	0
  7507  067F  00AF               	movwf	?___ftmul+1
  7508  0680  3000               	movlw	0
  7509  0681  00B0               	movwf	?___ftmul+2
  7510  0682  0008               	return
  7511  0683                     l5323:	
  7512  0683  0831               	movf	___ftmul@f2,w
  7513  0684  00B4               	movwf	??___ftmul
  7514  0685  0832               	movf	___ftmul@f2+1,w
  7515  0686  00B5               	movwf	??___ftmul+1
  7516  0687  0833               	movf	___ftmul@f2+2,w
  7517  0688  00B6               	movwf	??___ftmul+2
  7518  0689  1003               	clrc
  7519  068A  0D35               	rlf	??___ftmul+1,w
  7520  068B  0D36               	rlf	??___ftmul+2,w
  7521  068C  00B7               	movwf	??___ftmul+3
  7522  068D  0837               	movf	??___ftmul+3,w
  7523  068E  00BD               	movwf	___ftmul@sign
  7524  068F  08BD               	movf	___ftmul@sign,f
  7525  0690  1D03               	skipz
  7526  0691  2E99               	goto	l5329
  7527  0692  3000               	movlw	0
  7528  0693  00AE               	movwf	?___ftmul
  7529  0694  3000               	movlw	0
  7530  0695  00AF               	movwf	?___ftmul+1
  7531  0696  3000               	movlw	0
  7532  0697  00B0               	movwf	?___ftmul+2
  7533  0698  0008               	return
  7534  0699                     l5329:	
  7535  0699  083D               	movf	___ftmul@sign,w
  7536  069A  3E7B               	addlw	123
  7537  069B  00B4               	movwf	??___ftmul
  7538  069C  0834               	movf	??___ftmul,w
  7539  069D  07B8               	addwf	___ftmul@exp,f
  7540  069E  082E               	movf	___ftmul@f1,w
  7541  069F  00B4               	movwf	??___ftmul
  7542  06A0  082F               	movf	___ftmul@f1+1,w
  7543  06A1  00B5               	movwf	??___ftmul+1
  7544  06A2  0830               	movf	___ftmul@f1+2,w
  7545  06A3  00B6               	movwf	??___ftmul+2
  7546  06A4  3010               	movlw	16
  7547  06A5                     u4015:	
  7548  06A5  36B6               	lsrf	??___ftmul+2,f
  7549  06A6  0CB5               	rrf	??___ftmul+1,f
  7550  06A7  0CB4               	rrf	??___ftmul,f
  7551  06A8  0B89               	decfsz	9,f
  7552  06A9  2EA5               	goto	u4015
  7553  06AA  0834               	movf	??___ftmul,w
  7554  06AB  00B7               	movwf	??___ftmul+3
  7555  06AC  0837               	movf	??___ftmul+3,w
  7556  06AD  00BD               	movwf	___ftmul@sign
  7557  06AE  0831               	movf	___ftmul@f2,w
  7558  06AF  00B4               	movwf	??___ftmul
  7559  06B0  0832               	movf	___ftmul@f2+1,w
  7560  06B1  00B5               	movwf	??___ftmul+1
  7561  06B2  0833               	movf	___ftmul@f2+2,w
  7562  06B3  00B6               	movwf	??___ftmul+2
  7563  06B4  3010               	movlw	16
  7564  06B5                     u4025:	
  7565  06B5  36B6               	lsrf	??___ftmul+2,f
  7566  06B6  0CB5               	rrf	??___ftmul+1,f
  7567  06B7  0CB4               	rrf	??___ftmul,f
  7568  06B8  0B89               	decfsz	9,f
  7569  06B9  2EB5               	goto	u4025
  7570  06BA  0834               	movf	??___ftmul,w
  7571  06BB  00B7               	movwf	??___ftmul+3
  7572  06BC  0837               	movf	??___ftmul+3,w
  7573  06BD  06BD               	xorwf	___ftmul@sign,f
  7574  06BE  3080               	movlw	128
  7575  06BF  00B4               	movwf	??___ftmul
  7576  06C0  0834               	movf	??___ftmul,w
  7577  06C1  05BD               	andwf	___ftmul@sign,f
  7578  06C2  17AF               	bsf	___ftmul@f1+1,7
  7579  06C3  17B2               	bsf	___ftmul@f2+1,7
  7580  06C4  30FF               	movlw	255
  7581  06C5  05B1               	andwf	___ftmul@f2,f
  7582  06C6  30FF               	movlw	255
  7583  06C7  05B2               	andwf	___ftmul@f2+1,f
  7584  06C8  3000               	movlw	0
  7585  06C9  05B3               	andwf	___ftmul@f2+2,f
  7586  06CA  3000               	movlw	0
  7587  06CB  00B9               	movwf	___ftmul@f3_as_product
  7588  06CC  3000               	movlw	0
  7589  06CD  00BA               	movwf	___ftmul@f3_as_product+1
  7590  06CE  3000               	movlw	0
  7591  06CF  00BB               	movwf	___ftmul@f3_as_product+2
  7592  06D0  3007               	movlw	7
  7593  06D1  00B4               	movwf	??___ftmul
  7594  06D2  0834               	movf	??___ftmul,w
  7595  06D3  00BC               	movwf	___ftmul@cntr
  7596  06D4                     l5341:	
  7597  06D4  1C2E               	btfss	___ftmul@f1,0
  7598  06D5  2EDC               	goto	l5345
  7599  06D6  0831               	movf	___ftmul@f2,w
  7600  06D7  07B9               	addwf	___ftmul@f3_as_product,f
  7601  06D8  0832               	movf	___ftmul@f2+1,w
  7602  06D9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7603  06DA  0833               	movf	___ftmul@f2+2,w
  7604  06DB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7605  06DC                     l5345:	
  7606  06DC  3001               	movlw	1
  7607  06DD                     u4045:	
  7608  06DD  36B0               	lsrf	___ftmul@f1+2,f
  7609  06DE  0CAF               	rrf	___ftmul@f1+1,f
  7610  06DF  0CAE               	rrf	___ftmul@f1,f
  7611  06E0  0B89               	decfsz	9,f
  7612  06E1  2EDD               	goto	u4045
  7613  06E2  3001               	movlw	1
  7614  06E3                     u4055:	
  7615  06E3  35B1               	lslf	___ftmul@f2,f
  7616  06E4  0DB2               	rlf	___ftmul@f2+1,f
  7617  06E5  0DB3               	rlf	___ftmul@f2+2,f
  7618  06E6  0B89               	decfsz	9,f
  7619  06E7  2EE3               	goto	u4055
  7620  06E8  3001               	movlw	1
  7621  06E9  02BC               	subwf	___ftmul@cntr,f
  7622  06EA  1D03               	btfss	3,2
  7623  06EB  2ED4               	goto	l5341
  7624  06EC  3009               	movlw	9
  7625  06ED  00B4               	movwf	??___ftmul
  7626  06EE  0834               	movf	??___ftmul,w
  7627  06EF  00BC               	movwf	___ftmul@cntr
  7628  06F0                     l5353:	
  7629  06F0  1C2E               	btfss	___ftmul@f1,0
  7630  06F1  2EF8               	goto	l5357
  7631  06F2  0831               	movf	___ftmul@f2,w
  7632  06F3  07B9               	addwf	___ftmul@f3_as_product,f
  7633  06F4  0832               	movf	___ftmul@f2+1,w
  7634  06F5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7635  06F6  0833               	movf	___ftmul@f2+2,w
  7636  06F7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7637  06F8                     l5357:	
  7638  06F8  3001               	movlw	1
  7639  06F9                     u4085:	
  7640  06F9  36B0               	lsrf	___ftmul@f1+2,f
  7641  06FA  0CAF               	rrf	___ftmul@f1+1,f
  7642  06FB  0CAE               	rrf	___ftmul@f1,f
  7643  06FC  0B89               	decfsz	9,f
  7644  06FD  2EF9               	goto	u4085
  7645  06FE  3001               	movlw	1
  7646  06FF                     u4095:	
  7647  06FF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7648  0700  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7649  0701  0CB9               	rrf	___ftmul@f3_as_product,f
  7650  0702  0B89               	decfsz	9,f
  7651  0703  2EFF               	goto	u4095
  7652  0704  3001               	movlw	1
  7653  0705  02BC               	subwf	___ftmul@cntr,f
  7654  0706  1D03               	btfss	3,2
  7655  0707  2EF0               	goto	l5353
  7656  0708  0839               	movf	___ftmul@f3_as_product,w
  7657  0709  00A0               	movwf	___ftpack@arg
  7658  070A  083A               	movf	___ftmul@f3_as_product+1,w
  7659  070B  00A1               	movwf	___ftpack@arg+1
  7660  070C  083B               	movf	___ftmul@f3_as_product+2,w
  7661  070D  00A2               	movwf	___ftpack@arg+2
  7662  070E  0838               	movf	___ftmul@exp,w
  7663  070F  00B4               	movwf	??___ftmul
  7664  0710  0834               	movf	??___ftmul,w
  7665  0711  00A3               	movwf	___ftpack@exp
  7666  0712  083D               	movf	___ftmul@sign,w
  7667  0713  00B5               	movwf	??___ftmul+1
  7668  0714  0835               	movf	??___ftmul+1,w
  7669  0715  00A4               	movwf	___ftpack@sign
  7670  0716  318C  248B         	fcall	___ftpack
  7671  0718  0020               	movlb	0	; select bank0
  7672  0719  0820               	movf	?___ftpack,w
  7673  071A  00AE               	movwf	?___ftmul
  7674  071B  0821               	movf	?___ftpack+1,w
  7675  071C  00AF               	movwf	?___ftmul+1
  7676  071D  0822               	movf	?___ftpack+2,w
  7677  071E  00B0               	movwf	?___ftmul+2
  7678  071F  0008               	return
  7679  0720                     __end_of___ftmul:	
  7680                           
  7681                           	psect	text30
  7682  1143                     __ptext30:	
  7683 ;; *************** function _setMemory_Modify *****************
  7684 ;; Defined at:
  7685 ;;		line 1000 in file "../src/MCU_B1.c"
  7686 ;; Parameters:    Size  Location     Type
  7687 ;;  command         1    wreg     unsigned char 
  7688 ;; Auto vars:     Size  Location     Type
  7689 ;;  command         1    1[BANK0 ] unsigned char 
  7690 ;; Return value:  Size  Location     Type
  7691 ;;		None               void
  7692 ;; Registers used:
  7693 ;;		wreg, status,2, status,0
  7694 ;; Tracked objects:
  7695 ;;		On entry : 0/0
  7696 ;;		On exit  : 0/0
  7697 ;;		Unchanged: 0/0
  7698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7700 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7701 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7702 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7703 ;;Total ram usage:        2 bytes
  7704 ;; Hardware stack levels used:    1
  7705 ;; Hardware stack levels required when called:    5
  7706 ;; This function calls:
  7707 ;;		Nothing
  7708 ;; This function is called by:
  7709 ;;		_setLog_Code
  7710 ;;		_setRFSW_AdjControl
  7711 ;; This function uses a non-reentrant model
  7712 ;;
  7713                           
  7714                           
  7715                           ;psect for function _setMemory_Modify
  7716  1143                     _setMemory_Modify:	
  7717                           
  7718                           ;incstack = 0
  7719                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  7720                           ;setMemory_Modify@command stored from wreg
  7721  1143  0020               	movlb	0	; select bank0
  7722  1144  00A1               	movwf	setMemory_Modify@command
  7723                           
  7724                           ;MCU_B1.c: 1001: Memory.Modify = command == 1 ? 1 : 0;
  7725  1145  0821               	movf	setMemory_Modify@command,w
  7726  1146  3A01               	xorlw	1
  7727  1147  3000               	movlw	0
  7728  1148  1903               	skipnz
  7729  1149  3001               	movlw	1
  7730  114A  00A0               	movwf	??_setMemory_Modify
  7731  114B  0023               	movlb	3	; select bank3
  7732  114C  0844               	movf	(_Memory^(0+384)+36),w
  7733  114D  0020               	movlb	0	; select bank0
  7734  114E  0620               	xorwf	??_setMemory_Modify,w
  7735  114F  39FE               	andlw	-2
  7736  1150  0620               	xorwf	??_setMemory_Modify,w
  7737  1151  0023               	movlb	3	; select bank3
  7738  1152  00C4               	movwf	(_Memory^(0+384)+36)
  7739                           
  7740                           ;MCU_B1.c: 1002: Memory.Time = 0;
  7741  1153  01C2               	clrf	(_Memory^(0+384)+34)
  7742  1154  01C3               	clrf	((_Memory+1)^(0+384)+34)
  7743  1155  0008               	return
  7744  1156                     __end_of_setMemory_Modify:	
  7745                           
  7746                           	psect	text31
  7747  1F2D                     __ptext31:	
  7748 ;; *************** function _getMain_All_Error_Status *****************
  7749 ;; Defined at:
  7750 ;;		line 363 in file "../src/main_B1.c"
  7751 ;; Parameters:    Size  Location     Type
  7752 ;;  command         1    wreg     unsigned char 
  7753 ;; Auto vars:     Size  Location     Type
  7754 ;;  command         1    0[COMMON] unsigned char 
  7755 ;;  status          1    0[BANK0 ] unsigned char 
  7756 ;; Return value:  Size  Location     Type
  7757 ;;                  1    wreg      unsigned char 
  7758 ;; Registers used:
  7759 ;;		wreg, status,2
  7760 ;; Tracked objects:
  7761 ;;		On entry : 0/0
  7762 ;;		On exit  : 0/0
  7763 ;;		Unchanged: 0/0
  7764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7766 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7768 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;Total ram usage:        1 bytes
  7770 ;; Hardware stack levels used:    1
  7771 ;; Hardware stack levels required when called:    5
  7772 ;; This function calls:
  7773 ;;		Nothing
  7774 ;; This function is called by:
  7775 ;;		_setRF_Main
  7776 ;;		_getRxData
  7777 ;;		_Switch_Main
  7778 ;; This function uses a non-reentrant model
  7779 ;;
  7780                           
  7781                           
  7782                           ;psect for function _getMain_All_Error_Status
  7783  1F2D                     _getMain_All_Error_Status:	
  7784                           
  7785                           ;main_B1.c: 364: char status = 0;
  7786                           
  7787                           ;incstack = 0
  7788                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2]
  7789  1F2D  0020               	movlb	0	; select bank0
  7790  1F2E  01A0               	clrf	getMain_All_Error_Status@status
  7791                           
  7792                           ;main_B1.c: 400: return status;
  7793  1F2F  0820               	movf	getMain_All_Error_Status@status,w
  7794  1F30  0008               	return
  7795  1F31                     __end_of_getMain_All_Error_Status:	
  7796                           
  7797                           	psect	text32
  7798  10B4                     __ptext32:	
  7799 ;; *************** function _getRF_KeyStatus *****************
  7800 ;; Defined at:
  7801 ;;		line 187 in file "../src/RF_Control_B1.c"
  7802 ;; Parameters:    Size  Location     Type
  7803 ;;		None
  7804 ;; Auto vars:     Size  Location     Type
  7805 ;;  key             1    1[BANK0 ] unsigned char 
  7806 ;; Return value:  Size  Location     Type
  7807 ;;                  1    wreg      unsigned char 
  7808 ;; Registers used:
  7809 ;;		wreg, status,2
  7810 ;; Tracked objects:
  7811 ;;		On entry : 0/0
  7812 ;;		On exit  : 0/0
  7813 ;;		Unchanged: 0/0
  7814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7816 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7817 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7818 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7819 ;;Total ram usage:        3 bytes
  7820 ;; Hardware stack levels used:    1
  7821 ;; Hardware stack levels required when called:    5
  7822 ;; This function calls:
  7823 ;;		Nothing
  7824 ;; This function is called by:
  7825 ;;		_setRF_Main
  7826 ;; This function uses a non-reentrant model
  7827 ;;
  7828                           
  7829                           
  7830                           ;psect for function _getRF_KeyStatus
  7831  10B4                     _getRF_KeyStatus:	
  7832                           
  7833                           ;RF_Control_B1.c: 188: char key = 0;
  7834                           
  7835                           ;incstack = 0
  7836                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  7837  10B4  0020               	movlb	0	; select bank0
  7838  10B5  01A1               	clrf	getRF_KeyStatus@key
  7839                           
  7840                           ;RF_Control_B1.c: 194: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  7841  10B6  01A2               	clrf	_getRF_KeyStatus$4519
  7842  10B7  0AA2               	incf	_getRF_KeyStatus$4519,f
  7843  10B8  1F0C               	btfss	12,6	;volatile
  7844  10B9  1A0C               	btfsc	12,4	;volatile
  7845  10BA  28BF               	goto	l6347
  7846  10BB  1C0C               	btfss	12,0	;volatile
  7847  10BC  188D               	btfsc	13,1	;volatile
  7848  10BD  28BF               	goto	l6347
  7849  10BE  01A2               	clrf	_getRF_KeyStatus$4519
  7850  10BF                     l6347:	
  7851  10BF  0822               	movf	_getRF_KeyStatus$4519,w
  7852  10C0  00A0               	movwf	??_getRF_KeyStatus
  7853  10C1  0820               	movf	??_getRF_KeyStatus,w
  7854  10C2  00A1               	movwf	getRF_KeyStatus@key
  7855                           
  7856                           ;RF_Control_B1.c: 200: return key;
  7857  10C3  0821               	movf	getRF_KeyStatus@key,w
  7858  10C4  0008               	return
  7859  10C5                     __end_of_getRF_KeyStatus:	
  7860                           
  7861                           	psect	text33
  7862  10A3                     __ptext33:	
  7863 ;; *************** function _getBuz_GO *****************
  7864 ;; Defined at:
  7865 ;;		line 82 in file "../src/Buzzer_B1.c"
  7866 ;; Parameters:    Size  Location     Type
  7867 ;;		None
  7868 ;; Auto vars:     Size  Location     Type
  7869 ;;  i               2    4[BANK0 ] int 
  7870 ;; Return value:  Size  Location     Type
  7871 ;;                  2    0[BANK0 ] int 
  7872 ;; Registers used:
  7873 ;;		wreg, status,2, status,0
  7874 ;; Tracked objects:
  7875 ;;		On entry : 0/0
  7876 ;;		On exit  : 0/0
  7877 ;;		Unchanged: 0/0
  7878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7879 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7880 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7881 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7882 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7883 ;;Total ram usage:        6 bytes
  7884 ;; Hardware stack levels used:    1
  7885 ;; Hardware stack levels required when called:    5
  7886 ;; This function calls:
  7887 ;;		Nothing
  7888 ;; This function is called by:
  7889 ;;		_setRF_Main
  7890 ;; This function uses a non-reentrant model
  7891 ;;
  7892                           
  7893                           
  7894                           ;psect for function _getBuz_GO
  7895  10A3                     _getBuz_GO:	
  7896                           
  7897                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  7898                           
  7899                           ;incstack = 0
  7900                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  7901  10A3  0021               	movlb	1	; select bank1
  7902  10A4  0C30               	rrf	_Buz1^(0+128),w
  7903  10A5  3901               	andlw	1
  7904  10A6  0020               	movlb	0	; select bank0
  7905  10A7  00A2               	movwf	??_getBuz_GO
  7906  10A8  01A3               	clrf	??_getBuz_GO+1
  7907  10A9  0822               	movf	??_getBuz_GO,w
  7908  10AA  00A4               	movwf	getBuz_GO@i
  7909  10AB  0823               	movf	??_getBuz_GO+1,w
  7910  10AC  00A5               	movwf	getBuz_GO@i+1
  7911                           
  7912                           ;Buzzer_B1.c: 84: return i;
  7913  10AD  0825               	movf	getBuz_GO@i+1,w
  7914  10AE  01A1               	clrf	?_getBuz_GO+1
  7915  10AF  07A1               	addwf	?_getBuz_GO+1,f
  7916  10B0  0824               	movf	getBuz_GO@i,w
  7917  10B1  01A0               	clrf	?_getBuz_GO
  7918  10B2  07A0               	addwf	?_getBuz_GO,f
  7919  10B3  0008               	return
  7920  10B4                     __end_of_getBuz_GO:	
  7921                           
  7922                           	psect	text34
  7923  0D51                     __ptext34:	
  7924 ;; *************** function _CC2500_TxData *****************
  7925 ;; Defined at:
  7926 ;;		line 32 in file "../src/CC2500_B1.c"
  7927 ;; Parameters:    Size  Location     Type
  7928 ;;		None
  7929 ;; Auto vars:     Size  Location     Type
  7930 ;;  loop_e          1    5[BANK0 ] unsigned char 
  7931 ;; Return value:  Size  Location     Type
  7932 ;;		None               void
  7933 ;; Registers used:
  7934 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7935 ;; Tracked objects:
  7936 ;;		On entry : 0/0
  7937 ;;		On exit  : 0/0
  7938 ;;		Unchanged: 0/0
  7939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7941 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7942 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7943 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7944 ;;Total ram usage:        2 bytes
  7945 ;; Hardware stack levels used:    1
  7946 ;; Hardware stack levels required when called:    7
  7947 ;; This function calls:
  7948 ;;		_CC2500_WriteByte
  7949 ;;		_CC2500_WriteCommand
  7950 ;;		_Timeout_Counter
  7951 ;;		_set_TimeoutCleared
  7952 ;; This function is called by:
  7953 ;;		_setRF_Main
  7954 ;; This function uses a non-reentrant model
  7955 ;;
  7956                           
  7957                           
  7958                           ;psect for function _CC2500_TxData
  7959  0D51                     _CC2500_TxData:	
  7960                           
  7961                           ;CC2500_B1.c: 33: unsigned char loop_e;
  7962                           ;CC2500_B1.c: 35: RC4 = 0;
  7963                           
  7964                           ;incstack = 0
  7965                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7966  0D51  0020               	movlb	0	; select bank0
  7967  0D52  120E               	bcf	14,4	;volatile
  7968                           
  7969                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  7970  0D53  307F               	movlw	127
  7971  0D54  00A4               	movwf	??_CC2500_TxData
  7972  0D55  0824               	movf	??_CC2500_TxData,w
  7973  0D56  00FA               	movwf	_SPI0Buffer
  7974                           
  7975                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  7976  0D57  2D5B               	goto	l6011
  7977  0D58                     l6009:	
  7978                           
  7979                           ;CC2500_B1.c: 38: Timeout_Counter();
  7980  0D58  3191  21E0  318D   	fcall	_Timeout_Counter
  7981  0D5B                     l6011:	
  7982  0D5B  0020               	movlb	0	; select bank0
  7983  0D5C  1D0E               	btfss	14,2	;volatile
  7984  0D5D  2D61               	goto	l6015
  7985  0D5E  0021               	movlb	1	; select bank1
  7986  0D5F  1D2D               	btfss	(_myMain^(0+128)+13),2
  7987  0D60  2D58               	goto	l6009
  7988  0D61                     l6015:	
  7989                           
  7990                           ;CC2500_B1.c: 39: };
  7991                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  7992  0D61  319F  2731  318D   	fcall	_set_TimeoutCleared
  7993                           
  7994                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  7995  0D64  3191  2190  318D   	fcall	_CC2500_WriteByte
  7996                           
  7997                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  7998  0D67  0021               	movlb	1	; select bank1
  7999  0D68  085B               	movf	_Tx_Length^(0+128),w
  8000  0D69  0020               	movlb	0	; select bank0
  8001  0D6A  00A4               	movwf	??_CC2500_TxData
  8002  0D6B  0824               	movf	??_CC2500_TxData,w
  8003  0D6C  00FA               	movwf	_SPI0Buffer
  8004                           
  8005                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8006  0D6D  3191  2190  318D   	fcall	_CC2500_WriteByte
  8007                           
  8008                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8009  0D70  0020               	movlb	0	; select bank0
  8010  0D71  01A5               	clrf	CC2500_TxData@loop_e
  8011  0D72                     l6029:	
  8012  0D72  0021               	movlb	1	; select bank1
  8013  0D73  085B               	movf	_Tx_Length^(0+128),w
  8014  0D74  0020               	movlb	0	; select bank0
  8015  0D75  0225               	subwf	CC2500_TxData@loop_e,w
  8016  0D76  1803               	btfsc	3,0
  8017  0D77  2D8A               	goto	l247
  8018                           
  8019                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8020  0D78  0825               	movf	CC2500_TxData@loop_e,w
  8021  0D79  3E20               	addlw	_RF_Data& (0+255)
  8022  0D7A  0086               	movwf	6
  8023  0D7B  3001               	movlw	1	; select bank2/3
  8024  0D7C  0087               	movwf	7
  8025  0D7D  0801               	movf	1,w
  8026  0D7E  00A4               	movwf	??_CC2500_TxData
  8027  0D7F  0824               	movf	??_CC2500_TxData,w
  8028  0D80  00FA               	movwf	_SPI0Buffer
  8029                           
  8030                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8031  0D81  3191  2190  318D   	fcall	_CC2500_WriteByte
  8032  0D84  3001               	movlw	1
  8033  0D85  0020               	movlb	0	; select bank0
  8034  0D86  00A4               	movwf	??_CC2500_TxData
  8035  0D87  0824               	movf	??_CC2500_TxData,w
  8036  0D88  07A5               	addwf	CC2500_TxData@loop_e,f
  8037  0D89  2D72               	goto	l6029
  8038  0D8A                     l247:	
  8039                           
  8040                           ;CC2500_B1.c: 48: }
  8041                           ;CC2500_B1.c: 49: RC4 = 1;
  8042  0D8A  160E               	bsf	14,4	;volatile
  8043                           
  8044                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8045  0D8B  3035               	movlw	53
  8046  0D8C  3192  2262  318D   	fcall	_CC2500_WriteCommand
  8047                           
  8048                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  8049  0D8F  2D93               	goto	l6035
  8050  0D90                     l6033:	
  8051                           
  8052                           ;CC2500_B1.c: 52: Timeout_Counter();
  8053  0D90  3191  21E0  318D   	fcall	_Timeout_Counter
  8054  0D93                     l6035:	
  8055  0D93  0020               	movlb	0	; select bank0
  8056  0D94  180D               	btfsc	13,0	;volatile
  8057  0D95  2D99               	goto	l6039
  8058  0D96  0021               	movlb	1	; select bank1
  8059  0D97  1D2D               	btfss	(_myMain^(0+128)+13),2
  8060  0D98  2D90               	goto	l6033
  8061  0D99                     l6039:	
  8062                           
  8063                           ;CC2500_B1.c: 53: };
  8064                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8065  0D99  319F  2731  318D   	fcall	_set_TimeoutCleared
  8066                           
  8067                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  8068  0D9C  2DA0               	goto	l6043
  8069  0D9D                     l6041:	
  8070                           
  8071                           ;CC2500_B1.c: 57: Timeout_Counter();
  8072  0D9D  3191  21E0  318D   	fcall	_Timeout_Counter
  8073  0DA0                     l6043:	
  8074  0DA0  0020               	movlb	0	; select bank0
  8075  0DA1  1C0D               	btfss	13,0	;volatile
  8076  0DA2  2DA6               	goto	l6047
  8077  0DA3  0021               	movlb	1	; select bank1
  8078  0DA4  1D2D               	btfss	(_myMain^(0+128)+13),2
  8079  0DA5  2D9D               	goto	l6041
  8080  0DA6                     l6047:	
  8081                           
  8082                           ;CC2500_B1.c: 58: };
  8083                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8084  0DA6  319F  2731  318D   	fcall	_set_TimeoutCleared
  8085                           
  8086                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8087  0DA9  3036               	movlw	54
  8088  0DAA  3192  2262  318D   	fcall	_CC2500_WriteCommand
  8089                           
  8090                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8091  0DAD  303B               	movlw	59
  8092  0DAE  3192  2262  318D   	fcall	_CC2500_WriteCommand
  8093                           
  8094                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  8095  0DB1  303A               	movlw	58
  8096  0DB2  3192  2262         	fcall	_CC2500_WriteCommand
  8097                           
  8098                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8099  0DB4  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8100  0DB5  0008               	return
  8101  0DB6                     __end_of_CC2500_TxData:	
  8102                           
  8103                           	psect	text35
  8104  0E1E                     __ptext35:	
  8105 ;; *************** function _CC2500_RxData *****************
  8106 ;; Defined at:
  8107 ;;		line 70 in file "../src/CC2500_B1.c"
  8108 ;; Parameters:    Size  Location     Type
  8109 ;;		None
  8110 ;; Auto vars:     Size  Location     Type
  8111 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8112 ;; Return value:  Size  Location     Type
  8113 ;;		None               void
  8114 ;; Registers used:
  8115 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8116 ;; Tracked objects:
  8117 ;;		On entry : 0/0
  8118 ;;		On exit  : 0/0
  8119 ;;		Unchanged: 0/0
  8120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8122 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8123 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8124 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8125 ;;Total ram usage:        2 bytes
  8126 ;; Hardware stack levels used:    1
  8127 ;; Hardware stack levels required when called:    7
  8128 ;; This function calls:
  8129 ;;		_CC2500_ReadByte
  8130 ;;		_CC2500_ReadStatus
  8131 ;;		_CC2500_WriteByte
  8132 ;;		_Timeout_Counter
  8133 ;;		_set_TimeoutCleared
  8134 ;; This function is called by:
  8135 ;;		_setRF_Main
  8136 ;; This function uses a non-reentrant model
  8137 ;;
  8138                           
  8139                           
  8140                           ;psect for function _CC2500_RxData
  8141  0E1E                     _CC2500_RxData:	
  8142                           
  8143                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8144                           ;CC2500_B1.c: 75: if (RB0 == 1)
  8145                           
  8146                           ;incstack = 0
  8147                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8148  0E1E  0020               	movlb	0	; select bank0
  8149  0E1F  180D               	btfsc	13,0	;volatile
  8150  0E20  2E25               	goto	l6063
  8151  0E21  2E2E               	goto	l6069
  8152  0E22                     l6061:	
  8153                           ;CC2500_B1.c: 76: {
  8154                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  8155                           
  8156                           
  8157                           ;CC2500_B1.c: 78: Timeout_Counter();
  8158  0E22  3191  21E0  318E   	fcall	_Timeout_Counter
  8159  0E25                     l6063:	
  8160  0E25  0020               	movlb	0	; select bank0
  8161  0E26  1C0D               	btfss	13,0	;volatile
  8162  0E27  2E2B               	goto	l6067
  8163  0E28  0021               	movlb	1	; select bank1
  8164  0E29  1D2D               	btfss	(_myMain^(0+128)+13),2
  8165  0E2A  2E22               	goto	l6061
  8166  0E2B                     l6067:	
  8167                           
  8168                           ;CC2500_B1.c: 79: };
  8169                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8170  0E2B  319F  2731  318E   	fcall	_set_TimeoutCleared
  8171  0E2E                     l6069:	
  8172                           
  8173                           ;CC2500_B1.c: 81: }
  8174                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8175  0E2E  303B               	movlw	59
  8176  0E2F  3193  23AD  318E   	fcall	_CC2500_ReadStatus
  8177                           
  8178                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8179  0E32  0021               	movlb	1	; select bank1
  8180  0E33  085E               	movf	_s_data^(0+128),w
  8181  0E34  1903               	btfsc	3,2
  8182  0E35  0008               	return
  8183                           
  8184                           ;CC2500_B1.c: 86: RC4 = 0;
  8185  0E36  0020               	movlb	0	; select bank0
  8186  0E37  120E               	bcf	14,4	;volatile
  8187                           
  8188                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8189  0E38  30FF               	movlw	255
  8190  0E39  00A4               	movwf	??_CC2500_RxData
  8191  0E3A  0824               	movf	??_CC2500_RxData,w
  8192  0E3B  00FA               	movwf	_SPI0Buffer
  8193                           
  8194                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  8195  0E3C  2E43               	goto	l6079
  8196  0E3D                     l6081:	
  8197  0E3D  0021               	movlb	1	; select bank1
  8198  0E3E  192D               	btfsc	(_myMain^(0+128)+13),2
  8199  0E3F  2E46               	goto	l272
  8200                           
  8201                           ;CC2500_B1.c: 89: Timeout_Counter();
  8202  0E40  3191  21E0  318E   	fcall	_Timeout_Counter
  8203  0E43                     l6079:	
  8204  0E43  0020               	movlb	0	; select bank0
  8205  0E44  190E               	btfsc	14,2	;volatile
  8206  0E45  2E3D               	goto	l6081
  8207  0E46                     l272:	
  8208                           
  8209                           ;CC2500_B1.c: 90: };
  8210                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  8211  0E46  0021               	movlb	1	; select bank1
  8212  0E47  192D               	btfsc	(_myMain^(0+128)+13),2
  8213  0E48  2E89               	goto	l273
  8214                           
  8215                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  8216  0E49  3191  2190  318E   	fcall	_CC2500_WriteByte
  8217                           
  8218                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  8219  0E4C  3192  224B  318E   	fcall	_CC2500_ReadByte
  8220                           
  8221                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  8222  0E4F  087A               	movf	_SPI0Buffer,w
  8223  0E50  0020               	movlb	0	; select bank0
  8224  0E51  00A4               	movwf	??_CC2500_RxData
  8225  0E52  0824               	movf	??_CC2500_RxData,w
  8226  0E53  0021               	movlb	1	; select bank1
  8227  0E54  00D9               	movwf	_Rx_Length^(0+128)
  8228                           
  8229                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8230  0E55  0020               	movlb	0	; select bank0
  8231  0E56  01A5               	clrf	CC2500_RxData@loop_f
  8232  0E57                     l6095:	
  8233  0E57  0021               	movlb	1	; select bank1
  8234  0E58  0859               	movf	_Rx_Length^(0+128),w
  8235  0E59  0020               	movlb	0	; select bank0
  8236  0E5A  0225               	subwf	CC2500_RxData@loop_f,w
  8237  0E5B  1803               	btfsc	3,0
  8238  0E5C  2E6F               	goto	l6097
  8239                           
  8240                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8241  0E5D  3192  224B  318E   	fcall	_CC2500_ReadByte
  8242                           
  8243                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  8244  0E60  087A               	movf	_SPI0Buffer,w
  8245  0E61  0020               	movlb	0	; select bank0
  8246  0E62  00A4               	movwf	??_CC2500_RxData
  8247  0E63  0825               	movf	CC2500_RxData@loop_f,w
  8248  0E64  3E20               	addlw	_RF_Data& (0+255)
  8249  0E65  0086               	movwf	6
  8250  0E66  3001               	movlw	1	; select bank2/3
  8251  0E67  0087               	movwf	7
  8252  0E68  0824               	movf	??_CC2500_RxData,w
  8253  0E69  0081               	movwf	1
  8254  0E6A  3001               	movlw	1
  8255  0E6B  00A4               	movwf	??_CC2500_RxData
  8256  0E6C  0824               	movf	??_CC2500_RxData,w
  8257  0E6D  07A5               	addwf	CC2500_RxData@loop_f,f
  8258  0E6E  2E57               	goto	l6095
  8259  0E6F                     l6097:	
  8260                           
  8261                           ;CC2500_B1.c: 99: }
  8262                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  8263  0E6F  3192  224B  318E   	fcall	_CC2500_ReadByte
  8264                           
  8265                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  8266  0E72  087A               	movf	_SPI0Buffer,w
  8267  0E73  0020               	movlb	0	; select bank0
  8268  0E74  00A4               	movwf	??_CC2500_RxData
  8269  0E75  0824               	movf	??_CC2500_RxData,w
  8270  0E76  0021               	movlb	1	; select bank1
  8271  0E77  00D8               	movwf	_RSSI^(0+128)
  8272                           
  8273                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8274  0E78  3192  224B  318E   	fcall	_CC2500_ReadByte
  8275                           
  8276                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  8277  0E7B  087A               	movf	_SPI0Buffer,w
  8278  0E7C  0020               	movlb	0	; select bank0
  8279  0E7D  00A4               	movwf	??_CC2500_RxData
  8280  0E7E  0824               	movf	??_CC2500_RxData,w
  8281  0E7F  0021               	movlb	1	; select bank1
  8282  0E80  00D4               	movwf	_CRC^(0+128)
  8283                           
  8284                           ;CC2500_B1.c: 104: RC4 = 1;
  8285  0E81  0020               	movlb	0	; select bank0
  8286  0E82  160E               	bsf	14,4	;volatile
  8287                           
  8288                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  8289  0E83  0021               	movlb	1	; select bank1
  8290  0E84  1BD4               	btfsc	_CRC^(0+128),7
  8291                           
  8292                           ;CC2500_B1.c: 106: Receive_OK = 1;
  8293  0E85  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8294                           
  8295                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  8296  0E86  11BC               	bcf	_RF1^(0+128),3
  8297                           
  8298                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  8299  0E87  14BC               	bsf	_RF1^(0+128),1
  8300                           
  8301                           ;CC2500_B1.c: 110: } else {
  8302  0E88  2E8B               	goto	l6109
  8303  0E89                     l273:	
  8304                           
  8305                           ;CC2500_B1.c: 111: RC4 = 1;
  8306  0E89  0020               	movlb	0	; select bank0
  8307  0E8A  160E               	bsf	14,4	;volatile
  8308  0E8B                     l6109:	
  8309                           
  8310                           ;CC2500_B1.c: 112: }
  8311                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  8312  0E8B  319F  2731         	fcall	_set_TimeoutCleared
  8313  0E8D  0021               	movlb	1	; select bank1
  8314  0E8E  0008               	return
  8315  0E8F                     __end_of_CC2500_RxData:	
  8316                           
  8317                           	psect	text36
  8318  13AD                     __ptext36:	
  8319 ;; *************** function _CC2500_ReadStatus *****************
  8320 ;; Defined at:
  8321 ;;		line 304 in file "../src/CC2500_B1.c"
  8322 ;; Parameters:    Size  Location     Type
  8323 ;;  status_addr     1    wreg     unsigned char 
  8324 ;; Auto vars:     Size  Location     Type
  8325 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8326 ;; Return value:  Size  Location     Type
  8327 ;;		None               void
  8328 ;; Registers used:
  8329 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8330 ;; Tracked objects:
  8331 ;;		On entry : 0/0
  8332 ;;		On exit  : 0/0
  8333 ;;		Unchanged: 0/0
  8334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8336 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8337 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8338 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8339 ;;Total ram usage:        2 bytes
  8340 ;; Hardware stack levels used:    1
  8341 ;; Hardware stack levels required when called:    6
  8342 ;; This function calls:
  8343 ;;		_CC2500_ReadByte
  8344 ;;		_CC2500_WriteByte
  8345 ;;		_Timeout_Counter
  8346 ;;		_set_TimeoutCleared
  8347 ;; This function is called by:
  8348 ;;		_CC2500_RxData
  8349 ;;		_setRF_Main
  8350 ;; This function uses a non-reentrant model
  8351 ;;
  8352                           
  8353                           
  8354                           ;psect for function _CC2500_ReadStatus
  8355  13AD                     _CC2500_ReadStatus:	
  8356                           
  8357                           ;incstack = 0
  8358                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8359                           ;CC2500_ReadStatus@status_addr stored from wreg
  8360  13AD  0020               	movlb	0	; select bank0
  8361  13AE  00A3               	movwf	CC2500_ReadStatus@status_addr
  8362                           
  8363                           ;CC2500_B1.c: 305: RC4 = 0;
  8364  13AF  120E               	bcf	14,4	;volatile
  8365                           
  8366                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  8367  13B0  0823               	movf	CC2500_ReadStatus@status_addr,w
  8368  13B1  3EC0               	addlw	192
  8369  13B2  00A2               	movwf	??_CC2500_ReadStatus
  8370  13B3  0822               	movf	??_CC2500_ReadStatus,w
  8371  13B4  00FA               	movwf	_SPI0Buffer
  8372                           
  8373                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  8374  13B5  2BB9               	goto	l5859
  8375  13B6                     l5857:	
  8376                           
  8377                           ;CC2500_B1.c: 309: Timeout_Counter();
  8378  13B6  3191  21E0  3193   	fcall	_Timeout_Counter
  8379  13B9                     l5859:	
  8380  13B9  0020               	movlb	0	; select bank0
  8381  13BA  1D0E               	btfss	14,2	;volatile
  8382  13BB  2BBF               	goto	l5863
  8383  13BC  0021               	movlb	1	; select bank1
  8384  13BD  1D2D               	btfss	(_myMain^(0+128)+13),2
  8385  13BE  2BB6               	goto	l5857
  8386  13BF                     l5863:	
  8387                           
  8388                           ;CC2500_B1.c: 310: };
  8389                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  8390  13BF  319F  2731  3193   	fcall	_set_TimeoutCleared
  8391                           
  8392                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  8393  13C2  3191  2190  3193   	fcall	_CC2500_WriteByte
  8394                           
  8395                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  8396  13C5  3192  224B         	fcall	_CC2500_ReadByte
  8397                           
  8398                           ;CC2500_B1.c: 315: RC4 = 1;
  8399  13C7  0020               	movlb	0	; select bank0
  8400  13C8  160E               	bsf	14,4	;volatile
  8401                           
  8402                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  8403  13C9  087A               	movf	_SPI0Buffer,w
  8404  13CA  00A2               	movwf	??_CC2500_ReadStatus
  8405  13CB  0822               	movf	??_CC2500_ReadStatus,w
  8406  13CC  0021               	movlb	1	; select bank1
  8407  13CD  00DE               	movwf	_s_data^(0+128)
  8408  13CE  0008               	return
  8409  13CF                     __end_of_CC2500_ReadStatus:	
  8410                           
  8411                           	psect	text37
  8412  124B                     __ptext37:	
  8413 ;; *************** function _CC2500_ReadByte *****************
  8414 ;; Defined at:
  8415 ;;		line 238 in file "../src/CC2500_B1.c"
  8416 ;; Parameters:    Size  Location     Type
  8417 ;;		None
  8418 ;; Auto vars:     Size  Location     Type
  8419 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8420 ;; Return value:  Size  Location     Type
  8421 ;;		None               void
  8422 ;; Registers used:
  8423 ;;		wreg, status,2, status,0
  8424 ;; Tracked objects:
  8425 ;;		On entry : 0/0
  8426 ;;		On exit  : 0/0
  8427 ;;		Unchanged: 0/0
  8428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8430 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8431 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8432 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8433 ;;Total ram usage:        2 bytes
  8434 ;; Hardware stack levels used:    1
  8435 ;; Hardware stack levels required when called:    5
  8436 ;; This function calls:
  8437 ;;		Nothing
  8438 ;; This function is called by:
  8439 ;;		_CC2500_RxData
  8440 ;;		_CC2500_ReadStatus
  8441 ;;		_CC2500_ReadREG
  8442 ;; This function uses a non-reentrant model
  8443 ;;
  8444                           
  8445                           
  8446                           ;psect for function _CC2500_ReadByte
  8447  124B                     _CC2500_ReadByte:	
  8448                           
  8449                           ;CC2500_B1.c: 239: unsigned char loop_b;
  8450                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  8451                           
  8452                           ;incstack = 0
  8453                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8454  124B  0020               	movlb	0	; select bank0
  8455  124C  01A1               	clrf	CC2500_ReadByte@loop_b
  8456  124D                     L5:	
  8457  124D  3008               	movlw	8
  8458  124E  0221               	subwf	CC2500_ReadByte@loop_b,w
  8459  124F  1803               	btfsc	3,0
  8460  1250  0008               	return
  8461                           
  8462                           ;CC2500_B1.c: 241: RC1 = 1;
  8463  1251  148E               	bsf	14,1	;volatile
  8464                           
  8465                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  8466  1252  1003               	clrc
  8467  1253  0DFA               	rlf	_SPI0Buffer,f
  8468                           
  8469                           ;CC2500_B1.c: 243: if (RC2 == 1)
  8470  1254  1D0E               	btfss	14,2	;volatile
  8471  1255  2A58               	goto	l5747
  8472                           
  8473                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  8474  1256  147A               	bsf	_SPI0Buffer,0
  8475  1257  2A5C               	goto	l5749
  8476  1258                     l5747:	
  8477                           
  8478                           ;CC2500_B1.c: 245: else
  8479                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  8480  1258  30FE               	movlw	254
  8481  1259  00A0               	movwf	??_CC2500_ReadByte
  8482  125A  0820               	movf	??_CC2500_ReadByte,w
  8483  125B  05FA               	andwf	_SPI0Buffer,f
  8484  125C                     l5749:	
  8485                           
  8486                           ;CC2500_B1.c: 247: RC1 = 0;
  8487  125C  108E               	bcf	14,1	;volatile
  8488  125D  3001               	movlw	1
  8489  125E  00A0               	movwf	??_CC2500_ReadByte
  8490  125F  0820               	movf	??_CC2500_ReadByte,w
  8491  1260  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8492  1261  2A4D               	goto	L5
  8493  1262                     __end_of_CC2500_ReadByte:	
  8494                           
  8495                           	psect	text38
  8496  1F1A                     __ptext38:	
  8497 ;; *************** function _RF_Initialization *****************
  8498 ;; Defined at:
  8499 ;;		line 9 in file "../src/RF_Control_B1.c"
  8500 ;; Parameters:    Size  Location     Type
  8501 ;;		None
  8502 ;; Auto vars:     Size  Location     Type
  8503 ;;		None
  8504 ;; Return value:  Size  Location     Type
  8505 ;;		None               void
  8506 ;; Registers used:
  8507 ;;		wreg, status,2, status,0, pclath, cstack
  8508 ;; Tracked objects:
  8509 ;;		On entry : 0/0
  8510 ;;		On exit  : 0/0
  8511 ;;		Unchanged: 0/0
  8512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8517 ;;Total ram usage:        0 bytes
  8518 ;; Hardware stack levels used:    1
  8519 ;; Hardware stack levels required when called:    6
  8520 ;; This function calls:
  8521 ;;		_setRF_Initialization
  8522 ;; This function is called by:
  8523 ;;		_main
  8524 ;; This function uses a non-reentrant model
  8525 ;;
  8526                           
  8527                           
  8528                           ;psect for function _RF_Initialization
  8529  1F1A                     _RF_Initialization:	
  8530                           
  8531                           ;RF_Control_B1.c: 11: setRF_Initialization();
  8532                           
  8533                           ;incstack = 0
  8534                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8535  1F1A  319F  2794         	fcall	_setRF_Initialization
  8536  1F1C  0008               	return
  8537  1F1D                     __end_of_RF_Initialization:	
  8538                           
  8539                           	psect	text39
  8540  1F94                     __ptext39:	
  8541 ;; *************** function _setRF_Initialization *****************
  8542 ;; Defined at:
  8543 ;;		line 43 in file "../src/RF_Control_B1.c"
  8544 ;; Parameters:    Size  Location     Type
  8545 ;;		None
  8546 ;; Auto vars:     Size  Location     Type
  8547 ;;		None
  8548 ;; Return value:  Size  Location     Type
  8549 ;;		None               void
  8550 ;; Registers used:
  8551 ;;		wreg
  8552 ;; Tracked objects:
  8553 ;;		On entry : 0/0
  8554 ;;		On exit  : 0/0
  8555 ;;		Unchanged: 0/0
  8556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8559 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8560 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8561 ;;Total ram usage:        1 bytes
  8562 ;; Hardware stack levels used:    1
  8563 ;; Hardware stack levels required when called:    5
  8564 ;; This function calls:
  8565 ;;		Nothing
  8566 ;; This function is called by:
  8567 ;;		_RF_Initialization
  8568 ;; This function uses a non-reentrant model
  8569 ;;
  8570                           
  8571                           
  8572                           ;psect for function _setRF_Initialization
  8573  1F94                     _setRF_Initialization:	
  8574                           
  8575                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  8576                           
  8577                           ;incstack = 0
  8578                           ; Regs used in _setRF_Initialization: [wreg]
  8579  1F94  3015               	movlw	21
  8580  1F95  0020               	movlb	0	; select bank0
  8581  1F96  00A0               	movwf	??_setRF_Initialization
  8582  1F97  0820               	movf	??_setRF_Initialization,w
  8583  1F98  0021               	movlb	1	; select bank1
  8584  1F99  00DB               	movwf	_Tx_Length^(0+128)
  8585                           
  8586                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  8587  1F9A  300A               	movlw	10
  8588  1F9B  00C3               	movwf	(_RF1^(0+128)+7)
  8589  1F9C  3000               	movlw	0
  8590  1F9D  00C4               	movwf	(_RF1^(0+128)+8)
  8591  1F9E  0008               	return
  8592  1F9F                     __end_of_setRF_Initialization:	
  8593                           
  8594                           	psect	text40
  8595  110C                     __ptext40:	
  8596 ;; *************** function _Mcu_Initialization *****************
  8597 ;; Defined at:
  8598 ;;		line 30 in file "../src/MCU_B1.c"
  8599 ;; Parameters:    Size  Location     Type
  8600 ;;		None
  8601 ;; Auto vars:     Size  Location     Type
  8602 ;;		None
  8603 ;; Return value:  Size  Location     Type
  8604 ;;		None               void
  8605 ;; Registers used:
  8606 ;;		wreg, status,2, status,0, pclath, cstack
  8607 ;; Tracked objects:
  8608 ;;		On entry : 0/0
  8609 ;;		On exit  : 0/0
  8610 ;;		Unchanged: 0/0
  8611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8616 ;;Total ram usage:        0 bytes
  8617 ;; Hardware stack levels used:    1
  8618 ;; Hardware stack levels required when called:    6
  8619 ;; This function calls:
  8620 ;;		_ADC_Set
  8621 ;;		_Fosc_Set
  8622 ;;		_IOC_Set
  8623 ;;		_IO_Set
  8624 ;;		_TMR1_Set
  8625 ;;		_WDT_Set
  8626 ;; This function is called by:
  8627 ;;		_main
  8628 ;; This function uses a non-reentrant model
  8629 ;;
  8630                           
  8631                           
  8632                           ;psect for function _Mcu_Initialization
  8633  110C                     _Mcu_Initialization:	
  8634                           
  8635                           ;MCU_B1.c: 32: Fosc_Set();
  8636                           
  8637                           ;incstack = 0
  8638                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8639  110C  319F  2729  3191   	fcall	_Fosc_Set
  8640                           
  8641                           ;MCU_B1.c: 34: IO_Set();
  8642  110F  3192  227B  3191   	fcall	_IO_Set
  8643                           
  8644                           ;MCU_B1.c: 36: ;;
  8645                           ;MCU_B1.c: 38: TMR1_Set();
  8646  1112  319F  27E7  3191   	fcall	_TMR1_Set
  8647                           
  8648                           ;MCU_B1.c: 40: ADC_Set();
  8649  1115  319F  2748  3191   	fcall	_ADC_Set
  8650                           
  8651                           ;MCU_B1.c: 42: ;;
  8652                           ;MCU_B1.c: 44: ;;
  8653                           ;MCU_B1.c: 46: IOC_Set();
  8654  1118  319F  27DB  3191   	fcall	_IOC_Set
  8655                           
  8656                           ;MCU_B1.c: 48: ;;
  8657                           ;MCU_B1.c: 50: ;;
  8658                           ;MCU_B1.c: 52: WDT_Set();
  8659  111B  319F  2789         	fcall	_WDT_Set
  8660  111D  0008               	return
  8661  111E                     __end_of_Mcu_Initialization:	
  8662                           
  8663                           	psect	text41
  8664  1F89                     __ptext41:	
  8665 ;; *************** function _WDT_Set *****************
  8666 ;; Defined at:
  8667 ;;		line 1019 in file "../src/MCU_B1.c"
  8668 ;; Parameters:    Size  Location     Type
  8669 ;;		None
  8670 ;; Auto vars:     Size  Location     Type
  8671 ;;		None
  8672 ;; Return value:  Size  Location     Type
  8673 ;;		None               void
  8674 ;; Registers used:
  8675 ;;		wreg
  8676 ;; Tracked objects:
  8677 ;;		On entry : 0/0
  8678 ;;		On exit  : 0/0
  8679 ;;		Unchanged: 0/0
  8680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8683 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8684 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8685 ;;Total ram usage:        1 bytes
  8686 ;; Hardware stack levels used:    1
  8687 ;; Hardware stack levels required when called:    5
  8688 ;; This function calls:
  8689 ;;		Nothing
  8690 ;; This function is called by:
  8691 ;;		_Mcu_Initialization
  8692 ;; This function uses a non-reentrant model
  8693 ;;
  8694                           
  8695                           
  8696                           ;psect for function _WDT_Set
  8697  1F89                     _WDT_Set:	
  8698                           
  8699                           ;MCU_B1.c: 1026: WDTCON = 0b00010111;;
  8700                           
  8701                           ;incstack = 0
  8702                           ; Regs used in _WDT_Set: [wreg]
  8703  1F89  3017               	movlw	23
  8704  1F8A  0021               	movlb	1	; select bank1
  8705  1F8B  0097               	movwf	23	;volatile
  8706                           
  8707                           ;MCU_B1.c: 1028: WDT.Enable = 1;
  8708  1F8C  1452               	bsf	_WDT^(0+128),0
  8709                           
  8710                           ;MCU_B1.c: 1029: WDT.Timer = 10;
  8711  1F8D  300A               	movlw	10
  8712  1F8E  0020               	movlb	0	; select bank0
  8713  1F8F  00A0               	movwf	??_WDT_Set
  8714  1F90  0820               	movf	??_WDT_Set,w
  8715  1F91  0021               	movlb	1	; select bank1
  8716  1F92  00D3               	movwf	(_WDT^(0+128)+1)
  8717  1F93  0008               	return
  8718  1F94                     __end_of_WDT_Set:	
  8719                           
  8720                           	psect	text42
  8721  1FE7                     __ptext42:	
  8722 ;; *************** function _TMR1_Set *****************
  8723 ;; Defined at:
  8724 ;;		line 199 in file "../src/MCU_B1.c"
  8725 ;; Parameters:    Size  Location     Type
  8726 ;;		None
  8727 ;; Auto vars:     Size  Location     Type
  8728 ;;		None
  8729 ;; Return value:  Size  Location     Type
  8730 ;;		None               void
  8731 ;; Registers used:
  8732 ;;		wreg
  8733 ;; Tracked objects:
  8734 ;;		On entry : 0/0
  8735 ;;		On exit  : 0/0
  8736 ;;		Unchanged: 0/0
  8737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8742 ;;Total ram usage:        0 bytes
  8743 ;; Hardware stack levels used:    1
  8744 ;; Hardware stack levels required when called:    5
  8745 ;; This function calls:
  8746 ;;		Nothing
  8747 ;; This function is called by:
  8748 ;;		_Mcu_Initialization
  8749 ;; This function uses a non-reentrant model
  8750 ;;
  8751                           
  8752                           
  8753                           ;psect for function _TMR1_Set
  8754  1FE7                     _TMR1_Set:	
  8755                           
  8756                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  8757                           
  8758                           ;incstack = 0
  8759                           ; Regs used in _TMR1_Set: [wreg]
  8760  1FE7  3041               	movlw	65
  8761  1FE8  0020               	movlb	0	; select bank0
  8762  1FE9  0098               	movwf	24	;volatile
  8763                           
  8764                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  8765  1FEA  30FA               	movlw	250
  8766  1FEB  0097               	movwf	23	;volatile
  8767                           
  8768                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  8769  1FEC  3038               	movlw	56
  8770  1FED  0096               	movwf	22	;volatile
  8771                           
  8772                           ;MCU_B1.c: 203: TMR1IE = 1;
  8773  1FEE  0021               	movlb	1	; select bank1
  8774  1FEF  1411               	bsf	17,0	;volatile
  8775                           
  8776                           ;MCU_B1.c: 204: PEIE = 1;
  8777  1FF0  170B               	bsf	11,6	;volatile
  8778                           
  8779                           ;MCU_B1.c: 205: GIE = 1;
  8780  1FF1  178B               	bsf	11,7	;volatile
  8781  1FF2  0008               	return
  8782  1FF3                     __end_of_TMR1_Set:	
  8783                           
  8784                           	psect	text43
  8785  127B                     __ptext43:	
  8786 ;; *************** function _IO_Set *****************
  8787 ;; Defined at:
  8788 ;;		line 60 in file "../src/MCU_B1.c"
  8789 ;; Parameters:    Size  Location     Type
  8790 ;;		None
  8791 ;; Auto vars:     Size  Location     Type
  8792 ;;		None
  8793 ;; Return value:  Size  Location     Type
  8794 ;;		None               void
  8795 ;; Registers used:
  8796 ;;		wreg, status,2
  8797 ;; Tracked objects:
  8798 ;;		On entry : 0/0
  8799 ;;		On exit  : 0/0
  8800 ;;		Unchanged: 0/0
  8801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8806 ;;Total ram usage:        0 bytes
  8807 ;; Hardware stack levels used:    1
  8808 ;; Hardware stack levels required when called:    5
  8809 ;; This function calls:
  8810 ;;		Nothing
  8811 ;; This function is called by:
  8812 ;;		_Mcu_Initialization
  8813 ;; This function uses a non-reentrant model
  8814 ;;
  8815                           
  8816                           
  8817                           ;psect for function _IO_Set
  8818  127B                     _IO_Set:	
  8819                           
  8820                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  8821                           
  8822                           ;incstack = 0
  8823                           ; Regs used in _IO_Set: [wreg+status,2]
  8824  127B  3077               	movlw	119
  8825  127C  0021               	movlb	1	; select bank1
  8826  127D  008C               	movwf	12	;volatile
  8827                           
  8828                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  8829  127E  3007               	movlw	7
  8830  127F  008D               	movwf	13	;volatile
  8831                           
  8832                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  8833  1280  300C               	movlw	12
  8834  1281  008E               	movwf	14	;volatile
  8835                           
  8836                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  8837  1282  0022               	movlb	2	; select bank2
  8838  1283  018C               	clrf	12	;volatile
  8839                           
  8840                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  8841  1284  3002               	movlw	2
  8842  1285  008D               	movwf	13	;volatile
  8843                           
  8844                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  8845  1286  018E               	clrf	14	;volatile
  8846                           
  8847                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  8848  1287  3022               	movlw	34
  8849  1288  0023               	movlb	3	; select bank3
  8850  1289  008C               	movwf	12	;volatile
  8851                           
  8852                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  8853  128A  018D               	clrf	13	;volatile
  8854                           
  8855                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  8856  128B  018E               	clrf	14	;volatile
  8857                           
  8858                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  8859  128C  3077               	movlw	119
  8860  128D  0020               	movlb	0	; select bank0
  8861  128E  008C               	movwf	12	;volatile
  8862                           
  8863                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  8864  128F  3007               	movlw	7
  8865  1290  008D               	movwf	13	;volatile
  8866                           
  8867                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  8868  1291  300C               	movlw	12
  8869  1292  008E               	movwf	14	;volatile
  8870  1293  0008               	return
  8871  1294                     __end_of_IO_Set:	
  8872                           
  8873                           	psect	text44
  8874  1FDB                     __ptext44:	
  8875 ;; *************** function _IOC_Set *****************
  8876 ;; Defined at:
  8877 ;;		line 366 in file "../src/MCU_B1.c"
  8878 ;; Parameters:    Size  Location     Type
  8879 ;;		None
  8880 ;; Auto vars:     Size  Location     Type
  8881 ;;		None
  8882 ;; Return value:  Size  Location     Type
  8883 ;;		None               void
  8884 ;; Registers used:
  8885 ;;		wreg, status,2
  8886 ;; Tracked objects:
  8887 ;;		On entry : 0/0
  8888 ;;		On exit  : 0/0
  8889 ;;		Unchanged: 0/0
  8890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8895 ;;Total ram usage:        0 bytes
  8896 ;; Hardware stack levels used:    1
  8897 ;; Hardware stack levels required when called:    5
  8898 ;; This function calls:
  8899 ;;		Nothing
  8900 ;; This function is called by:
  8901 ;;		_Mcu_Initialization
  8902 ;; This function uses a non-reentrant model
  8903 ;;
  8904                           
  8905                           
  8906                           ;psect for function _IOC_Set
  8907  1FDB                     _IOC_Set:	
  8908                           
  8909                           ;MCU_B1.c: 367: WPUB2 = 0;
  8910                           
  8911                           ;incstack = 0
  8912                           ; Regs used in _IOC_Set: [wreg+status,2]
  8913  1FDB  0024               	movlb	4	; select bank4
  8914  1FDC  110D               	bcf	13,2	;volatile
  8915                           
  8916                           ;MCU_B1.c: 387: IOCBP = 0b00000000;
  8917  1FDD  0027               	movlb	7	; select bank7
  8918  1FDE  0194               	clrf	20	;volatile
  8919                           
  8920                           ;MCU_B1.c: 388: IOCBN = 0b00000100;
  8921  1FDF  3004               	movlw	4
  8922  1FE0  0095               	movwf	21	;volatile
  8923                           
  8924                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
  8925  1FE1  0196               	clrf	22	;volatile
  8926                           
  8927                           ;MCU_B1.c: 394: IOCIE = 1;
  8928  1FE2  158B               	bsf	11,3	;volatile
  8929                           
  8930                           ;MCU_B1.c: 395: IOCIF = 0;
  8931  1FE3  100B               	bcf	11,0	;volatile
  8932                           
  8933                           ;MCU_B1.c: 396: PEIE = 1;
  8934  1FE4  170B               	bsf	11,6	;volatile
  8935                           
  8936                           ;MCU_B1.c: 397: GIE = 1;
  8937  1FE5  178B               	bsf	11,7	;volatile
  8938  1FE6  0008               	return
  8939  1FE7                     __end_of_IOC_Set:	
  8940                           
  8941                           	psect	text45
  8942  1F29                     __ptext45:	
  8943 ;; *************** function _Fosc_Set *****************
  8944 ;; Defined at:
  8945 ;;		line 56 in file "../src/MCU_B1.c"
  8946 ;; Parameters:    Size  Location     Type
  8947 ;;		None
  8948 ;; Auto vars:     Size  Location     Type
  8949 ;;		None
  8950 ;; Return value:  Size  Location     Type
  8951 ;;		None               void
  8952 ;; Registers used:
  8953 ;;		wreg
  8954 ;; Tracked objects:
  8955 ;;		On entry : 0/0
  8956 ;;		On exit  : 0/0
  8957 ;;		Unchanged: 0/0
  8958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;Total ram usage:        0 bytes
  8964 ;; Hardware stack levels used:    1
  8965 ;; Hardware stack levels required when called:    5
  8966 ;; This function calls:
  8967 ;;		Nothing
  8968 ;; This function is called by:
  8969 ;;		_Mcu_Initialization
  8970 ;; This function uses a non-reentrant model
  8971 ;;
  8972                           
  8973                           
  8974                           ;psect for function _Fosc_Set
  8975  1F29                     _Fosc_Set:	
  8976                           
  8977                           ;MCU_B1.c: 57: OSCCON = 0x78;
  8978                           
  8979                           ;incstack = 0
  8980                           ; Regs used in _Fosc_Set: [wreg]
  8981  1F29  3078               	movlw	120
  8982  1F2A  0021               	movlb	1	; select bank1
  8983  1F2B  0099               	movwf	25	;volatile
  8984  1F2C  0008               	return
  8985  1F2D                     __end_of_Fosc_Set:	
  8986                           
  8987                           	psect	text46
  8988  1F48                     __ptext46:	
  8989 ;; *************** function _ADC_Set *****************
  8990 ;; Defined at:
  8991 ;;		line 420 in file "../src/MCU_B1.c"
  8992 ;; Parameters:    Size  Location     Type
  8993 ;;		None
  8994 ;; Auto vars:     Size  Location     Type
  8995 ;;		None
  8996 ;; Return value:  Size  Location     Type
  8997 ;;		None               void
  8998 ;; Registers used:
  8999 ;;		wreg
  9000 ;; Tracked objects:
  9001 ;;		On entry : 0/0
  9002 ;;		On exit  : 0/0
  9003 ;;		Unchanged: 0/0
  9004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9009 ;;Total ram usage:        0 bytes
  9010 ;; Hardware stack levels used:    1
  9011 ;; Hardware stack levels required when called:    5
  9012 ;; This function calls:
  9013 ;;		Nothing
  9014 ;; This function is called by:
  9015 ;;		_Mcu_Initialization
  9016 ;; This function uses a non-reentrant model
  9017 ;;
  9018                           
  9019                           
  9020                           ;psect for function _ADC_Set
  9021  1F48                     _ADC_Set:	
  9022                           
  9023                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
  9024                           
  9025                           ;incstack = 0
  9026                           ; Regs used in _ADC_Set: [wreg]
  9027  1F48  30F3               	movlw	243
  9028  1F49  0021               	movlb	1	; select bank1
  9029  1F4A  009E               	movwf	30	;volatile
  9030                           
  9031                           ;MCU_B1.c: 422: FVRCON = 0xc1;
  9032  1F4B  30C1               	movlw	193
  9033  1F4C  0022               	movlb	2	; select bank2
  9034  1F4D  0097               	movwf	23	;volatile
  9035  1F4E  0008               	return
  9036  1F4F                     __end_of_ADC_Set:	
  9037                           
  9038                           	psect	text47
  9039  1FCF                     __ptext47:	
  9040 ;; *************** function _LED_Main *****************
  9041 ;; Defined at:
  9042 ;;		line 47 in file "../src/LED_B1.c"
  9043 ;; Parameters:    Size  Location     Type
  9044 ;;		None
  9045 ;; Auto vars:     Size  Location     Type
  9046 ;;		None
  9047 ;; Return value:  Size  Location     Type
  9048 ;;		None               void
  9049 ;; Registers used:
  9050 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9051 ;; Tracked objects:
  9052 ;;		On entry : 0/0
  9053 ;;		On exit  : 0/0
  9054 ;;		Unchanged: 0/0
  9055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9060 ;;Total ram usage:        0 bytes
  9061 ;; Hardware stack levels used:    1
  9062 ;; Hardware stack levels required when called:    7
  9063 ;; This function calls:
  9064 ;;		_setLED_Main
  9065 ;; This function is called by:
  9066 ;;		_main
  9067 ;; This function uses a non-reentrant model
  9068 ;;
  9069                           
  9070                           
  9071                           ;psect for function _LED_Main
  9072  1FCF                     _LED_Main:	
  9073                           
  9074                           ;LED_B1.c: 49: setLED_Main(1);
  9075                           
  9076                           ;incstack = 0
  9077                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9078  1FCF  3001               	movlw	1
  9079  1FD0  3196  26E2  319F   	fcall	_setLED_Main
  9080                           
  9081                           ;LED_B1.c: 52: setLED_Main(2);
  9082  1FD3  3002               	movlw	2
  9083  1FD4  3196  26E2  319F   	fcall	_setLED_Main
  9084                           
  9085                           ;LED_B1.c: 58: setLED_Main(99);
  9086  1FD7  3063               	movlw	99
  9087  1FD8  3196  26E2         	fcall	_setLED_Main
  9088  1FDA  0008               	return
  9089  1FDB                     __end_of_LED_Main:	
  9090                           
  9091                           	psect	text48
  9092  16E2                     __ptext48:	
  9093 ;; *************** function _setLED_Main *****************
  9094 ;; Defined at:
  9095 ;;		line 216 in file "../src/LED_B1.c"
  9096 ;; Parameters:    Size  Location     Type
  9097 ;;  led             1    wreg     unsigned char 
  9098 ;; Auto vars:     Size  Location     Type
  9099 ;;  led             1    3[BANK0 ] unsigned char 
  9100 ;; Return value:  Size  Location     Type
  9101 ;;		None               void
  9102 ;; Registers used:
  9103 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9104 ;; Tracked objects:
  9105 ;;		On entry : 0/0
  9106 ;;		On exit  : 0/0
  9107 ;;		Unchanged: 0/0
  9108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9110 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9111 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9112 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9113 ;;Total ram usage:        3 bytes
  9114 ;; Hardware stack levels used:    1
  9115 ;; Hardware stack levels required when called:    6
  9116 ;; This function calls:
  9117 ;;		_LedPointSelect
  9118 ;; This function is called by:
  9119 ;;		_LED_Main
  9120 ;; This function uses a non-reentrant model
  9121 ;;
  9122                           
  9123                           
  9124                           ;psect for function _setLED_Main
  9125  16E2                     _setLED_Main:	
  9126                           
  9127                           ;incstack = 0
  9128                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9129                           ;setLED_Main@led stored from wreg
  9130  16E2  0020               	movlb	0	; select bank0
  9131  16E3  00A3               	movwf	setLED_Main@led
  9132                           
  9133                           ;LED_B1.c: 217: LedPointSelect(led);
  9134  16E4  0823               	movf	setLED_Main@led,w
  9135  16E5  3193  232A  3196   	fcall	_LedPointSelect
  9136                           
  9137                           ;LED_B1.c: 218: if (LED->GO == 1) {
  9138  16E8  0021               	movlb	1	; select bank1
  9139  16E9  084E               	movf	_LED^(0+128),w
  9140  16EA  0086               	movwf	6
  9141  16EB  084F               	movf	(_LED+1)^(0+128),w
  9142  16EC  0087               	movwf	7
  9143  16ED  1C81               	btfss	1,1
  9144  16EE  0008               	return
  9145                           
  9146                           ;LED_B1.c: 219: LED->Time++;
  9147  16EF  084E               	movf	_LED^(0+128),w
  9148  16F0  0086               	movwf	6
  9149  16F1  084F               	movf	(_LED+1)^(0+128),w
  9150  16F2  0087               	movwf	7
  9151  16F3  3141               	addfsr 1,1
  9152  16F4  3001               	movlw	1
  9153  16F5  0781               	addwf	1,f
  9154  16F6  3141               	addfsr 1,1
  9155  16F7  1803               	skipnc
  9156  16F8  0A81               	incf	1,f
  9157                           
  9158                           ;LED_B1.c: 220: if (LED->Time >= 500 / 10) {
  9159  16F9  084E               	movf	_LED^(0+128),w
  9160  16FA  0086               	movwf	6
  9161  16FB  084F               	movf	(_LED+1)^(0+128),w
  9162  16FC  0087               	movwf	7
  9163  16FD  3141               	addfsr 1,1
  9164  16FE  3F40               	moviw [0]fsr1
  9165  16FF  0020               	movlb	0	; select bank0
  9166  1700  00A1               	movwf	??_setLED_Main
  9167  1701  3F41               	moviw [1]fsr1
  9168  1702  00A2               	movwf	??_setLED_Main+1
  9169  1703  3000               	movlw	0
  9170  1704  0222               	subwf	??_setLED_Main+1,w
  9171  1705  3032               	movlw	50
  9172  1706  1903               	skipnz
  9173  1707  0221               	subwf	??_setLED_Main,w
  9174  1708  1C03               	skipc
  9175  1709  0008               	return
  9176                           
  9177                           ;LED_B1.c: 221: LED->Time = 0;
  9178  170A  0021               	movlb	1	; select bank1
  9179  170B  084E               	movf	_LED^(0+128),w
  9180  170C  0086               	movwf	6
  9181  170D  084F               	movf	(_LED+1)^(0+128),w
  9182  170E  0087               	movwf	7
  9183  170F  3141               	addfsr 1,1
  9184  1710  3000               	movlw	0
  9185  1711  3FC0               	movwi [0]fsr1
  9186  1712  3FC1               	movwi [1]fsr1
  9187                           
  9188                           ;LED_B1.c: 223: if (led == 1) {
  9189  1713  0020               	movlb	0	; select bank0
  9190  1714  0823               	movf	setLED_Main@led,w
  9191  1715  3A01               	xorlw	1
  9192                           
  9193                           ;LED_B1.c: 224: RA3 = RA3 == 1 ? 0 : 1;
  9194  1716  3008               	movlw	8
  9195  1717  1903               	btfsc	3,2
  9196  1718  068C               	xorwf	12,f
  9197                           
  9198                           ;LED_B1.c: 225: }
  9199                           ;LED_B1.c: 228: if (led == 2) {
  9200  1719  0823               	movf	setLED_Main@led,w
  9201  171A  3A02               	xorlw	2
  9202  171B  1D03               	skipz
  9203  171C  2F1F               	goto	l996
  9204                           
  9205                           ;LED_B1.c: 229: RC7 = RC7 == 1 ? 0 : 1;
  9206  171D  3080               	movlw	128
  9207  171E  068E               	xorwf	14,f
  9208  171F                     l996:	
  9209                           
  9210                           ;LED_B1.c: 230: }
  9211                           ;LED_B1.c: 238: if (led == 99) {
  9212  171F  0823               	movf	setLED_Main@led,w
  9213  1720  3A63               	xorlw	99
  9214  1721  1D03               	skipz
  9215  1722  0008               	return
  9216                           
  9217                           ;LED_B1.c: 239: RB5 = RB5 == 1 ? 0 : 1;
  9218  1723  3020               	movlw	32
  9219  1724  068D               	xorwf	13,f
  9220  1725  0008               	return
  9221  1726                     __end_of_setLED_Main:	
  9222                           
  9223                           	psect	text49
  9224  1FC3                     __ptext49:	
  9225 ;; *************** function _LED_Initialization *****************
  9226 ;; Defined at:
  9227 ;;		line 31 in file "../src/LED_B1.c"
  9228 ;; Parameters:    Size  Location     Type
  9229 ;;		None
  9230 ;; Auto vars:     Size  Location     Type
  9231 ;;		None
  9232 ;; Return value:  Size  Location     Type
  9233 ;;		None               void
  9234 ;; Registers used:
  9235 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9236 ;; Tracked objects:
  9237 ;;		On entry : 0/0
  9238 ;;		On exit  : 0/0
  9239 ;;		Unchanged: 0/0
  9240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9245 ;;Total ram usage:        0 bytes
  9246 ;; Hardware stack levels used:    1
  9247 ;; Hardware stack levels required when called:    8
  9248 ;; This function calls:
  9249 ;;		_setLED_Initialization
  9250 ;; This function is called by:
  9251 ;;		_main
  9252 ;; This function uses a non-reentrant model
  9253 ;;
  9254                           
  9255                           
  9256                           ;psect for function _LED_Initialization
  9257  1FC3                     _LED_Initialization:	
  9258                           
  9259                           ;LED_B1.c: 33: setLED_Initialization(1);
  9260                           
  9261                           ;incstack = 0
  9262                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9263  1FC3  3001               	movlw	1
  9264  1FC4  3190  20FA  319F   	fcall	_setLED_Initialization
  9265                           
  9266                           ;LED_B1.c: 36: setLED_Initialization(2);
  9267  1FC7  3002               	movlw	2
  9268  1FC8  3190  20FA  319F   	fcall	_setLED_Initialization
  9269                           
  9270                           ;LED_B1.c: 42: setLED_Initialization(99);
  9271  1FCB  3063               	movlw	99
  9272  1FCC  3190  20FA         	fcall	_setLED_Initialization
  9273  1FCE  0008               	return
  9274  1FCF                     __end_of_LED_Initialization:	
  9275                           
  9276                           	psect	text50
  9277  10FA                     __ptext50:	
  9278 ;; *************** function _setLED_Initialization *****************
  9279 ;; Defined at:
  9280 ;;		line 66 in file "../src/LED_B1.c"
  9281 ;; Parameters:    Size  Location     Type
  9282 ;;  led             1    wreg     unsigned char 
  9283 ;; Auto vars:     Size  Location     Type
  9284 ;;  led             1    3[BANK0 ] unsigned char 
  9285 ;; Return value:  Size  Location     Type
  9286 ;;		None               void
  9287 ;; Registers used:
  9288 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9289 ;; Tracked objects:
  9290 ;;		On entry : 0/0
  9291 ;;		On exit  : 0/0
  9292 ;;		Unchanged: 0/0
  9293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9295 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9297 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9298 ;;Total ram usage:        1 bytes
  9299 ;; Hardware stack levels used:    1
  9300 ;; Hardware stack levels required when called:    7
  9301 ;; This function calls:
  9302 ;;		_LedPointSelect
  9303 ;;		_setLED
  9304 ;; This function is called by:
  9305 ;;		_LED_Initialization
  9306 ;; This function uses a non-reentrant model
  9307 ;;
  9308                           
  9309                           
  9310                           ;psect for function _setLED_Initialization
  9311  10FA                     _setLED_Initialization:	
  9312                           
  9313                           ;incstack = 0
  9314                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9315                           ;setLED_Initialization@led stored from wreg
  9316  10FA  0020               	movlb	0	; select bank0
  9317  10FB  00A3               	movwf	setLED_Initialization@led
  9318                           
  9319                           ;LED_B1.c: 67: LedPointSelect(led);
  9320  10FC  0823               	movf	setLED_Initialization@led,w
  9321  10FD  3193  232A  3190   	fcall	_LedPointSelect
  9322                           
  9323                           ;LED_B1.c: 68: LED->Enable = 1;
  9324  1100  0021               	movlb	1	; select bank1
  9325  1101  084E               	movf	_LED^(0+128),w
  9326  1102  0086               	movwf	6
  9327  1103  084F               	movf	(_LED+1)^(0+128),w
  9328  1104  0087               	movwf	7
  9329  1105  1401               	bsf	1,0
  9330                           
  9331                           ;LED_B1.c: 69: setLED(led, 0);
  9332  1106  0020               	movlb	0	; select bank0
  9333  1107  01A1               	clrf	setLED@command
  9334  1108  0823               	movf	setLED_Initialization@led,w
  9335  1109  3189  21C1         	fcall	_setLED
  9336  110B  0008               	return
  9337  110C                     __end_of_setLED_Initialization:	
  9338                           
  9339                           	psect	text51
  9340  1575                     __ptext51:	
  9341 ;; *************** function _Flash_Memory_Main *****************
  9342 ;; Defined at:
  9343 ;;		line 901 in file "../src/MCU_B1.c"
  9344 ;; Parameters:    Size  Location     Type
  9345 ;;		None
  9346 ;; Auto vars:     Size  Location     Type
  9347 ;;		None
  9348 ;; Return value:  Size  Location     Type
  9349 ;;		None               void
  9350 ;; Registers used:
  9351 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9352 ;; Tracked objects:
  9353 ;;		On entry : 0/0
  9354 ;;		On exit  : 0/0
  9355 ;;		Unchanged: 0/0
  9356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9359 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9360 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9361 ;;Total ram usage:        1 bytes
  9362 ;; Hardware stack levels used:    1
  9363 ;; Hardware stack levels required when called:    8
  9364 ;; This function calls:
  9365 ;;		_Flash_Memory_Modify
  9366 ;;		_getMain_LightsStatus
  9367 ;; This function is called by:
  9368 ;;		_main
  9369 ;; This function uses a non-reentrant model
  9370 ;;
  9371                           
  9372                           
  9373                           ;psect for function _Flash_Memory_Main
  9374  1575                     _Flash_Memory_Main:	
  9375                           
  9376                           ;MCU_B1.c: 902: if (Memory.Modify == 1) {
  9377                           
  9378                           ;incstack = 0
  9379                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9380  1575  0023               	movlb	3	; select bank3
  9381  1576  1C44               	btfss	(_Memory^(0+384)+36),0
  9382  1577  0008               	return
  9383                           
  9384                           ;MCU_B1.c: 903: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
  9385  1578  3194  24DF  3195   	fcall	_getMain_LightsStatus
  9386  157B  3A00               	xorlw	0
  9387  157C  3000               	movlw	0
  9388  157D  1903               	skipnz
  9389  157E  3001               	movlw	1
  9390  157F  0020               	movlb	0	; select bank0
  9391  1580  00A9               	movwf	??_Flash_Memory_Main
  9392  1581  0DA9               	rlf	??_Flash_Memory_Main,f
  9393  1582  0023               	movlb	3	; select bank3
  9394  1583  0844               	movf	(_Memory^(0+384)+36),w
  9395  1584  0020               	movlb	0	; select bank0
  9396  1585  0629               	xorwf	??_Flash_Memory_Main,w
  9397  1586  39FD               	andlw	-3
  9398  1587  0629               	xorwf	??_Flash_Memory_Main,w
  9399  1588  0023               	movlb	3	; select bank3
  9400  1589  00C4               	movwf	(_Memory^(0+384)+36)
  9401                           
  9402                           ;MCU_B1.c: 904: if (Memory.GO == 1) {
  9403  158A  1CC4               	btfss	(_Memory^(0+384)+36),1
  9404  158B  2DA5               	goto	l1260
  9405                           
  9406                           ;MCU_B1.c: 905: Memory.Runtime = 1;
  9407  158C  15C4               	bsf	(_Memory^(0+384)+36),3
  9408                           
  9409                           ;MCU_B1.c: 906: Memory.Time++;
  9410  158D  3001               	movlw	1
  9411  158E  07C2               	addwf	(_Memory^(0+384)+34),f
  9412  158F  3000               	movlw	0
  9413  1590  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
  9414                           
  9415                           ;MCU_B1.c: 907: if (Memory.Time == 25) {
  9416  1591  3022               	movlw	34
  9417  1592  3EA0               	addlw	_Memory& (0+255)
  9418  1593  0086               	movwf	6
  9419  1594  3001               	movlw	1	; select bank3/4
  9420  1595  0087               	movwf	7
  9421  1596  3F40               	moviw [0]fsr1
  9422  1597  3A19               	xorlw	25
  9423  1598  1D03               	skipz
  9424  1599  2D9C               	goto	u6825
  9425  159A  3F41               	moviw [1]fsr1
  9426  159B  3A00               	xorlw	0
  9427  159C                     u6825:	
  9428  159C  1D03               	skipz
  9429  159D  0008               	return
  9430                           
  9431                           ;MCU_B1.c: 908: Memory.Time = 0;
  9432  159E  01C2               	clrf	(_Memory^(0+384)+34)
  9433  159F  01C3               	clrf	((_Memory+1)^(0+384)+34)
  9434                           
  9435                           ;MCU_B1.c: 909: Memory.Modify = 0;
  9436  15A0  1044               	bcf	(_Memory^(0+384)+36),0
  9437                           
  9438                           ;MCU_B1.c: 910: Memory.GO = 0;
  9439  15A1  10C4               	bcf	(_Memory^(0+384)+36),1
  9440                           
  9441                           ;MCU_B1.c: 911: Flash_Memory_Modify();
  9442  15A2  3188  207E         	fcall	_Flash_Memory_Modify
  9443                           
  9444                           ;MCU_B1.c: 912: }
  9445                           ;MCU_B1.c: 913: } else {
  9446  15A4  0008               	return
  9447  15A5                     l1260:	
  9448                           
  9449                           ;MCU_B1.c: 914: if (Memory.Runtime == 1) {
  9450  15A5  1DC4               	btfss	(_Memory^(0+384)+36),3
  9451  15A6  0008               	return
  9452                           
  9453                           ;MCU_B1.c: 915: Memory.Runtime = 0;
  9454  15A7  11C4               	bcf	(_Memory^(0+384)+36),3
  9455                           
  9456                           ;MCU_B1.c: 916: Memory.Time = 0;
  9457  15A8  01C2               	clrf	(_Memory^(0+384)+34)
  9458  15A9  01C3               	clrf	((_Memory+1)^(0+384)+34)
  9459  15AA  0008               	return
  9460  15AB                     __end_of_Flash_Memory_Main:	
  9461                           
  9462                           	psect	text52
  9463  14DF                     __ptext52:	
  9464 ;; *************** function _getMain_LightsStatus *****************
  9465 ;; Defined at:
  9466 ;;		line 336 in file "../src/main_B1.c"
  9467 ;; Parameters:    Size  Location     Type
  9468 ;;		None
  9469 ;; Auto vars:     Size  Location     Type
  9470 ;;  i               2    6[BANK0 ] int 
  9471 ;;  status          1    8[BANK0 ] unsigned char 
  9472 ;;  count           1    5[BANK0 ] unsigned char 
  9473 ;; Return value:  Size  Location     Type
  9474 ;;                  1    wreg      unsigned char 
  9475 ;; Registers used:
  9476 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9477 ;; Tracked objects:
  9478 ;;		On entry : 0/0
  9479 ;;		On exit  : 0/0
  9480 ;;		Unchanged: 0/0
  9481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9483 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9484 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9485 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9486 ;;Total ram usage:        5 bytes
  9487 ;; Hardware stack levels used:    1
  9488 ;; Hardware stack levels required when called:    7
  9489 ;; This function calls:
  9490 ;;		_getDimmerLights_Status
  9491 ;; This function is called by:
  9492 ;;		_Flash_Memory_Main
  9493 ;;		_setMain_Exception
  9494 ;; This function uses a non-reentrant model
  9495 ;;
  9496                           
  9497                           
  9498                           ;psect for function _getMain_LightsStatus
  9499  14DF                     _getMain_LightsStatus:	
  9500                           
  9501                           ;main_B1.c: 337: char status = 0;
  9502                           
  9503                           ;incstack = 0
  9504                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9505  14DF  0020               	movlb	0	; select bank0
  9506  14E0  01A8               	clrf	getMain_LightsStatus@status
  9507                           
  9508                           ;main_B1.c: 343: char count = 2;
  9509  14E1  3002               	movlw	2
  9510  14E2  00A4               	movwf	??_getMain_LightsStatus
  9511  14E3  0824               	movf	??_getMain_LightsStatus,w
  9512  14E4  00A5               	movwf	getMain_LightsStatus@count
  9513                           
  9514                           ;main_B1.c: 349: for (int i = 0; i < count; i++) {
  9515  14E5  01A6               	clrf	getMain_LightsStatus@i
  9516  14E6  01A7               	clrf	getMain_LightsStatus@i+1
  9517  14E7                     l6311:	
  9518  14E7  0827               	movf	getMain_LightsStatus@i+1,w
  9519  14E8  3A80               	xorlw	128
  9520  14E9  00A4               	movwf	??_getMain_LightsStatus
  9521  14EA  3080               	movlw	128
  9522  14EB  0224               	subwf	??_getMain_LightsStatus,w
  9523  14EC  1D03               	skipz
  9524  14ED  2CF0               	goto	u5395
  9525  14EE  0825               	movf	getMain_LightsStatus@count,w
  9526  14EF  0226               	subwf	getMain_LightsStatus@i,w
  9527  14F0                     u5395:	
  9528  14F0  1803               	btfsc	3,0
  9529  14F1  2D08               	goto	l6313
  9530                           
  9531                           ;main_B1.c: 350: if (status == 0) {
  9532  14F2  0020               	movlb	0	; select bank0
  9533  14F3  08A8               	movf	getMain_LightsStatus@status,f
  9534  14F4  1D03               	skipz
  9535  14F5  2D03               	goto	l6309
  9536                           
  9537                           ;main_B1.c: 355: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
  9538  14F6  0826               	movf	getMain_LightsStatus@i,w
  9539  14F7  3E01               	addlw	1
  9540  14F8  3190  2093  3194   	fcall	_getDimmerLights_Status
  9541  14FB  3A01               	xorlw	1
  9542  14FC  3000               	movlw	0
  9543  14FD  1903               	skipnz
  9544  14FE  3001               	movlw	1
  9545  14FF  0020               	movlb	0	; select bank0
  9546  1500  00A4               	movwf	??_getMain_LightsStatus
  9547  1501  0824               	movf	??_getMain_LightsStatus,w
  9548  1502  00A8               	movwf	getMain_LightsStatus@status
  9549  1503                     l6309:	
  9550  1503  3001               	movlw	1
  9551  1504  07A6               	addwf	getMain_LightsStatus@i,f
  9552  1505  3000               	movlw	0
  9553  1506  3DA7               	addwfc	getMain_LightsStatus@i+1,f
  9554  1507  2CE7               	goto	l6311
  9555  1508                     l6313:	
  9556                           
  9557                           ;main_B1.c: 357: }
  9558                           ;main_B1.c: 358: }
  9559                           ;main_B1.c: 359: return status;
  9560  1508  0020               	movlb	0	; select bank0
  9561  1509  0828               	movf	getMain_LightsStatus@status,w
  9562  150A  0008               	return
  9563  150B                     __end_of_getMain_LightsStatus:	
  9564                           
  9565                           	psect	text53
  9566  087E                     __ptext53:	
  9567 ;; *************** function _Flash_Memory_Modify *****************
  9568 ;; Defined at:
  9569 ;;		line 974 in file "../src/MCU_B1.c"
  9570 ;; Parameters:    Size  Location     Type
  9571 ;;		None
  9572 ;; Auto vars:     Size  Location     Type
  9573 ;;  i               1    5[BANK0 ] unsigned char 
  9574 ;; Return value:  Size  Location     Type
  9575 ;;		None               void
  9576 ;; Registers used:
  9577 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9578 ;; Tracked objects:
  9579 ;;		On entry : 0/0
  9580 ;;		On exit  : 0/0
  9581 ;;		Unchanged: 0/0
  9582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9584 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9585 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9586 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9587 ;;Total ram usage:        2 bytes
  9588 ;; Hardware stack levels used:    1
  9589 ;; Hardware stack levels required when called:    7
  9590 ;; This function calls:
  9591 ;;		_Flash_Memory_Erasing
  9592 ;;		_Flash_Memory_Read
  9593 ;;		_Flash_Memory_Write
  9594 ;;		_setMemory_Data
  9595 ;; This function is called by:
  9596 ;;		_Flash_Memory_Main
  9597 ;; This function uses a non-reentrant model
  9598 ;;
  9599                           
  9600                           
  9601                           ;psect for function _Flash_Memory_Modify
  9602  087E                     _Flash_Memory_Modify:	
  9603                           
  9604                           ;MCU_B1.c: 975: char i = 0;
  9605                           
  9606                           ;incstack = 0
  9607                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9608  087E  0020               	movlb	0	; select bank0
  9609  087F  01A5               	clrf	Flash_Memory_Modify@i
  9610                           
  9611                           ;MCU_B1.c: 976: for (i = 0; i < 32; i++) {
  9612  0880  01A5               	clrf	Flash_Memory_Modify@i
  9613  0881  3020               	movlw	32
  9614  0882  0225               	subwf	Flash_Memory_Modify@i,w
  9615  0883  1803               	btfsc	3,0
  9616  0884  289A               	goto	l6723
  9617  0885                     l6717:	
  9618                           
  9619                           ;MCU_B1.c: 977: Memory.Data[i] = Flash_Memory_Read(i);
  9620  0885  0825               	movf	Flash_Memory_Modify@i,w
  9621  0886  3192  2294  3188   	fcall	_Flash_Memory_Read
  9622  0889  0020               	movlb	0	; select bank0
  9623  088A  00A4               	movwf	??_Flash_Memory_Modify
  9624  088B  0825               	movf	Flash_Memory_Modify@i,w
  9625  088C  3EA0               	addlw	_Memory& (0+255)
  9626  088D  0086               	movwf	6
  9627  088E  3001               	movlw	1	; select bank3/4
  9628  088F  0087               	movwf	7
  9629  0890  0824               	movf	??_Flash_Memory_Modify,w
  9630  0891  0081               	movwf	1
  9631  0892  3001               	movlw	1
  9632  0893  00A4               	movwf	??_Flash_Memory_Modify
  9633  0894  0824               	movf	??_Flash_Memory_Modify,w
  9634  0895  07A5               	addwf	Flash_Memory_Modify@i,f
  9635  0896  3020               	movlw	32
  9636  0897  0225               	subwf	Flash_Memory_Modify@i,w
  9637  0898  1C03               	skipc
  9638  0899  2885               	goto	l6717
  9639  089A                     l6723:	
  9640                           
  9641                           ;MCU_B1.c: 978: }
  9642                           ;MCU_B1.c: 979: setMemory_Data(0, product->Data[12]);
  9643  089A  086E               	movf	_product,w
  9644  089B  0086               	movwf	6
  9645  089C  3001               	movlw	1	; select bank2/3
  9646  089D  0087               	movwf	7
  9647  089E  3001               	movlw	1	; select bank2/3
  9648  089F  3F4C               	moviw [12]fsr1
  9649  08A0  00A0               	movwf	setMemory_Data@data
  9650  08A1  3000               	movlw	0
  9651  08A2  319F  27AB  3188   	fcall	_setMemory_Data
  9652                           
  9653                           ;MCU_B1.c: 980: setMemory_Data(1, product->Data[13]);
  9654  08A5  0020               	movlb	0	; select bank0
  9655  08A6  086E               	movf	_product,w
  9656  08A7  0086               	movwf	6
  9657  08A8  3001               	movlw	1	; select bank2/3
  9658  08A9  0087               	movwf	7
  9659  08AA  3001               	movlw	1	; select bank2/3
  9660  08AB  3F4D               	moviw [13]fsr1
  9661  08AC  00A0               	movwf	setMemory_Data@data
  9662  08AD  3001               	movlw	1
  9663  08AE  319F  27AB  3188   	fcall	_setMemory_Data
  9664                           
  9665                           ;MCU_B1.c: 981: setMemory_Data(2, product->Data[14]);
  9666  08B1  0020               	movlb	0	; select bank0
  9667  08B2  086E               	movf	_product,w
  9668  08B3  0086               	movwf	6
  9669  08B4  3001               	movlw	1	; select bank2/3
  9670  08B5  0087               	movwf	7
  9671  08B6  3001               	movlw	1	; select bank2/3
  9672  08B7  3F4E               	moviw [14]fsr1
  9673  08B8  00A0               	movwf	setMemory_Data@data
  9674  08B9  3002               	movlw	2
  9675  08BA  319F  27AB  3188   	fcall	_setMemory_Data
  9676                           
  9677                           ;MCU_B1.c: 987: if (Memory.LoopSave == 1) {
  9678  08BD  0023               	movlb	3	; select bank3
  9679  08BE  1D44               	btfss	(_Memory^(0+384)+36),2
  9680  08BF  28C4               	goto	l1283
  9681                           
  9682                           ;MCU_B1.c: 988: Memory.LoopSave = 0;
  9683  08C0  1144               	bcf	(_Memory^(0+384)+36),2
  9684                           
  9685                           ;MCU_B1.c: 989: myMain.FirstOpen = 0;
  9686  08C1  0021               	movlb	1	; select bank1
  9687  08C2  11A0               	bcf	_myMain^(0+128),3
  9688                           
  9689                           ;MCU_B1.c: 990: myMain.First = 0;
  9690  08C3  12A0               	bcf	_myMain^(0+128),5
  9691  08C4                     l1283:	
  9692                           
  9693                           ;MCU_B1.c: 992: }
  9694                           ;MCU_B1.c: 993: GIE = 0;
  9695  08C4  138B               	bcf	11,7	;volatile
  9696                           
  9697                           ;MCU_B1.c: 994: Flash_Memory_Erasing();
  9698  08C5  319F  27B7  3188   	fcall	_Flash_Memory_Erasing
  9699                           
  9700                           ;MCU_B1.c: 995: Flash_Memory_Write();
  9701  08C8  3188  2003         	fcall	_Flash_Memory_Write
  9702                           
  9703                           ;MCU_B1.c: 996: GIE = 1;
  9704  08CA  178B               	bsf	11,7	;volatile
  9705  08CB  0008               	return
  9706  08CC                     __end_of_Flash_Memory_Modify:	
  9707                           
  9708                           	psect	text54
  9709  1FB7                     __ptext54:	
  9710 ;; *************** function _Flash_Memory_Erasing *****************
  9711 ;; Defined at:
  9712 ;;		line 963 in file "../src/MCU_B1.c"
  9713 ;; Parameters:    Size  Location     Type
  9714 ;;		None
  9715 ;; Auto vars:     Size  Location     Type
  9716 ;;		None
  9717 ;; Return value:  Size  Location     Type
  9718 ;;		None               void
  9719 ;; Registers used:
  9720 ;;		wreg, status,2, status,0, pclath, cstack
  9721 ;; Tracked objects:
  9722 ;;		On entry : 0/0
  9723 ;;		On exit  : 0/0
  9724 ;;		Unchanged: 0/0
  9725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9730 ;;Total ram usage:        0 bytes
  9731 ;; Hardware stack levels used:    1
  9732 ;; Hardware stack levels required when called:    6
  9733 ;; This function calls:
  9734 ;;		_Flash_Memory_Unlock
  9735 ;; This function is called by:
  9736 ;;		_Flash_Memory_Modify
  9737 ;; This function uses a non-reentrant model
  9738 ;;
  9739                           
  9740                           
  9741                           ;psect for function _Flash_Memory_Erasing
  9742  1FB7                     _Flash_Memory_Erasing:	
  9743                           
  9744                           ;MCU_B1.c: 964: CFGS = 0;
  9745                           
  9746                           ;incstack = 0
  9747                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
  9748  1FB7  0023               	movlb	3	; select bank3
  9749  1FB8  1315               	bcf	21,6	;volatile
  9750                           
  9751                           ;MCU_B1.c: 965: PMADRH = 0x30;
  9752  1FB9  3030               	movlw	48
  9753  1FBA  0092               	movwf	18	;volatile
  9754                           
  9755                           ;MCU_B1.c: 966: PMADRL = 0x00;
  9756  1FBB  0191               	clrf	17	;volatile
  9757                           
  9758                           ;MCU_B1.c: 967: FREE = 1;
  9759  1FBC  1615               	bsf	21,4	;volatile
  9760                           
  9761                           ;MCU_B1.c: 968: WREN = 1;
  9762  1FBD  1515               	bsf	21,2	;volatile
  9763                           
  9764                           ;MCU_B1.c: 969: Flash_Memory_Unlock();
  9765  1FBE  319F  2780         	fcall	_Flash_Memory_Unlock
  9766                           
  9767                           ;MCU_B1.c: 970: WREN = 0;
  9768  1FC0  0023               	movlb	3	; select bank3
  9769  1FC1  1115               	bcf	21,2	;volatile
  9770  1FC2  0008               	return
  9771  1FC3                     __end_of_Flash_Memory_Erasing:	
  9772                           
  9773                           	psect	text55
  9774  04D3                     __ptext55:	
  9775 ;; *************** function _Flash_Memory_Initialization *****************
  9776 ;; Defined at:
  9777 ;;		line 860 in file "../src/MCU_B1.c"
  9778 ;; Parameters:    Size  Location     Type
  9779 ;;		None
  9780 ;; Auto vars:     Size  Location     Type
  9781 ;;  i               1   67[BANK0 ] unsigned char 
  9782 ;; Return value:  Size  Location     Type
  9783 ;;		None               void
  9784 ;; Registers used:
  9785 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9786 ;; Tracked objects:
  9787 ;;		On entry : 0/0
  9788 ;;		On exit  : 0/0
  9789 ;;		Unchanged: 0/0
  9790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9792 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9793 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9794 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;Total ram usage:        2 bytes
  9796 ;; Hardware stack levels used:    1
  9797 ;; Hardware stack levels required when called:    8
  9798 ;; This function calls:
  9799 ;;		_Flash_Memory_Read
  9800 ;;		_Flash_Memory_Write
  9801 ;;		_setMemory_Data
  9802 ;;		_setPercentValue
  9803 ;; This function is called by:
  9804 ;;		_main
  9805 ;; This function uses a non-reentrant model
  9806 ;;
  9807                           
  9808                           
  9809                           ;psect for function _Flash_Memory_Initialization
  9810  04D3                     _Flash_Memory_Initialization:	
  9811                           
  9812                           ;MCU_B1.c: 861: char i = 0;
  9813                           
  9814                           ;incstack = 0
  9815                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  9816  04D3  0020               	movlb	0	; select bank0
  9817  04D4  01E3               	clrf	Flash_Memory_Initialization@i
  9818                           
  9819                           ;MCU_B1.c: 862: if (Flash_Memory_Read(31) == 0xaa) {
  9820  04D5  301F               	movlw	31
  9821  04D6  3192  2294  3184   	fcall	_Flash_Memory_Read
  9822  04D9  3AAA               	xorlw	170
  9823  04DA  1D03               	skipz
  9824  04DB  2D45               	goto	l7095
  9825                           
  9826                           ;MCU_B1.c: 863: product->Data[12] = Flash_Memory_Read(0);
  9827  04DC  3000               	movlw	0
  9828  04DD  3192  2294  3184   	fcall	_Flash_Memory_Read
  9829  04E0  0020               	movlb	0	; select bank0
  9830  04E1  00E2               	movwf	??_Flash_Memory_Initialization
  9831  04E2  086E               	movf	_product,w
  9832  04E3  3E0C               	addlw	12
  9833  04E4  0086               	movwf	6
  9834  04E5  3001               	movlw	1	; select bank2/3
  9835  04E6  0087               	movwf	7
  9836  04E7  0862               	movf	??_Flash_Memory_Initialization,w
  9837  04E8  0081               	movwf	1
  9838                           
  9839                           ;MCU_B1.c: 864: product->Data[13] = Flash_Memory_Read(1);
  9840  04E9  3001               	movlw	1
  9841  04EA  3192  2294  3184   	fcall	_Flash_Memory_Read
  9842  04ED  0020               	movlb	0	; select bank0
  9843  04EE  00E2               	movwf	??_Flash_Memory_Initialization
  9844  04EF  086E               	movf	_product,w
  9845  04F0  3E0D               	addlw	13
  9846  04F1  0086               	movwf	6
  9847  04F2  3001               	movlw	1	; select bank2/3
  9848  04F3  0087               	movwf	7
  9849  04F4  0862               	movf	??_Flash_Memory_Initialization,w
  9850  04F5  0081               	movwf	1
  9851                           
  9852                           ;MCU_B1.c: 865: product->Data[14] = Flash_Memory_Read(2);
  9853  04F6  3002               	movlw	2
  9854  04F7  3192  2294  3184   	fcall	_Flash_Memory_Read
  9855  04FA  0020               	movlb	0	; select bank0
  9856  04FB  00E2               	movwf	??_Flash_Memory_Initialization
  9857  04FC  086E               	movf	_product,w
  9858  04FD  3E0E               	addlw	14
  9859  04FE  0086               	movwf	6
  9860  04FF  3001               	movlw	1	; select bank2/3
  9861  0500  0087               	movwf	7
  9862  0501  0862               	movf	??_Flash_Memory_Initialization,w
  9863  0502  0081               	movwf	1
  9864                           
  9865                           ;MCU_B1.c: 871: i = setPercentValue(((char)(80*0.8)));
  9866  0503  3040               	movlw	64
  9867  0504  318C  24EC  3184   	fcall	_setPercentValue
  9868  0507  0020               	movlb	0	; select bank0
  9869  0508  00E2               	movwf	??_Flash_Memory_Initialization
  9870  0509  0862               	movf	??_Flash_Memory_Initialization,w
  9871  050A  00E3               	movwf	Flash_Memory_Initialization@i
  9872                           
  9873                           ;MCU_B1.c: 872: product->Data[21] = i;
  9874  050B  0863               	movf	Flash_Memory_Initialization@i,w
  9875  050C  00E2               	movwf	??_Flash_Memory_Initialization
  9876  050D  086E               	movf	_product,w
  9877  050E  3E15               	addlw	21
  9878  050F  0086               	movwf	6
  9879  0510  3001               	movlw	1	; select bank2/3
  9880  0511  0087               	movwf	7
  9881  0512  0862               	movf	??_Flash_Memory_Initialization,w
  9882  0513  0081               	movwf	1
  9883                           
  9884                           ;MCU_B1.c: 873: product->Data[22] = i;
  9885  0514  0863               	movf	Flash_Memory_Initialization@i,w
  9886  0515  00E2               	movwf	??_Flash_Memory_Initialization
  9887  0516  086E               	movf	_product,w
  9888  0517  3E16               	addlw	22
  9889  0518  0086               	movwf	6
  9890  0519  3001               	movlw	1	; select bank2/3
  9891  051A  0087               	movwf	7
  9892  051B  0862               	movf	??_Flash_Memory_Initialization,w
  9893  051C  0081               	movwf	1
  9894                           
  9895                           ;MCU_B1.c: 874: product->Data[23] = i;
  9896  051D  0863               	movf	Flash_Memory_Initialization@i,w
  9897  051E  00E2               	movwf	??_Flash_Memory_Initialization
  9898  051F  086E               	movf	_product,w
  9899  0520  3E17               	addlw	23
  9900  0521  0086               	movwf	6
  9901  0522  3001               	movlw	1	; select bank2/3
  9902  0523  0087               	movwf	7
  9903  0524  0862               	movf	??_Flash_Memory_Initialization,w
  9904  0525  0081               	movwf	1
  9905                           
  9906                           ;MCU_B1.c: 876: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
  9907  0526  086E               	movf	_product,w
  9908  0527  3E0C               	addlw	12
  9909  0528  0086               	movwf	6
  9910  0529  3001               	movlw	1	; select bank2/3
  9911  052A  0087               	movwf	7
  9912  052B  0801               	movf	1,w
  9913  052C  3AFF               	xorlw	255
  9914  052D  1D03               	skipz
  9915  052E  0008               	return
  9916  052F  086E               	movf	_product,w
  9917  0530  3E0D               	addlw	13
  9918  0531  0086               	movwf	6
  9919  0532  3001               	movlw	1	; select bank2/3
  9920  0533  0087               	movwf	7
  9921  0534  0801               	movf	1,w
  9922  0535  3AFF               	xorlw	255
  9923  0536  1D03               	skipz
  9924  0537  0008               	return
  9925  0538  086E               	movf	_product,w
  9926  0539  3E0E               	addlw	14
  9927  053A  0086               	movwf	6
  9928  053B  3001               	movlw	1	; select bank2/3
  9929  053C  0087               	movwf	7
  9930  053D  0801               	movf	1,w
  9931  053E  3AFF               	xorlw	255
  9932  053F  1D03               	skipz
  9933  0540  0008               	return
  9934                           
  9935                           ;MCU_B1.c: 877: myMain.FirstOpen = 1;
  9936  0541  0021               	movlb	1	; select bank1
  9937  0542  15A0               	bsf	_myMain^(0+128),3
  9938                           
  9939                           ;MCU_B1.c: 878: myMain.First = 1;
  9940  0543  16A0               	bsf	_myMain^(0+128),5
  9941                           
  9942                           ;MCU_B1.c: 879: }
  9943                           ;MCU_B1.c: 880: } else {
  9944  0544  0008               	return
  9945  0545                     l7095:	
  9946                           
  9947                           ;MCU_B1.c: 881: i = setPercentValue(((char)(80*0.8)));
  9948  0545  3040               	movlw	64
  9949  0546  318C  24EC  3184   	fcall	_setPercentValue
  9950  0549  0020               	movlb	0	; select bank0
  9951  054A  00E2               	movwf	??_Flash_Memory_Initialization
  9952  054B  0862               	movf	??_Flash_Memory_Initialization,w
  9953  054C  00E3               	movwf	Flash_Memory_Initialization@i
  9954                           
  9955                           ;MCU_B1.c: 882: setMemory_Data(0, 0xff);
  9956  054D  30FF               	movlw	255
  9957  054E  00E2               	movwf	??_Flash_Memory_Initialization
  9958  054F  0862               	movf	??_Flash_Memory_Initialization,w
  9959  0550  00A0               	movwf	setMemory_Data@data
  9960  0551  3000               	movlw	0
  9961  0552  319F  27AB  3184   	fcall	_setMemory_Data
  9962                           
  9963                           ;MCU_B1.c: 883: setMemory_Data(1, 0xff);
  9964  0555  30FF               	movlw	255
  9965  0556  0020               	movlb	0	; select bank0
  9966  0557  00E2               	movwf	??_Flash_Memory_Initialization
  9967  0558  0862               	movf	??_Flash_Memory_Initialization,w
  9968  0559  00A0               	movwf	setMemory_Data@data
  9969  055A  3001               	movlw	1
  9970  055B  319F  27AB  3184   	fcall	_setMemory_Data
  9971                           
  9972                           ;MCU_B1.c: 884: setMemory_Data(2, 0xff);
  9973  055E  30FF               	movlw	255
  9974  055F  0020               	movlb	0	; select bank0
  9975  0560  00E2               	movwf	??_Flash_Memory_Initialization
  9976  0561  0862               	movf	??_Flash_Memory_Initialization,w
  9977  0562  00A0               	movwf	setMemory_Data@data
  9978  0563  3002               	movlw	2
  9979  0564  319F  27AB  3184   	fcall	_setMemory_Data
  9980                           
  9981                           ;MCU_B1.c: 885: setMemory_Data(3, 0xff);
  9982  0567  30FF               	movlw	255
  9983  0568  0020               	movlb	0	; select bank0
  9984  0569  00E2               	movwf	??_Flash_Memory_Initialization
  9985  056A  0862               	movf	??_Flash_Memory_Initialization,w
  9986  056B  00A0               	movwf	setMemory_Data@data
  9987  056C  3003               	movlw	3
  9988  056D  319F  27AB  3184   	fcall	_setMemory_Data
  9989                           
  9990                           ;MCU_B1.c: 886: setMemory_Data(4, 0xff);
  9991  0570  30FF               	movlw	255
  9992  0571  0020               	movlb	0	; select bank0
  9993  0572  00E2               	movwf	??_Flash_Memory_Initialization
  9994  0573  0862               	movf	??_Flash_Memory_Initialization,w
  9995  0574  00A0               	movwf	setMemory_Data@data
  9996  0575  3004               	movlw	4
  9997  0576  319F  27AB  3184   	fcall	_setMemory_Data
  9998                           
  9999                           ;MCU_B1.c: 887: setMemory_Data(5, 0xff);
 10000  0579  30FF               	movlw	255
 10001  057A  0020               	movlb	0	; select bank0
 10002  057B  00E2               	movwf	??_Flash_Memory_Initialization
 10003  057C  0862               	movf	??_Flash_Memory_Initialization,w
 10004  057D  00A0               	movwf	setMemory_Data@data
 10005  057E  3005               	movlw	5
 10006  057F  319F  27AB  3184   	fcall	_setMemory_Data
 10007                           
 10008                           ;MCU_B1.c: 888: setMemory_Data(31, 0xaa);
 10009  0582  30AA               	movlw	170
 10010  0583  0020               	movlb	0	; select bank0
 10011  0584  00E2               	movwf	??_Flash_Memory_Initialization
 10012  0585  0862               	movf	??_Flash_Memory_Initialization,w
 10013  0586  00A0               	movwf	setMemory_Data@data
 10014  0587  301F               	movlw	31
 10015  0588  319F  27AB  3184   	fcall	_setMemory_Data
 10016                           
 10017                           ;MCU_B1.c: 889: product->Data[21] = i;
 10018  058B  0020               	movlb	0	; select bank0
 10019  058C  0863               	movf	Flash_Memory_Initialization@i,w
 10020  058D  00E2               	movwf	??_Flash_Memory_Initialization
 10021  058E  086E               	movf	_product,w
 10022  058F  3E15               	addlw	21
 10023  0590  0086               	movwf	6
 10024  0591  3001               	movlw	1	; select bank2/3
 10025  0592  0087               	movwf	7
 10026  0593  0862               	movf	??_Flash_Memory_Initialization,w
 10027  0594  0081               	movwf	1
 10028                           
 10029                           ;MCU_B1.c: 890: product->Data[22] = i;
 10030  0595  0863               	movf	Flash_Memory_Initialization@i,w
 10031  0596  00E2               	movwf	??_Flash_Memory_Initialization
 10032  0597  086E               	movf	_product,w
 10033  0598  3E16               	addlw	22
 10034  0599  0086               	movwf	6
 10035  059A  3001               	movlw	1	; select bank2/3
 10036  059B  0087               	movwf	7
 10037  059C  0862               	movf	??_Flash_Memory_Initialization,w
 10038  059D  0081               	movwf	1
 10039                           
 10040                           ;MCU_B1.c: 891: product->Data[23] = i;
 10041  059E  0863               	movf	Flash_Memory_Initialization@i,w
 10042  059F  00E2               	movwf	??_Flash_Memory_Initialization
 10043  05A0  086E               	movf	_product,w
 10044  05A1  3E17               	addlw	23
 10045  05A2  0086               	movwf	6
 10046  05A3  3001               	movlw	1	; select bank2/3
 10047  05A4  0087               	movwf	7
 10048  05A5  0862               	movf	??_Flash_Memory_Initialization,w
 10049  05A6  0081               	movwf	1
 10050                           
 10051                           ;MCU_B1.c: 892: GIE = 0;
 10052  05A7  138B               	bcf	11,7	;volatile
 10053                           
 10054                           ;MCU_B1.c: 893: Flash_Memory_Write();
 10055  05A8  3188  2003         	fcall	_Flash_Memory_Write
 10056                           
 10057                           ;MCU_B1.c: 894: GIE = 1;
 10058  05AA  178B               	bsf	11,7	;volatile
 10059                           
 10060                           ;MCU_B1.c: 895: myMain.FirstOpen = 1;
 10061  05AB  0021               	movlb	1	; select bank1
 10062  05AC  15A0               	bsf	_myMain^(0+128),3
 10063                           
 10064                           ;MCU_B1.c: 896: myMain.First = 1;
 10065  05AD  16A0               	bsf	_myMain^(0+128),5
 10066  05AE  0008               	return
 10067  05AF                     __end_of_Flash_Memory_Initialization:	
 10068                           
 10069                           	psect	text56
 10070  1FAB                     __ptext56:	
 10071 ;; *************** function _setMemory_Data *****************
 10072 ;; Defined at:
 10073 ;;		line 1011 in file "../src/MCU_B1.c"
 10074 ;; Parameters:    Size  Location     Type
 10075 ;;  address         1    wreg     unsigned char 
 10076 ;;  data            1    0[BANK0 ] unsigned char 
 10077 ;; Auto vars:     Size  Location     Type
 10078 ;;  address         1    2[BANK0 ] unsigned char 
 10079 ;; Return value:  Size  Location     Type
 10080 ;;		None               void
 10081 ;; Registers used:
 10082 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10083 ;; Tracked objects:
 10084 ;;		On entry : 0/0
 10085 ;;		On exit  : 0/0
 10086 ;;		Unchanged: 0/0
 10087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10088 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10089 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10090 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10091 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10092 ;;Total ram usage:        3 bytes
 10093 ;; Hardware stack levels used:    1
 10094 ;; Hardware stack levels required when called:    5
 10095 ;; This function calls:
 10096 ;;		Nothing
 10097 ;; This function is called by:
 10098 ;;		_Flash_Memory_Initialization
 10099 ;;		_Flash_Memory_Modify
 10100 ;; This function uses a non-reentrant model
 10101 ;;
 10102                           
 10103                           
 10104                           ;psect for function _setMemory_Data
 10105  1FAB                     _setMemory_Data:	
 10106                           
 10107                           ;incstack = 0
 10108                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 10109                           ;setMemory_Data@address stored from wreg
 10110  1FAB  0020               	movlb	0	; select bank0
 10111  1FAC  00A2               	movwf	setMemory_Data@address
 10112                           
 10113                           ;MCU_B1.c: 1012: Memory.Data[address] = data;
 10114  1FAD  0820               	movf	setMemory_Data@data,w
 10115  1FAE  00A1               	movwf	??_setMemory_Data
 10116  1FAF  0822               	movf	setMemory_Data@address,w
 10117  1FB0  3EA0               	addlw	_Memory& (0+255)
 10118  1FB1  0086               	movwf	6
 10119  1FB2  3001               	movlw	1	; select bank3/4
 10120  1FB3  0087               	movwf	7
 10121  1FB4  0821               	movf	??_setMemory_Data,w
 10122  1FB5  0081               	movwf	1
 10123  1FB6  0008               	return
 10124  1FB7                     __end_of_setMemory_Data:	
 10125                           
 10126                           	psect	text57
 10127  0803                     __ptext57:	
 10128 ;; *************** function _Flash_Memory_Write *****************
 10129 ;; Defined at:
 10130 ;;		line 944 in file "../src/MCU_B1.c"
 10131 ;; Parameters:    Size  Location     Type
 10132 ;;		None
 10133 ;; Auto vars:     Size  Location     Type
 10134 ;;  i               1    1[BANK0 ] unsigned char 
 10135 ;; Return value:  Size  Location     Type
 10136 ;;		None               void
 10137 ;; Registers used:
 10138 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10139 ;; Tracked objects:
 10140 ;;		On entry : 0/0
 10141 ;;		On exit  : 0/0
 10142 ;;		Unchanged: 0/0
 10143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10145 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10146 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10148 ;;Total ram usage:        2 bytes
 10149 ;; Hardware stack levels used:    1
 10150 ;; Hardware stack levels required when called:    6
 10151 ;; This function calls:
 10152 ;;		_Flash_Memory_Unlock
 10153 ;; This function is called by:
 10154 ;;		_Flash_Memory_Initialization
 10155 ;;		_Flash_Memory_Modify
 10156 ;; This function uses a non-reentrant model
 10157 ;;
 10158                           
 10159                           
 10160                           ;psect for function _Flash_Memory_Write
 10161  0803                     _Flash_Memory_Write:	
 10162                           
 10163                           ;MCU_B1.c: 945: char i = 0;
 10164                           
 10165                           ;incstack = 0
 10166                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10167  0803  0020               	movlb	0	; select bank0
 10168  0804  01A1               	clrf	Flash_Memory_Write@i
 10169                           
 10170                           ;MCU_B1.c: 946: CFGS = 0;
 10171  0805  0023               	movlb	3	; select bank3
 10172  0806  1315               	bcf	21,6	;volatile
 10173                           
 10174                           ;MCU_B1.c: 947: PMADRH = 0x30;
 10175  0807  3030               	movlw	48
 10176  0808  0092               	movwf	18	;volatile
 10177                           
 10178                           ;MCU_B1.c: 948: PMDATH = 0;
 10179  0809  0194               	clrf	20	;volatile
 10180                           
 10181                           ;MCU_B1.c: 949: FREE = 0;
 10182  080A  1215               	bcf	21,4	;volatile
 10183                           
 10184                           ;MCU_B1.c: 950: LWLO = 1;
 10185  080B  1695               	bsf	21,5	;volatile
 10186                           
 10187                           ;MCU_B1.c: 951: WREN = 1;
 10188  080C  1515               	bsf	21,2	;volatile
 10189                           
 10190                           ;MCU_B1.c: 952: for (i = 0; i < 32; i++) {
 10191  080D  0020               	movlb	0	; select bank0
 10192  080E  01A1               	clrf	Flash_Memory_Write@i
 10193  080F  3020               	movlw	32
 10194  0810  0221               	subwf	Flash_Memory_Write@i,w
 10195  0811  1803               	btfsc	3,0
 10196  0812  282B               	goto	l1274
 10197  0813                     l6285:	
 10198                           
 10199                           ;MCU_B1.c: 953: PMADRL = i;
 10200  0813  0821               	movf	Flash_Memory_Write@i,w
 10201  0814  0023               	movlb	3	; select bank3
 10202  0815  0091               	movwf	17	;volatile
 10203                           
 10204                           ;MCU_B1.c: 954: PMDATL = Memory.Data[i];
 10205  0816  0020               	movlb	0	; select bank0
 10206  0817  0821               	movf	Flash_Memory_Write@i,w
 10207  0818  3EA0               	addlw	_Memory& (0+255)
 10208  0819  0086               	movwf	6
 10209  081A  3001               	movlw	1	; select bank3/4
 10210  081B  0087               	movwf	7
 10211  081C  0801               	movf	1,w
 10212  081D  0023               	movlb	3	; select bank3
 10213  081E  0093               	movwf	19	;volatile
 10214                           
 10215                           ;MCU_B1.c: 955: Flash_Memory_Unlock();
 10216  081F  319F  2780  3188   	fcall	_Flash_Memory_Unlock
 10217  0822  3001               	movlw	1
 10218  0823  0020               	movlb	0	; select bank0
 10219  0824  00A0               	movwf	??_Flash_Memory_Write
 10220  0825  0820               	movf	??_Flash_Memory_Write,w
 10221  0826  07A1               	addwf	Flash_Memory_Write@i,f
 10222  0827  3020               	movlw	32
 10223  0828  0221               	subwf	Flash_Memory_Write@i,w
 10224  0829  1C03               	skipc
 10225  082A  2813               	goto	l6285
 10226  082B                     l1274:	
 10227                           
 10228                           ;MCU_B1.c: 956: }
 10229                           ;MCU_B1.c: 957: LWLO = 0;
 10230  082B  0023               	movlb	3	; select bank3
 10231  082C  1295               	bcf	21,5	;volatile
 10232                           
 10233                           ;MCU_B1.c: 958: Flash_Memory_Unlock();
 10234  082D  319F  2780         	fcall	_Flash_Memory_Unlock
 10235                           
 10236                           ;MCU_B1.c: 959: WREN = 0;
 10237  082F  0023               	movlb	3	; select bank3
 10238  0830  1115               	bcf	21,2	;volatile
 10239  0831  0008               	return
 10240  0832                     __end_of_Flash_Memory_Write:	
 10241                           
 10242                           	psect	text58
 10243  1F80                     __ptext58:	
 10244 ;; *************** function _Flash_Memory_Unlock *****************
 10245 ;; Defined at:
 10246 ;;		line 923 in file "../src/MCU_B1.c"
 10247 ;; Parameters:    Size  Location     Type
 10248 ;;		None
 10249 ;; Auto vars:     Size  Location     Type
 10250 ;;		None
 10251 ;; Return value:  Size  Location     Type
 10252 ;;		None               void
 10253 ;; Registers used:
 10254 ;;		wreg
 10255 ;; Tracked objects:
 10256 ;;		On entry : 0/0
 10257 ;;		On exit  : 0/0
 10258 ;;		Unchanged: 0/0
 10259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10264 ;;Total ram usage:        0 bytes
 10265 ;; Hardware stack levels used:    1
 10266 ;; Hardware stack levels required when called:    5
 10267 ;; This function calls:
 10268 ;;		Nothing
 10269 ;; This function is called by:
 10270 ;;		_Flash_Memory_Write
 10271 ;;		_Flash_Memory_Erasing
 10272 ;; This function uses a non-reentrant model
 10273 ;;
 10274                           
 10275                           
 10276                           ;psect for function _Flash_Memory_Unlock
 10277  1F80                     _Flash_Memory_Unlock:	
 10278                           
 10279                           ;MCU_B1.c: 924: PMCON2 = 0x55;
 10280                           
 10281                           ;incstack = 0
 10282                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 10283  1F80  3055               	movlw	85
 10284  1F81  0023               	movlb	3	; select bank3
 10285  1F82  0096               	movwf	22	;volatile
 10286                           
 10287                           ;MCU_B1.c: 925: PMCON2 = 0xaa;
 10288  1F83  30AA               	movlw	170
 10289  1F84  0096               	movwf	22	;volatile
 10290                           
 10291                           ;MCU_B1.c: 926: WR = 1;
 10292  1F85  1495               	bsf	21,1	;volatile
 10293                           
 10294                           ;MCU_B1.c: 927: __nop();
 10295  1F86  0000               	nop
 10296                           
 10297                           ;MCU_B1.c: 928: __nop();
 10298  1F87  0000               	nop
 10299  1F88  0008               	return
 10300  1F89                     __end_of_Flash_Memory_Unlock:	
 10301                           
 10302                           	psect	text59
 10303  1294                     __ptext59:	
 10304 ;; *************** function _Flash_Memory_Read *****************
 10305 ;; Defined at:
 10306 ;;		line 932 in file "../src/MCU_B1.c"
 10307 ;; Parameters:    Size  Location     Type
 10308 ;;  address         1    wreg     unsigned char 
 10309 ;; Auto vars:     Size  Location     Type
 10310 ;;  address         1    2[BANK0 ] unsigned char 
 10311 ;;  ret             1    3[BANK0 ] unsigned char 
 10312 ;;  i               1    1[BANK0 ] unsigned char 
 10313 ;; Return value:  Size  Location     Type
 10314 ;;                  1    wreg      unsigned char 
 10315 ;; Registers used:
 10316 ;;		wreg, status,2
 10317 ;; Tracked objects:
 10318 ;;		On entry : 0/0
 10319 ;;		On exit  : 0/0
 10320 ;;		Unchanged: 0/0
 10321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10325 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10326 ;;Total ram usage:        4 bytes
 10327 ;; Hardware stack levels used:    1
 10328 ;; Hardware stack levels required when called:    5
 10329 ;; This function calls:
 10330 ;;		Nothing
 10331 ;; This function is called by:
 10332 ;;		_Flash_Memory_Initialization
 10333 ;;		_Flash_Memory_Modify
 10334 ;; This function uses a non-reentrant model
 10335 ;;
 10336                           
 10337                           
 10338                           ;psect for function _Flash_Memory_Read
 10339  1294                     _Flash_Memory_Read:	
 10340                           
 10341                           ;incstack = 0
 10342                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 10343                           ;Flash_Memory_Read@address stored from wreg
 10344  1294  0020               	movlb	0	; select bank0
 10345  1295  00A2               	movwf	Flash_Memory_Read@address
 10346                           
 10347                           ;MCU_B1.c: 933: char i = 0, ret = 0;
 10348  1296  01A1               	clrf	Flash_Memory_Read@i
 10349  1297  01A3               	clrf	Flash_Memory_Read@ret
 10350                           
 10351                           ;MCU_B1.c: 934: PMADRH = 0x30;
 10352  1298  3030               	movlw	48
 10353  1299  0023               	movlb	3	; select bank3
 10354  129A  0092               	movwf	18	;volatile
 10355                           
 10356                           ;MCU_B1.c: 935: PMADRL = address;
 10357  129B  0020               	movlb	0	; select bank0
 10358  129C  0822               	movf	Flash_Memory_Read@address,w
 10359  129D  0023               	movlb	3	; select bank3
 10360  129E  0091               	movwf	17	;volatile
 10361                           
 10362                           ;MCU_B1.c: 936: CFGS = 0;
 10363  129F  1315               	bcf	21,6	;volatile
 10364                           
 10365                           ;MCU_B1.c: 937: RD = 1;
 10366  12A0  1415               	bsf	21,0	;volatile
 10367                           
 10368                           ;MCU_B1.c: 938: i = PMDATH;
 10369  12A1  0814               	movf	20,w	;volatile
 10370  12A2  0020               	movlb	0	; select bank0
 10371  12A3  00A0               	movwf	??_Flash_Memory_Read
 10372  12A4  0820               	movf	??_Flash_Memory_Read,w
 10373  12A5  00A1               	movwf	Flash_Memory_Read@i
 10374                           
 10375                           ;MCU_B1.c: 939: ret = PMDATL;
 10376  12A6  0023               	movlb	3	; select bank3
 10377  12A7  0813               	movf	19,w	;volatile
 10378  12A8  0020               	movlb	0	; select bank0
 10379  12A9  00A0               	movwf	??_Flash_Memory_Read
 10380  12AA  0820               	movf	??_Flash_Memory_Read,w
 10381  12AB  00A3               	movwf	Flash_Memory_Read@ret
 10382                           
 10383                           ;MCU_B1.c: 940: return ret;
 10384  12AC  0823               	movf	Flash_Memory_Read@ret,w
 10385  12AD  0008               	return
 10386  12AE                     __end_of_Flash_Memory_Read:	
 10387                           
 10388                           	psect	text60
 10389  1F67                     __ptext60:	
 10390 ;; *************** function _DimmerLights_Main *****************
 10391 ;; Defined at:
 10392 ;;		line 402 in file "../src/Dimmer_B1.c"
 10393 ;; Parameters:    Size  Location     Type
 10394 ;;		None
 10395 ;; Auto vars:     Size  Location     Type
 10396 ;;		None
 10397 ;; Return value:  Size  Location     Type
 10398 ;;		None               void
 10399 ;; Registers used:
 10400 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10401 ;; Tracked objects:
 10402 ;;		On entry : 0/0
 10403 ;;		On exit  : 0/0
 10404 ;;		Unchanged: 0/0
 10405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10410 ;;Total ram usage:        0 bytes
 10411 ;; Hardware stack levels used:    1
 10412 ;; Hardware stack levels required when called:   10
 10413 ;; This function calls:
 10414 ;;		_setDimmerLights_Main
 10415 ;; This function is called by:
 10416 ;;		_main
 10417 ;; This function uses a non-reentrant model
 10418 ;;
 10419                           
 10420                           
 10421                           ;psect for function _DimmerLights_Main
 10422  1F67                     _DimmerLights_Main:	
 10423                           
 10424                           ;Dimmer_B1.c: 414: setDimmerLights_Main(1);
 10425                           
 10426                           ;incstack = 0
 10427                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10428  1F67  3001               	movlw	1
 10429  1F68  318A  22C5  319F   	fcall	_setDimmerLights_Main
 10430                           
 10431                           ;Dimmer_B1.c: 418: setDimmerLights_Main(2);
 10432  1F6B  3002               	movlw	2
 10433  1F6C  318A  22C5         	fcall	_setDimmerLights_Main
 10434  1F6E  0008               	return
 10435  1F6F                     __end_of_DimmerLights_Main:	
 10436                           
 10437                           	psect	text61
 10438  0AC5                     __ptext61:	
 10439 ;; *************** function _setDimmerLights_Main *****************
 10440 ;; Defined at:
 10441 ;;		line 428 in file "../src/Dimmer_B1.c"
 10442 ;; Parameters:    Size  Location     Type
 10443 ;;  lights          1    wreg     unsigned char 
 10444 ;; Auto vars:     Size  Location     Type
 10445 ;;  lights          1   70[BANK0 ] unsigned char 
 10446 ;; Return value:  Size  Location     Type
 10447 ;;		None               void
 10448 ;; Registers used:
 10449 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10450 ;; Tracked objects:
 10451 ;;		On entry : 0/0
 10452 ;;		On exit  : 0/0
 10453 ;;		Unchanged: 0/0
 10454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10456 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10458 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10459 ;;Total ram usage:        1 bytes
 10460 ;; Hardware stack levels used:    1
 10461 ;; Hardware stack levels required when called:    9
 10462 ;; This function calls:
 10463 ;;		_DimmerLightsPointSelect
 10464 ;;		_setBuz
 10465 ;;		_setDimmerLights
 10466 ;;		_setDimmerLights_Adj
 10467 ;; This function is called by:
 10468 ;;		_DimmerLights_Main
 10469 ;; This function uses a non-reentrant model
 10470 ;;
 10471                           
 10472                           
 10473                           ;psect for function _setDimmerLights_Main
 10474  0AC5                     _setDimmerLights_Main:	
 10475                           
 10476                           ;incstack = 0
 10477                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10478                           ;setDimmerLights_Main@lights stored from wreg
 10479  0AC5  0020               	movlb	0	; select bank0
 10480  0AC6  00E6               	movwf	setDimmerLights_Main@lights
 10481                           
 10482                           ;Dimmer_B1.c: 429: DimmerLightsPointSelect(lights);
 10483  0AC7  0866               	movf	setDimmerLights_Main@lights,w
 10484  0AC8  3191  2130  318A   	fcall	_DimmerLightsPointSelect
 10485                           
 10486                           ;Dimmer_B1.c: 430: if (DimmerLights->Trigger == 1) {
 10487  0ACB  0020               	movlb	0	; select bank0
 10488  0ACC  086F               	movf	_DimmerLights,w
 10489  0ACD  3E08               	addlw	8
 10490  0ACE  0086               	movwf	6
 10491  0ACF  3001               	movlw	1	; select bank2/3
 10492  0AD0  0087               	movwf	7
 10493  0AD1  1D01               	btfss	1,2
 10494  0AD2  2AF0               	goto	l7497
 10495                           
 10496                           ;Dimmer_B1.c: 432: if (Dimmer.LoadOK == 0) {
 10497  0AD3  0021               	movlb	1	; select bank1
 10498  0AD4  18C8               	btfsc	_Dimmer^(0+128),1
 10499  0AD5  0008               	return
 10500                           
 10501                           ;Dimmer_B1.c: 433: DimmerLights->Trigger = 0;
 10502  0AD6  0020               	movlb	0	; select bank0
 10503  0AD7  086F               	movf	_DimmerLights,w
 10504  0AD8  3E08               	addlw	8
 10505  0AD9  0086               	movwf	6
 10506  0ADA  3001               	movlw	1	; select bank2/3
 10507  0ADB  0087               	movwf	7
 10508  0ADC  1101               	bcf	1,2
 10509                           
 10510                           ;Dimmer_B1.c: 435: if (DimmerLights->Switch == 1) {
 10511  0ADD  086F               	movf	_DimmerLights,w
 10512  0ADE  3E08               	addlw	8
 10513  0ADF  0086               	movwf	6
 10514  0AE0  3001               	movlw	1	; select bank2/3
 10515  0AE1  0087               	movwf	7
 10516  0AE2  1C81               	btfss	1,1
 10517  0AE3  2AEA               	goto	l7495
 10518                           
 10519                           ;Dimmer_B1.c: 436: setDimmerLights(lights, 1);
 10520  0AE4  01E2               	clrf	setDimmerLights@status
 10521  0AE5  0AE2               	incf	setDimmerLights@status,f
 10522  0AE6  0866               	movf	setDimmerLights_Main@lights,w
 10523  0AE7  318F  2703         	fcall	_setDimmerLights
 10524                           
 10525                           ;Dimmer_B1.c: 437: } else {
 10526  0AE9  0008               	return
 10527  0AEA                     l7495:	
 10528                           
 10529                           ;Dimmer_B1.c: 438: setDimmerLights(lights, 0);
 10530  0AEA  0020               	movlb	0	; select bank0
 10531  0AEB  01E2               	clrf	setDimmerLights@status
 10532  0AEC  0866               	movf	setDimmerLights_Main@lights,w
 10533  0AED  318F  2703         	fcall	_setDimmerLights
 10534                           
 10535                           ;Dimmer_B1.c: 439: }
 10536                           ;Dimmer_B1.c: 440: }
 10537                           ;Dimmer_B1.c: 441: } else {
 10538  0AEF  0008               	return
 10539  0AF0                     l7497:	
 10540                           
 10541                           ;Dimmer_B1.c: 442: if (DimmerLights->TriggerAdj == 1) {
 10542  0AF0  0020               	movlb	0	; select bank0
 10543  0AF1  086F               	movf	_DimmerLights,w
 10544  0AF2  3E08               	addlw	8
 10545  0AF3  0086               	movwf	6
 10546  0AF4  3001               	movlw	1	; select bank2/3
 10547  0AF5  0087               	movwf	7
 10548  0AF6  1E01               	btfss	1,4
 10549  0AF7  0008               	return
 10550                           
 10551                           ;Dimmer_B1.c: 443: if (Dimmer.LoadOK == 0) {
 10552  0AF8  0021               	movlb	1	; select bank1
 10553  0AF9  18C8               	btfsc	_Dimmer^(0+128),1
 10554  0AFA  0008               	return
 10555                           
 10556                           ;Dimmer_B1.c: 444: DimmerLights->TriggerAdj = 0;
 10557  0AFB  0020               	movlb	0	; select bank0
 10558  0AFC  086F               	movf	_DimmerLights,w
 10559  0AFD  3E08               	addlw	8
 10560  0AFE  0086               	movwf	6
 10561  0AFF  3001               	movlw	1	; select bank2/3
 10562  0B00  0087               	movwf	7
 10563  0B01  1201               	bcf	1,4
 10564                           
 10565                           ;Dimmer_B1.c: 445: if (DimmerLights->AdjGo == 1) {
 10566  0B02  086F               	movf	_DimmerLights,w
 10567  0B03  3E08               	addlw	8
 10568  0B04  0086               	movwf	6
 10569  0B05  3001               	movlw	1	; select bank2/3
 10570  0B06  0087               	movwf	7
 10571  0B07  1D81               	btfss	1,3
 10572  0B08  2B18               	goto	l7507
 10573                           
 10574                           ;Dimmer_B1.c: 446: setDimmerLights_Adj(lights, 1);
 10575  0B09  01E2               	clrf	setDimmerLights_Adj@status
 10576  0B0A  0AE2               	incf	setDimmerLights_Adj@status,f
 10577  0B0B  0866               	movf	setDimmerLights_Main@lights,w
 10578  0B0C  3189  211B  318A   	fcall	_setDimmerLights_Adj
 10579                           
 10580                           ;Dimmer_B1.c: 447: setBuz(1, 100);
 10581  0B0F  3064               	movlw	100
 10582  0B10  0020               	movlb	0	; select bank0
 10583  0B11  00A9               	movwf	setBuz@time
 10584  0B12  3000               	movlw	0
 10585  0B13  00AA               	movwf	setBuz@time+1
 10586  0B14  3001               	movlw	1
 10587  0B15  318A  226C         	fcall	_setBuz
 10588                           
 10589                           ;Dimmer_B1.c: 448: } else {
 10590  0B17  0008               	return
 10591  0B18                     l7507:	
 10592                           
 10593                           ;Dimmer_B1.c: 449: setDimmerLights_Adj(lights, 0);
 10594  0B18  0020               	movlb	0	; select bank0
 10595  0B19  01E2               	clrf	setDimmerLights_Adj@status
 10596  0B1A  0866               	movf	setDimmerLights_Main@lights,w
 10597  0B1B  3189  211B         	fcall	_setDimmerLights_Adj
 10598  0B1D  0008               	return
 10599  0B1E                     __end_of_setDimmerLights_Main:	
 10600                           
 10601                           	psect	text62
 10602  091B                     __ptext62:	
 10603 ;; *************** function _setDimmerLights_Adj *****************
 10604 ;; Defined at:
 10605 ;;		line 728 in file "../src/Dimmer_B1.c"
 10606 ;; Parameters:    Size  Location     Type
 10607 ;;  lights          1    wreg     unsigned char 
 10608 ;;  status          1   66[BANK0 ] unsigned char 
 10609 ;; Auto vars:     Size  Location     Type
 10610 ;;  lights          1   69[BANK0 ] unsigned char 
 10611 ;; Return value:  Size  Location     Type
 10612 ;;		None               void
 10613 ;; Registers used:
 10614 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10615 ;; Tracked objects:
 10616 ;;		On entry : 0/0
 10617 ;;		On exit  : 0/0
 10618 ;;		Unchanged: 0/0
 10619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10620 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10621 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10622 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10623 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10624 ;;Total ram usage:        4 bytes
 10625 ;; Hardware stack levels used:    1
 10626 ;; Hardware stack levels required when called:    8
 10627 ;; This function calls:
 10628 ;;		_DimmerLightsPointSelect
 10629 ;;		_setPercentValue
 10630 ;;		_setRF_DimmerLights
 10631 ;;		_setTxData
 10632 ;; This function is called by:
 10633 ;;		_setDimmerLights_Main
 10634 ;; This function uses a non-reentrant model
 10635 ;;
 10636                           
 10637                           
 10638                           ;psect for function _setDimmerLights_Adj
 10639  091B                     _setDimmerLights_Adj:	
 10640                           
 10641                           ;incstack = 0
 10642                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10643                           ;setDimmerLights_Adj@lights stored from wreg
 10644  091B  0020               	movlb	0	; select bank0
 10645  091C  00E5               	movwf	setDimmerLights_Adj@lights
 10646                           
 10647                           ;Dimmer_B1.c: 729: DimmerLightsPointSelect(lights);
 10648  091D  0865               	movf	setDimmerLights_Adj@lights,w
 10649  091E  3191  2130  3189   	fcall	_DimmerLightsPointSelect
 10650                           
 10651                           ;Dimmer_B1.c: 730: if (status == 1) {
 10652  0921  0020               	movlb	0	; select bank0
 10653  0922  0862               	movf	setDimmerLights_Adj@status,w
 10654  0923  3A01               	xorlw	1
 10655  0924  1D03               	skipz
 10656  0925  2931               	goto	l6203
 10657                           
 10658                           ;Dimmer_B1.c: 731: DimmerLights->AdjFlag = 1;
 10659  0926  086F               	movf	_DimmerLights,w
 10660  0927  0086               	movwf	6
 10661  0928  3001               	movlw	1	; select bank2/3
 10662  0929  0087               	movwf	7
 10663  092A  1581               	bsf	1,3
 10664                           
 10665                           ;Dimmer_B1.c: 732: DimmerLights->Signal = 1;
 10666  092B  086F               	movf	_DimmerLights,w
 10667  092C  0086               	movwf	6
 10668  092D  3001               	movlw	1	; select bank2/3
 10669  092E  0087               	movwf	7
 10670  092F  1481               	bsf	1,1
 10671                           
 10672                           ;Dimmer_B1.c: 733: } else {
 10673  0930  0008               	return
 10674  0931                     l6203:	
 10675                           
 10676                           ;Dimmer_B1.c: 734: if (DimmerLights->AdjFlag == 1) {
 10677  0931  086F               	movf	_DimmerLights,w
 10678  0932  0086               	movwf	6
 10679  0933  3001               	movlw	1	; select bank2/3
 10680  0934  0087               	movwf	7
 10681  0935  1D81               	btfss	1,3
 10682  0936  0008               	return
 10683                           
 10684                           ;Dimmer_B1.c: 735: DimmerLights->Signal = 0;
 10685  0937  086F               	movf	_DimmerLights,w
 10686  0938  0086               	movwf	6
 10687  0939  3001               	movlw	1	; select bank2/3
 10688  093A  0087               	movwf	7
 10689  093B  1081               	bcf	1,1
 10690                           
 10691                           ;Dimmer_B1.c: 736: DimmerLights->AdjFlag = 0;
 10692  093C  086F               	movf	_DimmerLights,w
 10693  093D  0086               	movwf	6
 10694  093E  3001               	movlw	1	; select bank2/3
 10695  093F  0087               	movwf	7
 10696  0940  1181               	bcf	1,3
 10697                           
 10698                           ;Dimmer_B1.c: 737: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 10699  0941  086F               	movf	_DimmerLights,w
 10700  0942  3E04               	addlw	4
 10701  0943  0086               	movwf	6
 10702  0944  3001               	movlw	1	; select bank2/3
 10703  0945  0087               	movwf	7
 10704  0946  0801               	movf	1,w
 10705  0947  00E3               	movwf	??_setDimmerLights_Adj
 10706  0948  086F               	movf	_DimmerLights,w
 10707  0949  3E05               	addlw	5
 10708  094A  0086               	movwf	6
 10709  094B  3001               	movlw	1	; select bank2/3
 10710  094C  0087               	movwf	7
 10711  094D  0863               	movf	??_setDimmerLights_Adj,w
 10712  094E  0081               	movwf	1
 10713                           
 10714                           ;Dimmer_B1.c: 738: product->Data[(20 + lights)]=setPercentValue(DimmerLights->DimmingVal
      +                          ue);
 10715  094F  086F               	movf	_DimmerLights,w
 10716  0950  3E04               	addlw	4
 10717  0951  0086               	movwf	6
 10718  0952  3001               	movlw	1	; select bank2/3
 10719  0953  0087               	movwf	7
 10720  0954  0801               	movf	1,w
 10721  0955  318C  24EC  3189   	fcall	_setPercentValue
 10722  0958  0020               	movlb	0	; select bank0
 10723  0959  00E3               	movwf	??_setDimmerLights_Adj
 10724  095A  0865               	movf	setDimmerLights_Adj@lights,w
 10725  095B  3E14               	addlw	20
 10726  095C  076E               	addwf	_product,w
 10727  095D  00E4               	movwf	??_setDimmerLights_Adj+1
 10728  095E  0864               	movf	??_setDimmerLights_Adj+1,w
 10729  095F  0086               	movwf	6
 10730  0960  3001               	movlw	1	; select bank2/3
 10731  0961  0087               	movwf	7
 10732  0962  0863               	movf	??_setDimmerLights_Adj,w
 10733  0963  0081               	movwf	1
 10734                           
 10735                           ;Dimmer_B1.c: 751: setRF_DimmerLights(lights, 1);
 10736  0964  01A0               	clrf	setRF_DimmerLights@on
 10737  0965  0AA0               	incf	setRF_DimmerLights@on,f
 10738  0966  0865               	movf	setDimmerLights_Adj@lights,w
 10739  0967  318B  23D3  3189   	fcall	_setRF_DimmerLights
 10740                           
 10741                           ;Dimmer_B1.c: 752: setTxData();
 10742  096A  3185  25AF         	fcall	_setTxData
 10743  096C  0008               	return
 10744  096D                     __end_of_setDimmerLights_Adj:	
 10745                           
 10746                           	psect	text63
 10747  0F03                     __ptext63:	
 10748 ;; *************** function _setDimmerLights *****************
 10749 ;; Defined at:
 10750 ;;		line 623 in file "../src/Dimmer_B1.c"
 10751 ;; Parameters:    Size  Location     Type
 10752 ;;  lights          1    wreg     unsigned char 
 10753 ;;  status          1   66[BANK0 ] unsigned char 
 10754 ;; Auto vars:     Size  Location     Type
 10755 ;;  lights          1   69[BANK0 ] unsigned char 
 10756 ;; Return value:  Size  Location     Type
 10757 ;;		None               void
 10758 ;; Registers used:
 10759 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10760 ;; Tracked objects:
 10761 ;;		On entry : 0/0
 10762 ;;		On exit  : 0/0
 10763 ;;		Unchanged: 0/0
 10764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10765 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10766 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10767 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10768 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10769 ;;Total ram usage:        4 bytes
 10770 ;; Hardware stack levels used:    1
 10771 ;; Hardware stack levels required when called:    8
 10772 ;; This function calls:
 10773 ;;		_DimmerLightsPointSelect
 10774 ;;		_setDimmerLights_Line
 10775 ;;		_setLED
 10776 ;;		_setPercentValue
 10777 ;;		_setRF_DimmerLights
 10778 ;;		_setTxData
 10779 ;; This function is called by:
 10780 ;;		_setDimmerLights_Main
 10781 ;; This function uses a non-reentrant model
 10782 ;;
 10783                           
 10784                           
 10785                           ;psect for function _setDimmerLights
 10786  0F03                     _setDimmerLights:	
 10787                           
 10788                           ;incstack = 0
 10789                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10790                           ;setDimmerLights@lights stored from wreg
 10791  0F03  0020               	movlb	0	; select bank0
 10792  0F04  00E5               	movwf	setDimmerLights@lights
 10793                           
 10794                           ;Dimmer_B1.c: 624: DimmerLightsPointSelect(lights);
 10795  0F05  0865               	movf	setDimmerLights@lights,w
 10796  0F06  3191  2130  318F   	fcall	_DimmerLightsPointSelect
 10797                           
 10798                           ;Dimmer_B1.c: 631: if (status == 1) {
 10799  0F09  0020               	movlb	0	; select bank0
 10800  0F0A  0862               	movf	setDimmerLights@status,w
 10801  0F0B  3A01               	xorlw	1
 10802  0F0C  1D03               	skipz
 10803  0F0D  2F3E               	goto	l7471
 10804                           
 10805                           ;Dimmer_B1.c: 632: DimmerLights->Loop = 1;
 10806  0F0E  086F               	movf	_DimmerLights,w
 10807  0F0F  3E09               	addlw	9
 10808  0F10  0086               	movwf	6
 10809  0F11  3001               	movlw	1	; select bank2/3
 10810  0F12  0087               	movwf	7
 10811  0F13  1481               	bsf	1,1
 10812                           
 10813                           ;Dimmer_B1.c: 633: setLED(lights, 0);
 10814  0F14  01A1               	clrf	setLED@command
 10815  0F15  0865               	movf	setDimmerLights@lights,w
 10816  0F16  3189  21C1  318F   	fcall	_setLED
 10817                           
 10818                           ;Dimmer_B1.c: 635: setDimmerLights_Line(lights);
 10819  0F19  0020               	movlb	0	; select bank0
 10820  0F1A  0865               	movf	setDimmerLights@lights,w
 10821  0F1B  3192  220A  318F   	fcall	_setDimmerLights_Line
 10822                           
 10823                           ;Dimmer_B1.c: 636: DimmerLights->StatusFlag = 1;
 10824  0F1E  0020               	movlb	0	; select bank0
 10825  0F1F  086F               	movf	_DimmerLights,w
 10826  0F20  0086               	movwf	6
 10827  0F21  3001               	movlw	1	; select bank2/3
 10828  0F22  0087               	movwf	7
 10829  0F23  1701               	bsf	1,6
 10830                           
 10831                           ;Dimmer_B1.c: 643: DimmerLights->DimmingValue = ((char)(80*0.8));
 10832  0F24  3040               	movlw	64
 10833  0F25  00E3               	movwf	??_setDimmerLights
 10834  0F26  086F               	movf	_DimmerLights,w
 10835  0F27  3E04               	addlw	4
 10836  0F28  0086               	movwf	6
 10837  0F29  3001               	movlw	1	; select bank2/3
 10838  0F2A  0087               	movwf	7
 10839  0F2B  0863               	movf	??_setDimmerLights,w
 10840  0F2C  0081               	movwf	1
 10841                           
 10842                           ;Dimmer_B1.c: 644: product->Data[(20 + lights)]=setPercentValue(((char)(80*0.8)));
 10843  0F2D  3040               	movlw	64
 10844  0F2E  318C  24EC  318F   	fcall	_setPercentValue
 10845  0F31  0020               	movlb	0	; select bank0
 10846  0F32  00E3               	movwf	??_setDimmerLights
 10847  0F33  0865               	movf	setDimmerLights@lights,w
 10848  0F34  3E14               	addlw	20
 10849  0F35  076E               	addwf	_product,w
 10850  0F36  00E4               	movwf	??_setDimmerLights+1
 10851  0F37  0864               	movf	??_setDimmerLights+1,w
 10852  0F38  0086               	movwf	6
 10853  0F39  3001               	movlw	1	; select bank2/3
 10854  0F3A  0087               	movwf	7
 10855  0F3B  0863               	movf	??_setDimmerLights,w
 10856  0F3C  0081               	movwf	1
 10857  0F3D  2F65               	goto	l7483
 10858  0F3E                     l7471:	
 10859                           ;Dimmer_B1.c: 654: } else {
 10860                           
 10861                           ;Dimmer_B1.c: 652: DimmerLights->DimmingTimeValue = 7;
 10862                           
 10863                           
 10864                           ;Dimmer_B1.c: 655: DimmerLights->StatusFlag = 0;
 10865  0F3E  086F               	movf	_DimmerLights,w
 10866  0F3F  0086               	movwf	6
 10867  0F40  3001               	movlw	1	; select bank2/3
 10868  0F41  0087               	movwf	7
 10869  0F42  1301               	bcf	1,6
 10870                           
 10871                           ;Dimmer_B1.c: 656: DimmerLights->Loop = 0;
 10872  0F43  086F               	movf	_DimmerLights,w
 10873  0F44  3E09               	addlw	9
 10874  0F45  0086               	movwf	6
 10875  0F46  3001               	movlw	1	; select bank2/3
 10876  0F47  0087               	movwf	7
 10877  0F48  1081               	bcf	1,1
 10878                           
 10879                           ;Dimmer_B1.c: 657: setLED(lights, 1);
 10880  0F49  01A1               	clrf	setLED@command
 10881  0F4A  0AA1               	incf	setLED@command,f
 10882  0F4B  0865               	movf	setDimmerLights@lights,w
 10883  0F4C  3189  21C1  318F   	fcall	_setLED
 10884                           
 10885                           ;Dimmer_B1.c: 665: DimmerLights->MosfetClose = 1;
 10886  0F4F  0020               	movlb	0	; select bank0
 10887  0F50  086F               	movf	_DimmerLights,w
 10888  0F51  3E08               	addlw	8
 10889  0F52  0086               	movwf	6
 10890  0F53  3001               	movlw	1	; select bank2/3
 10891  0F54  0087               	movwf	7
 10892  0F55  1781               	bsf	1,7
 10893                           
 10894                           ;Dimmer_B1.c: 668: DimmerLights->AdjFlag = 0;
 10895  0F56  086F               	movf	_DimmerLights,w
 10896  0F57  0086               	movwf	6
 10897  0F58  3001               	movlw	1	; select bank2/3
 10898  0F59  0087               	movwf	7
 10899  0F5A  1181               	bcf	1,3
 10900                           
 10901                           ;Dimmer_B1.c: 669: DimmerLights->AdjStatus = 0;
 10902  0F5B  086F               	movf	_DimmerLights,w
 10903  0F5C  0086               	movwf	6
 10904  0F5D  3001               	movlw	1	; select bank2/3
 10905  0F5E  0087               	movwf	7
 10906  0F5F  1201               	bcf	1,4
 10907                           
 10908                           ;Dimmer_B1.c: 670: DimmerLights->AdjRF = 0;
 10909  0F60  086F               	movf	_DimmerLights,w
 10910  0F61  0086               	movwf	6
 10911  0F62  3001               	movlw	1	; select bank2/3
 10912  0F63  0087               	movwf	7
 10913  0F64  1101               	bcf	1,2
 10914  0F65                     l7483:	
 10915                           
 10916                           ;Dimmer_B1.c: 671: DimmerLights->DimmingTimeValue = 7;
 10917  0F65  3007               	movlw	7
 10918  0F66  00E3               	movwf	??_setDimmerLights
 10919  0F67  086F               	movf	_DimmerLights,w
 10920  0F68  3E02               	addlw	2
 10921  0F69  0086               	movwf	6
 10922  0F6A  3001               	movlw	1	; select bank2/3
 10923  0F6B  0087               	movwf	7
 10924  0F6C  0863               	movf	??_setDimmerLights,w
 10925  0F6D  0081               	movwf	1
 10926                           
 10927                           ;Dimmer_B1.c: 673: }
 10928                           ;Dimmer_B1.c: 674: setRF_DimmerLights(lights, status);
 10929  0F6E  0862               	movf	setDimmerLights@status,w
 10930  0F6F  00E3               	movwf	??_setDimmerLights
 10931  0F70  0863               	movf	??_setDimmerLights,w
 10932  0F71  00A0               	movwf	setRF_DimmerLights@on
 10933  0F72  0865               	movf	setDimmerLights@lights,w
 10934  0F73  318B  23D3  318F   	fcall	_setRF_DimmerLights
 10935                           
 10936                           ;Dimmer_B1.c: 675: setTxData();
 10937  0F76  3185  25AF         	fcall	_setTxData
 10938  0F78  0008               	return
 10939  0F79                     __end_of_setDimmerLights:	
 10940                           
 10941                           	psect	text64
 10942  05AF                     __ptext64:	
 10943 ;; *************** function _setTxData *****************
 10944 ;; Defined at:
 10945 ;;		line 204 in file "../src/RF_Control_B1.c"
 10946 ;; Parameters:    Size  Location     Type
 10947 ;;		None
 10948 ;; Auto vars:     Size  Location     Type
 10949 ;;  i               1    0        unsigned char 
 10950 ;; Return value:  Size  Location     Type
 10951 ;;		None               void
 10952 ;; Registers used:
 10953 ;;		wreg, fsr1l, fsr1h
 10954 ;; Tracked objects:
 10955 ;;		On entry : 0/0
 10956 ;;		On exit  : 0/0
 10957 ;;		Unchanged: 0/0
 10958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10961 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10963 ;;Total ram usage:        1 bytes
 10964 ;; Hardware stack levels used:    1
 10965 ;; Hardware stack levels required when called:    5
 10966 ;; This function calls:
 10967 ;;		Nothing
 10968 ;; This function is called by:
 10969 ;;		_setDimmerLights
 10970 ;;		_setDimmerLights_Adj
 10971 ;;		_setControl_Lights_Table
 10972 ;;		_setRFSW_Control
 10973 ;;		_setRFSW_AdjControl
 10974 ;; This function uses a non-reentrant model
 10975 ;;
 10976                           
 10977                           
 10978                           ;psect for function _setTxData
 10979  05AF                     _setTxData:	
 10980                           
 10981                           ;RF_Control_B1.c: 205: char i;
 10982                           ;RF_Control_B1.c: 206: if (RF1.Enable == 1) {
 10983                           
 10984                           ;incstack = 0
 10985                           ; Regs used in _setTxData: [wregfsr1]
 10986  05AF  0021               	movlb	1	; select bank1
 10987  05B0  1C3C               	btfss	_RF1^(0+128),0
 10988  05B1  0008               	return
 10989                           
 10990                           ;RF_Control_B1.c: 208: RF1.TransceiveGO = 1;
 10991  05B2  153C               	bsf	_RF1^(0+128),2
 10992                           
 10993                           ;RF_Control_B1.c: 209: RF1.RunTime = 20;
 10994  05B3  3014               	movlw	20
 10995  05B4  00C3               	movwf	(_RF1^(0+128)+7)
 10996  05B5  3000               	movlw	0
 10997  05B6  00C4               	movwf	(_RF1^(0+128)+8)
 10998                           
 10999                           ;RF_Control_B1.c: 218: RF_Data[0] = 0x63;
 11000  05B7  3063               	movlw	99
 11001  05B8  0020               	movlb	0	; select bank0
 11002  05B9  00A0               	movwf	??_setTxData
 11003  05BA  0820               	movf	??_setTxData,w
 11004  05BB  0022               	movlb	2	; select bank2
 11005  05BC  00A0               	movwf	_RF_Data^(0+256)
 11006                           
 11007                           ;RF_Control_B1.c: 219: RF_Data[1] = 0x02;
 11008  05BD  3002               	movlw	2
 11009  05BE  0020               	movlb	0	; select bank0
 11010  05BF  00A0               	movwf	??_setTxData
 11011  05C0  0820               	movf	??_setTxData,w
 11012  05C1  0022               	movlb	2	; select bank2
 11013  05C2  00A1               	movwf	(_RF_Data^(0+256)+1)
 11014                           
 11015                           ;RF_Control_B1.c: 220: RF_Data[2] = product->Data[2];
 11016  05C3  0020               	movlb	0	; select bank0
 11017  05C4  086E               	movf	_product,w
 11018  05C5  0086               	movwf	6
 11019  05C6  3001               	movlw	1	; select bank2/3
 11020  05C7  0087               	movwf	7
 11021  05C8  3001               	movlw	1	; select bank2/3
 11022  05C9  3F42               	moviw [2]fsr1
 11023  05CA  0022               	movlb	2	; select bank2
 11024  05CB  00A2               	movwf	(_RF_Data^(0+256)+2)
 11025                           
 11026                           ;RF_Control_B1.c: 221: RF_Data[3] = product->Data[3];
 11027  05CC  0020               	movlb	0	; select bank0
 11028  05CD  086E               	movf	_product,w
 11029  05CE  0086               	movwf	6
 11030  05CF  3001               	movlw	1	; select bank2/3
 11031  05D0  0087               	movwf	7
 11032  05D1  3001               	movlw	1	; select bank2/3
 11033  05D2  3F43               	moviw [3]fsr1
 11034  05D3  0022               	movlb	2	; select bank2
 11035  05D4  00A3               	movwf	(_RF_Data^(0+256)+3)
 11036                           
 11037                           ;RF_Control_B1.c: 222: RF_Data[4] = product->Data[4];
 11038  05D5  0020               	movlb	0	; select bank0
 11039  05D6  086E               	movf	_product,w
 11040  05D7  0086               	movwf	6
 11041  05D8  3001               	movlw	1	; select bank2/3
 11042  05D9  0087               	movwf	7
 11043  05DA  3001               	movlw	1	; select bank2/3
 11044  05DB  3F44               	moviw [4]fsr1
 11045  05DC  0022               	movlb	2	; select bank2
 11046  05DD  00A4               	movwf	(_RF_Data^(0+256)+4)
 11047                           
 11048                           ;RF_Control_B1.c: 223: RF_Data[5] = product->Data[5];
 11049  05DE  0020               	movlb	0	; select bank0
 11050  05DF  086E               	movf	_product,w
 11051  05E0  0086               	movwf	6
 11052  05E1  3001               	movlw	1	; select bank2/3
 11053  05E2  0087               	movwf	7
 11054  05E3  3001               	movlw	1	; select bank2/3
 11055  05E4  3F45               	moviw [5]fsr1
 11056  05E5  0022               	movlb	2	; select bank2
 11057  05E6  00A5               	movwf	(_RF_Data^(0+256)+5)
 11058                           
 11059                           ;RF_Control_B1.c: 224: RF_Data[6] = product->Data[6];
 11060  05E7  0020               	movlb	0	; select bank0
 11061  05E8  086E               	movf	_product,w
 11062  05E9  0086               	movwf	6
 11063  05EA  3001               	movlw	1	; select bank2/3
 11064  05EB  0087               	movwf	7
 11065  05EC  3001               	movlw	1	; select bank2/3
 11066  05ED  3F46               	moviw [6]fsr1
 11067  05EE  0022               	movlb	2	; select bank2
 11068  05EF  00A6               	movwf	(_RF_Data^(0+256)+6)
 11069                           
 11070                           ;RF_Control_B1.c: 225: RF_Data[7] = product->Data[7];
 11071  05F0  0020               	movlb	0	; select bank0
 11072  05F1  086E               	movf	_product,w
 11073  05F2  0086               	movwf	6
 11074  05F3  3001               	movlw	1	; select bank2/3
 11075  05F4  0087               	movwf	7
 11076  05F5  3001               	movlw	1	; select bank2/3
 11077  05F6  3F47               	moviw [7]fsr1
 11078  05F7  0022               	movlb	2	; select bank2
 11079  05F8  00A7               	movwf	(_RF_Data^(0+256)+7)
 11080                           
 11081                           ;RF_Control_B1.c: 226: RF_Data[8] = product->Data[8];
 11082  05F9  0020               	movlb	0	; select bank0
 11083  05FA  086E               	movf	_product,w
 11084  05FB  0086               	movwf	6
 11085  05FC  3001               	movlw	1	; select bank2/3
 11086  05FD  0087               	movwf	7
 11087  05FE  3001               	movlw	1	; select bank2/3
 11088  05FF  3F48               	moviw [8]fsr1
 11089  0600  0022               	movlb	2	; select bank2
 11090  0601  00A8               	movwf	(_RF_Data^(0+256)+8)
 11091                           
 11092                           ;RF_Control_B1.c: 227: RF_Data[9] = product->Data[9];
 11093  0602  0020               	movlb	0	; select bank0
 11094  0603  086E               	movf	_product,w
 11095  0604  0086               	movwf	6
 11096  0605  3001               	movlw	1	; select bank2/3
 11097  0606  0087               	movwf	7
 11098  0607  3001               	movlw	1	; select bank2/3
 11099  0608  3F49               	moviw [9]fsr1
 11100  0609  0022               	movlb	2	; select bank2
 11101  060A  00A9               	movwf	(_RF_Data^(0+256)+9)
 11102                           
 11103                           ;RF_Control_B1.c: 228: RF_Data[10] = product->Data[10];
 11104  060B  0020               	movlb	0	; select bank0
 11105  060C  086E               	movf	_product,w
 11106  060D  0086               	movwf	6
 11107  060E  3001               	movlw	1	; select bank2/3
 11108  060F  0087               	movwf	7
 11109  0610  3001               	movlw	1	; select bank2/3
 11110  0611  3F4A               	moviw [10]fsr1
 11111  0612  0022               	movlb	2	; select bank2
 11112  0613  00AA               	movwf	(_RF_Data^(0+256)+10)
 11113                           
 11114                           ;RF_Control_B1.c: 229: RF_Data[11] = product->Data[11];
 11115  0614  0020               	movlb	0	; select bank0
 11116  0615  086E               	movf	_product,w
 11117  0616  0086               	movwf	6
 11118  0617  3001               	movlw	1	; select bank2/3
 11119  0618  0087               	movwf	7
 11120  0619  3001               	movlw	1	; select bank2/3
 11121  061A  3F4B               	moviw [11]fsr1
 11122  061B  0022               	movlb	2	; select bank2
 11123  061C  00AB               	movwf	(_RF_Data^(0+256)+11)
 11124                           
 11125                           ;RF_Control_B1.c: 230: RF_Data[12] = product->Data[12];
 11126  061D  0020               	movlb	0	; select bank0
 11127  061E  086E               	movf	_product,w
 11128  061F  0086               	movwf	6
 11129  0620  3001               	movlw	1	; select bank2/3
 11130  0621  0087               	movwf	7
 11131  0622  3001               	movlw	1	; select bank2/3
 11132  0623  3F4C               	moviw [12]fsr1
 11133  0624  0022               	movlb	2	; select bank2
 11134  0625  00AC               	movwf	(_RF_Data^(0+256)+12)
 11135                           
 11136                           ;RF_Control_B1.c: 231: RF_Data[13] = product->Data[13];
 11137  0626  0020               	movlb	0	; select bank0
 11138  0627  086E               	movf	_product,w
 11139  0628  0086               	movwf	6
 11140  0629  3001               	movlw	1	; select bank2/3
 11141  062A  0087               	movwf	7
 11142  062B  3001               	movlw	1	; select bank2/3
 11143  062C  3F4D               	moviw [13]fsr1
 11144  062D  0022               	movlb	2	; select bank2
 11145  062E  00AD               	movwf	(_RF_Data^(0+256)+13)
 11146                           
 11147                           ;RF_Control_B1.c: 232: RF_Data[14] = product->Data[14];
 11148  062F  0020               	movlb	0	; select bank0
 11149  0630  086E               	movf	_product,w
 11150  0631  0086               	movwf	6
 11151  0632  3001               	movlw	1	; select bank2/3
 11152  0633  0087               	movwf	7
 11153  0634  3001               	movlw	1	; select bank2/3
 11154  0635  3F4E               	moviw [14]fsr1
 11155  0636  0022               	movlb	2	; select bank2
 11156  0637  00AE               	movwf	(_RF_Data^(0+256)+14)
 11157                           
 11158                           ;RF_Control_B1.c: 233: RF_Data[15] = product->Data[15];
 11159  0638  0020               	movlb	0	; select bank0
 11160  0639  086E               	movf	_product,w
 11161  063A  0086               	movwf	6
 11162  063B  3001               	movlw	1	; select bank2/3
 11163  063C  0087               	movwf	7
 11164  063D  3001               	movlw	1	; select bank2/3
 11165  063E  3F4F               	moviw [15]fsr1
 11166  063F  0022               	movlb	2	; select bank2
 11167  0640  00AF               	movwf	(_RF_Data^(0+256)+15)
 11168                           
 11169                           ;RF_Control_B1.c: 234: RF_Data[16] = product->Data[16];
 11170  0641  0020               	movlb	0	; select bank0
 11171  0642  086E               	movf	_product,w
 11172  0643  0086               	movwf	6
 11173  0644  3001               	movlw	1	; select bank2/3
 11174  0645  0087               	movwf	7
 11175  0646  3001               	movlw	1	; select bank2/3
 11176  0647  3F50               	moviw [16]fsr1
 11177  0648  0022               	movlb	2	; select bank2
 11178  0649  00B0               	movwf	(_RF_Data^(0+256)+16)
 11179                           
 11180                           ;RF_Control_B1.c: 235: RF_Data[17] = product->Data[17];
 11181  064A  0020               	movlb	0	; select bank0
 11182  064B  086E               	movf	_product,w
 11183  064C  0086               	movwf	6
 11184  064D  3001               	movlw	1	; select bank2/3
 11185  064E  0087               	movwf	7
 11186  064F  3001               	movlw	1	; select bank2/3
 11187  0650  3F51               	moviw [17]fsr1
 11188  0651  0022               	movlb	2	; select bank2
 11189  0652  00B1               	movwf	(_RF_Data^(0+256)+17)
 11190                           
 11191                           ;RF_Control_B1.c: 236: RF_Data[18] = product->Data[18];
 11192  0653  0020               	movlb	0	; select bank0
 11193  0654  086E               	movf	_product,w
 11194  0655  0086               	movwf	6
 11195  0656  3001               	movlw	1	; select bank2/3
 11196  0657  0087               	movwf	7
 11197  0658  3001               	movlw	1	; select bank2/3
 11198  0659  3F52               	moviw [18]fsr1
 11199  065A  0022               	movlb	2	; select bank2
 11200  065B  00B2               	movwf	(_RF_Data^(0+256)+18)
 11201                           
 11202                           ;RF_Control_B1.c: 237: RF_Data[19] = product->Data[19];
 11203  065C  0020               	movlb	0	; select bank0
 11204  065D  086E               	movf	_product,w
 11205  065E  0086               	movwf	6
 11206  065F  3001               	movlw	1	; select bank2/3
 11207  0660  0087               	movwf	7
 11208  0661  3001               	movlw	1	; select bank2/3
 11209  0662  3F53               	moviw [19]fsr1
 11210  0663  0022               	movlb	2	; select bank2
 11211  0664  00B3               	movwf	(_RF_Data^(0+256)+19)
 11212                           
 11213                           ;RF_Control_B1.c: 238: RF_Data[20] = 210;
 11214  0665  30D2               	movlw	210
 11215  0666  0020               	movlb	0	; select bank0
 11216  0667  00A0               	movwf	??_setTxData
 11217  0668  0820               	movf	??_setTxData,w
 11218  0669  0022               	movlb	2	; select bank2
 11219  066A  00B4               	movwf	(_RF_Data^(0+256)+20)
 11220  066B  0008               	return
 11221  066C                     __end_of_setTxData:	
 11222                           
 11223                           	psect	text65
 11224  0BD3                     __ptext65:	
 11225 ;; *************** function _setRF_DimmerLights *****************
 11226 ;; Defined at:
 11227 ;;		line 542 in file "../src/RF_Control_B1.c"
 11228 ;; Parameters:    Size  Location     Type
 11229 ;;  lights          1    wreg     unsigned char 
 11230 ;;  on              1    0[BANK0 ] unsigned char 
 11231 ;; Auto vars:     Size  Location     Type
 11232 ;;  lights          1    4[BANK0 ] unsigned char 
 11233 ;;  status          1    3[BANK0 ] unsigned char 
 11234 ;; Return value:  Size  Location     Type
 11235 ;;		None               void
 11236 ;; Registers used:
 11237 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11238 ;; Tracked objects:
 11239 ;;		On entry : 0/0
 11240 ;;		On exit  : 0/0
 11241 ;;		Unchanged: 0/0
 11242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11243 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11244 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11245 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11246 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11247 ;;Total ram usage:        5 bytes
 11248 ;; Hardware stack levels used:    1
 11249 ;; Hardware stack levels required when called:    5
 11250 ;; This function calls:
 11251 ;;		Nothing
 11252 ;; This function is called by:
 11253 ;;		_setDimmerLights
 11254 ;;		_setDimmerLights_Adj
 11255 ;;		_setRFSW_Control
 11256 ;; This function uses a non-reentrant model
 11257 ;;
 11258                           
 11259                           
 11260                           ;psect for function _setRF_DimmerLights
 11261  0BD3                     _setRF_DimmerLights:	
 11262                           
 11263                           ;incstack = 0
 11264                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 11265                           ;setRF_DimmerLights@lights stored from wreg
 11266  0BD3  0020               	movlb	0	; select bank0
 11267  0BD4  00A4               	movwf	setRF_DimmerLights@lights
 11268                           
 11269                           ;RF_Control_B1.c: 543: char status = 1;
 11270  0BD5  01A3               	clrf	setRF_DimmerLights@status
 11271  0BD6  0AA3               	incf	setRF_DimmerLights@status,f
 11272                           
 11273                           ;RF_Control_B1.c: 544: status <<= (lights - 1);
 11274  0BD7  0824               	movf	setRF_DimmerLights@lights,w
 11275  0BD8  3EFF               	addlw	-1
 11276  0BD9  0A89               	incf	9,f
 11277  0BDA  2BDD               	goto	u4530
 11278  0BDB                     u4535:	
 11279  0BDB  1003               	clrc
 11280  0BDC  0DA3               	rlf	setRF_DimmerLights@status,f
 11281  0BDD                     u4530:	
 11282  0BDD  3EFF               	addlw	-1
 11283  0BDE  1D03               	skipz
 11284  0BDF  2BDB               	goto	u4535
 11285                           
 11286                           ;RF_Control_B1.c: 545: product->Data[11]=lights;
 11287  0BE0  0824               	movf	setRF_DimmerLights@lights,w
 11288  0BE1  00A1               	movwf	??_setRF_DimmerLights
 11289  0BE2  086E               	movf	_product,w
 11290  0BE3  3E0B               	addlw	11
 11291  0BE4  0086               	movwf	6
 11292  0BE5  3001               	movlw	1	; select bank2/3
 11293  0BE6  0087               	movwf	7
 11294  0BE7  0821               	movf	??_setRF_DimmerLights,w
 11295  0BE8  0081               	movwf	1
 11296                           
 11297                           ;RF_Control_B1.c: 553: product->Data[9]=product->Data[20 + lights];
 11298  0BE9  0824               	movf	setRF_DimmerLights@lights,w
 11299  0BEA  3E14               	addlw	20
 11300  0BEB  076E               	addwf	_product,w
 11301  0BEC  00A1               	movwf	??_setRF_DimmerLights
 11302  0BED  0821               	movf	??_setRF_DimmerLights,w
 11303  0BEE  0086               	movwf	6
 11304  0BEF  3001               	movlw	1	; select bank2/3
 11305  0BF0  0087               	movwf	7
 11306  0BF1  0801               	movf	1,w
 11307  0BF2  00A2               	movwf	??_setRF_DimmerLights+1
 11308  0BF3  086E               	movf	_product,w
 11309  0BF4  3E09               	addlw	9
 11310  0BF5  0086               	movwf	6
 11311  0BF6  3001               	movlw	1	; select bank2/3
 11312  0BF7  0087               	movwf	7
 11313  0BF8  0822               	movf	??_setRF_DimmerLights+1,w
 11314  0BF9  0081               	movwf	1
 11315                           
 11316                           ;RF_Control_B1.c: 554: product->Data[17]=product->Data[26 + lights];
 11317  0BFA  0824               	movf	setRF_DimmerLights@lights,w
 11318  0BFB  3E1A               	addlw	26
 11319  0BFC  076E               	addwf	_product,w
 11320  0BFD  00A1               	movwf	??_setRF_DimmerLights
 11321  0BFE  0821               	movf	??_setRF_DimmerLights,w
 11322  0BFF  0086               	movwf	6
 11323  0C00  3001               	movlw	1	; select bank2/3
 11324  0C01  0087               	movwf	7
 11325  0C02  0801               	movf	1,w
 11326  0C03  00A2               	movwf	??_setRF_DimmerLights+1
 11327  0C04  086E               	movf	_product,w
 11328  0C05  3E11               	addlw	17
 11329  0C06  0086               	movwf	6
 11330  0C07  3001               	movlw	1	; select bank2/3
 11331  0C08  0087               	movwf	7
 11332  0C09  0822               	movf	??_setRF_DimmerLights+1,w
 11333  0C0A  0081               	movwf	1
 11334                           
 11335                           ;RF_Control_B1.c: 555: if (on == 1) {
 11336  0C0B  0820               	movf	setRF_DimmerLights@on,w
 11337  0C0C  3A01               	xorlw	1
 11338  0C0D  1D03               	skipz
 11339  0C0E  2C1F               	goto	l5647
 11340                           
 11341                           ;RF_Control_B1.c: 556: product->Data[15]=(product->Data[15] | status);
 11342  0C0F  086E               	movf	_product,w
 11343  0C10  3E0F               	addlw	15
 11344  0C11  0086               	movwf	6
 11345  0C12  3001               	movlw	1	; select bank2/3
 11346  0C13  0087               	movwf	7
 11347  0C14  0801               	movf	1,w
 11348  0C15  0423               	iorwf	setRF_DimmerLights@status,w
 11349  0C16  00A1               	movwf	??_setRF_DimmerLights
 11350  0C17  086E               	movf	_product,w
 11351  0C18  3E0F               	addlw	15
 11352  0C19  0086               	movwf	6
 11353  0C1A  3001               	movlw	1	; select bank2/3
 11354  0C1B  0087               	movwf	7
 11355  0C1C  0821               	movf	??_setRF_DimmerLights,w
 11356  0C1D  0081               	movwf	1
 11357                           
 11358                           ;RF_Control_B1.c: 557: } else {
 11359  0C1E  0008               	return
 11360  0C1F                     l5647:	
 11361                           
 11362                           ;RF_Control_B1.c: 558: product->Data[15]=(product->Data[15]&(~status));
 11363  0C1F  086E               	movf	_product,w
 11364  0C20  3E0F               	addlw	15
 11365  0C21  0086               	movwf	6
 11366  0C22  3001               	movlw	1	; select bank2/3
 11367  0C23  0087               	movwf	7
 11368  0C24  0923               	comf	setRF_DimmerLights@status,w
 11369  0C25  0501               	andwf	1,w
 11370  0C26  00A1               	movwf	??_setRF_DimmerLights
 11371  0C27  086E               	movf	_product,w
 11372  0C28  3E0F               	addlw	15
 11373  0C29  0086               	movwf	6
 11374  0C2A  3001               	movlw	1	; select bank2/3
 11375  0C2B  0087               	movwf	7
 11376  0C2C  0821               	movf	??_setRF_DimmerLights,w
 11377  0C2D  0081               	movwf	1
 11378  0C2E  0008               	return
 11379  0C2F                     __end_of_setRF_DimmerLights:	
 11380                           
 11381                           	psect	text66
 11382  0CEC                     __ptext66:	
 11383 ;; *************** function _setPercentValue *****************
 11384 ;; Defined at:
 11385 ;;		line 886 in file "../src/Dimmer_B1.c"
 11386 ;; Parameters:    Size  Location     Type
 11387 ;;  value           1    wreg     unsigned char 
 11388 ;; Auto vars:     Size  Location     Type
 11389 ;;  value           1   62[BANK0 ] unsigned char 
 11390 ;;  i               3   63[BANK0 ] float 
 11391 ;; Return value:  Size  Location     Type
 11392 ;;                  1    wreg      unsigned char 
 11393 ;; Registers used:
 11394 ;;		wreg, status,2, status,0, pclath, cstack
 11395 ;; Tracked objects:
 11396 ;;		On entry : 0/0
 11397 ;;		On exit  : 0/0
 11398 ;;		Unchanged: 0/0
 11399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11401 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11402 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11403 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11404 ;;Total ram usage:        6 bytes
 11405 ;; Hardware stack levels used:    1
 11406 ;; Hardware stack levels required when called:    7
 11407 ;; This function calls:
 11408 ;;		___awtoft
 11409 ;;		___ftadd
 11410 ;;		___ftdiv
 11411 ;;		___ftneg
 11412 ;;		___fttol
 11413 ;; This function is called by:
 11414 ;;		_setDimmerLights
 11415 ;;		_setDimmerLights_Adj
 11416 ;;		_Flash_Memory_Initialization
 11417 ;; This function uses a non-reentrant model
 11418 ;;
 11419                           
 11420                           
 11421                           ;psect for function _setPercentValue
 11422  0CEC                     _setPercentValue:	
 11423                           
 11424                           ;incstack = 0
 11425                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 11426                           ;setPercentValue@value stored from wreg
 11427  0CEC  0020               	movlb	0	; select bank0
 11428  0CED  00DE               	movwf	setPercentValue@value
 11429                           
 11430                           ;Dimmer_B1.c: 894: float i = ((char)(80*0.8)) - ((char)(15*0.8));
 11431  0CEE  3000               	movlw	0
 11432  0CEF  00DF               	movwf	setPercentValue@i
 11433  0CF0  3050               	movlw	80
 11434  0CF1  00E0               	movwf	setPercentValue@i+1
 11435  0CF2  3042               	movlw	66
 11436  0CF3  00E1               	movwf	setPercentValue@i+2
 11437                           
 11438                           ;Dimmer_B1.c: 895: i /= 100;
 11439  0CF4  3000               	movlw	0
 11440  0CF5  00AE               	movwf	___ftdiv@f2
 11441  0CF6  30C8               	movlw	200
 11442  0CF7  00AF               	movwf	___ftdiv@f2+1
 11443  0CF8  3042               	movlw	66
 11444  0CF9  00B0               	movwf	___ftdiv@f2+2
 11445  0CFA  085F               	movf	setPercentValue@i,w
 11446  0CFB  00B1               	movwf	___ftdiv@f1
 11447  0CFC  0860               	movf	setPercentValue@i+1,w
 11448  0CFD  00B2               	movwf	___ftdiv@f1+1
 11449  0CFE  0861               	movf	setPercentValue@i+2,w
 11450  0CFF  00B3               	movwf	___ftdiv@f1+2
 11451  0D00  3187  2720  318C   	fcall	___ftdiv
 11452  0D03  0020               	movlb	0	; select bank0
 11453  0D04  082E               	movf	?___ftdiv,w
 11454  0D05  00DF               	movwf	setPercentValue@i
 11455  0D06  082F               	movf	?___ftdiv+1,w
 11456  0D07  00E0               	movwf	setPercentValue@i+1
 11457  0D08  0830               	movf	?___ftdiv+2,w
 11458  0D09  00E1               	movwf	setPercentValue@i+2
 11459                           
 11460                           ;Dimmer_B1.c: 897: return (char) (100 - ((((char)(80*0.8)) - value) / i));
 11461  0D0A  085E               	movf	setPercentValue@value,w
 11462  0D0B  00DC               	movwf	??_setPercentValue
 11463  0D0C  01DD               	clrf	??_setPercentValue+1
 11464  0D0D  09DC               	comf	??_setPercentValue,f
 11465  0D0E  09DD               	comf	??_setPercentValue+1,f
 11466  0D0F  0ADC               	incf	??_setPercentValue,f
 11467  0D10  1903               	skipnz
 11468  0D11  0ADD               	incf	??_setPercentValue+1,f
 11469  0D12  085C               	movf	??_setPercentValue,w
 11470  0D13  3E40               	addlw	64
 11471  0D14  00A8               	movwf	___awtoft@c
 11472  0D15  3000               	movlw	0
 11473  0D16  3D5D               	addwfc	??_setPercentValue+1,w
 11474  0D17  00A9               	movwf	___awtoft@c+1
 11475  0D18  3193  238B  318C   	fcall	___awtoft
 11476  0D1B  0020               	movlb	0	; select bank0
 11477  0D1C  0828               	movf	?___awtoft,w
 11478  0D1D  00B1               	movwf	___ftdiv@f1
 11479  0D1E  0829               	movf	?___awtoft+1,w
 11480  0D1F  00B2               	movwf	___ftdiv@f1+1
 11481  0D20  082A               	movf	?___awtoft+2,w
 11482  0D21  00B3               	movwf	___ftdiv@f1+2
 11483  0D22  085F               	movf	setPercentValue@i,w
 11484  0D23  00AE               	movwf	___ftdiv@f2
 11485  0D24  0860               	movf	setPercentValue@i+1,w
 11486  0D25  00AF               	movwf	___ftdiv@f2+1
 11487  0D26  0861               	movf	setPercentValue@i+2,w
 11488  0D27  00B0               	movwf	___ftdiv@f2+2
 11489  0D28  3187  2720  318C   	fcall	___ftdiv
 11490  0D2B  0020               	movlb	0	; select bank0
 11491  0D2C  082E               	movf	?___ftdiv,w
 11492  0D2D  00BE               	movwf	___ftneg@f1
 11493  0D2E  082F               	movf	?___ftdiv+1,w
 11494  0D2F  00BF               	movwf	___ftneg@f1+1
 11495  0D30  0830               	movf	?___ftdiv+2,w
 11496  0D31  00C0               	movwf	___ftneg@f1+2
 11497  0D32  319F  2777  318C   	fcall	___ftneg
 11498  0D35  0020               	movlb	0	; select bank0
 11499  0D36  083E               	movf	?___ftneg,w
 11500  0D37  00C4               	movwf	___ftadd@f2
 11501  0D38  083F               	movf	?___ftneg+1,w
 11502  0D39  00C5               	movwf	___ftadd@f2+1
 11503  0D3A  0840               	movf	?___ftneg+2,w
 11504  0D3B  00C6               	movwf	___ftadd@f2+2
 11505  0D3C  3000               	movlw	0
 11506  0D3D  00C1               	movwf	___ftadd@f1
 11507  0D3E  30C8               	movlw	200
 11508  0D3F  00C2               	movwf	___ftadd@f1+1
 11509  0D40  3042               	movlw	66
 11510  0D41  00C3               	movwf	___ftadd@f1+2
 11511  0D42  3182  22ED  318C   	fcall	___ftadd
 11512  0D45  0020               	movlb	0	; select bank0
 11513  0D46  0841               	movf	?___ftadd,w
 11514  0D47  00CE               	movwf	___fttol@f1
 11515  0D48  0842               	movf	?___ftadd+1,w
 11516  0D49  00CF               	movwf	___fttol@f1+1
 11517  0D4A  0843               	movf	?___ftadd+2,w
 11518  0D4B  00D0               	movwf	___fttol@f1+2
 11519  0D4C  318F  2779         	fcall	___fttol
 11520  0D4E  0020               	movlb	0	; select bank0
 11521  0D4F  084E               	movf	?___fttol,w
 11522  0D50  0008               	return
 11523  0D51                     __end_of_setPercentValue:	
 11524                           
 11525                           	psect	text67
 11526  0F79                     __ptext67:	
 11527 ;; *************** function ___fttol *****************
 11528 ;; Defined at:
 11529 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 11530 ;; Parameters:    Size  Location     Type
 11531 ;;  f1              3   46[BANK0 ] float 
 11532 ;; Auto vars:     Size  Location     Type
 11533 ;;  lval            4   55[BANK0 ] unsigned long 
 11534 ;;  exp1            1   59[BANK0 ] unsigned char 
 11535 ;;  sign1           1   54[BANK0 ] unsigned char 
 11536 ;; Return value:  Size  Location     Type
 11537 ;;                  4   46[BANK0 ] long 
 11538 ;; Registers used:
 11539 ;;		wreg, status,2, status,0
 11540 ;; Tracked objects:
 11541 ;;		On entry : 0/0
 11542 ;;		On exit  : 0/0
 11543 ;;		Unchanged: 0/0
 11544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11545 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11546 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11547 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11548 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11549 ;;Total ram usage:       14 bytes
 11550 ;; Hardware stack levels used:    1
 11551 ;; Hardware stack levels required when called:    5
 11552 ;; This function calls:
 11553 ;;		Nothing
 11554 ;; This function is called by:
 11555 ;;		_getPercentValue
 11556 ;;		_setPercentValue
 11557 ;; This function uses a non-reentrant model
 11558 ;;
 11559                           
 11560                           
 11561                           ;psect for function ___fttol
 11562  0F79                     ___fttol:	
 11563                           
 11564                           ;incstack = 0
 11565                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 11566  0F79  0020               	movlb	0	; select bank0
 11567  0F7A  084E               	movf	___fttol@f1,w
 11568  0F7B  00D2               	movwf	??___fttol
 11569  0F7C  084F               	movf	___fttol@f1+1,w
 11570  0F7D  00D3               	movwf	??___fttol+1
 11571  0F7E  0850               	movf	___fttol@f1+2,w
 11572  0F7F  00D4               	movwf	??___fttol+2
 11573  0F80  1003               	clrc
 11574  0F81  0D53               	rlf	??___fttol+1,w
 11575  0F82  0D54               	rlf	??___fttol+2,w
 11576  0F83  00D5               	movwf	??___fttol+3
 11577  0F84  0855               	movf	??___fttol+3,w
 11578  0F85  00DB               	movwf	___fttol@exp1
 11579  0F86  08DB               	movf	___fttol@exp1,f
 11580  0F87  1D03               	skipz
 11581  0F88  2F92               	goto	l5373
 11582  0F89  3000               	movlw	0
 11583  0F8A  00D1               	movwf	?___fttol+3
 11584  0F8B  3000               	movlw	0
 11585  0F8C  00D0               	movwf	?___fttol+2
 11586  0F8D  3000               	movlw	0
 11587  0F8E  00CF               	movwf	?___fttol+1
 11588  0F8F  3000               	movlw	0
 11589  0F90  00CE               	movwf	?___fttol
 11590  0F91  0008               	return
 11591  0F92                     l5373:	
 11592  0F92  084E               	movf	___fttol@f1,w
 11593  0F93  00D2               	movwf	??___fttol
 11594  0F94  084F               	movf	___fttol@f1+1,w
 11595  0F95  00D3               	movwf	??___fttol+1
 11596  0F96  0850               	movf	___fttol@f1+2,w
 11597  0F97  00D4               	movwf	??___fttol+2
 11598  0F98  3017               	movlw	23
 11599  0F99                     u4125:	
 11600  0F99  36D4               	lsrf	??___fttol+2,f
 11601  0F9A  0CD3               	rrf	??___fttol+1,f
 11602  0F9B  0CD2               	rrf	??___fttol,f
 11603  0F9C  0B89               	decfsz	9,f
 11604  0F9D  2F99               	goto	u4125
 11605  0F9E  0852               	movf	??___fttol,w
 11606  0F9F  00D5               	movwf	??___fttol+3
 11607  0FA0  0855               	movf	??___fttol+3,w
 11608  0FA1  00D6               	movwf	___fttol@sign1
 11609  0FA2  17CF               	bsf	___fttol@f1+1,7
 11610  0FA3  30FF               	movlw	255
 11611  0FA4  05CE               	andwf	___fttol@f1,f
 11612  0FA5  30FF               	movlw	255
 11613  0FA6  05CF               	andwf	___fttol@f1+1,f
 11614  0FA7  3000               	movlw	0
 11615  0FA8  05D0               	andwf	___fttol@f1+2,f
 11616  0FA9  084E               	movf	___fttol@f1,w
 11617  0FAA  00D7               	movwf	___fttol@lval
 11618  0FAB  084F               	movf	___fttol@f1+1,w
 11619  0FAC  00D8               	movwf	___fttol@lval+1
 11620  0FAD  0850               	movf	___fttol@f1+2,w
 11621  0FAE  00D9               	movwf	___fttol@lval+2
 11622  0FAF  01DA               	clrf	___fttol@lval+3
 11623  0FB0  308E               	movlw	142
 11624  0FB1  02DB               	subwf	___fttol@exp1,f
 11625  0FB2  1FDB               	btfss	___fttol@exp1,7
 11626  0FB3  2FD0               	goto	l5393
 11627  0FB4  085B               	movf	___fttol@exp1,w
 11628  0FB5  3A80               	xorlw	128
 11629  0FB6  3E8F               	addlw	143
 11630  0FB7  1803               	skipnc
 11631  0FB8  2FC2               	goto	l5391
 11632  0FB9  3000               	movlw	0
 11633  0FBA  00D1               	movwf	?___fttol+3
 11634  0FBB  3000               	movlw	0
 11635  0FBC  00D0               	movwf	?___fttol+2
 11636  0FBD  3000               	movlw	0
 11637  0FBE  00CF               	movwf	?___fttol+1
 11638  0FBF  3000               	movlw	0
 11639  0FC0  00CE               	movwf	?___fttol
 11640  0FC1  0008               	return
 11641  0FC2                     l5391:	
 11642  0FC2  3001               	movlw	1
 11643  0FC3                     u4155:	
 11644  0FC3  36DA               	lsrf	___fttol@lval+3,f
 11645  0FC4  0CD9               	rrf	___fttol@lval+2,f
 11646  0FC5  0CD8               	rrf	___fttol@lval+1,f
 11647  0FC6  0CD7               	rrf	___fttol@lval,f
 11648  0FC7  0B89               	decfsz	9,f
 11649  0FC8  2FC3               	goto	u4155
 11650  0FC9  3001               	movlw	1
 11651  0FCA  00D2               	movwf	??___fttol
 11652  0FCB  0852               	movf	??___fttol,w
 11653  0FCC  07DB               	addwf	___fttol@exp1,f
 11654  0FCD  1903               	btfsc	3,2
 11655  0FCE  2FE9               	goto	l5403
 11656  0FCF  2FC2               	goto	l5391
 11657  0FD0                     l5393:	
 11658  0FD0  3018               	movlw	24
 11659  0FD1  025B               	subwf	___fttol@exp1,w
 11660  0FD2  1C03               	skipc
 11661  0FD3  2FE6               	goto	l5401
 11662  0FD4  3000               	movlw	0
 11663  0FD5  00D1               	movwf	?___fttol+3
 11664  0FD6  3000               	movlw	0
 11665  0FD7  00D0               	movwf	?___fttol+2
 11666  0FD8  3000               	movlw	0
 11667  0FD9  00CF               	movwf	?___fttol+1
 11668  0FDA  3000               	movlw	0
 11669  0FDB  00CE               	movwf	?___fttol
 11670  0FDC  0008               	return
 11671  0FDD                     l5399:	
 11672  0FDD  3001               	movlw	1
 11673  0FDE                     u4185:	
 11674  0FDE  35D7               	lslf	___fttol@lval,f
 11675  0FDF  0DD8               	rlf	___fttol@lval+1,f
 11676  0FE0  0DD9               	rlf	___fttol@lval+2,f
 11677  0FE1  0DDA               	rlf	___fttol@lval+3,f
 11678  0FE2  0B89               	decfsz	9,f
 11679  0FE3  2FDE               	goto	u4185
 11680  0FE4  3001               	movlw	1
 11681  0FE5  02DB               	subwf	___fttol@exp1,f
 11682  0FE6                     l5401:	
 11683  0FE6  08DB               	movf	___fttol@exp1,f
 11684  0FE7  1D03               	skipz
 11685  0FE8  2FDD               	goto	l5399
 11686  0FE9                     l5403:	
 11687  0FE9  0856               	movf	___fttol@sign1,w
 11688  0FEA  1903               	btfsc	3,2
 11689  0FEB  2FF7               	goto	l5407
 11690  0FEC  09D7               	comf	___fttol@lval,f
 11691  0FED  09D8               	comf	___fttol@lval+1,f
 11692  0FEE  09D9               	comf	___fttol@lval+2,f
 11693  0FEF  09DA               	comf	___fttol@lval+3,f
 11694  0FF0  0AD7               	incf	___fttol@lval,f
 11695  0FF1  1903               	skipnz
 11696  0FF2  0AD8               	incf	___fttol@lval+1,f
 11697  0FF3  1903               	skipnz
 11698  0FF4  0AD9               	incf	___fttol@lval+2,f
 11699  0FF5  1903               	skipnz
 11700  0FF6  0ADA               	incf	___fttol@lval+3,f
 11701  0FF7                     l5407:	
 11702  0FF7  085A               	movf	___fttol@lval+3,w
 11703  0FF8  00D1               	movwf	?___fttol+3
 11704  0FF9  0859               	movf	___fttol@lval+2,w
 11705  0FFA  00D0               	movwf	?___fttol+2
 11706  0FFB  0858               	movf	___fttol@lval+1,w
 11707  0FFC  00CF               	movwf	?___fttol+1
 11708  0FFD  0857               	movf	___fttol@lval,w
 11709  0FFE  00CE               	movwf	?___fttol
 11710  0FFF  0008               	return
 11711  1000                     __end_of___fttol:	
 11712                           
 11713                           	psect	text68
 11714  1F77                     __ptext68:	
 11715 ;; *************** function ___ftneg *****************
 11716 ;; Defined at:
 11717 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 11718 ;; Parameters:    Size  Location     Type
 11719 ;;  f1              3   30[BANK0 ] float 
 11720 ;; Auto vars:     Size  Location     Type
 11721 ;;		None
 11722 ;; Return value:  Size  Location     Type
 11723 ;;                  3   30[BANK0 ] float 
 11724 ;; Registers used:
 11725 ;;		wreg
 11726 ;; Tracked objects:
 11727 ;;		On entry : 0/0
 11728 ;;		On exit  : 0/0
 11729 ;;		Unchanged: 0/0
 11730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11731 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11734 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11735 ;;Total ram usage:        3 bytes
 11736 ;; Hardware stack levels used:    1
 11737 ;; Hardware stack levels required when called:    5
 11738 ;; This function calls:
 11739 ;;		Nothing
 11740 ;; This function is called by:
 11741 ;;		_setPercentValue
 11742 ;; This function uses a non-reentrant model
 11743 ;;
 11744                           
 11745                           
 11746                           ;psect for function ___ftneg
 11747  1F77                     ___ftneg:	
 11748                           
 11749                           ;incstack = 0
 11750                           ; Regs used in ___ftneg: [wreg]
 11751  1F77  0020               	movlb	0	; select bank0
 11752  1F78  0840               	movf	___ftneg@f1+2,w
 11753  1F79  043F               	iorwf	___ftneg@f1+1,w
 11754  1F7A  043E               	iorwf	___ftneg@f1,w
 11755  1F7B  1903               	skipnz
 11756  1F7C  0008               	return
 11757  1F7D  3080               	movlw	128
 11758  1F7E  06C0               	xorwf	___ftneg@f1+2,f
 11759  1F7F  0008               	return
 11760  1F80                     __end_of___ftneg:	
 11761                           
 11762                           	psect	text69
 11763  0720                     __ptext69:	
 11764 ;; *************** function ___ftdiv *****************
 11765 ;; Defined at:
 11766 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 11767 ;; Parameters:    Size  Location     Type
 11768 ;;  f2              3   14[BANK0 ] float 
 11769 ;;  f1              3   17[BANK0 ] float 
 11770 ;; Auto vars:     Size  Location     Type
 11771 ;;  f3              3   25[BANK0 ] float 
 11772 ;;  sign            1   29[BANK0 ] unsigned char 
 11773 ;;  exp             1   28[BANK0 ] unsigned char 
 11774 ;;  cntr            1   24[BANK0 ] unsigned char 
 11775 ;; Return value:  Size  Location     Type
 11776 ;;                  3   14[BANK0 ] float 
 11777 ;; Registers used:
 11778 ;;		wreg, status,2, status,0, pclath, cstack
 11779 ;; Tracked objects:
 11780 ;;		On entry : 0/0
 11781 ;;		On exit  : 0/0
 11782 ;;		Unchanged: 0/0
 11783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11784 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11785 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11786 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11787 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11788 ;;Total ram usage:       16 bytes
 11789 ;; Hardware stack levels used:    1
 11790 ;; Hardware stack levels required when called:    6
 11791 ;; This function calls:
 11792 ;;		___ftpack
 11793 ;; This function is called by:
 11794 ;;		_getPercentValue
 11795 ;;		_setPercentValue
 11796 ;; This function uses a non-reentrant model
 11797 ;;
 11798                           
 11799                           
 11800                           ;psect for function ___ftdiv
 11801  0720                     ___ftdiv:	
 11802                           
 11803                           ;incstack = 0
 11804                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 11805  0720  0020               	movlb	0	; select bank0
 11806  0721  0831               	movf	___ftdiv@f1,w
 11807  0722  00B4               	movwf	??___ftdiv
 11808  0723  0832               	movf	___ftdiv@f1+1,w
 11809  0724  00B5               	movwf	??___ftdiv+1
 11810  0725  0833               	movf	___ftdiv@f1+2,w
 11811  0726  00B6               	movwf	??___ftdiv+2
 11812  0727  1003               	clrc
 11813  0728  0D35               	rlf	??___ftdiv+1,w
 11814  0729  0D36               	rlf	??___ftdiv+2,w
 11815  072A  00B7               	movwf	??___ftdiv+3
 11816  072B  0837               	movf	??___ftdiv+3,w
 11817  072C  00BC               	movwf	___ftdiv@exp
 11818  072D  08BC               	movf	___ftdiv@exp,f
 11819  072E  1D03               	skipz
 11820  072F  2F37               	goto	l5281
 11821  0730  3000               	movlw	0
 11822  0731  00AE               	movwf	?___ftdiv
 11823  0732  3000               	movlw	0
 11824  0733  00AF               	movwf	?___ftdiv+1
 11825  0734  3000               	movlw	0
 11826  0735  00B0               	movwf	?___ftdiv+2
 11827  0736  0008               	return
 11828  0737                     l5281:	
 11829  0737  082E               	movf	___ftdiv@f2,w
 11830  0738  00B4               	movwf	??___ftdiv
 11831  0739  082F               	movf	___ftdiv@f2+1,w
 11832  073A  00B5               	movwf	??___ftdiv+1
 11833  073B  0830               	movf	___ftdiv@f2+2,w
 11834  073C  00B6               	movwf	??___ftdiv+2
 11835  073D  1003               	clrc
 11836  073E  0D35               	rlf	??___ftdiv+1,w
 11837  073F  0D36               	rlf	??___ftdiv+2,w
 11838  0740  00B7               	movwf	??___ftdiv+3
 11839  0741  0837               	movf	??___ftdiv+3,w
 11840  0742  00BD               	movwf	___ftdiv@sign
 11841  0743  08BD               	movf	___ftdiv@sign,f
 11842  0744  1D03               	skipz
 11843  0745  2F4D               	goto	l5287
 11844  0746  3000               	movlw	0
 11845  0747  00AE               	movwf	?___ftdiv
 11846  0748  3000               	movlw	0
 11847  0749  00AF               	movwf	?___ftdiv+1
 11848  074A  3000               	movlw	0
 11849  074B  00B0               	movwf	?___ftdiv+2
 11850  074C  0008               	return
 11851  074D                     l5287:	
 11852  074D  3000               	movlw	0
 11853  074E  00B9               	movwf	___ftdiv@f3
 11854  074F  3000               	movlw	0
 11855  0750  00BA               	movwf	___ftdiv@f3+1
 11856  0751  3000               	movlw	0
 11857  0752  00BB               	movwf	___ftdiv@f3+2
 11858  0753  3089               	movlw	137
 11859  0754  073D               	addwf	___ftdiv@sign,w
 11860  0755  00B4               	movwf	??___ftdiv
 11861  0756  0834               	movf	??___ftdiv,w
 11862  0757  02BC               	subwf	___ftdiv@exp,f
 11863  0758  0831               	movf	___ftdiv@f1,w
 11864  0759  00B4               	movwf	??___ftdiv
 11865  075A  0832               	movf	___ftdiv@f1+1,w
 11866  075B  00B5               	movwf	??___ftdiv+1
 11867  075C  0833               	movf	___ftdiv@f1+2,w
 11868  075D  00B6               	movwf	??___ftdiv+2
 11869  075E  3010               	movlw	16
 11870  075F                     u3935:	
 11871  075F  36B6               	lsrf	??___ftdiv+2,f
 11872  0760  0CB5               	rrf	??___ftdiv+1,f
 11873  0761  0CB4               	rrf	??___ftdiv,f
 11874  0762  0B89               	decfsz	9,f
 11875  0763  2F5F               	goto	u3935
 11876  0764  0834               	movf	??___ftdiv,w
 11877  0765  00B7               	movwf	??___ftdiv+3
 11878  0766  0837               	movf	??___ftdiv+3,w
 11879  0767  00BD               	movwf	___ftdiv@sign
 11880  0768  082E               	movf	___ftdiv@f2,w
 11881  0769  00B4               	movwf	??___ftdiv
 11882  076A  082F               	movf	___ftdiv@f2+1,w
 11883  076B  00B5               	movwf	??___ftdiv+1
 11884  076C  0830               	movf	___ftdiv@f2+2,w
 11885  076D  00B6               	movwf	??___ftdiv+2
 11886  076E  3010               	movlw	16
 11887  076F                     u3945:	
 11888  076F  36B6               	lsrf	??___ftdiv+2,f
 11889  0770  0CB5               	rrf	??___ftdiv+1,f
 11890  0771  0CB4               	rrf	??___ftdiv,f
 11891  0772  0B89               	decfsz	9,f
 11892  0773  2F6F               	goto	u3945
 11893  0774  0834               	movf	??___ftdiv,w
 11894  0775  00B7               	movwf	??___ftdiv+3
 11895  0776  0837               	movf	??___ftdiv+3,w
 11896  0777  06BD               	xorwf	___ftdiv@sign,f
 11897  0778  3080               	movlw	128
 11898  0779  00B4               	movwf	??___ftdiv
 11899  077A  0834               	movf	??___ftdiv,w
 11900  077B  05BD               	andwf	___ftdiv@sign,f
 11901  077C  17B2               	bsf	___ftdiv@f1+1,7
 11902  077D  30FF               	movlw	255
 11903  077E  05B1               	andwf	___ftdiv@f1,f
 11904  077F  30FF               	movlw	255
 11905  0780  05B2               	andwf	___ftdiv@f1+1,f
 11906  0781  3000               	movlw	0
 11907  0782  05B3               	andwf	___ftdiv@f1+2,f
 11908  0783  17AF               	bsf	___ftdiv@f2+1,7
 11909  0784  30FF               	movlw	255
 11910  0785  05AE               	andwf	___ftdiv@f2,f
 11911  0786  30FF               	movlw	255
 11912  0787  05AF               	andwf	___ftdiv@f2+1,f
 11913  0788  3000               	movlw	0
 11914  0789  05B0               	andwf	___ftdiv@f2+2,f
 11915  078A  3018               	movlw	24
 11916  078B  00B4               	movwf	??___ftdiv
 11917  078C  0834               	movf	??___ftdiv,w
 11918  078D  00B8               	movwf	___ftdiv@cntr
 11919  078E                     l5301:	
 11920  078E  3001               	movlw	1
 11921  078F                     u3955:	
 11922  078F  35B9               	lslf	___ftdiv@f3,f
 11923  0790  0DBA               	rlf	___ftdiv@f3+1,f
 11924  0791  0DBB               	rlf	___ftdiv@f3+2,f
 11925  0792  0B89               	decfsz	9,f
 11926  0793  2F8F               	goto	u3955
 11927  0794  0830               	movf	___ftdiv@f2+2,w
 11928  0795  0233               	subwf	___ftdiv@f1+2,w
 11929  0796  1D03               	skipz
 11930  0797  2F9E               	goto	u3965
 11931  0798  082F               	movf	___ftdiv@f2+1,w
 11932  0799  0232               	subwf	___ftdiv@f1+1,w
 11933  079A  1D03               	skipz
 11934  079B  2F9E               	goto	u3965
 11935  079C  082E               	movf	___ftdiv@f2,w
 11936  079D  0231               	subwf	___ftdiv@f1,w
 11937  079E                     u3965:	
 11938  079E  1C03               	skipc
 11939  079F  2FA7               	goto	l5309
 11940  07A0  082E               	movf	___ftdiv@f2,w
 11941  07A1  02B1               	subwf	___ftdiv@f1,f
 11942  07A2  082F               	movf	___ftdiv@f2+1,w
 11943  07A3  3BB2               	subwfb	___ftdiv@f1+1,f
 11944  07A4  0830               	movf	___ftdiv@f2+2,w
 11945  07A5  3BB3               	subwfb	___ftdiv@f1+2,f
 11946  07A6  1439               	bsf	___ftdiv@f3,0
 11947  07A7                     l5309:	
 11948  07A7  3001               	movlw	1
 11949  07A8                     u3975:	
 11950  07A8  35B1               	lslf	___ftdiv@f1,f
 11951  07A9  0DB2               	rlf	___ftdiv@f1+1,f
 11952  07AA  0DB3               	rlf	___ftdiv@f1+2,f
 11953  07AB  0B89               	decfsz	9,f
 11954  07AC  2FA8               	goto	u3975
 11955  07AD  3001               	movlw	1
 11956  07AE  02B8               	subwf	___ftdiv@cntr,f
 11957  07AF  1D03               	btfss	3,2
 11958  07B0  2F8E               	goto	l5301
 11959  07B1  0839               	movf	___ftdiv@f3,w
 11960  07B2  00A0               	movwf	___ftpack@arg
 11961  07B3  083A               	movf	___ftdiv@f3+1,w
 11962  07B4  00A1               	movwf	___ftpack@arg+1
 11963  07B5  083B               	movf	___ftdiv@f3+2,w
 11964  07B6  00A2               	movwf	___ftpack@arg+2
 11965  07B7  083C               	movf	___ftdiv@exp,w
 11966  07B8  00B4               	movwf	??___ftdiv
 11967  07B9  0834               	movf	??___ftdiv,w
 11968  07BA  00A3               	movwf	___ftpack@exp
 11969  07BB  083D               	movf	___ftdiv@sign,w
 11970  07BC  00B5               	movwf	??___ftdiv+1
 11971  07BD  0835               	movf	??___ftdiv+1,w
 11972  07BE  00A4               	movwf	___ftpack@sign
 11973  07BF  318C  248B         	fcall	___ftpack
 11974  07C1  0020               	movlb	0	; select bank0
 11975  07C2  0820               	movf	?___ftpack,w
 11976  07C3  00AE               	movwf	?___ftdiv
 11977  07C4  0821               	movf	?___ftpack+1,w
 11978  07C5  00AF               	movwf	?___ftdiv+1
 11979  07C6  0822               	movf	?___ftpack+2,w
 11980  07C7  00B0               	movwf	?___ftdiv+2
 11981  07C8  0008               	return
 11982  07C9                     __end_of___ftdiv:	
 11983                           
 11984                           	psect	text70
 11985  02ED                     __ptext70:	
 11986 ;; *************** function ___ftadd *****************
 11987 ;; Defined at:
 11988 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 11989 ;; Parameters:    Size  Location     Type
 11990 ;;  f1              3   33[BANK0 ] float 
 11991 ;;  f2              3   36[BANK0 ] float 
 11992 ;; Auto vars:     Size  Location     Type
 11993 ;;  exp1            1   45[BANK0 ] unsigned char 
 11994 ;;  exp2            1   44[BANK0 ] unsigned char 
 11995 ;;  sign            1   43[BANK0 ] unsigned char 
 11996 ;; Return value:  Size  Location     Type
 11997 ;;                  3   33[BANK0 ] float 
 11998 ;; Registers used:
 11999 ;;		wreg, status,2, status,0, pclath, cstack
 12000 ;; Tracked objects:
 12001 ;;		On entry : 0/0
 12002 ;;		On exit  : 0/0
 12003 ;;		Unchanged: 0/0
 12004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12005 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12006 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12007 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12008 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12009 ;;Total ram usage:       13 bytes
 12010 ;; Hardware stack levels used:    1
 12011 ;; Hardware stack levels required when called:    6
 12012 ;; This function calls:
 12013 ;;		___ftpack
 12014 ;; This function is called by:
 12015 ;;		_getPercentValue
 12016 ;;		_setPercentValue
 12017 ;; This function uses a non-reentrant model
 12018 ;;
 12019                           
 12020                           
 12021                           ;psect for function ___ftadd
 12022  02ED                     ___ftadd:	
 12023                           
 12024                           ;incstack = 0
 12025                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 12026  02ED  0020               	movlb	0	; select bank0
 12027  02EE  0841               	movf	___ftadd@f1,w
 12028  02EF  00C7               	movwf	??___ftadd
 12029  02F0  0842               	movf	___ftadd@f1+1,w
 12030  02F1  00C8               	movwf	??___ftadd+1
 12031  02F2  0843               	movf	___ftadd@f1+2,w
 12032  02F3  00C9               	movwf	??___ftadd+2
 12033  02F4  1003               	clrc
 12034  02F5  0D48               	rlf	??___ftadd+1,w
 12035  02F6  0D49               	rlf	??___ftadd+2,w
 12036  02F7  00CA               	movwf	??___ftadd+3
 12037  02F8  084A               	movf	??___ftadd+3,w
 12038  02F9  00CD               	movwf	___ftadd@exp1
 12039  02FA  0844               	movf	___ftadd@f2,w
 12040  02FB  00C7               	movwf	??___ftadd
 12041  02FC  0845               	movf	___ftadd@f2+1,w
 12042  02FD  00C8               	movwf	??___ftadd+1
 12043  02FE  0846               	movf	___ftadd@f2+2,w
 12044  02FF  00C9               	movwf	??___ftadd+2
 12045  0300  1003               	clrc
 12046  0301  0D48               	rlf	??___ftadd+1,w
 12047  0302  0D49               	rlf	??___ftadd+2,w
 12048  0303  00CA               	movwf	??___ftadd+3
 12049  0304  084A               	movf	??___ftadd+3,w
 12050  0305  00CC               	movwf	___ftadd@exp2
 12051  0306  084D               	movf	___ftadd@exp1,w
 12052  0307  1903               	btfsc	3,2
 12053  0308  2B15               	goto	l5211
 12054  0309  084C               	movf	___ftadd@exp2,w
 12055  030A  024D               	subwf	___ftadd@exp1,w
 12056  030B  1803               	skipnc
 12057  030C  2B1C               	goto	l5215
 12058  030D  034D               	decf	___ftadd@exp1,w
 12059  030E  3AFF               	xorlw	255
 12060  030F  074C               	addwf	___ftadd@exp2,w
 12061  0310  00C7               	movwf	??___ftadd
 12062  0311  3019               	movlw	25
 12063  0312  0247               	subwf	??___ftadd,w
 12064  0313  1C03               	skipc
 12065  0314  2B1C               	goto	l5215
 12066  0315                     l5211:	
 12067  0315  0844               	movf	___ftadd@f2,w
 12068  0316  00C1               	movwf	?___ftadd
 12069  0317  0845               	movf	___ftadd@f2+1,w
 12070  0318  00C2               	movwf	?___ftadd+1
 12071  0319  0846               	movf	___ftadd@f2+2,w
 12072  031A  00C3               	movwf	?___ftadd+2
 12073  031B  0008               	return
 12074  031C                     l5215:	
 12075  031C  084C               	movf	___ftadd@exp2,w
 12076  031D  1903               	btfsc	3,2
 12077  031E  0008               	return
 12078  031F  084D               	movf	___ftadd@exp1,w
 12079  0320  024C               	subwf	___ftadd@exp2,w
 12080  0321  1803               	skipnc
 12081  0322  2B2B               	goto	l5221
 12082  0323  034C               	decf	___ftadd@exp2,w
 12083  0324  3AFF               	xorlw	255
 12084  0325  074D               	addwf	___ftadd@exp1,w
 12085  0326  00C7               	movwf	??___ftadd
 12086  0327  3019               	movlw	25
 12087  0328  0247               	subwf	??___ftadd,w
 12088  0329  1803               	btfsc	3,0
 12089  032A  0008               	return
 12090  032B                     l5221:	
 12091  032B  3006               	movlw	6
 12092  032C  00C7               	movwf	??___ftadd
 12093  032D  0847               	movf	??___ftadd,w
 12094  032E  00CB               	movwf	___ftadd@sign
 12095  032F  1BC3               	btfsc	___ftadd@f1+2,7
 12096  0330  17CB               	bsf	___ftadd@sign,7
 12097  0331  1BC6               	btfsc	___ftadd@f2+2,7
 12098  0332  174B               	bsf	___ftadd@sign,6
 12099  0333  17C2               	bsf	___ftadd@f1+1,7
 12100  0334  30FF               	movlw	255
 12101  0335  05C1               	andwf	___ftadd@f1,f
 12102  0336  30FF               	movlw	255
 12103  0337  05C2               	andwf	___ftadd@f1+1,f
 12104  0338  3000               	movlw	0
 12105  0339  05C3               	andwf	___ftadd@f1+2,f
 12106  033A  17C5               	bsf	___ftadd@f2+1,7
 12107  033B  30FF               	movlw	255
 12108  033C  05C4               	andwf	___ftadd@f2,f
 12109  033D  30FF               	movlw	255
 12110  033E  05C5               	andwf	___ftadd@f2+1,f
 12111  033F  3000               	movlw	0
 12112  0340  05C6               	andwf	___ftadd@f2+2,f
 12113  0341  084C               	movf	___ftadd@exp2,w
 12114  0342  024D               	subwf	___ftadd@exp1,w
 12115  0343  1803               	skipnc
 12116  0344  2B67               	goto	l5243
 12117  0345                     l5233:	
 12118  0345  3001               	movlw	1
 12119  0346                     u3775:	
 12120  0346  35C4               	lslf	___ftadd@f2,f
 12121  0347  0DC5               	rlf	___ftadd@f2+1,f
 12122  0348  0DC6               	rlf	___ftadd@f2+2,f
 12123  0349  0B89               	decfsz	9,f
 12124  034A  2B46               	goto	u3775
 12125  034B  3001               	movlw	1
 12126  034C  02CC               	subwf	___ftadd@exp2,f
 12127  034D  084C               	movf	___ftadd@exp2,w
 12128  034E  064D               	xorwf	___ftadd@exp1,w
 12129  034F  1903               	skipnz
 12130  0350  2B62               	goto	l5241
 12131  0351  3001               	movlw	1
 12132  0352  02CB               	subwf	___ftadd@sign,f
 12133  0353  084B               	movf	___ftadd@sign,w
 12134  0354  3907               	andlw	7
 12135  0355  1903               	btfsc	3,2
 12136  0356  2B62               	goto	l5241
 12137  0357  2B45               	goto	l5233
 12138  0358                     l5239:	
 12139  0358  3001               	movlw	1
 12140  0359                     u3805:	
 12141  0359  36C3               	lsrf	___ftadd@f1+2,f
 12142  035A  0CC2               	rrf	___ftadd@f1+1,f
 12143  035B  0CC1               	rrf	___ftadd@f1,f
 12144  035C  0B89               	decfsz	9,f
 12145  035D  2B59               	goto	u3805
 12146  035E  3001               	movlw	1
 12147  035F  00C7               	movwf	??___ftadd
 12148  0360  0847               	movf	??___ftadd,w
 12149  0361  07CD               	addwf	___ftadd@exp1,f
 12150  0362                     l5241:	
 12151  0362  084D               	movf	___ftadd@exp1,w
 12152  0363  064C               	xorwf	___ftadd@exp2,w
 12153  0364  1903               	btfsc	3,2
 12154  0365  2B8C               	goto	l2704
 12155  0366  2B58               	goto	l5239
 12156  0367                     l5243:	
 12157  0367  084D               	movf	___ftadd@exp1,w
 12158  0368  024C               	subwf	___ftadd@exp2,w
 12159  0369  1803               	skipnc
 12160  036A  2B8C               	goto	l2704
 12161  036B                     l5245:	
 12162  036B  3001               	movlw	1
 12163  036C                     u3835:	
 12164  036C  35C1               	lslf	___ftadd@f1,f
 12165  036D  0DC2               	rlf	___ftadd@f1+1,f
 12166  036E  0DC3               	rlf	___ftadd@f1+2,f
 12167  036F  0B89               	decfsz	9,f
 12168  0370  2B6C               	goto	u3835
 12169  0371  3001               	movlw	1
 12170  0372  02CD               	subwf	___ftadd@exp1,f
 12171  0373  084C               	movf	___ftadd@exp2,w
 12172  0374  064D               	xorwf	___ftadd@exp1,w
 12173  0375  1903               	skipnz
 12174  0376  2B88               	goto	l5253
 12175  0377  3001               	movlw	1
 12176  0378  02CB               	subwf	___ftadd@sign,f
 12177  0379  084B               	movf	___ftadd@sign,w
 12178  037A  3907               	andlw	7
 12179  037B  1903               	btfsc	3,2
 12180  037C  2B88               	goto	l5253
 12181  037D  2B6B               	goto	l5245
 12182  037E                     l5251:	
 12183  037E  3001               	movlw	1
 12184  037F                     u3865:	
 12185  037F  36C6               	lsrf	___ftadd@f2+2,f
 12186  0380  0CC5               	rrf	___ftadd@f2+1,f
 12187  0381  0CC4               	rrf	___ftadd@f2,f
 12188  0382  0B89               	decfsz	9,f
 12189  0383  2B7F               	goto	u3865
 12190  0384  3001               	movlw	1
 12191  0385  00C7               	movwf	??___ftadd
 12192  0386  0847               	movf	??___ftadd,w
 12193  0387  07CC               	addwf	___ftadd@exp2,f
 12194  0388                     l5253:	
 12195  0388  084D               	movf	___ftadd@exp1,w
 12196  0389  064C               	xorwf	___ftadd@exp2,w
 12197  038A  1D03               	skipz
 12198  038B  2B7E               	goto	l5251
 12199  038C                     l2704:	
 12200  038C  1FCB               	btfss	___ftadd@sign,7
 12201  038D  2B9E               	goto	l5257
 12202  038E  30FF               	movlw	255
 12203  038F  06C1               	xorwf	___ftadd@f1,f
 12204  0390  30FF               	movlw	255
 12205  0391  06C2               	xorwf	___ftadd@f1+1,f
 12206  0392  30FF               	movlw	255
 12207  0393  06C3               	xorwf	___ftadd@f1+2,f
 12208  0394  3001               	movlw	1
 12209  0395  07C1               	addwf	___ftadd@f1,f
 12210  0396  3000               	movlw	0
 12211  0397  1803               	skipnc
 12212  0398  3001               	movlw	1
 12213  0399  07C2               	addwf	___ftadd@f1+1,f
 12214  039A  3000               	movlw	0
 12215  039B  1803               	skipnc
 12216  039C  3001               	movlw	1
 12217  039D  07C3               	addwf	___ftadd@f1+2,f
 12218  039E                     l5257:	
 12219  039E  1F4B               	btfss	___ftadd@sign,6
 12220  039F  2BB0               	goto	l5261
 12221  03A0  30FF               	movlw	255
 12222  03A1  06C4               	xorwf	___ftadd@f2,f
 12223  03A2  30FF               	movlw	255
 12224  03A3  06C5               	xorwf	___ftadd@f2+1,f
 12225  03A4  30FF               	movlw	255
 12226  03A5  06C6               	xorwf	___ftadd@f2+2,f
 12227  03A6  3001               	movlw	1
 12228  03A7  07C4               	addwf	___ftadd@f2,f
 12229  03A8  3000               	movlw	0
 12230  03A9  1803               	skipnc
 12231  03AA  3001               	movlw	1
 12232  03AB  07C5               	addwf	___ftadd@f2+1,f
 12233  03AC  3000               	movlw	0
 12234  03AD  1803               	skipnc
 12235  03AE  3001               	movlw	1
 12236  03AF  07C6               	addwf	___ftadd@f2+2,f
 12237  03B0                     l5261:	
 12238  03B0  01CB               	clrf	___ftadd@sign
 12239  03B1  0841               	movf	___ftadd@f1,w
 12240  03B2  07C4               	addwf	___ftadd@f2,f
 12241  03B3  0842               	movf	___ftadd@f1+1,w
 12242  03B4  3DC5               	addwfc	___ftadd@f2+1,f
 12243  03B5  0843               	movf	___ftadd@f1+2,w
 12244  03B6  3DC6               	addwfc	___ftadd@f2+2,f
 12245  03B7  1FC6               	btfss	___ftadd@f2+2,7
 12246  03B8  2BCB               	goto	l5271
 12247  03B9  30FF               	movlw	255
 12248  03BA  06C4               	xorwf	___ftadd@f2,f
 12249  03BB  30FF               	movlw	255
 12250  03BC  06C5               	xorwf	___ftadd@f2+1,f
 12251  03BD  30FF               	movlw	255
 12252  03BE  06C6               	xorwf	___ftadd@f2+2,f
 12253  03BF  3001               	movlw	1
 12254  03C0  07C4               	addwf	___ftadd@f2,f
 12255  03C1  3000               	movlw	0
 12256  03C2  1803               	skipnc
 12257  03C3  3001               	movlw	1
 12258  03C4  07C5               	addwf	___ftadd@f2+1,f
 12259  03C5  3000               	movlw	0
 12260  03C6  1803               	skipnc
 12261  03C7  3001               	movlw	1
 12262  03C8  07C6               	addwf	___ftadd@f2+2,f
 12263  03C9  01CB               	clrf	___ftadd@sign
 12264  03CA  0ACB               	incf	___ftadd@sign,f
 12265  03CB                     l5271:	
 12266  03CB  0844               	movf	___ftadd@f2,w
 12267  03CC  00A0               	movwf	___ftpack@arg
 12268  03CD  0845               	movf	___ftadd@f2+1,w
 12269  03CE  00A1               	movwf	___ftpack@arg+1
 12270  03CF  0846               	movf	___ftadd@f2+2,w
 12271  03D0  00A2               	movwf	___ftpack@arg+2
 12272  03D1  084D               	movf	___ftadd@exp1,w
 12273  03D2  00C7               	movwf	??___ftadd
 12274  03D3  0847               	movf	??___ftadd,w
 12275  03D4  00A3               	movwf	___ftpack@exp
 12276  03D5  084B               	movf	___ftadd@sign,w
 12277  03D6  00C8               	movwf	??___ftadd+1
 12278  03D7  0848               	movf	??___ftadd+1,w
 12279  03D8  00A4               	movwf	___ftpack@sign
 12280  03D9  318C  248B         	fcall	___ftpack
 12281  03DB  0020               	movlb	0	; select bank0
 12282  03DC  0820               	movf	?___ftpack,w
 12283  03DD  00C1               	movwf	?___ftadd
 12284  03DE  0821               	movf	?___ftpack+1,w
 12285  03DF  00C2               	movwf	?___ftadd+1
 12286  03E0  0822               	movf	?___ftpack+2,w
 12287  03E1  00C3               	movwf	?___ftadd+2
 12288  03E2  0008               	return
 12289  03E3                     __end_of___ftadd:	
 12290                           
 12291                           	psect	text71
 12292  138B                     __ptext71:	
 12293 ;; *************** function ___awtoft *****************
 12294 ;; Defined at:
 12295 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 12296 ;; Parameters:    Size  Location     Type
 12297 ;;  c               2    8[BANK0 ] int 
 12298 ;; Auto vars:     Size  Location     Type
 12299 ;;  sign            1   13[BANK0 ] unsigned char 
 12300 ;; Return value:  Size  Location     Type
 12301 ;;                  3    8[BANK0 ] float 
 12302 ;; Registers used:
 12303 ;;		wreg, status,2, status,0, pclath, cstack
 12304 ;; Tracked objects:
 12305 ;;		On entry : 0/0
 12306 ;;		On exit  : 0/0
 12307 ;;		Unchanged: 0/0
 12308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12309 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12310 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12311 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12312 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12313 ;;Total ram usage:        6 bytes
 12314 ;; Hardware stack levels used:    1
 12315 ;; Hardware stack levels required when called:    6
 12316 ;; This function calls:
 12317 ;;		___ftpack
 12318 ;; This function is called by:
 12319 ;;		_getPercentValue
 12320 ;;		_setPercentValue
 12321 ;; This function uses a non-reentrant model
 12322 ;;
 12323                           
 12324                           
 12325                           ;psect for function ___awtoft
 12326  138B                     ___awtoft:	
 12327                           
 12328                           ;incstack = 0
 12329                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 12330  138B  0020               	movlb	0	; select bank0
 12331  138C  01AD               	clrf	___awtoft@sign
 12332  138D  1FA9               	btfss	___awtoft@c+1,7
 12333  138E  2B96               	goto	l5199
 12334  138F  09A8               	comf	___awtoft@c,f
 12335  1390  09A9               	comf	___awtoft@c+1,f
 12336  1391  0AA8               	incf	___awtoft@c,f
 12337  1392  1903               	skipnz
 12338  1393  0AA9               	incf	___awtoft@c+1,f
 12339  1394  01AD               	clrf	___awtoft@sign
 12340  1395  0AAD               	incf	___awtoft@sign,f
 12341  1396                     l5199:	
 12342  1396  0828               	movf	___awtoft@c,w
 12343  1397  00A0               	movwf	___ftpack@arg
 12344  1398  0829               	movf	___awtoft@c+1,w
 12345  1399  00A1               	movwf	___ftpack@arg+1
 12346  139A  01A2               	clrf	___ftpack@arg+2
 12347  139B  308E               	movlw	142
 12348  139C  00AB               	movwf	??___awtoft
 12349  139D  082B               	movf	??___awtoft,w
 12350  139E  00A3               	movwf	___ftpack@exp
 12351  139F  082D               	movf	___awtoft@sign,w
 12352  13A0  00AC               	movwf	??___awtoft+1
 12353  13A1  082C               	movf	??___awtoft+1,w
 12354  13A2  00A4               	movwf	___ftpack@sign
 12355  13A3  318C  248B         	fcall	___ftpack
 12356  13A5  0020               	movlb	0	; select bank0
 12357  13A6  0820               	movf	?___ftpack,w
 12358  13A7  00A8               	movwf	?___awtoft
 12359  13A8  0821               	movf	?___ftpack+1,w
 12360  13A9  00A9               	movwf	?___awtoft+1
 12361  13AA  0822               	movf	?___ftpack+2,w
 12362  13AB  00AA               	movwf	?___awtoft+2
 12363  13AC  0008               	return
 12364  13AD                     __end_of___awtoft:	
 12365                           
 12366                           	psect	text72
 12367  0C8B                     __ptext72:	
 12368 ;; *************** function ___ftpack *****************
 12369 ;; Defined at:
 12370 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 12371 ;; Parameters:    Size  Location     Type
 12372 ;;  arg             3    0[BANK0 ] unsigned um
 12373 ;;  exp             1    3[BANK0 ] unsigned char 
 12374 ;;  sign            1    4[BANK0 ] unsigned char 
 12375 ;; Auto vars:     Size  Location     Type
 12376 ;;		None
 12377 ;; Return value:  Size  Location     Type
 12378 ;;                  3    0[BANK0 ] float 
 12379 ;; Registers used:
 12380 ;;		wreg, status,2, status,0
 12381 ;; Tracked objects:
 12382 ;;		On entry : 0/0
 12383 ;;		On exit  : 0/0
 12384 ;;		Unchanged: 0/0
 12385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12386 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12388 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12389 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12390 ;;Total ram usage:        8 bytes
 12391 ;; Hardware stack levels used:    1
 12392 ;; Hardware stack levels required when called:    5
 12393 ;; This function calls:
 12394 ;;		Nothing
 12395 ;; This function is called by:
 12396 ;;		___awtoft
 12397 ;;		___ftadd
 12398 ;;		___ftdiv
 12399 ;;		___ftmul
 12400 ;; This function uses a non-reentrant model
 12401 ;;
 12402                           
 12403                           
 12404                           ;psect for function ___ftpack
 12405  0C8B                     ___ftpack:	
 12406                           
 12407                           ;incstack = 0
 12408                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 12409  0C8B  0020               	movlb	0	; select bank0
 12410  0C8C  0823               	movf	___ftpack@exp,w
 12411  0C8D  1903               	btfsc	3,2
 12412  0C8E  2C94               	goto	l5149
 12413  0C8F  0822               	movf	___ftpack@arg+2,w
 12414  0C90  0421               	iorwf	___ftpack@arg+1,w
 12415  0C91  0420               	iorwf	___ftpack@arg,w
 12416  0C92  1D03               	skipz
 12417  0C93  2CA5               	goto	l5155
 12418  0C94                     l5149:	
 12419  0C94  3000               	movlw	0
 12420  0C95  00A0               	movwf	?___ftpack
 12421  0C96  3000               	movlw	0
 12422  0C97  00A1               	movwf	?___ftpack+1
 12423  0C98  3000               	movlw	0
 12424  0C99  00A2               	movwf	?___ftpack+2
 12425  0C9A  0008               	return
 12426  0C9B                     l5153:	
 12427  0C9B  3001               	movlw	1
 12428  0C9C  00A5               	movwf	??___ftpack
 12429  0C9D  0825               	movf	??___ftpack,w
 12430  0C9E  07A3               	addwf	___ftpack@exp,f
 12431  0C9F  3001               	movlw	1
 12432  0CA0                     u3565:	
 12433  0CA0  36A2               	lsrf	___ftpack@arg+2,f
 12434  0CA1  0CA1               	rrf	___ftpack@arg+1,f
 12435  0CA2  0CA0               	rrf	___ftpack@arg,f
 12436  0CA3  0B89               	decfsz	9,f
 12437  0CA4  2CA0               	goto	u3565
 12438  0CA5                     l5155:	
 12439  0CA5  30FE               	movlw	254
 12440  0CA6  0522               	andwf	___ftpack@arg+2,w
 12441  0CA7  1903               	btfsc	3,2
 12442  0CA8  2CBE               	goto	l2675
 12443  0CA9  2C9B               	goto	l5153
 12444  0CAA                     l5157:	
 12445  0CAA  3001               	movlw	1
 12446  0CAB  00A5               	movwf	??___ftpack
 12447  0CAC  0825               	movf	??___ftpack,w
 12448  0CAD  07A3               	addwf	___ftpack@exp,f
 12449  0CAE  3001               	movlw	1
 12450  0CAF  07A0               	addwf	___ftpack@arg,f
 12451  0CB0  3000               	movlw	0
 12452  0CB1  1803               	skipnc
 12453  0CB2  3001               	movlw	1
 12454  0CB3  07A1               	addwf	___ftpack@arg+1,f
 12455  0CB4  3000               	movlw	0
 12456  0CB5  1803               	skipnc
 12457  0CB6  3001               	movlw	1
 12458  0CB7  07A2               	addwf	___ftpack@arg+2,f
 12459  0CB8  3001               	movlw	1
 12460  0CB9                     u3585:	
 12461  0CB9  36A2               	lsrf	___ftpack@arg+2,f
 12462  0CBA  0CA1               	rrf	___ftpack@arg+1,f
 12463  0CBB  0CA0               	rrf	___ftpack@arg,f
 12464  0CBC  0B89               	decfsz	9,f
 12465  0CBD  2CB9               	goto	u3585
 12466  0CBE                     l2675:	
 12467  0CBE  30FF               	movlw	255
 12468  0CBF  0522               	andwf	___ftpack@arg+2,w
 12469  0CC0  1903               	btfsc	3,2
 12470  0CC1  2CCB               	goto	l5165
 12471  0CC2  2CAA               	goto	l5157
 12472  0CC3                     l5163:	
 12473  0CC3  3001               	movlw	1
 12474  0CC4  02A3               	subwf	___ftpack@exp,f
 12475  0CC5  3001               	movlw	1
 12476  0CC6                     u3605:	
 12477  0CC6  35A0               	lslf	___ftpack@arg,f
 12478  0CC7  0DA1               	rlf	___ftpack@arg+1,f
 12479  0CC8  0DA2               	rlf	___ftpack@arg+2,f
 12480  0CC9  0B89               	decfsz	9,f
 12481  0CCA  2CC6               	goto	u3605
 12482  0CCB                     l5165:	
 12483  0CCB  1FA1               	btfss	___ftpack@arg+1,7
 12484  0CCC  2CC3               	goto	l5163
 12485  0CCD  1823               	btfsc	___ftpack@exp,0
 12486  0CCE  2CD5               	goto	l2681
 12487  0CCF  30FF               	movlw	255
 12488  0CD0  05A0               	andwf	___ftpack@arg,f
 12489  0CD1  307F               	movlw	127
 12490  0CD2  05A1               	andwf	___ftpack@arg+1,f
 12491  0CD3  30FF               	movlw	255
 12492  0CD4  05A2               	andwf	___ftpack@arg+2,f
 12493  0CD5                     l2681:	
 12494  0CD5  1003               	clrc
 12495  0CD6  0CA3               	rrf	___ftpack@exp,f
 12496  0CD7  0823               	movf	___ftpack@exp,w
 12497  0CD8  00A5               	movwf	??___ftpack
 12498  0CD9  01A6               	clrf	??___ftpack+1
 12499  0CDA  01A7               	clrf	??___ftpack+2
 12500  0CDB  3010               	movlw	16
 12501  0CDC                     u3635:	
 12502  0CDC  35A5               	lslf	??___ftpack,f
 12503  0CDD  0DA6               	rlf	??___ftpack+1,f
 12504  0CDE  0DA7               	rlf	??___ftpack+2,f
 12505  0CDF  0B89               	decfsz	9,f
 12506  0CE0  2CDC               	goto	u3635
 12507  0CE1  0825               	movf	??___ftpack,w
 12508  0CE2  04A0               	iorwf	___ftpack@arg,f
 12509  0CE3  0826               	movf	??___ftpack+1,w
 12510  0CE4  04A1               	iorwf	___ftpack@arg+1,f
 12511  0CE5  0827               	movf	??___ftpack+2,w
 12512  0CE6  04A2               	iorwf	___ftpack@arg+2,f
 12513  0CE7  0824               	movf	___ftpack@sign,w
 12514  0CE8  1903               	btfsc	3,2
 12515  0CE9  0008               	return
 12516  0CEA  17A2               	bsf	___ftpack@arg+2,7
 12517  0CEB  0008               	return
 12518  0CEC                     __end_of___ftpack:	
 12519                           
 12520                           	psect	text73
 12521  09C1                     __ptext73:	
 12522 ;; *************** function _setLED *****************
 12523 ;; Defined at:
 12524 ;;		line 73 in file "../src/LED_B1.c"
 12525 ;; Parameters:    Size  Location     Type
 12526 ;;  led             1    wreg     unsigned char 
 12527 ;;  command         1    1[BANK0 ] unsigned char 
 12528 ;; Auto vars:     Size  Location     Type
 12529 ;;  led             1    2[BANK0 ] unsigned char 
 12530 ;; Return value:  Size  Location     Type
 12531 ;;		None               void
 12532 ;; Registers used:
 12533 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12534 ;; Tracked objects:
 12535 ;;		On entry : 0/0
 12536 ;;		On exit  : 0/0
 12537 ;;		Unchanged: 0/0
 12538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12539 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12540 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12542 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12543 ;;Total ram usage:        2 bytes
 12544 ;; Hardware stack levels used:    1
 12545 ;; Hardware stack levels required when called:    6
 12546 ;; This function calls:
 12547 ;;		_LedPointSelect
 12548 ;; This function is called by:
 12549 ;;		_setDimmerLights
 12550 ;;		_setLED_Initialization
 12551 ;;		_setSw_Initialization
 12552 ;;		_setMain_Exception
 12553 ;; This function uses a non-reentrant model
 12554 ;;
 12555                           
 12556                           
 12557                           ;psect for function _setLED
 12558  09C1                     _setLED:	
 12559                           
 12560                           ;incstack = 0
 12561                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12562                           ;setLED@led stored from wreg
 12563  09C1  0020               	movlb	0	; select bank0
 12564  09C2  00A2               	movwf	setLED@led
 12565                           
 12566                           ;LED_B1.c: 74: LedPointSelect(led);
 12567  09C3  0822               	movf	setLED@led,w
 12568  09C4  3193  232A  3189   	fcall	_LedPointSelect
 12569                           
 12570                           ;LED_B1.c: 75: if (command == 0) {
 12571  09C7  0020               	movlb	0	; select bank0
 12572  09C8  08A1               	movf	setLED@command,f
 12573  09C9  1D03               	skipz
 12574  09CA  29D8               	goto	l7419
 12575                           
 12576                           ;LED_B1.c: 77: if (led == 1) {
 12577  09CB  0822               	movf	setLED@led,w
 12578  09CC  3A01               	xorlw	1
 12579  09CD  1D03               	skipz
 12580  09CE  29D0               	goto	l7411
 12581                           
 12582                           ;LED_B1.c: 81: RA3 = 1;
 12583  09CF  158C               	bsf	12,3	;volatile
 12584  09D0                     l7411:	
 12585                           
 12586                           ;LED_B1.c: 83: }
 12587                           ;LED_B1.c: 86: if (led == 2) {
 12588  09D0  0822               	movf	setLED@led,w
 12589  09D1  3A02               	xorlw	2
 12590  09D2  1903               	btfsc	3,2
 12591                           
 12592                           ;LED_B1.c: 90: RC7 = 1;
 12593  09D3  178E               	bsf	14,7	;volatile
 12594                           
 12595                           ;LED_B1.c: 92: }
 12596                           ;LED_B1.c: 104: if (led == 99) {
 12597  09D4  0822               	movf	setLED@led,w
 12598  09D5  3A63               	xorlw	99
 12599  09D6  1903               	btfsc	3,2
 12600                           
 12601                           ;LED_B1.c: 108: RB5 = 1;
 12602  09D7  168D               	bsf	13,5	;volatile
 12603  09D8                     l7419:	
 12604                           
 12605                           ;LED_B1.c: 110: }
 12606                           ;LED_B1.c: 112: } if (command == 1) {
 12607  09D8  0821               	movf	setLED@command,w
 12608  09D9  3A01               	xorlw	1
 12609  09DA  1D03               	skipz
 12610  09DB  29E9               	goto	l7433
 12611                           
 12612                           ;LED_B1.c: 114: if (led == 1) {
 12613  09DC  0822               	movf	setLED@led,w
 12614  09DD  3A01               	xorlw	1
 12615  09DE  1D03               	skipz
 12616  09DF  29E1               	goto	l7425
 12617                           
 12618                           ;LED_B1.c: 118: RA3 = 0;
 12619  09E0  118C               	bcf	12,3	;volatile
 12620  09E1                     l7425:	
 12621                           
 12622                           ;LED_B1.c: 120: }
 12623                           ;LED_B1.c: 123: if (led == 2) {
 12624  09E1  0822               	movf	setLED@led,w
 12625  09E2  3A02               	xorlw	2
 12626  09E3  1903               	btfsc	3,2
 12627                           
 12628                           ;LED_B1.c: 127: RC7 = 0;
 12629  09E4  138E               	bcf	14,7	;volatile
 12630                           
 12631                           ;LED_B1.c: 129: }
 12632                           ;LED_B1.c: 141: if (led == 99) {
 12633  09E5  0822               	movf	setLED@led,w
 12634  09E6  3A63               	xorlw	99
 12635  09E7  1903               	btfsc	3,2
 12636                           
 12637                           ;LED_B1.c: 145: RB5 = 0;
 12638  09E8  128D               	bcf	13,5	;volatile
 12639  09E9                     l7433:	
 12640                           
 12641                           ;LED_B1.c: 147: }
 12642                           ;LED_B1.c: 149: } if (command == 10) {
 12643  09E9  0821               	movf	setLED@command,w
 12644  09EA  3A0A               	xorlw	10
 12645  09EB  1D03               	skipz
 12646  09EC  2A0A               	goto	l7449
 12647                           
 12648                           ;LED_B1.c: 150: LED->GO = 0;
 12649  09ED  0021               	movlb	1	; select bank1
 12650  09EE  084E               	movf	_LED^(0+128),w
 12651  09EF  0086               	movwf	6
 12652  09F0  084F               	movf	(_LED+1)^(0+128),w
 12653  09F1  0087               	movwf	7
 12654  09F2  1081               	bcf	1,1
 12655                           
 12656                           ;LED_B1.c: 151: LED->Time = 0;
 12657  09F3  084E               	movf	_LED^(0+128),w
 12658  09F4  0086               	movwf	6
 12659  09F5  084F               	movf	(_LED+1)^(0+128),w
 12660  09F6  0087               	movwf	7
 12661  09F7  3141               	addfsr 1,1
 12662  09F8  3000               	movlw	0
 12663  09F9  3FC0               	movwi [0]fsr1
 12664  09FA  3FC1               	movwi [1]fsr1
 12665                           
 12666                           ;LED_B1.c: 153: if (led == 1) {
 12667  09FB  0020               	movlb	0	; select bank0
 12668  09FC  0822               	movf	setLED@led,w
 12669  09FD  3A01               	xorlw	1
 12670  09FE  1D03               	skipz
 12671  09FF  2A02               	goto	l7441
 12672                           
 12673                           ;LED_B1.c: 157: RA3 = 1;
 12674  0A00  158C               	bsf	12,3	;volatile
 12675                           
 12676                           ;LED_B1.c: 159: }
 12677  0A01  2A06               	goto	l7445
 12678  0A02                     l7441:	
 12679                           
 12680                           ;LED_B1.c: 162: else if (led == 2) {
 12681  0A02  0822               	movf	setLED@led,w
 12682  0A03  3A02               	xorlw	2
 12683  0A04  1903               	btfsc	3,2
 12684                           
 12685                           ;LED_B1.c: 166: RC7 = 1;
 12686  0A05  178E               	bsf	14,7	;volatile
 12687  0A06                     l7445:	
 12688                           
 12689                           ;LED_B1.c: 168: }
 12690                           ;LED_B1.c: 180: if (led == 99) {
 12691  0A06  0822               	movf	setLED@led,w
 12692  0A07  3A63               	xorlw	99
 12693  0A08  1903               	btfsc	3,2
 12694                           
 12695                           ;LED_B1.c: 184: RB5 = 1;
 12696  0A09  168D               	bsf	13,5	;volatile
 12697  0A0A                     l7449:	
 12698                           
 12699                           ;LED_B1.c: 186: }
 12700                           ;LED_B1.c: 188: }
 12701                           ;LED_B1.c: 189: if (command == 11) {
 12702  0A0A  0821               	movf	setLED@command,w
 12703  0A0B  3A0B               	xorlw	11
 12704  0A0C  1D03               	skipz
 12705  0A0D  0008               	return
 12706                           
 12707                           ;LED_B1.c: 190: LED->GO = 1;
 12708  0A0E  0021               	movlb	1	; select bank1
 12709  0A0F  084E               	movf	_LED^(0+128),w
 12710  0A10  0086               	movwf	6
 12711  0A11  084F               	movf	(_LED+1)^(0+128),w
 12712  0A12  0087               	movwf	7
 12713  0A13  1481               	bsf	1,1
 12714  0A14  0008               	return
 12715  0A15                     __end_of_setLED:	
 12716                           
 12717                           	psect	text74
 12718  132A                     __ptext74:	
 12719 ;; *************** function _LedPointSelect *****************
 12720 ;; Defined at:
 12721 ;;		line 7 in file "../src/LED_B1.c"
 12722 ;; Parameters:    Size  Location     Type
 12723 ;;  led             1    wreg     unsigned char 
 12724 ;; Auto vars:     Size  Location     Type
 12725 ;;  led             1    0[BANK0 ] unsigned char 
 12726 ;; Return value:  Size  Location     Type
 12727 ;;		None               void
 12728 ;; Registers used:
 12729 ;;		wreg, status,2, status,0
 12730 ;; Tracked objects:
 12731 ;;		On entry : 0/0
 12732 ;;		On exit  : 0/0
 12733 ;;		Unchanged: 0/0
 12734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12736 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12738 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12739 ;;Total ram usage:        1 bytes
 12740 ;; Hardware stack levels used:    1
 12741 ;; Hardware stack levels required when called:    5
 12742 ;; This function calls:
 12743 ;;		Nothing
 12744 ;; This function is called by:
 12745 ;;		_setLED_Initialization
 12746 ;;		_setLED
 12747 ;;		_setLED_Main
 12748 ;; This function uses a non-reentrant model
 12749 ;;
 12750                           
 12751                           
 12752                           ;psect for function _LedPointSelect
 12753  132A                     _LedPointSelect:	
 12754                           
 12755                           ;incstack = 0
 12756                           ; Regs used in _LedPointSelect: [wreg+status,2+status,0]
 12757                           ;LedPointSelect@led stored from wreg
 12758  132A  0020               	movlb	0	; select bank0
 12759  132B  00A0               	movwf	LedPointSelect@led
 12760                           
 12761                           ;LED_B1.c: 9: if (led == 1) {
 12762  132C  0820               	movf	LedPointSelect@led,w
 12763  132D  3A01               	xorlw	1
 12764  132E  1D03               	skipz
 12765  132F  2B35               	goto	l7395
 12766                           
 12767                           ;LED_B1.c: 10: LED = &VarLED1;
 12768  1330  3065               	movlw	low _VarLED1
 12769  1331  0021               	movlb	1	; select bank1
 12770  1332  00CE               	movwf	_LED^(0+128)
 12771  1333  3001               	movlw	high _VarLED1
 12772  1334  00CF               	movwf	(_LED+1)^(0+128)
 12773  1335                     l7395:	
 12774                           
 12775                           ;LED_B1.c: 11: }
 12776                           ;LED_B1.c: 14: if (led == 2) {
 12777  1335  0020               	movlb	0	; select bank0
 12778  1336  0820               	movf	LedPointSelect@led,w
 12779  1337  3A02               	xorlw	2
 12780  1338  1D03               	skipz
 12781  1339  2B3F               	goto	l7399
 12782                           
 12783                           ;LED_B1.c: 15: LED = &VarLED2;
 12784  133A  3069               	movlw	low _VarLED2
 12785  133B  0021               	movlb	1	; select bank1
 12786  133C  00CE               	movwf	_LED^(0+128)
 12787  133D  3001               	movlw	high _VarLED2
 12788  133E  00CF               	movwf	(_LED+1)^(0+128)
 12789  133F                     l7399:	
 12790                           
 12791                           ;LED_B1.c: 16: }
 12792                           ;LED_B1.c: 24: if (led == 99) {
 12793  133F  0020               	movlb	0	; select bank0
 12794  1340  0820               	movf	LedPointSelect@led,w
 12795  1341  3A63               	xorlw	99
 12796  1342  1D03               	skipz
 12797  1343  0008               	return
 12798                           
 12799                           ;LED_B1.c: 25: LED = &VarErrLED;
 12800  1344  30DF               	movlw	low _VarErrLED
 12801  1345  0021               	movlb	1	; select bank1
 12802  1346  00CE               	movwf	_LED^(0+128)
 12803  1347  3000               	movlw	high _VarErrLED
 12804  1348  00CF               	movwf	(_LED+1)^(0+128)
 12805  1349  0008               	return
 12806  134A                     __end_of_LedPointSelect:	
 12807                           
 12808                           	psect	text75
 12809  120A                     __ptext75:	
 12810 ;; *************** function _setDimmerLights_Line *****************
 12811 ;; Defined at:
 12812 ;;		line 679 in file "../src/Dimmer_B1.c"
 12813 ;; Parameters:    Size  Location     Type
 12814 ;;  lights          1    wreg     unsigned char 
 12815 ;; Auto vars:     Size  Location     Type
 12816 ;;  lights          1    0[BANK0 ] unsigned char 
 12817 ;; Return value:  Size  Location     Type
 12818 ;;		None               void
 12819 ;; Registers used:
 12820 ;;		wreg
 12821 ;; Tracked objects:
 12822 ;;		On entry : 0/0
 12823 ;;		On exit  : 0/0
 12824 ;;		Unchanged: 0/0
 12825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12827 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12829 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12830 ;;Total ram usage:        1 bytes
 12831 ;; Hardware stack levels used:    1
 12832 ;; Hardware stack levels required when called:    5
 12833 ;; This function calls:
 12834 ;;		Nothing
 12835 ;; This function is called by:
 12836 ;;		_setDimmerLights
 12837 ;; This function uses a non-reentrant model
 12838 ;;
 12839                           
 12840                           
 12841                           ;psect for function _setDimmerLights_Line
 12842  120A                     _setDimmerLights_Line:	
 12843                           
 12844                           ;incstack = 0
 12845                           ; Regs used in _setDimmerLights_Line: [wreg]
 12846                           ;setDimmerLights_Line@lights stored from wreg
 12847  120A  0020               	movlb	0	; select bank0
 12848  120B  00A0               	movwf	setDimmerLights_Line@lights
 12849                           
 12850                           ;Dimmer_B1.c: 681: DimmerLights1.Line = 0;
 12851  120C  0022               	movlb	2	; select bank2
 12852  120D  1047               	bcf	(_DimmerLights1^(0+256)+9),0
 12853                           
 12854                           ;Dimmer_B1.c: 684: DimmerLights2.Line = 0;
 12855  120E  1056               	bcf	(_DimmerLights2^(0+256)+9),0
 12856                           
 12857                           ;Dimmer_B1.c: 690: if (lights == 1) {
 12858  120F  0020               	movlb	0	; select bank0
 12859  1210  0820               	movf	setDimmerLights_Line@lights,w
 12860  1211  3A01               	xorlw	1
 12861  1212  1D03               	skipz
 12862  1213  2A17               	goto	l5935
 12863                           
 12864                           ;Dimmer_B1.c: 691: DimmerLights1.Line = 1;
 12865  1214  0022               	movlb	2	; select bank2
 12866  1215  1447               	bsf	(_DimmerLights1^(0+256)+9),0
 12867                           
 12868                           ;Dimmer_B1.c: 692: }
 12869  1216  0008               	return
 12870  1217                     l5935:	
 12871                           
 12872                           ;Dimmer_B1.c: 695: else if (lights == 2) {
 12873  1217  0020               	movlb	0	; select bank0
 12874  1218  0820               	movf	setDimmerLights_Line@lights,w
 12875  1219  3A02               	xorlw	2
 12876  121A  1D03               	skipz
 12877  121B  0008               	return
 12878                           
 12879                           ;Dimmer_B1.c: 696: DimmerLights2.Line = 1;
 12880  121C  0022               	movlb	2	; select bank2
 12881  121D  1456               	bsf	(_DimmerLights2^(0+256)+9),0
 12882  121E  0008               	return
 12883  121F                     __end_of_setDimmerLights_Line:	
 12884                           
 12885                           	psect	text76
 12886  0A6C                     __ptext76:	
 12887 ;; *************** function _setBuz *****************
 12888 ;; Defined at:
 12889 ;;		line 22 in file "../src/Buzzer_B1.c"
 12890 ;; Parameters:    Size  Location     Type
 12891 ;;  count           1    wreg     unsigned char 
 12892 ;;  time            2    9[BANK0 ] int 
 12893 ;; Auto vars:     Size  Location     Type
 12894 ;;  count           1   12[BANK0 ] unsigned char 
 12895 ;; Return value:  Size  Location     Type
 12896 ;;		None               void
 12897 ;; Registers used:
 12898 ;;		wreg, status,2, status,0, pclath, cstack
 12899 ;; Tracked objects:
 12900 ;;		On entry : 0/0
 12901 ;;		On exit  : 0/0
 12902 ;;		Unchanged: 0/0
 12903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12904 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12905 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12906 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12907 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12908 ;;Total ram usage:        4 bytes
 12909 ;; Hardware stack levels used:    1
 12910 ;; Hardware stack levels required when called:    6
 12911 ;; This function calls:
 12912 ;;		___awdiv
 12913 ;; This function is called by:
 12914 ;;		_setDimmerLights_Main
 12915 ;;		_setDimmerLights_SwOn
 12916 ;;		_setLog_Code
 12917 ;;		_setControl_Lights_Table
 12918 ;;		_setRFSW_Control
 12919 ;;		_setSw_Main
 12920 ;;		_my_MainTimer
 12921 ;;		_setMain_Exception
 12922 ;; This function uses a non-reentrant model
 12923 ;;
 12924                           
 12925                           
 12926                           ;psect for function _setBuz
 12927  0A6C                     _setBuz:	
 12928                           
 12929                           ;incstack = 0
 12930                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 12931                           ;setBuz@count stored from wreg
 12932  0A6C  0020               	movlb	0	; select bank0
 12933  0A6D  00AC               	movwf	setBuz@count
 12934                           
 12935                           ;Buzzer_B1.c: 23: time /= 10;
 12936  0A6E  300A               	movlw	10
 12937  0A6F  00A0               	movwf	___awdiv@divisor
 12938  0A70  3000               	movlw	0
 12939  0A71  00A1               	movwf	___awdiv@divisor+1
 12940  0A72  082A               	movf	setBuz@time+1,w
 12941  0A73  01A3               	clrf	___awdiv@dividend+1
 12942  0A74  07A3               	addwf	___awdiv@dividend+1,f
 12943  0A75  0829               	movf	setBuz@time,w
 12944  0A76  01A2               	clrf	___awdiv@dividend
 12945  0A77  07A2               	addwf	___awdiv@dividend,f
 12946  0A78  3189  216D  318A   	fcall	___awdiv
 12947  0A7B  0020               	movlb	0	; select bank0
 12948  0A7C  0821               	movf	?___awdiv+1,w
 12949  0A7D  01AA               	clrf	setBuz@time+1
 12950  0A7E  07AA               	addwf	setBuz@time+1,f
 12951  0A7F  0820               	movf	?___awdiv,w
 12952  0A80  01A9               	clrf	setBuz@time
 12953  0A81  07A9               	addwf	setBuz@time,f
 12954                           
 12955                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 12956  0A82  0021               	movlb	1	; select bank1
 12957  0A83  1C30               	btfss	_Buz1^(0+128),0
 12958  0A84  0008               	return
 12959                           
 12960                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 12961  0A85  18B0               	btfsc	_Buz1^(0+128),1
 12962  0A86  2A9D               	goto	l92
 12963                           
 12964                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 12965  0A87  14B0               	bsf	_Buz1^(0+128),1
 12966                           
 12967                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 12968  0A88  01B1               	clrf	(_Buz1^(0+128)+1)
 12969  0A89  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 12970                           
 12971                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 12972  0A8A  0020               	movlb	0	; select bank0
 12973  0A8B  082C               	movf	setBuz@count,w
 12974  0A8C  00AB               	movwf	??_setBuz
 12975  0A8D  082B               	movf	??_setBuz,w
 12976  0A8E  0021               	movlb	1	; select bank1
 12977  0A8F  00B3               	movwf	(_Buz1^(0+128)+3)
 12978                           
 12979                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 12980  0A90  0020               	movlb	0	; select bank0
 12981  0A91  082A               	movf	setBuz@time+1,w
 12982  0A92  0021               	movlb	1	; select bank1
 12983  0A93  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 12984  0A94  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 12985  0A95  0020               	movlb	0	; select bank0
 12986  0A96  0829               	movf	setBuz@time,w
 12987  0A97  0021               	movlb	1	; select bank1
 12988  0A98  01B6               	clrf	(_Buz1^(0+128)+6)
 12989  0A99  07B6               	addwf	(_Buz1^(0+128)+6),f
 12990                           
 12991                           ;Buzzer_B1.c: 30: RB3 = 1;
 12992  0A9A  0020               	movlb	0	; select bank0
 12993  0A9B  158D               	bsf	13,3	;volatile
 12994                           
 12995                           ;Buzzer_B1.c: 31: } else {
 12996  0A9C  0008               	return
 12997  0A9D                     l92:	
 12998                           
 12999                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 13000  0A9D  19B0               	btfsc	_Buz1^(0+128),3
 13001  0A9E  2AB1               	goto	l94
 13002                           
 13003                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 13004  0A9F  15B0               	bsf	_Buz1^(0+128),3
 13005                           
 13006                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 13007  0AA0  0020               	movlb	0	; select bank0
 13008  0AA1  082C               	movf	setBuz@count,w
 13009  0AA2  00AB               	movwf	??_setBuz
 13010  0AA3  082B               	movf	??_setBuz,w
 13011  0AA4  0021               	movlb	1	; select bank1
 13012  0AA5  00B4               	movwf	(_Buz1^(0+128)+4)
 13013                           
 13014                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 13015  0AA6  0020               	movlb	0	; select bank0
 13016  0AA7  082A               	movf	setBuz@time+1,w
 13017  0AA8  0021               	movlb	1	; select bank1
 13018  0AA9  01B9               	clrf	((_Buz1+1)^(0+128)+8)
 13019  0AAA  07B9               	addwf	((_Buz1+1)^(0+128)+8),f
 13020  0AAB  0020               	movlb	0	; select bank0
 13021  0AAC  0829               	movf	setBuz@time,w
 13022  0AAD  0021               	movlb	1	; select bank1
 13023  0AAE  01B8               	clrf	(_Buz1^(0+128)+8)
 13024  0AAF  07B8               	addwf	(_Buz1^(0+128)+8),f
 13025                           
 13026                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 13027  0AB0  0008               	return
 13028  0AB1                     l94:	
 13029  0AB1  1A30               	btfsc	_Buz1^(0+128),4
 13030  0AB2  0008               	return
 13031                           
 13032                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 13033  0AB3  1630               	bsf	_Buz1^(0+128),4
 13034                           
 13035                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 13036  0AB4  0020               	movlb	0	; select bank0
 13037  0AB5  082C               	movf	setBuz@count,w
 13038  0AB6  00AB               	movwf	??_setBuz
 13039  0AB7  082B               	movf	??_setBuz,w
 13040  0AB8  0021               	movlb	1	; select bank1
 13041  0AB9  00B5               	movwf	(_Buz1^(0+128)+5)
 13042                           
 13043                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 13044  0ABA  0020               	movlb	0	; select bank0
 13045  0ABB  082A               	movf	setBuz@time+1,w
 13046  0ABC  0021               	movlb	1	; select bank1
 13047  0ABD  01BB               	clrf	((_Buz1+1)^(0+128)+10)
 13048  0ABE  07BB               	addwf	((_Buz1+1)^(0+128)+10),f
 13049  0ABF  0020               	movlb	0	; select bank0
 13050  0AC0  0829               	movf	setBuz@time,w
 13051  0AC1  0021               	movlb	1	; select bank1
 13052  0AC2  01BA               	clrf	(_Buz1^(0+128)+10)
 13053  0AC3  07BA               	addwf	(_Buz1^(0+128)+10),f
 13054  0AC4  0008               	return
 13055  0AC5                     __end_of_setBuz:	
 13056                           
 13057                           	psect	text77
 13058  096D                     __ptext77:	
 13059 ;; *************** function ___awdiv *****************
 13060 ;; Defined at:
 13061 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 13062 ;; Parameters:    Size  Location     Type
 13063 ;;  divisor         2    0[BANK0 ] int 
 13064 ;;  dividend        2    2[BANK0 ] int 
 13065 ;; Auto vars:     Size  Location     Type
 13066 ;;  quotient        2    7[BANK0 ] int 
 13067 ;;  sign            1    6[BANK0 ] unsigned char 
 13068 ;;  counter         1    5[BANK0 ] unsigned char 
 13069 ;; Return value:  Size  Location     Type
 13070 ;;                  2    0[BANK0 ] int 
 13071 ;; Registers used:
 13072 ;;		wreg, status,2, status,0
 13073 ;; Tracked objects:
 13074 ;;		On entry : 0/0
 13075 ;;		On exit  : 0/0
 13076 ;;		Unchanged: 0/0
 13077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13078 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13079 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13080 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13081 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13082 ;;Total ram usage:        9 bytes
 13083 ;; Hardware stack levels used:    1
 13084 ;; Hardware stack levels required when called:    5
 13085 ;; This function calls:
 13086 ;;		Nothing
 13087 ;; This function is called by:
 13088 ;;		_setBuz
 13089 ;; This function uses a non-reentrant model
 13090 ;;
 13091                           
 13092                           
 13093                           ;psect for function ___awdiv
 13094  096D                     ___awdiv:	
 13095                           
 13096                           ;incstack = 0
 13097                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13098  096D  0020               	movlb	0	; select bank0
 13099  096E  01A6               	clrf	___awdiv@sign
 13100  096F  1FA1               	btfss	___awdiv@divisor+1,7
 13101  0970  2978               	goto	l5457
 13102  0971  09A0               	comf	___awdiv@divisor,f
 13103  0972  09A1               	comf	___awdiv@divisor+1,f
 13104  0973  0AA0               	incf	___awdiv@divisor,f
 13105  0974  1903               	skipnz
 13106  0975  0AA1               	incf	___awdiv@divisor+1,f
 13107  0976  01A6               	clrf	___awdiv@sign
 13108  0977  0AA6               	incf	___awdiv@sign,f
 13109  0978                     l5457:	
 13110  0978  1FA3               	btfss	___awdiv@dividend+1,7
 13111  0979  2983               	goto	l5463
 13112  097A  09A2               	comf	___awdiv@dividend,f
 13113  097B  09A3               	comf	___awdiv@dividend+1,f
 13114  097C  0AA2               	incf	___awdiv@dividend,f
 13115  097D  1903               	skipnz
 13116  097E  0AA3               	incf	___awdiv@dividend+1,f
 13117  097F  3001               	movlw	1
 13118  0980  00A4               	movwf	??___awdiv
 13119  0981  0824               	movf	??___awdiv,w
 13120  0982  06A6               	xorwf	___awdiv@sign,f
 13121  0983                     l5463:	
 13122  0983  01A7               	clrf	___awdiv@quotient
 13123  0984  01A8               	clrf	___awdiv@quotient+1
 13124  0985  0821               	movf	___awdiv@divisor+1,w
 13125  0986  0420               	iorwf	___awdiv@divisor,w
 13126  0987  1903               	skipnz
 13127  0988  29B2               	goto	l5485
 13128  0989  01A5               	clrf	___awdiv@counter
 13129  098A  0AA5               	incf	___awdiv@counter,f
 13130  098B                     l5473:	
 13131  098B  1BA1               	btfsc	___awdiv@divisor+1,7
 13132  098C  2997               	goto	l5475
 13133  098D  3001               	movlw	1
 13134  098E                     u4305:	
 13135  098E  35A0               	lslf	___awdiv@divisor,f
 13136  098F  0DA1               	rlf	___awdiv@divisor+1,f
 13137  0990  0B89               	decfsz	9,f
 13138  0991  298E               	goto	u4305
 13139  0992  3001               	movlw	1
 13140  0993  00A4               	movwf	??___awdiv
 13141  0994  0824               	movf	??___awdiv,w
 13142  0995  07A5               	addwf	___awdiv@counter,f
 13143  0996  298B               	goto	l5473
 13144  0997                     l5475:	
 13145  0997  3001               	movlw	1
 13146  0998                     u4325:	
 13147  0998  35A7               	lslf	___awdiv@quotient,f
 13148  0999  0DA8               	rlf	___awdiv@quotient+1,f
 13149  099A  0B89               	decfsz	9,f
 13150  099B  2998               	goto	u4325
 13151  099C  0821               	movf	___awdiv@divisor+1,w
 13152  099D  0223               	subwf	___awdiv@dividend+1,w
 13153  099E  1D03               	skipz
 13154  099F  29A2               	goto	u4335
 13155  09A0  0820               	movf	___awdiv@divisor,w
 13156  09A1  0222               	subwf	___awdiv@dividend,w
 13157  09A2                     u4335:	
 13158  09A2  1C03               	skipc
 13159  09A3  29A9               	goto	l5481
 13160  09A4  0820               	movf	___awdiv@divisor,w
 13161  09A5  02A2               	subwf	___awdiv@dividend,f
 13162  09A6  0821               	movf	___awdiv@divisor+1,w
 13163  09A7  3BA3               	subwfb	___awdiv@dividend+1,f
 13164  09A8  1427               	bsf	___awdiv@quotient,0
 13165  09A9                     l5481:	
 13166  09A9  3001               	movlw	1
 13167  09AA                     u4345:	
 13168  09AA  36A1               	lsrf	___awdiv@divisor+1,f
 13169  09AB  0CA0               	rrf	___awdiv@divisor,f
 13170  09AC  0B89               	decfsz	9,f
 13171  09AD  29AA               	goto	u4345
 13172  09AE  3001               	movlw	1
 13173  09AF  02A5               	subwf	___awdiv@counter,f
 13174  09B0  1D03               	btfss	3,2
 13175  09B1  2997               	goto	l5475
 13176  09B2                     l5485:	
 13177  09B2  0826               	movf	___awdiv@sign,w
 13178  09B3  1903               	btfsc	3,2
 13179  09B4  29BA               	goto	l5489
 13180  09B5  09A7               	comf	___awdiv@quotient,f
 13181  09B6  09A8               	comf	___awdiv@quotient+1,f
 13182  09B7  0AA7               	incf	___awdiv@quotient,f
 13183  09B8  1903               	skipnz
 13184  09B9  0AA8               	incf	___awdiv@quotient+1,f
 13185  09BA                     l5489:	
 13186  09BA  0828               	movf	___awdiv@quotient+1,w
 13187  09BB  01A1               	clrf	?___awdiv+1
 13188  09BC  07A1               	addwf	?___awdiv+1,f
 13189  09BD  0827               	movf	___awdiv@quotient,w
 13190  09BE  01A0               	clrf	?___awdiv
 13191  09BF  07A0               	addwf	?___awdiv,f
 13192  09C0  0008               	return
 13193  09C1                     __end_of___awdiv:	
 13194                           
 13195                           	psect	text78
 13196  1234                     __ptext78:	
 13197 ;; *************** function _DimmerLights_Initialization *****************
 13198 ;; Defined at:
 13199 ;;		line 341 in file "../src/Dimmer_B1.c"
 13200 ;; Parameters:    Size  Location     Type
 13201 ;;		None
 13202 ;; Auto vars:     Size  Location     Type
 13203 ;;		None
 13204 ;; Return value:  Size  Location     Type
 13205 ;;		None               void
 13206 ;; Registers used:
 13207 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13208 ;; Tracked objects:
 13209 ;;		On entry : 0/0
 13210 ;;		On exit  : 0/0
 13211 ;;		Unchanged: 0/0
 13212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13215 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13216 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13217 ;;Total ram usage:        1 bytes
 13218 ;; Hardware stack levels used:    1
 13219 ;; Hardware stack levels required when called:    7
 13220 ;; This function calls:
 13221 ;;		_Dimmer_Initialization
 13222 ;;		_setDimmerLights_Initialization
 13223 ;; This function is called by:
 13224 ;;		_main
 13225 ;; This function uses a non-reentrant model
 13226 ;;
 13227                           
 13228                           
 13229                           ;psect for function _DimmerLights_Initialization
 13230  1234                     _DimmerLights_Initialization:	
 13231                           
 13232                           ;Dimmer_B1.c: 343: DimmerLights11 = &DimmerLights1;
 13233                           
 13234                           ;incstack = 0
 13235                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13236  1234  303E               	movlw	_DimmerLights1& (0+255)
 13237  1235  0020               	movlb	0	; select bank0
 13238  1236  00A4               	movwf	??_DimmerLights_Initialization
 13239  1237  0824               	movf	??_DimmerLights_Initialization,w
 13240  1238  0021               	movlb	1	; select bank1
 13241  1239  00D5               	movwf	_DimmerLights11^(0+128)
 13242                           
 13243                           ;Dimmer_B1.c: 344: setDimmerLights_Initialization(1);
 13244  123A  3001               	movlw	1
 13245  123B  3194  243C  3192   	fcall	_setDimmerLights_Initialization
 13246                           
 13247                           ;Dimmer_B1.c: 348: DimmerLights22 = &DimmerLights2;
 13248  123E  304D               	movlw	_DimmerLights2& (0+255)
 13249  123F  0020               	movlb	0	; select bank0
 13250  1240  00A4               	movwf	??_DimmerLights_Initialization
 13251  1241  0824               	movf	??_DimmerLights_Initialization,w
 13252  1242  0021               	movlb	1	; select bank1
 13253  1243  00D6               	movwf	_DimmerLights22^(0+128)
 13254                           
 13255                           ;Dimmer_B1.c: 349: setDimmerLights_Initialization(2);
 13256  1244  3002               	movlw	2
 13257  1245  3194  243C  3192   	fcall	_setDimmerLights_Initialization
 13258                           
 13259                           ;Dimmer_B1.c: 358: Dimmer_Initialization();
 13260  1248  319F  2716         	fcall	_Dimmer_Initialization
 13261  124A  0008               	return
 13262  124B                     __end_of_DimmerLights_Initialization:	
 13263                           
 13264                           	psect	text79
 13265  143C                     __ptext79:	
 13266 ;; *************** function _setDimmerLights_Initialization *****************
 13267 ;; Defined at:
 13268 ;;		line 364 in file "../src/Dimmer_B1.c"
 13269 ;; Parameters:    Size  Location     Type
 13270 ;;  lights          1    wreg     unsigned char 
 13271 ;; Auto vars:     Size  Location     Type
 13272 ;;  lights          1    3[BANK0 ] unsigned char 
 13273 ;; Return value:  Size  Location     Type
 13274 ;;		None               void
 13275 ;; Registers used:
 13276 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13277 ;; Tracked objects:
 13278 ;;		On entry : 0/0
 13279 ;;		On exit  : 0/0
 13280 ;;		Unchanged: 0/0
 13281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13283 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13284 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13285 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13286 ;;Total ram usage:        2 bytes
 13287 ;; Hardware stack levels used:    1
 13288 ;; Hardware stack levels required when called:    6
 13289 ;; This function calls:
 13290 ;;		_DimmerLightsPointSelect
 13291 ;; This function is called by:
 13292 ;;		_DimmerLights_Initialization
 13293 ;; This function uses a non-reentrant model
 13294 ;;
 13295                           
 13296                           
 13297                           ;psect for function _setDimmerLights_Initialization
 13298  143C                     _setDimmerLights_Initialization:	
 13299                           
 13300                           ;incstack = 0
 13301                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 13302                           ;setDimmerLights_Initialization@lights stored from wreg
 13303  143C  0020               	movlb	0	; select bank0
 13304  143D  00A3               	movwf	setDimmerLights_Initialization@lights
 13305                           
 13306                           ;Dimmer_B1.c: 366: DimmerLightsPointSelect(lights);
 13307  143E  0823               	movf	setDimmerLights_Initialization@lights,w
 13308  143F  3191  2130         	fcall	_DimmerLightsPointSelect
 13309                           
 13310                           ;Dimmer_B1.c: 372: DimmerLights->MaxmumValue = ((char)(80*0.8));
 13311  1441  3040               	movlw	64
 13312  1442  0020               	movlb	0	; select bank0
 13313  1443  00A2               	movwf	??_setDimmerLights_Initialization
 13314  1444  086F               	movf	_DimmerLights,w
 13315  1445  3E05               	addlw	5
 13316  1446  0086               	movwf	6
 13317  1447  3001               	movlw	1	; select bank2/3
 13318  1448  0087               	movwf	7
 13319  1449  0822               	movf	??_setDimmerLights_Initialization,w
 13320  144A  0081               	movwf	1
 13321                           
 13322                           ;Dimmer_B1.c: 373: DimmerLights->MinimumValue = ((char)(15*0.8));
 13323  144B  300C               	movlw	12
 13324  144C  00A2               	movwf	??_setDimmerLights_Initialization
 13325  144D  086F               	movf	_DimmerLights,w
 13326  144E  3E06               	addlw	6
 13327  144F  0086               	movwf	6
 13328  1450  3001               	movlw	1	; select bank2/3
 13329  1451  0087               	movwf	7
 13330  1452  0822               	movf	??_setDimmerLights_Initialization,w
 13331  1453  0081               	movwf	1
 13332                           
 13333                           ;Dimmer_B1.c: 387: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 13334  1454  086F               	movf	_DimmerLights,w
 13335  1455  3E05               	addlw	5
 13336  1456  0086               	movwf	6
 13337  1457  3001               	movlw	1	; select bank2/3
 13338  1458  0087               	movwf	7
 13339  1459  0801               	movf	1,w
 13340  145A  00A2               	movwf	??_setDimmerLights_Initialization
 13341  145B  086F               	movf	_DimmerLights,w
 13342  145C  3E04               	addlw	4
 13343  145D  0086               	movwf	6
 13344  145E  3001               	movlw	1	; select bank2/3
 13345  145F  0087               	movwf	7
 13346  1460  0822               	movf	??_setDimmerLights_Initialization,w
 13347  1461  0081               	movwf	1
 13348  1462  0008               	return
 13349  1463                     __end_of_setDimmerLights_Initialization:	
 13350                           
 13351                           	psect	text80
 13352  1F16                     __ptext80:	
 13353 ;; *************** function _Dimmer_Initialization *****************
 13354 ;; Defined at:
 13355 ;;		line 904 in file "../src/Dimmer_B1.c"
 13356 ;; Parameters:    Size  Location     Type
 13357 ;;		None
 13358 ;; Auto vars:     Size  Location     Type
 13359 ;;		None
 13360 ;; Return value:  Size  Location     Type
 13361 ;;		None               void
 13362 ;; Registers used:
 13363 ;;		None
 13364 ;; Tracked objects:
 13365 ;;		On entry : 0/0
 13366 ;;		On exit  : 0/0
 13367 ;;		Unchanged: 0/0
 13368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13373 ;;Total ram usage:        0 bytes
 13374 ;; Hardware stack levels used:    1
 13375 ;; Hardware stack levels required when called:    5
 13376 ;; This function calls:
 13377 ;;		Nothing
 13378 ;; This function is called by:
 13379 ;;		_DimmerLights_Initialization
 13380 ;; This function uses a non-reentrant model
 13381 ;;
 13382                           
 13383                           
 13384                           ;psect for function _Dimmer_Initialization
 13385  1F16                     _Dimmer_Initialization:	
 13386                           
 13387                           ;incstack = 0
 13388                           ; Regs used in _Dimmer_Initialization: []
 13389  1F16  0008               	return
 13390  1F17                     __end_of_Dimmer_Initialization:	
 13391                           
 13392                           	psect	text81
 13393  1F5F                     __ptext81:	
 13394 ;; *************** function _DelayOff_Main *****************
 13395 ;; Defined at:
 13396 ;;		line 41 in file "../src/DelayOff_B1.c"
 13397 ;; Parameters:    Size  Location     Type
 13398 ;;		None
 13399 ;; Auto vars:     Size  Location     Type
 13400 ;;		None
 13401 ;; Return value:  Size  Location     Type
 13402 ;;		None               void
 13403 ;; Registers used:
 13404 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13405 ;; Tracked objects:
 13406 ;;		On entry : 0/0
 13407 ;;		On exit  : 0/0
 13408 ;;		Unchanged: 0/0
 13409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13414 ;;Total ram usage:        0 bytes
 13415 ;; Hardware stack levels used:    1
 13416 ;; Hardware stack levels required when called:   11
 13417 ;; This function calls:
 13418 ;;		_DlyOff_Main
 13419 ;; This function is called by:
 13420 ;;		_main
 13421 ;; This function uses a non-reentrant model
 13422 ;;
 13423                           
 13424                           
 13425                           ;psect for function _DelayOff_Main
 13426  1F5F                     _DelayOff_Main:	
 13427                           
 13428                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 13429                           
 13430                           ;incstack = 0
 13431                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13432  1F5F  3001               	movlw	1
 13433  1F60  3197  2726  319F   	fcall	_DlyOff_Main
 13434                           
 13435                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 13436  1F63  3002               	movlw	2
 13437  1F64  3197  2726         	fcall	_DlyOff_Main
 13438  1F66  0008               	return
 13439  1F67                     __end_of_DelayOff_Main:	
 13440                           
 13441                           	psect	text82
 13442  1726                     __ptext82:	
 13443 ;; *************** function _DlyOff_Main *****************
 13444 ;; Defined at:
 13445 ;;		line 61 in file "../src/DelayOff_B1.c"
 13446 ;; Parameters:    Size  Location     Type
 13447 ;;  sw              1    wreg     unsigned char 
 13448 ;; Auto vars:     Size  Location     Type
 13449 ;;  sw              1   24[BANK0 ] unsigned char 
 13450 ;; Return value:  Size  Location     Type
 13451 ;;		None               void
 13452 ;; Registers used:
 13453 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13454 ;; Tracked objects:
 13455 ;;		On entry : 0/0
 13456 ;;		On exit  : 0/0
 13457 ;;		Unchanged: 0/0
 13458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13460 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13461 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13462 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13463 ;;Total ram usage:        3 bytes
 13464 ;; Hardware stack levels used:    1
 13465 ;; Hardware stack levels required when called:   10
 13466 ;; This function calls:
 13467 ;;		_DelayOffPointSelect
 13468 ;;		_setDimmerLights_ErrorClose
 13469 ;; This function is called by:
 13470 ;;		_DelayOff_Main
 13471 ;; This function uses a non-reentrant model
 13472 ;;
 13473                           
 13474                           
 13475                           ;psect for function _DlyOff_Main
 13476  1726                     _DlyOff_Main:	
 13477                           
 13478                           ;incstack = 0
 13479                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13480                           ;DlyOff_Main@sw stored from wreg
 13481  1726  0020               	movlb	0	; select bank0
 13482  1727  00B8               	movwf	DlyOff_Main@sw
 13483                           
 13484                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 13485  1728  0838               	movf	DlyOff_Main@sw,w
 13486  1729  3191  21A4  3197   	fcall	_DelayOffPointSelect
 13487                           
 13488                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 13489  172C  0878               	movf	_DelayOff,w
 13490  172D  0086               	movwf	6
 13491  172E  0187               	clrf	7
 13492  172F  1C81               	btfss	1,1
 13493  1730  0008               	return
 13494                           
 13495                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 13496  1731  0878               	movf	_DelayOff,w
 13497  1732  0086               	movwf	6
 13498  1733  0187               	clrf	7
 13499  1734  3001               	movlw	1
 13500  1735  0781               	addwf	1,f
 13501  1736  3141               	addfsr 1,1
 13502  1737  1803               	skipnc
 13503  1738  0A81               	incf	1,f
 13504                           
 13505                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 13506  1739  0878               	movf	_DelayOff,w
 13507  173A  0086               	movwf	6
 13508  173B  0187               	clrf	7
 13509  173C  3F40               	moviw [0]fsr1
 13510  173D  0020               	movlb	0	; select bank0
 13511  173E  00B6               	movwf	??_DlyOff_Main
 13512  173F  3F41               	moviw [1]fsr1
 13513  1740  00B7               	movwf	??_DlyOff_Main+1
 13514  1741  3016               	movlw	22
 13515  1742  0237               	subwf	??_DlyOff_Main+1,w
 13516  1743  3012               	movlw	18
 13517  1744  1903               	skipnz
 13518  1745  0236               	subwf	??_DlyOff_Main,w
 13519  1746  1C03               	skipc
 13520  1747  0008               	return
 13521                           
 13522                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 13523  1748  0878               	movf	_DelayOff,w
 13524  1749  0086               	movwf	6
 13525  174A  0187               	clrf	7
 13526  174B  3000               	movlw	0
 13527  174C  3FC0               	movwi [0]fsr1
 13528  174D  3FC1               	movwi [1]fsr1
 13529                           
 13530                           ;DelayOff_B1.c: 68: RB5 = RB5 == 1 ? 0 : 1;
 13531  174E  3020               	movlw	32
 13532  174F  068D               	xorwf	13,f
 13533                           
 13534                           ;DelayOff_B1.c: 69: DelayOff->MinuteTime++;
 13535  1750  3001               	movlw	1
 13536  1751  00B6               	movwf	??_DlyOff_Main
 13537  1752  0878               	movf	_DelayOff,w
 13538  1753  0086               	movwf	6
 13539  1754  0187               	clrf	7
 13540  1755  0836               	movf	??_DlyOff_Main,w
 13541  1756  0781               	addwf	1,f
 13542                           
 13543                           ;DelayOff_B1.c: 70: if (DelayOff->MinuteTime >= DelayOff->Value) {
 13544  1757  0878               	movf	_DelayOff,w
 13545  1758  0086               	movwf	6
 13546  1759  0187               	clrf	7
 13547  175A  0878               	movf	_DelayOff,w
 13548  175B  0084               	movwf	4
 13549  175C  0185               	clrf	5
 13550  175D  0800               	movf	0,w
 13551  175E  0201               	subwf	1,w
 13552  175F  1C03               	skipc
 13553  1760  0008               	return
 13554                           
 13555                           ;DelayOff_B1.c: 71: DelayOff->MinuteTime = 0;
 13556  1761  0878               	movf	_DelayOff,w
 13557  1762  0086               	movwf	6
 13558  1763  0187               	clrf	7
 13559  1764  0181               	clrf	1
 13560                           
 13561                           ;DelayOff_B1.c: 72: DelayOff->GO = 0;
 13562  1765  0878               	movf	_DelayOff,w
 13563  1766  0086               	movwf	6
 13564  1767  0187               	clrf	7
 13565  1768  1081               	bcf	1,1
 13566                           
 13567                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 13568  1769  0838               	movf	DlyOff_Main@sw,w
 13569  176A  318B  231E         	fcall	_setDimmerLights_ErrorClose
 13570  176C  0008               	return
 13571  176D                     __end_of_DlyOff_Main:	
 13572                           
 13573                           	psect	text83
 13574  0B1E                     __ptext83:	
 13575 ;; *************** function _setDimmerLights_ErrorClose *****************
 13576 ;; Defined at:
 13577 ;;		line 574 in file "../src/Dimmer_B1.c"
 13578 ;; Parameters:    Size  Location     Type
 13579 ;;  lights          1    wreg     unsigned char 
 13580 ;; Auto vars:     Size  Location     Type
 13581 ;;  lights          1   19[BANK0 ] unsigned char 
 13582 ;;  i               2   20[BANK0 ] int 
 13583 ;;  count           1   18[BANK0 ] unsigned char 
 13584 ;; Return value:  Size  Location     Type
 13585 ;;		None               void
 13586 ;; Registers used:
 13587 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13588 ;; Tracked objects:
 13589 ;;		On entry : 0/0
 13590 ;;		On exit  : 0/0
 13591 ;;		Unchanged: 0/0
 13592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13594 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13595 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13596 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13597 ;;Total ram usage:        5 bytes
 13598 ;; Hardware stack levels used:    1
 13599 ;; Hardware stack levels required when called:    9
 13600 ;; This function calls:
 13601 ;;		_DimmerLightsPointSelect
 13602 ;;		_getDimmerLights_Status
 13603 ;;		_setDimmerLights_SwOff
 13604 ;; This function is called by:
 13605 ;;		_DlyOff_Main
 13606 ;;		_setControl_Lights_Table
 13607 ;;		_setMain_Exception
 13608 ;; This function uses a non-reentrant model
 13609 ;;
 13610                           
 13611                           
 13612                           ;psect for function _setDimmerLights_ErrorClose
 13613  0B1E                     _setDimmerLights_ErrorClose:	
 13614                           
 13615                           ;incstack = 0
 13616                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13617                           ;setDimmerLights_ErrorClose@lights stored from wreg
 13618  0B1E  0020               	movlb	0	; select bank0
 13619  0B1F  00B3               	movwf	setDimmerLights_ErrorClose@lights
 13620                           
 13621                           ;Dimmer_B1.c: 575: if (lights == 255) {
 13622  0B20  0833               	movf	setDimmerLights_ErrorClose@lights,w
 13623  0B21  3AFF               	xorlw	255
 13624  0B22  1D03               	skipz
 13625  0B23  2B5B               	goto	l5771
 13626                           
 13627                           ;Dimmer_B1.c: 580: char count = 2;
 13628  0B24  3002               	movlw	2
 13629  0B25  00B1               	movwf	??_setDimmerLights_ErrorClose
 13630  0B26  0831               	movf	??_setDimmerLights_ErrorClose,w
 13631  0B27  00B2               	movwf	setDimmerLights_ErrorClose@count
 13632                           
 13633                           ;Dimmer_B1.c: 585: for (int i = 0; i < count; i++) {
 13634  0B28  01B4               	clrf	setDimmerLights_ErrorClose@i
 13635  0B29  01B5               	clrf	setDimmerLights_ErrorClose@i+1
 13636  0B2A                     l5769:	
 13637  0B2A  0835               	movf	setDimmerLights_ErrorClose@i+1,w
 13638  0B2B  3A80               	xorlw	128
 13639  0B2C  00B1               	movwf	??_setDimmerLights_ErrorClose
 13640  0B2D  3080               	movlw	128
 13641  0B2E  0231               	subwf	??_setDimmerLights_ErrorClose,w
 13642  0B2F  1D03               	skipz
 13643  0B30  2B33               	goto	u4665
 13644  0B31  0832               	movf	setDimmerLights_ErrorClose@count,w
 13645  0B32  0234               	subwf	setDimmerLights_ErrorClose@i,w
 13646  0B33                     u4665:	
 13647  0B33  1803               	btfsc	3,0
 13648  0B34  0008               	return
 13649                           
 13650                           ;Dimmer_B1.c: 586: DimmerLightsPointSelect(i + 1);
 13651  0B35  0020               	movlb	0	; select bank0
 13652  0B36  0834               	movf	setDimmerLights_ErrorClose@i,w
 13653  0B37  3E01               	addlw	1
 13654  0B38  3191  2130  318B   	fcall	_DimmerLightsPointSelect
 13655                           
 13656                           ;Dimmer_B1.c: 587: if (getDimmerLights_Status(i + 1) == 1) {
 13657  0B3B  0020               	movlb	0	; select bank0
 13658  0B3C  0834               	movf	setDimmerLights_ErrorClose@i,w
 13659  0B3D  3E01               	addlw	1
 13660  0B3E  3190  2093  318B   	fcall	_getDimmerLights_Status
 13661  0B41  3A01               	xorlw	1
 13662  0B42  1D03               	skipz
 13663  0B43  2B55               	goto	l5767
 13664                           
 13665                           ;Dimmer_B1.c: 588: DimmerLights->SwFlag = 1;
 13666  0B44  0020               	movlb	0	; select bank0
 13667  0B45  086F               	movf	_DimmerLights,w
 13668  0B46  3E09               	addlw	9
 13669  0B47  0086               	movwf	6
 13670  0B48  3001               	movlw	1	; select bank2/3
 13671  0B49  0087               	movwf	7
 13672  0B4A  1701               	bsf	1,6
 13673                           
 13674                           ;Dimmer_B1.c: 589: DimmerLights->Status = 0;
 13675  0B4B  086F               	movf	_DimmerLights,w
 13676  0B4C  0086               	movwf	6
 13677  0B4D  3001               	movlw	1	; select bank2/3
 13678  0B4E  0087               	movwf	7
 13679  0B4F  1281               	bcf	1,5
 13680                           
 13681                           ;Dimmer_B1.c: 590: setDimmerLights_SwOff(i + 1);
 13682  0B50  0834               	movf	setDimmerLights_ErrorClose@i,w
 13683  0B51  3E01               	addlw	1
 13684  0B52  3197  276D  318B   	fcall	_setDimmerLights_SwOff
 13685  0B55                     l5767:	
 13686  0B55  3001               	movlw	1
 13687  0B56  0020               	movlb	0	; select bank0
 13688  0B57  07B4               	addwf	setDimmerLights_ErrorClose@i,f
 13689  0B58  3000               	movlw	0
 13690  0B59  3DB5               	addwfc	setDimmerLights_ErrorClose@i+1,f
 13691  0B5A  2B2A               	goto	l5769
 13692  0B5B                     l5771:	
 13693                           ;Dimmer_B1.c: 591: }
 13694                           ;Dimmer_B1.c: 592: }
 13695                           ;Dimmer_B1.c: 593: } else {
 13696                           
 13697                           
 13698                           ;Dimmer_B1.c: 594: DimmerLightsPointSelect(lights);
 13699  0B5B  0020               	movlb	0	; select bank0
 13700  0B5C  0833               	movf	setDimmerLights_ErrorClose@lights,w
 13701  0B5D  3191  2130  318B   	fcall	_DimmerLightsPointSelect
 13702                           
 13703                           ;Dimmer_B1.c: 595: if (getDimmerLights_Status(lights) == 1) {
 13704  0B60  0020               	movlb	0	; select bank0
 13705  0B61  0833               	movf	setDimmerLights_ErrorClose@lights,w
 13706  0B62  3190  2093  318B   	fcall	_getDimmerLights_Status
 13707  0B65  3A01               	xorlw	1
 13708  0B66  1D03               	skipz
 13709  0B67  0008               	return
 13710                           
 13711                           ;Dimmer_B1.c: 596: DimmerLights->SwFlag = 1;
 13712  0B68  0020               	movlb	0	; select bank0
 13713  0B69  086F               	movf	_DimmerLights,w
 13714  0B6A  3E09               	addlw	9
 13715  0B6B  0086               	movwf	6
 13716  0B6C  3001               	movlw	1	; select bank2/3
 13717  0B6D  0087               	movwf	7
 13718  0B6E  1701               	bsf	1,6
 13719                           
 13720                           ;Dimmer_B1.c: 597: DimmerLights->Status = 0;
 13721  0B6F  086F               	movf	_DimmerLights,w
 13722  0B70  0086               	movwf	6
 13723  0B71  3001               	movlw	1	; select bank2/3
 13724  0B72  0087               	movwf	7
 13725  0B73  1281               	bcf	1,5
 13726                           
 13727                           ;Dimmer_B1.c: 598: setDimmerLights_SwOff(lights);
 13728  0B74  0833               	movf	setDimmerLights_ErrorClose@lights,w
 13729  0B75  3197  276D         	fcall	_setDimmerLights_SwOff
 13730  0B77  0008               	return
 13731  0B78                     __end_of_setDimmerLights_ErrorClose:	
 13732                           
 13733                           	psect	text84
 13734  176D                     __ptext84:	
 13735 ;; *************** function _setDimmerLights_SwOff *****************
 13736 ;; Defined at:
 13737 ;;		line 536 in file "../src/Dimmer_B1.c"
 13738 ;; Parameters:    Size  Location     Type
 13739 ;;  sw              1    wreg     unsigned char 
 13740 ;; Auto vars:     Size  Location     Type
 13741 ;;  sw              1   16[BANK0 ] unsigned char 
 13742 ;;  command         1   15[BANK0 ] unsigned char 
 13743 ;; Return value:  Size  Location     Type
 13744 ;;		None               void
 13745 ;; Registers used:
 13746 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13747 ;; Tracked objects:
 13748 ;;		On entry : 0/0
 13749 ;;		On exit  : 0/0
 13750 ;;		Unchanged: 0/0
 13751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13753 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13755 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13756 ;;Total ram usage:        2 bytes
 13757 ;; Hardware stack levels used:    1
 13758 ;; Hardware stack levels required when called:    8
 13759 ;; This function calls:
 13760 ;;		_DimmerLightsPointSelect
 13761 ;;		_getDelayOff_GO
 13762 ;;		_setDelayOff_GO
 13763 ;;		_setDimmerLights_Trigger
 13764 ;;		_setDimmerLights_TriggerAdj
 13765 ;; This function is called by:
 13766 ;;		_setDimmerLights_ErrorClose
 13767 ;;		_setRFSW_Control
 13768 ;;		_setSw_Main
 13769 ;; This function uses a non-reentrant model
 13770 ;;
 13771                           
 13772                           
 13773                           ;psect for function _setDimmerLights_SwOff
 13774  176D                     _setDimmerLights_SwOff:	
 13775                           
 13776                           ;incstack = 0
 13777                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13778                           ;setDimmerLights_SwOff@sw stored from wreg
 13779  176D  0020               	movlb	0	; select bank0
 13780  176E  00B0               	movwf	setDimmerLights_SwOff@sw
 13781                           
 13782                           ;Dimmer_B1.c: 537: DimmerLightsPointSelect(sw);
 13783  176F  0830               	movf	setDimmerLights_SwOff@sw,w
 13784  1770  3191  2130  3197   	fcall	_DimmerLightsPointSelect
 13785                           
 13786                           ;Dimmer_B1.c: 538: char command = DimmerLights->Status == 1 ? 1 : 0;
 13787  1773  0020               	movlb	0	; select bank0
 13788  1774  086F               	movf	_DimmerLights,w
 13789  1775  0086               	movwf	6
 13790  1776  3001               	movlw	1	; select bank2/3
 13791  1777  0087               	movwf	7
 13792  1778  3000               	movlw	0
 13793  1779  1A81               	btfsc	1,5
 13794  177A  3001               	movlw	1
 13795  177B  00AF               	movwf	setDimmerLights_SwOff@command
 13796                           
 13797                           ;Dimmer_B1.c: 539: if (DimmerLights->SwFlag == 1) {
 13798  177C  086F               	movf	_DimmerLights,w
 13799  177D  3E09               	addlw	9
 13800  177E  0086               	movwf	6
 13801  177F  3001               	movlw	1	; select bank2/3
 13802  1780  0087               	movwf	7
 13803  1781  1F01               	btfss	1,6
 13804  1782  0008               	return
 13805                           
 13806                           ;Dimmer_B1.c: 540: DimmerLights->SwFlag = 0;
 13807  1783  086F               	movf	_DimmerLights,w
 13808  1784  3E09               	addlw	9
 13809  1785  0086               	movwf	6
 13810  1786  3001               	movlw	1	; select bank2/3
 13811  1787  0087               	movwf	7
 13812  1788  1301               	bcf	1,6
 13813                           
 13814                           ;Dimmer_B1.c: 541: if (DimmerLights->Status == 1) {
 13815  1789  086F               	movf	_DimmerLights,w
 13816  178A  0086               	movwf	6
 13817  178B  3001               	movlw	1	; select bank2/3
 13818  178C  0087               	movwf	7
 13819  178D  1E81               	btfss	1,5
 13820  178E  2FA1               	goto	l5629
 13821                           
 13822                           ;Dimmer_B1.c: 542: if (DimmerLights->SwAdj == 1) {
 13823  178F  086F               	movf	_DimmerLights,w
 13824  1790  3E09               	addlw	9
 13825  1791  0086               	movwf	6
 13826  1792  3001               	movlw	1	; select bank2/3
 13827  1793  0087               	movwf	7
 13828  1794  1F81               	btfss	1,7
 13829  1795  0008               	return
 13830                           
 13831                           ;Dimmer_B1.c: 543: DimmerLights->SwAdj = 0;
 13832  1796  086F               	movf	_DimmerLights,w
 13833  1797  3E09               	addlw	9
 13834  1798  0086               	movwf	6
 13835  1799  3001               	movlw	1	; select bank2/3
 13836  179A  0087               	movwf	7
 13837  179B  1381               	bcf	1,7
 13838                           
 13839                           ;Dimmer_B1.c: 544: setDimmerLights_TriggerAdj(sw, 0);
 13840  179C  01A2               	clrf	setDimmerLights_TriggerAdj@command
 13841  179D  0830               	movf	setDimmerLights_SwOff@sw,w
 13842  179E  3193  230A         	fcall	_setDimmerLights_TriggerAdj
 13843                           
 13844                           ;Dimmer_B1.c: 545: }
 13845                           ;Dimmer_B1.c: 546: } else {
 13846  17A0  0008               	return
 13847  17A1                     l5629:	
 13848                           
 13849                           ;Dimmer_B1.c: 547: setDimmerLights_Trigger(sw, 0);
 13850  17A1  0020               	movlb	0	; select bank0
 13851  17A2  01A2               	clrf	setDimmerLights_Trigger@command
 13852  17A3  0830               	movf	setDimmerLights_SwOff@sw,w
 13853  17A4  3192  22AE  3197   	fcall	_setDimmerLights_Trigger
 13854                           
 13855                           ;Dimmer_B1.c: 549: if (getDelayOff_GO(sw) == 1) {
 13856  17A7  0020               	movlb	0	; select bank0
 13857  17A8  0830               	movf	setDimmerLights_SwOff@sw,w
 13858  17A9  3190  2075  3197   	fcall	_getDelayOff_GO
 13859  17AC  3A01               	xorlw	1
 13860  17AD  1D03               	skipz
 13861  17AE  0008               	return
 13862                           
 13863                           ;Dimmer_B1.c: 550: setDelayOff_GO(sw, 0, 0);
 13864  17AF  0020               	movlb	0	; select bank0
 13865  17B0  01AA               	clrf	setDelayOff_GO@command
 13866  17B1  01AB               	clrf	setDelayOff_GO@value
 13867  17B2  0830               	movf	setDimmerLights_SwOff@sw,w
 13868  17B3  318A  2215         	fcall	_setDelayOff_GO
 13869  17B5  0008               	return
 13870  17B6                     __end_of_setDimmerLights_SwOff:	
 13871                           
 13872                           	psect	text85
 13873  130A                     __ptext85:	
 13874 ;; *************** function _setDimmerLights_TriggerAdj *****************
 13875 ;; Defined at:
 13876 ;;		line 785 in file "../src/Dimmer_B1.c"
 13877 ;; Parameters:    Size  Location     Type
 13878 ;;  lights          1    wreg     unsigned char 
 13879 ;;  command         1    2[BANK0 ] unsigned char 
 13880 ;; Auto vars:     Size  Location     Type
 13881 ;;  lights          1    4[BANK0 ] unsigned char 
 13882 ;; Return value:  Size  Location     Type
 13883 ;;		None               void
 13884 ;; Registers used:
 13885 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13886 ;; Tracked objects:
 13887 ;;		On entry : 0/0
 13888 ;;		On exit  : 0/0
 13889 ;;		Unchanged: 0/0
 13890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13891 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13892 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13893 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13894 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13895 ;;Total ram usage:        3 bytes
 13896 ;; Hardware stack levels used:    1
 13897 ;; Hardware stack levels required when called:    6
 13898 ;; This function calls:
 13899 ;;		_DimmerLightsPointSelect
 13900 ;; This function is called by:
 13901 ;;		_setDimmerLights_SwOff
 13902 ;;		_setDimmerLights_AdjControl
 13903 ;; This function uses a non-reentrant model
 13904 ;;
 13905                           
 13906                           
 13907                           ;psect for function _setDimmerLights_TriggerAdj
 13908  130A                     _setDimmerLights_TriggerAdj:	
 13909                           
 13910                           ;incstack = 0
 13911                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13912                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 13913  130A  0020               	movlb	0	; select bank0
 13914  130B  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 13915                           
 13916                           ;Dimmer_B1.c: 786: DimmerLightsPointSelect(lights);
 13917  130C  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 13918  130D  3191  2130         	fcall	_DimmerLightsPointSelect
 13919                           
 13920                           ;Dimmer_B1.c: 787: DimmerLights->TriggerAdj = 1;
 13921  130F  0020               	movlb	0	; select bank0
 13922  1310  086F               	movf	_DimmerLights,w
 13923  1311  3E08               	addlw	8
 13924  1312  0086               	movwf	6
 13925  1313  3001               	movlw	1	; select bank2/3
 13926  1314  0087               	movwf	7
 13927  1315  1601               	bsf	1,4
 13928                           
 13929                           ;Dimmer_B1.c: 788: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 13930  1316  0822               	movf	setDimmerLights_TriggerAdj@command,w
 13931  1317  3A01               	xorlw	1
 13932  1318  3000               	movlw	0
 13933  1319  1903               	skipnz
 13934  131A  3001               	movlw	1
 13935  131B  00A3               	movwf	??_setDimmerLights_TriggerAdj
 13936  131C  086F               	movf	_DimmerLights,w
 13937  131D  3E08               	addlw	8
 13938  131E  0086               	movwf	6
 13939  131F  3001               	movlw	1	; select bank2/3
 13940  1320  0087               	movwf	7
 13941  1321  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 13942  1322  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 13943  1323  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 13944  1324  0801               	movf	1,w
 13945  1325  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 13946  1326  39F7               	andlw	-9
 13947  1327  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 13948  1328  0081               	movwf	1
 13949  1329  0008               	return
 13950  132A                     __end_of_setDimmerLights_TriggerAdj:	
 13951                           
 13952                           	psect	text86
 13953  12AE                     __ptext86:	
 13954 ;; *************** function _setDimmerLights_Trigger *****************
 13955 ;; Defined at:
 13956 ;;		line 779 in file "../src/Dimmer_B1.c"
 13957 ;; Parameters:    Size  Location     Type
 13958 ;;  lights          1    wreg     unsigned char 
 13959 ;;  command         1    2[BANK0 ] unsigned char 
 13960 ;; Auto vars:     Size  Location     Type
 13961 ;;  lights          1    4[BANK0 ] unsigned char 
 13962 ;; Return value:  Size  Location     Type
 13963 ;;		None               void
 13964 ;; Registers used:
 13965 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13966 ;; Tracked objects:
 13967 ;;		On entry : 0/0
 13968 ;;		On exit  : 0/0
 13969 ;;		Unchanged: 0/0
 13970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13971 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13972 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13973 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13974 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13975 ;;Total ram usage:        3 bytes
 13976 ;; Hardware stack levels used:    1
 13977 ;; Hardware stack levels required when called:    6
 13978 ;; This function calls:
 13979 ;;		_DimmerLightsPointSelect
 13980 ;; This function is called by:
 13981 ;;		_setDimmerLights_SwOn
 13982 ;;		_setDimmerLights_SwOff
 13983 ;; This function uses a non-reentrant model
 13984 ;;
 13985                           
 13986                           
 13987                           ;psect for function _setDimmerLights_Trigger
 13988  12AE                     _setDimmerLights_Trigger:	
 13989                           
 13990                           ;incstack = 0
 13991                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13992                           ;setDimmerLights_Trigger@lights stored from wreg
 13993  12AE  0020               	movlb	0	; select bank0
 13994  12AF  00A4               	movwf	setDimmerLights_Trigger@lights
 13995                           
 13996                           ;Dimmer_B1.c: 780: DimmerLightsPointSelect(lights);
 13997  12B0  0824               	movf	setDimmerLights_Trigger@lights,w
 13998  12B1  3191  2130         	fcall	_DimmerLightsPointSelect
 13999                           
 14000                           ;Dimmer_B1.c: 781: DimmerLights->Trigger = 1;
 14001  12B3  0020               	movlb	0	; select bank0
 14002  12B4  086F               	movf	_DimmerLights,w
 14003  12B5  3E08               	addlw	8
 14004  12B6  0086               	movwf	6
 14005  12B7  3001               	movlw	1	; select bank2/3
 14006  12B8  0087               	movwf	7
 14007  12B9  1501               	bsf	1,2
 14008                           
 14009                           ;Dimmer_B1.c: 782: DimmerLights->Switch = command == 1 ? 1 : 0;
 14010  12BA  0822               	movf	setDimmerLights_Trigger@command,w
 14011  12BB  3A01               	xorlw	1
 14012  12BC  3000               	movlw	0
 14013  12BD  1903               	skipnz
 14014  12BE  3001               	movlw	1
 14015  12BF  00A3               	movwf	??_setDimmerLights_Trigger
 14016  12C0  086F               	movf	_DimmerLights,w
 14017  12C1  3E08               	addlw	8
 14018  12C2  0086               	movwf	6
 14019  12C3  3001               	movlw	1	; select bank2/3
 14020  12C4  0087               	movwf	7
 14021  12C5  0DA3               	rlf	??_setDimmerLights_Trigger,f
 14022  12C6  0801               	movf	1,w
 14023  12C7  0623               	xorwf	??_setDimmerLights_Trigger,w
 14024  12C8  39FD               	andlw	-3
 14025  12C9  0623               	xorwf	??_setDimmerLights_Trigger,w
 14026  12CA  0081               	movwf	1
 14027  12CB  0008               	return
 14028  12CC                     __end_of_setDimmerLights_Trigger:	
 14029                           
 14030                           	psect	text87
 14031  0A15                     __ptext87:	
 14032 ;; *************** function _setDelayOff_GO *****************
 14033 ;; Defined at:
 14034 ;;		line 83 in file "../src/DelayOff_B1.c"
 14035 ;; Parameters:    Size  Location     Type
 14036 ;;  sw              1    wreg     unsigned char 
 14037 ;;  command         1   10[BANK0 ] unsigned char 
 14038 ;;  value           1   11[BANK0 ] unsigned char 
 14039 ;; Auto vars:     Size  Location     Type
 14040 ;;  sw              1   14[BANK0 ] unsigned char 
 14041 ;; Return value:  Size  Location     Type
 14042 ;;		None               void
 14043 ;; Registers used:
 14044 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14045 ;; Tracked objects:
 14046 ;;		On entry : 0/0
 14047 ;;		On exit  : 0/0
 14048 ;;		Unchanged: 0/0
 14049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14050 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14051 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14052 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14053 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14054 ;;Total ram usage:        5 bytes
 14055 ;; Hardware stack levels used:    1
 14056 ;; Hardware stack levels required when called:    7
 14057 ;; This function calls:
 14058 ;;		_DelayOffPointSelect
 14059 ;;		_DelayTimejudge
 14060 ;; This function is called by:
 14061 ;;		_setDimmerLights_SwOff
 14062 ;;		_setRFSW_Control
 14063 ;; This function uses a non-reentrant model
 14064 ;;
 14065                           
 14066                           
 14067                           ;psect for function _setDelayOff_GO
 14068  0A15                     _setDelayOff_GO:	
 14069                           
 14070                           ;incstack = 0
 14071                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14072                           ;setDelayOff_GO@sw stored from wreg
 14073  0A15  0020               	movlb	0	; select bank0
 14074  0A16  00AE               	movwf	setDelayOff_GO@sw
 14075                           
 14076                           ;DelayOff_B1.c: 84: DelayOffPointSelect(sw);
 14077  0A17  082E               	movf	setDelayOff_GO@sw,w
 14078  0A18  3191  21A4  318A   	fcall	_DelayOffPointSelect
 14079                           
 14080                           ;DelayOff_B1.c: 86: DelayOff->GO = command == 1 ? 1 : 0;
 14081  0A1B  0020               	movlb	0	; select bank0
 14082  0A1C  082A               	movf	setDelayOff_GO@command,w
 14083  0A1D  3A01               	xorlw	1
 14084  0A1E  3000               	movlw	0
 14085  0A1F  1903               	skipnz
 14086  0A20  3001               	movlw	1
 14087  0A21  00AC               	movwf	??_setDelayOff_GO
 14088  0A22  0878               	movf	_DelayOff,w
 14089  0A23  0086               	movwf	6
 14090  0A24  0187               	clrf	7
 14091  0A25  0DAC               	rlf	??_setDelayOff_GO,f
 14092  0A26  0801               	movf	1,w
 14093  0A27  062C               	xorwf	??_setDelayOff_GO,w
 14094  0A28  39FD               	andlw	-3
 14095  0A29  062C               	xorwf	??_setDelayOff_GO,w
 14096  0A2A  0081               	movwf	1
 14097                           
 14098                           ;DelayOff_B1.c: 87: if (command == 1) {
 14099  0A2B  082A               	movf	setDelayOff_GO@command,w
 14100  0A2C  3A01               	xorlw	1
 14101  0A2D  1D03               	skipz
 14102  0A2E  2A58               	goto	l5539
 14103                           
 14104                           ;DelayOff_B1.c: 88: DelayOff->Value = DelayTimejudge(value);
 14105  0A2F  082B               	movf	setDelayOff_GO@value,w
 14106  0A30  3194  24B5  318A   	fcall	_DelayTimejudge
 14107  0A33  0020               	movlb	0	; select bank0
 14108  0A34  00AC               	movwf	??_setDelayOff_GO
 14109  0A35  0878               	movf	_DelayOff,w
 14110  0A36  0086               	movwf	6
 14111  0A37  0187               	clrf	7
 14112  0A38  082C               	movf	??_setDelayOff_GO,w
 14113  0A39  0081               	movwf	1
 14114                           
 14115                           ;DelayOff_B1.c: 89: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 14116  0A3A  300F               	movlw	15
 14117  0A3B  052B               	andwf	setDelayOff_GO@value,w
 14118  0A3C  00AC               	movwf	??_setDelayOff_GO
 14119  0A3D  082C               	movf	??_setDelayOff_GO,w
 14120  0A3E  3A05               	xorlw	5
 14121  0A3F  1903               	skipnz
 14122  0A40  2A45               	goto	l5533
 14123  0A41  082B               	movf	setDelayOff_GO@value,w
 14124  0A42  390F               	andlw	15
 14125  0A43  1D03               	btfss	3,2
 14126  0A44  2A4B               	goto	l5537
 14127  0A45                     l5533:	
 14128  0A45  3026               	movlw	38
 14129  0A46  022B               	subwf	setDelayOff_GO@value,w
 14130  0A47  1803               	skipnc
 14131  0A48  2A4B               	goto	l5537
 14132                           
 14133                           ;DelayOff_B1.c: 90: product->Data[26 + sw]=value;
 14134  0A49  082B               	movf	setDelayOff_GO@value,w
 14135  0A4A  2A4C               	goto	L6
 14136  0A4B                     l5537:	
 14137                           ;DelayOff_B1.c: 91: } else {
 14138                           
 14139                           
 14140                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=0x05;
 14141  0A4B  3005               	movlw	5
 14142  0A4C                     L6:	
 14143  0A4C  00AC               	movwf	??_setDelayOff_GO
 14144  0A4D  082E               	movf	setDelayOff_GO@sw,w
 14145  0A4E  3E1A               	addlw	26
 14146  0A4F  076E               	addwf	_product,w
 14147  0A50  00AD               	movwf	??_setDelayOff_GO+1
 14148  0A51  082D               	movf	??_setDelayOff_GO+1,w
 14149  0A52  0086               	movwf	6
 14150  0A53  3001               	movlw	1	; select bank2/3
 14151  0A54  0087               	movwf	7
 14152  0A55  082C               	movf	??_setDelayOff_GO,w
 14153  0A56  0081               	movwf	1
 14154                           
 14155                           ;DelayOff_B1.c: 93: }
 14156                           ;DelayOff_B1.c: 94: } else {
 14157  0A57  2A61               	goto	l5541
 14158  0A58                     l5539:	
 14159                           
 14160                           ;DelayOff_B1.c: 95: product->Data[sw + 26]=0;
 14161  0A58  082E               	movf	setDelayOff_GO@sw,w
 14162  0A59  3E1A               	addlw	26
 14163  0A5A  076E               	addwf	_product,w
 14164  0A5B  00AC               	movwf	??_setDelayOff_GO
 14165  0A5C  082C               	movf	??_setDelayOff_GO,w
 14166  0A5D  0086               	movwf	6
 14167  0A5E  3001               	movlw	1	; select bank2/3
 14168  0A5F  0087               	movwf	7
 14169  0A60  0181               	clrf	1
 14170  0A61                     l5541:	
 14171                           
 14172                           ;DelayOff_B1.c: 96: }
 14173                           ;DelayOff_B1.c: 97: DelayOff->SecondTime = 0;
 14174  0A61  0878               	movf	_DelayOff,w
 14175  0A62  0086               	movwf	6
 14176  0A63  0187               	clrf	7
 14177  0A64  3000               	movlw	0
 14178  0A65  3FC0               	movwi [0]fsr1
 14179  0A66  3FC1               	movwi [1]fsr1
 14180                           
 14181                           ;DelayOff_B1.c: 98: DelayOff->MinuteTime = 0;
 14182  0A67  0878               	movf	_DelayOff,w
 14183  0A68  0086               	movwf	6
 14184  0A69  0187               	clrf	7
 14185  0A6A  0181               	clrf	1
 14186  0A6B  0008               	return
 14187  0A6C                     __end_of_setDelayOff_GO:	
 14188                           
 14189                           	psect	text88
 14190  14B5                     __ptext88:	
 14191 ;; *************** function _DelayTimejudge *****************
 14192 ;; Defined at:
 14193 ;;		line 110 in file "../src/DelayOff_B1.c"
 14194 ;; Parameters:    Size  Location     Type
 14195 ;;  value           1    wreg     unsigned char 
 14196 ;; Auto vars:     Size  Location     Type
 14197 ;;  value           1    9[BANK0 ] unsigned char 
 14198 ;;  k               1    8[BANK0 ] unsigned char 
 14199 ;;  j               1    7[BANK0 ] unsigned char 
 14200 ;;  i               1    6[BANK0 ] unsigned char 
 14201 ;; Return value:  Size  Location     Type
 14202 ;;                  1    wreg      unsigned char 
 14203 ;; Registers used:
 14204 ;;		wreg, status,2, status,0, pclath, cstack
 14205 ;; Tracked objects:
 14206 ;;		On entry : 0/0
 14207 ;;		On exit  : 0/0
 14208 ;;		Unchanged: 0/0
 14209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14211 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14212 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14213 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14214 ;;Total ram usage:        6 bytes
 14215 ;; Hardware stack levels used:    1
 14216 ;; Hardware stack levels required when called:    6
 14217 ;; This function calls:
 14218 ;;		___bmul
 14219 ;; This function is called by:
 14220 ;;		_setDelayOff_GO
 14221 ;; This function uses a non-reentrant model
 14222 ;;
 14223                           
 14224                           
 14225                           ;psect for function _DelayTimejudge
 14226  14B5                     _DelayTimejudge:	
 14227                           
 14228                           ;incstack = 0
 14229                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 14230                           ;DelayTimejudge@value stored from wreg
 14231  14B5  0020               	movlb	0	; select bank0
 14232  14B6  00A9               	movwf	DelayTimejudge@value
 14233                           
 14234                           ;DelayOff_B1.c: 111: char i = 5, j = 0, k = 0;
 14235  14B7  3005               	movlw	5
 14236  14B8  00A4               	movwf	??_DelayTimejudge
 14237  14B9  0824               	movf	??_DelayTimejudge,w
 14238  14BA  00A6               	movwf	DelayTimejudge@i
 14239  14BB  01A7               	clrf	DelayTimejudge@j
 14240  14BC  01A8               	clrf	DelayTimejudge@k
 14241                           
 14242                           ;DelayOff_B1.c: 112: if (value <= 0x30) {
 14243  14BD  3031               	movlw	49
 14244  14BE  0229               	subwf	DelayTimejudge@value,w
 14245  14BF  1803               	skipnc
 14246  14C0  2CDD               	goto	l5431
 14247                           
 14248                           ;DelayOff_B1.c: 113: j = value & 0x0f;
 14249  14C1  0829               	movf	DelayTimejudge@value,w
 14250  14C2  390F               	andlw	15
 14251  14C3  00A4               	movwf	??_DelayTimejudge
 14252  14C4  0824               	movf	??_DelayTimejudge,w
 14253  14C5  00A7               	movwf	DelayTimejudge@j
 14254                           
 14255                           ;DelayOff_B1.c: 114: k = (value >> 4) & 0x0f;
 14256  14C6  0829               	movf	DelayTimejudge@value,w
 14257  14C7  00A4               	movwf	??_DelayTimejudge
 14258  14C8  3004               	movlw	4
 14259  14C9                     u4245:	
 14260  14C9  36A4               	lsrf	??_DelayTimejudge,f
 14261  14CA  0B89               	decfsz	9,f
 14262  14CB  2CC9               	goto	u4245
 14263  14CC  0824               	movf	??_DelayTimejudge,w
 14264  14CD  390F               	andlw	15
 14265  14CE  00A5               	movwf	??_DelayTimejudge+1
 14266  14CF  0825               	movf	??_DelayTimejudge+1,w
 14267  14D0  00A8               	movwf	DelayTimejudge@k
 14268                           
 14269                           ;DelayOff_B1.c: 115: i = j + (k * 10);
 14270  14D1  300A               	movlw	10
 14271  14D2  00A4               	movwf	??_DelayTimejudge
 14272  14D3  0824               	movf	??_DelayTimejudge,w
 14273  14D4  00A0               	movwf	___bmul@multiplicand
 14274  14D5  0828               	movf	DelayTimejudge@k,w
 14275  14D6  3190  20E8         	fcall	___bmul
 14276  14D8  0020               	movlb	0	; select bank0
 14277  14D9  0727               	addwf	DelayTimejudge@j,w
 14278  14DA  00A5               	movwf	??_DelayTimejudge+1
 14279  14DB  0825               	movf	??_DelayTimejudge+1,w
 14280  14DC  00A6               	movwf	DelayTimejudge@i
 14281  14DD                     l5431:	
 14282                           
 14283                           ;DelayOff_B1.c: 116: }
 14284                           ;DelayOff_B1.c: 137: return i;
 14285  14DD  0826               	movf	DelayTimejudge@i,w
 14286  14DE  0008               	return
 14287  14DF                     __end_of_DelayTimejudge:	
 14288                           
 14289                           	psect	text89
 14290  10E8                     __ptext89:	
 14291 ;; *************** function ___bmul *****************
 14292 ;; Defined at:
 14293 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14294 ;; Parameters:    Size  Location     Type
 14295 ;;  multiplier      1    wreg     unsigned char 
 14296 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14297 ;; Auto vars:     Size  Location     Type
 14298 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14299 ;;  product         1    2[BANK0 ] unsigned char 
 14300 ;; Return value:  Size  Location     Type
 14301 ;;                  1    wreg      unsigned char 
 14302 ;; Registers used:
 14303 ;;		wreg, status,2, status,0
 14304 ;; Tracked objects:
 14305 ;;		On entry : 0/0
 14306 ;;		On exit  : 0/0
 14307 ;;		Unchanged: 0/0
 14308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14309 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14310 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14311 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14312 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14313 ;;Total ram usage:        4 bytes
 14314 ;; Hardware stack levels used:    1
 14315 ;; Hardware stack levels required when called:    5
 14316 ;; This function calls:
 14317 ;;		Nothing
 14318 ;; This function is called by:
 14319 ;;		_DelayTimejudge
 14320 ;; This function uses a non-reentrant model
 14321 ;;
 14322                           
 14323                           
 14324                           ;psect for function ___bmul
 14325  10E8                     ___bmul:	
 14326                           
 14327                           ;incstack = 0
 14328                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14329                           ;___bmul@multiplier stored from wreg
 14330  10E8  0020               	movlb	0	; select bank0
 14331  10E9  00A3               	movwf	___bmul@multiplier
 14332  10EA  01A2               	clrf	___bmul@product
 14333  10EB                     l5177:	
 14334  10EB  1C23               	btfss	___bmul@multiplier,0
 14335  10EC  28F1               	goto	l5181
 14336  10ED  0820               	movf	___bmul@multiplicand,w
 14337  10EE  00A1               	movwf	??___bmul
 14338  10EF  0821               	movf	??___bmul,w
 14339  10F0  07A2               	addwf	___bmul@product,f
 14340  10F1                     l5181:	
 14341  10F1  1003               	clrc
 14342  10F2  0DA0               	rlf	___bmul@multiplicand,f
 14343  10F3  1003               	clrc
 14344  10F4  0CA3               	rrf	___bmul@multiplier,f
 14345  10F5  08A3               	movf	___bmul@multiplier,f
 14346  10F6  1D03               	skipz
 14347  10F7  28EB               	goto	l5177
 14348  10F8  0822               	movf	___bmul@product,w
 14349  10F9  0008               	return
 14350  10FA                     __end_of___bmul:	
 14351                           
 14352                           	psect	text90
 14353  1075                     __ptext90:	
 14354 ;; *************** function _getDelayOff_GO *****************
 14355 ;; Defined at:
 14356 ;;		line 103 in file "../src/DelayOff_B1.c"
 14357 ;; Parameters:    Size  Location     Type
 14358 ;;  sw              1    wreg     unsigned char 
 14359 ;; Auto vars:     Size  Location     Type
 14360 ;;  sw              1    2[BANK0 ] unsigned char 
 14361 ;;  go              1    3[BANK0 ] unsigned char 
 14362 ;; Return value:  Size  Location     Type
 14363 ;;                  1    wreg      unsigned char 
 14364 ;; Registers used:
 14365 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14366 ;; Tracked objects:
 14367 ;;		On entry : 0/0
 14368 ;;		On exit  : 0/0
 14369 ;;		Unchanged: 0/0
 14370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14372 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14374 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14375 ;;Total ram usage:        2 bytes
 14376 ;; Hardware stack levels used:    1
 14377 ;; Hardware stack levels required when called:    6
 14378 ;; This function calls:
 14379 ;;		_DelayOffPointSelect
 14380 ;; This function is called by:
 14381 ;;		_setDimmerLights_SwOff
 14382 ;;		_setRFSW_Control
 14383 ;; This function uses a non-reentrant model
 14384 ;;
 14385                           
 14386                           
 14387                           ;psect for function _getDelayOff_GO
 14388  1075                     _getDelayOff_GO:	
 14389                           
 14390                           ;incstack = 0
 14391                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14392                           ;getDelayOff_GO@sw stored from wreg
 14393  1075  0020               	movlb	0	; select bank0
 14394  1076  00A2               	movwf	getDelayOff_GO@sw
 14395                           
 14396                           ;DelayOff_B1.c: 104: DelayOffPointSelect(sw);
 14397  1077  0822               	movf	getDelayOff_GO@sw,w
 14398  1078  3191  21A4         	fcall	_DelayOffPointSelect
 14399                           
 14400                           ;DelayOff_B1.c: 105: char go = DelayOff->GO == 1 ? 1 : 0;
 14401  107A  0878               	movf	_DelayOff,w
 14402  107B  0086               	movwf	6
 14403  107C  0187               	clrf	7
 14404  107D  3000               	movlw	0
 14405  107E  1881               	btfsc	1,1
 14406  107F  3001               	movlw	1
 14407  1080  0020               	movlb	0	; select bank0
 14408  1081  00A3               	movwf	getDelayOff_GO@go
 14409                           
 14410                           ;DelayOff_B1.c: 106: return go;
 14411  1082  0823               	movf	getDelayOff_GO@go,w
 14412  1083  0008               	return
 14413  1084                     __end_of_getDelayOff_GO:	
 14414                           
 14415                           	psect	text91
 14416  1093                     __ptext91:	
 14417 ;; *************** function _getDimmerLights_Status *****************
 14418 ;; Defined at:
 14419 ;;		line 457 in file "../src/Dimmer_B1.c"
 14420 ;; Parameters:    Size  Location     Type
 14421 ;;  lights          1    wreg     unsigned char 
 14422 ;; Auto vars:     Size  Location     Type
 14423 ;;  lights          1    2[BANK0 ] unsigned char 
 14424 ;;  status          1    3[BANK0 ] unsigned char 
 14425 ;; Return value:  Size  Location     Type
 14426 ;;                  1    wreg      unsigned char 
 14427 ;; Registers used:
 14428 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14429 ;; Tracked objects:
 14430 ;;		On entry : 0/0
 14431 ;;		On exit  : 0/0
 14432 ;;		Unchanged: 0/0
 14433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14435 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14437 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14438 ;;Total ram usage:        2 bytes
 14439 ;; Hardware stack levels used:    1
 14440 ;; Hardware stack levels required when called:    6
 14441 ;; This function calls:
 14442 ;;		_DimmerLightsPointSelect
 14443 ;; This function is called by:
 14444 ;;		_setDimmerLights_ErrorClose
 14445 ;;		_setRFSW_Control
 14446 ;;		_setRFSW_AdjControl
 14447 ;;		_getMain_LightsStatus
 14448 ;; This function uses a non-reentrant model
 14449 ;;
 14450                           
 14451                           
 14452                           ;psect for function _getDimmerLights_Status
 14453  1093                     _getDimmerLights_Status:	
 14454                           
 14455                           ;incstack = 0
 14456                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 14457                           ;getDimmerLights_Status@lights stored from wreg
 14458  1093  0020               	movlb	0	; select bank0
 14459  1094  00A2               	movwf	getDimmerLights_Status@lights
 14460                           
 14461                           ;Dimmer_B1.c: 458: DimmerLightsPointSelect(lights);
 14462  1095  0822               	movf	getDimmerLights_Status@lights,w
 14463  1096  3191  2130         	fcall	_DimmerLightsPointSelect
 14464                           
 14465                           ;Dimmer_B1.c: 459: char status = DimmerLights->Status == 1 ? 1 : 0;
 14466  1098  0020               	movlb	0	; select bank0
 14467  1099  086F               	movf	_DimmerLights,w
 14468  109A  0086               	movwf	6
 14469  109B  3001               	movlw	1	; select bank2/3
 14470  109C  0087               	movwf	7
 14471  109D  3000               	movlw	0
 14472  109E  1A81               	btfsc	1,5
 14473  109F  3001               	movlw	1
 14474  10A0  00A3               	movwf	getDimmerLights_Status@status
 14475                           
 14476                           ;Dimmer_B1.c: 460: return status;
 14477  10A1  0823               	movf	getDimmerLights_Status@status,w
 14478  10A2  0008               	return
 14479  10A3                     __end_of_getDimmerLights_Status:	
 14480                           
 14481                           	psect	text92
 14482  1130                     __ptext92:	
 14483 ;; *************** function _DimmerLightsPointSelect *****************
 14484 ;; Defined at:
 14485 ;;		line 322 in file "../src/Dimmer_B1.c"
 14486 ;; Parameters:    Size  Location     Type
 14487 ;;  lights          1    wreg     unsigned char 
 14488 ;; Auto vars:     Size  Location     Type
 14489 ;;  lights          1    1[BANK0 ] unsigned char 
 14490 ;; Return value:  Size  Location     Type
 14491 ;;		None               void
 14492 ;; Registers used:
 14493 ;;		wreg
 14494 ;; Tracked objects:
 14495 ;;		On entry : 0/0
 14496 ;;		On exit  : 0/0
 14497 ;;		Unchanged: 0/0
 14498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14500 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14501 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14502 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14503 ;;Total ram usage:        2 bytes
 14504 ;; Hardware stack levels used:    1
 14505 ;; Hardware stack levels required when called:    5
 14506 ;; This function calls:
 14507 ;;		Nothing
 14508 ;; This function is called by:
 14509 ;;		_setDimmerLights_Initialization
 14510 ;;		_setDimmerLights_Main
 14511 ;;		_getDimmerLights_Status
 14512 ;;		_setDimmerLights_SwOn
 14513 ;;		_setDimmerLights_SwOff
 14514 ;;		_setDimmerLights_AdjControl
 14515 ;;		_setDimmerLights_ErrorClose
 14516 ;;		_setDimmerLights
 14517 ;;		_setDimmerLights_Adj
 14518 ;;		_setDimmerLights_AdjRF
 14519 ;;		_setDimmerLights_Trigger
 14520 ;;		_setDimmerLights_TriggerAdj
 14521 ;;		_setDimmerLights_Status
 14522 ;;		_setDimmerLights_GO
 14523 ;;		_setDimmerLights_MaxmumValue
 14524 ;; This function uses a non-reentrant model
 14525 ;;
 14526                           
 14527                           
 14528                           ;psect for function _DimmerLightsPointSelect
 14529  1130                     _DimmerLightsPointSelect:	
 14530                           
 14531                           ;incstack = 0
 14532                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 14533                           ;DimmerLightsPointSelect@lights stored from wreg
 14534  1130  0020               	movlb	0	; select bank0
 14535  1131  00A1               	movwf	DimmerLightsPointSelect@lights
 14536                           
 14537                           ;Dimmer_B1.c: 324: if (lights == 1) {
 14538  1132  0821               	movf	DimmerLightsPointSelect@lights,w
 14539  1133  3A01               	xorlw	1
 14540  1134  1D03               	skipz
 14541  1135  293A               	goto	l741
 14542                           
 14543                           ;Dimmer_B1.c: 325: DimmerLights = &DimmerLights1;
 14544  1136  303E               	movlw	_DimmerLights1& (0+255)
 14545  1137  00A0               	movwf	??_DimmerLightsPointSelect
 14546  1138  0820               	movf	??_DimmerLightsPointSelect,w
 14547  1139  00EF               	movwf	_DimmerLights
 14548  113A                     l741:	
 14549                           
 14550                           ;Dimmer_B1.c: 326: }
 14551                           ;Dimmer_B1.c: 329: if (lights == 2) {
 14552  113A  0821               	movf	DimmerLightsPointSelect@lights,w
 14553  113B  3A02               	xorlw	2
 14554  113C  1D03               	skipz
 14555  113D  0008               	return
 14556                           
 14557                           ;Dimmer_B1.c: 330: DimmerLights = &DimmerLights2;
 14558  113E  304D               	movlw	_DimmerLights2& (0+255)
 14559  113F  00A0               	movwf	??_DimmerLightsPointSelect
 14560  1140  0820               	movf	??_DimmerLightsPointSelect,w
 14561  1141  00EF               	movwf	_DimmerLights
 14562  1142  0008               	return
 14563  1143                     __end_of_DimmerLightsPointSelect:	
 14564                           
 14565                           	psect	text93
 14566  1F57                     __ptext93:	
 14567 ;; *************** function _DelayOff_Initialization *****************
 14568 ;; Defined at:
 14569 ;;		line 26 in file "../src/DelayOff_B1.c"
 14570 ;; Parameters:    Size  Location     Type
 14571 ;;		None
 14572 ;; Auto vars:     Size  Location     Type
 14573 ;;		None
 14574 ;; Return value:  Size  Location     Type
 14575 ;;		None               void
 14576 ;; Registers used:
 14577 ;;		wreg, status,2, status,0, pclath, cstack
 14578 ;; Tracked objects:
 14579 ;;		On entry : 0/0
 14580 ;;		On exit  : 0/0
 14581 ;;		Unchanged: 0/0
 14582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14587 ;;Total ram usage:        0 bytes
 14588 ;; Hardware stack levels used:    1
 14589 ;; Hardware stack levels required when called:    7
 14590 ;; This function calls:
 14591 ;;		_DlyOff_Initialization
 14592 ;; This function is called by:
 14593 ;;		_main
 14594 ;; This function uses a non-reentrant model
 14595 ;;
 14596                           
 14597                           
 14598                           ;psect for function _DelayOff_Initialization
 14599  1F57                     _DelayOff_Initialization:	
 14600                           
 14601                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 14602                           
 14603                           ;incstack = 0
 14604                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 14605  1F57  3001               	movlw	1
 14606  1F58  319F  2736  319F   	fcall	_DlyOff_Initialization
 14607                           
 14608                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 14609  1F5B  3002               	movlw	2
 14610  1F5C  319F  2736         	fcall	_DlyOff_Initialization
 14611  1F5E  0008               	return
 14612  1F5F                     __end_of_DelayOff_Initialization:	
 14613                           
 14614                           	psect	text94
 14615  1F36                     __ptext94:	
 14616 ;; *************** function _DlyOff_Initialization *****************
 14617 ;; Defined at:
 14618 ;;		line 56 in file "../src/DelayOff_B1.c"
 14619 ;; Parameters:    Size  Location     Type
 14620 ;;  sw              1    wreg     unsigned char 
 14621 ;; Auto vars:     Size  Location     Type
 14622 ;;  sw              1    2[BANK0 ] unsigned char 
 14623 ;; Return value:  Size  Location     Type
 14624 ;;		None               void
 14625 ;; Registers used:
 14626 ;;		wreg, status,2, status,0, pclath, cstack
 14627 ;; Tracked objects:
 14628 ;;		On entry : 0/0
 14629 ;;		On exit  : 0/0
 14630 ;;		Unchanged: 0/0
 14631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14633 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14635 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14636 ;;Total ram usage:        1 bytes
 14637 ;; Hardware stack levels used:    1
 14638 ;; Hardware stack levels required when called:    6
 14639 ;; This function calls:
 14640 ;;		_DelayOffPointSelect
 14641 ;; This function is called by:
 14642 ;;		_DelayOff_Initialization
 14643 ;; This function uses a non-reentrant model
 14644 ;;
 14645                           
 14646                           
 14647                           ;psect for function _DlyOff_Initialization
 14648  1F36                     _DlyOff_Initialization:	
 14649                           
 14650                           ;incstack = 0
 14651                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 14652                           ;DlyOff_Initialization@sw stored from wreg
 14653  1F36  0020               	movlb	0	; select bank0
 14654  1F37  00A2               	movwf	DlyOff_Initialization@sw
 14655                           
 14656                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 14657  1F38  0822               	movf	DlyOff_Initialization@sw,w
 14658  1F39  3191  21A4         	fcall	_DelayOffPointSelect
 14659  1F3B  0008               	return
 14660  1F3C                     __end_of_DlyOff_Initialization:	
 14661                           
 14662                           	psect	text95
 14663  11A4                     __ptext95:	
 14664 ;; *************** function _DelayOffPointSelect *****************
 14665 ;; Defined at:
 14666 ;;		line 7 in file "../src/DelayOff_B1.c"
 14667 ;; Parameters:    Size  Location     Type
 14668 ;;  sw              1    wreg     unsigned char 
 14669 ;; Auto vars:     Size  Location     Type
 14670 ;;  sw              1    1[BANK0 ] unsigned char 
 14671 ;; Return value:  Size  Location     Type
 14672 ;;		None               void
 14673 ;; Registers used:
 14674 ;;		wreg
 14675 ;; Tracked objects:
 14676 ;;		On entry : 0/0
 14677 ;;		On exit  : 0/0
 14678 ;;		Unchanged: 0/0
 14679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14681 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14682 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14683 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14684 ;;Total ram usage:        2 bytes
 14685 ;; Hardware stack levels used:    1
 14686 ;; Hardware stack levels required when called:    5
 14687 ;; This function calls:
 14688 ;;		Nothing
 14689 ;; This function is called by:
 14690 ;;		_DlyOff_Initialization
 14691 ;;		_DlyOff_Main
 14692 ;;		_setDelayOff_GO
 14693 ;;		_getDelayOff_GO
 14694 ;; This function uses a non-reentrant model
 14695 ;;
 14696                           
 14697                           
 14698                           ;psect for function _DelayOffPointSelect
 14699  11A4                     _DelayOffPointSelect:	
 14700                           
 14701                           ;incstack = 0
 14702                           ; Regs used in _DelayOffPointSelect: [wreg]
 14703                           ;DelayOffPointSelect@sw stored from wreg
 14704  11A4  0020               	movlb	0	; select bank0
 14705  11A5  00A1               	movwf	DelayOffPointSelect@sw
 14706                           
 14707                           ;DelayOff_B1.c: 9: if (sw == 1) {
 14708  11A6  0821               	movf	DelayOffPointSelect@sw,w
 14709  11A7  3A01               	xorlw	1
 14710  11A8  1D03               	skipz
 14711  11A9  29AF               	goto	l5415
 14712                           
 14713                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 14714  11AA  30E3               	movlw	_DlySw1& (0+255)
 14715  11AB  00A0               	movwf	??_DelayOffPointSelect
 14716  11AC  0820               	movf	??_DelayOffPointSelect,w
 14717  11AD  00F8               	movwf	_DelayOff
 14718                           
 14719                           ;DelayOff_B1.c: 11: }
 14720  11AE  0008               	return
 14721  11AF                     l5415:	
 14722                           
 14723                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 14724  11AF  0821               	movf	DelayOffPointSelect@sw,w
 14725  11B0  3A02               	xorlw	2
 14726  11B1  1D03               	skipz
 14727  11B2  0008               	return
 14728                           
 14729                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 14730  11B3  30E5               	movlw	_DlySw2& (0+255)
 14731  11B4  00A0               	movwf	??_DelayOffPointSelect
 14732  11B5  0820               	movf	??_DelayOffPointSelect,w
 14733  11B6  00F8               	movwf	_DelayOff
 14734  11B7  0008               	return
 14735  11B8                     __end_of_DelayOffPointSelect:	
 14736                           
 14737                           	psect	text96
 14738  11F5                     __ptext96:	
 14739 ;; *************** function _CC2500_PowerOnInitial *****************
 14740 ;; Defined at:
 14741 ;;		line 122 in file "../src/CC2500_B1.c"
 14742 ;; Parameters:    Size  Location     Type
 14743 ;;		None
 14744 ;; Auto vars:     Size  Location     Type
 14745 ;;		None
 14746 ;; Return value:  Size  Location     Type
 14747 ;;		None               void
 14748 ;; Registers used:
 14749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14750 ;; Tracked objects:
 14751 ;;		On entry : 0/0
 14752 ;;		On exit  : 0/0
 14753 ;;		Unchanged: 0/0
 14754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14759 ;;Total ram usage:        0 bytes
 14760 ;; Hardware stack levels used:    1
 14761 ;; Hardware stack levels required when called:    8
 14762 ;; This function calls:
 14763 ;;		_CC2500_ClearRXFIFO
 14764 ;;		_CC2500_ClearTXFIFO
 14765 ;;		_CC2500_FrequencyCabr
 14766 ;;		_CC2500_InitPATable
 14767 ;;		_CC2500_InitSetREG
 14768 ;;		_CC2500_PowerRST
 14769 ;;		_CC2500_SIDLEMode
 14770 ;; This function is called by:
 14771 ;;		_main
 14772 ;; This function uses a non-reentrant model
 14773 ;;
 14774                           
 14775                           
 14776                           ;psect for function _CC2500_PowerOnInitial
 14777  11F5                     _CC2500_PowerOnInitial:	
 14778                           
 14779                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 14780                           
 14781                           ;incstack = 0
 14782                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14783  11F5  3196  269F  3191   	fcall	_CC2500_PowerRST
 14784                           
 14785                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 14786  11F8  3194  248B  3191   	fcall	_CC2500_InitSetREG
 14787                           
 14788                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 14789  11FB  3192  22CC  3191   	fcall	_CC2500_InitPATable
 14790                           
 14791                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 14792  11FE  319F  2721  3191   	fcall	_CC2500_ClearTXFIFO
 14793                           
 14794                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 14795  1201  319F  271D  3191   	fcall	_CC2500_ClearRXFIFO
 14796                           
 14797                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 14798  1204  319F  279F  3191   	fcall	_CC2500_FrequencyCabr
 14799                           
 14800                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 14801  1207  319F  2725         	fcall	_CC2500_SIDLEMode
 14802  1209  0008               	return
 14803  120A                     __end_of_CC2500_PowerOnInitial:	
 14804                           
 14805                           	psect	text97
 14806  1F25                     __ptext97:	
 14807 ;; *************** function _CC2500_SIDLEMode *****************
 14808 ;; Defined at:
 14809 ;;		line 212 in file "../src/CC2500_B1.c"
 14810 ;; Parameters:    Size  Location     Type
 14811 ;;		None
 14812 ;; Auto vars:     Size  Location     Type
 14813 ;;		None
 14814 ;; Return value:  Size  Location     Type
 14815 ;;		None               void
 14816 ;; Registers used:
 14817 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14818 ;; Tracked objects:
 14819 ;;		On entry : 0/0
 14820 ;;		On exit  : 0/0
 14821 ;;		Unchanged: 0/0
 14822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14827 ;;Total ram usage:        0 bytes
 14828 ;; Hardware stack levels used:    1
 14829 ;; Hardware stack levels required when called:    7
 14830 ;; This function calls:
 14831 ;;		_CC2500_WriteCommand
 14832 ;; This function is called by:
 14833 ;;		_CC2500_PowerOnInitial
 14834 ;; This function uses a non-reentrant model
 14835 ;;
 14836                           
 14837                           
 14838                           ;psect for function _CC2500_SIDLEMode
 14839  1F25                     _CC2500_SIDLEMode:	
 14840                           
 14841                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 14842                           
 14843                           ;incstack = 0
 14844                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14845  1F25  3036               	movlw	54
 14846  1F26  3192  2262         	fcall	_CC2500_WriteCommand
 14847  1F28  0008               	return
 14848  1F29                     __end_of_CC2500_SIDLEMode:	
 14849                           
 14850                           	psect	text98
 14851  169F                     __ptext98:	
 14852 ;; *************** function _CC2500_PowerRST *****************
 14853 ;; Defined at:
 14854 ;;		line 135 in file "../src/CC2500_B1.c"
 14855 ;; Parameters:    Size  Location     Type
 14856 ;;		None
 14857 ;; Auto vars:     Size  Location     Type
 14858 ;;		None
 14859 ;; Return value:  Size  Location     Type
 14860 ;;		None               void
 14861 ;; Registers used:
 14862 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14863 ;; Tracked objects:
 14864 ;;		On entry : 0/0
 14865 ;;		On exit  : 0/0
 14866 ;;		Unchanged: 0/0
 14867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14870 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14871 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14872 ;;Total ram usage:        1 bytes
 14873 ;; Hardware stack levels used:    1
 14874 ;; Hardware stack levels required when called:    6
 14875 ;; This function calls:
 14876 ;;		_CC2500_WriteByte
 14877 ;;		_DelayTime_1us
 14878 ;;		_Timeout_Counter
 14879 ;;		_set_TimeoutCleared
 14880 ;; This function is called by:
 14881 ;;		_CC2500_PowerOnInitial
 14882 ;; This function uses a non-reentrant model
 14883 ;;
 14884                           
 14885                           
 14886                           ;psect for function _CC2500_PowerRST
 14887  169F                     _CC2500_PowerRST:	
 14888                           
 14889                           ;CC2500_B1.c: 136: RC1 = 0;
 14890                           
 14891                           ;incstack = 0
 14892                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14893  169F  0020               	movlb	0	; select bank0
 14894  16A0  108E               	bcf	14,1	;volatile
 14895                           
 14896                           ;CC2500_B1.c: 137: RC0 = 0;
 14897  16A1  100E               	bcf	14,0	;volatile
 14898                           
 14899                           ;CC2500_B1.c: 138: RC4 = 1;
 14900  16A2  160E               	bsf	14,4	;volatile
 14901                           
 14902                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 14903  16A3  300A               	movlw	10
 14904  16A4  00A0               	movwf	DelayTime_1us@count
 14905  16A5  3000               	movlw	0
 14906  16A6  00A1               	movwf	DelayTime_1us@count+1
 14907  16A7  3194  2416  3196   	fcall	_DelayTime_1us
 14908                           
 14909                           ;CC2500_B1.c: 140: RC4 = 0;
 14910  16AA  0020               	movlb	0	; select bank0
 14911  16AB  120E               	bcf	14,4	;volatile
 14912                           
 14913                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 14914  16AC  300A               	movlw	10
 14915  16AD  00A0               	movwf	DelayTime_1us@count
 14916  16AE  3000               	movlw	0
 14917  16AF  00A1               	movwf	DelayTime_1us@count+1
 14918  16B0  3194  2416  3196   	fcall	_DelayTime_1us
 14919                           
 14920                           ;CC2500_B1.c: 142: RC4 = 1;
 14921  16B3  0020               	movlb	0	; select bank0
 14922  16B4  160E               	bsf	14,4	;volatile
 14923                           
 14924                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 14925  16B5  3028               	movlw	40
 14926  16B6  00A0               	movwf	DelayTime_1us@count
 14927  16B7  3000               	movlw	0
 14928  16B8  00A1               	movwf	DelayTime_1us@count+1
 14929  16B9  3194  2416  3196   	fcall	_DelayTime_1us
 14930                           
 14931                           ;CC2500_B1.c: 144: RC4 = 0;
 14932  16BC  0020               	movlb	0	; select bank0
 14933  16BD  120E               	bcf	14,4	;volatile
 14934                           
 14935                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 14936  16BE  3030               	movlw	48
 14937  16BF  00A6               	movwf	??_CC2500_PowerRST
 14938  16C0  0826               	movf	??_CC2500_PowerRST,w
 14939  16C1  00FA               	movwf	_SPI0Buffer
 14940                           
 14941                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 14942  16C2  2EC6               	goto	l6449
 14943  16C3                     l6447:	
 14944                           
 14945                           ;CC2500_B1.c: 147: Timeout_Counter();
 14946  16C3  3191  21E0  3196   	fcall	_Timeout_Counter
 14947  16C6                     l6449:	
 14948  16C6  0020               	movlb	0	; select bank0
 14949  16C7  1D0E               	btfss	14,2	;volatile
 14950  16C8  2ECC               	goto	l6453
 14951  16C9  0021               	movlb	1	; select bank1
 14952  16CA  1D2D               	btfss	(_myMain^(0+128)+13),2
 14953  16CB  2EC3               	goto	l6447
 14954  16CC                     l6453:	
 14955                           
 14956                           ;CC2500_B1.c: 148: };
 14957                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 14958  16CC  319F  2731  3196   	fcall	_set_TimeoutCleared
 14959                           
 14960                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 14961  16CF  3191  2190  3196   	fcall	_CC2500_WriteByte
 14962                           
 14963                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 14964  16D2  2ED6               	goto	l6459
 14965  16D3                     l6457:	
 14966                           
 14967                           ;CC2500_B1.c: 152: Timeout_Counter();
 14968  16D3  3191  21E0  3196   	fcall	_Timeout_Counter
 14969  16D6                     l6459:	
 14970  16D6  0020               	movlb	0	; select bank0
 14971  16D7  1D0E               	btfss	14,2	;volatile
 14972  16D8  2EDC               	goto	l6463
 14973  16D9  0021               	movlb	1	; select bank1
 14974  16DA  1D2D               	btfss	(_myMain^(0+128)+13),2
 14975  16DB  2ED3               	goto	l6457
 14976  16DC                     l6463:	
 14977                           
 14978                           ;CC2500_B1.c: 153: };
 14979                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 14980  16DC  319F  2731         	fcall	_set_TimeoutCleared
 14981                           
 14982                           ;CC2500_B1.c: 155: RC0 = 0;
 14983  16DE  0020               	movlb	0	; select bank0
 14984  16DF  100E               	bcf	14,0	;volatile
 14985                           
 14986                           ;CC2500_B1.c: 156: RC4 = 1;
 14987  16E0  160E               	bsf	14,4	;volatile
 14988  16E1  0008               	return
 14989  16E2                     __end_of_CC2500_PowerRST:	
 14990                           
 14991                           	psect	text99
 14992  148B                     __ptext99:	
 14993 ;; *************** function _CC2500_InitSetREG *****************
 14994 ;; Defined at:
 14995 ;;		line 162 in file "../src/CC2500_B1.c"
 14996 ;; Parameters:    Size  Location     Type
 14997 ;;		None
 14998 ;; Auto vars:     Size  Location     Type
 14999 ;;  loop_c          1    8[BANK0 ] unsigned char 
 15000 ;;  temp2           1    7[BANK0 ] unsigned char 
 15001 ;;  temp1           1    6[BANK0 ] unsigned char 
 15002 ;; Return value:  Size  Location     Type
 15003 ;;		None               void
 15004 ;; Registers used:
 15005 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15006 ;; Tracked objects:
 15007 ;;		On entry : 0/0
 15008 ;;		On exit  : 0/0
 15009 ;;		Unchanged: 0/0
 15010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15012 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15013 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15014 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15015 ;;Total ram usage:        4 bytes
 15016 ;; Hardware stack levels used:    1
 15017 ;; Hardware stack levels required when called:    7
 15018 ;; This function calls:
 15019 ;;		_CC2500_WriteREG
 15020 ;; This function is called by:
 15021 ;;		_CC2500_PowerOnInitial
 15022 ;; This function uses a non-reentrant model
 15023 ;;
 15024                           
 15025                           
 15026                           ;psect for function _CC2500_InitSetREG
 15027  148B                     _CC2500_InitSetREG:	
 15028                           
 15029                           ;CC2500_B1.c: 163: unsigned char loop_c;
 15030                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 15031                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 15032                           
 15033                           ;incstack = 0
 15034                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15035  148B  0020               	movlb	0	; select bank0
 15036  148C  01A8               	clrf	CC2500_InitSetREG@loop_c
 15037  148D                     L7:	
 15038  148D  302F               	movlw	47
 15039  148E  0228               	subwf	CC2500_InitSetREG@loop_c,w
 15040  148F  1803               	btfsc	3,0
 15041  1490  0008               	return
 15042                           
 15043                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 15044  1491  0828               	movf	CC2500_InitSetREG@loop_c,w
 15045  1492  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 15046  1493  0084               	movwf	4
 15047  1494  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 15048  1495  1803               	skipnc
 15049  1496  3E01               	addlw	1
 15050  1497  0085               	movwf	5
 15051  1498  0800               	movf	0,w	;code access
 15052  1499  00A5               	movwf	??_CC2500_InitSetREG
 15053  149A  0825               	movf	??_CC2500_InitSetREG,w
 15054  149B  00A6               	movwf	CC2500_InitSetREG@temp1
 15055                           
 15056                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 15057  149C  0828               	movf	CC2500_InitSetREG@loop_c,w
 15058  149D  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 15059  149E  0084               	movwf	4
 15060  149F  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 15061  14A0  1803               	skipnc
 15062  14A1  3E01               	addlw	1
 15063  14A2  0085               	movwf	5
 15064  14A3  0800               	movf	0,w	;code access
 15065  14A4  00A5               	movwf	??_CC2500_InitSetREG
 15066  14A5  0825               	movf	??_CC2500_InitSetREG,w
 15067  14A6  00A7               	movwf	CC2500_InitSetREG@temp2
 15068                           
 15069                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 15070  14A7  0827               	movf	CC2500_InitSetREG@temp2,w
 15071  14A8  00A5               	movwf	??_CC2500_InitSetREG
 15072  14A9  0825               	movf	??_CC2500_InitSetREG,w
 15073  14AA  00A2               	movwf	CC2500_WriteREG@value
 15074  14AB  0826               	movf	CC2500_InitSetREG@temp1,w
 15075  14AC  3193  236A  3194   	fcall	_CC2500_WriteREG
 15076  14AF  3001               	movlw	1
 15077  14B0  0020               	movlb	0	; select bank0
 15078  14B1  00A5               	movwf	??_CC2500_InitSetREG
 15079  14B2  0825               	movf	??_CC2500_InitSetREG,w
 15080  14B3  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 15081  14B4  2C8D               	goto	L7
 15082  14B5                     __end_of_CC2500_InitSetREG:	
 15083                           
 15084                           	psect	text100
 15085  12CC                     __ptext100:	
 15086 ;; *************** function _CC2500_InitPATable *****************
 15087 ;; Defined at:
 15088 ;;		line 177 in file "../src/CC2500_B1.c"
 15089 ;; Parameters:    Size  Location     Type
 15090 ;;		None
 15091 ;; Auto vars:     Size  Location     Type
 15092 ;;  loop_d          1    7[BANK0 ] unsigned char 
 15093 ;;  temp            1    6[BANK0 ] unsigned char 
 15094 ;; Return value:  Size  Location     Type
 15095 ;;		None               void
 15096 ;; Registers used:
 15097 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15098 ;; Tracked objects:
 15099 ;;		On entry : 0/0
 15100 ;;		On exit  : 0/0
 15101 ;;		Unchanged: 0/0
 15102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15104 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15105 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15106 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15107 ;;Total ram usage:        3 bytes
 15108 ;; Hardware stack levels used:    1
 15109 ;; Hardware stack levels required when called:    7
 15110 ;; This function calls:
 15111 ;;		_CC2500_WriteREG
 15112 ;; This function is called by:
 15113 ;;		_CC2500_PowerOnInitial
 15114 ;; This function uses a non-reentrant model
 15115 ;;
 15116                           
 15117                           
 15118                           ;psect for function _CC2500_InitPATable
 15119  12CC                     _CC2500_InitPATable:	
 15120                           
 15121                           ;CC2500_B1.c: 178: unsigned char loop_d;
 15122                           ;CC2500_B1.c: 179: unsigned char temp;
 15123                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 15124                           
 15125                           ;incstack = 0
 15126                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15127  12CC  0020               	movlb	0	; select bank0
 15128  12CD  01A7               	clrf	CC2500_InitPATable@loop_d
 15129  12CE                     L8:	
 15130  12CE  3008               	movlw	8
 15131  12CF  0227               	subwf	CC2500_InitPATable@loop_d,w
 15132  12D0  1803               	btfsc	3,0
 15133  12D1  0008               	return
 15134                           
 15135                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 15136  12D2  0827               	movf	CC2500_InitPATable@loop_d,w
 15137  12D3  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 15138  12D4  0084               	movwf	4
 15139  12D5  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 15140  12D6  1803               	skipnc
 15141  12D7  3E01               	addlw	1
 15142  12D8  0085               	movwf	5
 15143  12D9  0800               	movf	0,w	;code access
 15144  12DA  00A5               	movwf	??_CC2500_InitPATable
 15145  12DB  0825               	movf	??_CC2500_InitPATable,w
 15146  12DC  00A6               	movwf	CC2500_InitPATable@temp
 15147                           
 15148                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 15149  12DD  0826               	movf	CC2500_InitPATable@temp,w
 15150  12DE  00A5               	movwf	??_CC2500_InitPATable
 15151  12DF  0825               	movf	??_CC2500_InitPATable,w
 15152  12E0  00A2               	movwf	CC2500_WriteREG@value
 15153  12E1  303E               	movlw	62
 15154  12E2  3193  236A  3192   	fcall	_CC2500_WriteREG
 15155  12E5  3001               	movlw	1
 15156  12E6  0020               	movlb	0	; select bank0
 15157  12E7  00A5               	movwf	??_CC2500_InitPATable
 15158  12E8  0825               	movf	??_CC2500_InitPATable,w
 15159  12E9  07A7               	addwf	CC2500_InitPATable@loop_d,f
 15160  12EA  2ACE               	goto	L8
 15161  12EB                     __end_of_CC2500_InitPATable:	
 15162                           
 15163                           	psect	text101
 15164  136A                     __ptext101:	
 15165 ;; *************** function _CC2500_WriteREG *****************
 15166 ;; Defined at:
 15167 ;;		line 254 in file "../src/CC2500_B1.c"
 15168 ;; Parameters:    Size  Location     Type
 15169 ;;  w_addr          1    wreg     unsigned char 
 15170 ;;  value           1    2[BANK0 ] unsigned char 
 15171 ;; Auto vars:     Size  Location     Type
 15172 ;;  w_addr          1    4[BANK0 ] unsigned char 
 15173 ;; Return value:  Size  Location     Type
 15174 ;;		None               void
 15175 ;; Registers used:
 15176 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15177 ;; Tracked objects:
 15178 ;;		On entry : 0/0
 15179 ;;		On exit  : 0/0
 15180 ;;		Unchanged: 0/0
 15181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15182 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15183 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15184 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15185 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15186 ;;Total ram usage:        3 bytes
 15187 ;; Hardware stack levels used:    1
 15188 ;; Hardware stack levels required when called:    6
 15189 ;; This function calls:
 15190 ;;		_CC2500_WriteByte
 15191 ;;		_Timeout_Counter
 15192 ;;		_set_TimeoutCleared
 15193 ;; This function is called by:
 15194 ;;		_CC2500_InitSetREG
 15195 ;;		_CC2500_InitPATable
 15196 ;; This function uses a non-reentrant model
 15197 ;;
 15198                           
 15199                           
 15200                           ;psect for function _CC2500_WriteREG
 15201  136A                     _CC2500_WriteREG:	
 15202                           
 15203                           ;incstack = 0
 15204                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15205                           ;CC2500_WriteREG@w_addr stored from wreg
 15206  136A  0020               	movlb	0	; select bank0
 15207  136B  00A4               	movwf	CC2500_WriteREG@w_addr
 15208                           
 15209                           ;CC2500_B1.c: 255: RC4 = 0;
 15210  136C  120E               	bcf	14,4	;volatile
 15211                           
 15212                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 15213  136D  0824               	movf	CC2500_WriteREG@w_addr,w
 15214  136E  00A3               	movwf	??_CC2500_WriteREG
 15215  136F  0823               	movf	??_CC2500_WriteREG,w
 15216  1370  00FA               	movwf	_SPI0Buffer
 15217                           
 15218                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 15219  1371  2B75               	goto	l6129
 15220  1372                     l6127:	
 15221                           
 15222                           ;CC2500_B1.c: 258: Timeout_Counter();
 15223  1372  3191  21E0  3193   	fcall	_Timeout_Counter
 15224  1375                     l6129:	
 15225  1375  0020               	movlb	0	; select bank0
 15226  1376  1D0E               	btfss	14,2	;volatile
 15227  1377  2B7B               	goto	l6133
 15228  1378  0021               	movlb	1	; select bank1
 15229  1379  1D2D               	btfss	(_myMain^(0+128)+13),2
 15230  137A  2B72               	goto	l6127
 15231  137B                     l6133:	
 15232                           
 15233                           ;CC2500_B1.c: 259: };
 15234                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 15235  137B  319F  2731  3193   	fcall	_set_TimeoutCleared
 15236                           
 15237                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 15238  137E  3191  2190  3193   	fcall	_CC2500_WriteByte
 15239                           
 15240                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 15241  1381  0020               	movlb	0	; select bank0
 15242  1382  0822               	movf	CC2500_WriteREG@value,w
 15243  1383  00A3               	movwf	??_CC2500_WriteREG
 15244  1384  0823               	movf	??_CC2500_WriteREG,w
 15245  1385  00FA               	movwf	_SPI0Buffer
 15246                           
 15247                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 15248  1386  3191  2190         	fcall	_CC2500_WriteByte
 15249                           
 15250                           ;CC2500_B1.c: 265: RC4 = 1;
 15251  1388  0020               	movlb	0	; select bank0
 15252  1389  160E               	bsf	14,4	;volatile
 15253  138A  0008               	return
 15254  138B                     __end_of_CC2500_WriteREG:	
 15255                           
 15256                           	psect	text102
 15257  1F9F                     __ptext102:	
 15258 ;; *************** function _CC2500_FrequencyCabr *****************
 15259 ;; Defined at:
 15260 ;;		line 204 in file "../src/CC2500_B1.c"
 15261 ;; Parameters:    Size  Location     Type
 15262 ;;		None
 15263 ;; Auto vars:     Size  Location     Type
 15264 ;;		None
 15265 ;; Return value:  Size  Location     Type
 15266 ;;		None               void
 15267 ;; Registers used:
 15268 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15269 ;; Tracked objects:
 15270 ;;		On entry : 0/0
 15271 ;;		On exit  : 0/0
 15272 ;;		Unchanged: 0/0
 15273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15278 ;;Total ram usage:        0 bytes
 15279 ;; Hardware stack levels used:    1
 15280 ;; Hardware stack levels required when called:    7
 15281 ;; This function calls:
 15282 ;;		_CC2500_WriteCommand
 15283 ;;		_DelayTime_1us
 15284 ;; This function is called by:
 15285 ;;		_CC2500_PowerOnInitial
 15286 ;; This function uses a non-reentrant model
 15287 ;;
 15288                           
 15289                           
 15290                           ;psect for function _CC2500_FrequencyCabr
 15291  1F9F                     _CC2500_FrequencyCabr:	
 15292                           
 15293                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 15294                           
 15295                           ;incstack = 0
 15296                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15297  1F9F  3033               	movlw	51
 15298  1FA0  3192  2262  319F   	fcall	_CC2500_WriteCommand
 15299                           
 15300                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 15301  1FA3  30E8               	movlw	232
 15302  1FA4  0020               	movlb	0	; select bank0
 15303  1FA5  00A0               	movwf	DelayTime_1us@count
 15304  1FA6  3003               	movlw	3
 15305  1FA7  00A1               	movwf	DelayTime_1us@count+1
 15306  1FA8  3194  2416         	fcall	_DelayTime_1us
 15307  1FAA  0008               	return
 15308  1FAB                     __end_of_CC2500_FrequencyCabr:	
 15309                           
 15310                           	psect	text103
 15311  1416                     __ptext103:	
 15312 ;; *************** function _DelayTime_1us *****************
 15313 ;; Defined at:
 15314 ;;		line 323 in file "../src/CC2500_B1.c"
 15315 ;; Parameters:    Size  Location     Type
 15316 ;;  count           2    0[BANK0 ] int 
 15317 ;; Auto vars:     Size  Location     Type
 15318 ;;  j               2    4[BANK0 ] unsigned int 
 15319 ;;  i               2    2[BANK0 ] unsigned int 
 15320 ;; Return value:  Size  Location     Type
 15321 ;;		None               void
 15322 ;; Registers used:
 15323 ;;		wreg, status,2
 15324 ;; Tracked objects:
 15325 ;;		On entry : 0/0
 15326 ;;		On exit  : 0/0
 15327 ;;		Unchanged: 0/0
 15328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15329 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15330 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15332 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15333 ;;Total ram usage:        6 bytes
 15334 ;; Hardware stack levels used:    1
 15335 ;; Hardware stack levels required when called:    5
 15336 ;; This function calls:
 15337 ;;		Nothing
 15338 ;; This function is called by:
 15339 ;;		_CC2500_PowerRST
 15340 ;;		_CC2500_FrequencyCabr
 15341 ;; This function uses a non-reentrant model
 15342 ;;
 15343                           
 15344                           
 15345                           ;psect for function _DelayTime_1us
 15346  1416                     _DelayTime_1us:	
 15347                           
 15348                           ;CC2500_B1.c: 324: unsigned int i, j;
 15349                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 15350                           
 15351                           ;incstack = 0
 15352                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 15353  1416  3001               	movlw	1
 15354  1417  0020               	movlb	0	; select bank0
 15355  1418  00A2               	movwf	DelayTime_1us@i
 15356  1419  3000               	movlw	0
 15357  141A  00A3               	movwf	DelayTime_1us@i+1
 15358  141B                     l366:	
 15359  141B  0821               	movf	DelayTime_1us@count+1,w
 15360  141C  0223               	subwf	DelayTime_1us@i+1,w
 15361  141D  1D03               	skipz
 15362  141E  2C21               	goto	u5175
 15363  141F  0820               	movf	DelayTime_1us@count,w
 15364  1420  0222               	subwf	DelayTime_1us@i,w
 15365  1421                     u5175:	
 15366  1421  1803               	btfsc	3,0
 15367  1422  0008               	return
 15368                           
 15369                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 15370  1423  01A4               	clrf	DelayTime_1us@j
 15371  1424  01A5               	clrf	DelayTime_1us@j+1
 15372  1425  3000               	movlw	0
 15373  1426  0225               	subwf	DelayTime_1us@j+1,w
 15374  1427  3002               	movlw	2
 15375  1428  1903               	skipnz
 15376  1429  0224               	subwf	DelayTime_1us@j,w
 15377  142A  1803               	btfsc	3,0
 15378  142B  2C37               	goto	l6121
 15379  142C                     l6119:	
 15380  142C  3001               	movlw	1
 15381  142D  07A4               	addwf	DelayTime_1us@j,f
 15382  142E  3000               	movlw	0
 15383  142F  3DA5               	addwfc	DelayTime_1us@j+1,f
 15384  1430  3000               	movlw	0
 15385  1431  0225               	subwf	DelayTime_1us@j+1,w
 15386  1432  3002               	movlw	2
 15387  1433  1903               	skipnz
 15388  1434  0224               	subwf	DelayTime_1us@j,w
 15389  1435  1C03               	skipc
 15390  1436  2C2C               	goto	l6119
 15391  1437                     l6121:	
 15392  1437  3001               	movlw	1
 15393  1438  07A2               	addwf	DelayTime_1us@i,f
 15394  1439  3000               	movlw	0
 15395  143A  3DA3               	addwfc	DelayTime_1us@i+1,f
 15396  143B  2C1B               	goto	l366
 15397  143C                     __end_of_DelayTime_1us:	
 15398                           
 15399                           	psect	text104
 15400  1F21                     __ptext104:	
 15401 ;; *************** function _CC2500_ClearTXFIFO *****************
 15402 ;; Defined at:
 15403 ;;		line 190 in file "../src/CC2500_B1.c"
 15404 ;; Parameters:    Size  Location     Type
 15405 ;;		None
 15406 ;; Auto vars:     Size  Location     Type
 15407 ;;		None
 15408 ;; Return value:  Size  Location     Type
 15409 ;;		None               void
 15410 ;; Registers used:
 15411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15412 ;; Tracked objects:
 15413 ;;		On entry : 0/0
 15414 ;;		On exit  : 0/0
 15415 ;;		Unchanged: 0/0
 15416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15421 ;;Total ram usage:        0 bytes
 15422 ;; Hardware stack levels used:    1
 15423 ;; Hardware stack levels required when called:    7
 15424 ;; This function calls:
 15425 ;;		_CC2500_WriteCommand
 15426 ;; This function is called by:
 15427 ;;		_CC2500_PowerOnInitial
 15428 ;; This function uses a non-reentrant model
 15429 ;;
 15430                           
 15431                           
 15432                           ;psect for function _CC2500_ClearTXFIFO
 15433  1F21                     _CC2500_ClearTXFIFO:	
 15434                           
 15435                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 15436                           
 15437                           ;incstack = 0
 15438                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15439  1F21  303B               	movlw	59
 15440  1F22  3192  2262         	fcall	_CC2500_WriteCommand
 15441  1F24  0008               	return
 15442  1F25                     __end_of_CC2500_ClearTXFIFO:	
 15443                           
 15444                           	psect	text105
 15445  1F1D                     __ptext105:	
 15446 ;; *************** function _CC2500_ClearRXFIFO *****************
 15447 ;; Defined at:
 15448 ;;		line 197 in file "../src/CC2500_B1.c"
 15449 ;; Parameters:    Size  Location     Type
 15450 ;;		None
 15451 ;; Auto vars:     Size  Location     Type
 15452 ;;		None
 15453 ;; Return value:  Size  Location     Type
 15454 ;;		None               void
 15455 ;; Registers used:
 15456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15457 ;; Tracked objects:
 15458 ;;		On entry : 0/0
 15459 ;;		On exit  : 0/0
 15460 ;;		Unchanged: 0/0
 15461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15466 ;;Total ram usage:        0 bytes
 15467 ;; Hardware stack levels used:    1
 15468 ;; Hardware stack levels required when called:    7
 15469 ;; This function calls:
 15470 ;;		_CC2500_WriteCommand
 15471 ;; This function is called by:
 15472 ;;		_CC2500_PowerOnInitial
 15473 ;; This function uses a non-reentrant model
 15474 ;;
 15475                           
 15476                           
 15477                           ;psect for function _CC2500_ClearRXFIFO
 15478  1F1D                     _CC2500_ClearRXFIFO:	
 15479                           
 15480                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 15481                           
 15482                           ;incstack = 0
 15483                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15484  1F1D  303A               	movlw	58
 15485  1F1E  3192  2262         	fcall	_CC2500_WriteCommand
 15486  1F20  0008               	return
 15487  1F21                     __end_of_CC2500_ClearRXFIFO:	
 15488                           
 15489                           	psect	text106
 15490  1262                     __ptext106:	
 15491 ;; *************** function _CC2500_WriteCommand *****************
 15492 ;; Defined at:
 15493 ;;		line 288 in file "../src/CC2500_B1.c"
 15494 ;; Parameters:    Size  Location     Type
 15495 ;;  command         1    wreg     unsigned char 
 15496 ;; Auto vars:     Size  Location     Type
 15497 ;;  command         1    3[BANK0 ] unsigned char 
 15498 ;; Return value:  Size  Location     Type
 15499 ;;		None               void
 15500 ;; Registers used:
 15501 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15502 ;; Tracked objects:
 15503 ;;		On entry : 0/0
 15504 ;;		On exit  : 0/0
 15505 ;;		Unchanged: 0/0
 15506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15508 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15509 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15510 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15511 ;;Total ram usage:        2 bytes
 15512 ;; Hardware stack levels used:    1
 15513 ;; Hardware stack levels required when called:    6
 15514 ;; This function calls:
 15515 ;;		_CC2500_WriteByte
 15516 ;;		_Timeout_Counter
 15517 ;;		_set_TimeoutCleared
 15518 ;; This function is called by:
 15519 ;;		_CC2500_TxData
 15520 ;;		_CC2500_ClearTXFIFO
 15521 ;;		_CC2500_ClearRXFIFO
 15522 ;;		_CC2500_FrequencyCabr
 15523 ;;		_CC2500_SIDLEMode
 15524 ;;		_setRF_Main
 15525 ;;		_RF_RxDisable
 15526 ;; This function uses a non-reentrant model
 15527 ;;
 15528                           
 15529                           
 15530                           ;psect for function _CC2500_WriteCommand
 15531  1262                     _CC2500_WriteCommand:	
 15532                           
 15533                           ;incstack = 0
 15534                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15535                           ;CC2500_WriteCommand@command stored from wreg
 15536  1262  0020               	movlb	0	; select bank0
 15537  1263  00A3               	movwf	CC2500_WriteCommand@command
 15538                           
 15539                           ;CC2500_B1.c: 289: RC4 = 0;
 15540  1264  120E               	bcf	14,4	;volatile
 15541                           
 15542                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 15543  1265  0823               	movf	CC2500_WriteCommand@command,w
 15544  1266  00A2               	movwf	??_CC2500_WriteCommand
 15545  1267  0822               	movf	??_CC2500_WriteCommand,w
 15546  1268  00FA               	movwf	_SPI0Buffer
 15547                           
 15548                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 15549  1269  2A6D               	goto	l5843
 15550  126A                     l5841:	
 15551                           
 15552                           ;CC2500_B1.c: 293: Timeout_Counter();
 15553  126A  3191  21E0  3192   	fcall	_Timeout_Counter
 15554  126D                     l5843:	
 15555  126D  0020               	movlb	0	; select bank0
 15556  126E  1D0E               	btfss	14,2	;volatile
 15557  126F  2A73               	goto	l5847
 15558  1270  0021               	movlb	1	; select bank1
 15559  1271  1D2D               	btfss	(_myMain^(0+128)+13),2
 15560  1272  2A6A               	goto	l5841
 15561  1273                     l5847:	
 15562                           
 15563                           ;CC2500_B1.c: 294: };
 15564                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 15565  1273  319F  2731  3192   	fcall	_set_TimeoutCleared
 15566                           
 15567                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 15568  1276  3191  2190         	fcall	_CC2500_WriteByte
 15569                           
 15570                           ;CC2500_B1.c: 298: RC4 = 1;
 15571  1278  0020               	movlb	0	; select bank0
 15572  1279  160E               	bsf	14,4	;volatile
 15573  127A  0008               	return
 15574  127B                     __end_of_CC2500_WriteCommand:	
 15575                           
 15576                           	psect	text107
 15577  1F31                     __ptext107:	
 15578 ;; *************** function _set_TimeoutCleared *****************
 15579 ;; Defined at:
 15580 ;;		line 272 in file "../src/main_B1.c"
 15581 ;; Parameters:    Size  Location     Type
 15582 ;;		None
 15583 ;; Auto vars:     Size  Location     Type
 15584 ;;		None
 15585 ;; Return value:  Size  Location     Type
 15586 ;;		None               void
 15587 ;; Registers used:
 15588 ;;		status,2
 15589 ;; Tracked objects:
 15590 ;;		On entry : 0/0
 15591 ;;		On exit  : 0/0
 15592 ;;		Unchanged: 0/0
 15593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15598 ;;Total ram usage:        0 bytes
 15599 ;; Hardware stack levels used:    1
 15600 ;; Hardware stack levels required when called:    5
 15601 ;; This function calls:
 15602 ;;		Nothing
 15603 ;; This function is called by:
 15604 ;;		_CC2500_TxData
 15605 ;;		_CC2500_RxData
 15606 ;;		_CC2500_PowerRST
 15607 ;;		_CC2500_WriteREG
 15608 ;;		_CC2500_WriteCommand
 15609 ;;		_CC2500_ReadStatus
 15610 ;;		_TouchPower
 15611 ;;		_CC2500_ReadREG
 15612 ;;		_getAD
 15613 ;; This function uses a non-reentrant model
 15614 ;;
 15615                           
 15616                           
 15617                           ;psect for function _set_TimeoutCleared
 15618  1F31                     _set_TimeoutCleared:	
 15619                           
 15620                           ;main_B1.c: 273: myMain.Timeout = 0;
 15621                           
 15622                           ;incstack = 0
 15623                           ; Regs used in _set_TimeoutCleared: [status,2]
 15624  1F31  0021               	movlb	1	; select bank1
 15625  1F32  112D               	bcf	(_myMain^(0+128)+13),2
 15626                           
 15627                           ;main_B1.c: 274: myMain.Timeout_Counter = 0;
 15628  1F33  01AE               	clrf	(_myMain^(0+128)+14)
 15629  1F34  01AF               	clrf	((_myMain+1)^(0+128)+14)
 15630  1F35  0008               	return
 15631  1F36                     __end_of_set_TimeoutCleared:	
 15632                           
 15633                           	psect	text108
 15634  11E0                     __ptext108:	
 15635 ;; *************** function _Timeout_Counter *****************
 15636 ;; Defined at:
 15637 ;;		line 263 in file "../src/main_B1.c"
 15638 ;; Parameters:    Size  Location     Type
 15639 ;;		None
 15640 ;; Auto vars:     Size  Location     Type
 15641 ;;		None
 15642 ;; Return value:  Size  Location     Type
 15643 ;;		None               void
 15644 ;; Registers used:
 15645 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15646 ;; Tracked objects:
 15647 ;;		On entry : 0/0
 15648 ;;		On exit  : 0/0
 15649 ;;		Unchanged: 0/0
 15650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15655 ;;Total ram usage:        0 bytes
 15656 ;; Hardware stack levels used:    1
 15657 ;; Hardware stack levels required when called:    5
 15658 ;; This function calls:
 15659 ;;		Nothing
 15660 ;; This function is called by:
 15661 ;;		_CC2500_TxData
 15662 ;;		_CC2500_RxData
 15663 ;;		_CC2500_PowerRST
 15664 ;;		_CC2500_WriteREG
 15665 ;;		_CC2500_WriteCommand
 15666 ;;		_CC2500_ReadStatus
 15667 ;;		_TouchPower
 15668 ;;		_CC2500_ReadREG
 15669 ;;		_getAD
 15670 ;; This function uses a non-reentrant model
 15671 ;;
 15672                           
 15673                           
 15674                           ;psect for function _Timeout_Counter
 15675  11E0                     _Timeout_Counter:	
 15676                           
 15677                           ;main_B1.c: 264: myMain.Timeout_Counter++;
 15678                           
 15679                           ;incstack = 0
 15680                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 15681  11E0  3001               	movlw	1
 15682  11E1  0021               	movlb	1	; select bank1
 15683  11E2  07AE               	addwf	(_myMain^(0+128)+14),f
 15684  11E3  3000               	movlw	0
 15685  11E4  3DAF               	addwfc	((_myMain+1)^(0+128)+14),f
 15686                           
 15687                           ;main_B1.c: 265: if (myMain.Timeout_Counter == 10000) {
 15688  11E5  300E               	movlw	14
 15689  11E6  3EA0               	addlw	_myMain& (0+255)
 15690  11E7  0086               	movwf	6
 15691  11E8  0187               	clrf	7
 15692  11E9  3F40               	moviw [0]fsr1
 15693  11EA  3A10               	xorlw	16
 15694  11EB  1D03               	skipz
 15695  11EC  29EF               	goto	u4575
 15696  11ED  3F41               	moviw [1]fsr1
 15697  11EE  3A27               	xorlw	39
 15698  11EF                     u4575:	
 15699  11EF  1D03               	skipz
 15700  11F0  0008               	return
 15701                           
 15702                           ;main_B1.c: 266: myMain.Timeout_Counter = 0;
 15703  11F1  01AE               	clrf	(_myMain^(0+128)+14)
 15704  11F2  01AF               	clrf	((_myMain+1)^(0+128)+14)
 15705                           
 15706                           ;main_B1.c: 267: myMain.Timeout = 1;
 15707  11F3  152D               	bsf	(_myMain^(0+128)+13),2
 15708  11F4  0008               	return
 15709  11F5                     __end_of_Timeout_Counter:	
 15710                           
 15711                           	psect	text109
 15712  1190                     __ptext109:	
 15713 ;; *************** function _CC2500_WriteByte *****************
 15714 ;; Defined at:
 15715 ;;		line 222 in file "../src/CC2500_B1.c"
 15716 ;; Parameters:    Size  Location     Type
 15717 ;;		None
 15718 ;; Auto vars:     Size  Location     Type
 15719 ;;  loop_a          1    1[BANK0 ] unsigned char 
 15720 ;; Return value:  Size  Location     Type
 15721 ;;		None               void
 15722 ;; Registers used:
 15723 ;;		wreg, status,2, status,0
 15724 ;; Tracked objects:
 15725 ;;		On entry : 0/0
 15726 ;;		On exit  : 0/0
 15727 ;;		Unchanged: 0/0
 15728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15730 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15731 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15732 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15733 ;;Total ram usage:        2 bytes
 15734 ;; Hardware stack levels used:    1
 15735 ;; Hardware stack levels required when called:    5
 15736 ;; This function calls:
 15737 ;;		Nothing
 15738 ;; This function is called by:
 15739 ;;		_CC2500_TxData
 15740 ;;		_CC2500_RxData
 15741 ;;		_CC2500_PowerRST
 15742 ;;		_CC2500_WriteREG
 15743 ;;		_CC2500_WriteCommand
 15744 ;;		_CC2500_ReadStatus
 15745 ;;		_CC2500_ReadREG
 15746 ;; This function uses a non-reentrant model
 15747 ;;
 15748                           
 15749                           
 15750                           ;psect for function _CC2500_WriteByte
 15751  1190                     _CC2500_WriteByte:	
 15752                           
 15753                           ;CC2500_B1.c: 223: unsigned char loop_a;
 15754                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 15755                           
 15756                           ;incstack = 0
 15757                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 15758  1190  0020               	movlb	0	; select bank0
 15759  1191  01A1               	clrf	CC2500_WriteByte@loop_a
 15760  1192                     L9:	
 15761  1192  3008               	movlw	8
 15762  1193  0221               	subwf	CC2500_WriteByte@loop_a,w
 15763  1194  1803               	btfsc	3,0
 15764  1195  0008               	return
 15765                           
 15766                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 15767  1196  1FFA               	btfss	_SPI0Buffer,7
 15768  1197  299A               	goto	l322
 15769                           
 15770                           ;CC2500_B1.c: 226: RC0 = 1;
 15771  1198  140E               	bsf	14,0	;volatile
 15772  1199  299B               	goto	l323
 15773  119A                     l322:	
 15774                           
 15775                           ;CC2500_B1.c: 227: else
 15776                           ;CC2500_B1.c: 228: RC0 = 0;
 15777  119A  100E               	bcf	14,0	;volatile
 15778  119B                     l323:	
 15779                           
 15780                           ;CC2500_B1.c: 229: RC1 = 1;
 15781  119B  148E               	bsf	14,1	;volatile
 15782                           
 15783                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 15784  119C  1003               	clrc
 15785  119D  0DFA               	rlf	_SPI0Buffer,f
 15786                           
 15787                           ;CC2500_B1.c: 231: RC1 = 0;
 15788  119E  108E               	bcf	14,1	;volatile
 15789  119F  3001               	movlw	1
 15790  11A0  00A0               	movwf	??_CC2500_WriteByte
 15791  11A1  0820               	movf	??_CC2500_WriteByte,w
 15792  11A2  07A1               	addwf	CC2500_WriteByte@loop_a,f
 15793  11A3  2992               	goto	L9
 15794  11A4                     __end_of_CC2500_WriteByte:	
 15795                           
 15796                           	psect	text110
 15797  17B6                     __ptext110:	
 15798 ;; *************** function _Buzzer_Main *****************
 15799 ;; Defined at:
 15800 ;;		line 46 in file "../src/Buzzer_B1.c"
 15801 ;; Parameters:    Size  Location     Type
 15802 ;;		None
 15803 ;; Auto vars:     Size  Location     Type
 15804 ;;		None
 15805 ;; Return value:  Size  Location     Type
 15806 ;;		None               void
 15807 ;; Registers used:
 15808 ;;		wreg, status,2, status,0
 15809 ;; Tracked objects:
 15810 ;;		On entry : 0/0
 15811 ;;		On exit  : 0/0
 15812 ;;		Unchanged: 0/0
 15813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15816 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15817 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15818 ;;Total ram usage:        1 bytes
 15819 ;; Hardware stack levels used:    1
 15820 ;; Hardware stack levels required when called:    5
 15821 ;; This function calls:
 15822 ;;		Nothing
 15823 ;; This function is called by:
 15824 ;;		_main
 15825 ;; This function uses a non-reentrant model
 15826 ;;
 15827                           
 15828                           
 15829                           ;psect for function _Buzzer_Main
 15830  17B6                     _Buzzer_Main:	
 15831                           
 15832                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 15833                           
 15834                           ;incstack = 0
 15835                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 15836  17B6  0021               	movlb	1	; select bank1
 15837  17B7  1CB0               	btfss	_Buz1^(0+128),1
 15838  17B8  0008               	return
 15839                           
 15840                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 15841  17B9  3001               	movlw	1
 15842  17BA  07B1               	addwf	(_Buz1^(0+128)+1),f
 15843  17BB  3000               	movlw	0
 15844  17BC  3DB2               	addwfc	((_Buz1+1)^(0+128)+1),f
 15845                           
 15846                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 15847  17BD  0837               	movf	((_Buz1+1)^(0+128)+6),w
 15848  17BE  0232               	subwf	((_Buz1+1)^(0+128)+1),w
 15849  17BF  1D03               	skipz
 15850  17C0  2FC3               	goto	u6635
 15851  17C1  0836               	movf	(_Buz1^(0+128)+6),w
 15852  17C2  0231               	subwf	(_Buz1^(0+128)+1),w
 15853  17C3                     u6635:	
 15854  17C3  1C03               	skipc
 15855  17C4  0008               	return
 15856                           
 15857                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 15858  17C5  01B1               	clrf	(_Buz1^(0+128)+1)
 15859  17C6  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 15860                           
 15861                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 15862  17C7  12B0               	bcf	_Buz1^(0+128),5
 15863  17C8  0020               	movlb	0	; select bank0
 15864  17C9  1D8D               	btfss	13,3	;volatile
 15865  17CA  2FCD               	goto	l6993
 15866  17CB  0021               	movlb	1	; select bank1
 15867  17CC  16B0               	bsf	_Buz1^(0+128),5
 15868  17CD                     l6993:	
 15869                           
 15870                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 15871  17CD  0021               	movlb	1	; select bank1
 15872  17CE  1AB0               	btfsc	_Buz1^(0+128),5
 15873  17CF  2FF9               	goto	l102
 15874                           
 15875                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 15876  17D0  08B3               	movf	(_Buz1^(0+128)+3),f
 15877  17D1  1D03               	skipz
 15878  17D2  2FF5               	goto	l103
 15879                           
 15880                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 15881  17D3  1DB0               	btfss	_Buz1^(0+128),3
 15882  17D4  2FE3               	goto	l104
 15883                           
 15884                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 15885  17D5  11B0               	bcf	_Buz1^(0+128),3
 15886                           
 15887                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 15888  17D6  0834               	movf	(_Buz1^(0+128)+4),w
 15889  17D7  0020               	movlb	0	; select bank0
 15890  17D8  00A0               	movwf	??_Buzzer_Main
 15891  17D9  0820               	movf	??_Buzzer_Main,w
 15892  17DA  0021               	movlb	1	; select bank1
 15893  17DB  00B3               	movwf	(_Buz1^(0+128)+3)
 15894                           
 15895                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 15896  17DC  0839               	movf	((_Buz1+1)^(0+128)+8),w
 15897  17DD  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 15898  17DE  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 15899  17DF  0838               	movf	(_Buz1^(0+128)+8),w
 15900  17E0  01B6               	clrf	(_Buz1^(0+128)+6)
 15901  17E1  07B6               	addwf	(_Buz1^(0+128)+6),f
 15902                           
 15903                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 15904  17E2  0008               	return
 15905  17E3                     l104:	
 15906  17E3  1E30               	btfss	_Buz1^(0+128),4
 15907  17E4  2FF3               	goto	l106
 15908                           
 15909                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 15910  17E5  1230               	bcf	_Buz1^(0+128),4
 15911                           
 15912                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 15913  17E6  0835               	movf	(_Buz1^(0+128)+5),w
 15914  17E7  0020               	movlb	0	; select bank0
 15915  17E8  00A0               	movwf	??_Buzzer_Main
 15916  17E9  0820               	movf	??_Buzzer_Main,w
 15917  17EA  0021               	movlb	1	; select bank1
 15918  17EB  00B3               	movwf	(_Buz1^(0+128)+3)
 15919                           
 15920                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 15921  17EC  083B               	movf	((_Buz1+1)^(0+128)+10),w
 15922  17ED  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 15923  17EE  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 15924  17EF  083A               	movf	(_Buz1^(0+128)+10),w
 15925  17F0  01B6               	clrf	(_Buz1^(0+128)+6)
 15926  17F1  07B6               	addwf	(_Buz1^(0+128)+6),f
 15927                           
 15928                           ;Buzzer_B1.c: 62: } else {
 15929  17F2  0008               	return
 15930  17F3                     l106:	
 15931                           
 15932                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 15933  17F3  10B0               	bcf	_Buz1^(0+128),1
 15934                           
 15935                           ;Buzzer_B1.c: 64: }
 15936                           ;Buzzer_B1.c: 65: } else {
 15937  17F4  0008               	return
 15938  17F5                     l103:	
 15939                           
 15940                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 15941  17F5  16B0               	bsf	_Buz1^(0+128),5
 15942                           
 15943                           ;Buzzer_B1.c: 68: RB3 = 1;
 15944  17F6  0020               	movlb	0	; select bank0
 15945  17F7  158D               	bsf	13,3	;volatile
 15946                           
 15947                           ;Buzzer_B1.c: 69: }
 15948                           ;Buzzer_B1.c: 70: } else {
 15949  17F8  0008               	return
 15950  17F9                     l102:	
 15951                           
 15952                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 15953  17F9  12B0               	bcf	_Buz1^(0+128),5
 15954                           
 15955                           ;Buzzer_B1.c: 73: RB3 = 0;
 15956  17FA  0020               	movlb	0	; select bank0
 15957  17FB  118D               	bcf	13,3	;volatile
 15958                           
 15959                           ;Buzzer_B1.c: 75: Buz1.Count--;
 15960  17FC  3001               	movlw	1
 15961  17FD  0021               	movlb	1	; select bank1
 15962  17FE  02B3               	subwf	(_Buz1^(0+128)+3),f
 15963  17FF  0008               	return
 15964  1800                     __end_of_Buzzer_Main:	
 15965                           
 15966                           	psect	text111
 15967  1F17                     __ptext111:	
 15968 ;; *************** function _Buzzer_Initialization *****************
 15969 ;; Defined at:
 15970 ;;		line 11 in file "../src/Buzzer_B1.c"
 15971 ;; Parameters:    Size  Location     Type
 15972 ;;		None
 15973 ;; Auto vars:     Size  Location     Type
 15974 ;;		None
 15975 ;; Return value:  Size  Location     Type
 15976 ;;		None               void
 15977 ;; Registers used:
 15978 ;;		None
 15979 ;; Tracked objects:
 15980 ;;		On entry : 0/0
 15981 ;;		On exit  : 0/0
 15982 ;;		Unchanged: 0/0
 15983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15988 ;;Total ram usage:        0 bytes
 15989 ;; Hardware stack levels used:    1
 15990 ;; Hardware stack levels required when called:    5
 15991 ;; This function calls:
 15992 ;;		Nothing
 15993 ;; This function is called by:
 15994 ;;		_main
 15995 ;; This function uses a non-reentrant model
 15996 ;;
 15997                           
 15998                           
 15999                           ;psect for function _Buzzer_Initialization
 16000  1F17                     _Buzzer_Initialization:	
 16001                           
 16002                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 16003                           
 16004                           ;incstack = 0
 16005                           ; Regs used in _Buzzer_Initialization: []
 16006  1F17  0021               	movlb	1	; select bank1
 16007  1F18  1430               	bsf	_Buz1^(0+128),0
 16008  1F19  0008               	return
 16009  1F1A                     __end_of_Buzzer_Initialization:	
 16010                           
 16011                           	psect	intentry
 16012  0004                     __pintentry:	
 16013 ;; *************** function _ISR *****************
 16014 ;; Defined at:
 16015 ;;		line 107 in file "../src/MCU_B1.c"
 16016 ;; Parameters:    Size  Location     Type
 16017 ;;		None
 16018 ;; Auto vars:     Size  Location     Type
 16019 ;;		None
 16020 ;; Return value:  Size  Location     Type
 16021 ;;		None               void
 16022 ;; Registers used:
 16023 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16024 ;; Tracked objects:
 16025 ;;		On entry : 0/0
 16026 ;;		On exit  : 0/0
 16027 ;;		Unchanged: 0/0
 16028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16031 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16032 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16033 ;;Total ram usage:        1 bytes
 16034 ;; Hardware stack levels used:    1
 16035 ;; Hardware stack levels required when called:    4
 16036 ;; This function calls:
 16037 ;;		_IOC_ISR
 16038 ;;		_TMR1_ISR
 16039 ;; This function is called by:
 16040 ;;		Interrupt level 1
 16041 ;; This function uses a non-reentrant model
 16042 ;;
 16043                           
 16044  0004                     _ISR:	
 16045                           
 16046                           ;incstack = 0
 16047                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16048  0004  147E               	bsf	126,0	;set compiler interrupt flag
 16049  0005  3180               	pagesel	$
 16050  0006  0020               	movlb	0	; select bank0
 16051  0007  087F               	movf	127,w
 16052  0008  00F7               	movwf	??_ISR
 16053                           
 16054                           ;MCU_B1.c: 109: IOC_ISR();
 16055  0009  3190  2066  3180   	fcall	_IOC_ISR
 16056                           
 16057                           ;MCU_B1.c: 111: ;;
 16058                           ;MCU_B1.c: 113: TMR1_ISR();
 16059  000C  3194  2463         	fcall	_TMR1_ISR
 16060  000E  0877               	movf	??_ISR,w
 16061  000F  0020               	movlb	0	; select bank0
 16062  0010  00FF               	movwf	127
 16063  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 16064  0012  0009               	retfie
 16065  0013                     __end_of_ISR:	
 16066                           
 16067                           	psect	text113
 16068  1463                     __ptext113:	
 16069 ;; *************** function _TMR1_ISR *****************
 16070 ;; Defined at:
 16071 ;;		line 209 in file "../src/MCU_B1.c"
 16072 ;; Parameters:    Size  Location     Type
 16073 ;;		None
 16074 ;; Auto vars:     Size  Location     Type
 16075 ;;		None
 16076 ;; Return value:  Size  Location     Type
 16077 ;;		None               void
 16078 ;; Registers used:
 16079 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16080 ;; Tracked objects:
 16081 ;;		On entry : 0/0
 16082 ;;		On exit  : 0/0
 16083 ;;		Unchanged: 0/0
 16084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16089 ;;Total ram usage:        0 bytes
 16090 ;; Hardware stack levels used:    1
 16091 ;; Hardware stack levels required when called:    2
 16092 ;; This function calls:
 16093 ;;		_setDimmerLights_IntrControl
 16094 ;; This function is called by:
 16095 ;;		_ISR
 16096 ;; This function uses a non-reentrant model
 16097 ;;
 16098                           
 16099                           
 16100                           ;psect for function _TMR1_ISR
 16101  1463                     _TMR1_ISR:	
 16102                           
 16103                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 16104                           
 16105                           ;incstack = 0
 16106                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16107  1463  0021               	movlb	1	; select bank1
 16108  1464  1C11               	btfss	17,0	;volatile
 16109  1465  0008               	return
 16110  1466  0020               	movlb	0	; select bank0
 16111  1467  1C11               	btfss	17,0	;volatile
 16112  1468  0008               	return
 16113                           
 16114                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 16115  1469  30FA               	movlw	250
 16116  146A  0097               	movwf	23	;volatile
 16117                           
 16118                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 16119  146B  3038               	movlw	56
 16120  146C  0096               	movwf	22	;volatile
 16121                           
 16122                           ;MCU_B1.c: 214: TMR1IF = 0;
 16123  146D  1011               	bcf	17,0	;volatile
 16124                           
 16125                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 16126  146E  3001               	movlw	1
 16127  146F  3181  21B1  3194   	fcall	_setDimmerLights_IntrControl
 16128                           
 16129                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 16130  1472  3002               	movlw	2
 16131  1473  3181  21B1  3194   	fcall	_setDimmerLights_IntrControl
 16132                           
 16133                           ;MCU_B1.c: 234: Timer1.Count++;
 16134  1476  3001               	movlw	1
 16135  1477  0021               	movlb	1	; select bank1
 16136  1478  07CC               	addwf	(_Timer1^(0+128)+1),f
 16137  1479  3000               	movlw	0
 16138  147A  3DCD               	addwfc	((_Timer1+1)^(0+128)+1),f
 16139                           
 16140                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 16141  147B  3001               	movlw	1
 16142  147C  3ECB               	addlw	_Timer1& (0+255)
 16143  147D  0086               	movwf	6
 16144  147E  0187               	clrf	7
 16145  147F  3F40               	moviw [0]fsr1
 16146  1480  3A64               	xorlw	100
 16147  1481  1D03               	skipz
 16148  1482  2C85               	goto	u675_25
 16149  1483  3F41               	moviw [1]fsr1
 16150  1484  3A00               	xorlw	0
 16151  1485                     u675_25:	
 16152  1485  1D03               	skipz
 16153  1486  0008               	return
 16154                           
 16155                           ;MCU_B1.c: 236: {
 16156                           ;MCU_B1.c: 237: Timer1.Count = 0;
 16157  1487  01CC               	clrf	(_Timer1^(0+128)+1)
 16158  1488  01CD               	clrf	((_Timer1+1)^(0+128)+1)
 16159                           
 16160                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 16161  1489  144B               	bsf	_Timer1^(0+128),0
 16162  148A  0008               	return
 16163  148B                     __end_of_TMR1_ISR:	
 16164                           
 16165                           	psect	text114
 16166  01B1                     __ptext114:	
 16167 ;; *************** function _setDimmerLights_IntrControl *****************
 16168 ;; Defined at:
 16169 ;;		line 92 in file "../src/Dimmer_B1.c"
 16170 ;; Parameters:    Size  Location     Type
 16171 ;;  lights          1    wreg     unsigned char 
 16172 ;; Auto vars:     Size  Location     Type
 16173 ;;  lights          1    6[COMMON] unsigned char 
 16174 ;; Return value:  Size  Location     Type
 16175 ;;		None               void
 16176 ;; Registers used:
 16177 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16178 ;; Tracked objects:
 16179 ;;		On entry : 0/0
 16180 ;;		On exit  : 0/0
 16181 ;;		Unchanged: 0/0
 16182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16184 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16185 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16186 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16187 ;;Total ram usage:        5 bytes
 16188 ;; Hardware stack levels used:    1
 16189 ;; Hardware stack levels required when called:    1
 16190 ;; This function calls:
 16191 ;;		_DimmerIntrPointSelect
 16192 ;; This function is called by:
 16193 ;;		_TMR1_ISR
 16194 ;; This function uses a non-reentrant model
 16195 ;;
 16196                           
 16197                           
 16198                           ;psect for function _setDimmerLights_IntrControl
 16199  01B1                     _setDimmerLights_IntrControl:	
 16200                           
 16201                           ;incstack = 0
 16202                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16203                           ;setDimmerLights_IntrControl@lights stored from wreg
 16204  01B1  00F6               	movwf	setDimmerLights_IntrControl@lights
 16205                           
 16206                           ;Dimmer_B1.c: 228: DimmerIntrPointSelect(lights);
 16207  01B2  0876               	movf	setDimmerLights_IntrControl@lights,w
 16208  01B3  3190  20D6  3181   	fcall	_DimmerIntrPointSelect
 16209                           
 16210                           ;Dimmer_B1.c: 229: if (DimmerLightsIntr->GO == 1) {
 16211  01B6  0879               	movf	_DimmerLightsIntr,w
 16212  01B7  0086               	movwf	6
 16213  01B8  3001               	movlw	1	; select bank2/3
 16214  01B9  0087               	movwf	7
 16215  01BA  1C01               	btfss	1,0
 16216  01BB  2A13               	goto	i1l6555
 16217                           
 16218                           ;Dimmer_B1.c: 230: DimmerLightsIntr->Count++;
 16219  01BC  3001               	movlw	1
 16220  01BD  00F2               	movwf	??_setDimmerLights_IntrControl
 16221  01BE  0879               	movf	_DimmerLightsIntr,w
 16222  01BF  3E03               	addlw	3
 16223  01C0  0086               	movwf	6
 16224  01C1  3001               	movlw	1	; select bank2/3
 16225  01C2  0087               	movwf	7
 16226  01C3  0872               	movf	??_setDimmerLights_IntrControl,w
 16227  01C4  0781               	addwf	1,f
 16228                           
 16229                           ;Dimmer_B1.c: 231: if (DimmerLightsIntr->Count
 16230                           ;Dimmer_B1.c: 232: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 16231  01C5  0021               	movlb	1	; select bank1
 16232  01C6  084A               	movf	(_Dimmer^(0+128)+2),w
 16233  01C7  00F2               	movwf	??_setDimmerLights_IntrControl
 16234  01C8  01F3               	clrf	??_setDimmerLights_IntrControl+1
 16235  01C9  09F2               	comf	??_setDimmerLights_IntrControl,f
 16236  01CA  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 16237  01CB  0AF2               	incf	??_setDimmerLights_IntrControl,f
 16238  01CC  1903               	skipnz
 16239  01CD  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 16240  01CE  0879               	movf	_DimmerLightsIntr,w
 16241  01CF  3E04               	addlw	4
 16242  01D0  0086               	movwf	6
 16243  01D1  3001               	movlw	1	; select bank2/3
 16244  01D2  0087               	movwf	7
 16245  01D3  0801               	movf	1,w
 16246  01D4  0772               	addwf	??_setDimmerLights_IntrControl,w
 16247  01D5  00F4               	movwf	??_setDimmerLights_IntrControl+2
 16248  01D6  0873               	movf	??_setDimmerLights_IntrControl+1,w
 16249  01D7  1803               	skipnc
 16250  01D8  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 16251  01D9  00F5               	movwf	??_setDimmerLights_IntrControl+3
 16252  01DA  0879               	movf	_DimmerLightsIntr,w
 16253  01DB  3E03               	addlw	3
 16254  01DC  0086               	movwf	6
 16255  01DD  3001               	movlw	1	; select bank2/3
 16256  01DE  0087               	movwf	7
 16257  01DF  0875               	movf	??_setDimmerLights_IntrControl+3,w
 16258  01E0  3A80               	xorlw	128
 16259  01E1  3C80               	sublw	128
 16260  01E2  1D03               	skipz
 16261  01E3  29E6               	goto	u580_25
 16262  01E4  0874               	movf	??_setDimmerLights_IntrControl+2,w
 16263  01E5  0201               	subwf	1,w
 16264  01E6                     u580_25:	
 16265  01E6  1C03               	skipc
 16266  01E7  0008               	return
 16267                           
 16268                           ;Dimmer_B1.c: 233: DimmerLightsIntr->Count = 0;
 16269  01E8  0879               	movf	_DimmerLightsIntr,w
 16270  01E9  3E03               	addlw	3
 16271  01EA  0086               	movwf	6
 16272  01EB  3001               	movlw	1	; select bank2/3
 16273  01EC  0087               	movwf	7
 16274  01ED  0181               	clrf	1
 16275                           
 16276                           ;Dimmer_B1.c: 234: DimmerLightsIntr->GO = 0;
 16277  01EE  0879               	movf	_DimmerLightsIntr,w
 16278  01EF  0086               	movwf	6
 16279  01F0  3001               	movlw	1	; select bank2/3
 16280  01F1  0087               	movwf	7
 16281  01F2  1001               	bcf	1,0
 16282                           
 16283                           ;Dimmer_B1.c: 235: DimmerLightsIntr->Flag = 1;
 16284  01F3  0879               	movf	_DimmerLightsIntr,w
 16285  01F4  3E08               	addlw	8
 16286  01F5  0086               	movwf	6
 16287  01F6  3001               	movlw	1	; select bank2/3
 16288  01F7  0087               	movwf	7
 16289  01F8  1401               	bsf	1,0
 16290                           
 16291                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->MOSFET == 1) {
 16292  01F9  0879               	movf	_DimmerLightsIntr,w
 16293  01FA  3E09               	addlw	9
 16294  01FB  0086               	movwf	6
 16295  01FC  3001               	movlw	1	; select bank2/3
 16296  01FD  0087               	movwf	7
 16297  01FE  1E01               	btfss	1,4
 16298  01FF  0008               	return
 16299                           
 16300                           ;Dimmer_B1.c: 237: DimmerLightsIntr->MOSFET = 0;
 16301  0200  0879               	movf	_DimmerLightsIntr,w
 16302  0201  3E09               	addlw	9
 16303  0202  0086               	movwf	6
 16304  0203  3001               	movlw	1	; select bank2/3
 16305  0204  0087               	movwf	7
 16306  0205  1201               	bcf	1,4
 16307                           
 16308                           ;Dimmer_B1.c: 239: if (lights == 1) {
 16309  0206  0876               	movf	setDimmerLights_IntrControl@lights,w
 16310  0207  3A01               	xorlw	1
 16311  0208  1D03               	skipz
 16312  0209  2A0C               	goto	i1l6551
 16313                           
 16314                           ;Dimmer_B1.c: 240: RA7 = 0;
 16315  020A  0020               	movlb	0	; select bank0
 16316  020B  138C               	bcf	12,7	;volatile
 16317  020C                     i1l6551:	
 16318                           ;Dimmer_B1.c: 241: ;;
 16319                           
 16320                           
 16321                           ;Dimmer_B1.c: 242: }
 16322                           ;Dimmer_B1.c: 245: if (lights == 2) {
 16323  020C  0876               	movf	setDimmerLights_IntrControl@lights,w
 16324  020D  3A02               	xorlw	2
 16325  020E  1D03               	skipz
 16326  020F  0008               	return
 16327                           
 16328                           ;Dimmer_B1.c: 246: RB4 = 0;
 16329  0210  0020               	movlb	0	; select bank0
 16330  0211  120D               	bcf	13,4	;volatile
 16331                           
 16332                           ;Dimmer_B1.c: 247: }
 16333                           ;Dimmer_B1.c: 249: }
 16334                           ;Dimmer_B1.c: 250: }
 16335                           ;Dimmer_B1.c: 251: } else {
 16336  0212  0008               	return
 16337  0213                     i1l6555:	
 16338                           
 16339                           ;Dimmer_B1.c: 252: if (DimmerLightsIntr->Flag == 1) {
 16340  0213  0879               	movf	_DimmerLightsIntr,w
 16341  0214  3E08               	addlw	8
 16342  0215  0086               	movwf	6
 16343  0216  3001               	movlw	1	; select bank2/3
 16344  0217  0087               	movwf	7
 16345  0218  1C01               	btfss	1,0
 16346  0219  2AC7               	goto	i1l720
 16347                           
 16348                           ;Dimmer_B1.c: 253: DimmerLightsIntr->Flag = 0;
 16349  021A  0879               	movf	_DimmerLightsIntr,w
 16350  021B  3E08               	addlw	8
 16351  021C  0086               	movwf	6
 16352  021D  3001               	movlw	1	; select bank2/3
 16353  021E  0087               	movwf	7
 16354  021F  1001               	bcf	1,0
 16355                           
 16356                           ;Dimmer_B1.c: 254: if (DimmerLightsIntr->Signal == 1) {
 16357  0220  0879               	movf	_DimmerLightsIntr,w
 16358  0221  0086               	movwf	6
 16359  0222  3001               	movlw	1	; select bank2/3
 16360  0223  0087               	movwf	7
 16361  0224  1C81               	btfss	1,1
 16362  0225  2AC7               	goto	i1l720
 16363                           
 16364                           ;Dimmer_B1.c: 255: DimmerLightsIntr->DimmingTime++;
 16365  0226  3001               	movlw	1
 16366  0227  00F2               	movwf	??_setDimmerLights_IntrControl
 16367  0228  0A79               	incf	_DimmerLightsIntr,w
 16368  0229  0086               	movwf	6
 16369  022A  3001               	movlw	1	; select bank2/3
 16370  022B  0087               	movwf	7
 16371  022C  0872               	movf	??_setDimmerLights_IntrControl,w
 16372  022D  0781               	addwf	1,f
 16373                           
 16374                           ;Dimmer_B1.c: 256: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 16375  022E  0A79               	incf	_DimmerLightsIntr,w
 16376  022F  0086               	movwf	6
 16377  0230  3001               	movlw	1	; select bank2/3
 16378  0231  0087               	movwf	7
 16379  0232  0879               	movf	_DimmerLightsIntr,w
 16380  0233  3E02               	addlw	2
 16381  0234  0084               	movwf	4
 16382  0235  3001               	movlw	1	; select bank2/3
 16383  0236  0085               	movwf	5
 16384  0237  0800               	movf	0,w
 16385  0238  0201               	subwf	1,w
 16386  0239  1C03               	skipc
 16387  023A  2AC7               	goto	i1l720
 16388                           
 16389                           ;Dimmer_B1.c: 257: DimmerLightsIntr->DimmingTime = 0;
 16390  023B  0A79               	incf	_DimmerLightsIntr,w
 16391  023C  0086               	movwf	6
 16392  023D  3001               	movlw	1	; select bank2/3
 16393  023E  0087               	movwf	7
 16394  023F  0181               	clrf	1
 16395                           
 16396                           ;Dimmer_B1.c: 258: if (DimmerLightsIntr->AdjFlag == 1) {
 16397  0240  0879               	movf	_DimmerLightsIntr,w
 16398  0241  0086               	movwf	6
 16399  0242  3001               	movlw	1	; select bank2/3
 16400  0243  0087               	movwf	7
 16401  0244  1D81               	btfss	1,3
 16402  0245  2A7C               	goto	i1l6581
 16403                           
 16404                           ;Dimmer_B1.c: 259: if (DimmerLightsIntr->AdjStatus == 0) {
 16405  0246  0879               	movf	_DimmerLightsIntr,w
 16406  0247  0086               	movwf	6
 16407  0248  3001               	movlw	1	; select bank2/3
 16408  0249  0087               	movwf	7
 16409  024A  1A01               	btfsc	1,4
 16410  024B  2A65               	goto	i1l6575
 16411                           
 16412                           ;Dimmer_B1.c: 260: if (DimmerLightsIntr->DimmingValue < ((char)(80*0.8))) {
 16413  024C  0879               	movf	_DimmerLightsIntr,w
 16414  024D  3E04               	addlw	4
 16415  024E  0086               	movwf	6
 16416  024F  3001               	movlw	1	; select bank2/3
 16417  0250  0087               	movwf	7
 16418  0251  3040               	movlw	64
 16419  0252  0201               	subwf	1,w
 16420  0253  1803               	skipnc
 16421  0254  2A5F               	goto	i1l6573
 16422                           
 16423                           ;Dimmer_B1.c: 261: DimmerLightsIntr->DimmingValue++;
 16424  0255  3001               	movlw	1
 16425  0256  00F2               	movwf	??_setDimmerLights_IntrControl
 16426  0257  0879               	movf	_DimmerLightsIntr,w
 16427  0258  3E04               	addlw	4
 16428  0259  0086               	movwf	6
 16429  025A  3001               	movlw	1	; select bank2/3
 16430  025B  0087               	movwf	7
 16431  025C  0872               	movf	??_setDimmerLights_IntrControl,w
 16432  025D  0781               	addwf	1,f
 16433                           
 16434                           ;Dimmer_B1.c: 262: } else {
 16435  025E  2AC7               	goto	i1l720
 16436  025F                     i1l6573:	
 16437                           
 16438                           ;Dimmer_B1.c: 263: DimmerLightsIntr->AdjStatus = 1;
 16439  025F  0879               	movf	_DimmerLightsIntr,w
 16440  0260  0086               	movwf	6
 16441  0261  3001               	movlw	1	; select bank2/3
 16442  0262  0087               	movwf	7
 16443  0263  1601               	bsf	1,4
 16444                           
 16445                           ;Dimmer_B1.c: 264: }
 16446                           ;Dimmer_B1.c: 265: } else {
 16447  0264  2AC7               	goto	i1l720
 16448  0265                     i1l6575:	
 16449                           
 16450                           ;Dimmer_B1.c: 266: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 16451  0265  0879               	movf	_DimmerLightsIntr,w
 16452  0266  3E04               	addlw	4
 16453  0267  0086               	movwf	6
 16454  0268  3001               	movlw	1	; select bank2/3
 16455  0269  0087               	movwf	7
 16456  026A  300D               	movlw	13
 16457  026B  0201               	subwf	1,w
 16458  026C  1C03               	skipc
 16459  026D  2A76               	goto	i1l6579
 16460                           
 16461                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingValue--;
 16462  026E  0879               	movf	_DimmerLightsIntr,w
 16463  026F  3E04               	addlw	4
 16464  0270  0086               	movwf	6
 16465  0271  3001               	movlw	1	; select bank2/3
 16466  0272  0087               	movwf	7
 16467  0273  3001               	movlw	1
 16468  0274  0281               	subwf	1,f
 16469                           
 16470                           ;Dimmer_B1.c: 268: } else {
 16471  0275  2AC7               	goto	i1l720
 16472  0276                     i1l6579:	
 16473                           
 16474                           ;Dimmer_B1.c: 269: DimmerLightsIntr->AdjStatus = 0;
 16475  0276  0879               	movf	_DimmerLightsIntr,w
 16476  0277  0086               	movwf	6
 16477  0278  3001               	movlw	1	; select bank2/3
 16478  0279  0087               	movwf	7
 16479  027A  1201               	bcf	1,4
 16480                           
 16481                           ;Dimmer_B1.c: 270: }
 16482                           ;Dimmer_B1.c: 271: }
 16483                           ;Dimmer_B1.c: 272: } else if (DimmerLightsIntr->AdjRF == 1) {
 16484  027B  2AC7               	goto	i1l720
 16485  027C                     i1l6581:	
 16486  027C  0879               	movf	_DimmerLightsIntr,w
 16487  027D  0086               	movwf	6
 16488  027E  3001               	movlw	1	; select bank2/3
 16489  027F  0087               	movwf	7
 16490  0280  1D01               	btfss	1,2
 16491  0281  2AC7               	goto	i1l720
 16492                           
 16493                           ;Dimmer_B1.c: 273: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 16494  0282  0879               	movf	_DimmerLightsIntr,w
 16495  0283  3E04               	addlw	4
 16496  0284  0086               	movwf	6
 16497  0285  3001               	movlw	1	; select bank2/3
 16498  0286  0087               	movwf	7
 16499  0287  0879               	movf	_DimmerLightsIntr,w
 16500  0288  3E05               	addlw	5
 16501  0289  0084               	movwf	4
 16502  028A  3001               	movlw	1	; select bank2/3
 16503  028B  0085               	movwf	5
 16504  028C  0800               	movf	0,w
 16505  028D  0201               	subwf	1,w
 16506  028E  1803               	skipnc
 16507  028F  2A9A               	goto	i1l6587
 16508                           
 16509                           ;Dimmer_B1.c: 274: DimmerLightsIntr->DimmingValue++;
 16510  0290  3001               	movlw	1
 16511  0291  00F2               	movwf	??_setDimmerLights_IntrControl
 16512  0292  0879               	movf	_DimmerLightsIntr,w
 16513  0293  3E04               	addlw	4
 16514  0294  0086               	movwf	6
 16515  0295  3001               	movlw	1	; select bank2/3
 16516  0296  0087               	movwf	7
 16517  0297  0872               	movf	??_setDimmerLights_IntrControl,w
 16518  0298  0781               	addwf	1,f
 16519                           
 16520                           ;Dimmer_B1.c: 275: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 16521  0299  2AAF               	goto	i1l6591
 16522  029A                     i1l6587:	
 16523  029A  0879               	movf	_DimmerLightsIntr,w
 16524  029B  3E05               	addlw	5
 16525  029C  0086               	movwf	6
 16526  029D  3001               	movlw	1	; select bank2/3
 16527  029E  0087               	movwf	7
 16528  029F  0879               	movf	_DimmerLightsIntr,w
 16529  02A0  3E04               	addlw	4
 16530  02A1  0084               	movwf	4
 16531  02A2  3001               	movlw	1	; select bank2/3
 16532  02A3  0085               	movwf	5
 16533  02A4  0800               	movf	0,w
 16534  02A5  0201               	subwf	1,w
 16535  02A6  1803               	skipnc
 16536  02A7  2AAF               	goto	i1l6591
 16537                           
 16538                           ;Dimmer_B1.c: 276: DimmerLightsIntr->DimmingValue--;
 16539  02A8  0879               	movf	_DimmerLightsIntr,w
 16540  02A9  3E04               	addlw	4
 16541  02AA  0086               	movwf	6
 16542  02AB  3001               	movlw	1	; select bank2/3
 16543  02AC  0087               	movwf	7
 16544  02AD  3001               	movlw	1
 16545  02AE  0281               	subwf	1,f
 16546  02AF                     i1l6591:	
 16547                           
 16548                           ;Dimmer_B1.c: 277: }
 16549                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 16550  02AF  0879               	movf	_DimmerLightsIntr,w
 16551  02B0  3E05               	addlw	5
 16552  02B1  0086               	movwf	6
 16553  02B2  3001               	movlw	1	; select bank2/3
 16554  02B3  0087               	movwf	7
 16555  02B4  0879               	movf	_DimmerLightsIntr,w
 16556  02B5  3E04               	addlw	4
 16557  02B6  0084               	movwf	4
 16558  02B7  3001               	movlw	1	; select bank2/3
 16559  02B8  0085               	movwf	5
 16560  02B9  0800               	movf	0,w
 16561  02BA  0601               	xorwf	1,w
 16562  02BB  1D03               	skipz
 16563  02BC  2AC7               	goto	i1l720
 16564                           
 16565                           ;Dimmer_B1.c: 279: DimmerLightsIntr->AdjRF = 0;
 16566  02BD  0879               	movf	_DimmerLightsIntr,w
 16567  02BE  0086               	movwf	6
 16568  02BF  3001               	movlw	1	; select bank2/3
 16569  02C0  0087               	movwf	7
 16570  02C1  1101               	bcf	1,2
 16571                           
 16572                           ;Dimmer_B1.c: 280: DimmerLightsIntr->Signal = 0;
 16573  02C2  0879               	movf	_DimmerLightsIntr,w
 16574  02C3  0086               	movwf	6
 16575  02C4  3001               	movlw	1	; select bank2/3
 16576  02C5  0087               	movwf	7
 16577  02C6  1081               	bcf	1,1
 16578  02C7                     i1l720:	
 16579                           
 16580                           ;Dimmer_B1.c: 281: }
 16581                           ;Dimmer_B1.c: 282: }
 16582                           ;Dimmer_B1.c: 300: }
 16583                           ;Dimmer_B1.c: 301: }
 16584                           ;Dimmer_B1.c: 302: }
 16585                           ;Dimmer_B1.c: 304: if (DimmerLightsIntr->MosfetSignal == 1) {
 16586  02C7  0879               	movf	_DimmerLightsIntr,w
 16587  02C8  3E09               	addlw	9
 16588  02C9  0086               	movwf	6
 16589  02CA  3001               	movlw	1	; select bank2/3
 16590  02CB  0087               	movwf	7
 16591  02CC  1D81               	btfss	1,3
 16592  02CD  0008               	return
 16593                           
 16594                           ;Dimmer_B1.c: 305: DimmerLightsIntr->MosfetSignalCount++;
 16595  02CE  3001               	movlw	1
 16596  02CF  00F2               	movwf	??_setDimmerLights_IntrControl
 16597  02D0  0879               	movf	_DimmerLightsIntr,w
 16598  02D1  3E0C               	addlw	12
 16599  02D2  0086               	movwf	6
 16600  02D3  3001               	movlw	1	; select bank2/3
 16601  02D4  0087               	movwf	7
 16602  02D5  0872               	movf	??_setDimmerLights_IntrControl,w
 16603  02D6  0781               	addwf	1,f
 16604                           
 16605                           ;Dimmer_B1.c: 306: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 16606  02D7  0879               	movf	_DimmerLightsIntr,w
 16607  02D8  3E0C               	addlw	12
 16608  02D9  0086               	movwf	6
 16609  02DA  3001               	movlw	1	; select bank2/3
 16610  02DB  0087               	movwf	7
 16611  02DC  0801               	movf	1,w
 16612  02DD  3A05               	xorlw	5
 16613  02DE  1D03               	skipz
 16614  02DF  0008               	return
 16615                           
 16616                           ;Dimmer_B1.c: 307: DimmerLightsIntr->MosfetSignalCount = 0;
 16617  02E0  0879               	movf	_DimmerLightsIntr,w
 16618  02E1  3E0C               	addlw	12
 16619  02E2  0086               	movwf	6
 16620  02E3  3001               	movlw	1	; select bank2/3
 16621  02E4  0087               	movwf	7
 16622  02E5  0181               	clrf	1
 16623                           
 16624                           ;Dimmer_B1.c: 308: DimmerLightsIntr->MosfetSignal = 0;
 16625  02E6  0879               	movf	_DimmerLightsIntr,w
 16626  02E7  3E09               	addlw	9
 16627  02E8  0086               	movwf	6
 16628  02E9  3001               	movlw	1	; select bank2/3
 16629  02EA  0087               	movwf	7
 16630  02EB  1181               	bcf	1,3
 16631  02EC  0008               	return
 16632  02ED                     __end_of_setDimmerLights_IntrControl:	
 16633                           
 16634                           	psect	text115
 16635  10D6                     __ptext115:	
 16636 ;; *************** function _DimmerIntrPointSelect *****************
 16637 ;; Defined at:
 16638 ;;		line 70 in file "../src/Dimmer_B1.c"
 16639 ;; Parameters:    Size  Location     Type
 16640 ;;  lights          1    wreg     unsigned char 
 16641 ;; Auto vars:     Size  Location     Type
 16642 ;;  lights          1    1[COMMON] unsigned char 
 16643 ;; Return value:  Size  Location     Type
 16644 ;;		None               void
 16645 ;; Registers used:
 16646 ;;		wreg
 16647 ;; Tracked objects:
 16648 ;;		On entry : 0/0
 16649 ;;		On exit  : 0/0
 16650 ;;		Unchanged: 0/0
 16651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16653 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16654 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16655 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16656 ;;Total ram usage:        2 bytes
 16657 ;; Hardware stack levels used:    1
 16658 ;; This function calls:
 16659 ;;		Nothing
 16660 ;; This function is called by:
 16661 ;;		_setDimmerLights_IntrControl
 16662 ;; This function uses a non-reentrant model
 16663 ;;
 16664                           
 16665                           
 16666                           ;psect for function _DimmerIntrPointSelect
 16667  10D6                     _DimmerIntrPointSelect:	
 16668                           
 16669                           ;incstack = 0
 16670                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 16671                           ;DimmerIntrPointSelect@lights stored from wreg
 16672  10D6  00F1               	movwf	DimmerIntrPointSelect@lights
 16673                           
 16674                           ;Dimmer_B1.c: 72: if (lights == 1) {
 16675  10D7  0871               	movf	DimmerIntrPointSelect@lights,w
 16676  10D8  3A01               	xorlw	1
 16677  10D9  1D03               	skipz
 16678  10DA  28DF               	goto	i1l709
 16679                           
 16680                           ;Dimmer_B1.c: 73: DimmerLightsIntr = &DimmerLights1;
 16681  10DB  303E               	movlw	_DimmerLights1& (0+255)
 16682  10DC  00F0               	movwf	??_DimmerIntrPointSelect
 16683  10DD  0870               	movf	??_DimmerIntrPointSelect,w
 16684  10DE  00F9               	movwf	_DimmerLightsIntr
 16685  10DF                     i1l709:	
 16686                           
 16687                           ;Dimmer_B1.c: 74: }
 16688                           ;Dimmer_B1.c: 77: if (lights == 2) {
 16689  10DF  0871               	movf	DimmerIntrPointSelect@lights,w
 16690  10E0  3A02               	xorlw	2
 16691  10E1  1D03               	skipz
 16692  10E2  0008               	return
 16693                           
 16694                           ;Dimmer_B1.c: 78: DimmerLightsIntr = &DimmerLights2;
 16695  10E3  304D               	movlw	_DimmerLights2& (0+255)
 16696  10E4  00F0               	movwf	??_DimmerIntrPointSelect
 16697  10E5  0870               	movf	??_DimmerIntrPointSelect,w
 16698  10E6  00F9               	movwf	_DimmerLightsIntr
 16699  10E7  0008               	return
 16700  10E8                     __end_of_DimmerIntrPointSelect:	
 16701                           
 16702                           	psect	text116
 16703  1066                     __ptext116:	
 16704 ;; *************** function _IOC_ISR *****************
 16705 ;; Defined at:
 16706 ;;		line 401 in file "../src/MCU_B1.c"
 16707 ;; Parameters:    Size  Location     Type
 16708 ;;		None
 16709 ;; Auto vars:     Size  Location     Type
 16710 ;;		None
 16711 ;; Return value:  Size  Location     Type
 16712 ;;		None               void
 16713 ;; Registers used:
 16714 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16715 ;; Tracked objects:
 16716 ;;		On entry : 0/0
 16717 ;;		On exit  : 0/0
 16718 ;;		Unchanged: 0/0
 16719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16724 ;;Total ram usage:        0 bytes
 16725 ;; Hardware stack levels used:    1
 16726 ;; Hardware stack levels required when called:    3
 16727 ;; This function calls:
 16728 ;;		_setDimmerReClock
 16729 ;; This function is called by:
 16730 ;;		_ISR
 16731 ;; This function uses a non-reentrant model
 16732 ;;
 16733                           
 16734                           
 16735                           ;psect for function _IOC_ISR
 16736  1066                     _IOC_ISR:	
 16737                           
 16738                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 16739                           
 16740                           ;incstack = 0
 16741                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16742  1066  1D8B               	btfss	11,3	;volatile
 16743  1067  0008               	return
 16744  1068  1C0B               	btfss	11,0	;volatile
 16745  1069  0008               	return
 16746  106A  0027               	movlb	7	; select bank7
 16747  106B  1D16               	btfss	22,2	;volatile
 16748  106C  0008               	return
 16749                           
 16750                           ;MCU_B1.c: 403: IOCBF2 = 0;
 16751  106D  1116               	bcf	22,2	;volatile
 16752                           
 16753                           ;MCU_B1.c: 404: IOCIF = 0;
 16754  106E  100B               	bcf	11,0	;volatile
 16755                           
 16756                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 16757  106F  0021               	movlb	1	; select bank1
 16758  1070  1C20               	btfss	_myMain^(0+128),0
 16759  1071  0008               	return
 16760                           
 16761                           ;MCU_B1.c: 408: setDimmerReClock();
 16762  1072  319F  274F         	fcall	_setDimmerReClock
 16763  1074  0008               	return
 16764  1075                     __end_of_IOC_ISR:	
 16765                           
 16766                           	psect	text117
 16767  1F4F                     __ptext117:	
 16768 ;; *************** function _setDimmerReClock *****************
 16769 ;; Defined at:
 16770 ;;		line 244 in file "../src/MCU_B1.c"
 16771 ;; Parameters:    Size  Location     Type
 16772 ;;		None
 16773 ;; Auto vars:     Size  Location     Type
 16774 ;;		None
 16775 ;; Return value:  Size  Location     Type
 16776 ;;		None               void
 16777 ;; Registers used:
 16778 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16779 ;; Tracked objects:
 16780 ;;		On entry : 0/0
 16781 ;;		On exit  : 0/0
 16782 ;;		Unchanged: 0/0
 16783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16788 ;;Total ram usage:        0 bytes
 16789 ;; Hardware stack levels used:    1
 16790 ;; Hardware stack levels required when called:    2
 16791 ;; This function calls:
 16792 ;;		_setDimmerLights_IntrIOC_GO
 16793 ;; This function is called by:
 16794 ;;		_IOC_ISR
 16795 ;; This function uses a non-reentrant model
 16796 ;;
 16797                           
 16798                           
 16799                           ;psect for function _setDimmerReClock
 16800  1F4F                     _setDimmerReClock:	
 16801                           
 16802                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 16803                           
 16804                           ;incstack = 0
 16805                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16806  1F4F  3001               	movlw	1
 16807  1F50  3187  27C9  319F   	fcall	_setDimmerLights_IntrIOC_GO
 16808                           
 16809                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 16810  1F53  3002               	movlw	2
 16811  1F54  3187  27C9         	fcall	_setDimmerLights_IntrIOC_GO
 16812  1F56  0008               	return
 16813  1F57                     __end_of_setDimmerReClock:	
 16814                           
 16815                           	psect	text118
 16816  07C9                     __ptext118:	
 16817 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 16818 ;; Defined at:
 16819 ;;		line 28 in file "../src/Dimmer_B1.c"
 16820 ;; Parameters:    Size  Location     Type
 16821 ;;  lights          1    wreg     unsigned char 
 16822 ;; Auto vars:     Size  Location     Type
 16823 ;;  lights          1    2[COMMON] unsigned char 
 16824 ;; Return value:  Size  Location     Type
 16825 ;;		None               void
 16826 ;; Registers used:
 16827 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16828 ;; Tracked objects:
 16829 ;;		On entry : 0/0
 16830 ;;		On exit  : 0/0
 16831 ;;		Unchanged: 0/0
 16832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16834 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16836 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16837 ;;Total ram usage:        1 bytes
 16838 ;; Hardware stack levels used:    1
 16839 ;; Hardware stack levels required when called:    1
 16840 ;; This function calls:
 16841 ;;		_DimmerIntrIOCPointSelect
 16842 ;; This function is called by:
 16843 ;;		_setDimmerReClock
 16844 ;; This function uses a non-reentrant model
 16845 ;;
 16846                           
 16847                           
 16848                           ;psect for function _setDimmerLights_IntrIOC_GO
 16849  07C9                     _setDimmerLights_IntrIOC_GO:	
 16850                           
 16851                           ;incstack = 0
 16852                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16853                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 16854  07C9  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 16855                           
 16856                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 16857  07CA  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 16858  07CB  3191  217C  3187   	fcall	_DimmerIntrIOCPointSelect
 16859                           
 16860                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0) {
 16861  07CE  0021               	movlb	1	; select bank1
 16862  07CF  0857               	movf	_DimmerLightsIntrIOC^(0+128),w
 16863  07D0  0086               	movwf	6
 16864  07D1  3001               	movlw	1	; select bank2/3
 16865  07D2  0087               	movwf	7
 16866  07D3  1801               	btfsc	1,0
 16867  07D4  0008               	return
 16868  07D5  0857               	movf	_DimmerLightsIntrIOC^(0+128),w
 16869  07D6  3E09               	addlw	9
 16870  07D7  0086               	movwf	6
 16871  07D8  3001               	movlw	1	; select bank2/3
 16872  07D9  0087               	movwf	7
 16873  07DA  1981               	btfsc	1,3
 16874  07DB  0008               	return
 16875                           
 16876                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 16877  07DC  0857               	movf	_DimmerLightsIntrIOC^(0+128),w
 16878  07DD  0086               	movwf	6
 16879  07DE  3001               	movlw	1	; select bank2/3
 16880  07DF  0087               	movwf	7
 16881  07E0  1401               	bsf	1,0
 16882                           
 16883                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 16884  07E1  0857               	movf	_DimmerLightsIntrIOC^(0+128),w
 16885  07E2  3E09               	addlw	9
 16886  07E3  0086               	movwf	6
 16887  07E4  3001               	movlw	1	; select bank2/3
 16888  07E5  0087               	movwf	7
 16889  07E6  1581               	bsf	1,3
 16890                           
 16891                           ;Dimmer_B1.c: 48: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 16892  07E7  0857               	movf	_DimmerLightsIntrIOC^(0+128),w
 16893  07E8  0086               	movwf	6
 16894  07E9  3001               	movlw	1	; select bank2/3
 16895  07EA  0087               	movwf	7
 16896  07EB  1F01               	btfss	1,6
 16897  07EC  0008               	return
 16898                           
 16899                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MOSFET = 1;
 16900  07ED  0857               	movf	_DimmerLightsIntrIOC^(0+128),w
 16901  07EE  3E09               	addlw	9
 16902  07EF  0086               	movwf	6
 16903  07F0  3001               	movlw	1	; select bank2/3
 16904  07F1  0087               	movwf	7
 16905  07F2  1601               	bsf	1,4
 16906                           
 16907                           ;Dimmer_B1.c: 51: if (lights == 1) {
 16908  07F3  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 16909  07F4  3A01               	xorlw	1
 16910  07F5  1D03               	skipz
 16911  07F6  2FF9               	goto	i1l6155
 16912                           
 16913                           ;Dimmer_B1.c: 52: RA7 = 1;
 16914  07F7  0020               	movlb	0	; select bank0
 16915  07F8  178C               	bsf	12,7	;volatile
 16916  07F9                     i1l6155:	
 16917                           ;Dimmer_B1.c: 53: ;;
 16918                           
 16919                           
 16920                           ;Dimmer_B1.c: 54: }
 16921                           ;Dimmer_B1.c: 57: if (lights == 2) {
 16922  07F9  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 16923  07FA  3A02               	xorlw	2
 16924  07FB  1D03               	skipz
 16925  07FC  0008               	return
 16926                           
 16927                           ;Dimmer_B1.c: 58: RB4 = 1;
 16928  07FD  0020               	movlb	0	; select bank0
 16929  07FE  160D               	bsf	13,4	;volatile
 16930  07FF  0008               	return
 16931  0800                     __end_of_setDimmerLights_IntrIOC_GO:	
 16932                           
 16933                           	psect	text119
 16934  117C                     __ptext119:	
 16935 ;; *************** function _DimmerIntrIOCPointSelect *****************
 16936 ;; Defined at:
 16937 ;;		line 8 in file "../src/Dimmer_B1.c"
 16938 ;; Parameters:    Size  Location     Type
 16939 ;;  lights          1    wreg     unsigned char 
 16940 ;; Auto vars:     Size  Location     Type
 16941 ;;  lights          1    1[COMMON] unsigned char 
 16942 ;; Return value:  Size  Location     Type
 16943 ;;		None               void
 16944 ;; Registers used:
 16945 ;;		wreg
 16946 ;; Tracked objects:
 16947 ;;		On entry : 0/0
 16948 ;;		On exit  : 0/0
 16949 ;;		Unchanged: 0/0
 16950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16952 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16953 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16954 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16955 ;;Total ram usage:        2 bytes
 16956 ;; Hardware stack levels used:    1
 16957 ;; This function calls:
 16958 ;;		Nothing
 16959 ;; This function is called by:
 16960 ;;		_setDimmerLights_IntrIOC_GO
 16961 ;; This function uses a non-reentrant model
 16962 ;;
 16963                           
 16964                           
 16965                           ;psect for function _DimmerIntrIOCPointSelect
 16966  117C                     _DimmerIntrIOCPointSelect:	
 16967                           
 16968                           ;incstack = 0
 16969                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 16970                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 16971  117C  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 16972                           
 16973                           ;Dimmer_B1.c: 10: if (lights == 1) {
 16974  117D  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 16975  117E  3A01               	xorlw	1
 16976  117F  1D03               	skipz
 16977  1180  2986               	goto	i1l697
 16978                           
 16979                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 16980  1181  303E               	movlw	_DimmerLights1& (0+255)
 16981  1182  00F0               	movwf	??_DimmerIntrIOCPointSelect
 16982  1183  0870               	movf	??_DimmerIntrIOCPointSelect,w
 16983  1184  0021               	movlb	1	; select bank1
 16984  1185  00D7               	movwf	_DimmerLightsIntrIOC^(0+128)
 16985  1186                     i1l697:	
 16986                           
 16987                           ;Dimmer_B1.c: 12: }
 16988                           ;Dimmer_B1.c: 15: if (lights == 2) {
 16989  1186  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 16990  1187  3A02               	xorlw	2
 16991  1188  1D03               	skipz
 16992  1189  0008               	return
 16993                           
 16994                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 16995  118A  304D               	movlw	_DimmerLights2& (0+255)
 16996  118B  00F0               	movwf	??_DimmerIntrIOCPointSelect
 16997  118C  0870               	movf	??_DimmerIntrIOCPointSelect,w
 16998  118D  0021               	movlb	1	; select bank1
 16999  118E  00D7               	movwf	_DimmerLightsIntrIOC^(0+128)
 17000  118F  0008               	return
 17001  1190                     __end_of_DimmerIntrIOCPointSelect:	
 17002  007E                     btemp	set	126	;btemp
 17003  007E                     pic14e$flags	set	126
 17004  007E                     wtemp	set	126
 17005  007E                     wtemp0	set	126
 17006  0080                     wtemp1	set	128
 17007  0082                     wtemp2	set	130
 17008  0084                     wtemp3	set	132
 17009  0086                     wtemp4	set	134
 17010  0088                     wtemp5	set	136
 17011  007F                     wtemp6	set	127
 17012  007E                     ttemp	set	126
 17013  007E                     ttemp0	set	126
 17014  0081                     ttemp1	set	129
 17015  0084                     ttemp2	set	132
 17016  0087                     ttemp3	set	135
 17017  007F                     ttemp4	set	127
 17018  007E                     ltemp	set	126
 17019  007E                     ltemp0	set	126
 17020  0082                     ltemp1	set	130
 17021  0086                     ltemp2	set	134
 17022  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         199
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80     78      80
    BANK1            80      7      78
    BANK2            80      0      77
    BANK3            80      0      78
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK2[9]), 

    LED	PTR struct LED size(2) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw2(BANK1[2]), DlySw1(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _getMain_LightsStatus->_getDimmerLights_Status
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setPercentValue
    _setDimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _setBuz->___awdiv
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   90331
                                              3 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                           _WDT_Main
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1434
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   11335
                                             29 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    5952
                                             17 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     450
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    5264
                                             22 BANK0      7     7      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1182
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1182
                                              3 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   28305
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   28305
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   27614
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1478
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   26090
                             _setBuz
         _setDimmerLights_ErrorClose
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0    7127
                                             17 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    1860
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   15280
                                             71 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15057
                                             68 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14991
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14925
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getMain_All_Error_Status                             2     2      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     252
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              1 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1306
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1306
                                              3 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1368
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     204
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12890
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   27848
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   27848
                                             70 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  4     3      1   12415
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      4     3      1   13800
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1     423
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   11682
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     134
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1151
                                              1 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       1     1      0      93
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1434
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    2337
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    2337
                                             22 BANK0      3     3      0
                _DelayOffPointSelect
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0    2249
                                             17 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    1915
                                             15 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     266
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     266
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1139
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     319
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     181
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0      89
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     494
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     404
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     359
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     268
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     110
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
             _setRF_DimmerLights
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
       _setRF_Learn
   _WDT_Main
     _WDT_Clearing
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4E      11       97.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     146      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     146      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Nov 20 17:16:46 2014

                   __size_of_Switch_Main 0024                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       l92 0A9D  
                                     l94 0AB1                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 138B                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 007B  
                   _getDimmerLights_Line 1169                   __end_of_setDelayOff_GO 0A6C  
                           ___ftadd@exp1 004D                             ___ftadd@exp2 004C  
              setDimmerLights_Adj@lights 0065                 __size_of_getRF_KeyStatus 0011  
                   _setDimmerLights_Main 0AC5                     _setDimmerLights_Line 120A  
                           ___ftadd@sign 004B                                      l102 17F9  
                                    l103 17F5                                      l104 17E3  
                                    l106 17F3                                      l322 119A  
                                    l323 119B                     _setDimmerLights_SwOn 15E1  
                                    l247 0D8A                                      l272 0E46  
                                    l273 0E89                                      l366 141B  
                                    l741 113A                                      l833 1172  
                                    l834 1179                                      _GIE 005F  
                                    _CRC 00D4                                      l996 171F  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0017                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RA4 0064                                      _LED 00CE  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00BC                                      _ISR 0004  
                                    _WDT 00D2             getDimmerLights_Status@lights 0022  
                                    _Sw1 015C                                      _Sw2 01C5  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 11A4  
                  _Buzzer_Initialization 1F17                          __end_of_ADC_Set 1F4F  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023             getDimmerLights_Status@status 0023  
                        _setDimmerLights 0F03                   _setMain_Exception$6055 0039  
                      ??_getSw_KeyStatus 0020                    _setDimmerLights_AdjRF 13CF  
                                   ?_ISR 0070          setDimmerLights_ErrorClose@count 0032  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1075  
                           ___ftdiv@sign 003D                                     l2201 01A8  
                                   l2203 0081                                     l1260 15A5  
                                   l1274 082B                 ?_DimmerLightsPointSelect 0070  
                                   l1283 08C4                                     l2175 1226  
                                   l2191 1402                                     l1800 0487  
                                   l2450 167C                          __end_of_IOC_Set 1FE7  
                                   l2704 038C                                     l2465 086A  
                                   l5211 0315                                     l6011 0D5B  
                                   l5221 032B                                     l5301 078E  
                                   l1790 040C                                     l5215 031C  
                                   l6015 0D61                                     l1855 15DD  
                                   l1839 0EAA                                     l1791 040E  
                                   l1792 0416                                     l6121 1437  
                                   l2681 0CD5                                     l5153 0C9B  
                                   l5241 0362                                     l5233 0345  
                                   l5401 0FE6                                     l6041 0D9D  
                                   l6033 0D90                                     l6009 0D58  
                                   l1881 1649                                     l1849 0F00  
                                   l5163 0CC3                                     l2675 0CBE  
                                   l5155 0CA5                                     l5251 037E  
                                   l5243 0367                                     l5403 0FE9  
                                   l6203 0931                                     l6043 0DA0  
                                   l6035 0D93                                     l5323 0683  
                                   l1788 04CF                                     l6133 137B  
                                   l5181 10F1                                     l5165 0CCB  
                                   l5157 0CAA                                     l5149 0C94  
                                   l5261 03B0                                     l5253 0388  
                                   l5245 036B                                     l5309 07A7  
                                   l6109 0E8B                                     l6061 0E22  
                                   l6029 0D72                                     l5341 06D4  
                                   l1869 0E1D                                     l1797 044E  
                                   l1798 044A                                     l6119 142C  
                                   l6127 1372                                     l5415 11AF  
                                   l5431 14DD                                     l5271 03CB  
                                   l5239 0358                                     l5407 0FF7  
                                   l6311 14E7                                     l6063 0E25  
                                   l6047 0DA6                                     l6039 0D99  
                                   l6129 1375                                     l5177 10EB  
                                   l5257 039E                                     l5281 0737  
                                   l6313 1508                                     l6081 0E3D  
                                   l5353 06F0                                     l5345 06DC  
                                   l5329 0699                                     l6225 1555  
                                   l6067 0E2B                                     l5541 0A61  
                                   l5533 0A45                                     l5373 0F92  
                                   l6309 1503                                     l6069 0E2E  
                                   l5357 06F8                                     l5613 1617  
                                   l6405 11C3                                     l6421 12FA  
                                   l7205 0854                                     l5463 0983  
                                   l5199 1396                                     l5287 074D  
                                   l5391 0FC2                                     l6095 0E57  
                                   l6079 0E43                                     l6431 1308  
                                   l7215 086B                                     l5537 0A4B  
                                   l5481 09A9                                     l5473 098B  
                                   l5457 0978                                     l5393 0FD0  
                                   l6097 0E6F                                     l5539 0A58  
                                   l5475 0997                                     l7411 09D0  
                                   l6347 10BF                                     l5563 10CF  
                                   l5811 090E                                     l6419 12F8  
                  _setDimmerLights_SwOff 176D                                     l6453 16CC  
                                   l5629 17A1                                     l5485 09B2  
                                   l6285 0813                                     l6429 1304  
                                   l6463 16DC                                     l6447 16C3  
                                   l5399 0FDD                                     l5647 0C1F  
                                   l7095 0545                                     l5807 08FF  
                                   l6367 0EAD                                     l5841 126A  
                                   l6457 16D3                                     l6449 16C6  
                                   l5489 09BA                                     l7441 0A02  
                                   l7425 09E1                                     l7433 09E9  
                                   l5825 1637                                     l6801 046C  
                                   l5843 126D                                     l6459 16D6  
                                   l5771 0B5B                                     l7419 09D8  
                                   l7507 0B18                                     l6723 089A  
                                   l5747 1258                                     l6395 0EF6  
                                   l6379 0EC5                                     l6803 046E  
                                   l7445 0A06                                     l6717 0885  
                                   l5749 125C                                     l6389 0EEB  
                                   l7541 0C3B                                     l5847 1273  
                                   l5767 0B55                                     l5935 1217  
                                   l7471 0F3E                                     l5863 13BF  
                                   l6831 04BD                                     l6903 006C  
                                   l5769 0B2A                                     l7449 0A0A  
                                   l5857 13B6                                     l7395 1335  
                                   l7483 0F65                                     l5859 13B9  
                                   l5699 1518                                     l6819 049C  
                                   l6851 122B                                     l7555 0C5C  
                                   l5973 0DB7                                     l7565 0C7C  
                                   l7549 0C4E                                     l7399 133F  
                                   l7495 0AEA                                     l5991 0DF6  
                                   l6767 042D                                     l6855 1231  
                                   l7559 0C6C                                     l7567 0C85  
                                   l6943 011F                                     l6919 00AF  
                                   l7497 0AF0                                     l5993 0DFA  
                                   l5985 0DDC                                     l6929 00E1  
                                   l6953 0151                                     l7593 140B  
                                   l5995 0DFE                                     l5989 0DF2  
                  _myMain_Initialization 1084                                     l5999 0E02  
                                   l6993 17CD                                     l6979 01A4  
                                   _CFGS 0CAE                             __CFG_WDTE$ON 0000  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   u4015 06A5                                     u4025 06B5  
                                   u4125 0F99                                     u4045 06DD  
                                   u4055 06E3                                     u4305 098E  
                                   u4155 0FC3                                     u4245 14C9  
                                   u4325 0998                                     u3605 0CC6  
                                   u4085 06F9                                     u4335 09A2  
                                   u4095 06FF                                     u4345 09AA  
                                   u4185 0FDE                                     u4530 0BDD  
                                   u3635 0CDC                                     _PEIE 005E  
                                   u3565 0CA0                                     u3805 0359  
                                   u5175 1421                                     u4535 0BDB  
                                   u3585 0CB9                                     u3835 036C  
                                   u6315 04AD                                     u4575 11EF  
                                   u3775 0346                                     u3935 075F  
                                   u4665 0B33                                     u3865 037F  
                                   u3945 076F                                     u6185 0427  
                                   u3955 078F                                     u5395 14F0  
                                   u3965 079E                                     u3975 07A8  
                                   u6635 17C3                                     u6825 159C  
                                   u6905 0843                                     u6915 0862  
                                   u6935 0879                                     _LWLO 0CAD  
                                   _RSSI 00D8                                     _WREN 0CAA  
                                   _Buz1 00B0                                     _main 165E  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 176D  
                        __end_of_RF_Main 0803                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0020                                     btemp 007E  
                        __end_of_WDT_Set 1F94                                     ltemp 007E  
          __size_of_setRF_Initialization 000B                         _setDimmerReClock 1F4F  
                                   start 0013                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 165E                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
                                  ??_ISR 0077                             ___fttol@exp1 005B  
                           ___fttol@lval 0057                   _getDimmerLights_Status 1093  
         __size_of_DimmerIntrPointSelect 0012                         __end_of_LED_Main 1FDB  
       setDimmerLights_ErrorClose@lights 0033            __end_of_DimmerIntrPointSelect 10E8  
                  ?_getDimmerLights_Line 0070                    ?_setDimmerLights_Main 0070  
                  ?_setDimmerLights_Line 0070                          ?_setDelayOff_GO 002A  
                  ?_setDimmerLights_SwOn 0070                                    ?_main 00EA  
                        __end_of___awdiv 09C1                          __end_of___ftadd 03E3  
                        __end_of___ftdiv 07C9                          __end_of___ftneg 1F80  
                        __end_of___ftmul 0720                          ___awdiv@divisor 0020  
                                  _T1CON 0018                          __end_of___fttol 1000  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l720 02C7  
                                  i1l709 10DF                                    i1l697 1186  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0021                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                   setMain_Exception@buz 0038                  __end_of_Timeout_Counter 11F5  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 0800  
             _setDimmerLights_IntrIOC_GO 07C9                         __end_of_TMR1_ISR 148B  
           __size_of_CC2500_WriteCommand 0019       __end_of_setDimmerLights_ErrorClose 0B78  
             _setDimmerLights_ErrorClose 0B1E                         __end_of_TMR1_Set 1FF3  
                          ___awtoft@sign 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1130  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E0                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0012             __end_of_getMain_LightsStatus 150B  
          __end_of_setLED_Initialization 110C                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 0BD3  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003         __size_of_DelayOff_Initialization 0008  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 0B78  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ?_setMemory_Modify 0070  
                __size_of_getDelayOff_GO 000F                        ??_setPercentValue 005C  
                           __end_of_main 169F                      ?_setRF_DimmerLights 0020  
                       __end_of_Fosc_Set 1F2D                       ??_setMemory_Modify 0020  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0F79                     _setSw_Initialization 1F6F  
                                 ??_main 006E                            ___fttol@sign1 0056  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 0DB6  
                         _setMemory_Data 1FAB                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 0014                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03E0                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 1143                   ?_setDimmerLights_AdjRF 0070  
               __size_of_setRFSW_Control 004F                  ??_Switch_Initialization 0024  
                   ??_setRF_DimmerLights 0021             setDimmerLights_AdjControl@sw 0028  
                      ??_getRF_KeyStatus 0020                   ?_setDimmerLights_SwOff 0070  
                            _DlyOff_Main 1726                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006E                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 13AD  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 0CEC  
               _getMain_All_Error_Status 1F2D                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 12AE                                   i1l6155 07F9  
                                 i1l6551 020C                                   i1l6555 0213  
                                 i1l6573 025F                                   i1l6581 027C  
                                 i1l6591 02AF                                   i1l6575 0265  
                                 i1l6587 029A                                   i1l6579 0276  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                                   u580_25 01E6  
                                 u675_25 1485                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   _IO_Set 127B  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1F16           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 120A                                   _Dimmer 00C8  
                                 _DlySw1 00E3                                   _DlySw2 00E5  
             __end_of_Mcu_Initialization 111E                      __end_of_Buzzer_Main 1800  
                                 _Memory 01A0                                   _Timer1 00CB  
     __end_of_setDimmerLights_TriggerAdj 132A               _setDimmerLights_TriggerAdj 130A  
                                 ___bmul 10E8                                ??___awdiv 0024  
                              ??___ftadd 0047             __size_of_DelayOffPointSelect 0014  
                              ??___ftdiv 0034                                ??___ftneg 0041  
                  setDimmerLights@lights 0065                                ??___ftmul 0034  
                              ??___fttol 0052             ?_Flash_Memory_Initialization 0070  
                 ??_getDimmerLights_Line 0020              setDimmerLights_AdjRF@lights 0063  
                 ??_setDimmerLights_Main 0066                   ??_setDimmerLights_Line 0020  
                                 _r_data 00DD                                   _s_data 00DE  
                 ??_setDimmerLights_SwOn 002D                                   _setLED 09C1  
                                 _myMain 00A0                   __end_of_setMemory_Data 1FB7  
                       _DimmerLightsIntr 0079                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0062                         ___awdiv@quotient 0027  
                                 _setBuz 0A6C         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
            ?_setDimmerLights_AdjControl 0070      __end_of_setDimmerLights_IntrControl 02ED  
            _setDimmerLights_IntrControl 01B1                 Flash_Memory_Read@address 0022  
                       ?_Timeout_Counter 0070               __end_of_setMemory_LoopSave 1169  
                  __end_of_SwPointSelect 11CC             __size_of_Flash_Memory_Modify 004E  
      setDimmerLights_IntrControl@lights 0076                  __size_of_LedPointSelect 0020  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
             getMain_LightsStatus@status 0028                               _TouchPower 121F  
             ?_getAll_DimmerLights_AdjGO 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 0BD3  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 003E  
                              ?_LED_Main 0070                               ___ftadd@f1 0041  
                             ___ftadd@f2 0044                     _getRF_KeyStatus$4519 0022  
                          ?_my_MainTimer 0070                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                             ___ftneg@f1 003E                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004E                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                             __pidataBANK3 134A  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
              setMemory_LoopSave@command 0021             __size_of_setDimmerLights_Adj 0052  
                     _LED_Initialization 1FC3                          _getSw_KeyStatus 12EB  
              ??_setControl_Lights_Table 006B                       getRF_KeyStatus@key 0021  
                       ??_DelayTimejudge 0024                          ?_setMemory_Data 0020  
          ??_Flash_Memory_Initialization 0062                         ?_setDimmerLights 0062  
                              ?_WDT_Main 0070                       __size_of_getBuz_GO 0011  
                   _getMain_LightsStatus 14DF               __end_of_set_TimeoutCleared 1F36  
               __end_of_setDimmerReClock 1F57                       __size_of_getRxData 0074  
                    ?_LED_Initialization 0070                    getMain_LightsStatus@i 0026  
                      ?_CC2500_WriteByte 0070                           _DimmerLights11 00D5  
                         _DimmerLights22 00D6                     __size_of_setLED_Main 0044  
              ??_setDimmerLights_Trigger 0023                       ??_CC2500_WriteByte 0020  
                             __pbssBANK0 006F                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                              ?_Fosc_Set 0070                              _Buzzer_Main 17B6  
                      ??_setRFSW_Control 0031                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                           ??_my_MainTimer 002D  
                             ??_LED_Main 0024                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1F57                getMain_LightsStatus@count 0025  
                          ??_Switch_Main 003D                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0024  
                           _DimmerLights 006F                        LedPointSelect@led 0020  
                 __size_of_DelayOff_Main 0008                     __size_of_setRF_Learn 0014  
                            setBuz@count 002C                  ?_getDimmerLights_Status 0070  
                             __pmaintext 165E                           _getDelayOff_GO 1075  
                    _CC2500_WriteCommand 1262                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 0013                         ??_setDelayOff_GO 002C  
          ??_DimmerLights_Initialization 0024                               ??_TMR1_ISR 0077  
                             ??_TMR1_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0023                       __size_of_setTxData 00BD  
                                ?_setLED 0021                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 1F48                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             ??_WDT_Main 0020                    ?_getMain_LightsStatus 0070  
           __end_of_setRF_Initialization 1F9F                       _setRFSW_AdjControl 161E  
                                _IOC_ISR 1066                                  _IOC_Set 1FDB  
                   __size_of_setLog_Code 0036                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 1575                        _Flash_Memory_Read 1294  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 0071  
                 __size_of_CC2500_TxData 0065              ?_setDimmerLights_ErrorClose 0070  
                    ?_setRFSW_AdjControl 0070                                  _RF_Data 0120  
                                _RF_Main 0800                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1F89  
        __end_of_setControl_Lights_Table 0E1E                          setRF_Main@error 00E9  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _setPercentValue 0CEC                         ?_getPercentValue 0070  
           __end_of_CC2500_FrequencyCabr 1FAB                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 10B4                      ??_Flash_Memory_Main 0029  
                    ??_Flash_Memory_Read 0020                   __end_of_getDelayOff_GO 1084  
                                _VarLED1 0165                                  _VarLED2 0169  
         __end_of_getDimmerLights_Status 10A3                        __end_of_getRxData 0F03  
                __end_of_getSw_KeyStatus 130A                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1190          __end_of_setDimmerLights_Trigger 12CC  
                   ??_setRFSW_AdjControl 0067                          __size_of___bmul 0012  
                                ___awdiv 096D                                  ___ftadd 02ED  
                                ___ftdiv 0720                                  ___ftneg 1F77  
                                ___ftmul 066C                                  ___fttol 0F79  
                    __end_of_Switch_Main 1416                  ??_Buzzer_Initialization 0020  
                        _getRF_KeyStatus 10B4                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 0054  
                   setRFSW_AdjControl@sw 006A                          __size_of_setBuz 0059  
                                __ptext1 0832                                  __ptext2 1084  
                                __ptext3 111E                                  __ptext4 0002  
                                __ptext5 13F2                                  __ptext6 0042  
                                __ptext7 11CC                                  __ptext8 1540  
                                __ptext9 12EB                  ??_setDimmerLights_AdjRF 0062  
              __size_of_CC2500_SIDLEMode 0004                    _DimmerIntrPointSelect 10D6  
                           __size_of_ISR 000F               ??_getMain_All_Error_Status 0020  
              __end_of_Flash_Memory_Main 15AB                __end_of_Flash_Memory_Read 12AE  
                ??_setDimmerLights_SwOff 002F                               _setRF_Main 03E3  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1F5F  
                      _DimmerLights_Main 1F67           __size_of_DlyOff_Initialization 0006  
                  ??_CC2500_WriteCommand 0022                __size_of_setMemory_Modify 0013  
          __end_of_DlyOff_Initialization 1F3C               __end_of_CC2500_ClearRXFIFO 1F21  
             __end_of_CC2500_ClearTXFIFO 1F25            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006E                           _LedPointSelect 132A  
                    _DelayOffPointSelect 11A4                                  clrloop0 1F43  
         __size_of_Switch_Initialization 000D            __end_of_Switch_Initialization 2000  
                   end_of_initialization 003E                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 148B                            _DelayTime_1us 1416  
                      __end_of_setTxData 066C               __end_of_Flash_Memory_Write 0832  
                                init_ram 1F3C                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1F3D                               _setSw_Main 0042  
                  CC2500_ReadByte@loop_b 0021                   setDimmerLights_SwOn@sw 002F  
                      _CC2500_ReadStatus 13AD                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 10FA                          ?_getDelayOff_GO 0070  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
               __size_of_CC2500_ReadByte 0017                            _CC2500_RxData 0E1E  
                          _CC2500_TxData 0D51                      ??_CC2500_InitSetREG 0025  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 087E  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1F80  
                    ??_CC2500_ReadStatus 0022                   ??_getMain_LightsStatus 0024  
                CC2500_InitSetREG@loop_c 0028                      __size_of_TouchPower 0015  
               setLED_Initialization@led 0023                   setSw_Initialization@sw 0023  
              __end_of_DimmerLights_Main 1F6F                       _Mcu_Initialization 110C  
               __size_of_CC2500_PowerRST 0043                     __end_of_my_MainTimer 087E  
                         ?_DelayOff_Main 0070                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 134A                  __end_of_setPercentValue 0D51  
               __size_of_CC2500_WriteREG 0021                __end_of_CC2500_InitSetREG 14B5  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 005C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 091B                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 13CF              ??_getAll_DimmerLights_AdjGO 0020  
        getMain_All_Error_Status@command 0070                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1294                     _setRF_Initialization 1F94  
                     _setMemory_LoopSave 1156                              _Switch_Main 13F2  
                      __size_of_LED_Main 000C                         ?_getSw_KeyStatus 0070  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1130                  __end_of_getRF_KeyStatus 10C5  
                      _setMain_Exception 0C2F                         ??_setMemory_Data 0021  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 11F5  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                       ?_setMain_Exception 0070  
                    ?_setMemory_LoopSave 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 10FA                 setMain_Exception@command 003C  
                   setRF_DimmerLights@on 0020                 _DimmerIntrIOCPointSelect 117C  
        _setDimmerLights_AdjControl$2265 0027                        getSw_KeyStatus@sw 0024  
                      __size_of_TMR1_ISR 0028            __size_of_getDimmerLights_Line 0013  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR1_Set 000C  
          __size_of_setDimmerLights_Main 0059                           __end_of_setLED 0A15  
          __size_of_setDimmerLights_Line 0015            __size_of_setDimmerLights_SwOn 003D  
                         __end_of_setBuz 0AC5                      ??_setMain_Exception 0036  
                   _CC2500_FrequencyCabr 1F9F               __size_of_Flash_Memory_Main 0036  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 08CC                        __size_of_WDT_Main 0012  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 150B                          ?_LedPointSelect 0070  
                            __end_of_ISR 0013                    ??_Flash_Memory_Modify 0024  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 12EB                     ??_setMemory_LoopSave 0020  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                           ?_Buzzer_Main 0070                       _set_TimeoutCleared 1F31  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0015  
                              _VarErrLED 00DF                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0064                   ?_setLED_Initialization 0070  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              __end_of_setMain_Exception 0C8B                __size_of_CC2500_WriteByte 0014  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D9                  setRF_DimmerValue@lights 0066  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00DB  
                            __pdataBANK3 01CE                _getAll_DimmerLights_AdjGO 10C5  
                               ??_setLED 0022                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0039  
                      ??_CC2500_ReadByte 0020         __end_of_getMain_All_Error_Status 1F31  
                       _CC2500_SIDLEMode 1F25               __size_of_DimmerLights_Main 0008  
              __end_of_setRF_DimmerValue 1540                       setMemory_Data@data 0020  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0021  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070           _getAll_DimmerLights_AdjGO$2244 0022  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                         _setMemory_Modify 1143  
                          __pcstackBANK0 0020                            __pcstackBANK1 00E7  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0076                            DlyOff_Main@sw 0038  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 0047               __size_of_CC2500_ReadStatus 0022  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 013E                            _DimmerLights2 014D  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020                          ??_CC2500_RxData 0024  
               setRFSW_AdjControl@status 0069                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006E                           getRxData@error 006C  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                    __size_of_setRF_Main 00F0                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                         ?_getRF_KeyStatus 0070  
                              _getBuz_GO 10A3      __end_of_Flash_Memory_Initialization 05AF  
            _Flash_Memory_Initialization 04D3                                 ?___awdiv 0020  
                              __ptext100 12CC                                __ptext101 136A  
                              __ptext110 17B6                                __ptext102 1F9F  
                              __ptext111 1F17                                __ptext103 1416  
                              __ptext104 1F21                                __ptext113 1463  
                              __ptext105 1F1D                                __ptext114 01B1  
                              __ptext106 1262                                __ptext115 10D6  
                              __ptext107 1F31                                __ptext116 1066  
                              __ptext108 11E0                                __ptext117 1F4F  
                              __ptext109 1190                                 ?___ftadd 0041  
                              __ptext118 07C9                                __ptext119 117C  
                              _getRxData 0E8F                                 ?___ftdiv 002E  
                               ?___ftneg 003E                                 ?___ftmul 002E  
                               ?___fttol 004E                    __size_of_my_MainTimer 004C  
                __end_of_setRFSW_Control 091B            __size_of_setSw_Initialization 0008  
         __size_of_Buzzer_Initialization 0003            __end_of_Buzzer_Initialization 1F1A  
                       getPercentValue@i 005F                         setPercentValue@i 005F  
                          ??_setLog_Code 002D                 getDimmerLights_Line@line 0021  
                     __end_of_TouchPower 1234                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 016F  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
          __end_of_setDimmerLights_AdjRF 13F2                   CC2500_WriteByte@loop_a 0021  
                              _r_address 00DC           __size_of_setDimmerLights_SwOff 0049  
         __size_of_myMain_Initialization 000F            __end_of_setDimmerLights_SwOff 17B6  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1093  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 11B8  
                    __end_of_setLED_Main 1726                         ??_getDelayOff_GO 0022  
                    _DimmerLightsIntrIOC 00D7                   ??_setRF_Initialization 0020  
           setDimmerLights_SwOff@command 002F                        _CC2500_rfSettings 102F  
                               _LED_Main 1FCF                          SwPointSelect@sw 0021  
                              clear_ram0 1F42                 CC2500_InitPATable@loop_d 0027  
             __size_of_setMain_Exception 005C                             _my_MainTimer 0832  
                              _setTxData 05AF      __end_of_DimmerLights_Initialization 124B  
            _DimmerLights_Initialization 1234                       _CC2500_ClearRXFIFO 1F1D  
                     _CC2500_ClearTXFIFO 1F21           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0024                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 11E0                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0023              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 0803                               ?_getRxData 0070  
                               _TMR1_ISR 1463                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                                 _TMR1_Set 1FE7  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00D0  
            __end_of_CC2500_WriteCommand 127B                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 111E                  DlyOff_Initialization@sw 0022  
                  getSw_KeyStatus@status 0023                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0070  
                       setRF_Main@loop_f 00E7                  __size_of_setDelayOff_GO 0057  
           ??_setDimmerLights_AdjControl 0025                                 _DelayOff 0078  
                           setSw_Main@sw 0033         setDimmerLights_IntrIOC_GO@lights 0072  
                       __size_of_IOC_ISR 000F             ?_setDimmerLights_IntrControl 0070  
         getMain_All_Error_Status@status 0020                         __size_of_IOC_Set 000C  
           __end_of_Flash_Memory_Erasing 1FC3                           ?_SwPointSelect 0070  
                         setLED_Main@led 0023                     __end_of_WDT_Clearing 0004  
                    __end_of_setLog_Code 15E1                    _DlyOff_Initialization 1F36  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 1F29                         __size_of_WDT_Set 000B  
                  setRFSW_Control@status 0032                  setMain_Exception@status 003B  
                  _Switch_Initialization 1FF3        __size_of_getMain_All_Error_Status 0004  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0063  
              ?_getMain_All_Error_Status 0070                     __size_of_Buzzer_Main 004A  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1190  
           Flash_Memory_Initialization@i 0063                                 _SwDetect 00DA  
                      setRFSW_Control@sw 0033                                setLED@led 0022  
                ??_DimmerIntrPointSelect 0070      __size_of_setDimmerLights_AdjControl 0035  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                       __size_of___ftneg 0009                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                 setDimmerLights_SwOn@idle 002E  
                               ___awtoft 138B                         ??_LedPointSelect 0020  
                               ___ftpack 0C8B            __size_of_getMain_LightsStatus 002C  
                           ??_setRF_Main 006D                     CC2500_WriteREG@value 0022  
                            _setLED_Main 16E2               __end_of_setRF_DimmerLights 0C2F  
               ?_DelayOff_Initialization 0070                         getDelayOff_GO@go 0023  
                       getDelayOff_GO@sw 0022                         setDelayOff_GO@sw 002E  
     __size_of_getAll_DimmerLights_AdjGO 0011                                 __ptext10 11B8  
                               __ptext11 0C2F                                 __ptext20 1156  
                               __ptext12 1169                                 __ptext21 0DB6  
                               __ptext13 1FF3                                 __ptext30 1143  
                               __ptext22 08CC                                 __ptext14 1F6F  
                               __ptext31 1F2D                                 __ptext23 15E1  
                               __ptext15 121F                                 __ptext40 110C  
                               __ptext32 10B4                                 __ptext24 10C5  
                               __ptext16 0800                                 __ptext41 1F89  
                               __ptext33 10A3                                 __ptext25 161E  
                               __ptext17 03E3                                 __ptext50 10FA  
                               __ptext42 1FE7                                 __ptext34 0D51  
                               __ptext26 150B                                 __ptext18 0E8F  
                               __ptext51 1575                                 __ptext43 127B  
                               __ptext35 0E1E                                 __ptext27 13CF  
                               __ptext19 15AB                                 __ptext60 1F67  
                               __ptext52 14DF                                 __ptext44 1FDB  
                               __ptext36 13AD                                 __ptext28 0B78  
                               __ptext61 0AC5                                 __ptext53 087E  
                               __ptext45 1F29                                 __ptext37 124B  
                               __ptext29 066C                                 __ptext70 02ED  
                               __ptext62 091B                                 __ptext54 1FB7  
                               __ptext46 1F48                                 __ptext38 1F1A  
                               __ptext71 138B                                 __ptext63 0F03  
                               __ptext55 04D3                                 __ptext47 1FCF  
                               __ptext39 1F94                                 __ptext80 1F16  
                               __ptext72 0C8B                                 __ptext64 05AF  
                               __ptext56 1FAB                                 __ptext48 16E2  
                               __ptext81 1F5F                                 __ptext73 09C1  
                               __ptext65 0BD3                                 __ptext57 0803  
                               __ptext49 1FC3                                 __ptext90 1075  
                               __ptext82 1726                                 __ptext74 132A  
                               __ptext66 0CEC                                 __ptext58 1F80  
                               __ptext91 1093                                 __ptext83 0B1E  
                               __ptext75 120A                                 __ptext67 0F79  
                               __ptext59 1294                                 __ptext92 1130  
                               __ptext84 176D                                 __ptext76 0A6C  
                               __ptext68 1F77                                 __ptext93 1F57  
                               __ptext85 130A                                 __ptext77 096D  
                               __ptext69 0720                                 __ptext94 1F36  
                               __ptext86 12AE                                 __ptext78 1234  
                               __ptext95 11A4                                 __ptext87 0A15  
                               __ptext79 143C                                 __ptext96 11F5  
                               __ptext88 14B5                                 __ptext97 1F25  
                               __ptext89 10E8                                 __ptext98 169F  
                               __ptext99 148B                                 __product 01CE  
          ??_setDimmerLights_IntrControl 0072                  ??_setLED_Initialization 0023  
               ??_getDimmerLights_Status 0022           __size_of_Dimmer_Initialization 0001  
           __end_of_getDimmerLights_Line 117C            __end_of_Dimmer_Initialization 1F17  
           __end_of_setDimmerLights_Main 0B1E             __end_of_setDimmerLights_Line 121F  
                       Switch_Main@error 003E             __end_of_setDimmerLights_SwOn 161E  
                           ??_setSw_Main 0031                            setLED@command 0021  
                          __size_of_main 0041                              _setRF_Learn 11CC  
               __end_of_CC2500_SIDLEMode 1F29               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 11B8               CC2500_WriteCommand@command 0023  
                   setRF_Main@Receive_OK 00E8                __size_of_setDimmerReClock 0008  
         setDimmerLights_AdjControl@idle 0026                          _CC2500_ReadByte 124B  
                     _CC2500_InitPATable 12CC                 __end_of_setMemory_Modify 1156  
          setDimmerLights_Trigger@lights 0024                       __end_of_setRF_Main 04D3  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0012  
            setDimmerLights_ErrorClose@i 0034                     _CC2500_patable_vaule 105E  
                            ??_getRxData 006B         setDimmerLights_TriggerAdj@lights 0024  
                               main@argc 00EA                                 main@argv 00EC  
                    ?_CC2500_InitPATable 0070                     _getSw_KeyStatus$5440 0021  
                   _getSw_KeyStatus$5441 0022                          _CC2500_PowerRST 169F  
               __size_of_getSw_KeyStatus 001F              __end_of_Flash_Memory_Modify 08CC  
                      ??_getPercentValue 005C                              _setLog_Code 15AB  
            __end_of_Flash_Memory_Unlock 1F89                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 136A                       __end_of_setSw_Main 01B1  
                          _Transceive_OK 03E1                   ?_DlyOff_Initialization 0070  
                         _DelayTimejudge 14B5                              pic14e$flags 007E  
           ??_setDimmerLights_IntrIOC_GO 0072               setDimmerLights_Line@lights 0020  
           ??_setDimmerLights_ErrorClose 0031                  setDimmerLights_SwOff@sw 0030  
      __end_of_getAll_DimmerLights_AdjGO 10D6              __size_of_setMemory_LoopSave 0013  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0070                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 1463  __size_of_setDimmerLights_Initialization 0027  
         _setDimmerLights_Initialization 143C              __end_of_setDimmerLights_Adj 096D  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                      _RF_Initialization 1F1A     __size_of_setDimmerLights_IntrControl 013C  
                   _Flash_Memory_Erasing 1FB7                       ?_RF_Initialization 0070  
                             _SPI0Buffer 007A          __end_of_DelayOff_Initialization 1F5F  
    __size_of_setDimmerLights_IntrIOC_GO 0037      __size_of_setDimmerLights_ErrorClose 005A  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1F67  
     __end_of_setDimmerLights_AdjControl 1575               _setDimmerLights_AdjControl 1540  
                    ??_RF_Initialization 0021                  __size_of_setMemory_Data 000C  
                         _setDelayOff_GO 0A15         __size_of_setControl_Lights_Table 0068  
                 __end_of_DelayTimejudge 14DF     __size_of_Flash_Memory_Initialization 00DC  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0036  
                  setMemory_Data@address 0022                    __end_of_DelayTime_1us 143C  
                __end_of_CC2500_ReadByte 1262             __end_of_setSw_Initialization 1F77  
                        _Timeout_Counter 11E0          __size_of_getDimmerLights_Status 0010  
                   getPercentValue@value 005E               __end_of_LED_Initialization 1FCF  
       __size_of_setDimmerLights_Trigger 001E                 __size_of_setPercentValue 0065  
                setMemory_Modify@command 0021                     setPercentValue@value 005E  
              __end_of_RF_Initialization 1F1D                    __end_of_CC2500_RxData 0E8F  
                  __end_of_CC2500_TxData 0DB6                  __end_of_CC2500_PowerRST 16E2  
         getAll_DimmerLights_AdjGO@adjgo 0021  
