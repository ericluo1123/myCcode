

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Dec 04 13:42:07 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,inline,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	intentry,global,class=CODE,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   153                           	dabs	1,0x7E,2
   154  0000                     	;# 
   155  0001                     	;# 
   156  0002                     	;# 
   157  0003                     	;# 
   158  0004                     	;# 
   159  0005                     	;# 
   160  0006                     	;# 
   161  0007                     	;# 
   162  0008                     	;# 
   163  0009                     	;# 
   164  000A                     	;# 
   165  000B                     	;# 
   166  000C                     	;# 
   167  000D                     	;# 
   168  000E                     	;# 
   169  0010                     	;# 
   170  0011                     	;# 
   171  0012                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  008C                     	;# 
   182  008D                     	;# 
   183  008E                     	;# 
   184  0090                     	;# 
   185  0091                     	;# 
   186  0092                     	;# 
   187  0095                     	;# 
   188  0096                     	;# 
   189  0097                     	;# 
   190  0099                     	;# 
   191  009A                     	;# 
   192  009B                     	;# 
   193  009B                     	;# 
   194  009C                     	;# 
   195  009D                     	;# 
   196  009E                     	;# 
   197  010C                     	;# 
   198  010D                     	;# 
   199  010E                     	;# 
   200  0116                     	;# 
   201  0117                     	;# 
   202  011D                     	;# 
   203  018C                     	;# 
   204  018D                     	;# 
   205  018E                     	;# 
   206  0191                     	;# 
   207  0191                     	;# 
   208  0192                     	;# 
   209  0193                     	;# 
   210  0193                     	;# 
   211  0194                     	;# 
   212  0195                     	;# 
   213  0196                     	;# 
   214  0197                     	;# 
   215  0199                     	;# 
   216  019A                     	;# 
   217  019B                     	;# 
   218  019B                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019C                     	;# 
   222  019C                     	;# 
   223  019D                     	;# 
   224  019E                     	;# 
   225  019F                     	;# 
   226  020D                     	;# 
   227  0210                     	;# 
   228  0211                     	;# 
   229  0211                     	;# 
   230  0212                     	;# 
   231  0212                     	;# 
   232  0213                     	;# 
   233  0213                     	;# 
   234  0214                     	;# 
   235  0214                     	;# 
   236  0215                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0216                     	;# 
   240  0216                     	;# 
   241  0217                     	;# 
   242  0217                     	;# 
   243  0291                     	;# 
   244  0291                     	;# 
   245  0292                     	;# 
   246  0293                     	;# 
   247  0298                     	;# 
   248  0298                     	;# 
   249  0299                     	;# 
   250  029A                     	;# 
   251  0394                     	;# 
   252  0395                     	;# 
   253  0396                     	;# 
   254  0FE4                     	;# 
   255  0FE5                     	;# 
   256  0FE6                     	;# 
   257  0FE7                     	;# 
   258  0FE8                     	;# 
   259  0FE9                     	;# 
   260  0FEA                     	;# 
   261  0FEB                     	;# 
   262  0FED                     	;# 
   263  0FEE                     	;# 
   264  0FEF                     	;# 
   265  0000                     	;# 
   266  0001                     	;# 
   267  0002                     	;# 
   268  0003                     	;# 
   269  0004                     	;# 
   270  0005                     	;# 
   271  0006                     	;# 
   272  0007                     	;# 
   273  0008                     	;# 
   274  0009                     	;# 
   275  000A                     	;# 
   276  000B                     	;# 
   277  000C                     	;# 
   278  000D                     	;# 
   279  000E                     	;# 
   280  0010                     	;# 
   281  0011                     	;# 
   282  0012                     	;# 
   283  0015                     	;# 
   284  0016                     	;# 
   285  0016                     	;# 
   286  0017                     	;# 
   287  0018                     	;# 
   288  0019                     	;# 
   289  001A                     	;# 
   290  001B                     	;# 
   291  001C                     	;# 
   292  008C                     	;# 
   293  008D                     	;# 
   294  008E                     	;# 
   295  0090                     	;# 
   296  0091                     	;# 
   297  0092                     	;# 
   298  0095                     	;# 
   299  0096                     	;# 
   300  0097                     	;# 
   301  0099                     	;# 
   302  009A                     	;# 
   303  009B                     	;# 
   304  009B                     	;# 
   305  009C                     	;# 
   306  009D                     	;# 
   307  009E                     	;# 
   308  010C                     	;# 
   309  010D                     	;# 
   310  010E                     	;# 
   311  0116                     	;# 
   312  0117                     	;# 
   313  011D                     	;# 
   314  018C                     	;# 
   315  018D                     	;# 
   316  018E                     	;# 
   317  0191                     	;# 
   318  0191                     	;# 
   319  0192                     	;# 
   320  0193                     	;# 
   321  0193                     	;# 
   322  0194                     	;# 
   323  0195                     	;# 
   324  0196                     	;# 
   325  0197                     	;# 
   326  0199                     	;# 
   327  019A                     	;# 
   328  019B                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019C                     	;# 
   333  019C                     	;# 
   334  019D                     	;# 
   335  019E                     	;# 
   336  019F                     	;# 
   337  020D                     	;# 
   338  0210                     	;# 
   339  0211                     	;# 
   340  0211                     	;# 
   341  0212                     	;# 
   342  0212                     	;# 
   343  0213                     	;# 
   344  0213                     	;# 
   345  0214                     	;# 
   346  0214                     	;# 
   347  0215                     	;# 
   348  0215                     	;# 
   349  0215                     	;# 
   350  0216                     	;# 
   351  0216                     	;# 
   352  0217                     	;# 
   353  0217                     	;# 
   354  0291                     	;# 
   355  0291                     	;# 
   356  0292                     	;# 
   357  0293                     	;# 
   358  0298                     	;# 
   359  0298                     	;# 
   360  0299                     	;# 
   361  029A                     	;# 
   362  0394                     	;# 
   363  0395                     	;# 
   364  0396                     	;# 
   365  0FE4                     	;# 
   366  0FE5                     	;# 
   367  0FE6                     	;# 
   368  0FE7                     	;# 
   369  0FE8                     	;# 
   370  0FE9                     	;# 
   371  0FEA                     	;# 
   372  0FEB                     	;# 
   373  0FED                     	;# 
   374  0FEE                     	;# 
   375  0FEF                     	;# 
   376  0000                     	;# 
   377  0001                     	;# 
   378  0002                     	;# 
   379  0003                     	;# 
   380  0004                     	;# 
   381  0005                     	;# 
   382  0006                     	;# 
   383  0007                     	;# 
   384  0008                     	;# 
   385  0009                     	;# 
   386  000A                     	;# 
   387  000B                     	;# 
   388  000C                     	;# 
   389  000D                     	;# 
   390  000E                     	;# 
   391  0010                     	;# 
   392  0011                     	;# 
   393  0012                     	;# 
   394  0015                     	;# 
   395  0016                     	;# 
   396  0016                     	;# 
   397  0017                     	;# 
   398  0018                     	;# 
   399  0019                     	;# 
   400  001A                     	;# 
   401  001B                     	;# 
   402  001C                     	;# 
   403  008C                     	;# 
   404  008D                     	;# 
   405  008E                     	;# 
   406  0090                     	;# 
   407  0091                     	;# 
   408  0092                     	;# 
   409  0095                     	;# 
   410  0096                     	;# 
   411  0097                     	;# 
   412  0099                     	;# 
   413  009A                     	;# 
   414  009B                     	;# 
   415  009B                     	;# 
   416  009C                     	;# 
   417  009D                     	;# 
   418  009E                     	;# 
   419  010C                     	;# 
   420  010D                     	;# 
   421  010E                     	;# 
   422  0116                     	;# 
   423  0117                     	;# 
   424  011D                     	;# 
   425  018C                     	;# 
   426  018D                     	;# 
   427  018E                     	;# 
   428  0191                     	;# 
   429  0191                     	;# 
   430  0192                     	;# 
   431  0193                     	;# 
   432  0193                     	;# 
   433  0194                     	;# 
   434  0195                     	;# 
   435  0196                     	;# 
   436  0197                     	;# 
   437  0199                     	;# 
   438  019A                     	;# 
   439  019B                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019C                     	;# 
   444  019C                     	;# 
   445  019D                     	;# 
   446  019E                     	;# 
   447  019F                     	;# 
   448  020D                     	;# 
   449  0210                     	;# 
   450  0211                     	;# 
   451  0211                     	;# 
   452  0212                     	;# 
   453  0212                     	;# 
   454  0213                     	;# 
   455  0213                     	;# 
   456  0214                     	;# 
   457  0214                     	;# 
   458  0215                     	;# 
   459  0215                     	;# 
   460  0215                     	;# 
   461  0216                     	;# 
   462  0216                     	;# 
   463  0217                     	;# 
   464  0217                     	;# 
   465  0291                     	;# 
   466  0291                     	;# 
   467  0292                     	;# 
   468  0293                     	;# 
   469  0298                     	;# 
   470  0298                     	;# 
   471  0299                     	;# 
   472  029A                     	;# 
   473  0394                     	;# 
   474  0395                     	;# 
   475  0396                     	;# 
   476  0FE4                     	;# 
   477  0FE5                     	;# 
   478  0FE6                     	;# 
   479  0FE7                     	;# 
   480  0FE8                     	;# 
   481  0FE9                     	;# 
   482  0FEA                     	;# 
   483  0FEB                     	;# 
   484  0FED                     	;# 
   485  0FEE                     	;# 
   486  0FEF                     	;# 
   487  0000                     	;# 
   488  0001                     	;# 
   489  0002                     	;# 
   490  0003                     	;# 
   491  0004                     	;# 
   492  0005                     	;# 
   493  0006                     	;# 
   494  0007                     	;# 
   495  0008                     	;# 
   496  0009                     	;# 
   497  000A                     	;# 
   498  000B                     	;# 
   499  000C                     	;# 
   500  000D                     	;# 
   501  000E                     	;# 
   502  0010                     	;# 
   503  0011                     	;# 
   504  0012                     	;# 
   505  0015                     	;# 
   506  0016                     	;# 
   507  0016                     	;# 
   508  0017                     	;# 
   509  0018                     	;# 
   510  0019                     	;# 
   511  001A                     	;# 
   512  001B                     	;# 
   513  001C                     	;# 
   514  008C                     	;# 
   515  008D                     	;# 
   516  008E                     	;# 
   517  0090                     	;# 
   518  0091                     	;# 
   519  0092                     	;# 
   520  0095                     	;# 
   521  0096                     	;# 
   522  0097                     	;# 
   523  0099                     	;# 
   524  009A                     	;# 
   525  009B                     	;# 
   526  009B                     	;# 
   527  009C                     	;# 
   528  009D                     	;# 
   529  009E                     	;# 
   530  010C                     	;# 
   531  010D                     	;# 
   532  010E                     	;# 
   533  0116                     	;# 
   534  0117                     	;# 
   535  011D                     	;# 
   536  018C                     	;# 
   537  018D                     	;# 
   538  018E                     	;# 
   539  0191                     	;# 
   540  0191                     	;# 
   541  0192                     	;# 
   542  0193                     	;# 
   543  0193                     	;# 
   544  0194                     	;# 
   545  0195                     	;# 
   546  0196                     	;# 
   547  0197                     	;# 
   548  0199                     	;# 
   549  019A                     	;# 
   550  019B                     	;# 
   551  019B                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019C                     	;# 
   555  019C                     	;# 
   556  019D                     	;# 
   557  019E                     	;# 
   558  019F                     	;# 
   559  020D                     	;# 
   560  0210                     	;# 
   561  0211                     	;# 
   562  0211                     	;# 
   563  0212                     	;# 
   564  0212                     	;# 
   565  0213                     	;# 
   566  0213                     	;# 
   567  0214                     	;# 
   568  0214                     	;# 
   569  0215                     	;# 
   570  0215                     	;# 
   571  0215                     	;# 
   572  0216                     	;# 
   573  0216                     	;# 
   574  0217                     	;# 
   575  0217                     	;# 
   576  0291                     	;# 
   577  0291                     	;# 
   578  0292                     	;# 
   579  0293                     	;# 
   580  0298                     	;# 
   581  0298                     	;# 
   582  0299                     	;# 
   583  029A                     	;# 
   584  0394                     	;# 
   585  0395                     	;# 
   586  0396                     	;# 
   587  0FE4                     	;# 
   588  0FE5                     	;# 
   589  0FE6                     	;# 
   590  0FE7                     	;# 
   591  0FE8                     	;# 
   592  0FE9                     	;# 
   593  0FEA                     	;# 
   594  0FEB                     	;# 
   595  0FED                     	;# 
   596  0FEE                     	;# 
   597  0FEF                     	;# 
   598  0000                     	;# 
   599  0001                     	;# 
   600  0002                     	;# 
   601  0003                     	;# 
   602  0004                     	;# 
   603  0005                     	;# 
   604  0006                     	;# 
   605  0007                     	;# 
   606  0008                     	;# 
   607  0009                     	;# 
   608  000A                     	;# 
   609  000B                     	;# 
   610  000C                     	;# 
   611  000D                     	;# 
   612  000E                     	;# 
   613  0010                     	;# 
   614  0011                     	;# 
   615  0012                     	;# 
   616  0015                     	;# 
   617  0016                     	;# 
   618  0016                     	;# 
   619  0017                     	;# 
   620  0018                     	;# 
   621  0019                     	;# 
   622  001A                     	;# 
   623  001B                     	;# 
   624  001C                     	;# 
   625  008C                     	;# 
   626  008D                     	;# 
   627  008E                     	;# 
   628  0090                     	;# 
   629  0091                     	;# 
   630  0092                     	;# 
   631  0095                     	;# 
   632  0096                     	;# 
   633  0097                     	;# 
   634  0099                     	;# 
   635  009A                     	;# 
   636  009B                     	;# 
   637  009B                     	;# 
   638  009C                     	;# 
   639  009D                     	;# 
   640  009E                     	;# 
   641  010C                     	;# 
   642  010D                     	;# 
   643  010E                     	;# 
   644  0116                     	;# 
   645  0117                     	;# 
   646  011D                     	;# 
   647  018C                     	;# 
   648  018D                     	;# 
   649  018E                     	;# 
   650  0191                     	;# 
   651  0191                     	;# 
   652  0192                     	;# 
   653  0193                     	;# 
   654  0193                     	;# 
   655  0194                     	;# 
   656  0195                     	;# 
   657  0196                     	;# 
   658  0197                     	;# 
   659  0199                     	;# 
   660  019A                     	;# 
   661  019B                     	;# 
   662  019B                     	;# 
   663  019B                     	;# 
   664  019B                     	;# 
   665  019C                     	;# 
   666  019C                     	;# 
   667  019D                     	;# 
   668  019E                     	;# 
   669  019F                     	;# 
   670  020D                     	;# 
   671  0210                     	;# 
   672  0211                     	;# 
   673  0211                     	;# 
   674  0212                     	;# 
   675  0212                     	;# 
   676  0213                     	;# 
   677  0213                     	;# 
   678  0214                     	;# 
   679  0214                     	;# 
   680  0215                     	;# 
   681  0215                     	;# 
   682  0215                     	;# 
   683  0216                     	;# 
   684  0216                     	;# 
   685  0217                     	;# 
   686  0217                     	;# 
   687  0291                     	;# 
   688  0291                     	;# 
   689  0292                     	;# 
   690  0293                     	;# 
   691  0298                     	;# 
   692  0298                     	;# 
   693  0299                     	;# 
   694  029A                     	;# 
   695  0394                     	;# 
   696  0395                     	;# 
   697  0396                     	;# 
   698  0FE4                     	;# 
   699  0FE5                     	;# 
   700  0FE6                     	;# 
   701  0FE7                     	;# 
   702  0FE8                     	;# 
   703  0FE9                     	;# 
   704  0FEA                     	;# 
   705  0FEB                     	;# 
   706  0FED                     	;# 
   707  0FEE                     	;# 
   708  0FEF                     	;# 
   709  0000                     	;# 
   710  0001                     	;# 
   711  0002                     	;# 
   712  0003                     	;# 
   713  0004                     	;# 
   714  0005                     	;# 
   715  0006                     	;# 
   716  0007                     	;# 
   717  0008                     	;# 
   718  0009                     	;# 
   719  000A                     	;# 
   720  000B                     	;# 
   721  000C                     	;# 
   722  000D                     	;# 
   723  000E                     	;# 
   724  0010                     	;# 
   725  0011                     	;# 
   726  0012                     	;# 
   727  0015                     	;# 
   728  0016                     	;# 
   729  0016                     	;# 
   730  0017                     	;# 
   731  0018                     	;# 
   732  0019                     	;# 
   733  001A                     	;# 
   734  001B                     	;# 
   735  001C                     	;# 
   736  008C                     	;# 
   737  008D                     	;# 
   738  008E                     	;# 
   739  0090                     	;# 
   740  0091                     	;# 
   741  0092                     	;# 
   742  0095                     	;# 
   743  0096                     	;# 
   744  0097                     	;# 
   745  0099                     	;# 
   746  009A                     	;# 
   747  009B                     	;# 
   748  009B                     	;# 
   749  009C                     	;# 
   750  009D                     	;# 
   751  009E                     	;# 
   752  010C                     	;# 
   753  010D                     	;# 
   754  010E                     	;# 
   755  0116                     	;# 
   756  0117                     	;# 
   757  011D                     	;# 
   758  018C                     	;# 
   759  018D                     	;# 
   760  018E                     	;# 
   761  0191                     	;# 
   762  0191                     	;# 
   763  0192                     	;# 
   764  0193                     	;# 
   765  0193                     	;# 
   766  0194                     	;# 
   767  0195                     	;# 
   768  0196                     	;# 
   769  0197                     	;# 
   770  0199                     	;# 
   771  019A                     	;# 
   772  019B                     	;# 
   773  019B                     	;# 
   774  019B                     	;# 
   775  019B                     	;# 
   776  019C                     	;# 
   777  019C                     	;# 
   778  019D                     	;# 
   779  019E                     	;# 
   780  019F                     	;# 
   781  020D                     	;# 
   782  0210                     	;# 
   783  0211                     	;# 
   784  0211                     	;# 
   785  0212                     	;# 
   786  0212                     	;# 
   787  0213                     	;# 
   788  0213                     	;# 
   789  0214                     	;# 
   790  0214                     	;# 
   791  0215                     	;# 
   792  0215                     	;# 
   793  0215                     	;# 
   794  0216                     	;# 
   795  0216                     	;# 
   796  0217                     	;# 
   797  0217                     	;# 
   798  0291                     	;# 
   799  0291                     	;# 
   800  0292                     	;# 
   801  0293                     	;# 
   802  0298                     	;# 
   803  0298                     	;# 
   804  0299                     	;# 
   805  029A                     	;# 
   806  0394                     	;# 
   807  0395                     	;# 
   808  0396                     	;# 
   809  0FE4                     	;# 
   810  0FE5                     	;# 
   811  0FE6                     	;# 
   812  0FE7                     	;# 
   813  0FE8                     	;# 
   814  0FE9                     	;# 
   815  0FEA                     	;# 
   816  0FEB                     	;# 
   817  0FED                     	;# 
   818  0FEE                     	;# 
   819  0FEF                     	;# 
   820  0000                     	;# 
   821  0001                     	;# 
   822  0002                     	;# 
   823  0003                     	;# 
   824  0004                     	;# 
   825  0005                     	;# 
   826  0006                     	;# 
   827  0007                     	;# 
   828  0008                     	;# 
   829  0009                     	;# 
   830  000A                     	;# 
   831  000B                     	;# 
   832  000C                     	;# 
   833  000D                     	;# 
   834  000E                     	;# 
   835  0010                     	;# 
   836  0011                     	;# 
   837  0012                     	;# 
   838  0015                     	;# 
   839  0016                     	;# 
   840  0016                     	;# 
   841  0017                     	;# 
   842  0018                     	;# 
   843  0019                     	;# 
   844  001A                     	;# 
   845  001B                     	;# 
   846  001C                     	;# 
   847  008C                     	;# 
   848  008D                     	;# 
   849  008E                     	;# 
   850  0090                     	;# 
   851  0091                     	;# 
   852  0092                     	;# 
   853  0095                     	;# 
   854  0096                     	;# 
   855  0097                     	;# 
   856  0099                     	;# 
   857  009A                     	;# 
   858  009B                     	;# 
   859  009B                     	;# 
   860  009C                     	;# 
   861  009D                     	;# 
   862  009E                     	;# 
   863  010C                     	;# 
   864  010D                     	;# 
   865  010E                     	;# 
   866  0116                     	;# 
   867  0117                     	;# 
   868  011D                     	;# 
   869  018C                     	;# 
   870  018D                     	;# 
   871  018E                     	;# 
   872  0191                     	;# 
   873  0191                     	;# 
   874  0192                     	;# 
   875  0193                     	;# 
   876  0193                     	;# 
   877  0194                     	;# 
   878  0195                     	;# 
   879  0196                     	;# 
   880  0197                     	;# 
   881  0199                     	;# 
   882  019A                     	;# 
   883  019B                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019C                     	;# 
   888  019C                     	;# 
   889  019D                     	;# 
   890  019E                     	;# 
   891  019F                     	;# 
   892  020D                     	;# 
   893  0210                     	;# 
   894  0211                     	;# 
   895  0211                     	;# 
   896  0212                     	;# 
   897  0212                     	;# 
   898  0213                     	;# 
   899  0213                     	;# 
   900  0214                     	;# 
   901  0214                     	;# 
   902  0215                     	;# 
   903  0215                     	;# 
   904  0215                     	;# 
   905  0216                     	;# 
   906  0216                     	;# 
   907  0217                     	;# 
   908  0217                     	;# 
   909  0291                     	;# 
   910  0291                     	;# 
   911  0292                     	;# 
   912  0293                     	;# 
   913  0298                     	;# 
   914  0298                     	;# 
   915  0299                     	;# 
   916  029A                     	;# 
   917  0394                     	;# 
   918  0395                     	;# 
   919  0396                     	;# 
   920  0FE4                     	;# 
   921  0FE5                     	;# 
   922  0FE6                     	;# 
   923  0FE7                     	;# 
   924  0FE8                     	;# 
   925  0FE9                     	;# 
   926  0FEA                     	;# 
   927  0FEB                     	;# 
   928  0FED                     	;# 
   929  0FEE                     	;# 
   930  0FEF                     	;# 
   931  0000                     	;# 
   932  0001                     	;# 
   933  0002                     	;# 
   934  0003                     	;# 
   935  0004                     	;# 
   936  0005                     	;# 
   937  0006                     	;# 
   938  0007                     	;# 
   939  0008                     	;# 
   940  0009                     	;# 
   941  000A                     	;# 
   942  000B                     	;# 
   943  000C                     	;# 
   944  000D                     	;# 
   945  000E                     	;# 
   946  0010                     	;# 
   947  0011                     	;# 
   948  0012                     	;# 
   949  0015                     	;# 
   950  0016                     	;# 
   951  0016                     	;# 
   952  0017                     	;# 
   953  0018                     	;# 
   954  0019                     	;# 
   955  001A                     	;# 
   956  001B                     	;# 
   957  001C                     	;# 
   958  008C                     	;# 
   959  008D                     	;# 
   960  008E                     	;# 
   961  0090                     	;# 
   962  0091                     	;# 
   963  0092                     	;# 
   964  0095                     	;# 
   965  0096                     	;# 
   966  0097                     	;# 
   967  0099                     	;# 
   968  009A                     	;# 
   969  009B                     	;# 
   970  009B                     	;# 
   971  009C                     	;# 
   972  009D                     	;# 
   973  009E                     	;# 
   974  010C                     	;# 
   975  010D                     	;# 
   976  010E                     	;# 
   977  0116                     	;# 
   978  0117                     	;# 
   979  011D                     	;# 
   980  018C                     	;# 
   981  018D                     	;# 
   982  018E                     	;# 
   983  0191                     	;# 
   984  0191                     	;# 
   985  0192                     	;# 
   986  0193                     	;# 
   987  0193                     	;# 
   988  0194                     	;# 
   989  0195                     	;# 
   990  0196                     	;# 
   991  0197                     	;# 
   992  0199                     	;# 
   993  019A                     	;# 
   994  019B                     	;# 
   995  019B                     	;# 
   996  019B                     	;# 
   997  019B                     	;# 
   998  019C                     	;# 
   999  019C                     	;# 
  1000  019D                     	;# 
  1001  019E                     	;# 
  1002  019F                     	;# 
  1003  020D                     	;# 
  1004  0210                     	;# 
  1005  0211                     	;# 
  1006  0211                     	;# 
  1007  0212                     	;# 
  1008  0212                     	;# 
  1009  0213                     	;# 
  1010  0213                     	;# 
  1011  0214                     	;# 
  1012  0214                     	;# 
  1013  0215                     	;# 
  1014  0215                     	;# 
  1015  0215                     	;# 
  1016  0216                     	;# 
  1017  0216                     	;# 
  1018  0217                     	;# 
  1019  0217                     	;# 
  1020  0291                     	;# 
  1021  0291                     	;# 
  1022  0292                     	;# 
  1023  0293                     	;# 
  1024  0298                     	;# 
  1025  0298                     	;# 
  1026  0299                     	;# 
  1027  029A                     	;# 
  1028  0394                     	;# 
  1029  0395                     	;# 
  1030  0396                     	;# 
  1031  0FE4                     	;# 
  1032  0FE5                     	;# 
  1033  0FE6                     	;# 
  1034  0FE7                     	;# 
  1035  0FE8                     	;# 
  1036  0FE9                     	;# 
  1037  0FEA                     	;# 
  1038  0FEB                     	;# 
  1039  0FED                     	;# 
  1040  0FEE                     	;# 
  1041  0FEF                     	;# 
  1042  0000                     	;# 
  1043  0001                     	;# 
  1044  0002                     	;# 
  1045  0003                     	;# 
  1046  0004                     	;# 
  1047  0005                     	;# 
  1048  0006                     	;# 
  1049  0007                     	;# 
  1050  0008                     	;# 
  1051  0009                     	;# 
  1052  000A                     	;# 
  1053  000B                     	;# 
  1054  000C                     	;# 
  1055  000D                     	;# 
  1056  000E                     	;# 
  1057  0010                     	;# 
  1058  0011                     	;# 
  1059  0012                     	;# 
  1060  0015                     	;# 
  1061  0016                     	;# 
  1062  0016                     	;# 
  1063  0017                     	;# 
  1064  0018                     	;# 
  1065  0019                     	;# 
  1066  001A                     	;# 
  1067  001B                     	;# 
  1068  001C                     	;# 
  1069  008C                     	;# 
  1070  008D                     	;# 
  1071  008E                     	;# 
  1072  0090                     	;# 
  1073  0091                     	;# 
  1074  0092                     	;# 
  1075  0095                     	;# 
  1076  0096                     	;# 
  1077  0097                     	;# 
  1078  0099                     	;# 
  1079  009A                     	;# 
  1080  009B                     	;# 
  1081  009B                     	;# 
  1082  009C                     	;# 
  1083  009D                     	;# 
  1084  009E                     	;# 
  1085  010C                     	;# 
  1086  010D                     	;# 
  1087  010E                     	;# 
  1088  0116                     	;# 
  1089  0117                     	;# 
  1090  011D                     	;# 
  1091  018C                     	;# 
  1092  018D                     	;# 
  1093  018E                     	;# 
  1094  0191                     	;# 
  1095  0191                     	;# 
  1096  0192                     	;# 
  1097  0193                     	;# 
  1098  0193                     	;# 
  1099  0194                     	;# 
  1100  0195                     	;# 
  1101  0196                     	;# 
  1102  0197                     	;# 
  1103  0199                     	;# 
  1104  019A                     	;# 
  1105  019B                     	;# 
  1106  019B                     	;# 
  1107  019B                     	;# 
  1108  019B                     	;# 
  1109  019C                     	;# 
  1110  019C                     	;# 
  1111  019D                     	;# 
  1112  019E                     	;# 
  1113  019F                     	;# 
  1114  020D                     	;# 
  1115  0210                     	;# 
  1116  0211                     	;# 
  1117  0211                     	;# 
  1118  0212                     	;# 
  1119  0212                     	;# 
  1120  0213                     	;# 
  1121  0213                     	;# 
  1122  0214                     	;# 
  1123  0214                     	;# 
  1124  0215                     	;# 
  1125  0215                     	;# 
  1126  0215                     	;# 
  1127  0216                     	;# 
  1128  0216                     	;# 
  1129  0217                     	;# 
  1130  0217                     	;# 
  1131  0291                     	;# 
  1132  0291                     	;# 
  1133  0292                     	;# 
  1134  0293                     	;# 
  1135  0298                     	;# 
  1136  0298                     	;# 
  1137  0299                     	;# 
  1138  029A                     	;# 
  1139  0394                     	;# 
  1140  0395                     	;# 
  1141  0396                     	;# 
  1142  0FE4                     	;# 
  1143  0FE5                     	;# 
  1144  0FE6                     	;# 
  1145  0FE7                     	;# 
  1146  0FE8                     	;# 
  1147  0FE9                     	;# 
  1148  0FEA                     	;# 
  1149  0FEB                     	;# 
  1150  0FED                     	;# 
  1151  0FEE                     	;# 
  1152  0FEF                     	;# 
  1153  0000                     	;# 
  1154  0001                     	;# 
  1155  0002                     	;# 
  1156  0003                     	;# 
  1157  0004                     	;# 
  1158  0005                     	;# 
  1159  0006                     	;# 
  1160  0007                     	;# 
  1161  0008                     	;# 
  1162  0009                     	;# 
  1163  000A                     	;# 
  1164  000B                     	;# 
  1165  000C                     	;# 
  1166  000D                     	;# 
  1167  000E                     	;# 
  1168  0010                     	;# 
  1169  0011                     	;# 
  1170  0012                     	;# 
  1171  0015                     	;# 
  1172  0016                     	;# 
  1173  0016                     	;# 
  1174  0017                     	;# 
  1175  0018                     	;# 
  1176  0019                     	;# 
  1177  001A                     	;# 
  1178  001B                     	;# 
  1179  001C                     	;# 
  1180  008C                     	;# 
  1181  008D                     	;# 
  1182  008E                     	;# 
  1183  0090                     	;# 
  1184  0091                     	;# 
  1185  0092                     	;# 
  1186  0095                     	;# 
  1187  0096                     	;# 
  1188  0097                     	;# 
  1189  0099                     	;# 
  1190  009A                     	;# 
  1191  009B                     	;# 
  1192  009B                     	;# 
  1193  009C                     	;# 
  1194  009D                     	;# 
  1195  009E                     	;# 
  1196  010C                     	;# 
  1197  010D                     	;# 
  1198  010E                     	;# 
  1199  0116                     	;# 
  1200  0117                     	;# 
  1201  011D                     	;# 
  1202  018C                     	;# 
  1203  018D                     	;# 
  1204  018E                     	;# 
  1205  0191                     	;# 
  1206  0191                     	;# 
  1207  0192                     	;# 
  1208  0193                     	;# 
  1209  0193                     	;# 
  1210  0194                     	;# 
  1211  0195                     	;# 
  1212  0196                     	;# 
  1213  0197                     	;# 
  1214  0199                     	;# 
  1215  019A                     	;# 
  1216  019B                     	;# 
  1217  019B                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019C                     	;# 
  1221  019C                     	;# 
  1222  019D                     	;# 
  1223  019E                     	;# 
  1224  019F                     	;# 
  1225  020D                     	;# 
  1226  0210                     	;# 
  1227  0211                     	;# 
  1228  0211                     	;# 
  1229  0212                     	;# 
  1230  0212                     	;# 
  1231  0213                     	;# 
  1232  0213                     	;# 
  1233  0214                     	;# 
  1234  0214                     	;# 
  1235  0215                     	;# 
  1236  0215                     	;# 
  1237  0215                     	;# 
  1238  0216                     	;# 
  1239  0216                     	;# 
  1240  0217                     	;# 
  1241  0217                     	;# 
  1242  0291                     	;# 
  1243  0291                     	;# 
  1244  0292                     	;# 
  1245  0293                     	;# 
  1246  0298                     	;# 
  1247  0298                     	;# 
  1248  0299                     	;# 
  1249  029A                     	;# 
  1250  0394                     	;# 
  1251  0395                     	;# 
  1252  0396                     	;# 
  1253  0FE4                     	;# 
  1254  0FE5                     	;# 
  1255  0FE6                     	;# 
  1256  0FE7                     	;# 
  1257  0FE8                     	;# 
  1258  0FE9                     	;# 
  1259  0FEA                     	;# 
  1260  0FEB                     	;# 
  1261  0FED                     	;# 
  1262  0FEE                     	;# 
  1263  0FEF                     	;# 
  1264  0000                     	;# 
  1265  0001                     	;# 
  1266  0002                     	;# 
  1267  0003                     	;# 
  1268  0004                     	;# 
  1269  0005                     	;# 
  1270  0006                     	;# 
  1271  0007                     	;# 
  1272  0008                     	;# 
  1273  0009                     	;# 
  1274  000A                     	;# 
  1275  000B                     	;# 
  1276  000C                     	;# 
  1277  000D                     	;# 
  1278  000E                     	;# 
  1279  0010                     	;# 
  1280  0011                     	;# 
  1281  0012                     	;# 
  1282  0015                     	;# 
  1283  0016                     	;# 
  1284  0016                     	;# 
  1285  0017                     	;# 
  1286  0018                     	;# 
  1287  0019                     	;# 
  1288  001A                     	;# 
  1289  001B                     	;# 
  1290  001C                     	;# 
  1291  008C                     	;# 
  1292  008D                     	;# 
  1293  008E                     	;# 
  1294  0090                     	;# 
  1295  0091                     	;# 
  1296  0092                     	;# 
  1297  0095                     	;# 
  1298  0096                     	;# 
  1299  0097                     	;# 
  1300  0099                     	;# 
  1301  009A                     	;# 
  1302  009B                     	;# 
  1303  009B                     	;# 
  1304  009C                     	;# 
  1305  009D                     	;# 
  1306  009E                     	;# 
  1307  010C                     	;# 
  1308  010D                     	;# 
  1309  010E                     	;# 
  1310  0116                     	;# 
  1311  0117                     	;# 
  1312  011D                     	;# 
  1313  018C                     	;# 
  1314  018D                     	;# 
  1315  018E                     	;# 
  1316  0191                     	;# 
  1317  0191                     	;# 
  1318  0192                     	;# 
  1319  0193                     	;# 
  1320  0193                     	;# 
  1321  0194                     	;# 
  1322  0195                     	;# 
  1323  0196                     	;# 
  1324  0197                     	;# 
  1325  0199                     	;# 
  1326  019A                     	;# 
  1327  019B                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019C                     	;# 
  1332  019C                     	;# 
  1333  019D                     	;# 
  1334  019E                     	;# 
  1335  019F                     	;# 
  1336  020D                     	;# 
  1337  0210                     	;# 
  1338  0211                     	;# 
  1339  0211                     	;# 
  1340  0212                     	;# 
  1341  0212                     	;# 
  1342  0213                     	;# 
  1343  0213                     	;# 
  1344  0214                     	;# 
  1345  0214                     	;# 
  1346  0215                     	;# 
  1347  0215                     	;# 
  1348  0215                     	;# 
  1349  0216                     	;# 
  1350  0216                     	;# 
  1351  0217                     	;# 
  1352  0217                     	;# 
  1353  0291                     	;# 
  1354  0291                     	;# 
  1355  0292                     	;# 
  1356  0293                     	;# 
  1357  0298                     	;# 
  1358  0298                     	;# 
  1359  0299                     	;# 
  1360  029A                     	;# 
  1361  0394                     	;# 
  1362  0395                     	;# 
  1363  0396                     	;# 
  1364  0FE4                     	;# 
  1365  0FE5                     	;# 
  1366  0FE6                     	;# 
  1367  0FE7                     	;# 
  1368  0FE8                     	;# 
  1369  0FE9                     	;# 
  1370  0FEA                     	;# 
  1371  0FEB                     	;# 
  1372  0FED                     	;# 
  1373  0FEE                     	;# 
  1374  0FEF                     	;# 
  1375  0000                     	;# 
  1376  0001                     	;# 
  1377  0002                     	;# 
  1378  0003                     	;# 
  1379  0004                     	;# 
  1380  0005                     	;# 
  1381  0006                     	;# 
  1382  0007                     	;# 
  1383  0008                     	;# 
  1384  0009                     	;# 
  1385  000A                     	;# 
  1386  000B                     	;# 
  1387  000C                     	;# 
  1388  000D                     	;# 
  1389  000E                     	;# 
  1390  0010                     	;# 
  1391  0011                     	;# 
  1392  0012                     	;# 
  1393  0015                     	;# 
  1394  0016                     	;# 
  1395  0016                     	;# 
  1396  0017                     	;# 
  1397  0018                     	;# 
  1398  0019                     	;# 
  1399  001A                     	;# 
  1400  001B                     	;# 
  1401  001C                     	;# 
  1402  008C                     	;# 
  1403  008D                     	;# 
  1404  008E                     	;# 
  1405  0090                     	;# 
  1406  0091                     	;# 
  1407  0092                     	;# 
  1408  0095                     	;# 
  1409  0096                     	;# 
  1410  0097                     	;# 
  1411  0099                     	;# 
  1412  009A                     	;# 
  1413  009B                     	;# 
  1414  009B                     	;# 
  1415  009C                     	;# 
  1416  009D                     	;# 
  1417  009E                     	;# 
  1418  010C                     	;# 
  1419  010D                     	;# 
  1420  010E                     	;# 
  1421  0116                     	;# 
  1422  0117                     	;# 
  1423  011D                     	;# 
  1424  018C                     	;# 
  1425  018D                     	;# 
  1426  018E                     	;# 
  1427  0191                     	;# 
  1428  0191                     	;# 
  1429  0192                     	;# 
  1430  0193                     	;# 
  1431  0193                     	;# 
  1432  0194                     	;# 
  1433  0195                     	;# 
  1434  0196                     	;# 
  1435  0197                     	;# 
  1436  0199                     	;# 
  1437  019A                     	;# 
  1438  019B                     	;# 
  1439  019B                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019C                     	;# 
  1443  019C                     	;# 
  1444  019D                     	;# 
  1445  019E                     	;# 
  1446  019F                     	;# 
  1447  020D                     	;# 
  1448  0210                     	;# 
  1449  0211                     	;# 
  1450  0211                     	;# 
  1451  0212                     	;# 
  1452  0212                     	;# 
  1453  0213                     	;# 
  1454  0213                     	;# 
  1455  0214                     	;# 
  1456  0214                     	;# 
  1457  0215                     	;# 
  1458  0215                     	;# 
  1459  0215                     	;# 
  1460  0216                     	;# 
  1461  0216                     	;# 
  1462  0217                     	;# 
  1463  0217                     	;# 
  1464  0291                     	;# 
  1465  0291                     	;# 
  1466  0292                     	;# 
  1467  0293                     	;# 
  1468  0298                     	;# 
  1469  0298                     	;# 
  1470  0299                     	;# 
  1471  029A                     	;# 
  1472  0394                     	;# 
  1473  0395                     	;# 
  1474  0396                     	;# 
  1475  0FE4                     	;# 
  1476  0FE5                     	;# 
  1477  0FE6                     	;# 
  1478  0FE7                     	;# 
  1479  0FE8                     	;# 
  1480  0FE9                     	;# 
  1481  0FEA                     	;# 
  1482  0FEB                     	;# 
  1483  0FED                     	;# 
  1484  0FEE                     	;# 
  1485  0FEF                     	;# 
  1486  0000                     	;# 
  1487  0001                     	;# 
  1488  0002                     	;# 
  1489  0003                     	;# 
  1490  0004                     	;# 
  1491  0005                     	;# 
  1492  0006                     	;# 
  1493  0007                     	;# 
  1494  0008                     	;# 
  1495  0009                     	;# 
  1496  000A                     	;# 
  1497  000B                     	;# 
  1498  000C                     	;# 
  1499  000D                     	;# 
  1500  000E                     	;# 
  1501  0010                     	;# 
  1502  0011                     	;# 
  1503  0012                     	;# 
  1504  0015                     	;# 
  1505  0016                     	;# 
  1506  0016                     	;# 
  1507  0017                     	;# 
  1508  0018                     	;# 
  1509  0019                     	;# 
  1510  001A                     	;# 
  1511  001B                     	;# 
  1512  001C                     	;# 
  1513  008C                     	;# 
  1514  008D                     	;# 
  1515  008E                     	;# 
  1516  0090                     	;# 
  1517  0091                     	;# 
  1518  0092                     	;# 
  1519  0095                     	;# 
  1520  0096                     	;# 
  1521  0097                     	;# 
  1522  0099                     	;# 
  1523  009A                     	;# 
  1524  009B                     	;# 
  1525  009B                     	;# 
  1526  009C                     	;# 
  1527  009D                     	;# 
  1528  009E                     	;# 
  1529  010C                     	;# 
  1530  010D                     	;# 
  1531  010E                     	;# 
  1532  0116                     	;# 
  1533  0117                     	;# 
  1534  011D                     	;# 
  1535  018C                     	;# 
  1536  018D                     	;# 
  1537  018E                     	;# 
  1538  0191                     	;# 
  1539  0191                     	;# 
  1540  0192                     	;# 
  1541  0193                     	;# 
  1542  0193                     	;# 
  1543  0194                     	;# 
  1544  0195                     	;# 
  1545  0196                     	;# 
  1546  0197                     	;# 
  1547  0199                     	;# 
  1548  019A                     	;# 
  1549  019B                     	;# 
  1550  019B                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019C                     	;# 
  1554  019C                     	;# 
  1555  019D                     	;# 
  1556  019E                     	;# 
  1557  019F                     	;# 
  1558  020D                     	;# 
  1559  0210                     	;# 
  1560  0211                     	;# 
  1561  0211                     	;# 
  1562  0212                     	;# 
  1563  0212                     	;# 
  1564  0213                     	;# 
  1565  0213                     	;# 
  1566  0214                     	;# 
  1567  0214                     	;# 
  1568  0215                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0216                     	;# 
  1572  0216                     	;# 
  1573  0217                     	;# 
  1574  0217                     	;# 
  1575  0291                     	;# 
  1576  0291                     	;# 
  1577  0292                     	;# 
  1578  0293                     	;# 
  1579  0298                     	;# 
  1580  0298                     	;# 
  1581  0299                     	;# 
  1582  029A                     	;# 
  1583  0394                     	;# 
  1584  0395                     	;# 
  1585  0396                     	;# 
  1586  0FE4                     	;# 
  1587  0FE5                     	;# 
  1588  0FE6                     	;# 
  1589  0FE7                     	;# 
  1590  0FE8                     	;# 
  1591  0FE9                     	;# 
  1592  0FEA                     	;# 
  1593  0FEB                     	;# 
  1594  0FED                     	;# 
  1595  0FEE                     	;# 
  1596  0FEF                     	;# 
  1597  0000                     	;# 
  1598  0001                     	;# 
  1599  0002                     	;# 
  1600  0003                     	;# 
  1601  0004                     	;# 
  1602  0005                     	;# 
  1603  0006                     	;# 
  1604  0007                     	;# 
  1605  0008                     	;# 
  1606  0009                     	;# 
  1607  000A                     	;# 
  1608  000B                     	;# 
  1609  000C                     	;# 
  1610  000D                     	;# 
  1611  000E                     	;# 
  1612  0010                     	;# 
  1613  0011                     	;# 
  1614  0012                     	;# 
  1615  0015                     	;# 
  1616  0016                     	;# 
  1617  0016                     	;# 
  1618  0017                     	;# 
  1619  0018                     	;# 
  1620  0019                     	;# 
  1621  001A                     	;# 
  1622  001B                     	;# 
  1623  001C                     	;# 
  1624  008C                     	;# 
  1625  008D                     	;# 
  1626  008E                     	;# 
  1627  0090                     	;# 
  1628  0091                     	;# 
  1629  0092                     	;# 
  1630  0095                     	;# 
  1631  0096                     	;# 
  1632  0097                     	;# 
  1633  0099                     	;# 
  1634  009A                     	;# 
  1635  009B                     	;# 
  1636  009B                     	;# 
  1637  009C                     	;# 
  1638  009D                     	;# 
  1639  009E                     	;# 
  1640  010C                     	;# 
  1641  010D                     	;# 
  1642  010E                     	;# 
  1643  0116                     	;# 
  1644  0117                     	;# 
  1645  011D                     	;# 
  1646  018C                     	;# 
  1647  018D                     	;# 
  1648  018E                     	;# 
  1649  0191                     	;# 
  1650  0191                     	;# 
  1651  0192                     	;# 
  1652  0193                     	;# 
  1653  0193                     	;# 
  1654  0194                     	;# 
  1655  0195                     	;# 
  1656  0196                     	;# 
  1657  0197                     	;# 
  1658  0199                     	;# 
  1659  019A                     	;# 
  1660  019B                     	;# 
  1661  019B                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019C                     	;# 
  1665  019C                     	;# 
  1666  019D                     	;# 
  1667  019E                     	;# 
  1668  019F                     	;# 
  1669  020D                     	;# 
  1670  0210                     	;# 
  1671  0211                     	;# 
  1672  0211                     	;# 
  1673  0212                     	;# 
  1674  0212                     	;# 
  1675  0213                     	;# 
  1676  0213                     	;# 
  1677  0214                     	;# 
  1678  0214                     	;# 
  1679  0215                     	;# 
  1680  0215                     	;# 
  1681  0215                     	;# 
  1682  0216                     	;# 
  1683  0216                     	;# 
  1684  0217                     	;# 
  1685  0217                     	;# 
  1686  0291                     	;# 
  1687  0291                     	;# 
  1688  0292                     	;# 
  1689  0293                     	;# 
  1690  0298                     	;# 
  1691  0298                     	;# 
  1692  0299                     	;# 
  1693  029A                     	;# 
  1694  0394                     	;# 
  1695  0395                     	;# 
  1696  0396                     	;# 
  1697  0FE4                     	;# 
  1698  0FE5                     	;# 
  1699  0FE6                     	;# 
  1700  0FE7                     	;# 
  1701  0FE8                     	;# 
  1702  0FE9                     	;# 
  1703  0FEA                     	;# 
  1704  0FEB                     	;# 
  1705  0FED                     	;# 
  1706  0FEE                     	;# 
  1707  0FEF                     	;# 
  1708  0000                     	;# 
  1709  0001                     	;# 
  1710  0002                     	;# 
  1711  0003                     	;# 
  1712  0004                     	;# 
  1713  0005                     	;# 
  1714  0006                     	;# 
  1715  0007                     	;# 
  1716  0008                     	;# 
  1717  0009                     	;# 
  1718  000A                     	;# 
  1719  000B                     	;# 
  1720  000C                     	;# 
  1721  000D                     	;# 
  1722  000E                     	;# 
  1723  0010                     	;# 
  1724  0011                     	;# 
  1725  0012                     	;# 
  1726  0015                     	;# 
  1727  0016                     	;# 
  1728  0016                     	;# 
  1729  0017                     	;# 
  1730  0018                     	;# 
  1731  0019                     	;# 
  1732  001A                     	;# 
  1733  001B                     	;# 
  1734  001C                     	;# 
  1735  008C                     	;# 
  1736  008D                     	;# 
  1737  008E                     	;# 
  1738  0090                     	;# 
  1739  0091                     	;# 
  1740  0092                     	;# 
  1741  0095                     	;# 
  1742  0096                     	;# 
  1743  0097                     	;# 
  1744  0099                     	;# 
  1745  009A                     	;# 
  1746  009B                     	;# 
  1747  009B                     	;# 
  1748  009C                     	;# 
  1749  009D                     	;# 
  1750  009E                     	;# 
  1751  010C                     	;# 
  1752  010D                     	;# 
  1753  010E                     	;# 
  1754  0116                     	;# 
  1755  0117                     	;# 
  1756  011D                     	;# 
  1757  018C                     	;# 
  1758  018D                     	;# 
  1759  018E                     	;# 
  1760  0191                     	;# 
  1761  0191                     	;# 
  1762  0192                     	;# 
  1763  0193                     	;# 
  1764  0193                     	;# 
  1765  0194                     	;# 
  1766  0195                     	;# 
  1767  0196                     	;# 
  1768  0197                     	;# 
  1769  0199                     	;# 
  1770  019A                     	;# 
  1771  019B                     	;# 
  1772  019B                     	;# 
  1773  019B                     	;# 
  1774  019B                     	;# 
  1775  019C                     	;# 
  1776  019C                     	;# 
  1777  019D                     	;# 
  1778  019E                     	;# 
  1779  019F                     	;# 
  1780  020D                     	;# 
  1781  0210                     	;# 
  1782  0211                     	;# 
  1783  0211                     	;# 
  1784  0212                     	;# 
  1785  0212                     	;# 
  1786  0213                     	;# 
  1787  0213                     	;# 
  1788  0214                     	;# 
  1789  0214                     	;# 
  1790  0215                     	;# 
  1791  0215                     	;# 
  1792  0215                     	;# 
  1793  0216                     	;# 
  1794  0216                     	;# 
  1795  0217                     	;# 
  1796  0217                     	;# 
  1797  0291                     	;# 
  1798  0291                     	;# 
  1799  0292                     	;# 
  1800  0293                     	;# 
  1801  0298                     	;# 
  1802  0298                     	;# 
  1803  0299                     	;# 
  1804  029A                     	;# 
  1805  0394                     	;# 
  1806  0395                     	;# 
  1807  0396                     	;# 
  1808  0FE4                     	;# 
  1809  0FE5                     	;# 
  1810  0FE6                     	;# 
  1811  0FE7                     	;# 
  1812  0FE8                     	;# 
  1813  0FE9                     	;# 
  1814  0FEA                     	;# 
  1815  0FEB                     	;# 
  1816  0FED                     	;# 
  1817  0FEE                     	;# 
  1818  0FEF                     	;# 
  1819  0000                     	;# 
  1820  0001                     	;# 
  1821  0002                     	;# 
  1822  0003                     	;# 
  1823  0004                     	;# 
  1824  0005                     	;# 
  1825  0006                     	;# 
  1826  0007                     	;# 
  1827  0008                     	;# 
  1828  0009                     	;# 
  1829  000A                     	;# 
  1830  000B                     	;# 
  1831  000C                     	;# 
  1832  000D                     	;# 
  1833  000E                     	;# 
  1834  0010                     	;# 
  1835  0011                     	;# 
  1836  0012                     	;# 
  1837  0015                     	;# 
  1838  0016                     	;# 
  1839  0016                     	;# 
  1840  0017                     	;# 
  1841  0018                     	;# 
  1842  0019                     	;# 
  1843  001A                     	;# 
  1844  001B                     	;# 
  1845  001C                     	;# 
  1846  008C                     	;# 
  1847  008D                     	;# 
  1848  008E                     	;# 
  1849  0090                     	;# 
  1850  0091                     	;# 
  1851  0092                     	;# 
  1852  0095                     	;# 
  1853  0096                     	;# 
  1854  0097                     	;# 
  1855  0099                     	;# 
  1856  009A                     	;# 
  1857  009B                     	;# 
  1858  009B                     	;# 
  1859  009C                     	;# 
  1860  009D                     	;# 
  1861  009E                     	;# 
  1862  010C                     	;# 
  1863  010D                     	;# 
  1864  010E                     	;# 
  1865  0116                     	;# 
  1866  0117                     	;# 
  1867  011D                     	;# 
  1868  018C                     	;# 
  1869  018D                     	;# 
  1870  018E                     	;# 
  1871  0191                     	;# 
  1872  0191                     	;# 
  1873  0192                     	;# 
  1874  0193                     	;# 
  1875  0193                     	;# 
  1876  0194                     	;# 
  1877  0195                     	;# 
  1878  0196                     	;# 
  1879  0197                     	;# 
  1880  0199                     	;# 
  1881  019A                     	;# 
  1882  019B                     	;# 
  1883  019B                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019C                     	;# 
  1887  019C                     	;# 
  1888  019D                     	;# 
  1889  019E                     	;# 
  1890  019F                     	;# 
  1891  020D                     	;# 
  1892  0210                     	;# 
  1893  0211                     	;# 
  1894  0211                     	;# 
  1895  0212                     	;# 
  1896  0212                     	;# 
  1897  0213                     	;# 
  1898  0213                     	;# 
  1899  0214                     	;# 
  1900  0214                     	;# 
  1901  0215                     	;# 
  1902  0215                     	;# 
  1903  0215                     	;# 
  1904  0216                     	;# 
  1905  0216                     	;# 
  1906  0217                     	;# 
  1907  0217                     	;# 
  1908  0291                     	;# 
  1909  0291                     	;# 
  1910  0292                     	;# 
  1911  0293                     	;# 
  1912  0298                     	;# 
  1913  0298                     	;# 
  1914  0299                     	;# 
  1915  029A                     	;# 
  1916  0394                     	;# 
  1917  0395                     	;# 
  1918  0396                     	;# 
  1919  0FE4                     	;# 
  1920  0FE5                     	;# 
  1921  0FE6                     	;# 
  1922  0FE7                     	;# 
  1923  0FE8                     	;# 
  1924  0FE9                     	;# 
  1925  0FEA                     	;# 
  1926  0FEB                     	;# 
  1927  0FED                     	;# 
  1928  0FEE                     	;# 
  1929  0FEF                     	;# 
  1930  0000                     	;# 
  1931  0001                     	;# 
  1932  0002                     	;# 
  1933  0003                     	;# 
  1934  0004                     	;# 
  1935  0005                     	;# 
  1936  0006                     	;# 
  1937  0007                     	;# 
  1938  0008                     	;# 
  1939  0009                     	;# 
  1940  000A                     	;# 
  1941  000B                     	;# 
  1942  000C                     	;# 
  1943  000D                     	;# 
  1944  000E                     	;# 
  1945  0010                     	;# 
  1946  0011                     	;# 
  1947  0012                     	;# 
  1948  0015                     	;# 
  1949  0016                     	;# 
  1950  0016                     	;# 
  1951  0017                     	;# 
  1952  0018                     	;# 
  1953  0019                     	;# 
  1954  001A                     	;# 
  1955  001B                     	;# 
  1956  001C                     	;# 
  1957  008C                     	;# 
  1958  008D                     	;# 
  1959  008E                     	;# 
  1960  0090                     	;# 
  1961  0091                     	;# 
  1962  0092                     	;# 
  1963  0095                     	;# 
  1964  0096                     	;# 
  1965  0097                     	;# 
  1966  0099                     	;# 
  1967  009A                     	;# 
  1968  009B                     	;# 
  1969  009B                     	;# 
  1970  009C                     	;# 
  1971  009D                     	;# 
  1972  009E                     	;# 
  1973  010C                     	;# 
  1974  010D                     	;# 
  1975  010E                     	;# 
  1976  0116                     	;# 
  1977  0117                     	;# 
  1978  011D                     	;# 
  1979  018C                     	;# 
  1980  018D                     	;# 
  1981  018E                     	;# 
  1982  0191                     	;# 
  1983  0191                     	;# 
  1984  0192                     	;# 
  1985  0193                     	;# 
  1986  0193                     	;# 
  1987  0194                     	;# 
  1988  0195                     	;# 
  1989  0196                     	;# 
  1990  0197                     	;# 
  1991  0199                     	;# 
  1992  019A                     	;# 
  1993  019B                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019C                     	;# 
  1998  019C                     	;# 
  1999  019D                     	;# 
  2000  019E                     	;# 
  2001  019F                     	;# 
  2002  020D                     	;# 
  2003  0210                     	;# 
  2004  0211                     	;# 
  2005  0211                     	;# 
  2006  0212                     	;# 
  2007  0212                     	;# 
  2008  0213                     	;# 
  2009  0213                     	;# 
  2010  0214                     	;# 
  2011  0214                     	;# 
  2012  0215                     	;# 
  2013  0215                     	;# 
  2014  0215                     	;# 
  2015  0216                     	;# 
  2016  0216                     	;# 
  2017  0217                     	;# 
  2018  0217                     	;# 
  2019  0291                     	;# 
  2020  0291                     	;# 
  2021  0292                     	;# 
  2022  0293                     	;# 
  2023  0298                     	;# 
  2024  0298                     	;# 
  2025  0299                     	;# 
  2026  029A                     	;# 
  2027  0394                     	;# 
  2028  0395                     	;# 
  2029  0396                     	;# 
  2030  0FE4                     	;# 
  2031  0FE5                     	;# 
  2032  0FE6                     	;# 
  2033  0FE7                     	;# 
  2034  0FE8                     	;# 
  2035  0FE9                     	;# 
  2036  0FEA                     	;# 
  2037  0FEB                     	;# 
  2038  0FED                     	;# 
  2039  0FEE                     	;# 
  2040  0FEF                     	;# 
  2041  0000                     	;# 
  2042  0001                     	;# 
  2043  0002                     	;# 
  2044  0003                     	;# 
  2045  0004                     	;# 
  2046  0005                     	;# 
  2047  0006                     	;# 
  2048  0007                     	;# 
  2049  0008                     	;# 
  2050  0009                     	;# 
  2051  000A                     	;# 
  2052  000B                     	;# 
  2053  000C                     	;# 
  2054  000D                     	;# 
  2055  000E                     	;# 
  2056  0010                     	;# 
  2057  0011                     	;# 
  2058  0012                     	;# 
  2059  0015                     	;# 
  2060  0016                     	;# 
  2061  0016                     	;# 
  2062  0017                     	;# 
  2063  0018                     	;# 
  2064  0019                     	;# 
  2065  001A                     	;# 
  2066  001B                     	;# 
  2067  001C                     	;# 
  2068  008C                     	;# 
  2069  008D                     	;# 
  2070  008E                     	;# 
  2071  0090                     	;# 
  2072  0091                     	;# 
  2073  0092                     	;# 
  2074  0095                     	;# 
  2075  0096                     	;# 
  2076  0097                     	;# 
  2077  0099                     	;# 
  2078  009A                     	;# 
  2079  009B                     	;# 
  2080  009B                     	;# 
  2081  009C                     	;# 
  2082  009D                     	;# 
  2083  009E                     	;# 
  2084  010C                     	;# 
  2085  010D                     	;# 
  2086  010E                     	;# 
  2087  0116                     	;# 
  2088  0117                     	;# 
  2089  011D                     	;# 
  2090  018C                     	;# 
  2091  018D                     	;# 
  2092  018E                     	;# 
  2093  0191                     	;# 
  2094  0191                     	;# 
  2095  0192                     	;# 
  2096  0193                     	;# 
  2097  0193                     	;# 
  2098  0194                     	;# 
  2099  0195                     	;# 
  2100  0196                     	;# 
  2101  0197                     	;# 
  2102  0199                     	;# 
  2103  019A                     	;# 
  2104  019B                     	;# 
  2105  019B                     	;# 
  2106  019B                     	;# 
  2107  019B                     	;# 
  2108  019C                     	;# 
  2109  019C                     	;# 
  2110  019D                     	;# 
  2111  019E                     	;# 
  2112  019F                     	;# 
  2113  020D                     	;# 
  2114  0210                     	;# 
  2115  0211                     	;# 
  2116  0211                     	;# 
  2117  0212                     	;# 
  2118  0212                     	;# 
  2119  0213                     	;# 
  2120  0213                     	;# 
  2121  0214                     	;# 
  2122  0214                     	;# 
  2123  0215                     	;# 
  2124  0215                     	;# 
  2125  0215                     	;# 
  2126  0216                     	;# 
  2127  0216                     	;# 
  2128  0217                     	;# 
  2129  0217                     	;# 
  2130  0291                     	;# 
  2131  0291                     	;# 
  2132  0292                     	;# 
  2133  0293                     	;# 
  2134  0298                     	;# 
  2135  0298                     	;# 
  2136  0299                     	;# 
  2137  029A                     	;# 
  2138  0394                     	;# 
  2139  0395                     	;# 
  2140  0396                     	;# 
  2141  0FE4                     	;# 
  2142  0FE5                     	;# 
  2143  0FE6                     	;# 
  2144  0FE7                     	;# 
  2145  0FE8                     	;# 
  2146  0FE9                     	;# 
  2147  0FEA                     	;# 
  2148  0FEB                     	;# 
  2149  0FED                     	;# 
  2150  0FEE                     	;# 
  2151  0FEF                     	;# 
  2152                           
  2153                           	psect	idataBANK4
  2154  1FE0                     __pidataBANK4:	
  2155                           
  2156                           ;initializer for __product
  2157  1FE0  3463               	retlw	99
  2158  1FE1  3402               	retlw	2
  2159  1FE2  3400               	retlw	0
  2160  1FE3  3400               	retlw	0
  2161  1FE4  3400               	retlw	0
  2162  1FE5  3400               	retlw	0
  2163  1FE6  3400               	retlw	0
  2164  1FE7  3400               	retlw	0
  2165  1FE8  3400               	retlw	0
  2166  1FE9  3400               	retlw	0
  2167  1FEA  3400               	retlw	0
  2168  1FEB  3400               	retlw	0
  2169  1FEC  34FF               	retlw	255
  2170  1FED  34FF               	retlw	255
  2171  1FEE  34FF               	retlw	255
  2172  1FEF  3400               	retlw	0
  2173  1FF0  3400               	retlw	0
  2174  1FF1  3400               	retlw	0
  2175  1FF2  3400               	retlw	0
  2176  1FF3  3400               	retlw	0
  2177  1FF4  3400               	retlw	0
  2178  1FF5  3400               	retlw	0
  2179  1FF6  3400               	retlw	0
  2180  1FF7  3400               	retlw	0
  2181  1FF8  3400               	retlw	0
  2182  1FF9  3400               	retlw	0
  2183  1FFA  3400               	retlw	0
  2184  1FFB  3400               	retlw	0
  2185  1FFC  3400               	retlw	0
  2186  1FFD  3400               	retlw	0
  2187  1FFE  3400               	retlw	0
  2188  1FFF  3400               	retlw	0
  2189                           
  2190                           	psect	stringtext
  2191  1000                     __pstringtext:	
  2192  1000                     _CC2500_registers_address:	
  2193  1000  3403               	retlw	3
  2194  1001  3416               	retlw	22
  2195  1002  3417               	retlw	23
  2196  1003  341E               	retlw	30
  2197  1004  341F               	retlw	31
  2198  1005  3420               	retlw	32
  2199  1006  342A               	retlw	42
  2200  1007  342B               	retlw	43
  2201  1008  340B               	retlw	11
  2202  1009  340C               	retlw	12
  2203  100A  340D               	retlw	13
  2204  100B  340E               	retlw	14
  2205  100C  340F               	retlw	15
  2206  100D  3410               	retlw	16
  2207  100E  3411               	retlw	17
  2208  100F  3412               	retlw	18
  2209  1010  3413               	retlw	19
  2210  1011  3414               	retlw	20
  2211  1012  340A               	retlw	10
  2212  1013  3415               	retlw	21
  2213  1014  3421               	retlw	33
  2214  1015  3422               	retlw	34
  2215  1016  3418               	retlw	24
  2216  1017  3419               	retlw	25
  2217  1018  341A               	retlw	26
  2218  1019  341B               	retlw	27
  2219  101A  341C               	retlw	28
  2220  101B  341D               	retlw	29
  2221  101C  3423               	retlw	35
  2222  101D  3424               	retlw	36
  2223  101E  3425               	retlw	37
  2224  101F  3426               	retlw	38
  2225  1020  3429               	retlw	41
  2226  1021  342C               	retlw	44
  2227  1022  342D               	retlw	45
  2228  1023  342E               	retlw	46
  2229  1024  3400               	retlw	0
  2230  1025  3401               	retlw	1
  2231  1026  3402               	retlw	2
  2232  1027  3407               	retlw	7
  2233  1028  3408               	retlw	8
  2234  1029  3409               	retlw	9
  2235  102A  3406               	retlw	6
  2236  102B  3404               	retlw	4
  2237  102C  3405               	retlw	5
  2238  102D  3427               	retlw	39
  2239  102E  3428               	retlw	40
  2240  102F                     __end_of_CC2500_registers_address:	
  2241  102F                     _CC2500_rfSettings:	
  2242  102F  3407               	retlw	7
  2243  1030  3407               	retlw	7
  2244  1031  3430               	retlw	48
  2245  1032  3487               	retlw	135
  2246  1033  346B               	retlw	107
  2247  1034  34F8               	retlw	248
  2248  1035  347F               	retlw	127
  2249  1036  343F               	retlw	63
  2250  1037  3409               	retlw	9
  2251  1038  3400               	retlw	0
  2252  1039  345C               	retlw	92
  2253  103A  34A7               	retlw	167
  2254  103B  3462               	retlw	98
  2255  103C  3486               	retlw	134
  2256  103D  3483               	retlw	131
  2257  103E  3403               	retlw	3
  2258  103F  3422               	retlw	34
  2259  1040  34F8               	retlw	248
  2260  1041  3400               	retlw	0
  2261  1042  3444               	retlw	68
  2262  1043  34B6               	retlw	182
  2263  1044  3410               	retlw	16
  2264  1045  3418               	retlw	24
  2265  1046  341D               	retlw	29
  2266  1047  341C               	retlw	28
  2267  1048  34C7               	retlw	199
  2268  1049  3400               	retlw	0
  2269  104A  34B2               	retlw	178
  2270  104B  34EA               	retlw	234
  2271  104C  340A               	retlw	10
  2272  104D  3400               	retlw	0
  2273  104E  3411               	retlw	17
  2274  104F  3459               	retlw	89
  2275  1050  3488               	retlw	136
  2276  1051  3431               	retlw	49
  2277  1052  340B               	retlw	11
  2278  1053  342F               	retlw	47
  2279  1054  342E               	retlw	46
  2280  1055  3406               	retlw	6
  2281  1056  3404               	retlw	4
  2282  1057  3405               	retlw	5
  2283  1058  3400               	retlw	0
  2284  1059  3430               	retlw	48
  2285  105A  34D3               	retlw	211
  2286  105B  3491               	retlw	145
  2287  105C  3441               	retlw	65
  2288  105D  3400               	retlw	0
  2289  105E                     __end_of_CC2500_rfSettings:	
  2290  105E                     _CC2500_patable_vaule:	
  2291  105E  34FE               	retlw	254
  2292  105F  34FE               	retlw	254
  2293  1060  34FE               	retlw	254
  2294  1061  34FE               	retlw	254
  2295  1062  34FE               	retlw	254
  2296  1063  34FE               	retlw	254
  2297  1064  34FE               	retlw	254
  2298  1065  34FE               	retlw	254
  2299  1066                     __end_of_CC2500_patable_vaule:	
  2300                           
  2301                           	psect	nvBANK0
  2302  006E                     __pnvBANK0:	
  2303  006E                     _product:	
  2304  006E                     	ds	1
  2305  000C                     _PORTA	set	12
  2306  000D                     _PORTB	set	13
  2307  000E                     _PORTC	set	14
  2308  0018                     _T1CON	set	24
  2309  0017                     _TMR1H	set	23
  2310  0016                     _TMR1L	set	22
  2311  005F                     _GIE	set	95
  2312  005B                     _IOCIE	set	91
  2313  0058                     _IOCIF	set	88
  2314  005E                     _PEIE	set	94
  2315  0060                     _RA0	set	96
  2316  0063                     _RA3	set	99
  2317  0064                     _RA4	set	100
  2318  0066                     _RA6	set	102
  2319  0067                     _RA7	set	103
  2320  0068                     _RB0	set	104
  2321  0069                     _RB1	set	105
  2322  006A                     _RB2	set	106
  2323  006B                     _RB3	set	107
  2324  006C                     _RB4	set	108
  2325  006D                     _RB5	set	109
  2326  0070                     _RC0	set	112
  2327  0071                     _RC1	set	113
  2328  0072                     _RC2	set	114
  2329  0074                     _RC4	set	116
  2330  0075                     _RC5	set	117
  2331  0077                     _RC7	set	119
  2332  0088                     _TMR1IF	set	136
  2333  009D                     _ADCON0	set	157
  2334  009E                     _ADCON1	set	158
  2335  009C                     _ADRESH	set	156
  2336  009B                     _ADRESL	set	155
  2337  0099                     _OSCCON	set	153
  2338  008C                     _TRISA	set	140
  2339  008D                     _TRISB	set	141
  2340  008E                     _TRISC	set	142
  2341  0097                     _WDTCON	set	151
  2342  04E9                     _GO_nDONE	set	1257
  2343  0488                     _TMR1IE	set	1160
  2344  0117                     _FVRCON	set	279
  2345  010C                     _LATA	set	268
  2346  010D                     _LATB	set	269
  2347  010E                     _LATC	set	270
  2348  018C                     _ANSELA	set	396
  2349  018D                     _ANSELB	set	397
  2350  018E                     _ANSELC	set	398
  2351  0192                     _PMADRH	set	402
  2352  0191                     _PMADRL	set	401
  2353  0196                     _PMCON2	set	406
  2354  0194                     _PMDATH	set	404
  2355  0193                     _PMDATL	set	403
  2356  0CAE                     _CFGS	set	3246
  2357  0CAC                     _FREE	set	3244
  2358  0CAD                     _LWLO	set	3245
  2359  0CA8                     _RD	set	3240
  2360  0CA9                     _WR	set	3241
  2361  0CAA                     _WREN	set	3242
  2362  1069                     _WPUB1	set	4201
  2363  106A                     _WPUB2	set	4202
  2364  0396                     _IOCBF	set	918
  2365  0395                     _IOCBN	set	917
  2366  0394                     _IOCBP	set	916
  2367  1CB2                     _IOCBF2	set	7346
  2368                           
  2369                           ; #config settings
  2370  0000                     
  2371                           	psect	cinit
  2372  0015                     start_initialization:	
  2373  0015                     __initialization:	
  2374                           
  2375                           ; Clear objects allocated to BITCOMMON
  2376  0015  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2377                           
  2378                           ; Clear objects allocated to COMMON
  2379  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2380  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2381  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2382  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2383  001A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2384                           
  2385                           ; Clear objects allocated to BANK0
  2386  001B  01EF               	clrf	__pbssBANK0& (0+127)
  2387                           
  2388                           ; Clear objects allocated to BANK1
  2389  001C  30A0               	movlw	low __pbssBANK1
  2390  001D  0084               	movwf	4
  2391  001E  3000               	movlw	high __pbssBANK1
  2392  001F  0085               	movwf	5
  2393  0020  3049               	movlw	73
  2394  0021  319C  240C  3180   	fcall	clear_ram0
  2395                           
  2396                           ; Clear objects allocated to BANK2
  2397  0024  3020               	movlw	low __pbssBANK2
  2398  0025  0084               	movwf	4
  2399  0026  3001               	movlw	high __pbssBANK2
  2400  0027  0085               	movwf	5
  2401  0028  3050               	movlw	80
  2402  0029  319C  240C  3180   	fcall	clear_ram0
  2403                           
  2404                           ; Clear objects allocated to BANK3
  2405  002C  30A0               	movlw	low __pbssBANK3
  2406  002D  0084               	movwf	4
  2407  002E  3001               	movlw	high __pbssBANK3
  2408  002F  0085               	movwf	5
  2409  0030  3046               	movlw	70
  2410  0031  319C  240C  3180   	fcall	clear_ram0
  2411                           
  2412                           ; Clear objects allocated to BANK4
  2413  0034  3020               	movlw	low __pbssBANK4
  2414  0035  0084               	movwf	4
  2415  0036  3002               	movlw	high __pbssBANK4
  2416  0037  0085               	movwf	5
  2417  0038  3025               	movlw	37
  2418  0039  319C  240C  3180   	fcall	clear_ram0
  2419                           
  2420                           ; Initialize objects allocated to BANK4
  2421  003C  30E0               	movlw	low __pidataBANK4
  2422  003D  0084               	movwf	4
  2423  003E  309F               	movlw	(high __pidataBANK4)| (0+128)
  2424  003F  0085               	movwf	5
  2425  0040  3045               	movlw	low __pdataBANK4
  2426  0041  0086               	movwf	6
  2427  0042  3002               	movlw	high __pdataBANK4
  2428  0043  0087               	movwf	7
  2429  0044  3020               	movlw	32
  2430  0045  319C  2406         	fcall	init_ram
  2431  0047                     end_of_initialization:	
  2432                           ;End of C runtime variable initialization code
  2433                           
  2434  0047                     __end_of__initialization:	
  2435  0047  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2436  0048  0020               	movlb	0
  2437  0049  3196  2EF6         	ljmp	_main	;jump to C main() function
  2438                           
  2439                           	psect	bitbssCOMMON
  2440  03E8                     __pbitbssCOMMON:	
  2441  03E8                     _Receive_OK:	
  2442  03E8                     	ds	1
  2443  03E9                     _Transceive_OK:	
  2444  03E9                     	ds	1
  2445                           
  2446                           	psect	bssCOMMON
  2447  0078                     __pbssCOMMON:	
  2448  0078                     _DelayOff:	
  2449  0078                     	ds	1
  2450  0079                     _DimmerLightsIntr:	
  2451  0079                     	ds	1
  2452  007A                     _LED:	
  2453  007A                     	ds	1
  2454  007B                     _SPI0Buffer:	
  2455  007B                     	ds	1
  2456  007C                     _Sw:	
  2457  007C                     	ds	1
  2458                           
  2459                           	psect	bssBANK0
  2460  006F                     __pbssBANK0:	
  2461  006F                     _DimmerLights:	
  2462  006F                     	ds	1
  2463                           
  2464                           	psect	bssBANK1
  2465  00A0                     __pbssBANK1:	
  2466  00A0                     _myMain:	
  2467  00A0                     	ds	15
  2468  00AF                     _Buz1:	
  2469  00AF                     	ds	12
  2470  00BB                     _RF1:	
  2471  00BB                     	ds	12
  2472  00C7                     _Timer1:	
  2473  00C7                     	ds	3
  2474  00CA                     _WDT:	
  2475  00CA                     	ds	2
  2476  00CC                     _CRC:	
  2477  00CC                     	ds	1
  2478  00CD                     _DimmerLights11:	
  2479  00CD                     	ds	1
  2480  00CE                     _DimmerLights22:	
  2481  00CE                     	ds	1
  2482  00CF                     _DimmerLightsIntrIOC:	
  2483  00CF                     	ds	1
  2484  00D0                     _RSSI:	
  2485  00D0                     	ds	1
  2486  00D1                     _Rx_Length:	
  2487  00D1                     	ds	1
  2488  00D2                     _SwDetect:	
  2489  00D2                     	ds	1
  2490  00D3                     _Tx_Length:	
  2491  00D3                     	ds	1
  2492  00D4                     _r_address:	
  2493  00D4                     	ds	1
  2494  00D5                     _r_data:	
  2495  00D5                     	ds	1
  2496  00D6                     _s_data:	
  2497  00D6                     	ds	1
  2498  00D7                     _Temp:	
  2499  00D7                     	ds	18
  2500                           
  2501                           	psect	bssBANK2
  2502  0120                     __pbssBANK2:	
  2503  0120                     _RF_Data:	
  2504  0120                     	ds	30
  2505  013E                     _Dimmer:	
  2506  013E                     	ds	3
  2507  0141                     _RF_Count:	
  2508  0141                     	ds	2
  2509  0143                     _Load:	
  2510  0143                     	ds	45
  2511                           
  2512                           	psect	bssBANK3
  2513  01A0                     __pbssBANK3:	
  2514  01A0                     _DimmerLights1:	
  2515  01A0                     	ds	15
  2516  01AF                     _DimmerLights2:	
  2517  01AF                     	ds	15
  2518  01BE                     _Sw1:	
  2519  01BE                     	ds	9
  2520  01C7                     _Sw2:	
  2521  01C7                     	ds	9
  2522  01D0                     _DlySw1:	
  2523  01D0                     	ds	5
  2524  01D5                     _DlySw2:	
  2525  01D5                     	ds	5
  2526  01DA                     _VarErrLED:	
  2527  01DA                     	ds	4
  2528  01DE                     _VarLED1:	
  2529  01DE                     	ds	4
  2530  01E2                     _VarLED2:	
  2531  01E2                     	ds	4
  2532                           
  2533                           	psect	bssBANK4
  2534  0220                     __pbssBANK4:	
  2535  0220                     _Memory:	
  2536  0220                     	ds	37
  2537                           
  2538                           	psect	dataBANK4
  2539  0245                     __pdataBANK4:	
  2540  0245                     __product:	
  2541  0245                     	ds	32
  2542                           
  2543                           	psect	clrtext
  2544  1C0C                     clear_ram0:	
  2545                           ;	Called with FSR0 containing the base address, and
  2546                           ;	WREG with the size to clear
  2547                           
  2548  1C0C  0064               	clrwdt	;clear the watchdog before getting into this loop
  2549  1C0D                     clrloop0:	
  2550  1C0D  0180               	clrf	0	;clear RAM location pointed to by FSR
  2551  1C0E  3101               	addfsr 0,1
  2552  1C0F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2553  1C10  2C0D               	goto	clrloop0	;have we reached the end yet?
  2554  1C11  3400               	retlw	0	;all done for this memory range, return
  2555                           
  2556                           	psect	inittext
  2557  1C06                     init_ram:	
  2558  1C06  00FE               	movwf	126
  2559  1C07                     initloop:	
  2560  1C07  0012               	moviw fsr0++
  2561  1C08  001E               	movwi fsr1++
  2562  1C09  0BFE               	decfsz	126,f
  2563  1C0A  2C07               	goto	initloop
  2564  1C0B  3400               	retlw	0
  2565                           
  2566                           	psect	cstackBANK1
  2567  00E9                     __pcstackBANK1:	
  2568  00E9                     setRF_Main@loop_f:	
  2569                           
  2570                           ; 1 bytes @ 0x0
  2571  00E9                     	ds	1
  2572  00EA                     setRF_Main@Receive_OK:	
  2573                           
  2574                           ; 1 bytes @ 0x1
  2575  00EA                     	ds	1
  2576  00EB                     setRF_Main@error:	
  2577                           
  2578                           ; 1 bytes @ 0x2
  2579  00EB                     	ds	1
  2580  00EC                     ?_main:	
  2581  00EC                     main@argc:	
  2582                           ; 2 bytes @ 0x3
  2583                           
  2584                           
  2585                           ; 2 bytes @ 0x3
  2586  00EC                     	ds	2
  2587  00EE                     main@argv:	
  2588                           
  2589                           ; 2 bytes @ 0x5
  2590  00EE                     	ds	2
  2591                           
  2592                           	psect	cstackCOMMON
  2593  0070                     __pcstackCOMMON:	
  2594  0070                     ?_Timeout_Counter:	
  2595  0070                     ?_set_TimeoutCleared:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_CC2500_WriteByte:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_CC2500_WriteCommand:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_CC2500_PowerRST:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_CC2500_InitSetREG:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_CC2500_InitPATable:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_CC2500_ClearTXFIFO:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_CC2500_ClearRXFIFO:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_CC2500_FrequencyCabr:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_CC2500_SIDLEMode:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_DlyOff_Initialization:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_DlyOff_Main:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_setDimmerLights_ErrorClose:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_setDimmerLights_Initialization:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_Dimmer_Initialization:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_setDimmerLights_Main:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_setDimmerLights_Line:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_setTxData:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_setLED_Initialization:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_setLED_Main:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_Fosc_Set:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_IO_Set:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_TMR1_Set:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_ADC_Set:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_IOC_Set:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_WDT_Set:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_IOC_ISR:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_TMR1_ISR:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_Flash_Memory_Write:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_Flash_Memory_Modify:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_WDT_Clearing:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_setLoad_AH_AL_Restore:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_setTemp_Initialization:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_setTemp_Main:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_setRF_Initialization:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_setRF_Main:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_RF_RxDisable:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_getRxData:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_setLog_Code:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_setControl_Lights_Table:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_setRFSW_Control:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_setRFSW_AdjControl:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_setRF_DimmerValue:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_setSw_Initialization:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_setMain_Exception:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_setSw_Main:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_myMain_Initialization:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_my_MainTimer:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_Buzzer_Initialization:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_Buzzer_Main:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_CC2500_TxData:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_CC2500_PowerOnInitial:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_DelayOffPointSelect:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_DelayOff_Initialization:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_DelayOff_Main:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_DimmerIntrIOCPointSelect:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ??_DimmerIntrIOCPointSelect:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_DimmerIntrPointSelect:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ??_DimmerIntrPointSelect:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_setDimmerLights_IntrControl:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_DimmerLightsPointSelect:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_DimmerLights_Initialization:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_DimmerLights_Main:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_setDimmerLights_SwOn:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_setDimmerLights_SwOff:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_setDimmerLights_AdjControl:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_setDimmerLights_AdjRF:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_LedPointSelect:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_LED_Initialization:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_LED_Main:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_Mcu_Initialization:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_ISR:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ?_setDimmerReClock:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_Flash_Memory_Initialization:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?_Flash_Memory_Main:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ?_Flash_Memory_Unlock:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ?_Flash_Memory_Erasing:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_setMemory_Modify:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ?_setMemory_LoopSave:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0070                     ?_WDT_Main:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0070                     ?_Load_Initialization:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0070                     ?_getLoad_AD:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0070                     ?_Load_Main:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0070                     ?_Temp_Initialization:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0070                     ?_getTemp_AD:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0070                     ?_Temp_Main:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0070                     ?_RF_Initialization:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0070                     ?_RF_Main:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0070                     ?_setRF_Learn:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0070                     ?_TouchPower:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0070                     ?_SwPointSelect:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0070                     ?_Switch_Initialization:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0070                     ?_Switch_Main:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0070                     ?_DelayTimejudge:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0070                     ?_getMain_All_Error_Status:	
  2881                           ; 1 bytes @ 0x0
  2882                           
  2883  0070                     ?_getLoad_OK:	
  2884                           ; 1 bytes @ 0x0
  2885                           
  2886  0070                     ?_getMain_LightsStatus:	
  2887                           ; 1 bytes @ 0x0
  2888                           
  2889  0070                     ?_setPercentValue:	
  2890                           ; 1 bytes @ 0x0
  2891                           
  2892  0070                     ?_getPercentValue:	
  2893                           ; 1 bytes @ 0x0
  2894                           
  2895  0070                     ?_Flash_Memory_Read:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0070                     ?_getMain_LoadOK:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901  0070                     ?_getMain_Lights_Count:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0070                     ?_getRF_KeyStatus:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0070                     ?_getSw_KeyStatus:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0070                     ?_getDelayOff_GO:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0070                     ?_getDimmerLights_Status:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0070                     ?_getAll_DimmerLights_AdjGO:	
  2917                           ; 1 bytes @ 0x0
  2918                           
  2919  0070                     ?_getDimmer_LoadOK:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0070                     ?_getDimmerLights_Line:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925                           
  2926                           ; 1 bytes @ 0x0
  2927  0070                     	ds	1
  2928  0071                     DimmerIntrIOCPointSelect@lights:	
  2929  0071                     DimmerIntrPointSelect@lights:	
  2930                           ; 1 bytes @ 0x1
  2931                           
  2932                           
  2933                           ; 1 bytes @ 0x1
  2934  0071                     	ds	1
  2935  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2936  0072                     ??_setDimmerLights_IntrControl:	
  2937                           ; 0 bytes @ 0x2
  2938                           
  2939  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2940                           ; 0 bytes @ 0x2
  2941                           
  2942                           
  2943                           ; 1 bytes @ 0x2
  2944  0072                     	ds	1
  2945  0073                     ??_IOC_ISR:	
  2946  0073                     ??_setDimmerReClock:	
  2947                           ; 0 bytes @ 0x3
  2948                           
  2949                           
  2950                           ; 0 bytes @ 0x3
  2951  0073                     	ds	3
  2952  0076                     setDimmerLights_IntrControl@lights:	
  2953                           
  2954                           ; 1 bytes @ 0x6
  2955  0076                     	ds	1
  2956  0077                     ??_TMR1_ISR:	
  2957  0077                     ??_ISR:	
  2958                           ; 0 bytes @ 0x7
  2959                           
  2960                           
  2961                           ; 0 bytes @ 0x7
  2962  0077                     	ds	1
  2963                           
  2964                           	psect	cstackBANK0
  2965  0020                     __pcstackBANK0:	
  2966  0020                     ??_Timeout_Counter:	
  2967  0020                     ??_set_TimeoutCleared:	
  2968                           ; 0 bytes @ 0x0
  2969                           
  2970  0020                     ??_CC2500_WriteByte:	
  2971                           ; 0 bytes @ 0x0
  2972                           
  2973  0020                     ?_DelayTime_1us:	
  2974                           ; 0 bytes @ 0x0
  2975                           
  2976  0020                     ??_Dimmer_Initialization:	
  2977                           ; 0 bytes @ 0x0
  2978                           
  2979  0020                     ??_getMain_All_Error_Status:	
  2980                           ; 0 bytes @ 0x0
  2981                           
  2982  0020                     ??_getLoad_OK:	
  2983                           ; 0 bytes @ 0x0
  2984                           
  2985  0020                     ??_setDimmerLights_Line:	
  2986                           ; 0 bytes @ 0x0
  2987                           
  2988  0020                     ?_setRF_DimmerLights:	
  2989                           ; 0 bytes @ 0x0
  2990                           
  2991  0020                     ??_setTxData:	
  2992                           ; 0 bytes @ 0x0
  2993                           
  2994  0020                     ??_Fosc_Set:	
  2995                           ; 0 bytes @ 0x0
  2996                           
  2997  0020                     ??_IO_Set:	
  2998                           ; 0 bytes @ 0x0
  2999                           
  3000  0020                     ??_TMR1_Set:	
  3001                           ; 0 bytes @ 0x0
  3002                           
  3003  0020                     ??_ADC_Set:	
  3004                           ; 0 bytes @ 0x0
  3005                           
  3006  0020                     ??_IOC_Set:	
  3007                           ; 0 bytes @ 0x0
  3008                           
  3009  0020                     ??_WDT_Set:	
  3010                           ; 0 bytes @ 0x0
  3011                           
  3012  0020                     ??_Flash_Memory_Read:	
  3013                           ; 0 bytes @ 0x0
  3014                           
  3015  0020                     ?_setMemory_Data:	
  3016                           ; 0 bytes @ 0x0
  3017                           
  3018  0020                     ??_Flash_Memory_Write:	
  3019                           ; 0 bytes @ 0x0
  3020                           
  3021  0020                     ??_WDT_Clearing:	
  3022                           ; 0 bytes @ 0x0
  3023                           
  3024  0020                     ??_setLoad_AH_AL_Restore:	
  3025                           ; 0 bytes @ 0x0
  3026                           
  3027  0020                     ??_getMain_Lights_Count:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0020                     ??_setTemp_Initialization:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0020                     ??_setRF_Initialization:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0020                     ??_getRF_KeyStatus:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0020                     ??_getSw_KeyStatus:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0020                     ??_myMain_Initialization:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0020                     ??_Buzzer_Initialization:	
  3046                           ; 0 bytes @ 0x0
  3047                           
  3048  0020                     ??_Buzzer_Main:	
  3049                           ; 0 bytes @ 0x0
  3050                           
  3051  0020                     ??_DelayOffPointSelect:	
  3052                           ; 0 bytes @ 0x0
  3053                           
  3054  0020                     ??_DimmerLightsPointSelect:	
  3055                           ; 0 bytes @ 0x0
  3056                           
  3057  0020                     ??_getAll_DimmerLights_AdjGO:	
  3058                           ; 0 bytes @ 0x0
  3059                           
  3060  0020                     ??_getDimmer_LoadOK:	
  3061                           ; 0 bytes @ 0x0
  3062                           
  3063  0020                     ??_getDimmerLights_Line:	
  3064                           ; 0 bytes @ 0x0
  3065                           
  3066  0020                     ??_LedPointSelect:	
  3067                           ; 0 bytes @ 0x0
  3068                           
  3069  0020                     ??_Flash_Memory_Unlock:	
  3070                           ; 0 bytes @ 0x0
  3071                           
  3072  0020                     ??_Flash_Memory_Erasing:	
  3073                           ; 0 bytes @ 0x0
  3074                           
  3075  0020                     ??_setMemory_Modify:	
  3076                           ; 0 bytes @ 0x0
  3077                           
  3078  0020                     ??_setMemory_LoopSave:	
  3079                           ; 0 bytes @ 0x0
  3080                           
  3081  0020                     ??_WDT_Main:	
  3082                           ; 0 bytes @ 0x0
  3083                           
  3084  0020                     ??_Temp_Initialization:	
  3085                           ; 0 bytes @ 0x0
  3086                           
  3087  0020                     ??_setRF_Learn:	
  3088                           ; 0 bytes @ 0x0
  3089                           
  3090  0020                     ??_TouchPower:	
  3091                           ; 0 bytes @ 0x0
  3092                           
  3093  0020                     ??_SwPointSelect:	
  3094                           ; 0 bytes @ 0x0
  3095                           
  3096  0020                     ?___bmul:	
  3097                           ; 0 bytes @ 0x0
  3098                           
  3099  0020                     ?_getBuz_GO:	
  3100                           ; 1 bytes @ 0x0
  3101                           
  3102  0020                     ?_getAD:	
  3103                           ; 2 bytes @ 0x0
  3104                           
  3105  0020                     ?___awdiv:	
  3106                           ; 2 bytes @ 0x0
  3107                           
  3108  0020                     ?___ftpack:	
  3109                           ; 2 bytes @ 0x0
  3110                           
  3111  0020                     getDimmer_LoadOK@status:	
  3112                           ; 3 bytes @ 0x0
  3113                           
  3114  0020                     setDimmerLights_Line@lights:	
  3115                           ; 1 bytes @ 0x0
  3116                           
  3117  0020                     getAD@adcon1:	
  3118                           ; 1 bytes @ 0x0
  3119                           
  3120  0020                     setMemory_Data@data:	
  3121                           ; 1 bytes @ 0x0
  3122                           
  3123  0020                     getLoad_OK@ok:	
  3124                           ; 1 bytes @ 0x0
  3125                           
  3126  0020                     setRF_DimmerLights@on:	
  3127                           ; 1 bytes @ 0x0
  3128                           
  3129  0020                     getMain_Lights_Count@count:	
  3130                           ; 1 bytes @ 0x0
  3131                           
  3132  0020                     ___bmul@multiplicand:	
  3133                           ; 1 bytes @ 0x0
  3134                           
  3135  0020                     DelayTime_1us@count:	
  3136                           ; 1 bytes @ 0x0
  3137                           
  3138  0020                     ___awdiv@divisor:	
  3139                           ; 2 bytes @ 0x0
  3140                           
  3141  0020                     ___ftpack@arg:	
  3142                           ; 2 bytes @ 0x0
  3143                           
  3144                           
  3145                           ; 3 bytes @ 0x0
  3146  0020                     	ds	1
  3147  0021                     ??_setRF_DimmerLights:	
  3148  0021                     ??_setMemory_Data:	
  3149                           ; 0 bytes @ 0x1
  3150                           
  3151  0021                     ??_getMain_LoadOK:	
  3152                           ; 0 bytes @ 0x1
  3153                           
  3154  0021                     ??_Mcu_Initialization:	
  3155                           ; 0 bytes @ 0x1
  3156                           
  3157  0021                     ??_RF_Initialization:	
  3158                           ; 0 bytes @ 0x1
  3159                           
  3160  0021                     ??___bmul:	
  3161                           ; 0 bytes @ 0x1
  3162                           
  3163  0021                     CC2500_WriteByte@loop_a:	
  3164                           ; 0 bytes @ 0x1
  3165                           
  3166  0021                     DelayOffPointSelect@sw:	
  3167                           ; 1 bytes @ 0x1
  3168                           
  3169  0021                     DimmerLightsPointSelect@lights:	
  3170                           ; 1 bytes @ 0x1
  3171                           
  3172  0021                     getAll_DimmerLights_AdjGO@adjgo:	
  3173                           ; 1 bytes @ 0x1
  3174                           
  3175  0021                     getDimmerLights_Line@line:	
  3176                           ; 1 bytes @ 0x1
  3177                           
  3178  0021                     LedPointSelect@led:	
  3179                           ; 1 bytes @ 0x1
  3180                           
  3181  0021                     Flash_Memory_Read@i:	
  3182                           ; 1 bytes @ 0x1
  3183                           
  3184  0021                     Flash_Memory_Write@i:	
  3185                           ; 1 bytes @ 0x1
  3186                           
  3187  0021                     setMemory_Modify@command:	
  3188                           ; 1 bytes @ 0x1
  3189                           
  3190  0021                     setMemory_LoopSave@command:	
  3191                           ; 1 bytes @ 0x1
  3192                           
  3193  0021                     setLoad_AH_AL_Restore@i:	
  3194                           ; 1 bytes @ 0x1
  3195                           
  3196  0021                     setRF_Learn@command:	
  3197                           ; 1 bytes @ 0x1
  3198                           
  3199  0021                     getRF_KeyStatus@key:	
  3200                           ; 1 bytes @ 0x1
  3201                           
  3202  0021                     SwPointSelect@sw:	
  3203                           ; 1 bytes @ 0x1
  3204                           
  3205  0021                     _getSw_KeyStatus$6347:	
  3206                           ; 1 bytes @ 0x1
  3207                           
  3208  0021                     getMain_Lights_Count@status3:	
  3209                           ; 1 bytes @ 0x1
  3210                           
  3211  0021                     _getMain_All_Error_Status$7094:	
  3212                           ; 1 bytes @ 0x1
  3213                           
  3214                           
  3215                           ; 2 bytes @ 0x1
  3216  0021                     	ds	1
  3217  0022                     ??_CC2500_WriteCommand:	
  3218  0022                     ??_DelayTime_1us:	
  3219                           ; 0 bytes @ 0x2
  3220                           
  3221  0022                     ?_CC2500_WriteREG:	
  3222                           ; 0 bytes @ 0x2
  3223                           
  3224  0022                     ??_DlyOff_Initialization:	
  3225                           ; 0 bytes @ 0x2
  3226                           
  3227  0022                     ??_setDimmerLights_Initialization:	
  3228                           ; 0 bytes @ 0x2
  3229                           
  3230  0022                     ?_setDimmerLights_Trigger:	
  3231                           ; 0 bytes @ 0x2
  3232                           
  3233  0022                     ?_setDimmerLights_TriggerAdj:	
  3234                           ; 0 bytes @ 0x2
  3235                           
  3236  0022                     ?_setLED:	
  3237                           ; 0 bytes @ 0x2
  3238                           
  3239  0022                     ??_setLED_Main:	
  3240                           ; 0 bytes @ 0x2
  3241                           
  3242  0022                     ??_getBuz_GO:	
  3243                           ; 0 bytes @ 0x2
  3244                           
  3245  0022                     ??_getDelayOff_GO:	
  3246                           ; 0 bytes @ 0x2
  3247                           
  3248  0022                     ??_getDimmerLights_Status:	
  3249                           ; 0 bytes @ 0x2
  3250                           
  3251  0022                     ??_Load_Initialization:	
  3252                           ; 0 bytes @ 0x2
  3253                           
  3254  0022                     CC2500_WriteREG@value:	
  3255                           ; 0 bytes @ 0x2
  3256                           
  3257  0022                     DlyOff_Initialization@sw:	
  3258                           ; 1 bytes @ 0x2
  3259                           
  3260  0022                     getDelayOff_GO@sw:	
  3261                           ; 1 bytes @ 0x2
  3262                           
  3263  0022                     getDimmerLights_Status@lights:	
  3264                           ; 1 bytes @ 0x2
  3265                           
  3266  0022                     _getAll_DimmerLights_AdjGO$2563:	
  3267                           ; 1 bytes @ 0x2
  3268                           
  3269  0022                     setDimmerLights_Trigger@command:	
  3270                           ; 1 bytes @ 0x2
  3271                           
  3272  0022                     setDimmerLights_TriggerAdj@command:	
  3273                           ; 1 bytes @ 0x2
  3274                           
  3275  0022                     setLED@command:	
  3276                           ; 1 bytes @ 0x2
  3277                           
  3278  0022                     Flash_Memory_Read@address:	
  3279                           ; 1 bytes @ 0x2
  3280                           
  3281  0022                     setMemory_Data@address:	
  3282                           ; 1 bytes @ 0x2
  3283                           
  3284  0022                     _getRF_KeyStatus$5270:	
  3285                           ; 1 bytes @ 0x2
  3286                           
  3287  0022                     _getSw_KeyStatus$6348:	
  3288                           ; 1 bytes @ 0x2
  3289                           
  3290  0022                     getMain_Lights_Count@status1:	
  3291                           ; 1 bytes @ 0x2
  3292                           
  3293  0022                     getMain_LoadOK@ok:	
  3294                           ; 1 bytes @ 0x2
  3295                           
  3296  0022                     ___bmul@product:	
  3297                           ; 1 bytes @ 0x2
  3298                           
  3299  0022                     DelayTime_1us@i:	
  3300                           ; 1 bytes @ 0x2
  3301                           
  3302  0022                     ___awdiv@dividend:	
  3303                           ; 2 bytes @ 0x2
  3304                           
  3305                           
  3306                           ; 2 bytes @ 0x2
  3307  0022                     	ds	1
  3308  0023                     ??_CC2500_WriteREG:	
  3309  0023                     ??_setDimmerLights_Trigger:	
  3310                           ; 0 bytes @ 0x3
  3311                           
  3312  0023                     ??_setDimmerLights_TriggerAdj:	
  3313                           ; 0 bytes @ 0x3
  3314                           
  3315  0023                     ??_setLED:	
  3316                           ; 0 bytes @ 0x3
  3317                           
  3318  0023                     ??_DelayOff_Initialization:	
  3319                           ; 0 bytes @ 0x3
  3320                           
  3321  0023                     ??_getAD:	
  3322                           ; 0 bytes @ 0x3
  3323                           
  3324  0023                     CC2500_WriteCommand@command:	
  3325                           ; 0 bytes @ 0x3
  3326                           
  3327  0023                     getDelayOff_GO@go:	
  3328                           ; 1 bytes @ 0x3
  3329                           
  3330  0023                     setDimmerLights_Initialization@lights:	
  3331                           ; 1 bytes @ 0x3
  3332                           
  3333  0023                     getDimmerLights_Status@status:	
  3334                           ; 1 bytes @ 0x3
  3335                           
  3336  0023                     setLED@led:	
  3337                           ; 1 bytes @ 0x3
  3338                           
  3339  0023                     getAD@adcon0:	
  3340                           ; 1 bytes @ 0x3
  3341                           
  3342  0023                     Flash_Memory_Read@ret:	
  3343                           ; 1 bytes @ 0x3
  3344                           
  3345  0023                     setRF_DimmerLights@status:	
  3346                           ; 1 bytes @ 0x3
  3347                           
  3348  0023                     getSw_KeyStatus@status:	
  3349                           ; 1 bytes @ 0x3
  3350                           
  3351  0023                     getMain_Lights_Count@status2:	
  3352                           ; 1 bytes @ 0x3
  3353                           
  3354  0023                     ___bmul@multiplier:	
  3355                           ; 1 bytes @ 0x3
  3356                           
  3357  0023                     ___ftpack@exp:	
  3358                           ; 1 bytes @ 0x3
  3359                           
  3360  0023                     _getMain_All_Error_Status$7095:	
  3361                           ; 1 bytes @ 0x3
  3362                           
  3363                           
  3364                           ; 2 bytes @ 0x3
  3365  0023                     	ds	1
  3366  0024                     ??_CC2500_ClearTXFIFO:	
  3367  0024                     ??_CC2500_ClearRXFIFO:	
  3368                           ; 0 bytes @ 0x4
  3369                           
  3370  0024                     ??_CC2500_SIDLEMode:	
  3371                           ; 0 bytes @ 0x4
  3372                           
  3373  0024                     ??_DelayTimejudge:	
  3374                           ; 0 bytes @ 0x4
  3375                           
  3376  0024                     ??_getMain_LightsStatus:	
  3377                           ; 0 bytes @ 0x4
  3378                           
  3379  0024                     ??_setLED_Initialization:	
  3380                           ; 0 bytes @ 0x4
  3381                           
  3382  0024                     ??_Flash_Memory_Modify:	
  3383                           ; 0 bytes @ 0x4
  3384                           
  3385  0024                     ??_RF_RxDisable:	
  3386                           ; 0 bytes @ 0x4
  3387                           
  3388  0024                     ??_setSw_Initialization:	
  3389                           ; 0 bytes @ 0x4
  3390                           
  3391  0024                     ??_CC2500_TxData:	
  3392                           ; 0 bytes @ 0x4
  3393                           
  3394  0024                     ??_DimmerLights_Initialization:	
  3395                           ; 0 bytes @ 0x4
  3396                           
  3397  0024                     ??_getLoad_AD:	
  3398                           ; 0 bytes @ 0x4
  3399                           
  3400  0024                     ??_getTemp_AD:	
  3401                           ; 0 bytes @ 0x4
  3402                           
  3403  0024                     ??___awdiv:	
  3404                           ; 0 bytes @ 0x4
  3405                           
  3406  0024                     CC2500_WriteREG@w_addr:	
  3407                           ; 0 bytes @ 0x4
  3408                           
  3409  0024                     setDimmerLights_Trigger@lights:	
  3410                           ; 1 bytes @ 0x4
  3411                           
  3412  0024                     setDimmerLights_TriggerAdj@lights:	
  3413                           ; 1 bytes @ 0x4
  3414                           
  3415  0024                     setLED_Initialization@led:	
  3416                           ; 1 bytes @ 0x4
  3417                           
  3418  0024                     setLED_Main@led:	
  3419                           ; 1 bytes @ 0x4
  3420                           
  3421  0024                     setRF_DimmerLights@lights:	
  3422                           ; 1 bytes @ 0x4
  3423                           
  3424  0024                     setSw_Initialization@sw:	
  3425                           ; 1 bytes @ 0x4
  3426                           
  3427  0024                     getSw_KeyStatus@sw:	
  3428                           ; 1 bytes @ 0x4
  3429                           
  3430  0024                     ___ftpack@sign:	
  3431                           ; 1 bytes @ 0x4
  3432                           
  3433  0024                     getBuz_GO@i:	
  3434                           ; 1 bytes @ 0x4
  3435                           
  3436  0024                     DelayTime_1us@j:	
  3437                           ; 2 bytes @ 0x4
  3438                           
  3439                           
  3440                           ; 2 bytes @ 0x4
  3441  0024                     	ds	1
  3442  0025                     ??_CC2500_InitSetREG:	
  3443  0025                     ??_CC2500_InitPATable:	
  3444                           ; 0 bytes @ 0x5
  3445                           
  3446  0025                     ??___ftpack:	
  3447                           ; 0 bytes @ 0x5
  3448                           
  3449  0025                     ??_setDimmerLights_AdjControl:	
  3450                           ; 0 bytes @ 0x5
  3451                           
  3452  0025                     ??_LED_Initialization:	
  3453                           ; 0 bytes @ 0x5
  3454                           
  3455  0025                     ??_LED_Main:	
  3456                           ; 0 bytes @ 0x5
  3457                           
  3458  0025                     ??_Switch_Initialization:	
  3459                           ; 0 bytes @ 0x5
  3460                           
  3461  0025                     CC2500_TxData@loop_e:	
  3462                           ; 0 bytes @ 0x5
  3463                           
  3464  0025                     Flash_Memory_Modify@i:	
  3465                           ; 1 bytes @ 0x5
  3466                           
  3467  0025                     getTemp_AD@channel:	
  3468                           ; 1 bytes @ 0x5
  3469                           
  3470  0025                     getMain_LightsStatus@count:	
  3471                           ; 1 bytes @ 0x5
  3472                           
  3473  0025                     getMain_All_Error_Status@command:	
  3474                           ; 1 bytes @ 0x5
  3475                           
  3476  0025                     ___awdiv@counter:	
  3477                           ; 1 bytes @ 0x5
  3478                           
  3479                           
  3480                           ; 1 bytes @ 0x5
  3481  0025                     	ds	1
  3482  0026                     ??_CC2500_PowerRST:	
  3483  0026                     ??_CC2500_FrequencyCabr:	
  3484                           ; 0 bytes @ 0x6
  3485                           
  3486  0026                     CC2500_InitSetREG@temp1:	
  3487                           ; 0 bytes @ 0x6
  3488                           
  3489  0026                     CC2500_InitPATable@temp:	
  3490                           ; 1 bytes @ 0x6
  3491                           
  3492  0026                     DelayTimejudge@i:	
  3493                           ; 1 bytes @ 0x6
  3494                           
  3495  0026                     setDimmerLights_AdjControl@idle:	
  3496                           ; 1 bytes @ 0x6
  3497                           
  3498  0026                     getLoad_AD@channel:	
  3499                           ; 1 bytes @ 0x6
  3500                           
  3501  0026                     getMain_All_Error_Status@status:	
  3502                           ; 1 bytes @ 0x6
  3503                           
  3504  0026                     ___awdiv@sign:	
  3505                           ; 1 bytes @ 0x6
  3506                           
  3507  0026                     getMain_LightsStatus@i:	
  3508                           ; 1 bytes @ 0x6
  3509                           
  3510                           
  3511                           ; 2 bytes @ 0x6
  3512  0026                     	ds	1
  3513  0027                     CC2500_InitSetREG@temp2:	
  3514  0027                     CC2500_InitPATable@loop_d:	
  3515                           ; 1 bytes @ 0x7
  3516                           
  3517  0027                     DelayTimejudge@j:	
  3518                           ; 1 bytes @ 0x7
  3519                           
  3520  0027                     _setDimmerLights_AdjControl$2584:	
  3521                           ; 1 bytes @ 0x7
  3522                           
  3523  0027                     getLoad_AD@k:	
  3524                           ; 1 bytes @ 0x7
  3525                           
  3526  0027                     ___awdiv@quotient:	
  3527                           ; 1 bytes @ 0x7
  3528                           
  3529                           
  3530                           ; 2 bytes @ 0x7
  3531  0027                     	ds	1
  3532  0028                     ?___awtoft:	
  3533  0028                     CC2500_InitSetREG@loop_c:	
  3534                           ; 3 bytes @ 0x8
  3535                           
  3536  0028                     DelayTimejudge@k:	
  3537                           ; 1 bytes @ 0x8
  3538                           
  3539  0028                     setDimmerLights_AdjControl@sw:	
  3540                           ; 1 bytes @ 0x8
  3541                           
  3542  0028                     getLoad_AD@j:	
  3543                           ; 1 bytes @ 0x8
  3544                           
  3545  0028                     getMain_LightsStatus@status:	
  3546                           ; 1 bytes @ 0x8
  3547                           
  3548  0028                     ___awtoft@c:	
  3549                           ; 1 bytes @ 0x8
  3550                           
  3551                           
  3552                           ; 2 bytes @ 0x8
  3553  0028                     	ds	1
  3554  0029                     ?_setBuz:	
  3555  0029                     ??_CC2500_PowerOnInitial:	
  3556                           ; 0 bytes @ 0x9
  3557                           
  3558  0029                     ??_Flash_Memory_Main:	
  3559                           ; 0 bytes @ 0x9
  3560                           
  3561  0029                     ??_Load_Main:	
  3562                           ; 0 bytes @ 0x9
  3563                           
  3564  0029                     DelayTimejudge@value:	
  3565                           ; 0 bytes @ 0x9
  3566                           
  3567  0029                     getLoad_AD@i:	
  3568                           ; 1 bytes @ 0x9
  3569                           
  3570  0029                     setBuz@time:	
  3571                           ; 1 bytes @ 0x9
  3572                           
  3573                           
  3574                           ; 2 bytes @ 0x9
  3575  0029                     	ds	1
  3576  002A                     ?_setDelayOff_GO:	
  3577  002A                     setDelayOff_GO@command:	
  3578                           ; 0 bytes @ 0xA
  3579                           
  3580                           
  3581                           ; 1 bytes @ 0xA
  3582  002A                     	ds	1
  3583  002B                     ??_setBuz:	
  3584  002B                     ??___awtoft:	
  3585                           ; 0 bytes @ 0xB
  3586                           
  3587  002B                     setDelayOff_GO@value:	
  3588                           ; 0 bytes @ 0xB
  3589                           
  3590  002B                     Load_Main@j:	
  3591                           ; 1 bytes @ 0xB
  3592                           
  3593                           
  3594                           ; 1 bytes @ 0xB
  3595  002B                     	ds	1
  3596  002C                     ??_setDelayOff_GO:	
  3597  002C                     setBuz@count:	
  3598                           ; 0 bytes @ 0xC
  3599                           
  3600  002C                     Load_Main@adjgo:	
  3601                           ; 1 bytes @ 0xC
  3602                           
  3603                           
  3604                           ; 1 bytes @ 0xC
  3605  002C                     	ds	1
  3606  002D                     ??_setTemp_Main:	
  3607  002D                     ??_setLog_Code:	
  3608                           ; 0 bytes @ 0xD
  3609                           
  3610  002D                     ??_my_MainTimer:	
  3611                           ; 0 bytes @ 0xD
  3612                           
  3613  002D                     ??_setDimmerLights_SwOn:	
  3614                           ; 0 bytes @ 0xD
  3615                           
  3616  002D                     _Load_Main$3860:	
  3617                           ; 0 bytes @ 0xD
  3618                           
  3619  002D                     ___awtoft@sign:	
  3620                           ; 1 bytes @ 0xD
  3621                           
  3622                           
  3623                           ; 1 bytes @ 0xD
  3624  002D                     	ds	1
  3625  002E                     ?___ftdiv:	
  3626  002E                     ?___ftmul:	
  3627                           ; 3 bytes @ 0xE
  3628                           
  3629  002E                     setDelayOff_GO@sw:	
  3630                           ; 3 bytes @ 0xE
  3631                           
  3632  002E                     setDimmerLights_SwOn@idle:	
  3633                           ; 1 bytes @ 0xE
  3634                           
  3635  002E                     Load_Main@error:	
  3636                           ; 1 bytes @ 0xE
  3637                           
  3638  002E                     ___ftdiv@f2:	
  3639                           ; 1 bytes @ 0xE
  3640                           
  3641  002E                     ___ftmul@f1:	
  3642                           ; 3 bytes @ 0xE
  3643                           
  3644                           
  3645                           ; 3 bytes @ 0xE
  3646  002E                     	ds	1
  3647  002F                     ??_setDimmerLights_SwOff:	
  3648  002F                     ??_Temp_Main:	
  3649                           ; 0 bytes @ 0xF
  3650                           
  3651  002F                     setDimmerLights_SwOn@sw:	
  3652                           ; 0 bytes @ 0xF
  3653                           
  3654  002F                     setDimmerLights_SwOff@command:	
  3655                           ; 1 bytes @ 0xF
  3656                           
  3657  002F                     Load_Main@i:	
  3658                           ; 1 bytes @ 0xF
  3659                           
  3660                           
  3661                           ; 1 bytes @ 0xF
  3662  002F                     	ds	1
  3663  0030                     setDimmerLights_SwOff@sw:	
  3664                           
  3665                           ; 1 bytes @ 0x10
  3666  0030                     	ds	1
  3667  0031                     ??_setDimmerLights_ErrorClose:	
  3668  0031                     ??_setRFSW_Control:	
  3669                           ; 0 bytes @ 0x11
  3670                           
  3671  0031                     ??_setSw_Main:	
  3672                           ; 0 bytes @ 0x11
  3673                           
  3674  0031                     ___ftdiv@f1:	
  3675                           ; 0 bytes @ 0x11
  3676                           
  3677  0031                     ___ftmul@f2:	
  3678                           ; 3 bytes @ 0x11
  3679                           
  3680                           
  3681                           ; 3 bytes @ 0x11
  3682  0031                     	ds	1
  3683  0032                     setDimmerLights_ErrorClose@count:	
  3684  0032                     setRFSW_Control@status:	
  3685                           ; 1 bytes @ 0x12
  3686                           
  3687                           
  3688                           ; 1 bytes @ 0x12
  3689  0032                     	ds	1
  3690  0033                     setDimmerLights_ErrorClose@lights:	
  3691  0033                     setRFSW_Control@sw:	
  3692                           ; 1 bytes @ 0x13
  3693                           
  3694  0033                     setSw_Main@sw:	
  3695                           ; 1 bytes @ 0x13
  3696                           
  3697                           
  3698                           ; 1 bytes @ 0x13
  3699  0033                     	ds	1
  3700  0034                     ??___ftdiv:	
  3701  0034                     ??___ftmul:	
  3702                           ; 0 bytes @ 0x14
  3703                           
  3704  0034                     setDimmerLights_ErrorClose@i:	
  3705                           ; 0 bytes @ 0x14
  3706                           
  3707                           
  3708                           ; 2 bytes @ 0x14
  3709  0034                     	ds	2
  3710  0036                     ??_DlyOff_Main:	
  3711  0036                     ??_setMain_Exception:	
  3712                           ; 0 bytes @ 0x16
  3713                           
  3714                           
  3715                           ; 0 bytes @ 0x16
  3716  0036                     	ds	2
  3717  0038                     DlyOff_Main@sw:	
  3718  0038                     setMain_Exception@buz:	
  3719                           ; 1 bytes @ 0x18
  3720                           
  3721  0038                     ___ftdiv@cntr:	
  3722                           ; 1 bytes @ 0x18
  3723                           
  3724  0038                     ___ftmul@exp:	
  3725                           ; 1 bytes @ 0x18
  3726                           
  3727                           
  3728                           ; 1 bytes @ 0x18
  3729  0038                     	ds	1
  3730  0039                     ??_DelayOff_Main:	
  3731  0039                     _setMain_Exception$7084:	
  3732                           ; 0 bytes @ 0x19
  3733                           
  3734  0039                     ___ftdiv@f3:	
  3735                           ; 2 bytes @ 0x19
  3736                           
  3737  0039                     ___ftmul@f3_as_product:	
  3738                           ; 3 bytes @ 0x19
  3739                           
  3740                           
  3741                           ; 3 bytes @ 0x19
  3742  0039                     	ds	2
  3743  003B                     setMain_Exception@status:	
  3744                           
  3745                           ; 1 bytes @ 0x1B
  3746  003B                     	ds	1
  3747  003C                     setMain_Exception@command:	
  3748  003C                     ___ftdiv@exp:	
  3749                           ; 1 bytes @ 0x1C
  3750                           
  3751  003C                     ___ftmul@cntr:	
  3752                           ; 1 bytes @ 0x1C
  3753                           
  3754                           
  3755                           ; 1 bytes @ 0x1C
  3756  003C                     	ds	1
  3757  003D                     ??_Switch_Main:	
  3758  003D                     ___ftdiv@sign:	
  3759                           ; 0 bytes @ 0x1D
  3760                           
  3761  003D                     ___ftmul@sign:	
  3762                           ; 1 bytes @ 0x1D
  3763                           
  3764                           
  3765                           ; 1 bytes @ 0x1D
  3766  003D                     	ds	1
  3767  003E                     ?___ftneg:	
  3768  003E                     Switch_Main@error:	
  3769                           ; 3 bytes @ 0x1E
  3770                           
  3771  003E                     ___ftneg@f1:	
  3772                           ; 1 bytes @ 0x1E
  3773                           
  3774                           
  3775                           ; 3 bytes @ 0x1E
  3776  003E                     	ds	3
  3777  0041                     ??___ftneg:	
  3778  0041                     ?___ftadd:	
  3779                           ; 0 bytes @ 0x21
  3780                           
  3781  0041                     ___ftadd@f1:	
  3782                           ; 3 bytes @ 0x21
  3783                           
  3784                           
  3785                           ; 3 bytes @ 0x21
  3786  0041                     	ds	3
  3787  0044                     ___ftadd@f2:	
  3788                           
  3789                           ; 3 bytes @ 0x24
  3790  0044                     	ds	3
  3791  0047                     ??___ftadd:	
  3792                           
  3793                           ; 0 bytes @ 0x27
  3794  0047                     	ds	4
  3795  004B                     ___ftadd@sign:	
  3796                           
  3797                           ; 1 bytes @ 0x2B
  3798  004B                     	ds	1
  3799  004C                     ___ftadd@exp2:	
  3800                           
  3801                           ; 1 bytes @ 0x2C
  3802  004C                     	ds	1
  3803  004D                     ___ftadd@exp1:	
  3804                           
  3805                           ; 1 bytes @ 0x2D
  3806  004D                     	ds	1
  3807  004E                     ?___fttol:	
  3808  004E                     ___fttol@f1:	
  3809                           ; 4 bytes @ 0x2E
  3810                           
  3811                           
  3812                           ; 3 bytes @ 0x2E
  3813  004E                     	ds	4
  3814  0052                     ??___fttol:	
  3815                           
  3816                           ; 0 bytes @ 0x32
  3817  0052                     	ds	4
  3818  0056                     ___fttol@sign1:	
  3819                           
  3820                           ; 1 bytes @ 0x36
  3821  0056                     	ds	1
  3822  0057                     ___fttol@lval:	
  3823                           
  3824                           ; 4 bytes @ 0x37
  3825  0057                     	ds	4
  3826  005B                     ___fttol@exp1:	
  3827                           
  3828                           ; 1 bytes @ 0x3B
  3829  005B                     	ds	1
  3830  005C                     ??_setPercentValue:	
  3831  005C                     ??_getPercentValue:	
  3832                           ; 0 bytes @ 0x3C
  3833                           
  3834                           
  3835                           ; 0 bytes @ 0x3C
  3836  005C                     	ds	2
  3837  005E                     getPercentValue@value:	
  3838  005E                     setPercentValue@value:	
  3839                           ; 1 bytes @ 0x3E
  3840                           
  3841                           
  3842                           ; 1 bytes @ 0x3E
  3843  005E                     	ds	1
  3844  005F                     getPercentValue@i:	
  3845  005F                     setPercentValue@i:	
  3846                           ; 3 bytes @ 0x3F
  3847                           
  3848                           
  3849                           ; 3 bytes @ 0x3F
  3850  005F                     	ds	3
  3851  0062                     ?_setDimmerLights:	
  3852  0062                     ?_setDimmerLights_Adj:	
  3853                           ; 0 bytes @ 0x42
  3854                           
  3855  0062                     ??_setDimmerLights_AdjRF:	
  3856                           ; 0 bytes @ 0x42
  3857                           
  3858  0062                     ??_Flash_Memory_Initialization:	
  3859                           ; 0 bytes @ 0x42
  3860                           
  3861  0062                     setDimmerLights@status:	
  3862                           ; 0 bytes @ 0x42
  3863                           
  3864  0062                     setDimmerLights_Adj@status:	
  3865                           ; 1 bytes @ 0x42
  3866                           
  3867                           
  3868                           ; 1 bytes @ 0x42
  3869  0062                     	ds	1
  3870  0063                     ??_setDimmerLights:	
  3871  0063                     ??_setDimmerLights_Adj:	
  3872                           ; 0 bytes @ 0x43
  3873                           
  3874  0063                     setDimmerLights_AdjRF@lights:	
  3875                           ; 0 bytes @ 0x43
  3876                           
  3877  0063                     Flash_Memory_Initialization@i:	
  3878                           ; 1 bytes @ 0x43
  3879                           
  3880                           
  3881                           ; 1 bytes @ 0x43
  3882  0063                     	ds	1
  3883  0064                     ??_setRF_DimmerValue:	
  3884                           
  3885                           ; 0 bytes @ 0x44
  3886  0064                     	ds	1
  3887  0065                     setDimmerLights@lights:	
  3888  0065                     setDimmerLights_Adj@lights:	
  3889                           ; 1 bytes @ 0x45
  3890                           
  3891                           
  3892                           ; 1 bytes @ 0x45
  3893  0065                     	ds	1
  3894  0066                     ??_setDimmerLights_Main:	
  3895  0066                     setDimmerLights_Main@lights:	
  3896                           ; 0 bytes @ 0x46
  3897                           
  3898  0066                     setRF_DimmerValue@lights:	
  3899                           ; 1 bytes @ 0x46
  3900                           
  3901                           
  3902                           ; 1 bytes @ 0x46
  3903  0066                     	ds	1
  3904  0067                     ??_setRFSW_AdjControl:	
  3905  0067                     ??_DimmerLights_Main:	
  3906                           ; 0 bytes @ 0x47
  3907                           
  3908                           
  3909                           ; 0 bytes @ 0x47
  3910  0067                     	ds	2
  3911  0069                     setRFSW_AdjControl@status:	
  3912  0069                     _DimmerLights_Main$2501:	
  3913                           ; 1 bytes @ 0x49
  3914                           
  3915                           
  3916                           ; 2 bytes @ 0x49
  3917  0069                     	ds	1
  3918  006A                     setRFSW_AdjControl@sw:	
  3919                           
  3920                           ; 1 bytes @ 0x4A
  3921  006A                     	ds	1
  3922  006B                     ??_getRxData:	
  3923  006B                     ??_setControl_Lights_Table:	
  3924                           ; 0 bytes @ 0x4B
  3925                           
  3926                           
  3927                           ; 0 bytes @ 0x4B
  3928  006B                     	ds	1
  3929  006C                     getRxData@error:	
  3930                           
  3931                           ; 1 bytes @ 0x4C
  3932  006C                     	ds	1
  3933  006D                     ??_setRF_Main:	
  3934                           
  3935                           ; 0 bytes @ 0x4D
  3936  006D                     	ds	1
  3937  006E                     ??_RF_Main:	
  3938  006E                     ??_main:	
  3939                           ; 0 bytes @ 0x4E
  3940                           
  3941                           
  3942                           	psect	maintext
  3943  16F6                     __pmaintext:	
  3944                           ; 0 bytes @ 0x4E
  3945 ;;
  3946 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3947 ;;
  3948 ;; *************** function _main *****************
  3949 ;; Defined at:
  3950 ;;		line 7 in file "../src/main_B1.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;  argc            2    3[BANK1 ] int 
  3953 ;;  argv            2    5[BANK1 ] PTR PTR unsigned char 
  3954 ;; Auto vars:     Size  Location     Type
  3955 ;;		None
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  2    3[BANK1 ] int 
  3958 ;; Registers used:
  3959 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3960 ;; Tracked objects:
  3961 ;;		On entry : 17F/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3965 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3968 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3969 ;;Total ram usage:        4 bytes
  3970 ;; Hardware stack levels required when called:   15
  3971 ;; This function calls:
  3972 ;;		_Buzzer_Initialization
  3973 ;;		_Buzzer_Main
  3974 ;;		_CC2500_PowerOnInitial
  3975 ;;		_DelayOff_Initialization
  3976 ;;		_DelayOff_Main
  3977 ;;		_DimmerLights_Initialization
  3978 ;;		_DimmerLights_Main
  3979 ;;		_Flash_Memory_Initialization
  3980 ;;		_Flash_Memory_Main
  3981 ;;		_LED_Initialization
  3982 ;;		_LED_Main
  3983 ;;		_Load_Initialization
  3984 ;;		_Load_Main
  3985 ;;		_Mcu_Initialization
  3986 ;;		_RF_Initialization
  3987 ;;		_RF_Main
  3988 ;;		_Switch_Initialization
  3989 ;;		_Switch_Main
  3990 ;;		_Temp_Initialization
  3991 ;;		_Temp_Main
  3992 ;;		_WDT_Main
  3993 ;;		_getLoad_AD
  3994 ;;		_getTemp_AD
  3995 ;;		_myMain_Initialization
  3996 ;;		_my_MainTimer
  3997 ;; This function is called by:
  3998 ;;		Startup code after reset
  3999 ;; This function uses a non-reentrant model
  4000 ;;
  4001                           
  4002                           
  4003                           ;psect for function _main
  4004  16F6                     _main:	
  4005                           
  4006                           ;main_B1.c: 8: myMain_Initialization();
  4007                           
  4008                           ;incstack = 0
  4009                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4010  16F6  319C  24FE  3196   	fcall	_myMain_Initialization
  4011                           
  4012                           ;main_B1.c: 9: Mcu_Initialization();
  4013  16F9  319D  2595  3196   	fcall	_Mcu_Initialization
  4014                           
  4015                           ;main_B1.c: 10: Flash_Memory_Initialization();
  4016  16FC  3185  2540  3196   	fcall	_Flash_Memory_Initialization
  4017                           
  4018                           ;main_B1.c: 11: LED_Initialization();
  4019  16FF  319C  2495  3196   	fcall	_LED_Initialization
  4020                           
  4021                           ;main_B1.c: 12: Buzzer_Initialization();
  4022  1702  319B  23D7  3196   	fcall	_Buzzer_Initialization
  4023                           
  4024                           ;main_B1.c: 14: ;;
  4025                           ;main_B1.c: 15: Temp_Initialization();
  4026  1705  319B  23E0  3196   	fcall	_Temp_Initialization
  4027                           
  4028                           ;main_B1.c: 16: Load_Initialization();
  4029  1708  319B  23FB  3196   	fcall	_Load_Initialization
  4030                           
  4031                           ;main_B1.c: 17: ;;
  4032                           ;main_B1.c: 18: DelayOff_Initialization();
  4033  170B  319C  2421  3196   	fcall	_DelayOff_Initialization
  4034                           
  4035                           ;main_B1.c: 20: DimmerLights_Initialization();
  4036  170E  319E  26AA  3196   	fcall	_DimmerLights_Initialization
  4037                           
  4038                           ;main_B1.c: 21: ;;
  4039                           ;main_B1.c: 22: ;;
  4040                           ;main_B1.c: 23: ;;
  4041                           ;main_B1.c: 24: Switch_Initialization();
  4042  1711  319C  24C5  3196   	fcall	_Switch_Initialization
  4043                           
  4044                           ;main_B1.c: 25: RF_Initialization();
  4045  1714  319B  23DA  3196   	fcall	_RF_Initialization
  4046                           
  4047                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  4048  1717  319E  266A  3196   	fcall	_CC2500_PowerOnInitial
  4049  171A                     l8373:	
  4050                           ;main_B1.c: 27: ;;
  4051                           ;main_B1.c: 28: ;;
  4052                           ;main_B1.c: 30: while (1) {
  4053                           
  4054                           
  4055                           ;main_B1.c: 32: if (myMain.PowerON == 1) {
  4056  171A  0021               	movlb	1	; select bank1
  4057  171B  1C20               	btfss	_myMain^(0+128),0
  4058  171C  2F25               	goto	l8377
  4059                           
  4060                           ;main_B1.c: 38: getLoad_AD(0x05);
  4061  171D  3005               	movlw	5
  4062  171E  318B  23DD  3196   	fcall	_getLoad_AD
  4063                           
  4064                           ;main_B1.c: 42: getTemp_AD(0x09);
  4065  1721  3009               	movlw	9
  4066  1722  3193  2364  3196   	fcall	_getTemp_AD
  4067  1725                     l8377:	
  4068                           
  4069                           ;main_B1.c: 57: }
  4070                           ;main_B1.c: 93: if (Timer1.Timeout == 1) {
  4071  1725  0021               	movlb	1	; select bank1
  4072  1726  1C47               	btfss	_Timer1^(0+128),0
  4073  1727  2F1A               	goto	l8373
  4074                           
  4075                           ;main_B1.c: 94: Timer1.Timeout = 0;
  4076  1728  1047               	bcf	_Timer1^(0+128),0
  4077                           
  4078                           ;main_B1.c: 95: my_MainTimer();
  4079  1729  3195  256A  3196   	fcall	_my_MainTimer
  4080                           
  4081                           ;main_B1.c: 96: WDT_Main();
  4082  172C  319D  25A7  3196   	fcall	_WDT_Main
  4083                           
  4084                           ;main_B1.c: 97: ;;
  4085                           ;main_B1.c: 98: ;;
  4086                           ;main_B1.c: 99: if (myMain.PowerON == 1) {
  4087  172F  0021               	movlb	1	; select bank1
  4088  1730  1C20               	btfss	_myMain^(0+128),0
  4089  1731  2F1A               	goto	l8373
  4090                           
  4091                           ;main_B1.c: 100: Flash_Memory_Main();
  4092  1732  3192  22F8  3196   	fcall	_Flash_Memory_Main
  4093                           
  4094                           ;main_B1.c: 102: LED_Main();
  4095  1735  319C  24A1  3196   	fcall	_LED_Main
  4096                           
  4097                           ;main_B1.c: 103: Buzzer_Main();
  4098  1738  3195  2520  3196   	fcall	_Buzzer_Main
  4099                           
  4100                           ;main_B1.c: 105: ;;
  4101                           ;main_B1.c: 106: Temp_Main();
  4102  173B  319B  23E3  3196   	fcall	_Temp_Main
  4103                           
  4104                           ;main_B1.c: 107: Load_Main();
  4105  173E  3183  2306  3196   	fcall	_Load_Main
  4106                           
  4107                           ;main_B1.c: 108: ;;
  4108                           ;main_B1.c: 110: ;;
  4109                           ;main_B1.c: 111: DimmerLights_Main();
  4110  1741  3192  228F  3196   	fcall	_DimmerLights_Main
  4111                           
  4112                           ;main_B1.c: 112: Switch_Main();
  4113  1744  3190  20E1  3196   	fcall	_Switch_Main
  4114                           
  4115                           ;main_B1.c: 113: ;;
  4116                           ;main_B1.c: 114: ;;
  4117                           ;main_B1.c: 116: RF_Main();
  4118  1747  319B  23DD  3196   	fcall	_RF_Main
  4119                           
  4120                           ;main_B1.c: 117: DelayOff_Main();
  4121  174A  319C  2429  3196   	fcall	_DelayOff_Main
  4122                           
  4123                           ;main_B1.c: 118: ;;
  4124                           ;main_B1.c: 119: ;;
  4125  174D  2F1A               	goto	l8373
  4126  174E                     __end_of_main:	
  4127                           ;main_B1.c: 126: }
  4128                           ;main_B1.c: 127: }
  4129                           ;main_B1.c: 161: }
  4130                           ;main_B1.c: 162: return (0);
  4131                           ;	Return value of _main is never used
  4132                           
  4133                           
  4134                           	psect	text1
  4135  156A                     __ptext1:	
  4136 ;; *************** function _my_MainTimer *****************
  4137 ;; Defined at:
  4138 ;;		line 181 in file "../src/main_B1.c"
  4139 ;; Parameters:    Size  Location     Type
  4140 ;;		None
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;		None
  4143 ;; Return value:  Size  Location     Type
  4144 ;;		None               void
  4145 ;; Registers used:
  4146 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4147 ;; Tracked objects:
  4148 ;;		On entry : 0/0
  4149 ;;		On exit  : 0/0
  4150 ;;		Unchanged: 0/0
  4151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4156 ;;Total ram usage:        0 bytes
  4157 ;; Hardware stack levels used:    1
  4158 ;; Hardware stack levels required when called:    7
  4159 ;; This function calls:
  4160 ;;		_setBuz
  4161 ;; This function is called by:
  4162 ;;		_main
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           
  4167                           ;psect for function _my_MainTimer
  4168  156A                     _my_MainTimer:	
  4169                           
  4170                           ;main_B1.c: 183: if (myMain.PowerON == 0) {
  4171                           
  4172                           ;incstack = 0
  4173                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4174  156A  0021               	movlb	1	; select bank1
  4175  156B  1820               	btfsc	_myMain^(0+128),0
  4176  156C  2D8B               	goto	l8165
  4177                           
  4178                           ;main_B1.c: 184: myMain.PowerCount++;
  4179  156D  3001               	movlw	1
  4180  156E  07A1               	addwf	(_myMain^(0+128)+1),f
  4181  156F  3000               	movlw	0
  4182  1570  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4183                           
  4184                           ;main_B1.c: 185: if (myMain.PowerCount == 150)
  4185  1571  3001               	movlw	1
  4186  1572  3EA0               	addlw	_myMain& (0+255)
  4187  1573  0086               	movwf	6
  4188  1574  0187               	clrf	7
  4189  1575  3F40               	moviw [0]fsr1
  4190  1576  3A96               	xorlw	150
  4191  1577  1D03               	skipz
  4192  1578  2D7B               	goto	u8215
  4193  1579  3F41               	moviw [1]fsr1
  4194  157A  3A00               	xorlw	0
  4195  157B                     u8215:	
  4196  157B  1D03               	skipz
  4197  157C  0008               	return
  4198                           
  4199                           ;main_B1.c: 186: {
  4200                           ;main_B1.c: 187: myMain.PowerCount = 0;
  4201  157D  01A1               	clrf	(_myMain^(0+128)+1)
  4202  157E  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4203                           
  4204                           ;main_B1.c: 188: myMain.PowerON = 1;
  4205  157F  1420               	bsf	_myMain^(0+128),0
  4206                           
  4207                           ;main_B1.c: 193: setBuz(3, 50);
  4208  1580  3032               	movlw	50
  4209  1581  0020               	movlb	0	; select bank0
  4210  1582  00A9               	movwf	setBuz@time
  4211  1583  3000               	movlw	0
  4212  1584  00AA               	movwf	setBuz@time+1
  4213  1585  3003               	movlw	3
  4214  1586  3197  274E         	fcall	_setBuz
  4215                           
  4216                           ;main_B1.c: 194: myMain.SelfTest = 1;
  4217  1588  0021               	movlb	1	; select bank1
  4218  1589  1620               	bsf	_myMain^(0+128),4
  4219                           
  4220                           ;main_B1.c: 203: }
  4221                           ;main_B1.c: 204: } else {
  4222  158A  0008               	return
  4223  158B                     l8165:	
  4224                           
  4225                           ;main_B1.c: 205: myMain.PowerCount++;
  4226  158B  3001               	movlw	1
  4227  158C  07A1               	addwf	(_myMain^(0+128)+1),f
  4228  158D  3000               	movlw	0
  4229  158E  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4230                           
  4231                           ;main_B1.c: 206: if (myMain.PowerCount == 100) {
  4232  158F  3001               	movlw	1
  4233  1590  3EA0               	addlw	_myMain& (0+255)
  4234  1591  0086               	movwf	6
  4235  1592  0187               	clrf	7
  4236  1593  3F40               	moviw [0]fsr1
  4237  1594  3A64               	xorlw	100
  4238  1595  1D03               	skipz
  4239  1596  2D99               	goto	u8225
  4240  1597  3F41               	moviw [1]fsr1
  4241  1598  3A00               	xorlw	0
  4242  1599                     u8225:	
  4243  1599  1D03               	skipz
  4244  159A  2D9D               	goto	l8171
  4245                           
  4246                           ;main_B1.c: 207: myMain.PowerCount = 0;
  4247  159B  01A1               	clrf	(_myMain^(0+128)+1)
  4248  159C  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4249  159D                     l8171:	
  4250                           
  4251                           ;main_B1.c: 219: }
  4252                           ;main_B1.c: 221: myMain.Count1++;
  4253  159D  3001               	movlw	1
  4254  159E  07A5               	addwf	(_myMain^(0+128)+5),f
  4255  159F  3000               	movlw	0
  4256  15A0  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  4257                           
  4258                           ;main_B1.c: 222: if (myMain.Count1 == 100)
  4259  15A1  3005               	movlw	5
  4260  15A2  3EA0               	addlw	_myMain& (0+255)
  4261  15A3  0086               	movwf	6
  4262  15A4  0187               	clrf	7
  4263  15A5  3F40               	moviw [0]fsr1
  4264  15A6  3A64               	xorlw	100
  4265  15A7  1D03               	skipz
  4266  15A8  2DAB               	goto	u8235
  4267  15A9  3F41               	moviw [1]fsr1
  4268  15AA  3A00               	xorlw	0
  4269  15AB                     u8235:	
  4270  15AB  1D03               	skipz
  4271  15AC  0008               	return
  4272                           
  4273                           ;main_B1.c: 223: {
  4274                           ;main_B1.c: 224: myMain.Count1 = 0;
  4275  15AD  01A5               	clrf	(_myMain^(0+128)+5)
  4276  15AE  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4277                           
  4278                           ;main_B1.c: 236: if (myMain.Flag) {
  4279  15AF  1CA0               	btfss	_myMain^(0+128),1
  4280  15B0  2DB3               	goto	l2679
  4281                           
  4282                           ;main_B1.c: 237: myMain.Flag = 0;
  4283  15B1  10A0               	bcf	_myMain^(0+128),1
  4284                           
  4285                           ;main_B1.c: 246: } else {
  4286  15B2  0008               	return
  4287  15B3                     l2679:	
  4288                           
  4289                           ;main_B1.c: 247: myMain.Flag = 1;
  4290  15B3  14A0               	bsf	_myMain^(0+128),1
  4291  15B4  0008               	return
  4292  15B5                     __end_of_my_MainTimer:	
  4293                           
  4294                           	psect	text2
  4295  1CFE                     __ptext2:	
  4296 ;; *************** function _myMain_Initialization *****************
  4297 ;; Defined at:
  4298 ;;		line 168 in file "../src/main_B1.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;		None
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;		None
  4303 ;; Return value:  Size  Location     Type
  4304 ;;		None               void
  4305 ;; Registers used:
  4306 ;;		wreg, fsr1l, fsr1h
  4307 ;; Tracked objects:
  4308 ;;		On entry : 0/0
  4309 ;;		On exit  : 0/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4314 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4315 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4316 ;;Total ram usage:        1 bytes
  4317 ;; Hardware stack levels used:    1
  4318 ;; Hardware stack levels required when called:    5
  4319 ;; This function calls:
  4320 ;;		Nothing
  4321 ;; This function is called by:
  4322 ;;		_main
  4323 ;; This function uses a non-reentrant model
  4324 ;;
  4325                           
  4326                           
  4327                           ;psect for function _myMain_Initialization
  4328  1CFE                     _myMain_Initialization:	
  4329                           
  4330                           ;main_B1.c: 170: product = &_product;
  4331                           
  4332                           ;incstack = 0
  4333                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4334  1CFE  3045               	movlw	__product& (0+255)
  4335  1CFF  0020               	movlb	0	; select bank0
  4336  1D00  00A0               	movwf	??_myMain_Initialization
  4337  1D01  0820               	movf	??_myMain_Initialization,w
  4338  1D02  00EE               	movwf	_product
  4339                           
  4340                           ;main_B1.c: 171: product->Data[20] = 210;
  4341  1D03  30D2               	movlw	210
  4342  1D04  00A0               	movwf	??_myMain_Initialization
  4343  1D05  086E               	movf	_product,w
  4344  1D06  3E14               	addlw	20
  4345  1D07  0086               	movwf	6
  4346  1D08  3002               	movlw	2	; select bank4/5
  4347  1D09  0087               	movwf	7
  4348  1D0A  0820               	movf	??_myMain_Initialization,w
  4349  1D0B  0081               	movwf	1
  4350  1D0C  0008               	return
  4351  1D0D                     __end_of_myMain_Initialization:	
  4352                           
  4353                           	psect	text3
  4354  1364                     __ptext3:	
  4355 ;; *************** function _getTemp_AD *****************
  4356 ;; Defined at:
  4357 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4358 ;; Parameters:    Size  Location     Type
  4359 ;;  channel         1    wreg     unsigned char 
  4360 ;; Auto vars:     Size  Location     Type
  4361 ;;  channel         1    5[BANK0 ] unsigned char 
  4362 ;; Return value:  Size  Location     Type
  4363 ;;		None               void
  4364 ;; Registers used:
  4365 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4366 ;; Tracked objects:
  4367 ;;		On entry : 0/0
  4368 ;;		On exit  : 0/0
  4369 ;;		Unchanged: 0/0
  4370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4373 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4374 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4375 ;;Total ram usage:        2 bytes
  4376 ;; Hardware stack levels used:    1
  4377 ;; Hardware stack levels required when called:    7
  4378 ;; This function calls:
  4379 ;;		_getAD
  4380 ;; This function is called by:
  4381 ;;		_main
  4382 ;; This function uses a non-reentrant model
  4383 ;;
  4384                           
  4385                           
  4386                           ;psect for function _getTemp_AD
  4387  1364                     _getTemp_AD:	
  4388                           
  4389                           ;incstack = 0
  4390                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4391                           ;getTemp_AD@channel stored from wreg
  4392  1364  0020               	movlb	0	; select bank0
  4393  1365  00A5               	movwf	getTemp_AD@channel
  4394                           
  4395                           ;OverTemperature_B1.c: 32: if (Temp.ADtoGO == 1) {
  4396  1366  0021               	movlb	1	; select bank1
  4397  1367  1D57               	btfss	_Temp^(0+128),2
  4398  1368  0008               	return
  4399                           
  4400                           ;OverTemperature_B1.c: 33: Temp.GO = 1;
  4401  1369  1657               	bsf	_Temp^(0+128),4
  4402                           
  4403                           ;OverTemperature_B1.c: 34: Temp.ADRES = getAD(channel, 0xf0);
  4404  136A  30F0               	movlw	240
  4405  136B  0020               	movlb	0	; select bank0
  4406  136C  00A4               	movwf	??_getTemp_AD
  4407  136D  0824               	movf	??_getTemp_AD,w
  4408  136E  00A0               	movwf	getAD@adcon1
  4409  136F  0825               	movf	getTemp_AD@channel,w
  4410  1370  319F  27C0  3193   	fcall	_getAD
  4411  1373  0020               	movlb	0	; select bank0
  4412  1374  0821               	movf	?_getAD+1,w
  4413  1375  0021               	movlb	1	; select bank1
  4414  1376  01E4               	clrf	((_Temp+1)^(0+128)+12)
  4415  1377  07E4               	addwf	((_Temp+1)^(0+128)+12),f
  4416  1378  0020               	movlb	0	; select bank0
  4417  1379  0820               	movf	?_getAD,w
  4418  137A  0021               	movlb	1	; select bank1
  4419  137B  01E3               	clrf	(_Temp^(0+128)+12)
  4420  137C  07E3               	addwf	(_Temp^(0+128)+12),f
  4421                           
  4422                           ;OverTemperature_B1.c: 35: if (Temp.ADH[0] < Temp.ADRES) {
  4423  137D  0864               	movf	((_Temp+1)^(0+128)+12),w
  4424  137E  0260               	subwf	((_Temp+1)^(0+128)+8),w
  4425  137F  1D03               	skipz
  4426  1380  2B83               	goto	u8155
  4427  1381  0863               	movf	(_Temp^(0+128)+12),w
  4428  1382  025F               	subwf	(_Temp^(0+128)+8),w
  4429  1383                     u8155:	
  4430  1383  1803               	skipnc
  4431  1384  2B8C               	goto	l8113
  4432                           
  4433                           ;OverTemperature_B1.c: 36: Temp.ADH[0] = Temp.ADRES;
  4434  1385  0864               	movf	((_Temp+1)^(0+128)+12),w
  4435  1386  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4436  1387  07E0               	addwf	((_Temp+1)^(0+128)+8),f
  4437  1388  0863               	movf	(_Temp^(0+128)+12),w
  4438  1389  01DF               	clrf	(_Temp^(0+128)+8)
  4439  138A  07DF               	addwf	(_Temp^(0+128)+8),f
  4440                           
  4441                           ;OverTemperature_B1.c: 37: } else if (Temp.ADH[1] < Temp.ADRES) {
  4442  138B  0008               	return
  4443  138C                     l8113:	
  4444  138C  0864               	movf	((_Temp+1)^(0+128)+12),w
  4445  138D  0262               	subwf	((_Temp+1)^(0+128)+10),w
  4446  138E  1D03               	skipz
  4447  138F  2B92               	goto	u8165
  4448  1390  0863               	movf	(_Temp^(0+128)+12),w
  4449  1391  0261               	subwf	(_Temp^(0+128)+10),w
  4450  1392                     u8165:	
  4451  1392  1803               	skipnc
  4452  1393  0008               	return
  4453                           
  4454                           ;OverTemperature_B1.c: 38: Temp.ADH[1] = Temp.ADRES;
  4455  1394  0864               	movf	((_Temp+1)^(0+128)+12),w
  4456  1395  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4457  1396  07E2               	addwf	((_Temp+1)^(0+128)+10),f
  4458  1397  0863               	movf	(_Temp^(0+128)+12),w
  4459  1398  01E1               	clrf	(_Temp^(0+128)+10)
  4460  1399  07E1               	addwf	(_Temp^(0+128)+10),f
  4461  139A  0008               	return
  4462  139B                     __end_of_getTemp_AD:	
  4463                           
  4464                           	psect	text4
  4465  0BDD                     __ptext4:	
  4466 ;; *************** function _getLoad_AD *****************
  4467 ;; Defined at:
  4468 ;;		line 15 in file "../src/OverLoad_B1.c"
  4469 ;; Parameters:    Size  Location     Type
  4470 ;;  channel         1    wreg     unsigned char 
  4471 ;; Auto vars:     Size  Location     Type
  4472 ;;  channel         1    6[BANK0 ] unsigned char 
  4473 ;;  i               1    9[BANK0 ] unsigned char 
  4474 ;;  j               1    8[BANK0 ] unsigned char 
  4475 ;;  k               1    7[BANK0 ] unsigned char 
  4476 ;; Return value:  Size  Location     Type
  4477 ;;		None               void
  4478 ;; Registers used:
  4479 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4480 ;; Tracked objects:
  4481 ;;		On entry : 0/0
  4482 ;;		On exit  : 0/0
  4483 ;;		Unchanged: 0/0
  4484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4486 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4487 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4488 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4489 ;;Total ram usage:        6 bytes
  4490 ;; Hardware stack levels used:    1
  4491 ;; Hardware stack levels required when called:    7
  4492 ;; This function calls:
  4493 ;;		_getAD
  4494 ;; This function is called by:
  4495 ;;		_main
  4496 ;; This function uses a non-reentrant model
  4497 ;;
  4498                           
  4499                           
  4500                           ;psect for function _getLoad_AD
  4501  0BDD                     _getLoad_AD:	
  4502                           
  4503                           ;incstack = 0
  4504                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4505                           ;getLoad_AD@channel stored from wreg
  4506  0BDD  0020               	movlb	0	; select bank0
  4507  0BDE  00A6               	movwf	getLoad_AD@channel
  4508                           
  4509                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4510  0BDF  01A9               	clrf	getLoad_AD@i
  4511  0BE0  01A8               	clrf	getLoad_AD@j
  4512  0BE1  01A7               	clrf	getLoad_AD@k
  4513                           
  4514                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4515  0BE2  0022               	movlb	2	; select bank2
  4516  0BE3  1E43               	btfss	_Load^(0+256),4
  4517  0BE4  0008               	return
  4518                           
  4519                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4520  0BE5  30F3               	movlw	243
  4521  0BE6  0020               	movlb	0	; select bank0
  4522  0BE7  00A4               	movwf	??_getLoad_AD
  4523  0BE8  0824               	movf	??_getLoad_AD,w
  4524  0BE9  00A0               	movwf	getAD@adcon1
  4525  0BEA  0826               	movf	getLoad_AD@channel,w
  4526  0BEB  319F  27C0  318B   	fcall	_getAD
  4527  0BEE  0020               	movlb	0	; select bank0
  4528  0BEF  0821               	movf	?_getAD+1,w
  4529  0BF0  0022               	movlb	2	; select bank2
  4530  0BF1  01E5               	clrf	((_Load+1)^(0+256)+33)
  4531  0BF2  07E5               	addwf	((_Load+1)^(0+256)+33),f
  4532  0BF3  0020               	movlb	0	; select bank0
  4533  0BF4  0820               	movf	?_getAD,w
  4534  0BF5  0022               	movlb	2	; select bank2
  4535  0BF6  01E4               	clrf	(_Load^(0+256)+33)
  4536  0BF7  07E4               	addwf	(_Load^(0+256)+33),f
  4537                           
  4538                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4539  0BF8  0020               	movlb	0	; select bank0
  4540  0BF9  01A9               	clrf	getLoad_AD@i
  4541  0BFA  3004               	movlw	4
  4542  0BFB  0229               	subwf	getLoad_AD@i,w
  4543  0BFC  1803               	btfsc	3,0
  4544  0BFD  2C2B               	goto	l7935
  4545  0BFE                     l7923:	
  4546                           
  4547                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4548  0BFE  3529               	lslf	getLoad_AD@i,w
  4549  0BFF  3E4E               	addlw	(_Load+11)& (0+255)
  4550  0C00  0086               	movwf	6
  4551  0C01  3001               	movlw	1	; select bank2/3
  4552  0C02  0087               	movwf	7
  4553  0C03  3F40               	moviw [0]fsr1
  4554  0C04  00A4               	movwf	??_getLoad_AD
  4555  0C05  3F41               	moviw [1]fsr1
  4556  0C06  00A5               	movwf	??_getLoad_AD+1
  4557  0C07  0022               	movlb	2	; select bank2
  4558  0C08  0865               	movf	((_Load+1)^(0+256)+33),w
  4559  0C09  0020               	movlb	0	; select bank0
  4560  0C0A  0225               	subwf	??_getLoad_AD+1,w
  4561  0C0B  1D03               	skipz
  4562  0C0C  2C11               	goto	u7775
  4563  0C0D  0022               	movlb	2	; select bank2
  4564  0C0E  0864               	movf	(_Load^(0+256)+33),w
  4565  0C0F  0020               	movlb	0	; select bank0
  4566  0C10  0224               	subwf	??_getLoad_AD,w
  4567  0C11                     u7775:	
  4568  0C11  1803               	skipnc
  4569  0C12  2C23               	goto	l7931
  4570  0C13  08A8               	movf	getLoad_AD@j,f
  4571  0C14  1D03               	skipz
  4572  0C15  2C23               	goto	l7931
  4573                           
  4574                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4575  0C16  3529               	lslf	getLoad_AD@i,w
  4576  0C17  3E4E               	addlw	(_Load+11)& (0+255)
  4577  0C18  0086               	movwf	6
  4578  0C19  3001               	movlw	1	; select bank2/3
  4579  0C1A  0087               	movwf	7
  4580  0C1B  0022               	movlb	2	; select bank2
  4581  0C1C  0864               	movf	(_Load^(0+256)+33),w
  4582  0C1D  3FC0               	movwi [0]fsr1
  4583  0C1E  0865               	movf	((_Load+1)^(0+256)+33),w
  4584  0C1F  3FC1               	movwi [1]fsr1
  4585                           
  4586                           ;OverLoad_B1.c: 24: j = 1;
  4587  0C20  0020               	movlb	0	; select bank0
  4588  0C21  01A8               	clrf	getLoad_AD@j
  4589  0C22  0AA8               	incf	getLoad_AD@j,f
  4590  0C23                     l7931:	
  4591  0C23  3001               	movlw	1
  4592  0C24  00A4               	movwf	??_getLoad_AD
  4593  0C25  0824               	movf	??_getLoad_AD,w
  4594  0C26  07A9               	addwf	getLoad_AD@i,f
  4595  0C27  3004               	movlw	4
  4596  0C28  0229               	subwf	getLoad_AD@i,w
  4597  0C29  1C03               	skipc
  4598  0C2A  2BFE               	goto	l7923
  4599  0C2B                     l7935:	
  4600                           
  4601                           ;OverLoad_B1.c: 25: }
  4602                           ;OverLoad_B1.c: 26: }
  4603                           ;OverLoad_B1.c: 27: if (j == 0) {
  4604  0C2B  08A8               	movf	getLoad_AD@j,f
  4605  0C2C  1D03               	skipz
  4606  0C2D  0008               	return
  4607                           
  4608                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4609  0C2E  01A9               	clrf	getLoad_AD@i
  4610  0C2F                     L1:	
  4611  0C2F  3004               	movlw	4
  4612  0C30  0229               	subwf	getLoad_AD@i,w
  4613  0C31  1803               	btfsc	3,0
  4614  0C32  0008               	return
  4615                           
  4616                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4617  0C33  3529               	lslf	getLoad_AD@i,w
  4618  0C34  3E58               	addlw	(_Load+21)& (0+255)
  4619  0C35  0086               	movwf	6
  4620  0C36  3001               	movlw	1	; select bank2/3
  4621  0C37  0087               	movwf	7
  4622  0C38  3F40               	moviw [0]fsr1
  4623  0C39  00A4               	movwf	??_getLoad_AD
  4624  0C3A  3F41               	moviw [1]fsr1
  4625  0C3B  00A5               	movwf	??_getLoad_AD+1
  4626  0C3C  0825               	movf	??_getLoad_AD+1,w
  4627  0C3D  0022               	movlb	2	; select bank2
  4628  0C3E  0265               	subwf	((_Load+1)^(0+256)+33),w
  4629  0C3F  1D03               	skipz
  4630  0C40  2C45               	goto	u7825
  4631  0C41  0020               	movlb	0	; select bank0
  4632  0C42  0824               	movf	??_getLoad_AD,w
  4633  0C43  0022               	movlb	2	; select bank2
  4634  0C44  0264               	subwf	(_Load^(0+256)+33),w
  4635  0C45                     u7825:	
  4636  0C45  1803               	skipnc
  4637  0C46  2C58               	goto	l7951
  4638  0C47  0020               	movlb	0	; select bank0
  4639  0C48  08A7               	movf	getLoad_AD@k,f
  4640  0C49  1D03               	skipz
  4641  0C4A  2C58               	goto	l7951
  4642                           
  4643                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4644  0C4B  3529               	lslf	getLoad_AD@i,w
  4645  0C4C  3E58               	addlw	(_Load+21)& (0+255)
  4646  0C4D  0086               	movwf	6
  4647  0C4E  3001               	movlw	1	; select bank2/3
  4648  0C4F  0087               	movwf	7
  4649  0C50  0022               	movlb	2	; select bank2
  4650  0C51  0864               	movf	(_Load^(0+256)+33),w
  4651  0C52  3FC0               	movwi [0]fsr1
  4652  0C53  0865               	movf	((_Load+1)^(0+256)+33),w
  4653  0C54  3FC1               	movwi [1]fsr1
  4654                           
  4655                           ;OverLoad_B1.c: 31: k = 1;
  4656  0C55  0020               	movlb	0	; select bank0
  4657  0C56  01A7               	clrf	getLoad_AD@k
  4658  0C57  0AA7               	incf	getLoad_AD@k,f
  4659  0C58                     l7951:	
  4660  0C58  3001               	movlw	1
  4661  0C59  0020               	movlb	0	; select bank0
  4662  0C5A  00A4               	movwf	??_getLoad_AD
  4663  0C5B  0824               	movf	??_getLoad_AD,w
  4664  0C5C  07A9               	addwf	getLoad_AD@i,f
  4665  0C5D  2C2F               	goto	L1
  4666  0C5E                     __end_of_getLoad_AD:	
  4667                           
  4668                           	psect	text5
  4669  1FC0                     __ptext5:	
  4670 ;; *************** function _getAD *****************
  4671 ;; Defined at:
  4672 ;;		line 455 in file "../src/MCU_B1.c"
  4673 ;; Parameters:    Size  Location     Type
  4674 ;;  adcon0          1    wreg     unsigned char 
  4675 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4676 ;; Auto vars:     Size  Location     Type
  4677 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4678 ;; Return value:  Size  Location     Type
  4679 ;;                  2    0[BANK0 ] int 
  4680 ;; Registers used:
  4681 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4682 ;; Tracked objects:
  4683 ;;		On entry : 0/0
  4684 ;;		On exit  : 0/0
  4685 ;;		Unchanged: 0/0
  4686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4687 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4688 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4690 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4691 ;;Total ram usage:        4 bytes
  4692 ;; Hardware stack levels used:    1
  4693 ;; Hardware stack levels required when called:    6
  4694 ;; This function calls:
  4695 ;;		_Timeout_Counter
  4696 ;;		_set_TimeoutCleared
  4697 ;; This function is called by:
  4698 ;;		_getLoad_AD
  4699 ;;		_getTemp_AD
  4700 ;; This function uses a non-reentrant model
  4701 ;;
  4702                           
  4703                           
  4704                           ;psect for function _getAD
  4705  1FC0                     _getAD:	
  4706                           
  4707                           ;incstack = 0
  4708                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4709                           ;getAD@adcon0 stored from wreg
  4710  1FC0  0020               	movlb	0	; select bank0
  4711  1FC1  00A3               	movwf	getAD@adcon0
  4712                           
  4713                           ;MCU_B1.c: 456: ADCON0 = adcon0;
  4714  1FC2  0823               	movf	getAD@adcon0,w
  4715  1FC3  0021               	movlb	1	; select bank1
  4716  1FC4  009D               	movwf	29	;volatile
  4717                           
  4718                           ;MCU_B1.c: 457: ADCON1 = adcon1;
  4719  1FC5  0020               	movlb	0	; select bank0
  4720  1FC6  0820               	movf	getAD@adcon1,w
  4721  1FC7  0021               	movlb	1	; select bank1
  4722  1FC8  009E               	movwf	30	;volatile
  4723                           
  4724                           ;MCU_B1.c: 458: GO_nDONE = 1;
  4725  1FC9  149D               	bsf	29,1	;volatile
  4726                           
  4727                           ;MCU_B1.c: 459: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4728  1FCA  2FCE               	goto	l7341
  4729  1FCB                     l7339:	
  4730                           
  4731                           ;MCU_B1.c: 460: Timeout_Counter();
  4732  1FCB  319E  2655  319F   	fcall	_Timeout_Counter
  4733  1FCE                     l7341:	
  4734  1FCE  0021               	movlb	1	; select bank1
  4735  1FCF  1C9D               	btfss	29,1	;volatile
  4736  1FD0  2FD3               	goto	l7345
  4737  1FD1  1D2C               	btfss	(_myMain^(0+128)+12),2
  4738  1FD2  2FCB               	goto	l7339
  4739  1FD3                     l7345:	
  4740                           
  4741                           ;MCU_B1.c: 461: };
  4742                           ;MCU_B1.c: 462: set_TimeoutCleared();
  4743  1FD3  319B  23F6         	fcall	_set_TimeoutCleared
  4744                           
  4745                           ;MCU_B1.c: 463: return ((ADRESH*256)+ADRESL);
  4746  1FD5  0021               	movlb	1	; select bank1
  4747  1FD6  081C               	movf	28,w	;volatile
  4748  1FD7  0020               	movlb	0	; select bank0
  4749  1FD8  01A1               	clrf	?_getAD+1
  4750  1FD9  07A1               	addwf	?_getAD+1,f
  4751  1FDA  0021               	movlb	1	; select bank1
  4752  1FDB  081B               	movf	27,w	;volatile
  4753  1FDC  0020               	movlb	0	; select bank0
  4754  1FDD  01A0               	clrf	?_getAD
  4755  1FDE  07A0               	addwf	?_getAD,f
  4756  1FDF  0008               	return
  4757  1FE0                     __end_of_getAD:	
  4758                           
  4759                           	psect	text6
  4760  1DA7                     __ptext6:	
  4761 ;; *************** function _WDT_Main *****************
  4762 ;; Defined at:
  4763 ;;		line 1058 in file "../src/MCU_B1.c"
  4764 ;; Parameters:    Size  Location     Type
  4765 ;;		None
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;		None
  4768 ;; Return value:  Size  Location     Type
  4769 ;;		None               void
  4770 ;; Registers used:
  4771 ;;		wreg, status,2, status,0, pclath, cstack
  4772 ;; Tracked objects:
  4773 ;;		On entry : 0/0
  4774 ;;		On exit  : 0/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4779 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4780 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4781 ;;Total ram usage:        1 bytes
  4782 ;; Hardware stack levels used:    1
  4783 ;; Hardware stack levels required when called:    6
  4784 ;; This function calls:
  4785 ;;		_WDT_Clearing
  4786 ;; This function is called by:
  4787 ;;		_main
  4788 ;; This function uses a non-reentrant model
  4789 ;;
  4790                           
  4791                           
  4792                           ;psect for function _WDT_Main
  4793  1DA7                     _WDT_Main:	
  4794                           
  4795                           ;MCU_B1.c: 1059: if (WDT.Enable == 1) {
  4796                           
  4797                           ;incstack = 0
  4798                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4799  1DA7  0021               	movlb	1	; select bank1
  4800  1DA8  1C4A               	btfss	_WDT^(0+128),0
  4801  1DA9  0008               	return
  4802                           
  4803                           ;MCU_B1.c: 1060: if (WDT.Timer-- > 0) {
  4804  1DAA  3001               	movlw	1
  4805  1DAB  02CB               	subwf	(_WDT^(0+128)+1),f
  4806  1DAC  084B               	movf	(_WDT^(0+128)+1),w
  4807  1DAD  3AFF               	xorlw	255
  4808  1DAE  1903               	skipnz
  4809  1DAF  0008               	return
  4810                           
  4811                           ;MCU_B1.c: 1061: WDT.Timer = 100;
  4812  1DB0  3064               	movlw	100
  4813  1DB1  0020               	movlb	0	; select bank0
  4814  1DB2  00A0               	movwf	??_WDT_Main
  4815  1DB3  0820               	movf	??_WDT_Main,w
  4816  1DB4  0021               	movlb	1	; select bank1
  4817  1DB5  00CB               	movwf	(_WDT^(0+128)+1)
  4818                           
  4819                           ;MCU_B1.c: 1062: WDT_Clearing();
  4820  1DB6  3180  2002         	fcall	_WDT_Clearing
  4821  1DB8  0008               	return
  4822  1DB9                     __end_of_WDT_Main:	
  4823                           
  4824                           	psect	text7
  4825  0002                     __ptext7:	
  4826 ;; *************** function _WDT_Clearing *****************
  4827 ;; Defined at:
  4828 ;;		line 1068 in file "../src/MCU_B1.c"
  4829 ;; Parameters:    Size  Location     Type
  4830 ;;		None
  4831 ;; Auto vars:     Size  Location     Type
  4832 ;;		None
  4833 ;; Return value:  Size  Location     Type
  4834 ;;		None               void
  4835 ;; Registers used:
  4836 ;;		None
  4837 ;; Tracked objects:
  4838 ;;		On entry : 0/0
  4839 ;;		On exit  : 0/0
  4840 ;;		Unchanged: 0/0
  4841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4846 ;;Total ram usage:        0 bytes
  4847 ;; Hardware stack levels used:    1
  4848 ;; Hardware stack levels required when called:    5
  4849 ;; This function calls:
  4850 ;;		Nothing
  4851 ;; This function is called by:
  4852 ;;		_WDT_Main
  4853 ;; This function uses a non-reentrant model
  4854 ;;
  4855                           
  4856                           
  4857                           ;psect for function _WDT_Clearing
  4858  0002                     _WDT_Clearing:	
  4859                           
  4860                           ;incstack = 0
  4861                           ; Regs used in _WDT_Clearing: []
  4862  0002  0064               	clrwdt	;# 
  4863  0003  0008               	return
  4864  0004                     __end_of_WDT_Clearing:	
  4865                           
  4866                           	psect	text8
  4867  1BE3                     __ptext8:	
  4868 ;; *************** function _Temp_Main *****************
  4869 ;; Defined at:
  4870 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4871 ;; Parameters:    Size  Location     Type
  4872 ;;		None
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;		None
  4875 ;; Return value:  Size  Location     Type
  4876 ;;		None               void
  4877 ;; Registers used:
  4878 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4879 ;; Tracked objects:
  4880 ;;		On entry : 0/0
  4881 ;;		On exit  : 0/0
  4882 ;;		Unchanged: 0/0
  4883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4888 ;;Total ram usage:        0 bytes
  4889 ;; Hardware stack levels used:    1
  4890 ;; Hardware stack levels required when called:    8
  4891 ;; This function calls:
  4892 ;;		_setTemp_Main
  4893 ;; This function is called by:
  4894 ;;		_main
  4895 ;; This function uses a non-reentrant model
  4896 ;;
  4897                           
  4898                           
  4899                           ;psect for function _Temp_Main
  4900  1BE3                     _Temp_Main:	
  4901                           
  4902                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4903                           
  4904                           ;incstack = 0
  4905                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4906  1BE3  318D  25FE         	fcall	_setTemp_Main
  4907  1BE5  0008               	return
  4908  1BE6                     __end_of_Temp_Main:	
  4909                           
  4910                           	psect	text9
  4911  0DFE                     __ptext9:	
  4912 ;; *************** function _setTemp_Main *****************
  4913 ;; Defined at:
  4914 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4915 ;; Parameters:    Size  Location     Type
  4916 ;;		None
  4917 ;; Auto vars:     Size  Location     Type
  4918 ;;		None
  4919 ;; Return value:  Size  Location     Type
  4920 ;;		None               void
  4921 ;; Registers used:
  4922 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4923 ;; Tracked objects:
  4924 ;;		On entry : 0/0
  4925 ;;		On exit  : 0/0
  4926 ;;		Unchanged: 0/0
  4927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4930 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4931 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;Total ram usage:        2 bytes
  4933 ;; Hardware stack levels used:    1
  4934 ;; Hardware stack levels required when called:    7
  4935 ;; This function calls:
  4936 ;;		_getMain_All_Error_Status
  4937 ;;		_setBuz
  4938 ;; This function is called by:
  4939 ;;		_Temp_Main
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           
  4944                           ;psect for function _setTemp_Main
  4945  0DFE                     _setTemp_Main:	
  4946                           
  4947                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4948                           
  4949                           ;incstack = 0
  4950                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4951  0DFE  0021               	movlb	1	; select bank1
  4952  0DFF  1C57               	btfss	_Temp^(0+128),0
  4953  0E00  2E9F               	goto	l1617
  4954                           
  4955                           ;OverTemperature_B1.c: 59: if (Temp.ADtoGO == 0) {
  4956  0E01  1957               	btfsc	_Temp^(0+128),2
  4957  0E02  2E12               	goto	l7417
  4958                           
  4959                           ;OverTemperature_B1.c: 60: Temp.Time++;
  4960  0E03  3001               	movlw	1
  4961  0E04  07D8               	addwf	(_Temp^(0+128)+1),f
  4962  0E05  3000               	movlw	0
  4963  0E06  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4964                           
  4965                           ;OverTemperature_B1.c: 61: if (Temp.Time >= 500) {
  4966  0E07  3001               	movlw	1
  4967  0E08  0259               	subwf	((_Temp+1)^(0+128)+1),w
  4968  0E09  30F4               	movlw	244
  4969  0E0A  1903               	skipnz
  4970  0E0B  0258               	subwf	(_Temp^(0+128)+1),w
  4971  0E0C  1C03               	skipc
  4972  0E0D  0008               	return
  4973                           
  4974                           ;OverTemperature_B1.c: 62: Temp.Time = 0;
  4975  0E0E  01D8               	clrf	(_Temp^(0+128)+1)
  4976  0E0F  01D9               	clrf	((_Temp+1)^(0+128)+1)
  4977                           
  4978                           ;OverTemperature_B1.c: 63: Temp.ADtoGO = 1;
  4979  0E10  1557               	bsf	_Temp^(0+128),2
  4980                           
  4981                           ;OverTemperature_B1.c: 64: }
  4982                           ;OverTemperature_B1.c: 65: } else {
  4983  0E11  0008               	return
  4984  0E12                     l7417:	
  4985                           
  4986                           ;OverTemperature_B1.c: 66: if (getMain_All_Error_Status(2) == 0) {
  4987  0E12  3002               	movlw	2
  4988  0E13  3192  225C  318D   	fcall	_getMain_All_Error_Status
  4989  0E16  3800               	iorlw	0
  4990  0E17  1D03               	skipz
  4991  0E18  0008               	return
  4992                           
  4993                           ;OverTemperature_B1.c: 67: Temp.Time++;
  4994  0E19  3001               	movlw	1
  4995  0E1A  0021               	movlb	1	; select bank1
  4996  0E1B  07D8               	addwf	(_Temp^(0+128)+1),f
  4997  0E1C  3000               	movlw	0
  4998  0E1D  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4999                           
  5000                           ;OverTemperature_B1.c: 68: if (Temp.Time >= 5) {
  5001  0E1E  3000               	movlw	0
  5002  0E1F  0259               	subwf	((_Temp+1)^(0+128)+1),w
  5003  0E20  3005               	movlw	5
  5004  0E21  1903               	skipnz
  5005  0E22  0258               	subwf	(_Temp^(0+128)+1),w
  5006  0E23  1C03               	skipc
  5007  0E24  0008               	return
  5008                           
  5009                           ;OverTemperature_B1.c: 69: Temp.Time = 0;
  5010  0E25  01D8               	clrf	(_Temp^(0+128)+1)
  5011  0E26  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5012                           
  5013                           ;OverTemperature_B1.c: 70: if (Temp.GO == 1) {
  5014  0E27  1E57               	btfss	_Temp^(0+128),4
  5015  0E28  0008               	return
  5016                           
  5017                           ;OverTemperature_B1.c: 71: Temp.ADtoGO = 0;
  5018  0E29  1157               	bcf	_Temp^(0+128),2
  5019                           
  5020                           ;OverTemperature_B1.c: 72: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5021  0E2A  300A               	movlw	10
  5022  0E2B  3ED7               	addlw	_Temp& (0+255)
  5023  0E2C  0086               	movwf	6
  5024  0E2D  0187               	clrf	7
  5025  0E2E  3008               	movlw	8
  5026  0E2F  3ED7               	addlw	_Temp& (0+255)
  5027  0E30  0084               	movwf	4
  5028  0E31  0185               	clrf	5
  5029  0E32  3F40               	moviw [0]fsr1
  5030  0E33  0700               	addwf	0,w
  5031  0E34  0020               	movlb	0	; select bank0
  5032  0E35  00AD               	movwf	??_setTemp_Main
  5033  0E36  3101               	addfsr 0,1
  5034  0E37  3F41               	moviw [1]fsr1
  5035  0E38  3D00               	addwfc	0,w
  5036  0E39  00AE               	movwf	??_setTemp_Main+1
  5037  0E3A  36AE               	lsrf	??_setTemp_Main+1,f
  5038  0E3B  0CAD               	rrf	??_setTemp_Main,f
  5039  0E3C  082D               	movf	??_setTemp_Main,w
  5040  0E3D  0021               	movlb	1	; select bank1
  5041  0E3E  00DD               	movwf	(_Temp^(0+128)+6)
  5042  0E3F  0020               	movlb	0	; select bank0
  5043  0E40  082E               	movf	??_setTemp_Main+1,w
  5044  0E41  0021               	movlb	1	; select bank1
  5045  0E42  00DE               	movwf	((_Temp+1)^(0+128)+6)
  5046                           
  5047                           ;OverTemperature_B1.c: 82: Temp.SafeValue = 455;
  5048  0E43  30C7               	movlw	199
  5049  0E44  00E5               	movwf	(_Temp^(0+128)+14)
  5050  0E45  3001               	movlw	1
  5051  0E46  00E6               	movwf	(_Temp^(0+128)+15)
  5052                           
  5053                           ;OverTemperature_B1.c: 83: Temp.DangerValue = 415;
  5054  0E47  309F               	movlw	159
  5055  0E48  00E7               	movwf	(_Temp^(0+128)+16)
  5056  0E49  3001               	movlw	1
  5057  0E4A  00E8               	movwf	(_Temp^(0+128)+17)
  5058                           
  5059                           ;OverTemperature_B1.c: 89: if (Temp.ERROR == 1) {
  5060  0E4B  1CD7               	btfss	_Temp^(0+128),1
  5061  0E4C  2E6D               	goto	l7449
  5062                           
  5063                           ;OverTemperature_B1.c: 90: if (Temp.AD >= Temp.SafeValue) {
  5064  0E4D  0866               	movf	((_Temp+1)^(0+128)+14),w
  5065  0E4E  025E               	subwf	((_Temp+1)^(0+128)+6),w
  5066  0E4F  1D03               	skipz
  5067  0E50  2E53               	goto	u6915
  5068  0E51  0865               	movf	(_Temp^(0+128)+14),w
  5069  0E52  025D               	subwf	(_Temp^(0+128)+6),w
  5070  0E53                     u6915:	
  5071  0E53  1C03               	skipc
  5072  0E54  2E6B               	goto	l7447
  5073                           
  5074                           ;OverTemperature_B1.c: 91: Temp.Count++;
  5075  0E55  3001               	movlw	1
  5076  0E56  0020               	movlb	0	; select bank0
  5077  0E57  00AD               	movwf	??_setTemp_Main
  5078  0E58  082D               	movf	??_setTemp_Main,w
  5079  0E59  0021               	movlb	1	; select bank1
  5080  0E5A  07DA               	addwf	(_Temp^(0+128)+3),f
  5081                           
  5082                           ;OverTemperature_B1.c: 92: if (Temp.Count >= 3) {
  5083  0E5B  3003               	movlw	3
  5084  0E5C  025A               	subwf	(_Temp^(0+128)+3),w
  5085  0E5D  1C03               	skipc
  5086  0E5E  2E83               	goto	l7461
  5087                           
  5088                           ;OverTemperature_B1.c: 93: Temp.Count = 0;
  5089  0E5F  01DA               	clrf	(_Temp^(0+128)+3)
  5090                           
  5091                           ;OverTemperature_B1.c: 94: Temp.ERROR = 0;
  5092  0E60  10D7               	bcf	_Temp^(0+128),1
  5093                           
  5094                           ;OverTemperature_B1.c: 95: setBuz(2, 100);
  5095  0E61  3064               	movlw	100
  5096  0E62  0020               	movlb	0	; select bank0
  5097  0E63  00A9               	movwf	setBuz@time
  5098  0E64  3000               	movlw	0
  5099  0E65  00AA               	movwf	setBuz@time+1
  5100  0E66  3002               	movlw	2
  5101  0E67  3197  274E  318D   	fcall	_setBuz
  5102                           
  5103                           ;OverTemperature_B1.c: 96: }
  5104                           ;OverTemperature_B1.c: 97: } else {
  5105  0E6A  2E83               	goto	l7461
  5106  0E6B                     l7447:	
  5107                           
  5108                           ;OverTemperature_B1.c: 98: Temp.Count = 0;
  5109  0E6B  0021               	movlb	1	; select bank1
  5110  0E6C  2E82               	goto	l7459
  5111  0E6D                     l7449:	
  5112                           ;OverTemperature_B1.c: 99: }
  5113                           ;OverTemperature_B1.c: 100: } else {
  5114                           
  5115                           
  5116                           ;OverTemperature_B1.c: 101: if (Temp.AD <= Temp.DangerValue) {
  5117  0E6D  085E               	movf	((_Temp+1)^(0+128)+6),w
  5118  0E6E  0268               	subwf	((_Temp+1)^(0+128)+16),w
  5119  0E6F  1D03               	skipz
  5120  0E70  2E73               	goto	u6935
  5121  0E71  085D               	movf	(_Temp^(0+128)+6),w
  5122  0E72  0267               	subwf	(_Temp^(0+128)+16),w
  5123  0E73                     u6935:	
  5124  0E73  1C03               	skipc
  5125  0E74  2E82               	goto	l7459
  5126                           
  5127                           ;OverTemperature_B1.c: 102: Temp.Count++;
  5128  0E75  3001               	movlw	1
  5129  0E76  0020               	movlb	0	; select bank0
  5130  0E77  00AD               	movwf	??_setTemp_Main
  5131  0E78  082D               	movf	??_setTemp_Main,w
  5132  0E79  0021               	movlb	1	; select bank1
  5133  0E7A  07DA               	addwf	(_Temp^(0+128)+3),f
  5134                           
  5135                           ;OverTemperature_B1.c: 103: if (Temp.Count >= 3) {
  5136  0E7B  3003               	movlw	3
  5137  0E7C  025A               	subwf	(_Temp^(0+128)+3),w
  5138  0E7D  1C03               	skipc
  5139  0E7E  2E83               	goto	l7461
  5140                           
  5141                           ;OverTemperature_B1.c: 104: Temp.Count = 0;
  5142  0E7F  01DA               	clrf	(_Temp^(0+128)+3)
  5143                           
  5144                           ;OverTemperature_B1.c: 105: Temp.ERROR = 1;
  5145  0E80  14D7               	bsf	_Temp^(0+128),1
  5146                           
  5147                           ;OverTemperature_B1.c: 106: }
  5148                           ;OverTemperature_B1.c: 107: } else {
  5149  0E81  2E83               	goto	l7461
  5150  0E82                     l7459:	
  5151                           
  5152                           ;OverTemperature_B1.c: 108: Temp.Count = 0;
  5153  0E82  01DA               	clrf	(_Temp^(0+128)+3)
  5154  0E83                     l7461:	
  5155                           
  5156                           ;OverTemperature_B1.c: 109: }
  5157                           ;OverTemperature_B1.c: 110: }
  5158                           ;OverTemperature_B1.c: 111: product->Data[24]=Temp.AD >> 8;
  5159  0E83  0021               	movlb	1	; select bank1
  5160  0E84  085E               	movf	((_Temp+1)^(0+128)+6),w
  5161  0E85  0020               	movlb	0	; select bank0
  5162  0E86  00AD               	movwf	??_setTemp_Main
  5163  0E87  086E               	movf	_product,w
  5164  0E88  3E18               	addlw	24
  5165  0E89  0086               	movwf	6
  5166  0E8A  3002               	movlw	2	; select bank4/5
  5167  0E8B  0087               	movwf	7
  5168  0E8C  082D               	movf	??_setTemp_Main,w
  5169  0E8D  0081               	movwf	1
  5170                           
  5171                           ;OverTemperature_B1.c: 112: product->Data[25]=Temp.AD;
  5172  0E8E  0021               	movlb	1	; select bank1
  5173  0E8F  085D               	movf	(_Temp^(0+128)+6),w
  5174  0E90  0020               	movlb	0	; select bank0
  5175  0E91  00AD               	movwf	??_setTemp_Main
  5176  0E92  086E               	movf	_product,w
  5177  0E93  3E19               	addlw	25
  5178  0E94  0086               	movwf	6
  5179  0E95  3002               	movlw	2	; select bank4/5
  5180  0E96  0087               	movwf	7
  5181  0E97  082D               	movf	??_setTemp_Main,w
  5182  0E98  0081               	movwf	1
  5183                           
  5184                           ;OverTemperature_B1.c: 118: Temp.ADH[0] = 0;
  5185  0E99  0021               	movlb	1	; select bank1
  5186  0E9A  01DF               	clrf	(_Temp^(0+128)+8)
  5187  0E9B  01E0               	clrf	((_Temp+1)^(0+128)+8)
  5188                           
  5189                           ;OverTemperature_B1.c: 119: Temp.ADH[1] = 0;
  5190  0E9C  01E1               	clrf	(_Temp^(0+128)+10)
  5191  0E9D  01E2               	clrf	((_Temp+1)^(0+128)+10)
  5192                           
  5193                           ;OverTemperature_B1.c: 120: }
  5194                           ;OverTemperature_B1.c: 121: }
  5195                           ;OverTemperature_B1.c: 122: }
  5196                           ;OverTemperature_B1.c: 123: }
  5197                           ;OverTemperature_B1.c: 124: } else {
  5198  0E9E  0008               	return
  5199  0E9F                     l1617:	
  5200                           
  5201                           ;OverTemperature_B1.c: 125: if (myMain.PowerON == 1) {
  5202  0E9F  1C20               	btfss	_myMain^(0+128),0
  5203  0EA0  0008               	return
  5204                           
  5205                           ;OverTemperature_B1.c: 126: Temp.Enable = 1;
  5206  0EA1  1457               	bsf	_Temp^(0+128),0
  5207  0EA2  0008               	return
  5208  0EA3                     __end_of_setTemp_Main:	
  5209                           
  5210                           	psect	text10
  5211  1BE0                     __ptext10:	
  5212 ;; *************** function _Temp_Initialization *****************
  5213 ;; Defined at:
  5214 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5215 ;; Parameters:    Size  Location     Type
  5216 ;;		None
  5217 ;; Auto vars:     Size  Location     Type
  5218 ;;		None
  5219 ;; Return value:  Size  Location     Type
  5220 ;;		None               void
  5221 ;; Registers used:
  5222 ;;		status,2, status,0, pclath, cstack
  5223 ;; Tracked objects:
  5224 ;;		On entry : 0/0
  5225 ;;		On exit  : 0/0
  5226 ;;		Unchanged: 0/0
  5227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5232 ;;Total ram usage:        0 bytes
  5233 ;; Hardware stack levels used:    1
  5234 ;; Hardware stack levels required when called:    6
  5235 ;; This function calls:
  5236 ;;		_setTemp_Initialization
  5237 ;; This function is called by:
  5238 ;;		_main
  5239 ;; This function uses a non-reentrant model
  5240 ;;
  5241                           
  5242                           
  5243                           ;psect for function _Temp_Initialization
  5244  1BE0                     _Temp_Initialization:	
  5245                           
  5246                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5247                           
  5248                           ;incstack = 0
  5249                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5250  1BE0  319B  23D6         	fcall	_setTemp_Initialization
  5251  1BE2  0008               	return
  5252  1BE3                     __end_of_Temp_Initialization:	
  5253                           
  5254                           	psect	text11
  5255  1BD6                     __ptext11:	
  5256 ;; *************** function _setTemp_Initialization *****************
  5257 ;; Defined at:
  5258 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5259 ;; Parameters:    Size  Location     Type
  5260 ;;		None
  5261 ;; Auto vars:     Size  Location     Type
  5262 ;;		None
  5263 ;; Return value:  Size  Location     Type
  5264 ;;		None               void
  5265 ;; Registers used:
  5266 ;;		None
  5267 ;; Tracked objects:
  5268 ;;		On entry : 0/0
  5269 ;;		On exit  : 0/0
  5270 ;;		Unchanged: 0/0
  5271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5276 ;;Total ram usage:        0 bytes
  5277 ;; Hardware stack levels used:    1
  5278 ;; Hardware stack levels required when called:    5
  5279 ;; This function calls:
  5280 ;;		Nothing
  5281 ;; This function is called by:
  5282 ;;		_Temp_Initialization
  5283 ;; This function uses a non-reentrant model
  5284 ;;
  5285                           
  5286                           
  5287                           ;psect for function _setTemp_Initialization
  5288  1BD6                     _setTemp_Initialization:	
  5289                           
  5290                           ;incstack = 0
  5291                           ; Regs used in _setTemp_Initialization: []
  5292  1BD6  0008               	return
  5293  1BD7                     __end_of_setTemp_Initialization:	
  5294                           
  5295                           	psect	text12
  5296  10E1                     __ptext12:	
  5297 ;; *************** function _Switch_Main *****************
  5298 ;; Defined at:
  5299 ;;		line 72 in file "../src/Switch_B1.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;		None
  5302 ;; Auto vars:     Size  Location     Type
  5303 ;;  error           1   30[BANK0 ] unsigned char 
  5304 ;; Return value:  Size  Location     Type
  5305 ;;		None               void
  5306 ;; Registers used:
  5307 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5308 ;; Tracked objects:
  5309 ;;		On entry : 0/0
  5310 ;;		On exit  : 0/0
  5311 ;;		Unchanged: 0/0
  5312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5314 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5315 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5316 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5317 ;;Total ram usage:        2 bytes
  5318 ;; Hardware stack levels used:    1
  5319 ;; Hardware stack levels required when called:   11
  5320 ;; This function calls:
  5321 ;;		_TouchPower
  5322 ;;		_getMain_All_Error_Status
  5323 ;;		_setMain_Exception
  5324 ;;		_setSw_Main
  5325 ;; This function is called by:
  5326 ;;		_main
  5327 ;; This function uses a non-reentrant model
  5328 ;;
  5329                           
  5330                           
  5331                           ;psect for function _Switch_Main
  5332  10E1                     _Switch_Main:	
  5333                           
  5334                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5335                           
  5336                           ;incstack = 0
  5337                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5338  10E1  3000               	movlw	0
  5339  10E2  3192  225C  3190   	fcall	_getMain_All_Error_Status
  5340  10E5  0020               	movlb	0	; select bank0
  5341  10E6  00BD               	movwf	??_Switch_Main
  5342  10E7  083D               	movf	??_Switch_Main,w
  5343  10E8  00BE               	movwf	Switch_Main@error
  5344                           
  5345                           ;Switch_B1.c: 74: if (error != 0) {
  5346  10E9  083E               	movf	Switch_Main@error,w
  5347  10EA  1903               	btfsc	3,2
  5348  10EB  28F1               	goto	l2384
  5349                           
  5350                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5351  10EC  0021               	movlb	1	; select bank1
  5352  10ED  1852               	btfsc	_SwDetect^(0+128),0
  5353  10EE  28FA               	goto	l8141
  5354                           
  5355                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5356  10EF  1452               	bsf	_SwDetect^(0+128),0
  5357  10F0  28F5               	goto	L2
  5358  10F1                     l2384:	
  5359                           ;Switch_B1.c: 80: }
  5360                           ;Switch_B1.c: 81: } else {
  5361                           
  5362                           ;Switch_B1.c: 78: setMain_Exception(error);
  5363                           
  5364                           
  5365                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5366  10F1  0021               	movlb	1	; select bank1
  5367  10F2  1C52               	btfss	_SwDetect^(0+128),0
  5368  10F3  28FA               	goto	l8141
  5369                           
  5370                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5371  10F4  1052               	bcf	_SwDetect^(0+128),0
  5372  10F5                     L2:	
  5373                           
  5374                           ;Switch_B1.c: 85: setMain_Exception(error);
  5375  10F5  0020               	movlb	0	; select bank0
  5376  10F6  083E               	movf	Switch_Main@error,w
  5377  10F7  3188  20CA  3190   	fcall	_setMain_Exception
  5378  10FA                     l8141:	
  5379                           
  5380                           ;Switch_B1.c: 87: }
  5381                           ;Switch_B1.c: 88: }
  5382                           ;Switch_B1.c: 91: setSw_Main(1);
  5383  10FA  3001               	movlw	1
  5384  10FB  3180  204B  3190   	fcall	_setSw_Main
  5385                           
  5386                           ;Switch_B1.c: 95: setSw_Main(2);
  5387  10FE  3002               	movlw	2
  5388  10FF  3180  204B  3190   	fcall	_setSw_Main
  5389                           
  5390                           ;Switch_B1.c: 103: TouchPower();
  5391  1102  3190  2066         	fcall	_TouchPower
  5392  1104  0008               	return
  5393  1105                     __end_of_Switch_Main:	
  5394                           
  5395                           	psect	text13
  5396  004B                     __ptext13:	
  5397 ;; *************** function _setSw_Main *****************
  5398 ;; Defined at:
  5399 ;;		line 137 in file "../src/Switch_B1.c"
  5400 ;; Parameters:    Size  Location     Type
  5401 ;;  sw              1    wreg     unsigned char 
  5402 ;; Auto vars:     Size  Location     Type
  5403 ;;  sw              1   19[BANK0 ] unsigned char 
  5404 ;; Return value:  Size  Location     Type
  5405 ;;		None               void
  5406 ;; Registers used:
  5407 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5408 ;; Tracked objects:
  5409 ;;		On entry : 0/0
  5410 ;;		On exit  : 0/0
  5411 ;;		Unchanged: 0/0
  5412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5415 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5416 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5417 ;;Total ram usage:        3 bytes
  5418 ;; Hardware stack levels used:    1
  5419 ;; Hardware stack levels required when called:    9
  5420 ;; This function calls:
  5421 ;;		_SwPointSelect
  5422 ;;		_getSw_KeyStatus
  5423 ;;		_setBuz
  5424 ;;		_setDimmerLights_AdjControl
  5425 ;;		_setDimmerLights_SwOff
  5426 ;;		_setDimmerLights_SwOn
  5427 ;;		_setRF_Learn
  5428 ;; This function is called by:
  5429 ;;		_Switch_Main
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           
  5434                           ;psect for function _setSw_Main
  5435  004B                     _setSw_Main:	
  5436                           
  5437                           ;incstack = 0
  5438                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5439                           ;setSw_Main@sw stored from wreg
  5440  004B  0020               	movlb	0	; select bank0
  5441  004C  00B3               	movwf	setSw_Main@sw
  5442                           
  5443                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5444  004D  0833               	movf	setSw_Main@sw,w
  5445  004E  319E  2641  3180   	fcall	_SwPointSelect
  5446                           
  5447                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5448  0051  087C               	movf	_Sw,w
  5449  0052  0086               	movwf	6
  5450  0053  3001               	movlw	1	; select bank2/3
  5451  0054  0087               	movwf	7
  5452  0055  1C01               	btfss	1,0
  5453  0056  29B1               	goto	l2394
  5454                           
  5455                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5456  0057  0021               	movlb	1	; select bank1
  5457  0058  1852               	btfsc	_SwDetect^(0+128),0
  5458  0059  2875               	goto	l7625
  5459                           
  5460                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5461  005A  0A7C               	incf	_Sw,w
  5462  005B  0086               	movwf	6
  5463  005C  3001               	movlw	1	; select bank2/3
  5464  005D  0087               	movwf	7
  5465  005E  1081               	bcf	1,1
  5466                           
  5467                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5468  005F  0020               	movlb	0	; select bank0
  5469  0060  0833               	movf	setSw_Main@sw,w
  5470  0061  319F  2781  3180   	fcall	_getSw_KeyStatus
  5471  0064  3A01               	xorlw	1
  5472  0065  3000               	movlw	0
  5473  0066  1903               	skipnz
  5474  0067  3001               	movlw	1
  5475  0068  0020               	movlb	0	; select bank0
  5476  0069  00B1               	movwf	??_setSw_Main
  5477  006A  087C               	movf	_Sw,w
  5478  006B  0086               	movwf	6
  5479  006C  3001               	movlw	1	; select bank2/3
  5480  006D  0087               	movwf	7
  5481  006E  0DB1               	rlf	??_setSw_Main,f
  5482  006F  0801               	movf	1,w
  5483  0070  0631               	xorwf	??_setSw_Main,w
  5484  0071  39FD               	andlw	-3
  5485  0072  0631               	xorwf	??_setSw_Main,w
  5486  0073  0081               	movwf	1
  5487                           
  5488                           ;Switch_B1.c: 143: } else {
  5489  0074  288A               	goto	l2396
  5490  0075                     l7625:	
  5491                           
  5492                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5493  0075  0A7C               	incf	_Sw,w
  5494  0076  0086               	movwf	6
  5495  0077  3001               	movlw	1	; select bank2/3
  5496  0078  0087               	movwf	7
  5497  0079  1881               	btfsc	1,1
  5498  007A  288A               	goto	l2396
  5499                           
  5500                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5501  007B  0A7C               	incf	_Sw,w
  5502  007C  0086               	movwf	6
  5503  007D  3001               	movlw	1	; select bank2/3
  5504  007E  0087               	movwf	7
  5505  007F  1481               	bsf	1,1
  5506                           
  5507                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5508  0080  087C               	movf	_Sw,w
  5509  0081  0086               	movwf	6
  5510  0082  3001               	movlw	1	; select bank2/3
  5511  0083  0087               	movwf	7
  5512  0084  1081               	bcf	1,1
  5513                           
  5514                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5515  0085  087C               	movf	_Sw,w
  5516  0086  0086               	movwf	6
  5517  0087  3001               	movlw	1	; select bank2/3
  5518  0088  0087               	movwf	7
  5519  0089  1501               	bsf	1,2
  5520  008A                     l2396:	
  5521                           
  5522                           ;Switch_B1.c: 148: }
  5523                           ;Switch_B1.c: 149: }
  5524                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5525  008A  087C               	movf	_Sw,w
  5526  008B  0086               	movwf	6
  5527  008C  3001               	movlw	1	; select bank2/3
  5528  008D  0087               	movwf	7
  5529  008E  1C81               	btfss	1,1
  5530  008F  295A               	goto	l7675
  5531                           
  5532                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5533  0090  087C               	movf	_Sw,w
  5534  0091  0086               	movwf	6
  5535  0092  3001               	movlw	1	; select bank2/3
  5536  0093  0087               	movwf	7
  5537  0094  1901               	btfsc	1,2
  5538  0095  28B8               	goto	l7641
  5539                           
  5540                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5541  0096  3001               	movlw	1
  5542  0097  0020               	movlb	0	; select bank0
  5543  0098  00B1               	movwf	??_setSw_Main
  5544  0099  087C               	movf	_Sw,w
  5545  009A  3E02               	addlw	2
  5546  009B  0086               	movwf	6
  5547  009C  3001               	movlw	1	; select bank2/3
  5548  009D  0087               	movwf	7
  5549  009E  0831               	movf	??_setSw_Main,w
  5550  009F  0781               	addwf	1,f
  5551                           
  5552                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5553  00A0  087C               	movf	_Sw,w
  5554  00A1  3E02               	addlw	2
  5555  00A2  0086               	movwf	6
  5556  00A3  3001               	movlw	1	; select bank2/3
  5557  00A4  0087               	movwf	7
  5558  00A5  3005               	movlw	5
  5559  00A6  0201               	subwf	1,w
  5560  00A7  1C03               	skipc
  5561  00A8  0008               	return
  5562                           
  5563                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5564  00A9  087C               	movf	_Sw,w
  5565  00AA  3E02               	addlw	2
  5566  00AB  0086               	movwf	6
  5567  00AC  3001               	movlw	1	; select bank2/3
  5568  00AD  0087               	movwf	7
  5569  00AE  0181               	clrf	1
  5570                           
  5571                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5572  00AF  087C               	movf	_Sw,w
  5573  00B0  0086               	movwf	6
  5574  00B1  3001               	movlw	1	; select bank2/3
  5575  00B2  0087               	movwf	7
  5576  00B3  1501               	bsf	1,2
  5577                           
  5578                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5579  00B4  0833               	movf	setSw_Main@sw,w
  5580  00B5  3193  239B         	fcall	_setDimmerLights_SwOn
  5581                           
  5582                           ;Switch_B1.c: 162: }
  5583                           ;Switch_B1.c: 163: } else {
  5584  00B7  0008               	return
  5585  00B8                     l7641:	
  5586                           
  5587                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5588  00B8  087C               	movf	_Sw,w
  5589  00B9  0086               	movwf	6
  5590  00BA  3001               	movlw	1	; select bank2/3
  5591  00BB  0087               	movwf	7
  5592  00BC  1981               	btfsc	1,3
  5593  00BD  28EA               	goto	l7651
  5594                           
  5595                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5596  00BE  087C               	movf	_Sw,w
  5597  00BF  3E03               	addlw	3
  5598  00C0  0086               	movwf	6
  5599  00C1  3001               	movlw	1	; select bank2/3
  5600  00C2  0087               	movwf	7
  5601  00C3  3001               	movlw	1
  5602  00C4  0781               	addwf	1,f
  5603  00C5  3141               	addfsr 1,1
  5604  00C6  1803               	skipnc
  5605  00C7  0A81               	incf	1,f
  5606                           
  5607                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5608  00C8  087C               	movf	_Sw,w
  5609  00C9  3E03               	addlw	3
  5610  00CA  0086               	movwf	6
  5611  00CB  3001               	movlw	1	; select bank2/3
  5612  00CC  0087               	movwf	7
  5613  00CD  3F40               	moviw [0]fsr1
  5614  00CE  0020               	movlb	0	; select bank0
  5615  00CF  00B1               	movwf	??_setSw_Main
  5616  00D0  3F41               	moviw [1]fsr1
  5617  00D1  00B2               	movwf	??_setSw_Main+1
  5618  00D2  3000               	movlw	0
  5619  00D3  0232               	subwf	??_setSw_Main+1,w
  5620  00D4  3096               	movlw	150
  5621  00D5  1903               	skipnz
  5622  00D6  0231               	subwf	??_setSw_Main,w
  5623  00D7  1C03               	skipc
  5624  00D8  0008               	return
  5625                           
  5626                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5627  00D9  087C               	movf	_Sw,w
  5628  00DA  3E03               	addlw	3
  5629  00DB  0086               	movwf	6
  5630  00DC  3001               	movlw	1	; select bank2/3
  5631  00DD  0087               	movwf	7
  5632  00DE  3000               	movlw	0
  5633  00DF  3FC0               	movwi [0]fsr1
  5634  00E0  3FC1               	movwi [1]fsr1
  5635                           
  5636                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5637  00E1  087C               	movf	_Sw,w
  5638  00E2  0086               	movwf	6
  5639  00E3  3001               	movlw	1	; select bank2/3
  5640  00E4  0087               	movwf	7
  5641  00E5  1581               	bsf	1,3
  5642                           
  5643                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5644  00E6  0833               	movf	setSw_Main@sw,w
  5645  00E7  3192  22C3         	fcall	_setDimmerLights_AdjControl
  5646                           
  5647                           ;Switch_B1.c: 174: }
  5648                           ;Switch_B1.c: 175: } else {
  5649  00E9  0008               	return
  5650  00EA                     l7651:	
  5651                           
  5652                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5653  00EA  087C               	movf	_Sw,w
  5654  00EB  0086               	movwf	6
  5655  00EC  3001               	movlw	1	; select bank2/3
  5656  00ED  0087               	movwf	7
  5657  00EE  1A01               	btfsc	1,4
  5658  00EF  2928               	goto	l7665
  5659                           
  5660                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5661  00F0  087C               	movf	_Sw,w
  5662  00F1  3E05               	addlw	5
  5663  00F2  0086               	movwf	6
  5664  00F3  3001               	movlw	1	; select bank2/3
  5665  00F4  0087               	movwf	7
  5666  00F5  3001               	movlw	1
  5667  00F6  0781               	addwf	1,f
  5668  00F7  3141               	addfsr 1,1
  5669  00F8  1803               	skipnc
  5670  00F9  0A81               	incf	1,f
  5671                           
  5672                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5673  00FA  087C               	movf	_Sw,w
  5674  00FB  3E05               	addlw	5
  5675  00FC  0086               	movwf	6
  5676  00FD  3001               	movlw	1	; select bank2/3
  5677  00FE  0087               	movwf	7
  5678  00FF  3F40               	moviw [0]fsr1
  5679  0100  0020               	movlb	0	; select bank0
  5680  0101  00B1               	movwf	??_setSw_Main
  5681  0102  3F41               	moviw [1]fsr1
  5682  0103  00B2               	movwf	??_setSw_Main+1
  5683  0104  3000               	movlw	0
  5684  0105  0232               	subwf	??_setSw_Main+1,w
  5685  0106  3096               	movlw	150
  5686  0107  1903               	skipnz
  5687  0108  0231               	subwf	??_setSw_Main,w
  5688  0109  1C03               	skipc
  5689  010A  0008               	return
  5690                           
  5691                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5692  010B  087C               	movf	_Sw,w
  5693  010C  3E05               	addlw	5
  5694  010D  0086               	movwf	6
  5695  010E  3001               	movlw	1	; select bank2/3
  5696  010F  0087               	movwf	7
  5697  0110  3000               	movlw	0
  5698  0111  3FC0               	movwi [0]fsr1
  5699  0112  3FC1               	movwi [1]fsr1
  5700                           
  5701                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5702  0113  087C               	movf	_Sw,w
  5703  0114  0086               	movwf	6
  5704  0115  3001               	movlw	1	; select bank2/3
  5705  0116  0087               	movwf	7
  5706  0117  1601               	bsf	1,4
  5707                           
  5708                           ;Switch_B1.c: 183: setRF_Learn(1);
  5709  0118  3001               	movlw	1
  5710  0119  3188  2000  3180   	fcall	_setRF_Learn
  5711                           
  5712                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5713  011C  0021               	movlb	1	; select bank1
  5714  011D  1EA0               	btfss	_myMain^(0+128),5
  5715  011E  0008               	return
  5716                           
  5717                           ;Switch_B1.c: 186: setBuz(2, 100);
  5718  011F  3064               	movlw	100
  5719  0120  0020               	movlb	0	; select bank0
  5720  0121  00A9               	movwf	setBuz@time
  5721  0122  3000               	movlw	0
  5722  0123  00AA               	movwf	setBuz@time+1
  5723  0124  3002               	movlw	2
  5724  0125  3197  274E         	fcall	_setBuz
  5725                           
  5726                           ;Switch_B1.c: 187: }
  5727                           ;Switch_B1.c: 189: }
  5728                           ;Switch_B1.c: 190: } else {
  5729  0127  0008               	return
  5730  0128                     l7665:	
  5731                           
  5732                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5733  0128  087C               	movf	_Sw,w
  5734  0129  0086               	movwf	6
  5735  012A  3001               	movlw	1	; select bank2/3
  5736  012B  0087               	movwf	7
  5737  012C  1A81               	btfsc	1,5
  5738  012D  0008               	return
  5739                           
  5740                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5741  012E  087C               	movf	_Sw,w
  5742  012F  3E07               	addlw	7
  5743  0130  0086               	movwf	6
  5744  0131  3001               	movlw	1	; select bank2/3
  5745  0132  0087               	movwf	7
  5746  0133  3001               	movlw	1
  5747  0134  0781               	addwf	1,f
  5748  0135  3141               	addfsr 1,1
  5749  0136  1803               	skipnc
  5750  0137  0A81               	incf	1,f
  5751                           
  5752                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5753  0138  087C               	movf	_Sw,w
  5754  0139  3E07               	addlw	7
  5755  013A  0086               	movwf	6
  5756  013B  3001               	movlw	1	; select bank2/3
  5757  013C  0087               	movwf	7
  5758  013D  3F40               	moviw [0]fsr1
  5759  013E  0020               	movlb	0	; select bank0
  5760  013F  00B1               	movwf	??_setSw_Main
  5761  0140  3F41               	moviw [1]fsr1
  5762  0141  00B2               	movwf	??_setSw_Main+1
  5763  0142  3001               	movlw	1
  5764  0143  0232               	subwf	??_setSw_Main+1,w
  5765  0144  302C               	movlw	44
  5766  0145  1903               	skipnz
  5767  0146  0231               	subwf	??_setSw_Main,w
  5768  0147  1C03               	skipc
  5769  0148  0008               	return
  5770                           
  5771                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5772  0149  087C               	movf	_Sw,w
  5773  014A  3E07               	addlw	7
  5774  014B  0086               	movwf	6
  5775  014C  3001               	movlw	1	; select bank2/3
  5776  014D  0087               	movwf	7
  5777  014E  3000               	movlw	0
  5778  014F  3FC0               	movwi [0]fsr1
  5779  0150  3FC1               	movwi [1]fsr1
  5780                           
  5781                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5782  0151  087C               	movf	_Sw,w
  5783  0152  0086               	movwf	6
  5784  0153  3001               	movlw	1	; select bank2/3
  5785  0154  0087               	movwf	7
  5786  0155  1681               	bsf	1,5
  5787                           
  5788                           ;Switch_B1.c: 198: setRF_Learn(0);
  5789  0156  3000               	movlw	0
  5790  0157  3188  2000         	fcall	_setRF_Learn
  5791                           
  5792                           ;Switch_B1.c: 201: }
  5793                           ;Switch_B1.c: 202: }
  5794                           ;Switch_B1.c: 203: }
  5795                           ;Switch_B1.c: 204: }
  5796                           ;Switch_B1.c: 205: }
  5797                           ;Switch_B1.c: 206: } else {
  5798  0159  0008               	return
  5799  015A                     l7675:	
  5800                           
  5801                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5802  015A  087C               	movf	_Sw,w
  5803  015B  0086               	movwf	6
  5804  015C  3001               	movlw	1	; select bank2/3
  5805  015D  0087               	movwf	7
  5806  015E  1D01               	btfss	1,2
  5807  015F  0008               	return
  5808                           
  5809                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5810  0160  3001               	movlw	1
  5811  0161  0020               	movlb	0	; select bank0
  5812  0162  00B1               	movwf	??_setSw_Main
  5813  0163  087C               	movf	_Sw,w
  5814  0164  3E02               	addlw	2
  5815  0165  0086               	movwf	6
  5816  0166  3001               	movlw	1	; select bank2/3
  5817  0167  0087               	movwf	7
  5818  0168  0831               	movf	??_setSw_Main,w
  5819  0169  0781               	addwf	1,f
  5820                           
  5821                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5822  016A  087C               	movf	_Sw,w
  5823  016B  3E02               	addlw	2
  5824  016C  0086               	movwf	6
  5825  016D  3001               	movlw	1	; select bank2/3
  5826  016E  0087               	movwf	7
  5827  016F  3005               	movlw	5
  5828  0170  0201               	subwf	1,w
  5829  0171  1C03               	skipc
  5830  0172  0008               	return
  5831                           
  5832                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5833  0173  087C               	movf	_Sw,w
  5834  0174  3E02               	addlw	2
  5835  0175  0086               	movwf	6
  5836  0176  3001               	movlw	1	; select bank2/3
  5837  0177  0087               	movwf	7
  5838  0178  0181               	clrf	1
  5839                           
  5840                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5841  0179  087C               	movf	_Sw,w
  5842  017A  0086               	movwf	6
  5843  017B  3001               	movlw	1	; select bank2/3
  5844  017C  0087               	movwf	7
  5845  017D  1101               	bcf	1,2
  5846                           
  5847                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5848  017E  087C               	movf	_Sw,w
  5849  017F  3E03               	addlw	3
  5850  0180  0086               	movwf	6
  5851  0181  3001               	movlw	1	; select bank2/3
  5852  0182  0087               	movwf	7
  5853  0183  3000               	movlw	0
  5854  0184  3FC0               	movwi [0]fsr1
  5855  0185  3FC1               	movwi [1]fsr1
  5856                           
  5857                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5858  0186  087C               	movf	_Sw,w
  5859  0187  0086               	movwf	6
  5860  0188  3001               	movlw	1	; select bank2/3
  5861  0189  0087               	movwf	7
  5862  018A  1181               	bcf	1,3
  5863                           
  5864                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5865  018B  087C               	movf	_Sw,w
  5866  018C  3E05               	addlw	5
  5867  018D  0086               	movwf	6
  5868  018E  3001               	movlw	1	; select bank2/3
  5869  018F  0087               	movwf	7
  5870  0190  3000               	movlw	0
  5871  0191  3FC0               	movwi [0]fsr1
  5872  0192  3FC1               	movwi [1]fsr1
  5873                           
  5874                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5875  0193  087C               	movf	_Sw,w
  5876  0194  0086               	movwf	6
  5877  0195  3001               	movlw	1	; select bank2/3
  5878  0196  0087               	movwf	7
  5879  0197  1201               	bcf	1,4
  5880                           
  5881                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5882  0198  087C               	movf	_Sw,w
  5883  0199  3E07               	addlw	7
  5884  019A  0086               	movwf	6
  5885  019B  3001               	movlw	1	; select bank2/3
  5886  019C  0087               	movwf	7
  5887  019D  3000               	movlw	0
  5888  019E  3FC0               	movwi [0]fsr1
  5889  019F  3FC1               	movwi [1]fsr1
  5890                           
  5891                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5892  01A0  087C               	movf	_Sw,w
  5893  01A1  0086               	movwf	6
  5894  01A2  3001               	movlw	1	; select bank2/3
  5895  01A3  0087               	movwf	7
  5896  01A4  1281               	bcf	1,5
  5897                           
  5898                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5899  01A5  0021               	movlb	1	; select bank1
  5900  01A6  1852               	btfsc	_SwDetect^(0+128),0
  5901  01A7  29AD               	goto	l7701
  5902                           
  5903                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5904  01A8  0020               	movlb	0	; select bank0
  5905  01A9  0833               	movf	setSw_Main@sw,w
  5906  01AA  3194  24D7  3180   	fcall	_setDimmerLights_SwOff
  5907  01AD                     l7701:	
  5908                           
  5909                           ;Switch_B1.c: 221: }
  5910                           ;Switch_B1.c: 224: setRF_Learn(0);
  5911  01AD  3000               	movlw	0
  5912  01AE  3188  2000         	fcall	_setRF_Learn
  5913                           
  5914                           ;Switch_B1.c: 226: }
  5915                           ;Switch_B1.c: 227: }
  5916                           ;Switch_B1.c: 228: }
  5917                           ;Switch_B1.c: 229: } else {
  5918  01B0  0008               	return
  5919  01B1                     l2394:	
  5920                           
  5921                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5922  01B1  0021               	movlb	1	; select bank1
  5923  01B2  1C20               	btfss	_myMain^(0+128),0
  5924  01B3  0008               	return
  5925                           
  5926                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5927  01B4  087C               	movf	_Sw,w
  5928  01B5  0086               	movwf	6
  5929  01B6  3001               	movlw	1	; select bank2/3
  5930  01B7  0087               	movwf	7
  5931  01B8  1401               	bsf	1,0
  5932  01B9  0008               	return
  5933  01BA                     __end_of_setSw_Main:	
  5934                           
  5935                           	psect	text14
  5936  0800                     __ptext14:	
  5937 ;; *************** function _setRF_Learn *****************
  5938 ;; Defined at:
  5939 ;;		line 23 in file "../src/RF_Control_B1.c"
  5940 ;; Parameters:    Size  Location     Type
  5941 ;;  command         1    wreg     unsigned char 
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;  command         1    1[BANK0 ] unsigned char 
  5944 ;; Return value:  Size  Location     Type
  5945 ;;		None               void
  5946 ;; Registers used:
  5947 ;;		wreg, status,2, status,0
  5948 ;; Tracked objects:
  5949 ;;		On entry : 0/0
  5950 ;;		On exit  : 0/0
  5951 ;;		Unchanged: 0/0
  5952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5954 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5955 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5956 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5957 ;;Total ram usage:        2 bytes
  5958 ;; Hardware stack levels used:    1
  5959 ;; Hardware stack levels required when called:    5
  5960 ;; This function calls:
  5961 ;;		Nothing
  5962 ;; This function is called by:
  5963 ;;		_setSw_Main
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           
  5968                           ;psect for function _setRF_Learn
  5969  0800                     _setRF_Learn:	
  5970                           
  5971                           ;incstack = 0
  5972                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5973                           ;setRF_Learn@command stored from wreg
  5974  0800  0020               	movlb	0	; select bank0
  5975  0801  00A1               	movwf	setRF_Learn@command
  5976                           
  5977                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5978  0802  0821               	movf	setRF_Learn@command,w
  5979  0803  3A01               	xorlw	1
  5980  0804  3000               	movlw	0
  5981  0805  1903               	skipnz
  5982  0806  3001               	movlw	1
  5983  0807  00A0               	movwf	??_setRF_Learn
  5984  0808  0EA0               	swapf	??_setRF_Learn,f
  5985  0809  0DA0               	rlf	??_setRF_Learn,f
  5986  080A  0DA0               	rlf	??_setRF_Learn,f
  5987  080B  0021               	movlb	1	; select bank1
  5988  080C  083B               	movf	_RF1^(0+128),w
  5989  080D  0020               	movlb	0	; select bank0
  5990  080E  0620               	xorwf	??_setRF_Learn,w
  5991  080F  39BF               	andlw	-65
  5992  0810  0620               	xorwf	??_setRF_Learn,w
  5993  0811  0021               	movlb	1	; select bank1
  5994  0812  00BB               	movwf	_RF1^(0+128)
  5995  0813  0008               	return
  5996  0814                     __end_of_setRF_Learn:	
  5997                           
  5998                           	psect	text15
  5999  12C3                     __ptext15:	
  6000 ;; *************** function _setDimmerLights_AdjControl *****************
  6001 ;; Defined at:
  6002 ;;		line 546 in file "../src/Dimmer_B1.c"
  6003 ;; Parameters:    Size  Location     Type
  6004 ;;  sw              1    wreg     unsigned char 
  6005 ;; Auto vars:     Size  Location     Type
  6006 ;;  sw              1    8[BANK0 ] unsigned char 
  6007 ;;  idle            1    6[BANK0 ] unsigned char 
  6008 ;; Return value:  Size  Location     Type
  6009 ;;		None               void
  6010 ;; Registers used:
  6011 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6012 ;; Tracked objects:
  6013 ;;		On entry : 0/0
  6014 ;;		On exit  : 0/0
  6015 ;;		Unchanged: 0/0
  6016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6018 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6019 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6020 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6021 ;;Total ram usage:        4 bytes
  6022 ;; Hardware stack levels used:    1
  6023 ;; Hardware stack levels required when called:    7
  6024 ;; This function calls:
  6025 ;;		_DimmerLightsPointSelect
  6026 ;;		_getAll_DimmerLights_AdjGO
  6027 ;;		_setDimmerLights_TriggerAdj
  6028 ;; This function is called by:
  6029 ;;		_setSw_Main
  6030 ;; This function uses a non-reentrant model
  6031 ;;
  6032                           
  6033                           
  6034                           ;psect for function _setDimmerLights_AdjControl
  6035  12C3                     _setDimmerLights_AdjControl:	
  6036                           
  6037                           ;incstack = 0
  6038                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6039                           ;setDimmerLights_AdjControl@sw stored from wreg
  6040  12C3  0020               	movlb	0	; select bank0
  6041  12C4  00A8               	movwf	setDimmerLights_AdjControl@sw
  6042                           
  6043                           ;Dimmer_B1.c: 547: DimmerLightsPointSelect(sw);
  6044  12C5  0828               	movf	setDimmerLights_AdjControl@sw,w
  6045  12C6  319D  25B9  3192   	fcall	_DimmerLightsPointSelect
  6046                           
  6047                           ;Dimmer_B1.c: 548: char idle = 0;
  6048  12C9  0020               	movlb	0	; select bank0
  6049  12CA  01A6               	clrf	setDimmerLights_AdjControl@idle
  6050                           
  6051                           ;Dimmer_B1.c: 550: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  6052  12CB  01A7               	clrf	_setDimmerLights_AdjControl$2584
  6053  12CC  319D  253E  3192   	fcall	_getAll_DimmerLights_AdjGO
  6054  12CF  3A01               	xorlw	1
  6055  12D0  1D03               	skipz
  6056  12D1  2AD8               	goto	l6835
  6057  12D2  0022               	movlb	2	; select bank2
  6058  12D3  1CBE               	btfss	_Dimmer^(0+256),1
  6059  12D4  2AD8               	goto	l6835
  6060  12D5  0020               	movlb	0	; select bank0
  6061  12D6  01A7               	clrf	_setDimmerLights_AdjControl$2584
  6062  12D7  0AA7               	incf	_setDimmerLights_AdjControl$2584,f
  6063  12D8                     l6835:	
  6064  12D8  0020               	movlb	0	; select bank0
  6065  12D9  0827               	movf	_setDimmerLights_AdjControl$2584,w
  6066  12DA  00A5               	movwf	??_setDimmerLights_AdjControl
  6067  12DB  0825               	movf	??_setDimmerLights_AdjControl,w
  6068  12DC  00A6               	movwf	setDimmerLights_AdjControl@idle
  6069                           
  6070                           ;Dimmer_B1.c: 552: if (idle == 0) {
  6071  12DD  08A6               	movf	setDimmerLights_AdjControl@idle,f
  6072  12DE  1D03               	skipz
  6073  12DF  0008               	return
  6074                           
  6075                           ;Dimmer_B1.c: 553: if (DimmerLights->SwFlag == 1) {
  6076  12E0  086F               	movf	_DimmerLights,w
  6077  12E1  3E09               	addlw	9
  6078  12E2  0086               	movwf	6
  6079  12E3  3001               	movlw	1	; select bank2/3
  6080  12E4  0087               	movwf	7
  6081  12E5  1F01               	btfss	1,6
  6082  12E6  0008               	return
  6083                           
  6084                           ;Dimmer_B1.c: 554: DimmerLights->SwAdj = 1;
  6085  12E7  086F               	movf	_DimmerLights,w
  6086  12E8  3E09               	addlw	9
  6087  12E9  0086               	movwf	6
  6088  12EA  3001               	movlw	1	; select bank2/3
  6089  12EB  0087               	movwf	7
  6090  12EC  1781               	bsf	1,7
  6091                           
  6092                           ;Dimmer_B1.c: 555: DimmerLights->Status = 1;
  6093  12ED  086F               	movf	_DimmerLights,w
  6094  12EE  0086               	movwf	6
  6095  12EF  3001               	movlw	1	; select bank2/3
  6096  12F0  0087               	movwf	7
  6097  12F1  1681               	bsf	1,5
  6098                           
  6099                           ;Dimmer_B1.c: 556: setDimmerLights_TriggerAdj(sw, 1);
  6100  12F2  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6101  12F3  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6102  12F4  0828               	movf	setDimmerLights_AdjControl@sw,w
  6103  12F5  319F  27A0         	fcall	_setDimmerLights_TriggerAdj
  6104  12F7  0008               	return
  6105  12F8                     __end_of_setDimmerLights_AdjControl:	
  6106                           
  6107                           	psect	text16
  6108  1F81                     __ptext16:	
  6109 ;; *************** function _getSw_KeyStatus *****************
  6110 ;; Defined at:
  6111 ;;		line 237 in file "../src/Switch_B1.c"
  6112 ;; Parameters:    Size  Location     Type
  6113 ;;  sw              1    wreg     unsigned char 
  6114 ;; Auto vars:     Size  Location     Type
  6115 ;;  sw              1    4[BANK0 ] unsigned char 
  6116 ;;  status          1    3[BANK0 ] unsigned char 
  6117 ;; Return value:  Size  Location     Type
  6118 ;;                  1    wreg      unsigned char 
  6119 ;; Registers used:
  6120 ;;		wreg, status,2
  6121 ;; Tracked objects:
  6122 ;;		On entry : 0/0
  6123 ;;		On exit  : 0/0
  6124 ;;		Unchanged: 0/0
  6125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6127 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6128 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6129 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6130 ;;Total ram usage:        5 bytes
  6131 ;; Hardware stack levels used:    1
  6132 ;; Hardware stack levels required when called:    5
  6133 ;; This function calls:
  6134 ;;		Nothing
  6135 ;; This function is called by:
  6136 ;;		_setSw_Main
  6137 ;; This function uses a non-reentrant model
  6138 ;;
  6139                           
  6140                           
  6141                           ;psect for function _getSw_KeyStatus
  6142  1F81                     _getSw_KeyStatus:	
  6143                           
  6144                           ;incstack = 0
  6145                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6146                           ;getSw_KeyStatus@sw stored from wreg
  6147  1F81  0020               	movlb	0	; select bank0
  6148  1F82  00A4               	movwf	getSw_KeyStatus@sw
  6149                           
  6150                           ;Switch_B1.c: 238: char status = 0;
  6151  1F83  01A3               	clrf	getSw_KeyStatus@status
  6152                           
  6153                           ;Switch_B1.c: 250: if (sw == 1) {
  6154  1F84  0824               	movf	getSw_KeyStatus@sw,w
  6155  1F85  3A01               	xorlw	1
  6156  1F86  1D03               	skipz
  6157  1F87  2F90               	goto	l7035
  6158                           
  6159                           ;Switch_B1.c: 251: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6160  1F88  01A1               	clrf	_getSw_KeyStatus$6347
  6161  1F89  0AA1               	incf	_getSw_KeyStatus$6347,f
  6162  1F8A  1F0C               	btfss	12,6	;volatile
  6163  1F8B  1A0C               	btfsc	12,4	;volatile
  6164  1F8C  2F8E               	goto	l7033
  6165  1F8D  01A1               	clrf	_getSw_KeyStatus$6347
  6166  1F8E                     l7033:	
  6167  1F8E  0821               	movf	_getSw_KeyStatus$6347,w
  6168  1F8F  2F9B               	goto	L3
  6169  1F90                     l7035:	
  6170                           ;Switch_B1.c: 252: } else if (sw == 2) {
  6171                           
  6172  1F90  0824               	movf	getSw_KeyStatus@sw,w
  6173  1F91  3A02               	xorlw	2
  6174  1F92  1D03               	skipz
  6175  1F93  2F9E               	goto	l7045
  6176                           
  6177                           ;Switch_B1.c: 253: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6178  1F94  01A2               	clrf	_getSw_KeyStatus$6348
  6179  1F95  0AA2               	incf	_getSw_KeyStatus$6348,f
  6180  1F96  1C0C               	btfss	12,0	;volatile
  6181  1F97  188D               	btfsc	13,1	;volatile
  6182  1F98  2F9A               	goto	l7043
  6183  1F99  01A2               	clrf	_getSw_KeyStatus$6348
  6184  1F9A                     l7043:	
  6185  1F9A  0822               	movf	_getSw_KeyStatus$6348,w
  6186  1F9B                     L3:	
  6187  1F9B  00A0               	movwf	??_getSw_KeyStatus
  6188  1F9C  0820               	movf	??_getSw_KeyStatus,w
  6189  1F9D  00A3               	movwf	getSw_KeyStatus@status
  6190  1F9E                     l7045:	
  6191                           
  6192                           ;Switch_B1.c: 254: }
  6193                           ;Switch_B1.c: 261: return status;
  6194  1F9E  0823               	movf	getSw_KeyStatus@status,w
  6195  1F9F  0008               	return
  6196  1FA0                     __end_of_getSw_KeyStatus:	
  6197                           
  6198                           	psect	text17
  6199  1E41                     __ptext17:	
  6200 ;; *************** function _SwPointSelect *****************
  6201 ;; Defined at:
  6202 ;;		line 25 in file "../src/Switch_B1.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;  sw              1    wreg     unsigned char 
  6205 ;; Auto vars:     Size  Location     Type
  6206 ;;  sw              1    1[BANK0 ] unsigned char 
  6207 ;; Return value:  Size  Location     Type
  6208 ;;		None               void
  6209 ;; Registers used:
  6210 ;;		wreg
  6211 ;; Tracked objects:
  6212 ;;		On entry : 0/0
  6213 ;;		On exit  : 0/0
  6214 ;;		Unchanged: 0/0
  6215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6217 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6218 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6219 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6220 ;;Total ram usage:        2 bytes
  6221 ;; Hardware stack levels used:    1
  6222 ;; Hardware stack levels required when called:    5
  6223 ;; This function calls:
  6224 ;;		Nothing
  6225 ;; This function is called by:
  6226 ;;		_setSw_Main
  6227 ;; This function uses a non-reentrant model
  6228 ;;
  6229                           
  6230                           
  6231                           ;psect for function _SwPointSelect
  6232  1E41                     _SwPointSelect:	
  6233                           
  6234                           ;incstack = 0
  6235                           ; Regs used in _SwPointSelect: [wreg]
  6236                           ;SwPointSelect@sw stored from wreg
  6237  1E41  0020               	movlb	0	; select bank0
  6238  1E42  00A1               	movwf	SwPointSelect@sw
  6239                           
  6240                           ;Switch_B1.c: 28: if (sw == 1) {
  6241  1E43  0821               	movf	SwPointSelect@sw,w
  6242  1E44  3A01               	xorlw	1
  6243  1E45  1D03               	skipz
  6244  1E46  2E4C               	goto	l7019
  6245                           
  6246                           ;Switch_B1.c: 29: Sw = &Sw1;
  6247  1E47  30BE               	movlw	_Sw1& (0+255)
  6248  1E48  00A0               	movwf	??_SwPointSelect
  6249  1E49  0820               	movf	??_SwPointSelect,w
  6250  1E4A  00FC               	movwf	_Sw
  6251                           
  6252                           ;Switch_B1.c: 30: }
  6253  1E4B  0008               	return
  6254  1E4C                     l7019:	
  6255                           
  6256                           ;Switch_B1.c: 33: else if (sw == 2) {
  6257  1E4C  0821               	movf	SwPointSelect@sw,w
  6258  1E4D  3A02               	xorlw	2
  6259  1E4E  1D03               	skipz
  6260  1E4F  0008               	return
  6261                           
  6262                           ;Switch_B1.c: 34: Sw = &Sw2;
  6263  1E50  30C7               	movlw	_Sw2& (0+255)
  6264  1E51  00A0               	movwf	??_SwPointSelect
  6265  1E52  0820               	movf	??_SwPointSelect,w
  6266  1E53  00FC               	movwf	_Sw
  6267  1E54  0008               	return
  6268  1E55                     __end_of_SwPointSelect:	
  6269                           
  6270                           	psect	text18
  6271  08CA                     __ptext18:	
  6272 ;; *************** function _setMain_Exception *****************
  6273 ;; Defined at:
  6274 ;;		line 282 in file "../src/main_B1.c"
  6275 ;; Parameters:    Size  Location     Type
  6276 ;;  command         1    wreg     unsigned char 
  6277 ;; Auto vars:     Size  Location     Type
  6278 ;;  command         1   28[BANK0 ] unsigned char 
  6279 ;;  status          1   27[BANK0 ] unsigned char 
  6280 ;;  buz             1   24[BANK0 ] unsigned char 
  6281 ;; Return value:  Size  Location     Type
  6282 ;;		None               void
  6283 ;; Registers used:
  6284 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6285 ;; Tracked objects:
  6286 ;;		On entry : 0/0
  6287 ;;		On exit  : 0/0
  6288 ;;		Unchanged: 0/0
  6289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6291 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6292 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6293 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6294 ;;Total ram usage:        7 bytes
  6295 ;; Hardware stack levels used:    1
  6296 ;; Hardware stack levels required when called:   10
  6297 ;; This function calls:
  6298 ;;		_getDimmerLights_Line
  6299 ;;		_getMain_LightsStatus
  6300 ;;		_setBuz
  6301 ;;		_setDimmerLights_ErrorClose
  6302 ;;		_setLED
  6303 ;; This function is called by:
  6304 ;;		_Switch_Main
  6305 ;; This function uses a non-reentrant model
  6306 ;;
  6307                           
  6308                           
  6309                           ;psect for function _setMain_Exception
  6310  08CA                     _setMain_Exception:	
  6311                           
  6312                           ;incstack = 0
  6313                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6314                           ;setMain_Exception@command stored from wreg
  6315  08CA  0020               	movlb	0	; select bank0
  6316  08CB  00BC               	movwf	setMain_Exception@command
  6317                           
  6318                           ;main_B1.c: 283: char status = 0, buz = 0;
  6319  08CC  01BB               	clrf	setMain_Exception@status
  6320  08CD  01B8               	clrf	setMain_Exception@buz
  6321                           
  6322                           ;main_B1.c: 300: status = command == 3 ? getDimmerLights_Line() : 255;
  6323  08CE  083C               	movf	setMain_Exception@command,w
  6324  08CF  3A03               	xorlw	3
  6325  08D0  1903               	skipnz
  6326  08D1  28D6               	goto	l7587
  6327  08D2  30FF               	movlw	255
  6328  08D3  00B9               	movwf	_setMain_Exception$7084
  6329  08D4  3000               	movlw	0
  6330  08D5  28DF               	goto	L4
  6331  08D6                     l7587:	
  6332  08D6  319D  25F2  3188   	fcall	_getDimmerLights_Line
  6333  08D9  0020               	movlb	0	; select bank0
  6334  08DA  00B6               	movwf	??_setMain_Exception
  6335  08DB  01B7               	clrf	??_setMain_Exception+1
  6336  08DC  0836               	movf	??_setMain_Exception,w
  6337  08DD  00B9               	movwf	_setMain_Exception$7084
  6338  08DE  0837               	movf	??_setMain_Exception+1,w
  6339  08DF                     L4:	
  6340  08DF  00BA               	movwf	_setMain_Exception$7084+1
  6341  08E0  0839               	movf	_setMain_Exception$7084,w
  6342  08E1  00B6               	movwf	??_setMain_Exception
  6343  08E2  0836               	movf	??_setMain_Exception,w
  6344  08E3  00BB               	movwf	setMain_Exception@status
  6345                           
  6346                           ;main_B1.c: 302: if (command == 0) {
  6347  08E4  08BC               	movf	setMain_Exception@command,f
  6348  08E5  1D03               	skipz
  6349  08E6  28E9               	goto	l7595
  6350                           
  6351                           ;main_B1.c: 303: setLED(99, 10);
  6352  08E7  300A               	movlw	10
  6353  08E8  28EB               	goto	L5
  6354  08E9                     l7595:	
  6355                           ;main_B1.c: 304: } else {
  6356                           
  6357                           
  6358                           ;main_B1.c: 305: setLED(99, 11);
  6359  08E9  300B               	movlw	11
  6360  08EA  0020               	movlb	0	; select bank0
  6361  08EB                     L5:	
  6362  08EB  00B6               	movwf	??_setMain_Exception
  6363  08EC  0836               	movf	??_setMain_Exception,w
  6364  08ED  00A2               	movwf	setLED@command
  6365  08EE  3063               	movlw	99
  6366  08EF  3196  2652  3188   	fcall	_setLED
  6367                           
  6368                           ;main_B1.c: 306: }
  6369                           ;main_B1.c: 308: if (command != 0) {
  6370  08F2  0020               	movlb	0	; select bank0
  6371  08F3  083C               	movf	setMain_Exception@command,w
  6372  08F4  1903               	btfsc	3,2
  6373  08F5  0008               	return
  6374                           
  6375                           ;main_B1.c: 309: switch (command) {
  6376  08F6  2917               	goto	l7611
  6377  08F7                     l7601:	
  6378                           ;main_B1.c: 310: case 2:
  6379                           
  6380                           
  6381                           ;main_B1.c: 311: if (getMain_LightsStatus() == 1) {
  6382  08F7  3191  21CE  3188   	fcall	_getMain_LightsStatus
  6383  08FA  3A01               	xorlw	1
  6384  08FB  1D03               	skipz
  6385  08FC  2920               	goto	l7613
  6386                           
  6387                           ;main_B1.c: 312: setBuz(10, 300);
  6388  08FD  302C               	movlw	44
  6389  08FE  0020               	movlb	0	; select bank0
  6390  08FF  00A9               	movwf	setBuz@time
  6391  0900  3001               	movlw	1
  6392  0901  00AA               	movwf	setBuz@time+1
  6393  0902  300A               	movlw	10
  6394  0903  3197  274E  3188   	fcall	_setBuz
  6395                           
  6396                           ;main_B1.c: 313: }
  6397                           ;main_B1.c: 314: break;
  6398  0906  2920               	goto	l7613
  6399  0907                     l7605:	
  6400                           ;main_B1.c: 315: case 3:
  6401                           
  6402                           
  6403                           ;main_B1.c: 316: if (getMain_LightsStatus() == 1) {
  6404  0907  3191  21CE  3188   	fcall	_getMain_LightsStatus
  6405  090A  3A01               	xorlw	1
  6406  090B  1D03               	skipz
  6407  090C  2920               	goto	l7613
  6408                           
  6409                           ;main_B1.c: 317: setBuz(5, 300);
  6410  090D  302C               	movlw	44
  6411  090E  0020               	movlb	0	; select bank0
  6412  090F  00A9               	movwf	setBuz@time
  6413  0910  3001               	movlw	1
  6414  0911  00AA               	movwf	setBuz@time+1
  6415  0912  3005               	movlw	5
  6416  0913  3197  274E  3188   	fcall	_setBuz
  6417                           
  6418                           ;main_B1.c: 320: }
  6419                           
  6420                           ;main_B1.c: 318: }
  6421                           ;main_B1.c: 319: break;
  6422  0916  2920               	goto	l7613
  6423  0917                     l7611:	
  6424  0917  0020               	movlb	0	; select bank0
  6425  0918  083C               	movf	setMain_Exception@command,w
  6426                           
  6427                           ; Switch size 1, requested type "space"
  6428                           ; Number of cases is 2, Range of values is 2 to 3
  6429                           ; switch strategies available:
  6430                           ; Name         Instructions Cycles
  6431                           ; simple_byte            7     4 (average)
  6432                           ; direct_byte           13     9 (fixed)
  6433                           ; jumptable            263     9 (fixed)
  6434                           ;	Chosen strategy is simple_byte
  6435  0919  3A02               	xorlw	2	; case 2
  6436  091A  1903               	skipnz
  6437  091B  28F7               	goto	l7601
  6438  091C  3A01               	xorlw	1	; case 3
  6439  091D  1903               	skipnz
  6440  091E  2907               	goto	l7605
  6441  091F  2920               	goto	l7613
  6442  0920                     l7613:	
  6443                           
  6444                           ;main_B1.c: 321: setDimmerLights_ErrorClose(status);
  6445  0920  0020               	movlb	0	; select bank0
  6446  0921  083B               	movf	setMain_Exception@status,w
  6447  0922  3188  2014         	fcall	_setDimmerLights_ErrorClose
  6448  0924  0020               	movlb	0	; select bank0
  6449  0925  0008               	return
  6450  0926                     __end_of_setMain_Exception:	
  6451                           
  6452                           	psect	text19
  6453  1DF2                     __ptext19:	
  6454 ;; *************** function _getDimmerLights_Line *****************
  6455 ;; Defined at:
  6456 ;;		line 695 in file "../src/Dimmer_B1.c"
  6457 ;; Parameters:    Size  Location     Type
  6458 ;;		None
  6459 ;; Auto vars:     Size  Location     Type
  6460 ;;  line            1    1[BANK0 ] unsigned char 
  6461 ;; Return value:  Size  Location     Type
  6462 ;;                  1    wreg      unsigned char 
  6463 ;; Registers used:
  6464 ;;		wreg, status,2
  6465 ;; Tracked objects:
  6466 ;;		On entry : 0/0
  6467 ;;		On exit  : 0/0
  6468 ;;		Unchanged: 0/0
  6469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6471 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6472 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6473 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;Total ram usage:        2 bytes
  6475 ;; Hardware stack levels used:    1
  6476 ;; Hardware stack levels required when called:    5
  6477 ;; This function calls:
  6478 ;;		Nothing
  6479 ;; This function is called by:
  6480 ;;		_setMain_Exception
  6481 ;; This function uses a non-reentrant model
  6482 ;;
  6483                           
  6484                           
  6485                           ;psect for function _getDimmerLights_Line
  6486  1DF2                     _getDimmerLights_Line:	
  6487                           
  6488                           ;Dimmer_B1.c: 696: char line = 0;
  6489                           
  6490                           ;incstack = 0
  6491                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6492  1DF2  0020               	movlb	0	; select bank0
  6493  1DF3  01A1               	clrf	getDimmerLights_Line@line
  6494                           
  6495                           ;Dimmer_B1.c: 698: if (DimmerLights1.Line == 1) {
  6496  1DF4  0023               	movlb	3	; select bank3
  6497  1DF5  1C29               	btfss	(_DimmerLights1^(0+384)+9),0
  6498  1DF6  2DFB               	goto	l866
  6499                           
  6500                           ;Dimmer_B1.c: 699: line = 1;
  6501  1DF7  0020               	movlb	0	; select bank0
  6502  1DF8  01A1               	clrf	getDimmerLights_Line@line
  6503  1DF9  0AA1               	incf	getDimmerLights_Line@line,f
  6504                           
  6505                           ;Dimmer_B1.c: 700: }
  6506  1DFA  2E02               	goto	l867
  6507  1DFB                     l866:	
  6508                           
  6509                           ;Dimmer_B1.c: 703: else if (DimmerLights2.Line == 1) {
  6510  1DFB  1C38               	btfss	(_DimmerLights2^(0+384)+9),0
  6511  1DFC  2E02               	goto	l867
  6512                           
  6513                           ;Dimmer_B1.c: 704: line = 2;
  6514  1DFD  3002               	movlw	2
  6515  1DFE  0020               	movlb	0	; select bank0
  6516  1DFF  00A0               	movwf	??_getDimmerLights_Line
  6517  1E00  0820               	movf	??_getDimmerLights_Line,w
  6518  1E01  00A1               	movwf	getDimmerLights_Line@line
  6519  1E02                     l867:	
  6520                           
  6521                           ;Dimmer_B1.c: 705: }
  6522                           ;Dimmer_B1.c: 712: return line;
  6523  1E02  0020               	movlb	0	; select bank0
  6524  1E03  0821               	movf	getDimmerLights_Line@line,w
  6525  1E04  0008               	return
  6526  1E05                     __end_of_getDimmerLights_Line:	
  6527                           
  6528                           	psect	text20
  6529  1CC5                     __ptext20:	
  6530 ;; *************** function _Switch_Initialization *****************
  6531 ;; Defined at:
  6532 ;;		line 46 in file "../src/Switch_B1.c"
  6533 ;; Parameters:    Size  Location     Type
  6534 ;;		None
  6535 ;; Auto vars:     Size  Location     Type
  6536 ;;		None
  6537 ;; Return value:  Size  Location     Type
  6538 ;;		None               void
  6539 ;; Registers used:
  6540 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6541 ;; Tracked objects:
  6542 ;;		On entry : 0/0
  6543 ;;		On exit  : 0/0
  6544 ;;		Unchanged: 0/0
  6545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;Total ram usage:        0 bytes
  6551 ;; Hardware stack levels used:    1
  6552 ;; Hardware stack levels required when called:    8
  6553 ;; This function calls:
  6554 ;;		_TouchPower
  6555 ;;		_setSw_Initialization
  6556 ;; This function is called by:
  6557 ;;		_main
  6558 ;; This function uses a non-reentrant model
  6559 ;;
  6560                           
  6561                           
  6562                           ;psect for function _Switch_Initialization
  6563  1CC5                     _Switch_Initialization:	
  6564                           
  6565                           ;Switch_B1.c: 47: TouchPower();
  6566                           
  6567                           ;incstack = 0
  6568                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6569  1CC5  3190  2066  319C   	fcall	_TouchPower
  6570                           
  6571                           ;Switch_B1.c: 49: WPUB1 = 0;
  6572  1CC8  0024               	movlb	4	; select bank4
  6573  1CC9  108D               	bcf	13,1	;volatile
  6574                           
  6575                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6576  1CCA  3001               	movlw	1
  6577  1CCB  319C  2441  319C   	fcall	_setSw_Initialization
  6578                           
  6579                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6580  1CCE  3002               	movlw	2
  6581  1CCF  319C  2441         	fcall	_setSw_Initialization
  6582  1CD1  0008               	return
  6583  1CD2                     __end_of_Switch_Initialization:	
  6584                           
  6585                           	psect	text21
  6586  1C41                     __ptext21:	
  6587 ;; *************** function _setSw_Initialization *****************
  6588 ;; Defined at:
  6589 ;;		line 109 in file "../src/Switch_B1.c"
  6590 ;; Parameters:    Size  Location     Type
  6591 ;;  sw              1    wreg     unsigned char 
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;  sw              1    4[BANK0 ] unsigned char 
  6594 ;; Return value:  Size  Location     Type
  6595 ;;		None               void
  6596 ;; Registers used:
  6597 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6598 ;; Tracked objects:
  6599 ;;		On entry : 0/0
  6600 ;;		On exit  : 0/0
  6601 ;;		Unchanged: 0/0
  6602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6604 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6606 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6607 ;;Total ram usage:        1 bytes
  6608 ;; Hardware stack levels used:    1
  6609 ;; Hardware stack levels required when called:    7
  6610 ;; This function calls:
  6611 ;;		_setLED
  6612 ;; This function is called by:
  6613 ;;		_Switch_Initialization
  6614 ;; This function uses a non-reentrant model
  6615 ;;
  6616                           
  6617                           
  6618                           ;psect for function _setSw_Initialization
  6619  1C41                     _setSw_Initialization:	
  6620                           
  6621                           ;incstack = 0
  6622                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6623                           ;setSw_Initialization@sw stored from wreg
  6624  1C41  0020               	movlb	0	; select bank0
  6625  1C42  00A4               	movwf	setSw_Initialization@sw
  6626                           
  6627                           ;Switch_B1.c: 110: setLED(sw, 1);
  6628  1C43  01A2               	clrf	setLED@command
  6629  1C44  0AA2               	incf	setLED@command,f
  6630  1C45  0824               	movf	setSw_Initialization@sw,w
  6631  1C46  3196  2652         	fcall	_setLED
  6632  1C48  0008               	return
  6633  1C49                     __end_of_setSw_Initialization:	
  6634                           
  6635                           	psect	text22
  6636  1066                     __ptext22:	
  6637 ;; *************** function _TouchPower *****************
  6638 ;; Defined at:
  6639 ;;		line 10 in file "../src/Switch_B1.c"
  6640 ;; Parameters:    Size  Location     Type
  6641 ;;		None
  6642 ;; Auto vars:     Size  Location     Type
  6643 ;;		None
  6644 ;; Return value:  Size  Location     Type
  6645 ;;		None               void
  6646 ;; Registers used:
  6647 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6648 ;; Tracked objects:
  6649 ;;		On entry : 0/0
  6650 ;;		On exit  : 0/0
  6651 ;;		Unchanged: 0/0
  6652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6657 ;;Total ram usage:        0 bytes
  6658 ;; Hardware stack levels used:    1
  6659 ;; Hardware stack levels required when called:    6
  6660 ;; This function calls:
  6661 ;;		_Timeout_Counter
  6662 ;;		_set_TimeoutCleared
  6663 ;; This function is called by:
  6664 ;;		_Switch_Initialization
  6665 ;;		_Switch_Main
  6666 ;; This function uses a non-reentrant model
  6667 ;;
  6668                           
  6669                           
  6670                           ;psect for function _TouchPower
  6671  1066                     _TouchPower:	
  6672                           
  6673                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6674                           
  6675                           ;incstack = 0
  6676                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6677  1066  0020               	movlb	0	; select bank0
  6678  1067  1A8E               	btfsc	14,5	;volatile
  6679  1068  0008               	return
  6680                           
  6681                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6682  1069  0021               	movlb	1	; select bank1
  6683  106A  1C20               	btfss	_myMain^(0+128),0
  6684  106B  0008               	return
  6685  106C  2872               	goto	l7573
  6686  106D                     l2368:	
  6687                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6688                           
  6689                           
  6690                           ;Switch_B1.c: 14: RC5 = 1;
  6691  106D  0020               	movlb	0	; select bank0
  6692  106E  168E               	bsf	14,5	;volatile
  6693                           
  6694                           ;Switch_B1.c: 15: Timeout_Counter();
  6695  106F  319E  2655  3190   	fcall	_Timeout_Counter
  6696  1072                     l7573:	
  6697  1072  0020               	movlb	0	; select bank0
  6698  1073  1A8E               	btfsc	14,5	;volatile
  6699  1074  2878               	goto	l7577
  6700  1075  0021               	movlb	1	; select bank1
  6701  1076  1D2C               	btfss	(_myMain^(0+128)+12),2
  6702  1077  286D               	goto	l2368
  6703  1078                     l7577:	
  6704                           
  6705                           ;Switch_B1.c: 16: }
  6706                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6707  1078  319B  23F6         	fcall	_set_TimeoutCleared
  6708  107A  0008               	return
  6709  107B                     __end_of_TouchPower:	
  6710                           
  6711                           	psect	text23
  6712  1BDD                     __ptext23:	
  6713 ;; *************** function _RF_Main *****************
  6714 ;; Defined at:
  6715 ;;		line 16 in file "../src/RF_Control_B1.c"
  6716 ;; Parameters:    Size  Location     Type
  6717 ;;		None
  6718 ;; Auto vars:     Size  Location     Type
  6719 ;;		None
  6720 ;; Return value:  Size  Location     Type
  6721 ;;		None               void
  6722 ;; Registers used:
  6723 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6724 ;; Tracked objects:
  6725 ;;		On entry : 0/0
  6726 ;;		On exit  : 0/0
  6727 ;;		Unchanged: 0/0
  6728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6733 ;;Total ram usage:        0 bytes
  6734 ;; Hardware stack levels used:    1
  6735 ;; Hardware stack levels required when called:   14
  6736 ;; This function calls:
  6737 ;;		_setRF_Main
  6738 ;; This function is called by:
  6739 ;;		_main
  6740 ;; This function uses a non-reentrant model
  6741 ;;
  6742                           
  6743                           
  6744                           ;psect for function _RF_Main
  6745  1BDD                     _RF_Main:	
  6746                           
  6747                           ;RF_Control_B1.c: 18: setRF_Main();
  6748                           
  6749                           ;incstack = 0
  6750                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6751  1BDD  3186  261C         	fcall	_setRF_Main
  6752  1BDF  0008               	return
  6753  1BE0                     __end_of_RF_Main:	
  6754                           
  6755                           	psect	text24
  6756  061C                     __ptext24:	
  6757 ;; *************** function _setRF_Main *****************
  6758 ;; Defined at:
  6759 ;;		line 52 in file "../src/RF_Control_B1.c"
  6760 ;; Parameters:    Size  Location     Type
  6761 ;;		None
  6762 ;; Auto vars:     Size  Location     Type
  6763 ;;  error           1    2[BANK1 ] unsigned char 
  6764 ;;  Receive_OK      1    1[BANK1 ] unsigned char 
  6765 ;;  loop_f          1    0[BANK1 ] unsigned char 
  6766 ;; Return value:  Size  Location     Type
  6767 ;;		None               void
  6768 ;; Registers used:
  6769 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6770 ;; Tracked objects:
  6771 ;;		On entry : 0/0
  6772 ;;		On exit  : 0/0
  6773 ;;		Unchanged: 0/0
  6774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6776 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6777 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6778 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6779 ;;Total ram usage:        4 bytes
  6780 ;; Hardware stack levels used:    1
  6781 ;; Hardware stack levels required when called:   13
  6782 ;; This function calls:
  6783 ;;		_CC2500_TxData
  6784 ;;		_RF_RxDisable
  6785 ;;		_getBuz_GO
  6786 ;;		_getMain_All_Error_Status
  6787 ;;		_getRF_KeyStatus
  6788 ;;		_getRxData
  6789 ;; This function is called by:
  6790 ;;		_RF_Main
  6791 ;; This function uses a non-reentrant model
  6792 ;;
  6793                           
  6794                           
  6795                           ;psect for function _setRF_Main
  6796  061C                     _setRF_Main:	
  6797                           
  6798                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6799                           
  6800                           ;incstack = 0
  6801                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6802  061C  0021               	movlb	1	; select bank1
  6803  061D  01E9               	clrf	setRF_Main@loop_f^(0+128)
  6804  061E  01EA               	clrf	setRF_Main@Receive_OK^(0+128)
  6805  061F  01EB               	clrf	setRF_Main@error^(0+128)
  6806                           
  6807                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6808  0620  1C3B               	btfss	_RF1^(0+128),0
  6809  0621  2EE0               	goto	l1968
  6810                           
  6811                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6812  0622  319D  254F  3186   	fcall	_getBuz_GO
  6813  0625  0020               	movlb	0	; select bank0
  6814  0626  0821               	movf	?_getBuz_GO+1,w
  6815  0627  0420               	iorwf	?_getBuz_GO,w
  6816  0628  1D03               	skipz
  6817  0629  0008               	return
  6818                           
  6819                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6820  062A  3000               	movlw	0
  6821  062B  3192  225C  3186   	fcall	_getMain_All_Error_Status
  6822  062E  3800               	iorlw	0
  6823  062F  1D03               	skipz
  6824  0630  2E45               	goto	l1970
  6825                           
  6826                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6827  0631  319D  2560  3186   	fcall	_getRF_KeyStatus
  6828  0634  3A01               	xorlw	1
  6829  0635  3000               	movlw	0
  6830  0636  1903               	skipnz
  6831  0637  3001               	movlw	1
  6832  0638  0020               	movlb	0	; select bank0
  6833  0639  00ED               	movwf	??_setRF_Main
  6834  063A  0CED               	rrf	??_setRF_Main,f
  6835  063B  0CED               	rrf	??_setRF_Main,f
  6836  063C  0021               	movlb	1	; select bank1
  6837  063D  083B               	movf	_RF1^(0+128),w
  6838  063E  0020               	movlb	0	; select bank0
  6839  063F  066D               	xorwf	??_setRF_Main,w
  6840  0640  397F               	andlw	-129
  6841  0641  066D               	xorwf	??_setRF_Main,w
  6842  0642  0021               	movlb	1	; select bank1
  6843  0643  00BB               	movwf	_RF1^(0+128)
  6844                           
  6845                           ;RF_Control_B1.c: 65: } else {
  6846  0644  2E47               	goto	l1971
  6847  0645                     l1970:	
  6848                           
  6849                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6850  0645  0021               	movlb	1	; select bank1
  6851  0646  13BB               	bcf	_RF1^(0+128),7
  6852  0647                     l1971:	
  6853                           
  6854                           ;RF_Control_B1.c: 70: }
  6855                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  6856  0647  1BBB               	btfsc	_RF1^(0+128),7
  6857  0648  1B3B               	btfsc	_RF1^(0+128),6
  6858  0649  2E4F               	goto	l1972
  6859                           
  6860                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  6861  064A  01BD               	clrf	(_RF1^(0+128)+2)
  6862  064B  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6863                           
  6864                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  6865  064C  14BC               	bsf	(_RF1^(0+128)+1),1
  6866                           
  6867                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  6868  064D  11BB               	bcf	_RF1^(0+128),3
  6869                           
  6870                           ;RF_Control_B1.c: 76: } else {
  6871  064E  0008               	return
  6872  064F                     l1972:	
  6873                           
  6874                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6875  064F  18BC               	btfsc	(_RF1^(0+128)+1),1
  6876  0650  1B3B               	btfsc	_RF1^(0+128),6
  6877  0651  2E66               	goto	l7499
  6878                           
  6879                           ;RF_Control_B1.c: 78: RF1.Count++;
  6880  0652  3001               	movlw	1
  6881  0653  07BD               	addwf	(_RF1^(0+128)+2),f
  6882  0654  3000               	movlw	0
  6883  0655  3DBE               	addwfc	((_RF1+1)^(0+128)+2),f
  6884                           
  6885                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6886  0656  3002               	movlw	2
  6887  0657  3EBB               	addlw	_RF1& (0+255)
  6888  0658  0086               	movwf	6
  6889  0659  0187               	clrf	7
  6890  065A  3F40               	moviw [0]fsr1
  6891  065B  0642               	xorwf	(_RF1^(0+128)+7),w
  6892  065C  1D03               	skipz
  6893  065D  2E60               	goto	u7035
  6894  065E  3F41               	moviw [1]fsr1
  6895  065F  0643               	xorwf	((_RF1+1)^(0+128)+7),w
  6896  0660                     u7035:	
  6897  0660  1D03               	skipz
  6898  0661  2EAD               	goto	l1976
  6899                           
  6900                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6901  0662  01BD               	clrf	(_RF1^(0+128)+2)
  6902  0663  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6903                           
  6904                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6905  0664  10BC               	bcf	(_RF1^(0+128)+1),1
  6906                           
  6907                           ;RF_Control_B1.c: 82: }
  6908                           ;RF_Control_B1.c: 83: } else {
  6909  0665  2EAD               	goto	l1976
  6910  0666                     l7499:	
  6911                           
  6912                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6913  0666  01BD               	clrf	(_RF1^(0+128)+2)
  6914  0667  01BE               	clrf	((_RF1+1)^(0+128)+2)
  6915                           
  6916                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6917  0668  10BC               	bcf	(_RF1^(0+128)+1),1
  6918                           
  6919                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6920  0669  193B               	btfsc	_RF1^(0+128),2
  6921  066A  1B3B               	btfsc	_RF1^(0+128),6
  6922  066B  2E7A               	goto	l1977
  6923                           
  6924                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6925  066C  113B               	bcf	_RF1^(0+128),2
  6926                           
  6927                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6928  066D  11BB               	bcf	_RF1^(0+128),3
  6929                           
  6930                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6931  066E  10BB               	bcf	_RF1^(0+128),1
  6932                           
  6933                           ;RF_Control_B1.c: 91: RF1.RunTime = 10;
  6934  066F  300A               	movlw	10
  6935  0670  00C2               	movwf	(_RF1^(0+128)+7)
  6936  0671  3000               	movlw	0
  6937  0672  00C3               	movwf	(_RF1^(0+128)+8)
  6938                           
  6939                           ;RF_Control_B1.c: 97: RF_RxDisable();
  6940  0673  319C  24EF  3186   	fcall	_RF_RxDisable
  6941                           
  6942                           ;RF_Control_B1.c: 104: CC2500_TxData();
  6943  0676  3189  21E4  3186   	fcall	_CC2500_TxData
  6944                           
  6945                           ;RF_Control_B1.c: 106: } else {
  6946  0679  2EAD               	goto	l1976
  6947  067A                     l1977:	
  6948                           
  6949                           ;RF_Control_B1.c: 108: if (RF1.RxStatus == 1) {
  6950  067A  19BB               	btfsc	_RF1^(0+128),3
  6951                           
  6952                           ;RF_Control_B1.c: 112: if (RF1.ReceiveGO == 1) {
  6953  067B  1CBB               	btfss	_RF1^(0+128),1
  6954  067C  2EAD               	goto	l1976
  6955                           
  6956                           ;RF_Control_B1.c: 113: RF1.ReceiveGO = 0;
  6957  067D  10BB               	bcf	_RF1^(0+128),1
  6958                           
  6959                           ;RF_Control_B1.c: 114: RF1.Correction = 0;
  6960  067E  12BC               	bcf	(_RF1^(0+128)+1),5
  6961                           
  6962                           ;RF_Control_B1.c: 115: RF1.CorrectionCounter = 0;
  6963  067F  01C5               	clrf	(_RF1^(0+128)+10)
  6964  0680  01C6               	clrf	((_RF1+1)^(0+128)+10)
  6965                           
  6966                           ;RF_Control_B1.c: 126: getRxData();
  6967  0681  318D  256E  3186   	fcall	_getRxData
  6968                           
  6969                           ;RF_Control_B1.c: 127: RF1.Run = 1;
  6970  0684  0021               	movlb	1	; select bank1
  6971  0685  14BC               	bsf	(_RF1^(0+128)+1),1
  6972                           
  6973                           ;RF_Control_B1.c: 129: if (RF1.Checked == 1) {
  6974  0686  1DBC               	btfss	(_RF1^(0+128)+1),3
  6975  0687  2E95               	goto	l7533
  6976                           
  6977                           ;RF_Control_B1.c: 130: if (RF1.RunTime > 10) {
  6978  0688  3000               	movlw	0
  6979  0689  0243               	subwf	((_RF1+1)^(0+128)+7),w
  6980  068A  300B               	movlw	11
  6981  068B  1903               	skipnz
  6982  068C  0242               	subwf	(_RF1^(0+128)+7),w
  6983  068D  1C03               	skipc
  6984  068E  2E93               	goto	l7531
  6985                           
  6986                           ;RF_Control_B1.c: 131: RF1.RunTime = 10;
  6987  068F  300A               	movlw	10
  6988  0690  00C2               	movwf	(_RF1^(0+128)+7)
  6989  0691  3000               	movlw	0
  6990  0692  00C3               	movwf	(_RF1^(0+128)+8)
  6991  0693                     l7531:	
  6992                           
  6993                           ;RF_Control_B1.c: 132: }
  6994                           ;RF_Control_B1.c: 133: RF1.CheckCount = 0;
  6995  0693  01BF               	clrf	(_RF1^(0+128)+4)
  6996                           
  6997                           ;RF_Control_B1.c: 134: } else {
  6998  0694  2EAD               	goto	l1976
  6999  0695                     l7533:	
  7000                           
  7001                           ;RF_Control_B1.c: 135: RF1.CheckCount++;
  7002  0695  3001               	movlw	1
  7003  0696  0020               	movlb	0	; select bank0
  7004  0697  00ED               	movwf	??_setRF_Main
  7005  0698  086D               	movf	??_setRF_Main,w
  7006  0699  0021               	movlb	1	; select bank1
  7007  069A  07BF               	addwf	(_RF1^(0+128)+4),f
  7008                           
  7009                           ;RF_Control_B1.c: 136: if (RF1.CheckCount == 2) {
  7010  069B  083F               	movf	(_RF1^(0+128)+4),w
  7011  069C  3A02               	xorlw	2
  7012  069D  1D03               	skipz
  7013  069E  2EAD               	goto	l1976
  7014                           
  7015                           ;RF_Control_B1.c: 137: RF1.CheckCount = 0;
  7016  069F  01BF               	clrf	(_RF1^(0+128)+4)
  7017                           
  7018                           ;RF_Control_B1.c: 138: RF1.CheckedCounter = 0;
  7019  06A0  01C0               	clrf	(_RF1^(0+128)+5)
  7020  06A1  01C1               	clrf	((_RF1+1)^(0+128)+5)
  7021                           
  7022                           ;RF_Control_B1.c: 139: if (RF1.RunTime < 200) {
  7023  06A2  3000               	movlw	0
  7024  06A3  0243               	subwf	((_RF1+1)^(0+128)+7),w
  7025  06A4  30C8               	movlw	200
  7026  06A5  1903               	skipnz
  7027  06A6  0242               	subwf	(_RF1^(0+128)+7),w
  7028  06A7  1803               	skipnc
  7029  06A8  2EAD               	goto	l1976
  7030                           
  7031                           ;RF_Control_B1.c: 140: RF1.RunTime += 10;
  7032  06A9  300A               	movlw	10
  7033  06AA  07C2               	addwf	(_RF1^(0+128)+7),f
  7034  06AB  3000               	movlw	0
  7035  06AC  3DC3               	addwfc	((_RF1+1)^(0+128)+7),f
  7036  06AD                     l1976:	
  7037                           ;RF_Control_B1.c: 141: }
  7038                           ;RF_Control_B1.c: 142: }
  7039                           ;RF_Control_B1.c: 143: }
  7040                           ;RF_Control_B1.c: 144: }
  7041                           ;RF_Control_B1.c: 145: } else {
  7042                           
  7043                           
  7044                           ;RF_Control_B1.c: 157: }
  7045                           ;RF_Control_B1.c: 158: }
  7046                           ;RF_Control_B1.c: 159: }
  7047                           ;RF_Control_B1.c: 160: if (RF1.RxStatus == 1) {
  7048  06AD  0021               	movlb	1	; select bank1
  7049  06AE  1DBB               	btfss	_RF1^(0+128),3
  7050  06AF  2ECE               	goto	l7553
  7051                           
  7052                           ;RF_Control_B1.c: 161: RF1.CheckedCounter++;
  7053  06B0  3001               	movlw	1
  7054  06B1  07C0               	addwf	(_RF1^(0+128)+5),f
  7055  06B2  3000               	movlw	0
  7056  06B3  3DC1               	addwfc	((_RF1+1)^(0+128)+5),f
  7057                           
  7058                           ;RF_Control_B1.c: 162: if (RF1.CheckedCounter == 100) {
  7059  06B4  3005               	movlw	5
  7060  06B5  3EBB               	addlw	_RF1& (0+255)
  7061  06B6  0086               	movwf	6
  7062  06B7  0187               	clrf	7
  7063  06B8  3F40               	moviw [0]fsr1
  7064  06B9  3A64               	xorlw	100
  7065  06BA  1D03               	skipz
  7066  06BB  2EBE               	goto	u7135
  7067  06BC  3F41               	moviw [1]fsr1
  7068  06BD  3A00               	xorlw	0
  7069  06BE                     u7135:	
  7070  06BE  1D03               	skipz
  7071  06BF  2ECE               	goto	l7553
  7072                           
  7073                           ;RF_Control_B1.c: 163: RF1.CheckedCounter = 0;
  7074  06C0  01C0               	clrf	(_RF1^(0+128)+5)
  7075  06C1  01C1               	clrf	((_RF1+1)^(0+128)+5)
  7076                           
  7077                           ;RF_Control_B1.c: 164: RF1.CheckCount = 0;
  7078  06C2  01BF               	clrf	(_RF1^(0+128)+4)
  7079                           
  7080                           ;RF_Control_B1.c: 165: if (RF1.RunTime > 10) {
  7081  06C3  3000               	movlw	0
  7082  06C4  0243               	subwf	((_RF1+1)^(0+128)+7),w
  7083  06C5  300B               	movlw	11
  7084  06C6  1903               	skipnz
  7085  06C7  0242               	subwf	(_RF1^(0+128)+7),w
  7086  06C8  1C03               	skipc
  7087  06C9  2ECE               	goto	l7553
  7088                           
  7089                           ;RF_Control_B1.c: 166: RF1.RunTime -= 10;
  7090  06CA  300A               	movlw	10
  7091  06CB  02C2               	subwf	(_RF1^(0+128)+7),f
  7092  06CC  3000               	movlw	0
  7093  06CD  3BC3               	subwfb	((_RF1+1)^(0+128)+7),f
  7094  06CE                     l7553:	
  7095                           
  7096                           ;RF_Control_B1.c: 167: }
  7097                           ;RF_Control_B1.c: 168: }
  7098                           ;RF_Control_B1.c: 169: }
  7099                           ;RF_Control_B1.c: 170: if (RF1.Correction == 1) {
  7100  06CE  1EBC               	btfss	(_RF1^(0+128)+1),5
  7101  06CF  0008               	return
  7102                           
  7103                           ;RF_Control_B1.c: 171: RF1.CorrectionCounter++;
  7104  06D0  3001               	movlw	1
  7105  06D1  07C5               	addwf	(_RF1^(0+128)+10),f
  7106  06D2  3000               	movlw	0
  7107  06D3  3DC6               	addwfc	((_RF1+1)^(0+128)+10),f
  7108                           
  7109                           ;RF_Control_B1.c: 172: if (RF1.CorrectionCounter >= 30000) {
  7110  06D4  3075               	movlw	117
  7111  06D5  0246               	subwf	((_RF1+1)^(0+128)+10),w
  7112  06D6  3030               	movlw	48
  7113  06D7  1903               	skipnz
  7114  06D8  0245               	subwf	(_RF1^(0+128)+10),w
  7115  06D9  1C03               	skipc
  7116  06DA  0008               	return
  7117                           
  7118                           ;RF_Control_B1.c: 173: RF1.CorrectionCounter = 0;
  7119  06DB  01C5               	clrf	(_RF1^(0+128)+10)
  7120  06DC  01C6               	clrf	((_RF1+1)^(0+128)+10)
  7121                           
  7122                           ;RF_Control_B1.c: 174: RF1.RxStatus = 0;
  7123  06DD  11BB               	bcf	_RF1^(0+128),3
  7124                           
  7125                           ;RF_Control_B1.c: 175: RF1.ReceiveGO = 0;
  7126  06DE  10BB               	bcf	_RF1^(0+128),1
  7127                           
  7128                           ;RF_Control_B1.c: 176: }
  7129                           ;RF_Control_B1.c: 177: }
  7130                           ;RF_Control_B1.c: 178: }
  7131                           ;RF_Control_B1.c: 179: }
  7132                           ;RF_Control_B1.c: 186: } else {
  7133  06DF  0008               	return
  7134  06E0                     l1968:	
  7135                           
  7136                           ;RF_Control_B1.c: 187: if (myMain.PowerON == 1) {
  7137  06E0  1C20               	btfss	_myMain^(0+128),0
  7138  06E1  0008               	return
  7139                           
  7140                           ;RF_Control_B1.c: 188: RF1.Enable = 1;
  7141  06E2  143B               	bsf	_RF1^(0+128),0
  7142  06E3  0008               	return
  7143  06E4                     __end_of_setRF_Main:	
  7144                           
  7145                           	psect	text25
  7146  0D6E                     __ptext25:	
  7147 ;; *************** function _getRxData *****************
  7148 ;; Defined at:
  7149 ;;		line 282 in file "../src/RF_Control_B1.c"
  7150 ;; Parameters:    Size  Location     Type
  7151 ;;		None
  7152 ;; Auto vars:     Size  Location     Type
  7153 ;;  error           1   76[BANK0 ] unsigned char 
  7154 ;; Return value:  Size  Location     Type
  7155 ;;		None               void
  7156 ;; Registers used:
  7157 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7158 ;; Tracked objects:
  7159 ;;		On entry : 0/0
  7160 ;;		On exit  : 0/0
  7161 ;;		Unchanged: 0/0
  7162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7164 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7165 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7166 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7167 ;;Total ram usage:        2 bytes
  7168 ;; Hardware stack levels used:    1
  7169 ;; Hardware stack levels required when called:   12
  7170 ;; This function calls:
  7171 ;;		_getMain_All_Error_Status
  7172 ;;		_setControl_Lights_Table
  7173 ;;		_setLog_Code
  7174 ;;		_setTxData
  7175 ;; This function is called by:
  7176 ;;		_setRF_Main
  7177 ;; This function uses a non-reentrant model
  7178 ;;
  7179                           
  7180                           
  7181                           ;psect for function _getRxData
  7182  0D6E                     _getRxData:	
  7183                           
  7184                           ;RF_Control_B1.c: 283: char error = getMain_All_Error_Status(0);
  7185                           
  7186                           ;incstack = 0
  7187                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7188  0D6E  3000               	movlw	0
  7189  0D6F  3192  225C  318D   	fcall	_getMain_All_Error_Status
  7190  0D72  0020               	movlb	0	; select bank0
  7191  0D73  00EB               	movwf	??_getRxData
  7192  0D74  086B               	movf	??_getRxData,w
  7193  0D75  00EC               	movwf	getRxData@error
  7194                           
  7195                           ;RF_Control_B1.c: 284: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7196  0D76  0022               	movlb	2	; select bank2
  7197  0D77  0820               	movf	_RF_Data^(0+256),w
  7198  0D78  3AAA               	xorlw	170
  7199  0D79  1D03               	skipz
  7200  0D7A  2D91               	goto	l6969
  7201  0D7B  0821               	movf	(_RF_Data^(0+256)+1),w
  7202  0D7C  3A01               	xorlw	1
  7203  0D7D  1D03               	skipz
  7204  0D7E  2D91               	goto	l6969
  7205                           
  7206                           ;RF_Control_B1.c: 286: product->Data[2] = 0x55;
  7207  0D7F  3055               	movlw	85
  7208  0D80  0020               	movlb	0	; select bank0
  7209  0D81  00EB               	movwf	??_getRxData
  7210  0D82  086E               	movf	_product,w
  7211  0D83  3E02               	addlw	2
  7212  0D84  0086               	movwf	6
  7213  0D85  3002               	movlw	2	; select bank4/5
  7214  0D86  0087               	movwf	7
  7215  0D87  086B               	movf	??_getRxData,w
  7216  0D88  0081               	movwf	1
  7217                           
  7218                           ;RF_Control_B1.c: 287: setTxData();
  7219  0D89  3186  26E4         	fcall	_setTxData
  7220                           
  7221                           ;RF_Control_B1.c: 288: RF1.RunTime = 10;
  7222  0D8B  300A               	movlw	10
  7223  0D8C  0021               	movlb	1	; select bank1
  7224  0D8D  00C2               	movwf	(_RF1^(0+128)+7)
  7225  0D8E  3000               	movlw	0
  7226  0D8F  00C3               	movwf	(_RF1^(0+128)+8)
  7227                           
  7228                           ;RF_Control_B1.c: 294: } else {
  7229  0D90  0008               	return
  7230  0D91                     l6969:	
  7231                           
  7232                           ;RF_Control_B1.c: 296: if (error == 0) {
  7233  0D91  0020               	movlb	0	; select bank0
  7234  0D92  08EC               	movf	getRxData@error,f
  7235  0D93  1D03               	skipz
  7236  0D94  0008               	return
  7237                           
  7238                           ;RF_Control_B1.c: 297: if (RF1.Learn == 1) {
  7239  0D95  0021               	movlb	1	; select bank1
  7240  0D96  1F3B               	btfss	_RF1^(0+128),6
  7241  0D97  2DA8               	goto	l6981
  7242                           
  7243                           ;RF_Control_B1.c: 298: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7244  0D98  0022               	movlb	2	; select bank2
  7245  0D99  08A0               	movf	_RF_Data^(0+256),f
  7246  0D9A  1D03               	skipz
  7247  0D9B  2DA5               	goto	l2020
  7248  0D9C  0821               	movf	(_RF_Data^(0+256)+1),w
  7249  0D9D  3A64               	xorlw	100
  7250  0D9E  1D03               	skipz
  7251  0D9F  2DA5               	goto	l2020
  7252                           
  7253                           ;RF_Control_B1.c: 299: setLog_Code();
  7254  0DA0  3193  232E         	fcall	_setLog_Code
  7255                           
  7256                           ;RF_Control_B1.c: 300: RF1.Checked = 1;
  7257  0DA2  0021               	movlb	1	; select bank1
  7258  0DA3  15BC               	bsf	(_RF1^(0+128)+1),3
  7259                           
  7260                           ;RF_Control_B1.c: 301: } else {
  7261  0DA4  0008               	return
  7262  0DA5                     l2020:	
  7263                           
  7264                           ;RF_Control_B1.c: 302: RF1.Checked = 0;
  7265  0DA5  0021               	movlb	1	; select bank1
  7266  0DA6  11BC               	bcf	(_RF1^(0+128)+1),3
  7267                           
  7268                           ;RF_Control_B1.c: 303: }
  7269                           ;RF_Control_B1.c: 304: } else {
  7270  0DA7  0008               	return
  7271  0DA8                     l6981:	
  7272                           
  7273                           ;RF_Control_B1.c: 305: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7274  0DA8  0022               	movlb	2	; select bank2
  7275  0DA9  08A0               	movf	_RF_Data^(0+256),f
  7276  0DAA  1D03               	skipz
  7277  0DAB  2DE6               	goto	l7003
  7278  0DAC  0821               	movf	(_RF_Data^(0+256)+1),w
  7279  0DAD  3A02               	xorlw	2
  7280  0DAE  1D03               	skipz
  7281  0DAF  2DE6               	goto	l7003
  7282                           
  7283                           ;RF_Control_B1.c: 307: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7284  0DB0  082C               	movf	(_RF_Data^(0+256)+12),w
  7285  0DB1  3AFF               	xorlw	255
  7286  0DB2  1D03               	skipz
  7287  0DB3  2DC0               	goto	l6993
  7288  0DB4  082D               	movf	(_RF_Data^(0+256)+13),w
  7289  0DB5  3AFF               	xorlw	255
  7290  0DB6  1D03               	skipz
  7291  0DB7  2DC0               	goto	l6993
  7292  0DB8  082E               	movf	(_RF_Data^(0+256)+14),w
  7293  0DB9  3AFF               	xorlw	255
  7294  0DBA  1D03               	skipz
  7295  0DBB  2DC0               	goto	l6993
  7296                           
  7297                           ;RF_Control_B1.c: 308: __nop();
  7298  0DBC  0000               	nop
  7299                           
  7300                           ;RF_Control_B1.c: 309: RF1.Checked = 0;
  7301  0DBD  0021               	movlb	1	; select bank1
  7302  0DBE  11BC               	bcf	(_RF1^(0+128)+1),3
  7303                           
  7304                           ;RF_Control_B1.c: 310: } else {
  7305  0DBF  0008               	return
  7306  0DC0                     l6993:	
  7307                           
  7308                           ;RF_Control_B1.c: 311: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7309  0DC0  0020               	movlb	0	; select bank0
  7310  0DC1  086E               	movf	_product,w
  7311  0DC2  3E0C               	addlw	12
  7312  0DC3  0086               	movwf	6
  7313  0DC4  3002               	movlw	2	; select bank4/5
  7314  0DC5  0087               	movwf	7
  7315  0DC6  0022               	movlb	2	; select bank2
  7316  0DC7  082C               	movf	(_RF_Data^(0+256)+12),w
  7317  0DC8  0601               	xorwf	1,w
  7318  0DC9  1D03               	skipz
  7319  0DCA  0008               	return
  7320  0DCB  0020               	movlb	0	; select bank0
  7321  0DCC  086E               	movf	_product,w
  7322  0DCD  3E0D               	addlw	13
  7323  0DCE  0086               	movwf	6
  7324  0DCF  3002               	movlw	2	; select bank4/5
  7325  0DD0  0087               	movwf	7
  7326  0DD1  0022               	movlb	2	; select bank2
  7327  0DD2  082D               	movf	(_RF_Data^(0+256)+13),w
  7328  0DD3  0601               	xorwf	1,w
  7329  0DD4  1D03               	skipz
  7330  0DD5  0008               	return
  7331  0DD6  0020               	movlb	0	; select bank0
  7332  0DD7  086E               	movf	_product,w
  7333  0DD8  3E0E               	addlw	14
  7334  0DD9  0086               	movwf	6
  7335  0DDA  3002               	movlw	2	; select bank4/5
  7336  0DDB  0087               	movwf	7
  7337  0DDC  0022               	movlb	2	; select bank2
  7338  0DDD  082E               	movf	(_RF_Data^(0+256)+14),w
  7339  0DDE  0601               	xorwf	1,w
  7340  0DDF  1D03               	skipz
  7341  0DE0  0008               	return
  7342                           
  7343                           ;RF_Control_B1.c: 312: setControl_Lights_Table();
  7344  0DE1  318B  2375         	fcall	_setControl_Lights_Table
  7345                           
  7346                           ;RF_Control_B1.c: 313: RF1.Checked = 1;
  7347  0DE3  0021               	movlb	1	; select bank1
  7348  0DE4  15BC               	bsf	(_RF1^(0+128)+1),3
  7349                           
  7350                           ;RF_Control_B1.c: 314: }
  7351                           ;RF_Control_B1.c: 315: }
  7352                           ;RF_Control_B1.c: 316: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7353  0DE5  0008               	return
  7354  0DE6                     l7003:	
  7355  0DE6  0022               	movlb	2	; select bank2
  7356  0DE7  0820               	movf	_RF_Data^(0+256),w
  7357  0DE8  3AFF               	xorlw	255
  7358  0DE9  1D03               	skipz
  7359  0DEA  2DF1               	goto	l7009
  7360  0DEB  0821               	movf	(_RF_Data^(0+256)+1),w
  7361  0DEC  3A02               	xorlw	2
  7362  0DED  1D03               	skipz
  7363  0DEE  2DF1               	goto	l7009
  7364                           
  7365                           ;RF_Control_B1.c: 317: __nop();
  7366  0DEF  0000               	nop
  7367                           
  7368                           ;RF_Control_B1.c: 318: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7369  0DF0  0008               	return
  7370  0DF1                     l7009:	
  7371  0DF1  0022               	movlb	2	; select bank2
  7372  0DF2  08A0               	movf	_RF_Data^(0+256),f
  7373  0DF3  1D03               	skipz
  7374  0DF4  2DFB               	goto	l2030
  7375  0DF5  0821               	movf	(_RF_Data^(0+256)+1),w
  7376  0DF6  3A65               	xorlw	101
  7377  0DF7  1D03               	skipz
  7378  0DF8  2DFB               	goto	l2030
  7379                           
  7380                           ;RF_Control_B1.c: 319: __nop();
  7381  0DF9  0000               	nop
  7382                           
  7383                           ;RF_Control_B1.c: 320: } else {
  7384  0DFA  0008               	return
  7385  0DFB                     l2030:	
  7386                           
  7387                           ;RF_Control_B1.c: 321: RF1.Checked = 0;
  7388  0DFB  0021               	movlb	1	; select bank1
  7389  0DFC  11BC               	bcf	(_RF1^(0+128)+1),3
  7390                           
  7391                           ;RF_Control_B1.c: 329: ;
  7392                           
  7393                           ;RF_Control_B1.c: 322: }
  7394                           ;RF_Control_B1.c: 327: }
  7395                           ;RF_Control_B1.c: 328: } else {
  7396  0DFD  0008               	return
  7397  0DFE                     __end_of_getRxData:	
  7398                           
  7399                           	psect	text26
  7400  132E                     __ptext26:	
  7401 ;; *************** function _setLog_Code *****************
  7402 ;; Defined at:
  7403 ;;		line 335 in file "../src/RF_Control_B1.c"
  7404 ;; Parameters:    Size  Location     Type
  7405 ;;		None
  7406 ;; Auto vars:     Size  Location     Type
  7407 ;;		None
  7408 ;; Return value:  Size  Location     Type
  7409 ;;		None               void
  7410 ;; Registers used:
  7411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7412 ;; Tracked objects:
  7413 ;;		On entry : 0/0
  7414 ;;		On exit  : 0/0
  7415 ;;		Unchanged: 0/0
  7416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7419 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7420 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7421 ;;Total ram usage:        1 bytes
  7422 ;; Hardware stack levels used:    1
  7423 ;; Hardware stack levels required when called:    7
  7424 ;; This function calls:
  7425 ;;		_setBuz
  7426 ;;		_setMemory_LoopSave
  7427 ;;		_setMemory_Modify
  7428 ;; This function is called by:
  7429 ;;		_getRxData
  7430 ;; This function uses a non-reentrant model
  7431 ;;
  7432                           
  7433                           
  7434                           ;psect for function _setLog_Code
  7435  132E                     _setLog_Code:	
  7436                           
  7437                           ;RF_Control_B1.c: 336: RF1.Learn = 0;
  7438                           
  7439                           ;incstack = 0
  7440                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7441  132E  0021               	movlb	1	; select bank1
  7442  132F  133B               	bcf	_RF1^(0+128),6
  7443                           
  7444                           ;RF_Control_B1.c: 337: product->Data[12]=RF_Data[12];
  7445  1330  0022               	movlb	2	; select bank2
  7446  1331  082C               	movf	(_RF_Data^(0+256)+12),w
  7447  1332  0020               	movlb	0	; select bank0
  7448  1333  00AD               	movwf	??_setLog_Code
  7449  1334  086E               	movf	_product,w
  7450  1335  3E0C               	addlw	12
  7451  1336  0086               	movwf	6
  7452  1337  3002               	movlw	2	; select bank4/5
  7453  1338  0087               	movwf	7
  7454  1339  082D               	movf	??_setLog_Code,w
  7455  133A  0081               	movwf	1
  7456                           
  7457                           ;RF_Control_B1.c: 338: product->Data[13]=RF_Data[13];
  7458  133B  0022               	movlb	2	; select bank2
  7459  133C  082D               	movf	(_RF_Data^(0+256)+13),w
  7460  133D  0020               	movlb	0	; select bank0
  7461  133E  00AD               	movwf	??_setLog_Code
  7462  133F  086E               	movf	_product,w
  7463  1340  3E0D               	addlw	13
  7464  1341  0086               	movwf	6
  7465  1342  3002               	movlw	2	; select bank4/5
  7466  1343  0087               	movwf	7
  7467  1344  082D               	movf	??_setLog_Code,w
  7468  1345  0081               	movwf	1
  7469                           
  7470                           ;RF_Control_B1.c: 339: product->Data[14]=RF_Data[14];
  7471  1346  0022               	movlb	2	; select bank2
  7472  1347  082E               	movf	(_RF_Data^(0+256)+14),w
  7473  1348  0020               	movlb	0	; select bank0
  7474  1349  00AD               	movwf	??_setLog_Code
  7475  134A  086E               	movf	_product,w
  7476  134B  3E0E               	addlw	14
  7477  134C  0086               	movwf	6
  7478  134D  3002               	movlw	2	; select bank4/5
  7479  134E  0087               	movwf	7
  7480  134F  082D               	movf	??_setLog_Code,w
  7481  1350  0081               	movwf	1
  7482                           
  7483                           ;RF_Control_B1.c: 340: setBuz(1, 100);
  7484  1351  3064               	movlw	100
  7485  1352  00A9               	movwf	setBuz@time
  7486  1353  3000               	movlw	0
  7487  1354  00AA               	movwf	setBuz@time+1
  7488  1355  3001               	movlw	1
  7489  1356  3197  274E  3193   	fcall	_setBuz
  7490                           
  7491                           ;RF_Control_B1.c: 341: if (myMain.First == 1) {
  7492  1359  0021               	movlb	1	; select bank1
  7493  135A  1EA0               	btfss	_myMain^(0+128),5
  7494  135B  2B60               	goto	l2036
  7495                           
  7496                           ;RF_Control_B1.c: 342: setMemory_LoopSave(1);
  7497  135C  3001               	movlw	1
  7498  135D  319D  25DF  3193   	fcall	_setMemory_LoopSave
  7499  1360                     l2036:	
  7500                           
  7501                           ;RF_Control_B1.c: 343: }
  7502                           ;RF_Control_B1.c: 344: setMemory_Modify(1);
  7503  1360  3001               	movlw	1
  7504  1361  319D  25CC         	fcall	_setMemory_Modify
  7505  1363  0008               	return
  7506  1364                     __end_of_setLog_Code:	
  7507                           
  7508                           	psect	text27
  7509  1DDF                     __ptext27:	
  7510 ;; *************** function _setMemory_LoopSave *****************
  7511 ;; Defined at:
  7512 ;;		line 1031 in file "../src/MCU_B1.c"
  7513 ;; Parameters:    Size  Location     Type
  7514 ;;  command         1    wreg     unsigned char 
  7515 ;; Auto vars:     Size  Location     Type
  7516 ;;  command         1    1[BANK0 ] unsigned char 
  7517 ;; Return value:  Size  Location     Type
  7518 ;;		None               void
  7519 ;; Registers used:
  7520 ;;		wreg, status,2, status,0
  7521 ;; Tracked objects:
  7522 ;;		On entry : 0/0
  7523 ;;		On exit  : 0/0
  7524 ;;		Unchanged: 0/0
  7525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7527 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7528 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7529 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7530 ;;Total ram usage:        2 bytes
  7531 ;; Hardware stack levels used:    1
  7532 ;; Hardware stack levels required when called:    5
  7533 ;; This function calls:
  7534 ;;		Nothing
  7535 ;; This function is called by:
  7536 ;;		_setLog_Code
  7537 ;; This function uses a non-reentrant model
  7538 ;;
  7539                           
  7540                           
  7541                           ;psect for function _setMemory_LoopSave
  7542  1DDF                     _setMemory_LoopSave:	
  7543                           
  7544                           ;incstack = 0
  7545                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7546                           ;setMemory_LoopSave@command stored from wreg
  7547  1DDF  0020               	movlb	0	; select bank0
  7548  1DE0  00A1               	movwf	setMemory_LoopSave@command
  7549                           
  7550                           ;MCU_B1.c: 1032: Memory.LoopSave = command == 1 ? 1 : 0;
  7551  1DE1  0821               	movf	setMemory_LoopSave@command,w
  7552  1DE2  3A01               	xorlw	1
  7553  1DE3  3000               	movlw	0
  7554  1DE4  1903               	skipnz
  7555  1DE5  3001               	movlw	1
  7556  1DE6  00A0               	movwf	??_setMemory_LoopSave
  7557  1DE7  0DA0               	rlf	??_setMemory_LoopSave,f
  7558  1DE8  0DA0               	rlf	??_setMemory_LoopSave,f
  7559  1DE9  0024               	movlb	4	; select bank4
  7560  1DEA  0844               	movf	(_Memory^(0+512)+36),w
  7561  1DEB  0020               	movlb	0	; select bank0
  7562  1DEC  0620               	xorwf	??_setMemory_LoopSave,w
  7563  1DED  39FB               	andlw	-5
  7564  1DEE  0620               	xorwf	??_setMemory_LoopSave,w
  7565  1DEF  0024               	movlb	4	; select bank4
  7566  1DF0  00C4               	movwf	(_Memory^(0+512)+36)
  7567  1DF1  0008               	return
  7568  1DF2                     __end_of_setMemory_LoopSave:	
  7569                           
  7570                           	psect	text28
  7571  0B75                     __ptext28:	
  7572 ;; *************** function _setControl_Lights_Table *****************
  7573 ;; Defined at:
  7574 ;;		line 348 in file "../src/RF_Control_B1.c"
  7575 ;; Parameters:    Size  Location     Type
  7576 ;;		None
  7577 ;; Auto vars:     Size  Location     Type
  7578 ;;		None
  7579 ;; Return value:  Size  Location     Type
  7580 ;;		None               void
  7581 ;; Registers used:
  7582 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7583 ;; Tracked objects:
  7584 ;;		On entry : 0/0
  7585 ;;		On exit  : 0/0
  7586 ;;		Unchanged: 0/0
  7587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7592 ;;Total ram usage:        0 bytes
  7593 ;; Hardware stack levels used:    1
  7594 ;; Hardware stack levels required when called:   11
  7595 ;; This function calls:
  7596 ;;		_setBuz
  7597 ;;		_setDimmerLights_ErrorClose
  7598 ;;		_setRFSW_AdjControl
  7599 ;;		_setRFSW_Control
  7600 ;;		_setTxData
  7601 ;; This function is called by:
  7602 ;;		_getRxData
  7603 ;; This function uses a non-reentrant model
  7604 ;;
  7605                           
  7606                           
  7607                           ;psect for function _setControl_Lights_Table
  7608  0B75                     _setControl_Lights_Table:	
  7609                           
  7610                           ;RF_Control_B1.c: 349: switch (RF_Data[15]) {
  7611                           
  7612                           ;incstack = 0
  7613                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7614  0B75  2BC1               	goto	l6639
  7615  0B76                     l6613:	
  7616                           ;RF_Control_B1.c: 350: case 0x00:
  7617                           
  7618                           
  7619                           ;RF_Control_B1.c: 352: setDimmerLights_ErrorClose(255);
  7620  0B76  30FF               	movlw	255
  7621  0B77  3188  2014  318B   	fcall	_setDimmerLights_ErrorClose
  7622                           
  7623                           ;RF_Control_B1.c: 354: product->Data[9]=0;
  7624  0B7A  0020               	movlb	0	; select bank0
  7625  0B7B  086E               	movf	_product,w
  7626  0B7C  3E09               	addlw	9
  7627  0B7D  0086               	movwf	6
  7628  0B7E  3002               	movlw	2	; select bank4/5
  7629  0B7F  0087               	movwf	7
  7630  0B80  0181               	clrf	1
  7631                           
  7632                           ;RF_Control_B1.c: 355: product->Data[11]=0;
  7633  0B81  086E               	movf	_product,w
  7634  0B82  3E0B               	addlw	11
  7635  0B83  0086               	movwf	6
  7636  0B84  3002               	movlw	2	; select bank4/5
  7637  0B85  0087               	movwf	7
  7638  0B86  0181               	clrf	1
  7639                           
  7640                           ;RF_Control_B1.c: 356: product->Data[15]=0;
  7641  0B87  086E               	movf	_product,w
  7642  0B88  3E0F               	addlw	15
  7643  0B89  0086               	movwf	6
  7644  0B8A  3002               	movlw	2	; select bank4/5
  7645  0B8B  0087               	movwf	7
  7646  0B8C  0181               	clrf	1
  7647                           
  7648                           ;RF_Control_B1.c: 357: product->Data[17]=0;
  7649  0B8D  086E               	movf	_product,w
  7650  0B8E  3E11               	addlw	17
  7651  0B8F  0086               	movwf	6
  7652  0B90  3002               	movlw	2	; select bank4/5
  7653  0B91  0087               	movwf	7
  7654  0B92  0181               	clrf	1
  7655                           
  7656                           ;RF_Control_B1.c: 358: setBuz(1, 100);
  7657  0B93  3064               	movlw	100
  7658  0B94  00A9               	movwf	setBuz@time
  7659  0B95  3000               	movlw	0
  7660  0B96  00AA               	movwf	setBuz@time+1
  7661  0B97  3001               	movlw	1
  7662  0B98  3197  274E         	fcall	_setBuz
  7663                           
  7664                           ;RF_Control_B1.c: 360: break;
  7665  0B9A  0008               	return
  7666  0B9B                     l6625:	
  7667                           ;RF_Control_B1.c: 361: case 0x20:
  7668                           
  7669                           
  7670                           ;RF_Control_B1.c: 362: product->Data[9]=0;
  7671  0B9B  0020               	movlb	0	; select bank0
  7672  0B9C  086E               	movf	_product,w
  7673  0B9D  3E09               	addlw	9
  7674  0B9E  0086               	movwf	6
  7675  0B9F  3002               	movlw	2	; select bank4/5
  7676  0BA0  0087               	movwf	7
  7677  0BA1  0181               	clrf	1
  7678                           
  7679                           ;RF_Control_B1.c: 363: product->Data[11]=0;
  7680  0BA2  086E               	movf	_product,w
  7681  0BA3  3E0B               	addlw	11
  7682  0BA4  0086               	movwf	6
  7683  0BA5  3002               	movlw	2	; select bank4/5
  7684  0BA6  0087               	movwf	7
  7685  0BA7  0181               	clrf	1
  7686                           
  7687                           ;RF_Control_B1.c: 364: product->Data[17]=0;
  7688  0BA8  086E               	movf	_product,w
  7689  0BA9  3E11               	addlw	17
  7690  0BAA  0086               	movwf	6
  7691  0BAB  3002               	movlw	2	; select bank4/5
  7692  0BAC  0087               	movwf	7
  7693  0BAD  0181               	clrf	1
  7694                           
  7695                           ;RF_Control_B1.c: 365: setTxData();
  7696  0BAE  3186  26E4         	fcall	_setTxData
  7697                           
  7698                           ;RF_Control_B1.c: 366: break;
  7699  0BB0  0008               	return
  7700  0BB1                     l6629:	
  7701                           ;RF_Control_B1.c: 367: case 0x01:
  7702                           
  7703                           
  7704                           ;RF_Control_B1.c: 369: setRFSW_Control(1);
  7705  0BB1  3001               	movlw	1
  7706  0BB2  3196  2603         	fcall	_setRFSW_Control
  7707                           
  7708                           ;RF_Control_B1.c: 371: break;
  7709  0BB4  0008               	return
  7710  0BB5                     l6631:	
  7711                           ;RF_Control_B1.c: 372: case 0x02:
  7712                           
  7713                           
  7714                           ;RF_Control_B1.c: 374: setRFSW_Control(2);
  7715  0BB5  3002               	movlw	2
  7716  0BB6  3196  2603         	fcall	_setRFSW_Control
  7717                           
  7718                           ;RF_Control_B1.c: 381: break;
  7719                           
  7720                           ;RF_Control_B1.c: 377: case 0x03:
  7721                           
  7722                           ;RF_Control_B1.c: 376: break;
  7723  0BB8  0008               	return
  7724  0BB9                     l6633:	
  7725                           ;RF_Control_B1.c: 382: case 0x11:
  7726                           
  7727                           
  7728                           ;RF_Control_B1.c: 385: setRFSW_AdjControl(1);
  7729  0BB9  3001               	movlw	1
  7730  0BBA  3194  2454         	fcall	_setRFSW_AdjControl
  7731                           
  7732                           ;RF_Control_B1.c: 388: break;
  7733  0BBC  0008               	return
  7734  0BBD                     l6635:	
  7735                           ;RF_Control_B1.c: 389: case 0x21:
  7736                           
  7737                           
  7738                           ;RF_Control_B1.c: 392: setRFSW_AdjControl(2);
  7739  0BBD  3002               	movlw	2
  7740  0BBE  3194  2454         	fcall	_setRFSW_AdjControl
  7741                           
  7742                           ;RF_Control_B1.c: 403: }
  7743                           
  7744                           ;RF_Control_B1.c: 402: break;
  7745                           
  7746                           ;RF_Control_B1.c: 396: case 0x31:
  7747                           
  7748                           ;RF_Control_B1.c: 395: break;
  7749  0BC0  0008               	return
  7750  0BC1                     l6639:	
  7751  0BC1  0022               	movlb	2	; select bank2
  7752  0BC2  082F               	movf	(_RF_Data^(0+256)+15),w
  7753                           
  7754                           ; Switch size 1, requested type "space"
  7755                           ; Number of cases is 8, Range of values is 0 to 49
  7756                           ; switch strategies available:
  7757                           ; Name         Instructions Cycles
  7758                           ; simple_byte           25    13 (average)
  7759                           ; direct_byte          106     6 (fixed)
  7760                           ; jumptable            260     6 (fixed)
  7761                           ;	Chosen strategy is simple_byte
  7762  0BC3  3A00               	xorlw	0	; case 0
  7763  0BC4  1903               	skipnz
  7764  0BC5  2B76               	goto	l6613
  7765  0BC6  3A01               	xorlw	1	; case 1
  7766  0BC7  1903               	skipnz
  7767  0BC8  2BB1               	goto	l6629
  7768  0BC9  3A03               	xorlw	3	; case 2
  7769  0BCA  1903               	skipnz
  7770  0BCB  2BB5               	goto	l6631
  7771  0BCC  3A01               	xorlw	1	; case 3
  7772  0BCD  1903               	skipnz
  7773  0BCE  2BDC               	goto	l2050
  7774  0BCF  3A12               	xorlw	18	; case 17
  7775  0BD0  1903               	skipnz
  7776  0BD1  2BB9               	goto	l6633
  7777  0BD2  3A31               	xorlw	49	; case 32
  7778  0BD3  1903               	skipnz
  7779  0BD4  2B9B               	goto	l6625
  7780  0BD5  3A01               	xorlw	1	; case 33
  7781  0BD6  1903               	skipnz
  7782  0BD7  2BBD               	goto	l6635
  7783  0BD8  3A10               	xorlw	16	; case 49
  7784  0BD9  1903               	skipnz
  7785  0BDA  2BDC               	goto	l2050
  7786  0BDB  2BDC               	goto	l2050
  7787  0BDC                     l2050:	
  7788  0BDC  0008               	return
  7789  0BDD                     __end_of_setControl_Lights_Table:	
  7790                           
  7791                           	psect	text29
  7792  1603                     __ptext29:	
  7793 ;; *************** function _setRFSW_Control *****************
  7794 ;; Defined at:
  7795 ;;		line 430 in file "../src/RF_Control_B1.c"
  7796 ;; Parameters:    Size  Location     Type
  7797 ;;  sw              1    wreg     unsigned char 
  7798 ;; Auto vars:     Size  Location     Type
  7799 ;;  sw              1   19[BANK0 ] unsigned char 
  7800 ;;  status          1   18[BANK0 ] unsigned char 
  7801 ;; Return value:  Size  Location     Type
  7802 ;;		None               void
  7803 ;; Registers used:
  7804 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7805 ;; Tracked objects:
  7806 ;;		On entry : 0/0
  7807 ;;		On exit  : 0/0
  7808 ;;		Unchanged: 0/0
  7809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7811 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7812 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7813 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7814 ;;Total ram usage:        3 bytes
  7815 ;; Hardware stack levels used:    1
  7816 ;; Hardware stack levels required when called:    9
  7817 ;; This function calls:
  7818 ;;		_getDelayOff_GO
  7819 ;;		_getDimmerLights_Status
  7820 ;;		_setBuz
  7821 ;;		_setDelayOff_GO
  7822 ;;		_setDimmerLights_SwOff
  7823 ;;		_setDimmerLights_SwOn
  7824 ;;		_setRF_DimmerLights
  7825 ;;		_setTxData
  7826 ;; This function is called by:
  7827 ;;		_setControl_Lights_Table
  7828 ;; This function uses a non-reentrant model
  7829 ;;
  7830                           
  7831                           
  7832                           ;psect for function _setRFSW_Control
  7833  1603                     _setRFSW_Control:	
  7834                           
  7835                           ;incstack = 0
  7836                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7837                           ;setRFSW_Control@sw stored from wreg
  7838  1603  0020               	movlb	0	; select bank0
  7839  1604  00B3               	movwf	setRFSW_Control@sw
  7840                           
  7841                           ;RF_Control_B1.c: 431: char status = 0;
  7842  1605  01B2               	clrf	setRFSW_Control@status
  7843                           
  7844                           ;RF_Control_B1.c: 434: if (RF_Data[16] == 0x80) {
  7845  1606  0022               	movlb	2	; select bank2
  7846  1607  0830               	movf	(_RF_Data^(0+256)+16),w
  7847  1608  3A80               	xorlw	128
  7848  1609  1D03               	skipz
  7849  160A  2E36               	goto	l6457
  7850                           
  7851                           ;RF_Control_B1.c: 435: setDelayOff_GO(sw, 1, RF_Data[17]);
  7852  160B  0020               	movlb	0	; select bank0
  7853  160C  01AA               	clrf	setDelayOff_GO@command
  7854  160D  0AAA               	incf	setDelayOff_GO@command,f
  7855  160E  0022               	movlb	2	; select bank2
  7856  160F  0831               	movf	(_RF_Data^(0+256)+17),w
  7857  1610  0020               	movlb	0	; select bank0
  7858  1611  00B1               	movwf	??_setRFSW_Control
  7859  1612  0831               	movf	??_setRFSW_Control,w
  7860  1613  00AB               	movwf	setDelayOff_GO@value
  7861  1614  0833               	movf	setRFSW_Control@sw,w
  7862  1615  3189  2126  3196   	fcall	_setDelayOff_GO
  7863                           
  7864                           ;RF_Control_B1.c: 436: if (getDimmerLights_Status(sw) == 1) {
  7865  1618  0020               	movlb	0	; select bank0
  7866  1619  0833               	movf	setRFSW_Control@sw,w
  7867  161A  319D  250D  3196   	fcall	_getDimmerLights_Status
  7868  161D  3A01               	xorlw	1
  7869  161E  1D03               	skipz
  7870  161F  2E45               	goto	l6461
  7871                           
  7872                           ;RF_Control_B1.c: 437: setBuz(1, 100);
  7873  1620  3064               	movlw	100
  7874  1621  0020               	movlb	0	; select bank0
  7875  1622  00A9               	movwf	setBuz@time
  7876  1623  3000               	movlw	0
  7877  1624  00AA               	movwf	setBuz@time+1
  7878  1625  3001               	movlw	1
  7879  1626  3197  274E  3196   	fcall	_setBuz
  7880                           
  7881                           ;RF_Control_B1.c: 438: status = 1;
  7882  1629  0020               	movlb	0	; select bank0
  7883  162A  01B2               	clrf	setRFSW_Control@status
  7884  162B  0AB2               	incf	setRFSW_Control@status,f
  7885                           
  7886                           ;RF_Control_B1.c: 439: setRF_DimmerLights(sw, 1);
  7887  162C  01A0               	clrf	setRF_DimmerLights@on
  7888  162D  0AA0               	incf	setRF_DimmerLights@on,f
  7889  162E  0833               	movf	setRFSW_Control@sw,w
  7890  162F  3188  206E  3196   	fcall	_setRF_DimmerLights
  7891                           
  7892                           ;RF_Control_B1.c: 440: setTxData();
  7893  1632  3186  26E4  3196   	fcall	_setTxData
  7894                           
  7895                           ;RF_Control_B1.c: 442: }
  7896                           ;RF_Control_B1.c: 443: } else {
  7897  1635  2E45               	goto	l6461
  7898  1636                     l6457:	
  7899                           
  7900                           ;RF_Control_B1.c: 445: if (getDelayOff_GO(sw) == 1) {
  7901  1636  0020               	movlb	0	; select bank0
  7902  1637  0833               	movf	setRFSW_Control@sw,w
  7903  1638  319D  251D  3196   	fcall	_getDelayOff_GO
  7904  163B  3A01               	xorlw	1
  7905  163C  1D03               	skipz
  7906  163D  2E45               	goto	l6461
  7907                           
  7908                           ;RF_Control_B1.c: 446: setDelayOff_GO(sw, 0, 0);
  7909  163E  0020               	movlb	0	; select bank0
  7910  163F  01AA               	clrf	setDelayOff_GO@command
  7911  1640  01AB               	clrf	setDelayOff_GO@value
  7912  1641  0833               	movf	setRFSW_Control@sw,w
  7913  1642  3189  2126  3196   	fcall	_setDelayOff_GO
  7914  1645                     l6461:	
  7915                           
  7916                           ;RF_Control_B1.c: 447: }
  7917                           ;RF_Control_B1.c: 449: }
  7918                           ;RF_Control_B1.c: 450: if (status == 0) {
  7919  1645  0020               	movlb	0	; select bank0
  7920  1646  08B2               	movf	setRFSW_Control@status,f
  7921  1647  1D03               	skipz
  7922  1648  0008               	return
  7923                           
  7924                           ;RF_Control_B1.c: 452: setDimmerLights_SwOn(sw);
  7925  1649  0833               	movf	setRFSW_Control@sw,w
  7926  164A  3193  239B  3196   	fcall	_setDimmerLights_SwOn
  7927                           
  7928                           ;RF_Control_B1.c: 453: setDimmerLights_SwOff(sw);
  7929  164D  0020               	movlb	0	; select bank0
  7930  164E  0833               	movf	setRFSW_Control@sw,w
  7931  164F  3194  24D7         	fcall	_setDimmerLights_SwOff
  7932  1651  0008               	return
  7933  1652                     __end_of_setRFSW_Control:	
  7934                           
  7935                           	psect	text30
  7936  139B                     __ptext30:	
  7937 ;; *************** function _setDimmerLights_SwOn *****************
  7938 ;; Defined at:
  7939 ;;		line 505 in file "../src/Dimmer_B1.c"
  7940 ;; Parameters:    Size  Location     Type
  7941 ;;  sw              1    wreg     unsigned char 
  7942 ;; Auto vars:     Size  Location     Type
  7943 ;;  sw              1   15[BANK0 ] unsigned char 
  7944 ;;  idle            1   14[BANK0 ] unsigned char 
  7945 ;; Return value:  Size  Location     Type
  7946 ;;		None               void
  7947 ;; Registers used:
  7948 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7949 ;; Tracked objects:
  7950 ;;		On entry : 0/0
  7951 ;;		On exit  : 0/0
  7952 ;;		Unchanged: 0/0
  7953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7955 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7956 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7957 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7958 ;;Total ram usage:        3 bytes
  7959 ;; Hardware stack levels used:    1
  7960 ;; Hardware stack levels required when called:    7
  7961 ;; This function calls:
  7962 ;;		_DimmerLightsPointSelect
  7963 ;;		_getAll_DimmerLights_AdjGO
  7964 ;;		_setBuz
  7965 ;;		_setDimmerLights_Trigger
  7966 ;; This function is called by:
  7967 ;;		_setRFSW_Control
  7968 ;;		_setSw_Main
  7969 ;; This function uses a non-reentrant model
  7970 ;;
  7971                           
  7972                           
  7973                           ;psect for function _setDimmerLights_SwOn
  7974  139B                     _setDimmerLights_SwOn:	
  7975                           
  7976                           ;incstack = 0
  7977                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7978                           ;setDimmerLights_SwOn@sw stored from wreg
  7979  139B  0020               	movlb	0	; select bank0
  7980  139C  00AF               	movwf	setDimmerLights_SwOn@sw
  7981                           
  7982                           ;Dimmer_B1.c: 506: DimmerLightsPointSelect(sw);
  7983  139D  082F               	movf	setDimmerLights_SwOn@sw,w
  7984  139E  319D  25B9  3193   	fcall	_DimmerLightsPointSelect
  7985                           
  7986                           ;Dimmer_B1.c: 507: char idle = 0;
  7987  13A1  0020               	movlb	0	; select bank0
  7988  13A2  01AE               	clrf	setDimmerLights_SwOn@idle
  7989                           
  7990                           ;Dimmer_B1.c: 509: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
  7991  13A3  319D  253E  3193   	fcall	_getAll_DimmerLights_AdjGO
  7992  13A6  3A01               	xorlw	1
  7993  13A7  3000               	movlw	0
  7994  13A8  1903               	skipnz
  7995  13A9  3001               	movlw	1
  7996  13AA  0020               	movlb	0	; select bank0
  7997  13AB  00AD               	movwf	??_setDimmerLights_SwOn
  7998  13AC  082D               	movf	??_setDimmerLights_SwOn,w
  7999  13AD  00AE               	movwf	setDimmerLights_SwOn@idle
  8000                           
  8001                           ;Dimmer_B1.c: 511: if (idle == 0) {
  8002  13AE  08AE               	movf	setDimmerLights_SwOn@idle,f
  8003  13AF  1D03               	skipz
  8004  13B0  0008               	return
  8005                           
  8006                           ;Dimmer_B1.c: 512: DimmerLights->SwFlag = 1;
  8007  13B1  086F               	movf	_DimmerLights,w
  8008  13B2  3E09               	addlw	9
  8009  13B3  0086               	movwf	6
  8010  13B4  3001               	movlw	1	; select bank2/3
  8011  13B5  0087               	movwf	7
  8012  13B6  1701               	bsf	1,6
  8013                           
  8014                           ;Dimmer_B1.c: 513: setBuz(1, 100);
  8015  13B7  3064               	movlw	100
  8016  13B8  00A9               	movwf	setBuz@time
  8017  13B9  3000               	movlw	0
  8018  13BA  00AA               	movwf	setBuz@time+1
  8019  13BB  3001               	movlw	1
  8020  13BC  3197  274E  3193   	fcall	_setBuz
  8021                           
  8022                           ;Dimmer_B1.c: 514: if (DimmerLights->Status == 0) {
  8023  13BF  0020               	movlb	0	; select bank0
  8024  13C0  086F               	movf	_DimmerLights,w
  8025  13C1  0086               	movwf	6
  8026  13C2  3001               	movlw	1	; select bank2/3
  8027  13C3  0087               	movwf	7
  8028  13C4  1A81               	btfsc	1,5
  8029  13C5  2BD1               	goto	l6283
  8030                           
  8031                           ;Dimmer_B1.c: 515: DimmerLights->Status = 1;
  8032  13C6  086F               	movf	_DimmerLights,w
  8033  13C7  0086               	movwf	6
  8034  13C8  3001               	movlw	1	; select bank2/3
  8035  13C9  0087               	movwf	7
  8036  13CA  1681               	bsf	1,5
  8037                           
  8038                           ;Dimmer_B1.c: 516: setDimmerLights_Trigger(sw, 1);
  8039  13CB  01A2               	clrf	setDimmerLights_Trigger@command
  8040  13CC  0AA2               	incf	setDimmerLights_Trigger@command,f
  8041  13CD  082F               	movf	setDimmerLights_SwOn@sw,w
  8042  13CE  319F  2744         	fcall	_setDimmerLights_Trigger
  8043                           
  8044                           ;Dimmer_B1.c: 517: } else {
  8045  13D0  0008               	return
  8046  13D1                     l6283:	
  8047                           
  8048                           ;Dimmer_B1.c: 518: DimmerLights->Status = 0;
  8049  13D1  0020               	movlb	0	; select bank0
  8050  13D2  086F               	movf	_DimmerLights,w
  8051  13D3  0086               	movwf	6
  8052  13D4  3001               	movlw	1	; select bank2/3
  8053  13D5  0087               	movwf	7
  8054  13D6  1281               	bcf	1,5
  8055  13D7  0008               	return
  8056  13D8                     __end_of_setDimmerLights_SwOn:	
  8057                           
  8058                           	psect	text31
  8059  1454                     __ptext31:	
  8060 ;; *************** function _setRFSW_AdjControl *****************
  8061 ;; Defined at:
  8062 ;;		line 459 in file "../src/RF_Control_B1.c"
  8063 ;; Parameters:    Size  Location     Type
  8064 ;;  sw              1    wreg     unsigned char 
  8065 ;; Auto vars:     Size  Location     Type
  8066 ;;  sw              1   74[BANK0 ] unsigned char 
  8067 ;;  status          1   73[BANK0 ] unsigned char 
  8068 ;; Return value:  Size  Location     Type
  8069 ;;		None               void
  8070 ;; Registers used:
  8071 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8072 ;; Tracked objects:
  8073 ;;		On entry : 0/0
  8074 ;;		On exit  : 0/0
  8075 ;;		Unchanged: 0/0
  8076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8078 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8079 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8080 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8081 ;;Total ram usage:        4 bytes
  8082 ;; Hardware stack levels used:    1
  8083 ;; Hardware stack levels required when called:   10
  8084 ;; This function calls:
  8085 ;;		_getDimmerLights_Status
  8086 ;;		_setMemory_Modify
  8087 ;;		_setRF_DimmerValue
  8088 ;;		_setTxData
  8089 ;; This function is called by:
  8090 ;;		_setControl_Lights_Table
  8091 ;; This function uses a non-reentrant model
  8092 ;;
  8093                           
  8094                           
  8095                           ;psect for function _setRFSW_AdjControl
  8096  1454                     _setRFSW_AdjControl:	
  8097                           
  8098                           ;incstack = 0
  8099                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8100                           ;setRFSW_AdjControl@sw stored from wreg
  8101  1454  0020               	movlb	0	; select bank0
  8102  1455  00EA               	movwf	setRFSW_AdjControl@sw
  8103                           
  8104                           ;RF_Control_B1.c: 460: char status = 0;
  8105  1456  01E9               	clrf	setRFSW_AdjControl@status
  8106                           
  8107                           ;RF_Control_B1.c: 462: status = getDimmerLights_Status(sw);
  8108  1457  086A               	movf	setRFSW_AdjControl@sw,w
  8109  1458  319D  250D  3194   	fcall	_getDimmerLights_Status
  8110  145B  0020               	movlb	0	; select bank0
  8111  145C  00E7               	movwf	??_setRFSW_AdjControl
  8112  145D  0867               	movf	??_setRFSW_AdjControl,w
  8113  145E  00E9               	movwf	setRFSW_AdjControl@status
  8114                           
  8115                           ;RF_Control_B1.c: 465: if (status == 1) {
  8116  145F  0869               	movf	setRFSW_AdjControl@status,w
  8117  1460  3A01               	xorlw	1
  8118  1461  1D03               	skipz
  8119  1462  2C6D               	goto	l6475
  8120                           
  8121                           ;RF_Control_B1.c: 466: setMemory_Modify(1);
  8122  1463  3001               	movlw	1
  8123  1464  319D  25CC  3194   	fcall	_setMemory_Modify
  8124                           
  8125                           ;RF_Control_B1.c: 467: setRF_DimmerValue(sw);
  8126  1467  0020               	movlb	0	; select bank0
  8127  1468  086A               	movf	setRFSW_AdjControl@sw,w
  8128  1469  3192  222A  3194   	fcall	_setRF_DimmerValue
  8129                           
  8130                           ;RF_Control_B1.c: 468: } else {
  8131  146C  2C7F               	goto	l2062
  8132  146D                     l6475:	
  8133                           
  8134                           ;RF_Control_B1.c: 469: product->Data[9]=product->Data[20 + sw];
  8135  146D  0020               	movlb	0	; select bank0
  8136  146E  086A               	movf	setRFSW_AdjControl@sw,w
  8137  146F  3E14               	addlw	20
  8138  1470  076E               	addwf	_product,w
  8139  1471  00E7               	movwf	??_setRFSW_AdjControl
  8140  1472  0867               	movf	??_setRFSW_AdjControl,w
  8141  1473  0086               	movwf	6
  8142  1474  3002               	movlw	2	; select bank4/5
  8143  1475  0087               	movwf	7
  8144  1476  0801               	movf	1,w
  8145  1477  00E8               	movwf	??_setRFSW_AdjControl+1
  8146  1478  086E               	movf	_product,w
  8147  1479  3E09               	addlw	9
  8148  147A  0086               	movwf	6
  8149  147B  3002               	movlw	2	; select bank4/5
  8150  147C  0087               	movwf	7
  8151  147D  0868               	movf	??_setRFSW_AdjControl+1,w
  8152  147E  0081               	movwf	1
  8153  147F                     l2062:	
  8154                           
  8155                           ;RF_Control_B1.c: 470: }
  8156                           ;RF_Control_B1.c: 471: product->Data[17]=product->Data[26 + sw];
  8157  147F  0020               	movlb	0	; select bank0
  8158  1480  086A               	movf	setRFSW_AdjControl@sw,w
  8159  1481  3E1A               	addlw	26
  8160  1482  076E               	addwf	_product,w
  8161  1483  00E7               	movwf	??_setRFSW_AdjControl
  8162  1484  0867               	movf	??_setRFSW_AdjControl,w
  8163  1485  0086               	movwf	6
  8164  1486  3002               	movlw	2	; select bank4/5
  8165  1487  0087               	movwf	7
  8166  1488  0801               	movf	1,w
  8167  1489  00E8               	movwf	??_setRFSW_AdjControl+1
  8168  148A  086E               	movf	_product,w
  8169  148B  3E11               	addlw	17
  8170  148C  0086               	movwf	6
  8171  148D  3002               	movlw	2	; select bank4/5
  8172  148E  0087               	movwf	7
  8173  148F  0868               	movf	??_setRFSW_AdjControl+1,w
  8174  1490  0081               	movwf	1
  8175                           
  8176                           ;RF_Control_B1.c: 472: setTxData();
  8177  1491  3186  26E4         	fcall	_setTxData
  8178  1493  0008               	return
  8179  1494                     __end_of_setRFSW_AdjControl:	
  8180                           
  8181                           	psect	text32
  8182  122A                     __ptext32:	
  8183 ;; *************** function _setRF_DimmerValue *****************
  8184 ;; Defined at:
  8185 ;;		line 477 in file "../src/RF_Control_B1.c"
  8186 ;; Parameters:    Size  Location     Type
  8187 ;;  lights          1    wreg     unsigned char 
  8188 ;; Auto vars:     Size  Location     Type
  8189 ;;  lights          1   70[BANK0 ] unsigned char 
  8190 ;; Return value:  Size  Location     Type
  8191 ;;		None               void
  8192 ;; Registers used:
  8193 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8194 ;; Tracked objects:
  8195 ;;		On entry : 0/0
  8196 ;;		On exit  : 0/0
  8197 ;;		Unchanged: 0/0
  8198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8200 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8201 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8202 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8203 ;;Total ram usage:        3 bytes
  8204 ;; Hardware stack levels used:    1
  8205 ;; Hardware stack levels required when called:    9
  8206 ;; This function calls:
  8207 ;;		_setDimmerLights_AdjRF
  8208 ;; This function is called by:
  8209 ;;		_setRFSW_AdjControl
  8210 ;; This function uses a non-reentrant model
  8211 ;;
  8212                           
  8213                           
  8214                           ;psect for function _setRF_DimmerValue
  8215  122A                     _setRF_DimmerValue:	
  8216                           
  8217                           ;incstack = 0
  8218                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8219                           ;setRF_DimmerValue@lights stored from wreg
  8220  122A  0020               	movlb	0	; select bank0
  8221  122B  00E6               	movwf	setRF_DimmerValue@lights
  8222                           
  8223                           ;RF_Control_B1.c: 478: if (RF_Data[9] > 0x64) {
  8224  122C  3065               	movlw	101
  8225  122D  0022               	movlb	2	; select bank2
  8226  122E  0229               	subwf	(_RF_Data^(0+256)+9),w
  8227  122F  1C03               	skipc
  8228  1230  2A37               	goto	l6371
  8229                           
  8230                           ;RF_Control_B1.c: 479: RF_Data[9] = 0x64;
  8231  1231  3064               	movlw	100
  8232  1232  0020               	movlb	0	; select bank0
  8233  1233  00E4               	movwf	??_setRF_DimmerValue
  8234  1234  0864               	movf	??_setRF_DimmerValue,w
  8235  1235  0022               	movlb	2	; select bank2
  8236  1236  00A9               	movwf	(_RF_Data^(0+256)+9)
  8237  1237                     l6371:	
  8238                           
  8239                           ;RF_Control_B1.c: 480: }
  8240                           ;RF_Control_B1.c: 481: product->Data[9]=RF_Data[9];
  8241  1237  0829               	movf	(_RF_Data^(0+256)+9),w
  8242  1238  0020               	movlb	0	; select bank0
  8243  1239  00E4               	movwf	??_setRF_DimmerValue
  8244  123A  086E               	movf	_product,w
  8245  123B  3E09               	addlw	9
  8246  123C  0086               	movwf	6
  8247  123D  3002               	movlw	2	; select bank4/5
  8248  123E  0087               	movwf	7
  8249  123F  0864               	movf	??_setRF_DimmerValue,w
  8250  1240  0081               	movwf	1
  8251                           
  8252                           ;RF_Control_B1.c: 482: product->Data[11]=lights;
  8253  1241  0866               	movf	setRF_DimmerValue@lights,w
  8254  1242  00E4               	movwf	??_setRF_DimmerValue
  8255  1243  086E               	movf	_product,w
  8256  1244  3E0B               	addlw	11
  8257  1245  0086               	movwf	6
  8258  1246  3002               	movlw	2	; select bank4/5
  8259  1247  0087               	movwf	7
  8260  1248  0864               	movf	??_setRF_DimmerValue,w
  8261  1249  0081               	movwf	1
  8262                           
  8263                           ;RF_Control_B1.c: 483: product->Data[(20 + lights)]=RF_Data[9];
  8264  124A  0022               	movlb	2	; select bank2
  8265  124B  0829               	movf	(_RF_Data^(0+256)+9),w
  8266  124C  0020               	movlb	0	; select bank0
  8267  124D  00E4               	movwf	??_setRF_DimmerValue
  8268  124E  0866               	movf	setRF_DimmerValue@lights,w
  8269  124F  3E14               	addlw	20
  8270  1250  076E               	addwf	_product,w
  8271  1251  00E5               	movwf	??_setRF_DimmerValue+1
  8272  1252  0865               	movf	??_setRF_DimmerValue+1,w
  8273  1253  0086               	movwf	6
  8274  1254  3002               	movlw	2	; select bank4/5
  8275  1255  0087               	movwf	7
  8276  1256  0864               	movf	??_setRF_DimmerValue,w
  8277  1257  0081               	movwf	1
  8278                           
  8279                           ;RF_Control_B1.c: 484: setDimmerLights_AdjRF(lights);
  8280  1258  0866               	movf	setRF_DimmerValue@lights,w
  8281  1259  3190  20BE         	fcall	_setDimmerLights_AdjRF
  8282  125B  0008               	return
  8283  125C                     __end_of_setRF_DimmerValue:	
  8284                           
  8285                           	psect	text33
  8286  10BE                     __ptext33:	
  8287 ;; *************** function _setDimmerLights_AdjRF *****************
  8288 ;; Defined at:
  8289 ;;		line 746 in file "../src/Dimmer_B1.c"
  8290 ;; Parameters:    Size  Location     Type
  8291 ;;  lights          1    wreg     unsigned char 
  8292 ;; Auto vars:     Size  Location     Type
  8293 ;;  lights          1   67[BANK0 ] unsigned char 
  8294 ;; Return value:  Size  Location     Type
  8295 ;;		None               void
  8296 ;; Registers used:
  8297 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8298 ;; Tracked objects:
  8299 ;;		On entry : 0/0
  8300 ;;		On exit  : 0/0
  8301 ;;		Unchanged: 0/0
  8302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8304 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8305 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8306 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8307 ;;Total ram usage:        2 bytes
  8308 ;; Hardware stack levels used:    1
  8309 ;; Hardware stack levels required when called:    8
  8310 ;; This function calls:
  8311 ;;		_DimmerLightsPointSelect
  8312 ;;		_getPercentValue
  8313 ;; This function is called by:
  8314 ;;		_setRF_DimmerValue
  8315 ;; This function uses a non-reentrant model
  8316 ;;
  8317                           
  8318                           
  8319                           ;psect for function _setDimmerLights_AdjRF
  8320  10BE                     _setDimmerLights_AdjRF:	
  8321                           
  8322                           ;incstack = 0
  8323                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8324                           ;setDimmerLights_AdjRF@lights stored from wreg
  8325  10BE  0020               	movlb	0	; select bank0
  8326  10BF  00E3               	movwf	setDimmerLights_AdjRF@lights
  8327                           
  8328                           ;Dimmer_B1.c: 747: DimmerLightsPointSelect(lights);
  8329  10C0  0863               	movf	setDimmerLights_AdjRF@lights,w
  8330  10C1  319D  25B9  3190   	fcall	_DimmerLightsPointSelect
  8331                           
  8332                           ;Dimmer_B1.c: 748: DimmerLights->AdjRF = 1;
  8333  10C4  0020               	movlb	0	; select bank0
  8334  10C5  086F               	movf	_DimmerLights,w
  8335  10C6  0086               	movwf	6
  8336  10C7  3001               	movlw	1	; select bank2/3
  8337  10C8  0087               	movwf	7
  8338  10C9  1501               	bsf	1,2
  8339                           
  8340                           ;Dimmer_B1.c: 749: DimmerLights->Signal = 1;
  8341  10CA  086F               	movf	_DimmerLights,w
  8342  10CB  0086               	movwf	6
  8343  10CC  3001               	movlw	1	; select bank2/3
  8344  10CD  0087               	movwf	7
  8345  10CE  1481               	bsf	1,1
  8346                           
  8347                           ;Dimmer_B1.c: 750: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8348  10CF  086E               	movf	_product,w
  8349  10D0  3E09               	addlw	9
  8350  10D1  0086               	movwf	6
  8351  10D2  3002               	movlw	2	; select bank4/5
  8352  10D3  0087               	movwf	7
  8353  10D4  0801               	movf	1,w
  8354  10D5  318A  22AA         	fcall	_getPercentValue
  8355  10D7  0020               	movlb	0	; select bank0
  8356  10D8  00E2               	movwf	??_setDimmerLights_AdjRF
  8357  10D9  086F               	movf	_DimmerLights,w
  8358  10DA  3E05               	addlw	5
  8359  10DB  0086               	movwf	6
  8360  10DC  3001               	movlw	1	; select bank2/3
  8361  10DD  0087               	movwf	7
  8362  10DE  0862               	movf	??_setDimmerLights_AdjRF,w
  8363  10DF  0081               	movwf	1
  8364  10E0  0008               	return
  8365  10E1                     __end_of_setDimmerLights_AdjRF:	
  8366                           
  8367                           	psect	text34
  8368  0AAA                     __ptext34:	
  8369 ;; *************** function _getPercentValue *****************
  8370 ;; Defined at:
  8371 ;;		line 858 in file "../src/Dimmer_B1.c"
  8372 ;; Parameters:    Size  Location     Type
  8373 ;;  value           1    wreg     unsigned char 
  8374 ;; Auto vars:     Size  Location     Type
  8375 ;;  value           1   62[BANK0 ] unsigned char 
  8376 ;;  i               3   63[BANK0 ] float 
  8377 ;; Return value:  Size  Location     Type
  8378 ;;                  1    wreg      unsigned char 
  8379 ;; Registers used:
  8380 ;;		wreg, status,2, status,0, pclath, cstack
  8381 ;; Tracked objects:
  8382 ;;		On entry : 0/0
  8383 ;;		On exit  : 0/0
  8384 ;;		Unchanged: 0/0
  8385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8387 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8388 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8389 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8390 ;;Total ram usage:        6 bytes
  8391 ;; Hardware stack levels used:    1
  8392 ;; Hardware stack levels required when called:    7
  8393 ;; This function calls:
  8394 ;;		___awtoft
  8395 ;;		___ftadd
  8396 ;;		___ftdiv
  8397 ;;		___ftmul
  8398 ;;		___ftneg
  8399 ;;		___fttol
  8400 ;; This function is called by:
  8401 ;;		_setDimmerLights_AdjRF
  8402 ;; This function uses a non-reentrant model
  8403 ;;
  8404                           
  8405                           
  8406                           ;psect for function _getPercentValue
  8407  0AAA                     _getPercentValue:	
  8408                           
  8409                           ;incstack = 0
  8410                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8411                           ;getPercentValue@value stored from wreg
  8412  0AAA  0020               	movlb	0	; select bank0
  8413  0AAB  00DE               	movwf	getPercentValue@value
  8414                           
  8415                           ;Dimmer_B1.c: 866: float i = ((char)(80*0.8)) - ((char)(15*0.8));
  8416  0AAC  3000               	movlw	0
  8417  0AAD  00DF               	movwf	getPercentValue@i
  8418  0AAE  3050               	movlw	80
  8419  0AAF  00E0               	movwf	getPercentValue@i+1
  8420  0AB0  3042               	movlw	66
  8421  0AB1  00E1               	movwf	getPercentValue@i+2
  8422                           
  8423                           ;Dimmer_B1.c: 867: i /= 100;
  8424  0AB2  3000               	movlw	0
  8425  0AB3  00AE               	movwf	___ftdiv@f2
  8426  0AB4  30C8               	movlw	200
  8427  0AB5  00AF               	movwf	___ftdiv@f2+1
  8428  0AB6  3042               	movlw	66
  8429  0AB7  00B0               	movwf	___ftdiv@f2+2
  8430  0AB8  085F               	movf	getPercentValue@i,w
  8431  0AB9  00B1               	movwf	___ftdiv@f1
  8432  0ABA  0860               	movf	getPercentValue@i+1,w
  8433  0ABB  00B2               	movwf	___ftdiv@f1+1
  8434  0ABC  0861               	movf	getPercentValue@i+2,w
  8435  0ABD  00B3               	movwf	___ftdiv@f1+2
  8436  0ABE  318E  26A3  318A   	fcall	___ftdiv
  8437  0AC1  0020               	movlb	0	; select bank0
  8438  0AC2  082E               	movf	?___ftdiv,w
  8439  0AC3  00DF               	movwf	getPercentValue@i
  8440  0AC4  082F               	movf	?___ftdiv+1,w
  8441  0AC5  00E0               	movwf	getPercentValue@i+1
  8442  0AC6  0830               	movf	?___ftdiv+2,w
  8443  0AC7  00E1               	movwf	getPercentValue@i+2
  8444                           
  8445                           ;Dimmer_B1.c: 869: return (char) (((char)(80*0.8)) - ((100 - value) * i));
  8446  0AC8  085E               	movf	getPercentValue@value,w
  8447  0AC9  00DC               	movwf	??_getPercentValue
  8448  0ACA  01DD               	clrf	??_getPercentValue+1
  8449  0ACB  09DC               	comf	??_getPercentValue,f
  8450  0ACC  09DD               	comf	??_getPercentValue+1,f
  8451  0ACD  0ADC               	incf	??_getPercentValue,f
  8452  0ACE  1903               	skipnz
  8453  0ACF  0ADD               	incf	??_getPercentValue+1,f
  8454  0AD0  085C               	movf	??_getPercentValue,w
  8455  0AD1  3E64               	addlw	100
  8456  0AD2  00A8               	movwf	___awtoft@c
  8457  0AD3  3000               	movlw	0
  8458  0AD4  3D5D               	addwfc	??_getPercentValue+1,w
  8459  0AD5  00A9               	movwf	___awtoft@c+1
  8460  0AD6  3190  209C  318A   	fcall	___awtoft
  8461  0AD9  0020               	movlb	0	; select bank0
  8462  0ADA  0828               	movf	?___awtoft,w
  8463  0ADB  00B1               	movwf	___ftmul@f2
  8464  0ADC  0829               	movf	?___awtoft+1,w
  8465  0ADD  00B2               	movwf	___ftmul@f2+1
  8466  0ADE  082A               	movf	?___awtoft+2,w
  8467  0ADF  00B3               	movwf	___ftmul@f2+2
  8468  0AE0  085F               	movf	getPercentValue@i,w
  8469  0AE1  00AE               	movwf	___ftmul@f1
  8470  0AE2  0860               	movf	getPercentValue@i+1,w
  8471  0AE3  00AF               	movwf	___ftmul@f1+1
  8472  0AE4  0861               	movf	getPercentValue@i+2,w
  8473  0AE5  00B0               	movwf	___ftmul@f1+2
  8474  0AE6  318F  274C  318A   	fcall	___ftmul
  8475  0AE9  0020               	movlb	0	; select bank0
  8476  0AEA  082E               	movf	?___ftmul,w
  8477  0AEB  00BE               	movwf	___ftneg@f1
  8478  0AEC  082F               	movf	?___ftmul+1,w
  8479  0AED  00BF               	movwf	___ftneg@f1+1
  8480  0AEE  0830               	movf	?___ftmul+2,w
  8481  0AEF  00C0               	movwf	___ftneg@f1+2
  8482  0AF0  319C  2449  318A   	fcall	___ftneg
  8483  0AF3  0020               	movlb	0	; select bank0
  8484  0AF4  083E               	movf	?___ftneg,w
  8485  0AF5  00C4               	movwf	___ftadd@f2
  8486  0AF6  083F               	movf	?___ftneg+1,w
  8487  0AF7  00C5               	movwf	___ftadd@f2+1
  8488  0AF8  0840               	movf	?___ftneg+2,w
  8489  0AF9  00C6               	movwf	___ftadd@f2+2
  8490  0AFA  3000               	movlw	0
  8491  0AFB  00C1               	movwf	___ftadd@f1
  8492  0AFC  3080               	movlw	128
  8493  0AFD  00C2               	movwf	___ftadd@f1+1
  8494  0AFE  3042               	movlw	66
  8495  0AFF  00C3               	movwf	___ftadd@f1+2
  8496  0B00  3184  244A  318A   	fcall	___ftadd
  8497  0B03  0020               	movlb	0	; select bank0
  8498  0B04  0841               	movf	?___ftadd,w
  8499  0B05  00CE               	movwf	___fttol@f1
  8500  0B06  0842               	movf	?___ftadd+1,w
  8501  0B07  00CF               	movwf	___fttol@f1+1
  8502  0B08  0843               	movf	?___ftadd+2,w
  8503  0B09  00D0               	movwf	___fttol@f1+2
  8504  0B0A  318C  245E         	fcall	___fttol
  8505  0B0C  0020               	movlb	0	; select bank0
  8506  0B0D  084E               	movf	?___fttol,w
  8507  0B0E  0008               	return
  8508  0B0F                     __end_of_getPercentValue:	
  8509                           
  8510                           	psect	text35
  8511  0F4C                     __ptext35:	
  8512 ;; *************** function ___ftmul *****************
  8513 ;; Defined at:
  8514 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8515 ;; Parameters:    Size  Location     Type
  8516 ;;  f1              3   14[BANK0 ] float 
  8517 ;;  f2              3   17[BANK0 ] float 
  8518 ;; Auto vars:     Size  Location     Type
  8519 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8520 ;;  sign            1   29[BANK0 ] unsigned char 
  8521 ;;  cntr            1   28[BANK0 ] unsigned char 
  8522 ;;  exp             1   24[BANK0 ] unsigned char 
  8523 ;; Return value:  Size  Location     Type
  8524 ;;                  3   14[BANK0 ] float 
  8525 ;; Registers used:
  8526 ;;		wreg, status,2, status,0, pclath, cstack
  8527 ;; Tracked objects:
  8528 ;;		On entry : 0/0
  8529 ;;		On exit  : 0/0
  8530 ;;		Unchanged: 0/0
  8531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8532 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8533 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8534 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8535 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8536 ;;Total ram usage:       16 bytes
  8537 ;; Hardware stack levels used:    1
  8538 ;; Hardware stack levels required when called:    6
  8539 ;; This function calls:
  8540 ;;		___ftpack
  8541 ;; This function is called by:
  8542 ;;		_getPercentValue
  8543 ;; This function uses a non-reentrant model
  8544 ;;
  8545                           
  8546                           
  8547                           ;psect for function ___ftmul
  8548  0F4C                     ___ftmul:	
  8549                           
  8550                           ;incstack = 0
  8551                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8552  0F4C  0020               	movlb	0	; select bank0
  8553  0F4D  082E               	movf	___ftmul@f1,w
  8554  0F4E  00B4               	movwf	??___ftmul
  8555  0F4F  082F               	movf	___ftmul@f1+1,w
  8556  0F50  00B5               	movwf	??___ftmul+1
  8557  0F51  0830               	movf	___ftmul@f1+2,w
  8558  0F52  00B6               	movwf	??___ftmul+2
  8559  0F53  1003               	clrc
  8560  0F54  0D35               	rlf	??___ftmul+1,w
  8561  0F55  0D36               	rlf	??___ftmul+2,w
  8562  0F56  00B7               	movwf	??___ftmul+3
  8563  0F57  0837               	movf	??___ftmul+3,w
  8564  0F58  00B8               	movwf	___ftmul@exp
  8565  0F59  08B8               	movf	___ftmul@exp,f
  8566  0F5A  1D03               	skipz
  8567  0F5B  2F63               	goto	l5985
  8568  0F5C  3000               	movlw	0
  8569  0F5D  00AE               	movwf	?___ftmul
  8570  0F5E  3000               	movlw	0
  8571  0F5F  00AF               	movwf	?___ftmul+1
  8572  0F60  3000               	movlw	0
  8573  0F61  00B0               	movwf	?___ftmul+2
  8574  0F62  0008               	return
  8575  0F63                     l5985:	
  8576  0F63  0831               	movf	___ftmul@f2,w
  8577  0F64  00B4               	movwf	??___ftmul
  8578  0F65  0832               	movf	___ftmul@f2+1,w
  8579  0F66  00B5               	movwf	??___ftmul+1
  8580  0F67  0833               	movf	___ftmul@f2+2,w
  8581  0F68  00B6               	movwf	??___ftmul+2
  8582  0F69  1003               	clrc
  8583  0F6A  0D35               	rlf	??___ftmul+1,w
  8584  0F6B  0D36               	rlf	??___ftmul+2,w
  8585  0F6C  00B7               	movwf	??___ftmul+3
  8586  0F6D  0837               	movf	??___ftmul+3,w
  8587  0F6E  00BD               	movwf	___ftmul@sign
  8588  0F6F  08BD               	movf	___ftmul@sign,f
  8589  0F70  1D03               	skipz
  8590  0F71  2F79               	goto	l5991
  8591  0F72  3000               	movlw	0
  8592  0F73  00AE               	movwf	?___ftmul
  8593  0F74  3000               	movlw	0
  8594  0F75  00AF               	movwf	?___ftmul+1
  8595  0F76  3000               	movlw	0
  8596  0F77  00B0               	movwf	?___ftmul+2
  8597  0F78  0008               	return
  8598  0F79                     l5991:	
  8599  0F79  083D               	movf	___ftmul@sign,w
  8600  0F7A  3E7B               	addlw	123
  8601  0F7B  00B4               	movwf	??___ftmul
  8602  0F7C  0834               	movf	??___ftmul,w
  8603  0F7D  07B8               	addwf	___ftmul@exp,f
  8604  0F7E  082E               	movf	___ftmul@f1,w
  8605  0F7F  00B4               	movwf	??___ftmul
  8606  0F80  082F               	movf	___ftmul@f1+1,w
  8607  0F81  00B5               	movwf	??___ftmul+1
  8608  0F82  0830               	movf	___ftmul@f1+2,w
  8609  0F83  00B6               	movwf	??___ftmul+2
  8610  0F84  3010               	movlw	16
  8611  0F85                     u4705:	
  8612  0F85  36B6               	lsrf	??___ftmul+2,f
  8613  0F86  0CB5               	rrf	??___ftmul+1,f
  8614  0F87  0CB4               	rrf	??___ftmul,f
  8615  0F88  0B89               	decfsz	9,f
  8616  0F89  2F85               	goto	u4705
  8617  0F8A  0834               	movf	??___ftmul,w
  8618  0F8B  00B7               	movwf	??___ftmul+3
  8619  0F8C  0837               	movf	??___ftmul+3,w
  8620  0F8D  00BD               	movwf	___ftmul@sign
  8621  0F8E  0831               	movf	___ftmul@f2,w
  8622  0F8F  00B4               	movwf	??___ftmul
  8623  0F90  0832               	movf	___ftmul@f2+1,w
  8624  0F91  00B5               	movwf	??___ftmul+1
  8625  0F92  0833               	movf	___ftmul@f2+2,w
  8626  0F93  00B6               	movwf	??___ftmul+2
  8627  0F94  3010               	movlw	16
  8628  0F95                     u4715:	
  8629  0F95  36B6               	lsrf	??___ftmul+2,f
  8630  0F96  0CB5               	rrf	??___ftmul+1,f
  8631  0F97  0CB4               	rrf	??___ftmul,f
  8632  0F98  0B89               	decfsz	9,f
  8633  0F99  2F95               	goto	u4715
  8634  0F9A  0834               	movf	??___ftmul,w
  8635  0F9B  00B7               	movwf	??___ftmul+3
  8636  0F9C  0837               	movf	??___ftmul+3,w
  8637  0F9D  06BD               	xorwf	___ftmul@sign,f
  8638  0F9E  3080               	movlw	128
  8639  0F9F  00B4               	movwf	??___ftmul
  8640  0FA0  0834               	movf	??___ftmul,w
  8641  0FA1  05BD               	andwf	___ftmul@sign,f
  8642  0FA2  17AF               	bsf	___ftmul@f1+1,7
  8643  0FA3  17B2               	bsf	___ftmul@f2+1,7
  8644  0FA4  30FF               	movlw	255
  8645  0FA5  05B1               	andwf	___ftmul@f2,f
  8646  0FA6  30FF               	movlw	255
  8647  0FA7  05B2               	andwf	___ftmul@f2+1,f
  8648  0FA8  3000               	movlw	0
  8649  0FA9  05B3               	andwf	___ftmul@f2+2,f
  8650  0FAA  3000               	movlw	0
  8651  0FAB  00B9               	movwf	___ftmul@f3_as_product
  8652  0FAC  3000               	movlw	0
  8653  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  8654  0FAE  3000               	movlw	0
  8655  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  8656  0FB0  3007               	movlw	7
  8657  0FB1  00B4               	movwf	??___ftmul
  8658  0FB2  0834               	movf	??___ftmul,w
  8659  0FB3  00BC               	movwf	___ftmul@cntr
  8660  0FB4                     l6003:	
  8661  0FB4  1C2E               	btfss	___ftmul@f1,0
  8662  0FB5  2FBC               	goto	l6007
  8663  0FB6  0831               	movf	___ftmul@f2,w
  8664  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  8665  0FB8  0832               	movf	___ftmul@f2+1,w
  8666  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8667  0FBA  0833               	movf	___ftmul@f2+2,w
  8668  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8669  0FBC                     l6007:	
  8670  0FBC  3001               	movlw	1
  8671  0FBD                     u4735:	
  8672  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  8673  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  8674  0FBF  0CAE               	rrf	___ftmul@f1,f
  8675  0FC0  0B89               	decfsz	9,f
  8676  0FC1  2FBD               	goto	u4735
  8677  0FC2  3001               	movlw	1
  8678  0FC3                     u4745:	
  8679  0FC3  35B1               	lslf	___ftmul@f2,f
  8680  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  8681  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  8682  0FC6  0B89               	decfsz	9,f
  8683  0FC7  2FC3               	goto	u4745
  8684  0FC8  3001               	movlw	1
  8685  0FC9  02BC               	subwf	___ftmul@cntr,f
  8686  0FCA  1D03               	btfss	3,2
  8687  0FCB  2FB4               	goto	l6003
  8688  0FCC  3009               	movlw	9
  8689  0FCD  00B4               	movwf	??___ftmul
  8690  0FCE  0834               	movf	??___ftmul,w
  8691  0FCF  00BC               	movwf	___ftmul@cntr
  8692  0FD0                     l6015:	
  8693  0FD0  1C2E               	btfss	___ftmul@f1,0
  8694  0FD1  2FD8               	goto	l6019
  8695  0FD2  0831               	movf	___ftmul@f2,w
  8696  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  8697  0FD4  0832               	movf	___ftmul@f2+1,w
  8698  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8699  0FD6  0833               	movf	___ftmul@f2+2,w
  8700  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8701  0FD8                     l6019:	
  8702  0FD8  3001               	movlw	1
  8703  0FD9                     u4775:	
  8704  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  8705  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  8706  0FDB  0CAE               	rrf	___ftmul@f1,f
  8707  0FDC  0B89               	decfsz	9,f
  8708  0FDD  2FD9               	goto	u4775
  8709  0FDE  3001               	movlw	1
  8710  0FDF                     u4785:	
  8711  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8712  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8713  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  8714  0FE2  0B89               	decfsz	9,f
  8715  0FE3  2FDF               	goto	u4785
  8716  0FE4  3001               	movlw	1
  8717  0FE5  02BC               	subwf	___ftmul@cntr,f
  8718  0FE6  1D03               	btfss	3,2
  8719  0FE7  2FD0               	goto	l6015
  8720  0FE8  0839               	movf	___ftmul@f3_as_product,w
  8721  0FE9  00A0               	movwf	___ftpack@arg
  8722  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  8723  0FEB  00A1               	movwf	___ftpack@arg+1
  8724  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  8725  0FED  00A2               	movwf	___ftpack@arg+2
  8726  0FEE  0838               	movf	___ftmul@exp,w
  8727  0FEF  00B4               	movwf	??___ftmul
  8728  0FF0  0834               	movf	??___ftmul,w
  8729  0FF1  00A3               	movwf	___ftpack@exp
  8730  0FF2  083D               	movf	___ftmul@sign,w
  8731  0FF3  00B5               	movwf	??___ftmul+1
  8732  0FF4  0835               	movf	??___ftmul+1,w
  8733  0FF5  00A4               	movwf	___ftpack@sign
  8734  0FF6  3189  2183         	fcall	___ftpack
  8735  0FF8  0020               	movlb	0	; select bank0
  8736  0FF9  0820               	movf	?___ftpack,w
  8737  0FFA  00AE               	movwf	?___ftmul
  8738  0FFB  0821               	movf	?___ftpack+1,w
  8739  0FFC  00AF               	movwf	?___ftmul+1
  8740  0FFD  0822               	movf	?___ftpack+2,w
  8741  0FFE  00B0               	movwf	?___ftmul+2
  8742  0FFF  0008               	return
  8743  1000                     __end_of___ftmul:	
  8744                           
  8745                           	psect	text36
  8746  1DCC                     __ptext36:	
  8747 ;; *************** function _setMemory_Modify *****************
  8748 ;; Defined at:
  8749 ;;		line 1025 in file "../src/MCU_B1.c"
  8750 ;; Parameters:    Size  Location     Type
  8751 ;;  command         1    wreg     unsigned char 
  8752 ;; Auto vars:     Size  Location     Type
  8753 ;;  command         1    1[BANK0 ] unsigned char 
  8754 ;; Return value:  Size  Location     Type
  8755 ;;		None               void
  8756 ;; Registers used:
  8757 ;;		wreg, status,2, status,0
  8758 ;; Tracked objects:
  8759 ;;		On entry : 0/0
  8760 ;;		On exit  : 0/0
  8761 ;;		Unchanged: 0/0
  8762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8764 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8765 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8766 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8767 ;;Total ram usage:        2 bytes
  8768 ;; Hardware stack levels used:    1
  8769 ;; Hardware stack levels required when called:    5
  8770 ;; This function calls:
  8771 ;;		Nothing
  8772 ;; This function is called by:
  8773 ;;		_setLog_Code
  8774 ;;		_setRFSW_AdjControl
  8775 ;; This function uses a non-reentrant model
  8776 ;;
  8777                           
  8778                           
  8779                           ;psect for function _setMemory_Modify
  8780  1DCC                     _setMemory_Modify:	
  8781                           
  8782                           ;incstack = 0
  8783                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8784                           ;setMemory_Modify@command stored from wreg
  8785  1DCC  0020               	movlb	0	; select bank0
  8786  1DCD  00A1               	movwf	setMemory_Modify@command
  8787                           
  8788                           ;MCU_B1.c: 1026: Memory.Modify = command == 1 ? 1 : 0;
  8789  1DCE  0821               	movf	setMemory_Modify@command,w
  8790  1DCF  3A01               	xorlw	1
  8791  1DD0  3000               	movlw	0
  8792  1DD1  1903               	skipnz
  8793  1DD2  3001               	movlw	1
  8794  1DD3  00A0               	movwf	??_setMemory_Modify
  8795  1DD4  0024               	movlb	4	; select bank4
  8796  1DD5  0844               	movf	(_Memory^(0+512)+36),w
  8797  1DD6  0020               	movlb	0	; select bank0
  8798  1DD7  0620               	xorwf	??_setMemory_Modify,w
  8799  1DD8  39FE               	andlw	-2
  8800  1DD9  0620               	xorwf	??_setMemory_Modify,w
  8801  1DDA  0024               	movlb	4	; select bank4
  8802  1DDB  00C4               	movwf	(_Memory^(0+512)+36)
  8803                           
  8804                           ;MCU_B1.c: 1027: Memory.Time = 0;
  8805  1DDC  01C2               	clrf	(_Memory^(0+512)+34)
  8806  1DDD  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8807  1DDE  0008               	return
  8808  1DDF                     __end_of_setMemory_Modify:	
  8809                           
  8810                           	psect	text37
  8811  1D60                     __ptext37:	
  8812 ;; *************** function _getRF_KeyStatus *****************
  8813 ;; Defined at:
  8814 ;;		line 194 in file "../src/RF_Control_B1.c"
  8815 ;; Parameters:    Size  Location     Type
  8816 ;;		None
  8817 ;; Auto vars:     Size  Location     Type
  8818 ;;  key             1    1[BANK0 ] unsigned char 
  8819 ;; Return value:  Size  Location     Type
  8820 ;;                  1    wreg      unsigned char 
  8821 ;; Registers used:
  8822 ;;		wreg, status,2
  8823 ;; Tracked objects:
  8824 ;;		On entry : 0/0
  8825 ;;		On exit  : 0/0
  8826 ;;		Unchanged: 0/0
  8827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8829 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8830 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8831 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8832 ;;Total ram usage:        3 bytes
  8833 ;; Hardware stack levels used:    1
  8834 ;; Hardware stack levels required when called:    5
  8835 ;; This function calls:
  8836 ;;		Nothing
  8837 ;; This function is called by:
  8838 ;;		_setRF_Main
  8839 ;; This function uses a non-reentrant model
  8840 ;;
  8841                           
  8842                           
  8843                           ;psect for function _getRF_KeyStatus
  8844  1D60                     _getRF_KeyStatus:	
  8845                           
  8846                           ;RF_Control_B1.c: 195: char key = 0;
  8847                           
  8848                           ;incstack = 0
  8849                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8850  1D60  0020               	movlb	0	; select bank0
  8851  1D61  01A1               	clrf	getRF_KeyStatus@key
  8852                           
  8853                           ;RF_Control_B1.c: 201: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8854  1D62  01A2               	clrf	_getRF_KeyStatus$5270
  8855  1D63  0AA2               	incf	_getRF_KeyStatus$5270,f
  8856  1D64  1F0C               	btfss	12,6	;volatile
  8857  1D65  1A0C               	btfsc	12,4	;volatile
  8858  1D66  2D6B               	goto	l6945
  8859  1D67  1C0C               	btfss	12,0	;volatile
  8860  1D68  188D               	btfsc	13,1	;volatile
  8861  1D69  2D6B               	goto	l6945
  8862  1D6A  01A2               	clrf	_getRF_KeyStatus$5270
  8863  1D6B                     l6945:	
  8864  1D6B  0822               	movf	_getRF_KeyStatus$5270,w
  8865  1D6C  00A0               	movwf	??_getRF_KeyStatus
  8866  1D6D  0820               	movf	??_getRF_KeyStatus,w
  8867  1D6E  00A1               	movwf	getRF_KeyStatus@key
  8868                           
  8869                           ;RF_Control_B1.c: 207: return key;
  8870  1D6F  0821               	movf	getRF_KeyStatus@key,w
  8871  1D70  0008               	return
  8872  1D71                     __end_of_getRF_KeyStatus:	
  8873                           
  8874                           	psect	text38
  8875  1D4F                     __ptext38:	
  8876 ;; *************** function _getBuz_GO *****************
  8877 ;; Defined at:
  8878 ;;		line 82 in file "../src/Buzzer_B1.c"
  8879 ;; Parameters:    Size  Location     Type
  8880 ;;		None
  8881 ;; Auto vars:     Size  Location     Type
  8882 ;;  i               2    4[BANK0 ] int 
  8883 ;; Return value:  Size  Location     Type
  8884 ;;                  2    0[BANK0 ] int 
  8885 ;; Registers used:
  8886 ;;		wreg, status,2, status,0
  8887 ;; Tracked objects:
  8888 ;;		On entry : 0/0
  8889 ;;		On exit  : 0/0
  8890 ;;		Unchanged: 0/0
  8891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8892 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8893 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8894 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8895 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8896 ;;Total ram usage:        6 bytes
  8897 ;; Hardware stack levels used:    1
  8898 ;; Hardware stack levels required when called:    5
  8899 ;; This function calls:
  8900 ;;		Nothing
  8901 ;; This function is called by:
  8902 ;;		_setRF_Main
  8903 ;; This function uses a non-reentrant model
  8904 ;;
  8905                           
  8906                           
  8907                           ;psect for function _getBuz_GO
  8908  1D4F                     _getBuz_GO:	
  8909                           
  8910                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8911                           
  8912                           ;incstack = 0
  8913                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8914  1D4F  0021               	movlb	1	; select bank1
  8915  1D50  0C2F               	rrf	_Buz1^(0+128),w
  8916  1D51  3901               	andlw	1
  8917  1D52  0020               	movlb	0	; select bank0
  8918  1D53  00A2               	movwf	??_getBuz_GO
  8919  1D54  01A3               	clrf	??_getBuz_GO+1
  8920  1D55  0822               	movf	??_getBuz_GO,w
  8921  1D56  00A4               	movwf	getBuz_GO@i
  8922  1D57  0823               	movf	??_getBuz_GO+1,w
  8923  1D58  00A5               	movwf	getBuz_GO@i+1
  8924                           
  8925                           ;Buzzer_B1.c: 84: return i;
  8926  1D59  0825               	movf	getBuz_GO@i+1,w
  8927  1D5A  01A1               	clrf	?_getBuz_GO+1
  8928  1D5B  07A1               	addwf	?_getBuz_GO+1,f
  8929  1D5C  0824               	movf	getBuz_GO@i,w
  8930  1D5D  01A0               	clrf	?_getBuz_GO
  8931  1D5E  07A0               	addwf	?_getBuz_GO,f
  8932  1D5F  0008               	return
  8933  1D60                     __end_of_getBuz_GO:	
  8934                           
  8935                           	psect	text39
  8936  1CEF                     __ptext39:	
  8937 ;; *************** function _RF_RxDisable *****************
  8938 ;; Defined at:
  8939 ;;		line 269 in file "../src/RF_Control_B1.c"
  8940 ;; Parameters:    Size  Location     Type
  8941 ;;		None
  8942 ;; Auto vars:     Size  Location     Type
  8943 ;;		None
  8944 ;; Return value:  Size  Location     Type
  8945 ;;		None               void
  8946 ;; Registers used:
  8947 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8948 ;; Tracked objects:
  8949 ;;		On entry : 0/0
  8950 ;;		On exit  : 0/0
  8951 ;;		Unchanged: 0/0
  8952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8957 ;;Total ram usage:        0 bytes
  8958 ;; Hardware stack levels used:    1
  8959 ;; Hardware stack levels required when called:    7
  8960 ;; This function calls:
  8961 ;;		_CC2500_WriteCommand
  8962 ;; This function is called by:
  8963 ;;		_setRF_Main
  8964 ;; This function uses a non-reentrant model
  8965 ;;
  8966                           
  8967                           
  8968                           ;psect for function _RF_RxDisable
  8969  1CEF                     _RF_RxDisable:	
  8970                           
  8971                           ;RF_Control_B1.c: 270: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8972                           
  8973                           ;incstack = 0
  8974                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8975  1CEF  0021               	movlb	1	; select bank1
  8976  1CF0  18BB               	btfsc	_RF1^(0+128),1
  8977  1CF1  2CF4               	goto	l2012
  8978  1CF2  1DBB               	btfss	_RF1^(0+128),3
  8979  1CF3  0008               	return
  8980  1CF4                     l2012:	
  8981                           
  8982                           ;RF_Control_B1.c: 271: RF1.RxStatus = 0;
  8983  1CF4  11BB               	bcf	_RF1^(0+128),3
  8984                           
  8985                           ;RF_Control_B1.c: 272: RF1.ReceiveGO = 0;
  8986  1CF5  10BB               	bcf	_RF1^(0+128),1
  8987                           
  8988                           ;RF_Control_B1.c: 273: CC2500_WriteCommand(0x36);
  8989  1CF6  3036               	movlw	54
  8990  1CF7  319E  26C1  319C   	fcall	_CC2500_WriteCommand
  8991                           
  8992                           ;RF_Control_B1.c: 275: CC2500_WriteCommand(0x3A);
  8993  1CFA  303A               	movlw	58
  8994  1CFB  319E  26C1         	fcall	_CC2500_WriteCommand
  8995  1CFD  0008               	return
  8996  1CFE                     __end_of_RF_RxDisable:	
  8997                           
  8998                           	psect	text40
  8999  09E4                     __ptext40:	
  9000 ;; *************** function _CC2500_TxData *****************
  9001 ;; Defined at:
  9002 ;;		line 32 in file "../src/CC2500_B1.c"
  9003 ;; Parameters:    Size  Location     Type
  9004 ;;		None
  9005 ;; Auto vars:     Size  Location     Type
  9006 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9007 ;; Return value:  Size  Location     Type
  9008 ;;		None               void
  9009 ;; Registers used:
  9010 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9011 ;; Tracked objects:
  9012 ;;		On entry : 0/0
  9013 ;;		On exit  : 0/0
  9014 ;;		Unchanged: 0/0
  9015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9017 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9018 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9019 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9020 ;;Total ram usage:        2 bytes
  9021 ;; Hardware stack levels used:    1
  9022 ;; Hardware stack levels required when called:    7
  9023 ;; This function calls:
  9024 ;;		_CC2500_WriteByte
  9025 ;;		_CC2500_WriteCommand
  9026 ;;		_Timeout_Counter
  9027 ;;		_set_TimeoutCleared
  9028 ;; This function is called by:
  9029 ;;		_setRF_Main
  9030 ;; This function uses a non-reentrant model
  9031 ;;
  9032                           
  9033                           
  9034                           ;psect for function _CC2500_TxData
  9035  09E4                     _CC2500_TxData:	
  9036                           
  9037                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9038                           ;CC2500_B1.c: 35: RC4 = 0;
  9039                           
  9040                           ;incstack = 0
  9041                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9042  09E4  0020               	movlb	0	; select bank0
  9043  09E5  120E               	bcf	14,4	;volatile
  9044                           
  9045                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9046  09E6  307F               	movlw	127
  9047  09E7  00A4               	movwf	??_CC2500_TxData
  9048  09E8  0824               	movf	??_CC2500_TxData,w
  9049  09E9  00FB               	movwf	_SPI0Buffer
  9050                           
  9051                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9052  09EA  29EE               	goto	l6651
  9053  09EB                     l6649:	
  9054                           
  9055                           ;CC2500_B1.c: 38: Timeout_Counter();
  9056  09EB  319E  2655  3189   	fcall	_Timeout_Counter
  9057  09EE                     l6651:	
  9058  09EE  0020               	movlb	0	; select bank0
  9059  09EF  1D0E               	btfss	14,2	;volatile
  9060  09F0  29F4               	goto	l6655
  9061  09F1  0021               	movlb	1	; select bank1
  9062  09F2  1D2C               	btfss	(_myMain^(0+128)+12),2
  9063  09F3  29EB               	goto	l6649
  9064  09F4                     l6655:	
  9065                           
  9066                           ;CC2500_B1.c: 39: };
  9067                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9068  09F4  319B  23F6  3189   	fcall	_set_TimeoutCleared
  9069                           
  9070                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9071  09F7  319E  2619  3189   	fcall	_CC2500_WriteByte
  9072                           
  9073                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9074  09FA  0021               	movlb	1	; select bank1
  9075  09FB  0853               	movf	_Tx_Length^(0+128),w
  9076  09FC  0020               	movlb	0	; select bank0
  9077  09FD  00A4               	movwf	??_CC2500_TxData
  9078  09FE  0824               	movf	??_CC2500_TxData,w
  9079  09FF  00FB               	movwf	_SPI0Buffer
  9080                           
  9081                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9082  0A00  319E  2619  3189   	fcall	_CC2500_WriteByte
  9083                           
  9084                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9085  0A03  0020               	movlb	0	; select bank0
  9086  0A04  01A5               	clrf	CC2500_TxData@loop_e
  9087  0A05                     l6669:	
  9088  0A05  0021               	movlb	1	; select bank1
  9089  0A06  0853               	movf	_Tx_Length^(0+128),w
  9090  0A07  0020               	movlb	0	; select bank0
  9091  0A08  0225               	subwf	CC2500_TxData@loop_e,w
  9092  0A09  1803               	btfsc	3,0
  9093  0A0A  2A1D               	goto	l255
  9094                           
  9095                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9096  0A0B  0825               	movf	CC2500_TxData@loop_e,w
  9097  0A0C  3E20               	addlw	_RF_Data& (0+255)
  9098  0A0D  0086               	movwf	6
  9099  0A0E  3001               	movlw	1	; select bank2/3
  9100  0A0F  0087               	movwf	7
  9101  0A10  0801               	movf	1,w
  9102  0A11  00A4               	movwf	??_CC2500_TxData
  9103  0A12  0824               	movf	??_CC2500_TxData,w
  9104  0A13  00FB               	movwf	_SPI0Buffer
  9105                           
  9106                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9107  0A14  319E  2619  3189   	fcall	_CC2500_WriteByte
  9108  0A17  3001               	movlw	1
  9109  0A18  0020               	movlb	0	; select bank0
  9110  0A19  00A4               	movwf	??_CC2500_TxData
  9111  0A1A  0824               	movf	??_CC2500_TxData,w
  9112  0A1B  07A5               	addwf	CC2500_TxData@loop_e,f
  9113  0A1C  2A05               	goto	l6669
  9114  0A1D                     l255:	
  9115                           
  9116                           ;CC2500_B1.c: 48: }
  9117                           ;CC2500_B1.c: 49: RC4 = 1;
  9118  0A1D  160E               	bsf	14,4	;volatile
  9119                           
  9120                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9121  0A1E  3035               	movlw	53
  9122  0A1F  319E  26C1  3189   	fcall	_CC2500_WriteCommand
  9123                           
  9124                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9125  0A22  2A26               	goto	l6675
  9126  0A23                     l6673:	
  9127                           
  9128                           ;CC2500_B1.c: 52: Timeout_Counter();
  9129  0A23  319E  2655  3189   	fcall	_Timeout_Counter
  9130  0A26                     l6675:	
  9131  0A26  0020               	movlb	0	; select bank0
  9132  0A27  180D               	btfsc	13,0	;volatile
  9133  0A28  2A2C               	goto	l6679
  9134  0A29  0021               	movlb	1	; select bank1
  9135  0A2A  1D2C               	btfss	(_myMain^(0+128)+12),2
  9136  0A2B  2A23               	goto	l6673
  9137  0A2C                     l6679:	
  9138                           
  9139                           ;CC2500_B1.c: 53: };
  9140                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9141  0A2C  319B  23F6  3189   	fcall	_set_TimeoutCleared
  9142                           
  9143                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9144  0A2F  2A33               	goto	l6683
  9145  0A30                     l6681:	
  9146                           
  9147                           ;CC2500_B1.c: 57: Timeout_Counter();
  9148  0A30  319E  2655  3189   	fcall	_Timeout_Counter
  9149  0A33                     l6683:	
  9150  0A33  0020               	movlb	0	; select bank0
  9151  0A34  1C0D               	btfss	13,0	;volatile
  9152  0A35  2A39               	goto	l6687
  9153  0A36  0021               	movlb	1	; select bank1
  9154  0A37  1D2C               	btfss	(_myMain^(0+128)+12),2
  9155  0A38  2A30               	goto	l6681
  9156  0A39                     l6687:	
  9157                           
  9158                           ;CC2500_B1.c: 58: };
  9159                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9160  0A39  319B  23F6  3189   	fcall	_set_TimeoutCleared
  9161                           
  9162                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9163  0A3C  3036               	movlw	54
  9164  0A3D  319E  26C1  3189   	fcall	_CC2500_WriteCommand
  9165                           
  9166                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9167  0A40  303B               	movlw	59
  9168  0A41  319E  26C1         	fcall	_CC2500_WriteCommand
  9169                           
  9170                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9171  0A43  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9172  0A44  0008               	return
  9173  0A45                     __end_of_CC2500_TxData:	
  9174                           
  9175                           	psect	text41
  9176  1BDA                     __ptext41:	
  9177 ;; *************** function _RF_Initialization *****************
  9178 ;; Defined at:
  9179 ;;		line 9 in file "../src/RF_Control_B1.c"
  9180 ;; Parameters:    Size  Location     Type
  9181 ;;		None
  9182 ;; Auto vars:     Size  Location     Type
  9183 ;;		None
  9184 ;; Return value:  Size  Location     Type
  9185 ;;		None               void
  9186 ;; Registers used:
  9187 ;;		wreg, status,2, status,0, pclath, cstack
  9188 ;; Tracked objects:
  9189 ;;		On entry : 0/0
  9190 ;;		On exit  : 0/0
  9191 ;;		Unchanged: 0/0
  9192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9197 ;;Total ram usage:        0 bytes
  9198 ;; Hardware stack levels used:    1
  9199 ;; Hardware stack levels required when called:    6
  9200 ;; This function calls:
  9201 ;;		_setRF_Initialization
  9202 ;; This function is called by:
  9203 ;;		_main
  9204 ;; This function uses a non-reentrant model
  9205 ;;
  9206                           
  9207                           
  9208                           ;psect for function _RF_Initialization
  9209  1BDA                     _RF_Initialization:	
  9210                           
  9211                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9212                           
  9213                           ;incstack = 0
  9214                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9215  1BDA  319C  2466         	fcall	_setRF_Initialization
  9216  1BDC  0008               	return
  9217  1BDD                     __end_of_RF_Initialization:	
  9218                           
  9219                           	psect	text42
  9220  1C66                     __ptext42:	
  9221 ;; *************** function _setRF_Initialization *****************
  9222 ;; Defined at:
  9223 ;;		line 43 in file "../src/RF_Control_B1.c"
  9224 ;; Parameters:    Size  Location     Type
  9225 ;;		None
  9226 ;; Auto vars:     Size  Location     Type
  9227 ;;		None
  9228 ;; Return value:  Size  Location     Type
  9229 ;;		None               void
  9230 ;; Registers used:
  9231 ;;		wreg
  9232 ;; Tracked objects:
  9233 ;;		On entry : 0/0
  9234 ;;		On exit  : 0/0
  9235 ;;		Unchanged: 0/0
  9236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9239 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9240 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9241 ;;Total ram usage:        1 bytes
  9242 ;; Hardware stack levels used:    1
  9243 ;; Hardware stack levels required when called:    5
  9244 ;; This function calls:
  9245 ;;		Nothing
  9246 ;; This function is called by:
  9247 ;;		_RF_Initialization
  9248 ;; This function uses a non-reentrant model
  9249 ;;
  9250                           
  9251                           
  9252                           ;psect for function _setRF_Initialization
  9253  1C66                     _setRF_Initialization:	
  9254                           
  9255                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9256                           
  9257                           ;incstack = 0
  9258                           ; Regs used in _setRF_Initialization: [wreg]
  9259  1C66  3015               	movlw	21
  9260  1C67  0020               	movlb	0	; select bank0
  9261  1C68  00A0               	movwf	??_setRF_Initialization
  9262  1C69  0820               	movf	??_setRF_Initialization,w
  9263  1C6A  0021               	movlb	1	; select bank1
  9264  1C6B  00D3               	movwf	_Tx_Length^(0+128)
  9265                           
  9266                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9267  1C6C  300A               	movlw	10
  9268  1C6D  00C2               	movwf	(_RF1^(0+128)+7)
  9269  1C6E  3000               	movlw	0
  9270  1C6F  00C3               	movwf	(_RF1^(0+128)+8)
  9271  1C70  0008               	return
  9272  1C71                     __end_of_setRF_Initialization:	
  9273                           
  9274                           	psect	text43
  9275  1D95                     __ptext43:	
  9276 ;; *************** function _Mcu_Initialization *****************
  9277 ;; Defined at:
  9278 ;;		line 30 in file "../src/MCU_B1.c"
  9279 ;; Parameters:    Size  Location     Type
  9280 ;;		None
  9281 ;; Auto vars:     Size  Location     Type
  9282 ;;		None
  9283 ;; Return value:  Size  Location     Type
  9284 ;;		None               void
  9285 ;; Registers used:
  9286 ;;		wreg, status,2, status,0, pclath, cstack
  9287 ;; Tracked objects:
  9288 ;;		On entry : 0/0
  9289 ;;		On exit  : 0/0
  9290 ;;		Unchanged: 0/0
  9291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9296 ;;Total ram usage:        0 bytes
  9297 ;; Hardware stack levels used:    1
  9298 ;; Hardware stack levels required when called:    6
  9299 ;; This function calls:
  9300 ;;		_ADC_Set
  9301 ;;		_Fosc_Set
  9302 ;;		_IOC_Set
  9303 ;;		_IO_Set
  9304 ;;		_TMR1_Set
  9305 ;;		_WDT_Set
  9306 ;; This function is called by:
  9307 ;;		_main
  9308 ;; This function uses a non-reentrant model
  9309 ;;
  9310                           
  9311                           
  9312                           ;psect for function _Mcu_Initialization
  9313  1D95                     _Mcu_Initialization:	
  9314                           
  9315                           ;MCU_B1.c: 32: Fosc_Set();
  9316                           
  9317                           ;incstack = 0
  9318                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9319  1D95  319B  23F2  319D   	fcall	_Fosc_Set
  9320                           
  9321                           ;MCU_B1.c: 34: IO_Set();
  9322  1D98  319E  26DA  319D   	fcall	_IO_Set
  9323                           
  9324                           ;MCU_B1.c: 36: ;;
  9325                           ;MCU_B1.c: 38: TMR1_Set();
  9326  1D9B  319C  24B9  319D   	fcall	_TMR1_Set
  9327                           
  9328                           ;MCU_B1.c: 40: ADC_Set();
  9329  1D9E  319C  2412  319D   	fcall	_ADC_Set
  9330                           
  9331                           ;MCU_B1.c: 42: ;;
  9332                           ;MCU_B1.c: 44: ;;
  9333                           ;MCU_B1.c: 46: IOC_Set();
  9334  1DA1  319C  24AD  319D   	fcall	_IOC_Set
  9335                           
  9336                           ;MCU_B1.c: 48: ;;
  9337                           ;MCU_B1.c: 50: ;;
  9338                           ;MCU_B1.c: 52: WDT_Set();
  9339  1DA4  319C  245B         	fcall	_WDT_Set
  9340  1DA6  0008               	return
  9341  1DA7                     __end_of_Mcu_Initialization:	
  9342                           
  9343                           	psect	text44
  9344  1C5B                     __ptext44:	
  9345 ;; *************** function _WDT_Set *****************
  9346 ;; Defined at:
  9347 ;;		line 1044 in file "../src/MCU_B1.c"
  9348 ;; Parameters:    Size  Location     Type
  9349 ;;		None
  9350 ;; Auto vars:     Size  Location     Type
  9351 ;;		None
  9352 ;; Return value:  Size  Location     Type
  9353 ;;		None               void
  9354 ;; Registers used:
  9355 ;;		wreg
  9356 ;; Tracked objects:
  9357 ;;		On entry : 0/0
  9358 ;;		On exit  : 0/0
  9359 ;;		Unchanged: 0/0
  9360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9363 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9364 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9365 ;;Total ram usage:        1 bytes
  9366 ;; Hardware stack levels used:    1
  9367 ;; Hardware stack levels required when called:    5
  9368 ;; This function calls:
  9369 ;;		Nothing
  9370 ;; This function is called by:
  9371 ;;		_Mcu_Initialization
  9372 ;; This function uses a non-reentrant model
  9373 ;;
  9374                           
  9375                           
  9376                           ;psect for function _WDT_Set
  9377  1C5B                     _WDT_Set:	
  9378                           
  9379                           ;MCU_B1.c: 1051: WDTCON = 0b00010111;;
  9380                           
  9381                           ;incstack = 0
  9382                           ; Regs used in _WDT_Set: [wreg]
  9383  1C5B  3017               	movlw	23
  9384  1C5C  0021               	movlb	1	; select bank1
  9385  1C5D  0097               	movwf	23	;volatile
  9386                           
  9387                           ;MCU_B1.c: 1053: WDT.Enable = 1;
  9388  1C5E  144A               	bsf	_WDT^(0+128),0
  9389                           
  9390                           ;MCU_B1.c: 1054: WDT.Timer = 10;
  9391  1C5F  300A               	movlw	10
  9392  1C60  0020               	movlb	0	; select bank0
  9393  1C61  00A0               	movwf	??_WDT_Set
  9394  1C62  0820               	movf	??_WDT_Set,w
  9395  1C63  0021               	movlb	1	; select bank1
  9396  1C64  00CB               	movwf	(_WDT^(0+128)+1)
  9397  1C65  0008               	return
  9398  1C66                     __end_of_WDT_Set:	
  9399                           
  9400                           	psect	text45
  9401  1CB9                     __ptext45:	
  9402 ;; *************** function _TMR1_Set *****************
  9403 ;; Defined at:
  9404 ;;		line 199 in file "../src/MCU_B1.c"
  9405 ;; Parameters:    Size  Location     Type
  9406 ;;		None
  9407 ;; Auto vars:     Size  Location     Type
  9408 ;;		None
  9409 ;; Return value:  Size  Location     Type
  9410 ;;		None               void
  9411 ;; Registers used:
  9412 ;;		wreg
  9413 ;; Tracked objects:
  9414 ;;		On entry : 0/0
  9415 ;;		On exit  : 0/0
  9416 ;;		Unchanged: 0/0
  9417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9422 ;;Total ram usage:        0 bytes
  9423 ;; Hardware stack levels used:    1
  9424 ;; Hardware stack levels required when called:    5
  9425 ;; This function calls:
  9426 ;;		Nothing
  9427 ;; This function is called by:
  9428 ;;		_Mcu_Initialization
  9429 ;; This function uses a non-reentrant model
  9430 ;;
  9431                           
  9432                           
  9433                           ;psect for function _TMR1_Set
  9434  1CB9                     _TMR1_Set:	
  9435                           
  9436                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9437                           
  9438                           ;incstack = 0
  9439                           ; Regs used in _TMR1_Set: [wreg]
  9440  1CB9  3041               	movlw	65
  9441  1CBA  0020               	movlb	0	; select bank0
  9442  1CBB  0098               	movwf	24	;volatile
  9443                           
  9444                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9445  1CBC  30FA               	movlw	250
  9446  1CBD  0097               	movwf	23	;volatile
  9447                           
  9448                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9449  1CBE  3038               	movlw	56
  9450  1CBF  0096               	movwf	22	;volatile
  9451                           
  9452                           ;MCU_B1.c: 203: TMR1IE = 1;
  9453  1CC0  0021               	movlb	1	; select bank1
  9454  1CC1  1411               	bsf	17,0	;volatile
  9455                           
  9456                           ;MCU_B1.c: 204: PEIE = 1;
  9457  1CC2  170B               	bsf	11,6	;volatile
  9458                           
  9459                           ;MCU_B1.c: 205: GIE = 1;
  9460  1CC3  178B               	bsf	11,7	;volatile
  9461  1CC4  0008               	return
  9462  1CC5                     __end_of_TMR1_Set:	
  9463                           
  9464                           	psect	text46
  9465  1EDA                     __ptext46:	
  9466 ;; *************** function _IO_Set *****************
  9467 ;; Defined at:
  9468 ;;		line 60 in file "../src/MCU_B1.c"
  9469 ;; Parameters:    Size  Location     Type
  9470 ;;		None
  9471 ;; Auto vars:     Size  Location     Type
  9472 ;;		None
  9473 ;; Return value:  Size  Location     Type
  9474 ;;		None               void
  9475 ;; Registers used:
  9476 ;;		wreg, status,2
  9477 ;; Tracked objects:
  9478 ;;		On entry : 0/0
  9479 ;;		On exit  : 0/0
  9480 ;;		Unchanged: 0/0
  9481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9486 ;;Total ram usage:        0 bytes
  9487 ;; Hardware stack levels used:    1
  9488 ;; Hardware stack levels required when called:    5
  9489 ;; This function calls:
  9490 ;;		Nothing
  9491 ;; This function is called by:
  9492 ;;		_Mcu_Initialization
  9493 ;; This function uses a non-reentrant model
  9494 ;;
  9495                           
  9496                           
  9497                           ;psect for function _IO_Set
  9498  1EDA                     _IO_Set:	
  9499                           
  9500                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9501                           
  9502                           ;incstack = 0
  9503                           ; Regs used in _IO_Set: [wreg+status,2]
  9504  1EDA  3077               	movlw	119
  9505  1EDB  0021               	movlb	1	; select bank1
  9506  1EDC  008C               	movwf	12	;volatile
  9507                           
  9508                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9509  1EDD  3007               	movlw	7
  9510  1EDE  008D               	movwf	13	;volatile
  9511                           
  9512                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9513  1EDF  300C               	movlw	12
  9514  1EE0  008E               	movwf	14	;volatile
  9515                           
  9516                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9517  1EE1  0022               	movlb	2	; select bank2
  9518  1EE2  018C               	clrf	12	;volatile
  9519                           
  9520                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9521  1EE3  3002               	movlw	2
  9522  1EE4  008D               	movwf	13	;volatile
  9523                           
  9524                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9525  1EE5  018E               	clrf	14	;volatile
  9526                           
  9527                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9528  1EE6  3022               	movlw	34
  9529  1EE7  0023               	movlb	3	; select bank3
  9530  1EE8  008C               	movwf	12	;volatile
  9531                           
  9532                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9533  1EE9  018D               	clrf	13	;volatile
  9534                           
  9535                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9536  1EEA  018E               	clrf	14	;volatile
  9537                           
  9538                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9539  1EEB  3077               	movlw	119
  9540  1EEC  0020               	movlb	0	; select bank0
  9541  1EED  008C               	movwf	12	;volatile
  9542                           
  9543                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  9544  1EEE  3007               	movlw	7
  9545  1EEF  008D               	movwf	13	;volatile
  9546                           
  9547                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9548  1EF0  300C               	movlw	12
  9549  1EF1  008E               	movwf	14	;volatile
  9550  1EF2  0008               	return
  9551  1EF3                     __end_of_IO_Set:	
  9552                           
  9553                           	psect	text47
  9554  1CAD                     __ptext47:	
  9555 ;; *************** function _IOC_Set *****************
  9556 ;; Defined at:
  9557 ;;		line 366 in file "../src/MCU_B1.c"
  9558 ;; Parameters:    Size  Location     Type
  9559 ;;		None
  9560 ;; Auto vars:     Size  Location     Type
  9561 ;;		None
  9562 ;; Return value:  Size  Location     Type
  9563 ;;		None               void
  9564 ;; Registers used:
  9565 ;;		wreg, status,2
  9566 ;; Tracked objects:
  9567 ;;		On entry : 0/0
  9568 ;;		On exit  : 0/0
  9569 ;;		Unchanged: 0/0
  9570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9575 ;;Total ram usage:        0 bytes
  9576 ;; Hardware stack levels used:    1
  9577 ;; Hardware stack levels required when called:    5
  9578 ;; This function calls:
  9579 ;;		Nothing
  9580 ;; This function is called by:
  9581 ;;		_Mcu_Initialization
  9582 ;; This function uses a non-reentrant model
  9583 ;;
  9584                           
  9585                           
  9586                           ;psect for function _IOC_Set
  9587  1CAD                     _IOC_Set:	
  9588                           
  9589                           ;MCU_B1.c: 367: WPUB2 = 0;
  9590                           
  9591                           ;incstack = 0
  9592                           ; Regs used in _IOC_Set: [wreg+status,2]
  9593  1CAD  0024               	movlb	4	; select bank4
  9594  1CAE  110D               	bcf	13,2	;volatile
  9595                           
  9596                           ;MCU_B1.c: 387: IOCBP = 0b00000000;
  9597  1CAF  0027               	movlb	7	; select bank7
  9598  1CB0  0194               	clrf	20	;volatile
  9599                           
  9600                           ;MCU_B1.c: 388: IOCBN = 0b00000100;
  9601  1CB1  3004               	movlw	4
  9602  1CB2  0095               	movwf	21	;volatile
  9603                           
  9604                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
  9605  1CB3  0196               	clrf	22	;volatile
  9606                           
  9607                           ;MCU_B1.c: 394: IOCIE = 1;
  9608  1CB4  158B               	bsf	11,3	;volatile
  9609                           
  9610                           ;MCU_B1.c: 395: IOCIF = 0;
  9611  1CB5  100B               	bcf	11,0	;volatile
  9612                           
  9613                           ;MCU_B1.c: 396: PEIE = 1;
  9614  1CB6  170B               	bsf	11,6	;volatile
  9615                           
  9616                           ;MCU_B1.c: 397: GIE = 1;
  9617  1CB7  178B               	bsf	11,7	;volatile
  9618  1CB8  0008               	return
  9619  1CB9                     __end_of_IOC_Set:	
  9620                           
  9621                           	psect	text48
  9622  1BF2                     __ptext48:	
  9623 ;; *************** function _Fosc_Set *****************
  9624 ;; Defined at:
  9625 ;;		line 56 in file "../src/MCU_B1.c"
  9626 ;; Parameters:    Size  Location     Type
  9627 ;;		None
  9628 ;; Auto vars:     Size  Location     Type
  9629 ;;		None
  9630 ;; Return value:  Size  Location     Type
  9631 ;;		None               void
  9632 ;; Registers used:
  9633 ;;		wreg
  9634 ;; Tracked objects:
  9635 ;;		On entry : 0/0
  9636 ;;		On exit  : 0/0
  9637 ;;		Unchanged: 0/0
  9638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9643 ;;Total ram usage:        0 bytes
  9644 ;; Hardware stack levels used:    1
  9645 ;; Hardware stack levels required when called:    5
  9646 ;; This function calls:
  9647 ;;		Nothing
  9648 ;; This function is called by:
  9649 ;;		_Mcu_Initialization
  9650 ;; This function uses a non-reentrant model
  9651 ;;
  9652                           
  9653                           
  9654                           ;psect for function _Fosc_Set
  9655  1BF2                     _Fosc_Set:	
  9656                           
  9657                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9658                           
  9659                           ;incstack = 0
  9660                           ; Regs used in _Fosc_Set: [wreg]
  9661  1BF2  3078               	movlw	120
  9662  1BF3  0021               	movlb	1	; select bank1
  9663  1BF4  0099               	movwf	25	;volatile
  9664  1BF5  0008               	return
  9665  1BF6                     __end_of_Fosc_Set:	
  9666                           
  9667                           	psect	text49
  9668  1C12                     __ptext49:	
  9669 ;; *************** function _ADC_Set *****************
  9670 ;; Defined at:
  9671 ;;		line 421 in file "../src/MCU_B1.c"
  9672 ;; Parameters:    Size  Location     Type
  9673 ;;		None
  9674 ;; Auto vars:     Size  Location     Type
  9675 ;;		None
  9676 ;; Return value:  Size  Location     Type
  9677 ;;		None               void
  9678 ;; Registers used:
  9679 ;;		wreg
  9680 ;; Tracked objects:
  9681 ;;		On entry : 0/0
  9682 ;;		On exit  : 0/0
  9683 ;;		Unchanged: 0/0
  9684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9689 ;;Total ram usage:        0 bytes
  9690 ;; Hardware stack levels used:    1
  9691 ;; Hardware stack levels required when called:    5
  9692 ;; This function calls:
  9693 ;;		Nothing
  9694 ;; This function is called by:
  9695 ;;		_Mcu_Initialization
  9696 ;; This function uses a non-reentrant model
  9697 ;;
  9698                           
  9699                           
  9700                           ;psect for function _ADC_Set
  9701  1C12                     _ADC_Set:	
  9702                           
  9703                           ;MCU_B1.c: 422: ADCON1 = 0xf3;
  9704                           
  9705                           ;incstack = 0
  9706                           ; Regs used in _ADC_Set: [wreg]
  9707  1C12  30F3               	movlw	243
  9708  1C13  0021               	movlb	1	; select bank1
  9709  1C14  009E               	movwf	30	;volatile
  9710                           
  9711                           ;MCU_B1.c: 423: FVRCON = 0xc1;
  9712  1C15  30C1               	movlw	193
  9713  1C16  0022               	movlb	2	; select bank2
  9714  1C17  0097               	movwf	23	;volatile
  9715  1C18  0008               	return
  9716  1C19                     __end_of_ADC_Set:	
  9717                           
  9718                           	psect	text50
  9719  0306                     __ptext50:	
  9720 ;; *************** function _Load_Main *****************
  9721 ;; Defined at:
  9722 ;;		line 39 in file "../src/OverLoad_B1.c"
  9723 ;; Parameters:    Size  Location     Type
  9724 ;;		None
  9725 ;; Auto vars:     Size  Location     Type
  9726 ;;  i               1   15[BANK0 ] unsigned char 
  9727 ;;  error           1   14[BANK0 ] unsigned char 
  9728 ;;  adjgo           1   12[BANK0 ] unsigned char 
  9729 ;;  j               1   11[BANK0 ] unsigned char 
  9730 ;; Return value:  Size  Location     Type
  9731 ;;		None               void
  9732 ;; Registers used:
  9733 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9734 ;; Tracked objects:
  9735 ;;		On entry : 0/0
  9736 ;;		On exit  : 0/0
  9737 ;;		Unchanged: 0/0
  9738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9740 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9741 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9742 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9743 ;;Total ram usage:        7 bytes
  9744 ;; Hardware stack levels used:    1
  9745 ;; Hardware stack levels required when called:    8
  9746 ;; This function calls:
  9747 ;;		_getAll_DimmerLights_AdjGO
  9748 ;;		_getMain_All_Error_Status
  9749 ;;		_getMain_LightsStatus
  9750 ;;		_getMain_Lights_Count
  9751 ;;		_getMain_LoadOK
  9752 ;;		_setLoad_AH_AL_Restore
  9753 ;; This function is called by:
  9754 ;;		_main
  9755 ;; This function uses a non-reentrant model
  9756 ;;
  9757                           
  9758                           
  9759                           ;psect for function _Load_Main
  9760  0306                     _Load_Main:	
  9761                           
  9762                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
  9763                           
  9764                           ;incstack = 0
  9765                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9766  0306  0020               	movlb	0	; select bank0
  9767  0307  01AF               	clrf	Load_Main@i
  9768  0308  01AB               	clrf	Load_Main@j
  9769  0309  3000               	movlw	0
  9770  030A  3192  225C  3183   	fcall	_getMain_All_Error_Status
  9771  030D  0020               	movlb	0	; select bank0
  9772  030E  00A9               	movwf	??_Load_Main
  9773  030F  0829               	movf	??_Load_Main,w
  9774  0310  00AE               	movwf	Load_Main@error
  9775  0311  01AC               	clrf	Load_Main@adjgo
  9776                           
  9777                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
  9778  0312  0022               	movlb	2	; select bank2
  9779  0313  1C43               	btfss	_Load^(0+256),0
  9780  0314  2C44               	goto	l1460
  9781                           
  9782                           ;OverLoad_B1.c: 45: adjgo = getAll_DimmerLights_AdjGO();
  9783  0315  319D  253E  3183   	fcall	_getAll_DimmerLights_AdjGO
  9784  0318  0020               	movlb	0	; select bank0
  9785  0319  00A9               	movwf	??_Load_Main
  9786  031A  0829               	movf	??_Load_Main,w
  9787  031B  00AC               	movwf	Load_Main@adjgo
  9788                           
  9789                           ;OverLoad_B1.c: 47: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
  9790  031C  01AD               	clrf	_Load_Main$3860
  9791  031D  3191  21CE  3183   	fcall	_getMain_LightsStatus
  9792  0320  3A01               	xorlw	1
  9793  0321  1D03               	skipz
  9794  0322  2B2C               	goto	l7975
  9795  0323  0020               	movlb	0	; select bank0
  9796  0324  08AE               	movf	Load_Main@error,f
  9797  0325  1D03               	skipz
  9798  0326  2B2C               	goto	l7975
  9799  0327  08AC               	movf	Load_Main@adjgo,f
  9800  0328  1D03               	skipz
  9801  0329  2B2C               	goto	l7975
  9802  032A  01AD               	clrf	_Load_Main$3860
  9803  032B  0AAD               	incf	_Load_Main$3860,f
  9804  032C                     l7975:	
  9805  032C  0020               	movlb	0	; select bank0
  9806  032D  082D               	movf	_Load_Main$3860,w
  9807  032E  0022               	movlb	2	; select bank2
  9808  032F  10C3               	bcf	_Load^(0+256),1
  9809  0330  1D03               	skipz
  9810  0331  14C3               	bsf	_Load^(0+256),1
  9811                           
  9812                           ;OverLoad_B1.c: 48: if (getMain_LoadOK() == 1 && Load.Run == 0) {
  9813  0332  319C  24D2  3183   	fcall	_getMain_LoadOK
  9814  0335  3A01               	xorlw	1
  9815  0336  1D03               	skipz
  9816  0337  2B3D               	goto	l1463
  9817  0338  0022               	movlb	2	; select bank2
  9818  0339  19C3               	btfsc	_Load^(0+256),3
  9819  033A  2B3D               	goto	l1463
  9820                           
  9821                           ;OverLoad_B1.c: 49: Load.Run = 1;
  9822  033B  15C3               	bsf	_Load^(0+256),3
  9823                           
  9824                           ;OverLoad_B1.c: 50: Load.OK = 0;
  9825  033C  13C3               	bcf	_Load^(0+256),7
  9826  033D                     l1463:	
  9827                           
  9828                           ;OverLoad_B1.c: 51: }
  9829                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
  9830  033D  0022               	movlb	2	; select bank2
  9831  033E  1CC3               	btfss	_Load^(0+256),1
  9832  033F  2C14               	goto	l1464
  9833                           
  9834                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
  9835  0340  1543               	bsf	_Load^(0+256),2
  9836                           
  9837                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
  9838  0341  1E43               	btfss	_Load^(0+256),4
  9839  0342  2C12               	goto	l1465
  9840                           
  9841                           ;OverLoad_B1.c: 58: Load.Time++;
  9842  0343  3001               	movlw	1
  9843  0344  07C4               	addwf	(_Load^(0+256)+1),f
  9844  0345  3000               	movlw	0
  9845  0346  3DC5               	addwfc	((_Load+1)^(0+256)+1),f
  9846                           
  9847                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
  9848  0347  3000               	movlw	0
  9849  0348  0245               	subwf	((_Load+1)^(0+256)+1),w
  9850  0349  3005               	movlw	5
  9851  034A  1903               	skipnz
  9852  034B  0244               	subwf	(_Load^(0+256)+1),w
  9853  034C  1C03               	skipc
  9854  034D  0008               	return
  9855                           
  9856                           ;OverLoad_B1.c: 60: Load.Time = 0;
  9857  034E  01C4               	clrf	(_Load^(0+256)+1)
  9858  034F  01C5               	clrf	((_Load+1)^(0+256)+1)
  9859                           
  9860                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
  9861  0350  1243               	bcf	_Load^(0+256),4
  9862                           
  9863                           ;OverLoad_B1.c: 63: for (i = 0; i < 4; i++) {
  9864  0351  0020               	movlb	0	; select bank0
  9865  0352  01AF               	clrf	Load_Main@i
  9866  0353  3004               	movlw	4
  9867  0354  022F               	subwf	Load_Main@i,w
  9868  0355  1803               	btfsc	3,0
  9869  0356  2B81               	goto	l8001
  9870  0357                     l7995:	
  9871                           
  9872                           ;OverLoad_B1.c: 64: Load.ADH += Load.AH[i];
  9873  0357  352F               	lslf	Load_Main@i,w
  9874  0358  3E4E               	addlw	(_Load+11)& (0+255)
  9875  0359  0086               	movwf	6
  9876  035A  3001               	movlw	1	; select bank2/3
  9877  035B  0087               	movwf	7
  9878  035C  3F40               	moviw [0]fsr1
  9879  035D  00A9               	movwf	??_Load_Main
  9880  035E  3F41               	moviw [1]fsr1
  9881  035F  00AA               	movwf	??_Load_Main+1
  9882  0360  0829               	movf	??_Load_Main,w
  9883  0361  0022               	movlb	2	; select bank2
  9884  0362  07C8               	addwf	(_Load^(0+256)+5),f
  9885  0363  0020               	movlb	0	; select bank0
  9886  0364  082A               	movf	??_Load_Main+1,w
  9887  0365  0022               	movlb	2	; select bank2
  9888  0366  3DC9               	addwfc	((_Load+1)^(0+256)+5),f
  9889                           
  9890                           ;OverLoad_B1.c: 65: Load.ADL += Load.AL[i];
  9891  0367  0020               	movlb	0	; select bank0
  9892  0368  352F               	lslf	Load_Main@i,w
  9893  0369  3E58               	addlw	(_Load+21)& (0+255)
  9894  036A  0086               	movwf	6
  9895  036B  3001               	movlw	1	; select bank2/3
  9896  036C  0087               	movwf	7
  9897  036D  3F40               	moviw [0]fsr1
  9898  036E  00A9               	movwf	??_Load_Main
  9899  036F  3F41               	moviw [1]fsr1
  9900  0370  00AA               	movwf	??_Load_Main+1
  9901  0371  0829               	movf	??_Load_Main,w
  9902  0372  0022               	movlb	2	; select bank2
  9903  0373  07CA               	addwf	(_Load^(0+256)+7),f
  9904  0374  0020               	movlb	0	; select bank0
  9905  0375  082A               	movf	??_Load_Main+1,w
  9906  0376  0022               	movlb	2	; select bank2
  9907  0377  3DCB               	addwfc	((_Load+1)^(0+256)+7),f
  9908  0378  3001               	movlw	1
  9909  0379  0020               	movlb	0	; select bank0
  9910  037A  00A9               	movwf	??_Load_Main
  9911  037B  0829               	movf	??_Load_Main,w
  9912  037C  07AF               	addwf	Load_Main@i,f
  9913  037D  3004               	movlw	4
  9914  037E  022F               	subwf	Load_Main@i,w
  9915  037F  1C03               	skipc
  9916  0380  2B57               	goto	l7995
  9917  0381                     l8001:	
  9918                           
  9919                           ;OverLoad_B1.c: 66: }
  9920                           ;OverLoad_B1.c: 67: Load.ADH /= 4;
  9921  0381  3002               	movlw	2
  9922  0382  0022               	movlb	2	; select bank2
  9923  0383                     u7965:	
  9924  0383  36C9               	lsrf	((_Load+1)^(0+256)+5),f
  9925  0384  0CC8               	rrf	(_Load^(0+256)+5),f
  9926  0385  0B89               	decfsz	9,f
  9927  0386  2B83               	goto	u7965
  9928                           
  9929                           ;OverLoad_B1.c: 68: Load.ADL /= 4;
  9930  0387  3002               	movlw	2
  9931  0388                     u7975:	
  9932  0388  36CB               	lsrf	((_Load+1)^(0+256)+7),f
  9933  0389  0CCA               	rrf	(_Load^(0+256)+7),f
  9934  038A  0B89               	decfsz	9,f
  9935  038B  2B88               	goto	u7975
  9936                           
  9937                           ;OverLoad_B1.c: 69: setLoad_AH_AL_Restore();
  9938  038C  319F  2728  3183   	fcall	_setLoad_AH_AL_Restore
  9939                           
  9940                           ;OverLoad_B1.c: 71: if (Load.ADH > Load.ADL) {
  9941  038F  0022               	movlb	2	; select bank2
  9942  0390  0849               	movf	((_Load+1)^(0+256)+5),w
  9943  0391  024B               	subwf	((_Load+1)^(0+256)+7),w
  9944  0392  1D03               	skipz
  9945  0393  2B96               	goto	u7985
  9946  0394  0848               	movf	(_Load^(0+256)+5),w
  9947  0395  024A               	subwf	(_Load^(0+256)+7),w
  9948  0396                     u7985:	
  9949  0396  1803               	skipnc
  9950  0397  0008               	return
  9951                           
  9952                           ;OverLoad_B1.c: 72: Load.AD = Load.ADH - Load.ADL;
  9953  0398  3005               	movlw	5
  9954  0399  3E43               	addlw	_Load& (0+255)
  9955  039A  0086               	movwf	6
  9956  039B  3001               	movlw	1	; select bank2/3
  9957  039C  0087               	movwf	7
  9958  039D  094A               	comf	(_Load^(0+256)+7),w
  9959  039E  0020               	movlb	0	; select bank0
  9960  039F  00A9               	movwf	??_Load_Main
  9961  03A0  0022               	movlb	2	; select bank2
  9962  03A1  094B               	comf	((_Load+1)^(0+256)+7),w
  9963  03A2  0020               	movlb	0	; select bank0
  9964  03A3  00AA               	movwf	??_Load_Main+1
  9965  03A4  0AA9               	incf	??_Load_Main,f
  9966  03A5  1903               	skipnz
  9967  03A6  0AAA               	incf	??_Load_Main+1,f
  9968  03A7  3F40               	moviw [0]fsr1
  9969  03A8  0729               	addwf	??_Load_Main,w
  9970  03A9  0022               	movlb	2	; select bank2
  9971  03AA  00E2               	movwf	(_Load^(0+256)+31)
  9972  03AB  3F41               	moviw [1]fsr1
  9973  03AC  0020               	movlb	0	; select bank0
  9974  03AD  3D2A               	addwfc	??_Load_Main+1,w
  9975  03AE  0022               	movlb	2	; select bank2
  9976  03AF  00E3               	movwf	(_Load^(0+256)+32)
  9977                           
  9978                           ;OverLoad_B1.c: 73: Load.ADH = 0;
  9979  03B0  01C8               	clrf	(_Load^(0+256)+5)
  9980  03B1  01C9               	clrf	((_Load+1)^(0+256)+5)
  9981                           
  9982                           ;OverLoad_B1.c: 74: Load.ADL = 0;
  9983  03B2  01CA               	clrf	(_Load^(0+256)+7)
  9984  03B3  01CB               	clrf	((_Load+1)^(0+256)+7)
  9985                           
  9986                           ;OverLoad_B1.c: 75: Load.LightsCount = getMain_Lights_Count();
  9987  03B4  319E  2694  3183   	fcall	_getMain_Lights_Count
  9988  03B7  0020               	movlb	0	; select bank0
  9989  03B8  00A9               	movwf	??_Load_Main
  9990  03B9  0829               	movf	??_Load_Main,w
  9991  03BA  0022               	movlb	2	; select bank2
  9992  03BB  00EE               	movwf	(_Load^(0+256)+43)
  9993                           
  9994                           ;OverLoad_B1.c: 77: if (Load.Run == 1) {
  9995  03BC  1DC3               	btfss	_Load^(0+256),3
  9996  03BD  2BE3               	goto	l8033
  9997                           
  9998                           ;OverLoad_B1.c: 78: if (Load.Count < 2) {
  9999  03BE  3002               	movlw	2
 10000  03BF  026C               	subwf	(_Load^(0+256)+41),w
 10001  03C0  1803               	skipnc
 10002  03C1  2BE3               	goto	l8033
 10003                           
 10004                           ;OverLoad_B1.c: 79: Load.Count++;
 10005  03C2  3001               	movlw	1
 10006  03C3  0020               	movlb	0	; select bank0
 10007  03C4  00A9               	movwf	??_Load_Main
 10008  03C5  0829               	movf	??_Load_Main,w
 10009  03C6  0022               	movlb	2	; select bank2
 10010  03C7  07EC               	addwf	(_Load^(0+256)+41),f
 10011                           
 10012                           ;OverLoad_B1.c: 80: if (Load.Count == 1) {
 10013  03C8  086C               	movf	(_Load^(0+256)+41),w
 10014  03C9  3A01               	xorlw	1
 10015  03CA  1D03               	skipz
 10016  03CB  2BD0               	goto	l8025
 10017                           
 10018                           ;OverLoad_B1.c: 81: Load.JudgeValue = (20*50);
 10019  03CC  30E8               	movlw	232
 10020  03CD  00E8               	movwf	(_Load^(0+256)+37)
 10021  03CE  3003               	movlw	3
 10022  03CF  2BDB               	goto	L6
 10023  03D0                     l8025:	
 10024                           ;OverLoad_B1.c: 82: } else if (Load.Count == 2) {
 10025                           
 10026  03D0  086C               	movf	(_Load^(0+256)+41),w
 10027  03D1  3A02               	xorlw	2
 10028  03D2  1D03               	skipz
 10029  03D3  2BE3               	goto	l8033
 10030                           
 10031                           ;OverLoad_B1.c: 83: if (Load.LightsCount == 1) {
 10032  03D4  086E               	movf	(_Load^(0+256)+43),w
 10033  03D5  3A01               	xorlw	1
 10034  03D6  1D03               	skipz
 10035  03D7  2BDD               	goto	l8031
 10036                           
 10037                           ;OverLoad_B1.c: 84: Load.JudgeValue = (int)(1.1*50);
 10038  03D8  3037               	movlw	55
 10039  03D9  00E8               	movwf	(_Load^(0+256)+37)
 10040  03DA  3000               	movlw	0
 10041  03DB                     L6:	
 10042  03DB  00E9               	movwf	(_Load^(0+256)+38)
 10043                           
 10044                           ;OverLoad_B1.c: 85: } else {
 10045  03DC  2BE3               	goto	l8033
 10046  03DD                     l8031:	
 10047                           
 10048                           ;OverLoad_B1.c: 86: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 10049  03DD  084C               	movf	(_Load^(0+256)+9),w
 10050  03DE  3E37               	addlw	55
 10051  03DF  00E8               	movwf	(_Load^(0+256)+37)
 10052  03E0  3000               	movlw	0
 10053  03E1  3D4D               	addwfc	((_Load+1)^(0+256)+9),w
 10054  03E2  00E9               	movwf	((_Load+1)^(0+256)+37)
 10055  03E3                     l8033:	
 10056                           
 10057                           ;OverLoad_B1.c: 87: }
 10058                           ;OverLoad_B1.c: 88: }
 10059                           ;OverLoad_B1.c: 89: }
 10060                           ;OverLoad_B1.c: 90: }
 10061                           ;OverLoad_B1.c: 92: if (Load.AD >= Load.JudgeValue) {
 10062  03E3  0869               	movf	((_Load+1)^(0+256)+37),w
 10063  03E4  0263               	subwf	((_Load+1)^(0+256)+31),w
 10064  03E5  1D03               	skipz
 10065  03E6  2BE9               	goto	u8045
 10066  03E7  0868               	movf	(_Load^(0+256)+37),w
 10067  03E8  0262               	subwf	(_Load^(0+256)+31),w
 10068  03E9                     u8045:	
 10069  03E9  1C03               	skipc
 10070  03EA  2BF8               	goto	l8043
 10071                           
 10072                           ;OverLoad_B1.c: 93: Load.ErrorCount++;
 10073  03EB  3001               	movlw	1
 10074  03EC  0020               	movlb	0	; select bank0
 10075  03ED  00A9               	movwf	??_Load_Main
 10076  03EE  0829               	movf	??_Load_Main,w
 10077  03EF  0022               	movlb	2	; select bank2
 10078  03F0  07ED               	addwf	(_Load^(0+256)+42),f
 10079                           
 10080                           ;OverLoad_B1.c: 94: if (Load.ErrorCount > 2) {
 10081  03F1  3003               	movlw	3
 10082  03F2  026D               	subwf	(_Load^(0+256)+42),w
 10083  03F3  1C03               	skipc
 10084  03F4  0008               	return
 10085                           
 10086                           ;OverLoad_B1.c: 95: Load.ErrorCount = 0;
 10087  03F5  01ED               	clrf	(_Load^(0+256)+42)
 10088                           
 10089                           ;OverLoad_B1.c: 96: Load.ERROR = 1;
 10090  03F6  16C3               	bsf	_Load^(0+256),5
 10091                           
 10092                           ;OverLoad_B1.c: 122: }
 10093                           ;OverLoad_B1.c: 123: } else {
 10094  03F7  0008               	return
 10095  03F8                     l8043:	
 10096                           
 10097                           ;OverLoad_B1.c: 124: Load.ErrorCount = 0;
 10098  03F8  01ED               	clrf	(_Load^(0+256)+42)
 10099                           
 10100                           ;OverLoad_B1.c: 125: if (Load.Run == 1) {
 10101  03F9  1DC3               	btfss	_Load^(0+256),3
 10102  03FA  0008               	return
 10103                           
 10104                           ;OverLoad_B1.c: 126: if (Load.OK == 0) {
 10105  03FB  1BC3               	btfsc	_Load^(0+256),7
 10106  03FC  0008               	return
 10107                           
 10108                           ;OverLoad_B1.c: 127: Load.SafeCount++;
 10109  03FD  3001               	movlw	1
 10110  03FE  0020               	movlb	0	; select bank0
 10111  03FF  00A9               	movwf	??_Load_Main
 10112  0400  0829               	movf	??_Load_Main,w
 10113  0401  0022               	movlb	2	; select bank2
 10114  0402  07EF               	addwf	(_Load^(0+256)+44),f
 10115                           
 10116                           ;OverLoad_B1.c: 128: if (Load.SafeCount >= 3) {
 10117  0403  3003               	movlw	3
 10118  0404  026F               	subwf	(_Load^(0+256)+44),w
 10119  0405  1C03               	skipc
 10120  0406  0008               	return
 10121                           
 10122                           ;OverLoad_B1.c: 129: Load.SafeCount = 0;
 10123  0407  01EF               	clrf	(_Load^(0+256)+44)
 10124                           
 10125                           ;OverLoad_B1.c: 130: Load.OK = 1;
 10126  0408  17C3               	bsf	_Load^(0+256),7
 10127                           
 10128                           ;OverLoad_B1.c: 131: Load.Run = 0;
 10129  0409  11C3               	bcf	_Load^(0+256),3
 10130                           
 10131                           ;OverLoad_B1.c: 132: Load.Count = 0;
 10132  040A  01EC               	clrf	(_Load^(0+256)+41)
 10133                           
 10134                           ;OverLoad_B1.c: 133: Load.TotalLoad = Load.AD;
 10135  040B  0863               	movf	((_Load+1)^(0+256)+31),w
 10136  040C  01CD               	clrf	((_Load+1)^(0+256)+9)
 10137  040D  07CD               	addwf	((_Load+1)^(0+256)+9),f
 10138  040E  0862               	movf	(_Load^(0+256)+31),w
 10139  040F  01CC               	clrf	(_Load^(0+256)+9)
 10140  0410  07CC               	addwf	(_Load^(0+256)+9),f
 10141                           
 10142                           ;OverLoad_B1.c: 157: }
 10143                           ;OverLoad_B1.c: 158: }
 10144                           ;OverLoad_B1.c: 159: }
 10145                           ;OverLoad_B1.c: 160: }
 10146                           ;OverLoad_B1.c: 161: }
 10147                           ;OverLoad_B1.c: 162: }
 10148                           ;OverLoad_B1.c: 163: } else {
 10149  0411  0008               	return
 10150  0412                     l1465:	
 10151                           
 10152                           ;OverLoad_B1.c: 164: Load.ADtoGO = 1;
 10153  0412  1643               	bsf	_Load^(0+256),4
 10154                           
 10155                           ;OverLoad_B1.c: 165: }
 10156                           ;OverLoad_B1.c: 166: } else {
 10157  0413  0008               	return
 10158  0414                     l1464:	
 10159                           
 10160                           ;OverLoad_B1.c: 167: if (Load.LightsON == 1 && error != 3) {
 10161  0414  1D43               	btfss	_Load^(0+256),2
 10162  0415  2C32               	goto	l8091
 10163  0416  0020               	movlb	0	; select bank0
 10164  0417  082E               	movf	Load_Main@error,w
 10165  0418  3A03               	xorlw	3
 10166  0419  1903               	skipnz
 10167  041A  2C32               	goto	l8091
 10168                           
 10169                           ;OverLoad_B1.c: 168: Load.LightsON = 0;
 10170  041B  0022               	movlb	2	; select bank2
 10171  041C  1143               	bcf	_Load^(0+256),2
 10172                           
 10173                           ;OverLoad_B1.c: 170: Load.Time = 0;
 10174  041D  01C4               	clrf	(_Load^(0+256)+1)
 10175  041E  01C5               	clrf	((_Load+1)^(0+256)+1)
 10176                           
 10177                           ;OverLoad_B1.c: 171: Load.ADtoGO = 0;
 10178  041F  1243               	bcf	_Load^(0+256),4
 10179                           
 10180                           ;OverLoad_B1.c: 172: setLoad_AH_AL_Restore();
 10181  0420  319F  2728  3183   	fcall	_setLoad_AH_AL_Restore
 10182                           
 10183                           ;OverLoad_B1.c: 173: Load.Count = 0;
 10184  0423  0022               	movlb	2	; select bank2
 10185  0424  01EC               	clrf	(_Load^(0+256)+41)
 10186                           
 10187                           ;OverLoad_B1.c: 174: Load.ErrorCount = 0;
 10188  0425  01ED               	clrf	(_Load^(0+256)+42)
 10189                           
 10190                           ;OverLoad_B1.c: 175: Load.SafeCount = 0;
 10191  0426  01EF               	clrf	(_Load^(0+256)+44)
 10192                           
 10193                           ;OverLoad_B1.c: 177: Load.ADH = 0;
 10194  0427  01C8               	clrf	(_Load^(0+256)+5)
 10195  0428  01C9               	clrf	((_Load+1)^(0+256)+5)
 10196                           
 10197                           ;OverLoad_B1.c: 178: Load.ADL = 0;
 10198  0429  01CA               	clrf	(_Load^(0+256)+7)
 10199  042A  01CB               	clrf	((_Load+1)^(0+256)+7)
 10200                           
 10201                           ;OverLoad_B1.c: 179: Load.AD = 0;
 10202  042B  01E2               	clrf	(_Load^(0+256)+31)
 10203  042C  01E3               	clrf	((_Load+1)^(0+256)+31)
 10204                           
 10205                           ;OverLoad_B1.c: 180: Load.JudgeValue = 0;
 10206  042D  01E8               	clrf	(_Load^(0+256)+37)
 10207  042E  01E9               	clrf	((_Load+1)^(0+256)+37)
 10208                           
 10209                           ;OverLoad_B1.c: 181: Load.LightsCount = 0;
 10210  042F  01EE               	clrf	(_Load^(0+256)+43)
 10211                           
 10212                           ;OverLoad_B1.c: 182: Load.Run = 0;
 10213  0430  11C3               	bcf	_Load^(0+256),3
 10214                           
 10215                           ;OverLoad_B1.c: 183: Load.OK = 1;
 10216  0431  17C3               	bsf	_Load^(0+256),7
 10217  0432                     l8091:	
 10218                           
 10219                           ;OverLoad_B1.c: 204: }
 10220                           ;OverLoad_B1.c: 205: if (Load.ERROR == 1) {
 10221  0432  0022               	movlb	2	; select bank2
 10222  0433  1EC3               	btfss	_Load^(0+256),5
 10223  0434  0008               	return
 10224                           
 10225                           ;OverLoad_B1.c: 206: Load.ErrorTime++;
 10226  0435  3001               	movlw	1
 10227  0436  07C6               	addwf	(_Load^(0+256)+3),f
 10228  0437  3000               	movlw	0
 10229  0438  3DC7               	addwfc	((_Load+1)^(0+256)+3),f
 10230                           
 10231                           ;OverLoad_B1.c: 207: if (Load.ErrorTime >= 1000) {
 10232  0439  3003               	movlw	3
 10233  043A  0247               	subwf	((_Load+1)^(0+256)+3),w
 10234  043B  30E8               	movlw	232
 10235  043C  1903               	skipnz
 10236  043D  0246               	subwf	(_Load^(0+256)+3),w
 10237  043E  1C03               	skipc
 10238  043F  0008               	return
 10239                           
 10240                           ;OverLoad_B1.c: 208: Load.ErrorTime = 0;
 10241  0440  01C6               	clrf	(_Load^(0+256)+3)
 10242  0441  01C7               	clrf	((_Load+1)^(0+256)+3)
 10243                           
 10244                           ;OverLoad_B1.c: 215: Load.ERROR = 0;
 10245  0442  12C3               	bcf	_Load^(0+256),5
 10246                           
 10247                           ;OverLoad_B1.c: 216: }
 10248                           ;OverLoad_B1.c: 217: }
 10249                           ;OverLoad_B1.c: 218: }
 10250                           ;OverLoad_B1.c: 219: } else {
 10251  0443  0008               	return
 10252  0444                     l1460:	
 10253                           
 10254                           ;OverLoad_B1.c: 220: if (myMain.PowerON == 1) {
 10255  0444  0021               	movlb	1	; select bank1
 10256  0445  1C20               	btfss	_myMain^(0+128),0
 10257  0446  0008               	return
 10258                           
 10259                           ;OverLoad_B1.c: 221: Load.Enable = 1;
 10260  0447  0022               	movlb	2	; select bank2
 10261  0448  1443               	bsf	_Load^(0+256),0
 10262  0449  0008               	return
 10263  044A                     __end_of_Load_Main:	
 10264                           
 10265                           	psect	text51
 10266  1CD2                     __ptext51:	
 10267 ;; *************** function _getMain_LoadOK *****************
 10268 ;; Defined at:
 10269 ;;		line 440 in file "../src/main_B1.c"
 10270 ;; Parameters:    Size  Location     Type
 10271 ;;		None
 10272 ;; Auto vars:     Size  Location     Type
 10273 ;;  ok              1    2[BANK0 ] unsigned char 
 10274 ;; Return value:  Size  Location     Type
 10275 ;;                  1    wreg      unsigned char 
 10276 ;; Registers used:
 10277 ;;		wreg, status,2, pclath, cstack
 10278 ;; Tracked objects:
 10279 ;;		On entry : 0/0
 10280 ;;		On exit  : 0/0
 10281 ;;		Unchanged: 0/0
 10282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10284 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10285 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10286 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10287 ;;Total ram usage:        2 bytes
 10288 ;; Hardware stack levels used:    1
 10289 ;; Hardware stack levels required when called:    6
 10290 ;; This function calls:
 10291 ;;		_getDimmer_LoadOK
 10292 ;; This function is called by:
 10293 ;;		_Load_Main
 10294 ;; This function uses a non-reentrant model
 10295 ;;
 10296                           
 10297                           
 10298                           ;psect for function _getMain_LoadOK
 10299  1CD2                     _getMain_LoadOK:	
 10300                           
 10301                           ;main_B1.c: 441: char ok = 0;
 10302                           
 10303                           ;incstack = 0
 10304                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10305  1CD2  0020               	movlb	0	; select bank0
 10306  1CD3  01A2               	clrf	getMain_LoadOK@ok
 10307                           
 10308                           ;main_B1.c: 447: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10309  1CD4  319C  2439         	fcall	_getDimmer_LoadOK
 10310  1CD6  3A01               	xorlw	1
 10311  1CD7  3000               	movlw	0
 10312  1CD8  1903               	skipnz
 10313  1CD9  3001               	movlw	1
 10314  1CDA  0020               	movlb	0	; select bank0
 10315  1CDB  00A1               	movwf	??_getMain_LoadOK
 10316  1CDC  0821               	movf	??_getMain_LoadOK,w
 10317  1CDD  00A2               	movwf	getMain_LoadOK@ok
 10318                           
 10319                           ;main_B1.c: 449: return ok;
 10320  1CDE  0822               	movf	getMain_LoadOK@ok,w
 10321  1CDF  0008               	return
 10322  1CE0                     __end_of_getMain_LoadOK:	
 10323                           
 10324                           	psect	text52
 10325  1C39                     __ptext52:	
 10326 ;; *************** function _getDimmer_LoadOK *****************
 10327 ;; Defined at:
 10328 ;;		line 599 in file "../src/Dimmer_B1.c"
 10329 ;; Parameters:    Size  Location     Type
 10330 ;;		None
 10331 ;; Auto vars:     Size  Location     Type
 10332 ;;  status          1    0[BANK0 ] unsigned char 
 10333 ;; Return value:  Size  Location     Type
 10334 ;;                  1    wreg      unsigned char 
 10335 ;; Registers used:
 10336 ;;		wreg, status,2
 10337 ;; Tracked objects:
 10338 ;;		On entry : 0/0
 10339 ;;		On exit  : 0/0
 10340 ;;		Unchanged: 0/0
 10341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10343 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10345 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10346 ;;Total ram usage:        1 bytes
 10347 ;; Hardware stack levels used:    1
 10348 ;; Hardware stack levels required when called:    5
 10349 ;; This function calls:
 10350 ;;		Nothing
 10351 ;; This function is called by:
 10352 ;;		_getMain_LoadOK
 10353 ;; This function uses a non-reentrant model
 10354 ;;
 10355                           
 10356                           
 10357                           ;psect for function _getDimmer_LoadOK
 10358  1C39                     _getDimmer_LoadOK:	
 10359                           
 10360                           ;Dimmer_B1.c: 600: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10361                           
 10362                           ;incstack = 0
 10363                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10364  1C39  3000               	movlw	0
 10365  1C3A  0022               	movlb	2	; select bank2
 10366  1C3B  18BE               	btfsc	_Dimmer^(0+256),1
 10367  1C3C  3001               	movlw	1
 10368  1C3D  0020               	movlb	0	; select bank0
 10369  1C3E  00A0               	movwf	getDimmer_LoadOK@status
 10370                           
 10371                           ;Dimmer_B1.c: 601: return status;
 10372  1C3F  0820               	movf	getDimmer_LoadOK@status,w
 10373  1C40  0008               	return
 10374  1C41                     __end_of_getDimmer_LoadOK:	
 10375                           
 10376                           	psect	text53
 10377  1E94                     __ptext53:	
 10378 ;; *************** function _getMain_Lights_Count *****************
 10379 ;; Defined at:
 10380 ;;		line 410 in file "../src/main_B1.c"
 10381 ;; Parameters:    Size  Location     Type
 10382 ;;		None
 10383 ;; Auto vars:     Size  Location     Type
 10384 ;;  status2         1    3[BANK0 ] unsigned char 
 10385 ;;  status1         1    2[BANK0 ] unsigned char 
 10386 ;;  status3         1    1[BANK0 ] unsigned char 
 10387 ;;  count           1    0[BANK0 ] unsigned char 
 10388 ;; Return value:  Size  Location     Type
 10389 ;;                  1    wreg      unsigned char 
 10390 ;; Registers used:
 10391 ;;		wreg, status,2, status,0
 10392 ;; Tracked objects:
 10393 ;;		On entry : 0/0
 10394 ;;		On exit  : 0/0
 10395 ;;		Unchanged: 0/0
 10396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10398 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10400 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;Total ram usage:        4 bytes
 10402 ;; Hardware stack levels used:    1
 10403 ;; Hardware stack levels required when called:    5
 10404 ;; This function calls:
 10405 ;;		Nothing
 10406 ;; This function is called by:
 10407 ;;		_Load_Main
 10408 ;; This function uses a non-reentrant model
 10409 ;;
 10410                           
 10411                           
 10412                           ;psect for function _getMain_Lights_Count
 10413  1E94                     _getMain_Lights_Count:	
 10414                           
 10415                           ;main_B1.c: 411: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10416                           
 10417                           ;incstack = 0
 10418                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10419  1E94  0020               	movlb	0	; select bank0
 10420  1E95  01A2               	clrf	getMain_Lights_Count@status1
 10421  1E96  01A3               	clrf	getMain_Lights_Count@status2
 10422  1E97  01A1               	clrf	getMain_Lights_Count@status3
 10423  1E98  01A0               	clrf	getMain_Lights_Count@count
 10424                           
 10425                           ;main_B1.c: 415: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10426  1E99  3000               	movlw	0
 10427  1E9A  0023               	movlb	3	; select bank3
 10428  1E9B  18A9               	btfsc	(_DimmerLights1^(0+384)+9),1
 10429  1E9C  3001               	movlw	1
 10430  1E9D  0020               	movlb	0	; select bank0
 10431  1E9E  00A2               	movwf	getMain_Lights_Count@status1
 10432                           
 10433                           ;main_B1.c: 418: status2 = DimmerLights2.Loop == 1 ? 1 : 0;
 10434  1E9F  3000               	movlw	0
 10435  1EA0  0023               	movlb	3	; select bank3
 10436  1EA1  18B8               	btfsc	(_DimmerLights2^(0+384)+9),1
 10437  1EA2  3001               	movlw	1
 10438  1EA3  0020               	movlb	0	; select bank0
 10439  1EA4  00A3               	movwf	getMain_Lights_Count@status2
 10440                           
 10441                           ;main_B1.c: 436: return count = (status1 + status2 + status3);
 10442  1EA5  0822               	movf	getMain_Lights_Count@status1,w
 10443  1EA6  0723               	addwf	getMain_Lights_Count@status2,w
 10444  1EA7  0721               	addwf	getMain_Lights_Count@status3,w
 10445  1EA8  00A0               	movwf	getMain_Lights_Count@count
 10446  1EA9  0008               	return
 10447  1EAA                     __end_of_getMain_Lights_Count:	
 10448                           
 10449                           	psect	text54
 10450  1D3E                     __ptext54:	
 10451 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 10452 ;; Defined at:
 10453 ;;		line 490 in file "../src/Dimmer_B1.c"
 10454 ;; Parameters:    Size  Location     Type
 10455 ;;		None
 10456 ;; Auto vars:     Size  Location     Type
 10457 ;;  adjgo           1    1[BANK0 ] unsigned char 
 10458 ;; Return value:  Size  Location     Type
 10459 ;;                  1    wreg      unsigned char 
 10460 ;; Registers used:
 10461 ;;		wreg, status,2
 10462 ;; Tracked objects:
 10463 ;;		On entry : 0/0
 10464 ;;		On exit  : 0/0
 10465 ;;		Unchanged: 0/0
 10466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10468 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10469 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10470 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10471 ;;Total ram usage:        3 bytes
 10472 ;; Hardware stack levels used:    1
 10473 ;; Hardware stack levels required when called:    5
 10474 ;; This function calls:
 10475 ;;		Nothing
 10476 ;; This function is called by:
 10477 ;;		_setDimmerLights_SwOn
 10478 ;;		_setDimmerLights_AdjControl
 10479 ;;		_Load_Main
 10480 ;; This function uses a non-reentrant model
 10481 ;;
 10482                           
 10483                           
 10484                           ;psect for function _getAll_DimmerLights_AdjGO
 10485  1D3E                     _getAll_DimmerLights_AdjGO:	
 10486                           
 10487                           ;Dimmer_B1.c: 491: char adjgo = 0;
 10488                           
 10489                           ;incstack = 0
 10490                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 10491  1D3E  0020               	movlb	0	; select bank0
 10492  1D3F  01A1               	clrf	getAll_DimmerLights_AdjGO@adjgo
 10493                           
 10494                           ;Dimmer_B1.c: 496: adjgo = DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1 ? 1 : 0;
 10495  1D40  01A2               	clrf	_getAll_DimmerLights_AdjGO$2563
 10496  1D41  0AA2               	incf	_getAll_DimmerLights_AdjGO$2563,f
 10497  1D42  0023               	movlb	3	; select bank3
 10498  1D43  1DA8               	btfss	(_DimmerLights1^(0+384)+8),3
 10499  1D44  19B7               	btfsc	(_DimmerLights2^(0+384)+8),3
 10500  1D45  2D48               	goto	l6233
 10501  1D46  0020               	movlb	0	; select bank0
 10502  1D47  01A2               	clrf	_getAll_DimmerLights_AdjGO$2563
 10503  1D48                     l6233:	
 10504  1D48  0020               	movlb	0	; select bank0
 10505  1D49  0822               	movf	_getAll_DimmerLights_AdjGO$2563,w
 10506  1D4A  00A0               	movwf	??_getAll_DimmerLights_AdjGO
 10507  1D4B  0820               	movf	??_getAll_DimmerLights_AdjGO,w
 10508  1D4C  00A1               	movwf	getAll_DimmerLights_AdjGO@adjgo
 10509                           
 10510                           ;Dimmer_B1.c: 501: return adjgo;
 10511  1D4D  0821               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 10512  1D4E  0008               	return
 10513  1D4F                     __end_of_getAll_DimmerLights_AdjGO:	
 10514                           
 10515                           	psect	text55
 10516  1BFB                     __ptext55:	
 10517 ;; *************** function _Load_Initialization *****************
 10518 ;; Defined at:
 10519 ;;		line 9 in file "../src/OverLoad_B1.c"
 10520 ;; Parameters:    Size  Location     Type
 10521 ;;		None
 10522 ;; Auto vars:     Size  Location     Type
 10523 ;;		None
 10524 ;; Return value:  Size  Location     Type
 10525 ;;		None               void
 10526 ;; Registers used:
 10527 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10528 ;; Tracked objects:
 10529 ;;		On entry : 0/0
 10530 ;;		On exit  : 0/0
 10531 ;;		Unchanged: 0/0
 10532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10536 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10537 ;;Total ram usage:        0 bytes
 10538 ;; Hardware stack levels used:    1
 10539 ;; Hardware stack levels required when called:    6
 10540 ;; This function calls:
 10541 ;;		_setLoad_AH_AL_Restore
 10542 ;; This function is called by:
 10543 ;;		_main
 10544 ;; This function uses a non-reentrant model
 10545 ;;
 10546                           
 10547                           
 10548                           ;psect for function _Load_Initialization
 10549  1BFB                     _Load_Initialization:	
 10550                           
 10551                           ;OverLoad_B1.c: 10: Load.OK = 1;
 10552                           
 10553                           ;incstack = 0
 10554                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10555  1BFB  0022               	movlb	2	; select bank2
 10556  1BFC  17C3               	bsf	_Load^(0+256),7
 10557                           
 10558                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10559  1BFD  319F  2728         	fcall	_setLoad_AH_AL_Restore
 10560  1BFF  0008               	return
 10561  1C00                     __end_of_Load_Initialization:	
 10562                           
 10563                           	psect	text56
 10564  1F28                     __ptext56:	
 10565 ;; *************** function _setLoad_AH_AL_Restore *****************
 10566 ;; Defined at:
 10567 ;;		line 248 in file "../src/OverLoad_B1.c"
 10568 ;; Parameters:    Size  Location     Type
 10569 ;;		None
 10570 ;; Auto vars:     Size  Location     Type
 10571 ;;  i               1    1[BANK0 ] unsigned char 
 10572 ;; Return value:  Size  Location     Type
 10573 ;;		None               void
 10574 ;; Registers used:
 10575 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10576 ;; Tracked objects:
 10577 ;;		On entry : 0/0
 10578 ;;		On exit  : 0/0
 10579 ;;		Unchanged: 0/0
 10580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10582 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10583 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10584 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10585 ;;Total ram usage:        2 bytes
 10586 ;; Hardware stack levels used:    1
 10587 ;; Hardware stack levels required when called:    5
 10588 ;; This function calls:
 10589 ;;		Nothing
 10590 ;; This function is called by:
 10591 ;;		_Load_Initialization
 10592 ;;		_Load_Main
 10593 ;; This function uses a non-reentrant model
 10594 ;;
 10595                           
 10596                           
 10597                           ;psect for function _setLoad_AH_AL_Restore
 10598  1F28                     _setLoad_AH_AL_Restore:	
 10599                           
 10600                           ;OverLoad_B1.c: 249: char i;
 10601                           ;OverLoad_B1.c: 250: for (i = 0; i < 5; i++) {
 10602                           
 10603                           ;incstack = 0
 10604                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 10605  1F28  0020               	movlb	0	; select bank0
 10606  1F29  01A1               	clrf	setLoad_AH_AL_Restore@i
 10607  1F2A                     L7:	
 10608  1F2A  3005               	movlw	5
 10609  1F2B  0221               	subwf	setLoad_AH_AL_Restore@i,w
 10610  1F2C  1803               	btfsc	3,0
 10611  1F2D  0008               	return
 10612                           
 10613                           ;OverLoad_B1.c: 251: Load.AH[i] = 0;
 10614  1F2E  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10615  1F2F  3E4E               	addlw	(_Load+11)& (0+255)
 10616  1F30  0086               	movwf	6
 10617  1F31  3001               	movlw	1	; select bank2/3
 10618  1F32  0087               	movwf	7
 10619  1F33  3000               	movlw	0
 10620  1F34  3FC0               	movwi [0]fsr1
 10621  1F35  3FC1               	movwi [1]fsr1
 10622                           
 10623                           ;OverLoad_B1.c: 252: Load.AL[i] = 0xffff;
 10624  1F36  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10625  1F37  3E58               	addlw	(_Load+21)& (0+255)
 10626  1F38  0086               	movwf	6
 10627  1F39  3001               	movlw	1	; select bank2/3
 10628  1F3A  0087               	movwf	7
 10629  1F3B  30FF               	movlw	255
 10630  1F3C  3FC0               	movwi [0]fsr1
 10631  1F3D  30FF               	movlw	255
 10632  1F3E  3FC1               	movwi [1]fsr1
 10633  1F3F  3001               	movlw	1
 10634  1F40  00A0               	movwf	??_setLoad_AH_AL_Restore
 10635  1F41  0820               	movf	??_setLoad_AH_AL_Restore,w
 10636  1F42  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 10637  1F43  2F2A               	goto	L7
 10638  1F44                     __end_of_setLoad_AH_AL_Restore:	
 10639                           
 10640                           	psect	text57
 10641  1CA1                     __ptext57:	
 10642 ;; *************** function _LED_Main *****************
 10643 ;; Defined at:
 10644 ;;		line 47 in file "../src/LED_B1.c"
 10645 ;; Parameters:    Size  Location     Type
 10646 ;;		None
 10647 ;; Auto vars:     Size  Location     Type
 10648 ;;		None
 10649 ;; Return value:  Size  Location     Type
 10650 ;;		None               void
 10651 ;; Registers used:
 10652 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10653 ;; Tracked objects:
 10654 ;;		On entry : 0/0
 10655 ;;		On exit  : 0/0
 10656 ;;		Unchanged: 0/0
 10657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10662 ;;Total ram usage:        0 bytes
 10663 ;; Hardware stack levels used:    1
 10664 ;; Hardware stack levels required when called:    7
 10665 ;; This function calls:
 10666 ;;		_setLED_Main
 10667 ;; This function is called by:
 10668 ;;		_main
 10669 ;; This function uses a non-reentrant model
 10670 ;;
 10671                           
 10672                           
 10673                           ;psect for function _LED_Main
 10674  1CA1                     _LED_Main:	
 10675                           
 10676                           ;LED_B1.c: 53: setLED_Main(1);
 10677                           
 10678                           ;incstack = 0
 10679                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10680  1CA1  3001               	movlw	1
 10681  1CA2  3194  2416  319C   	fcall	_setLED_Main
 10682                           
 10683                           ;LED_B1.c: 56: setLED_Main(2);
 10684  1CA5  3002               	movlw	2
 10685  1CA6  3194  2416  319C   	fcall	_setLED_Main
 10686                           
 10687                           ;LED_B1.c: 62: setLED_Main(99);
 10688  1CA9  3063               	movlw	99
 10689  1CAA  3194  2416         	fcall	_setLED_Main
 10690  1CAC  0008               	return
 10691  1CAD                     __end_of_LED_Main:	
 10692                           
 10693                           	psect	text58
 10694  1416                     __ptext58:	
 10695 ;; *************** function _setLED_Main *****************
 10696 ;; Defined at:
 10697 ;;		line 221 in file "../src/LED_B1.c"
 10698 ;; Parameters:    Size  Location     Type
 10699 ;;  led             1    wreg     unsigned char 
 10700 ;; Auto vars:     Size  Location     Type
 10701 ;;  led             1    4[BANK0 ] unsigned char 
 10702 ;; Return value:  Size  Location     Type
 10703 ;;		None               void
 10704 ;; Registers used:
 10705 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10706 ;; Tracked objects:
 10707 ;;		On entry : 0/0
 10708 ;;		On exit  : 0/0
 10709 ;;		Unchanged: 0/0
 10710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10712 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10713 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10714 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10715 ;;Total ram usage:        3 bytes
 10716 ;; Hardware stack levels used:    1
 10717 ;; Hardware stack levels required when called:    6
 10718 ;; This function calls:
 10719 ;;		_LedPointSelect
 10720 ;; This function is called by:
 10721 ;;		_LED_Main
 10722 ;; This function uses a non-reentrant model
 10723 ;;
 10724                           
 10725                           
 10726                           ;psect for function _setLED_Main
 10727  1416                     _setLED_Main:	
 10728                           
 10729                           ;incstack = 0
 10730                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10731                           ;setLED_Main@led stored from wreg
 10732  1416  0020               	movlb	0	; select bank0
 10733  1417  00A4               	movwf	setLED_Main@led
 10734                           
 10735                           ;LED_B1.c: 222: LedPointSelect(led);
 10736  1418  0824               	movf	setLED_Main@led,w
 10737  1419  319F  270D  3194   	fcall	_LedPointSelect
 10738                           
 10739                           ;LED_B1.c: 223: if (LED->GO == 1) {
 10740  141C  087A               	movf	_LED,w
 10741  141D  0086               	movwf	6
 10742  141E  3001               	movlw	1	; select bank2/3
 10743  141F  0087               	movwf	7
 10744  1420  1C81               	btfss	1,1
 10745  1421  0008               	return
 10746                           
 10747                           ;LED_B1.c: 224: LED->Time++;
 10748  1422  0A7A               	incf	_LED,w
 10749  1423  0086               	movwf	6
 10750  1424  3001               	movlw	1	; select bank2/3
 10751  1425  0087               	movwf	7
 10752  1426  3001               	movlw	1
 10753  1427  0781               	addwf	1,f
 10754  1428  3141               	addfsr 1,1
 10755  1429  1803               	skipnc
 10756  142A  0A81               	incf	1,f
 10757                           
 10758                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 10759  142B  0A7A               	incf	_LED,w
 10760  142C  0086               	movwf	6
 10761  142D  3001               	movlw	1	; select bank2/3
 10762  142E  0087               	movwf	7
 10763  142F  3F40               	moviw [0]fsr1
 10764  1430  0020               	movlb	0	; select bank0
 10765  1431  00A2               	movwf	??_setLED_Main
 10766  1432  3F41               	moviw [1]fsr1
 10767  1433  00A3               	movwf	??_setLED_Main+1
 10768  1434  3000               	movlw	0
 10769  1435  0223               	subwf	??_setLED_Main+1,w
 10770  1436  3032               	movlw	50
 10771  1437  1903               	skipnz
 10772  1438  0222               	subwf	??_setLED_Main,w
 10773  1439  1C03               	skipc
 10774  143A  0008               	return
 10775                           
 10776                           ;LED_B1.c: 226: LED->Time = 0;
 10777  143B  0A7A               	incf	_LED,w
 10778  143C  0086               	movwf	6
 10779  143D  3001               	movlw	1	; select bank2/3
 10780  143E  0087               	movwf	7
 10781  143F  3000               	movlw	0
 10782  1440  3FC0               	movwi [0]fsr1
 10783  1441  3FC1               	movwi [1]fsr1
 10784                           
 10785                           ;LED_B1.c: 228: if (led == 1) {
 10786  1442  0824               	movf	setLED_Main@led,w
 10787  1443  3A01               	xorlw	1
 10788                           
 10789                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 10790  1444  3008               	movlw	8
 10791  1445  1903               	btfsc	3,2
 10792  1446  068C               	xorwf	12,f
 10793                           
 10794                           ;LED_B1.c: 230: }
 10795                           ;LED_B1.c: 233: if (led == 2) {
 10796  1447  0824               	movf	setLED_Main@led,w
 10797  1448  3A02               	xorlw	2
 10798  1449  1D03               	skipz
 10799  144A  2C4D               	goto	l1033
 10800                           
 10801                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 10802  144B  3080               	movlw	128
 10803  144C  068E               	xorwf	14,f
 10804  144D                     l1033:	
 10805                           
 10806                           ;LED_B1.c: 235: }
 10807                           ;LED_B1.c: 243: if (led == 99) {
 10808  144D  0824               	movf	setLED_Main@led,w
 10809  144E  3A63               	xorlw	99
 10810  144F  1D03               	skipz
 10811  1450  0008               	return
 10812                           
 10813                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 10814  1451  3020               	movlw	32
 10815  1452  068D               	xorwf	13,f
 10816  1453  0008               	return
 10817  1454                     __end_of_setLED_Main:	
 10818                           
 10819                           	psect	text59
 10820  1C95                     __ptext59:	
 10821 ;; *************** function _LED_Initialization *****************
 10822 ;; Defined at:
 10823 ;;		line 31 in file "../src/LED_B1.c"
 10824 ;; Parameters:    Size  Location     Type
 10825 ;;		None
 10826 ;; Auto vars:     Size  Location     Type
 10827 ;;		None
 10828 ;; Return value:  Size  Location     Type
 10829 ;;		None               void
 10830 ;; Registers used:
 10831 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10832 ;; Tracked objects:
 10833 ;;		On entry : 0/0
 10834 ;;		On exit  : 0/0
 10835 ;;		Unchanged: 0/0
 10836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10841 ;;Total ram usage:        0 bytes
 10842 ;; Hardware stack levels used:    1
 10843 ;; Hardware stack levels required when called:    8
 10844 ;; This function calls:
 10845 ;;		_setLED_Initialization
 10846 ;; This function is called by:
 10847 ;;		_main
 10848 ;; This function uses a non-reentrant model
 10849 ;;
 10850                           
 10851                           
 10852                           ;psect for function _LED_Initialization
 10853  1C95                     _LED_Initialization:	
 10854                           
 10855                           ;LED_B1.c: 33: setLED_Initialization(1);
 10856                           
 10857                           ;incstack = 0
 10858                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10859  1C95  3001               	movlw	1
 10860  1C96  319D  252D  319C   	fcall	_setLED_Initialization
 10861                           
 10862                           ;LED_B1.c: 36: setLED_Initialization(2);
 10863  1C99  3002               	movlw	2
 10864  1C9A  319D  252D  319C   	fcall	_setLED_Initialization
 10865                           
 10866                           ;LED_B1.c: 42: setLED_Initialization(99);
 10867  1C9D  3063               	movlw	99
 10868  1C9E  319D  252D         	fcall	_setLED_Initialization
 10869  1CA0  0008               	return
 10870  1CA1                     __end_of_LED_Initialization:	
 10871                           
 10872                           	psect	text60
 10873  1D2D                     __ptext60:	
 10874 ;; *************** function _setLED_Initialization *****************
 10875 ;; Defined at:
 10876 ;;		line 69 in file "../src/LED_B1.c"
 10877 ;; Parameters:    Size  Location     Type
 10878 ;;  led             1    wreg     unsigned char 
 10879 ;; Auto vars:     Size  Location     Type
 10880 ;;  led             1    4[BANK0 ] unsigned char 
 10881 ;; Return value:  Size  Location     Type
 10882 ;;		None               void
 10883 ;; Registers used:
 10884 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10885 ;; Tracked objects:
 10886 ;;		On entry : 0/0
 10887 ;;		On exit  : 0/0
 10888 ;;		Unchanged: 0/0
 10889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10891 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10893 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10894 ;;Total ram usage:        1 bytes
 10895 ;; Hardware stack levels used:    1
 10896 ;; Hardware stack levels required when called:    7
 10897 ;; This function calls:
 10898 ;;		_LedPointSelect
 10899 ;;		_setLED
 10900 ;; This function is called by:
 10901 ;;		_LED_Initialization
 10902 ;; This function uses a non-reentrant model
 10903 ;;
 10904                           
 10905                           
 10906                           ;psect for function _setLED_Initialization
 10907  1D2D                     _setLED_Initialization:	
 10908                           
 10909                           ;incstack = 0
 10910                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10911                           ;setLED_Initialization@led stored from wreg
 10912  1D2D  0020               	movlb	0	; select bank0
 10913  1D2E  00A4               	movwf	setLED_Initialization@led
 10914                           
 10915                           ;LED_B1.c: 70: LedPointSelect(led);
 10916  1D2F  0824               	movf	setLED_Initialization@led,w
 10917  1D30  319F  270D  319D   	fcall	_LedPointSelect
 10918                           
 10919                           ;LED_B1.c: 71: LED->Enable = 1;
 10920  1D33  087A               	movf	_LED,w
 10921  1D34  0086               	movwf	6
 10922  1D35  3001               	movlw	1	; select bank2/3
 10923  1D36  0087               	movwf	7
 10924  1D37  1401               	bsf	1,0
 10925                           
 10926                           ;LED_B1.c: 72: setLED(led, 0);
 10927  1D38  0020               	movlb	0	; select bank0
 10928  1D39  01A2               	clrf	setLED@command
 10929  1D3A  0824               	movf	setLED_Initialization@led,w
 10930  1D3B  3196  2652         	fcall	_setLED
 10931  1D3D  0008               	return
 10932  1D3E                     __end_of_setLED_Initialization:	
 10933                           
 10934                           	psect	text61
 10935  12F8                     __ptext61:	
 10936 ;; *************** function _Flash_Memory_Main *****************
 10937 ;; Defined at:
 10938 ;;		line 926 in file "../src/MCU_B1.c"
 10939 ;; Parameters:    Size  Location     Type
 10940 ;;		None
 10941 ;; Auto vars:     Size  Location     Type
 10942 ;;		None
 10943 ;; Return value:  Size  Location     Type
 10944 ;;		None               void
 10945 ;; Registers used:
 10946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10947 ;; Tracked objects:
 10948 ;;		On entry : 0/0
 10949 ;;		On exit  : 0/0
 10950 ;;		Unchanged: 0/0
 10951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10954 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10955 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10956 ;;Total ram usage:        1 bytes
 10957 ;; Hardware stack levels used:    1
 10958 ;; Hardware stack levels required when called:    8
 10959 ;; This function calls:
 10960 ;;		_Flash_Memory_Modify
 10961 ;;		_getMain_LightsStatus
 10962 ;; This function is called by:
 10963 ;;		_main
 10964 ;; This function uses a non-reentrant model
 10965 ;;
 10966                           
 10967                           
 10968                           ;psect for function _Flash_Memory_Main
 10969  12F8                     _Flash_Memory_Main:	
 10970                           
 10971                           ;MCU_B1.c: 927: if (Memory.Modify == 1) {
 10972                           
 10973                           ;incstack = 0
 10974                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10975  12F8  0024               	movlb	4	; select bank4
 10976  12F9  1C44               	btfss	(_Memory^(0+512)+36),0
 10977  12FA  0008               	return
 10978                           
 10979                           ;MCU_B1.c: 928: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 10980  12FB  3191  21CE  3192   	fcall	_getMain_LightsStatus
 10981  12FE  3A00               	xorlw	0
 10982  12FF  3000               	movlw	0
 10983  1300  1903               	skipnz
 10984  1301  3001               	movlw	1
 10985  1302  0020               	movlb	0	; select bank0
 10986  1303  00A9               	movwf	??_Flash_Memory_Main
 10987  1304  0DA9               	rlf	??_Flash_Memory_Main,f
 10988  1305  0024               	movlb	4	; select bank4
 10989  1306  0844               	movf	(_Memory^(0+512)+36),w
 10990  1307  0020               	movlb	0	; select bank0
 10991  1308  0629               	xorwf	??_Flash_Memory_Main,w
 10992  1309  39FD               	andlw	-3
 10993  130A  0629               	xorwf	??_Flash_Memory_Main,w
 10994  130B  0024               	movlb	4	; select bank4
 10995  130C  00C4               	movwf	(_Memory^(0+512)+36)
 10996                           
 10997                           ;MCU_B1.c: 929: if (Memory.GO == 1) {
 10998  130D  1CC4               	btfss	(_Memory^(0+512)+36),1
 10999  130E  2B28               	goto	l1301
 11000                           
 11001                           ;MCU_B1.c: 930: Memory.Runtime = 1;
 11002  130F  15C4               	bsf	(_Memory^(0+512)+36),3
 11003                           
 11004                           ;MCU_B1.c: 931: Memory.Time++;
 11005  1310  3001               	movlw	1
 11006  1311  07C2               	addwf	(_Memory^(0+512)+34),f
 11007  1312  3000               	movlw	0
 11008  1313  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11009                           
 11010                           ;MCU_B1.c: 932: if (Memory.Time == 25) {
 11011  1314  3022               	movlw	34
 11012  1315  3E20               	addlw	_Memory& (0+255)
 11013  1316  0086               	movwf	6
 11014  1317  3002               	movlw	2	; select bank4/5
 11015  1318  0087               	movwf	7
 11016  1319  3F40               	moviw [0]fsr1
 11017  131A  3A19               	xorlw	25
 11018  131B  1D03               	skipz
 11019  131C  2B1F               	goto	u7715
 11020  131D  3F41               	moviw [1]fsr1
 11021  131E  3A00               	xorlw	0
 11022  131F                     u7715:	
 11023  131F  1D03               	skipz
 11024  1320  0008               	return
 11025                           
 11026                           ;MCU_B1.c: 933: Memory.Time = 0;
 11027  1321  01C2               	clrf	(_Memory^(0+512)+34)
 11028  1322  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11029                           
 11030                           ;MCU_B1.c: 934: Memory.Modify = 0;
 11031  1323  1044               	bcf	(_Memory^(0+512)+36),0
 11032                           
 11033                           ;MCU_B1.c: 935: Memory.GO = 0;
 11034  1324  10C4               	bcf	(_Memory^(0+512)+36),1
 11035                           
 11036                           ;MCU_B1.c: 936: Flash_Memory_Modify();
 11037  1325  3195  25B5         	fcall	_Flash_Memory_Modify
 11038                           
 11039                           ;MCU_B1.c: 937: }
 11040                           ;MCU_B1.c: 938: } else {
 11041  1327  0008               	return
 11042  1328                     l1301:	
 11043                           
 11044                           ;MCU_B1.c: 939: if (Memory.Runtime == 1) {
 11045  1328  1DC4               	btfss	(_Memory^(0+512)+36),3
 11046  1329  0008               	return
 11047                           
 11048                           ;MCU_B1.c: 940: Memory.Runtime = 0;
 11049  132A  11C4               	bcf	(_Memory^(0+512)+36),3
 11050                           
 11051                           ;MCU_B1.c: 941: Memory.Time = 0;
 11052  132B  01C2               	clrf	(_Memory^(0+512)+34)
 11053  132C  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11054  132D  0008               	return
 11055  132E                     __end_of_Flash_Memory_Main:	
 11056                           
 11057                           	psect	text62
 11058  15B5                     __ptext62:	
 11059 ;; *************** function _Flash_Memory_Modify *****************
 11060 ;; Defined at:
 11061 ;;		line 999 in file "../src/MCU_B1.c"
 11062 ;; Parameters:    Size  Location     Type
 11063 ;;		None
 11064 ;; Auto vars:     Size  Location     Type
 11065 ;;  i               1    5[BANK0 ] unsigned char 
 11066 ;; Return value:  Size  Location     Type
 11067 ;;		None               void
 11068 ;; Registers used:
 11069 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11070 ;; Tracked objects:
 11071 ;;		On entry : 0/0
 11072 ;;		On exit  : 0/0
 11073 ;;		Unchanged: 0/0
 11074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11076 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11077 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11078 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11079 ;;Total ram usage:        2 bytes
 11080 ;; Hardware stack levels used:    1
 11081 ;; Hardware stack levels required when called:    7
 11082 ;; This function calls:
 11083 ;;		_Flash_Memory_Erasing
 11084 ;;		_Flash_Memory_Read
 11085 ;;		_Flash_Memory_Write
 11086 ;;		_setMemory_Data
 11087 ;; This function is called by:
 11088 ;;		_Flash_Memory_Main
 11089 ;; This function uses a non-reentrant model
 11090 ;;
 11091                           
 11092                           
 11093                           ;psect for function _Flash_Memory_Modify
 11094  15B5                     _Flash_Memory_Modify:	
 11095                           
 11096                           ;MCU_B1.c: 1000: char i = 0;
 11097                           
 11098                           ;incstack = 0
 11099                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11100  15B5  0020               	movlb	0	; select bank0
 11101  15B6  01A5               	clrf	Flash_Memory_Modify@i
 11102                           
 11103                           ;MCU_B1.c: 1001: for (i = 0; i < 32; i++) {
 11104  15B7  01A5               	clrf	Flash_Memory_Modify@i
 11105  15B8  3020               	movlw	32
 11106  15B9  0225               	subwf	Flash_Memory_Modify@i,w
 11107  15BA  1803               	btfsc	3,0
 11108  15BB  2DD1               	goto	l7363
 11109  15BC                     l7357:	
 11110                           
 11111                           ;MCU_B1.c: 1002: Memory.Data[i] = Flash_Memory_Read(i);
 11112  15BC  0825               	movf	Flash_Memory_Modify@i,w
 11113  15BD  319E  26F3  3195   	fcall	_Flash_Memory_Read
 11114  15C0  0020               	movlb	0	; select bank0
 11115  15C1  00A4               	movwf	??_Flash_Memory_Modify
 11116  15C2  0825               	movf	Flash_Memory_Modify@i,w
 11117  15C3  3E20               	addlw	_Memory& (0+255)
 11118  15C4  0086               	movwf	6
 11119  15C5  3002               	movlw	2	; select bank4/5
 11120  15C6  0087               	movwf	7
 11121  15C7  0824               	movf	??_Flash_Memory_Modify,w
 11122  15C8  0081               	movwf	1
 11123  15C9  3001               	movlw	1
 11124  15CA  00A4               	movwf	??_Flash_Memory_Modify
 11125  15CB  0824               	movf	??_Flash_Memory_Modify,w
 11126  15CC  07A5               	addwf	Flash_Memory_Modify@i,f
 11127  15CD  3020               	movlw	32
 11128  15CE  0225               	subwf	Flash_Memory_Modify@i,w
 11129  15CF  1C03               	skipc
 11130  15D0  2DBC               	goto	l7357
 11131  15D1                     l7363:	
 11132                           
 11133                           ;MCU_B1.c: 1003: }
 11134                           ;MCU_B1.c: 1004: setMemory_Data(0, product->Data[12]);
 11135  15D1  086E               	movf	_product,w
 11136  15D2  0086               	movwf	6
 11137  15D3  3002               	movlw	2	; select bank4/5
 11138  15D4  0087               	movwf	7
 11139  15D5  3002               	movlw	2	; select bank4/5
 11140  15D6  3F4C               	moviw [12]fsr1
 11141  15D7  00A0               	movwf	setMemory_Data@data
 11142  15D8  3000               	movlw	0
 11143  15D9  319C  247D  3195   	fcall	_setMemory_Data
 11144                           
 11145                           ;MCU_B1.c: 1005: setMemory_Data(1, product->Data[13]);
 11146  15DC  0020               	movlb	0	; select bank0
 11147  15DD  086E               	movf	_product,w
 11148  15DE  0086               	movwf	6
 11149  15DF  3002               	movlw	2	; select bank4/5
 11150  15E0  0087               	movwf	7
 11151  15E1  3002               	movlw	2	; select bank4/5
 11152  15E2  3F4D               	moviw [13]fsr1
 11153  15E3  00A0               	movwf	setMemory_Data@data
 11154  15E4  3001               	movlw	1
 11155  15E5  319C  247D  3195   	fcall	_setMemory_Data
 11156                           
 11157                           ;MCU_B1.c: 1006: setMemory_Data(2, product->Data[14]);
 11158  15E8  0020               	movlb	0	; select bank0
 11159  15E9  086E               	movf	_product,w
 11160  15EA  0086               	movwf	6
 11161  15EB  3002               	movlw	2	; select bank4/5
 11162  15EC  0087               	movwf	7
 11163  15ED  3002               	movlw	2	; select bank4/5
 11164  15EE  3F4E               	moviw [14]fsr1
 11165  15EF  00A0               	movwf	setMemory_Data@data
 11166  15F0  3002               	movlw	2
 11167  15F1  319C  247D  3195   	fcall	_setMemory_Data
 11168                           
 11169                           ;MCU_B1.c: 1012: if (Memory.LoopSave == 1) {
 11170  15F4  0024               	movlb	4	; select bank4
 11171  15F5  1D44               	btfss	(_Memory^(0+512)+36),2
 11172  15F6  2DFB               	goto	l1324
 11173                           
 11174                           ;MCU_B1.c: 1013: Memory.LoopSave = 0;
 11175  15F7  1144               	bcf	(_Memory^(0+512)+36),2
 11176                           
 11177                           ;MCU_B1.c: 1014: myMain.FirstOpen = 0;
 11178  15F8  0021               	movlb	1	; select bank1
 11179  15F9  11A0               	bcf	_myMain^(0+128),3
 11180                           
 11181                           ;MCU_B1.c: 1015: myMain.First = 0;
 11182  15FA  12A0               	bcf	_myMain^(0+128),5
 11183  15FB                     l1324:	
 11184                           
 11185                           ;MCU_B1.c: 1017: }
 11186                           ;MCU_B1.c: 1018: GIE = 0;
 11187  15FB  138B               	bcf	11,7	;volatile
 11188                           
 11189                           ;MCU_B1.c: 1019: Flash_Memory_Erasing();
 11190  15FC  319C  2489  3195   	fcall	_Flash_Memory_Erasing
 11191                           
 11192                           ;MCU_B1.c: 1020: Flash_Memory_Write();
 11193  15FF  3191  21FB         	fcall	_Flash_Memory_Write
 11194                           
 11195                           ;MCU_B1.c: 1021: GIE = 1;
 11196  1601  178B               	bsf	11,7	;volatile
 11197  1602  0008               	return
 11198  1603                     __end_of_Flash_Memory_Modify:	
 11199                           
 11200                           	psect	text63
 11201  1C89                     __ptext63:	
 11202 ;; *************** function _Flash_Memory_Erasing *****************
 11203 ;; Defined at:
 11204 ;;		line 988 in file "../src/MCU_B1.c"
 11205 ;; Parameters:    Size  Location     Type
 11206 ;;		None
 11207 ;; Auto vars:     Size  Location     Type
 11208 ;;		None
 11209 ;; Return value:  Size  Location     Type
 11210 ;;		None               void
 11211 ;; Registers used:
 11212 ;;		wreg, status,2, status,0, pclath, cstack
 11213 ;; Tracked objects:
 11214 ;;		On entry : 0/0
 11215 ;;		On exit  : 0/0
 11216 ;;		Unchanged: 0/0
 11217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11222 ;;Total ram usage:        0 bytes
 11223 ;; Hardware stack levels used:    1
 11224 ;; Hardware stack levels required when called:    6
 11225 ;; This function calls:
 11226 ;;		_Flash_Memory_Unlock
 11227 ;; This function is called by:
 11228 ;;		_Flash_Memory_Modify
 11229 ;; This function uses a non-reentrant model
 11230 ;;
 11231                           
 11232                           
 11233                           ;psect for function _Flash_Memory_Erasing
 11234  1C89                     _Flash_Memory_Erasing:	
 11235                           
 11236                           ;MCU_B1.c: 989: CFGS = 0;
 11237                           
 11238                           ;incstack = 0
 11239                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11240  1C89  0023               	movlb	3	; select bank3
 11241  1C8A  1315               	bcf	21,6	;volatile
 11242                           
 11243                           ;MCU_B1.c: 990: PMADRH = 0x30;
 11244  1C8B  3030               	movlw	48
 11245  1C8C  0092               	movwf	18	;volatile
 11246                           
 11247                           ;MCU_B1.c: 991: PMADRL = 0x00;
 11248  1C8D  0191               	clrf	17	;volatile
 11249                           
 11250                           ;MCU_B1.c: 992: FREE = 1;
 11251  1C8E  1615               	bsf	21,4	;volatile
 11252                           
 11253                           ;MCU_B1.c: 993: WREN = 1;
 11254  1C8F  1515               	bsf	21,2	;volatile
 11255                           
 11256                           ;MCU_B1.c: 994: Flash_Memory_Unlock();
 11257  1C90  319C  2452         	fcall	_Flash_Memory_Unlock
 11258                           
 11259                           ;MCU_B1.c: 995: WREN = 0;
 11260  1C92  0023               	movlb	3	; select bank3
 11261  1C93  1115               	bcf	21,2	;volatile
 11262  1C94  0008               	return
 11263  1C95                     __end_of_Flash_Memory_Erasing:	
 11264                           
 11265                           	psect	text64
 11266  0540                     __ptext64:	
 11267 ;; *************** function _Flash_Memory_Initialization *****************
 11268 ;; Defined at:
 11269 ;;		line 885 in file "../src/MCU_B1.c"
 11270 ;; Parameters:    Size  Location     Type
 11271 ;;		None
 11272 ;; Auto vars:     Size  Location     Type
 11273 ;;  i               1   67[BANK0 ] unsigned char 
 11274 ;; Return value:  Size  Location     Type
 11275 ;;		None               void
 11276 ;; Registers used:
 11277 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11278 ;; Tracked objects:
 11279 ;;		On entry : 0/0
 11280 ;;		On exit  : 0/0
 11281 ;;		Unchanged: 0/0
 11282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11284 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11285 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11286 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11287 ;;Total ram usage:        2 bytes
 11288 ;; Hardware stack levels used:    1
 11289 ;; Hardware stack levels required when called:    8
 11290 ;; This function calls:
 11291 ;;		_Flash_Memory_Read
 11292 ;;		_Flash_Memory_Write
 11293 ;;		_setMemory_Data
 11294 ;;		_setPercentValue
 11295 ;; This function is called by:
 11296 ;;		_main
 11297 ;; This function uses a non-reentrant model
 11298 ;;
 11299                           
 11300                           
 11301                           ;psect for function _Flash_Memory_Initialization
 11302  0540                     _Flash_Memory_Initialization:	
 11303                           
 11304                           ;MCU_B1.c: 886: char i = 0;
 11305                           
 11306                           ;incstack = 0
 11307                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11308  0540  0020               	movlb	0	; select bank0
 11309  0541  01E3               	clrf	Flash_Memory_Initialization@i
 11310                           
 11311                           ;MCU_B1.c: 887: if (Flash_Memory_Read(31) == 0xaa) {
 11312  0542  301F               	movlw	31
 11313  0543  319E  26F3  3185   	fcall	_Flash_Memory_Read
 11314  0546  3AAA               	xorlw	170
 11315  0547  1D03               	skipz
 11316  0548  2DB2               	goto	l7843
 11317                           
 11318                           ;MCU_B1.c: 888: product->Data[12] = Flash_Memory_Read(0);
 11319  0549  3000               	movlw	0
 11320  054A  319E  26F3  3185   	fcall	_Flash_Memory_Read
 11321  054D  0020               	movlb	0	; select bank0
 11322  054E  00E2               	movwf	??_Flash_Memory_Initialization
 11323  054F  086E               	movf	_product,w
 11324  0550  3E0C               	addlw	12
 11325  0551  0086               	movwf	6
 11326  0552  3002               	movlw	2	; select bank4/5
 11327  0553  0087               	movwf	7
 11328  0554  0862               	movf	??_Flash_Memory_Initialization,w
 11329  0555  0081               	movwf	1
 11330                           
 11331                           ;MCU_B1.c: 889: product->Data[13] = Flash_Memory_Read(1);
 11332  0556  3001               	movlw	1
 11333  0557  319E  26F3  3185   	fcall	_Flash_Memory_Read
 11334  055A  0020               	movlb	0	; select bank0
 11335  055B  00E2               	movwf	??_Flash_Memory_Initialization
 11336  055C  086E               	movf	_product,w
 11337  055D  3E0D               	addlw	13
 11338  055E  0086               	movwf	6
 11339  055F  3002               	movlw	2	; select bank4/5
 11340  0560  0087               	movwf	7
 11341  0561  0862               	movf	??_Flash_Memory_Initialization,w
 11342  0562  0081               	movwf	1
 11343                           
 11344                           ;MCU_B1.c: 890: product->Data[14] = Flash_Memory_Read(2);
 11345  0563  3002               	movlw	2
 11346  0564  319E  26F3  3185   	fcall	_Flash_Memory_Read
 11347  0567  0020               	movlb	0	; select bank0
 11348  0568  00E2               	movwf	??_Flash_Memory_Initialization
 11349  0569  086E               	movf	_product,w
 11350  056A  3E0E               	addlw	14
 11351  056B  0086               	movwf	6
 11352  056C  3002               	movlw	2	; select bank4/5
 11353  056D  0087               	movwf	7
 11354  056E  0862               	movf	??_Flash_Memory_Initialization,w
 11355  056F  0081               	movwf	1
 11356                           
 11357                           ;MCU_B1.c: 896: i = setPercentValue(((char)(80*0.8)));
 11358  0570  3040               	movlw	64
 11359  0571  318A  2245  3185   	fcall	_setPercentValue
 11360  0574  0020               	movlb	0	; select bank0
 11361  0575  00E2               	movwf	??_Flash_Memory_Initialization
 11362  0576  0862               	movf	??_Flash_Memory_Initialization,w
 11363  0577  00E3               	movwf	Flash_Memory_Initialization@i
 11364                           
 11365                           ;MCU_B1.c: 897: product->Data[21] = i;
 11366  0578  0863               	movf	Flash_Memory_Initialization@i,w
 11367  0579  00E2               	movwf	??_Flash_Memory_Initialization
 11368  057A  086E               	movf	_product,w
 11369  057B  3E15               	addlw	21
 11370  057C  0086               	movwf	6
 11371  057D  3002               	movlw	2	; select bank4/5
 11372  057E  0087               	movwf	7
 11373  057F  0862               	movf	??_Flash_Memory_Initialization,w
 11374  0580  0081               	movwf	1
 11375                           
 11376                           ;MCU_B1.c: 898: product->Data[22] = i;
 11377  0581  0863               	movf	Flash_Memory_Initialization@i,w
 11378  0582  00E2               	movwf	??_Flash_Memory_Initialization
 11379  0583  086E               	movf	_product,w
 11380  0584  3E16               	addlw	22
 11381  0585  0086               	movwf	6
 11382  0586  3002               	movlw	2	; select bank4/5
 11383  0587  0087               	movwf	7
 11384  0588  0862               	movf	??_Flash_Memory_Initialization,w
 11385  0589  0081               	movwf	1
 11386                           
 11387                           ;MCU_B1.c: 899: product->Data[23] = i;
 11388  058A  0863               	movf	Flash_Memory_Initialization@i,w
 11389  058B  00E2               	movwf	??_Flash_Memory_Initialization
 11390  058C  086E               	movf	_product,w
 11391  058D  3E17               	addlw	23
 11392  058E  0086               	movwf	6
 11393  058F  3002               	movlw	2	; select bank4/5
 11394  0590  0087               	movwf	7
 11395  0591  0862               	movf	??_Flash_Memory_Initialization,w
 11396  0592  0081               	movwf	1
 11397                           
 11398                           ;MCU_B1.c: 901: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11399  0593  086E               	movf	_product,w
 11400  0594  3E0C               	addlw	12
 11401  0595  0086               	movwf	6
 11402  0596  3002               	movlw	2	; select bank4/5
 11403  0597  0087               	movwf	7
 11404  0598  0801               	movf	1,w
 11405  0599  3AFF               	xorlw	255
 11406  059A  1D03               	skipz
 11407  059B  0008               	return
 11408  059C  086E               	movf	_product,w
 11409  059D  3E0D               	addlw	13
 11410  059E  0086               	movwf	6
 11411  059F  3002               	movlw	2	; select bank4/5
 11412  05A0  0087               	movwf	7
 11413  05A1  0801               	movf	1,w
 11414  05A2  3AFF               	xorlw	255
 11415  05A3  1D03               	skipz
 11416  05A4  0008               	return
 11417  05A5  086E               	movf	_product,w
 11418  05A6  3E0E               	addlw	14
 11419  05A7  0086               	movwf	6
 11420  05A8  3002               	movlw	2	; select bank4/5
 11421  05A9  0087               	movwf	7
 11422  05AA  0801               	movf	1,w
 11423  05AB  3AFF               	xorlw	255
 11424  05AC  1D03               	skipz
 11425  05AD  0008               	return
 11426                           
 11427                           ;MCU_B1.c: 902: myMain.FirstOpen = 1;
 11428  05AE  0021               	movlb	1	; select bank1
 11429  05AF  15A0               	bsf	_myMain^(0+128),3
 11430                           
 11431                           ;MCU_B1.c: 903: myMain.First = 1;
 11432  05B0  16A0               	bsf	_myMain^(0+128),5
 11433                           
 11434                           ;MCU_B1.c: 904: }
 11435                           ;MCU_B1.c: 905: } else {
 11436  05B1  0008               	return
 11437  05B2                     l7843:	
 11438                           
 11439                           ;MCU_B1.c: 906: i = setPercentValue(((char)(80*0.8)));
 11440  05B2  3040               	movlw	64
 11441  05B3  318A  2245  3185   	fcall	_setPercentValue
 11442  05B6  0020               	movlb	0	; select bank0
 11443  05B7  00E2               	movwf	??_Flash_Memory_Initialization
 11444  05B8  0862               	movf	??_Flash_Memory_Initialization,w
 11445  05B9  00E3               	movwf	Flash_Memory_Initialization@i
 11446                           
 11447                           ;MCU_B1.c: 907: setMemory_Data(0, 0xff);
 11448  05BA  30FF               	movlw	255
 11449  05BB  00E2               	movwf	??_Flash_Memory_Initialization
 11450  05BC  0862               	movf	??_Flash_Memory_Initialization,w
 11451  05BD  00A0               	movwf	setMemory_Data@data
 11452  05BE  3000               	movlw	0
 11453  05BF  319C  247D  3185   	fcall	_setMemory_Data
 11454                           
 11455                           ;MCU_B1.c: 908: setMemory_Data(1, 0xff);
 11456  05C2  30FF               	movlw	255
 11457  05C3  0020               	movlb	0	; select bank0
 11458  05C4  00E2               	movwf	??_Flash_Memory_Initialization
 11459  05C5  0862               	movf	??_Flash_Memory_Initialization,w
 11460  05C6  00A0               	movwf	setMemory_Data@data
 11461  05C7  3001               	movlw	1
 11462  05C8  319C  247D  3185   	fcall	_setMemory_Data
 11463                           
 11464                           ;MCU_B1.c: 909: setMemory_Data(2, 0xff);
 11465  05CB  30FF               	movlw	255
 11466  05CC  0020               	movlb	0	; select bank0
 11467  05CD  00E2               	movwf	??_Flash_Memory_Initialization
 11468  05CE  0862               	movf	??_Flash_Memory_Initialization,w
 11469  05CF  00A0               	movwf	setMemory_Data@data
 11470  05D0  3002               	movlw	2
 11471  05D1  319C  247D  3185   	fcall	_setMemory_Data
 11472                           
 11473                           ;MCU_B1.c: 910: setMemory_Data(3, 0xff);
 11474  05D4  30FF               	movlw	255
 11475  05D5  0020               	movlb	0	; select bank0
 11476  05D6  00E2               	movwf	??_Flash_Memory_Initialization
 11477  05D7  0862               	movf	??_Flash_Memory_Initialization,w
 11478  05D8  00A0               	movwf	setMemory_Data@data
 11479  05D9  3003               	movlw	3
 11480  05DA  319C  247D  3185   	fcall	_setMemory_Data
 11481                           
 11482                           ;MCU_B1.c: 911: setMemory_Data(4, 0xff);
 11483  05DD  30FF               	movlw	255
 11484  05DE  0020               	movlb	0	; select bank0
 11485  05DF  00E2               	movwf	??_Flash_Memory_Initialization
 11486  05E0  0862               	movf	??_Flash_Memory_Initialization,w
 11487  05E1  00A0               	movwf	setMemory_Data@data
 11488  05E2  3004               	movlw	4
 11489  05E3  319C  247D  3185   	fcall	_setMemory_Data
 11490                           
 11491                           ;MCU_B1.c: 912: setMemory_Data(5, 0xff);
 11492  05E6  30FF               	movlw	255
 11493  05E7  0020               	movlb	0	; select bank0
 11494  05E8  00E2               	movwf	??_Flash_Memory_Initialization
 11495  05E9  0862               	movf	??_Flash_Memory_Initialization,w
 11496  05EA  00A0               	movwf	setMemory_Data@data
 11497  05EB  3005               	movlw	5
 11498  05EC  319C  247D  3185   	fcall	_setMemory_Data
 11499                           
 11500                           ;MCU_B1.c: 913: setMemory_Data(31, 0xaa);
 11501  05EF  30AA               	movlw	170
 11502  05F0  0020               	movlb	0	; select bank0
 11503  05F1  00E2               	movwf	??_Flash_Memory_Initialization
 11504  05F2  0862               	movf	??_Flash_Memory_Initialization,w
 11505  05F3  00A0               	movwf	setMemory_Data@data
 11506  05F4  301F               	movlw	31
 11507  05F5  319C  247D  3185   	fcall	_setMemory_Data
 11508                           
 11509                           ;MCU_B1.c: 914: product->Data[21] = i;
 11510  05F8  0020               	movlb	0	; select bank0
 11511  05F9  0863               	movf	Flash_Memory_Initialization@i,w
 11512  05FA  00E2               	movwf	??_Flash_Memory_Initialization
 11513  05FB  086E               	movf	_product,w
 11514  05FC  3E15               	addlw	21
 11515  05FD  0086               	movwf	6
 11516  05FE  3002               	movlw	2	; select bank4/5
 11517  05FF  0087               	movwf	7
 11518  0600  0862               	movf	??_Flash_Memory_Initialization,w
 11519  0601  0081               	movwf	1
 11520                           
 11521                           ;MCU_B1.c: 915: product->Data[22] = i;
 11522  0602  0863               	movf	Flash_Memory_Initialization@i,w
 11523  0603  00E2               	movwf	??_Flash_Memory_Initialization
 11524  0604  086E               	movf	_product,w
 11525  0605  3E16               	addlw	22
 11526  0606  0086               	movwf	6
 11527  0607  3002               	movlw	2	; select bank4/5
 11528  0608  0087               	movwf	7
 11529  0609  0862               	movf	??_Flash_Memory_Initialization,w
 11530  060A  0081               	movwf	1
 11531                           
 11532                           ;MCU_B1.c: 916: product->Data[23] = i;
 11533  060B  0863               	movf	Flash_Memory_Initialization@i,w
 11534  060C  00E2               	movwf	??_Flash_Memory_Initialization
 11535  060D  086E               	movf	_product,w
 11536  060E  3E17               	addlw	23
 11537  060F  0086               	movwf	6
 11538  0610  3002               	movlw	2	; select bank4/5
 11539  0611  0087               	movwf	7
 11540  0612  0862               	movf	??_Flash_Memory_Initialization,w
 11541  0613  0081               	movwf	1
 11542                           
 11543                           ;MCU_B1.c: 917: GIE = 0;
 11544  0614  138B               	bcf	11,7	;volatile
 11545                           
 11546                           ;MCU_B1.c: 918: Flash_Memory_Write();
 11547  0615  3191  21FB         	fcall	_Flash_Memory_Write
 11548                           
 11549                           ;MCU_B1.c: 919: GIE = 1;
 11550  0617  178B               	bsf	11,7	;volatile
 11551                           
 11552                           ;MCU_B1.c: 920: myMain.FirstOpen = 1;
 11553  0618  0021               	movlb	1	; select bank1
 11554  0619  15A0               	bsf	_myMain^(0+128),3
 11555                           
 11556                           ;MCU_B1.c: 921: myMain.First = 1;
 11557  061A  16A0               	bsf	_myMain^(0+128),5
 11558  061B  0008               	return
 11559  061C                     __end_of_Flash_Memory_Initialization:	
 11560                           
 11561                           	psect	text65
 11562  1C7D                     __ptext65:	
 11563 ;; *************** function _setMemory_Data *****************
 11564 ;; Defined at:
 11565 ;;		line 1036 in file "../src/MCU_B1.c"
 11566 ;; Parameters:    Size  Location     Type
 11567 ;;  address         1    wreg     unsigned char 
 11568 ;;  data            1    0[BANK0 ] unsigned char 
 11569 ;; Auto vars:     Size  Location     Type
 11570 ;;  address         1    2[BANK0 ] unsigned char 
 11571 ;; Return value:  Size  Location     Type
 11572 ;;		None               void
 11573 ;; Registers used:
 11574 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11575 ;; Tracked objects:
 11576 ;;		On entry : 0/0
 11577 ;;		On exit  : 0/0
 11578 ;;		Unchanged: 0/0
 11579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11580 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11581 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11582 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11583 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11584 ;;Total ram usage:        3 bytes
 11585 ;; Hardware stack levels used:    1
 11586 ;; Hardware stack levels required when called:    5
 11587 ;; This function calls:
 11588 ;;		Nothing
 11589 ;; This function is called by:
 11590 ;;		_Flash_Memory_Initialization
 11591 ;;		_Flash_Memory_Modify
 11592 ;; This function uses a non-reentrant model
 11593 ;;
 11594                           
 11595                           
 11596                           ;psect for function _setMemory_Data
 11597  1C7D                     _setMemory_Data:	
 11598                           
 11599                           ;incstack = 0
 11600                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 11601                           ;setMemory_Data@address stored from wreg
 11602  1C7D  0020               	movlb	0	; select bank0
 11603  1C7E  00A2               	movwf	setMemory_Data@address
 11604                           
 11605                           ;MCU_B1.c: 1037: Memory.Data[address] = data;
 11606  1C7F  0820               	movf	setMemory_Data@data,w
 11607  1C80  00A1               	movwf	??_setMemory_Data
 11608  1C81  0822               	movf	setMemory_Data@address,w
 11609  1C82  3E20               	addlw	_Memory& (0+255)
 11610  1C83  0086               	movwf	6
 11611  1C84  3002               	movlw	2	; select bank4/5
 11612  1C85  0087               	movwf	7
 11613  1C86  0821               	movf	??_setMemory_Data,w
 11614  1C87  0081               	movwf	1
 11615  1C88  0008               	return
 11616  1C89                     __end_of_setMemory_Data:	
 11617                           
 11618                           	psect	text66
 11619  11FB                     __ptext66:	
 11620 ;; *************** function _Flash_Memory_Write *****************
 11621 ;; Defined at:
 11622 ;;		line 969 in file "../src/MCU_B1.c"
 11623 ;; Parameters:    Size  Location     Type
 11624 ;;		None
 11625 ;; Auto vars:     Size  Location     Type
 11626 ;;  i               1    1[BANK0 ] unsigned char 
 11627 ;; Return value:  Size  Location     Type
 11628 ;;		None               void
 11629 ;; Registers used:
 11630 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11631 ;; Tracked objects:
 11632 ;;		On entry : 0/0
 11633 ;;		On exit  : 0/0
 11634 ;;		Unchanged: 0/0
 11635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11637 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11638 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11639 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11640 ;;Total ram usage:        2 bytes
 11641 ;; Hardware stack levels used:    1
 11642 ;; Hardware stack levels required when called:    6
 11643 ;; This function calls:
 11644 ;;		_Flash_Memory_Unlock
 11645 ;; This function is called by:
 11646 ;;		_Flash_Memory_Initialization
 11647 ;;		_Flash_Memory_Modify
 11648 ;; This function uses a non-reentrant model
 11649 ;;
 11650                           
 11651                           
 11652                           ;psect for function _Flash_Memory_Write
 11653  11FB                     _Flash_Memory_Write:	
 11654                           
 11655                           ;MCU_B1.c: 970: char i = 0;
 11656                           
 11657                           ;incstack = 0
 11658                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11659  11FB  0020               	movlb	0	; select bank0
 11660  11FC  01A1               	clrf	Flash_Memory_Write@i
 11661                           
 11662                           ;MCU_B1.c: 971: CFGS = 0;
 11663  11FD  0023               	movlb	3	; select bank3
 11664  11FE  1315               	bcf	21,6	;volatile
 11665                           
 11666                           ;MCU_B1.c: 972: PMADRH = 0x30;
 11667  11FF  3030               	movlw	48
 11668  1200  0092               	movwf	18	;volatile
 11669                           
 11670                           ;MCU_B1.c: 973: PMDATH = 0;
 11671  1201  0194               	clrf	20	;volatile
 11672                           
 11673                           ;MCU_B1.c: 974: FREE = 0;
 11674  1202  1215               	bcf	21,4	;volatile
 11675                           
 11676                           ;MCU_B1.c: 975: LWLO = 1;
 11677  1203  1695               	bsf	21,5	;volatile
 11678                           
 11679                           ;MCU_B1.c: 976: WREN = 1;
 11680  1204  1515               	bsf	21,2	;volatile
 11681                           
 11682                           ;MCU_B1.c: 977: for (i = 0; i < 32; i++) {
 11683  1205  0020               	movlb	0	; select bank0
 11684  1206  01A1               	clrf	Flash_Memory_Write@i
 11685  1207  3020               	movlw	32
 11686  1208  0221               	subwf	Flash_Memory_Write@i,w
 11687  1209  1803               	btfsc	3,0
 11688  120A  2A23               	goto	l1315
 11689  120B                     l6901:	
 11690                           
 11691                           ;MCU_B1.c: 978: PMADRL = i;
 11692  120B  0821               	movf	Flash_Memory_Write@i,w
 11693  120C  0023               	movlb	3	; select bank3
 11694  120D  0091               	movwf	17	;volatile
 11695                           
 11696                           ;MCU_B1.c: 979: PMDATL = Memory.Data[i];
 11697  120E  0020               	movlb	0	; select bank0
 11698  120F  0821               	movf	Flash_Memory_Write@i,w
 11699  1210  3E20               	addlw	_Memory& (0+255)
 11700  1211  0086               	movwf	6
 11701  1212  3002               	movlw	2	; select bank4/5
 11702  1213  0087               	movwf	7
 11703  1214  0801               	movf	1,w
 11704  1215  0023               	movlb	3	; select bank3
 11705  1216  0093               	movwf	19	;volatile
 11706                           
 11707                           ;MCU_B1.c: 980: Flash_Memory_Unlock();
 11708  1217  319C  2452  3191   	fcall	_Flash_Memory_Unlock
 11709  121A  3001               	movlw	1
 11710  121B  0020               	movlb	0	; select bank0
 11711  121C  00A0               	movwf	??_Flash_Memory_Write
 11712  121D  0820               	movf	??_Flash_Memory_Write,w
 11713  121E  07A1               	addwf	Flash_Memory_Write@i,f
 11714  121F  3020               	movlw	32
 11715  1220  0221               	subwf	Flash_Memory_Write@i,w
 11716  1221  1C03               	skipc
 11717  1222  2A0B               	goto	l6901
 11718  1223                     l1315:	
 11719                           
 11720                           ;MCU_B1.c: 981: }
 11721                           ;MCU_B1.c: 982: LWLO = 0;
 11722  1223  0023               	movlb	3	; select bank3
 11723  1224  1295               	bcf	21,5	;volatile
 11724                           
 11725                           ;MCU_B1.c: 983: Flash_Memory_Unlock();
 11726  1225  319C  2452         	fcall	_Flash_Memory_Unlock
 11727                           
 11728                           ;MCU_B1.c: 984: WREN = 0;
 11729  1227  0023               	movlb	3	; select bank3
 11730  1228  1115               	bcf	21,2	;volatile
 11731  1229  0008               	return
 11732  122A                     __end_of_Flash_Memory_Write:	
 11733                           
 11734                           	psect	text67
 11735  1C52                     __ptext67:	
 11736 ;; *************** function _Flash_Memory_Unlock *****************
 11737 ;; Defined at:
 11738 ;;		line 948 in file "../src/MCU_B1.c"
 11739 ;; Parameters:    Size  Location     Type
 11740 ;;		None
 11741 ;; Auto vars:     Size  Location     Type
 11742 ;;		None
 11743 ;; Return value:  Size  Location     Type
 11744 ;;		None               void
 11745 ;; Registers used:
 11746 ;;		wreg
 11747 ;; Tracked objects:
 11748 ;;		On entry : 0/0
 11749 ;;		On exit  : 0/0
 11750 ;;		Unchanged: 0/0
 11751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11756 ;;Total ram usage:        0 bytes
 11757 ;; Hardware stack levels used:    1
 11758 ;; Hardware stack levels required when called:    5
 11759 ;; This function calls:
 11760 ;;		Nothing
 11761 ;; This function is called by:
 11762 ;;		_Flash_Memory_Write
 11763 ;;		_Flash_Memory_Erasing
 11764 ;; This function uses a non-reentrant model
 11765 ;;
 11766                           
 11767                           
 11768                           ;psect for function _Flash_Memory_Unlock
 11769  1C52                     _Flash_Memory_Unlock:	
 11770                           
 11771                           ;MCU_B1.c: 949: PMCON2 = 0x55;
 11772                           
 11773                           ;incstack = 0
 11774                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11775  1C52  3055               	movlw	85
 11776  1C53  0023               	movlb	3	; select bank3
 11777  1C54  0096               	movwf	22	;volatile
 11778                           
 11779                           ;MCU_B1.c: 950: PMCON2 = 0xaa;
 11780  1C55  30AA               	movlw	170
 11781  1C56  0096               	movwf	22	;volatile
 11782                           
 11783                           ;MCU_B1.c: 951: WR = 1;
 11784  1C57  1495               	bsf	21,1	;volatile
 11785                           
 11786                           ;MCU_B1.c: 952: __nop();
 11787  1C58  0000               	nop
 11788                           
 11789                           ;MCU_B1.c: 953: __nop();
 11790  1C59  0000               	nop
 11791  1C5A  0008               	return
 11792  1C5B                     __end_of_Flash_Memory_Unlock:	
 11793                           
 11794                           	psect	text68
 11795  1EF3                     __ptext68:	
 11796 ;; *************** function _Flash_Memory_Read *****************
 11797 ;; Defined at:
 11798 ;;		line 957 in file "../src/MCU_B1.c"
 11799 ;; Parameters:    Size  Location     Type
 11800 ;;  address         1    wreg     unsigned char 
 11801 ;; Auto vars:     Size  Location     Type
 11802 ;;  address         1    2[BANK0 ] unsigned char 
 11803 ;;  ret             1    3[BANK0 ] unsigned char 
 11804 ;;  i               1    1[BANK0 ] unsigned char 
 11805 ;; Return value:  Size  Location     Type
 11806 ;;                  1    wreg      unsigned char 
 11807 ;; Registers used:
 11808 ;;		wreg, status,2
 11809 ;; Tracked objects:
 11810 ;;		On entry : 0/0
 11811 ;;		On exit  : 0/0
 11812 ;;		Unchanged: 0/0
 11813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11815 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11816 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11817 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11818 ;;Total ram usage:        4 bytes
 11819 ;; Hardware stack levels used:    1
 11820 ;; Hardware stack levels required when called:    5
 11821 ;; This function calls:
 11822 ;;		Nothing
 11823 ;; This function is called by:
 11824 ;;		_Flash_Memory_Initialization
 11825 ;;		_Flash_Memory_Modify
 11826 ;; This function uses a non-reentrant model
 11827 ;;
 11828                           
 11829                           
 11830                           ;psect for function _Flash_Memory_Read
 11831  1EF3                     _Flash_Memory_Read:	
 11832                           
 11833                           ;incstack = 0
 11834                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 11835                           ;Flash_Memory_Read@address stored from wreg
 11836  1EF3  0020               	movlb	0	; select bank0
 11837  1EF4  00A2               	movwf	Flash_Memory_Read@address
 11838                           
 11839                           ;MCU_B1.c: 958: char i = 0, ret = 0;
 11840  1EF5  01A1               	clrf	Flash_Memory_Read@i
 11841  1EF6  01A3               	clrf	Flash_Memory_Read@ret
 11842                           
 11843                           ;MCU_B1.c: 959: PMADRH = 0x30;
 11844  1EF7  3030               	movlw	48
 11845  1EF8  0023               	movlb	3	; select bank3
 11846  1EF9  0092               	movwf	18	;volatile
 11847                           
 11848                           ;MCU_B1.c: 960: PMADRL = address;
 11849  1EFA  0020               	movlb	0	; select bank0
 11850  1EFB  0822               	movf	Flash_Memory_Read@address,w
 11851  1EFC  0023               	movlb	3	; select bank3
 11852  1EFD  0091               	movwf	17	;volatile
 11853                           
 11854                           ;MCU_B1.c: 961: CFGS = 0;
 11855  1EFE  1315               	bcf	21,6	;volatile
 11856                           
 11857                           ;MCU_B1.c: 962: RD = 1;
 11858  1EFF  1415               	bsf	21,0	;volatile
 11859                           
 11860                           ;MCU_B1.c: 963: i = PMDATH;
 11861  1F00  0814               	movf	20,w	;volatile
 11862  1F01  0020               	movlb	0	; select bank0
 11863  1F02  00A0               	movwf	??_Flash_Memory_Read
 11864  1F03  0820               	movf	??_Flash_Memory_Read,w
 11865  1F04  00A1               	movwf	Flash_Memory_Read@i
 11866                           
 11867                           ;MCU_B1.c: 964: ret = PMDATL;
 11868  1F05  0023               	movlb	3	; select bank3
 11869  1F06  0813               	movf	19,w	;volatile
 11870  1F07  0020               	movlb	0	; select bank0
 11871  1F08  00A0               	movwf	??_Flash_Memory_Read
 11872  1F09  0820               	movf	??_Flash_Memory_Read,w
 11873  1F0A  00A3               	movwf	Flash_Memory_Read@ret
 11874                           
 11875                           ;MCU_B1.c: 965: return ret;
 11876  1F0B  0823               	movf	Flash_Memory_Read@ret,w
 11877  1F0C  0008               	return
 11878  1F0D                     __end_of_Flash_Memory_Read:	
 11879                           
 11880                           	psect	text69
 11881  128F                     __ptext69:	
 11882 ;; *************** function _DimmerLights_Main *****************
 11883 ;; Defined at:
 11884 ;;		line 390 in file "../src/Dimmer_B1.c"
 11885 ;; Parameters:    Size  Location     Type
 11886 ;;		None
 11887 ;; Auto vars:     Size  Location     Type
 11888 ;;		None
 11889 ;; Return value:  Size  Location     Type
 11890 ;;		None               void
 11891 ;; Registers used:
 11892 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11893 ;; Tracked objects:
 11894 ;;		On entry : 0/0
 11895 ;;		On exit  : 0/0
 11896 ;;		Unchanged: 0/0
 11897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11899 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11900 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11901 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11902 ;;Total ram usage:        4 bytes
 11903 ;; Hardware stack levels used:    1
 11904 ;; Hardware stack levels required when called:   10
 11905 ;; This function calls:
 11906 ;;		_getLoad_OK
 11907 ;;		_getMain_All_Error_Status
 11908 ;;		_getMain_LightsStatus
 11909 ;;		_setDimmerLights_Main
 11910 ;; This function is called by:
 11911 ;;		_main
 11912 ;; This function uses a non-reentrant model
 11913 ;;
 11914                           
 11915                           
 11916                           ;psect for function _DimmerLights_Main
 11917  128F                     _DimmerLights_Main:	
 11918                           
 11919                           ;Dimmer_B1.c: 392: if (getMain_All_Error_Status(0) == 0) {
 11920                           
 11921                           ;incstack = 0
 11922                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11923  128F  3000               	movlw	0
 11924  1290  3192  225C  3192   	fcall	_getMain_All_Error_Status
 11925  1293  3800               	iorlw	0
 11926  1294  1D03               	skipz
 11927  1295  2AB9               	goto	l778
 11928                           
 11929                           ;Dimmer_B1.c: 393: if (Dimmer.LoadOK == 1) {
 11930  1296  0022               	movlb	2	; select bank2
 11931  1297  1CBE               	btfss	_Dimmer^(0+256),1
 11932  1298  2ABB               	goto	l7785
 11933                           
 11934                           ;Dimmer_B1.c: 394: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 11935  1299  319C  2431  3192   	fcall	_getLoad_OK
 11936  129C  3A01               	xorlw	1
 11937  129D  1903               	skipnz
 11938  129E  2AB0               	goto	l7781
 11939  129F  3191  21CE  3192   	fcall	_getMain_LightsStatus
 11940  12A2  3A00               	xorlw	0
 11941  12A3  1903               	skipnz
 11942  12A4  2AB0               	goto	l7781
 11943  12A5  0022               	movlb	2	; select bank2
 11944  12A6  0C3E               	rrf	_Dimmer^(0+256),w
 11945  12A7  3901               	andlw	1
 11946  12A8  0020               	movlb	0	; select bank0
 11947  12A9  00E7               	movwf	??_DimmerLights_Main
 11948  12AA  01E8               	clrf	??_DimmerLights_Main+1
 11949  12AB  0867               	movf	??_DimmerLights_Main,w
 11950  12AC  00E9               	movwf	_DimmerLights_Main$2501
 11951  12AD  0868               	movf	??_DimmerLights_Main+1,w
 11952  12AE  00EA               	movwf	_DimmerLights_Main$2501+1
 11953  12AF  2AB3               	goto	l7783
 11954  12B0                     l7781:	
 11955  12B0  0020               	movlb	0	; select bank0
 11956  12B1  01E9               	clrf	_DimmerLights_Main$2501
 11957  12B2  01EA               	clrf	_DimmerLights_Main$2501+1
 11958  12B3                     l7783:	
 11959  12B3  0869               	movf	_DimmerLights_Main$2501,w
 11960  12B4  0022               	movlb	2	; select bank2
 11961  12B5  10BE               	bcf	_Dimmer^(0+256),1
 11962  12B6  1D03               	skipz
 11963  12B7  14BE               	bsf	_Dimmer^(0+256),1
 11964                           
 11965                           ;Dimmer_B1.c: 395: }
 11966                           ;Dimmer_B1.c: 396: } else {
 11967  12B8  2ABB               	goto	l7785
 11968  12B9                     l778:	
 11969                           
 11970                           ;Dimmer_B1.c: 397: Dimmer.LoadOK = 0;
 11971  12B9  0022               	movlb	2	; select bank2
 11972  12BA  10BE               	bcf	_Dimmer^(0+256),1
 11973  12BB                     l7785:	
 11974                           
 11975                           ;Dimmer_B1.c: 398: }
 11976                           ;Dimmer_B1.c: 402: setDimmerLights_Main(1);
 11977  12BB  3001               	movlw	1
 11978  12BC  3197  27A7  3192   	fcall	_setDimmerLights_Main
 11979                           
 11980                           ;Dimmer_B1.c: 406: setDimmerLights_Main(2);
 11981  12BF  3002               	movlw	2
 11982  12C0  3197  27A7         	fcall	_setDimmerLights_Main
 11983  12C2  0008               	return
 11984  12C3                     __end_of_DimmerLights_Main:	
 11985                           
 11986                           	psect	text70
 11987  17A7                     __ptext70:	
 11988 ;; *************** function _setDimmerLights_Main *****************
 11989 ;; Defined at:
 11990 ;;		line 416 in file "../src/Dimmer_B1.c"
 11991 ;; Parameters:    Size  Location     Type
 11992 ;;  lights          1    wreg     unsigned char 
 11993 ;; Auto vars:     Size  Location     Type
 11994 ;;  lights          1   70[BANK0 ] unsigned char 
 11995 ;; Return value:  Size  Location     Type
 11996 ;;		None               void
 11997 ;; Registers used:
 11998 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11999 ;; Tracked objects:
 12000 ;;		On entry : 0/0
 12001 ;;		On exit  : 0/0
 12002 ;;		Unchanged: 0/0
 12003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12005 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12007 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12008 ;;Total ram usage:        1 bytes
 12009 ;; Hardware stack levels used:    1
 12010 ;; Hardware stack levels required when called:    9
 12011 ;; This function calls:
 12012 ;;		_DimmerLightsPointSelect
 12013 ;;		_setBuz
 12014 ;;		_setDimmerLights
 12015 ;;		_setDimmerLights_Adj
 12016 ;; This function is called by:
 12017 ;;		_DimmerLights_Main
 12018 ;; This function uses a non-reentrant model
 12019 ;;
 12020                           
 12021                           
 12022                           ;psect for function _setDimmerLights_Main
 12023  17A7                     _setDimmerLights_Main:	
 12024                           
 12025                           ;incstack = 0
 12026                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12027                           ;setDimmerLights_Main@lights stored from wreg
 12028  17A7  0020               	movlb	0	; select bank0
 12029  17A8  00E6               	movwf	setDimmerLights_Main@lights
 12030                           
 12031                           ;Dimmer_B1.c: 417: DimmerLightsPointSelect(lights);
 12032  17A9  0866               	movf	setDimmerLights_Main@lights,w
 12033  17AA  319D  25B9  3197   	fcall	_DimmerLightsPointSelect
 12034                           
 12035                           ;Dimmer_B1.c: 418: if (DimmerLights->Trigger == 1) {
 12036  17AD  0020               	movlb	0	; select bank0
 12037  17AE  086F               	movf	_DimmerLights,w
 12038  17AF  3E08               	addlw	8
 12039  17B0  0086               	movwf	6
 12040  17B1  3001               	movlw	1	; select bank2/3
 12041  17B2  0087               	movwf	7
 12042  17B3  1D01               	btfss	1,2
 12043  17B4  2FD2               	goto	l7247
 12044                           
 12045                           ;Dimmer_B1.c: 420: if (Dimmer.LoadOK == 0) {
 12046  17B5  0022               	movlb	2	; select bank2
 12047  17B6  18BE               	btfsc	_Dimmer^(0+256),1
 12048  17B7  0008               	return
 12049                           
 12050                           ;Dimmer_B1.c: 421: DimmerLights->Trigger = 0;
 12051  17B8  0020               	movlb	0	; select bank0
 12052  17B9  086F               	movf	_DimmerLights,w
 12053  17BA  3E08               	addlw	8
 12054  17BB  0086               	movwf	6
 12055  17BC  3001               	movlw	1	; select bank2/3
 12056  17BD  0087               	movwf	7
 12057  17BE  1101               	bcf	1,2
 12058                           
 12059                           ;Dimmer_B1.c: 423: if (DimmerLights->Switch == 1) {
 12060  17BF  086F               	movf	_DimmerLights,w
 12061  17C0  3E08               	addlw	8
 12062  17C1  0086               	movwf	6
 12063  17C2  3001               	movlw	1	; select bank2/3
 12064  17C3  0087               	movwf	7
 12065  17C4  1C81               	btfss	1,1
 12066  17C5  2FCC               	goto	l7245
 12067                           
 12068                           ;Dimmer_B1.c: 424: setDimmerLights(lights, 1);
 12069  17C6  01E2               	clrf	setDimmerLights@status
 12070  17C7  0AE2               	incf	setDimmerLights@status,f
 12071  17C8  0866               	movf	setDimmerLights_Main@lights,w
 12072  17C9  318C  24E5         	fcall	_setDimmerLights
 12073                           
 12074                           ;Dimmer_B1.c: 425: } else {
 12075  17CB  0008               	return
 12076  17CC                     l7245:	
 12077                           
 12078                           ;Dimmer_B1.c: 426: setDimmerLights(lights, 0);
 12079  17CC  0020               	movlb	0	; select bank0
 12080  17CD  01E2               	clrf	setDimmerLights@status
 12081  17CE  0866               	movf	setDimmerLights_Main@lights,w
 12082  17CF  318C  24E5         	fcall	_setDimmerLights
 12083                           
 12084                           ;Dimmer_B1.c: 427: }
 12085                           ;Dimmer_B1.c: 428: }
 12086                           ;Dimmer_B1.c: 429: } else {
 12087  17D1  0008               	return
 12088  17D2                     l7247:	
 12089                           
 12090                           ;Dimmer_B1.c: 430: if (DimmerLights->TriggerAdj == 1) {
 12091  17D2  0020               	movlb	0	; select bank0
 12092  17D3  086F               	movf	_DimmerLights,w
 12093  17D4  3E08               	addlw	8
 12094  17D5  0086               	movwf	6
 12095  17D6  3001               	movlw	1	; select bank2/3
 12096  17D7  0087               	movwf	7
 12097  17D8  1E01               	btfss	1,4
 12098  17D9  0008               	return
 12099                           
 12100                           ;Dimmer_B1.c: 431: if (Dimmer.LoadOK == 0) {
 12101  17DA  0022               	movlb	2	; select bank2
 12102  17DB  18BE               	btfsc	_Dimmer^(0+256),1
 12103  17DC  0008               	return
 12104                           
 12105                           ;Dimmer_B1.c: 432: DimmerLights->TriggerAdj = 0;
 12106  17DD  0020               	movlb	0	; select bank0
 12107  17DE  086F               	movf	_DimmerLights,w
 12108  17DF  3E08               	addlw	8
 12109  17E0  0086               	movwf	6
 12110  17E1  3001               	movlw	1	; select bank2/3
 12111  17E2  0087               	movwf	7
 12112  17E3  1201               	bcf	1,4
 12113                           
 12114                           ;Dimmer_B1.c: 433: if (DimmerLights->AdjGo == 1) {
 12115  17E4  086F               	movf	_DimmerLights,w
 12116  17E5  3E08               	addlw	8
 12117  17E6  0086               	movwf	6
 12118  17E7  3001               	movlw	1	; select bank2/3
 12119  17E8  0087               	movwf	7
 12120  17E9  1D81               	btfss	1,3
 12121  17EA  2FFA               	goto	l7257
 12122                           
 12123                           ;Dimmer_B1.c: 434: setDimmerLights_Adj(lights, 1);
 12124  17EB  01E2               	clrf	setDimmerLights_Adj@status
 12125  17EC  0AE2               	incf	setDimmerLights_Adj@status,f
 12126  17ED  0866               	movf	setDimmerLights_Main@lights,w
 12127  17EE  318B  230F  3197   	fcall	_setDimmerLights_Adj
 12128                           
 12129                           ;Dimmer_B1.c: 435: setBuz(1, 100);
 12130  17F1  3064               	movlw	100
 12131  17F2  0020               	movlb	0	; select bank0
 12132  17F3  00A9               	movwf	setBuz@time
 12133  17F4  3000               	movlw	0
 12134  17F5  00AA               	movwf	setBuz@time+1
 12135  17F6  3001               	movlw	1
 12136  17F7  3197  274E         	fcall	_setBuz
 12137                           
 12138                           ;Dimmer_B1.c: 436: } else {
 12139  17F9  0008               	return
 12140  17FA                     l7257:	
 12141                           
 12142                           ;Dimmer_B1.c: 437: setDimmerLights_Adj(lights, 0);
 12143  17FA  0020               	movlb	0	; select bank0
 12144  17FB  01E2               	clrf	setDimmerLights_Adj@status
 12145  17FC  0866               	movf	setDimmerLights_Main@lights,w
 12146  17FD  318B  230F         	fcall	_setDimmerLights_Adj
 12147  17FF  0008               	return
 12148  1800                     __end_of_setDimmerLights_Main:	
 12149                           
 12150                           	psect	text71
 12151  0B0F                     __ptext71:	
 12152 ;; *************** function _setDimmerLights_Adj *****************
 12153 ;; Defined at:
 12154 ;;		line 716 in file "../src/Dimmer_B1.c"
 12155 ;; Parameters:    Size  Location     Type
 12156 ;;  lights          1    wreg     unsigned char 
 12157 ;;  status          1   66[BANK0 ] unsigned char 
 12158 ;; Auto vars:     Size  Location     Type
 12159 ;;  lights          1   69[BANK0 ] unsigned char 
 12160 ;; Return value:  Size  Location     Type
 12161 ;;		None               void
 12162 ;; Registers used:
 12163 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12164 ;; Tracked objects:
 12165 ;;		On entry : 0/0
 12166 ;;		On exit  : 0/0
 12167 ;;		Unchanged: 0/0
 12168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12169 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12170 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12171 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12172 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12173 ;;Total ram usage:        4 bytes
 12174 ;; Hardware stack levels used:    1
 12175 ;; Hardware stack levels required when called:    8
 12176 ;; This function calls:
 12177 ;;		_DimmerLightsPointSelect
 12178 ;;		_getMain_All_Error_Status
 12179 ;;		_setPercentValue
 12180 ;;		_setRF_DimmerLights
 12181 ;;		_setTxData
 12182 ;; This function is called by:
 12183 ;;		_setDimmerLights_Main
 12184 ;; This function uses a non-reentrant model
 12185 ;;
 12186                           
 12187                           
 12188                           ;psect for function _setDimmerLights_Adj
 12189  0B0F                     _setDimmerLights_Adj:	
 12190                           
 12191                           ;incstack = 0
 12192                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12193                           ;setDimmerLights_Adj@lights stored from wreg
 12194  0B0F  0020               	movlb	0	; select bank0
 12195  0B10  00E5               	movwf	setDimmerLights_Adj@lights
 12196                           
 12197                           ;Dimmer_B1.c: 717: DimmerLightsPointSelect(lights);
 12198  0B11  0865               	movf	setDimmerLights_Adj@lights,w
 12199  0B12  319D  25B9  318B   	fcall	_DimmerLightsPointSelect
 12200                           
 12201                           ;Dimmer_B1.c: 718: if (status == 1) {
 12202  0B15  0020               	movlb	0	; select bank0
 12203  0B16  0862               	movf	setDimmerLights_Adj@status,w
 12204  0B17  3A01               	xorlw	1
 12205  0B18  1D03               	skipz
 12206  0B19  2B25               	goto	l6811
 12207                           
 12208                           ;Dimmer_B1.c: 719: DimmerLights->AdjFlag = 1;
 12209  0B1A  086F               	movf	_DimmerLights,w
 12210  0B1B  0086               	movwf	6
 12211  0B1C  3001               	movlw	1	; select bank2/3
 12212  0B1D  0087               	movwf	7
 12213  0B1E  1581               	bsf	1,3
 12214                           
 12215                           ;Dimmer_B1.c: 720: DimmerLights->Signal = 1;
 12216  0B1F  086F               	movf	_DimmerLights,w
 12217  0B20  0086               	movwf	6
 12218  0B21  3001               	movlw	1	; select bank2/3
 12219  0B22  0087               	movwf	7
 12220  0B23  1481               	bsf	1,1
 12221                           
 12222                           ;Dimmer_B1.c: 721: } else {
 12223  0B24  0008               	return
 12224  0B25                     l6811:	
 12225                           
 12226                           ;Dimmer_B1.c: 722: if (DimmerLights->AdjFlag == 1) {
 12227  0B25  086F               	movf	_DimmerLights,w
 12228  0B26  0086               	movwf	6
 12229  0B27  3001               	movlw	1	; select bank2/3
 12230  0B28  0087               	movwf	7
 12231  0B29  1D81               	btfss	1,3
 12232  0B2A  0008               	return
 12233                           
 12234                           ;Dimmer_B1.c: 723: DimmerLights->Signal = 0;
 12235  0B2B  086F               	movf	_DimmerLights,w
 12236  0B2C  0086               	movwf	6
 12237  0B2D  3001               	movlw	1	; select bank2/3
 12238  0B2E  0087               	movwf	7
 12239  0B2F  1081               	bcf	1,1
 12240                           
 12241                           ;Dimmer_B1.c: 724: DimmerLights->AdjFlag = 0;
 12242  0B30  086F               	movf	_DimmerLights,w
 12243  0B31  0086               	movwf	6
 12244  0B32  3001               	movlw	1	; select bank2/3
 12245  0B33  0087               	movwf	7
 12246  0B34  1181               	bcf	1,3
 12247                           
 12248                           ;Dimmer_B1.c: 725: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12249  0B35  086F               	movf	_DimmerLights,w
 12250  0B36  3E04               	addlw	4
 12251  0B37  0086               	movwf	6
 12252  0B38  3001               	movlw	1	; select bank2/3
 12253  0B39  0087               	movwf	7
 12254  0B3A  0801               	movf	1,w
 12255  0B3B  00E3               	movwf	??_setDimmerLights_Adj
 12256  0B3C  086F               	movf	_DimmerLights,w
 12257  0B3D  3E05               	addlw	5
 12258  0B3E  0086               	movwf	6
 12259  0B3F  3001               	movlw	1	; select bank2/3
 12260  0B40  0087               	movwf	7
 12261  0B41  0863               	movf	??_setDimmerLights_Adj,w
 12262  0B42  0081               	movwf	1
 12263                           
 12264                           ;Dimmer_B1.c: 726: product->Data[(20 + lights)]=setPercentValue(DimmerLights->DimmingVal
      +                          ue);
 12265  0B43  086F               	movf	_DimmerLights,w
 12266  0B44  3E04               	addlw	4
 12267  0B45  0086               	movwf	6
 12268  0B46  3001               	movlw	1	; select bank2/3
 12269  0B47  0087               	movwf	7
 12270  0B48  0801               	movf	1,w
 12271  0B49  318A  2245  318B   	fcall	_setPercentValue
 12272  0B4C  0020               	movlb	0	; select bank0
 12273  0B4D  00E3               	movwf	??_setDimmerLights_Adj
 12274  0B4E  0865               	movf	setDimmerLights_Adj@lights,w
 12275  0B4F  3E14               	addlw	20
 12276  0B50  076E               	addwf	_product,w
 12277  0B51  00E4               	movwf	??_setDimmerLights_Adj+1
 12278  0B52  0864               	movf	??_setDimmerLights_Adj+1,w
 12279  0B53  0086               	movwf	6
 12280  0B54  3002               	movlw	2	; select bank4/5
 12281  0B55  0087               	movwf	7
 12282  0B56  0863               	movf	??_setDimmerLights_Adj,w
 12283  0B57  0081               	movwf	1
 12284                           
 12285                           ;Dimmer_B1.c: 736: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12286  0B58  3000               	movlw	0
 12287  0B59  3192  225C  318B   	fcall	_getMain_All_Error_Status
 12288  0B5C  3A00               	xorlw	0
 12289  0B5D  3000               	movlw	0
 12290  0B5E  1903               	skipnz
 12291  0B5F  3001               	movlw	1
 12292  0B60  0020               	movlb	0	; select bank0
 12293  0B61  00E3               	movwf	??_setDimmerLights_Adj
 12294  0B62  0DE3               	rlf	??_setDimmerLights_Adj,f
 12295  0B63  0022               	movlb	2	; select bank2
 12296  0B64  083E               	movf	_Dimmer^(0+256),w
 12297  0B65  0020               	movlb	0	; select bank0
 12298  0B66  0663               	xorwf	??_setDimmerLights_Adj,w
 12299  0B67  39FD               	andlw	-3
 12300  0B68  0663               	xorwf	??_setDimmerLights_Adj,w
 12301  0B69  0022               	movlb	2	; select bank2
 12302  0B6A  00BE               	movwf	_Dimmer^(0+256)
 12303                           
 12304                           ;Dimmer_B1.c: 739: setRF_DimmerLights(lights, 1);
 12305  0B6B  0020               	movlb	0	; select bank0
 12306  0B6C  01A0               	clrf	setRF_DimmerLights@on
 12307  0B6D  0AA0               	incf	setRF_DimmerLights@on,f
 12308  0B6E  0865               	movf	setDimmerLights_Adj@lights,w
 12309  0B6F  3188  206E  318B   	fcall	_setRF_DimmerLights
 12310                           
 12311                           ;Dimmer_B1.c: 740: setTxData();
 12312  0B72  3186  26E4         	fcall	_setTxData
 12313  0B74  0008               	return
 12314  0B75                     __end_of_setDimmerLights_Adj:	
 12315                           
 12316                           	psect	text72
 12317  0CE5                     __ptext72:	
 12318 ;; *************** function _setDimmerLights *****************
 12319 ;; Defined at:
 12320 ;;		line 611 in file "../src/Dimmer_B1.c"
 12321 ;; Parameters:    Size  Location     Type
 12322 ;;  lights          1    wreg     unsigned char 
 12323 ;;  status          1   66[BANK0 ] unsigned char 
 12324 ;; Auto vars:     Size  Location     Type
 12325 ;;  lights          1   69[BANK0 ] unsigned char 
 12326 ;; Return value:  Size  Location     Type
 12327 ;;		None               void
 12328 ;; Registers used:
 12329 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12330 ;; Tracked objects:
 12331 ;;		On entry : 0/0
 12332 ;;		On exit  : 0/0
 12333 ;;		Unchanged: 0/0
 12334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12335 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12336 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12337 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12338 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12339 ;;Total ram usage:        4 bytes
 12340 ;; Hardware stack levels used:    1
 12341 ;; Hardware stack levels required when called:    8
 12342 ;; This function calls:
 12343 ;;		_DimmerLightsPointSelect
 12344 ;;		_getMain_All_Error_Status
 12345 ;;		_setDimmerLights_Line
 12346 ;;		_setLED
 12347 ;;		_setPercentValue
 12348 ;;		_setRF_DimmerLights
 12349 ;;		_setTxData
 12350 ;; This function is called by:
 12351 ;;		_setDimmerLights_Main
 12352 ;; This function uses a non-reentrant model
 12353 ;;
 12354                           
 12355                           
 12356                           ;psect for function _setDimmerLights
 12357  0CE5                     _setDimmerLights:	
 12358                           
 12359                           ;incstack = 0
 12360                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12361                           ;setDimmerLights@lights stored from wreg
 12362  0CE5  0020               	movlb	0	; select bank0
 12363  0CE6  00E5               	movwf	setDimmerLights@lights
 12364                           
 12365                           ;Dimmer_B1.c: 612: DimmerLightsPointSelect(lights);
 12366  0CE7  0865               	movf	setDimmerLights@lights,w
 12367  0CE8  319D  25B9  318C   	fcall	_DimmerLightsPointSelect
 12368                           
 12369                           ;Dimmer_B1.c: 615: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12370  0CEB  3000               	movlw	0
 12371  0CEC  3192  225C  318C   	fcall	_getMain_All_Error_Status
 12372  0CEF  3A00               	xorlw	0
 12373  0CF0  3000               	movlw	0
 12374  0CF1  1903               	skipnz
 12375  0CF2  3001               	movlw	1
 12376  0CF3  0020               	movlb	0	; select bank0
 12377  0CF4  00E3               	movwf	??_setDimmerLights
 12378  0CF5  0DE3               	rlf	??_setDimmerLights,f
 12379  0CF6  0022               	movlb	2	; select bank2
 12380  0CF7  083E               	movf	_Dimmer^(0+256),w
 12381  0CF8  0020               	movlb	0	; select bank0
 12382  0CF9  0663               	xorwf	??_setDimmerLights,w
 12383  0CFA  39FD               	andlw	-3
 12384  0CFB  0663               	xorwf	??_setDimmerLights,w
 12385  0CFC  0022               	movlb	2	; select bank2
 12386  0CFD  00BE               	movwf	_Dimmer^(0+256)
 12387                           
 12388                           ;Dimmer_B1.c: 619: if (status == 1) {
 12389  0CFE  0020               	movlb	0	; select bank0
 12390  0CFF  0862               	movf	setDimmerLights@status,w
 12391  0D00  3A01               	xorlw	1
 12392  0D01  1D03               	skipz
 12393  0D02  2D33               	goto	l6791
 12394                           
 12395                           ;Dimmer_B1.c: 620: DimmerLights->Loop = 1;
 12396  0D03  086F               	movf	_DimmerLights,w
 12397  0D04  3E09               	addlw	9
 12398  0D05  0086               	movwf	6
 12399  0D06  3001               	movlw	1	; select bank2/3
 12400  0D07  0087               	movwf	7
 12401  0D08  1481               	bsf	1,1
 12402                           
 12403                           ;Dimmer_B1.c: 621: setLED(lights, 0);
 12404  0D09  01A2               	clrf	setLED@command
 12405  0D0A  0865               	movf	setDimmerLights@lights,w
 12406  0D0B  3196  2652  318C   	fcall	_setLED
 12407                           
 12408                           ;Dimmer_B1.c: 623: setDimmerLights_Line(lights);
 12409  0D0E  0020               	movlb	0	; select bank0
 12410  0D0F  0865               	movf	setDimmerLights@lights,w
 12411  0D10  319E  267F  318C   	fcall	_setDimmerLights_Line
 12412                           
 12413                           ;Dimmer_B1.c: 624: DimmerLights->StatusFlag = 1;
 12414  0D13  0020               	movlb	0	; select bank0
 12415  0D14  086F               	movf	_DimmerLights,w
 12416  0D15  0086               	movwf	6
 12417  0D16  3001               	movlw	1	; select bank2/3
 12418  0D17  0087               	movwf	7
 12419  0D18  1701               	bsf	1,6
 12420                           
 12421                           ;Dimmer_B1.c: 631: DimmerLights->DimmingValue = ((char)(80*0.8));
 12422  0D19  3040               	movlw	64
 12423  0D1A  00E3               	movwf	??_setDimmerLights
 12424  0D1B  086F               	movf	_DimmerLights,w
 12425  0D1C  3E04               	addlw	4
 12426  0D1D  0086               	movwf	6
 12427  0D1E  3001               	movlw	1	; select bank2/3
 12428  0D1F  0087               	movwf	7
 12429  0D20  0863               	movf	??_setDimmerLights,w
 12430  0D21  0081               	movwf	1
 12431                           
 12432                           ;Dimmer_B1.c: 632: product->Data[(20 + lights)]=setPercentValue(((char)(80*0.8)));
 12433  0D22  3040               	movlw	64
 12434  0D23  318A  2245  318C   	fcall	_setPercentValue
 12435  0D26  0020               	movlb	0	; select bank0
 12436  0D27  00E3               	movwf	??_setDimmerLights
 12437  0D28  0865               	movf	setDimmerLights@lights,w
 12438  0D29  3E14               	addlw	20
 12439  0D2A  076E               	addwf	_product,w
 12440  0D2B  00E4               	movwf	??_setDimmerLights+1
 12441  0D2C  0864               	movf	??_setDimmerLights+1,w
 12442  0D2D  0086               	movwf	6
 12443  0D2E  3002               	movlw	2	; select bank4/5
 12444  0D2F  0087               	movwf	7
 12445  0D30  0863               	movf	??_setDimmerLights,w
 12446  0D31  0081               	movwf	1
 12447  0D32  2D5A               	goto	l6803
 12448  0D33                     l6791:	
 12449                           ;Dimmer_B1.c: 642: } else {
 12450                           
 12451                           ;Dimmer_B1.c: 640: DimmerLights->DimmingTimeValue = 7;
 12452                           
 12453                           
 12454                           ;Dimmer_B1.c: 643: DimmerLights->StatusFlag = 0;
 12455  0D33  086F               	movf	_DimmerLights,w
 12456  0D34  0086               	movwf	6
 12457  0D35  3001               	movlw	1	; select bank2/3
 12458  0D36  0087               	movwf	7
 12459  0D37  1301               	bcf	1,6
 12460                           
 12461                           ;Dimmer_B1.c: 644: DimmerLights->Loop = 0;
 12462  0D38  086F               	movf	_DimmerLights,w
 12463  0D39  3E09               	addlw	9
 12464  0D3A  0086               	movwf	6
 12465  0D3B  3001               	movlw	1	; select bank2/3
 12466  0D3C  0087               	movwf	7
 12467  0D3D  1081               	bcf	1,1
 12468                           
 12469                           ;Dimmer_B1.c: 645: setLED(lights, 1);
 12470  0D3E  01A2               	clrf	setLED@command
 12471  0D3F  0AA2               	incf	setLED@command,f
 12472  0D40  0865               	movf	setDimmerLights@lights,w
 12473  0D41  3196  2652  318C   	fcall	_setLED
 12474                           
 12475                           ;Dimmer_B1.c: 653: DimmerLights->MosfetClose = 1;
 12476  0D44  0020               	movlb	0	; select bank0
 12477  0D45  086F               	movf	_DimmerLights,w
 12478  0D46  3E08               	addlw	8
 12479  0D47  0086               	movwf	6
 12480  0D48  3001               	movlw	1	; select bank2/3
 12481  0D49  0087               	movwf	7
 12482  0D4A  1781               	bsf	1,7
 12483                           
 12484                           ;Dimmer_B1.c: 656: DimmerLights->AdjFlag = 0;
 12485  0D4B  086F               	movf	_DimmerLights,w
 12486  0D4C  0086               	movwf	6
 12487  0D4D  3001               	movlw	1	; select bank2/3
 12488  0D4E  0087               	movwf	7
 12489  0D4F  1181               	bcf	1,3
 12490                           
 12491                           ;Dimmer_B1.c: 657: DimmerLights->AdjStatus = 0;
 12492  0D50  086F               	movf	_DimmerLights,w
 12493  0D51  0086               	movwf	6
 12494  0D52  3001               	movlw	1	; select bank2/3
 12495  0D53  0087               	movwf	7
 12496  0D54  1201               	bcf	1,4
 12497                           
 12498                           ;Dimmer_B1.c: 658: DimmerLights->AdjRF = 0;
 12499  0D55  086F               	movf	_DimmerLights,w
 12500  0D56  0086               	movwf	6
 12501  0D57  3001               	movlw	1	; select bank2/3
 12502  0D58  0087               	movwf	7
 12503  0D59  1101               	bcf	1,2
 12504  0D5A                     l6803:	
 12505                           
 12506                           ;Dimmer_B1.c: 659: DimmerLights->DimmingTimeValue = 7;
 12507  0D5A  3007               	movlw	7
 12508  0D5B  00E3               	movwf	??_setDimmerLights
 12509  0D5C  086F               	movf	_DimmerLights,w
 12510  0D5D  3E02               	addlw	2
 12511  0D5E  0086               	movwf	6
 12512  0D5F  3001               	movlw	1	; select bank2/3
 12513  0D60  0087               	movwf	7
 12514  0D61  0863               	movf	??_setDimmerLights,w
 12515  0D62  0081               	movwf	1
 12516                           
 12517                           ;Dimmer_B1.c: 661: }
 12518                           ;Dimmer_B1.c: 662: setRF_DimmerLights(lights, status);
 12519  0D63  0862               	movf	setDimmerLights@status,w
 12520  0D64  00E3               	movwf	??_setDimmerLights
 12521  0D65  0863               	movf	??_setDimmerLights,w
 12522  0D66  00A0               	movwf	setRF_DimmerLights@on
 12523  0D67  0865               	movf	setDimmerLights@lights,w
 12524  0D68  3188  206E  318C   	fcall	_setRF_DimmerLights
 12525                           
 12526                           ;Dimmer_B1.c: 663: setTxData();
 12527  0D6B  3186  26E4         	fcall	_setTxData
 12528  0D6D  0008               	return
 12529  0D6E                     __end_of_setDimmerLights:	
 12530                           
 12531                           	psect	text73
 12532  06E4                     __ptext73:	
 12533 ;; *************** function _setTxData *****************
 12534 ;; Defined at:
 12535 ;;		line 211 in file "../src/RF_Control_B1.c"
 12536 ;; Parameters:    Size  Location     Type
 12537 ;;		None
 12538 ;; Auto vars:     Size  Location     Type
 12539 ;;  i               1    0        unsigned char 
 12540 ;; Return value:  Size  Location     Type
 12541 ;;		None               void
 12542 ;; Registers used:
 12543 ;;		wreg, fsr1l, fsr1h
 12544 ;; Tracked objects:
 12545 ;;		On entry : 0/0
 12546 ;;		On exit  : 0/0
 12547 ;;		Unchanged: 0/0
 12548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12551 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12552 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12553 ;;Total ram usage:        1 bytes
 12554 ;; Hardware stack levels used:    1
 12555 ;; Hardware stack levels required when called:    5
 12556 ;; This function calls:
 12557 ;;		Nothing
 12558 ;; This function is called by:
 12559 ;;		_setDimmerLights
 12560 ;;		_setDimmerLights_Adj
 12561 ;;		_getRxData
 12562 ;;		_setControl_Lights_Table
 12563 ;;		_setRFSW_Control
 12564 ;;		_setRFSW_AdjControl
 12565 ;; This function uses a non-reentrant model
 12566 ;;
 12567                           
 12568                           
 12569                           ;psect for function _setTxData
 12570  06E4                     _setTxData:	
 12571                           
 12572                           ;RF_Control_B1.c: 212: char i;
 12573                           ;RF_Control_B1.c: 213: if (RF1.Enable == 1) {
 12574                           
 12575                           ;incstack = 0
 12576                           ; Regs used in _setTxData: [wregfsr1]
 12577  06E4  0021               	movlb	1	; select bank1
 12578  06E5  1C3B               	btfss	_RF1^(0+128),0
 12579  06E6  0008               	return
 12580                           
 12581                           ;RF_Control_B1.c: 215: if (RF1.TransceiveGO == 0) {
 12582  06E7  193B               	btfsc	_RF1^(0+128),2
 12583  06E8  0008               	return
 12584                           
 12585                           ;RF_Control_B1.c: 216: RF1.TransceiveGO = 1;
 12586  06E9  153B               	bsf	_RF1^(0+128),2
 12587                           
 12588                           ;RF_Control_B1.c: 217: RF1.RunTime = 20;
 12589  06EA  3014               	movlw	20
 12590  06EB  00C2               	movwf	(_RF1^(0+128)+7)
 12591  06EC  3000               	movlw	0
 12592  06ED  00C3               	movwf	(_RF1^(0+128)+8)
 12593                           
 12594                           ;RF_Control_B1.c: 229: RF_Data[0] = 0x63;
 12595  06EE  3063               	movlw	99
 12596  06EF  0020               	movlb	0	; select bank0
 12597  06F0  00A0               	movwf	??_setTxData
 12598  06F1  0820               	movf	??_setTxData,w
 12599  06F2  0022               	movlb	2	; select bank2
 12600  06F3  00A0               	movwf	_RF_Data^(0+256)
 12601                           
 12602                           ;RF_Control_B1.c: 230: RF_Data[1] = 0x02;
 12603  06F4  3002               	movlw	2
 12604  06F5  0020               	movlb	0	; select bank0
 12605  06F6  00A0               	movwf	??_setTxData
 12606  06F7  0820               	movf	??_setTxData,w
 12607  06F8  0022               	movlb	2	; select bank2
 12608  06F9  00A1               	movwf	(_RF_Data^(0+256)+1)
 12609                           
 12610                           ;RF_Control_B1.c: 232: RF_Data[2] = product->Data[2];
 12611  06FA  0020               	movlb	0	; select bank0
 12612  06FB  086E               	movf	_product,w
 12613  06FC  0086               	movwf	6
 12614  06FD  3002               	movlw	2	; select bank4/5
 12615  06FE  0087               	movwf	7
 12616  06FF  3002               	movlw	2	; select bank4/5
 12617  0700  3F42               	moviw [2]fsr1
 12618  0701  0022               	movlb	2	; select bank2
 12619  0702  00A2               	movwf	(_RF_Data^(0+256)+2)
 12620                           
 12621                           ;RF_Control_B1.c: 233: RF_Data[3] = product->Data[3];
 12622  0703  0020               	movlb	0	; select bank0
 12623  0704  086E               	movf	_product,w
 12624  0705  0086               	movwf	6
 12625  0706  3002               	movlw	2	; select bank4/5
 12626  0707  0087               	movwf	7
 12627  0708  3002               	movlw	2	; select bank4/5
 12628  0709  3F43               	moviw [3]fsr1
 12629  070A  0022               	movlb	2	; select bank2
 12630  070B  00A3               	movwf	(_RF_Data^(0+256)+3)
 12631                           
 12632                           ;RF_Control_B1.c: 234: RF_Data[4] = product->Data[4];
 12633  070C  0020               	movlb	0	; select bank0
 12634  070D  086E               	movf	_product,w
 12635  070E  0086               	movwf	6
 12636  070F  3002               	movlw	2	; select bank4/5
 12637  0710  0087               	movwf	7
 12638  0711  3002               	movlw	2	; select bank4/5
 12639  0712  3F44               	moviw [4]fsr1
 12640  0713  0022               	movlb	2	; select bank2
 12641  0714  00A4               	movwf	(_RF_Data^(0+256)+4)
 12642                           
 12643                           ;RF_Control_B1.c: 235: RF_Data[5] = product->Data[5];
 12644  0715  0020               	movlb	0	; select bank0
 12645  0716  086E               	movf	_product,w
 12646  0717  0086               	movwf	6
 12647  0718  3002               	movlw	2	; select bank4/5
 12648  0719  0087               	movwf	7
 12649  071A  3002               	movlw	2	; select bank4/5
 12650  071B  3F45               	moviw [5]fsr1
 12651  071C  0022               	movlb	2	; select bank2
 12652  071D  00A5               	movwf	(_RF_Data^(0+256)+5)
 12653                           
 12654                           ;RF_Control_B1.c: 236: RF_Data[6] = product->Data[6];
 12655  071E  0020               	movlb	0	; select bank0
 12656  071F  086E               	movf	_product,w
 12657  0720  0086               	movwf	6
 12658  0721  3002               	movlw	2	; select bank4/5
 12659  0722  0087               	movwf	7
 12660  0723  3002               	movlw	2	; select bank4/5
 12661  0724  3F46               	moviw [6]fsr1
 12662  0725  0022               	movlb	2	; select bank2
 12663  0726  00A6               	movwf	(_RF_Data^(0+256)+6)
 12664                           
 12665                           ;RF_Control_B1.c: 237: RF_Data[7] = product->Data[7];
 12666  0727  0020               	movlb	0	; select bank0
 12667  0728  086E               	movf	_product,w
 12668  0729  0086               	movwf	6
 12669  072A  3002               	movlw	2	; select bank4/5
 12670  072B  0087               	movwf	7
 12671  072C  3002               	movlw	2	; select bank4/5
 12672  072D  3F47               	moviw [7]fsr1
 12673  072E  0022               	movlb	2	; select bank2
 12674  072F  00A7               	movwf	(_RF_Data^(0+256)+7)
 12675                           
 12676                           ;RF_Control_B1.c: 238: RF_Data[8] = product->Data[8];
 12677  0730  0020               	movlb	0	; select bank0
 12678  0731  086E               	movf	_product,w
 12679  0732  0086               	movwf	6
 12680  0733  3002               	movlw	2	; select bank4/5
 12681  0734  0087               	movwf	7
 12682  0735  3002               	movlw	2	; select bank4/5
 12683  0736  3F48               	moviw [8]fsr1
 12684  0737  0022               	movlb	2	; select bank2
 12685  0738  00A8               	movwf	(_RF_Data^(0+256)+8)
 12686                           
 12687                           ;RF_Control_B1.c: 239: RF_Data[9] = product->Data[9];
 12688  0739  0020               	movlb	0	; select bank0
 12689  073A  086E               	movf	_product,w
 12690  073B  0086               	movwf	6
 12691  073C  3002               	movlw	2	; select bank4/5
 12692  073D  0087               	movwf	7
 12693  073E  3002               	movlw	2	; select bank4/5
 12694  073F  3F49               	moviw [9]fsr1
 12695  0740  0022               	movlb	2	; select bank2
 12696  0741  00A9               	movwf	(_RF_Data^(0+256)+9)
 12697                           
 12698                           ;RF_Control_B1.c: 240: RF_Data[10] = product->Data[10];
 12699  0742  0020               	movlb	0	; select bank0
 12700  0743  086E               	movf	_product,w
 12701  0744  0086               	movwf	6
 12702  0745  3002               	movlw	2	; select bank4/5
 12703  0746  0087               	movwf	7
 12704  0747  3002               	movlw	2	; select bank4/5
 12705  0748  3F4A               	moviw [10]fsr1
 12706  0749  0022               	movlb	2	; select bank2
 12707  074A  00AA               	movwf	(_RF_Data^(0+256)+10)
 12708                           
 12709                           ;RF_Control_B1.c: 241: RF_Data[11] = product->Data[11];
 12710  074B  0020               	movlb	0	; select bank0
 12711  074C  086E               	movf	_product,w
 12712  074D  0086               	movwf	6
 12713  074E  3002               	movlw	2	; select bank4/5
 12714  074F  0087               	movwf	7
 12715  0750  3002               	movlw	2	; select bank4/5
 12716  0751  3F4B               	moviw [11]fsr1
 12717  0752  0022               	movlb	2	; select bank2
 12718  0753  00AB               	movwf	(_RF_Data^(0+256)+11)
 12719                           
 12720                           ;RF_Control_B1.c: 242: RF_Data[12] = product->Data[12];
 12721  0754  0020               	movlb	0	; select bank0
 12722  0755  086E               	movf	_product,w
 12723  0756  0086               	movwf	6
 12724  0757  3002               	movlw	2	; select bank4/5
 12725  0758  0087               	movwf	7
 12726  0759  3002               	movlw	2	; select bank4/5
 12727  075A  3F4C               	moviw [12]fsr1
 12728  075B  0022               	movlb	2	; select bank2
 12729  075C  00AC               	movwf	(_RF_Data^(0+256)+12)
 12730                           
 12731                           ;RF_Control_B1.c: 243: RF_Data[13] = product->Data[13];
 12732  075D  0020               	movlb	0	; select bank0
 12733  075E  086E               	movf	_product,w
 12734  075F  0086               	movwf	6
 12735  0760  3002               	movlw	2	; select bank4/5
 12736  0761  0087               	movwf	7
 12737  0762  3002               	movlw	2	; select bank4/5
 12738  0763  3F4D               	moviw [13]fsr1
 12739  0764  0022               	movlb	2	; select bank2
 12740  0765  00AD               	movwf	(_RF_Data^(0+256)+13)
 12741                           
 12742                           ;RF_Control_B1.c: 244: RF_Data[14] = product->Data[14];
 12743  0766  0020               	movlb	0	; select bank0
 12744  0767  086E               	movf	_product,w
 12745  0768  0086               	movwf	6
 12746  0769  3002               	movlw	2	; select bank4/5
 12747  076A  0087               	movwf	7
 12748  076B  3002               	movlw	2	; select bank4/5
 12749  076C  3F4E               	moviw [14]fsr1
 12750  076D  0022               	movlb	2	; select bank2
 12751  076E  00AE               	movwf	(_RF_Data^(0+256)+14)
 12752                           
 12753                           ;RF_Control_B1.c: 245: RF_Data[15] = product->Data[15];
 12754  076F  0020               	movlb	0	; select bank0
 12755  0770  086E               	movf	_product,w
 12756  0771  0086               	movwf	6
 12757  0772  3002               	movlw	2	; select bank4/5
 12758  0773  0087               	movwf	7
 12759  0774  3002               	movlw	2	; select bank4/5
 12760  0775  3F4F               	moviw [15]fsr1
 12761  0776  0022               	movlb	2	; select bank2
 12762  0777  00AF               	movwf	(_RF_Data^(0+256)+15)
 12763                           
 12764                           ;RF_Control_B1.c: 246: RF_Data[16] = product->Data[16];
 12765  0778  0020               	movlb	0	; select bank0
 12766  0779  086E               	movf	_product,w
 12767  077A  0086               	movwf	6
 12768  077B  3002               	movlw	2	; select bank4/5
 12769  077C  0087               	movwf	7
 12770  077D  3002               	movlw	2	; select bank4/5
 12771  077E  3F50               	moviw [16]fsr1
 12772  077F  0022               	movlb	2	; select bank2
 12773  0780  00B0               	movwf	(_RF_Data^(0+256)+16)
 12774                           
 12775                           ;RF_Control_B1.c: 247: RF_Data[17] = product->Data[17];
 12776  0781  0020               	movlb	0	; select bank0
 12777  0782  086E               	movf	_product,w
 12778  0783  0086               	movwf	6
 12779  0784  3002               	movlw	2	; select bank4/5
 12780  0785  0087               	movwf	7
 12781  0786  3002               	movlw	2	; select bank4/5
 12782  0787  3F51               	moviw [17]fsr1
 12783  0788  0022               	movlb	2	; select bank2
 12784  0789  00B1               	movwf	(_RF_Data^(0+256)+17)
 12785                           
 12786                           ;RF_Control_B1.c: 248: RF_Data[18] = product->Data[18];
 12787  078A  0020               	movlb	0	; select bank0
 12788  078B  086E               	movf	_product,w
 12789  078C  0086               	movwf	6
 12790  078D  3002               	movlw	2	; select bank4/5
 12791  078E  0087               	movwf	7
 12792  078F  3002               	movlw	2	; select bank4/5
 12793  0790  3F52               	moviw [18]fsr1
 12794  0791  0022               	movlb	2	; select bank2
 12795  0792  00B2               	movwf	(_RF_Data^(0+256)+18)
 12796                           
 12797                           ;RF_Control_B1.c: 249: RF_Data[19] = product->Data[19];
 12798  0793  0020               	movlb	0	; select bank0
 12799  0794  086E               	movf	_product,w
 12800  0795  0086               	movwf	6
 12801  0796  3002               	movlw	2	; select bank4/5
 12802  0797  0087               	movwf	7
 12803  0798  3002               	movlw	2	; select bank4/5
 12804  0799  3F53               	moviw [19]fsr1
 12805  079A  0022               	movlb	2	; select bank2
 12806  079B  00B3               	movwf	(_RF_Data^(0+256)+19)
 12807                           
 12808                           ;RF_Control_B1.c: 250: RF_Data[20] = 210;
 12809  079C  30D2               	movlw	210
 12810  079D  0020               	movlb	0	; select bank0
 12811  079E  00A0               	movwf	??_setTxData
 12812  079F  0820               	movf	??_setTxData,w
 12813  07A0  0022               	movlb	2	; select bank2
 12814  07A1  00B4               	movwf	(_RF_Data^(0+256)+20)
 12815  07A2  0008               	return
 12816  07A3                     __end_of_setTxData:	
 12817                           
 12818                           	psect	text74
 12819  086E                     __ptext74:	
 12820 ;; *************** function _setRF_DimmerLights *****************
 12821 ;; Defined at:
 12822 ;;		line 488 in file "../src/RF_Control_B1.c"
 12823 ;; Parameters:    Size  Location     Type
 12824 ;;  lights          1    wreg     unsigned char 
 12825 ;;  on              1    0[BANK0 ] unsigned char 
 12826 ;; Auto vars:     Size  Location     Type
 12827 ;;  lights          1    4[BANK0 ] unsigned char 
 12828 ;;  status          1    3[BANK0 ] unsigned char 
 12829 ;; Return value:  Size  Location     Type
 12830 ;;		None               void
 12831 ;; Registers used:
 12832 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12833 ;; Tracked objects:
 12834 ;;		On entry : 0/0
 12835 ;;		On exit  : 0/0
 12836 ;;		Unchanged: 0/0
 12837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12838 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12839 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12840 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12841 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12842 ;;Total ram usage:        5 bytes
 12843 ;; Hardware stack levels used:    1
 12844 ;; Hardware stack levels required when called:    5
 12845 ;; This function calls:
 12846 ;;		Nothing
 12847 ;; This function is called by:
 12848 ;;		_setDimmerLights
 12849 ;;		_setDimmerLights_Adj
 12850 ;;		_setRFSW_Control
 12851 ;; This function uses a non-reentrant model
 12852 ;;
 12853                           
 12854                           
 12855                           ;psect for function _setRF_DimmerLights
 12856  086E                     _setRF_DimmerLights:	
 12857                           
 12858                           ;incstack = 0
 12859                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 12860                           ;setRF_DimmerLights@lights stored from wreg
 12861  086E  0020               	movlb	0	; select bank0
 12862  086F  00A4               	movwf	setRF_DimmerLights@lights
 12863                           
 12864                           ;RF_Control_B1.c: 489: char status = 1;
 12865  0870  01A3               	clrf	setRF_DimmerLights@status
 12866  0871  0AA3               	incf	setRF_DimmerLights@status,f
 12867                           
 12868                           ;RF_Control_B1.c: 490: status <<= (lights - 1);
 12869  0872  0824               	movf	setRF_DimmerLights@lights,w
 12870  0873  3EFF               	addlw	-1
 12871  0874  0A89               	incf	9,f
 12872  0875  2878               	goto	u5230
 12873  0876                     u5235:	
 12874  0876  1003               	clrc
 12875  0877  0DA3               	rlf	setRF_DimmerLights@status,f
 12876  0878                     u5230:	
 12877  0878  3EFF               	addlw	-1
 12878  0879  1D03               	skipz
 12879  087A  2876               	goto	u5235
 12880                           
 12881                           ;RF_Control_B1.c: 491: product->Data[11]=lights;
 12882  087B  0824               	movf	setRF_DimmerLights@lights,w
 12883  087C  00A1               	movwf	??_setRF_DimmerLights
 12884  087D  086E               	movf	_product,w
 12885  087E  3E0B               	addlw	11
 12886  087F  0086               	movwf	6
 12887  0880  3002               	movlw	2	; select bank4/5
 12888  0881  0087               	movwf	7
 12889  0882  0821               	movf	??_setRF_DimmerLights,w
 12890  0883  0081               	movwf	1
 12891                           
 12892                           ;RF_Control_B1.c: 499: product->Data[9]=product->Data[20 + lights];
 12893  0884  0824               	movf	setRF_DimmerLights@lights,w
 12894  0885  3E14               	addlw	20
 12895  0886  076E               	addwf	_product,w
 12896  0887  00A1               	movwf	??_setRF_DimmerLights
 12897  0888  0821               	movf	??_setRF_DimmerLights,w
 12898  0889  0086               	movwf	6
 12899  088A  3002               	movlw	2	; select bank4/5
 12900  088B  0087               	movwf	7
 12901  088C  0801               	movf	1,w
 12902  088D  00A2               	movwf	??_setRF_DimmerLights+1
 12903  088E  086E               	movf	_product,w
 12904  088F  3E09               	addlw	9
 12905  0890  0086               	movwf	6
 12906  0891  3002               	movlw	2	; select bank4/5
 12907  0892  0087               	movwf	7
 12908  0893  0822               	movf	??_setRF_DimmerLights+1,w
 12909  0894  0081               	movwf	1
 12910                           
 12911                           ;RF_Control_B1.c: 500: product->Data[17]=product->Data[26 + lights];
 12912  0895  0824               	movf	setRF_DimmerLights@lights,w
 12913  0896  3E1A               	addlw	26
 12914  0897  076E               	addwf	_product,w
 12915  0898  00A1               	movwf	??_setRF_DimmerLights
 12916  0899  0821               	movf	??_setRF_DimmerLights,w
 12917  089A  0086               	movwf	6
 12918  089B  3002               	movlw	2	; select bank4/5
 12919  089C  0087               	movwf	7
 12920  089D  0801               	movf	1,w
 12921  089E  00A2               	movwf	??_setRF_DimmerLights+1
 12922  089F  086E               	movf	_product,w
 12923  08A0  3E11               	addlw	17
 12924  08A1  0086               	movwf	6
 12925  08A2  3002               	movlw	2	; select bank4/5
 12926  08A3  0087               	movwf	7
 12927  08A4  0822               	movf	??_setRF_DimmerLights+1,w
 12928  08A5  0081               	movwf	1
 12929                           
 12930                           ;RF_Control_B1.c: 501: if (on == 1) {
 12931  08A6  0820               	movf	setRF_DimmerLights@on,w
 12932  08A7  3A01               	xorlw	1
 12933  08A8  1D03               	skipz
 12934  08A9  28BA               	goto	l6317
 12935                           
 12936                           ;RF_Control_B1.c: 502: product->Data[15]=(product->Data[15] | status);
 12937  08AA  086E               	movf	_product,w
 12938  08AB  3E0F               	addlw	15
 12939  08AC  0086               	movwf	6
 12940  08AD  3002               	movlw	2	; select bank4/5
 12941  08AE  0087               	movwf	7
 12942  08AF  0801               	movf	1,w
 12943  08B0  0423               	iorwf	setRF_DimmerLights@status,w
 12944  08B1  00A1               	movwf	??_setRF_DimmerLights
 12945  08B2  086E               	movf	_product,w
 12946  08B3  3E0F               	addlw	15
 12947  08B4  0086               	movwf	6
 12948  08B5  3002               	movlw	2	; select bank4/5
 12949  08B6  0087               	movwf	7
 12950  08B7  0821               	movf	??_setRF_DimmerLights,w
 12951  08B8  0081               	movwf	1
 12952                           
 12953                           ;RF_Control_B1.c: 503: } else {
 12954  08B9  0008               	return
 12955  08BA                     l6317:	
 12956                           
 12957                           ;RF_Control_B1.c: 504: product->Data[15]=(product->Data[15]&(~status));
 12958  08BA  086E               	movf	_product,w
 12959  08BB  3E0F               	addlw	15
 12960  08BC  0086               	movwf	6
 12961  08BD  3002               	movlw	2	; select bank4/5
 12962  08BE  0087               	movwf	7
 12963  08BF  0923               	comf	setRF_DimmerLights@status,w
 12964  08C0  0501               	andwf	1,w
 12965  08C1  00A1               	movwf	??_setRF_DimmerLights
 12966  08C2  086E               	movf	_product,w
 12967  08C3  3E0F               	addlw	15
 12968  08C4  0086               	movwf	6
 12969  08C5  3002               	movlw	2	; select bank4/5
 12970  08C6  0087               	movwf	7
 12971  08C7  0821               	movf	??_setRF_DimmerLights,w
 12972  08C8  0081               	movwf	1
 12973  08C9  0008               	return
 12974  08CA                     __end_of_setRF_DimmerLights:	
 12975                           
 12976                           	psect	text75
 12977  0A45                     __ptext75:	
 12978 ;; *************** function _setPercentValue *****************
 12979 ;; Defined at:
 12980 ;;		line 874 in file "../src/Dimmer_B1.c"
 12981 ;; Parameters:    Size  Location     Type
 12982 ;;  value           1    wreg     unsigned char 
 12983 ;; Auto vars:     Size  Location     Type
 12984 ;;  value           1   62[BANK0 ] unsigned char 
 12985 ;;  i               3   63[BANK0 ] float 
 12986 ;; Return value:  Size  Location     Type
 12987 ;;                  1    wreg      unsigned char 
 12988 ;; Registers used:
 12989 ;;		wreg, status,2, status,0, pclath, cstack
 12990 ;; Tracked objects:
 12991 ;;		On entry : 0/0
 12992 ;;		On exit  : 0/0
 12993 ;;		Unchanged: 0/0
 12994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12996 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12997 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12998 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12999 ;;Total ram usage:        6 bytes
 13000 ;; Hardware stack levels used:    1
 13001 ;; Hardware stack levels required when called:    7
 13002 ;; This function calls:
 13003 ;;		___awtoft
 13004 ;;		___ftadd
 13005 ;;		___ftdiv
 13006 ;;		___ftneg
 13007 ;;		___fttol
 13008 ;; This function is called by:
 13009 ;;		_setDimmerLights
 13010 ;;		_setDimmerLights_Adj
 13011 ;;		_Flash_Memory_Initialization
 13012 ;; This function uses a non-reentrant model
 13013 ;;
 13014                           
 13015                           
 13016                           ;psect for function _setPercentValue
 13017  0A45                     _setPercentValue:	
 13018                           
 13019                           ;incstack = 0
 13020                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13021                           ;setPercentValue@value stored from wreg
 13022  0A45  0020               	movlb	0	; select bank0
 13023  0A46  00DE               	movwf	setPercentValue@value
 13024                           
 13025                           ;Dimmer_B1.c: 882: float i = ((char)(80*0.8)) - ((char)(15*0.8));
 13026  0A47  3000               	movlw	0
 13027  0A48  00DF               	movwf	setPercentValue@i
 13028  0A49  3050               	movlw	80
 13029  0A4A  00E0               	movwf	setPercentValue@i+1
 13030  0A4B  3042               	movlw	66
 13031  0A4C  00E1               	movwf	setPercentValue@i+2
 13032                           
 13033                           ;Dimmer_B1.c: 883: i /= 100;
 13034  0A4D  3000               	movlw	0
 13035  0A4E  00AE               	movwf	___ftdiv@f2
 13036  0A4F  30C8               	movlw	200
 13037  0A50  00AF               	movwf	___ftdiv@f2+1
 13038  0A51  3042               	movlw	66
 13039  0A52  00B0               	movwf	___ftdiv@f2+2
 13040  0A53  085F               	movf	setPercentValue@i,w
 13041  0A54  00B1               	movwf	___ftdiv@f1
 13042  0A55  0860               	movf	setPercentValue@i+1,w
 13043  0A56  00B2               	movwf	___ftdiv@f1+1
 13044  0A57  0861               	movf	setPercentValue@i+2,w
 13045  0A58  00B3               	movwf	___ftdiv@f1+2
 13046  0A59  318E  26A3  318A   	fcall	___ftdiv
 13047  0A5C  0020               	movlb	0	; select bank0
 13048  0A5D  082E               	movf	?___ftdiv,w
 13049  0A5E  00DF               	movwf	setPercentValue@i
 13050  0A5F  082F               	movf	?___ftdiv+1,w
 13051  0A60  00E0               	movwf	setPercentValue@i+1
 13052  0A61  0830               	movf	?___ftdiv+2,w
 13053  0A62  00E1               	movwf	setPercentValue@i+2
 13054                           
 13055                           ;Dimmer_B1.c: 885: return (char) (100 - ((((char)(80*0.8)) - value) / i));
 13056  0A63  085E               	movf	setPercentValue@value,w
 13057  0A64  00DC               	movwf	??_setPercentValue
 13058  0A65  01DD               	clrf	??_setPercentValue+1
 13059  0A66  09DC               	comf	??_setPercentValue,f
 13060  0A67  09DD               	comf	??_setPercentValue+1,f
 13061  0A68  0ADC               	incf	??_setPercentValue,f
 13062  0A69  1903               	skipnz
 13063  0A6A  0ADD               	incf	??_setPercentValue+1,f
 13064  0A6B  085C               	movf	??_setPercentValue,w
 13065  0A6C  3E40               	addlw	64
 13066  0A6D  00A8               	movwf	___awtoft@c
 13067  0A6E  3000               	movlw	0
 13068  0A6F  3D5D               	addwfc	??_setPercentValue+1,w
 13069  0A70  00A9               	movwf	___awtoft@c+1
 13070  0A71  3190  209C  318A   	fcall	___awtoft
 13071  0A74  0020               	movlb	0	; select bank0
 13072  0A75  0828               	movf	?___awtoft,w
 13073  0A76  00B1               	movwf	___ftdiv@f1
 13074  0A77  0829               	movf	?___awtoft+1,w
 13075  0A78  00B2               	movwf	___ftdiv@f1+1
 13076  0A79  082A               	movf	?___awtoft+2,w
 13077  0A7A  00B3               	movwf	___ftdiv@f1+2
 13078  0A7B  085F               	movf	setPercentValue@i,w
 13079  0A7C  00AE               	movwf	___ftdiv@f2
 13080  0A7D  0860               	movf	setPercentValue@i+1,w
 13081  0A7E  00AF               	movwf	___ftdiv@f2+1
 13082  0A7F  0861               	movf	setPercentValue@i+2,w
 13083  0A80  00B0               	movwf	___ftdiv@f2+2
 13084  0A81  318E  26A3  318A   	fcall	___ftdiv
 13085  0A84  0020               	movlb	0	; select bank0
 13086  0A85  082E               	movf	?___ftdiv,w
 13087  0A86  00BE               	movwf	___ftneg@f1
 13088  0A87  082F               	movf	?___ftdiv+1,w
 13089  0A88  00BF               	movwf	___ftneg@f1+1
 13090  0A89  0830               	movf	?___ftdiv+2,w
 13091  0A8A  00C0               	movwf	___ftneg@f1+2
 13092  0A8B  319C  2449  318A   	fcall	___ftneg
 13093  0A8E  0020               	movlb	0	; select bank0
 13094  0A8F  083E               	movf	?___ftneg,w
 13095  0A90  00C4               	movwf	___ftadd@f2
 13096  0A91  083F               	movf	?___ftneg+1,w
 13097  0A92  00C5               	movwf	___ftadd@f2+1
 13098  0A93  0840               	movf	?___ftneg+2,w
 13099  0A94  00C6               	movwf	___ftadd@f2+2
 13100  0A95  3000               	movlw	0
 13101  0A96  00C1               	movwf	___ftadd@f1
 13102  0A97  30C8               	movlw	200
 13103  0A98  00C2               	movwf	___ftadd@f1+1
 13104  0A99  3042               	movlw	66
 13105  0A9A  00C3               	movwf	___ftadd@f1+2
 13106  0A9B  3184  244A  318A   	fcall	___ftadd
 13107  0A9E  0020               	movlb	0	; select bank0
 13108  0A9F  0841               	movf	?___ftadd,w
 13109  0AA0  00CE               	movwf	___fttol@f1
 13110  0AA1  0842               	movf	?___ftadd+1,w
 13111  0AA2  00CF               	movwf	___fttol@f1+1
 13112  0AA3  0843               	movf	?___ftadd+2,w
 13113  0AA4  00D0               	movwf	___fttol@f1+2
 13114  0AA5  318C  245E         	fcall	___fttol
 13115  0AA7  0020               	movlb	0	; select bank0
 13116  0AA8  084E               	movf	?___fttol,w
 13117  0AA9  0008               	return
 13118  0AAA                     __end_of_setPercentValue:	
 13119                           
 13120                           	psect	text76
 13121  0C5E                     __ptext76:	
 13122 ;; *************** function ___fttol *****************
 13123 ;; Defined at:
 13124 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13125 ;; Parameters:    Size  Location     Type
 13126 ;;  f1              3   46[BANK0 ] float 
 13127 ;; Auto vars:     Size  Location     Type
 13128 ;;  lval            4   55[BANK0 ] unsigned long 
 13129 ;;  exp1            1   59[BANK0 ] unsigned char 
 13130 ;;  sign1           1   54[BANK0 ] unsigned char 
 13131 ;; Return value:  Size  Location     Type
 13132 ;;                  4   46[BANK0 ] long 
 13133 ;; Registers used:
 13134 ;;		wreg, status,2, status,0
 13135 ;; Tracked objects:
 13136 ;;		On entry : 0/0
 13137 ;;		On exit  : 0/0
 13138 ;;		Unchanged: 0/0
 13139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13140 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13141 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13142 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13143 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13144 ;;Total ram usage:       14 bytes
 13145 ;; Hardware stack levels used:    1
 13146 ;; Hardware stack levels required when called:    5
 13147 ;; This function calls:
 13148 ;;		Nothing
 13149 ;; This function is called by:
 13150 ;;		_getPercentValue
 13151 ;;		_setPercentValue
 13152 ;; This function uses a non-reentrant model
 13153 ;;
 13154                           
 13155                           
 13156                           ;psect for function ___fttol
 13157  0C5E                     ___fttol:	
 13158                           
 13159                           ;incstack = 0
 13160                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13161  0C5E  0020               	movlb	0	; select bank0
 13162  0C5F  084E               	movf	___fttol@f1,w
 13163  0C60  00D2               	movwf	??___fttol
 13164  0C61  084F               	movf	___fttol@f1+1,w
 13165  0C62  00D3               	movwf	??___fttol+1
 13166  0C63  0850               	movf	___fttol@f1+2,w
 13167  0C64  00D4               	movwf	??___fttol+2
 13168  0C65  1003               	clrc
 13169  0C66  0D53               	rlf	??___fttol+1,w
 13170  0C67  0D54               	rlf	??___fttol+2,w
 13171  0C68  00D5               	movwf	??___fttol+3
 13172  0C69  0855               	movf	??___fttol+3,w
 13173  0C6A  00DB               	movwf	___fttol@exp1
 13174  0C6B  08DB               	movf	___fttol@exp1,f
 13175  0C6C  1D03               	skipz
 13176  0C6D  2C77               	goto	l6043
 13177  0C6E  3000               	movlw	0
 13178  0C6F  00D1               	movwf	?___fttol+3
 13179  0C70  3000               	movlw	0
 13180  0C71  00D0               	movwf	?___fttol+2
 13181  0C72  3000               	movlw	0
 13182  0C73  00CF               	movwf	?___fttol+1
 13183  0C74  3000               	movlw	0
 13184  0C75  00CE               	movwf	?___fttol
 13185  0C76  0008               	return
 13186  0C77                     l6043:	
 13187  0C77  084E               	movf	___fttol@f1,w
 13188  0C78  00D2               	movwf	??___fttol
 13189  0C79  084F               	movf	___fttol@f1+1,w
 13190  0C7A  00D3               	movwf	??___fttol+1
 13191  0C7B  0850               	movf	___fttol@f1+2,w
 13192  0C7C  00D4               	movwf	??___fttol+2
 13193  0C7D  3017               	movlw	23
 13194  0C7E                     u4825:	
 13195  0C7E  36D4               	lsrf	??___fttol+2,f
 13196  0C7F  0CD3               	rrf	??___fttol+1,f
 13197  0C80  0CD2               	rrf	??___fttol,f
 13198  0C81  0B89               	decfsz	9,f
 13199  0C82  2C7E               	goto	u4825
 13200  0C83  0852               	movf	??___fttol,w
 13201  0C84  00D5               	movwf	??___fttol+3
 13202  0C85  0855               	movf	??___fttol+3,w
 13203  0C86  00D6               	movwf	___fttol@sign1
 13204  0C87  17CF               	bsf	___fttol@f1+1,7
 13205  0C88  30FF               	movlw	255
 13206  0C89  05CE               	andwf	___fttol@f1,f
 13207  0C8A  30FF               	movlw	255
 13208  0C8B  05CF               	andwf	___fttol@f1+1,f
 13209  0C8C  3000               	movlw	0
 13210  0C8D  05D0               	andwf	___fttol@f1+2,f
 13211  0C8E  084E               	movf	___fttol@f1,w
 13212  0C8F  00D7               	movwf	___fttol@lval
 13213  0C90  084F               	movf	___fttol@f1+1,w
 13214  0C91  00D8               	movwf	___fttol@lval+1
 13215  0C92  0850               	movf	___fttol@f1+2,w
 13216  0C93  00D9               	movwf	___fttol@lval+2
 13217  0C94  01DA               	clrf	___fttol@lval+3
 13218  0C95  308E               	movlw	142
 13219  0C96  02DB               	subwf	___fttol@exp1,f
 13220  0C97  1FDB               	btfss	___fttol@exp1,7
 13221  0C98  2CB5               	goto	l6063
 13222  0C99  085B               	movf	___fttol@exp1,w
 13223  0C9A  3A80               	xorlw	128
 13224  0C9B  3E8F               	addlw	143
 13225  0C9C  1803               	skipnc
 13226  0C9D  2CA7               	goto	l6061
 13227  0C9E  3000               	movlw	0
 13228  0C9F  00D1               	movwf	?___fttol+3
 13229  0CA0  3000               	movlw	0
 13230  0CA1  00D0               	movwf	?___fttol+2
 13231  0CA2  3000               	movlw	0
 13232  0CA3  00CF               	movwf	?___fttol+1
 13233  0CA4  3000               	movlw	0
 13234  0CA5  00CE               	movwf	?___fttol
 13235  0CA6  0008               	return
 13236  0CA7                     l6061:	
 13237  0CA7  3001               	movlw	1
 13238  0CA8                     u4855:	
 13239  0CA8  36DA               	lsrf	___fttol@lval+3,f
 13240  0CA9  0CD9               	rrf	___fttol@lval+2,f
 13241  0CAA  0CD8               	rrf	___fttol@lval+1,f
 13242  0CAB  0CD7               	rrf	___fttol@lval,f
 13243  0CAC  0B89               	decfsz	9,f
 13244  0CAD  2CA8               	goto	u4855
 13245  0CAE  3001               	movlw	1
 13246  0CAF  00D2               	movwf	??___fttol
 13247  0CB0  0852               	movf	??___fttol,w
 13248  0CB1  07DB               	addwf	___fttol@exp1,f
 13249  0CB2  1903               	btfsc	3,2
 13250  0CB3  2CCE               	goto	l6073
 13251  0CB4  2CA7               	goto	l6061
 13252  0CB5                     l6063:	
 13253  0CB5  3018               	movlw	24
 13254  0CB6  025B               	subwf	___fttol@exp1,w
 13255  0CB7  1C03               	skipc
 13256  0CB8  2CCB               	goto	l6071
 13257  0CB9  3000               	movlw	0
 13258  0CBA  00D1               	movwf	?___fttol+3
 13259  0CBB  3000               	movlw	0
 13260  0CBC  00D0               	movwf	?___fttol+2
 13261  0CBD  3000               	movlw	0
 13262  0CBE  00CF               	movwf	?___fttol+1
 13263  0CBF  3000               	movlw	0
 13264  0CC0  00CE               	movwf	?___fttol
 13265  0CC1  0008               	return
 13266  0CC2                     l6069:	
 13267  0CC2  3001               	movlw	1
 13268  0CC3                     u4885:	
 13269  0CC3  35D7               	lslf	___fttol@lval,f
 13270  0CC4  0DD8               	rlf	___fttol@lval+1,f
 13271  0CC5  0DD9               	rlf	___fttol@lval+2,f
 13272  0CC6  0DDA               	rlf	___fttol@lval+3,f
 13273  0CC7  0B89               	decfsz	9,f
 13274  0CC8  2CC3               	goto	u4885
 13275  0CC9  3001               	movlw	1
 13276  0CCA  02DB               	subwf	___fttol@exp1,f
 13277  0CCB                     l6071:	
 13278  0CCB  08DB               	movf	___fttol@exp1,f
 13279  0CCC  1D03               	skipz
 13280  0CCD  2CC2               	goto	l6069
 13281  0CCE                     l6073:	
 13282  0CCE  0856               	movf	___fttol@sign1,w
 13283  0CCF  1903               	btfsc	3,2
 13284  0CD0  2CDC               	goto	l6077
 13285  0CD1  09D7               	comf	___fttol@lval,f
 13286  0CD2  09D8               	comf	___fttol@lval+1,f
 13287  0CD3  09D9               	comf	___fttol@lval+2,f
 13288  0CD4  09DA               	comf	___fttol@lval+3,f
 13289  0CD5  0AD7               	incf	___fttol@lval,f
 13290  0CD6  1903               	skipnz
 13291  0CD7  0AD8               	incf	___fttol@lval+1,f
 13292  0CD8  1903               	skipnz
 13293  0CD9  0AD9               	incf	___fttol@lval+2,f
 13294  0CDA  1903               	skipnz
 13295  0CDB  0ADA               	incf	___fttol@lval+3,f
 13296  0CDC                     l6077:	
 13297  0CDC  085A               	movf	___fttol@lval+3,w
 13298  0CDD  00D1               	movwf	?___fttol+3
 13299  0CDE  0859               	movf	___fttol@lval+2,w
 13300  0CDF  00D0               	movwf	?___fttol+2
 13301  0CE0  0858               	movf	___fttol@lval+1,w
 13302  0CE1  00CF               	movwf	?___fttol+1
 13303  0CE2  0857               	movf	___fttol@lval,w
 13304  0CE3  00CE               	movwf	?___fttol
 13305  0CE4  0008               	return
 13306  0CE5                     __end_of___fttol:	
 13307                           
 13308                           	psect	text77
 13309  1C49                     __ptext77:	
 13310 ;; *************** function ___ftneg *****************
 13311 ;; Defined at:
 13312 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13313 ;; Parameters:    Size  Location     Type
 13314 ;;  f1              3   30[BANK0 ] float 
 13315 ;; Auto vars:     Size  Location     Type
 13316 ;;		None
 13317 ;; Return value:  Size  Location     Type
 13318 ;;                  3   30[BANK0 ] float 
 13319 ;; Registers used:
 13320 ;;		wreg
 13321 ;; Tracked objects:
 13322 ;;		On entry : 0/0
 13323 ;;		On exit  : 0/0
 13324 ;;		Unchanged: 0/0
 13325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13326 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13329 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13330 ;;Total ram usage:        3 bytes
 13331 ;; Hardware stack levels used:    1
 13332 ;; Hardware stack levels required when called:    5
 13333 ;; This function calls:
 13334 ;;		Nothing
 13335 ;; This function is called by:
 13336 ;;		_getPercentValue
 13337 ;;		_setPercentValue
 13338 ;; This function uses a non-reentrant model
 13339 ;;
 13340                           
 13341                           
 13342                           ;psect for function ___ftneg
 13343  1C49                     ___ftneg:	
 13344                           
 13345                           ;incstack = 0
 13346                           ; Regs used in ___ftneg: [wreg]
 13347  1C49  0020               	movlb	0	; select bank0
 13348  1C4A  0840               	movf	___ftneg@f1+2,w
 13349  1C4B  043F               	iorwf	___ftneg@f1+1,w
 13350  1C4C  043E               	iorwf	___ftneg@f1,w
 13351  1C4D  1903               	skipnz
 13352  1C4E  0008               	return
 13353  1C4F  3080               	movlw	128
 13354  1C50  06C0               	xorwf	___ftneg@f1+2,f
 13355  1C51  0008               	return
 13356  1C52                     __end_of___ftneg:	
 13357                           
 13358                           	psect	text78
 13359  0EA3                     __ptext78:	
 13360 ;; *************** function ___ftdiv *****************
 13361 ;; Defined at:
 13362 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13363 ;; Parameters:    Size  Location     Type
 13364 ;;  f2              3   14[BANK0 ] float 
 13365 ;;  f1              3   17[BANK0 ] float 
 13366 ;; Auto vars:     Size  Location     Type
 13367 ;;  f3              3   25[BANK0 ] float 
 13368 ;;  sign            1   29[BANK0 ] unsigned char 
 13369 ;;  exp             1   28[BANK0 ] unsigned char 
 13370 ;;  cntr            1   24[BANK0 ] unsigned char 
 13371 ;; Return value:  Size  Location     Type
 13372 ;;                  3   14[BANK0 ] float 
 13373 ;; Registers used:
 13374 ;;		wreg, status,2, status,0, pclath, cstack
 13375 ;; Tracked objects:
 13376 ;;		On entry : 0/0
 13377 ;;		On exit  : 0/0
 13378 ;;		Unchanged: 0/0
 13379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13380 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13381 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13382 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13383 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13384 ;;Total ram usage:       16 bytes
 13385 ;; Hardware stack levels used:    1
 13386 ;; Hardware stack levels required when called:    6
 13387 ;; This function calls:
 13388 ;;		___ftpack
 13389 ;; This function is called by:
 13390 ;;		_getPercentValue
 13391 ;;		_setPercentValue
 13392 ;; This function uses a non-reentrant model
 13393 ;;
 13394                           
 13395                           
 13396                           ;psect for function ___ftdiv
 13397  0EA3                     ___ftdiv:	
 13398                           
 13399                           ;incstack = 0
 13400                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13401  0EA3  0020               	movlb	0	; select bank0
 13402  0EA4  0831               	movf	___ftdiv@f1,w
 13403  0EA5  00B4               	movwf	??___ftdiv
 13404  0EA6  0832               	movf	___ftdiv@f1+1,w
 13405  0EA7  00B5               	movwf	??___ftdiv+1
 13406  0EA8  0833               	movf	___ftdiv@f1+2,w
 13407  0EA9  00B6               	movwf	??___ftdiv+2
 13408  0EAA  1003               	clrc
 13409  0EAB  0D35               	rlf	??___ftdiv+1,w
 13410  0EAC  0D36               	rlf	??___ftdiv+2,w
 13411  0EAD  00B7               	movwf	??___ftdiv+3
 13412  0EAE  0837               	movf	??___ftdiv+3,w
 13413  0EAF  00BC               	movwf	___ftdiv@exp
 13414  0EB0  08BC               	movf	___ftdiv@exp,f
 13415  0EB1  1D03               	skipz
 13416  0EB2  2EBA               	goto	l5943
 13417  0EB3  3000               	movlw	0
 13418  0EB4  00AE               	movwf	?___ftdiv
 13419  0EB5  3000               	movlw	0
 13420  0EB6  00AF               	movwf	?___ftdiv+1
 13421  0EB7  3000               	movlw	0
 13422  0EB8  00B0               	movwf	?___ftdiv+2
 13423  0EB9  0008               	return
 13424  0EBA                     l5943:	
 13425  0EBA  082E               	movf	___ftdiv@f2,w
 13426  0EBB  00B4               	movwf	??___ftdiv
 13427  0EBC  082F               	movf	___ftdiv@f2+1,w
 13428  0EBD  00B5               	movwf	??___ftdiv+1
 13429  0EBE  0830               	movf	___ftdiv@f2+2,w
 13430  0EBF  00B6               	movwf	??___ftdiv+2
 13431  0EC0  1003               	clrc
 13432  0EC1  0D35               	rlf	??___ftdiv+1,w
 13433  0EC2  0D36               	rlf	??___ftdiv+2,w
 13434  0EC3  00B7               	movwf	??___ftdiv+3
 13435  0EC4  0837               	movf	??___ftdiv+3,w
 13436  0EC5  00BD               	movwf	___ftdiv@sign
 13437  0EC6  08BD               	movf	___ftdiv@sign,f
 13438  0EC7  1D03               	skipz
 13439  0EC8  2ED0               	goto	l5949
 13440  0EC9  3000               	movlw	0
 13441  0ECA  00AE               	movwf	?___ftdiv
 13442  0ECB  3000               	movlw	0
 13443  0ECC  00AF               	movwf	?___ftdiv+1
 13444  0ECD  3000               	movlw	0
 13445  0ECE  00B0               	movwf	?___ftdiv+2
 13446  0ECF  0008               	return
 13447  0ED0                     l5949:	
 13448  0ED0  3000               	movlw	0
 13449  0ED1  00B9               	movwf	___ftdiv@f3
 13450  0ED2  3000               	movlw	0
 13451  0ED3  00BA               	movwf	___ftdiv@f3+1
 13452  0ED4  3000               	movlw	0
 13453  0ED5  00BB               	movwf	___ftdiv@f3+2
 13454  0ED6  3089               	movlw	137
 13455  0ED7  073D               	addwf	___ftdiv@sign,w
 13456  0ED8  00B4               	movwf	??___ftdiv
 13457  0ED9  0834               	movf	??___ftdiv,w
 13458  0EDA  02BC               	subwf	___ftdiv@exp,f
 13459  0EDB  0831               	movf	___ftdiv@f1,w
 13460  0EDC  00B4               	movwf	??___ftdiv
 13461  0EDD  0832               	movf	___ftdiv@f1+1,w
 13462  0EDE  00B5               	movwf	??___ftdiv+1
 13463  0EDF  0833               	movf	___ftdiv@f1+2,w
 13464  0EE0  00B6               	movwf	??___ftdiv+2
 13465  0EE1  3010               	movlw	16
 13466  0EE2                     u4625:	
 13467  0EE2  36B6               	lsrf	??___ftdiv+2,f
 13468  0EE3  0CB5               	rrf	??___ftdiv+1,f
 13469  0EE4  0CB4               	rrf	??___ftdiv,f
 13470  0EE5  0B89               	decfsz	9,f
 13471  0EE6  2EE2               	goto	u4625
 13472  0EE7  0834               	movf	??___ftdiv,w
 13473  0EE8  00B7               	movwf	??___ftdiv+3
 13474  0EE9  0837               	movf	??___ftdiv+3,w
 13475  0EEA  00BD               	movwf	___ftdiv@sign
 13476  0EEB  082E               	movf	___ftdiv@f2,w
 13477  0EEC  00B4               	movwf	??___ftdiv
 13478  0EED  082F               	movf	___ftdiv@f2+1,w
 13479  0EEE  00B5               	movwf	??___ftdiv+1
 13480  0EEF  0830               	movf	___ftdiv@f2+2,w
 13481  0EF0  00B6               	movwf	??___ftdiv+2
 13482  0EF1  3010               	movlw	16
 13483  0EF2                     u4635:	
 13484  0EF2  36B6               	lsrf	??___ftdiv+2,f
 13485  0EF3  0CB5               	rrf	??___ftdiv+1,f
 13486  0EF4  0CB4               	rrf	??___ftdiv,f
 13487  0EF5  0B89               	decfsz	9,f
 13488  0EF6  2EF2               	goto	u4635
 13489  0EF7  0834               	movf	??___ftdiv,w
 13490  0EF8  00B7               	movwf	??___ftdiv+3
 13491  0EF9  0837               	movf	??___ftdiv+3,w
 13492  0EFA  06BD               	xorwf	___ftdiv@sign,f
 13493  0EFB  3080               	movlw	128
 13494  0EFC  00B4               	movwf	??___ftdiv
 13495  0EFD  0834               	movf	??___ftdiv,w
 13496  0EFE  05BD               	andwf	___ftdiv@sign,f
 13497  0EFF  17B2               	bsf	___ftdiv@f1+1,7
 13498  0F00  30FF               	movlw	255
 13499  0F01  05B1               	andwf	___ftdiv@f1,f
 13500  0F02  30FF               	movlw	255
 13501  0F03  05B2               	andwf	___ftdiv@f1+1,f
 13502  0F04  3000               	movlw	0
 13503  0F05  05B3               	andwf	___ftdiv@f1+2,f
 13504  0F06  17AF               	bsf	___ftdiv@f2+1,7
 13505  0F07  30FF               	movlw	255
 13506  0F08  05AE               	andwf	___ftdiv@f2,f
 13507  0F09  30FF               	movlw	255
 13508  0F0A  05AF               	andwf	___ftdiv@f2+1,f
 13509  0F0B  3000               	movlw	0
 13510  0F0C  05B0               	andwf	___ftdiv@f2+2,f
 13511  0F0D  3018               	movlw	24
 13512  0F0E  00B4               	movwf	??___ftdiv
 13513  0F0F  0834               	movf	??___ftdiv,w
 13514  0F10  00B8               	movwf	___ftdiv@cntr
 13515  0F11                     l5963:	
 13516  0F11  3001               	movlw	1
 13517  0F12                     u4645:	
 13518  0F12  35B9               	lslf	___ftdiv@f3,f
 13519  0F13  0DBA               	rlf	___ftdiv@f3+1,f
 13520  0F14  0DBB               	rlf	___ftdiv@f3+2,f
 13521  0F15  0B89               	decfsz	9,f
 13522  0F16  2F12               	goto	u4645
 13523  0F17  0830               	movf	___ftdiv@f2+2,w
 13524  0F18  0233               	subwf	___ftdiv@f1+2,w
 13525  0F19  1D03               	skipz
 13526  0F1A  2F21               	goto	u4655
 13527  0F1B  082F               	movf	___ftdiv@f2+1,w
 13528  0F1C  0232               	subwf	___ftdiv@f1+1,w
 13529  0F1D  1D03               	skipz
 13530  0F1E  2F21               	goto	u4655
 13531  0F1F  082E               	movf	___ftdiv@f2,w
 13532  0F20  0231               	subwf	___ftdiv@f1,w
 13533  0F21                     u4655:	
 13534  0F21  1C03               	skipc
 13535  0F22  2F2A               	goto	l5971
 13536  0F23  082E               	movf	___ftdiv@f2,w
 13537  0F24  02B1               	subwf	___ftdiv@f1,f
 13538  0F25  082F               	movf	___ftdiv@f2+1,w
 13539  0F26  3BB2               	subwfb	___ftdiv@f1+1,f
 13540  0F27  0830               	movf	___ftdiv@f2+2,w
 13541  0F28  3BB3               	subwfb	___ftdiv@f1+2,f
 13542  0F29  1439               	bsf	___ftdiv@f3,0
 13543  0F2A                     l5971:	
 13544  0F2A  3001               	movlw	1
 13545  0F2B                     u4665:	
 13546  0F2B  35B1               	lslf	___ftdiv@f1,f
 13547  0F2C  0DB2               	rlf	___ftdiv@f1+1,f
 13548  0F2D  0DB3               	rlf	___ftdiv@f1+2,f
 13549  0F2E  0B89               	decfsz	9,f
 13550  0F2F  2F2B               	goto	u4665
 13551  0F30  3001               	movlw	1
 13552  0F31  02B8               	subwf	___ftdiv@cntr,f
 13553  0F32  1D03               	btfss	3,2
 13554  0F33  2F11               	goto	l5963
 13555  0F34  0839               	movf	___ftdiv@f3,w
 13556  0F35  00A0               	movwf	___ftpack@arg
 13557  0F36  083A               	movf	___ftdiv@f3+1,w
 13558  0F37  00A1               	movwf	___ftpack@arg+1
 13559  0F38  083B               	movf	___ftdiv@f3+2,w
 13560  0F39  00A2               	movwf	___ftpack@arg+2
 13561  0F3A  083C               	movf	___ftdiv@exp,w
 13562  0F3B  00B4               	movwf	??___ftdiv
 13563  0F3C  0834               	movf	??___ftdiv,w
 13564  0F3D  00A3               	movwf	___ftpack@exp
 13565  0F3E  083D               	movf	___ftdiv@sign,w
 13566  0F3F  00B5               	movwf	??___ftdiv+1
 13567  0F40  0835               	movf	??___ftdiv+1,w
 13568  0F41  00A4               	movwf	___ftpack@sign
 13569  0F42  3189  2183         	fcall	___ftpack
 13570  0F44  0020               	movlb	0	; select bank0
 13571  0F45  0820               	movf	?___ftpack,w
 13572  0F46  00AE               	movwf	?___ftdiv
 13573  0F47  0821               	movf	?___ftpack+1,w
 13574  0F48  00AF               	movwf	?___ftdiv+1
 13575  0F49  0822               	movf	?___ftpack+2,w
 13576  0F4A  00B0               	movwf	?___ftdiv+2
 13577  0F4B  0008               	return
 13578  0F4C                     __end_of___ftdiv:	
 13579                           
 13580                           	psect	text79
 13581  044A                     __ptext79:	
 13582 ;; *************** function ___ftadd *****************
 13583 ;; Defined at:
 13584 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 13585 ;; Parameters:    Size  Location     Type
 13586 ;;  f1              3   33[BANK0 ] float 
 13587 ;;  f2              3   36[BANK0 ] float 
 13588 ;; Auto vars:     Size  Location     Type
 13589 ;;  exp1            1   45[BANK0 ] unsigned char 
 13590 ;;  exp2            1   44[BANK0 ] unsigned char 
 13591 ;;  sign            1   43[BANK0 ] unsigned char 
 13592 ;; Return value:  Size  Location     Type
 13593 ;;                  3   33[BANK0 ] float 
 13594 ;; Registers used:
 13595 ;;		wreg, status,2, status,0, pclath, cstack
 13596 ;; Tracked objects:
 13597 ;;		On entry : 0/0
 13598 ;;		On exit  : 0/0
 13599 ;;		Unchanged: 0/0
 13600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13601 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13602 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13603 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13604 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13605 ;;Total ram usage:       13 bytes
 13606 ;; Hardware stack levels used:    1
 13607 ;; Hardware stack levels required when called:    6
 13608 ;; This function calls:
 13609 ;;		___ftpack
 13610 ;; This function is called by:
 13611 ;;		_getPercentValue
 13612 ;;		_setPercentValue
 13613 ;; This function uses a non-reentrant model
 13614 ;;
 13615                           
 13616                           
 13617                           ;psect for function ___ftadd
 13618  044A                     ___ftadd:	
 13619                           
 13620                           ;incstack = 0
 13621                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 13622  044A  0020               	movlb	0	; select bank0
 13623  044B  0841               	movf	___ftadd@f1,w
 13624  044C  00C7               	movwf	??___ftadd
 13625  044D  0842               	movf	___ftadd@f1+1,w
 13626  044E  00C8               	movwf	??___ftadd+1
 13627  044F  0843               	movf	___ftadd@f1+2,w
 13628  0450  00C9               	movwf	??___ftadd+2
 13629  0451  1003               	clrc
 13630  0452  0D48               	rlf	??___ftadd+1,w
 13631  0453  0D49               	rlf	??___ftadd+2,w
 13632  0454  00CA               	movwf	??___ftadd+3
 13633  0455  084A               	movf	??___ftadd+3,w
 13634  0456  00CD               	movwf	___ftadd@exp1
 13635  0457  0844               	movf	___ftadd@f2,w
 13636  0458  00C7               	movwf	??___ftadd
 13637  0459  0845               	movf	___ftadd@f2+1,w
 13638  045A  00C8               	movwf	??___ftadd+1
 13639  045B  0846               	movf	___ftadd@f2+2,w
 13640  045C  00C9               	movwf	??___ftadd+2
 13641  045D  1003               	clrc
 13642  045E  0D48               	rlf	??___ftadd+1,w
 13643  045F  0D49               	rlf	??___ftadd+2,w
 13644  0460  00CA               	movwf	??___ftadd+3
 13645  0461  084A               	movf	??___ftadd+3,w
 13646  0462  00CC               	movwf	___ftadd@exp2
 13647  0463  084D               	movf	___ftadd@exp1,w
 13648  0464  1903               	btfsc	3,2
 13649  0465  2C72               	goto	l5873
 13650  0466  084C               	movf	___ftadd@exp2,w
 13651  0467  024D               	subwf	___ftadd@exp1,w
 13652  0468  1803               	skipnc
 13653  0469  2C79               	goto	l5877
 13654  046A  034D               	decf	___ftadd@exp1,w
 13655  046B  3AFF               	xorlw	255
 13656  046C  074C               	addwf	___ftadd@exp2,w
 13657  046D  00C7               	movwf	??___ftadd
 13658  046E  3019               	movlw	25
 13659  046F  0247               	subwf	??___ftadd,w
 13660  0470  1C03               	skipc
 13661  0471  2C79               	goto	l5877
 13662  0472                     l5873:	
 13663  0472  0844               	movf	___ftadd@f2,w
 13664  0473  00C1               	movwf	?___ftadd
 13665  0474  0845               	movf	___ftadd@f2+1,w
 13666  0475  00C2               	movwf	?___ftadd+1
 13667  0476  0846               	movf	___ftadd@f2+2,w
 13668  0477  00C3               	movwf	?___ftadd+2
 13669  0478  0008               	return
 13670  0479                     l5877:	
 13671  0479  084C               	movf	___ftadd@exp2,w
 13672  047A  1903               	btfsc	3,2
 13673  047B  0008               	return
 13674  047C  084D               	movf	___ftadd@exp1,w
 13675  047D  024C               	subwf	___ftadd@exp2,w
 13676  047E  1803               	skipnc
 13677  047F  2C88               	goto	l5883
 13678  0480  034C               	decf	___ftadd@exp2,w
 13679  0481  3AFF               	xorlw	255
 13680  0482  074D               	addwf	___ftadd@exp1,w
 13681  0483  00C7               	movwf	??___ftadd
 13682  0484  3019               	movlw	25
 13683  0485  0247               	subwf	??___ftadd,w
 13684  0486  1803               	btfsc	3,0
 13685  0487  0008               	return
 13686  0488                     l5883:	
 13687  0488  3006               	movlw	6
 13688  0489  00C7               	movwf	??___ftadd
 13689  048A  0847               	movf	??___ftadd,w
 13690  048B  00CB               	movwf	___ftadd@sign
 13691  048C  1BC3               	btfsc	___ftadd@f1+2,7
 13692  048D  17CB               	bsf	___ftadd@sign,7
 13693  048E  1BC6               	btfsc	___ftadd@f2+2,7
 13694  048F  174B               	bsf	___ftadd@sign,6
 13695  0490  17C2               	bsf	___ftadd@f1+1,7
 13696  0491  30FF               	movlw	255
 13697  0492  05C1               	andwf	___ftadd@f1,f
 13698  0493  30FF               	movlw	255
 13699  0494  05C2               	andwf	___ftadd@f1+1,f
 13700  0495  3000               	movlw	0
 13701  0496  05C3               	andwf	___ftadd@f1+2,f
 13702  0497  17C5               	bsf	___ftadd@f2+1,7
 13703  0498  30FF               	movlw	255
 13704  0499  05C4               	andwf	___ftadd@f2,f
 13705  049A  30FF               	movlw	255
 13706  049B  05C5               	andwf	___ftadd@f2+1,f
 13707  049C  3000               	movlw	0
 13708  049D  05C6               	andwf	___ftadd@f2+2,f
 13709  049E  084C               	movf	___ftadd@exp2,w
 13710  049F  024D               	subwf	___ftadd@exp1,w
 13711  04A0  1803               	skipnc
 13712  04A1  2CC4               	goto	l5905
 13713  04A2                     l5895:	
 13714  04A2  3001               	movlw	1
 13715  04A3                     u4465:	
 13716  04A3  35C4               	lslf	___ftadd@f2,f
 13717  04A4  0DC5               	rlf	___ftadd@f2+1,f
 13718  04A5  0DC6               	rlf	___ftadd@f2+2,f
 13719  04A6  0B89               	decfsz	9,f
 13720  04A7  2CA3               	goto	u4465
 13721  04A8  3001               	movlw	1
 13722  04A9  02CC               	subwf	___ftadd@exp2,f
 13723  04AA  084C               	movf	___ftadd@exp2,w
 13724  04AB  064D               	xorwf	___ftadd@exp1,w
 13725  04AC  1903               	skipnz
 13726  04AD  2CBF               	goto	l5903
 13727  04AE  3001               	movlw	1
 13728  04AF  02CB               	subwf	___ftadd@sign,f
 13729  04B0  084B               	movf	___ftadd@sign,w
 13730  04B1  3907               	andlw	7
 13731  04B2  1903               	btfsc	3,2
 13732  04B3  2CBF               	goto	l5903
 13733  04B4  2CA2               	goto	l5895
 13734  04B5                     l5901:	
 13735  04B5  3001               	movlw	1
 13736  04B6                     u4495:	
 13737  04B6  36C3               	lsrf	___ftadd@f1+2,f
 13738  04B7  0CC2               	rrf	___ftadd@f1+1,f
 13739  04B8  0CC1               	rrf	___ftadd@f1,f
 13740  04B9  0B89               	decfsz	9,f
 13741  04BA  2CB6               	goto	u4495
 13742  04BB  3001               	movlw	1
 13743  04BC  00C7               	movwf	??___ftadd
 13744  04BD  0847               	movf	??___ftadd,w
 13745  04BE  07CD               	addwf	___ftadd@exp1,f
 13746  04BF                     l5903:	
 13747  04BF  084D               	movf	___ftadd@exp1,w
 13748  04C0  064C               	xorwf	___ftadd@exp2,w
 13749  04C1  1903               	btfsc	3,2
 13750  04C2  2CE9               	goto	l3012
 13751  04C3  2CB5               	goto	l5901
 13752  04C4                     l5905:	
 13753  04C4  084D               	movf	___ftadd@exp1,w
 13754  04C5  024C               	subwf	___ftadd@exp2,w
 13755  04C6  1803               	skipnc
 13756  04C7  2CE9               	goto	l3012
 13757  04C8                     l5907:	
 13758  04C8  3001               	movlw	1
 13759  04C9                     u4525:	
 13760  04C9  35C1               	lslf	___ftadd@f1,f
 13761  04CA  0DC2               	rlf	___ftadd@f1+1,f
 13762  04CB  0DC3               	rlf	___ftadd@f1+2,f
 13763  04CC  0B89               	decfsz	9,f
 13764  04CD  2CC9               	goto	u4525
 13765  04CE  3001               	movlw	1
 13766  04CF  02CD               	subwf	___ftadd@exp1,f
 13767  04D0  084C               	movf	___ftadd@exp2,w
 13768  04D1  064D               	xorwf	___ftadd@exp1,w
 13769  04D2  1903               	skipnz
 13770  04D3  2CE5               	goto	l5915
 13771  04D4  3001               	movlw	1
 13772  04D5  02CB               	subwf	___ftadd@sign,f
 13773  04D6  084B               	movf	___ftadd@sign,w
 13774  04D7  3907               	andlw	7
 13775  04D8  1903               	btfsc	3,2
 13776  04D9  2CE5               	goto	l5915
 13777  04DA  2CC8               	goto	l5907
 13778  04DB                     l5913:	
 13779  04DB  3001               	movlw	1
 13780  04DC                     u4555:	
 13781  04DC  36C6               	lsrf	___ftadd@f2+2,f
 13782  04DD  0CC5               	rrf	___ftadd@f2+1,f
 13783  04DE  0CC4               	rrf	___ftadd@f2,f
 13784  04DF  0B89               	decfsz	9,f
 13785  04E0  2CDC               	goto	u4555
 13786  04E1  3001               	movlw	1
 13787  04E2  00C7               	movwf	??___ftadd
 13788  04E3  0847               	movf	??___ftadd,w
 13789  04E4  07CC               	addwf	___ftadd@exp2,f
 13790  04E5                     l5915:	
 13791  04E5  084D               	movf	___ftadd@exp1,w
 13792  04E6  064C               	xorwf	___ftadd@exp2,w
 13793  04E7  1D03               	skipz
 13794  04E8  2CDB               	goto	l5913
 13795  04E9                     l3012:	
 13796  04E9  1FCB               	btfss	___ftadd@sign,7
 13797  04EA  2CFB               	goto	l5919
 13798  04EB  30FF               	movlw	255
 13799  04EC  06C1               	xorwf	___ftadd@f1,f
 13800  04ED  30FF               	movlw	255
 13801  04EE  06C2               	xorwf	___ftadd@f1+1,f
 13802  04EF  30FF               	movlw	255
 13803  04F0  06C3               	xorwf	___ftadd@f1+2,f
 13804  04F1  3001               	movlw	1
 13805  04F2  07C1               	addwf	___ftadd@f1,f
 13806  04F3  3000               	movlw	0
 13807  04F4  1803               	skipnc
 13808  04F5  3001               	movlw	1
 13809  04F6  07C2               	addwf	___ftadd@f1+1,f
 13810  04F7  3000               	movlw	0
 13811  04F8  1803               	skipnc
 13812  04F9  3001               	movlw	1
 13813  04FA  07C3               	addwf	___ftadd@f1+2,f
 13814  04FB                     l5919:	
 13815  04FB  1F4B               	btfss	___ftadd@sign,6
 13816  04FC  2D0D               	goto	l5923
 13817  04FD  30FF               	movlw	255
 13818  04FE  06C4               	xorwf	___ftadd@f2,f
 13819  04FF  30FF               	movlw	255
 13820  0500  06C5               	xorwf	___ftadd@f2+1,f
 13821  0501  30FF               	movlw	255
 13822  0502  06C6               	xorwf	___ftadd@f2+2,f
 13823  0503  3001               	movlw	1
 13824  0504  07C4               	addwf	___ftadd@f2,f
 13825  0505  3000               	movlw	0
 13826  0506  1803               	skipnc
 13827  0507  3001               	movlw	1
 13828  0508  07C5               	addwf	___ftadd@f2+1,f
 13829  0509  3000               	movlw	0
 13830  050A  1803               	skipnc
 13831  050B  3001               	movlw	1
 13832  050C  07C6               	addwf	___ftadd@f2+2,f
 13833  050D                     l5923:	
 13834  050D  01CB               	clrf	___ftadd@sign
 13835  050E  0841               	movf	___ftadd@f1,w
 13836  050F  07C4               	addwf	___ftadd@f2,f
 13837  0510  0842               	movf	___ftadd@f1+1,w
 13838  0511  3DC5               	addwfc	___ftadd@f2+1,f
 13839  0512  0843               	movf	___ftadd@f1+2,w
 13840  0513  3DC6               	addwfc	___ftadd@f2+2,f
 13841  0514  1FC6               	btfss	___ftadd@f2+2,7
 13842  0515  2D28               	goto	l5933
 13843  0516  30FF               	movlw	255
 13844  0517  06C4               	xorwf	___ftadd@f2,f
 13845  0518  30FF               	movlw	255
 13846  0519  06C5               	xorwf	___ftadd@f2+1,f
 13847  051A  30FF               	movlw	255
 13848  051B  06C6               	xorwf	___ftadd@f2+2,f
 13849  051C  3001               	movlw	1
 13850  051D  07C4               	addwf	___ftadd@f2,f
 13851  051E  3000               	movlw	0
 13852  051F  1803               	skipnc
 13853  0520  3001               	movlw	1
 13854  0521  07C5               	addwf	___ftadd@f2+1,f
 13855  0522  3000               	movlw	0
 13856  0523  1803               	skipnc
 13857  0524  3001               	movlw	1
 13858  0525  07C6               	addwf	___ftadd@f2+2,f
 13859  0526  01CB               	clrf	___ftadd@sign
 13860  0527  0ACB               	incf	___ftadd@sign,f
 13861  0528                     l5933:	
 13862  0528  0844               	movf	___ftadd@f2,w
 13863  0529  00A0               	movwf	___ftpack@arg
 13864  052A  0845               	movf	___ftadd@f2+1,w
 13865  052B  00A1               	movwf	___ftpack@arg+1
 13866  052C  0846               	movf	___ftadd@f2+2,w
 13867  052D  00A2               	movwf	___ftpack@arg+2
 13868  052E  084D               	movf	___ftadd@exp1,w
 13869  052F  00C7               	movwf	??___ftadd
 13870  0530  0847               	movf	??___ftadd,w
 13871  0531  00A3               	movwf	___ftpack@exp
 13872  0532  084B               	movf	___ftadd@sign,w
 13873  0533  00C8               	movwf	??___ftadd+1
 13874  0534  0848               	movf	??___ftadd+1,w
 13875  0535  00A4               	movwf	___ftpack@sign
 13876  0536  3189  2183         	fcall	___ftpack
 13877  0538  0020               	movlb	0	; select bank0
 13878  0539  0820               	movf	?___ftpack,w
 13879  053A  00C1               	movwf	?___ftadd
 13880  053B  0821               	movf	?___ftpack+1,w
 13881  053C  00C2               	movwf	?___ftadd+1
 13882  053D  0822               	movf	?___ftpack+2,w
 13883  053E  00C3               	movwf	?___ftadd+2
 13884  053F  0008               	return
 13885  0540                     __end_of___ftadd:	
 13886                           
 13887                           	psect	text80
 13888  109C                     __ptext80:	
 13889 ;; *************** function ___awtoft *****************
 13890 ;; Defined at:
 13891 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 13892 ;; Parameters:    Size  Location     Type
 13893 ;;  c               2    8[BANK0 ] int 
 13894 ;; Auto vars:     Size  Location     Type
 13895 ;;  sign            1   13[BANK0 ] unsigned char 
 13896 ;; Return value:  Size  Location     Type
 13897 ;;                  3    8[BANK0 ] float 
 13898 ;; Registers used:
 13899 ;;		wreg, status,2, status,0, pclath, cstack
 13900 ;; Tracked objects:
 13901 ;;		On entry : 0/0
 13902 ;;		On exit  : 0/0
 13903 ;;		Unchanged: 0/0
 13904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13905 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13906 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13907 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13908 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13909 ;;Total ram usage:        6 bytes
 13910 ;; Hardware stack levels used:    1
 13911 ;; Hardware stack levels required when called:    6
 13912 ;; This function calls:
 13913 ;;		___ftpack
 13914 ;; This function is called by:
 13915 ;;		_getPercentValue
 13916 ;;		_setPercentValue
 13917 ;; This function uses a non-reentrant model
 13918 ;;
 13919                           
 13920                           
 13921                           ;psect for function ___awtoft
 13922  109C                     ___awtoft:	
 13923                           
 13924                           ;incstack = 0
 13925                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13926  109C  0020               	movlb	0	; select bank0
 13927  109D  01AD               	clrf	___awtoft@sign
 13928  109E  1FA9               	btfss	___awtoft@c+1,7
 13929  109F  28A7               	goto	l5861
 13930  10A0  09A8               	comf	___awtoft@c,f
 13931  10A1  09A9               	comf	___awtoft@c+1,f
 13932  10A2  0AA8               	incf	___awtoft@c,f
 13933  10A3  1903               	skipnz
 13934  10A4  0AA9               	incf	___awtoft@c+1,f
 13935  10A5  01AD               	clrf	___awtoft@sign
 13936  10A6  0AAD               	incf	___awtoft@sign,f
 13937  10A7                     l5861:	
 13938  10A7  0828               	movf	___awtoft@c,w
 13939  10A8  00A0               	movwf	___ftpack@arg
 13940  10A9  0829               	movf	___awtoft@c+1,w
 13941  10AA  00A1               	movwf	___ftpack@arg+1
 13942  10AB  01A2               	clrf	___ftpack@arg+2
 13943  10AC  308E               	movlw	142
 13944  10AD  00AB               	movwf	??___awtoft
 13945  10AE  082B               	movf	??___awtoft,w
 13946  10AF  00A3               	movwf	___ftpack@exp
 13947  10B0  082D               	movf	___awtoft@sign,w
 13948  10B1  00AC               	movwf	??___awtoft+1
 13949  10B2  082C               	movf	??___awtoft+1,w
 13950  10B3  00A4               	movwf	___ftpack@sign
 13951  10B4  3189  2183         	fcall	___ftpack
 13952  10B6  0020               	movlb	0	; select bank0
 13953  10B7  0820               	movf	?___ftpack,w
 13954  10B8  00A8               	movwf	?___awtoft
 13955  10B9  0821               	movf	?___ftpack+1,w
 13956  10BA  00A9               	movwf	?___awtoft+1
 13957  10BB  0822               	movf	?___ftpack+2,w
 13958  10BC  00AA               	movwf	?___awtoft+2
 13959  10BD  0008               	return
 13960  10BE                     __end_of___awtoft:	
 13961                           
 13962                           	psect	text81
 13963  0983                     __ptext81:	
 13964 ;; *************** function ___ftpack *****************
 13965 ;; Defined at:
 13966 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 13967 ;; Parameters:    Size  Location     Type
 13968 ;;  arg             3    0[BANK0 ] unsigned um
 13969 ;;  exp             1    3[BANK0 ] unsigned char 
 13970 ;;  sign            1    4[BANK0 ] unsigned char 
 13971 ;; Auto vars:     Size  Location     Type
 13972 ;;		None
 13973 ;; Return value:  Size  Location     Type
 13974 ;;                  3    0[BANK0 ] float 
 13975 ;; Registers used:
 13976 ;;		wreg, status,2, status,0
 13977 ;; Tracked objects:
 13978 ;;		On entry : 0/0
 13979 ;;		On exit  : 0/0
 13980 ;;		Unchanged: 0/0
 13981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13982 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13984 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13985 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13986 ;;Total ram usage:        8 bytes
 13987 ;; Hardware stack levels used:    1
 13988 ;; Hardware stack levels required when called:    5
 13989 ;; This function calls:
 13990 ;;		Nothing
 13991 ;; This function is called by:
 13992 ;;		___awtoft
 13993 ;;		___ftadd
 13994 ;;		___ftdiv
 13995 ;;		___ftmul
 13996 ;; This function uses a non-reentrant model
 13997 ;;
 13998                           
 13999                           
 14000                           ;psect for function ___ftpack
 14001  0983                     ___ftpack:	
 14002                           
 14003                           ;incstack = 0
 14004                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14005  0983  0020               	movlb	0	; select bank0
 14006  0984  0823               	movf	___ftpack@exp,w
 14007  0985  1903               	btfsc	3,2
 14008  0986  298C               	goto	l5811
 14009  0987  0822               	movf	___ftpack@arg+2,w
 14010  0988  0421               	iorwf	___ftpack@arg+1,w
 14011  0989  0420               	iorwf	___ftpack@arg,w
 14012  098A  1D03               	skipz
 14013  098B  299D               	goto	l5817
 14014  098C                     l5811:	
 14015  098C  3000               	movlw	0
 14016  098D  00A0               	movwf	?___ftpack
 14017  098E  3000               	movlw	0
 14018  098F  00A1               	movwf	?___ftpack+1
 14019  0990  3000               	movlw	0
 14020  0991  00A2               	movwf	?___ftpack+2
 14021  0992  0008               	return
 14022  0993                     l5815:	
 14023  0993  3001               	movlw	1
 14024  0994  00A5               	movwf	??___ftpack
 14025  0995  0825               	movf	??___ftpack,w
 14026  0996  07A3               	addwf	___ftpack@exp,f
 14027  0997  3001               	movlw	1
 14028  0998                     u4255:	
 14029  0998  36A2               	lsrf	___ftpack@arg+2,f
 14030  0999  0CA1               	rrf	___ftpack@arg+1,f
 14031  099A  0CA0               	rrf	___ftpack@arg,f
 14032  099B  0B89               	decfsz	9,f
 14033  099C  2998               	goto	u4255
 14034  099D                     l5817:	
 14035  099D  30FE               	movlw	254
 14036  099E  0522               	andwf	___ftpack@arg+2,w
 14037  099F  1903               	btfsc	3,2
 14038  09A0  29B6               	goto	l2983
 14039  09A1  2993               	goto	l5815
 14040  09A2                     l5819:	
 14041  09A2  3001               	movlw	1
 14042  09A3  00A5               	movwf	??___ftpack
 14043  09A4  0825               	movf	??___ftpack,w
 14044  09A5  07A3               	addwf	___ftpack@exp,f
 14045  09A6  3001               	movlw	1
 14046  09A7  07A0               	addwf	___ftpack@arg,f
 14047  09A8  3000               	movlw	0
 14048  09A9  1803               	skipnc
 14049  09AA  3001               	movlw	1
 14050  09AB  07A1               	addwf	___ftpack@arg+1,f
 14051  09AC  3000               	movlw	0
 14052  09AD  1803               	skipnc
 14053  09AE  3001               	movlw	1
 14054  09AF  07A2               	addwf	___ftpack@arg+2,f
 14055  09B0  3001               	movlw	1
 14056  09B1                     u4275:	
 14057  09B1  36A2               	lsrf	___ftpack@arg+2,f
 14058  09B2  0CA1               	rrf	___ftpack@arg+1,f
 14059  09B3  0CA0               	rrf	___ftpack@arg,f
 14060  09B4  0B89               	decfsz	9,f
 14061  09B5  29B1               	goto	u4275
 14062  09B6                     l2983:	
 14063  09B6  30FF               	movlw	255
 14064  09B7  0522               	andwf	___ftpack@arg+2,w
 14065  09B8  1903               	btfsc	3,2
 14066  09B9  29C3               	goto	l5827
 14067  09BA  29A2               	goto	l5819
 14068  09BB                     l5825:	
 14069  09BB  3001               	movlw	1
 14070  09BC  02A3               	subwf	___ftpack@exp,f
 14071  09BD  3001               	movlw	1
 14072  09BE                     u4295:	
 14073  09BE  35A0               	lslf	___ftpack@arg,f
 14074  09BF  0DA1               	rlf	___ftpack@arg+1,f
 14075  09C0  0DA2               	rlf	___ftpack@arg+2,f
 14076  09C1  0B89               	decfsz	9,f
 14077  09C2  29BE               	goto	u4295
 14078  09C3                     l5827:	
 14079  09C3  1FA1               	btfss	___ftpack@arg+1,7
 14080  09C4  29BB               	goto	l5825
 14081  09C5  1823               	btfsc	___ftpack@exp,0
 14082  09C6  29CD               	goto	l2989
 14083  09C7  30FF               	movlw	255
 14084  09C8  05A0               	andwf	___ftpack@arg,f
 14085  09C9  307F               	movlw	127
 14086  09CA  05A1               	andwf	___ftpack@arg+1,f
 14087  09CB  30FF               	movlw	255
 14088  09CC  05A2               	andwf	___ftpack@arg+2,f
 14089  09CD                     l2989:	
 14090  09CD  1003               	clrc
 14091  09CE  0CA3               	rrf	___ftpack@exp,f
 14092  09CF  0823               	movf	___ftpack@exp,w
 14093  09D0  00A5               	movwf	??___ftpack
 14094  09D1  01A6               	clrf	??___ftpack+1
 14095  09D2  01A7               	clrf	??___ftpack+2
 14096  09D3  3010               	movlw	16
 14097  09D4                     u4325:	
 14098  09D4  35A5               	lslf	??___ftpack,f
 14099  09D5  0DA6               	rlf	??___ftpack+1,f
 14100  09D6  0DA7               	rlf	??___ftpack+2,f
 14101  09D7  0B89               	decfsz	9,f
 14102  09D8  29D4               	goto	u4325
 14103  09D9  0825               	movf	??___ftpack,w
 14104  09DA  04A0               	iorwf	___ftpack@arg,f
 14105  09DB  0826               	movf	??___ftpack+1,w
 14106  09DC  04A1               	iorwf	___ftpack@arg+1,f
 14107  09DD  0827               	movf	??___ftpack+2,w
 14108  09DE  04A2               	iorwf	___ftpack@arg+2,f
 14109  09DF  0824               	movf	___ftpack@sign,w
 14110  09E0  1903               	btfsc	3,2
 14111  09E1  0008               	return
 14112  09E2  17A2               	bsf	___ftpack@arg+2,7
 14113  09E3  0008               	return
 14114  09E4                     __end_of___ftpack:	
 14115                           
 14116                           	psect	text82
 14117  1652                     __ptext82:	
 14118 ;; *************** function _setLED *****************
 14119 ;; Defined at:
 14120 ;;		line 76 in file "../src/LED_B1.c"
 14121 ;; Parameters:    Size  Location     Type
 14122 ;;  led             1    wreg     unsigned char 
 14123 ;;  command         1    2[BANK0 ] unsigned char 
 14124 ;; Auto vars:     Size  Location     Type
 14125 ;;  led             1    3[BANK0 ] unsigned char 
 14126 ;; Return value:  Size  Location     Type
 14127 ;;		None               void
 14128 ;; Registers used:
 14129 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14130 ;; Tracked objects:
 14131 ;;		On entry : 0/0
 14132 ;;		On exit  : 0/0
 14133 ;;		Unchanged: 0/0
 14134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14135 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14136 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14138 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14139 ;;Total ram usage:        2 bytes
 14140 ;; Hardware stack levels used:    1
 14141 ;; Hardware stack levels required when called:    6
 14142 ;; This function calls:
 14143 ;;		_LedPointSelect
 14144 ;; This function is called by:
 14145 ;;		_setDimmerLights
 14146 ;;		_setLED_Initialization
 14147 ;;		_setSw_Initialization
 14148 ;;		_setMain_Exception
 14149 ;; This function uses a non-reentrant model
 14150 ;;
 14151                           
 14152                           
 14153                           ;psect for function _setLED
 14154  1652                     _setLED:	
 14155                           
 14156                           ;incstack = 0
 14157                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14158                           ;setLED@led stored from wreg
 14159  1652  0020               	movlb	0	; select bank0
 14160  1653  00A3               	movwf	setLED@led
 14161                           
 14162                           ;LED_B1.c: 77: LedPointSelect(led);
 14163  1654  0823               	movf	setLED@led,w
 14164  1655  319F  270D  3196   	fcall	_LedPointSelect
 14165                           
 14166                           ;LED_B1.c: 78: if (command == 0) {
 14167  1658  0020               	movlb	0	; select bank0
 14168  1659  08A2               	movf	setLED@command,f
 14169  165A  1D03               	skipz
 14170  165B  2E69               	goto	l6541
 14171                           
 14172                           ;LED_B1.c: 80: if (led == 1) {
 14173  165C  0823               	movf	setLED@led,w
 14174  165D  3A01               	xorlw	1
 14175  165E  1D03               	skipz
 14176  165F  2E61               	goto	l6533
 14177                           
 14178                           ;LED_B1.c: 84: RA3 = 1;
 14179  1660  158C               	bsf	12,3	;volatile
 14180  1661                     l6533:	
 14181                           
 14182                           ;LED_B1.c: 86: }
 14183                           ;LED_B1.c: 89: if (led == 2) {
 14184  1661  0823               	movf	setLED@led,w
 14185  1662  3A02               	xorlw	2
 14186  1663  1903               	btfsc	3,2
 14187                           
 14188                           ;LED_B1.c: 93: RC7 = 1;
 14189  1664  178E               	bsf	14,7	;volatile
 14190                           
 14191                           ;LED_B1.c: 95: }
 14192                           ;LED_B1.c: 107: if (led == 99) {
 14193  1665  0823               	movf	setLED@led,w
 14194  1666  3A63               	xorlw	99
 14195  1667  1903               	btfsc	3,2
 14196                           
 14197                           ;LED_B1.c: 111: RB5 = 1;
 14198  1668  168D               	bsf	13,5	;volatile
 14199  1669                     l6541:	
 14200                           
 14201                           ;LED_B1.c: 113: }
 14202                           ;LED_B1.c: 115: }
 14203                           ;LED_B1.c: 116: if (command == 1) {
 14204  1669  0822               	movf	setLED@command,w
 14205  166A  3A01               	xorlw	1
 14206  166B  1D03               	skipz
 14207  166C  2E7A               	goto	l6555
 14208                           
 14209                           ;LED_B1.c: 118: if (led == 1) {
 14210  166D  0823               	movf	setLED@led,w
 14211  166E  3A01               	xorlw	1
 14212  166F  1D03               	skipz
 14213  1670  2E72               	goto	l6547
 14214                           
 14215                           ;LED_B1.c: 122: RA3 = 0;
 14216  1671  118C               	bcf	12,3	;volatile
 14217  1672                     l6547:	
 14218                           
 14219                           ;LED_B1.c: 124: }
 14220                           ;LED_B1.c: 127: if (led == 2) {
 14221  1672  0823               	movf	setLED@led,w
 14222  1673  3A02               	xorlw	2
 14223  1674  1903               	btfsc	3,2
 14224                           
 14225                           ;LED_B1.c: 131: RC7 = 0;
 14226  1675  138E               	bcf	14,7	;volatile
 14227                           
 14228                           ;LED_B1.c: 133: }
 14229                           ;LED_B1.c: 145: if (led == 99) {
 14230  1676  0823               	movf	setLED@led,w
 14231  1677  3A63               	xorlw	99
 14232  1678  1903               	btfsc	3,2
 14233                           
 14234                           ;LED_B1.c: 149: RB5 = 0;
 14235  1679  128D               	bcf	13,5	;volatile
 14236  167A                     l6555:	
 14237                           
 14238                           ;LED_B1.c: 151: }
 14239                           ;LED_B1.c: 153: }
 14240                           ;LED_B1.c: 154: if (command == 10) {
 14241  167A  0822               	movf	setLED@command,w
 14242  167B  3A0A               	xorlw	10
 14243  167C  1D03               	skipz
 14244  167D  2E98               	goto	l6571
 14245                           
 14246                           ;LED_B1.c: 155: LED->GO = 0;
 14247  167E  087A               	movf	_LED,w
 14248  167F  0086               	movwf	6
 14249  1680  3001               	movlw	1	; select bank2/3
 14250  1681  0087               	movwf	7
 14251  1682  1081               	bcf	1,1
 14252                           
 14253                           ;LED_B1.c: 156: LED->Time = 0;
 14254  1683  0A7A               	incf	_LED,w
 14255  1684  0086               	movwf	6
 14256  1685  3001               	movlw	1	; select bank2/3
 14257  1686  0087               	movwf	7
 14258  1687  3000               	movlw	0
 14259  1688  3FC0               	movwi [0]fsr1
 14260  1689  3FC1               	movwi [1]fsr1
 14261                           
 14262                           ;LED_B1.c: 158: if (led == 1) {
 14263  168A  0823               	movf	setLED@led,w
 14264  168B  3A01               	xorlw	1
 14265  168C  1D03               	skipz
 14266  168D  2E90               	goto	l6563
 14267                           
 14268                           ;LED_B1.c: 162: RA3 = 1;
 14269  168E  158C               	bsf	12,3	;volatile
 14270                           
 14271                           ;LED_B1.c: 164: }
 14272  168F  2E94               	goto	l6567
 14273  1690                     l6563:	
 14274                           
 14275                           ;LED_B1.c: 167: else if (led == 2) {
 14276  1690  0823               	movf	setLED@led,w
 14277  1691  3A02               	xorlw	2
 14278  1692  1903               	btfsc	3,2
 14279                           
 14280                           ;LED_B1.c: 171: RC7 = 1;
 14281  1693  178E               	bsf	14,7	;volatile
 14282  1694                     l6567:	
 14283                           
 14284                           ;LED_B1.c: 173: }
 14285                           ;LED_B1.c: 185: if (led == 99) {
 14286  1694  0823               	movf	setLED@led,w
 14287  1695  3A63               	xorlw	99
 14288  1696  1903               	btfsc	3,2
 14289                           
 14290                           ;LED_B1.c: 189: RB5 = 1;
 14291  1697  168D               	bsf	13,5	;volatile
 14292  1698                     l6571:	
 14293                           
 14294                           ;LED_B1.c: 191: }
 14295                           ;LED_B1.c: 193: }
 14296                           ;LED_B1.c: 194: if (command == 11) {
 14297  1698  0822               	movf	setLED@command,w
 14298  1699  3A0B               	xorlw	11
 14299  169A  1D03               	skipz
 14300  169B  0008               	return
 14301                           
 14302                           ;LED_B1.c: 195: LED->GO = 1;
 14303  169C  087A               	movf	_LED,w
 14304  169D  0086               	movwf	6
 14305  169E  3001               	movlw	1	; select bank2/3
 14306  169F  0087               	movwf	7
 14307  16A0  1481               	bsf	1,1
 14308  16A1  0008               	return
 14309  16A2                     __end_of_setLED:	
 14310                           
 14311                           	psect	text83
 14312  1F0D                     __ptext83:	
 14313 ;; *************** function _LedPointSelect *****************
 14314 ;; Defined at:
 14315 ;;		line 7 in file "../src/LED_B1.c"
 14316 ;; Parameters:    Size  Location     Type
 14317 ;;  led             1    wreg     unsigned char 
 14318 ;; Auto vars:     Size  Location     Type
 14319 ;;  led             1    1[BANK0 ] unsigned char 
 14320 ;; Return value:  Size  Location     Type
 14321 ;;		None               void
 14322 ;; Registers used:
 14323 ;;		wreg
 14324 ;; Tracked objects:
 14325 ;;		On entry : 0/0
 14326 ;;		On exit  : 0/0
 14327 ;;		Unchanged: 0/0
 14328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14330 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14331 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14332 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14333 ;;Total ram usage:        2 bytes
 14334 ;; Hardware stack levels used:    1
 14335 ;; Hardware stack levels required when called:    5
 14336 ;; This function calls:
 14337 ;;		Nothing
 14338 ;; This function is called by:
 14339 ;;		_setLED_Initialization
 14340 ;;		_setLED
 14341 ;;		_setLED_Main
 14342 ;; This function uses a non-reentrant model
 14343 ;;
 14344                           
 14345                           
 14346                           ;psect for function _LedPointSelect
 14347  1F0D                     _LedPointSelect:	
 14348                           
 14349                           ;incstack = 0
 14350                           ; Regs used in _LedPointSelect: [wreg]
 14351                           ;LedPointSelect@led stored from wreg
 14352  1F0D  0020               	movlb	0	; select bank0
 14353  1F0E  00A1               	movwf	LedPointSelect@led
 14354                           
 14355                           ;LED_B1.c: 9: if (led == 1) {
 14356  1F0F  0821               	movf	LedPointSelect@led,w
 14357  1F10  3A01               	xorlw	1
 14358  1F11  1D03               	skipz
 14359  1F12  2F17               	goto	l998
 14360                           
 14361                           ;LED_B1.c: 10: LED = &VarLED1;
 14362  1F13  30DE               	movlw	_VarLED1& (0+255)
 14363  1F14  00A0               	movwf	??_LedPointSelect
 14364  1F15  0820               	movf	??_LedPointSelect,w
 14365  1F16  00FA               	movwf	_LED
 14366  1F17                     l998:	
 14367                           
 14368                           ;LED_B1.c: 11: }
 14369                           ;LED_B1.c: 14: if (led == 2) {
 14370  1F17  0821               	movf	LedPointSelect@led,w
 14371  1F18  3A02               	xorlw	2
 14372  1F19  1D03               	skipz
 14373  1F1A  2F1F               	goto	l999
 14374                           
 14375                           ;LED_B1.c: 15: LED = &VarLED2;
 14376  1F1B  30E2               	movlw	_VarLED2& (0+255)
 14377  1F1C  00A0               	movwf	??_LedPointSelect
 14378  1F1D  0820               	movf	??_LedPointSelect,w
 14379  1F1E  00FA               	movwf	_LED
 14380  1F1F                     l999:	
 14381                           
 14382                           ;LED_B1.c: 16: }
 14383                           ;LED_B1.c: 24: if (led == 99) {
 14384  1F1F  0821               	movf	LedPointSelect@led,w
 14385  1F20  3A63               	xorlw	99
 14386  1F21  1D03               	skipz
 14387  1F22  0008               	return
 14388                           
 14389                           ;LED_B1.c: 25: LED = &VarErrLED;
 14390  1F23  30DA               	movlw	_VarErrLED& (0+255)
 14391  1F24  00A0               	movwf	??_LedPointSelect
 14392  1F25  0820               	movf	??_LedPointSelect,w
 14393  1F26  00FA               	movwf	_LED
 14394  1F27  0008               	return
 14395  1F28                     __end_of_LedPointSelect:	
 14396                           
 14397                           	psect	text84
 14398  1E7F                     __ptext84:	
 14399 ;; *************** function _setDimmerLights_Line *****************
 14400 ;; Defined at:
 14401 ;;		line 667 in file "../src/Dimmer_B1.c"
 14402 ;; Parameters:    Size  Location     Type
 14403 ;;  lights          1    wreg     unsigned char 
 14404 ;; Auto vars:     Size  Location     Type
 14405 ;;  lights          1    0[BANK0 ] unsigned char 
 14406 ;; Return value:  Size  Location     Type
 14407 ;;		None               void
 14408 ;; Registers used:
 14409 ;;		wreg
 14410 ;; Tracked objects:
 14411 ;;		On entry : 0/0
 14412 ;;		On exit  : 0/0
 14413 ;;		Unchanged: 0/0
 14414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14416 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14418 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14419 ;;Total ram usage:        1 bytes
 14420 ;; Hardware stack levels used:    1
 14421 ;; Hardware stack levels required when called:    5
 14422 ;; This function calls:
 14423 ;;		Nothing
 14424 ;; This function is called by:
 14425 ;;		_setDimmerLights
 14426 ;; This function uses a non-reentrant model
 14427 ;;
 14428                           
 14429                           
 14430                           ;psect for function _setDimmerLights_Line
 14431  1E7F                     _setDimmerLights_Line:	
 14432                           
 14433                           ;incstack = 0
 14434                           ; Regs used in _setDimmerLights_Line: [wreg]
 14435                           ;setDimmerLights_Line@lights stored from wreg
 14436  1E7F  0020               	movlb	0	; select bank0
 14437  1E80  00A0               	movwf	setDimmerLights_Line@lights
 14438                           
 14439                           ;Dimmer_B1.c: 669: DimmerLights1.Line = 0;
 14440  1E81  0023               	movlb	3	; select bank3
 14441  1E82  1029               	bcf	(_DimmerLights1^(0+384)+9),0
 14442                           
 14443                           ;Dimmer_B1.c: 672: DimmerLights2.Line = 0;
 14444  1E83  1038               	bcf	(_DimmerLights2^(0+384)+9),0
 14445                           
 14446                           ;Dimmer_B1.c: 678: if (lights == 1) {
 14447  1E84  0020               	movlb	0	; select bank0
 14448  1E85  0820               	movf	setDimmerLights_Line@lights,w
 14449  1E86  3A01               	xorlw	1
 14450  1E87  1D03               	skipz
 14451  1E88  2E8C               	goto	l6581
 14452                           
 14453                           ;Dimmer_B1.c: 679: DimmerLights1.Line = 1;
 14454  1E89  0023               	movlb	3	; select bank3
 14455  1E8A  1429               	bsf	(_DimmerLights1^(0+384)+9),0
 14456                           
 14457                           ;Dimmer_B1.c: 680: }
 14458  1E8B  0008               	return
 14459  1E8C                     l6581:	
 14460                           
 14461                           ;Dimmer_B1.c: 683: else if (lights == 2) {
 14462  1E8C  0020               	movlb	0	; select bank0
 14463  1E8D  0820               	movf	setDimmerLights_Line@lights,w
 14464  1E8E  3A02               	xorlw	2
 14465  1E8F  1D03               	skipz
 14466  1E90  0008               	return
 14467                           
 14468                           ;Dimmer_B1.c: 684: DimmerLights2.Line = 1;
 14469  1E91  0023               	movlb	3	; select bank3
 14470  1E92  1438               	bsf	(_DimmerLights2^(0+384)+9),0
 14471  1E93  0008               	return
 14472  1E94                     __end_of_setDimmerLights_Line:	
 14473                           
 14474                           	psect	text85
 14475  125C                     __ptext85:	
 14476 ;; *************** function _getMain_All_Error_Status *****************
 14477 ;; Defined at:
 14478 ;;		line 369 in file "../src/main_B1.c"
 14479 ;; Parameters:    Size  Location     Type
 14480 ;;  command         1    wreg     unsigned char 
 14481 ;; Auto vars:     Size  Location     Type
 14482 ;;  command         1    5[BANK0 ] unsigned char 
 14483 ;;  status          1    6[BANK0 ] unsigned char 
 14484 ;; Return value:  Size  Location     Type
 14485 ;;                  1    wreg      unsigned char 
 14486 ;; Registers used:
 14487 ;;		wreg, status,2, status,0
 14488 ;; Tracked objects:
 14489 ;;		On entry : 0/0
 14490 ;;		On exit  : 0/0
 14491 ;;		Unchanged: 0/0
 14492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14494 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14496 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14497 ;;Total ram usage:        7 bytes
 14498 ;; Hardware stack levels used:    1
 14499 ;; Hardware stack levels required when called:    5
 14500 ;; This function calls:
 14501 ;;		Nothing
 14502 ;; This function is called by:
 14503 ;;		_DimmerLights_Main
 14504 ;;		_setDimmerLights
 14505 ;;		_setDimmerLights_Adj
 14506 ;;		_Load_Main
 14507 ;;		_setTemp_Main
 14508 ;;		_setRF_Main
 14509 ;;		_getRxData
 14510 ;;		_Switch_Main
 14511 ;; This function uses a non-reentrant model
 14512 ;;
 14513                           
 14514                           
 14515                           ;psect for function _getMain_All_Error_Status
 14516  125C                     _getMain_All_Error_Status:	
 14517                           
 14518                           ;incstack = 0
 14519                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 14520                           ;getMain_All_Error_Status@command stored from wreg
 14521  125C  0020               	movlb	0	; select bank0
 14522  125D  00A5               	movwf	getMain_All_Error_Status@command
 14523                           
 14524                           ;main_B1.c: 370: char status = 0;
 14525  125E  01A6               	clrf	getMain_All_Error_Status@status
 14526                           
 14527                           ;main_B1.c: 381: if (status == 0 && command != 2) {
 14528  125F  08A6               	movf	getMain_All_Error_Status@status,f
 14529  1260  1D03               	skipz
 14530  1261  2A76               	goto	l6513
 14531  1262  0825               	movf	getMain_All_Error_Status@command,w
 14532  1263  3A02               	xorlw	2
 14533  1264  1903               	skipnz
 14534  1265  2A76               	goto	l6513
 14535                           
 14536                           ;main_B1.c: 382: status = Temp.ERROR == 1 ? 2 : 0;
 14537  1266  0021               	movlb	1	; select bank1
 14538  1267  18D7               	btfsc	_Temp^(0+128),1
 14539  1268  2A6D               	goto	l6511
 14540  1269  0020               	movlb	0	; select bank0
 14541  126A  01A1               	clrf	_getMain_All_Error_Status$7094
 14542  126B  01A2               	clrf	_getMain_All_Error_Status$7094+1
 14543  126C  2A72               	goto	l2722
 14544  126D                     l6511:	
 14545  126D  3002               	movlw	2
 14546  126E  0020               	movlb	0	; select bank0
 14547  126F  00A1               	movwf	_getMain_All_Error_Status$7094
 14548  1270  3000               	movlw	0
 14549  1271  00A2               	movwf	_getMain_All_Error_Status$7094+1
 14550  1272                     l2722:	
 14551  1272  0821               	movf	_getMain_All_Error_Status$7094,w
 14552  1273  00A0               	movwf	??_getMain_All_Error_Status
 14553  1274  0820               	movf	??_getMain_All_Error_Status,w
 14554  1275  00A6               	movwf	getMain_All_Error_Status@status
 14555  1276                     l6513:	
 14556                           
 14557                           ;main_B1.c: 383: }
 14558                           ;main_B1.c: 388: if (status == 0 && command != 3) {
 14559  1276  08A6               	movf	getMain_All_Error_Status@status,f
 14560  1277  1D03               	skipz
 14561  1278  2A8D               	goto	l2723
 14562  1279  0825               	movf	getMain_All_Error_Status@command,w
 14563  127A  3A03               	xorlw	3
 14564  127B  1903               	skipnz
 14565  127C  2A8D               	goto	l2723
 14566                           
 14567                           ;main_B1.c: 389: status = Load.ERROR == 1 ? 3 : 0;
 14568  127D  0022               	movlb	2	; select bank2
 14569  127E  1AC3               	btfsc	_Load^(0+256),5
 14570  127F  2A84               	goto	l6521
 14571  1280  0020               	movlb	0	; select bank0
 14572  1281  01A3               	clrf	_getMain_All_Error_Status$7095
 14573  1282  01A4               	clrf	_getMain_All_Error_Status$7095+1
 14574  1283  2A89               	goto	l2727
 14575  1284                     l6521:	
 14576  1284  3003               	movlw	3
 14577  1285  0020               	movlb	0	; select bank0
 14578  1286  00A3               	movwf	_getMain_All_Error_Status$7095
 14579  1287  3000               	movlw	0
 14580  1288  00A4               	movwf	_getMain_All_Error_Status$7095+1
 14581  1289                     l2727:	
 14582  1289  0823               	movf	_getMain_All_Error_Status$7095,w
 14583  128A  00A0               	movwf	??_getMain_All_Error_Status
 14584  128B  0820               	movf	??_getMain_All_Error_Status,w
 14585  128C  00A6               	movwf	getMain_All_Error_Status@status
 14586  128D                     l2723:	
 14587                           
 14588                           ;main_B1.c: 390: }
 14589                           ;main_B1.c: 406: return status;
 14590  128D  0826               	movf	getMain_All_Error_Status@status,w
 14591  128E  0008               	return
 14592  128F                     __end_of_getMain_All_Error_Status:	
 14593                           
 14594                           	psect	text86
 14595  11CE                     __ptext86:	
 14596 ;; *************** function _getMain_LightsStatus *****************
 14597 ;; Defined at:
 14598 ;;		line 342 in file "../src/main_B1.c"
 14599 ;; Parameters:    Size  Location     Type
 14600 ;;		None
 14601 ;; Auto vars:     Size  Location     Type
 14602 ;;  i               2    6[BANK0 ] int 
 14603 ;;  status          1    8[BANK0 ] unsigned char 
 14604 ;;  count           1    5[BANK0 ] unsigned char 
 14605 ;; Return value:  Size  Location     Type
 14606 ;;                  1    wreg      unsigned char 
 14607 ;; Registers used:
 14608 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14609 ;; Tracked objects:
 14610 ;;		On entry : 0/0
 14611 ;;		On exit  : 0/0
 14612 ;;		Unchanged: 0/0
 14613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14615 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14616 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14617 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14618 ;;Total ram usage:        5 bytes
 14619 ;; Hardware stack levels used:    1
 14620 ;; Hardware stack levels required when called:    7
 14621 ;; This function calls:
 14622 ;;		_getDimmerLights_Status
 14623 ;; This function is called by:
 14624 ;;		_DimmerLights_Main
 14625 ;;		_Flash_Memory_Main
 14626 ;;		_Load_Main
 14627 ;;		_setMain_Exception
 14628 ;; This function uses a non-reentrant model
 14629 ;;
 14630                           
 14631                           
 14632                           ;psect for function _getMain_LightsStatus
 14633  11CE                     _getMain_LightsStatus:	
 14634                           
 14635                           ;main_B1.c: 343: char status = 0, count = 0;
 14636                           
 14637                           ;incstack = 0
 14638                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14639  11CE  0020               	movlb	0	; select bank0
 14640  11CF  01A8               	clrf	getMain_LightsStatus@status
 14641  11D0  01A5               	clrf	getMain_LightsStatus@count
 14642                           
 14643                           ;main_B1.c: 349: count = 2;
 14644  11D1  3002               	movlw	2
 14645  11D2  00A4               	movwf	??_getMain_LightsStatus
 14646  11D3  0824               	movf	??_getMain_LightsStatus,w
 14647  11D4  00A5               	movwf	getMain_LightsStatus@count
 14648                           
 14649                           ;main_B1.c: 355: for (int i = 0; i < count; i++) {
 14650  11D5  01A6               	clrf	getMain_LightsStatus@i
 14651  11D6  01A7               	clrf	getMain_LightsStatus@i+1
 14652  11D7                     l6767:	
 14653  11D7  0827               	movf	getMain_LightsStatus@i+1,w
 14654  11D8  3A80               	xorlw	128
 14655  11D9  00A4               	movwf	??_getMain_LightsStatus
 14656  11DA  3080               	movlw	128
 14657  11DB  0224               	subwf	??_getMain_LightsStatus,w
 14658  11DC  1D03               	skipz
 14659  11DD  29E0               	goto	u5915
 14660  11DE  0825               	movf	getMain_LightsStatus@count,w
 14661  11DF  0226               	subwf	getMain_LightsStatus@i,w
 14662  11E0                     u5915:	
 14663  11E0  1803               	btfsc	3,0
 14664  11E1  29F8               	goto	l6769
 14665                           
 14666                           ;main_B1.c: 356: if (status == 0) {
 14667  11E2  0020               	movlb	0	; select bank0
 14668  11E3  08A8               	movf	getMain_LightsStatus@status,f
 14669  11E4  1D03               	skipz
 14670  11E5  29F3               	goto	l6765
 14671                           
 14672                           ;main_B1.c: 361: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 14673  11E6  0826               	movf	getMain_LightsStatus@i,w
 14674  11E7  3E01               	addlw	1
 14675  11E8  319D  250D  3191   	fcall	_getDimmerLights_Status
 14676  11EB  3A01               	xorlw	1
 14677  11EC  3000               	movlw	0
 14678  11ED  1903               	skipnz
 14679  11EE  3001               	movlw	1
 14680  11EF  0020               	movlb	0	; select bank0
 14681  11F0  00A4               	movwf	??_getMain_LightsStatus
 14682  11F1  0824               	movf	??_getMain_LightsStatus,w
 14683  11F2  00A8               	movwf	getMain_LightsStatus@status
 14684  11F3                     l6765:	
 14685  11F3  3001               	movlw	1
 14686  11F4  07A6               	addwf	getMain_LightsStatus@i,f
 14687  11F5  3000               	movlw	0
 14688  11F6  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 14689  11F7  29D7               	goto	l6767
 14690  11F8                     l6769:	
 14691                           
 14692                           ;main_B1.c: 363: }
 14693                           ;main_B1.c: 364: }
 14694                           ;main_B1.c: 365: return status;
 14695  11F8  0020               	movlb	0	; select bank0
 14696  11F9  0828               	movf	getMain_LightsStatus@status,w
 14697  11FA  0008               	return
 14698  11FB                     __end_of_getMain_LightsStatus:	
 14699                           
 14700                           	psect	text87
 14701  1C31                     __ptext87:	
 14702 ;; *************** function _getLoad_OK *****************
 14703 ;; Defined at:
 14704 ;;		line 228 in file "../src/OverLoad_B1.c"
 14705 ;; Parameters:    Size  Location     Type
 14706 ;;		None
 14707 ;; Auto vars:     Size  Location     Type
 14708 ;;  ok              1    0[BANK0 ] unsigned char 
 14709 ;; Return value:  Size  Location     Type
 14710 ;;                  1    wreg      unsigned char 
 14711 ;; Registers used:
 14712 ;;		wreg, status,2
 14713 ;; Tracked objects:
 14714 ;;		On entry : 0/0
 14715 ;;		On exit  : 0/0
 14716 ;;		Unchanged: 0/0
 14717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14719 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14721 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14722 ;;Total ram usage:        1 bytes
 14723 ;; Hardware stack levels used:    1
 14724 ;; Hardware stack levels required when called:    5
 14725 ;; This function calls:
 14726 ;;		Nothing
 14727 ;; This function is called by:
 14728 ;;		_DimmerLights_Main
 14729 ;; This function uses a non-reentrant model
 14730 ;;
 14731                           
 14732                           
 14733                           ;psect for function _getLoad_OK
 14734  1C31                     _getLoad_OK:	
 14735                           
 14736                           ;OverLoad_B1.c: 229: char ok = Load.OK == 1 ? 1 : 0;
 14737                           
 14738                           ;incstack = 0
 14739                           ; Regs used in _getLoad_OK: [wreg+status,2]
 14740  1C31  3000               	movlw	0
 14741  1C32  0022               	movlb	2	; select bank2
 14742  1C33  1BC3               	btfsc	_Load^(0+256),7
 14743  1C34  3001               	movlw	1
 14744  1C35  0020               	movlb	0	; select bank0
 14745  1C36  00A0               	movwf	getLoad_OK@ok
 14746                           
 14747                           ;OverLoad_B1.c: 230: return ok;
 14748  1C37  0820               	movf	getLoad_OK@ok,w
 14749  1C38  0008               	return
 14750  1C39                     __end_of_getLoad_OK:	
 14751                           
 14752                           	psect	text88
 14753  1EAA                     __ptext88:	
 14754 ;; *************** function _DimmerLights_Initialization *****************
 14755 ;; Defined at:
 14756 ;;		line 329 in file "../src/Dimmer_B1.c"
 14757 ;; Parameters:    Size  Location     Type
 14758 ;;		None
 14759 ;; Auto vars:     Size  Location     Type
 14760 ;;		None
 14761 ;; Return value:  Size  Location     Type
 14762 ;;		None               void
 14763 ;; Registers used:
 14764 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14765 ;; Tracked objects:
 14766 ;;		On entry : 0/0
 14767 ;;		On exit  : 0/0
 14768 ;;		Unchanged: 0/0
 14769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14772 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14773 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14774 ;;Total ram usage:        1 bytes
 14775 ;; Hardware stack levels used:    1
 14776 ;; Hardware stack levels required when called:    7
 14777 ;; This function calls:
 14778 ;;		_Dimmer_Initialization
 14779 ;;		_setDimmerLights_Initialization
 14780 ;; This function is called by:
 14781 ;;		_main
 14782 ;; This function uses a non-reentrant model
 14783 ;;
 14784                           
 14785                           
 14786                           ;psect for function _DimmerLights_Initialization
 14787  1EAA                     _DimmerLights_Initialization:	
 14788                           
 14789                           ;Dimmer_B1.c: 331: DimmerLights11 = &DimmerLights1;
 14790                           
 14791                           ;incstack = 0
 14792                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14793  1EAA  30A0               	movlw	_DimmerLights1& (0+255)
 14794  1EAB  0020               	movlb	0	; select bank0
 14795  1EAC  00A4               	movwf	??_DimmerLights_Initialization
 14796  1EAD  0824               	movf	??_DimmerLights_Initialization,w
 14797  1EAE  0021               	movlb	1	; select bank1
 14798  1EAF  00CD               	movwf	_DimmerLights11^(0+128)
 14799                           
 14800                           ;Dimmer_B1.c: 332: setDimmerLights_Initialization(1);
 14801  1EB0  3001               	movlw	1
 14802  1EB1  3191  212B  319E   	fcall	_setDimmerLights_Initialization
 14803                           
 14804                           ;Dimmer_B1.c: 336: DimmerLights22 = &DimmerLights2;
 14805  1EB4  30AF               	movlw	_DimmerLights2& (0+255)
 14806  1EB5  0020               	movlb	0	; select bank0
 14807  1EB6  00A4               	movwf	??_DimmerLights_Initialization
 14808  1EB7  0824               	movf	??_DimmerLights_Initialization,w
 14809  1EB8  0021               	movlb	1	; select bank1
 14810  1EB9  00CE               	movwf	_DimmerLights22^(0+128)
 14811                           
 14812                           ;Dimmer_B1.c: 337: setDimmerLights_Initialization(2);
 14813  1EBA  3002               	movlw	2
 14814  1EBB  3191  212B  319E   	fcall	_setDimmerLights_Initialization
 14815                           
 14816                           ;Dimmer_B1.c: 346: Dimmer_Initialization();
 14817  1EBE  319B  23D5         	fcall	_Dimmer_Initialization
 14818  1EC0  0008               	return
 14819  1EC1                     __end_of_DimmerLights_Initialization:	
 14820                           
 14821                           	psect	text89
 14822  112B                     __ptext89:	
 14823 ;; *************** function _setDimmerLights_Initialization *****************
 14824 ;; Defined at:
 14825 ;;		line 352 in file "../src/Dimmer_B1.c"
 14826 ;; Parameters:    Size  Location     Type
 14827 ;;  lights          1    wreg     unsigned char 
 14828 ;; Auto vars:     Size  Location     Type
 14829 ;;  lights          1    3[BANK0 ] unsigned char 
 14830 ;; Return value:  Size  Location     Type
 14831 ;;		None               void
 14832 ;; Registers used:
 14833 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14834 ;; Tracked objects:
 14835 ;;		On entry : 0/0
 14836 ;;		On exit  : 0/0
 14837 ;;		Unchanged: 0/0
 14838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14840 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14841 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14842 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14843 ;;Total ram usage:        2 bytes
 14844 ;; Hardware stack levels used:    1
 14845 ;; Hardware stack levels required when called:    6
 14846 ;; This function calls:
 14847 ;;		_DimmerLightsPointSelect
 14848 ;; This function is called by:
 14849 ;;		_DimmerLights_Initialization
 14850 ;; This function uses a non-reentrant model
 14851 ;;
 14852                           
 14853                           
 14854                           ;psect for function _setDimmerLights_Initialization
 14855  112B                     _setDimmerLights_Initialization:	
 14856                           
 14857                           ;incstack = 0
 14858                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 14859                           ;setDimmerLights_Initialization@lights stored from wreg
 14860  112B  0020               	movlb	0	; select bank0
 14861  112C  00A3               	movwf	setDimmerLights_Initialization@lights
 14862                           
 14863                           ;Dimmer_B1.c: 354: DimmerLightsPointSelect(lights);
 14864  112D  0823               	movf	setDimmerLights_Initialization@lights,w
 14865  112E  319D  25B9         	fcall	_DimmerLightsPointSelect
 14866                           
 14867                           ;Dimmer_B1.c: 360: DimmerLights->MaxmumValue = ((char)(80*0.8));
 14868  1130  3040               	movlw	64
 14869  1131  0020               	movlb	0	; select bank0
 14870  1132  00A2               	movwf	??_setDimmerLights_Initialization
 14871  1133  086F               	movf	_DimmerLights,w
 14872  1134  3E05               	addlw	5
 14873  1135  0086               	movwf	6
 14874  1136  3001               	movlw	1	; select bank2/3
 14875  1137  0087               	movwf	7
 14876  1138  0822               	movf	??_setDimmerLights_Initialization,w
 14877  1139  0081               	movwf	1
 14878                           
 14879                           ;Dimmer_B1.c: 361: DimmerLights->MinimumValue = ((char)(15*0.8));
 14880  113A  300C               	movlw	12
 14881  113B  00A2               	movwf	??_setDimmerLights_Initialization
 14882  113C  086F               	movf	_DimmerLights,w
 14883  113D  3E06               	addlw	6
 14884  113E  0086               	movwf	6
 14885  113F  3001               	movlw	1	; select bank2/3
 14886  1140  0087               	movwf	7
 14887  1141  0822               	movf	??_setDimmerLights_Initialization,w
 14888  1142  0081               	movwf	1
 14889                           
 14890                           ;Dimmer_B1.c: 375: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 14891  1143  086F               	movf	_DimmerLights,w
 14892  1144  3E05               	addlw	5
 14893  1145  0086               	movwf	6
 14894  1146  3001               	movlw	1	; select bank2/3
 14895  1147  0087               	movwf	7
 14896  1148  0801               	movf	1,w
 14897  1149  00A2               	movwf	??_setDimmerLights_Initialization
 14898  114A  086F               	movf	_DimmerLights,w
 14899  114B  3E04               	addlw	4
 14900  114C  0086               	movwf	6
 14901  114D  3001               	movlw	1	; select bank2/3
 14902  114E  0087               	movwf	7
 14903  114F  0822               	movf	??_setDimmerLights_Initialization,w
 14904  1150  0081               	movwf	1
 14905  1151  0008               	return
 14906  1152                     __end_of_setDimmerLights_Initialization:	
 14907                           
 14908                           	psect	text90
 14909  1BD5                     __ptext90:	
 14910 ;; *************** function _Dimmer_Initialization *****************
 14911 ;; Defined at:
 14912 ;;		line 892 in file "../src/Dimmer_B1.c"
 14913 ;; Parameters:    Size  Location     Type
 14914 ;;		None
 14915 ;; Auto vars:     Size  Location     Type
 14916 ;;		None
 14917 ;; Return value:  Size  Location     Type
 14918 ;;		None               void
 14919 ;; Registers used:
 14920 ;;		None
 14921 ;; Tracked objects:
 14922 ;;		On entry : 0/0
 14923 ;;		On exit  : 0/0
 14924 ;;		Unchanged: 0/0
 14925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14930 ;;Total ram usage:        0 bytes
 14931 ;; Hardware stack levels used:    1
 14932 ;; Hardware stack levels required when called:    5
 14933 ;; This function calls:
 14934 ;;		Nothing
 14935 ;; This function is called by:
 14936 ;;		_DimmerLights_Initialization
 14937 ;; This function uses a non-reentrant model
 14938 ;;
 14939                           
 14940                           
 14941                           ;psect for function _Dimmer_Initialization
 14942  1BD5                     _Dimmer_Initialization:	
 14943                           
 14944                           ;incstack = 0
 14945                           ; Regs used in _Dimmer_Initialization: []
 14946  1BD5  0008               	return
 14947  1BD6                     __end_of_Dimmer_Initialization:	
 14948                           
 14949                           	psect	text91
 14950  1C29                     __ptext91:	
 14951 ;; *************** function _DelayOff_Main *****************
 14952 ;; Defined at:
 14953 ;;		line 41 in file "../src/DelayOff_B1.c"
 14954 ;; Parameters:    Size  Location     Type
 14955 ;;		None
 14956 ;; Auto vars:     Size  Location     Type
 14957 ;;		None
 14958 ;; Return value:  Size  Location     Type
 14959 ;;		None               void
 14960 ;; Registers used:
 14961 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14962 ;; Tracked objects:
 14963 ;;		On entry : 0/0
 14964 ;;		On exit  : 0/0
 14965 ;;		Unchanged: 0/0
 14966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14971 ;;Total ram usage:        0 bytes
 14972 ;; Hardware stack levels used:    1
 14973 ;; Hardware stack levels required when called:   11
 14974 ;; This function calls:
 14975 ;;		_DlyOff_Main
 14976 ;; This function is called by:
 14977 ;;		_main
 14978 ;; This function uses a non-reentrant model
 14979 ;;
 14980                           
 14981                           
 14982                           ;psect for function _DelayOff_Main
 14983  1C29                     _DelayOff_Main:	
 14984                           
 14985                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 14986                           
 14987                           ;incstack = 0
 14988                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14989  1C29  3001               	movlw	1
 14990  1C2A  3187  27A3  319C   	fcall	_DlyOff_Main
 14991                           
 14992                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 14993  1C2D  3002               	movlw	2
 14994  1C2E  3187  27A3         	fcall	_DlyOff_Main
 14995  1C30  0008               	return
 14996  1C31                     __end_of_DelayOff_Main:	
 14997                           
 14998                           	psect	text92
 14999  07A3                     __ptext92:	
 15000 ;; *************** function _DlyOff_Main *****************
 15001 ;; Defined at:
 15002 ;;		line 61 in file "../src/DelayOff_B1.c"
 15003 ;; Parameters:    Size  Location     Type
 15004 ;;  sw              1    wreg     unsigned char 
 15005 ;; Auto vars:     Size  Location     Type
 15006 ;;  sw              1   24[BANK0 ] unsigned char 
 15007 ;; Return value:  Size  Location     Type
 15008 ;;		None               void
 15009 ;; Registers used:
 15010 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15011 ;; Tracked objects:
 15012 ;;		On entry : 0/0
 15013 ;;		On exit  : 0/0
 15014 ;;		Unchanged: 0/0
 15015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15017 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15018 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15019 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15020 ;;Total ram usage:        3 bytes
 15021 ;; Hardware stack levels used:    1
 15022 ;; Hardware stack levels required when called:   10
 15023 ;; This function calls:
 15024 ;;		_DelayOffPointSelect
 15025 ;;		_setBuz
 15026 ;;		_setDimmerLights_ErrorClose
 15027 ;; This function is called by:
 15028 ;;		_DelayOff_Main
 15029 ;; This function uses a non-reentrant model
 15030 ;;
 15031                           
 15032                           
 15033                           ;psect for function _DlyOff_Main
 15034  07A3                     _DlyOff_Main:	
 15035                           
 15036                           ;incstack = 0
 15037                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15038                           ;DlyOff_Main@sw stored from wreg
 15039  07A3  0020               	movlb	0	; select bank0
 15040  07A4  00B8               	movwf	DlyOff_Main@sw
 15041                           
 15042                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15043  07A5  0838               	movf	DlyOff_Main@sw,w
 15044  07A6  319E  262D  3187   	fcall	_DelayOffPointSelect
 15045                           
 15046                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15047  07A9  0878               	movf	_DelayOff,w
 15048  07AA  0086               	movwf	6
 15049  07AB  3001               	movlw	1	; select bank2/3
 15050  07AC  0087               	movwf	7
 15051  07AD  1C81               	btfss	1,1
 15052  07AE  0008               	return
 15053                           
 15054                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15055  07AF  0878               	movf	_DelayOff,w
 15056  07B0  3E02               	addlw	2
 15057  07B1  0086               	movwf	6
 15058  07B2  3001               	movlw	1	; select bank2/3
 15059  07B3  0087               	movwf	7
 15060  07B4  3001               	movlw	1
 15061  07B5  0781               	addwf	1,f
 15062  07B6  3141               	addfsr 1,1
 15063  07B7  1803               	skipnc
 15064  07B8  0A81               	incf	1,f
 15065                           
 15066                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15067  07B9  0878               	movf	_DelayOff,w
 15068  07BA  3E02               	addlw	2
 15069  07BB  0086               	movwf	6
 15070  07BC  3001               	movlw	1	; select bank2/3
 15071  07BD  0087               	movwf	7
 15072  07BE  3F40               	moviw [0]fsr1
 15073  07BF  0020               	movlb	0	; select bank0
 15074  07C0  00B6               	movwf	??_DlyOff_Main
 15075  07C1  3F41               	moviw [1]fsr1
 15076  07C2  00B7               	movwf	??_DlyOff_Main+1
 15077  07C3  3017               	movlw	23
 15078  07C4  0237               	subwf	??_DlyOff_Main+1,w
 15079  07C5  3070               	movlw	112
 15080  07C6  1903               	skipnz
 15081  07C7  0236               	subwf	??_DlyOff_Main,w
 15082  07C8  1C03               	skipc
 15083  07C9  0008               	return
 15084                           
 15085                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15086  07CA  0878               	movf	_DelayOff,w
 15087  07CB  3E02               	addlw	2
 15088  07CC  0086               	movwf	6
 15089  07CD  3001               	movlw	1	; select bank2/3
 15090  07CE  0087               	movwf	7
 15091  07CF  3000               	movlw	0
 15092  07D0  3FC0               	movwi [0]fsr1
 15093  07D1  3FC1               	movwi [1]fsr1
 15094                           
 15095                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15096  07D2  3001               	movlw	1
 15097  07D3  00B6               	movwf	??_DlyOff_Main
 15098  07D4  0878               	movf	_DelayOff,w
 15099  07D5  3E04               	addlw	4
 15100  07D6  0086               	movwf	6
 15101  07D7  3001               	movlw	1	; select bank2/3
 15102  07D8  0087               	movwf	7
 15103  07D9  0836               	movf	??_DlyOff_Main,w
 15104  07DA  0781               	addwf	1,f
 15105                           
 15106                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15107  07DB  0878               	movf	_DelayOff,w
 15108  07DC  3E04               	addlw	4
 15109  07DD  0086               	movwf	6
 15110  07DE  3001               	movlw	1	; select bank2/3
 15111  07DF  0087               	movwf	7
 15112  07E0  0A78               	incf	_DelayOff,w
 15113  07E1  0084               	movwf	4
 15114  07E2  3001               	movlw	1	; select bank2/3
 15115  07E3  0085               	movwf	5
 15116  07E4  0800               	movf	0,w
 15117  07E5  0201               	subwf	1,w
 15118  07E6  1C03               	skipc
 15119  07E7  0008               	return
 15120                           
 15121                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15122  07E8  0878               	movf	_DelayOff,w
 15123  07E9  3E04               	addlw	4
 15124  07EA  0086               	movwf	6
 15125  07EB  3001               	movlw	1	; select bank2/3
 15126  07EC  0087               	movwf	7
 15127  07ED  0181               	clrf	1
 15128                           
 15129                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15130  07EE  0878               	movf	_DelayOff,w
 15131  07EF  0086               	movwf	6
 15132  07F0  3001               	movlw	1	; select bank2/3
 15133  07F1  0087               	movwf	7
 15134  07F2  1081               	bcf	1,1
 15135                           
 15136                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15137  07F3  3064               	movlw	100
 15138  07F4  00A9               	movwf	setBuz@time
 15139  07F5  3000               	movlw	0
 15140  07F6  00AA               	movwf	setBuz@time+1
 15141  07F7  3001               	movlw	1
 15142  07F8  3197  274E  3187   	fcall	_setBuz
 15143                           
 15144                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15145  07FB  0020               	movlb	0	; select bank0
 15146  07FC  0838               	movf	DlyOff_Main@sw,w
 15147  07FD  3188  2014         	fcall	_setDimmerLights_ErrorClose
 15148  07FF  0008               	return
 15149  0800                     __end_of_DlyOff_Main:	
 15150                           
 15151                           	psect	text93
 15152  0814                     __ptext93:	
 15153 ;; *************** function _setDimmerLights_ErrorClose *****************
 15154 ;; Defined at:
 15155 ;;		line 562 in file "../src/Dimmer_B1.c"
 15156 ;; Parameters:    Size  Location     Type
 15157 ;;  lights          1    wreg     unsigned char 
 15158 ;; Auto vars:     Size  Location     Type
 15159 ;;  lights          1   19[BANK0 ] unsigned char 
 15160 ;;  i               2   20[BANK0 ] int 
 15161 ;;  count           1   18[BANK0 ] unsigned char 
 15162 ;; Return value:  Size  Location     Type
 15163 ;;		None               void
 15164 ;; Registers used:
 15165 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15166 ;; Tracked objects:
 15167 ;;		On entry : 0/0
 15168 ;;		On exit  : 0/0
 15169 ;;		Unchanged: 0/0
 15170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15172 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15173 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15174 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15175 ;;Total ram usage:        5 bytes
 15176 ;; Hardware stack levels used:    1
 15177 ;; Hardware stack levels required when called:    9
 15178 ;; This function calls:
 15179 ;;		_DimmerLightsPointSelect
 15180 ;;		_getDimmerLights_Status
 15181 ;;		_setDimmerLights_SwOff
 15182 ;; This function is called by:
 15183 ;;		_DlyOff_Main
 15184 ;;		_setControl_Lights_Table
 15185 ;;		_setMain_Exception
 15186 ;; This function uses a non-reentrant model
 15187 ;;
 15188                           
 15189                           
 15190                           ;psect for function _setDimmerLights_ErrorClose
 15191  0814                     _setDimmerLights_ErrorClose:	
 15192                           
 15193                           ;incstack = 0
 15194                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15195                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15196  0814  0020               	movlb	0	; select bank0
 15197  0815  00B3               	movwf	setDimmerLights_ErrorClose@lights
 15198                           
 15199                           ;Dimmer_B1.c: 563: if (lights == 255) {
 15200  0816  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15201  0817  3AFF               	xorlw	255
 15202  0818  1D03               	skipz
 15203  0819  2851               	goto	l6425
 15204                           
 15205                           ;Dimmer_B1.c: 568: char count = 2;
 15206  081A  3002               	movlw	2
 15207  081B  00B1               	movwf	??_setDimmerLights_ErrorClose
 15208  081C  0831               	movf	??_setDimmerLights_ErrorClose,w
 15209  081D  00B2               	movwf	setDimmerLights_ErrorClose@count
 15210                           
 15211                           ;Dimmer_B1.c: 573: for (int i = 0; i < count; i++) {
 15212  081E  01B4               	clrf	setDimmerLights_ErrorClose@i
 15213  081F  01B5               	clrf	setDimmerLights_ErrorClose@i+1
 15214  0820                     l6423:	
 15215  0820  0835               	movf	setDimmerLights_ErrorClose@i+1,w
 15216  0821  3A80               	xorlw	128
 15217  0822  00B1               	movwf	??_setDimmerLights_ErrorClose
 15218  0823  3080               	movlw	128
 15219  0824  0231               	subwf	??_setDimmerLights_ErrorClose,w
 15220  0825  1D03               	skipz
 15221  0826  2829               	goto	u5345
 15222  0827  0832               	movf	setDimmerLights_ErrorClose@count,w
 15223  0828  0234               	subwf	setDimmerLights_ErrorClose@i,w
 15224  0829                     u5345:	
 15225  0829  1803               	btfsc	3,0
 15226  082A  0008               	return
 15227                           
 15228                           ;Dimmer_B1.c: 574: DimmerLightsPointSelect(i + 1);
 15229  082B  0020               	movlb	0	; select bank0
 15230  082C  0834               	movf	setDimmerLights_ErrorClose@i,w
 15231  082D  3E01               	addlw	1
 15232  082E  319D  25B9  3188   	fcall	_DimmerLightsPointSelect
 15233                           
 15234                           ;Dimmer_B1.c: 575: if (getDimmerLights_Status(i + 1) == 1) {
 15235  0831  0020               	movlb	0	; select bank0
 15236  0832  0834               	movf	setDimmerLights_ErrorClose@i,w
 15237  0833  3E01               	addlw	1
 15238  0834  319D  250D  3188   	fcall	_getDimmerLights_Status
 15239  0837  3A01               	xorlw	1
 15240  0838  1D03               	skipz
 15241  0839  284B               	goto	l6421
 15242                           
 15243                           ;Dimmer_B1.c: 576: DimmerLights->SwFlag = 1;
 15244  083A  0020               	movlb	0	; select bank0
 15245  083B  086F               	movf	_DimmerLights,w
 15246  083C  3E09               	addlw	9
 15247  083D  0086               	movwf	6
 15248  083E  3001               	movlw	1	; select bank2/3
 15249  083F  0087               	movwf	7
 15250  0840  1701               	bsf	1,6
 15251                           
 15252                           ;Dimmer_B1.c: 577: DimmerLights->Status = 0;
 15253  0841  086F               	movf	_DimmerLights,w
 15254  0842  0086               	movwf	6
 15255  0843  3001               	movlw	1	; select bank2/3
 15256  0844  0087               	movwf	7
 15257  0845  1281               	bcf	1,5
 15258                           
 15259                           ;Dimmer_B1.c: 578: setDimmerLights_SwOff(i + 1);
 15260  0846  0834               	movf	setDimmerLights_ErrorClose@i,w
 15261  0847  3E01               	addlw	1
 15262  0848  3194  24D7  3188   	fcall	_setDimmerLights_SwOff
 15263  084B                     l6421:	
 15264  084B  3001               	movlw	1
 15265  084C  0020               	movlb	0	; select bank0
 15266  084D  07B4               	addwf	setDimmerLights_ErrorClose@i,f
 15267  084E  3000               	movlw	0
 15268  084F  3DB5               	addwfc	setDimmerLights_ErrorClose@i+1,f
 15269  0850  2820               	goto	l6423
 15270  0851                     l6425:	
 15271                           ;Dimmer_B1.c: 579: }
 15272                           ;Dimmer_B1.c: 580: }
 15273                           ;Dimmer_B1.c: 581: } else {
 15274                           
 15275                           
 15276                           ;Dimmer_B1.c: 582: DimmerLightsPointSelect(lights);
 15277  0851  0020               	movlb	0	; select bank0
 15278  0852  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15279  0853  319D  25B9  3188   	fcall	_DimmerLightsPointSelect
 15280                           
 15281                           ;Dimmer_B1.c: 583: if (getDimmerLights_Status(lights) == 1) {
 15282  0856  0020               	movlb	0	; select bank0
 15283  0857  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15284  0858  319D  250D  3188   	fcall	_getDimmerLights_Status
 15285  085B  3A01               	xorlw	1
 15286  085C  1D03               	skipz
 15287  085D  0008               	return
 15288                           
 15289                           ;Dimmer_B1.c: 584: DimmerLights->SwFlag = 1;
 15290  085E  0020               	movlb	0	; select bank0
 15291  085F  086F               	movf	_DimmerLights,w
 15292  0860  3E09               	addlw	9
 15293  0861  0086               	movwf	6
 15294  0862  3001               	movlw	1	; select bank2/3
 15295  0863  0087               	movwf	7
 15296  0864  1701               	bsf	1,6
 15297                           
 15298                           ;Dimmer_B1.c: 585: DimmerLights->Status = 0;
 15299  0865  086F               	movf	_DimmerLights,w
 15300  0866  0086               	movwf	6
 15301  0867  3001               	movlw	1	; select bank2/3
 15302  0868  0087               	movwf	7
 15303  0869  1281               	bcf	1,5
 15304                           
 15305                           ;Dimmer_B1.c: 586: setDimmerLights_SwOff(lights);
 15306  086A  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15307  086B  3194  24D7         	fcall	_setDimmerLights_SwOff
 15308  086D  0008               	return
 15309  086E                     __end_of_setDimmerLights_ErrorClose:	
 15310                           
 15311                           	psect	text94
 15312  14D7                     __ptext94:	
 15313 ;; *************** function _setDimmerLights_SwOff *****************
 15314 ;; Defined at:
 15315 ;;		line 524 in file "../src/Dimmer_B1.c"
 15316 ;; Parameters:    Size  Location     Type
 15317 ;;  sw              1    wreg     unsigned char 
 15318 ;; Auto vars:     Size  Location     Type
 15319 ;;  sw              1   16[BANK0 ] unsigned char 
 15320 ;;  command         1   15[BANK0 ] unsigned char 
 15321 ;; Return value:  Size  Location     Type
 15322 ;;		None               void
 15323 ;; Registers used:
 15324 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15325 ;; Tracked objects:
 15326 ;;		On entry : 0/0
 15327 ;;		On exit  : 0/0
 15328 ;;		Unchanged: 0/0
 15329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15331 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15333 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15334 ;;Total ram usage:        2 bytes
 15335 ;; Hardware stack levels used:    1
 15336 ;; Hardware stack levels required when called:    8
 15337 ;; This function calls:
 15338 ;;		_DimmerLightsPointSelect
 15339 ;;		_getDelayOff_GO
 15340 ;;		_setDelayOff_GO
 15341 ;;		_setDimmerLights_Trigger
 15342 ;;		_setDimmerLights_TriggerAdj
 15343 ;; This function is called by:
 15344 ;;		_setDimmerLights_ErrorClose
 15345 ;;		_setRFSW_Control
 15346 ;;		_setSw_Main
 15347 ;; This function uses a non-reentrant model
 15348 ;;
 15349                           
 15350                           
 15351                           ;psect for function _setDimmerLights_SwOff
 15352  14D7                     _setDimmerLights_SwOff:	
 15353                           
 15354                           ;incstack = 0
 15355                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15356                           ;setDimmerLights_SwOff@sw stored from wreg
 15357  14D7  0020               	movlb	0	; select bank0
 15358  14D8  00B0               	movwf	setDimmerLights_SwOff@sw
 15359                           
 15360                           ;Dimmer_B1.c: 525: DimmerLightsPointSelect(sw);
 15361  14D9  0830               	movf	setDimmerLights_SwOff@sw,w
 15362  14DA  319D  25B9  3194   	fcall	_DimmerLightsPointSelect
 15363                           
 15364                           ;Dimmer_B1.c: 526: char command = DimmerLights->Status == 1 ? 1 : 0;
 15365  14DD  0020               	movlb	0	; select bank0
 15366  14DE  086F               	movf	_DimmerLights,w
 15367  14DF  0086               	movwf	6
 15368  14E0  3001               	movlw	1	; select bank2/3
 15369  14E1  0087               	movwf	7
 15370  14E2  3000               	movlw	0
 15371  14E3  1A81               	btfsc	1,5
 15372  14E4  3001               	movlw	1
 15373  14E5  00AF               	movwf	setDimmerLights_SwOff@command
 15374                           
 15375                           ;Dimmer_B1.c: 527: if (DimmerLights->SwFlag == 1) {
 15376  14E6  086F               	movf	_DimmerLights,w
 15377  14E7  3E09               	addlw	9
 15378  14E8  0086               	movwf	6
 15379  14E9  3001               	movlw	1	; select bank2/3
 15380  14EA  0087               	movwf	7
 15381  14EB  1F01               	btfss	1,6
 15382  14EC  0008               	return
 15383                           
 15384                           ;Dimmer_B1.c: 528: DimmerLights->SwFlag = 0;
 15385  14ED  086F               	movf	_DimmerLights,w
 15386  14EE  3E09               	addlw	9
 15387  14EF  0086               	movwf	6
 15388  14F0  3001               	movlw	1	; select bank2/3
 15389  14F1  0087               	movwf	7
 15390  14F2  1301               	bcf	1,6
 15391                           
 15392                           ;Dimmer_B1.c: 529: if (DimmerLights->Status == 1) {
 15393  14F3  086F               	movf	_DimmerLights,w
 15394  14F4  0086               	movwf	6
 15395  14F5  3001               	movlw	1	; select bank2/3
 15396  14F6  0087               	movwf	7
 15397  14F7  1E81               	btfss	1,5
 15398  14F8  2D0B               	goto	l6299
 15399                           
 15400                           ;Dimmer_B1.c: 530: if (DimmerLights->SwAdj == 1) {
 15401  14F9  086F               	movf	_DimmerLights,w
 15402  14FA  3E09               	addlw	9
 15403  14FB  0086               	movwf	6
 15404  14FC  3001               	movlw	1	; select bank2/3
 15405  14FD  0087               	movwf	7
 15406  14FE  1F81               	btfss	1,7
 15407  14FF  0008               	return
 15408                           
 15409                           ;Dimmer_B1.c: 531: DimmerLights->SwAdj = 0;
 15410  1500  086F               	movf	_DimmerLights,w
 15411  1501  3E09               	addlw	9
 15412  1502  0086               	movwf	6
 15413  1503  3001               	movlw	1	; select bank2/3
 15414  1504  0087               	movwf	7
 15415  1505  1381               	bcf	1,7
 15416                           
 15417                           ;Dimmer_B1.c: 532: setDimmerLights_TriggerAdj(sw, 0);
 15418  1506  01A2               	clrf	setDimmerLights_TriggerAdj@command
 15419  1507  0830               	movf	setDimmerLights_SwOff@sw,w
 15420  1508  319F  27A0         	fcall	_setDimmerLights_TriggerAdj
 15421                           
 15422                           ;Dimmer_B1.c: 533: }
 15423                           ;Dimmer_B1.c: 534: } else {
 15424  150A  0008               	return
 15425  150B                     l6299:	
 15426                           
 15427                           ;Dimmer_B1.c: 535: setDimmerLights_Trigger(sw, 0);
 15428  150B  0020               	movlb	0	; select bank0
 15429  150C  01A2               	clrf	setDimmerLights_Trigger@command
 15430  150D  0830               	movf	setDimmerLights_SwOff@sw,w
 15431  150E  319F  2744  3194   	fcall	_setDimmerLights_Trigger
 15432                           
 15433                           ;Dimmer_B1.c: 537: if (getDelayOff_GO(sw) == 1) {
 15434  1511  0020               	movlb	0	; select bank0
 15435  1512  0830               	movf	setDimmerLights_SwOff@sw,w
 15436  1513  319D  251D  3194   	fcall	_getDelayOff_GO
 15437  1516  3A01               	xorlw	1
 15438  1517  1D03               	skipz
 15439  1518  0008               	return
 15440                           
 15441                           ;Dimmer_B1.c: 538: setDelayOff_GO(sw, 0, 0);
 15442  1519  0020               	movlb	0	; select bank0
 15443  151A  01AA               	clrf	setDelayOff_GO@command
 15444  151B  01AB               	clrf	setDelayOff_GO@value
 15445  151C  0830               	movf	setDimmerLights_SwOff@sw,w
 15446  151D  3189  2126         	fcall	_setDelayOff_GO
 15447  151F  0008               	return
 15448  1520                     __end_of_setDimmerLights_SwOff:	
 15449                           
 15450                           	psect	text95
 15451  1FA0                     __ptext95:	
 15452 ;; *************** function _setDimmerLights_TriggerAdj *****************
 15453 ;; Defined at:
 15454 ;;		line 773 in file "../src/Dimmer_B1.c"
 15455 ;; Parameters:    Size  Location     Type
 15456 ;;  lights          1    wreg     unsigned char 
 15457 ;;  command         1    2[BANK0 ] unsigned char 
 15458 ;; Auto vars:     Size  Location     Type
 15459 ;;  lights          1    4[BANK0 ] unsigned char 
 15460 ;; Return value:  Size  Location     Type
 15461 ;;		None               void
 15462 ;; Registers used:
 15463 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15464 ;; Tracked objects:
 15465 ;;		On entry : 0/0
 15466 ;;		On exit  : 0/0
 15467 ;;		Unchanged: 0/0
 15468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15469 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15470 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15471 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15472 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15473 ;;Total ram usage:        3 bytes
 15474 ;; Hardware stack levels used:    1
 15475 ;; Hardware stack levels required when called:    6
 15476 ;; This function calls:
 15477 ;;		_DimmerLightsPointSelect
 15478 ;; This function is called by:
 15479 ;;		_setDimmerLights_SwOff
 15480 ;;		_setDimmerLights_AdjControl
 15481 ;; This function uses a non-reentrant model
 15482 ;;
 15483                           
 15484                           
 15485                           ;psect for function _setDimmerLights_TriggerAdj
 15486  1FA0                     _setDimmerLights_TriggerAdj:	
 15487                           
 15488                           ;incstack = 0
 15489                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15490                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 15491  1FA0  0020               	movlb	0	; select bank0
 15492  1FA1  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 15493                           
 15494                           ;Dimmer_B1.c: 774: DimmerLightsPointSelect(lights);
 15495  1FA2  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 15496  1FA3  319D  25B9         	fcall	_DimmerLightsPointSelect
 15497                           
 15498                           ;Dimmer_B1.c: 775: DimmerLights->TriggerAdj = 1;
 15499  1FA5  0020               	movlb	0	; select bank0
 15500  1FA6  086F               	movf	_DimmerLights,w
 15501  1FA7  3E08               	addlw	8
 15502  1FA8  0086               	movwf	6
 15503  1FA9  3001               	movlw	1	; select bank2/3
 15504  1FAA  0087               	movwf	7
 15505  1FAB  1601               	bsf	1,4
 15506                           
 15507                           ;Dimmer_B1.c: 776: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 15508  1FAC  0822               	movf	setDimmerLights_TriggerAdj@command,w
 15509  1FAD  3A01               	xorlw	1
 15510  1FAE  3000               	movlw	0
 15511  1FAF  1903               	skipnz
 15512  1FB0  3001               	movlw	1
 15513  1FB1  00A3               	movwf	??_setDimmerLights_TriggerAdj
 15514  1FB2  086F               	movf	_DimmerLights,w
 15515  1FB3  3E08               	addlw	8
 15516  1FB4  0086               	movwf	6
 15517  1FB5  3001               	movlw	1	; select bank2/3
 15518  1FB6  0087               	movwf	7
 15519  1FB7  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15520  1FB8  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15521  1FB9  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15522  1FBA  0801               	movf	1,w
 15523  1FBB  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15524  1FBC  39F7               	andlw	-9
 15525  1FBD  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15526  1FBE  0081               	movwf	1
 15527  1FBF  0008               	return
 15528  1FC0                     __end_of_setDimmerLights_TriggerAdj:	
 15529                           
 15530                           	psect	text96
 15531  1F44                     __ptext96:	
 15532 ;; *************** function _setDimmerLights_Trigger *****************
 15533 ;; Defined at:
 15534 ;;		line 767 in file "../src/Dimmer_B1.c"
 15535 ;; Parameters:    Size  Location     Type
 15536 ;;  lights          1    wreg     unsigned char 
 15537 ;;  command         1    2[BANK0 ] unsigned char 
 15538 ;; Auto vars:     Size  Location     Type
 15539 ;;  lights          1    4[BANK0 ] unsigned char 
 15540 ;; Return value:  Size  Location     Type
 15541 ;;		None               void
 15542 ;; Registers used:
 15543 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15544 ;; Tracked objects:
 15545 ;;		On entry : 0/0
 15546 ;;		On exit  : 0/0
 15547 ;;		Unchanged: 0/0
 15548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15549 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15550 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15551 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15552 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15553 ;;Total ram usage:        3 bytes
 15554 ;; Hardware stack levels used:    1
 15555 ;; Hardware stack levels required when called:    6
 15556 ;; This function calls:
 15557 ;;		_DimmerLightsPointSelect
 15558 ;; This function is called by:
 15559 ;;		_setDimmerLights_SwOn
 15560 ;;		_setDimmerLights_SwOff
 15561 ;; This function uses a non-reentrant model
 15562 ;;
 15563                           
 15564                           
 15565                           ;psect for function _setDimmerLights_Trigger
 15566  1F44                     _setDimmerLights_Trigger:	
 15567                           
 15568                           ;incstack = 0
 15569                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15570                           ;setDimmerLights_Trigger@lights stored from wreg
 15571  1F44  0020               	movlb	0	; select bank0
 15572  1F45  00A4               	movwf	setDimmerLights_Trigger@lights
 15573                           
 15574                           ;Dimmer_B1.c: 768: DimmerLightsPointSelect(lights);
 15575  1F46  0824               	movf	setDimmerLights_Trigger@lights,w
 15576  1F47  319D  25B9         	fcall	_DimmerLightsPointSelect
 15577                           
 15578                           ;Dimmer_B1.c: 769: DimmerLights->Trigger = 1;
 15579  1F49  0020               	movlb	0	; select bank0
 15580  1F4A  086F               	movf	_DimmerLights,w
 15581  1F4B  3E08               	addlw	8
 15582  1F4C  0086               	movwf	6
 15583  1F4D  3001               	movlw	1	; select bank2/3
 15584  1F4E  0087               	movwf	7
 15585  1F4F  1501               	bsf	1,2
 15586                           
 15587                           ;Dimmer_B1.c: 770: DimmerLights->Switch = command == 1 ? 1 : 0;
 15588  1F50  0822               	movf	setDimmerLights_Trigger@command,w
 15589  1F51  3A01               	xorlw	1
 15590  1F52  3000               	movlw	0
 15591  1F53  1903               	skipnz
 15592  1F54  3001               	movlw	1
 15593  1F55  00A3               	movwf	??_setDimmerLights_Trigger
 15594  1F56  086F               	movf	_DimmerLights,w
 15595  1F57  3E08               	addlw	8
 15596  1F58  0086               	movwf	6
 15597  1F59  3001               	movlw	1	; select bank2/3
 15598  1F5A  0087               	movwf	7
 15599  1F5B  0DA3               	rlf	??_setDimmerLights_Trigger,f
 15600  1F5C  0801               	movf	1,w
 15601  1F5D  0623               	xorwf	??_setDimmerLights_Trigger,w
 15602  1F5E  39FD               	andlw	-3
 15603  1F5F  0623               	xorwf	??_setDimmerLights_Trigger,w
 15604  1F60  0081               	movwf	1
 15605  1F61  0008               	return
 15606  1F62                     __end_of_setDimmerLights_Trigger:	
 15607                           
 15608                           	psect	text97
 15609  0926                     __ptext97:	
 15610 ;; *************** function _setDelayOff_GO *****************
 15611 ;; Defined at:
 15612 ;;		line 83 in file "../src/DelayOff_B1.c"
 15613 ;; Parameters:    Size  Location     Type
 15614 ;;  sw              1    wreg     unsigned char 
 15615 ;;  command         1   10[BANK0 ] unsigned char 
 15616 ;;  value           1   11[BANK0 ] unsigned char 
 15617 ;; Auto vars:     Size  Location     Type
 15618 ;;  sw              1   14[BANK0 ] unsigned char 
 15619 ;; Return value:  Size  Location     Type
 15620 ;;		None               void
 15621 ;; Registers used:
 15622 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15623 ;; Tracked objects:
 15624 ;;		On entry : 0/0
 15625 ;;		On exit  : 0/0
 15626 ;;		Unchanged: 0/0
 15627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15628 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15629 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15630 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15631 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15632 ;;Total ram usage:        5 bytes
 15633 ;; Hardware stack levels used:    1
 15634 ;; Hardware stack levels required when called:    7
 15635 ;; This function calls:
 15636 ;;		_DelayOffPointSelect
 15637 ;;		_DelayTimejudge
 15638 ;; This function is called by:
 15639 ;;		_setDimmerLights_SwOff
 15640 ;;		_setRFSW_Control
 15641 ;; This function uses a non-reentrant model
 15642 ;;
 15643                           
 15644                           
 15645                           ;psect for function _setDelayOff_GO
 15646  0926                     _setDelayOff_GO:	
 15647                           
 15648                           ;incstack = 0
 15649                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15650                           ;setDelayOff_GO@sw stored from wreg
 15651  0926  0020               	movlb	0	; select bank0
 15652  0927  00AE               	movwf	setDelayOff_GO@sw
 15653                           
 15654                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 15655  0928  082E               	movf	setDelayOff_GO@sw,w
 15656  0929  319E  262D  3189   	fcall	_DelayOffPointSelect
 15657                           
 15658                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 15659  092C  0020               	movlb	0	; select bank0
 15660  092D  082A               	movf	setDelayOff_GO@command,w
 15661  092E  3A01               	xorlw	1
 15662  092F  3000               	movlw	0
 15663  0930  1903               	skipnz
 15664  0931  3001               	movlw	1
 15665  0932  00AC               	movwf	??_setDelayOff_GO
 15666  0933  0878               	movf	_DelayOff,w
 15667  0934  0086               	movwf	6
 15668  0935  3001               	movlw	1	; select bank2/3
 15669  0936  0087               	movwf	7
 15670  0937  0DAC               	rlf	??_setDelayOff_GO,f
 15671  0938  0801               	movf	1,w
 15672  0939  062C               	xorwf	??_setDelayOff_GO,w
 15673  093A  39FD               	andlw	-3
 15674  093B  062C               	xorwf	??_setDelayOff_GO,w
 15675  093C  0081               	movwf	1
 15676                           
 15677                           ;DelayOff_B1.c: 89: if (command == 1) {
 15678  093D  082A               	movf	setDelayOff_GO@command,w
 15679  093E  3A01               	xorlw	1
 15680  093F  1D03               	skipz
 15681  0940  296B               	goto	l6209
 15682                           
 15683                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 15684  0941  082B               	movf	setDelayOff_GO@value,w
 15685  0942  3191  21A4  3189   	fcall	_DelayTimejudge
 15686  0945  0020               	movlb	0	; select bank0
 15687  0946  00AC               	movwf	??_setDelayOff_GO
 15688  0947  0A78               	incf	_DelayOff,w
 15689  0948  0086               	movwf	6
 15690  0949  3001               	movlw	1	; select bank2/3
 15691  094A  0087               	movwf	7
 15692  094B  082C               	movf	??_setDelayOff_GO,w
 15693  094C  0081               	movwf	1
 15694                           
 15695                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 15696  094D  300F               	movlw	15
 15697  094E  052B               	andwf	setDelayOff_GO@value,w
 15698  094F  00AC               	movwf	??_setDelayOff_GO
 15699  0950  082C               	movf	??_setDelayOff_GO,w
 15700  0951  3A05               	xorlw	5
 15701  0952  1903               	skipnz
 15702  0953  2958               	goto	l6203
 15703  0954  082B               	movf	setDelayOff_GO@value,w
 15704  0955  390F               	andlw	15
 15705  0956  1D03               	btfss	3,2
 15706  0957  295E               	goto	l6207
 15707  0958                     l6203:	
 15708  0958  3026               	movlw	38
 15709  0959  022B               	subwf	setDelayOff_GO@value,w
 15710  095A  1803               	skipnc
 15711  095B  295E               	goto	l6207
 15712                           
 15713                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
 15714  095C  082B               	movf	setDelayOff_GO@value,w
 15715  095D  295F               	goto	L8
 15716  095E                     l6207:	
 15717                           ;DelayOff_B1.c: 93: } else {
 15718                           
 15719                           
 15720                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
 15721  095E  3005               	movlw	5
 15722  095F                     L8:	
 15723  095F  00AC               	movwf	??_setDelayOff_GO
 15724  0960  082E               	movf	setDelayOff_GO@sw,w
 15725  0961  3E1A               	addlw	26
 15726  0962  076E               	addwf	_product,w
 15727  0963  00AD               	movwf	??_setDelayOff_GO+1
 15728  0964  082D               	movf	??_setDelayOff_GO+1,w
 15729  0965  0086               	movwf	6
 15730  0966  3002               	movlw	2	; select bank4/5
 15731  0967  0087               	movwf	7
 15732  0968  082C               	movf	??_setDelayOff_GO,w
 15733  0969  0081               	movwf	1
 15734                           
 15735                           ;DelayOff_B1.c: 95: }
 15736                           ;DelayOff_B1.c: 96: } else {
 15737  096A  2974               	goto	l6211
 15738  096B                     l6209:	
 15739                           
 15740                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
 15741  096B  082E               	movf	setDelayOff_GO@sw,w
 15742  096C  3E1A               	addlw	26
 15743  096D  076E               	addwf	_product,w
 15744  096E  00AC               	movwf	??_setDelayOff_GO
 15745  096F  082C               	movf	??_setDelayOff_GO,w
 15746  0970  0086               	movwf	6
 15747  0971  3002               	movlw	2	; select bank4/5
 15748  0972  0087               	movwf	7
 15749  0973  0181               	clrf	1
 15750  0974                     l6211:	
 15751                           
 15752                           ;DelayOff_B1.c: 98: }
 15753                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 15754  0974  0878               	movf	_DelayOff,w
 15755  0975  3E02               	addlw	2
 15756  0976  0086               	movwf	6
 15757  0977  3001               	movlw	1	; select bank2/3
 15758  0978  0087               	movwf	7
 15759  0979  3000               	movlw	0
 15760  097A  3FC0               	movwi [0]fsr1
 15761  097B  3FC1               	movwi [1]fsr1
 15762                           
 15763                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 15764  097C  0878               	movf	_DelayOff,w
 15765  097D  3E04               	addlw	4
 15766  097E  0086               	movwf	6
 15767  097F  3001               	movlw	1	; select bank2/3
 15768  0980  0087               	movwf	7
 15769  0981  0181               	clrf	1
 15770  0982  0008               	return
 15771  0983                     __end_of_setDelayOff_GO:	
 15772                           
 15773                           	psect	text98
 15774  11A4                     __ptext98:	
 15775 ;; *************** function _DelayTimejudge *****************
 15776 ;; Defined at:
 15777 ;;		line 112 in file "../src/DelayOff_B1.c"
 15778 ;; Parameters:    Size  Location     Type
 15779 ;;  value           1    wreg     unsigned char 
 15780 ;; Auto vars:     Size  Location     Type
 15781 ;;  value           1    9[BANK0 ] unsigned char 
 15782 ;;  k               1    8[BANK0 ] unsigned char 
 15783 ;;  j               1    7[BANK0 ] unsigned char 
 15784 ;;  i               1    6[BANK0 ] unsigned char 
 15785 ;; Return value:  Size  Location     Type
 15786 ;;                  1    wreg      unsigned char 
 15787 ;; Registers used:
 15788 ;;		wreg, status,2, status,0, pclath, cstack
 15789 ;; Tracked objects:
 15790 ;;		On entry : 0/0
 15791 ;;		On exit  : 0/0
 15792 ;;		Unchanged: 0/0
 15793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15795 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15796 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15797 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15798 ;;Total ram usage:        6 bytes
 15799 ;; Hardware stack levels used:    1
 15800 ;; Hardware stack levels required when called:    6
 15801 ;; This function calls:
 15802 ;;		___bmul
 15803 ;; This function is called by:
 15804 ;;		_setDelayOff_GO
 15805 ;; This function uses a non-reentrant model
 15806 ;;
 15807                           
 15808                           
 15809                           ;psect for function _DelayTimejudge
 15810  11A4                     _DelayTimejudge:	
 15811                           
 15812                           ;incstack = 0
 15813                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 15814                           ;DelayTimejudge@value stored from wreg
 15815  11A4  0020               	movlb	0	; select bank0
 15816  11A5  00A9               	movwf	DelayTimejudge@value
 15817                           
 15818                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 15819  11A6  3005               	movlw	5
 15820  11A7  00A4               	movwf	??_DelayTimejudge
 15821  11A8  0824               	movf	??_DelayTimejudge,w
 15822  11A9  00A6               	movwf	DelayTimejudge@i
 15823  11AA  01A7               	clrf	DelayTimejudge@j
 15824  11AB  01A8               	clrf	DelayTimejudge@k
 15825                           
 15826                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 15827  11AC  3031               	movlw	49
 15828  11AD  0229               	subwf	DelayTimejudge@value,w
 15829  11AE  1803               	skipnc
 15830  11AF  29CC               	goto	l6101
 15831                           
 15832                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 15833  11B0  0829               	movf	DelayTimejudge@value,w
 15834  11B1  390F               	andlw	15
 15835  11B2  00A4               	movwf	??_DelayTimejudge
 15836  11B3  0824               	movf	??_DelayTimejudge,w
 15837  11B4  00A7               	movwf	DelayTimejudge@j
 15838                           
 15839                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 15840  11B5  0829               	movf	DelayTimejudge@value,w
 15841  11B6  00A4               	movwf	??_DelayTimejudge
 15842  11B7  3004               	movlw	4
 15843  11B8                     u4945:	
 15844  11B8  36A4               	lsrf	??_DelayTimejudge,f
 15845  11B9  0B89               	decfsz	9,f
 15846  11BA  29B8               	goto	u4945
 15847  11BB  0824               	movf	??_DelayTimejudge,w
 15848  11BC  390F               	andlw	15
 15849  11BD  00A5               	movwf	??_DelayTimejudge+1
 15850  11BE  0825               	movf	??_DelayTimejudge+1,w
 15851  11BF  00A8               	movwf	DelayTimejudge@k
 15852                           
 15853                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 15854  11C0  300A               	movlw	10
 15855  11C1  00A4               	movwf	??_DelayTimejudge
 15856  11C2  0824               	movf	??_DelayTimejudge,w
 15857  11C3  00A0               	movwf	___bmul@multiplicand
 15858  11C4  0828               	movf	DelayTimejudge@k,w
 15859  11C5  319D  2583         	fcall	___bmul
 15860  11C7  0020               	movlb	0	; select bank0
 15861  11C8  0727               	addwf	DelayTimejudge@j,w
 15862  11C9  00A5               	movwf	??_DelayTimejudge+1
 15863  11CA  0825               	movf	??_DelayTimejudge+1,w
 15864  11CB  00A6               	movwf	DelayTimejudge@i
 15865  11CC                     l6101:	
 15866                           
 15867                           ;DelayOff_B1.c: 118: }
 15868                           ;DelayOff_B1.c: 139: return i;
 15869  11CC  0826               	movf	DelayTimejudge@i,w
 15870  11CD  0008               	return
 15871  11CE                     __end_of_DelayTimejudge:	
 15872                           
 15873                           	psect	text99
 15874  1D83                     __ptext99:	
 15875 ;; *************** function ___bmul *****************
 15876 ;; Defined at:
 15877 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 15878 ;; Parameters:    Size  Location     Type
 15879 ;;  multiplier      1    wreg     unsigned char 
 15880 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 15881 ;; Auto vars:     Size  Location     Type
 15882 ;;  multiplier      1    3[BANK0 ] unsigned char 
 15883 ;;  product         1    2[BANK0 ] unsigned char 
 15884 ;; Return value:  Size  Location     Type
 15885 ;;                  1    wreg      unsigned char 
 15886 ;; Registers used:
 15887 ;;		wreg, status,2, status,0
 15888 ;; Tracked objects:
 15889 ;;		On entry : 0/0
 15890 ;;		On exit  : 0/0
 15891 ;;		Unchanged: 0/0
 15892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15893 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15894 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15895 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15896 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15897 ;;Total ram usage:        4 bytes
 15898 ;; Hardware stack levels used:    1
 15899 ;; Hardware stack levels required when called:    5
 15900 ;; This function calls:
 15901 ;;		Nothing
 15902 ;; This function is called by:
 15903 ;;		_DelayTimejudge
 15904 ;; This function uses a non-reentrant model
 15905 ;;
 15906                           
 15907                           
 15908                           ;psect for function ___bmul
 15909  1D83                     ___bmul:	
 15910                           
 15911                           ;incstack = 0
 15912                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 15913                           ;___bmul@multiplier stored from wreg
 15914  1D83  0020               	movlb	0	; select bank0
 15915  1D84  00A3               	movwf	___bmul@multiplier
 15916  1D85  01A2               	clrf	___bmul@product
 15917  1D86                     l5839:	
 15918  1D86  1C23               	btfss	___bmul@multiplier,0
 15919  1D87  2D8C               	goto	l5843
 15920  1D88  0820               	movf	___bmul@multiplicand,w
 15921  1D89  00A1               	movwf	??___bmul
 15922  1D8A  0821               	movf	??___bmul,w
 15923  1D8B  07A2               	addwf	___bmul@product,f
 15924  1D8C                     l5843:	
 15925  1D8C  1003               	clrc
 15926  1D8D  0DA0               	rlf	___bmul@multiplicand,f
 15927  1D8E  1003               	clrc
 15928  1D8F  0CA3               	rrf	___bmul@multiplier,f
 15929  1D90  08A3               	movf	___bmul@multiplier,f
 15930  1D91  1D03               	skipz
 15931  1D92  2D86               	goto	l5839
 15932  1D93  0822               	movf	___bmul@product,w
 15933  1D94  0008               	return
 15934  1D95                     __end_of___bmul:	
 15935                           
 15936                           	psect	text100
 15937  1D1D                     __ptext100:	
 15938 ;; *************** function _getDelayOff_GO *****************
 15939 ;; Defined at:
 15940 ;;		line 105 in file "../src/DelayOff_B1.c"
 15941 ;; Parameters:    Size  Location     Type
 15942 ;;  sw              1    wreg     unsigned char 
 15943 ;; Auto vars:     Size  Location     Type
 15944 ;;  sw              1    2[BANK0 ] unsigned char 
 15945 ;;  go              1    3[BANK0 ] unsigned char 
 15946 ;; Return value:  Size  Location     Type
 15947 ;;                  1    wreg      unsigned char 
 15948 ;; Registers used:
 15949 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15950 ;; Tracked objects:
 15951 ;;		On entry : 0/0
 15952 ;;		On exit  : 0/0
 15953 ;;		Unchanged: 0/0
 15954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15956 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15958 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15959 ;;Total ram usage:        2 bytes
 15960 ;; Hardware stack levels used:    1
 15961 ;; Hardware stack levels required when called:    6
 15962 ;; This function calls:
 15963 ;;		_DelayOffPointSelect
 15964 ;; This function is called by:
 15965 ;;		_setDimmerLights_SwOff
 15966 ;;		_setRFSW_Control
 15967 ;; This function uses a non-reentrant model
 15968 ;;
 15969                           
 15970                           
 15971                           ;psect for function _getDelayOff_GO
 15972  1D1D                     _getDelayOff_GO:	
 15973                           
 15974                           ;incstack = 0
 15975                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15976                           ;getDelayOff_GO@sw stored from wreg
 15977  1D1D  0020               	movlb	0	; select bank0
 15978  1D1E  00A2               	movwf	getDelayOff_GO@sw
 15979                           
 15980                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 15981  1D1F  0822               	movf	getDelayOff_GO@sw,w
 15982  1D20  319E  262D         	fcall	_DelayOffPointSelect
 15983                           
 15984                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 15985  1D22  0878               	movf	_DelayOff,w
 15986  1D23  0086               	movwf	6
 15987  1D24  3001               	movlw	1	; select bank2/3
 15988  1D25  0087               	movwf	7
 15989  1D26  3000               	movlw	0
 15990  1D27  1881               	btfsc	1,1
 15991  1D28  3001               	movlw	1
 15992  1D29  0020               	movlb	0	; select bank0
 15993  1D2A  00A3               	movwf	getDelayOff_GO@go
 15994                           
 15995                           ;DelayOff_B1.c: 108: return go;
 15996  1D2B  0823               	movf	getDelayOff_GO@go,w
 15997  1D2C  0008               	return
 15998  1D2D                     __end_of_getDelayOff_GO:	
 15999                           
 16000                           	psect	text101
 16001  1D0D                     __ptext101:	
 16002 ;; *************** function _getDimmerLights_Status *****************
 16003 ;; Defined at:
 16004 ;;		line 445 in file "../src/Dimmer_B1.c"
 16005 ;; Parameters:    Size  Location     Type
 16006 ;;  lights          1    wreg     unsigned char 
 16007 ;; Auto vars:     Size  Location     Type
 16008 ;;  lights          1    2[BANK0 ] unsigned char 
 16009 ;;  status          1    3[BANK0 ] unsigned char 
 16010 ;; Return value:  Size  Location     Type
 16011 ;;                  1    wreg      unsigned char 
 16012 ;; Registers used:
 16013 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16014 ;; Tracked objects:
 16015 ;;		On entry : 0/0
 16016 ;;		On exit  : 0/0
 16017 ;;		Unchanged: 0/0
 16018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16020 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16022 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16023 ;;Total ram usage:        2 bytes
 16024 ;; Hardware stack levels used:    1
 16025 ;; Hardware stack levels required when called:    6
 16026 ;; This function calls:
 16027 ;;		_DimmerLightsPointSelect
 16028 ;; This function is called by:
 16029 ;;		_setDimmerLights_ErrorClose
 16030 ;;		_setRFSW_Control
 16031 ;;		_setRFSW_AdjControl
 16032 ;;		_getMain_LightsStatus
 16033 ;; This function uses a non-reentrant model
 16034 ;;
 16035                           
 16036                           
 16037                           ;psect for function _getDimmerLights_Status
 16038  1D0D                     _getDimmerLights_Status:	
 16039                           
 16040                           ;incstack = 0
 16041                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16042                           ;getDimmerLights_Status@lights stored from wreg
 16043  1D0D  0020               	movlb	0	; select bank0
 16044  1D0E  00A2               	movwf	getDimmerLights_Status@lights
 16045                           
 16046                           ;Dimmer_B1.c: 446: DimmerLightsPointSelect(lights);
 16047  1D0F  0822               	movf	getDimmerLights_Status@lights,w
 16048  1D10  319D  25B9         	fcall	_DimmerLightsPointSelect
 16049                           
 16050                           ;Dimmer_B1.c: 447: char status = DimmerLights->Status == 1 ? 1 : 0;
 16051  1D12  0020               	movlb	0	; select bank0
 16052  1D13  086F               	movf	_DimmerLights,w
 16053  1D14  0086               	movwf	6
 16054  1D15  3001               	movlw	1	; select bank2/3
 16055  1D16  0087               	movwf	7
 16056  1D17  3000               	movlw	0
 16057  1D18  1A81               	btfsc	1,5
 16058  1D19  3001               	movlw	1
 16059  1D1A  00A3               	movwf	getDimmerLights_Status@status
 16060                           
 16061                           ;Dimmer_B1.c: 448: return status;
 16062  1D1B  0823               	movf	getDimmerLights_Status@status,w
 16063  1D1C  0008               	return
 16064  1D1D                     __end_of_getDimmerLights_Status:	
 16065                           
 16066                           	psect	text102
 16067  1DB9                     __ptext102:	
 16068 ;; *************** function _DimmerLightsPointSelect *****************
 16069 ;; Defined at:
 16070 ;;		line 310 in file "../src/Dimmer_B1.c"
 16071 ;; Parameters:    Size  Location     Type
 16072 ;;  lights          1    wreg     unsigned char 
 16073 ;; Auto vars:     Size  Location     Type
 16074 ;;  lights          1    1[BANK0 ] unsigned char 
 16075 ;; Return value:  Size  Location     Type
 16076 ;;		None               void
 16077 ;; Registers used:
 16078 ;;		wreg
 16079 ;; Tracked objects:
 16080 ;;		On entry : 0/0
 16081 ;;		On exit  : 0/0
 16082 ;;		Unchanged: 0/0
 16083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16085 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16086 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16087 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16088 ;;Total ram usage:        2 bytes
 16089 ;; Hardware stack levels used:    1
 16090 ;; Hardware stack levels required when called:    5
 16091 ;; This function calls:
 16092 ;;		Nothing
 16093 ;; This function is called by:
 16094 ;;		_setDimmerLights_Initialization
 16095 ;;		_setDimmerLights_Main
 16096 ;;		_getDimmerLights_Status
 16097 ;;		_setDimmerLights_SwOn
 16098 ;;		_setDimmerLights_SwOff
 16099 ;;		_setDimmerLights_AdjControl
 16100 ;;		_setDimmerLights_ErrorClose
 16101 ;;		_setDimmerLights
 16102 ;;		_setDimmerLights_Adj
 16103 ;;		_setDimmerLights_AdjRF
 16104 ;;		_setDimmerLights_Trigger
 16105 ;;		_setDimmerLights_TriggerAdj
 16106 ;;		_setDimmerLights_Status
 16107 ;;		_setDimmerLights_GO
 16108 ;;		_setDimmerLights_MaxmumValue
 16109 ;; This function uses a non-reentrant model
 16110 ;;
 16111                           
 16112                           
 16113                           ;psect for function _DimmerLightsPointSelect
 16114  1DB9                     _DimmerLightsPointSelect:	
 16115                           
 16116                           ;incstack = 0
 16117                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16118                           ;DimmerLightsPointSelect@lights stored from wreg
 16119  1DB9  0020               	movlb	0	; select bank0
 16120  1DBA  00A1               	movwf	DimmerLightsPointSelect@lights
 16121                           
 16122                           ;Dimmer_B1.c: 312: if (lights == 1) {
 16123  1DBB  0821               	movf	DimmerLightsPointSelect@lights,w
 16124  1DBC  3A01               	xorlw	1
 16125  1DBD  1D03               	skipz
 16126  1DBE  2DC3               	goto	l767
 16127                           
 16128                           ;Dimmer_B1.c: 313: DimmerLights = &DimmerLights1;
 16129  1DBF  30A0               	movlw	_DimmerLights1& (0+255)
 16130  1DC0  00A0               	movwf	??_DimmerLightsPointSelect
 16131  1DC1  0820               	movf	??_DimmerLightsPointSelect,w
 16132  1DC2  00EF               	movwf	_DimmerLights
 16133  1DC3                     l767:	
 16134                           
 16135                           ;Dimmer_B1.c: 314: }
 16136                           ;Dimmer_B1.c: 317: if (lights == 2) {
 16137  1DC3  0821               	movf	DimmerLightsPointSelect@lights,w
 16138  1DC4  3A02               	xorlw	2
 16139  1DC5  1D03               	skipz
 16140  1DC6  0008               	return
 16141                           
 16142                           ;Dimmer_B1.c: 318: DimmerLights = &DimmerLights2;
 16143  1DC7  30AF               	movlw	_DimmerLights2& (0+255)
 16144  1DC8  00A0               	movwf	??_DimmerLightsPointSelect
 16145  1DC9  0820               	movf	??_DimmerLightsPointSelect,w
 16146  1DCA  00EF               	movwf	_DimmerLights
 16147  1DCB  0008               	return
 16148  1DCC                     __end_of_DimmerLightsPointSelect:	
 16149                           
 16150                           	psect	text103
 16151  174E                     __ptext103:	
 16152 ;; *************** function _setBuz *****************
 16153 ;; Defined at:
 16154 ;;		line 22 in file "../src/Buzzer_B1.c"
 16155 ;; Parameters:    Size  Location     Type
 16156 ;;  count           1    wreg     unsigned char 
 16157 ;;  time            2    9[BANK0 ] int 
 16158 ;; Auto vars:     Size  Location     Type
 16159 ;;  count           1   12[BANK0 ] unsigned char 
 16160 ;; Return value:  Size  Location     Type
 16161 ;;		None               void
 16162 ;; Registers used:
 16163 ;;		wreg, status,2, status,0, pclath, cstack
 16164 ;; Tracked objects:
 16165 ;;		On entry : 0/0
 16166 ;;		On exit  : 0/0
 16167 ;;		Unchanged: 0/0
 16168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16169 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16170 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16171 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16172 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16173 ;;Total ram usage:        4 bytes
 16174 ;; Hardware stack levels used:    1
 16175 ;; Hardware stack levels required when called:    6
 16176 ;; This function calls:
 16177 ;;		___awdiv
 16178 ;; This function is called by:
 16179 ;;		_DlyOff_Main
 16180 ;;		_setDimmerLights_Main
 16181 ;;		_setDimmerLights_SwOn
 16182 ;;		_setTemp_Main
 16183 ;;		_setLog_Code
 16184 ;;		_setControl_Lights_Table
 16185 ;;		_setRFSW_Control
 16186 ;;		_setSw_Main
 16187 ;;		_my_MainTimer
 16188 ;;		_setMain_Exception
 16189 ;; This function uses a non-reentrant model
 16190 ;;
 16191                           
 16192                           
 16193                           ;psect for function _setBuz
 16194  174E                     _setBuz:	
 16195                           
 16196                           ;incstack = 0
 16197                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16198                           ;setBuz@count stored from wreg
 16199  174E  0020               	movlb	0	; select bank0
 16200  174F  00AC               	movwf	setBuz@count
 16201                           
 16202                           ;Buzzer_B1.c: 23: time /= 10;
 16203  1750  300A               	movlw	10
 16204  1751  00A0               	movwf	___awdiv@divisor
 16205  1752  3000               	movlw	0
 16206  1753  00A1               	movwf	___awdiv@divisor+1
 16207  1754  082A               	movf	setBuz@time+1,w
 16208  1755  01A3               	clrf	___awdiv@dividend+1
 16209  1756  07A3               	addwf	___awdiv@dividend+1,f
 16210  1757  0829               	movf	setBuz@time,w
 16211  1758  01A2               	clrf	___awdiv@dividend
 16212  1759  07A2               	addwf	___awdiv@dividend,f
 16213  175A  3196  26A2  3197   	fcall	___awdiv
 16214  175D  0020               	movlb	0	; select bank0
 16215  175E  0821               	movf	?___awdiv+1,w
 16216  175F  01AA               	clrf	setBuz@time+1
 16217  1760  07AA               	addwf	setBuz@time+1,f
 16218  1761  0820               	movf	?___awdiv,w
 16219  1762  01A9               	clrf	setBuz@time
 16220  1763  07A9               	addwf	setBuz@time,f
 16221                           
 16222                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16223  1764  0021               	movlb	1	; select bank1
 16224  1765  1C2F               	btfss	_Buz1^(0+128),0
 16225  1766  0008               	return
 16226                           
 16227                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16228  1767  18AF               	btfsc	_Buz1^(0+128),1
 16229  1768  2F7F               	goto	l96
 16230                           
 16231                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16232  1769  14AF               	bsf	_Buz1^(0+128),1
 16233                           
 16234                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16235  176A  01B0               	clrf	(_Buz1^(0+128)+1)
 16236  176B  01B1               	clrf	((_Buz1+1)^(0+128)+1)
 16237                           
 16238                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16239  176C  0020               	movlb	0	; select bank0
 16240  176D  082C               	movf	setBuz@count,w
 16241  176E  00AB               	movwf	??_setBuz
 16242  176F  082B               	movf	??_setBuz,w
 16243  1770  0021               	movlb	1	; select bank1
 16244  1771  00B2               	movwf	(_Buz1^(0+128)+3)
 16245                           
 16246                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16247  1772  0020               	movlb	0	; select bank0
 16248  1773  082A               	movf	setBuz@time+1,w
 16249  1774  0021               	movlb	1	; select bank1
 16250  1775  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 16251  1776  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 16252  1777  0020               	movlb	0	; select bank0
 16253  1778  0829               	movf	setBuz@time,w
 16254  1779  0021               	movlb	1	; select bank1
 16255  177A  01B5               	clrf	(_Buz1^(0+128)+6)
 16256  177B  07B5               	addwf	(_Buz1^(0+128)+6),f
 16257                           
 16258                           ;Buzzer_B1.c: 30: RB3 = 1;
 16259  177C  0020               	movlb	0	; select bank0
 16260  177D  158D               	bsf	13,3	;volatile
 16261                           
 16262                           ;Buzzer_B1.c: 31: } else {
 16263  177E  0008               	return
 16264  177F                     l96:	
 16265                           
 16266                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16267  177F  19AF               	btfsc	_Buz1^(0+128),3
 16268  1780  2F93               	goto	l98
 16269                           
 16270                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16271  1781  15AF               	bsf	_Buz1^(0+128),3
 16272                           
 16273                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16274  1782  0020               	movlb	0	; select bank0
 16275  1783  082C               	movf	setBuz@count,w
 16276  1784  00AB               	movwf	??_setBuz
 16277  1785  082B               	movf	??_setBuz,w
 16278  1786  0021               	movlb	1	; select bank1
 16279  1787  00B3               	movwf	(_Buz1^(0+128)+4)
 16280                           
 16281                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16282  1788  0020               	movlb	0	; select bank0
 16283  1789  082A               	movf	setBuz@time+1,w
 16284  178A  0021               	movlb	1	; select bank1
 16285  178B  01B8               	clrf	((_Buz1+1)^(0+128)+8)
 16286  178C  07B8               	addwf	((_Buz1+1)^(0+128)+8),f
 16287  178D  0020               	movlb	0	; select bank0
 16288  178E  0829               	movf	setBuz@time,w
 16289  178F  0021               	movlb	1	; select bank1
 16290  1790  01B7               	clrf	(_Buz1^(0+128)+8)
 16291  1791  07B7               	addwf	(_Buz1^(0+128)+8),f
 16292                           
 16293                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16294  1792  0008               	return
 16295  1793                     l98:	
 16296  1793  1A2F               	btfsc	_Buz1^(0+128),4
 16297  1794  0008               	return
 16298                           
 16299                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16300  1795  162F               	bsf	_Buz1^(0+128),4
 16301                           
 16302                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16303  1796  0020               	movlb	0	; select bank0
 16304  1797  082C               	movf	setBuz@count,w
 16305  1798  00AB               	movwf	??_setBuz
 16306  1799  082B               	movf	??_setBuz,w
 16307  179A  0021               	movlb	1	; select bank1
 16308  179B  00B4               	movwf	(_Buz1^(0+128)+5)
 16309                           
 16310                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16311  179C  0020               	movlb	0	; select bank0
 16312  179D  082A               	movf	setBuz@time+1,w
 16313  179E  0021               	movlb	1	; select bank1
 16314  179F  01BA               	clrf	((_Buz1+1)^(0+128)+10)
 16315  17A0  07BA               	addwf	((_Buz1+1)^(0+128)+10),f
 16316  17A1  0020               	movlb	0	; select bank0
 16317  17A2  0829               	movf	setBuz@time,w
 16318  17A3  0021               	movlb	1	; select bank1
 16319  17A4  01B9               	clrf	(_Buz1^(0+128)+10)
 16320  17A5  07B9               	addwf	(_Buz1^(0+128)+10),f
 16321  17A6  0008               	return
 16322  17A7                     __end_of_setBuz:	
 16323                           
 16324                           	psect	text104
 16325  16A2                     __ptext104:	
 16326 ;; *************** function ___awdiv *****************
 16327 ;; Defined at:
 16328 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16329 ;; Parameters:    Size  Location     Type
 16330 ;;  divisor         2    0[BANK0 ] int 
 16331 ;;  dividend        2    2[BANK0 ] int 
 16332 ;; Auto vars:     Size  Location     Type
 16333 ;;  quotient        2    7[BANK0 ] int 
 16334 ;;  sign            1    6[BANK0 ] unsigned char 
 16335 ;;  counter         1    5[BANK0 ] unsigned char 
 16336 ;; Return value:  Size  Location     Type
 16337 ;;                  2    0[BANK0 ] int 
 16338 ;; Registers used:
 16339 ;;		wreg, status,2, status,0
 16340 ;; Tracked objects:
 16341 ;;		On entry : 0/0
 16342 ;;		On exit  : 0/0
 16343 ;;		Unchanged: 0/0
 16344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16345 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16346 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16347 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16348 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16349 ;;Total ram usage:        9 bytes
 16350 ;; Hardware stack levels used:    1
 16351 ;; Hardware stack levels required when called:    5
 16352 ;; This function calls:
 16353 ;;		Nothing
 16354 ;; This function is called by:
 16355 ;;		_setBuz
 16356 ;; This function uses a non-reentrant model
 16357 ;;
 16358                           
 16359                           
 16360                           ;psect for function ___awdiv
 16361  16A2                     ___awdiv:	
 16362                           
 16363                           ;incstack = 0
 16364                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16365  16A2  0020               	movlb	0	; select bank0
 16366  16A3  01A6               	clrf	___awdiv@sign
 16367  16A4  1FA1               	btfss	___awdiv@divisor+1,7
 16368  16A5  2EAD               	goto	l6127
 16369  16A6  09A0               	comf	___awdiv@divisor,f
 16370  16A7  09A1               	comf	___awdiv@divisor+1,f
 16371  16A8  0AA0               	incf	___awdiv@divisor,f
 16372  16A9  1903               	skipnz
 16373  16AA  0AA1               	incf	___awdiv@divisor+1,f
 16374  16AB  01A6               	clrf	___awdiv@sign
 16375  16AC  0AA6               	incf	___awdiv@sign,f
 16376  16AD                     l6127:	
 16377  16AD  1FA3               	btfss	___awdiv@dividend+1,7
 16378  16AE  2EB8               	goto	l6133
 16379  16AF  09A2               	comf	___awdiv@dividend,f
 16380  16B0  09A3               	comf	___awdiv@dividend+1,f
 16381  16B1  0AA2               	incf	___awdiv@dividend,f
 16382  16B2  1903               	skipnz
 16383  16B3  0AA3               	incf	___awdiv@dividend+1,f
 16384  16B4  3001               	movlw	1
 16385  16B5  00A4               	movwf	??___awdiv
 16386  16B6  0824               	movf	??___awdiv,w
 16387  16B7  06A6               	xorwf	___awdiv@sign,f
 16388  16B8                     l6133:	
 16389  16B8  01A7               	clrf	___awdiv@quotient
 16390  16B9  01A8               	clrf	___awdiv@quotient+1
 16391  16BA  0821               	movf	___awdiv@divisor+1,w
 16392  16BB  0420               	iorwf	___awdiv@divisor,w
 16393  16BC  1903               	skipnz
 16394  16BD  2EE7               	goto	l6155
 16395  16BE  01A5               	clrf	___awdiv@counter
 16396  16BF  0AA5               	incf	___awdiv@counter,f
 16397  16C0                     l6143:	
 16398  16C0  1BA1               	btfsc	___awdiv@divisor+1,7
 16399  16C1  2ECC               	goto	l6145
 16400  16C2  3001               	movlw	1
 16401  16C3                     u5005:	
 16402  16C3  35A0               	lslf	___awdiv@divisor,f
 16403  16C4  0DA1               	rlf	___awdiv@divisor+1,f
 16404  16C5  0B89               	decfsz	9,f
 16405  16C6  2EC3               	goto	u5005
 16406  16C7  3001               	movlw	1
 16407  16C8  00A4               	movwf	??___awdiv
 16408  16C9  0824               	movf	??___awdiv,w
 16409  16CA  07A5               	addwf	___awdiv@counter,f
 16410  16CB  2EC0               	goto	l6143
 16411  16CC                     l6145:	
 16412  16CC  3001               	movlw	1
 16413  16CD                     u5025:	
 16414  16CD  35A7               	lslf	___awdiv@quotient,f
 16415  16CE  0DA8               	rlf	___awdiv@quotient+1,f
 16416  16CF  0B89               	decfsz	9,f
 16417  16D0  2ECD               	goto	u5025
 16418  16D1  0821               	movf	___awdiv@divisor+1,w
 16419  16D2  0223               	subwf	___awdiv@dividend+1,w
 16420  16D3  1D03               	skipz
 16421  16D4  2ED7               	goto	u5035
 16422  16D5  0820               	movf	___awdiv@divisor,w
 16423  16D6  0222               	subwf	___awdiv@dividend,w
 16424  16D7                     u5035:	
 16425  16D7  1C03               	skipc
 16426  16D8  2EDE               	goto	l6151
 16427  16D9  0820               	movf	___awdiv@divisor,w
 16428  16DA  02A2               	subwf	___awdiv@dividend,f
 16429  16DB  0821               	movf	___awdiv@divisor+1,w
 16430  16DC  3BA3               	subwfb	___awdiv@dividend+1,f
 16431  16DD  1427               	bsf	___awdiv@quotient,0
 16432  16DE                     l6151:	
 16433  16DE  3001               	movlw	1
 16434  16DF                     u5045:	
 16435  16DF  36A1               	lsrf	___awdiv@divisor+1,f
 16436  16E0  0CA0               	rrf	___awdiv@divisor,f
 16437  16E1  0B89               	decfsz	9,f
 16438  16E2  2EDF               	goto	u5045
 16439  16E3  3001               	movlw	1
 16440  16E4  02A5               	subwf	___awdiv@counter,f
 16441  16E5  1D03               	btfss	3,2
 16442  16E6  2ECC               	goto	l6145
 16443  16E7                     l6155:	
 16444  16E7  0826               	movf	___awdiv@sign,w
 16445  16E8  1903               	btfsc	3,2
 16446  16E9  2EEF               	goto	l6159
 16447  16EA  09A7               	comf	___awdiv@quotient,f
 16448  16EB  09A8               	comf	___awdiv@quotient+1,f
 16449  16EC  0AA7               	incf	___awdiv@quotient,f
 16450  16ED  1903               	skipnz
 16451  16EE  0AA8               	incf	___awdiv@quotient+1,f
 16452  16EF                     l6159:	
 16453  16EF  0828               	movf	___awdiv@quotient+1,w
 16454  16F0  01A1               	clrf	?___awdiv+1
 16455  16F1  07A1               	addwf	?___awdiv+1,f
 16456  16F2  0827               	movf	___awdiv@quotient,w
 16457  16F3  01A0               	clrf	?___awdiv
 16458  16F4  07A0               	addwf	?___awdiv,f
 16459  16F5  0008               	return
 16460  16F6                     __end_of___awdiv:	
 16461                           
 16462                           	psect	text105
 16463  1C21                     __ptext105:	
 16464 ;; *************** function _DelayOff_Initialization *****************
 16465 ;; Defined at:
 16466 ;;		line 26 in file "../src/DelayOff_B1.c"
 16467 ;; Parameters:    Size  Location     Type
 16468 ;;		None
 16469 ;; Auto vars:     Size  Location     Type
 16470 ;;		None
 16471 ;; Return value:  Size  Location     Type
 16472 ;;		None               void
 16473 ;; Registers used:
 16474 ;;		wreg, status,2, status,0, pclath, cstack
 16475 ;; Tracked objects:
 16476 ;;		On entry : 0/0
 16477 ;;		On exit  : 0/0
 16478 ;;		Unchanged: 0/0
 16479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16484 ;;Total ram usage:        0 bytes
 16485 ;; Hardware stack levels used:    1
 16486 ;; Hardware stack levels required when called:    7
 16487 ;; This function calls:
 16488 ;;		_DlyOff_Initialization
 16489 ;; This function is called by:
 16490 ;;		_main
 16491 ;; This function uses a non-reentrant model
 16492 ;;
 16493                           
 16494                           
 16495                           ;psect for function _DelayOff_Initialization
 16496  1C21                     _DelayOff_Initialization:	
 16497                           
 16498                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16499                           
 16500                           ;incstack = 0
 16501                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16502  1C21  3001               	movlw	1
 16503  1C22  319C  2400  319C   	fcall	_DlyOff_Initialization
 16504                           
 16505                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 16506  1C25  3002               	movlw	2
 16507  1C26  319C  2400         	fcall	_DlyOff_Initialization
 16508  1C28  0008               	return
 16509  1C29                     __end_of_DelayOff_Initialization:	
 16510                           
 16511                           	psect	text106
 16512  1C00                     __ptext106:	
 16513 ;; *************** function _DlyOff_Initialization *****************
 16514 ;; Defined at:
 16515 ;;		line 56 in file "../src/DelayOff_B1.c"
 16516 ;; Parameters:    Size  Location     Type
 16517 ;;  sw              1    wreg     unsigned char 
 16518 ;; Auto vars:     Size  Location     Type
 16519 ;;  sw              1    2[BANK0 ] unsigned char 
 16520 ;; Return value:  Size  Location     Type
 16521 ;;		None               void
 16522 ;; Registers used:
 16523 ;;		wreg, status,2, status,0, pclath, cstack
 16524 ;; Tracked objects:
 16525 ;;		On entry : 0/0
 16526 ;;		On exit  : 0/0
 16527 ;;		Unchanged: 0/0
 16528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16530 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16532 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16533 ;;Total ram usage:        1 bytes
 16534 ;; Hardware stack levels used:    1
 16535 ;; Hardware stack levels required when called:    6
 16536 ;; This function calls:
 16537 ;;		_DelayOffPointSelect
 16538 ;; This function is called by:
 16539 ;;		_DelayOff_Initialization
 16540 ;; This function uses a non-reentrant model
 16541 ;;
 16542                           
 16543                           
 16544                           ;psect for function _DlyOff_Initialization
 16545  1C00                     _DlyOff_Initialization:	
 16546                           
 16547                           ;incstack = 0
 16548                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16549                           ;DlyOff_Initialization@sw stored from wreg
 16550  1C00  0020               	movlb	0	; select bank0
 16551  1C01  00A2               	movwf	DlyOff_Initialization@sw
 16552                           
 16553                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16554  1C02  0822               	movf	DlyOff_Initialization@sw,w
 16555  1C03  319E  262D         	fcall	_DelayOffPointSelect
 16556  1C05  0008               	return
 16557  1C06                     __end_of_DlyOff_Initialization:	
 16558                           
 16559                           	psect	text107
 16560  1E2D                     __ptext107:	
 16561 ;; *************** function _DelayOffPointSelect *****************
 16562 ;; Defined at:
 16563 ;;		line 7 in file "../src/DelayOff_B1.c"
 16564 ;; Parameters:    Size  Location     Type
 16565 ;;  sw              1    wreg     unsigned char 
 16566 ;; Auto vars:     Size  Location     Type
 16567 ;;  sw              1    1[BANK0 ] unsigned char 
 16568 ;; Return value:  Size  Location     Type
 16569 ;;		None               void
 16570 ;; Registers used:
 16571 ;;		wreg
 16572 ;; Tracked objects:
 16573 ;;		On entry : 0/0
 16574 ;;		On exit  : 0/0
 16575 ;;		Unchanged: 0/0
 16576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16578 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16579 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16580 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16581 ;;Total ram usage:        2 bytes
 16582 ;; Hardware stack levels used:    1
 16583 ;; Hardware stack levels required when called:    5
 16584 ;; This function calls:
 16585 ;;		Nothing
 16586 ;; This function is called by:
 16587 ;;		_DlyOff_Initialization
 16588 ;;		_DlyOff_Main
 16589 ;;		_setDelayOff_GO
 16590 ;;		_getDelayOff_GO
 16591 ;; This function uses a non-reentrant model
 16592 ;;
 16593                           
 16594                           
 16595                           ;psect for function _DelayOffPointSelect
 16596  1E2D                     _DelayOffPointSelect:	
 16597                           
 16598                           ;incstack = 0
 16599                           ; Regs used in _DelayOffPointSelect: [wreg]
 16600                           ;DelayOffPointSelect@sw stored from wreg
 16601  1E2D  0020               	movlb	0	; select bank0
 16602  1E2E  00A1               	movwf	DelayOffPointSelect@sw
 16603                           
 16604                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16605  1E2F  0821               	movf	DelayOffPointSelect@sw,w
 16606  1E30  3A01               	xorlw	1
 16607  1E31  1D03               	skipz
 16608  1E32  2E38               	goto	l6085
 16609                           
 16610                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16611  1E33  30D0               	movlw	_DlySw1& (0+255)
 16612  1E34  00A0               	movwf	??_DelayOffPointSelect
 16613  1E35  0820               	movf	??_DelayOffPointSelect,w
 16614  1E36  00F8               	movwf	_DelayOff
 16615                           
 16616                           ;DelayOff_B1.c: 11: }
 16617  1E37  0008               	return
 16618  1E38                     l6085:	
 16619                           
 16620                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 16621  1E38  0821               	movf	DelayOffPointSelect@sw,w
 16622  1E39  3A02               	xorlw	2
 16623  1E3A  1D03               	skipz
 16624  1E3B  0008               	return
 16625                           
 16626                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 16627  1E3C  30D5               	movlw	_DlySw2& (0+255)
 16628  1E3D  00A0               	movwf	??_DelayOffPointSelect
 16629  1E3E  0820               	movf	??_DelayOffPointSelect,w
 16630  1E3F  00F8               	movwf	_DelayOff
 16631  1E40  0008               	return
 16632  1E41                     __end_of_DelayOffPointSelect:	
 16633                           
 16634                           	psect	text108
 16635  1E6A                     __ptext108:	
 16636 ;; *************** function _CC2500_PowerOnInitial *****************
 16637 ;; Defined at:
 16638 ;;		line 119 in file "../src/CC2500_B1.c"
 16639 ;; Parameters:    Size  Location     Type
 16640 ;;		None
 16641 ;; Auto vars:     Size  Location     Type
 16642 ;;		None
 16643 ;; Return value:  Size  Location     Type
 16644 ;;		None               void
 16645 ;; Registers used:
 16646 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16647 ;; Tracked objects:
 16648 ;;		On entry : 0/0
 16649 ;;		On exit  : 0/0
 16650 ;;		Unchanged: 0/0
 16651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16656 ;;Total ram usage:        0 bytes
 16657 ;; Hardware stack levels used:    1
 16658 ;; Hardware stack levels required when called:    8
 16659 ;; This function calls:
 16660 ;;		_CC2500_ClearRXFIFO
 16661 ;;		_CC2500_ClearTXFIFO
 16662 ;;		_CC2500_FrequencyCabr
 16663 ;;		_CC2500_InitPATable
 16664 ;;		_CC2500_InitSetREG
 16665 ;;		_CC2500_PowerRST
 16666 ;;		_CC2500_SIDLEMode
 16667 ;; This function is called by:
 16668 ;;		_main
 16669 ;; This function uses a non-reentrant model
 16670 ;;
 16671                           
 16672                           
 16673                           ;psect for function _CC2500_PowerOnInitial
 16674  1E6A                     _CC2500_PowerOnInitial:	
 16675                           
 16676                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 16677                           
 16678                           ;incstack = 0
 16679                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16680  1E6A  3194  2494  319E   	fcall	_CC2500_PowerRST
 16681                           
 16682                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 16683  1E6D  3191  217A  319E   	fcall	_CC2500_InitSetREG
 16684                           
 16685                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 16686  1E70  319F  2762  319E   	fcall	_CC2500_InitPATable
 16687                           
 16688                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 16689  1E73  319B  23EA  319E   	fcall	_CC2500_ClearTXFIFO
 16690                           
 16691                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 16692  1E76  319B  23E6  319E   	fcall	_CC2500_ClearRXFIFO
 16693                           
 16694                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 16695  1E79  319C  2471  319E   	fcall	_CC2500_FrequencyCabr
 16696                           
 16697                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 16698  1E7C  319B  23EE         	fcall	_CC2500_SIDLEMode
 16699  1E7E  0008               	return
 16700  1E7F                     __end_of_CC2500_PowerOnInitial:	
 16701                           
 16702                           	psect	text109
 16703  1BEE                     __ptext109:	
 16704 ;; *************** function _CC2500_SIDLEMode *****************
 16705 ;; Defined at:
 16706 ;;		line 209 in file "../src/CC2500_B1.c"
 16707 ;; Parameters:    Size  Location     Type
 16708 ;;		None
 16709 ;; Auto vars:     Size  Location     Type
 16710 ;;		None
 16711 ;; Return value:  Size  Location     Type
 16712 ;;		None               void
 16713 ;; Registers used:
 16714 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16715 ;; Tracked objects:
 16716 ;;		On entry : 0/0
 16717 ;;		On exit  : 0/0
 16718 ;;		Unchanged: 0/0
 16719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16724 ;;Total ram usage:        0 bytes
 16725 ;; Hardware stack levels used:    1
 16726 ;; Hardware stack levels required when called:    7
 16727 ;; This function calls:
 16728 ;;		_CC2500_WriteCommand
 16729 ;; This function is called by:
 16730 ;;		_CC2500_PowerOnInitial
 16731 ;; This function uses a non-reentrant model
 16732 ;;
 16733                           
 16734                           
 16735                           ;psect for function _CC2500_SIDLEMode
 16736  1BEE                     _CC2500_SIDLEMode:	
 16737                           
 16738                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 16739                           
 16740                           ;incstack = 0
 16741                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16742  1BEE  3036               	movlw	54
 16743  1BEF  319E  26C1         	fcall	_CC2500_WriteCommand
 16744  1BF1  0008               	return
 16745  1BF2                     __end_of_CC2500_SIDLEMode:	
 16746                           
 16747                           	psect	text110
 16748  1494                     __ptext110:	
 16749 ;; *************** function _CC2500_PowerRST *****************
 16750 ;; Defined at:
 16751 ;;		line 132 in file "../src/CC2500_B1.c"
 16752 ;; Parameters:    Size  Location     Type
 16753 ;;		None
 16754 ;; Auto vars:     Size  Location     Type
 16755 ;;		None
 16756 ;; Return value:  Size  Location     Type
 16757 ;;		None               void
 16758 ;; Registers used:
 16759 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16760 ;; Tracked objects:
 16761 ;;		On entry : 0/0
 16762 ;;		On exit  : 0/0
 16763 ;;		Unchanged: 0/0
 16764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16767 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16768 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16769 ;;Total ram usage:        1 bytes
 16770 ;; Hardware stack levels used:    1
 16771 ;; Hardware stack levels required when called:    6
 16772 ;; This function calls:
 16773 ;;		_CC2500_WriteByte
 16774 ;;		_DelayTime_1us
 16775 ;;		_Timeout_Counter
 16776 ;;		_set_TimeoutCleared
 16777 ;; This function is called by:
 16778 ;;		_CC2500_PowerOnInitial
 16779 ;; This function uses a non-reentrant model
 16780 ;;
 16781                           
 16782                           
 16783                           ;psect for function _CC2500_PowerRST
 16784  1494                     _CC2500_PowerRST:	
 16785                           
 16786                           ;CC2500_B1.c: 133: RC1 = 0;
 16787                           
 16788                           ;incstack = 0
 16789                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16790  1494  0020               	movlb	0	; select bank0
 16791  1495  108E               	bcf	14,1	;volatile
 16792                           
 16793                           ;CC2500_B1.c: 134: RC0 = 0;
 16794  1496  100E               	bcf	14,0	;volatile
 16795                           
 16796                           ;CC2500_B1.c: 135: RC4 = 1;
 16797  1497  160E               	bsf	14,4	;volatile
 16798                           
 16799                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 16800  1498  300A               	movlw	10
 16801  1499  00A0               	movwf	DelayTime_1us@count
 16802  149A  3000               	movlw	0
 16803  149B  00A1               	movwf	DelayTime_1us@count+1
 16804  149C  3191  2105  3194   	fcall	_DelayTime_1us
 16805                           
 16806                           ;CC2500_B1.c: 137: RC4 = 0;
 16807  149F  0020               	movlb	0	; select bank0
 16808  14A0  120E               	bcf	14,4	;volatile
 16809                           
 16810                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 16811  14A1  300A               	movlw	10
 16812  14A2  00A0               	movwf	DelayTime_1us@count
 16813  14A3  3000               	movlw	0
 16814  14A4  00A1               	movwf	DelayTime_1us@count+1
 16815  14A5  3191  2105  3194   	fcall	_DelayTime_1us
 16816                           
 16817                           ;CC2500_B1.c: 139: RC4 = 1;
 16818  14A8  0020               	movlb	0	; select bank0
 16819  14A9  160E               	bsf	14,4	;volatile
 16820                           
 16821                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 16822  14AA  3028               	movlw	40
 16823  14AB  00A0               	movwf	DelayTime_1us@count
 16824  14AC  3000               	movlw	0
 16825  14AD  00A1               	movwf	DelayTime_1us@count+1
 16826  14AE  3191  2105  3194   	fcall	_DelayTime_1us
 16827                           
 16828                           ;CC2500_B1.c: 141: RC4 = 0;
 16829  14B1  0020               	movlb	0	; select bank0
 16830  14B2  120E               	bcf	14,4	;volatile
 16831                           
 16832                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 16833  14B3  3030               	movlw	48
 16834  14B4  00A6               	movwf	??_CC2500_PowerRST
 16835  14B5  0826               	movf	??_CC2500_PowerRST,w
 16836  14B6  00FB               	movwf	_SPI0Buffer
 16837                           
 16838                           ;CC2500_B1.c: 143: while (RC2 == 1 && myMain.Timeout == 0) {
 16839  14B7  2CBB               	goto	l7063
 16840  14B8                     l7061:	
 16841                           
 16842                           ;CC2500_B1.c: 144: Timeout_Counter();
 16843  14B8  319E  2655  3194   	fcall	_Timeout_Counter
 16844  14BB                     l7063:	
 16845  14BB  0020               	movlb	0	; select bank0
 16846  14BC  1D0E               	btfss	14,2	;volatile
 16847  14BD  2CC1               	goto	l7067
 16848  14BE  0021               	movlb	1	; select bank1
 16849  14BF  1D2C               	btfss	(_myMain^(0+128)+12),2
 16850  14C0  2CB8               	goto	l7061
 16851  14C1                     l7067:	
 16852                           
 16853                           ;CC2500_B1.c: 145: };
 16854                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 16855  14C1  319B  23F6  3194   	fcall	_set_TimeoutCleared
 16856                           
 16857                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 16858  14C4  319E  2619  3194   	fcall	_CC2500_WriteByte
 16859                           
 16860                           ;CC2500_B1.c: 148: while (RC2 == 1 && myMain.Timeout == 0) {
 16861  14C7  2CCB               	goto	l7073
 16862  14C8                     l7071:	
 16863                           
 16864                           ;CC2500_B1.c: 149: Timeout_Counter();
 16865  14C8  319E  2655  3194   	fcall	_Timeout_Counter
 16866  14CB                     l7073:	
 16867  14CB  0020               	movlb	0	; select bank0
 16868  14CC  1D0E               	btfss	14,2	;volatile
 16869  14CD  2CD1               	goto	l7077
 16870  14CE  0021               	movlb	1	; select bank1
 16871  14CF  1D2C               	btfss	(_myMain^(0+128)+12),2
 16872  14D0  2CC8               	goto	l7071
 16873  14D1                     l7077:	
 16874                           
 16875                           ;CC2500_B1.c: 150: };
 16876                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 16877  14D1  319B  23F6         	fcall	_set_TimeoutCleared
 16878                           
 16879                           ;CC2500_B1.c: 152: RC0 = 0;
 16880  14D3  0020               	movlb	0	; select bank0
 16881  14D4  100E               	bcf	14,0	;volatile
 16882                           
 16883                           ;CC2500_B1.c: 153: RC4 = 1;
 16884  14D5  160E               	bsf	14,4	;volatile
 16885  14D6  0008               	return
 16886  14D7                     __end_of_CC2500_PowerRST:	
 16887                           
 16888                           	psect	text111
 16889  117A                     __ptext111:	
 16890 ;; *************** function _CC2500_InitSetREG *****************
 16891 ;; Defined at:
 16892 ;;		line 159 in file "../src/CC2500_B1.c"
 16893 ;; Parameters:    Size  Location     Type
 16894 ;;		None
 16895 ;; Auto vars:     Size  Location     Type
 16896 ;;  loop_c          1    8[BANK0 ] unsigned char 
 16897 ;;  temp2           1    7[BANK0 ] unsigned char 
 16898 ;;  temp1           1    6[BANK0 ] unsigned char 
 16899 ;; Return value:  Size  Location     Type
 16900 ;;		None               void
 16901 ;; Registers used:
 16902 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16903 ;; Tracked objects:
 16904 ;;		On entry : 0/0
 16905 ;;		On exit  : 0/0
 16906 ;;		Unchanged: 0/0
 16907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16909 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16910 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16911 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16912 ;;Total ram usage:        4 bytes
 16913 ;; Hardware stack levels used:    1
 16914 ;; Hardware stack levels required when called:    7
 16915 ;; This function calls:
 16916 ;;		_CC2500_WriteREG
 16917 ;; This function is called by:
 16918 ;;		_CC2500_PowerOnInitial
 16919 ;; This function uses a non-reentrant model
 16920 ;;
 16921                           
 16922                           
 16923                           ;psect for function _CC2500_InitSetREG
 16924  117A                     _CC2500_InitSetREG:	
 16925                           
 16926                           ;CC2500_B1.c: 160: unsigned char loop_c;
 16927                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 16928                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 16929                           
 16930                           ;incstack = 0
 16931                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16932  117A  0020               	movlb	0	; select bank0
 16933  117B  01A8               	clrf	CC2500_InitSetREG@loop_c
 16934  117C                     L9:	
 16935  117C  302F               	movlw	47
 16936  117D  0228               	subwf	CC2500_InitSetREG@loop_c,w
 16937  117E  1803               	btfsc	3,0
 16938  117F  0008               	return
 16939                           
 16940                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 16941  1180  0828               	movf	CC2500_InitSetREG@loop_c,w
 16942  1181  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 16943  1182  0084               	movwf	4
 16944  1183  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 16945  1184  1803               	skipnc
 16946  1185  3E01               	addlw	1
 16947  1186  0085               	movwf	5
 16948  1187  0800               	movf	0,w	;code access
 16949  1188  00A5               	movwf	??_CC2500_InitSetREG
 16950  1189  0825               	movf	??_CC2500_InitSetREG,w
 16951  118A  00A6               	movwf	CC2500_InitSetREG@temp1
 16952                           
 16953                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 16954  118B  0828               	movf	CC2500_InitSetREG@loop_c,w
 16955  118C  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 16956  118D  0084               	movwf	4
 16957  118E  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 16958  118F  1803               	skipnc
 16959  1190  3E01               	addlw	1
 16960  1191  0085               	movwf	5
 16961  1192  0800               	movf	0,w	;code access
 16962  1193  00A5               	movwf	??_CC2500_InitSetREG
 16963  1194  0825               	movf	??_CC2500_InitSetREG,w
 16964  1195  00A7               	movwf	CC2500_InitSetREG@temp2
 16965                           
 16966                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 16967  1196  0827               	movf	CC2500_InitSetREG@temp2,w
 16968  1197  00A5               	movwf	??_CC2500_InitSetREG
 16969  1198  0825               	movf	??_CC2500_InitSetREG,w
 16970  1199  00A2               	movwf	CC2500_WriteREG@value
 16971  119A  0826               	movf	CC2500_InitSetREG@temp1,w
 16972  119B  3190  207B  3191   	fcall	_CC2500_WriteREG
 16973  119E  3001               	movlw	1
 16974  119F  0020               	movlb	0	; select bank0
 16975  11A0  00A5               	movwf	??_CC2500_InitSetREG
 16976  11A1  0825               	movf	??_CC2500_InitSetREG,w
 16977  11A2  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 16978  11A3  297C               	goto	L9
 16979  11A4                     __end_of_CC2500_InitSetREG:	
 16980                           
 16981                           	psect	text112
 16982  1F62                     __ptext112:	
 16983 ;; *************** function _CC2500_InitPATable *****************
 16984 ;; Defined at:
 16985 ;;		line 174 in file "../src/CC2500_B1.c"
 16986 ;; Parameters:    Size  Location     Type
 16987 ;;		None
 16988 ;; Auto vars:     Size  Location     Type
 16989 ;;  loop_d          1    7[BANK0 ] unsigned char 
 16990 ;;  temp            1    6[BANK0 ] unsigned char 
 16991 ;; Return value:  Size  Location     Type
 16992 ;;		None               void
 16993 ;; Registers used:
 16994 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16995 ;; Tracked objects:
 16996 ;;		On entry : 0/0
 16997 ;;		On exit  : 0/0
 16998 ;;		Unchanged: 0/0
 16999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17001 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17002 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17003 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17004 ;;Total ram usage:        3 bytes
 17005 ;; Hardware stack levels used:    1
 17006 ;; Hardware stack levels required when called:    7
 17007 ;; This function calls:
 17008 ;;		_CC2500_WriteREG
 17009 ;; This function is called by:
 17010 ;;		_CC2500_PowerOnInitial
 17011 ;; This function uses a non-reentrant model
 17012 ;;
 17013                           
 17014                           
 17015                           ;psect for function _CC2500_InitPATable
 17016  1F62                     _CC2500_InitPATable:	
 17017                           
 17018                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17019                           ;CC2500_B1.c: 176: unsigned char temp;
 17020                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17021                           
 17022                           ;incstack = 0
 17023                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17024  1F62  0020               	movlb	0	; select bank0
 17025  1F63  01A7               	clrf	CC2500_InitPATable@loop_d
 17026  1F64                     L10:	
 17027  1F64  3008               	movlw	8
 17028  1F65  0227               	subwf	CC2500_InitPATable@loop_d,w
 17029  1F66  1803               	btfsc	3,0
 17030  1F67  0008               	return
 17031                           
 17032                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17033  1F68  0827               	movf	CC2500_InitPATable@loop_d,w
 17034  1F69  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17035  1F6A  0084               	movwf	4
 17036  1F6B  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17037  1F6C  1803               	skipnc
 17038  1F6D  3E01               	addlw	1
 17039  1F6E  0085               	movwf	5
 17040  1F6F  0800               	movf	0,w	;code access
 17041  1F70  00A5               	movwf	??_CC2500_InitPATable
 17042  1F71  0825               	movf	??_CC2500_InitPATable,w
 17043  1F72  00A6               	movwf	CC2500_InitPATable@temp
 17044                           
 17045                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17046  1F73  0826               	movf	CC2500_InitPATable@temp,w
 17047  1F74  00A5               	movwf	??_CC2500_InitPATable
 17048  1F75  0825               	movf	??_CC2500_InitPATable,w
 17049  1F76  00A2               	movwf	CC2500_WriteREG@value
 17050  1F77  303E               	movlw	62
 17051  1F78  3190  207B  319F   	fcall	_CC2500_WriteREG
 17052  1F7B  3001               	movlw	1
 17053  1F7C  0020               	movlb	0	; select bank0
 17054  1F7D  00A5               	movwf	??_CC2500_InitPATable
 17055  1F7E  0825               	movf	??_CC2500_InitPATable,w
 17056  1F7F  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17057  1F80  2F64               	goto	L10
 17058  1F81                     __end_of_CC2500_InitPATable:	
 17059                           
 17060                           	psect	text113
 17061  107B                     __ptext113:	
 17062 ;; *************** function _CC2500_WriteREG *****************
 17063 ;; Defined at:
 17064 ;;		line 251 in file "../src/CC2500_B1.c"
 17065 ;; Parameters:    Size  Location     Type
 17066 ;;  w_addr          1    wreg     unsigned char 
 17067 ;;  value           1    2[BANK0 ] unsigned char 
 17068 ;; Auto vars:     Size  Location     Type
 17069 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17070 ;; Return value:  Size  Location     Type
 17071 ;;		None               void
 17072 ;; Registers used:
 17073 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17074 ;; Tracked objects:
 17075 ;;		On entry : 0/0
 17076 ;;		On exit  : 0/0
 17077 ;;		Unchanged: 0/0
 17078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17079 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17080 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17081 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17082 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17083 ;;Total ram usage:        3 bytes
 17084 ;; Hardware stack levels used:    1
 17085 ;; Hardware stack levels required when called:    6
 17086 ;; This function calls:
 17087 ;;		_CC2500_WriteByte
 17088 ;;		_Timeout_Counter
 17089 ;;		_set_TimeoutCleared
 17090 ;; This function is called by:
 17091 ;;		_CC2500_InitSetREG
 17092 ;;		_CC2500_InitPATable
 17093 ;; This function uses a non-reentrant model
 17094 ;;
 17095                           
 17096                           
 17097                           ;psect for function _CC2500_WriteREG
 17098  107B                     _CC2500_WriteREG:	
 17099                           
 17100                           ;incstack = 0
 17101                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17102                           ;CC2500_WriteREG@w_addr stored from wreg
 17103  107B  0020               	movlb	0	; select bank0
 17104  107C  00A4               	movwf	CC2500_WriteREG@w_addr
 17105                           
 17106                           ;CC2500_B1.c: 252: RC4 = 0;
 17107  107D  120E               	bcf	14,4	;volatile
 17108                           
 17109                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17110  107E  0824               	movf	CC2500_WriteREG@w_addr,w
 17111  107F  00A3               	movwf	??_CC2500_WriteREG
 17112  1080  0823               	movf	??_CC2500_WriteREG,w
 17113  1081  00FB               	movwf	_SPI0Buffer
 17114                           
 17115                           ;CC2500_B1.c: 254: while (RC2 == 1 && myMain.Timeout == 0) {
 17116  1082  2886               	goto	l6713
 17117  1083                     l6711:	
 17118                           
 17119                           ;CC2500_B1.c: 255: Timeout_Counter();
 17120  1083  319E  2655  3190   	fcall	_Timeout_Counter
 17121  1086                     l6713:	
 17122  1086  0020               	movlb	0	; select bank0
 17123  1087  1D0E               	btfss	14,2	;volatile
 17124  1088  288C               	goto	l6717
 17125  1089  0021               	movlb	1	; select bank1
 17126  108A  1D2C               	btfss	(_myMain^(0+128)+12),2
 17127  108B  2883               	goto	l6711
 17128  108C                     l6717:	
 17129                           
 17130                           ;CC2500_B1.c: 256: };
 17131                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17132  108C  319B  23F6  3190   	fcall	_set_TimeoutCleared
 17133                           
 17134                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17135  108F  319E  2619  3190   	fcall	_CC2500_WriteByte
 17136                           
 17137                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17138  1092  0020               	movlb	0	; select bank0
 17139  1093  0822               	movf	CC2500_WriteREG@value,w
 17140  1094  00A3               	movwf	??_CC2500_WriteREG
 17141  1095  0823               	movf	??_CC2500_WriteREG,w
 17142  1096  00FB               	movwf	_SPI0Buffer
 17143                           
 17144                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17145  1097  319E  2619         	fcall	_CC2500_WriteByte
 17146                           
 17147                           ;CC2500_B1.c: 262: RC4 = 1;
 17148  1099  0020               	movlb	0	; select bank0
 17149  109A  160E               	bsf	14,4	;volatile
 17150  109B  0008               	return
 17151  109C                     __end_of_CC2500_WriteREG:	
 17152                           
 17153                           	psect	text114
 17154  1C71                     __ptext114:	
 17155 ;; *************** function _CC2500_FrequencyCabr *****************
 17156 ;; Defined at:
 17157 ;;		line 201 in file "../src/CC2500_B1.c"
 17158 ;; Parameters:    Size  Location     Type
 17159 ;;		None
 17160 ;; Auto vars:     Size  Location     Type
 17161 ;;		None
 17162 ;; Return value:  Size  Location     Type
 17163 ;;		None               void
 17164 ;; Registers used:
 17165 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17166 ;; Tracked objects:
 17167 ;;		On entry : 0/0
 17168 ;;		On exit  : 0/0
 17169 ;;		Unchanged: 0/0
 17170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17175 ;;Total ram usage:        0 bytes
 17176 ;; Hardware stack levels used:    1
 17177 ;; Hardware stack levels required when called:    7
 17178 ;; This function calls:
 17179 ;;		_CC2500_WriteCommand
 17180 ;;		_DelayTime_1us
 17181 ;; This function is called by:
 17182 ;;		_CC2500_PowerOnInitial
 17183 ;; This function uses a non-reentrant model
 17184 ;;
 17185                           
 17186                           
 17187                           ;psect for function _CC2500_FrequencyCabr
 17188  1C71                     _CC2500_FrequencyCabr:	
 17189                           
 17190                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17191                           
 17192                           ;incstack = 0
 17193                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17194  1C71  3033               	movlw	51
 17195  1C72  319E  26C1  319C   	fcall	_CC2500_WriteCommand
 17196                           
 17197                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17198  1C75  30E8               	movlw	232
 17199  1C76  0020               	movlb	0	; select bank0
 17200  1C77  00A0               	movwf	DelayTime_1us@count
 17201  1C78  3003               	movlw	3
 17202  1C79  00A1               	movwf	DelayTime_1us@count+1
 17203  1C7A  3191  2105         	fcall	_DelayTime_1us
 17204  1C7C  0008               	return
 17205  1C7D                     __end_of_CC2500_FrequencyCabr:	
 17206                           
 17207                           	psect	text115
 17208  1105                     __ptext115:	
 17209 ;; *************** function _DelayTime_1us *****************
 17210 ;; Defined at:
 17211 ;;		line 320 in file "../src/CC2500_B1.c"
 17212 ;; Parameters:    Size  Location     Type
 17213 ;;  count           2    0[BANK0 ] int 
 17214 ;; Auto vars:     Size  Location     Type
 17215 ;;  j               2    4[BANK0 ] unsigned int 
 17216 ;;  i               2    2[BANK0 ] unsigned int 
 17217 ;; Return value:  Size  Location     Type
 17218 ;;		None               void
 17219 ;; Registers used:
 17220 ;;		wreg, status,2
 17221 ;; Tracked objects:
 17222 ;;		On entry : 0/0
 17223 ;;		On exit  : 0/0
 17224 ;;		Unchanged: 0/0
 17225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17226 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17227 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17229 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17230 ;;Total ram usage:        6 bytes
 17231 ;; Hardware stack levels used:    1
 17232 ;; Hardware stack levels required when called:    5
 17233 ;; This function calls:
 17234 ;;		Nothing
 17235 ;; This function is called by:
 17236 ;;		_CC2500_PowerRST
 17237 ;;		_CC2500_FrequencyCabr
 17238 ;; This function uses a non-reentrant model
 17239 ;;
 17240                           
 17241                           
 17242                           ;psect for function _DelayTime_1us
 17243  1105                     _DelayTime_1us:	
 17244                           
 17245                           ;CC2500_B1.c: 321: unsigned int i, j;
 17246                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17247                           
 17248                           ;incstack = 0
 17249                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17250  1105  3001               	movlw	1
 17251  1106  0020               	movlb	0	; select bank0
 17252  1107  00A2               	movwf	DelayTime_1us@i
 17253  1108  3000               	movlw	0
 17254  1109  00A3               	movwf	DelayTime_1us@i+1
 17255  110A                     l372:	
 17256  110A  0821               	movf	DelayTime_1us@count+1,w
 17257  110B  0223               	subwf	DelayTime_1us@i+1,w
 17258  110C  1D03               	skipz
 17259  110D  2910               	goto	u5795
 17260  110E  0820               	movf	DelayTime_1us@count,w
 17261  110F  0222               	subwf	DelayTime_1us@i,w
 17262  1110                     u5795:	
 17263  1110  1803               	btfsc	3,0
 17264  1111  0008               	return
 17265                           
 17266                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17267  1112  01A4               	clrf	DelayTime_1us@j
 17268  1113  01A5               	clrf	DelayTime_1us@j+1
 17269  1114  3000               	movlw	0
 17270  1115  0225               	subwf	DelayTime_1us@j+1,w
 17271  1116  3002               	movlw	2
 17272  1117  1903               	skipnz
 17273  1118  0224               	subwf	DelayTime_1us@j,w
 17274  1119  1803               	btfsc	3,0
 17275  111A  2926               	goto	l6705
 17276  111B                     l6703:	
 17277  111B  3001               	movlw	1
 17278  111C  07A4               	addwf	DelayTime_1us@j,f
 17279  111D  3000               	movlw	0
 17280  111E  3DA5               	addwfc	DelayTime_1us@j+1,f
 17281  111F  3000               	movlw	0
 17282  1120  0225               	subwf	DelayTime_1us@j+1,w
 17283  1121  3002               	movlw	2
 17284  1122  1903               	skipnz
 17285  1123  0224               	subwf	DelayTime_1us@j,w
 17286  1124  1C03               	skipc
 17287  1125  291B               	goto	l6703
 17288  1126                     l6705:	
 17289  1126  3001               	movlw	1
 17290  1127  07A2               	addwf	DelayTime_1us@i,f
 17291  1128  3000               	movlw	0
 17292  1129  3DA3               	addwfc	DelayTime_1us@i+1,f
 17293  112A  290A               	goto	l372
 17294  112B                     __end_of_DelayTime_1us:	
 17295                           
 17296                           	psect	text116
 17297  1BEA                     __ptext116:	
 17298 ;; *************** function _CC2500_ClearTXFIFO *****************
 17299 ;; Defined at:
 17300 ;;		line 187 in file "../src/CC2500_B1.c"
 17301 ;; Parameters:    Size  Location     Type
 17302 ;;		None
 17303 ;; Auto vars:     Size  Location     Type
 17304 ;;		None
 17305 ;; Return value:  Size  Location     Type
 17306 ;;		None               void
 17307 ;; Registers used:
 17308 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17309 ;; Tracked objects:
 17310 ;;		On entry : 0/0
 17311 ;;		On exit  : 0/0
 17312 ;;		Unchanged: 0/0
 17313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17318 ;;Total ram usage:        0 bytes
 17319 ;; Hardware stack levels used:    1
 17320 ;; Hardware stack levels required when called:    7
 17321 ;; This function calls:
 17322 ;;		_CC2500_WriteCommand
 17323 ;; This function is called by:
 17324 ;;		_CC2500_PowerOnInitial
 17325 ;; This function uses a non-reentrant model
 17326 ;;
 17327                           
 17328                           
 17329                           ;psect for function _CC2500_ClearTXFIFO
 17330  1BEA                     _CC2500_ClearTXFIFO:	
 17331                           
 17332                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17333                           
 17334                           ;incstack = 0
 17335                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17336  1BEA  303B               	movlw	59
 17337  1BEB  319E  26C1         	fcall	_CC2500_WriteCommand
 17338  1BED  0008               	return
 17339  1BEE                     __end_of_CC2500_ClearTXFIFO:	
 17340                           
 17341                           	psect	text117
 17342  1BE6                     __ptext117:	
 17343 ;; *************** function _CC2500_ClearRXFIFO *****************
 17344 ;; Defined at:
 17345 ;;		line 194 in file "../src/CC2500_B1.c"
 17346 ;; Parameters:    Size  Location     Type
 17347 ;;		None
 17348 ;; Auto vars:     Size  Location     Type
 17349 ;;		None
 17350 ;; Return value:  Size  Location     Type
 17351 ;;		None               void
 17352 ;; Registers used:
 17353 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17354 ;; Tracked objects:
 17355 ;;		On entry : 0/0
 17356 ;;		On exit  : 0/0
 17357 ;;		Unchanged: 0/0
 17358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17363 ;;Total ram usage:        0 bytes
 17364 ;; Hardware stack levels used:    1
 17365 ;; Hardware stack levels required when called:    7
 17366 ;; This function calls:
 17367 ;;		_CC2500_WriteCommand
 17368 ;; This function is called by:
 17369 ;;		_CC2500_PowerOnInitial
 17370 ;; This function uses a non-reentrant model
 17371 ;;
 17372                           
 17373                           
 17374                           ;psect for function _CC2500_ClearRXFIFO
 17375  1BE6                     _CC2500_ClearRXFIFO:	
 17376                           
 17377                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 17378                           
 17379                           ;incstack = 0
 17380                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17381  1BE6  303A               	movlw	58
 17382  1BE7  319E  26C1         	fcall	_CC2500_WriteCommand
 17383  1BE9  0008               	return
 17384  1BEA                     __end_of_CC2500_ClearRXFIFO:	
 17385                           
 17386                           	psect	text118
 17387  1EC1                     __ptext118:	
 17388 ;; *************** function _CC2500_WriteCommand *****************
 17389 ;; Defined at:
 17390 ;;		line 285 in file "../src/CC2500_B1.c"
 17391 ;; Parameters:    Size  Location     Type
 17392 ;;  command         1    wreg     unsigned char 
 17393 ;; Auto vars:     Size  Location     Type
 17394 ;;  command         1    3[BANK0 ] unsigned char 
 17395 ;; Return value:  Size  Location     Type
 17396 ;;		None               void
 17397 ;; Registers used:
 17398 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17399 ;; Tracked objects:
 17400 ;;		On entry : 0/0
 17401 ;;		On exit  : 0/0
 17402 ;;		Unchanged: 0/0
 17403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17405 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17406 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17407 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17408 ;;Total ram usage:        2 bytes
 17409 ;; Hardware stack levels used:    1
 17410 ;; Hardware stack levels required when called:    6
 17411 ;; This function calls:
 17412 ;;		_CC2500_WriteByte
 17413 ;;		_Timeout_Counter
 17414 ;;		_set_TimeoutCleared
 17415 ;; This function is called by:
 17416 ;;		_CC2500_TxData
 17417 ;;		_CC2500_ClearTXFIFO
 17418 ;;		_CC2500_ClearRXFIFO
 17419 ;;		_CC2500_FrequencyCabr
 17420 ;;		_CC2500_SIDLEMode
 17421 ;;		_RF_RxDisable
 17422 ;; This function uses a non-reentrant model
 17423 ;;
 17424                           
 17425                           
 17426                           ;psect for function _CC2500_WriteCommand
 17427  1EC1                     _CC2500_WriteCommand:	
 17428                           
 17429                           ;incstack = 0
 17430                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17431                           ;CC2500_WriteCommand@command stored from wreg
 17432  1EC1  0020               	movlb	0	; select bank0
 17433  1EC2  00A3               	movwf	CC2500_WriteCommand@command
 17434                           
 17435                           ;CC2500_B1.c: 286: RC4 = 0;
 17436  1EC3  120E               	bcf	14,4	;volatile
 17437                           
 17438                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 17439  1EC4  0823               	movf	CC2500_WriteCommand@command,w
 17440  1EC5  00A2               	movwf	??_CC2500_WriteCommand
 17441  1EC6  0822               	movf	??_CC2500_WriteCommand,w
 17442  1EC7  00FB               	movwf	_SPI0Buffer
 17443                           
 17444                           ;CC2500_B1.c: 289: while (RC2 == 1 && myMain.Timeout == 0) {
 17445  1EC8  2ECC               	goto	l6485
 17446  1EC9                     l6483:	
 17447                           
 17448                           ;CC2500_B1.c: 290: Timeout_Counter();
 17449  1EC9  319E  2655  319E   	fcall	_Timeout_Counter
 17450  1ECC                     l6485:	
 17451  1ECC  0020               	movlb	0	; select bank0
 17452  1ECD  1D0E               	btfss	14,2	;volatile
 17453  1ECE  2ED2               	goto	l6489
 17454  1ECF  0021               	movlb	1	; select bank1
 17455  1ED0  1D2C               	btfss	(_myMain^(0+128)+12),2
 17456  1ED1  2EC9               	goto	l6483
 17457  1ED2                     l6489:	
 17458                           
 17459                           ;CC2500_B1.c: 291: };
 17460                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 17461  1ED2  319B  23F6  319E   	fcall	_set_TimeoutCleared
 17462                           
 17463                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 17464  1ED5  319E  2619         	fcall	_CC2500_WriteByte
 17465                           
 17466                           ;CC2500_B1.c: 295: RC4 = 1;
 17467  1ED7  0020               	movlb	0	; select bank0
 17468  1ED8  160E               	bsf	14,4	;volatile
 17469  1ED9  0008               	return
 17470  1EDA                     __end_of_CC2500_WriteCommand:	
 17471                           
 17472                           	psect	text119
 17473  1BF6                     __ptext119:	
 17474 ;; *************** function _set_TimeoutCleared *****************
 17475 ;; Defined at:
 17476 ;;		line 276 in file "../src/main_B1.c"
 17477 ;; Parameters:    Size  Location     Type
 17478 ;;		None
 17479 ;; Auto vars:     Size  Location     Type
 17480 ;;		None
 17481 ;; Return value:  Size  Location     Type
 17482 ;;		None               void
 17483 ;; Registers used:
 17484 ;;		status,2
 17485 ;; Tracked objects:
 17486 ;;		On entry : 0/0
 17487 ;;		On exit  : 0/0
 17488 ;;		Unchanged: 0/0
 17489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17494 ;;Total ram usage:        0 bytes
 17495 ;; Hardware stack levels used:    1
 17496 ;; Hardware stack levels required when called:    5
 17497 ;; This function calls:
 17498 ;;		Nothing
 17499 ;; This function is called by:
 17500 ;;		_CC2500_TxData
 17501 ;;		_CC2500_PowerRST
 17502 ;;		_CC2500_WriteREG
 17503 ;;		_CC2500_WriteCommand
 17504 ;;		_getAD
 17505 ;;		_TouchPower
 17506 ;;		_CC2500_RxData
 17507 ;;		_CC2500_ReadREG
 17508 ;;		_CC2500_ReadStatus
 17509 ;; This function uses a non-reentrant model
 17510 ;;
 17511                           
 17512                           
 17513                           ;psect for function _set_TimeoutCleared
 17514  1BF6                     _set_TimeoutCleared:	
 17515                           
 17516                           ;main_B1.c: 277: myMain.Timeout = 0;
 17517                           
 17518                           ;incstack = 0
 17519                           ; Regs used in _set_TimeoutCleared: [status,2]
 17520  1BF6  0021               	movlb	1	; select bank1
 17521  1BF7  112C               	bcf	(_myMain^(0+128)+12),2
 17522                           
 17523                           ;main_B1.c: 278: myMain.Timeout_Counter = 0;
 17524  1BF8  01AD               	clrf	(_myMain^(0+128)+13)
 17525  1BF9  01AE               	clrf	((_myMain+1)^(0+128)+13)
 17526  1BFA  0008               	return
 17527  1BFB                     __end_of_set_TimeoutCleared:	
 17528                           
 17529                           	psect	text120
 17530  1E55                     __ptext120:	
 17531 ;; *************** function _Timeout_Counter *****************
 17532 ;; Defined at:
 17533 ;;		line 267 in file "../src/main_B1.c"
 17534 ;; Parameters:    Size  Location     Type
 17535 ;;		None
 17536 ;; Auto vars:     Size  Location     Type
 17537 ;;		None
 17538 ;; Return value:  Size  Location     Type
 17539 ;;		None               void
 17540 ;; Registers used:
 17541 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17542 ;; Tracked objects:
 17543 ;;		On entry : 0/0
 17544 ;;		On exit  : 0/0
 17545 ;;		Unchanged: 0/0
 17546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17551 ;;Total ram usage:        0 bytes
 17552 ;; Hardware stack levels used:    1
 17553 ;; Hardware stack levels required when called:    5
 17554 ;; This function calls:
 17555 ;;		Nothing
 17556 ;; This function is called by:
 17557 ;;		_CC2500_TxData
 17558 ;;		_CC2500_PowerRST
 17559 ;;		_CC2500_WriteREG
 17560 ;;		_CC2500_WriteCommand
 17561 ;;		_getAD
 17562 ;;		_TouchPower
 17563 ;;		_CC2500_RxData
 17564 ;;		_CC2500_ReadREG
 17565 ;;		_CC2500_ReadStatus
 17566 ;; This function uses a non-reentrant model
 17567 ;;
 17568                           
 17569                           
 17570                           ;psect for function _Timeout_Counter
 17571  1E55                     _Timeout_Counter:	
 17572                           
 17573                           ;main_B1.c: 268: myMain.Timeout_Counter++;
 17574                           
 17575                           ;incstack = 0
 17576                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17577  1E55  3001               	movlw	1
 17578  1E56  0021               	movlb	1	; select bank1
 17579  1E57  07AD               	addwf	(_myMain^(0+128)+13),f
 17580  1E58  3000               	movlw	0
 17581  1E59  3DAE               	addwfc	((_myMain+1)^(0+128)+13),f
 17582                           
 17583                           ;main_B1.c: 269: if (myMain.Timeout_Counter == 10000) {
 17584  1E5A  300D               	movlw	13
 17585  1E5B  3EA0               	addlw	_myMain& (0+255)
 17586  1E5C  0086               	movwf	6
 17587  1E5D  0187               	clrf	7
 17588  1E5E  3F40               	moviw [0]fsr1
 17589  1E5F  3A10               	xorlw	16
 17590  1E60  1D03               	skipz
 17591  1E61  2E64               	goto	u5285
 17592  1E62  3F41               	moviw [1]fsr1
 17593  1E63  3A27               	xorlw	39
 17594  1E64                     u5285:	
 17595  1E64  1D03               	skipz
 17596  1E65  0008               	return
 17597                           
 17598                           ;main_B1.c: 270: myMain.Timeout_Counter = 0;
 17599  1E66  01AD               	clrf	(_myMain^(0+128)+13)
 17600  1E67  01AE               	clrf	((_myMain+1)^(0+128)+13)
 17601                           
 17602                           ;main_B1.c: 271: myMain.Timeout = 1;
 17603  1E68  152C               	bsf	(_myMain^(0+128)+12),2
 17604  1E69  0008               	return
 17605  1E6A                     __end_of_Timeout_Counter:	
 17606                           
 17607                           	psect	text121
 17608  1E19                     __ptext121:	
 17609 ;; *************** function _CC2500_WriteByte *****************
 17610 ;; Defined at:
 17611 ;;		line 219 in file "../src/CC2500_B1.c"
 17612 ;; Parameters:    Size  Location     Type
 17613 ;;		None
 17614 ;; Auto vars:     Size  Location     Type
 17615 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17616 ;; Return value:  Size  Location     Type
 17617 ;;		None               void
 17618 ;; Registers used:
 17619 ;;		wreg, status,2, status,0
 17620 ;; Tracked objects:
 17621 ;;		On entry : 0/0
 17622 ;;		On exit  : 0/0
 17623 ;;		Unchanged: 0/0
 17624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17626 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17627 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17628 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17629 ;;Total ram usage:        2 bytes
 17630 ;; Hardware stack levels used:    1
 17631 ;; Hardware stack levels required when called:    5
 17632 ;; This function calls:
 17633 ;;		Nothing
 17634 ;; This function is called by:
 17635 ;;		_CC2500_TxData
 17636 ;;		_CC2500_PowerRST
 17637 ;;		_CC2500_WriteREG
 17638 ;;		_CC2500_WriteCommand
 17639 ;;		_CC2500_RxData
 17640 ;;		_CC2500_ReadREG
 17641 ;;		_CC2500_ReadStatus
 17642 ;; This function uses a non-reentrant model
 17643 ;;
 17644                           
 17645                           
 17646                           ;psect for function _CC2500_WriteByte
 17647  1E19                     _CC2500_WriteByte:	
 17648                           
 17649                           ;CC2500_B1.c: 220: unsigned char loop_a;
 17650                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 17651                           
 17652                           ;incstack = 0
 17653                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17654  1E19  0020               	movlb	0	; select bank0
 17655  1E1A  01A1               	clrf	CC2500_WriteByte@loop_a
 17656  1E1B                     L11:	
 17657  1E1B  3008               	movlw	8
 17658  1E1C  0221               	subwf	CC2500_WriteByte@loop_a,w
 17659  1E1D  1803               	btfsc	3,0
 17660  1E1E  0008               	return
 17661                           
 17662                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 17663  1E1F  1FFB               	btfss	_SPI0Buffer,7
 17664  1E20  2E23               	goto	l328
 17665                           
 17666                           ;CC2500_B1.c: 223: RC0 = 1;
 17667  1E21  140E               	bsf	14,0	;volatile
 17668  1E22  2E24               	goto	l329
 17669  1E23                     l328:	
 17670                           
 17671                           ;CC2500_B1.c: 224: else
 17672                           ;CC2500_B1.c: 225: RC0 = 0;
 17673  1E23  100E               	bcf	14,0	;volatile
 17674  1E24                     l329:	
 17675                           
 17676                           ;CC2500_B1.c: 226: RC1 = 1;
 17677  1E24  148E               	bsf	14,1	;volatile
 17678                           
 17679                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 17680  1E25  1003               	clrc
 17681  1E26  0DFB               	rlf	_SPI0Buffer,f
 17682                           
 17683                           ;CC2500_B1.c: 228: RC1 = 0;
 17684  1E27  108E               	bcf	14,1	;volatile
 17685  1E28  3001               	movlw	1
 17686  1E29  00A0               	movwf	??_CC2500_WriteByte
 17687  1E2A  0820               	movf	??_CC2500_WriteByte,w
 17688  1E2B  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17689  1E2C  2E1B               	goto	L11
 17690  1E2D                     __end_of_CC2500_WriteByte:	
 17691                           
 17692                           	psect	text122
 17693  1520                     __ptext122:	
 17694 ;; *************** function _Buzzer_Main *****************
 17695 ;; Defined at:
 17696 ;;		line 46 in file "../src/Buzzer_B1.c"
 17697 ;; Parameters:    Size  Location     Type
 17698 ;;		None
 17699 ;; Auto vars:     Size  Location     Type
 17700 ;;		None
 17701 ;; Return value:  Size  Location     Type
 17702 ;;		None               void
 17703 ;; Registers used:
 17704 ;;		wreg, status,2, status,0
 17705 ;; Tracked objects:
 17706 ;;		On entry : 0/0
 17707 ;;		On exit  : 0/0
 17708 ;;		Unchanged: 0/0
 17709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17712 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17713 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17714 ;;Total ram usage:        1 bytes
 17715 ;; Hardware stack levels used:    1
 17716 ;; Hardware stack levels required when called:    5
 17717 ;; This function calls:
 17718 ;;		Nothing
 17719 ;; This function is called by:
 17720 ;;		_main
 17721 ;; This function uses a non-reentrant model
 17722 ;;
 17723                           
 17724                           
 17725                           ;psect for function _Buzzer_Main
 17726  1520                     _Buzzer_Main:	
 17727                           
 17728                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17729                           
 17730                           ;incstack = 0
 17731                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17732  1520  0021               	movlb	1	; select bank1
 17733  1521  1CAF               	btfss	_Buz1^(0+128),1
 17734  1522  0008               	return
 17735                           
 17736                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17737  1523  3001               	movlw	1
 17738  1524  07B0               	addwf	(_Buz1^(0+128)+1),f
 17739  1525  3000               	movlw	0
 17740  1526  3DB1               	addwfc	((_Buz1+1)^(0+128)+1),f
 17741                           
 17742                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17743  1527  0836               	movf	((_Buz1+1)^(0+128)+6),w
 17744  1528  0231               	subwf	((_Buz1+1)^(0+128)+1),w
 17745  1529  1D03               	skipz
 17746  152A  2D2D               	goto	u7455
 17747  152B  0835               	movf	(_Buz1^(0+128)+6),w
 17748  152C  0230               	subwf	(_Buz1^(0+128)+1),w
 17749  152D                     u7455:	
 17750  152D  1C03               	skipc
 17751  152E  0008               	return
 17752                           
 17753                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17754  152F  01B0               	clrf	(_Buz1^(0+128)+1)
 17755  1530  01B1               	clrf	((_Buz1+1)^(0+128)+1)
 17756                           
 17757                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17758  1531  12AF               	bcf	_Buz1^(0+128),5
 17759  1532  0020               	movlb	0	; select bank0
 17760  1533  1D8D               	btfss	13,3	;volatile
 17761  1534  2D37               	goto	l7715
 17762  1535  0021               	movlb	1	; select bank1
 17763  1536  16AF               	bsf	_Buz1^(0+128),5
 17764  1537                     l7715:	
 17765                           
 17766                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17767  1537  0021               	movlb	1	; select bank1
 17768  1538  1AAF               	btfsc	_Buz1^(0+128),5
 17769  1539  2D63               	goto	l106
 17770                           
 17771                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17772  153A  08B2               	movf	(_Buz1^(0+128)+3),f
 17773  153B  1D03               	skipz
 17774  153C  2D5F               	goto	l107
 17775                           
 17776                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17777  153D  1DAF               	btfss	_Buz1^(0+128),3
 17778  153E  2D4D               	goto	l108
 17779                           
 17780                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17781  153F  11AF               	bcf	_Buz1^(0+128),3
 17782                           
 17783                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17784  1540  0833               	movf	(_Buz1^(0+128)+4),w
 17785  1541  0020               	movlb	0	; select bank0
 17786  1542  00A0               	movwf	??_Buzzer_Main
 17787  1543  0820               	movf	??_Buzzer_Main,w
 17788  1544  0021               	movlb	1	; select bank1
 17789  1545  00B2               	movwf	(_Buz1^(0+128)+3)
 17790                           
 17791                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17792  1546  0838               	movf	((_Buz1+1)^(0+128)+8),w
 17793  1547  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 17794  1548  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 17795  1549  0837               	movf	(_Buz1^(0+128)+8),w
 17796  154A  01B5               	clrf	(_Buz1^(0+128)+6)
 17797  154B  07B5               	addwf	(_Buz1^(0+128)+6),f
 17798                           
 17799                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17800  154C  0008               	return
 17801  154D                     l108:	
 17802  154D  1E2F               	btfss	_Buz1^(0+128),4
 17803  154E  2D5D               	goto	l110
 17804                           
 17805                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17806  154F  122F               	bcf	_Buz1^(0+128),4
 17807                           
 17808                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17809  1550  0834               	movf	(_Buz1^(0+128)+5),w
 17810  1551  0020               	movlb	0	; select bank0
 17811  1552  00A0               	movwf	??_Buzzer_Main
 17812  1553  0820               	movf	??_Buzzer_Main,w
 17813  1554  0021               	movlb	1	; select bank1
 17814  1555  00B2               	movwf	(_Buz1^(0+128)+3)
 17815                           
 17816                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17817  1556  083A               	movf	((_Buz1+1)^(0+128)+10),w
 17818  1557  01B6               	clrf	((_Buz1+1)^(0+128)+6)
 17819  1558  07B6               	addwf	((_Buz1+1)^(0+128)+6),f
 17820  1559  0839               	movf	(_Buz1^(0+128)+10),w
 17821  155A  01B5               	clrf	(_Buz1^(0+128)+6)
 17822  155B  07B5               	addwf	(_Buz1^(0+128)+6),f
 17823                           
 17824                           ;Buzzer_B1.c: 62: } else {
 17825  155C  0008               	return
 17826  155D                     l110:	
 17827                           
 17828                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 17829  155D  10AF               	bcf	_Buz1^(0+128),1
 17830                           
 17831                           ;Buzzer_B1.c: 64: }
 17832                           ;Buzzer_B1.c: 65: } else {
 17833  155E  0008               	return
 17834  155F                     l107:	
 17835                           
 17836                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 17837  155F  16AF               	bsf	_Buz1^(0+128),5
 17838                           
 17839                           ;Buzzer_B1.c: 68: RB3 = 1;
 17840  1560  0020               	movlb	0	; select bank0
 17841  1561  158D               	bsf	13,3	;volatile
 17842                           
 17843                           ;Buzzer_B1.c: 69: }
 17844                           ;Buzzer_B1.c: 70: } else {
 17845  1562  0008               	return
 17846  1563                     l106:	
 17847                           
 17848                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 17849  1563  12AF               	bcf	_Buz1^(0+128),5
 17850                           
 17851                           ;Buzzer_B1.c: 73: RB3 = 0;
 17852  1564  0020               	movlb	0	; select bank0
 17853  1565  118D               	bcf	13,3	;volatile
 17854                           
 17855                           ;Buzzer_B1.c: 75: Buz1.Count--;
 17856  1566  3001               	movlw	1
 17857  1567  0021               	movlb	1	; select bank1
 17858  1568  02B2               	subwf	(_Buz1^(0+128)+3),f
 17859  1569  0008               	return
 17860  156A                     __end_of_Buzzer_Main:	
 17861                           
 17862                           	psect	text123
 17863  1BD7                     __ptext123:	
 17864 ;; *************** function _Buzzer_Initialization *****************
 17865 ;; Defined at:
 17866 ;;		line 11 in file "../src/Buzzer_B1.c"
 17867 ;; Parameters:    Size  Location     Type
 17868 ;;		None
 17869 ;; Auto vars:     Size  Location     Type
 17870 ;;		None
 17871 ;; Return value:  Size  Location     Type
 17872 ;;		None               void
 17873 ;; Registers used:
 17874 ;;		None
 17875 ;; Tracked objects:
 17876 ;;		On entry : 0/0
 17877 ;;		On exit  : 0/0
 17878 ;;		Unchanged: 0/0
 17879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17884 ;;Total ram usage:        0 bytes
 17885 ;; Hardware stack levels used:    1
 17886 ;; Hardware stack levels required when called:    5
 17887 ;; This function calls:
 17888 ;;		Nothing
 17889 ;; This function is called by:
 17890 ;;		_main
 17891 ;; This function uses a non-reentrant model
 17892 ;;
 17893                           
 17894                           
 17895                           ;psect for function _Buzzer_Initialization
 17896  1BD7                     _Buzzer_Initialization:	
 17897                           
 17898                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 17899                           
 17900                           ;incstack = 0
 17901                           ; Regs used in _Buzzer_Initialization: []
 17902  1BD7  0021               	movlb	1	; select bank1
 17903  1BD8  142F               	bsf	_Buz1^(0+128),0
 17904  1BD9  0008               	return
 17905  1BDA                     __end_of_Buzzer_Initialization:	
 17906                           
 17907                           	psect	intentry
 17908  0004                     __pintentry:	
 17909 ;; *************** function _ISR *****************
 17910 ;; Defined at:
 17911 ;;		line 107 in file "../src/MCU_B1.c"
 17912 ;; Parameters:    Size  Location     Type
 17913 ;;		None
 17914 ;; Auto vars:     Size  Location     Type
 17915 ;;		None
 17916 ;; Return value:  Size  Location     Type
 17917 ;;		None               void
 17918 ;; Registers used:
 17919 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17920 ;; Tracked objects:
 17921 ;;		On entry : 0/0
 17922 ;;		On exit  : 0/0
 17923 ;;		Unchanged: 0/0
 17924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17927 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17928 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17929 ;;Total ram usage:        1 bytes
 17930 ;; Hardware stack levels used:    1
 17931 ;; Hardware stack levels required when called:    4
 17932 ;; This function calls:
 17933 ;;		_IOC_ISR
 17934 ;;		_TMR1_ISR
 17935 ;; This function is called by:
 17936 ;;		Interrupt level 1
 17937 ;; This function uses a non-reentrant model
 17938 ;;
 17939                           
 17940  0004                     _ISR:	
 17941                           
 17942                           ;incstack = 0
 17943                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17944  0004  147E               	bsf	126,0	;set compiler interrupt flag
 17945  0005  3180               	pagesel	$
 17946  0006  0020               	movlb	0	; select bank0
 17947  0007  087F               	movf	127,w
 17948  0008  00F7               	movwf	??_ISR
 17949                           
 17950                           ;MCU_B1.c: 109: IOC_ISR();
 17951  0009  319C  24E0  3180   	fcall	_IOC_ISR
 17952                           
 17953                           ;MCU_B1.c: 111: ;;
 17954                           ;MCU_B1.c: 113: TMR1_ISR();
 17955  000C  3191  2152         	fcall	_TMR1_ISR
 17956  000E  0877               	movf	??_ISR,w
 17957  000F  0020               	movlb	0	; select bank0
 17958  0010  00FF               	movwf	127
 17959  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 17960  0012  0009               	retfie
 17961  0013                     __end_of_ISR:	
 17962                           
 17963                           	psect	text125
 17964  1152                     __ptext125:	
 17965 ;; *************** function _TMR1_ISR *****************
 17966 ;; Defined at:
 17967 ;;		line 209 in file "../src/MCU_B1.c"
 17968 ;; Parameters:    Size  Location     Type
 17969 ;;		None
 17970 ;; Auto vars:     Size  Location     Type
 17971 ;;		None
 17972 ;; Return value:  Size  Location     Type
 17973 ;;		None               void
 17974 ;; Registers used:
 17975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17976 ;; Tracked objects:
 17977 ;;		On entry : 0/0
 17978 ;;		On exit  : 0/0
 17979 ;;		Unchanged: 0/0
 17980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17985 ;;Total ram usage:        0 bytes
 17986 ;; Hardware stack levels used:    1
 17987 ;; Hardware stack levels required when called:    2
 17988 ;; This function calls:
 17989 ;;		_setDimmerLights_IntrControl
 17990 ;; This function is called by:
 17991 ;;		_ISR
 17992 ;; This function uses a non-reentrant model
 17993 ;;
 17994                           
 17995                           
 17996                           ;psect for function _TMR1_ISR
 17997  1152                     _TMR1_ISR:	
 17998                           
 17999                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18000                           
 18001                           ;incstack = 0
 18002                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18003  1152  0021               	movlb	1	; select bank1
 18004  1153  1C11               	btfss	17,0	;volatile
 18005  1154  0008               	return
 18006  1155  0020               	movlb	0	; select bank0
 18007  1156  1C11               	btfss	17,0	;volatile
 18008  1157  0008               	return
 18009                           
 18010                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18011  1158  30FA               	movlw	250
 18012  1159  0097               	movwf	23	;volatile
 18013                           
 18014                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18015  115A  3038               	movlw	56
 18016  115B  0096               	movwf	22	;volatile
 18017                           
 18018                           ;MCU_B1.c: 214: TMR1IF = 0;
 18019  115C  1011               	bcf	17,0	;volatile
 18020                           
 18021                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18022  115D  3001               	movlw	1
 18023  115E  3181  21BA  3191   	fcall	_setDimmerLights_IntrControl
 18024                           
 18025                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18026  1161  3002               	movlw	2
 18027  1162  3181  21BA  3191   	fcall	_setDimmerLights_IntrControl
 18028                           
 18029                           ;MCU_B1.c: 234: Timer1.Count++;
 18030  1165  3001               	movlw	1
 18031  1166  0021               	movlb	1	; select bank1
 18032  1167  07C8               	addwf	(_Timer1^(0+128)+1),f
 18033  1168  3000               	movlw	0
 18034  1169  3DC9               	addwfc	((_Timer1+1)^(0+128)+1),f
 18035                           
 18036                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 18037  116A  3001               	movlw	1
 18038  116B  3EC7               	addlw	_Timer1& (0+255)
 18039  116C  0086               	movwf	6
 18040  116D  0187               	clrf	7
 18041  116E  3F40               	moviw [0]fsr1
 18042  116F  3A64               	xorlw	100
 18043  1170  1D03               	skipz
 18044  1171  2974               	goto	u764_25
 18045  1172  3F41               	moviw [1]fsr1
 18046  1173  3A00               	xorlw	0
 18047  1174                     u764_25:	
 18048  1174  1D03               	skipz
 18049  1175  0008               	return
 18050                           
 18051                           ;MCU_B1.c: 236: {
 18052                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18053  1176  01C8               	clrf	(_Timer1^(0+128)+1)
 18054  1177  01C9               	clrf	((_Timer1+1)^(0+128)+1)
 18055                           
 18056                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18057  1178  1447               	bsf	_Timer1^(0+128),0
 18058  1179  0008               	return
 18059  117A                     __end_of_TMR1_ISR:	
 18060                           
 18061                           	psect	text126
 18062  01BA                     __ptext126:	
 18063 ;; *************** function _setDimmerLights_IntrControl *****************
 18064 ;; Defined at:
 18065 ;;		line 94 in file "../src/Dimmer_B1.c"
 18066 ;; Parameters:    Size  Location     Type
 18067 ;;  lights          1    wreg     unsigned char 
 18068 ;; Auto vars:     Size  Location     Type
 18069 ;;  lights          1    6[COMMON] unsigned char 
 18070 ;; Return value:  Size  Location     Type
 18071 ;;		None               void
 18072 ;; Registers used:
 18073 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18074 ;; Tracked objects:
 18075 ;;		On entry : 0/0
 18076 ;;		On exit  : 0/0
 18077 ;;		Unchanged: 0/0
 18078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18080 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18081 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18082 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18083 ;;Total ram usage:        5 bytes
 18084 ;; Hardware stack levels used:    1
 18085 ;; Hardware stack levels required when called:    1
 18086 ;; This function calls:
 18087 ;;		_DimmerIntrPointSelect
 18088 ;; This function is called by:
 18089 ;;		_TMR1_ISR
 18090 ;; This function uses a non-reentrant model
 18091 ;;
 18092                           
 18093                           
 18094                           ;psect for function _setDimmerLights_IntrControl
 18095  01BA                     _setDimmerLights_IntrControl:	
 18096                           
 18097                           ;incstack = 0
 18098                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18099                           ;setDimmerLights_IntrControl@lights stored from wreg
 18100  01BA  00F6               	movwf	setDimmerLights_IntrControl@lights
 18101                           
 18102                           ;Dimmer_B1.c: 232: DimmerIntrPointSelect(lights);
 18103  01BB  0876               	movf	setDimmerLights_IntrControl@lights,w
 18104  01BC  319D  2571  3181   	fcall	_DimmerIntrPointSelect
 18105                           
 18106                           ;Dimmer_B1.c: 233: if (DimmerLightsIntr->GO == 1) {
 18107  01BF  0879               	movf	_DimmerLightsIntr,w
 18108  01C0  0086               	movwf	6
 18109  01C1  3001               	movlw	1	; select bank2/3
 18110  01C2  0087               	movwf	7
 18111  01C3  1C01               	btfss	1,0
 18112  01C4  2A1C               	goto	i1l7169
 18113                           
 18114                           ;Dimmer_B1.c: 234: DimmerLightsIntr->Count++;
 18115  01C5  3001               	movlw	1
 18116  01C6  00F2               	movwf	??_setDimmerLights_IntrControl
 18117  01C7  0879               	movf	_DimmerLightsIntr,w
 18118  01C8  3E03               	addlw	3
 18119  01C9  0086               	movwf	6
 18120  01CA  3001               	movlw	1	; select bank2/3
 18121  01CB  0087               	movwf	7
 18122  01CC  0872               	movf	??_setDimmerLights_IntrControl,w
 18123  01CD  0781               	addwf	1,f
 18124                           
 18125                           ;Dimmer_B1.c: 235: if (DimmerLightsIntr->Count
 18126                           ;Dimmer_B1.c: 236: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 18127  01CE  0022               	movlb	2	; select bank2
 18128  01CF  0840               	movf	(_Dimmer^(0+256)+2),w
 18129  01D0  00F2               	movwf	??_setDimmerLights_IntrControl
 18130  01D1  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18131  01D2  09F2               	comf	??_setDimmerLights_IntrControl,f
 18132  01D3  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18133  01D4  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18134  01D5  1903               	skipnz
 18135  01D6  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18136  01D7  0879               	movf	_DimmerLightsIntr,w
 18137  01D8  3E04               	addlw	4
 18138  01D9  0086               	movwf	6
 18139  01DA  3001               	movlw	1	; select bank2/3
 18140  01DB  0087               	movwf	7
 18141  01DC  0801               	movf	1,w
 18142  01DD  0772               	addwf	??_setDimmerLights_IntrControl,w
 18143  01DE  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18144  01DF  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18145  01E0  1803               	skipnc
 18146  01E1  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18147  01E2  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18148  01E3  0879               	movf	_DimmerLightsIntr,w
 18149  01E4  3E03               	addlw	3
 18150  01E5  0086               	movwf	6
 18151  01E6  3001               	movlw	1	; select bank2/3
 18152  01E7  0087               	movwf	7
 18153  01E8  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18154  01E9  3A80               	xorlw	128
 18155  01EA  3C80               	sublw	128
 18156  01EB  1D03               	skipz
 18157  01EC  29EF               	goto	u647_25
 18158  01ED  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18159  01EE  0201               	subwf	1,w
 18160  01EF                     u647_25:	
 18161  01EF  1C03               	skipc
 18162  01F0  0008               	return
 18163                           
 18164                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count = 0;
 18165  01F1  0879               	movf	_DimmerLightsIntr,w
 18166  01F2  3E03               	addlw	3
 18167  01F3  0086               	movwf	6
 18168  01F4  3001               	movlw	1	; select bank2/3
 18169  01F5  0087               	movwf	7
 18170  01F6  0181               	clrf	1
 18171                           
 18172                           ;Dimmer_B1.c: 238: DimmerLightsIntr->GO = 0;
 18173  01F7  0879               	movf	_DimmerLightsIntr,w
 18174  01F8  0086               	movwf	6
 18175  01F9  3001               	movlw	1	; select bank2/3
 18176  01FA  0087               	movwf	7
 18177  01FB  1001               	bcf	1,0
 18178                           
 18179                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Flag = 1;
 18180  01FC  0879               	movf	_DimmerLightsIntr,w
 18181  01FD  3E08               	addlw	8
 18182  01FE  0086               	movwf	6
 18183  01FF  3001               	movlw	1	; select bank2/3
 18184  0200  0087               	movwf	7
 18185  0201  1401               	bsf	1,0
 18186                           
 18187                           ;Dimmer_B1.c: 240: if (DimmerLightsIntr->MOSFET == 1) {
 18188  0202  0879               	movf	_DimmerLightsIntr,w
 18189  0203  3E09               	addlw	9
 18190  0204  0086               	movwf	6
 18191  0205  3001               	movlw	1	; select bank2/3
 18192  0206  0087               	movwf	7
 18193  0207  1E01               	btfss	1,4
 18194  0208  0008               	return
 18195                           
 18196                           ;Dimmer_B1.c: 241: DimmerLightsIntr->MOSFET = 0;
 18197  0209  0879               	movf	_DimmerLightsIntr,w
 18198  020A  3E09               	addlw	9
 18199  020B  0086               	movwf	6
 18200  020C  3001               	movlw	1	; select bank2/3
 18201  020D  0087               	movwf	7
 18202  020E  1201               	bcf	1,4
 18203                           
 18204                           ;Dimmer_B1.c: 243: if (lights == 1) {
 18205  020F  0876               	movf	setDimmerLights_IntrControl@lights,w
 18206  0210  3A01               	xorlw	1
 18207  0211  1D03               	skipz
 18208  0212  2A15               	goto	i1l7165
 18209                           
 18210                           ;Dimmer_B1.c: 244: RA7 = 0;
 18211  0213  0020               	movlb	0	; select bank0
 18212  0214  138C               	bcf	12,7	;volatile
 18213  0215                     i1l7165:	
 18214                           
 18215                           ;Dimmer_B1.c: 246: }
 18216                           ;Dimmer_B1.c: 249: if (lights == 2) {
 18217  0215  0876               	movf	setDimmerLights_IntrControl@lights,w
 18218  0216  3A02               	xorlw	2
 18219  0217  1D03               	skipz
 18220  0218  0008               	return
 18221                           
 18222                           ;Dimmer_B1.c: 250: RB4 = 0;
 18223  0219  0020               	movlb	0	; select bank0
 18224  021A  120D               	bcf	13,4	;volatile
 18225                           
 18226                           ;Dimmer_B1.c: 251: }
 18227                           ;Dimmer_B1.c: 253: }
 18228                           ;Dimmer_B1.c: 254: }
 18229                           ;Dimmer_B1.c: 255: } else {
 18230  021B  0008               	return
 18231  021C                     i1l7169:	
 18232                           
 18233                           ;Dimmer_B1.c: 256: if (DimmerLightsIntr->Flag == 1) {
 18234  021C  0879               	movf	_DimmerLightsIntr,w
 18235  021D  3E08               	addlw	8
 18236  021E  0086               	movwf	6
 18237  021F  3001               	movlw	1	; select bank2/3
 18238  0220  0087               	movwf	7
 18239  0221  1C01               	btfss	1,0
 18240  0222  2AE0               	goto	i1l746
 18241                           
 18242                           ;Dimmer_B1.c: 257: DimmerLightsIntr->Flag = 0;
 18243  0223  0879               	movf	_DimmerLightsIntr,w
 18244  0224  3E08               	addlw	8
 18245  0225  0086               	movwf	6
 18246  0226  3001               	movlw	1	; select bank2/3
 18247  0227  0087               	movwf	7
 18248  0228  1001               	bcf	1,0
 18249                           
 18250                           ;Dimmer_B1.c: 258: if (DimmerLightsIntr->Signal == 1) {
 18251  0229  0879               	movf	_DimmerLightsIntr,w
 18252  022A  0086               	movwf	6
 18253  022B  3001               	movlw	1	; select bank2/3
 18254  022C  0087               	movwf	7
 18255  022D  1C81               	btfss	1,1
 18256  022E  2AE0               	goto	i1l746
 18257                           
 18258                           ;Dimmer_B1.c: 259: DimmerLightsIntr->DimmingTime++;
 18259  022F  3001               	movlw	1
 18260  0230  00F2               	movwf	??_setDimmerLights_IntrControl
 18261  0231  0A79               	incf	_DimmerLightsIntr,w
 18262  0232  0086               	movwf	6
 18263  0233  3001               	movlw	1	; select bank2/3
 18264  0234  0087               	movwf	7
 18265  0235  0872               	movf	??_setDimmerLights_IntrControl,w
 18266  0236  0781               	addwf	1,f
 18267                           
 18268                           ;Dimmer_B1.c: 260: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18269  0237  0A79               	incf	_DimmerLightsIntr,w
 18270  0238  0086               	movwf	6
 18271  0239  3001               	movlw	1	; select bank2/3
 18272  023A  0087               	movwf	7
 18273  023B  0879               	movf	_DimmerLightsIntr,w
 18274  023C  3E02               	addlw	2
 18275  023D  0084               	movwf	4
 18276  023E  3001               	movlw	1	; select bank2/3
 18277  023F  0085               	movwf	5
 18278  0240  0800               	movf	0,w
 18279  0241  0201               	subwf	1,w
 18280  0242  1C03               	skipc
 18281  0243  2AE0               	goto	i1l746
 18282                           
 18283                           ;Dimmer_B1.c: 261: DimmerLightsIntr->DimmingTime = 0;
 18284  0244  0A79               	incf	_DimmerLightsIntr,w
 18285  0245  0086               	movwf	6
 18286  0246  3001               	movlw	1	; select bank2/3
 18287  0247  0087               	movwf	7
 18288  0248  0181               	clrf	1
 18289                           
 18290                           ;Dimmer_B1.c: 262: if (DimmerLightsIntr->AdjFlag == 1) {
 18291  0249  0879               	movf	_DimmerLightsIntr,w
 18292  024A  0086               	movwf	6
 18293  024B  3001               	movlw	1	; select bank2/3
 18294  024C  0087               	movwf	7
 18295  024D  1D81               	btfss	1,3
 18296  024E  2A95               	goto	i1l7199
 18297                           
 18298                           ;Dimmer_B1.c: 263: if (DimmerLightsIntr->AdjStatus == 0) {
 18299  024F  0879               	movf	_DimmerLightsIntr,w
 18300  0250  0086               	movwf	6
 18301  0251  3001               	movlw	1	; select bank2/3
 18302  0252  0087               	movwf	7
 18303  0253  1A01               	btfsc	1,4
 18304  0254  2A76               	goto	i1l7191
 18305                           
 18306                           ;Dimmer_B1.c: 264: if (DimmerLightsIntr->DimmingValue < ((char)(80*0.8))) {
 18307  0255  0879               	movf	_DimmerLightsIntr,w
 18308  0256  3E04               	addlw	4
 18309  0257  0086               	movwf	6
 18310  0258  3001               	movlw	1	; select bank2/3
 18311  0259  0087               	movwf	7
 18312  025A  3040               	movlw	64
 18313  025B  0201               	subwf	1,w
 18314  025C  1803               	skipnc
 18315  025D  2A67               	goto	i1l7187
 18316                           
 18317                           ;Dimmer_B1.c: 265: DimmerLightsIntr->DimmingValue++;
 18318  025E  3001               	movlw	1
 18319  025F  00F2               	movwf	??_setDimmerLights_IntrControl
 18320  0260  0879               	movf	_DimmerLightsIntr,w
 18321  0261  3E04               	addlw	4
 18322  0262  0086               	movwf	6
 18323  0263  3001               	movlw	1	; select bank2/3
 18324  0264  0087               	movwf	7
 18325  0265  0872               	movf	??_setDimmerLights_IntrControl,w
 18326  0266  0781               	addwf	1,f
 18327  0267                     i1l7187:	
 18328                           
 18329                           ;Dimmer_B1.c: 266: }
 18330                           ;Dimmer_B1.c: 267: if (DimmerLightsIntr->DimmingValue == ((char)(80*0.8))) {
 18331  0267  0879               	movf	_DimmerLightsIntr,w
 18332  0268  3E04               	addlw	4
 18333  0269  0086               	movwf	6
 18334  026A  3001               	movlw	1	; select bank2/3
 18335  026B  0087               	movwf	7
 18336  026C  0801               	movf	1,w
 18337  026D  3A40               	xorlw	64
 18338  026E  1D03               	skipz
 18339  026F  2AE0               	goto	i1l746
 18340                           
 18341                           ;Dimmer_B1.c: 268: DimmerLightsIntr->AdjStatus = 1;
 18342  0270  0879               	movf	_DimmerLightsIntr,w
 18343  0271  0086               	movwf	6
 18344  0272  3001               	movlw	1	; select bank2/3
 18345  0273  0087               	movwf	7
 18346  0274  1601               	bsf	1,4
 18347                           
 18348                           ;Dimmer_B1.c: 269: }
 18349                           ;Dimmer_B1.c: 270: } else {
 18350  0275  2AE0               	goto	i1l746
 18351  0276                     i1l7191:	
 18352                           
 18353                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18354  0276  0879               	movf	_DimmerLightsIntr,w
 18355  0277  3E04               	addlw	4
 18356  0278  0086               	movwf	6
 18357  0279  3001               	movlw	1	; select bank2/3
 18358  027A  0087               	movwf	7
 18359  027B  300D               	movlw	13
 18360  027C  0201               	subwf	1,w
 18361  027D  1C03               	skipc
 18362  027E  2A86               	goto	i1l7195
 18363                           
 18364                           ;Dimmer_B1.c: 272: DimmerLightsIntr->DimmingValue--;
 18365  027F  0879               	movf	_DimmerLightsIntr,w
 18366  0280  3E04               	addlw	4
 18367  0281  0086               	movwf	6
 18368  0282  3001               	movlw	1	; select bank2/3
 18369  0283  0087               	movwf	7
 18370  0284  3001               	movlw	1
 18371  0285  0281               	subwf	1,f
 18372  0286                     i1l7195:	
 18373                           
 18374                           ;Dimmer_B1.c: 273: }
 18375                           ;Dimmer_B1.c: 274: if (DimmerLightsIntr->DimmingValue == ((char)(15*0.8))) {
 18376  0286  0879               	movf	_DimmerLightsIntr,w
 18377  0287  3E04               	addlw	4
 18378  0288  0086               	movwf	6
 18379  0289  3001               	movlw	1	; select bank2/3
 18380  028A  0087               	movwf	7
 18381  028B  0801               	movf	1,w
 18382  028C  3A0C               	xorlw	12
 18383  028D  1D03               	skipz
 18384  028E  2AE0               	goto	i1l746
 18385                           
 18386                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 0;
 18387  028F  0879               	movf	_DimmerLightsIntr,w
 18388  0290  0086               	movwf	6
 18389  0291  3001               	movlw	1	; select bank2/3
 18390  0292  0087               	movwf	7
 18391  0293  1201               	bcf	1,4
 18392                           
 18393                           ;Dimmer_B1.c: 276: }
 18394                           ;Dimmer_B1.c: 277: }
 18395                           ;Dimmer_B1.c: 278: } else if (DimmerLightsIntr->AdjRF == 1) {
 18396  0294  2AE0               	goto	i1l746
 18397  0295                     i1l7199:	
 18398  0295  0879               	movf	_DimmerLightsIntr,w
 18399  0296  0086               	movwf	6
 18400  0297  3001               	movlw	1	; select bank2/3
 18401  0298  0087               	movwf	7
 18402  0299  1D01               	btfss	1,2
 18403  029A  2AE0               	goto	i1l746
 18404                           
 18405                           ;Dimmer_B1.c: 279: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18406  029B  0879               	movf	_DimmerLightsIntr,w
 18407  029C  3E04               	addlw	4
 18408  029D  0086               	movwf	6
 18409  029E  3001               	movlw	1	; select bank2/3
 18410  029F  0087               	movwf	7
 18411  02A0  0879               	movf	_DimmerLightsIntr,w
 18412  02A1  3E05               	addlw	5
 18413  02A2  0084               	movwf	4
 18414  02A3  3001               	movlw	1	; select bank2/3
 18415  02A4  0085               	movwf	5
 18416  02A5  0800               	movf	0,w
 18417  02A6  0201               	subwf	1,w
 18418  02A7  1803               	skipnc
 18419  02A8  2AB3               	goto	i1l7205
 18420                           
 18421                           ;Dimmer_B1.c: 280: DimmerLightsIntr->DimmingValue++;
 18422  02A9  3001               	movlw	1
 18423  02AA  00F2               	movwf	??_setDimmerLights_IntrControl
 18424  02AB  0879               	movf	_DimmerLightsIntr,w
 18425  02AC  3E04               	addlw	4
 18426  02AD  0086               	movwf	6
 18427  02AE  3001               	movlw	1	; select bank2/3
 18428  02AF  0087               	movwf	7
 18429  02B0  0872               	movf	??_setDimmerLights_IntrControl,w
 18430  02B1  0781               	addwf	1,f
 18431                           
 18432                           ;Dimmer_B1.c: 281: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18433  02B2  2AC8               	goto	i1l7209
 18434  02B3                     i1l7205:	
 18435  02B3  0879               	movf	_DimmerLightsIntr,w
 18436  02B4  3E05               	addlw	5
 18437  02B5  0086               	movwf	6
 18438  02B6  3001               	movlw	1	; select bank2/3
 18439  02B7  0087               	movwf	7
 18440  02B8  0879               	movf	_DimmerLightsIntr,w
 18441  02B9  3E04               	addlw	4
 18442  02BA  0084               	movwf	4
 18443  02BB  3001               	movlw	1	; select bank2/3
 18444  02BC  0085               	movwf	5
 18445  02BD  0800               	movf	0,w
 18446  02BE  0201               	subwf	1,w
 18447  02BF  1803               	skipnc
 18448  02C0  2AC8               	goto	i1l7209
 18449                           
 18450                           ;Dimmer_B1.c: 282: DimmerLightsIntr->DimmingValue--;
 18451  02C1  0879               	movf	_DimmerLightsIntr,w
 18452  02C2  3E04               	addlw	4
 18453  02C3  0086               	movwf	6
 18454  02C4  3001               	movlw	1	; select bank2/3
 18455  02C5  0087               	movwf	7
 18456  02C6  3001               	movlw	1
 18457  02C7  0281               	subwf	1,f
 18458  02C8                     i1l7209:	
 18459                           
 18460                           ;Dimmer_B1.c: 283: }
 18461                           ;Dimmer_B1.c: 284: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18462  02C8  0879               	movf	_DimmerLightsIntr,w
 18463  02C9  3E05               	addlw	5
 18464  02CA  0086               	movwf	6
 18465  02CB  3001               	movlw	1	; select bank2/3
 18466  02CC  0087               	movwf	7
 18467  02CD  0879               	movf	_DimmerLightsIntr,w
 18468  02CE  3E04               	addlw	4
 18469  02CF  0084               	movwf	4
 18470  02D0  3001               	movlw	1	; select bank2/3
 18471  02D1  0085               	movwf	5
 18472  02D2  0800               	movf	0,w
 18473  02D3  0601               	xorwf	1,w
 18474  02D4  1D03               	skipz
 18475  02D5  2AE0               	goto	i1l746
 18476                           
 18477                           ;Dimmer_B1.c: 285: DimmerLightsIntr->AdjRF = 0;
 18478  02D6  0879               	movf	_DimmerLightsIntr,w
 18479  02D7  0086               	movwf	6
 18480  02D8  3001               	movlw	1	; select bank2/3
 18481  02D9  0087               	movwf	7
 18482  02DA  1101               	bcf	1,2
 18483                           
 18484                           ;Dimmer_B1.c: 286: DimmerLightsIntr->Signal = 0;
 18485  02DB  0879               	movf	_DimmerLightsIntr,w
 18486  02DC  0086               	movwf	6
 18487  02DD  3001               	movlw	1	; select bank2/3
 18488  02DE  0087               	movwf	7
 18489  02DF  1081               	bcf	1,1
 18490  02E0                     i1l746:	
 18491                           
 18492                           ;Dimmer_B1.c: 287: }
 18493                           ;Dimmer_B1.c: 288: }
 18494                           ;Dimmer_B1.c: 289: }
 18495                           ;Dimmer_B1.c: 290: }
 18496                           ;Dimmer_B1.c: 291: }
 18497                           ;Dimmer_B1.c: 293: if (DimmerLightsIntr->MosfetSignal == 1) {
 18498  02E0  0879               	movf	_DimmerLightsIntr,w
 18499  02E1  3E09               	addlw	9
 18500  02E2  0086               	movwf	6
 18501  02E3  3001               	movlw	1	; select bank2/3
 18502  02E4  0087               	movwf	7
 18503  02E5  1D81               	btfss	1,3
 18504  02E6  0008               	return
 18505                           
 18506                           ;Dimmer_B1.c: 294: DimmerLightsIntr->MosfetSignalCount++;
 18507  02E7  3001               	movlw	1
 18508  02E8  00F2               	movwf	??_setDimmerLights_IntrControl
 18509  02E9  0879               	movf	_DimmerLightsIntr,w
 18510  02EA  3E0C               	addlw	12
 18511  02EB  0086               	movwf	6
 18512  02EC  3001               	movlw	1	; select bank2/3
 18513  02ED  0087               	movwf	7
 18514  02EE  0872               	movf	??_setDimmerLights_IntrControl,w
 18515  02EF  0781               	addwf	1,f
 18516                           
 18517                           ;Dimmer_B1.c: 295: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 18518  02F0  0879               	movf	_DimmerLightsIntr,w
 18519  02F1  3E0C               	addlw	12
 18520  02F2  0086               	movwf	6
 18521  02F3  3001               	movlw	1	; select bank2/3
 18522  02F4  0087               	movwf	7
 18523  02F5  0801               	movf	1,w
 18524  02F6  3A05               	xorlw	5
 18525  02F7  1D03               	skipz
 18526  02F8  0008               	return
 18527                           
 18528                           ;Dimmer_B1.c: 296: DimmerLightsIntr->MosfetSignalCount = 0;
 18529  02F9  0879               	movf	_DimmerLightsIntr,w
 18530  02FA  3E0C               	addlw	12
 18531  02FB  0086               	movwf	6
 18532  02FC  3001               	movlw	1	; select bank2/3
 18533  02FD  0087               	movwf	7
 18534  02FE  0181               	clrf	1
 18535                           
 18536                           ;Dimmer_B1.c: 297: DimmerLightsIntr->MosfetSignal = 0;
 18537  02FF  0879               	movf	_DimmerLightsIntr,w
 18538  0300  3E09               	addlw	9
 18539  0301  0086               	movwf	6
 18540  0302  3001               	movlw	1	; select bank2/3
 18541  0303  0087               	movwf	7
 18542  0304  1181               	bcf	1,3
 18543  0305  0008               	return
 18544  0306                     __end_of_setDimmerLights_IntrControl:	
 18545                           
 18546                           	psect	text127
 18547  1D71                     __ptext127:	
 18548 ;; *************** function _DimmerIntrPointSelect *****************
 18549 ;; Defined at:
 18550 ;;		line 72 in file "../src/Dimmer_B1.c"
 18551 ;; Parameters:    Size  Location     Type
 18552 ;;  lights          1    wreg     unsigned char 
 18553 ;; Auto vars:     Size  Location     Type
 18554 ;;  lights          1    1[COMMON] unsigned char 
 18555 ;; Return value:  Size  Location     Type
 18556 ;;		None               void
 18557 ;; Registers used:
 18558 ;;		wreg
 18559 ;; Tracked objects:
 18560 ;;		On entry : 0/0
 18561 ;;		On exit  : 0/0
 18562 ;;		Unchanged: 0/0
 18563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18565 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18566 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18567 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18568 ;;Total ram usage:        2 bytes
 18569 ;; Hardware stack levels used:    1
 18570 ;; This function calls:
 18571 ;;		Nothing
 18572 ;; This function is called by:
 18573 ;;		_setDimmerLights_IntrControl
 18574 ;; This function uses a non-reentrant model
 18575 ;;
 18576                           
 18577                           
 18578                           ;psect for function _DimmerIntrPointSelect
 18579  1D71                     _DimmerIntrPointSelect:	
 18580                           
 18581                           ;incstack = 0
 18582                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18583                           ;DimmerIntrPointSelect@lights stored from wreg
 18584  1D71  00F1               	movwf	DimmerIntrPointSelect@lights
 18585                           
 18586                           ;Dimmer_B1.c: 74: if (lights == 1) {
 18587  1D72  0871               	movf	DimmerIntrPointSelect@lights,w
 18588  1D73  3A01               	xorlw	1
 18589  1D74  1D03               	skipz
 18590  1D75  2D7A               	goto	i1l735
 18591                           
 18592                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 18593  1D76  30A0               	movlw	_DimmerLights1& (0+255)
 18594  1D77  00F0               	movwf	??_DimmerIntrPointSelect
 18595  1D78  0870               	movf	??_DimmerIntrPointSelect,w
 18596  1D79  00F9               	movwf	_DimmerLightsIntr
 18597  1D7A                     i1l735:	
 18598                           
 18599                           ;Dimmer_B1.c: 76: }
 18600                           ;Dimmer_B1.c: 79: if (lights == 2) {
 18601  1D7A  0871               	movf	DimmerIntrPointSelect@lights,w
 18602  1D7B  3A02               	xorlw	2
 18603  1D7C  1D03               	skipz
 18604  1D7D  0008               	return
 18605                           
 18606                           ;Dimmer_B1.c: 80: DimmerLightsIntr = &DimmerLights2;
 18607  1D7E  30AF               	movlw	_DimmerLights2& (0+255)
 18608  1D7F  00F0               	movwf	??_DimmerIntrPointSelect
 18609  1D80  0870               	movf	??_DimmerIntrPointSelect,w
 18610  1D81  00F9               	movwf	_DimmerLightsIntr
 18611  1D82  0008               	return
 18612  1D83                     __end_of_DimmerIntrPointSelect:	
 18613                           
 18614                           	psect	text128
 18615  1CE0                     __ptext128:	
 18616 ;; *************** function _IOC_ISR *****************
 18617 ;; Defined at:
 18618 ;;		line 401 in file "../src/MCU_B1.c"
 18619 ;; Parameters:    Size  Location     Type
 18620 ;;		None
 18621 ;; Auto vars:     Size  Location     Type
 18622 ;;		None
 18623 ;; Return value:  Size  Location     Type
 18624 ;;		None               void
 18625 ;; Registers used:
 18626 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18627 ;; Tracked objects:
 18628 ;;		On entry : 0/0
 18629 ;;		On exit  : 0/0
 18630 ;;		Unchanged: 0/0
 18631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18636 ;;Total ram usage:        0 bytes
 18637 ;; Hardware stack levels used:    1
 18638 ;; Hardware stack levels required when called:    3
 18639 ;; This function calls:
 18640 ;;		_setDimmerReClock
 18641 ;; This function is called by:
 18642 ;;		_ISR
 18643 ;; This function uses a non-reentrant model
 18644 ;;
 18645                           
 18646                           
 18647                           ;psect for function _IOC_ISR
 18648  1CE0                     _IOC_ISR:	
 18649                           
 18650                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18651                           
 18652                           ;incstack = 0
 18653                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18654  1CE0  1D8B               	btfss	11,3	;volatile
 18655  1CE1  0008               	return
 18656  1CE2  1C0B               	btfss	11,0	;volatile
 18657  1CE3  0008               	return
 18658  1CE4  0027               	movlb	7	; select bank7
 18659  1CE5  1D16               	btfss	22,2	;volatile
 18660  1CE6  0008               	return
 18661                           
 18662                           ;MCU_B1.c: 403: IOCBF2 = 0;
 18663  1CE7  1116               	bcf	22,2	;volatile
 18664                           
 18665                           ;MCU_B1.c: 404: IOCIF = 0;
 18666  1CE8  100B               	bcf	11,0	;volatile
 18667                           
 18668                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 18669  1CE9  0021               	movlb	1	; select bank1
 18670  1CEA  1C20               	btfss	_myMain^(0+128),0
 18671  1CEB  0008               	return
 18672                           
 18673                           ;MCU_B1.c: 408: setDimmerReClock();
 18674  1CEC  319C  2419         	fcall	_setDimmerReClock
 18675  1CEE  0008               	return
 18676  1CEF                     __end_of_IOC_ISR:	
 18677                           
 18678                           	psect	text129
 18679  1C19                     __ptext129:	
 18680 ;; *************** function _setDimmerReClock *****************
 18681 ;; Defined at:
 18682 ;;		line 244 in file "../src/MCU_B1.c"
 18683 ;; Parameters:    Size  Location     Type
 18684 ;;		None
 18685 ;; Auto vars:     Size  Location     Type
 18686 ;;		None
 18687 ;; Return value:  Size  Location     Type
 18688 ;;		None               void
 18689 ;; Registers used:
 18690 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18691 ;; Tracked objects:
 18692 ;;		On entry : 0/0
 18693 ;;		On exit  : 0/0
 18694 ;;		Unchanged: 0/0
 18695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18700 ;;Total ram usage:        0 bytes
 18701 ;; Hardware stack levels used:    1
 18702 ;; Hardware stack levels required when called:    2
 18703 ;; This function calls:
 18704 ;;		_setDimmerLights_IntrIOC_GO
 18705 ;; This function is called by:
 18706 ;;		_IOC_ISR
 18707 ;; This function uses a non-reentrant model
 18708 ;;
 18709                           
 18710                           
 18711                           ;psect for function _setDimmerReClock
 18712  1C19                     _setDimmerReClock:	
 18713                           
 18714                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 18715                           
 18716                           ;incstack = 0
 18717                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18718  1C19  3001               	movlw	1
 18719  1C1A  3193  23D8  319C   	fcall	_setDimmerLights_IntrIOC_GO
 18720                           
 18721                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 18722  1C1D  3002               	movlw	2
 18723  1C1E  3193  23D8         	fcall	_setDimmerLights_IntrIOC_GO
 18724  1C20  0008               	return
 18725  1C21                     __end_of_setDimmerReClock:	
 18726                           
 18727                           	psect	text130
 18728  13D8                     __ptext130:	
 18729 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18730 ;; Defined at:
 18731 ;;		line 28 in file "../src/Dimmer_B1.c"
 18732 ;; Parameters:    Size  Location     Type
 18733 ;;  lights          1    wreg     unsigned char 
 18734 ;; Auto vars:     Size  Location     Type
 18735 ;;  lights          1    2[COMMON] unsigned char 
 18736 ;; Return value:  Size  Location     Type
 18737 ;;		None               void
 18738 ;; Registers used:
 18739 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18740 ;; Tracked objects:
 18741 ;;		On entry : 0/0
 18742 ;;		On exit  : 0/0
 18743 ;;		Unchanged: 0/0
 18744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18746 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18748 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18749 ;;Total ram usage:        1 bytes
 18750 ;; Hardware stack levels used:    1
 18751 ;; Hardware stack levels required when called:    1
 18752 ;; This function calls:
 18753 ;;		_DimmerIntrIOCPointSelect
 18754 ;; This function is called by:
 18755 ;;		_setDimmerReClock
 18756 ;; This function uses a non-reentrant model
 18757 ;;
 18758                           
 18759                           
 18760                           ;psect for function _setDimmerLights_IntrIOC_GO
 18761  13D8                     _setDimmerLights_IntrIOC_GO:	
 18762                           
 18763                           ;incstack = 0
 18764                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18765                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18766  13D8  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18767                           
 18768                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 18769  13D9  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18770  13DA  319E  2605  3193   	fcall	_DimmerIntrIOCPointSelect
 18771                           
 18772                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0 && RB2 == 0) {
 18773  13DD  0021               	movlb	1	; select bank1
 18774  13DE  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 18775  13DF  0086               	movwf	6
 18776  13E0  3001               	movlw	1	; select bank2/3
 18777  13E1  0087               	movwf	7
 18778  13E2  1801               	btfsc	1,0
 18779  13E3  0008               	return
 18780  13E4  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 18781  13E5  3E09               	addlw	9
 18782  13E6  0086               	movwf	6
 18783  13E7  3001               	movlw	1	; select bank2/3
 18784  13E8  0087               	movwf	7
 18785  13E9  1981               	btfsc	1,3
 18786  13EA  0008               	return
 18787  13EB  0020               	movlb	0	; select bank0
 18788  13EC  190D               	btfsc	13,2	;volatile
 18789  13ED  0008               	return
 18790                           
 18791                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 18792  13EE  0021               	movlb	1	; select bank1
 18793  13EF  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 18794  13F0  0086               	movwf	6
 18795  13F1  3001               	movlw	1	; select bank2/3
 18796  13F2  0087               	movwf	7
 18797  13F3  1401               	bsf	1,0
 18798                           
 18799                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 18800  13F4  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 18801  13F5  3E09               	addlw	9
 18802  13F6  0086               	movwf	6
 18803  13F7  3001               	movlw	1	; select bank2/3
 18804  13F8  0087               	movwf	7
 18805  13F9  1581               	bsf	1,3
 18806                           
 18807                           ;Dimmer_B1.c: 48: Dimmer.Correction = 0;
 18808  13FA  0022               	movlb	2	; select bank2
 18809  13FB  01C0               	clrf	(_Dimmer^(0+256)+2)
 18810                           
 18811                           ;Dimmer_B1.c: 50: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 18812  13FC  0021               	movlb	1	; select bank1
 18813  13FD  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 18814  13FE  0086               	movwf	6
 18815  13FF  3001               	movlw	1	; select bank2/3
 18816  1400  0087               	movwf	7
 18817  1401  1F01               	btfss	1,6
 18818  1402  0008               	return
 18819                           
 18820                           ;Dimmer_B1.c: 51: DimmerLightsIntrIOC->MOSFET = 1;
 18821  1403  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 18822  1404  3E09               	addlw	9
 18823  1405  0086               	movwf	6
 18824  1406  3001               	movlw	1	; select bank2/3
 18825  1407  0087               	movwf	7
 18826  1408  1601               	bsf	1,4
 18827                           
 18828                           ;Dimmer_B1.c: 53: if (lights == 1) {
 18829  1409  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18830  140A  3A01               	xorlw	1
 18831  140B  1D03               	skipz
 18832  140C  2C0F               	goto	i1l6745
 18833                           
 18834                           ;Dimmer_B1.c: 54: RA7 = 1;
 18835  140D  0020               	movlb	0	; select bank0
 18836  140E  178C               	bsf	12,7	;volatile
 18837  140F                     i1l6745:	
 18838                           
 18839                           ;Dimmer_B1.c: 56: }
 18840                           ;Dimmer_B1.c: 59: if (lights == 2) {
 18841  140F  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18842  1410  3A02               	xorlw	2
 18843  1411  1D03               	skipz
 18844  1412  0008               	return
 18845                           
 18846                           ;Dimmer_B1.c: 60: RB4 = 1;
 18847  1413  0020               	movlb	0	; select bank0
 18848  1414  160D               	bsf	13,4	;volatile
 18849  1415  0008               	return
 18850  1416                     __end_of_setDimmerLights_IntrIOC_GO:	
 18851                           
 18852                           	psect	text131
 18853  1E05                     __ptext131:	
 18854 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18855 ;; Defined at:
 18856 ;;		line 8 in file "../src/Dimmer_B1.c"
 18857 ;; Parameters:    Size  Location     Type
 18858 ;;  lights          1    wreg     unsigned char 
 18859 ;; Auto vars:     Size  Location     Type
 18860 ;;  lights          1    1[COMMON] unsigned char 
 18861 ;; Return value:  Size  Location     Type
 18862 ;;		None               void
 18863 ;; Registers used:
 18864 ;;		wreg
 18865 ;; Tracked objects:
 18866 ;;		On entry : 0/0
 18867 ;;		On exit  : 0/0
 18868 ;;		Unchanged: 0/0
 18869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18871 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18872 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18873 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18874 ;;Total ram usage:        2 bytes
 18875 ;; Hardware stack levels used:    1
 18876 ;; This function calls:
 18877 ;;		Nothing
 18878 ;; This function is called by:
 18879 ;;		_setDimmerLights_IntrIOC_GO
 18880 ;; This function uses a non-reentrant model
 18881 ;;
 18882                           
 18883                           
 18884                           ;psect for function _DimmerIntrIOCPointSelect
 18885  1E05                     _DimmerIntrIOCPointSelect:	
 18886                           
 18887                           ;incstack = 0
 18888                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 18889                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 18890  1E05  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 18891                           
 18892                           ;Dimmer_B1.c: 10: if (lights == 1) {
 18893  1E06  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18894  1E07  3A01               	xorlw	1
 18895  1E08  1D03               	skipz
 18896  1E09  2E0F               	goto	i1l723
 18897                           
 18898                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 18899  1E0A  30A0               	movlw	_DimmerLights1& (0+255)
 18900  1E0B  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18901  1E0C  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18902  1E0D  0021               	movlb	1	; select bank1
 18903  1E0E  00CF               	movwf	_DimmerLightsIntrIOC^(0+128)
 18904  1E0F                     i1l723:	
 18905                           
 18906                           ;Dimmer_B1.c: 12: }
 18907                           ;Dimmer_B1.c: 15: if (lights == 2) {
 18908  1E0F  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18909  1E10  3A02               	xorlw	2
 18910  1E11  1D03               	skipz
 18911  1E12  0008               	return
 18912                           
 18913                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 18914  1E13  30AF               	movlw	_DimmerLights2& (0+255)
 18915  1E14  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18916  1E15  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18917  1E16  0021               	movlb	1	; select bank1
 18918  1E17  00CF               	movwf	_DimmerLightsIntrIOC^(0+128)
 18919  1E18  0008               	return
 18920  1E19                     __end_of_DimmerIntrIOCPointSelect:	
 18921  007E                     btemp	set	126	;btemp
 18922  007E                     pic14e$flags	set	126
 18923  007E                     wtemp	set	126
 18924  007E                     wtemp0	set	126
 18925  0080                     wtemp1	set	128
 18926  0082                     wtemp2	set	130
 18927  0084                     wtemp3	set	132
 18928  0086                     wtemp4	set	134
 18929  0088                     wtemp5	set	136
 18930  007F                     wtemp6	set	127
 18931  007E                     ttemp	set	126
 18932  007E                     ttemp0	set	126
 18933  0081                     ttemp1	set	129
 18934  0084                     ttemp2	set	132
 18935  0087                     ttemp3	set	135
 18936  007F                     ttemp4	set	127
 18937  007E                     ltemp	set	126
 18938  007E                     ltemp0	set	126
 18939  0082                     ltemp1	set	130
 18940  0086                     ltemp2	set	134
 18941  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         266
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     78      80
    BANK1            80      7      80
    BANK2            80      0      80
    BANK3            80      0      70
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), VarLED2(BANK3[4]), VarLED1(BANK3[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setPercentValue
    _setDimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   96902
                                              3 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1612
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     244
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     495
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1773
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0    1773
                                             13 BANK0      2     2      0
           _getMain_All_Error_Status
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   11672
                                             29 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    6308
                                             17 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     450
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    5136
                                             22 BANK0      7     7      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29150
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   29150
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
                      _CC2500_TxData
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28687
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1656
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   26847
                             _setBuz
         _setDimmerLights_ErrorClose
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0    7483
                                             17 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    2038
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   15503
                                             71 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15280
                                             68 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   15214
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0     809
                                              9 BANK0      7     7      0
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      73
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1369
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12979
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   28549
                                             71 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   28136
                                             70 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  4     3      1   12665
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      4     3      1   13705
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1     423
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     205
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    3949
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    3949
                                             22 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0    2249
                                             17 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    1915
                                             15 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     266
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     266
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1139
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     319
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     181
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0      89
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1612
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     494
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     404
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     359
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     268
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     110
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
             _setRF_DimmerLights
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      46      11       87.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     189      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     189      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Dec 04 13:42:07 2014

                   __size_of_Switch_Main 0024                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l96 177F                                       l98 1793  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 109C  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 007C                     _getDimmerLights_Line 1DF2  
                 __end_of_setDelayOff_GO 0983                             ___ftadd@exp1 004D  
                           ___ftadd@exp2 004C                setDimmerLights_Adj@lights 0065  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 17A7  
                   _setDimmerLights_Line 1E7F                             ___ftadd@sign 004B  
                                    l110 155D                                      l106 1563  
                                    l107 155F                                      l108 154D  
                   _setDimmerLights_SwOn 139B                                      l255 0A1D  
                                    l328 1E23                                      l329 1E24  
                                    l372 110A                                      l767 1DC3  
                                    l778 12B9                                      l866 1DFB  
                                    l867 1E02                                      _GIE 005F  
                                    _CRC 00CC                                      l998 1F17  
                                    l999 1F1F                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0017  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 007A  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00BB                                      _ISR 0004  
                                    _WDT 00CA             getDimmerLights_Status@lights 0022  
                                    _Sw1 01BE                                      _Sw2 01C7  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1E2D  
                  _Buzzer_Initialization 1BD7                          __end_of_ADC_Set 1C19  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023             getDimmerLights_Status@status 0023  
                        _setDimmerLights 0CE5                   _setMain_Exception$7084 0039  
                      ??_getSw_KeyStatus 0020                    _setDimmerLights_AdjRF 10BE  
                                   ?_ISR 0070          setDimmerLights_ErrorClose@count 0032  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1CEF  
                             Load_Main@i 002F                               Load_Main@j 002B  
                           ___ftdiv@sign 003D                                     l1033 144D  
                                   l2012 1CF4                                     l2020 0DA5  
                                   l1301 1328                                     l2030 0DFB  
                                   l2050 0BDC                                     l1315 1223  
                                   l3012 04E9                                     l1324 15FB  
                                   l2036 1360                                     l2062 147F  
               ?_DimmerLightsPointSelect 0070                                     l1460 0444  
                                   l1463 033D                                     l1464 0414  
                                   l1465 0412                                     l1617 0E9F  
                        __end_of_IOC_Set 1CB9                                     l2368 106D  
                                   l2384 10F1                                     l2722 1272  
                                   l2394 01B1                                     l2723 128D  
                                   l6003 0FB4                                     l2396 008A  
                                   l6101 11CC                                     l2727 1289  
                                   l6015 0FD0                                     l6007 0FBC  
                                   l1970 0645                           _Load_Main$3860 002D  
                                   l6211 0974                                     l6203 0958  
                                   l6043 0C77                                     l6019 0FD8  
                                   l7003 0DE6                                     l1971 0647  
                                   l1972 064F                                     l6133 16B8  
                                   l6061 0CA7                                     l6151 16DE  
                                   l6143 16C0                                     l6127 16AD  
                                   l6207 095E                                     l6071 0CCB  
                                   l6063 0CB5                                     l2679 15B3  
                                   l1976 06AD                                     l1968 06E0  
                                   l6145 16CC                                     l6209 096B  
                                   l6073 0CCE                                     l6233 1D48  
                                   l8001 0381                                     l7009 0DF1  
                                   l1977 067A                                     l7033 1F8E  
                                   l6155 16E7                                     l7019 1E4C  
                                   l7043 1F9A                                     l7035 1F90  
                                   l7061 14B8                                     l6085 1E38  
                                   l6421 084B                                     l6077 0CDC  
                                   l6069 0CC2                                     l6317 08BA  
                                   l7045 1F9E                                     l7071 14C8  
                                   l7063 14BB                                     l6159 16EF  
                                   l6423 0820                                     l6511 126D  
                                   l2983 09B6                                     l8031 03DD  
                                   l7073 14CB                                     l6425 0851  
                                   l6521 1284                                     l6513 1276  
                                   l8025 03D0                                     l8033 03E3  
                                   l8113 138C                                     l7067 14C1  
                                   l5811 098C                                     l8043 03F8  
                                   l6371 1237                                     l6283 13D1  
                  _setDimmerLights_SwOff 14D7                                     l7077 14D1  
                                   l6533 1661                                     l6541 1669  
                                   l2989 09CD                                     l5901 04B5  
                                   l7245 17CC                                     l6461 1645  
                                   l6613 0B76                                     l8141 10FA  
                                   l7341 1FCE                                     l6703 111B  
                                   l6711 1083                                     l5815 0993  
                                   l5903 04BF                                     l7247 17D2  
                                   l6631 0BB5                                     l6705 1126  
                                   l6713 1086                                     l5825 09BB  
                                   l5817 099D                                     l5913 04DB  
                                   l5905 04C4                                     l7257 17FA  
                                   l6457 1636                                     l6633 0BB9  
                                   l6625 0B9B                                     l7601 08F7  
                                   l7417 0E12                                     l7345 1FD3  
                                   l6483 1EC9                                     l5843 1D8C  
                                   l6299 150B                                     l6563 1690  
                                   l6571 1698                                     l6547 1672  
                                   l6555 167A                                     l5827 09C3  
                                   l5819 09A2                                     l5923 050D  
                                   l5915 04E5                                     l5907 04C8  
                                   l6803 0D5A                                     l6811 0B25  
                                   l7363 15D1                                     l8091 0432  
                                   l6651 09EE                                     l6475 146D  
                                   l6635 0BBD                                     l7531 0693  
                                   l7611 0917                                     l7339 1FCB  
                                   l8171 159D                                     l6485 1ECC  
                                   l6717 108C                                     l6581 1E8C  
                                   l5861 10A7                                     l5933 0528  
                                   l6901 120B                                     l7357 15BC  
                                   l6629 0BB1                                     l7533 0695  
                                   l7605 0907                                     l7613 0920  
                                   l7701 01AD                                     l7461 0E83  
                                   l8165 158B                                     l5839 1D86  
                                   l6567 1694                                     l5919 04FB  
                                   l5943 0EBA                                     l6655 09F4  
                                   l6639 0BC1                                     l7447 0E6B  
                                   l6489 1ED2                                     l5873 0472  
                                   l6681 0A30                                     l6673 0A23  
                                   l6649 09EB                                     l7553 06CE  
                                   l7641 00B8                                     l7625 0075  
                                   l7449 0E6D                                     l7715 1537  
                                   l5883 0488                                     l5971 0F2A  
                                   l5963 0F11                                     l6683 0A33  
                                   l6675 0A26                                     l6835 12D8  
                                   l7651 00EA                                     l7459 0E82  
                                   l6765 11F3                                     l5877 0479  
                                   l5949 0ED0                                     l6669 0A05  
                                   l7573 1072                                     l8373 171A  
                                   l6767 11D7                                     l5895 04A2  
                                   l6791 0D33                                     l6687 0A39  
                                   l6679 0A2C                                     l5991 0F79  
                                   l6769 11F8                                     l6945 1D6B  
                                   l5985 0F63                                     l7577 1078  
                                   l7665 0128                                     l8377 1725  
                                   l7843 05B2                                     l7499 0666  
                                   l7595 08E9                                     l7587 08D6  
                                   l7675 015A                                     l7931 0C23  
                                   l7923 0BFE                                     l7781 12B0  
                                   l6981 0DA8                    _myMain_Initialization 1CFE  
                                   l7783 12B3                                     l7951 0C58  
                                   l7935 0C2B                                     l7785 12BB  
                                   l6993 0DC0                                     l6969 0D91  
                                   l7975 032C                                     _CFGS 0CAE  
                                   l7995 0357                             __CFG_WDTE$ON 0000  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   u5005 16C3                                     u5025 16CD  
                                   u5035 16D7                                     u5045 16DF  
                                   u4325 09D4                                     u5230 0878  
                                   u4255 0998                                     u4275 09B1  
                                   u5235 0876                                     _PEIE 005E  
                                   u4525 04C9                                     u4295 09BE  
                                   u5345 0829                                     u4465 04A3  
                                   u4625 0EE2                                     u4705 0F85  
                                   u4555 04DC                                     u4635 0EF2  
                                   u4715 0F95                                     u7035 0660  
                                   u5285 1E64                                     u4645 0F12  
                                   u4495 04B6                                     u4655 0F21  
                                   u4735 0FBD                                     u7135 06BE  
                                   u4665 0F2B                                     u4825 0C7E  
                                   u4745 0FC3                                     u8045 03E9  
                                   u4855 0CA8                                     u4775 0FD9  
                                   u8215 157B                                     u4945 11B8  
                                   u4785 0FDF                                     u8225 1599  
                                   u5915 11E0                                     u8155 1383  
                                   u8235 15AB                                     u4885 0CC3  
                                   u8165 1392                                     u7455 152D  
                                   u5795 1110                                     u7715 131F  
                                   u6915 0E53                                     u6935 0E73  
                                   u7825 0C45                                     u7775 0C11  
                                   u7965 0383                                     u7975 0388  
                                   u7985 0396                                     _LWLO 0CAD  
                                   _RSSI 00D0                                     _WREN 0CAA  
                                   _Buz1 00AF                                     _Load 0143  
                                   _Temp 00D7                                     _main 16F6  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 0800  
                        __end_of_RF_Main 1BE0                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0020                                     btemp 007E  
                        __end_of_WDT_Set 1C66                                     ltemp 007E  
          __size_of_setRF_Initialization 000B                         _setDimmerReClock 1C19  
                                   start 0013                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 1494                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003                        ?_getDimmer_LoadOK 0070  
                                  ??_ISR 0077                             ___fttol@exp1 005B  
                           ___fttol@lval 0057                   _getDimmerLights_Status 1D0D  
                     ??_getDimmer_LoadOK 0020           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 1CAD         setDimmerLights_ErrorClose@lights 0033  
          __end_of_DimmerIntrPointSelect 1D83                    ?_getDimmerLights_Line 0070  
                  ?_setDimmerLights_Main 0070                    ?_setDimmerLights_Line 0070  
                        ?_setDelayOff_GO 002A                    ?_setDimmerLights_SwOn 0070  
                                  ?_main 00EC                          __end_of___awdiv 16F6  
                        __end_of___ftadd 0540                          __end_of___ftdiv 0F4C  
                        __end_of___ftneg 1C52                          __end_of___ftmul 1000  
                        ___awdiv@divisor 0020                                    _T1CON 0018  
                        __end_of___fttol 0CE5                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                                  i1l723 1E0F                                    i1l735 1D7A  
                                  i1l746 02E0                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _TMR1H 0017  
                                  _TMR1L 0016                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0021  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB1 1069  
                                  _WPUB2 106A                     setMain_Exception@buz 0038  
                __end_of_Timeout_Counter 1E6A                            __CFG_WRT$HALF 0000  
     __end_of_setDimmerLights_IntrIOC_GO 1416               _setDimmerLights_IntrIOC_GO 13D8  
                       __end_of_TMR1_ISR 117A             __size_of_CC2500_WriteCommand 0019  
     __end_of_setDimmerLights_ErrorClose 086E               _setDimmerLights_ErrorClose 0814  
                       __end_of_TMR1_Set 1CC5                                    _getAD 1FC0  
                          ___awtoft@sign 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1DB9  
            __size_of_CC2500_ClearTXFIFO 0004                           __pbitbssCOMMON 03E8  
                         __CFG_BOREN$OFF 0000             __end_of_getMain_Lights_Count 1EAA  
                     Flash_Memory_Read@i 0021                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
           __end_of_getMain_LightsStatus 11FB            __end_of_setLED_Initialization 1D3E  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0070  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 086E              __size_of_Flash_Memory_Write 002F  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0003  
       __size_of_DelayOff_Initialization 0008                   ?_setLoad_AH_AL_Restore 0070  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 0AAA  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ?_setMemory_Modify 0070  
                __size_of_getDelayOff_GO 0010                        ??_setPercentValue 005C  
                           __end_of_main 174E                      ?_setRF_DimmerLights 0020  
                       __end_of_Fosc_Set 1BF6                       ??_setMemory_Modify 0020  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0D6E                     _setSw_Initialization 1C41  
                                 ??_main 006E                            ___fttol@sign1 0056  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 0B75  
                         _setMemory_Data 1C7D                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 0014                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03E8                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 1DCC                   ?_setDimmerLights_AdjRF 0070  
               __size_of_setRFSW_Control 004F                  ??_Switch_Initialization 0025  
                   ??_setRF_DimmerLights 0021                                   ?_getAD 0020  
           setDimmerLights_AdjControl@sw 0028                        ??_getRF_KeyStatus 0020  
                 ?_setDimmerLights_SwOff 0070                              _DlyOff_Main 07A3  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006E  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 10BE                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 09E4                 _getMain_All_Error_Status 125C  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 1F44  
                                 i1l7205 02B3                                   i1l7209 02C8  
                                 i1l7165 0215                                   i1l7191 0276  
                                 i1l7169 021C                                   i1l7195 0286  
                                 i1l7187 0267                                   i1l7199 0295  
                                 i1l6745 140F                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   _OSCCON 0099  
                     __size_of_Load_Main 0144                                   u647_25 01EF  
                                 u764_25 1174                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   _IO_Set 1EDA  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1BD5           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 1E7F                                   _Dimmer 013E  
                                 _DlySw1 01D0                                   _DlySw2 01D5  
             __end_of_Mcu_Initialization 1DA7                      __end_of_Buzzer_Main 156A  
                                 _Memory 0220                                   _Timer1 00C7  
     __end_of_setDimmerLights_TriggerAdj 1FC0               _setDimmerLights_TriggerAdj 1FA0  
                                 ___bmul 1D83                                ??___awdiv 0024  
                              ??___ftadd 0047             __size_of_DelayOffPointSelect 0014  
                              ??___ftdiv 0034                                ??___ftneg 0041  
                  setDimmerLights@lights 0065                                ??___ftmul 0034  
                              ??___fttol 0052             ?_Flash_Memory_Initialization 0070  
                 ??_getDimmerLights_Line 0020              setDimmerLights_AdjRF@lights 0063  
                 ??_setDimmerLights_Main 0066                   ??_setDimmerLights_Line 0020  
                                 _r_data 00D5                                   _s_data 00D6  
                 ??_setDimmerLights_SwOn 002D                                   _setLED 1652  
                                 _myMain 00A0                   __end_of_setMemory_Data 1C89  
                       _DimmerLightsIntr 0079                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0062                         ___awdiv@quotient 0027  
                                 _setBuz 174E                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 1C00         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
            ?_setDimmerLights_AdjControl 0070      __end_of_setDimmerLights_IntrControl 0306  
            _setDimmerLights_IntrControl 01BA                 Flash_Memory_Read@address 0022  
                       ?_Timeout_Counter 0070               __end_of_setMemory_LoopSave 1DF2  
            getMain_Lights_Count@status1 0022              getMain_Lights_Count@status2 0023  
            getMain_Lights_Count@status3 0021                    __end_of_SwPointSelect 1E55  
           __size_of_Flash_Memory_Modify 004E        setDimmerLights_IntrControl@lights 0076  
                __size_of_LedPointSelect 001B                  __size_of_getMain_LoadOK 000E  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
             getMain_LightsStatus@status 0028                               _TouchPower 1066  
             ?_getAll_DimmerLights_AdjGO 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 0B0F  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0047  
                              ?_LED_Main 0070                               ___ftadd@f1 0041  
                             ___ftadd@f2 0044                     _getRF_KeyStatus$5270 0022  
                          ?_my_MainTimer 0070                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                             ___ftneg@f1 003E                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004E                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                             __pidataBANK4 1FE0  
                          __end_of_getAD 1FE0                                ?_TMR1_ISR 0070  
                              ?_TMR1_Set 0070                   setLoad_AH_AL_Restore@i 0021  
              setMemory_LoopSave@command 0021             __size_of_setDimmerLights_Adj 0066  
                     _LED_Initialization 1C95                          _getSw_KeyStatus 1F81  
              ??_setControl_Lights_Table 006B                       getRF_KeyStatus@key 0021  
                       ??_DelayTimejudge 0024                          ?_setMemory_Data 0020  
          ??_Flash_Memory_Initialization 0062                         ?_setDimmerLights 0062  
                   _getMain_Lights_Count 1E94                                ?_WDT_Main 0070  
                      __end_of_Load_Main 044A                       __size_of_getBuz_GO 0011  
                   _getMain_LightsStatus 11CE               __end_of_set_TimeoutCleared 1BFB  
               __end_of_setDimmerReClock 1C21                       __size_of_getRxData 0090  
                    ?_LED_Initialization 0070                    getMain_LightsStatus@i 0026  
                      ?_CC2500_WriteByte 0070                           _DimmerLights11 00CD  
                         _DimmerLights22 00CE                     __size_of_setLED_Main 003E  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 1BE0                       ??_CC2500_WriteByte 0020  
                             __pbssBANK0 006F                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 1520                        ??_setRFSW_Control 0031  
                      __end_of_Temp_Main 1BE6                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                           ??_my_MainTimer 002D  
                             ??_LED_Main 0025                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1C21                getMain_LightsStatus@count 0025  
                          ??_Switch_Main 003D                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006F                        LedPointSelect@led 0021  
                 __size_of_DelayOff_Main 0008                     __size_of_setRF_Learn 0014  
                            setBuz@count 002C                  ?_getDimmerLights_Status 0070  
                             __pmaintext 16F6                           _getDelayOff_GO 1D1D  
                    _CC2500_WriteCommand 1EC1                     ?_Temp_Initialization 0070  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 002C            ??_DimmerLights_Initialization 0024  
                             ??_TMR1_ISR 0077                            ?_setTemp_Main 0070  
                             _getLoad_AD 0BDD                               ??_TMR1_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                             _getLoad_OK 1C31                       __size_of_setTxData 00BF  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                  ?_getMain_Lights_Count 0070                                  _ADC_Set 1C12  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 1364  
                             ??_WDT_Main 0020                    ?_getMain_LightsStatus 0070  
           __end_of_setRF_Initialization 1C71                       _setRFSW_AdjControl 1454  
                                _IOC_ISR 1CE0                                  _IOC_Set 1CAD  
                   __size_of_setLog_Code 0036                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 12F8                __size_of_getDimmer_LoadOK 0008  
                      _Flash_Memory_Read 1EF3              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_TxData 0061              ?_setDimmerLights_ErrorClose 0070  
                    ?_setRFSW_AdjControl 0070                                  _RF_Data 0120  
                                _RF_Main 1BDD                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1C5B  
        __end_of_setControl_Lights_Table 0BDD                          setRF_Main@error 00EB  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _setPercentValue 0A45                  ??_setLoad_AH_AL_Restore 0020  
                       ?_getPercentValue 0070             __end_of_CC2500_FrequencyCabr 1C7D  
                        __size_of_IO_Set 0019                        __end_of_getBuz_GO 1D60  
                    ??_Flash_Memory_Main 0029                      ??_Flash_Memory_Read 0020  
                 __end_of_getDelayOff_GO 1D2D                                  _VarLED1 01DE  
                                _VarLED2 01E2           __end_of_getDimmerLights_Status 1D1D  
                      __end_of_getRxData 0DFE                  __end_of_getSw_KeyStatus 1FA0  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1E19  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1F62  
                   ??_setRFSW_AdjControl 0067                           ??_setTemp_Main 002D  
                        __size_of___bmul 0012                                  ___awdiv 16A2  
                                ___ftadd 044A                                  ___ftdiv 0EA3  
                                ___ftneg 1C49                                  ___ftmul 0F4C  
                                ___fttol 0C5E                      __end_of_Switch_Main 1105  
                ??_Buzzer_Initialization 0020                          _getRF_KeyStatus 1D60  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0050                     setRFSW_AdjControl@sw 006A  
                        __size_of_setBuz 0059                                  __ptext1 156A  
                                __ptext2 1CFE                                  __ptext3 1364  
                                __ptext4 0BDD                                  __ptext5 1FC0  
                                __ptext6 1DA7                                  __ptext7 0002  
                                __ptext8 1BE3                                  __ptext9 0DFE  
                ??_setDimmerLights_AdjRF 0062                __size_of_CC2500_SIDLEMode 0004  
                  _DimmerIntrPointSelect 1D71                             __size_of_ISR 000F  
             ??_getMain_All_Error_Status 0020                __end_of_Flash_Memory_Main 132E  
              __end_of_Flash_Memory_Read 1F0D                  ??_setDimmerLights_SwOff 002F  
                             _setRF_Main 061C                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1C29                        _DimmerLights_Main 128F  
         __size_of_DlyOff_Initialization 0006                    ??_CC2500_WriteCommand 0022  
              __size_of_setMemory_Modify 0013            __end_of_DlyOff_Initialization 1C06  
             __end_of_CC2500_ClearRXFIFO 1BEA                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1BEE            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006E                           _LedPointSelect 1F0D  
                    _DelayOffPointSelect 1E2D                           _getMain_LoadOK 1CD2  
                                clrloop0 1C0D           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 1CD2                     end_of_initialization 0047  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 117A  
                          _DelayTime_1us 1105                        __end_of_setTxData 07A3  
             __end_of_Flash_Memory_Write 122A                                  init_ram 1C06  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 1C07  
                             _setSw_Main 004B                   setDimmerLights_SwOn@sw 002F  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1D2D  
                        ?_getDelayOff_GO 0070                               getBuz_GO@i 0024  
                          _CC2500_TxData 09E4                      ??_CC2500_InitSetREG 0025  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 15B5  
                            ?_getLoad_AD 0070                              ?_getLoad_OK 0070  
                 ??_getMain_Lights_Count 0020                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1C52                   ??_getMain_LightsStatus 0024  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
                    __size_of_TouchPower 0015                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 12C3  
                     _Mcu_Initialization 1D95                 __size_of_CC2500_PowerRST 0043  
                   __end_of_my_MainTimer 15B5                           ?_DelayOff_Main 0070  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1F28  
                __end_of_setPercentValue 0AAA                   __end_of_getMain_LoadOK 1CE0  
               __size_of_CC2500_WriteREG 0021                __end_of_CC2500_InitSetREG 11A4  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 005C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 0B0F                     ?_Flash_Memory_Unlock 0070  
                          ?_RF_RxDisable 0070              ??_getAll_DimmerLights_AdjGO 0020  
        getMain_All_Error_Status@command 0025                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1EF3                     _setRF_Initialization 1C66  
                     _setMemory_LoopSave 1DDF                              _Switch_Main 10E1  
                      __size_of_LED_Main 000C                         ?_getSw_KeyStatus 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1DB9  
                __end_of_getRF_KeyStatus 1D71                        _setMain_Exception 08CA  
                       ??_setMemory_Data 0021                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1E6A                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                     ?_setMain_Exception 0070                      ?_setMemory_LoopSave 0070  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 1D95  
               setMain_Exception@command 003C                     setRF_DimmerLights@on 0020  
               _DimmerIntrIOCPointSelect 1E05          _setDimmerLights_AdjControl$2584 0027  
                      getSw_KeyStatus@sw 0024                        __size_of_TMR1_ISR 0028  
          __size_of_getDimmerLights_Line 0013                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR1_Set 000C            __size_of_setDimmerLights_Main 0059  
                         __end_of_setLED 16A2            __size_of_setDimmerLights_Line 0015  
          __size_of_setDimmerLights_SwOn 003D                           __end_of_setBuz 17A7  
                    ??_setMain_Exception 0036                     _CC2500_FrequencyCabr 1C71  
             __size_of_Flash_Memory_Main 0036               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 1603  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 122A  
                        ?_LedPointSelect 0070                                _Load_Main 0306  
                            __end_of_ISR 0013                          ?_getMain_LoadOK 0070  
                       _getDimmer_LoadOK 1C39                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 0005                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1F81  
        __size_of_setTemp_Initialization 0001                     ??_setMemory_LoopSave 0020  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 0EA3                           ??_RF_RxDisable 0024  
                    __size_of_getLoad_AD 0081                             ?_Buzzer_Main 0070  
                    __size_of_getLoad_OK 0008                       _set_TimeoutCleared 1BF6  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0015  
                              _VarErrLED 01DA                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0064                      __size_of_getTemp_AD 0037  
                 ?_setLED_Initialization 0070                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                __end_of_setMain_Exception 0926  
              __size_of_CC2500_WriteByte 0014                                _Temp_Main 1BE3  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D1                  setRF_DimmerValue@lights 0066  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00D3  
                            __pdataBANK4 0245                _getAll_DimmerLights_AdjGO 1D3E  
                               ??_setLED 0023                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0039  
       __end_of_getMain_All_Error_Status 128F                         _CC2500_SIDLEMode 1BEE  
             __size_of_DimmerLights_Main 0034                __end_of_setRF_DimmerValue 125C  
                     setMemory_Data@data 0020                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
         _getAll_DimmerLights_AdjGO$2563 0022                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                       _setMemory_Modify 1DCC                               ?_Load_Main 0070  
                          __pcstackBANK0 0020                            __pcstackBANK1 00E9  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0089                            DlyOff_Main@sw 0038  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 005D                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 01A0  
                          _DimmerLights2 01AF                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 001C            __end_of_setLoad_AH_AL_Restore 1F44  
               setRFSW_AdjControl@status 0069                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006E                           getRxData@error 006C  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 00C8  
                         Load_Main@adjgo 002C                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                         ?_getRF_KeyStatus 0070  
                         Load_Main@error 002E                   _setTemp_Initialization 1BD6  
                              _getBuz_GO 1D4F      __end_of_Flash_Memory_Initialization 061C  
            _Flash_Memory_Initialization 0540                                 ?___awdiv 0020  
                              __ptext100 1D1D                                __ptext101 1D0D  
                              __ptext110 1494                                __ptext102 1DB9  
                              __ptext111 117A                                __ptext103 174E  
                              __ptext120 1E55                                __ptext112 1F62  
                              __ptext104 16A2                                __ptext121 1E19  
                              __ptext113 107B                                __ptext105 1C21  
                              __ptext130 13D8                                __ptext122 1520  
                              __ptext114 1C71                                __ptext106 1C00  
                              __ptext131 1E05                                __ptext123 1BD7  
                              __ptext115 1105                                __ptext107 1E2D  
                              __ptext116 1BEA                                __ptext108 1E6A  
                              __ptext125 1152                                __ptext117 1BE6  
                              __ptext109 1BEE                                 ?___ftadd 0041  
                              __ptext126 01BA                                __ptext118 1EC1  
                              __ptext127 1D71                                __ptext119 1BF6  
                              __ptext128 1CE0                                __ptext129 1C19  
                              _getRxData 0D6E                                 ?___ftdiv 002E  
                               ?___ftneg 003E                                 ?___ftmul 002E  
                               ?___fttol 004E                    __size_of_my_MainTimer 004B  
                __end_of_setRFSW_Control 1652            __size_of_setSw_Initialization 0008  
         __size_of_Buzzer_Initialization 0003                         getMain_LoadOK@ok 0022  
          __end_of_Buzzer_Initialization 1BDA                         getPercentValue@i 005F  
                       setPercentValue@i 005F                            ??_setLog_Code 002D  
               getDimmerLights_Line@line 0021                       __end_of_TouchPower 107B  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0026  
                        DelayTimejudge@j 0027                          DelayTimejudge@k 0028  
                    __size_of_setSw_Main 016F           __size_of_setDimmerLights_AdjRF 0023  
          __end_of_setDimmerLights_AdjRF 10E1                   CC2500_WriteByte@loop_a 0021  
                 _DimmerLights_Main$2501 0069                                _r_address 00D4  
         __size_of_setDimmerLights_SwOff 0049           __size_of_myMain_Initialization 000F  
          __end_of_setDimmerLights_SwOff 1520             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1D0D                           __size_of_getAD 0020  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1E41  
                    __end_of_setLED_Main 1454                         ??_getDelayOff_GO 0022  
                    _DimmerLightsIntrIOC 00CF                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 1BE3             setDimmerLights_SwOff@command 002F  
                      _CC2500_rfSettings 102F                                 _LED_Main 1CA1  
                        SwPointSelect@sw 0021                                clear_ram0 1C0C  
               CC2500_InitPATable@loop_d 0027               __size_of_setMain_Exception 005C  
                           _my_MainTimer 156A                                _setTxData 06E4  
    __end_of_DimmerLights_Initialization 1EC1              _DimmerLights_Initialization 1EAA  
                     _CC2500_ClearRXFIFO 1BE6                       _CC2500_ClearTXFIFO 1BEA  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0024  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 0814  
                      ??_Timeout_Counter 0020                               ?_getBuz_GO 0020  
               __size_of_getPercentValue 0065                 setRF_DimmerLights@status 0023  
            __size_of_setRFSW_AdjControl 0040                       _Flash_Memory_Write 11FB  
                             ?_getRxData 0070                             ??_getLoad_AD 0024  
                               _TMR1_ISR 1152                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                             ??_getLoad_OK 0020  
                               _TMR1_Set 1CB9                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 0141                     __end_of_RF_RxDisable 1CFE  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1EDA  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1DA7  
                DlyOff_Initialization@sw 0022                    getSw_KeyStatus@status 0023  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0032  
                    ?_Flash_Memory_Write 0070                         setRF_Main@loop_f 00E9  
                  __size_of_setTemp_Main 00A5                  __size_of_setDelayOff_GO 005D  
           ??_setDimmerLights_AdjControl 0025                                 _DelayOff 0078  
                           setSw_Main@sw 0033         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0029                         __size_of_IOC_ISR 000F  
           ?_setDimmerLights_IntrControl 0070           getMain_All_Error_Status@status 0026  
                       __size_of_IOC_Set 000C             __end_of_Flash_Memory_Erasing 1C95  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 1364  
                  _DlyOff_Initialization 1C00                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1BF2  
                       __size_of_WDT_Set 000B                    setRFSW_Control@status 0032  
                setMain_Exception@status 003B                       __end_of_getLoad_AD 0C5E  
                     __end_of_getLoad_OK 1C39                    _Switch_Initialization 1CC5  
      __size_of_getMain_All_Error_Status 0033                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0063                ?_getMain_All_Error_Status 0070  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 139B  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1E19  
                      getLoad_AD@channel 0026             Flash_Memory_Initialization@i 0063  
                               _SwDetect 00D2                              ??_Temp_Main 002F  
                      setRFSW_Control@sw 0033            _getMain_All_Error_Status$7094 0021  
          _getMain_All_Error_Status$7095 0023                 __end_of_getDimmer_LoadOK 1C41  
                    _Load_Initialization 1BFB                                setLED@led 0023  
                ??_DimmerIntrPointSelect 0070      __size_of_setDimmerLights_AdjControl 0035  
                           _setTemp_Main 0DFE                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                         __size_of___ftneg 0009  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
               setDimmerLights_SwOn@idle 002E                                 ___awtoft 109C  
                       ??_LedPointSelect 0020                                 ___ftpack 0983  
          __size_of_getMain_Lights_Count 0016                         ??_getMain_LoadOK 0021  
          __size_of_getMain_LightsStatus 002D                        getTemp_AD@channel 0025  
                           ??_setRF_Main 006D                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1416               __end_of_setRF_DimmerLights 08CA  
               ?_DelayOff_Initialization 0070                         getDelayOff_GO@go 0023  
                       getDelayOff_GO@sw 0022                         setDelayOff_GO@sw 002E  
     __size_of_getAll_DimmerLights_AdjGO 0011                     ?_Load_Initialization 0070  
                               __ptext10 1BE0                                 __ptext11 1BD6  
                               __ptext20 1CC5                                 __ptext12 10E1  
                               __ptext21 1C41                                 __ptext13 004B  
                               __ptext30 139B                                 __ptext22 1066  
                               __ptext14 0800                                 __ptext31 1454  
                               __ptext23 1BDD                                 __ptext15 12C3  
                               __ptext40 09E4                                 __ptext32 122A  
                               __ptext24 061C                                 __ptext16 1F81  
                               __ptext41 1BDA                                 __ptext33 10BE  
                               __ptext25 0D6E                                 __ptext17 1E41  
                               __ptext50 0306                                 __ptext42 1C66  
                               __ptext34 0AAA                                 __ptext26 132E  
                               __ptext18 08CA                                 __ptext51 1CD2  
                               __ptext43 1D95                                 __ptext35 0F4C  
                               __ptext27 1DDF                                 __ptext19 1DF2  
                               __ptext60 1D2D                                 __ptext52 1C39  
                               __ptext44 1C5B                                 __ptext36 1DCC  
                               __ptext28 0B75                                 __ptext61 12F8  
                               __ptext53 1E94                                 __ptext45 1CB9  
                               __ptext37 1D60                                 __ptext29 1603  
                               __ptext70 17A7                                 __ptext62 15B5  
                               __ptext54 1D3E                                 __ptext46 1EDA  
                               __ptext38 1D4F                                 __ptext71 0B0F  
                               __ptext63 1C89                                 __ptext55 1BFB  
                               __ptext47 1CAD                                 __ptext39 1CEF  
                               __ptext80 109C                                 __ptext72 0CE5  
                               __ptext64 0540                                 __ptext56 1F28  
                               __ptext48 1BF2                                 __ptext81 0983  
                               __ptext73 06E4                                 __ptext65 1C7D  
                               __ptext57 1CA1                                 __ptext49 1C12  
                               __ptext90 1BD5                                 __ptext82 1652  
                               __ptext74 086E                                 __ptext66 11FB  
                               __ptext58 1416                                 __ptext91 1C29  
                               __ptext83 1F0D                                 __ptext75 0A45  
                               __ptext67 1C52                                 __ptext59 1C95  
                               __ptext92 07A3                                 __ptext84 1E7F  
                               __ptext76 0C5E                                 __ptext68 1EF3  
                               __ptext93 0814                                 __ptext85 125C  
                               __ptext77 1C49                                 __ptext69 128F  
                               __ptext94 14D7                                 __ptext86 11CE  
                               __ptext78 0EA3                                 __ptext95 1FA0  
                               __ptext87 1C31                                 __ptext79 044A  
                               __ptext96 1F44                                 __ptext88 1EAA  
                               __ptext97 0926                                 __ptext89 112B  
                               __ptext98 11A4                                 __ptext99 1D83  
                               __product 0245            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 ??_getDimmerLights_Status 0022  
         __size_of_Dimmer_Initialization 0001             __end_of_getDimmerLights_Line 1E05  
          __end_of_Dimmer_Initialization 1BD6             __end_of_setDimmerLights_Main 1800  
           __end_of_setDimmerLights_Line 1E94                         Switch_Main@error 003E  
           __end_of_setDimmerLights_SwOn 13D8                   getDimmer_LoadOK@status 0020  
                           ??_setSw_Main 0031                            setLED@command 0022  
                          __size_of_main 0058                              _setRF_Learn 0800  
               __end_of_CC2500_SIDLEMode 1BF2               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 1E41               CC2500_WriteCommand@command 0023  
                   setRF_Main@Receive_OK 00EA                __size_of_setDimmerReClock 0008  
         setDimmerLights_AdjControl@idle 0026                       _CC2500_InitPATable 1F62  
               __end_of_setMemory_Modify 1DDF            setDimmerLights_Trigger@lights 0024  
                     __end_of_setRF_Main 06E4                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012              setDimmerLights_ErrorClose@i 0034  
                   _CC2500_patable_vaule 105E                              ??_getRxData 006B  
                           getLoad_OK@ok 0020         setDimmerLights_TriggerAdj@lights 0024  
                               main@argc 00EC                                 main@argv 00EE  
                    ?_CC2500_InitPATable 0070                     _getSw_KeyStatus$6347 0021  
                   _getSw_KeyStatus$6348 0022                          _CC2500_PowerRST 1494  
               __size_of_getSw_KeyStatus 001F              __end_of_Flash_Memory_Modify 1603  
                      ??_getPercentValue 005C                              _setLog_Code 132E  
            __end_of_Flash_Memory_Unlock 1C5B                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 107B                       __end_of_setSw_Main 01BA  
                  ??_Load_Initialization 0022                            _Transceive_OK 03E9  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 11A4  
                            pic14e$flags 007E             ??_setDimmerLights_IntrIOC_GO 0072  
             setDimmerLights_Line@lights 0020             ??_setDimmerLights_ErrorClose 0031  
                setDimmerLights_SwOff@sw 0030        __end_of_getAll_DimmerLights_AdjGO 1D4F  
            __size_of_setMemory_LoopSave 0013                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1152  
__size_of_setDimmerLights_Initialization 0027           _setDimmerLights_Initialization 112B  
            __end_of_setDimmerLights_Adj 0B75                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 000F                        _RF_Initialization 1BDA  
   __size_of_setDimmerLights_IntrControl 014C                              getLoad_AD@i 0029  
                            getLoad_AD@j 0028                              getLoad_AD@k 0027  
                   _Flash_Memory_Erasing 1C89                       ?_RF_Initialization 0070  
                             _SPI0Buffer 007B          __end_of_DelayOff_Initialization 1C29  
    __size_of_setDimmerLights_IntrIOC_GO 003E      __size_of_setDimmerLights_ErrorClose 005A  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1C31  
     __end_of_setDimmerLights_AdjControl 12F8               _setDimmerLights_AdjControl 12C3  
                    ??_RF_Initialization 0021                  __size_of_setMemory_Data 000C  
                         _setDelayOff_GO 0926         __size_of_setControl_Lights_Table 0068  
                 __end_of_DelayTimejudge 11CE     __size_of_Flash_Memory_Initialization 00DC  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0036  
                  setMemory_Data@address 0022                    __end_of_DelayTime_1us 112B  
           __end_of_setSw_Initialization 1C49                          _Timeout_Counter 1E55  
        __size_of_getDimmerLights_Status 0010                     getPercentValue@value 005E  
                           _RF_RxDisable 1CEF               __end_of_LED_Initialization 1CA1  
       __size_of_setDimmerLights_Trigger 001E           __end_of_setTemp_Initialization 1BD7  
               __size_of_setPercentValue 0065                  setMemory_Modify@command 0021  
                   setPercentValue@value 005E                __end_of_RF_Initialization 1BDD  
                  __end_of_CC2500_TxData 0A45                    _setLoad_AH_AL_Restore 1F28  
                __end_of_CC2500_PowerRST 14D7           getAll_DimmerLights_AdjGO@adjgo 0021  
